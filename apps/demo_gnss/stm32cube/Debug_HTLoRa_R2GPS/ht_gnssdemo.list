
ht_gnssdemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flash_start  00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  2 .crp_patch    00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  3 .text         0000c928  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .flashpatch   00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  5 .endflash     00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  6 .config       00000000  1ff80000  1ff80000  000275fc  2**0
                  CONTENTS
  7 .optionbytes  00000000  1ff80000  1ff80000  000275fc  2**0
                  CONTENTS
  8 .config2      00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  9 .optionbytes2 00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
 10 .vl_ov        00000280  08017000  08017000  00027000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .vl_isfs      00000000  08017360  08017360  000275fc  2**0
                  CONTENTS
 12 .vl_isf       000001fc  08017400  08017400  00027400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .data         000001a8  20000000  0800c9e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          000030e0  200001a8  0800cb90  000201a8  2**2
                  ALLOC
 15 ._usrstack    00000100  20003288  0800fc70  000201a8  2**0
                  ALLOC
 16 .ARM.attributes 00000028  00000000  00000000  000275fc  2**0
                  CONTENTS, READONLY
 17 .debug_info   0002da1a  00000000  00000000  00027624  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 0000775f  00000000  00000000  0005503e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00011671  00000000  00000000  0005c79d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00001b50  00000000  00000000  0006de10  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00002a38  00000000  00000000  0006f960  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00016195  00000000  00000000  00072398  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    000076fe  00000000  00000000  0008852d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  0008fc2b  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000050e8  00000000  00000000  0008fca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 26 .stab         000000cc  00000000  00000000  00094d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 27 .stabstr      000001b9  00000000  00000000  00094e5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001a8 	.word	0x200001a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c9c8 	.word	0x0800c9c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ac 	.word	0x200001ac
 8000104:	0800c9c8 	.word	0x0800c9c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c08      	adds	r0, r1, #0
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fb6d 	bl	8000adc <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 faef 	bl	80009f0 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb5f 	bl	8000adc <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb55 	bl	8000adc <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fafd 	bl	8000a40 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 faf3 	bl	8000a40 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	; 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fe8b 	bl	8001194 <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	; 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 fcab 	bl	8000de0 <__aeabi_fsub>
 800048a:	f000 fe83 	bl	8001194 <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_fadd>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	4647      	mov	r7, r8
 800049c:	46ce      	mov	lr, r9
 800049e:	0243      	lsls	r3, r0, #9
 80004a0:	0a5b      	lsrs	r3, r3, #9
 80004a2:	0044      	lsls	r4, r0, #1
 80004a4:	0fc2      	lsrs	r2, r0, #31
 80004a6:	469c      	mov	ip, r3
 80004a8:	0048      	lsls	r0, r1, #1
 80004aa:	00dd      	lsls	r5, r3, #3
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	0e24      	lsrs	r4, r4, #24
 80004b0:	0a5b      	lsrs	r3, r3, #9
 80004b2:	0e00      	lsrs	r0, r0, #24
 80004b4:	b580      	push	{r7, lr}
 80004b6:	4698      	mov	r8, r3
 80004b8:	0026      	movs	r6, r4
 80004ba:	4691      	mov	r9, r2
 80004bc:	0fc9      	lsrs	r1, r1, #31
 80004be:	00db      	lsls	r3, r3, #3
 80004c0:	1a27      	subs	r7, r4, r0
 80004c2:	428a      	cmp	r2, r1
 80004c4:	d029      	beq.n	800051a <__aeabi_fadd+0x82>
 80004c6:	2f00      	cmp	r7, #0
 80004c8:	dd15      	ble.n	80004f6 <__aeabi_fadd+0x5e>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d14a      	bne.n	8000564 <__aeabi_fadd+0xcc>
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d000      	beq.n	80004d4 <__aeabi_fadd+0x3c>
 80004d2:	e095      	b.n	8000600 <__aeabi_fadd+0x168>
 80004d4:	08ed      	lsrs	r5, r5, #3
 80004d6:	2cff      	cmp	r4, #255	; 0xff
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x44>
 80004da:	e088      	b.n	80005ee <__aeabi_fadd+0x156>
 80004dc:	026b      	lsls	r3, r5, #9
 80004de:	0a5b      	lsrs	r3, r3, #9
 80004e0:	b2e6      	uxtb	r6, r4
 80004e2:	025b      	lsls	r3, r3, #9
 80004e4:	05f6      	lsls	r6, r6, #23
 80004e6:	0a58      	lsrs	r0, r3, #9
 80004e8:	4330      	orrs	r0, r6
 80004ea:	07d2      	lsls	r2, r2, #31
 80004ec:	4310      	orrs	r0, r2
 80004ee:	bc0c      	pop	{r2, r3}
 80004f0:	4690      	mov	r8, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004f6:	2f00      	cmp	r7, #0
 80004f8:	d000      	beq.n	80004fc <__aeabi_fadd+0x64>
 80004fa:	e087      	b.n	800060c <__aeabi_fadd+0x174>
 80004fc:	1c60      	adds	r0, r4, #1
 80004fe:	b2c0      	uxtb	r0, r0
 8000500:	2801      	cmp	r0, #1
 8000502:	dc00      	bgt.n	8000506 <__aeabi_fadd+0x6e>
 8000504:	e0b6      	b.n	8000674 <__aeabi_fadd+0x1dc>
 8000506:	1aee      	subs	r6, r5, r3
 8000508:	0172      	lsls	r2, r6, #5
 800050a:	d500      	bpl.n	800050e <__aeabi_fadd+0x76>
 800050c:	e0c5      	b.n	800069a <__aeabi_fadd+0x202>
 800050e:	2e00      	cmp	r6, #0
 8000510:	d13d      	bne.n	800058e <__aeabi_fadd+0xf6>
 8000512:	2200      	movs	r2, #0
 8000514:	2600      	movs	r6, #0
 8000516:	2300      	movs	r3, #0
 8000518:	e7e3      	b.n	80004e2 <__aeabi_fadd+0x4a>
 800051a:	2f00      	cmp	r7, #0
 800051c:	dc00      	bgt.n	8000520 <__aeabi_fadd+0x88>
 800051e:	e096      	b.n	800064e <__aeabi_fadd+0x1b6>
 8000520:	2800      	cmp	r0, #0
 8000522:	d05d      	beq.n	80005e0 <__aeabi_fadd+0x148>
 8000524:	2cff      	cmp	r4, #255	; 0xff
 8000526:	d060      	beq.n	80005ea <__aeabi_fadd+0x152>
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	04d2      	lsls	r2, r2, #19
 800052c:	4313      	orrs	r3, r2
 800052e:	2f1b      	cmp	r7, #27
 8000530:	dd00      	ble.n	8000534 <__aeabi_fadd+0x9c>
 8000532:	e0ec      	b.n	800070e <__aeabi_fadd+0x276>
 8000534:	2220      	movs	r2, #32
 8000536:	1bd2      	subs	r2, r2, r7
 8000538:	0018      	movs	r0, r3
 800053a:	4093      	lsls	r3, r2
 800053c:	40f8      	lsrs	r0, r7
 800053e:	1e5a      	subs	r2, r3, #1
 8000540:	4193      	sbcs	r3, r2
 8000542:	4303      	orrs	r3, r0
 8000544:	18ed      	adds	r5, r5, r3
 8000546:	016b      	lsls	r3, r5, #5
 8000548:	d57b      	bpl.n	8000642 <__aeabi_fadd+0x1aa>
 800054a:	3401      	adds	r4, #1
 800054c:	2cff      	cmp	r4, #255	; 0xff
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0xba>
 8000550:	e0b7      	b.n	80006c2 <__aeabi_fadd+0x22a>
 8000552:	2201      	movs	r2, #1
 8000554:	2607      	movs	r6, #7
 8000556:	402a      	ands	r2, r5
 8000558:	086b      	lsrs	r3, r5, #1
 800055a:	4d9a      	ldr	r5, [pc, #616]	; (80007c4 <__aeabi_fadd+0x32c>)
 800055c:	401d      	ands	r5, r3
 800055e:	4315      	orrs	r5, r2
 8000560:	402e      	ands	r6, r5
 8000562:	e029      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000564:	2cff      	cmp	r4, #255	; 0xff
 8000566:	d0b5      	beq.n	80004d4 <__aeabi_fadd+0x3c>
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	04d2      	lsls	r2, r2, #19
 800056c:	4313      	orrs	r3, r2
 800056e:	2f1b      	cmp	r7, #27
 8000570:	dd00      	ble.n	8000574 <__aeabi_fadd+0xdc>
 8000572:	e0b2      	b.n	80006da <__aeabi_fadd+0x242>
 8000574:	2220      	movs	r2, #32
 8000576:	1bd2      	subs	r2, r2, r7
 8000578:	0019      	movs	r1, r3
 800057a:	4093      	lsls	r3, r2
 800057c:	40f9      	lsrs	r1, r7
 800057e:	1e5a      	subs	r2, r3, #1
 8000580:	4193      	sbcs	r3, r2
 8000582:	430b      	orrs	r3, r1
 8000584:	1aed      	subs	r5, r5, r3
 8000586:	016b      	lsls	r3, r5, #5
 8000588:	d55b      	bpl.n	8000642 <__aeabi_fadd+0x1aa>
 800058a:	01ad      	lsls	r5, r5, #6
 800058c:	09ae      	lsrs	r6, r5, #6
 800058e:	0030      	movs	r0, r6
 8000590:	f000 ff80 	bl	8001494 <__clzsi2>
 8000594:	3805      	subs	r0, #5
 8000596:	4086      	lsls	r6, r0
 8000598:	4284      	cmp	r4, r0
 800059a:	dc65      	bgt.n	8000668 <__aeabi_fadd+0x1d0>
 800059c:	1b04      	subs	r4, r0, r4
 800059e:	0033      	movs	r3, r6
 80005a0:	2020      	movs	r0, #32
 80005a2:	3401      	adds	r4, #1
 80005a4:	40e3      	lsrs	r3, r4
 80005a6:	1b04      	subs	r4, r0, r4
 80005a8:	40a6      	lsls	r6, r4
 80005aa:	1e75      	subs	r5, r6, #1
 80005ac:	41ae      	sbcs	r6, r5
 80005ae:	4333      	orrs	r3, r6
 80005b0:	2607      	movs	r6, #7
 80005b2:	001d      	movs	r5, r3
 80005b4:	2400      	movs	r4, #0
 80005b6:	401e      	ands	r6, r3
 80005b8:	2201      	movs	r2, #1
 80005ba:	464b      	mov	r3, r9
 80005bc:	401a      	ands	r2, r3
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d004      	beq.n	80005cc <__aeabi_fadd+0x134>
 80005c2:	230f      	movs	r3, #15
 80005c4:	402b      	ands	r3, r5
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d000      	beq.n	80005cc <__aeabi_fadd+0x134>
 80005ca:	3504      	adds	r5, #4
 80005cc:	016b      	lsls	r3, r5, #5
 80005ce:	d400      	bmi.n	80005d2 <__aeabi_fadd+0x13a>
 80005d0:	e780      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80005d2:	3401      	adds	r4, #1
 80005d4:	b2e6      	uxtb	r6, r4
 80005d6:	2cff      	cmp	r4, #255	; 0xff
 80005d8:	d12f      	bne.n	800063a <__aeabi_fadd+0x1a2>
 80005da:	26ff      	movs	r6, #255	; 0xff
 80005dc:	2300      	movs	r3, #0
 80005de:	e780      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d152      	bne.n	800068a <__aeabi_fadd+0x1f2>
 80005e4:	2cff      	cmp	r4, #255	; 0xff
 80005e6:	d000      	beq.n	80005ea <__aeabi_fadd+0x152>
 80005e8:	e774      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80005ea:	000a      	movs	r2, r1
 80005ec:	08ed      	lsrs	r5, r5, #3
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d0f3      	beq.n	80005da <__aeabi_fadd+0x142>
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	03db      	lsls	r3, r3, #15
 80005f6:	432b      	orrs	r3, r5
 80005f8:	025b      	lsls	r3, r3, #9
 80005fa:	0a5b      	lsrs	r3, r3, #9
 80005fc:	26ff      	movs	r6, #255	; 0xff
 80005fe:	e770      	b.n	80004e2 <__aeabi_fadd+0x4a>
 8000600:	3f01      	subs	r7, #1
 8000602:	2f00      	cmp	r7, #0
 8000604:	d0be      	beq.n	8000584 <__aeabi_fadd+0xec>
 8000606:	2cff      	cmp	r4, #255	; 0xff
 8000608:	d1b1      	bne.n	800056e <__aeabi_fadd+0xd6>
 800060a:	e763      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800060c:	2c00      	cmp	r4, #0
 800060e:	d047      	beq.n	80006a0 <__aeabi_fadd+0x208>
 8000610:	28ff      	cmp	r0, #255	; 0xff
 8000612:	d069      	beq.n	80006e8 <__aeabi_fadd+0x250>
 8000614:	2480      	movs	r4, #128	; 0x80
 8000616:	04e4      	lsls	r4, r4, #19
 8000618:	427a      	negs	r2, r7
 800061a:	4325      	orrs	r5, r4
 800061c:	2a1b      	cmp	r2, #27
 800061e:	dd00      	ble.n	8000622 <__aeabi_fadd+0x18a>
 8000620:	e0c5      	b.n	80007ae <__aeabi_fadd+0x316>
 8000622:	002c      	movs	r4, r5
 8000624:	2620      	movs	r6, #32
 8000626:	40d4      	lsrs	r4, r2
 8000628:	1ab2      	subs	r2, r6, r2
 800062a:	4095      	lsls	r5, r2
 800062c:	1e6a      	subs	r2, r5, #1
 800062e:	4195      	sbcs	r5, r2
 8000630:	4325      	orrs	r5, r4
 8000632:	1b5d      	subs	r5, r3, r5
 8000634:	0004      	movs	r4, r0
 8000636:	4689      	mov	r9, r1
 8000638:	e7a5      	b.n	8000586 <__aeabi_fadd+0xee>
 800063a:	01ab      	lsls	r3, r5, #6
 800063c:	0a5b      	lsrs	r3, r3, #9
 800063e:	e750      	b.n	80004e2 <__aeabi_fadd+0x4a>
 8000640:	2400      	movs	r4, #0
 8000642:	2201      	movs	r2, #1
 8000644:	464b      	mov	r3, r9
 8000646:	401a      	ands	r2, r3
 8000648:	076b      	lsls	r3, r5, #29
 800064a:	d1ba      	bne.n	80005c2 <__aeabi_fadd+0x12a>
 800064c:	e742      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800064e:	2f00      	cmp	r7, #0
 8000650:	d13b      	bne.n	80006ca <__aeabi_fadd+0x232>
 8000652:	3401      	adds	r4, #1
 8000654:	b2e0      	uxtb	r0, r4
 8000656:	2801      	cmp	r0, #1
 8000658:	dd4a      	ble.n	80006f0 <__aeabi_fadd+0x258>
 800065a:	2cff      	cmp	r4, #255	; 0xff
 800065c:	d0bd      	beq.n	80005da <__aeabi_fadd+0x142>
 800065e:	2607      	movs	r6, #7
 8000660:	18ed      	adds	r5, r5, r3
 8000662:	086d      	lsrs	r5, r5, #1
 8000664:	402e      	ands	r6, r5
 8000666:	e7a7      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000668:	2307      	movs	r3, #7
 800066a:	4d57      	ldr	r5, [pc, #348]	; (80007c8 <__aeabi_fadd+0x330>)
 800066c:	1a24      	subs	r4, r4, r0
 800066e:	4035      	ands	r5, r6
 8000670:	401e      	ands	r6, r3
 8000672:	e7a1      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000674:	2c00      	cmp	r4, #0
 8000676:	d11b      	bne.n	80006b0 <__aeabi_fadd+0x218>
 8000678:	2d00      	cmp	r5, #0
 800067a:	d16e      	bne.n	800075a <__aeabi_fadd+0x2c2>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0x1ea>
 8000680:	e09a      	b.n	80007b8 <__aeabi_fadd+0x320>
 8000682:	000a      	movs	r2, r1
 8000684:	001d      	movs	r5, r3
 8000686:	003c      	movs	r4, r7
 8000688:	e724      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800068a:	3f01      	subs	r7, #1
 800068c:	2f00      	cmp	r7, #0
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x1fa>
 8000690:	e758      	b.n	8000544 <__aeabi_fadd+0xac>
 8000692:	2cff      	cmp	r4, #255	; 0xff
 8000694:	d000      	beq.n	8000698 <__aeabi_fadd+0x200>
 8000696:	e74a      	b.n	800052e <__aeabi_fadd+0x96>
 8000698:	e7a7      	b.n	80005ea <__aeabi_fadd+0x152>
 800069a:	1b5e      	subs	r6, r3, r5
 800069c:	4689      	mov	r9, r1
 800069e:	e776      	b.n	800058e <__aeabi_fadd+0xf6>
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d11c      	bne.n	80006de <__aeabi_fadd+0x246>
 80006a4:	000a      	movs	r2, r1
 80006a6:	28ff      	cmp	r0, #255	; 0xff
 80006a8:	d01f      	beq.n	80006ea <__aeabi_fadd+0x252>
 80006aa:	0004      	movs	r4, r0
 80006ac:	001d      	movs	r5, r3
 80006ae:	e711      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d15d      	bne.n	8000770 <__aeabi_fadd+0x2d8>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d117      	bne.n	80006e8 <__aeabi_fadd+0x250>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	2200      	movs	r2, #0
 80006bc:	03db      	lsls	r3, r3, #15
 80006be:	26ff      	movs	r6, #255	; 0xff
 80006c0:	e70f      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80006c2:	000a      	movs	r2, r1
 80006c4:	26ff      	movs	r6, #255	; 0xff
 80006c6:	2300      	movs	r3, #0
 80006c8:	e70b      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80006ca:	2c00      	cmp	r4, #0
 80006cc:	d121      	bne.n	8000712 <__aeabi_fadd+0x27a>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d166      	bne.n	80007a0 <__aeabi_fadd+0x308>
 80006d2:	28ff      	cmp	r0, #255	; 0xff
 80006d4:	d1e9      	bne.n	80006aa <__aeabi_fadd+0x212>
 80006d6:	001d      	movs	r5, r3
 80006d8:	e787      	b.n	80005ea <__aeabi_fadd+0x152>
 80006da:	2301      	movs	r3, #1
 80006dc:	e752      	b.n	8000584 <__aeabi_fadd+0xec>
 80006de:	1c7a      	adds	r2, r7, #1
 80006e0:	d0a7      	beq.n	8000632 <__aeabi_fadd+0x19a>
 80006e2:	43fa      	mvns	r2, r7
 80006e4:	28ff      	cmp	r0, #255	; 0xff
 80006e6:	d199      	bne.n	800061c <__aeabi_fadd+0x184>
 80006e8:	000a      	movs	r2, r1
 80006ea:	001d      	movs	r5, r3
 80006ec:	24ff      	movs	r4, #255	; 0xff
 80006ee:	e6f1      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d121      	bne.n	8000738 <__aeabi_fadd+0x2a0>
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d04f      	beq.n	8000798 <__aeabi_fadd+0x300>
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d04c      	beq.n	8000796 <__aeabi_fadd+0x2fe>
 80006fc:	18ed      	adds	r5, r5, r3
 80006fe:	016b      	lsls	r3, r5, #5
 8000700:	d59e      	bpl.n	8000640 <__aeabi_fadd+0x1a8>
 8000702:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <__aeabi_fadd+0x330>)
 8000704:	3607      	adds	r6, #7
 8000706:	402e      	ands	r6, r5
 8000708:	2401      	movs	r4, #1
 800070a:	401d      	ands	r5, r3
 800070c:	e754      	b.n	80005b8 <__aeabi_fadd+0x120>
 800070e:	2301      	movs	r3, #1
 8000710:	e718      	b.n	8000544 <__aeabi_fadd+0xac>
 8000712:	28ff      	cmp	r0, #255	; 0xff
 8000714:	d0df      	beq.n	80006d6 <__aeabi_fadd+0x23e>
 8000716:	2480      	movs	r4, #128	; 0x80
 8000718:	04e4      	lsls	r4, r4, #19
 800071a:	427f      	negs	r7, r7
 800071c:	4325      	orrs	r5, r4
 800071e:	2f1b      	cmp	r7, #27
 8000720:	dc4d      	bgt.n	80007be <__aeabi_fadd+0x326>
 8000722:	2620      	movs	r6, #32
 8000724:	1bf6      	subs	r6, r6, r7
 8000726:	002c      	movs	r4, r5
 8000728:	40b5      	lsls	r5, r6
 800072a:	40fc      	lsrs	r4, r7
 800072c:	1e6a      	subs	r2, r5, #1
 800072e:	4195      	sbcs	r5, r2
 8000730:	4325      	orrs	r5, r4
 8000732:	18ed      	adds	r5, r5, r3
 8000734:	0004      	movs	r4, r0
 8000736:	e706      	b.n	8000546 <__aeabi_fadd+0xae>
 8000738:	2d00      	cmp	r5, #0
 800073a:	d0cc      	beq.n	80006d6 <__aeabi_fadd+0x23e>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x2aa>
 8000740:	e753      	b.n	80005ea <__aeabi_fadd+0x152>
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	4660      	mov	r0, ip
 8000746:	03c9      	lsls	r1, r1, #15
 8000748:	4208      	tst	r0, r1
 800074a:	d003      	beq.n	8000754 <__aeabi_fadd+0x2bc>
 800074c:	4640      	mov	r0, r8
 800074e:	4208      	tst	r0, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x2bc>
 8000752:	001d      	movs	r5, r3
 8000754:	2101      	movs	r1, #1
 8000756:	4011      	ands	r1, r2
 8000758:	e747      	b.n	80005ea <__aeabi_fadd+0x152>
 800075a:	2b00      	cmp	r3, #0
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x2c8>
 800075e:	e6b9      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000760:	1aea      	subs	r2, r5, r3
 8000762:	0150      	lsls	r0, r2, #5
 8000764:	d525      	bpl.n	80007b2 <__aeabi_fadd+0x31a>
 8000766:	2607      	movs	r6, #7
 8000768:	1b5d      	subs	r5, r3, r5
 800076a:	402e      	ands	r6, r5
 800076c:	4689      	mov	r9, r1
 800076e:	e723      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000770:	24ff      	movs	r4, #255	; 0xff
 8000772:	2b00      	cmp	r3, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x2e0>
 8000776:	e6ad      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	4660      	mov	r0, ip
 800077c:	03d2      	lsls	r2, r2, #15
 800077e:	4210      	tst	r0, r2
 8000780:	d004      	beq.n	800078c <__aeabi_fadd+0x2f4>
 8000782:	4640      	mov	r0, r8
 8000784:	4210      	tst	r0, r2
 8000786:	d101      	bne.n	800078c <__aeabi_fadd+0x2f4>
 8000788:	001d      	movs	r5, r3
 800078a:	4689      	mov	r9, r1
 800078c:	2201      	movs	r2, #1
 800078e:	464b      	mov	r3, r9
 8000790:	24ff      	movs	r4, #255	; 0xff
 8000792:	401a      	ands	r2, r3
 8000794:	e69e      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000796:	002b      	movs	r3, r5
 8000798:	08dd      	lsrs	r5, r3, #3
 800079a:	000a      	movs	r2, r1
 800079c:	2400      	movs	r4, #0
 800079e:	e69d      	b.n	80004dc <__aeabi_fadd+0x44>
 80007a0:	1c7a      	adds	r2, r7, #1
 80007a2:	d0c6      	beq.n	8000732 <__aeabi_fadd+0x29a>
 80007a4:	43ff      	mvns	r7, r7
 80007a6:	28ff      	cmp	r0, #255	; 0xff
 80007a8:	d1b9      	bne.n	800071e <__aeabi_fadd+0x286>
 80007aa:	001d      	movs	r5, r3
 80007ac:	e71d      	b.n	80005ea <__aeabi_fadd+0x152>
 80007ae:	2501      	movs	r5, #1
 80007b0:	e73f      	b.n	8000632 <__aeabi_fadd+0x19a>
 80007b2:	1e15      	subs	r5, r2, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fadd+0x320>
 80007b6:	e744      	b.n	8000642 <__aeabi_fadd+0x1aa>
 80007b8:	2200      	movs	r2, #0
 80007ba:	2300      	movs	r3, #0
 80007bc:	e691      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80007be:	2501      	movs	r5, #1
 80007c0:	e7b7      	b.n	8000732 <__aeabi_fadd+0x29a>
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	7dffffff 	.word	0x7dffffff
 80007c8:	fbffffff 	.word	0xfbffffff

080007cc <__aeabi_fdiv>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	4657      	mov	r7, sl
 80007d0:	464e      	mov	r6, r9
 80007d2:	4645      	mov	r5, r8
 80007d4:	46de      	mov	lr, fp
 80007d6:	0244      	lsls	r4, r0, #9
 80007d8:	b5e0      	push	{r5, r6, r7, lr}
 80007da:	0046      	lsls	r6, r0, #1
 80007dc:	4688      	mov	r8, r1
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0e36      	lsrs	r6, r6, #24
 80007e2:	0fc7      	lsrs	r7, r0, #31
 80007e4:	2e00      	cmp	r6, #0
 80007e6:	d063      	beq.n	80008b0 <__aeabi_fdiv+0xe4>
 80007e8:	2eff      	cmp	r6, #255	; 0xff
 80007ea:	d024      	beq.n	8000836 <__aeabi_fdiv+0x6a>
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	00e4      	lsls	r4, r4, #3
 80007f0:	04db      	lsls	r3, r3, #19
 80007f2:	431c      	orrs	r4, r3
 80007f4:	2300      	movs	r3, #0
 80007f6:	4699      	mov	r9, r3
 80007f8:	469b      	mov	fp, r3
 80007fa:	3e7f      	subs	r6, #127	; 0x7f
 80007fc:	4643      	mov	r3, r8
 80007fe:	4642      	mov	r2, r8
 8000800:	025d      	lsls	r5, r3, #9
 8000802:	0fd2      	lsrs	r2, r2, #31
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	0a6d      	lsrs	r5, r5, #9
 8000808:	0e1b      	lsrs	r3, r3, #24
 800080a:	4690      	mov	r8, r2
 800080c:	4692      	mov	sl, r2
 800080e:	d065      	beq.n	80008dc <__aeabi_fdiv+0x110>
 8000810:	2bff      	cmp	r3, #255	; 0xff
 8000812:	d055      	beq.n	80008c0 <__aeabi_fdiv+0xf4>
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	2100      	movs	r1, #0
 8000818:	00ed      	lsls	r5, r5, #3
 800081a:	04d2      	lsls	r2, r2, #19
 800081c:	3b7f      	subs	r3, #127	; 0x7f
 800081e:	4315      	orrs	r5, r2
 8000820:	1af6      	subs	r6, r6, r3
 8000822:	4643      	mov	r3, r8
 8000824:	464a      	mov	r2, r9
 8000826:	407b      	eors	r3, r7
 8000828:	2a0f      	cmp	r2, #15
 800082a:	d900      	bls.n	800082e <__aeabi_fdiv+0x62>
 800082c:	e08d      	b.n	800094a <__aeabi_fdiv+0x17e>
 800082e:	486d      	ldr	r0, [pc, #436]	; (80009e4 <__aeabi_fdiv+0x218>)
 8000830:	0092      	lsls	r2, r2, #2
 8000832:	5882      	ldr	r2, [r0, r2]
 8000834:	4697      	mov	pc, r2
 8000836:	2c00      	cmp	r4, #0
 8000838:	d154      	bne.n	80008e4 <__aeabi_fdiv+0x118>
 800083a:	2308      	movs	r3, #8
 800083c:	4699      	mov	r9, r3
 800083e:	3b06      	subs	r3, #6
 8000840:	26ff      	movs	r6, #255	; 0xff
 8000842:	469b      	mov	fp, r3
 8000844:	e7da      	b.n	80007fc <__aeabi_fdiv+0x30>
 8000846:	2500      	movs	r5, #0
 8000848:	4653      	mov	r3, sl
 800084a:	2902      	cmp	r1, #2
 800084c:	d01b      	beq.n	8000886 <__aeabi_fdiv+0xba>
 800084e:	2903      	cmp	r1, #3
 8000850:	d100      	bne.n	8000854 <__aeabi_fdiv+0x88>
 8000852:	e0bf      	b.n	80009d4 <__aeabi_fdiv+0x208>
 8000854:	2901      	cmp	r1, #1
 8000856:	d028      	beq.n	80008aa <__aeabi_fdiv+0xde>
 8000858:	0030      	movs	r0, r6
 800085a:	307f      	adds	r0, #127	; 0x7f
 800085c:	2800      	cmp	r0, #0
 800085e:	dd20      	ble.n	80008a2 <__aeabi_fdiv+0xd6>
 8000860:	076a      	lsls	r2, r5, #29
 8000862:	d004      	beq.n	800086e <__aeabi_fdiv+0xa2>
 8000864:	220f      	movs	r2, #15
 8000866:	402a      	ands	r2, r5
 8000868:	2a04      	cmp	r2, #4
 800086a:	d000      	beq.n	800086e <__aeabi_fdiv+0xa2>
 800086c:	3504      	adds	r5, #4
 800086e:	012a      	lsls	r2, r5, #4
 8000870:	d503      	bpl.n	800087a <__aeabi_fdiv+0xae>
 8000872:	0030      	movs	r0, r6
 8000874:	4a5c      	ldr	r2, [pc, #368]	; (80009e8 <__aeabi_fdiv+0x21c>)
 8000876:	3080      	adds	r0, #128	; 0x80
 8000878:	4015      	ands	r5, r2
 800087a:	28fe      	cmp	r0, #254	; 0xfe
 800087c:	dc03      	bgt.n	8000886 <__aeabi_fdiv+0xba>
 800087e:	01ac      	lsls	r4, r5, #6
 8000880:	0a64      	lsrs	r4, r4, #9
 8000882:	b2c2      	uxtb	r2, r0
 8000884:	e001      	b.n	800088a <__aeabi_fdiv+0xbe>
 8000886:	22ff      	movs	r2, #255	; 0xff
 8000888:	2400      	movs	r4, #0
 800088a:	0264      	lsls	r4, r4, #9
 800088c:	05d2      	lsls	r2, r2, #23
 800088e:	0a60      	lsrs	r0, r4, #9
 8000890:	07db      	lsls	r3, r3, #31
 8000892:	4310      	orrs	r0, r2
 8000894:	4318      	orrs	r0, r3
 8000896:	bc3c      	pop	{r2, r3, r4, r5}
 8000898:	4690      	mov	r8, r2
 800089a:	4699      	mov	r9, r3
 800089c:	46a2      	mov	sl, r4
 800089e:	46ab      	mov	fp, r5
 80008a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a2:	2201      	movs	r2, #1
 80008a4:	1a10      	subs	r0, r2, r0
 80008a6:	281b      	cmp	r0, #27
 80008a8:	dd7c      	ble.n	80009a4 <__aeabi_fdiv+0x1d8>
 80008aa:	2200      	movs	r2, #0
 80008ac:	2400      	movs	r4, #0
 80008ae:	e7ec      	b.n	800088a <__aeabi_fdiv+0xbe>
 80008b0:	2c00      	cmp	r4, #0
 80008b2:	d11d      	bne.n	80008f0 <__aeabi_fdiv+0x124>
 80008b4:	2304      	movs	r3, #4
 80008b6:	4699      	mov	r9, r3
 80008b8:	3b03      	subs	r3, #3
 80008ba:	2600      	movs	r6, #0
 80008bc:	469b      	mov	fp, r3
 80008be:	e79d      	b.n	80007fc <__aeabi_fdiv+0x30>
 80008c0:	3eff      	subs	r6, #255	; 0xff
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d120      	bne.n	8000908 <__aeabi_fdiv+0x13c>
 80008c6:	2102      	movs	r1, #2
 80008c8:	4643      	mov	r3, r8
 80008ca:	464a      	mov	r2, r9
 80008cc:	407b      	eors	r3, r7
 80008ce:	430a      	orrs	r2, r1
 80008d0:	2a0f      	cmp	r2, #15
 80008d2:	d8d8      	bhi.n	8000886 <__aeabi_fdiv+0xba>
 80008d4:	4845      	ldr	r0, [pc, #276]	; (80009ec <__aeabi_fdiv+0x220>)
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	5882      	ldr	r2, [r0, r2]
 80008da:	4697      	mov	pc, r2
 80008dc:	2d00      	cmp	r5, #0
 80008de:	d119      	bne.n	8000914 <__aeabi_fdiv+0x148>
 80008e0:	2101      	movs	r1, #1
 80008e2:	e7f1      	b.n	80008c8 <__aeabi_fdiv+0xfc>
 80008e4:	230c      	movs	r3, #12
 80008e6:	4699      	mov	r9, r3
 80008e8:	3b09      	subs	r3, #9
 80008ea:	26ff      	movs	r6, #255	; 0xff
 80008ec:	469b      	mov	fp, r3
 80008ee:	e785      	b.n	80007fc <__aeabi_fdiv+0x30>
 80008f0:	0020      	movs	r0, r4
 80008f2:	f000 fdcf 	bl	8001494 <__clzsi2>
 80008f6:	2676      	movs	r6, #118	; 0x76
 80008f8:	1f43      	subs	r3, r0, #5
 80008fa:	409c      	lsls	r4, r3
 80008fc:	2300      	movs	r3, #0
 80008fe:	4276      	negs	r6, r6
 8000900:	1a36      	subs	r6, r6, r0
 8000902:	4699      	mov	r9, r3
 8000904:	469b      	mov	fp, r3
 8000906:	e779      	b.n	80007fc <__aeabi_fdiv+0x30>
 8000908:	464a      	mov	r2, r9
 800090a:	2303      	movs	r3, #3
 800090c:	431a      	orrs	r2, r3
 800090e:	4691      	mov	r9, r2
 8000910:	2103      	movs	r1, #3
 8000912:	e786      	b.n	8000822 <__aeabi_fdiv+0x56>
 8000914:	0028      	movs	r0, r5
 8000916:	f000 fdbd 	bl	8001494 <__clzsi2>
 800091a:	1f43      	subs	r3, r0, #5
 800091c:	1836      	adds	r6, r6, r0
 800091e:	409d      	lsls	r5, r3
 8000920:	3676      	adds	r6, #118	; 0x76
 8000922:	2100      	movs	r1, #0
 8000924:	e77d      	b.n	8000822 <__aeabi_fdiv+0x56>
 8000926:	2480      	movs	r4, #128	; 0x80
 8000928:	2300      	movs	r3, #0
 800092a:	03e4      	lsls	r4, r4, #15
 800092c:	22ff      	movs	r2, #255	; 0xff
 800092e:	e7ac      	b.n	800088a <__aeabi_fdiv+0xbe>
 8000930:	2500      	movs	r5, #0
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	03db      	lsls	r3, r3, #15
 8000936:	421c      	tst	r4, r3
 8000938:	d028      	beq.n	800098c <__aeabi_fdiv+0x1c0>
 800093a:	421d      	tst	r5, r3
 800093c:	d126      	bne.n	800098c <__aeabi_fdiv+0x1c0>
 800093e:	432b      	orrs	r3, r5
 8000940:	025c      	lsls	r4, r3, #9
 8000942:	0a64      	lsrs	r4, r4, #9
 8000944:	4643      	mov	r3, r8
 8000946:	22ff      	movs	r2, #255	; 0xff
 8000948:	e79f      	b.n	800088a <__aeabi_fdiv+0xbe>
 800094a:	0162      	lsls	r2, r4, #5
 800094c:	016c      	lsls	r4, r5, #5
 800094e:	42a2      	cmp	r2, r4
 8000950:	d224      	bcs.n	800099c <__aeabi_fdiv+0x1d0>
 8000952:	211b      	movs	r1, #27
 8000954:	2500      	movs	r5, #0
 8000956:	3e01      	subs	r6, #1
 8000958:	2701      	movs	r7, #1
 800095a:	0010      	movs	r0, r2
 800095c:	006d      	lsls	r5, r5, #1
 800095e:	0052      	lsls	r2, r2, #1
 8000960:	2800      	cmp	r0, #0
 8000962:	db01      	blt.n	8000968 <__aeabi_fdiv+0x19c>
 8000964:	4294      	cmp	r4, r2
 8000966:	d801      	bhi.n	800096c <__aeabi_fdiv+0x1a0>
 8000968:	1b12      	subs	r2, r2, r4
 800096a:	433d      	orrs	r5, r7
 800096c:	3901      	subs	r1, #1
 800096e:	2900      	cmp	r1, #0
 8000970:	d1f3      	bne.n	800095a <__aeabi_fdiv+0x18e>
 8000972:	0014      	movs	r4, r2
 8000974:	1e62      	subs	r2, r4, #1
 8000976:	4194      	sbcs	r4, r2
 8000978:	4325      	orrs	r5, r4
 800097a:	e76d      	b.n	8000858 <__aeabi_fdiv+0x8c>
 800097c:	46ba      	mov	sl, r7
 800097e:	4659      	mov	r1, fp
 8000980:	0025      	movs	r5, r4
 8000982:	4653      	mov	r3, sl
 8000984:	2902      	cmp	r1, #2
 8000986:	d000      	beq.n	800098a <__aeabi_fdiv+0x1be>
 8000988:	e761      	b.n	800084e <__aeabi_fdiv+0x82>
 800098a:	e77c      	b.n	8000886 <__aeabi_fdiv+0xba>
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	03db      	lsls	r3, r3, #15
 8000990:	431c      	orrs	r4, r3
 8000992:	0264      	lsls	r4, r4, #9
 8000994:	0a64      	lsrs	r4, r4, #9
 8000996:	003b      	movs	r3, r7
 8000998:	22ff      	movs	r2, #255	; 0xff
 800099a:	e776      	b.n	800088a <__aeabi_fdiv+0xbe>
 800099c:	1b12      	subs	r2, r2, r4
 800099e:	211a      	movs	r1, #26
 80009a0:	2501      	movs	r5, #1
 80009a2:	e7d9      	b.n	8000958 <__aeabi_fdiv+0x18c>
 80009a4:	369e      	adds	r6, #158	; 0x9e
 80009a6:	002a      	movs	r2, r5
 80009a8:	40b5      	lsls	r5, r6
 80009aa:	002c      	movs	r4, r5
 80009ac:	40c2      	lsrs	r2, r0
 80009ae:	1e65      	subs	r5, r4, #1
 80009b0:	41ac      	sbcs	r4, r5
 80009b2:	4314      	orrs	r4, r2
 80009b4:	0762      	lsls	r2, r4, #29
 80009b6:	d004      	beq.n	80009c2 <__aeabi_fdiv+0x1f6>
 80009b8:	220f      	movs	r2, #15
 80009ba:	4022      	ands	r2, r4
 80009bc:	2a04      	cmp	r2, #4
 80009be:	d000      	beq.n	80009c2 <__aeabi_fdiv+0x1f6>
 80009c0:	3404      	adds	r4, #4
 80009c2:	0162      	lsls	r2, r4, #5
 80009c4:	d403      	bmi.n	80009ce <__aeabi_fdiv+0x202>
 80009c6:	01a4      	lsls	r4, r4, #6
 80009c8:	0a64      	lsrs	r4, r4, #9
 80009ca:	2200      	movs	r2, #0
 80009cc:	e75d      	b.n	800088a <__aeabi_fdiv+0xbe>
 80009ce:	2201      	movs	r2, #1
 80009d0:	2400      	movs	r4, #0
 80009d2:	e75a      	b.n	800088a <__aeabi_fdiv+0xbe>
 80009d4:	2480      	movs	r4, #128	; 0x80
 80009d6:	03e4      	lsls	r4, r4, #15
 80009d8:	432c      	orrs	r4, r5
 80009da:	0264      	lsls	r4, r4, #9
 80009dc:	0a64      	lsrs	r4, r4, #9
 80009de:	22ff      	movs	r2, #255	; 0xff
 80009e0:	e753      	b.n	800088a <__aeabi_fdiv+0xbe>
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	0800c7e4 	.word	0x0800c7e4
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	0800c824 	.word	0x0800c824

080009f0 <__eqsf2>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	0042      	lsls	r2, r0, #1
 80009f4:	024e      	lsls	r6, r1, #9
 80009f6:	004c      	lsls	r4, r1, #1
 80009f8:	0245      	lsls	r5, r0, #9
 80009fa:	0a6d      	lsrs	r5, r5, #9
 80009fc:	0e12      	lsrs	r2, r2, #24
 80009fe:	0fc3      	lsrs	r3, r0, #31
 8000a00:	0a76      	lsrs	r6, r6, #9
 8000a02:	0e24      	lsrs	r4, r4, #24
 8000a04:	0fc9      	lsrs	r1, r1, #31
 8000a06:	2aff      	cmp	r2, #255	; 0xff
 8000a08:	d00f      	beq.n	8000a2a <__eqsf2+0x3a>
 8000a0a:	2cff      	cmp	r4, #255	; 0xff
 8000a0c:	d011      	beq.n	8000a32 <__eqsf2+0x42>
 8000a0e:	2001      	movs	r0, #1
 8000a10:	42a2      	cmp	r2, r4
 8000a12:	d000      	beq.n	8000a16 <__eqsf2+0x26>
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
 8000a16:	42b5      	cmp	r5, r6
 8000a18:	d1fc      	bne.n	8000a14 <__eqsf2+0x24>
 8000a1a:	428b      	cmp	r3, r1
 8000a1c:	d00d      	beq.n	8000a3a <__eqsf2+0x4a>
 8000a1e:	2a00      	cmp	r2, #0
 8000a20:	d1f8      	bne.n	8000a14 <__eqsf2+0x24>
 8000a22:	0028      	movs	r0, r5
 8000a24:	1e45      	subs	r5, r0, #1
 8000a26:	41a8      	sbcs	r0, r5
 8000a28:	e7f4      	b.n	8000a14 <__eqsf2+0x24>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	2d00      	cmp	r5, #0
 8000a2e:	d1f1      	bne.n	8000a14 <__eqsf2+0x24>
 8000a30:	e7eb      	b.n	8000a0a <__eqsf2+0x1a>
 8000a32:	2001      	movs	r0, #1
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d1ed      	bne.n	8000a14 <__eqsf2+0x24>
 8000a38:	e7e9      	b.n	8000a0e <__eqsf2+0x1e>
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	e7ea      	b.n	8000a14 <__eqsf2+0x24>
 8000a3e:	46c0      	nop			; (mov r8, r8)

08000a40 <__gesf2>:
 8000a40:	b570      	push	{r4, r5, r6, lr}
 8000a42:	004a      	lsls	r2, r1, #1
 8000a44:	024e      	lsls	r6, r1, #9
 8000a46:	0245      	lsls	r5, r0, #9
 8000a48:	0044      	lsls	r4, r0, #1
 8000a4a:	0a6d      	lsrs	r5, r5, #9
 8000a4c:	0e24      	lsrs	r4, r4, #24
 8000a4e:	0fc3      	lsrs	r3, r0, #31
 8000a50:	0a76      	lsrs	r6, r6, #9
 8000a52:	0e12      	lsrs	r2, r2, #24
 8000a54:	0fc9      	lsrs	r1, r1, #31
 8000a56:	2cff      	cmp	r4, #255	; 0xff
 8000a58:	d015      	beq.n	8000a86 <__gesf2+0x46>
 8000a5a:	2aff      	cmp	r2, #255	; 0xff
 8000a5c:	d00e      	beq.n	8000a7c <__gesf2+0x3c>
 8000a5e:	2c00      	cmp	r4, #0
 8000a60:	d115      	bne.n	8000a8e <__gesf2+0x4e>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d101      	bne.n	8000a6a <__gesf2+0x2a>
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	d01c      	beq.n	8000aa4 <__gesf2+0x64>
 8000a6a:	2d00      	cmp	r5, #0
 8000a6c:	d014      	beq.n	8000a98 <__gesf2+0x58>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d027      	beq.n	8000ac2 <__gesf2+0x82>
 8000a72:	2002      	movs	r0, #2
 8000a74:	3b01      	subs	r3, #1
 8000a76:	4018      	ands	r0, r3
 8000a78:	3801      	subs	r0, #1
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	d0ee      	beq.n	8000a5e <__gesf2+0x1e>
 8000a80:	2002      	movs	r0, #2
 8000a82:	4240      	negs	r0, r0
 8000a84:	e7f9      	b.n	8000a7a <__gesf2+0x3a>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	d1fa      	bne.n	8000a80 <__gesf2+0x40>
 8000a8a:	2aff      	cmp	r2, #255	; 0xff
 8000a8c:	d00e      	beq.n	8000aac <__gesf2+0x6c>
 8000a8e:	2a00      	cmp	r2, #0
 8000a90:	d10e      	bne.n	8000ab0 <__gesf2+0x70>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d0ed      	beq.n	8000a72 <__gesf2+0x32>
 8000a96:	e00b      	b.n	8000ab0 <__gesf2+0x70>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	3901      	subs	r1, #1
 8000a9c:	4399      	bics	r1, r3
 8000a9e:	0008      	movs	r0, r1
 8000aa0:	3001      	adds	r0, #1
 8000aa2:	e7ea      	b.n	8000a7a <__gesf2+0x3a>
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d0e7      	beq.n	8000a7a <__gesf2+0x3a>
 8000aaa:	e7e2      	b.n	8000a72 <__gesf2+0x32>
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d1e7      	bne.n	8000a80 <__gesf2+0x40>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	d1de      	bne.n	8000a72 <__gesf2+0x32>
 8000ab4:	4294      	cmp	r4, r2
 8000ab6:	dd05      	ble.n	8000ac4 <__gesf2+0x84>
 8000ab8:	2102      	movs	r1, #2
 8000aba:	1e58      	subs	r0, r3, #1
 8000abc:	4008      	ands	r0, r1
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7db      	b.n	8000a7a <__gesf2+0x3a>
 8000ac2:	2400      	movs	r4, #0
 8000ac4:	42a2      	cmp	r2, r4
 8000ac6:	dc04      	bgt.n	8000ad2 <__gesf2+0x92>
 8000ac8:	42b5      	cmp	r5, r6
 8000aca:	d8d2      	bhi.n	8000a72 <__gesf2+0x32>
 8000acc:	2000      	movs	r0, #0
 8000ace:	42b5      	cmp	r5, r6
 8000ad0:	d2d3      	bcs.n	8000a7a <__gesf2+0x3a>
 8000ad2:	1e58      	subs	r0, r3, #1
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	4398      	bics	r0, r3
 8000ad8:	3001      	adds	r0, #1
 8000ada:	e7ce      	b.n	8000a7a <__gesf2+0x3a>

08000adc <__lesf2>:
 8000adc:	b530      	push	{r4, r5, lr}
 8000ade:	0042      	lsls	r2, r0, #1
 8000ae0:	0244      	lsls	r4, r0, #9
 8000ae2:	024d      	lsls	r5, r1, #9
 8000ae4:	0fc3      	lsrs	r3, r0, #31
 8000ae6:	0048      	lsls	r0, r1, #1
 8000ae8:	0a64      	lsrs	r4, r4, #9
 8000aea:	0e12      	lsrs	r2, r2, #24
 8000aec:	0a6d      	lsrs	r5, r5, #9
 8000aee:	0e00      	lsrs	r0, r0, #24
 8000af0:	0fc9      	lsrs	r1, r1, #31
 8000af2:	2aff      	cmp	r2, #255	; 0xff
 8000af4:	d012      	beq.n	8000b1c <__lesf2+0x40>
 8000af6:	28ff      	cmp	r0, #255	; 0xff
 8000af8:	d00c      	beq.n	8000b14 <__lesf2+0x38>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d112      	bne.n	8000b24 <__lesf2+0x48>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d119      	bne.n	8000b36 <__lesf2+0x5a>
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d117      	bne.n	8000b36 <__lesf2+0x5a>
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d02b      	beq.n	8000b62 <__lesf2+0x86>
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	4018      	ands	r0, r3
 8000b10:	3801      	subs	r0, #1
 8000b12:	e026      	b.n	8000b62 <__lesf2+0x86>
 8000b14:	2d00      	cmp	r5, #0
 8000b16:	d0f0      	beq.n	8000afa <__lesf2+0x1e>
 8000b18:	2002      	movs	r0, #2
 8000b1a:	e022      	b.n	8000b62 <__lesf2+0x86>
 8000b1c:	2c00      	cmp	r4, #0
 8000b1e:	d1fb      	bne.n	8000b18 <__lesf2+0x3c>
 8000b20:	28ff      	cmp	r0, #255	; 0xff
 8000b22:	d01f      	beq.n	8000b64 <__lesf2+0x88>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d11f      	bne.n	8000b68 <__lesf2+0x8c>
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d11d      	bne.n	8000b68 <__lesf2+0x8c>
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	4018      	ands	r0, r3
 8000b32:	3801      	subs	r0, #1
 8000b34:	e015      	b.n	8000b62 <__lesf2+0x86>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d00e      	beq.n	8000b58 <__lesf2+0x7c>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d1e5      	bne.n	8000b0a <__lesf2+0x2e>
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4290      	cmp	r0, r2
 8000b42:	dc04      	bgt.n	8000b4e <__lesf2+0x72>
 8000b44:	42ac      	cmp	r4, r5
 8000b46:	d8e0      	bhi.n	8000b0a <__lesf2+0x2e>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	42ac      	cmp	r4, r5
 8000b4c:	d209      	bcs.n	8000b62 <__lesf2+0x86>
 8000b4e:	1e58      	subs	r0, r3, #1
 8000b50:	2301      	movs	r3, #1
 8000b52:	4398      	bics	r0, r3
 8000b54:	3001      	adds	r0, #1
 8000b56:	e004      	b.n	8000b62 <__lesf2+0x86>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	3901      	subs	r1, #1
 8000b5c:	4399      	bics	r1, r3
 8000b5e:	0008      	movs	r0, r1
 8000b60:	3001      	adds	r0, #1
 8000b62:	bd30      	pop	{r4, r5, pc}
 8000b64:	2d00      	cmp	r5, #0
 8000b66:	d1d7      	bne.n	8000b18 <__lesf2+0x3c>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	d1ce      	bne.n	8000b0a <__lesf2+0x2e>
 8000b6c:	4282      	cmp	r2, r0
 8000b6e:	dde7      	ble.n	8000b40 <__lesf2+0x64>
 8000b70:	2102      	movs	r1, #2
 8000b72:	1e58      	subs	r0, r3, #1
 8000b74:	4008      	ands	r0, r1
 8000b76:	3801      	subs	r0, #1
 8000b78:	e7f3      	b.n	8000b62 <__lesf2+0x86>
 8000b7a:	46c0      	nop			; (mov r8, r8)

08000b7c <__aeabi_fmul>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	464e      	mov	r6, r9
 8000b80:	4657      	mov	r7, sl
 8000b82:	4645      	mov	r5, r8
 8000b84:	46de      	mov	lr, fp
 8000b86:	b5e0      	push	{r5, r6, r7, lr}
 8000b88:	0243      	lsls	r3, r0, #9
 8000b8a:	0a5b      	lsrs	r3, r3, #9
 8000b8c:	0045      	lsls	r5, r0, #1
 8000b8e:	b083      	sub	sp, #12
 8000b90:	1c0f      	adds	r7, r1, #0
 8000b92:	4699      	mov	r9, r3
 8000b94:	0e2d      	lsrs	r5, r5, #24
 8000b96:	0fc6      	lsrs	r6, r0, #31
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d057      	beq.n	8000c4c <__aeabi_fmul+0xd0>
 8000b9c:	2dff      	cmp	r5, #255	; 0xff
 8000b9e:	d024      	beq.n	8000bea <__aeabi_fmul+0x6e>
 8000ba0:	2080      	movs	r0, #128	; 0x80
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	04c0      	lsls	r0, r0, #19
 8000ba6:	4318      	orrs	r0, r3
 8000ba8:	2300      	movs	r3, #0
 8000baa:	4681      	mov	r9, r0
 8000bac:	469a      	mov	sl, r3
 8000bae:	469b      	mov	fp, r3
 8000bb0:	3d7f      	subs	r5, #127	; 0x7f
 8000bb2:	027c      	lsls	r4, r7, #9
 8000bb4:	007a      	lsls	r2, r7, #1
 8000bb6:	0ffb      	lsrs	r3, r7, #31
 8000bb8:	0a64      	lsrs	r4, r4, #9
 8000bba:	0e12      	lsrs	r2, r2, #24
 8000bbc:	4698      	mov	r8, r3
 8000bbe:	d023      	beq.n	8000c08 <__aeabi_fmul+0x8c>
 8000bc0:	2aff      	cmp	r2, #255	; 0xff
 8000bc2:	d04b      	beq.n	8000c5c <__aeabi_fmul+0xe0>
 8000bc4:	00e3      	lsls	r3, r4, #3
 8000bc6:	2480      	movs	r4, #128	; 0x80
 8000bc8:	2000      	movs	r0, #0
 8000bca:	04e4      	lsls	r4, r4, #19
 8000bcc:	3a7f      	subs	r2, #127	; 0x7f
 8000bce:	431c      	orrs	r4, r3
 8000bd0:	18ad      	adds	r5, r5, r2
 8000bd2:	1c6b      	adds	r3, r5, #1
 8000bd4:	4647      	mov	r7, r8
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	4653      	mov	r3, sl
 8000bda:	4077      	eors	r7, r6
 8000bdc:	003a      	movs	r2, r7
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	d848      	bhi.n	8000c74 <__aeabi_fmul+0xf8>
 8000be2:	497d      	ldr	r1, [pc, #500]	; (8000dd8 <__aeabi_fmul+0x25c>)
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	58cb      	ldr	r3, [r1, r3]
 8000be8:	469f      	mov	pc, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d000      	beq.n	8000bf0 <__aeabi_fmul+0x74>
 8000bee:	e085      	b.n	8000cfc <__aeabi_fmul+0x180>
 8000bf0:	3308      	adds	r3, #8
 8000bf2:	469a      	mov	sl, r3
 8000bf4:	3b06      	subs	r3, #6
 8000bf6:	469b      	mov	fp, r3
 8000bf8:	027c      	lsls	r4, r7, #9
 8000bfa:	007a      	lsls	r2, r7, #1
 8000bfc:	0ffb      	lsrs	r3, r7, #31
 8000bfe:	25ff      	movs	r5, #255	; 0xff
 8000c00:	0a64      	lsrs	r4, r4, #9
 8000c02:	0e12      	lsrs	r2, r2, #24
 8000c04:	4698      	mov	r8, r3
 8000c06:	d1db      	bne.n	8000bc0 <__aeabi_fmul+0x44>
 8000c08:	2c00      	cmp	r4, #0
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_fmul+0x92>
 8000c0c:	e090      	b.n	8000d30 <__aeabi_fmul+0x1b4>
 8000c0e:	4652      	mov	r2, sl
 8000c10:	2301      	movs	r3, #1
 8000c12:	431a      	orrs	r2, r3
 8000c14:	4692      	mov	sl, r2
 8000c16:	2001      	movs	r0, #1
 8000c18:	e7db      	b.n	8000bd2 <__aeabi_fmul+0x56>
 8000c1a:	464c      	mov	r4, r9
 8000c1c:	4658      	mov	r0, fp
 8000c1e:	0017      	movs	r7, r2
 8000c20:	2802      	cmp	r0, #2
 8000c22:	d024      	beq.n	8000c6e <__aeabi_fmul+0xf2>
 8000c24:	2803      	cmp	r0, #3
 8000c26:	d100      	bne.n	8000c2a <__aeabi_fmul+0xae>
 8000c28:	e0cf      	b.n	8000dca <__aeabi_fmul+0x24e>
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	2801      	cmp	r0, #1
 8000c30:	d14d      	bne.n	8000cce <__aeabi_fmul+0x152>
 8000c32:	0258      	lsls	r0, r3, #9
 8000c34:	05d2      	lsls	r2, r2, #23
 8000c36:	0a40      	lsrs	r0, r0, #9
 8000c38:	07ff      	lsls	r7, r7, #31
 8000c3a:	4310      	orrs	r0, r2
 8000c3c:	4338      	orrs	r0, r7
 8000c3e:	b003      	add	sp, #12
 8000c40:	bc3c      	pop	{r2, r3, r4, r5}
 8000c42:	4690      	mov	r8, r2
 8000c44:	4699      	mov	r9, r3
 8000c46:	46a2      	mov	sl, r4
 8000c48:	46ab      	mov	fp, r5
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d15b      	bne.n	8000d08 <__aeabi_fmul+0x18c>
 8000c50:	2304      	movs	r3, #4
 8000c52:	469a      	mov	sl, r3
 8000c54:	3b03      	subs	r3, #3
 8000c56:	2500      	movs	r5, #0
 8000c58:	469b      	mov	fp, r3
 8000c5a:	e7aa      	b.n	8000bb2 <__aeabi_fmul+0x36>
 8000c5c:	35ff      	adds	r5, #255	; 0xff
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d160      	bne.n	8000d24 <__aeabi_fmul+0x1a8>
 8000c62:	4652      	mov	r2, sl
 8000c64:	2302      	movs	r3, #2
 8000c66:	431a      	orrs	r2, r3
 8000c68:	4692      	mov	sl, r2
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	e7b1      	b.n	8000bd2 <__aeabi_fmul+0x56>
 8000c6e:	22ff      	movs	r2, #255	; 0xff
 8000c70:	2300      	movs	r3, #0
 8000c72:	e7de      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000c74:	464b      	mov	r3, r9
 8000c76:	0c1b      	lsrs	r3, r3, #16
 8000c78:	469c      	mov	ip, r3
 8000c7a:	464b      	mov	r3, r9
 8000c7c:	0426      	lsls	r6, r4, #16
 8000c7e:	0c36      	lsrs	r6, r6, #16
 8000c80:	0418      	lsls	r0, r3, #16
 8000c82:	4661      	mov	r1, ip
 8000c84:	0033      	movs	r3, r6
 8000c86:	0c22      	lsrs	r2, r4, #16
 8000c88:	4664      	mov	r4, ip
 8000c8a:	0c00      	lsrs	r0, r0, #16
 8000c8c:	4343      	muls	r3, r0
 8000c8e:	434e      	muls	r6, r1
 8000c90:	4350      	muls	r0, r2
 8000c92:	4354      	muls	r4, r2
 8000c94:	1980      	adds	r0, r0, r6
 8000c96:	0c1a      	lsrs	r2, r3, #16
 8000c98:	1812      	adds	r2, r2, r0
 8000c9a:	4296      	cmp	r6, r2
 8000c9c:	d903      	bls.n	8000ca6 <__aeabi_fmul+0x12a>
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	0249      	lsls	r1, r1, #9
 8000ca2:	468c      	mov	ip, r1
 8000ca4:	4464      	add	r4, ip
 8000ca6:	041b      	lsls	r3, r3, #16
 8000ca8:	0c1b      	lsrs	r3, r3, #16
 8000caa:	0410      	lsls	r0, r2, #16
 8000cac:	18c0      	adds	r0, r0, r3
 8000cae:	0183      	lsls	r3, r0, #6
 8000cb0:	1e5e      	subs	r6, r3, #1
 8000cb2:	41b3      	sbcs	r3, r6
 8000cb4:	0e80      	lsrs	r0, r0, #26
 8000cb6:	4318      	orrs	r0, r3
 8000cb8:	0c13      	lsrs	r3, r2, #16
 8000cba:	191b      	adds	r3, r3, r4
 8000cbc:	019b      	lsls	r3, r3, #6
 8000cbe:	4303      	orrs	r3, r0
 8000cc0:	001c      	movs	r4, r3
 8000cc2:	0123      	lsls	r3, r4, #4
 8000cc4:	d579      	bpl.n	8000dba <__aeabi_fmul+0x23e>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	0862      	lsrs	r2, r4, #1
 8000cca:	401c      	ands	r4, r3
 8000ccc:	4314      	orrs	r4, r2
 8000cce:	9a01      	ldr	r2, [sp, #4]
 8000cd0:	327f      	adds	r2, #127	; 0x7f
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	dd4d      	ble.n	8000d72 <__aeabi_fmul+0x1f6>
 8000cd6:	0763      	lsls	r3, r4, #29
 8000cd8:	d004      	beq.n	8000ce4 <__aeabi_fmul+0x168>
 8000cda:	230f      	movs	r3, #15
 8000cdc:	4023      	ands	r3, r4
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d000      	beq.n	8000ce4 <__aeabi_fmul+0x168>
 8000ce2:	3404      	adds	r4, #4
 8000ce4:	0123      	lsls	r3, r4, #4
 8000ce6:	d503      	bpl.n	8000cf0 <__aeabi_fmul+0x174>
 8000ce8:	4b3c      	ldr	r3, [pc, #240]	; (8000ddc <__aeabi_fmul+0x260>)
 8000cea:	9a01      	ldr	r2, [sp, #4]
 8000cec:	401c      	ands	r4, r3
 8000cee:	3280      	adds	r2, #128	; 0x80
 8000cf0:	2afe      	cmp	r2, #254	; 0xfe
 8000cf2:	dcbc      	bgt.n	8000c6e <__aeabi_fmul+0xf2>
 8000cf4:	01a3      	lsls	r3, r4, #6
 8000cf6:	0a5b      	lsrs	r3, r3, #9
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	e79a      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	469a      	mov	sl, r3
 8000d00:	3b09      	subs	r3, #9
 8000d02:	25ff      	movs	r5, #255	; 0xff
 8000d04:	469b      	mov	fp, r3
 8000d06:	e754      	b.n	8000bb2 <__aeabi_fmul+0x36>
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 fbc3 	bl	8001494 <__clzsi2>
 8000d0e:	464a      	mov	r2, r9
 8000d10:	1f43      	subs	r3, r0, #5
 8000d12:	2576      	movs	r5, #118	; 0x76
 8000d14:	409a      	lsls	r2, r3
 8000d16:	2300      	movs	r3, #0
 8000d18:	426d      	negs	r5, r5
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	1a2d      	subs	r5, r5, r0
 8000d1e:	469a      	mov	sl, r3
 8000d20:	469b      	mov	fp, r3
 8000d22:	e746      	b.n	8000bb2 <__aeabi_fmul+0x36>
 8000d24:	4652      	mov	r2, sl
 8000d26:	2303      	movs	r3, #3
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	4692      	mov	sl, r2
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	e750      	b.n	8000bd2 <__aeabi_fmul+0x56>
 8000d30:	0020      	movs	r0, r4
 8000d32:	f000 fbaf 	bl	8001494 <__clzsi2>
 8000d36:	1f43      	subs	r3, r0, #5
 8000d38:	1a2d      	subs	r5, r5, r0
 8000d3a:	409c      	lsls	r4, r3
 8000d3c:	3d76      	subs	r5, #118	; 0x76
 8000d3e:	2000      	movs	r0, #0
 8000d40:	e747      	b.n	8000bd2 <__aeabi_fmul+0x56>
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	2700      	movs	r7, #0
 8000d46:	03db      	lsls	r3, r3, #15
 8000d48:	22ff      	movs	r2, #255	; 0xff
 8000d4a:	e772      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	e766      	b.n	8000c1e <__aeabi_fmul+0xa2>
 8000d50:	464c      	mov	r4, r9
 8000d52:	0032      	movs	r2, r6
 8000d54:	4658      	mov	r0, fp
 8000d56:	e762      	b.n	8000c1e <__aeabi_fmul+0xa2>
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	464a      	mov	r2, r9
 8000d5c:	03db      	lsls	r3, r3, #15
 8000d5e:	421a      	tst	r2, r3
 8000d60:	d022      	beq.n	8000da8 <__aeabi_fmul+0x22c>
 8000d62:	421c      	tst	r4, r3
 8000d64:	d120      	bne.n	8000da8 <__aeabi_fmul+0x22c>
 8000d66:	4323      	orrs	r3, r4
 8000d68:	025b      	lsls	r3, r3, #9
 8000d6a:	0a5b      	lsrs	r3, r3, #9
 8000d6c:	4647      	mov	r7, r8
 8000d6e:	22ff      	movs	r2, #255	; 0xff
 8000d70:	e75f      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000d72:	2301      	movs	r3, #1
 8000d74:	1a9a      	subs	r2, r3, r2
 8000d76:	2a1b      	cmp	r2, #27
 8000d78:	dc21      	bgt.n	8000dbe <__aeabi_fmul+0x242>
 8000d7a:	0023      	movs	r3, r4
 8000d7c:	9901      	ldr	r1, [sp, #4]
 8000d7e:	40d3      	lsrs	r3, r2
 8000d80:	319e      	adds	r1, #158	; 0x9e
 8000d82:	408c      	lsls	r4, r1
 8000d84:	001a      	movs	r2, r3
 8000d86:	0023      	movs	r3, r4
 8000d88:	1e5c      	subs	r4, r3, #1
 8000d8a:	41a3      	sbcs	r3, r4
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	075a      	lsls	r2, r3, #29
 8000d90:	d004      	beq.n	8000d9c <__aeabi_fmul+0x220>
 8000d92:	220f      	movs	r2, #15
 8000d94:	401a      	ands	r2, r3
 8000d96:	2a04      	cmp	r2, #4
 8000d98:	d000      	beq.n	8000d9c <__aeabi_fmul+0x220>
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	015a      	lsls	r2, r3, #5
 8000d9e:	d411      	bmi.n	8000dc4 <__aeabi_fmul+0x248>
 8000da0:	019b      	lsls	r3, r3, #6
 8000da2:	0a5b      	lsrs	r3, r3, #9
 8000da4:	2200      	movs	r2, #0
 8000da6:	e744      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	464a      	mov	r2, r9
 8000dac:	03db      	lsls	r3, r3, #15
 8000dae:	4313      	orrs	r3, r2
 8000db0:	025b      	lsls	r3, r3, #9
 8000db2:	0a5b      	lsrs	r3, r3, #9
 8000db4:	0037      	movs	r7, r6
 8000db6:	22ff      	movs	r2, #255	; 0xff
 8000db8:	e73b      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000dba:	9501      	str	r5, [sp, #4]
 8000dbc:	e787      	b.n	8000cce <__aeabi_fmul+0x152>
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e736      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e733      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	03db      	lsls	r3, r3, #15
 8000dce:	4323      	orrs	r3, r4
 8000dd0:	025b      	lsls	r3, r3, #9
 8000dd2:	0a5b      	lsrs	r3, r3, #9
 8000dd4:	22ff      	movs	r2, #255	; 0xff
 8000dd6:	e72c      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000dd8:	0800c864 	.word	0x0800c864
 8000ddc:	f7ffffff 	.word	0xf7ffffff

08000de0 <__aeabi_fsub>:
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	4647      	mov	r7, r8
 8000de4:	46ce      	mov	lr, r9
 8000de6:	0044      	lsls	r4, r0, #1
 8000de8:	0fc2      	lsrs	r2, r0, #31
 8000dea:	b580      	push	{r7, lr}
 8000dec:	0247      	lsls	r7, r0, #9
 8000dee:	0248      	lsls	r0, r1, #9
 8000df0:	0a40      	lsrs	r0, r0, #9
 8000df2:	4684      	mov	ip, r0
 8000df4:	4666      	mov	r6, ip
 8000df6:	0048      	lsls	r0, r1, #1
 8000df8:	0a7f      	lsrs	r7, r7, #9
 8000dfa:	0e24      	lsrs	r4, r4, #24
 8000dfc:	00f6      	lsls	r6, r6, #3
 8000dfe:	0025      	movs	r5, r4
 8000e00:	4690      	mov	r8, r2
 8000e02:	00fb      	lsls	r3, r7, #3
 8000e04:	0e00      	lsrs	r0, r0, #24
 8000e06:	0fc9      	lsrs	r1, r1, #31
 8000e08:	46b1      	mov	r9, r6
 8000e0a:	28ff      	cmp	r0, #255	; 0xff
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_fsub+0x30>
 8000e0e:	e085      	b.n	8000f1c <__aeabi_fsub+0x13c>
 8000e10:	2601      	movs	r6, #1
 8000e12:	4071      	eors	r1, r6
 8000e14:	1a26      	subs	r6, r4, r0
 8000e16:	4291      	cmp	r1, r2
 8000e18:	d057      	beq.n	8000eca <__aeabi_fsub+0xea>
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	dd43      	ble.n	8000ea6 <__aeabi_fsub+0xc6>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d000      	beq.n	8000e24 <__aeabi_fsub+0x44>
 8000e22:	e07f      	b.n	8000f24 <__aeabi_fsub+0x144>
 8000e24:	4649      	mov	r1, r9
 8000e26:	2900      	cmp	r1, #0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_fsub+0x4c>
 8000e2a:	e0aa      	b.n	8000f82 <__aeabi_fsub+0x1a2>
 8000e2c:	3e01      	subs	r6, #1
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	d000      	beq.n	8000e34 <__aeabi_fsub+0x54>
 8000e32:	e0f7      	b.n	8001024 <__aeabi_fsub+0x244>
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	d400      	bmi.n	8000e3c <__aeabi_fsub+0x5c>
 8000e3a:	e08b      	b.n	8000f54 <__aeabi_fsub+0x174>
 8000e3c:	019b      	lsls	r3, r3, #6
 8000e3e:	099c      	lsrs	r4, r3, #6
 8000e40:	0020      	movs	r0, r4
 8000e42:	f000 fb27 	bl	8001494 <__clzsi2>
 8000e46:	3805      	subs	r0, #5
 8000e48:	4084      	lsls	r4, r0
 8000e4a:	4285      	cmp	r5, r0
 8000e4c:	dd00      	ble.n	8000e50 <__aeabi_fsub+0x70>
 8000e4e:	e0d3      	b.n	8000ff8 <__aeabi_fsub+0x218>
 8000e50:	1b45      	subs	r5, r0, r5
 8000e52:	0023      	movs	r3, r4
 8000e54:	2020      	movs	r0, #32
 8000e56:	3501      	adds	r5, #1
 8000e58:	40eb      	lsrs	r3, r5
 8000e5a:	1b45      	subs	r5, r0, r5
 8000e5c:	40ac      	lsls	r4, r5
 8000e5e:	1e62      	subs	r2, r4, #1
 8000e60:	4194      	sbcs	r4, r2
 8000e62:	4323      	orrs	r3, r4
 8000e64:	2407      	movs	r4, #7
 8000e66:	2500      	movs	r5, #0
 8000e68:	401c      	ands	r4, r3
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4641      	mov	r1, r8
 8000e6e:	400a      	ands	r2, r1
 8000e70:	2c00      	cmp	r4, #0
 8000e72:	d004      	beq.n	8000e7e <__aeabi_fsub+0x9e>
 8000e74:	210f      	movs	r1, #15
 8000e76:	4019      	ands	r1, r3
 8000e78:	2904      	cmp	r1, #4
 8000e7a:	d000      	beq.n	8000e7e <__aeabi_fsub+0x9e>
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	0159      	lsls	r1, r3, #5
 8000e80:	d400      	bmi.n	8000e84 <__aeabi_fsub+0xa4>
 8000e82:	e080      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 8000e84:	3501      	adds	r5, #1
 8000e86:	b2ec      	uxtb	r4, r5
 8000e88:	2dff      	cmp	r5, #255	; 0xff
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_fsub+0xae>
 8000e8c:	e0a3      	b.n	8000fd6 <__aeabi_fsub+0x1f6>
 8000e8e:	24ff      	movs	r4, #255	; 0xff
 8000e90:	2300      	movs	r3, #0
 8000e92:	025b      	lsls	r3, r3, #9
 8000e94:	05e4      	lsls	r4, r4, #23
 8000e96:	0a58      	lsrs	r0, r3, #9
 8000e98:	07d2      	lsls	r2, r2, #31
 8000e9a:	4320      	orrs	r0, r4
 8000e9c:	4310      	orrs	r0, r2
 8000e9e:	bc0c      	pop	{r2, r3}
 8000ea0:	4690      	mov	r8, r2
 8000ea2:	4699      	mov	r9, r3
 8000ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d174      	bne.n	8000f94 <__aeabi_fsub+0x1b4>
 8000eaa:	1c60      	adds	r0, r4, #1
 8000eac:	b2c0      	uxtb	r0, r0
 8000eae:	2801      	cmp	r0, #1
 8000eb0:	dc00      	bgt.n	8000eb4 <__aeabi_fsub+0xd4>
 8000eb2:	e0a7      	b.n	8001004 <__aeabi_fsub+0x224>
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	1a9c      	subs	r4, r3, r2
 8000eb8:	0162      	lsls	r2, r4, #5
 8000eba:	d500      	bpl.n	8000ebe <__aeabi_fsub+0xde>
 8000ebc:	e0b6      	b.n	800102c <__aeabi_fsub+0x24c>
 8000ebe:	2c00      	cmp	r4, #0
 8000ec0:	d1be      	bne.n	8000e40 <__aeabi_fsub+0x60>
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e7e3      	b.n	8000e92 <__aeabi_fsub+0xb2>
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	dc00      	bgt.n	8000ed0 <__aeabi_fsub+0xf0>
 8000ece:	e085      	b.n	8000fdc <__aeabi_fsub+0x1fc>
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d046      	beq.n	8000f62 <__aeabi_fsub+0x182>
 8000ed4:	2cff      	cmp	r4, #255	; 0xff
 8000ed6:	d049      	beq.n	8000f6c <__aeabi_fsub+0x18c>
 8000ed8:	2280      	movs	r2, #128	; 0x80
 8000eda:	4648      	mov	r0, r9
 8000edc:	04d2      	lsls	r2, r2, #19
 8000ede:	4310      	orrs	r0, r2
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2e1b      	cmp	r6, #27
 8000ee6:	dc09      	bgt.n	8000efc <__aeabi_fsub+0x11c>
 8000ee8:	2020      	movs	r0, #32
 8000eea:	464c      	mov	r4, r9
 8000eec:	1b80      	subs	r0, r0, r6
 8000eee:	4084      	lsls	r4, r0
 8000ef0:	464a      	mov	r2, r9
 8000ef2:	0020      	movs	r0, r4
 8000ef4:	40f2      	lsrs	r2, r6
 8000ef6:	1e44      	subs	r4, r0, #1
 8000ef8:	41a0      	sbcs	r0, r4
 8000efa:	4302      	orrs	r2, r0
 8000efc:	189b      	adds	r3, r3, r2
 8000efe:	015a      	lsls	r2, r3, #5
 8000f00:	d528      	bpl.n	8000f54 <__aeabi_fsub+0x174>
 8000f02:	3501      	adds	r5, #1
 8000f04:	2dff      	cmp	r5, #255	; 0xff
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x12a>
 8000f08:	e0a8      	b.n	800105c <__aeabi_fsub+0x27c>
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2407      	movs	r4, #7
 8000f0e:	4994      	ldr	r1, [pc, #592]	; (8001160 <__aeabi_fsub+0x380>)
 8000f10:	401a      	ands	r2, r3
 8000f12:	085b      	lsrs	r3, r3, #1
 8000f14:	400b      	ands	r3, r1
 8000f16:	4313      	orrs	r3, r2
 8000f18:	401c      	ands	r4, r3
 8000f1a:	e7a6      	b.n	8000e6a <__aeabi_fsub+0x8a>
 8000f1c:	2e00      	cmp	r6, #0
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fsub+0x142>
 8000f20:	e778      	b.n	8000e14 <__aeabi_fsub+0x34>
 8000f22:	e775      	b.n	8000e10 <__aeabi_fsub+0x30>
 8000f24:	2cff      	cmp	r4, #255	; 0xff
 8000f26:	d054      	beq.n	8000fd2 <__aeabi_fsub+0x1f2>
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	04d2      	lsls	r2, r2, #19
 8000f2e:	4311      	orrs	r1, r2
 8000f30:	4689      	mov	r9, r1
 8000f32:	2201      	movs	r2, #1
 8000f34:	2e1b      	cmp	r6, #27
 8000f36:	dc09      	bgt.n	8000f4c <__aeabi_fsub+0x16c>
 8000f38:	2120      	movs	r1, #32
 8000f3a:	4648      	mov	r0, r9
 8000f3c:	1b89      	subs	r1, r1, r6
 8000f3e:	4088      	lsls	r0, r1
 8000f40:	464a      	mov	r2, r9
 8000f42:	0001      	movs	r1, r0
 8000f44:	40f2      	lsrs	r2, r6
 8000f46:	1e48      	subs	r0, r1, #1
 8000f48:	4181      	sbcs	r1, r0
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	1a9b      	subs	r3, r3, r2
 8000f4e:	015a      	lsls	r2, r3, #5
 8000f50:	d500      	bpl.n	8000f54 <__aeabi_fsub+0x174>
 8000f52:	e773      	b.n	8000e3c <__aeabi_fsub+0x5c>
 8000f54:	2201      	movs	r2, #1
 8000f56:	4641      	mov	r1, r8
 8000f58:	400a      	ands	r2, r1
 8000f5a:	0759      	lsls	r1, r3, #29
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_fsub+0x180>
 8000f5e:	e789      	b.n	8000e74 <__aeabi_fsub+0x94>
 8000f60:	e011      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 8000f62:	4648      	mov	r0, r9
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d158      	bne.n	800101a <__aeabi_fsub+0x23a>
 8000f68:	2cff      	cmp	r4, #255	; 0xff
 8000f6a:	d10c      	bne.n	8000f86 <__aeabi_fsub+0x1a6>
 8000f6c:	08db      	lsrs	r3, r3, #3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_fsub+0x194>
 8000f72:	e78c      	b.n	8000e8e <__aeabi_fsub+0xae>
 8000f74:	2080      	movs	r0, #128	; 0x80
 8000f76:	03c0      	lsls	r0, r0, #15
 8000f78:	4303      	orrs	r3, r0
 8000f7a:	025b      	lsls	r3, r3, #9
 8000f7c:	0a5b      	lsrs	r3, r3, #9
 8000f7e:	24ff      	movs	r4, #255	; 0xff
 8000f80:	e787      	b.n	8000e92 <__aeabi_fsub+0xb2>
 8000f82:	2cff      	cmp	r4, #255	; 0xff
 8000f84:	d025      	beq.n	8000fd2 <__aeabi_fsub+0x1f2>
 8000f86:	08db      	lsrs	r3, r3, #3
 8000f88:	2dff      	cmp	r5, #255	; 0xff
 8000f8a:	d0f0      	beq.n	8000f6e <__aeabi_fsub+0x18e>
 8000f8c:	025b      	lsls	r3, r3, #9
 8000f8e:	0a5b      	lsrs	r3, r3, #9
 8000f90:	b2ec      	uxtb	r4, r5
 8000f92:	e77e      	b.n	8000e92 <__aeabi_fsub+0xb2>
 8000f94:	2c00      	cmp	r4, #0
 8000f96:	d04d      	beq.n	8001034 <__aeabi_fsub+0x254>
 8000f98:	28ff      	cmp	r0, #255	; 0xff
 8000f9a:	d018      	beq.n	8000fce <__aeabi_fsub+0x1ee>
 8000f9c:	2480      	movs	r4, #128	; 0x80
 8000f9e:	04e4      	lsls	r4, r4, #19
 8000fa0:	4272      	negs	r2, r6
 8000fa2:	4323      	orrs	r3, r4
 8000fa4:	2a1b      	cmp	r2, #27
 8000fa6:	dd00      	ble.n	8000faa <__aeabi_fsub+0x1ca>
 8000fa8:	e0c4      	b.n	8001134 <__aeabi_fsub+0x354>
 8000faa:	001c      	movs	r4, r3
 8000fac:	2520      	movs	r5, #32
 8000fae:	40d4      	lsrs	r4, r2
 8000fb0:	1aaa      	subs	r2, r5, r2
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	1e5a      	subs	r2, r3, #1
 8000fb6:	4193      	sbcs	r3, r2
 8000fb8:	4323      	orrs	r3, r4
 8000fba:	464a      	mov	r2, r9
 8000fbc:	0005      	movs	r5, r0
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	4688      	mov	r8, r1
 8000fc2:	e738      	b.n	8000e36 <__aeabi_fsub+0x56>
 8000fc4:	1c72      	adds	r2, r6, #1
 8000fc6:	d0f8      	beq.n	8000fba <__aeabi_fsub+0x1da>
 8000fc8:	43f2      	mvns	r2, r6
 8000fca:	28ff      	cmp	r0, #255	; 0xff
 8000fcc:	d1ea      	bne.n	8000fa4 <__aeabi_fsub+0x1c4>
 8000fce:	000a      	movs	r2, r1
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	25ff      	movs	r5, #255	; 0xff
 8000fd4:	e7d7      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 8000fd6:	019b      	lsls	r3, r3, #6
 8000fd8:	0a5b      	lsrs	r3, r3, #9
 8000fda:	e75a      	b.n	8000e92 <__aeabi_fsub+0xb2>
 8000fdc:	2e00      	cmp	r6, #0
 8000fde:	d141      	bne.n	8001064 <__aeabi_fsub+0x284>
 8000fe0:	1c65      	adds	r5, r4, #1
 8000fe2:	b2e9      	uxtb	r1, r5
 8000fe4:	2901      	cmp	r1, #1
 8000fe6:	dd45      	ble.n	8001074 <__aeabi_fsub+0x294>
 8000fe8:	2dff      	cmp	r5, #255	; 0xff
 8000fea:	d100      	bne.n	8000fee <__aeabi_fsub+0x20e>
 8000fec:	e74f      	b.n	8000e8e <__aeabi_fsub+0xae>
 8000fee:	2407      	movs	r4, #7
 8000ff0:	444b      	add	r3, r9
 8000ff2:	085b      	lsrs	r3, r3, #1
 8000ff4:	401c      	ands	r4, r3
 8000ff6:	e738      	b.n	8000e6a <__aeabi_fsub+0x8a>
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	4b5a      	ldr	r3, [pc, #360]	; (8001164 <__aeabi_fsub+0x384>)
 8000ffc:	1a2d      	subs	r5, r5, r0
 8000ffe:	4023      	ands	r3, r4
 8001000:	4014      	ands	r4, r2
 8001002:	e732      	b.n	8000e6a <__aeabi_fsub+0x8a>
 8001004:	2c00      	cmp	r4, #0
 8001006:	d11d      	bne.n	8001044 <__aeabi_fsub+0x264>
 8001008:	2b00      	cmp	r3, #0
 800100a:	d17a      	bne.n	8001102 <__aeabi_fsub+0x322>
 800100c:	464b      	mov	r3, r9
 800100e:	2b00      	cmp	r3, #0
 8001010:	d100      	bne.n	8001014 <__aeabi_fsub+0x234>
 8001012:	e091      	b.n	8001138 <__aeabi_fsub+0x358>
 8001014:	000a      	movs	r2, r1
 8001016:	2500      	movs	r5, #0
 8001018:	e7b5      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 800101a:	3e01      	subs	r6, #1
 800101c:	2e00      	cmp	r6, #0
 800101e:	d119      	bne.n	8001054 <__aeabi_fsub+0x274>
 8001020:	444b      	add	r3, r9
 8001022:	e76c      	b.n	8000efe <__aeabi_fsub+0x11e>
 8001024:	2cff      	cmp	r4, #255	; 0xff
 8001026:	d184      	bne.n	8000f32 <__aeabi_fsub+0x152>
 8001028:	25ff      	movs	r5, #255	; 0xff
 800102a:	e7ac      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 800102c:	464a      	mov	r2, r9
 800102e:	4688      	mov	r8, r1
 8001030:	1ad4      	subs	r4, r2, r3
 8001032:	e705      	b.n	8000e40 <__aeabi_fsub+0x60>
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1c5      	bne.n	8000fc4 <__aeabi_fsub+0x1e4>
 8001038:	000a      	movs	r2, r1
 800103a:	28ff      	cmp	r0, #255	; 0xff
 800103c:	d0c8      	beq.n	8000fd0 <__aeabi_fsub+0x1f0>
 800103e:	0005      	movs	r5, r0
 8001040:	464b      	mov	r3, r9
 8001042:	e7a0      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 8001044:	2b00      	cmp	r3, #0
 8001046:	d149      	bne.n	80010dc <__aeabi_fsub+0x2fc>
 8001048:	464b      	mov	r3, r9
 800104a:	2b00      	cmp	r3, #0
 800104c:	d077      	beq.n	800113e <__aeabi_fsub+0x35e>
 800104e:	000a      	movs	r2, r1
 8001050:	25ff      	movs	r5, #255	; 0xff
 8001052:	e798      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 8001054:	2cff      	cmp	r4, #255	; 0xff
 8001056:	d000      	beq.n	800105a <__aeabi_fsub+0x27a>
 8001058:	e743      	b.n	8000ee2 <__aeabi_fsub+0x102>
 800105a:	e787      	b.n	8000f6c <__aeabi_fsub+0x18c>
 800105c:	000a      	movs	r2, r1
 800105e:	24ff      	movs	r4, #255	; 0xff
 8001060:	2300      	movs	r3, #0
 8001062:	e716      	b.n	8000e92 <__aeabi_fsub+0xb2>
 8001064:	2c00      	cmp	r4, #0
 8001066:	d115      	bne.n	8001094 <__aeabi_fsub+0x2b4>
 8001068:	2b00      	cmp	r3, #0
 800106a:	d157      	bne.n	800111c <__aeabi_fsub+0x33c>
 800106c:	28ff      	cmp	r0, #255	; 0xff
 800106e:	d1e6      	bne.n	800103e <__aeabi_fsub+0x25e>
 8001070:	464b      	mov	r3, r9
 8001072:	e77b      	b.n	8000f6c <__aeabi_fsub+0x18c>
 8001074:	2c00      	cmp	r4, #0
 8001076:	d120      	bne.n	80010ba <__aeabi_fsub+0x2da>
 8001078:	2b00      	cmp	r3, #0
 800107a:	d057      	beq.n	800112c <__aeabi_fsub+0x34c>
 800107c:	4649      	mov	r1, r9
 800107e:	2900      	cmp	r1, #0
 8001080:	d053      	beq.n	800112a <__aeabi_fsub+0x34a>
 8001082:	444b      	add	r3, r9
 8001084:	015a      	lsls	r2, r3, #5
 8001086:	d568      	bpl.n	800115a <__aeabi_fsub+0x37a>
 8001088:	2407      	movs	r4, #7
 800108a:	4a36      	ldr	r2, [pc, #216]	; (8001164 <__aeabi_fsub+0x384>)
 800108c:	401c      	ands	r4, r3
 800108e:	2501      	movs	r5, #1
 8001090:	4013      	ands	r3, r2
 8001092:	e6ea      	b.n	8000e6a <__aeabi_fsub+0x8a>
 8001094:	28ff      	cmp	r0, #255	; 0xff
 8001096:	d0eb      	beq.n	8001070 <__aeabi_fsub+0x290>
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	04d2      	lsls	r2, r2, #19
 800109c:	4276      	negs	r6, r6
 800109e:	4313      	orrs	r3, r2
 80010a0:	2e1b      	cmp	r6, #27
 80010a2:	dc53      	bgt.n	800114c <__aeabi_fsub+0x36c>
 80010a4:	2520      	movs	r5, #32
 80010a6:	1bad      	subs	r5, r5, r6
 80010a8:	001a      	movs	r2, r3
 80010aa:	40ab      	lsls	r3, r5
 80010ac:	40f2      	lsrs	r2, r6
 80010ae:	1e5c      	subs	r4, r3, #1
 80010b0:	41a3      	sbcs	r3, r4
 80010b2:	4313      	orrs	r3, r2
 80010b4:	444b      	add	r3, r9
 80010b6:	0005      	movs	r5, r0
 80010b8:	e721      	b.n	8000efe <__aeabi_fsub+0x11e>
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0d8      	beq.n	8001070 <__aeabi_fsub+0x290>
 80010be:	4649      	mov	r1, r9
 80010c0:	2900      	cmp	r1, #0
 80010c2:	d100      	bne.n	80010c6 <__aeabi_fsub+0x2e6>
 80010c4:	e752      	b.n	8000f6c <__aeabi_fsub+0x18c>
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	03c9      	lsls	r1, r1, #15
 80010ca:	420f      	tst	r7, r1
 80010cc:	d100      	bne.n	80010d0 <__aeabi_fsub+0x2f0>
 80010ce:	e74d      	b.n	8000f6c <__aeabi_fsub+0x18c>
 80010d0:	4660      	mov	r0, ip
 80010d2:	4208      	tst	r0, r1
 80010d4:	d000      	beq.n	80010d8 <__aeabi_fsub+0x2f8>
 80010d6:	e749      	b.n	8000f6c <__aeabi_fsub+0x18c>
 80010d8:	464b      	mov	r3, r9
 80010da:	e747      	b.n	8000f6c <__aeabi_fsub+0x18c>
 80010dc:	4648      	mov	r0, r9
 80010de:	25ff      	movs	r5, #255	; 0xff
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_fsub+0x306>
 80010e4:	e74f      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	03d2      	lsls	r2, r2, #15
 80010ea:	4217      	tst	r7, r2
 80010ec:	d004      	beq.n	80010f8 <__aeabi_fsub+0x318>
 80010ee:	4660      	mov	r0, ip
 80010f0:	4210      	tst	r0, r2
 80010f2:	d101      	bne.n	80010f8 <__aeabi_fsub+0x318>
 80010f4:	464b      	mov	r3, r9
 80010f6:	4688      	mov	r8, r1
 80010f8:	2201      	movs	r2, #1
 80010fa:	4641      	mov	r1, r8
 80010fc:	25ff      	movs	r5, #255	; 0xff
 80010fe:	400a      	ands	r2, r1
 8001100:	e741      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 8001102:	4648      	mov	r0, r9
 8001104:	2800      	cmp	r0, #0
 8001106:	d01f      	beq.n	8001148 <__aeabi_fsub+0x368>
 8001108:	1a1a      	subs	r2, r3, r0
 800110a:	0150      	lsls	r0, r2, #5
 800110c:	d520      	bpl.n	8001150 <__aeabi_fsub+0x370>
 800110e:	464a      	mov	r2, r9
 8001110:	2407      	movs	r4, #7
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	401c      	ands	r4, r3
 8001116:	4688      	mov	r8, r1
 8001118:	2500      	movs	r5, #0
 800111a:	e6a6      	b.n	8000e6a <__aeabi_fsub+0x8a>
 800111c:	1c74      	adds	r4, r6, #1
 800111e:	d0c9      	beq.n	80010b4 <__aeabi_fsub+0x2d4>
 8001120:	43f6      	mvns	r6, r6
 8001122:	28ff      	cmp	r0, #255	; 0xff
 8001124:	d1bc      	bne.n	80010a0 <__aeabi_fsub+0x2c0>
 8001126:	464b      	mov	r3, r9
 8001128:	e720      	b.n	8000f6c <__aeabi_fsub+0x18c>
 800112a:	4699      	mov	r9, r3
 800112c:	464b      	mov	r3, r9
 800112e:	2500      	movs	r5, #0
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	e72b      	b.n	8000f8c <__aeabi_fsub+0x1ac>
 8001134:	2301      	movs	r3, #1
 8001136:	e740      	b.n	8000fba <__aeabi_fsub+0x1da>
 8001138:	2200      	movs	r2, #0
 800113a:	2300      	movs	r3, #0
 800113c:	e6a9      	b.n	8000e92 <__aeabi_fsub+0xb2>
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	2200      	movs	r2, #0
 8001142:	03db      	lsls	r3, r3, #15
 8001144:	24ff      	movs	r4, #255	; 0xff
 8001146:	e6a4      	b.n	8000e92 <__aeabi_fsub+0xb2>
 8001148:	2500      	movs	r5, #0
 800114a:	e71c      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 800114c:	2301      	movs	r3, #1
 800114e:	e7b1      	b.n	80010b4 <__aeabi_fsub+0x2d4>
 8001150:	2a00      	cmp	r2, #0
 8001152:	d0f1      	beq.n	8001138 <__aeabi_fsub+0x358>
 8001154:	0013      	movs	r3, r2
 8001156:	2500      	movs	r5, #0
 8001158:	e6fc      	b.n	8000f54 <__aeabi_fsub+0x174>
 800115a:	2500      	movs	r5, #0
 800115c:	e6fa      	b.n	8000f54 <__aeabi_fsub+0x174>
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	7dffffff 	.word	0x7dffffff
 8001164:	fbffffff 	.word	0xfbffffff

08001168 <__aeabi_fcmpun>:
 8001168:	0242      	lsls	r2, r0, #9
 800116a:	024b      	lsls	r3, r1, #9
 800116c:	0040      	lsls	r0, r0, #1
 800116e:	0049      	lsls	r1, r1, #1
 8001170:	0a52      	lsrs	r2, r2, #9
 8001172:	0a5b      	lsrs	r3, r3, #9
 8001174:	0e09      	lsrs	r1, r1, #24
 8001176:	0e00      	lsrs	r0, r0, #24
 8001178:	28ff      	cmp	r0, #255	; 0xff
 800117a:	d006      	beq.n	800118a <__aeabi_fcmpun+0x22>
 800117c:	2000      	movs	r0, #0
 800117e:	29ff      	cmp	r1, #255	; 0xff
 8001180:	d102      	bne.n	8001188 <__aeabi_fcmpun+0x20>
 8001182:	0018      	movs	r0, r3
 8001184:	1e43      	subs	r3, r0, #1
 8001186:	4198      	sbcs	r0, r3
 8001188:	4770      	bx	lr
 800118a:	38fe      	subs	r0, #254	; 0xfe
 800118c:	2a00      	cmp	r2, #0
 800118e:	d1fb      	bne.n	8001188 <__aeabi_fcmpun+0x20>
 8001190:	e7f4      	b.n	800117c <__aeabi_fcmpun+0x14>
 8001192:	46c0      	nop			; (mov r8, r8)

08001194 <__aeabi_f2iz>:
 8001194:	0241      	lsls	r1, r0, #9
 8001196:	0042      	lsls	r2, r0, #1
 8001198:	0fc3      	lsrs	r3, r0, #31
 800119a:	0a49      	lsrs	r1, r1, #9
 800119c:	0e12      	lsrs	r2, r2, #24
 800119e:	2000      	movs	r0, #0
 80011a0:	2a7e      	cmp	r2, #126	; 0x7e
 80011a2:	d90d      	bls.n	80011c0 <__aeabi_f2iz+0x2c>
 80011a4:	2a9d      	cmp	r2, #157	; 0x9d
 80011a6:	d80c      	bhi.n	80011c2 <__aeabi_f2iz+0x2e>
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	0400      	lsls	r0, r0, #16
 80011ac:	4301      	orrs	r1, r0
 80011ae:	2a95      	cmp	r2, #149	; 0x95
 80011b0:	dc0a      	bgt.n	80011c8 <__aeabi_f2iz+0x34>
 80011b2:	2096      	movs	r0, #150	; 0x96
 80011b4:	1a82      	subs	r2, r0, r2
 80011b6:	40d1      	lsrs	r1, r2
 80011b8:	4248      	negs	r0, r1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d100      	bne.n	80011c0 <__aeabi_f2iz+0x2c>
 80011be:	0008      	movs	r0, r1
 80011c0:	4770      	bx	lr
 80011c2:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <__aeabi_f2iz+0x3c>)
 80011c4:	1898      	adds	r0, r3, r2
 80011c6:	e7fb      	b.n	80011c0 <__aeabi_f2iz+0x2c>
 80011c8:	3a96      	subs	r2, #150	; 0x96
 80011ca:	4091      	lsls	r1, r2
 80011cc:	e7f4      	b.n	80011b8 <__aeabi_f2iz+0x24>
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	7fffffff 	.word	0x7fffffff

080011d4 <__aeabi_i2f>:
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d03d      	beq.n	8001256 <__aeabi_i2f+0x82>
 80011da:	17c3      	asrs	r3, r0, #31
 80011dc:	18c5      	adds	r5, r0, r3
 80011de:	405d      	eors	r5, r3
 80011e0:	0fc4      	lsrs	r4, r0, #31
 80011e2:	0028      	movs	r0, r5
 80011e4:	f000 f956 	bl	8001494 <__clzsi2>
 80011e8:	229e      	movs	r2, #158	; 0x9e
 80011ea:	1a12      	subs	r2, r2, r0
 80011ec:	2a96      	cmp	r2, #150	; 0x96
 80011ee:	dc07      	bgt.n	8001200 <__aeabi_i2f+0x2c>
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	2808      	cmp	r0, #8
 80011f4:	dd33      	ble.n	800125e <__aeabi_i2f+0x8a>
 80011f6:	3808      	subs	r0, #8
 80011f8:	4085      	lsls	r5, r0
 80011fa:	0268      	lsls	r0, r5, #9
 80011fc:	0a40      	lsrs	r0, r0, #9
 80011fe:	e023      	b.n	8001248 <__aeabi_i2f+0x74>
 8001200:	2a99      	cmp	r2, #153	; 0x99
 8001202:	dd0b      	ble.n	800121c <__aeabi_i2f+0x48>
 8001204:	2305      	movs	r3, #5
 8001206:	0029      	movs	r1, r5
 8001208:	1a1b      	subs	r3, r3, r0
 800120a:	40d9      	lsrs	r1, r3
 800120c:	0003      	movs	r3, r0
 800120e:	331b      	adds	r3, #27
 8001210:	409d      	lsls	r5, r3
 8001212:	002b      	movs	r3, r5
 8001214:	1e5d      	subs	r5, r3, #1
 8001216:	41ab      	sbcs	r3, r5
 8001218:	4319      	orrs	r1, r3
 800121a:	000d      	movs	r5, r1
 800121c:	2805      	cmp	r0, #5
 800121e:	dd01      	ble.n	8001224 <__aeabi_i2f+0x50>
 8001220:	1f43      	subs	r3, r0, #5
 8001222:	409d      	lsls	r5, r3
 8001224:	002b      	movs	r3, r5
 8001226:	490f      	ldr	r1, [pc, #60]	; (8001264 <__aeabi_i2f+0x90>)
 8001228:	400b      	ands	r3, r1
 800122a:	076e      	lsls	r6, r5, #29
 800122c:	d009      	beq.n	8001242 <__aeabi_i2f+0x6e>
 800122e:	260f      	movs	r6, #15
 8001230:	4035      	ands	r5, r6
 8001232:	2d04      	cmp	r5, #4
 8001234:	d005      	beq.n	8001242 <__aeabi_i2f+0x6e>
 8001236:	3304      	adds	r3, #4
 8001238:	015d      	lsls	r5, r3, #5
 800123a:	d502      	bpl.n	8001242 <__aeabi_i2f+0x6e>
 800123c:	229f      	movs	r2, #159	; 0x9f
 800123e:	400b      	ands	r3, r1
 8001240:	1a12      	subs	r2, r2, r0
 8001242:	019b      	lsls	r3, r3, #6
 8001244:	0a58      	lsrs	r0, r3, #9
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	0240      	lsls	r0, r0, #9
 800124a:	05d2      	lsls	r2, r2, #23
 800124c:	0a40      	lsrs	r0, r0, #9
 800124e:	07e4      	lsls	r4, r4, #31
 8001250:	4310      	orrs	r0, r2
 8001252:	4320      	orrs	r0, r4
 8001254:	bd70      	pop	{r4, r5, r6, pc}
 8001256:	2400      	movs	r4, #0
 8001258:	2200      	movs	r2, #0
 800125a:	2000      	movs	r0, #0
 800125c:	e7f4      	b.n	8001248 <__aeabi_i2f+0x74>
 800125e:	0268      	lsls	r0, r5, #9
 8001260:	0a40      	lsrs	r0, r0, #9
 8001262:	e7f1      	b.n	8001248 <__aeabi_i2f+0x74>
 8001264:	fbffffff 	.word	0xfbffffff

08001268 <__aeabi_ui2f>:
 8001268:	b570      	push	{r4, r5, r6, lr}
 800126a:	1e04      	subs	r4, r0, #0
 800126c:	d034      	beq.n	80012d8 <__aeabi_ui2f+0x70>
 800126e:	f000 f911 	bl	8001494 <__clzsi2>
 8001272:	229e      	movs	r2, #158	; 0x9e
 8001274:	1a12      	subs	r2, r2, r0
 8001276:	2a96      	cmp	r2, #150	; 0x96
 8001278:	dc07      	bgt.n	800128a <__aeabi_ui2f+0x22>
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	2808      	cmp	r0, #8
 800127e:	dd2e      	ble.n	80012de <__aeabi_ui2f+0x76>
 8001280:	3808      	subs	r0, #8
 8001282:	4084      	lsls	r4, r0
 8001284:	0260      	lsls	r0, r4, #9
 8001286:	0a40      	lsrs	r0, r0, #9
 8001288:	e021      	b.n	80012ce <__aeabi_ui2f+0x66>
 800128a:	2a99      	cmp	r2, #153	; 0x99
 800128c:	dd09      	ble.n	80012a2 <__aeabi_ui2f+0x3a>
 800128e:	0003      	movs	r3, r0
 8001290:	0021      	movs	r1, r4
 8001292:	331b      	adds	r3, #27
 8001294:	4099      	lsls	r1, r3
 8001296:	1e4b      	subs	r3, r1, #1
 8001298:	4199      	sbcs	r1, r3
 800129a:	2305      	movs	r3, #5
 800129c:	1a1b      	subs	r3, r3, r0
 800129e:	40dc      	lsrs	r4, r3
 80012a0:	430c      	orrs	r4, r1
 80012a2:	2805      	cmp	r0, #5
 80012a4:	dd01      	ble.n	80012aa <__aeabi_ui2f+0x42>
 80012a6:	1f43      	subs	r3, r0, #5
 80012a8:	409c      	lsls	r4, r3
 80012aa:	0023      	movs	r3, r4
 80012ac:	490d      	ldr	r1, [pc, #52]	; (80012e4 <__aeabi_ui2f+0x7c>)
 80012ae:	400b      	ands	r3, r1
 80012b0:	0765      	lsls	r5, r4, #29
 80012b2:	d009      	beq.n	80012c8 <__aeabi_ui2f+0x60>
 80012b4:	250f      	movs	r5, #15
 80012b6:	402c      	ands	r4, r5
 80012b8:	2c04      	cmp	r4, #4
 80012ba:	d005      	beq.n	80012c8 <__aeabi_ui2f+0x60>
 80012bc:	3304      	adds	r3, #4
 80012be:	015c      	lsls	r4, r3, #5
 80012c0:	d502      	bpl.n	80012c8 <__aeabi_ui2f+0x60>
 80012c2:	229f      	movs	r2, #159	; 0x9f
 80012c4:	400b      	ands	r3, r1
 80012c6:	1a12      	subs	r2, r2, r0
 80012c8:	019b      	lsls	r3, r3, #6
 80012ca:	0a58      	lsrs	r0, r3, #9
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	0240      	lsls	r0, r0, #9
 80012d0:	05d2      	lsls	r2, r2, #23
 80012d2:	0a40      	lsrs	r0, r0, #9
 80012d4:	4310      	orrs	r0, r2
 80012d6:	bd70      	pop	{r4, r5, r6, pc}
 80012d8:	2200      	movs	r2, #0
 80012da:	2000      	movs	r0, #0
 80012dc:	e7f7      	b.n	80012ce <__aeabi_ui2f+0x66>
 80012de:	0260      	lsls	r0, r4, #9
 80012e0:	0a40      	lsrs	r0, r0, #9
 80012e2:	e7f4      	b.n	80012ce <__aeabi_ui2f+0x66>
 80012e4:	fbffffff 	.word	0xfbffffff

080012e8 <__aeabi_f2d>:
 80012e8:	0041      	lsls	r1, r0, #1
 80012ea:	0e09      	lsrs	r1, r1, #24
 80012ec:	1c4b      	adds	r3, r1, #1
 80012ee:	b570      	push	{r4, r5, r6, lr}
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	0246      	lsls	r6, r0, #9
 80012f4:	0a75      	lsrs	r5, r6, #9
 80012f6:	0fc4      	lsrs	r4, r0, #31
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	dd14      	ble.n	8001326 <__aeabi_f2d+0x3e>
 80012fc:	23e0      	movs	r3, #224	; 0xe0
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	076d      	lsls	r5, r5, #29
 8001302:	0b36      	lsrs	r6, r6, #12
 8001304:	18cb      	adds	r3, r1, r3
 8001306:	2100      	movs	r1, #0
 8001308:	0d0a      	lsrs	r2, r1, #20
 800130a:	0028      	movs	r0, r5
 800130c:	0512      	lsls	r2, r2, #20
 800130e:	4d1c      	ldr	r5, [pc, #112]	; (8001380 <__aeabi_f2d+0x98>)
 8001310:	4332      	orrs	r2, r6
 8001312:	055b      	lsls	r3, r3, #21
 8001314:	402a      	ands	r2, r5
 8001316:	085b      	lsrs	r3, r3, #1
 8001318:	4313      	orrs	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	07e4      	lsls	r4, r4, #31
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	4323      	orrs	r3, r4
 8001322:	0019      	movs	r1, r3
 8001324:	bd70      	pop	{r4, r5, r6, pc}
 8001326:	2900      	cmp	r1, #0
 8001328:	d114      	bne.n	8001354 <__aeabi_f2d+0x6c>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d01e      	beq.n	800136c <__aeabi_f2d+0x84>
 800132e:	0028      	movs	r0, r5
 8001330:	f000 f8b0 	bl	8001494 <__clzsi2>
 8001334:	280a      	cmp	r0, #10
 8001336:	dc1c      	bgt.n	8001372 <__aeabi_f2d+0x8a>
 8001338:	230b      	movs	r3, #11
 800133a:	002a      	movs	r2, r5
 800133c:	1a1b      	subs	r3, r3, r0
 800133e:	40da      	lsrs	r2, r3
 8001340:	0003      	movs	r3, r0
 8001342:	3315      	adds	r3, #21
 8001344:	409d      	lsls	r5, r3
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <__aeabi_f2d+0x9c>)
 8001348:	0312      	lsls	r2, r2, #12
 800134a:	1a1b      	subs	r3, r3, r0
 800134c:	055b      	lsls	r3, r3, #21
 800134e:	0b16      	lsrs	r6, r2, #12
 8001350:	0d5b      	lsrs	r3, r3, #21
 8001352:	e7d8      	b.n	8001306 <__aeabi_f2d+0x1e>
 8001354:	2d00      	cmp	r5, #0
 8001356:	d006      	beq.n	8001366 <__aeabi_f2d+0x7e>
 8001358:	0b32      	lsrs	r2, r6, #12
 800135a:	2680      	movs	r6, #128	; 0x80
 800135c:	0336      	lsls	r6, r6, #12
 800135e:	076d      	lsls	r5, r5, #29
 8001360:	4316      	orrs	r6, r2
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <__aeabi_f2d+0xa0>)
 8001364:	e7cf      	b.n	8001306 <__aeabi_f2d+0x1e>
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <__aeabi_f2d+0xa0>)
 8001368:	2600      	movs	r6, #0
 800136a:	e7cc      	b.n	8001306 <__aeabi_f2d+0x1e>
 800136c:	2300      	movs	r3, #0
 800136e:	2600      	movs	r6, #0
 8001370:	e7c9      	b.n	8001306 <__aeabi_f2d+0x1e>
 8001372:	0003      	movs	r3, r0
 8001374:	002a      	movs	r2, r5
 8001376:	3b0b      	subs	r3, #11
 8001378:	409a      	lsls	r2, r3
 800137a:	2500      	movs	r5, #0
 800137c:	e7e3      	b.n	8001346 <__aeabi_f2d+0x5e>
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	800fffff 	.word	0x800fffff
 8001384:	00000389 	.word	0x00000389
 8001388:	000007ff 	.word	0x000007ff

0800138c <__aeabi_d2f>:
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	004c      	lsls	r4, r1, #1
 8001390:	0d64      	lsrs	r4, r4, #21
 8001392:	030b      	lsls	r3, r1, #12
 8001394:	1c62      	adds	r2, r4, #1
 8001396:	0a5b      	lsrs	r3, r3, #9
 8001398:	0f46      	lsrs	r6, r0, #29
 800139a:	0552      	lsls	r2, r2, #21
 800139c:	0fc9      	lsrs	r1, r1, #31
 800139e:	431e      	orrs	r6, r3
 80013a0:	00c5      	lsls	r5, r0, #3
 80013a2:	0d52      	lsrs	r2, r2, #21
 80013a4:	2a01      	cmp	r2, #1
 80013a6:	dd29      	ble.n	80013fc <__aeabi_d2f+0x70>
 80013a8:	4b37      	ldr	r3, [pc, #220]	; (8001488 <__aeabi_d2f+0xfc>)
 80013aa:	18e7      	adds	r7, r4, r3
 80013ac:	2ffe      	cmp	r7, #254	; 0xfe
 80013ae:	dc1c      	bgt.n	80013ea <__aeabi_d2f+0x5e>
 80013b0:	2f00      	cmp	r7, #0
 80013b2:	dd3b      	ble.n	800142c <__aeabi_d2f+0xa0>
 80013b4:	0180      	lsls	r0, r0, #6
 80013b6:	1e43      	subs	r3, r0, #1
 80013b8:	4198      	sbcs	r0, r3
 80013ba:	2207      	movs	r2, #7
 80013bc:	00f3      	lsls	r3, r6, #3
 80013be:	0f6d      	lsrs	r5, r5, #29
 80013c0:	4303      	orrs	r3, r0
 80013c2:	432b      	orrs	r3, r5
 80013c4:	401a      	ands	r2, r3
 80013c6:	2a00      	cmp	r2, #0
 80013c8:	d004      	beq.n	80013d4 <__aeabi_d2f+0x48>
 80013ca:	220f      	movs	r2, #15
 80013cc:	401a      	ands	r2, r3
 80013ce:	2a04      	cmp	r2, #4
 80013d0:	d000      	beq.n	80013d4 <__aeabi_d2f+0x48>
 80013d2:	3304      	adds	r3, #4
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	04d2      	lsls	r2, r2, #19
 80013d8:	401a      	ands	r2, r3
 80013da:	d024      	beq.n	8001426 <__aeabi_d2f+0x9a>
 80013dc:	3701      	adds	r7, #1
 80013de:	b2fa      	uxtb	r2, r7
 80013e0:	2fff      	cmp	r7, #255	; 0xff
 80013e2:	d002      	beq.n	80013ea <__aeabi_d2f+0x5e>
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	0a58      	lsrs	r0, r3, #9
 80013e8:	e001      	b.n	80013ee <__aeabi_d2f+0x62>
 80013ea:	22ff      	movs	r2, #255	; 0xff
 80013ec:	2000      	movs	r0, #0
 80013ee:	0240      	lsls	r0, r0, #9
 80013f0:	05d2      	lsls	r2, r2, #23
 80013f2:	0a40      	lsrs	r0, r0, #9
 80013f4:	07c9      	lsls	r1, r1, #31
 80013f6:	4310      	orrs	r0, r2
 80013f8:	4308      	orrs	r0, r1
 80013fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fc:	4335      	orrs	r5, r6
 80013fe:	2c00      	cmp	r4, #0
 8001400:	d104      	bne.n	800140c <__aeabi_d2f+0x80>
 8001402:	2d00      	cmp	r5, #0
 8001404:	d10a      	bne.n	800141c <__aeabi_d2f+0x90>
 8001406:	2200      	movs	r2, #0
 8001408:	2000      	movs	r0, #0
 800140a:	e7f0      	b.n	80013ee <__aeabi_d2f+0x62>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d0ec      	beq.n	80013ea <__aeabi_d2f+0x5e>
 8001410:	2080      	movs	r0, #128	; 0x80
 8001412:	03c0      	lsls	r0, r0, #15
 8001414:	4330      	orrs	r0, r6
 8001416:	22ff      	movs	r2, #255	; 0xff
 8001418:	e7e9      	b.n	80013ee <__aeabi_d2f+0x62>
 800141a:	2400      	movs	r4, #0
 800141c:	2300      	movs	r3, #0
 800141e:	025b      	lsls	r3, r3, #9
 8001420:	0a58      	lsrs	r0, r3, #9
 8001422:	b2e2      	uxtb	r2, r4
 8001424:	e7e3      	b.n	80013ee <__aeabi_d2f+0x62>
 8001426:	08db      	lsrs	r3, r3, #3
 8001428:	003c      	movs	r4, r7
 800142a:	e7f8      	b.n	800141e <__aeabi_d2f+0x92>
 800142c:	003b      	movs	r3, r7
 800142e:	3317      	adds	r3, #23
 8001430:	dbf3      	blt.n	800141a <__aeabi_d2f+0x8e>
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	041b      	lsls	r3, r3, #16
 8001436:	4333      	orrs	r3, r6
 8001438:	261e      	movs	r6, #30
 800143a:	1bf6      	subs	r6, r6, r7
 800143c:	2e1f      	cmp	r6, #31
 800143e:	dd14      	ble.n	800146a <__aeabi_d2f+0xde>
 8001440:	2202      	movs	r2, #2
 8001442:	4252      	negs	r2, r2
 8001444:	1bd7      	subs	r7, r2, r7
 8001446:	001a      	movs	r2, r3
 8001448:	40fa      	lsrs	r2, r7
 800144a:	0017      	movs	r7, r2
 800144c:	2e20      	cmp	r6, #32
 800144e:	d004      	beq.n	800145a <__aeabi_d2f+0xce>
 8001450:	4a0e      	ldr	r2, [pc, #56]	; (800148c <__aeabi_d2f+0x100>)
 8001452:	4694      	mov	ip, r2
 8001454:	4464      	add	r4, ip
 8001456:	40a3      	lsls	r3, r4
 8001458:	431d      	orrs	r5, r3
 800145a:	002b      	movs	r3, r5
 800145c:	1e5d      	subs	r5, r3, #1
 800145e:	41ab      	sbcs	r3, r5
 8001460:	2207      	movs	r2, #7
 8001462:	433b      	orrs	r3, r7
 8001464:	401a      	ands	r2, r3
 8001466:	2700      	movs	r7, #0
 8001468:	e7ad      	b.n	80013c6 <__aeabi_d2f+0x3a>
 800146a:	4a09      	ldr	r2, [pc, #36]	; (8001490 <__aeabi_d2f+0x104>)
 800146c:	0028      	movs	r0, r5
 800146e:	18a2      	adds	r2, r4, r2
 8001470:	4095      	lsls	r5, r2
 8001472:	4093      	lsls	r3, r2
 8001474:	1e6c      	subs	r4, r5, #1
 8001476:	41a5      	sbcs	r5, r4
 8001478:	40f0      	lsrs	r0, r6
 800147a:	2207      	movs	r2, #7
 800147c:	432b      	orrs	r3, r5
 800147e:	4303      	orrs	r3, r0
 8001480:	401a      	ands	r2, r3
 8001482:	2700      	movs	r7, #0
 8001484:	e79f      	b.n	80013c6 <__aeabi_d2f+0x3a>
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	fffffc80 	.word	0xfffffc80
 800148c:	fffffca2 	.word	0xfffffca2
 8001490:	fffffc82 	.word	0xfffffc82

08001494 <__clzsi2>:
 8001494:	211c      	movs	r1, #28
 8001496:	2301      	movs	r3, #1
 8001498:	041b      	lsls	r3, r3, #16
 800149a:	4298      	cmp	r0, r3
 800149c:	d301      	bcc.n	80014a2 <__clzsi2+0xe>
 800149e:	0c00      	lsrs	r0, r0, #16
 80014a0:	3910      	subs	r1, #16
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	4298      	cmp	r0, r3
 80014a6:	d301      	bcc.n	80014ac <__clzsi2+0x18>
 80014a8:	0a00      	lsrs	r0, r0, #8
 80014aa:	3908      	subs	r1, #8
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	4298      	cmp	r0, r3
 80014b0:	d301      	bcc.n	80014b6 <__clzsi2+0x22>
 80014b2:	0900      	lsrs	r0, r0, #4
 80014b4:	3904      	subs	r1, #4
 80014b6:	a202      	add	r2, pc, #8	; (adr r2, 80014c0 <__clzsi2+0x2c>)
 80014b8:	5c10      	ldrb	r0, [r2, r0]
 80014ba:	1840      	adds	r0, r0, r1
 80014bc:	4770      	bx	lr
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	02020304 	.word	0x02020304
 80014c4:	01010101 	.word	0x01010101
	...

080014d0 <gnss_callback>:
  * =======================================================================<BR>
  * This function manages the data element of the GNSS.  It is instantiated
  * by the GNSS callback.
  */

void gnss_callback(ot_int rx_type, ot_int msg_type) {
 80014d0:	b510      	push	{r4, lr}
	// 0, 0 --> error accessing the control interface to GNSS device
	// 0, 1 --> GNSS Receiver is turning-off
	// 0, 2 --> GNSS Receiver is turning-on
	// 1 indicates we have a UBX message.
	// 1, 0x0107 --> NAV-PVT message.
	switch (rx_type) {
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d002      	beq.n	80014dc <gnss_callback+0xc>
 80014d6:	2801      	cmp	r0, #1
 80014d8:	d00a      	beq.n	80014f0 <gnss_callback+0x20>
			sys_task_setlatency(NAV_TASK, 255);
			sys_preempt(NAV_TASK, 250);
		}
		break;
	}
}
 80014da:	bd10      	pop	{r4, pc}
		switch (msg_type) {
 80014dc:	1e4b      	subs	r3, r1, #1
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d8fb      	bhi.n	80014da <gnss_callback+0xa>
			dll_silence( (ot_bool)(msg_type-1) );
 80014e2:	0019      	movs	r1, r3
 80014e4:	1e48      	subs	r0, r1, #1
 80014e6:	4181      	sbcs	r1, r0
 80014e8:	b2c8      	uxtb	r0, r1
 80014ea:	f005 f925 	bl	8006738 <dll_silence>
			break;
 80014ee:	e7f4      	b.n	80014da <gnss_callback+0xa>
		if ((msg_type == 0x0107) && (NAV_TASK->event == 0)) {
 80014f0:	2308      	movs	r3, #8
 80014f2:	33ff      	adds	r3, #255	; 0xff
 80014f4:	4299      	cmp	r1, r3
 80014f6:	d1f0      	bne.n	80014da <gnss_callback+0xa>
 80014f8:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <gnss_callback+0x60>)
 80014fa:	3bdb      	subs	r3, #219	; 0xdb
 80014fc:	5cd3      	ldrb	r3, [r2, r3]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1eb      	bne.n	80014da <gnss_callback+0xa>
			sys_task_setevent(NAV_TASK, 1);
 8001502:	4c0c      	ldr	r4, [pc, #48]	; (8001534 <gnss_callback+0x64>)
 8001504:	2101      	movs	r1, #1
 8001506:	0020      	movs	r0, r4
 8001508:	f008 f81e 	bl	8009548 <sys_task_setevent>
			sys_task_setcursor(NAV_TASK, PING_CHANNEL);
 800150c:	2128      	movs	r1, #40	; 0x28
 800150e:	0020      	movs	r0, r4
 8001510:	f008 f81c 	bl	800954c <sys_task_setcursor>
			sys_task_setreserve(NAV_TASK, 1);
 8001514:	2101      	movs	r1, #1
 8001516:	0020      	movs	r0, r4
 8001518:	f008 f81a 	bl	8009550 <sys_task_setreserve>
			sys_task_setlatency(NAV_TASK, 255);
 800151c:	21ff      	movs	r1, #255	; 0xff
 800151e:	0020      	movs	r0, r4
 8001520:	f008 f818 	bl	8009554 <sys_task_setlatency>
			sys_preempt(NAV_TASK, 250);
 8001524:	21fa      	movs	r1, #250	; 0xfa
 8001526:	0020      	movs	r0, r4
 8001528:	f008 f88e 	bl	8009648 <sys_preempt>
}
 800152c:	e7d5      	b.n	80014da <gnss_callback+0xa>
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	20002e1c 	.word	0x20002e1c
 8001534:	20002e48 	.word	0x20002e48

08001538 <app_set_txpwr>:
void app_set_txpwr(ot_int dBm) {
 8001538:	b570      	push	{r4, r5, r6, lr}
 800153a:	0004      	movs	r4, r0
    fp = ISF_open_su(0x02);
 800153c:	2002      	movs	r0, #2
 800153e:	f007 ff4c 	bl	80093da <ISF_open_su>
 8001542:	1e05      	subs	r5, r0, #0
    if (fp != NULL) {
 8001544:	d02b      	beq.n	800159e <app_set_txpwr+0x66>
        pwr_flt.ushort      = vl_read(fp, offset);
 8001546:	2108      	movs	r1, #8
 8001548:	f007 fe90 	bl	800926c <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 800154c:	3428      	adds	r4, #40	; 0x28
 800154e:	0064      	lsls	r4, r4, #1
 8001550:	b2e4      	uxtb	r4, r4
 8001552:	26ff      	movs	r6, #255	; 0xff
 8001554:	0002      	movs	r2, r0
 8001556:	43b2      	bics	r2, r6
 8001558:	4322      	orrs	r2, r4
        vl_write(fp, offset, pwr_flt.ushort);
 800155a:	b292      	uxth	r2, r2
 800155c:	2108      	movs	r1, #8
 800155e:	0028      	movs	r0, r5
 8001560:	f007 fe8b 	bl	800927a <vl_write>
        pwr_flt.ushort      = vl_read(fp, offset);
 8001564:	210e      	movs	r1, #14
 8001566:	0028      	movs	r0, r5
 8001568:	f007 fe80 	bl	800926c <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 800156c:	0002      	movs	r2, r0
 800156e:	43b2      	bics	r2, r6
 8001570:	4322      	orrs	r2, r4
        vl_write(fp, offset, pwr_flt.ushort);
 8001572:	b292      	uxth	r2, r2
 8001574:	210e      	movs	r1, #14
 8001576:	0028      	movs	r0, r5
 8001578:	f007 fe7f 	bl	800927a <vl_write>
        pwr_flt.ushort      = vl_read(fp, offset);
 800157c:	2114      	movs	r1, #20
 800157e:	0028      	movs	r0, r5
 8001580:	f007 fe74 	bl	800926c <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 8001584:	0002      	movs	r2, r0
 8001586:	43b2      	bics	r2, r6
 8001588:	4322      	orrs	r2, r4
        vl_write(fp, offset, pwr_flt.ushort);
 800158a:	b292      	uxth	r2, r2
 800158c:	2114      	movs	r1, #20
 800158e:	0028      	movs	r0, r5
 8001590:	f007 fe73 	bl	800927a <vl_write>
        vl_close(fp);
 8001594:	0028      	movs	r0, r5
 8001596:	f007 feeb 	bl	8009370 <vl_close>
        rm2_channel_refresh();
 800159a:	f006 f8dd 	bl	8007758 <rm2_channel_refresh>
}
 800159e:	bd70      	pop	{r4, r5, r6, pc}

080015a0 <m2qp_sig_isf>:
}
 80015a0:	2001      	movs	r0, #1
 80015a2:	4770      	bx	lr

080015a4 <ping_systask>:
    switch (task->event) {
 80015a4:	7803      	ldrb	r3, [r0, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <ping_systask+0xe>
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d102      	bne.n	80015b4 <ping_systask+0x10>
        task->event = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	7003      	strb	r3, [r0, #0]
}
 80015b2:	4770      	bx	lr
    default: task->event = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	7003      	strb	r3, [r0, #0]
}
 80015b8:	e7fb      	b.n	80015b2 <ping_systask+0xe>

080015ba <gnss_storedata>:


void gnss_storedata(ot_s32* lat, ot_s32* lon, ot_u32* acc) {
 80015ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015bc:	0007      	movs	r7, r0
 80015be:	000e      	movs	r6, r1
 80015c0:	0015      	movs	r5, r2
    vlFILE* fp;

    fp = ISF_open_su(ISF_ID(gnss_output));
 80015c2:	2017      	movs	r0, #23
 80015c4:	f007 ff09 	bl	80093da <ISF_open_su>
 80015c8:	1e04      	subs	r4, r0, #0
    if (fp != NULL) {
 80015ca:	d107      	bne.n	80015dc <gnss_storedata+0x22>
        ((ot_u16*)lon)[1] = vl_read(fp, 26);
        ((ot_u16*)acc)[0] = vl_read(fp, 40);
        ((ot_u16*)acc)[1] = vl_read(fp, 42);
    }
    else {
        *lat = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	603b      	str	r3, [r7, #0]
        *lon = 0;
 80015d0:	6033      	str	r3, [r6, #0]
        *acc = 0;
 80015d2:	602b      	str	r3, [r5, #0]
    }
    vl_close(fp);
 80015d4:	0020      	movs	r0, r4
 80015d6:	f007 fecb 	bl	8009370 <vl_close>
}
 80015da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((ot_u16*)lat)[0] = vl_read(fp, 28);
 80015dc:	211c      	movs	r1, #28
 80015de:	f007 fe45 	bl	800926c <vl_read>
 80015e2:	8038      	strh	r0, [r7, #0]
        ((ot_u16*)lat)[1] = vl_read(fp, 30);
 80015e4:	211e      	movs	r1, #30
 80015e6:	0020      	movs	r0, r4
 80015e8:	f007 fe40 	bl	800926c <vl_read>
 80015ec:	8078      	strh	r0, [r7, #2]
        ((ot_u16*)lon)[0] = vl_read(fp, 24);
 80015ee:	2118      	movs	r1, #24
 80015f0:	0020      	movs	r0, r4
 80015f2:	f007 fe3b 	bl	800926c <vl_read>
 80015f6:	8030      	strh	r0, [r6, #0]
        ((ot_u16*)lon)[1] = vl_read(fp, 26);
 80015f8:	211a      	movs	r1, #26
 80015fa:	0020      	movs	r0, r4
 80015fc:	f007 fe36 	bl	800926c <vl_read>
 8001600:	8070      	strh	r0, [r6, #2]
        ((ot_u16*)acc)[0] = vl_read(fp, 40);
 8001602:	2128      	movs	r1, #40	; 0x28
 8001604:	0020      	movs	r0, r4
 8001606:	f007 fe31 	bl	800926c <vl_read>
 800160a:	8028      	strh	r0, [r5, #0]
        ((ot_u16*)acc)[1] = vl_read(fp, 42);
 800160c:	212a      	movs	r1, #42	; 0x2a
 800160e:	0020      	movs	r0, r4
 8001610:	f007 fe2c 	bl	800926c <vl_read>
 8001614:	8068      	strh	r0, [r5, #2]
 8001616:	e7dd      	b.n	80015d4 <gnss_storedata+0x1a>

08001618 <gnss_telegram_applet>:
  * will run.  The main job of the applet is to load prepare the communication.
  * Usually, this means loading a request packet, but you could also make an
  * applet that does any manner of state-based communication routines.  The
  * Adaptive Search and CoAP demos are examples of sophisticated applets.
  */
void gnss_telegram_applet(m2session* active) {
 8001618:	b510      	push	{r4, lr}
 800161a:	b086      	sub	sp, #24
	ot_u32  acc;
	float 	acc_x;
	ot_u8   data_id;
	ot_u8   tgram_payload[7];

	gnss_storedata( &lat, &lon, &acc);
 800161c:	aa03      	add	r2, sp, #12
 800161e:	a904      	add	r1, sp, #16
 8001620:	a805      	add	r0, sp, #20
 8001622:	f7ff ffca 	bl	80015ba <gnss_storedata>

    // Geolocation Type 0 Telegram
    data_id = 0x10 | 0x0;

	acc >>= 2;
 8001626:	9b03      	ldr	r3, [sp, #12]
 8001628:	0898      	lsrs	r0, r3, #2
 800162a:	9003      	str	r0, [sp, #12]
	acc_x = (float)acc / 2000.f;
 800162c:	f7ff fe1c 	bl	8001268 <__aeabi_ui2f>
 8001630:	4927      	ldr	r1, [pc, #156]	; (80016d0 <gnss_telegram_applet+0xb8>)
 8001632:	f7ff f8cb 	bl	80007cc <__aeabi_fdiv>
 8001636:	1c04      	adds	r4, r0, #0
	if (acc_x == 0) {
 8001638:	2100      	movs	r1, #0
 800163a:	f7fe fee7 	bl	800040c <__aeabi_fcmpeq>
 800163e:	2800      	cmp	r0, #0
 8001640:	d027      	beq.n	8001692 <gnss_telegram_applet+0x7a>
		tgram_payload[0] = 100;
 8001642:	ab01      	add	r3, sp, #4
 8001644:	2264      	movs	r2, #100	; 0x64
 8001646:	701a      	strb	r2, [r3, #0]
		}
	}

	// Make lat/lon based on 0:360 degrees rather than -180:180.
	// This enables it to be unsigned and thus precision reduced by arbitrary shifting.
	lat = (lat + 1800000000);
 8001648:	9b05      	ldr	r3, [sp, #20]
 800164a:	4a22      	ldr	r2, [pc, #136]	; (80016d4 <gnss_telegram_applet+0xbc>)
 800164c:	4694      	mov	ip, r2
 800164e:	4463      	add	r3, ip
 8001650:	0019      	movs	r1, r3
 8001652:	9305      	str	r3, [sp, #20]
	lon = (lon + 1800000000);
 8001654:	9b04      	ldr	r3, [sp, #16]
 8001656:	4463      	add	r3, ip
 8001658:	9304      	str	r3, [sp, #16]

	tgram_payload[1] = ((ot_u8*)&lat)[B3];
 800165a:	aa01      	add	r2, sp, #4
 800165c:	0e08      	lsrs	r0, r1, #24
 800165e:	7050      	strb	r0, [r2, #1]
	tgram_payload[2] = ((ot_u8*)&lat)[B2];
 8001660:	0208      	lsls	r0, r1, #8
 8001662:	0e00      	lsrs	r0, r0, #24
 8001664:	7090      	strb	r0, [r2, #2]
	tgram_payload[3] = ((ot_u8*)&lat)[B1];
 8001666:	0409      	lsls	r1, r1, #16
 8001668:	0e09      	lsrs	r1, r1, #24
 800166a:	70d1      	strb	r1, [r2, #3]
	tgram_payload[4] = ((ot_u8*)&lon)[B3];
 800166c:	0e19      	lsrs	r1, r3, #24
 800166e:	7111      	strb	r1, [r2, #4]
	tgram_payload[5] = ((ot_u8*)&lon)[B2];
 8001670:	0219      	lsls	r1, r3, #8
 8001672:	0e09      	lsrs	r1, r1, #24
 8001674:	7151      	strb	r1, [r2, #5]
	tgram_payload[6] = ((ot_u8*)&lon)[B1];
 8001676:	041b      	lsls	r3, r3, #16
 8001678:	0e1b      	lsrs	r3, r3, #24
 800167a:	7193      	strb	r3, [r2, #6]

	/// We use the lower 32 bits of the HW-ID as the device token.
	/// This is an imperfect solution, but it's handy for demo/demokit purposes
	dev_token = *((ot_u32*)(UID_BASE + 0x14));
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <gnss_telegram_applet+0xc0>)
 800167e:	6818      	ldr	r0, [r3, #0]

    otapi_new_telegram(dev_token, data_id, tgram_payload);
 8001680:	2110      	movs	r1, #16
 8001682:	f004 fddf 	bl	8006244 <otapi_new_telegram>
    otapi_start_dialog(1024);
 8001686:	2080      	movs	r0, #128	; 0x80
 8001688:	00c0      	lsls	r0, r0, #3
 800168a:	f004 fe47 	bl	800631c <otapi_start_dialog>
}
 800168e:	b006      	add	sp, #24
 8001690:	bd10      	pop	{r4, pc}
		acc_x = (logf(acc_x) / logf(2000.f*100));
 8001692:	1c20      	adds	r0, r4, #0
 8001694:	f009 fe46 	bl	800b324 <logf>
 8001698:	4910      	ldr	r1, [pc, #64]	; (80016dc <gnss_telegram_applet+0xc4>)
 800169a:	f7ff f897 	bl	80007cc <__aeabi_fdiv>
 800169e:	1c04      	adds	r4, r0, #0
		if (acc_x > 1.f) {
 80016a0:	21fe      	movs	r1, #254	; 0xfe
 80016a2:	0589      	lsls	r1, r1, #22
 80016a4:	f7fe fecc 	bl	8000440 <__aeabi_fcmpgt>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d003      	beq.n	80016b4 <gnss_telegram_applet+0x9c>
			tgram_payload[0] = 1;
 80016ac:	ab01      	add	r3, sp, #4
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e7c9      	b.n	8001648 <gnss_telegram_applet+0x30>
			acc_x = 100.f - (99.f * acc_x);
 80016b4:	490a      	ldr	r1, [pc, #40]	; (80016e0 <gnss_telegram_applet+0xc8>)
 80016b6:	1c20      	adds	r0, r4, #0
 80016b8:	f7ff fa60 	bl	8000b7c <__aeabi_fmul>
 80016bc:	1c01      	adds	r1, r0, #0
 80016be:	4809      	ldr	r0, [pc, #36]	; (80016e4 <gnss_telegram_applet+0xcc>)
 80016c0:	f7ff fb8e 	bl	8000de0 <__aeabi_fsub>
			tgram_payload[0] = (ot_u8)acc_x;
 80016c4:	f7fe fed0 	bl	8000468 <__aeabi_f2uiz>
 80016c8:	ab01      	add	r3, sp, #4
 80016ca:	7018      	strb	r0, [r3, #0]
 80016cc:	e7bc      	b.n	8001648 <gnss_telegram_applet+0x30>
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	44fa0000 	.word	0x44fa0000
 80016d4:	6b49d200 	.word	0x6b49d200
 80016d8:	1ff80064 	.word	0x1ff80064
 80016dc:	41434c13 	.word	0x41434c13
 80016e0:	42c60000 	.word	0x42c60000
 80016e4:	42c80000 	.word	0x42c80000

080016e8 <gnssreporter_systask>:
void gnssreporter_systask(void* arg) {
 80016e8:	b530      	push	{r4, r5, lr}
 80016ea:	b083      	sub	sp, #12
 80016ec:	0004      	movs	r4, r0
    switch (task->event) {
 80016ee:	7803      	ldrb	r3, [r0, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d004      	beq.n	80016fe <gnssreporter_systask+0x16>
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d009      	beq.n	800170c <gnssreporter_systask+0x24>
        task->event = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	7003      	strb	r3, [r0, #0]
}
 80016fc:	e011      	b.n	8001722 <gnssreporter_systask+0x3a>
        if (setup.is_gateway == False) {
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <gnssreporter_systask+0x40>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10d      	bne.n	8001722 <gnssreporter_systask+0x3a>
            gnss_connect();
 8001706:	f004 fa5b 	bl	8005bc0 <ubx_connect>
 800170a:	e00a      	b.n	8001722 <gnssreporter_systask+0x3a>
        s_tmpl.channel      = TG_CHANNEL;
 800170c:	2381      	movs	r3, #129	; 0x81
 800170e:	466a      	mov	r2, sp
 8001710:	7053      	strb	r3, [r2, #1]
        s_tmpl.flagmask     = 0;
 8001712:	2500      	movs	r5, #0
 8001714:	7155      	strb	r5, [r2, #5]
        s_tmpl.subnetmask   = 0;
 8001716:	70d5      	strb	r5, [r2, #3]
        m2task_telegram(&s_tmpl, &gnss_telegram_applet);
 8001718:	4904      	ldr	r1, [pc, #16]	; (800172c <gnssreporter_systask+0x44>)
 800171a:	4668      	mov	r0, sp
 800171c:	f005 fdb6 	bl	800728c <m2task_telegram>
        task->event = 0;
 8001720:	7025      	strb	r5, [r4, #0]
}
 8001722:	b003      	add	sp, #12
 8001724:	bd30      	pop	{r4, r5, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	200001c4 	.word	0x200001c4
 800172c:	08001619 	.word	0x08001619

08001730 <setup_init>:
  * any of the kernel & system features are initialized.  It's a good
  * place to put features that control which drivers or apps get 
  * activated.
  */
  
void setup_init() {
 8001730:	b510      	push	{r4, lr}
#if defined(__FORCE_GATEWAY)
    setup.is_gateway = 1;
#elif defined(OT_SWITCH1_PIN)
    setup.is_gateway = (ot_bool)((OT_SWITCH1_PORT->IDR & OT_SWITCH1_PIN) != (OT_SWITCH1_POLARITY << OT_SWITCH1_PIN));
#else
    setup.is_gateway = 0;
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <setup_init+0x5c>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
#endif
    
    /// Blink the board LEDs to show that it is starting up.
    {   ot_u8 i;

        i=4;
 8001738:	2404      	movs	r4, #4
        while (i != 0) {
 800173a:	e011      	b.n	8001760 <setup_init+0x30>
#	endif

	static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
	static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
	static inline void BOARD_led1_toggle(void)  { OT_TRIG1_TOG(); }
	static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 800173c:	23a0      	movs	r3, #160	; 0xa0
 800173e:	05db      	lsls	r3, r3, #23
 8001740:	2280      	movs	r2, #128	; 0x80
 8001742:	00d2      	lsls	r2, r2, #3
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
            if (i&1)    BOARD_led1_on();
            else        BOARD_led2_on();

            delay_ti(60);
 8001746:	203c      	movs	r0, #60	; 0x3c
 8001748:	f008 fd8c 	bl	800a264 <delay_ti>
	static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 800174c:	23a0      	movs	r3, #160	; 0xa0
 800174e:	05db      	lsls	r3, r3, #23
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	00d2      	lsls	r2, r2, #3
 8001754:	619a      	str	r2, [r3, #24]
	static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	0092      	lsls	r2, r2, #2
 800175a:	619a      	str	r2, [r3, #24]
            BOARD_led2_off();
            BOARD_led1_off();
            i--;
 800175c:	3c01      	subs	r4, #1
 800175e:	b2e4      	uxtb	r4, r4
        while (i != 0) {
 8001760:	2c00      	cmp	r4, #0
 8001762:	d007      	beq.n	8001774 <setup_init+0x44>
            if (i&1)    BOARD_led1_on();
 8001764:	07e3      	lsls	r3, r4, #31
 8001766:	d5e9      	bpl.n	800173c <setup_init+0xc>
	static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
 8001768:	23a0      	movs	r3, #160	; 0xa0
 800176a:	05db      	lsls	r3, r3, #23
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	629a      	str	r2, [r3, #40]	; 0x28
 8001772:	e7e8      	b.n	8001746 <setup_init+0x16>
    // BusyWait for button to be released.
#   ifdef OT_SWITCH1_PIN
    while ((OT_SWITCH1_PORT->IDR & OT_SWITCH1_PIN) == (BOARD_SW1_POLARITY << OT_SWITCH1_PIN));
#   endif
    
    if (setup.is_gateway == False) {
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <setup_init+0x5c>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d000      	beq.n	800177e <setup_init+0x4e>
        gnss_config(&gnss_callback, __GNSS_PERIOD_S);
    }
    
    // Configure the button, which will now generate an interrupt when pushed.
    setup_button_init();
}
 800177c:	bd10      	pop	{r4, pc}
        gnss_config(&gnss_callback, __GNSS_PERIOD_S);
 800177e:	2103      	movs	r1, #3
 8001780:	4249      	negs	r1, r1
 8001782:	4803      	ldr	r0, [pc, #12]	; (8001790 <setup_init+0x60>)
 8001784:	f004 fa08 	bl	8005b98 <ubx_config>
}
 8001788:	e7f8      	b.n	800177c <setup_init+0x4c>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	200001c4 	.word	0x200001c4
 8001790:	080014d1 	.word	0x080014d1

08001794 <ping_invoke>:





void ping_invoke(ot_u8 channel) {
 8001794:	b570      	push	{r4, r5, r6, lr}
 8001796:	0005      	movs	r5, r0
///
/// @note The latency parameter is mostly useful for protocol management,
/// for which you probably want to enforce a request-response turnaround time.
/// for processing and for iterative tasks it is not important: set to 255.
///
    sys_task_setevent(PING_TASK, 1);
 8001798:	4c0a      	ldr	r4, [pc, #40]	; (80017c4 <ping_invoke+0x30>)
 800179a:	2101      	movs	r1, #1
 800179c:	0020      	movs	r0, r4
 800179e:	f007 fed3 	bl	8009548 <sys_task_setevent>
    sys_task_setcursor(PING_TASK, channel);
 80017a2:	0029      	movs	r1, r5
 80017a4:	0020      	movs	r0, r4
 80017a6:	f007 fed1 	bl	800954c <sys_task_setcursor>
    sys_task_setreserve(PING_TASK, 1);
 80017aa:	2101      	movs	r1, #1
 80017ac:	0020      	movs	r0, r4
 80017ae:	f007 fecf 	bl	8009550 <sys_task_setreserve>
    sys_task_setlatency(PING_TASK, 255);
 80017b2:	21ff      	movs	r1, #255	; 0xff
 80017b4:	0020      	movs	r0, r4
 80017b6:	f007 fecd 	bl	8009554 <sys_task_setlatency>
    sys_preempt(PING_TASK, 0);
 80017ba:	2100      	movs	r1, #0
 80017bc:	0020      	movs	r0, r4
 80017be:	f007 ff43 	bl	8009648 <sys_preempt>
}
 80017c2:	bd70      	pop	{r4, r5, r6, pc}
 80017c4:	20002e50 	.word	0x20002e50

080017c8 <alp_ext_proc>:
ot_bool alp_ext_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 80017c8:	b570      	push	{r4, r5, r6, lr}
 80017ca:	0004      	movs	r4, r0
    ot_u8 flags      	= INREC(alp, FLAGS);
 80017cc:	2104      	movs	r1, #4
 80017ce:	4249      	negs	r1, r1
 80017d0:	6880      	ldr	r0, [r0, #8]
 80017d2:	f007 fa3a 	bl	8008c4a <q_getcursor_val>
    ot_u8 payload_len 	= INREC(alp, PLEN);
 80017d6:	2103      	movs	r1, #3
 80017d8:	4249      	negs	r1, r1
 80017da:	68a0      	ldr	r0, [r4, #8]
 80017dc:	f007 fa35 	bl	8008c4a <q_getcursor_val>
    ot_u8 alp_id      	= INREC(alp, ID);
 80017e0:	2102      	movs	r1, #2
 80017e2:	4249      	negs	r1, r1
 80017e4:	68a0      	ldr	r0, [r4, #8]
 80017e6:	f007 fa30 	bl	8008c4a <q_getcursor_val>
 80017ea:	0005      	movs	r5, r0
    ot_u8 alp_cmd     	= INREC(alp, CMD);
 80017ec:	2101      	movs	r1, #1
 80017ee:	4249      	negs	r1, r1
 80017f0:	68a0      	ldr	r0, [r4, #8]
 80017f2:	f007 fa2a 	bl	8008c4a <q_getcursor_val>
    switch (alp_id) {
 80017f6:	2d10      	cmp	r5, #16
 80017f8:	d003      	beq.n	8001802 <alp_ext_proc+0x3a>
 80017fa:	2dff      	cmp	r5, #255	; 0xff
 80017fc:	d023      	beq.n	8001846 <alp_ext_proc+0x7e>
}
 80017fe:	2001      	movs	r0, #1
 8001800:	bd70      	pop	{r4, r5, r6, pc}
    	tx_eirp 		= q_readbyte(alp->inq);
 8001802:	68a0      	ldr	r0, [r4, #8]
 8001804:	f007 fa8b 	bl	8008d1e <q_readbyte>
    	subnet  		= q_readbyte(alp->inq);
 8001808:	68a0      	ldr	r0, [r4, #8]
 800180a:	f007 fa88 	bl	8008d1e <q_readbyte>
    	token   		= q_readlong(alp->inq);
 800180e:	68a0      	ldr	r0, [r4, #8]
 8001810:	f007 fa9f 	bl	8008d52 <q_readlong>
    	ptype   		= q_readbyte(alp->inq);
 8001814:	68a0      	ldr	r0, [r4, #8]
 8001816:	f007 fa82 	bl	8008d1e <q_readbyte>
    	acc      		= q_readbyte(alp->inq);
 800181a:	68a0      	ldr	r0, [r4, #8]
 800181c:	f007 fa7f 	bl	8008d1e <q_readbyte>
    	lat.ubyte[B3] 	= q_readbyte(alp->inq);
 8001820:	68a0      	ldr	r0, [r4, #8]
 8001822:	f007 fa7c 	bl	8008d1e <q_readbyte>
    	lat.ubyte[B2] 	= q_readbyte(alp->inq);
 8001826:	68a0      	ldr	r0, [r4, #8]
 8001828:	f007 fa79 	bl	8008d1e <q_readbyte>
    	lat.ubyte[B1] 	= q_readbyte(alp->inq);
 800182c:	68a0      	ldr	r0, [r4, #8]
 800182e:	f007 fa76 	bl	8008d1e <q_readbyte>
    	lon.ubyte[B3] 	= q_readbyte(alp->inq);
 8001832:	68a0      	ldr	r0, [r4, #8]
 8001834:	f007 fa73 	bl	8008d1e <q_readbyte>
		lon.ubyte[B2] 	= q_readbyte(alp->inq);
 8001838:	68a0      	ldr	r0, [r4, #8]
 800183a:	f007 fa70 	bl	8008d1e <q_readbyte>
		lon.ubyte[B1] 	= q_readbyte(alp->inq);
 800183e:	68a0      	ldr	r0, [r4, #8]
 8001840:	f007 fa6d 	bl	8008d1e <q_readbyte>
    } break;
 8001844:	e7db      	b.n	80017fe <alp_ext_proc+0x36>
        if (alp_cmd == 0) {
 8001846:	0643      	lsls	r3, r0, #25
 8001848:	d1d9      	bne.n	80017fe <alp_ext_proc+0x36>
            ping_invoke(PING_CHANNEL);
 800184a:	2028      	movs	r0, #40	; 0x28
 800184c:	f7ff ffa2 	bl	8001794 <ping_invoke>
 8001850:	e7d5      	b.n	80017fe <alp_ext_proc+0x36>

08001852 <beacons_off>:



ot_int beacons_off(void) {
 8001852:	b570      	push	{r4, r5, r6, lr}
    vlFILE* fp;
    ot_int output = -1;

    fp = ISF_open_su(0);
 8001854:	2000      	movs	r0, #0
 8001856:	f007 fdc0 	bl	80093da <ISF_open_su>
 800185a:	1e04      	subs	r4, r0, #0
    if (fp != NULL) {
 800185c:	d00b      	beq.n	8001876 <beacons_off+0x24>
        output = vl_write(fp, 6, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2106      	movs	r1, #6
 8001862:	f007 fd0a 	bl	800927a <vl_write>
 8001866:	b205      	sxth	r5, r0
        vl_close(fp);
 8001868:	0020      	movs	r0, r4
 800186a:	f007 fd81 	bl	8009370 <vl_close>

        dll_refresh();
 800186e:	f005 fbff 	bl	8007070 <dll_refresh>
    }

    return output;
}
 8001872:	0028      	movs	r0, r5
 8001874:	bd70      	pop	{r4, r5, r6, pc}
    ot_int output = -1;
 8001876:	2501      	movs	r5, #1
 8001878:	426d      	negs	r5, r5
 800187a:	e7fa      	b.n	8001872 <beacons_off+0x20>

0800187c <setup_tgramlisten>:
    }

    return output;
}

void setup_tgramlisten(bool fg_or_bg) {
 800187c:	b570      	push	{r4, r5, r6, lr}
 800187e:	0005      	movs	r5, r0
    static const ot_u8 sleep_gateway[4] = { SPLIT_TIME16(2,0,0), TG_CHANNEL, 0x50 };
    static const ot_u8 sleep_endpoint[4]= { SPLIT_TIME16(0,2,3), TG_CHANNEL, 0x80 };
    vlFILE* fp;
    ot_u8* data;

    fp = ISF_open_su(5);
 8001880:	2005      	movs	r0, #5
 8001882:	f007 fdaa 	bl	80093da <ISF_open_su>
 8001886:	1e04      	subs	r4, r0, #0
    if (fp != NULL) {
 8001888:	d00c      	beq.n	80018a4 <setup_tgramlisten+0x28>
        data = fg_or_bg ? (ot_u8*)sleep_gateway : (ot_u8*)sleep_endpoint;
 800188a:	2d00      	cmp	r5, #0
 800188c:	d00b      	beq.n	80018a6 <setup_tgramlisten+0x2a>
 800188e:	4a07      	ldr	r2, [pc, #28]	; (80018ac <setup_tgramlisten+0x30>)
 8001890:	3210      	adds	r2, #16
        vl_store(fp, 4, data);
 8001892:	2104      	movs	r1, #4
 8001894:	0020      	movs	r0, r4
 8001896:	f007 fd33 	bl	8009300 <vl_store>
        vl_close(fp);
 800189a:	0020      	movs	r0, r4
 800189c:	f007 fd68 	bl	8009370 <vl_close>
        dll_refresh();
 80018a0:	f005 fbe6 	bl	8007070 <dll_refresh>
    }
}
 80018a4:	bd70      	pop	{r4, r5, r6, pc}
        data = fg_or_bg ? (ot_u8*)sleep_gateway : (ot_u8*)sleep_endpoint;
 80018a6:	4a01      	ldr	r2, [pc, #4]	; (80018ac <setup_tgramlisten+0x30>)
 80018a8:	3214      	adds	r2, #20
 80018aa:	e7f2      	b.n	8001892 <setup_tgramlisten+0x16>
 80018ac:	0800b744 	.word	0x0800b744

080018b0 <main>:


void main(void) {
 80018b0:	b510      	push	{r4, lr}
    ///1. Standard Power-on routine (Clocks, Timers, IRQ's, etc)
    ///2. Pre-OT initialization
    ///3. Standard OpenTag Init (most stuff actually will not be used)
    platform_poweron();
 80018b2:	f008 fb1b 	bl	8009eec <platform_poweron>
    setup_init();
 80018b6:	f7ff ff3b 	bl	8001730 <setup_init>
    platform_init_OT();
 80018ba:	f008 f9f5 	bl	8009ca8 <platform_init_OT>

    /// Optional modifications from defaults
    app_set_txpwr((ot_int)(__DBM_DEFAULT));
 80018be:	2014      	movs	r0, #20
 80018c0:	f7ff fe3a 	bl	8001538 <app_set_txpwr>
    setup_tgramlisten( setup.is_gateway );
 80018c4:	4c0e      	ldr	r4, [pc, #56]	; (8001900 <main+0x50>)
 80018c6:	7820      	ldrb	r0, [r4, #0]
 80018c8:	f7ff ffd8 	bl	800187c <setup_tgramlisten>

    if (setup.is_gateway) {
 80018cc:	7823      	ldrb	r3, [r4, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d013      	beq.n	80018fa <main+0x4a>
        beacons_off();
 80018d2:	f7ff ffbe 	bl	8001852 <beacons_off>
        asapi_init_srv();
 80018d6:	f000 f907 	bl	8001ae8 <asapi_init_srv>

    ///4. Set the app name (PongLT) as a cookie in the User-ID.
    ///   This is used for query filtering
    {   static const ot_u8 appstr[] = "APP=PongLT";
        vlFILE* fp;
        fp = ISF_open_su(ISF_ID(user_id));
 80018da:	2011      	movs	r0, #17
 80018dc:	f007 fd7d 	bl	80093da <ISF_open_su>
 80018e0:	1e04      	subs	r4, r0, #0
        if (fp != NULL) {
 80018e2:	d004      	beq.n	80018ee <main+0x3e>
            vl_store(fp, sizeof(appstr), appstr);
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <main+0x54>)
 80018e6:	3218      	adds	r2, #24
 80018e8:	210b      	movs	r1, #11
 80018ea:	f007 fd09 	bl	8009300 <vl_store>
        }
        vl_close(fp);
 80018ee:	0020      	movs	r0, r4
 80018f0:	f007 fd3e 	bl	8009370 <vl_close>
    ///<LI> You could put code before or after platform_ot_run, which will
    ///     run before or after the (task + kernel).  If you do, keep the code
    ///     very short or else you are risking timing glitches.</LI>
    ///<LI> To run any significant amount of user code, use tasks. </LI>
    while(1) {
        platform_ot_run();
 80018f4:	f008 fb98 	bl	800a028 <platform_ot_run>
 80018f8:	e7fc      	b.n	80018f4 <main+0x44>
    	beacons_off();
 80018fa:	f7ff ffaa 	bl	8001852 <beacons_off>
 80018fe:	e7ec      	b.n	80018da <main+0x2a>
 8001900:	200001c4 	.word	0x200001c4
 8001904:	0800b744 	.word	0x0800b744

08001908 <dll_sig_rfinit>:
/// 2 = Session invocation (rfinit() not called here)
/// 3 = RX initialization (!)
/// 4 = TX CSMA init (!)
/// 5 = TX watchdog (rfinit() not called here)

    if (pcode == 3) BOARD_led2_on();    // Orange (preferred) / Yellow / Red lamp
 8001908:	2803      	cmp	r0, #3
 800190a:	d005      	beq.n	8001918 <dll_sig_rfinit+0x10>
 800190c:	23a0      	movs	r3, #160	; 0xa0
 800190e:	05db      	lsls	r3, r3, #23
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
    else            BOARD_led1_on();    // Green lamp
}
 8001916:	4770      	bx	lr
	static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 8001918:	23a0      	movs	r3, #160	; 0xa0
 800191a:	05db      	lsls	r3, r3, #23
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	00d2      	lsls	r2, r2, #3
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
 8001922:	e7f8      	b.n	8001916 <dll_sig_rfinit+0xe>

08001924 <dll_sig_rfterminate>:
	static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 8001924:	23a0      	movs	r3, #160	; 0xa0
 8001926:	05db      	lsls	r3, r3, #23
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	00d2      	lsls	r2, r2, #3
 800192c:	619a      	str	r2, [r3, #24]
	static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	0092      	lsls	r2, r2, #2
 8001932:	619a      	str	r2, [r3, #24]

#ifdef EXTF_dll_sig_rfterminate
void dll_sig_rfterminate(ot_int pcode, ot_int scode) {
    BOARD_led2_off();   //Orange LED off
    BOARD_led1_off();   //Green LED off
}
 8001934:	4770      	bx	lr

08001936 <sys_sig_panic>:
#ifdef EXTF_sys_sig_panic
void sys_sig_panic(ot_int code) {
#   if (OT_FEATURE(MPIPE))
    logger_code(3, (ot_u8*)"WTF", (ot_u16)code);
#   endif
}
 8001936:	4770      	bx	lr

08001938 <sys_sig_powerdown>:
    SCB->SCR    = scbscr_save;
}


//#ifdef EXTF_sys_sig_powerdown
void sys_sig_powerdown(ot_int code) {
 8001938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193a:	46ce      	mov	lr, r9
 800193c:	4647      	mov	r7, r8
 800193e:	b580      	push	{r7, lr}
    // - FWU option (L0, L1) is superfluous unless ULP is set
    // - In STM32L1 implementations we must kill the chrono timer before STOP.
    // - In all STM32L impls, we must clear EXTI's before stop.  In very rare cases,
    //   an EXTI might be missed, but there is nothing that can be done about this.
#   if _USE_STOP
    if (code & 2) {
 8001940:	0783      	lsls	r3, r0, #30
 8001942:	d410      	bmi.n	8001966 <sys_sig_powerdown+0x2e>
        BOARD_STOP(code);
    }   
    else 
#   endif
    {   // Normal Sleeping mode (not deep sleep)
        SCB->SCR   &= ~((ot_u32)SCB_SCR_SLEEPDEEP_Msk);
 8001944:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <sys_sig_powerdown+0x8c>)
 8001946:	6913      	ldr	r3, [r2, #16]
 8001948:	2104      	movs	r1, #4
 800194a:	438b      	bics	r3, r1
 800194c:	6113      	str	r3, [r2, #16]
#       if defined(__STM32L4xx__)
        // Nothing do to here for L4
#       else
        PWR->CR    &= ~(PWR_CR_PDDS | PWR_CR_LPSDSR | PWR_CR_FWU | PWR_CR_ULP);
 800194e:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <sys_sig_powerdown+0x90>)
 8001950:	6813      	ldr	r3, [r2, #0]
 8001952:	491e      	ldr	r1, [pc, #120]	; (80019cc <sys_sig_powerdown+0x94>)
 8001954:	400b      	ands	r3, r1
 8001956:	6013      	str	r3, [r2, #0]
#       endif
        platform_enable_interrupts();
 8001958:	f008 f9a4 	bl	8009ca4 <platform_enable_interrupts>
        __WFI();
 800195c:	bf30      	wfi
    }

}
 800195e:	bc0c      	pop	{r2, r3}
 8001960:	4690      	mov	r8, r2
 8001962:	4699      	mov	r9, r3
 8001964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    code &= 1;
 8001966:	2301      	movs	r3, #1
 8001968:	4018      	ands	r0, r3
    RCC->IOPENR     = rcc_flags[code];
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <sys_sig_powerdown+0x98>)
 800196c:	4699      	mov	r9, r3
 800196e:	0083      	lsls	r3, r0, #2
 8001970:	464a      	mov	r2, r9
 8001972:	589b      	ldr	r3, [r3, r2]
 8001974:	4e17      	ldr	r6, [pc, #92]	; (80019d4 <sys_sig_powerdown+0x9c>)
 8001976:	62f3      	str	r3, [r6, #44]	; 0x2c
    SysTick->CTRL   = 0;
 8001978:	2100      	movs	r1, #0
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <sys_sig_powerdown+0xa0>)
 800197c:	6019      	str	r1, [r3, #0]
    SCB->SCR       |= SCB_SCR_SLEEPDEEP_Msk;
 800197e:	4c11      	ldr	r4, [pc, #68]	; (80019c4 <sys_sig_powerdown+0x8c>)
 8001980:	6923      	ldr	r3, [r4, #16]
 8001982:	2704      	movs	r7, #4
 8001984:	433b      	orrs	r3, r7
 8001986:	6123      	str	r3, [r4, #16]
    scratch         = PWR->CR;
 8001988:	4d0f      	ldr	r5, [pc, #60]	; (80019c8 <sys_sig_powerdown+0x90>)
 800198a:	682b      	ldr	r3, [r5, #0]
 800198c:	b29b      	uxth	r3, r3
 800198e:	4698      	mov	r8, r3
    scratch        &= ~(PWR_CR_DBP | PWR_CR_PDDS | PWR_CR_LPSDSR);
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <sys_sig_powerdown+0xa4>)
 8001992:	4642      	mov	r2, r8
 8001994:	401a      	ands	r2, r3
 8001996:	0013      	movs	r3, r2
    scratch        |= stop_flags[code];
 8001998:	0040      	lsls	r0, r0, #1
 800199a:	4448      	add	r0, r9
 800199c:	8902      	ldrh	r2, [r0, #8]
 800199e:	4313      	orrs	r3, r2
    PWR->CR         = scratch;
 80019a0:	602b      	str	r3, [r5, #0]
    EXTI->PR        = 0;
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <sys_sig_powerdown+0xa8>)
 80019a4:	6159      	str	r1, [r3, #20]
    platform_enable_interrupts();
 80019a6:	f008 f97d 	bl	8009ca4 <platform_enable_interrupts>
    __WFI();
 80019aa:	bf30      	wfi
    PWR->CR        |= (PWR_CR_DBP | PWR_CR_CWUF | PWR_CR_CSBF);
 80019ac:	682a      	ldr	r2, [r5, #0]
 80019ae:	2386      	movs	r3, #134	; 0x86
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4313      	orrs	r3, r2
 80019b4:	602b      	str	r3, [r5, #0]
    SCB->SCR       &= ~((ot_u32)SCB_SCR_SLEEPDEEP_Msk);
 80019b6:	6923      	ldr	r3, [r4, #16]
 80019b8:	43bb      	bics	r3, r7
 80019ba:	6123      	str	r3, [r4, #16]
    RCC->IOPENR     = _IOPENR_RUNTIME;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <sys_sig_powerdown+0xac>)
 80019be:	62f3      	str	r3, [r6, #44]	; 0x2c
 80019c0:	e7cd      	b.n	800195e <sys_sig_powerdown+0x26>
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	e000ed00 	.word	0xe000ed00
 80019c8:	40007000 	.word	0x40007000
 80019cc:	fffff9fc 	.word	0xfffff9fc
 80019d0:	0800b768 	.word	0x0800b768
 80019d4:	40021000 	.word	0x40021000
 80019d8:	e000e010 	.word	0xe000e010
 80019dc:	fffffefc 	.word	0xfffffefc
 80019e0:	40010400 	.word	0x40010400
 80019e4:	00001107 	.word	0x00001107

080019e8 <alp_proc>:




#ifdef EXTF_alp_proc
ot_bool alp_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	0005      	movs	r5, r0
 80019ec:	000c      	movs	r4, r1
    };

    ot_u8 alp_handle;

    // Always flush payload length of output before any data is written
    alp->outrec.plength = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	70c3      	strb	r3, [r0, #3]

    /// <LI> IDs in range 0-to-ALP_FUNCTIONS are standardized, or psuedo-standardized </LI>
    /// <LI> IDs in range 128-to-(128+ALP_API) are mapped OTAPI functions </LI>
    /// <LI> IDs outside this range get pushed to ALP_EXT </LI>
    //alp_handle = alp->inq->getcursor[2];
    alp_handle = INREC(alp, ID);
 80019f2:	2102      	movs	r1, #2
 80019f4:	4249      	negs	r1, r1
 80019f6:	6880      	ldr	r0, [r0, #8]
 80019f8:	f007 f927 	bl	8008c4a <q_getcursor_val>

    //ASAPI section
    if (alp_handle > 7) {
 80019fc:	2807      	cmp	r0, #7
 80019fe:	d900      	bls.n	8001a02 <alp_proc+0x1a>
        alp_handle = 8;
 8001a00:	2008      	movs	r0, #8
    }
    alp_handle = (ot_u8)proc[alp_handle](alp, user_id);
 8001a02:	0080      	lsls	r0, r0, #2
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <alp_proc+0x30>)
 8001a06:	58c3      	ldr	r3, [r0, r3]
 8001a08:	0021      	movs	r1, r4
 8001a0a:	0028      	movs	r0, r5
 8001a0c:	4798      	blx	r3
    /// If the output bookmark is non-Null, there is output chunking.  Else,
    /// the output message is complete (ended)
    ///@todo Bookmarked has been refactored, and is not currently supported... sort it.
    //alp->OUTREC(_FLAGS)   &= ~ALP_FLAG_ME;
    //alp->OUTREC(_FLAGS)   |= (alp->BOOKMARK_OUT) ? ALP_FLAG_CF : ALP_FLAG_ME;
    alp->OUTREC(FLAGS)   |= ALP_FLAG_ME;   //Temporary fix
 8001a0e:	78ab      	ldrb	r3, [r5, #2]
 8001a10:	2240      	movs	r2, #64	; 0x40
 8001a12:	4313      	orrs	r3, r2
 8001a14:	70ab      	strb	r3, [r5, #2]

    // Return True (atomic) or False (non-atomic)
    return (ot_bool)alp_handle;
}
 8001a16:	bd70      	pop	{r4, r5, r6, pc}
 8001a18:	0800b774 	.word	0x0800b774

08001a1c <sub_release_record>:
    }
}


static void sub_release_record(ot_queue* appq) {
    appq->front    += appq->front[1] + 4;
 8001a1c:	68c3      	ldr	r3, [r0, #12]
 8001a1e:	785a      	ldrb	r2, [r3, #1]
 8001a20:	3204      	adds	r2, #4
 8001a22:	189b      	adds	r3, r3, r2
 8001a24:	60c3      	str	r3, [r0, #12]
    appq->getcursor = appq->front;
 8001a26:	6043      	str	r3, [r0, #4]
}
 8001a28:	4770      	bx	lr
	...

08001a2c <sub_q_purge>:
static void sub_q_purge(ot_queue* q) {
 8001a2c:	b510      	push	{r4, lr}
    if (q_length(q) <= 0) {
 8001a2e:	f007 f90f 	bl	8008c50 <q_length>
 8001a32:	2800      	cmp	r0, #0
 8001a34:	dd00      	ble.n	8001a38 <sub_q_purge+0xc>
}
 8001a36:	bd10      	pop	{r4, pc}
        q_init(&srv.q, srv_buffer, 256);
 8001a38:	2280      	movs	r2, #128	; 0x80
 8001a3a:	4803      	ldr	r0, [pc, #12]	; (8001a48 <sub_q_purge+0x1c>)
 8001a3c:	0052      	lsls	r2, r2, #1
 8001a3e:	4903      	ldr	r1, [pc, #12]	; (8001a4c <sub_q_purge+0x20>)
 8001a40:	3008      	adds	r0, #8
 8001a42:	f007 f930 	bl	8008ca6 <q_init>
}
 8001a46:	e7f6      	b.n	8001a36 <sub_q_purge+0xa>
 8001a48:	200001cc 	.word	0x200001cc
 8001a4c:	200001e8 	.word	0x200001e8

08001a50 <sub_retrieve_record>:


static ot_u8* sub_retrieve_record(alp_record* apprec, ot_queue* appq) {
 8001a50:	b510      	push	{r4, lr}
 8001a52:	000c      	movs	r4, r1
    memcpy((ot_u8*)&apprec->flags, appq->getcursor, 4);
 8001a54:	2204      	movs	r2, #4
 8001a56:	6849      	ldr	r1, [r1, #4]
 8001a58:	f008 fc60 	bl	800a31c <ot_memcpy>
    appq->getcursor    += 4;
 8001a5c:	6863      	ldr	r3, [r4, #4]
 8001a5e:	3304      	adds	r3, #4
 8001a60:	6063      	str	r3, [r4, #4]
    return appq->front;
 8001a62:	68e0      	ldr	r0, [r4, #12]
}
 8001a64:	bd10      	pop	{r4, pc}

08001a66 <sub_check_more_records>:

static ot_u8 sub_check_more_records(ot_queue* appq) {
 8001a66:	b510      	push	{r4, lr}
    return (q_span(appq) > 0);
 8001a68:	f007 f8f7 	bl	8008c5a <q_span>
 8001a6c:	17c3      	asrs	r3, r0, #31
 8001a6e:	1a18      	subs	r0, r3, r0
 8001a70:	0fc0      	lsrs	r0, r0, #31
}
 8001a72:	bd10      	pop	{r4, pc}

08001a74 <sub_test_stream>:
ot_int sub_test_stream(ot_u8* msg, ot_u8 cmd, ot_u8 ext) {
 8001a74:	b570      	push	{r4, r5, r6, lr}
 8001a76:	b082      	sub	sp, #8
    test_len    = base_std[cmd&31];
 8001a78:	231f      	movs	r3, #31
 8001a7a:	400b      	ands	r3, r1
 8001a7c:	4c19      	ldr	r4, [pc, #100]	; (8001ae4 <sub_test_stream+0x70>)
 8001a7e:	5ce3      	ldrb	r3, [r4, r3]
    test_len   += ext_std[(ext>>5) & 3];
 8001a80:	0956      	lsrs	r6, r2, #5
 8001a82:	2503      	movs	r5, #3
 8001a84:	4035      	ands	r5, r6
 8001a86:	1964      	adds	r4, r4, r5
 8001a88:	2520      	movs	r5, #32
 8001a8a:	5d64      	ldrb	r4, [r4, r5]
 8001a8c:	191b      	adds	r3, r3, r4
    msg_curs    = msg + test_len;
 8001a8e:	18c3      	adds	r3, r0, r3
    if (cmd & ASAPI_CMD_DLLS) {
 8001a90:	074c      	lsls	r4, r1, #29
 8001a92:	d504      	bpl.n	8001a9e <sub_test_stream+0x2a>
        test_len    = 2 + ((msg_curs[0] == 0) << 4);
 8001a94:	781c      	ldrb	r4, [r3, #0]
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d113      	bne.n	8001ac2 <sub_test_stream+0x4e>
 8001a9a:	3412      	adds	r4, #18
        msg_curs   += test_len;  
 8001a9c:	191b      	adds	r3, r3, r4
    if (cmd & ASAPI_CMD_ANYCAST) {
 8001a9e:	078c      	lsls	r4, r1, #30
 8001aa0:	d41a      	bmi.n	8001ad8 <sub_test_stream+0x64>
    if (ext & ASAPI_EXT_UDP) {
 8001aa2:	0692      	lsls	r2, r2, #26
 8001aa4:	d509      	bpl.n	8001aba <sub_test_stream+0x46>
        ((ot_u8*)&test_len)[UPPER]  = msg_curs[0];
 8001aa6:	7819      	ldrb	r1, [r3, #0]
 8001aa8:	466a      	mov	r2, sp
 8001aaa:	71d1      	strb	r1, [r2, #7]
        ((ot_u8*)&test_len)[LOWER]  = msg_curs[1];
 8001aac:	7859      	ldrb	r1, [r3, #1]
 8001aae:	7191      	strb	r1, [r2, #6]
        ((ot_u8*)&test_len)[UPPER]  = msg_curs[0];
 8001ab0:	3206      	adds	r2, #6
        test_len                   += ASAPI_UDP_SIZE;
 8001ab2:	8812      	ldrh	r2, [r2, #0]
 8001ab4:	3204      	adds	r2, #4
 8001ab6:	b292      	uxth	r2, r2
        msg_curs                   += test_len;
 8001ab8:	189b      	adds	r3, r3, r2
    return (ot_int)(msg_curs - msg);
 8001aba:	1a18      	subs	r0, r3, r0
 8001abc:	b200      	sxth	r0, r0
}
 8001abe:	b002      	add	sp, #8
 8001ac0:	bd70      	pop	{r4, r5, r6, pc}
        test_len    = 2 + ((msg_curs[0] == 0) << 4);
 8001ac2:	2402      	movs	r4, #2
 8001ac4:	e7ea      	b.n	8001a9c <sub_test_stream+0x28>
        test_len    = (msg_curs[0] & 0x80) ? msg_curs[1]<<1 : msg_curs[1];
 8001ac6:	785c      	ldrb	r4, [r3, #1]
 8001ac8:	0064      	lsls	r4, r4, #1
        test_len   += 2;
 8001aca:	3402      	adds	r4, #2
        msg_curs   += test_len;
 8001acc:	191b      	adds	r3, r3, r4
 8001ace:	240b      	movs	r4, #11
 8001ad0:	400c      	ands	r4, r1
            cmd = 0;
 8001ad2:	2100      	movs	r1, #0
        if ((cmd & (ASAPI_CMD_MULTICAST+ASAPI_CMD_INIT)) == (ASAPI_CMD_MULTICAST+ASAPI_CMD_INIT)) {
 8001ad4:	2c0b      	cmp	r4, #11
 8001ad6:	d1e4      	bne.n	8001aa2 <sub_test_stream+0x2e>
        test_len    = (msg_curs[0] & 0x80) ? msg_curs[1]<<1 : msg_curs[1];
 8001ad8:	2400      	movs	r4, #0
 8001ada:	571c      	ldrsb	r4, [r3, r4]
 8001adc:	2c00      	cmp	r4, #0
 8001ade:	dbf2      	blt.n	8001ac6 <sub_test_stream+0x52>
 8001ae0:	785c      	ldrb	r4, [r3, #1]
 8001ae2:	e7f2      	b.n	8001aca <sub_test_stream+0x56>
 8001ae4:	0800b798 	.word	0x0800b798

08001ae8 <asapi_init_srv>:
void asapi_init_srv() {
 8001ae8:	b510      	push	{r4, lr}
    srv.alp         = NULL;
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <asapi_init_srv+0x18>)
 8001aec:	2300      	movs	r3, #0
 8001aee:	6003      	str	r3, [r0, #0]
    q_init(&srv.q, srv_buffer, 256);
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	3008      	adds	r0, #8
 8001af4:	0052      	lsls	r2, r2, #1
 8001af6:	4903      	ldr	r1, [pc, #12]	; (8001b04 <asapi_init_srv+0x1c>)
 8001af8:	f007 f8d5 	bl	8008ca6 <q_init>
}
 8001afc:	bd10      	pop	{r4, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	200001cc 	.word	0x200001cc
 8001b04:	200001e8 	.word	0x200001e8

08001b08 <sub_stop_srv>:
static void sub_stop_srv() {
 8001b08:	b510      	push	{r4, lr}
    session_app_purge(&asapi_applet);
 8001b0a:	4803      	ldr	r0, [pc, #12]	; (8001b18 <sub_stop_srv+0x10>)
 8001b0c:	f005 ff7a 	bl	8007a04 <session_app_purge>
    asapi_init_srv();
 8001b10:	f7ff ffea 	bl	8001ae8 <asapi_init_srv>
}
 8001b14:	bd10      	pop	{r4, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	08001be9 	.word	0x08001be9

08001b1c <sub_start_session>:





static ot_int sub_start_session(alp_tmpl* alp) {
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	b087      	sub	sp, #28
    alp_record      rec;
    advert_tmpl     adv;

    /// 1. Start with a blank session creation template.  It will get updated
    ///    later, either in the advertising setup or the applet itself.
    memset((ot_u8*)&s_tmpl, 0, sizeof(session_tmpl));
 8001b20:	2206      	movs	r2, #6
 8001b22:	2100      	movs	r1, #0
 8001b24:	a804      	add	r0, sp, #16
 8001b26:	f008 fc07 	bl	800a338 <ot_memset>
    ///      advertising request that follows.
    
    /// 2. The first record must be an initialization record.  Advertising can
    ///    be used with init.type_code = 1.  With init.type_code = 0, no 
    ///    advertising is performed, simply a following request is processed.
    sub_retrieve_record(&rec, &srv.q);
 8001b2a:	492d      	ldr	r1, [pc, #180]	; (8001be0 <sub_start_session+0xc4>)
 8001b2c:	ac03      	add	r4, sp, #12
 8001b2e:	3108      	adds	r1, #8
 8001b30:	0020      	movs	r0, r4
 8001b32:	f7ff ff8d 	bl	8001a50 <sub_retrieve_record>
    if ((rec.cmd & ASAPI_CMD_INIT) == 0) {
 8001b36:	78e2      	ldrb	r2, [r4, #3]
 8001b38:	0713      	lsls	r3, r2, #28
 8001b3a:	d549      	bpl.n	8001bd0 <sub_start_session+0xb4>
    }
    
    /// 3. If the message contains INIT, there are no further templates in the
    ///    message (by design).  Load the INIT template and then release this
    ///    ASAPI record.
    srv.q.getcursor+= (rec.cmd & ASAPI_CMD_EXT) ? 3 : 2;    //Ext byte & transid
 8001b3c:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <sub_start_session+0xc4>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0692      	lsls	r2, r2, #26
 8001b42:	d53b      	bpl.n	8001bbc <sub_start_session+0xa0>
 8001b44:	2203      	movs	r2, #3
 8001b46:	4c26      	ldr	r4, [pc, #152]	; (8001be0 <sub_start_session+0xc4>)
 8001b48:	189b      	adds	r3, r3, r2
 8001b4a:	60e3      	str	r3, [r4, #12]
    type_code       = q_readbyte(&srv.q);
 8001b4c:	3408      	adds	r4, #8
 8001b4e:	0020      	movs	r0, r4
 8001b50:	f007 f8e5 	bl	8008d1e <q_readbyte>
 8001b54:	0006      	movs	r6, r0
    s_tmpl.flags    = q_readbyte(&srv.q);       // link_flags byte
 8001b56:	0020      	movs	r0, r4
 8001b58:	f007 f8e1 	bl	8008d1e <q_readbyte>
 8001b5c:	af04      	add	r7, sp, #16
 8001b5e:	7138      	strb	r0, [r7, #4]
    s_tmpl.flagmask = (1<<3) | (1<<4);          // RS coding flag & VID flag    ///@todo VID usage might need extra attention
 8001b60:	2318      	movs	r3, #24
 8001b62:	717b      	strb	r3, [r7, #5]
    adv.duty_off    = q_readbyte(&srv.q);
 8001b64:	0020      	movs	r0, r4
 8001b66:	f007 f8da 	bl	8008d1e <q_readbyte>
 8001b6a:	ad01      	add	r5, sp, #4
 8001b6c:	7028      	strb	r0, [r5, #0]
    adv.duty_on     = q_readbyte(&srv.q);
 8001b6e:	0020      	movs	r0, r4
 8001b70:	f007 f8d5 	bl	8008d1e <q_readbyte>
 8001b74:	7068      	strb	r0, [r5, #1]
    adv.subnet      = q_readbyte(&srv.q);
 8001b76:	0020      	movs	r0, r4
 8001b78:	f007 f8d1 	bl	8008d1e <q_readbyte>
 8001b7c:	70a8      	strb	r0, [r5, #2]
    adv.channel     = q_readbyte(&srv.q);
 8001b7e:	0020      	movs	r0, r4
 8001b80:	f007 f8cd 	bl	8008d1e <q_readbyte>
 8001b84:	70e8      	strb	r0, [r5, #3]
    s_tmpl.channel  = adv.channel;
 8001b86:	7078      	strb	r0, [r7, #1]
    adv.duration    = q_readshort(&srv.q);
 8001b88:	0020      	movs	r0, r4
 8001b8a:	f007 f8cd 	bl	8008d28 <q_readshort>
 8001b8e:	80a8      	strh	r0, [r5, #4]
    sub_release_record(&srv.q);                 // We are done with init record
 8001b90:	0020      	movs	r0, r4
 8001b92:	f7ff ff43 	bl	8001a1c <sub_release_record>
    ///    should be performed.
    ///    <LI> 0: no explicity connection initialization, just a "naked 
    ///             request" that is specified in the next record. </LI>
    ///    <LI> 1: Standard advertising followed by request in next record</LI>
    ///    <LI> 255: Strobing, no follow-on request required. </LI>
    if (type_code > 1) {
 8001b96:	2e01      	cmp	r6, #1
 8001b98:	d81e      	bhi.n	8001bd8 <sub_start_session+0xbc>
        hb_run_strobe(adv.channel, s_tmpl.flags, adv.subnet, adv.duration, adv.duty_on);
#       endif
        //srv.inprogress = False;
        return -1;
    }
    else if (sub_check_more_records(&srv.q) == 0) {
 8001b9a:	4811      	ldr	r0, [pc, #68]	; (8001be0 <sub_start_session+0xc4>)
 8001b9c:	3008      	adds	r0, #8
 8001b9e:	f7ff ff62 	bl	8001a66 <sub_check_more_records>
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	d014      	beq.n	8001bd0 <sub_start_session+0xb4>
        goto sub_start_session_SESSION_ERR;
    }
    else if (type_code == 0) {  
 8001ba6:	2e00      	cmp	r6, #0
 8001ba8:	d10a      	bne.n	8001bc0 <sub_start_session+0xa4>
        // Naked Request
        ///@todo this doesn't seem to work
        active = m2task_immediate(&s_tmpl, &asapi_applet);
 8001baa:	490e      	ldr	r1, [pc, #56]	; (8001be4 <sub_start_session+0xc8>)
 8001bac:	a804      	add	r0, sp, #16
 8001bae:	f005 fb3f 	bl	8007230 <m2task_immediate>
        active = m2task_advertise(&adv, &s_tmpl, &asapi_applet);
    }
    
    /// 5. Report error if the session stack was too full to initialize the new
    ///    session.
    if (active == NULL) {
 8001bb2:	2800      	cmp	r0, #0
 8001bb4:	d00a      	beq.n	8001bcc <sub_start_session+0xb0>
    }
    
    ///@note removing this flag, replaced with session_app_isloaded() calls, which
    ///      are direct checks to the underlying session stack, adding reliability.
    //srv.inprogress  = True;
    return 0;
 8001bb6:	2000      	movs	r0, #0
    
    sub_start_session_SESSION_ERR:
    sub_stop_srv();
    return ASAPI_ERR_NOSESSION;
}
 8001bb8:	b007      	add	sp, #28
 8001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    srv.q.getcursor+= (rec.cmd & ASAPI_CMD_EXT) ? 3 : 2;    //Ext byte & transid
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	e7c2      	b.n	8001b46 <sub_start_session+0x2a>
        active = m2task_advertise(&adv, &s_tmpl, &asapi_applet);
 8001bc0:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <sub_start_session+0xc8>)
 8001bc2:	a904      	add	r1, sp, #16
 8001bc4:	a801      	add	r0, sp, #4
 8001bc6:	f005 fb39 	bl	800723c <m2task_advertise>
 8001bca:	e7f2      	b.n	8001bb2 <sub_start_session+0x96>
        return ASAPI_ERR_STACKFULL;
 8001bcc:	3009      	adds	r0, #9
 8001bce:	e7f3      	b.n	8001bb8 <sub_start_session+0x9c>
    sub_stop_srv();
 8001bd0:	f7ff ff9a 	bl	8001b08 <sub_stop_srv>
    return ASAPI_ERR_NOSESSION;
 8001bd4:	200b      	movs	r0, #11
 8001bd6:	e7ef      	b.n	8001bb8 <sub_start_session+0x9c>
        return -1;
 8001bd8:	2001      	movs	r0, #1
 8001bda:	4240      	negs	r0, r0
 8001bdc:	e7ec      	b.n	8001bb8 <sub_start_session+0x9c>
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	200001cc 	.word	0x200001cc
 8001be4:	08001be9 	.word	0x08001be9

08001be8 <asapi_applet>:

///@todo make sure that hold periods start getting clocked immedately after
/// valid REQUEST is processed.  This way, the delay period shall be front- 
/// chained from the point following the request transmission.

void asapi_applet(m2session* active) {
 8001be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bea:	46de      	mov	lr, fp
 8001bec:	4657      	mov	r7, sl
 8001bee:	4646      	mov	r6, r8
 8001bf0:	b5c0      	push	{r6, r7, lr}
 8001bf2:	b090      	sub	sp, #64	; 0x40
 8001bf4:	0004      	movs	r4, r0
    ot_u8           scratch;

    /// 1. Preliminary operations
    ///@note check to session_app_isloaded() is redundant, because asapi_applet()
    ///      is only called from the session stack.
    if ((srv.alp == NULL) /*|| (session_app_isloaded(&asapi_applet) == False) */ ) {
 8001bf6:	4bd3      	ldr	r3, [pc, #844]	; (8001f44 <asapi_applet+0x35c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <asapi_applet+0x26>

    /// 2. Move to the next record that matches this ID.  If it returns False,
    ///    there are no more records of this type, so ASAPI is no longer in
    ///    in progress.
    ///    Else, store the command and move past the header
    if (sub_check_more_records(&srv.q) == 0) {
 8001bfe:	48d1      	ldr	r0, [pc, #836]	; (8001f44 <asapi_applet+0x35c>)
 8001c00:	3008      	adds	r0, #8
 8001c02:	f7ff ff30 	bl	8001a66 <sub_check_more_records>
 8001c06:	2800      	cmp	r0, #0
 8001c08:	d109      	bne.n	8001c1e <asapi_applet+0x36>
        sub_stop_srv();
 8001c0a:	f7ff ff7d 	bl	8001b08 <sub_stop_srv>
    return;

    /// 9. the server is closed, yet this applet was invoked.  Scrap it,
    ///    which will cause no communication to occur.
    asapi_applet_CLOSED:
    active->netstate = M2_NETSTATE_SCRAP;
 8001c0e:	2304      	movs	r3, #4
 8001c10:	71e3      	strb	r3, [r4, #7]
}
 8001c12:	b010      	add	sp, #64	; 0x40
 8001c14:	bc1c      	pop	{r2, r3, r4}
 8001c16:	4690      	mov	r8, r2
 8001c18:	469a      	mov	sl, r3
 8001c1a:	46a3      	mov	fp, r4
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sub_retrieve_record(&rec, &srv.q);
 8001c1e:	49c9      	ldr	r1, [pc, #804]	; (8001f44 <asapi_applet+0x35c>)
 8001c20:	3108      	adds	r1, #8
 8001c22:	a80a      	add	r0, sp, #40	; 0x28
 8001c24:	f7ff ff14 	bl	8001a50 <sub_retrieve_record>
    if (active->netstate & M2_NETSTATE_SCRAP) {
 8001c28:	79e3      	ldrb	r3, [r4, #7]
 8001c2a:	075b      	lsls	r3, r3, #29
 8001c2c:	d500      	bpl.n	8001c30 <asapi_applet+0x48>
 8001c2e:	e0d6      	b.n	8001dde <asapi_applet+0x1f6>
    srv.q.getcursor    += ASAPI_TRANSID_SIZE;
 8001c30:	4ac4      	ldr	r2, [pc, #784]	; (8001f44 <asapi_applet+0x35c>)
 8001c32:	68d3      	ldr	r3, [r2, #12]
 8001c34:	3302      	adds	r3, #2
 8001c36:	60d3      	str	r3, [r2, #12]
    ext                 = (rec.cmd & ASAPI_CMD_EXT) ? q_readbyte(&srv.q) : 0;
 8001c38:	ab0a      	add	r3, sp, #40	; 0x28
 8001c3a:	78db      	ldrb	r3, [r3, #3]
 8001c3c:	069b      	lsls	r3, r3, #26
 8001c3e:	d412      	bmi.n	8001c66 <asapi_applet+0x7e>
 8001c40:	2300      	movs	r3, #0
 8001c42:	4698      	mov	r8, r3
    if (rec.cmd & ASAPI_CMD_INIT) {
 8001c44:	ab0a      	add	r3, sp, #40	; 0x28
 8001c46:	78db      	ldrb	r3, [r3, #3]
 8001c48:	071b      	lsls	r3, r3, #28
 8001c4a:	d538      	bpl.n	8001cbe <asapi_applet+0xd6>
        if (q_readbyte(&srv.q) != 1) { 
 8001c4c:	48bd      	ldr	r0, [pc, #756]	; (8001f44 <asapi_applet+0x35c>)
 8001c4e:	3008      	adds	r0, #8
 8001c50:	f007 f865 	bl	8008d1e <q_readbyte>
 8001c54:	2801      	cmp	r0, #1
 8001c56:	d00c      	beq.n	8001c72 <asapi_applet+0x8a>
            active->netstate = M2_NETSTATE_SCRAP;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	71e3      	strb	r3, [r4, #7]
        sub_release_record(&srv.q);
 8001c5c:	48b9      	ldr	r0, [pc, #740]	; (8001f44 <asapi_applet+0x35c>)
 8001c5e:	3008      	adds	r0, #8
 8001c60:	f7ff fedc 	bl	8001a1c <sub_release_record>
        return;
 8001c64:	e7d5      	b.n	8001c12 <asapi_applet+0x2a>
    ext                 = (rec.cmd & ASAPI_CMD_EXT) ? q_readbyte(&srv.q) : 0;
 8001c66:	0010      	movs	r0, r2
 8001c68:	3008      	adds	r0, #8
 8001c6a:	f007 f858 	bl	8008d1e <q_readbyte>
 8001c6e:	4680      	mov	r8, r0
 8001c70:	e7e8      	b.n	8001c44 <asapi_applet+0x5c>
            active->netstate    = (M2_NETFLAG_BG | M2_NETFLAG_STREAM | M2_NETSTATE_REQTX | M2_NETSTATE_INIT);
 8001c72:	23c8      	movs	r3, #200	; 0xc8
 8001c74:	71e3      	strb	r3, [r4, #7]
            active->flags      |= (3<<3) & q_readbyte(&srv.q);      // lc flags
 8001c76:	4eb3      	ldr	r6, [pc, #716]	; (8001f44 <asapi_applet+0x35c>)
 8001c78:	0035      	movs	r5, r6
 8001c7a:	3508      	adds	r5, #8
 8001c7c:	0028      	movs	r0, r5
 8001c7e:	f007 f84e 	bl	8008d1e <q_readbyte>
 8001c82:	2318      	movs	r3, #24
 8001c84:	4003      	ands	r3, r0
 8001c86:	7ae0      	ldrb	r0, [r4, #11]
 8001c88:	4318      	orrs	r0, r3
 8001c8a:	72e0      	strb	r0, [r4, #11]
            srv.q.getcursor    += 2;                                // go past duty-cycle flags (not supported)
 8001c8c:	68f3      	ldr	r3, [r6, #12]
 8001c8e:	3302      	adds	r3, #2
 8001c90:	60f3      	str	r3, [r6, #12]
            active->subnet      = q_readbyte(&srv.q);
 8001c92:	0028      	movs	r0, r5
 8001c94:	f007 f843 	bl	8008d1e <q_readbyte>
 8001c98:	72a0      	strb	r0, [r4, #10]
            active->channel     = q_readbyte(&srv.q);
 8001c9a:	0028      	movs	r0, r5
 8001c9c:	f007 f83f 	bl	8008d1e <q_readbyte>
 8001ca0:	71a0      	strb	r0, [r4, #6]
            adv_duration        = q_readshort(&srv.q);
 8001ca2:	0028      	movs	r0, r5
 8001ca4:	f007 f840 	bl	8008d28 <q_readshort>
 8001ca8:	0005      	movs	r5, r0
            dll_set_defaults(active);
 8001caa:	0020      	movs	r0, r4
 8001cac:	f005 f8de 	bl	8006e6c <dll_set_defaults>
            active = session_extend(&asapi_applet, adv_duration, active->channel, M2_NETSTATE_REQTX);
 8001cb0:	79a2      	ldrb	r2, [r4, #6]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	0029      	movs	r1, r5
 8001cb6:	48a4      	ldr	r0, [pc, #656]	; (8001f48 <asapi_applet+0x360>)
 8001cb8:	f005 fe78 	bl	80079ac <session_extend>
 8001cbc:	e7ce      	b.n	8001c5c <asapi_applet+0x74>
    active->subnet  = q_readbyte(&srv.q);
 8001cbe:	4ea1      	ldr	r6, [pc, #644]	; (8001f44 <asapi_applet+0x35c>)
 8001cc0:	0035      	movs	r5, r6
 8001cc2:	3508      	adds	r5, #8
 8001cc4:	0028      	movs	r0, r5
 8001cc6:	f007 f82a 	bl	8008d1e <q_readbyte>
 8001cca:	72a0      	strb	r0, [r4, #10]
    active->channel = q_readbyte(&srv.q);   // req channel
 8001ccc:	0028      	movs	r0, r5
 8001cce:	f007 f826 	bl	8008d1e <q_readbyte>
 8001cd2:	71a0      	strb	r0, [r4, #6]
    dialog.chanlist = srv.q.getcursor;
 8001cd4:	68f3      	ldr	r3, [r6, #12]
 8001cd6:	ae0e      	add	r6, sp, #56	; 0x38
 8001cd8:	930f      	str	r3, [sp, #60]	; 0x3c
    scratch         = q_readbyte(&srv.q);   // resp channel
 8001cda:	0028      	movs	r0, r5
 8001cdc:	f007 f81f 	bl	8008d1e <q_readbyte>
    dialog.channels = (scratch != active->channel);
 8001ce0:	79a3      	ldrb	r3, [r4, #6]
 8001ce2:	1a18      	subs	r0, r3, r0
 8001ce4:	1e43      	subs	r3, r0, #1
 8001ce6:	4198      	sbcs	r0, r3
 8001ce8:	7070      	strb	r0, [r6, #1]
    dialog.timeout  = q_readbyte(&srv.q);   // timeout code
 8001cea:	0028      	movs	r0, r5
 8001cec:	f007 f817 	bl	8008d1e <q_readbyte>
 8001cf0:	7030      	strb	r0, [r6, #0]
    next_wait       = q_readshort(&srv.q);
 8001cf2:	0028      	movs	r0, r5
 8001cf4:	f007 f818 	bl	8008d28 <q_readshort>
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	9001      	str	r0, [sp, #4]
    active->flags  |= (next_wait == 0) << 7;          // M2_FLAG_LISTEN
 8001cfc:	230b      	movs	r3, #11
 8001cfe:	56e3      	ldrsb	r3, [r4, r3]
 8001d00:	2800      	cmp	r0, #0
 8001d02:	d000      	beq.n	8001d06 <asapi_applet+0x11e>
 8001d04:	e07e      	b.n	8001e04 <asapi_applet+0x21c>
 8001d06:	3a80      	subs	r2, #128	; 0x80
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	72e3      	strb	r3, [r4, #11]
    if (rec.cmd & ASAPI_CMD_DLLS) {
 8001d0e:	aa0a      	add	r2, sp, #40	; 0x28
 8001d10:	78d2      	ldrb	r2, [r2, #3]
 8001d12:	0752      	lsls	r2, r2, #29
 8001d14:	d478      	bmi.n	8001e08 <asapi_applet+0x220>
        addressing   = (rec.cmd & ASAPI_CMD_ADDRMASK);
 8001d16:	ab0a      	add	r3, sp, #40	; 0x28
 8001d18:	78db      	ldrb	r3, [r3, #3]
        if (addressing == ASAPI_CMD_UNICAST) {
 8001d1a:	079b      	lsls	r3, r3, #30
 8001d1c:	d100      	bne.n	8001d20 <asapi_applet+0x138>
 8001d1e:	e084      	b.n	8001e2a <asapi_applet+0x242>
            addressing          = ADDR_broadcast;
 8001d20:	2001      	movs	r0, #1
        routing.hop_code    = 0;    //override hop code value
 8001d22:	2300      	movs	r3, #0
 8001d24:	aa02      	add	r2, sp, #8
 8001d26:	7013      	strb	r3, [r2, #0]
        otapi_open_request((ADDR_Type)addressing, &routing);
 8001d28:	0011      	movs	r1, r2
 8001d2a:	f004 facb 	bl	80062c4 <otapi_open_request>
    if (rec.cmd & ASAPI_CMD_FILECOMP) {
 8001d2e:	ab0a      	add	r3, sp, #40	; 0x28
 8001d30:	78db      	ldrb	r3, [r3, #3]
 8001d32:	079b      	lsls	r3, r3, #30
 8001d34:	d500      	bpl.n	8001d38 <asapi_applet+0x150>
 8001d36:	e094      	b.n	8001e62 <asapi_applet+0x27a>
    scratch = 0;
 8001d38:	2600      	movs	r6, #0
 8001d3a:	2540      	movs	r5, #64	; 0x40
 8001d3c:	4643      	mov	r3, r8
 8001d3e:	401d      	ands	r5, r3
    if (ext & ASAPI_EXT_FILECALL) {
 8001d40:	d000      	beq.n	8001d44 <asapi_applet+0x15c>
 8001d42:	e09b      	b.n	8001e7c <asapi_applet+0x294>
    else if (ext & ASAPI_EXT_UDP) {
 8001d44:	069b      	lsls	r3, r3, #26
 8001d46:	d501      	bpl.n	8001d4c <asapi_applet+0x164>
        scratch |= (1<<4);
 8001d48:	2310      	movs	r3, #16
 8001d4a:	431e      	orrs	r6, r3
        cmd.type        = m2tt_lut[(rec.cmd & ASAPI_CMD_ADDRMASK)];
 8001d4c:	af0a      	add	r7, sp, #40	; 0x28
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	2203      	movs	r2, #3
 8001d52:	4692      	mov	sl, r2
 8001d54:	4013      	ands	r3, r2
 8001d56:	4a7d      	ldr	r2, [pc, #500]	; (8001f4c <asapi_applet+0x364>)
 8001d58:	18d3      	adds	r3, r2, r3
 8001d5a:	2124      	movs	r1, #36	; 0x24
 8001d5c:	5c5b      	ldrb	r3, [r3, r1]
 8001d5e:	a902      	add	r1, sp, #8
 8001d60:	700b      	strb	r3, [r1, #0]
        cmd.opcode      = opcode_lut[scratch];
 8001d62:	1996      	adds	r6, r2, r6
 8001d64:	2328      	movs	r3, #40	; 0x28
 8001d66:	5cf3      	ldrb	r3, [r6, r3]
 8001d68:	704b      	strb	r3, [r1, #1]
        cmd.extension   = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	708b      	strb	r3, [r1, #2]
        otapi_put_command_tmpl(&local_status, &cmd);
 8001d6e:	331e      	adds	r3, #30
 8001d70:	468c      	mov	ip, r1
 8001d72:	4463      	add	r3, ip
 8001d74:	469b      	mov	fp, r3
 8001d76:	0018      	movs	r0, r3
 8001d78:	f004 fad8 	bl	800632c <otapi_put_command_tmpl>
        otapi_put_dialog_tmpl(&status, &dialog);
 8001d7c:	261f      	movs	r6, #31
 8001d7e:	ab02      	add	r3, sp, #8
 8001d80:	469c      	mov	ip, r3
 8001d82:	4466      	add	r6, ip
 8001d84:	a90e      	add	r1, sp, #56	; 0x38
 8001d86:	0030      	movs	r0, r6
 8001d88:	f004 fb10 	bl	80063ac <otapi_put_dialog_tmpl>
        status &= local_status;
 8001d8c:	7832      	ldrb	r2, [r6, #0]
 8001d8e:	465b      	mov	r3, fp
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4013      	ands	r3, r2
 8001d94:	7033      	strb	r3, [r6, #0]
    if ((rec.cmd & ASAPI_CMD_ADDRMASK) == ASAPI_CMD_MULTICAST) {
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	4652      	mov	r2, sl
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d07a      	beq.n	8001e96 <asapi_applet+0x2ae>
    if (rec.cmd & ASAPI_CMD_LQUERY) {
 8001da0:	ab0a      	add	r3, sp, #40	; 0x28
 8001da2:	78db      	ldrb	r3, [r3, #3]
 8001da4:	079b      	lsls	r3, r3, #30
 8001da6:	d500      	bpl.n	8001daa <asapi_applet+0x1c2>
 8001da8:	e08b      	b.n	8001ec2 <asapi_applet+0x2da>
    if (rec.cmd & ASAPI_CMD_FILECOMP) {
 8001daa:	ab0a      	add	r3, sp, #40	; 0x28
 8001dac:	78db      	ldrb	r3, [r3, #3]
 8001dae:	079b      	lsls	r3, r3, #30
 8001db0:	d500      	bpl.n	8001db4 <asapi_applet+0x1cc>
 8001db2:	e09c      	b.n	8001eee <asapi_applet+0x306>
    if (ext & ASAPI_EXT_FILECALL) {
 8001db4:	2d00      	cmp	r5, #0
 8001db6:	d000      	beq.n	8001dba <asapi_applet+0x1d2>
 8001db8:	e0aa      	b.n	8001f10 <asapi_applet+0x328>
    else if (ext & ASAPI_EXT_UDP) {
 8001dba:	4643      	mov	r3, r8
 8001dbc:	069b      	lsls	r3, r3, #26
 8001dbe:	d500      	bpl.n	8001dc2 <asapi_applet+0x1da>
 8001dc0:	e0ae      	b.n	8001f20 <asapi_applet+0x338>
    status &= local_status;
 8001dc2:	221f      	movs	r2, #31
 8001dc4:	ab02      	add	r3, sp, #8
 8001dc6:	469c      	mov	ip, r3
 8001dc8:	4462      	add	r2, ip
 8001dca:	7811      	ldrb	r1, [r2, #0]
 8001dcc:	231e      	movs	r3, #30
 8001dce:	4463      	add	r3, ip
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	400b      	ands	r3, r1
 8001dd4:	7013      	strb	r3, [r2, #0]
    if (status == 0) {
 8001dd6:	d000      	beq.n	8001dda <asapi_applet+0x1f2>
 8001dd8:	e0ae      	b.n	8001f38 <asapi_applet+0x350>
        active->netstate = M2_NETSTATE_SCRAP;
 8001dda:	3304      	adds	r3, #4
 8001ddc:	71e3      	strb	r3, [r4, #7]
    sub_release_record(&srv.q);
 8001dde:	4859      	ldr	r0, [pc, #356]	; (8001f44 <asapi_applet+0x35c>)
 8001de0:	3008      	adds	r0, #8
 8001de2:	f7ff fe1b 	bl	8001a1c <sub_release_record>
    if (active->netstate & M2_NETSTATE_SCRAP) {
 8001de6:	79e3      	ldrb	r3, [r4, #7]
 8001de8:	075b      	lsls	r3, r3, #29
 8001dea:	d500      	bpl.n	8001dee <asapi_applet+0x206>
 8001dec:	e0a7      	b.n	8001f3e <asapi_applet+0x356>
    else if (rec.cmd & ASAPI_CMD_HOLDOPEN) {
 8001dee:	ab0a      	add	r3, sp, #40	; 0x28
 8001df0:	78db      	ldrb	r3, [r3, #3]
 8001df2:	065b      	lsls	r3, r3, #25
 8001df4:	d400      	bmi.n	8001df8 <asapi_applet+0x210>
 8001df6:	e70c      	b.n	8001c12 <asapi_applet+0x2a>
        session_continue(active->applet, M2_NETSTATE_REQTX, next_wait);
 8001df8:	6820      	ldr	r0, [r4, #0]
 8001dfa:	9a01      	ldr	r2, [sp, #4]
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	f005 fe51 	bl	8007aa4 <session_continue>
 8001e02:	e706      	b.n	8001c12 <asapi_applet+0x2a>
    active->flags  |= (next_wait == 0) << 7;          // M2_FLAG_LISTEN
 8001e04:	2200      	movs	r2, #0
 8001e06:	e77f      	b.n	8001d08 <asapi_applet+0x120>
        active->flags  |= M2_FLAG_DLLS;
 8001e08:	2240      	movs	r2, #64	; 0x40
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	72e3      	strb	r3, [r4, #11]
        active->extra   = q_readbyte(&srv.q);           // Key-Index to use for encryption
 8001e0e:	4e4d      	ldr	r6, [pc, #308]	; (8001f44 <asapi_applet+0x35c>)
 8001e10:	3608      	adds	r6, #8
 8001e12:	0030      	movs	r0, r6
 8001e14:	f006 ff83 	bl	8008d1e <q_readbyte>
 8001e18:	7220      	strb	r0, [r4, #8]
        active->extra  |= (q_readbyte(&srv.q) << 7);    // User=1, Root=0
 8001e1a:	0030      	movs	r0, r6
 8001e1c:	f006 ff7f 	bl	8008d1e <q_readbyte>
 8001e20:	01c3      	lsls	r3, r0, #7
 8001e22:	7a20      	ldrb	r0, [r4, #8]
 8001e24:	4318      	orrs	r0, r3
 8001e26:	7220      	strb	r0, [r4, #8]
 8001e28:	e775      	b.n	8001d16 <asapi_applet+0x12e>
            routing.hop_code    = q_readbyte(&srv.q);
 8001e2a:	4e46      	ldr	r6, [pc, #280]	; (8001f44 <asapi_applet+0x35c>)
 8001e2c:	3608      	adds	r6, #8
 8001e2e:	0030      	movs	r0, r6
 8001e30:	f006 ff75 	bl	8008d1e <q_readbyte>
 8001e34:	ab02      	add	r3, sp, #8
 8001e36:	7018      	strb	r0, [r3, #0]
            routing.hop_ext     = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	aa02      	add	r2, sp, #8
 8001e3c:	7053      	strb	r3, [r2, #1]
            routing.dlog.length = q_readbyte(&srv.q);
 8001e3e:	0030      	movs	r0, r6
 8001e40:	f006 ff6d 	bl	8008d1e <q_readbyte>
 8001e44:	ab02      	add	r3, sp, #8
 8001e46:	7118      	strb	r0, [r3, #4]
            routing.dlog.value  = q_markbyte(&srv.q, routing.dlog.length);
 8001e48:	b201      	sxth	r1, r0
 8001e4a:	0030      	movs	r0, r6
 8001e4c:	f006 ff33 	bl	8008cb6 <q_markbyte>
 8001e50:	9004      	str	r0, [sp, #16]
            addressing         |= (routing.dlog.length == 2);   // Unicast with VID Target (3)
 8001e52:	ab02      	add	r3, sp, #8
 8001e54:	7918      	ldrb	r0, [r3, #4]
 8001e56:	3802      	subs	r0, #2
 8001e58:	4243      	negs	r3, r0
 8001e5a:	4158      	adcs	r0, r3
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	4318      	orrs	r0, r3
 8001e60:	e75f      	b.n	8001d22 <asapi_applet+0x13a>
        alp_breakdown_isfcomp_tmpl(&srv.q, (void*)&comp);
 8001e62:	ae0d      	add	r6, sp, #52	; 0x34
 8001e64:	4837      	ldr	r0, [pc, #220]	; (8001f44 <asapi_applet+0x35c>)
 8001e66:	0031      	movs	r1, r6
 8001e68:	3008      	adds	r0, #8
 8001e6a:	f006 fe57 	bl	8008b1c <alp_breakdown_isfcomp_tmpl>
        scratch  = (2 | (comp.is_series & 1) << 2);
 8001e6e:	7833      	ldrb	r3, [r6, #0]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	2604      	movs	r6, #4
 8001e74:	401e      	ands	r6, r3
 8001e76:	2302      	movs	r3, #2
 8001e78:	431e      	orrs	r6, r3
 8001e7a:	e75e      	b.n	8001d3a <asapi_applet+0x152>
        alp_breakdown_isfcall_tmpl(&srv.q, (void*)&call);
 8001e7c:	af0b      	add	r7, sp, #44	; 0x2c
 8001e7e:	4831      	ldr	r0, [pc, #196]	; (8001f44 <asapi_applet+0x35c>)
 8001e80:	0039      	movs	r1, r7
 8001e82:	3008      	adds	r0, #8
 8001e84:	f006 fe59 	bl	8008b3a <alp_breakdown_isfcall_tmpl>
        scratch |= (2 | (call.is_series & 1));
 8001e88:	783a      	ldrb	r2, [r7, #0]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	431e      	orrs	r6, r3
 8001e90:	2302      	movs	r3, #2
 8001e92:	431e      	orrs	r6, r3
 8001e94:	e75a      	b.n	8001d4c <asapi_applet+0x164>
        alp_breakdown_query_tmpl(&srv.q, (void*)&query);
 8001e96:	482b      	ldr	r0, [pc, #172]	; (8001f44 <asapi_applet+0x35c>)
 8001e98:	a902      	add	r1, sp, #8
 8001e9a:	3008      	adds	r0, #8
 8001e9c:	f006 fe0e 	bl	8008abc <alp_breakdown_query_tmpl>
        otapi_put_query_tmpl(&local_status, &query);
 8001ea0:	261e      	movs	r6, #30
 8001ea2:	ab02      	add	r3, sp, #8
 8001ea4:	469c      	mov	ip, r3
 8001ea6:	4466      	add	r6, ip
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	0030      	movs	r0, r6
 8001eac:	f004 fabe 	bl	800642c <otapi_put_query_tmpl>
        status &= local_status;
 8001eb0:	221f      	movs	r2, #31
 8001eb2:	ab02      	add	r3, sp, #8
 8001eb4:	469c      	mov	ip, r3
 8001eb6:	4462      	add	r2, ip
 8001eb8:	7811      	ldrb	r1, [r2, #0]
 8001eba:	7833      	ldrb	r3, [r6, #0]
 8001ebc:	400b      	ands	r3, r1
 8001ebe:	7013      	strb	r3, [r2, #0]
 8001ec0:	e76e      	b.n	8001da0 <asapi_applet+0x1b8>
        alp_breakdown_query_tmpl(&srv.q, (void*)&query);
 8001ec2:	4820      	ldr	r0, [pc, #128]	; (8001f44 <asapi_applet+0x35c>)
 8001ec4:	a902      	add	r1, sp, #8
 8001ec6:	3008      	adds	r0, #8
 8001ec8:	f006 fdf8 	bl	8008abc <alp_breakdown_query_tmpl>
        otapi_put_query_tmpl(&local_status, &query);
 8001ecc:	261e      	movs	r6, #30
 8001ece:	ab02      	add	r3, sp, #8
 8001ed0:	469c      	mov	ip, r3
 8001ed2:	4466      	add	r6, ip
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	0030      	movs	r0, r6
 8001ed8:	f004 faa8 	bl	800642c <otapi_put_query_tmpl>
        status &= local_status;
 8001edc:	221f      	movs	r2, #31
 8001ede:	ab02      	add	r3, sp, #8
 8001ee0:	469c      	mov	ip, r3
 8001ee2:	4462      	add	r2, ip
 8001ee4:	7811      	ldrb	r1, [r2, #0]
 8001ee6:	7833      	ldrb	r3, [r6, #0]
 8001ee8:	400b      	ands	r3, r1
 8001eea:	7013      	strb	r3, [r2, #0]
 8001eec:	e75d      	b.n	8001daa <asapi_applet+0x1c2>
        otapi_put_isf_comp(&local_status, &comp);
 8001eee:	261e      	movs	r6, #30
 8001ef0:	ab02      	add	r3, sp, #8
 8001ef2:	469c      	mov	ip, r3
 8001ef4:	4466      	add	r6, ip
 8001ef6:	a90d      	add	r1, sp, #52	; 0x34
 8001ef8:	0030      	movs	r0, r6
 8001efa:	f004 fad7 	bl	80064ac <otapi_put_isf_comp>
        status &= local_status;
 8001efe:	221f      	movs	r2, #31
 8001f00:	ab02      	add	r3, sp, #8
 8001f02:	469c      	mov	ip, r3
 8001f04:	4462      	add	r2, ip
 8001f06:	7811      	ldrb	r1, [r2, #0]
 8001f08:	7833      	ldrb	r3, [r6, #0]
 8001f0a:	400b      	ands	r3, r1
 8001f0c:	7013      	strb	r3, [r2, #0]
 8001f0e:	e751      	b.n	8001db4 <asapi_applet+0x1cc>
        otapi_put_isf_call(&local_status, &call);
 8001f10:	a90b      	add	r1, sp, #44	; 0x2c
 8001f12:	201e      	movs	r0, #30
 8001f14:	ab02      	add	r3, sp, #8
 8001f16:	469c      	mov	ip, r3
 8001f18:	4460      	add	r0, ip
 8001f1a:	f004 fadd 	bl	80064d8 <otapi_put_isf_call>
 8001f1e:	e750      	b.n	8001dc2 <asapi_applet+0x1da>
        alp_breakdown_udp_tmpl(&srv.q, (void*)&udp);
 8001f20:	4808      	ldr	r0, [pc, #32]	; (8001f44 <asapi_applet+0x35c>)
 8001f22:	a902      	add	r1, sp, #8
 8001f24:	3008      	adds	r0, #8
 8001f26:	f006 fde4 	bl	8008af2 <alp_breakdown_udp_tmpl>
        otapi_put_udp_tmpl(&local_status, &udp);
 8001f2a:	a902      	add	r1, sp, #8
 8001f2c:	201e      	movs	r0, #30
 8001f2e:	468c      	mov	ip, r1
 8001f30:	4460      	add	r0, ip
 8001f32:	f004 faeb 	bl	800650c <otapi_put_udp_tmpl>
 8001f36:	e744      	b.n	8001dc2 <asapi_applet+0x1da>
        otapi_close_request();
 8001f38:	f004 f9e4 	bl	8006304 <otapi_close_request>
 8001f3c:	e74f      	b.n	8001dde <asapi_applet+0x1f6>
        sub_stop_srv();
 8001f3e:	f7ff fde3 	bl	8001b08 <sub_stop_srv>
 8001f42:	e666      	b.n	8001c12 <asapi_applet+0x2a>
 8001f44:	200001cc 	.word	0x200001cc
 8001f48:	08001be9 	.word	0x08001be9
 8001f4c:	0800b798 	.word	0x0800b798

08001f50 <asapi_open_srv>:
    if (srv.alp == NULL) {
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <asapi_open_srv+0x10>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d000      	beq.n	8001f5a <asapi_open_srv+0xa>
}
 8001f58:	4770      	bx	lr
        srv.alp         = alp;
 8001f5a:	4b01      	ldr	r3, [pc, #4]	; (8001f60 <asapi_open_srv+0x10>)
 8001f5c:	6018      	str	r0, [r3, #0]
}
 8001f5e:	e7fb      	b.n	8001f58 <asapi_open_srv+0x8>
 8001f60:	200001cc 	.word	0x200001cc

08001f64 <asapi_proc>:
ot_bool asapi_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	46ce      	mov	lr, r9
 8001f68:	b500      	push	{lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	0004      	movs	r4, r0
    if (srv.alp != alp) {
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <asapi_proc+0x128>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4283      	cmp	r3, r0
 8001f74:	d00b      	beq.n	8001f8e <asapi_proc+0x2a>
        if (srv.alp == NULL) {
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <asapi_proc+0x26>
            errcode = ASAPI_ERR_SERVERBUSY;
 8001f7a:	2501      	movs	r5, #1
    if (inrec_cmd & ASAPI_CMD_RESPONSE) {
 8001f7c:	063b      	lsls	r3, r7, #24
 8001f7e:	d468      	bmi.n	8002052 <asapi_proc+0xee>
}
 8001f80:	2001      	movs	r0, #1
 8001f82:	b002      	add	sp, #8
 8001f84:	bc04      	pop	{r2}
 8001f86:	4691      	mov	r9, r2
 8001f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
            asapi_open_srv(alp);
 8001f8a:	f7ff ffe1 	bl	8001f50 <asapi_open_srv>
    inrec_plen  = INREC(alp, PLEN);
 8001f8e:	2103      	movs	r1, #3
 8001f90:	4249      	negs	r1, r1
 8001f92:	68a0      	ldr	r0, [r4, #8]
 8001f94:	f006 fe59 	bl	8008c4a <q_getcursor_val>
 8001f98:	0005      	movs	r5, r0
    inrec_cmd   = INREC(alp, CMD);
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	4249      	negs	r1, r1
 8001f9e:	68a0      	ldr	r0, [r4, #8]
 8001fa0:	f006 fe53 	bl	8008c4a <q_getcursor_val>
 8001fa4:	0006      	movs	r6, r0
 8001fa6:	0007      	movs	r7, r0
    if (inrec_cmd & ASAPI_CMD_STATUS) {
 8001fa8:	06c3      	lsls	r3, r0, #27
 8001faa:	d509      	bpl.n	8001fc0 <asapi_proc+0x5c>
        if (inrec_cmd & ASAPI_CMD_INIT) {  // KILL
 8001fac:	0703      	lsls	r3, r0, #28
 8001fae:	d401      	bmi.n	8001fb4 <asapi_proc+0x50>
        errcode = ASAPI_ERR_FLUSH;
 8001fb0:	25ff      	movs	r5, #255	; 0xff
 8001fb2:	e7e3      	b.n	8001f7c <asapi_proc+0x18>
            dll_refresh();
 8001fb4:	f005 f85c 	bl	8007070 <dll_refresh>
            sub_stop_srv();
 8001fb8:	f7ff fda6 	bl	8001b08 <sub_stop_srv>
        errcode = ASAPI_ERR_FLUSH;
 8001fbc:	25ff      	movs	r5, #255	; 0xff
 8001fbe:	e7dd      	b.n	8001f7c <asapi_proc+0x18>
    payload             = &alp->inq->getcursor[0];
 8001fc0:	68a3      	ldr	r3, [r4, #8]
 8001fc2:	6858      	ldr	r0, [r3, #4]
    tid.ubyte[UPPER]    = payload[0];
 8001fc4:	7801      	ldrb	r1, [r0, #0]
    tid.ubyte[LOWER]    = payload[1];
 8001fc6:	7843      	ldrb	r3, [r0, #1]
 8001fc8:	0209      	lsls	r1, r1, #8
 8001fca:	430b      	orrs	r3, r1
 8001fcc:	466a      	mov	r2, sp
 8001fce:	8093      	strh	r3, [r2, #4]
    ext_value           = (inrec_cmd & ASAPI_CMD_EXT) ? payload[2] : 0;
 8001fd0:	06b3      	lsls	r3, r6, #26
 8001fd2:	d514      	bpl.n	8001ffe <asapi_proc+0x9a>
 8001fd4:	7882      	ldrb	r2, [r0, #2]
    len_check           = sub_test_stream(payload, inrec_cmd, ext_value);
 8001fd6:	0031      	movs	r1, r6
 8001fd8:	f7ff fd4c 	bl	8001a74 <sub_test_stream>
    len_check          -= (ot_int)inrec_plen;
 8001fdc:	b2ab      	uxth	r3, r5
 8001fde:	4699      	mov	r9, r3
 8001fe0:	1ac0      	subs	r0, r0, r3
 8001fe2:	b200      	sxth	r0, r0
    len_check           = (len_check < 0) - (len_check > 0);
 8001fe4:	0fc3      	lsrs	r3, r0, #31
 8001fe6:	17c5      	asrs	r5, r0, #31
 8001fe8:	1a2d      	subs	r5, r5, r0
 8001fea:	0fed      	lsrs	r5, r5, #31
 8001fec:	1b5d      	subs	r5, r3, r5
 8001fee:	b2ad      	uxth	r5, r5
 8001ff0:	b22b      	sxth	r3, r5
    if (len_check) {
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <asapi_proc+0x9e>
        errcode = ASAPI_ERR_BADDATA + len_check;
 8001ff6:	b2ed      	uxtb	r5, r5
 8001ff8:	3506      	adds	r5, #6
 8001ffa:	b2ed      	uxtb	r5, r5
        goto asapi_proc_END;
 8001ffc:	e7be      	b.n	8001f7c <asapi_proc+0x18>
    ext_value           = (inrec_cmd & ASAPI_CMD_EXT) ? payload[2] : 0;
 8001ffe:	2200      	movs	r2, #0
 8002000:	e7e9      	b.n	8001fd6 <asapi_proc+0x72>
    sub_q_purge(&srv.q);
 8002002:	4d22      	ldr	r5, [pc, #136]	; (800208c <asapi_proc+0x128>)
 8002004:	3508      	adds	r5, #8
 8002006:	0028      	movs	r0, r5
 8002008:	f7ff fd10 	bl	8001a2c <sub_q_purge>
    len_check = 4 + inrec_plen;
 800200c:	464b      	mov	r3, r9
 800200e:	3304      	adds	r3, #4
 8002010:	b21b      	sxth	r3, r3
 8002012:	4699      	mov	r9, r3
    if (q_writespace(&srv.q) < len_check) {
 8002014:	0028      	movs	r0, r5
 8002016:	f006 fe25 	bl	8008c64 <q_writespace>
 800201a:	4548      	cmp	r0, r9
 800201c:	da01      	bge.n	8002022 <asapi_proc+0xbe>
        errcode = ASAPI_ERR_STACKFULL;
 800201e:	2509      	movs	r5, #9
 8002020:	e7ac      	b.n	8001f7c <asapi_proc+0x18>
    q_writestring(&srv.q, &alp->inq->getcursor[-4], len_check);
 8002022:	68a3      	ldr	r3, [r4, #8]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	3904      	subs	r1, #4
 8002028:	4818      	ldr	r0, [pc, #96]	; (800208c <asapi_proc+0x128>)
 800202a:	464a      	mov	r2, r9
 800202c:	3008      	adds	r0, #8
 800202e:	f006 fea6 	bl	8008d7e <q_writestring>
    if ((inrec_cmd & ASAPI_CMD_HOLDOPEN) == 0) {
 8002032:	0673      	lsls	r3, r6, #25
 8002034:	d501      	bpl.n	800203a <asapi_proc+0xd6>
    ot_u8       errcode     = 0;
 8002036:	2500      	movs	r5, #0
 8002038:	e7a0      	b.n	8001f7c <asapi_proc+0x18>
        if (session_app_isloaded(&asapi_applet) == False) {
 800203a:	4815      	ldr	r0, [pc, #84]	; (8002090 <asapi_proc+0x12c>)
 800203c:	f005 fcf8 	bl	8007a30 <session_app_isloaded>
 8002040:	2800      	cmp	r0, #0
 8002042:	d001      	beq.n	8002048 <asapi_proc+0xe4>
    ot_u8       errcode     = 0;
 8002044:	2500      	movs	r5, #0
 8002046:	e799      	b.n	8001f7c <asapi_proc+0x18>
            errcode = sub_start_session(alp);
 8002048:	0020      	movs	r0, r4
 800204a:	f7ff fd67 	bl	8001b1c <sub_start_session>
 800204e:	b2c5      	uxtb	r5, r0
 8002050:	e794      	b.n	8001f7c <asapi_proc+0x18>
        alp->OUTREC(CMD) |= ASAPI_CMD_STATUS;
 8002052:	7963      	ldrb	r3, [r4, #5]
 8002054:	2210      	movs	r2, #16
 8002056:	4313      	orrs	r3, r2
 8002058:	7163      	strb	r3, [r4, #5]
        alp->OUTREC(PLEN) = 6;
 800205a:	2306      	movs	r3, #6
 800205c:	70e3      	strb	r3, [r4, #3]
        q_writeshort(alp->outq, tid.ushort);                // Write transaction ID
 800205e:	466b      	mov	r3, sp
 8002060:	8899      	ldrh	r1, [r3, #4]
 8002062:	68e0      	ldr	r0, [r4, #12]
 8002064:	f006 fe31 	bl	8008cca <q_writeshort>
        q_writebyte(alp->outq, 0);                          // RFU byte
 8002068:	2100      	movs	r1, #0
 800206a:	68e0      	ldr	r0, [r4, #12]
 800206c:	f006 fe28 	bl	8008cc0 <q_writebyte>
        q_writebyte(alp->outq, errcode);                    // Write Error code
 8002070:	0029      	movs	r1, r5
 8002072:	68e0      	ldr	r0, [r4, #12]
 8002074:	f006 fe24 	bl	8008cc0 <q_writebyte>
        q_writeshort(alp->outq, q_writespace(&srv.q));      // Space remaining in ALP queue
 8002078:	68e4      	ldr	r4, [r4, #12]
 800207a:	4804      	ldr	r0, [pc, #16]	; (800208c <asapi_proc+0x128>)
 800207c:	3008      	adds	r0, #8
 800207e:	f006 fdf1 	bl	8008c64 <q_writespace>
 8002082:	b281      	uxth	r1, r0
 8002084:	0020      	movs	r0, r4
 8002086:	f006 fe20 	bl	8008cca <q_writeshort>
 800208a:	e779      	b.n	8001f80 <asapi_proc+0x1c>
 800208c:	200001cc 	.word	0x200001cc
 8002090:	08001be9 	.word	0x08001be9

08002094 <sx127x_int_off>:
  * <LI> sx127x_int_clearall() </LI>
  * <LI> sx127x_int_force() </LI>
  * <LI> sx127x_int_turnon() </LI>
  * <LI> sx127x_int_turnoff() </LI>
  */
OT_WEAK void sx127x_int_off() {
 8002094:	b510      	push	{r4, lr}
    sx127x_int_config(0);
 8002096:	2000      	movs	r0, #0
 8002098:	f008 f8c2 	bl	800a220 <sx127x_int_config>
}
 800209c:	bd10      	pop	{r4, pc}
	...

080020a0 <sx127x_int_listen>:
inline void sx127x_iocfg_tx()  {
    sx127x_int_clearall();
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_TX);
}

inline void sx127x_int_listen() {
 80020a0:	b510      	push	{r4, lr}
    sx127x.imode = MODE_Listen;
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <sx127x_int_listen+0x14>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_LISTEN);
 80020a8:	2080      	movs	r0, #128	; 0x80
 80020aa:	0140      	lsls	r0, r0, #5
 80020ac:	f008 f8b8 	bl	800a220 <sx127x_int_config>
}
 80020b0:	bd10      	pop	{r4, pc}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	2000220c 	.word	0x2000220c

080020b8 <sx127x_int_rxdata>:

inline void sx127x_int_rxdata() {
 80020b8:	b510      	push	{r4, lr}
    sx127x.imode = MODE_RXData;
 80020ba:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <sx127x_int_rxdata+0x10>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_RXDATA);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <sx127x_int_rxdata+0x14>)
 80020c2:	f008 f8ad 	bl	800a220 <sx127x_int_config>
}
 80020c6:	bd10      	pop	{r4, pc}
 80020c8:	2000220c 	.word	0x2000220c
 80020cc:	00000802 	.word	0x00000802

080020d0 <sx127x_int_rxend>:

inline void sx127x_int_rxend() {
 80020d0:	b510      	push	{r4, lr}
    sx127x.imode = MODE_RXData;
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <sx127x_int_rxend+0x14>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_RXEND);
 80020d8:	20c0      	movs	r0, #192	; 0xc0
 80020da:	0140      	lsls	r0, r0, #5
 80020dc:	f008 f8a0 	bl	800a220 <sx127x_int_config>
}
 80020e0:	bd10      	pop	{r4, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	2000220c 	.word	0x2000220c

080020e8 <sx127x_int_csma>:

inline void sx127x_int_csma() {
 80020e8:	b510      	push	{r4, lr}
    sx127x.imode = MODE_CSMA;
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <sx127x_int_csma+0x14>)
 80020ec:	2205      	movs	r2, #5
 80020ee:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_CSMA);
 80020f0:	2080      	movs	r0, #128	; 0x80
 80020f2:	0140      	lsls	r0, r0, #5
 80020f4:	f008 f894 	bl	800a220 <sx127x_int_config>
}
 80020f8:	bd10      	pop	{r4, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	2000220c 	.word	0x2000220c

08002100 <sx127x_int_txdata>:

inline void sx127x_int_txdata() {
 8002100:	b510      	push	{r4, lr}
    sx127x.imode = MODE_TXData;
 8002102:	4b04      	ldr	r3, [pc, #16]	; (8002114 <sx127x_int_txdata+0x14>)
 8002104:	2206      	movs	r2, #6
 8002106:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_TXDONE);
 8002108:	2080      	movs	r0, #128	; 0x80
 800210a:	0140      	lsls	r0, r0, #5
 800210c:	f008 f888 	bl	800a220 <sx127x_int_config>
}
 8002110:	bd10      	pop	{r4, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	2000220c 	.word	0x2000220c

08002118 <sx127x_irq0_isr>:


void sx127x_irq0_isr() {   sx127x_virtual_isr(sx127x.imode);     }
 8002118:	b510      	push	{r4, lr}
 800211a:	4b02      	ldr	r3, [pc, #8]	; (8002124 <sx127x_irq0_isr+0xc>)
 800211c:	7818      	ldrb	r0, [r3, #0]
 800211e:	f000 fd45 	bl	8002bac <sx127x_virtual_isr>
 8002122:	bd10      	pop	{r4, pc}
 8002124:	2000220c 	.word	0x2000220c

08002128 <sx127x_irq1_isr>:
void sx127x_irq1_isr() {   sx127x_virtual_isr(sx127x.imode + 1); }
 8002128:	b510      	push	{r4, lr}
 800212a:	4b03      	ldr	r3, [pc, #12]	; (8002138 <sx127x_irq1_isr+0x10>)
 800212c:	7818      	ldrb	r0, [r3, #0]
 800212e:	3001      	adds	r0, #1
 8002130:	b2c0      	uxtb	r0, r0
 8002132:	f000 fd3b 	bl	8002bac <sx127x_virtual_isr>
 8002136:	bd10      	pop	{r4, pc}
 8002138:	2000220c 	.word	0x2000220c

0800213c <sx127x_irq3_isr>:
void sx127x_irq2_isr() {   sx127x_virtual_isr(sx127x.imode + 2); }
void sx127x_irq3_isr() {   sx127x_virtual_isr(sx127x.imode + 3); }
 800213c:	b510      	push	{r4, lr}
 800213e:	4b03      	ldr	r3, [pc, #12]	; (800214c <sx127x_irq3_isr+0x10>)
 8002140:	7818      	ldrb	r0, [r3, #0]
 8002142:	3003      	adds	r0, #3
 8002144:	b2c0      	uxtb	r0, r0
 8002146:	f000 fd31 	bl	8002bac <sx127x_virtual_isr>
 800214a:	bd10      	pop	{r4, pc}
 800214c:	2000220c 	.word	0x2000220c

08002150 <sx127x_check_cadpin>:
//            return;
//        }
//    }
}
*/
ot_bool sx127x_check_cadpin() {
 8002150:	b510      	push	{r4, lr}
    return (ot_bool)(sx127x_cadpin_ishigh() != 0);
 8002152:	f007 ff94 	bl	800a07e <sx127x_cadpin_ishigh>
 8002156:	1e43      	subs	r3, r0, #1
 8002158:	4198      	sbcs	r0, r3
 800215a:	b2c0      	uxtb	r0, r0
}
 800215c:	bd10      	pop	{r4, pc}
	...

08002160 <sx127x_read>:
            } while (old_mode != new_mode);
        }
    }
}

ot_u8 sx127x_read(ot_u8 addr) {
 8002160:	b500      	push	{lr}
 8002162:	b083      	sub	sp, #12
 8002164:	466b      	mov	r3, sp
 8002166:	1dda      	adds	r2, r3, #7
 8002168:	7010      	strb	r0, [r2, #0]
    sx127x_spibus_io(1, 1, &addr);
 800216a:	2101      	movs	r1, #1
 800216c:	2001      	movs	r0, #1
 800216e:	f007 ffd3 	bl	800a118 <sx127x_spibus_io>
    return sx127x.busrx[0];
 8002172:	4b02      	ldr	r3, [pc, #8]	; (800217c <sx127x_read+0x1c>)
 8002174:	78d8      	ldrb	r0, [r3, #3]
}
 8002176:	b003      	add	sp, #12
 8002178:	bd00      	pop	{pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	2000220c 	.word	0x2000220c

08002180 <sx127x_mode>:
ot_u8 sx127x_mode() {
 8002180:	b510      	push	{r4, lr}
    return sx127x_read(RFREG_LR_OPMODE) & _OPMODE;
 8002182:	2001      	movs	r0, #1
 8002184:	f7ff ffec 	bl	8002160 <sx127x_read>
 8002188:	2307      	movs	r3, #7
 800218a:	4018      	ands	r0, r3
}
 800218c:	bd10      	pop	{r4, pc}
	...

08002190 <sx127x_burstread>:

void sx127x_burstread(ot_u8 start_addr, ot_u8 length, ot_u8* data) {
 8002190:	b530      	push	{r4, r5, lr}
 8002192:	b083      	sub	sp, #12
 8002194:	000c      	movs	r4, r1
 8002196:	0015      	movs	r5, r2
 8002198:	466b      	mov	r3, sp
 800219a:	1dda      	adds	r2, r3, #7
 800219c:	7010      	strb	r0, [r2, #0]
    sx127x_spibus_io(1, length, &start_addr);
 800219e:	2001      	movs	r0, #1
 80021a0:	f007 ffba 	bl	800a118 <sx127x_spibus_io>
    memcpy(data, sx127x.busrx, length);
 80021a4:	b2a2      	uxth	r2, r4
 80021a6:	4903      	ldr	r1, [pc, #12]	; (80021b4 <sx127x_burstread+0x24>)
 80021a8:	0028      	movs	r0, r5
 80021aa:	f008 f8b7 	bl	800a31c <ot_memcpy>
}
 80021ae:	b003      	add	sp, #12
 80021b0:	bd30      	pop	{r4, r5, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	2000220f 	.word	0x2000220f

080021b8 <sx127x_write>:

void sx127x_write(ot_u8 addr, ot_u8 data) {
 80021b8:	b500      	push	{lr}
 80021ba:	b083      	sub	sp, #12
    ot_u8 cmd[2];
    cmd[0]  = 0x80 | addr;
 80021bc:	aa01      	add	r2, sp, #4
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	425b      	negs	r3, r3
 80021c2:	4318      	orrs	r0, r3
 80021c4:	7010      	strb	r0, [r2, #0]
    cmd[1]  = data;
 80021c6:	7051      	strb	r1, [r2, #1]
    sx127x_spibus_io(2, 0, cmd);
 80021c8:	2100      	movs	r1, #0
 80021ca:	2002      	movs	r0, #2
 80021cc:	f007 ffa4 	bl	800a118 <sx127x_spibus_io>
}
 80021d0:	b003      	add	sp, #12
 80021d2:	bd00      	pop	{pc}

080021d4 <sx127x_iocfg_cad>:
inline void sx127x_iocfg_cad()  {
 80021d4:	b510      	push	{r4, lr}
    sx127x_int_clearall();
 80021d6:	f008 f833 	bl	800a240 <sx127x_int_clearall>
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_CAD);
 80021da:	21a1      	movs	r1, #161	; 0xa1
 80021dc:	2040      	movs	r0, #64	; 0x40
 80021de:	f7ff ffeb 	bl	80021b8 <sx127x_write>
}
 80021e2:	bd10      	pop	{r4, pc}

080021e4 <sx127x_iocfg_rx>:
inline void sx127x_iocfg_rx()  {
 80021e4:	b510      	push	{r4, lr}
    sx127x_int_clearall();
 80021e6:	f008 f82b 	bl	800a240 <sx127x_int_clearall>
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_RX);
 80021ea:	2101      	movs	r1, #1
 80021ec:	2040      	movs	r0, #64	; 0x40
 80021ee:	f7ff ffe3 	bl	80021b8 <sx127x_write>
}
 80021f2:	bd10      	pop	{r4, pc}

080021f4 <sx127x_iocfg_tx>:
inline void sx127x_iocfg_tx()  {
 80021f4:	b510      	push	{r4, lr}
    sx127x_int_clearall();
 80021f6:	f008 f823 	bl	800a240 <sx127x_int_clearall>
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_TX);
 80021fa:	2140      	movs	r1, #64	; 0x40
 80021fc:	2040      	movs	r0, #64	; 0x40
 80021fe:	f7ff ffdb 	bl	80021b8 <sx127x_write>
}
 8002202:	bd10      	pop	{r4, pc}

08002204 <sx127x_load_defaults>:
void sx127x_load_defaults() {
 8002204:	b510      	push	{r4, lr}
    cursor = (ot_u8*)defaults;
 8002206:	4c05      	ldr	r4, [pc, #20]	; (800221c <sx127x_load_defaults+0x18>)
 8002208:	3408      	adds	r4, #8
    while (*cursor != 0) {
 800220a:	e003      	b.n	8002214 <sx127x_load_defaults+0x10>
        sx127x_write(cursor[0], cursor[1]);
 800220c:	7861      	ldrb	r1, [r4, #1]
 800220e:	f7ff ffd3 	bl	80021b8 <sx127x_write>
        cursor += 2;
 8002212:	3402      	adds	r4, #2
    while (*cursor != 0) {
 8002214:	7820      	ldrb	r0, [r4, #0]
 8002216:	2800      	cmp	r0, #0
 8002218:	d1f8      	bne.n	800220c <sx127x_load_defaults+0x8>
}
 800221a:	bd10      	pop	{r4, pc}
 800221c:	0800b7e0 	.word	0x0800b7e0

08002220 <sx127x_strobe>:
void sx127x_strobe(ot_u8 new_mode, ot_bool blocking) {
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	0005      	movs	r5, r0
    if (!blocking) {
 8002224:	2900      	cmp	r1, #0
 8002226:	d01c      	beq.n	8002262 <sx127x_strobe+0x42>
        ot_u8 old_mode = sx127x_mode();
 8002228:	f7ff ffaa 	bl	8002180 <sx127x_mode>
 800222c:	0004      	movs	r4, r0
        if (old_mode != new_mode) {
 800222e:	42a8      	cmp	r0, r5
 8002230:	d01d      	beq.n	800226e <sx127x_strobe+0x4e>
            sx127x_write(RFREG_LR_OPMODE, _LORAMODE|new_mode);
 8002232:	2180      	movs	r1, #128	; 0x80
 8002234:	4249      	negs	r1, r1
 8002236:	4329      	orrs	r1, r5
 8002238:	b2c9      	uxtb	r1, r1
 800223a:	2001      	movs	r0, #1
 800223c:	f7ff ffbc 	bl	80021b8 <sx127x_write>
            wdog = wdog_amount[(new_mode<<1) + (old_mode!=0)];
 8002240:	006b      	lsls	r3, r5, #1
 8002242:	1e62      	subs	r2, r4, #1
 8002244:	4194      	sbcs	r4, r2
 8002246:	191c      	adds	r4, r3, r4
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <sx127x_strobe+0x64>)
 800224a:	191c      	adds	r4, r3, r4
 800224c:	2340      	movs	r3, #64	; 0x40
 800224e:	5ce4      	ldrb	r4, [r4, r3]
                if (--wdog == 0) {
 8002250:	3c01      	subs	r4, #1
 8002252:	b2a4      	uxth	r4, r4
 8002254:	2c00      	cmp	r4, #0
 8002256:	d00b      	beq.n	8002270 <sx127x_strobe+0x50>
                old_mode = sx127x_mode();
 8002258:	f7ff ff92 	bl	8002180 <sx127x_mode>
            } while (old_mode != new_mode);
 800225c:	4285      	cmp	r5, r0
 800225e:	d1f7      	bne.n	8002250 <sx127x_strobe+0x30>
 8002260:	e005      	b.n	800226e <sx127x_strobe+0x4e>
        sx127x_write(RFREG_LR_OPMODE, _LORAMODE|new_mode);
 8002262:	3980      	subs	r1, #128	; 0x80
 8002264:	4301      	orrs	r1, r0
 8002266:	b2c9      	uxtb	r1, r1
 8002268:	2001      	movs	r0, #1
 800226a:	f7ff ffa5 	bl	80021b8 <sx127x_write>
}
 800226e:	bd70      	pop	{r4, r5, r6, pc}
                    sx127x_reset();
 8002270:	f007 ff0e 	bl	800a090 <sx127x_reset>
                    delay_us(400);
 8002274:	20c8      	movs	r0, #200	; 0xc8
 8002276:	0040      	lsls	r0, r0, #1
 8002278:	f007 fff8 	bl	800a26c <delay_us>
                    dll_init();
 800227c:	f004 ff1e 	bl	80070bc <dll_init>
                    return;
 8002280:	e7f5      	b.n	800226e <sx127x_strobe+0x4e>
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	0800b7e0 	.word	0x0800b7e0

08002288 <sx127x_burstwrite>:

void sx127x_burstwrite(ot_u8 start_addr, ot_u8 length, ot_u8* cmd_data) {
 8002288:	b570      	push	{r4, r5, r6, lr}
    ot_u8 save;
    cmd_data--;
 800228a:	1e54      	subs	r4, r2, #1
    save        = *cmd_data;
 800228c:	7825      	ldrb	r5, [r4, #0]
    *cmd_data   = 0x80 | start_addr;
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	425b      	negs	r3, r3
 8002292:	4318      	orrs	r0, r3
 8002294:	7020      	strb	r0, [r4, #0]
    sx127x_spibus_io(1+length, 0, cmd_data);
 8002296:	3101      	adds	r1, #1
 8002298:	b2c8      	uxtb	r0, r1
 800229a:	0022      	movs	r2, r4
 800229c:	2100      	movs	r1, #0
 800229e:	f007 ff3b 	bl	800a118 <sx127x_spibus_io>
    *cmd_data   = save;
 80022a2:	7025      	strb	r5, [r4, #0]
}
 80022a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080022a8 <sx127x_start_counter>:
  * internal timers of the SX127x, we instead use the more reliable interval
  * timer feature of OpenTag.
  */
static ot_u32 macstamp;

void sx127x_start_counter() {
 80022a8:	b510      	push	{r4, lr}
    macstamp = systim_chronstamp(NULL);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f007 fbac 	bl	8009a08 <systim_chronstamp>
 80022b0:	4b01      	ldr	r3, [pc, #4]	; (80022b8 <sx127x_start_counter+0x10>)
 80022b2:	6018      	str	r0, [r3, #0]
}
 80022b4:	bd10      	pop	{r4, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	200002e8 	.word	0x200002e8

080022bc <sx127x_stop_counter>:

void sx127x_stop_counter() {
}
 80022bc:	4770      	bx	lr
	...

080022c0 <sx127x_get_counter>:

ot_u16 sx127x_get_counter() {
 80022c0:	b510      	push	{r4, lr}
    ot_u16 value;
    value = dll.counter - (ot_u16)systim_chronstamp(&macstamp);
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <sx127x_get_counter+0x14>)
 80022c4:	885c      	ldrh	r4, [r3, #2]
 80022c6:	4804      	ldr	r0, [pc, #16]	; (80022d8 <sx127x_get_counter+0x18>)
 80022c8:	f007 fb9e 	bl	8009a08 <systim_chronstamp>
 80022cc:	b280      	uxth	r0, r0
 80022ce:	1a20      	subs	r0, r4, r0
 80022d0:	b280      	uxth	r0, r0
    return value;
}
 80022d2:	bd10      	pop	{r4, pc}
 80022d4:	200026d4 	.word	0x200026d4
 80022d8:	200002e8 	.word	0x200002e8

080022dc <sx127x_calc_rssi>:
  */
ot_int sx127x_calc_rssi(ot_u8 encoded_value, ot_s8 packet_snr) {
    ot_int rssi;
    
#   if defined(__SX1272__) || defined(__SX1273__)
        rssi = -125 + (ot_int)encoded_value;
 80022dc:	387d      	subs	r0, #125	; 0x7d
            rssi += -157;
#       endif
#   endif
            
    return rssi;
}
 80022de:	4770      	bx	lr

080022e0 <sx127x_calc_rssithr>:
#   if defined(__SX1272__) || defined(__SX1273__)
    // SX1272/3 uses -125 as baseline, DASH7 -140
    // Clip baseline at 0
    ///@todo SATURATION INSTRUCTION: 0 minimum
    rssi_thr = (ot_int)input - (140-125);
    if (rssi_thr < 0)
 80022e0:	380f      	subs	r0, #15
 80022e2:	d401      	bmi.n	80022e8 <sx127x_calc_rssithr+0x8>
#   else
        rssi_thr = (157 - 140) + input;
#   endif
#   endif
        
    return (ot_u8)rssi_thr;
 80022e4:	b2c0      	uxtb	r0, r0
}
 80022e6:	4770      	bx	lr
        rssi_thr = 0;
 80022e8:	2000      	movs	r0, #0
 80022ea:	e7fb      	b.n	80022e4 <sx127x_calc_rssithr+0x4>

080022ec <sx127x_clip_txeirp>:
#   define _MIN_DBM_EIRP (((2*2) - RF_HDB_ATTEN) + 80)
#else
#   define _MAX_DBM_EIRP (((14*2) - RF_HDB_ATTEN) + 80)
#   define _MIN_DBM_EIRP (((-1*2) - RF_HDB_ATTEN) + 80)
#endif
    if (input_eirp > _MAX_DBM_EIRP) {
 80022ec:	2872      	cmp	r0, #114	; 0x72
 80022ee:	d802      	bhi.n	80022f6 <sx127x_clip_txeirp+0xa>
        input_eirp = _MAX_DBM_EIRP;
    }
    else if (input_eirp < _MIN_DBM_EIRP) {
 80022f0:	2853      	cmp	r0, #83	; 0x53
 80022f2:	d902      	bls.n	80022fa <sx127x_clip_txeirp+0xe>
    
    return input_eirp;
    
#   undef _MAX_DBM_EIRP
#   undef _MIN_DBM_EIRP
}
 80022f4:	4770      	bx	lr
        input_eirp = _MAX_DBM_EIRP;
 80022f6:	2072      	movs	r0, #114	; 0x72
 80022f8:	e7fc      	b.n	80022f4 <sx127x_clip_txeirp+0x8>
        input_eirp = _MIN_DBM_EIRP;
 80022fa:	2054      	movs	r0, #84	; 0x54
 80022fc:	e7fa      	b.n	80022f4 <sx127x_clip_txeirp+0x8>

080022fe <sx127x_set_txpwr>:


void sx127x_set_txpwr(ot_u8 pwr_code) {
 80022fe:	b510      	push	{r4, lr}
/// i.e. eirp_code=0 => -40 dBm, eirp_code=80 => 0 dBm, etc
    ot_int dBm;
    ot_u8 padac;
    
    // get dBm
    dBm = (((ot_int)pwr_code + RF_HDB_ATTEN) >> 1) - 40;
 8002300:	3006      	adds	r0, #6
 8002302:	0840      	lsrs	r0, r0, #1
 8002304:	0003      	movs	r3, r0
 8002306:	3b28      	subs	r3, #40	; 0x28

#if (defined(__SX1272__) || defined(__SX1273__))
#   if defined(__SX127x_PABOOST__) && defined(__SX127x_20dBm__)
    // Convert to SX1272/3 units (PA Boost on, max 20dBm)
    // Convert to SX1272/3 units (PA Boost ON)
    if (dBm > 17) {
 8002308:	2b11      	cmp	r3, #17
 800230a:	dc0f      	bgt.n	800232c <sx127x_set_txpwr+0x2e>
		padac   = _PADAC_20DBM_ON;
		dBm    -= 5;
	}
	else {
		padac   = _PADAC_20DBM_OFF;
		dBm    -= 2;
 800230c:	382a      	subs	r0, #42	; 0x2a
 800230e:	b204      	sxth	r4, r0
		padac   = _PADAC_20DBM_OFF;
 8002310:	2184      	movs	r1, #132	; 0x84
	}
    sx127x_write(RFREG_LR_PADAC, padac);
 8002312:	205a      	movs	r0, #90	; 0x5a
 8002314:	f7ff ff50 	bl	80021b8 <sx127x_write>
    pwr_code = (1<<7) | (ot_u8)dBm & 0x0F;
 8002318:	b264      	sxtb	r4, r4
 800231a:	210f      	movs	r1, #15
 800231c:	400c      	ands	r4, r1
 800231e:	398f      	subs	r1, #143	; 0x8f
 8002320:	4321      	orrs	r1, r4
 8002322:	b2c9      	uxtb	r1, r1
#	error "Unsupported LoRa device"

#endif

    // Write new PA Table to device
    sx127x_write(RFREG_LR_PACONFIG, pwr_code);
 8002324:	2009      	movs	r0, #9
 8002326:	f7ff ff47 	bl	80021b8 <sx127x_write>
}
 800232a:	bd10      	pop	{r4, pc}
		dBm    -= 5;
 800232c:	382d      	subs	r0, #45	; 0x2d
 800232e:	b204      	sxth	r4, r0
		padac   = _PADAC_20DBM_ON;
 8002330:	2187      	movs	r1, #135	; 0x87
 8002332:	e7ee      	b.n	8002312 <sx127x_set_txpwr+0x14>

08002334 <sub_initcad>:
    ///@todo why is this commented-out?  Does it matter?
    //dll_offset_rxtimeout();
    rm2_reenter_rx(radio.evtdone);
}

void sub_initcad(void) {
 8002334:	b510      	push	{r4, lr}
    // Set I/O for CAD detect
    sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);  
 8002336:	21ff      	movs	r1, #255	; 0xff
 8002338:	2012      	movs	r0, #18
 800233a:	f7ff ff3d 	bl	80021b8 <sx127x_write>
    sx127x_iocfg_cad();
 800233e:	f7ff ff49 	bl	80021d4 <sx127x_iocfg_cad>
    sx127x_int_listen();
 8002342:	f7ff fead 	bl	80020a0 <sx127x_int_listen>
    
    radio.state = RADIO_Listening;
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <sub_initcad+0x28>)
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
    /// time for CAD->RSSI is dependent on SF and BW
    /// - SF7:500kHZ = 320us
    /// - SF7:125kHZ = 1280us
    //radio_set_mactimer(?);
    
    sx127x_antsw_rx();
 800234c:	f007 ff67 	bl	800a21e <sx127x_antsw_rx>
    sx127x_strobe(_OPMODE_CAD, False);  //non-blocking call
 8002350:	2100      	movs	r1, #0
 8002352:	2007      	movs	r0, #7
 8002354:	f7ff ff64 	bl	8002220 <sx127x_strobe>
}
 8002358:	bd10      	pop	{r4, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	20002744 	.word	0x20002744

08002360 <radio_init>:
OT_WEAK void radio_init(void) {
 8002360:	b510      	push	{r4, lr}
    rfctl.flags     = 0;
 8002362:	2200      	movs	r2, #0
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <radio_init+0x20>)
 8002366:	705a      	strb	r2, [r3, #1]
    radio.state     = RADIO_Idle;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <radio_init+0x24>)
 800236a:	701a      	strb	r2, [r3, #0]
    radio.evtdone   = &otutils_sig2_null;
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <radio_init+0x28>)
 800236e:	609a      	str	r2, [r3, #8]
    sx127x_init_bus();
 8002370:	f007 fea8 	bl	800a0c4 <sx127x_init_bus>
    sx127x_load_defaults();
 8002374:	f7ff ff46 	bl	8002204 <sx127x_load_defaults>
    rm2_init();
 8002378:	f005 fa72 	bl	8007860 <rm2_init>
}
 800237c:	bd10      	pop	{r4, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	2000264c 	.word	0x2000264c
 8002384:	20002744 	.word	0x20002744
 8002388:	08008df5 	.word	0x08008df5

0800238c <radio_set_mactimer>:
OT_WEAK void radio_set_mactimer(ot_u16 clocks) {
 800238c:	b510      	push	{r4, lr}
 800238e:	0004      	movs	r4, r0
    systim_enable_insertion();
 8002390:	f007 fb18 	bl	80099c4 <systim_enable_insertion>
    systim_set_insertion(clocks);
 8002394:	0020      	movs	r0, r4
 8002396:	f007 fb01 	bl	800999c <systim_set_insertion>
}
 800239a:	bd10      	pop	{r4, pc}

0800239c <radio_activate_queue>:
    q->options.ubyte[UPPER]    += 1;
 800239c:	78c3      	ldrb	r3, [r0, #3]
 800239e:	3301      	adds	r3, #1
 80023a0:	70c3      	strb	r3, [r0, #3]
    q->options.ubyte[LOWER]     = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	7083      	strb	r3, [r0, #2]
}
 80023a6:	4770      	bx	lr

080023a8 <rm2_clip_txeirp>:
OT_INLINE ot_u8 rm2_clip_txeirp(ot_u8 m2_txeirp) {
 80023a8:	b510      	push	{r4, lr}
    return sx127x_clip_txeirp(m2_txeirp & 0x7f);
 80023aa:	237f      	movs	r3, #127	; 0x7f
 80023ac:	4018      	ands	r0, r3
 80023ae:	f7ff ff9d 	bl	80022ec <sx127x_clip_txeirp>
}
 80023b2:	bd10      	pop	{r4, pc}

080023b4 <rm2_calc_rssithr>:
OT_INLINE ot_u8 rm2_calc_rssithr(ot_u8 m2_rssithr) {
 80023b4:	b510      	push	{r4, lr}
    return sx127x_calc_rssithr(m2_rssithr);
 80023b6:	f7ff ff93 	bl	80022e0 <sx127x_calc_rssithr>
}
 80023ba:	bd10      	pop	{r4, pc}

080023bc <sub_modemconfig2_baseval>:
    return mdmcfg2[sf_code];
 80023bc:	4b01      	ldr	r3, [pc, #4]	; (80023c4 <sub_modemconfig2_baseval+0x8>)
 80023be:	5c18      	ldrb	r0, [r3, r0]
}
 80023c0:	4770      	bx	lr
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	0800b868 	.word	0x0800b868

080023c8 <rm2_channel_fastcheck>:
    if (radio.flags & RADIO_FLAG_REFRESH) {
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <rm2_channel_fastcheck+0x2c>)
 80023ca:	785b      	ldrb	r3, [r3, #1]
 80023cc:	07da      	lsls	r2, r3, #31
 80023ce:	d407      	bmi.n	80023e0 <rm2_channel_fastcheck+0x18>
    if ((chan_id == 0) || (chan_id == phymac[0].channel)) {
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d00d      	beq.n	80023f0 <rm2_channel_fastcheck+0x28>
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <rm2_channel_fastcheck+0x30>)
 80023d6:	789b      	ldrb	r3, [r3, #2]
 80023d8:	4283      	cmp	r3, r0
 80023da:	d007      	beq.n	80023ec <rm2_channel_fastcheck+0x24>
    return False;
 80023dc:	2000      	movs	r0, #0
 80023de:	e004      	b.n	80023ea <rm2_channel_fastcheck+0x22>
        radio.flags ^= RADIO_FLAG_REFRESH;
 80023e0:	2201      	movs	r2, #1
 80023e2:	4053      	eors	r3, r2
 80023e4:	4a03      	ldr	r2, [pc, #12]	; (80023f4 <rm2_channel_fastcheck+0x2c>)
 80023e6:	7053      	strb	r3, [r2, #1]
        return False;
 80023e8:	2000      	movs	r0, #0
}
 80023ea:	4770      	bx	lr
        return True;
 80023ec:	2001      	movs	r0, #1
 80023ee:	e7fc      	b.n	80023ea <rm2_channel_fastcheck+0x22>
 80023f0:	2001      	movs	r0, #1
 80023f2:	e7fa      	b.n	80023ea <rm2_channel_fastcheck+0x22>
 80023f4:	20002744 	.word	0x20002744
 80023f8:	20002750 	.word	0x20002750

080023fc <rm2_enter_channel>:
OT_WEAK void rm2_enter_channel(ot_u8 old_chan_id, ot_u8 old_tx_eirp) {
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	0004      	movs	r4, r0
    if (old_tx_eirp != phymac[0].tx_eirp) {
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <rm2_enter_channel+0x74>)
 8002402:	7918      	ldrb	r0, [r3, #4]
 8002404:	4288      	cmp	r0, r1
 8002406:	d109      	bne.n	800241c <rm2_enter_channel+0x20>
    old_chan_id ^= phymac[0].channel;
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <rm2_enter_channel+0x74>)
 800240a:	789b      	ldrb	r3, [r3, #2]
 800240c:	405c      	eors	r4, r3
    if (old_chan_id & 0xF0) {
 800240e:	220f      	movs	r2, #15
 8002410:	0021      	movs	r1, r4
 8002412:	4391      	bics	r1, r2
 8002414:	d105      	bne.n	8002422 <rm2_enter_channel+0x26>
    if (old_chan_id & 0x0F) {
 8002416:	0723      	lsls	r3, r4, #28
 8002418:	d111      	bne.n	800243e <rm2_enter_channel+0x42>
}
 800241a:	bd70      	pop	{r4, r5, r6, pc}
        sx127x_set_txpwr( phymac[0].tx_eirp );
 800241c:	f7ff ff6f 	bl	80022fe <sx127x_set_txpwr>
 8002420:	e7f2      	b.n	8002408 <rm2_enter_channel+0xc>
        ot_u8* detect_regs = detection[phymac[0].channel>>4];
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	4d13      	ldr	r5, [pc, #76]	; (8002474 <rm2_enter_channel+0x78>)
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	3504      	adds	r5, #4
 800242a:	18ed      	adds	r5, r5, r3
        sx127x_write(RFREG_LR_DETECTOPTIMIZE, detect_regs[0]);
 800242c:	7829      	ldrb	r1, [r5, #0]
 800242e:	2031      	movs	r0, #49	; 0x31
 8002430:	f7ff fec2 	bl	80021b8 <sx127x_write>
        sx127x_write(RFREG_LR_DETECTIONTHRESHOLD, detect_regs[1]);
 8002434:	7869      	ldrb	r1, [r5, #1]
 8002436:	2037      	movs	r0, #55	; 0x37
 8002438:	f7ff febe 	bl	80021b8 <sx127x_write>
 800243c:	e7eb      	b.n	8002416 <rm2_enter_channel+0x1a>
        offset  = (phymac[0].flags > 2) ? 2 : phymac[0].flags;
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <rm2_enter_channel+0x74>)
 8002440:	781a      	ldrb	r2, [r3, #0]
 8002442:	1c13      	adds	r3, r2, #0
 8002444:	2a02      	cmp	r2, #2
 8002446:	d900      	bls.n	800244a <rm2_enter_channel+0x4e>
 8002448:	2302      	movs	r3, #2
 800244a:	b2da      	uxtb	r2, r3
        offset *= (15 * FREQ_SIZE);
 800244c:	233c      	movs	r3, #60	; 0x3c
 800244e:	435a      	muls	r2, r3
        offset += ((phymac[0].channel & 0x0F) - 1) * FREQ_SIZE;
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <rm2_enter_channel+0x74>)
 8002452:	7899      	ldrb	r1, [r3, #2]
 8002454:	230f      	movs	r3, #15
 8002456:	400b      	ands	r3, r1
 8002458:	3b01      	subs	r3, #1
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	18d2      	adds	r2, r2, r3
 800245e:	b292      	uxth	r2, r2
        sx127x_spibus_io(4, 0, (ot_u8*)&bandplan[offset]);
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <rm2_enter_channel+0x7c>)
 8002462:	18d2      	adds	r2, r2, r3
 8002464:	2100      	movs	r1, #0
 8002466:	2004      	movs	r0, #4
 8002468:	f007 fe56 	bl	800a118 <sx127x_spibus_io>
}
 800246c:	e7d5      	b.n	800241a <rm2_enter_channel+0x1e>
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	20002750 	.word	0x20002750
 8002474:	0800b868 	.word	0x0800b868
 8002478:	0800b8dc 	.word	0x0800b8dc

0800247c <rm2_mac_configure>:
}
 800247c:	4770      	bx	lr
	...

08002480 <rm2_calc_link>:
OT_WEAK void rm2_calc_link(void) {
 8002480:	b510      	push	{r4, lr}
	prssi_code			= sx127x_read(RFREG_LR_PKTRSSIVALUE);
 8002482:	201a      	movs	r0, #26
 8002484:	f7ff fe6c 	bl	8002160 <sx127x_read>
 8002488:	0004      	movs	r4, r0
	psnr_code           = sx127x_read(RFREG_LR_PKTSNRVALUE);
 800248a:	2019      	movs	r0, #25
 800248c:	f7ff fe68 	bl	8002160 <sx127x_read>
 8002490:	b241      	sxtb	r1, r0
	loralink.mean_snr   = (ot_s16)psnr_code;
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <rm2_calc_link+0x38>)
 8002494:	8099      	strh	r1, [r3, #4]
    radio.last_rssi     = sx127x_calc_rssi(prssi_code, psnr_code);
 8002496:	0020      	movs	r0, r4
 8002498:	f7ff ff20 	bl	80022dc <sx127x_calc_rssi>
 800249c:	4a07      	ldr	r2, [pc, #28]	; (80024bc <rm2_calc_link+0x3c>)
 800249e:	8090      	strh	r0, [r2, #4]
    radio.last_linkloss = (ot_int)(rxq.front[2] & 0x7F) - 80 - RF_HDB_RXATTEN;
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <rm2_calc_link+0x40>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	7899      	ldrb	r1, [r3, #2]
 80024a6:	237f      	movs	r3, #127	; 0x7f
 80024a8:	400b      	ands	r3, r1
 80024aa:	3b56      	subs	r3, #86	; 0x56
    radio.last_linkloss = (radio.last_linkloss - radio.last_rssi*2) >> 1;
 80024ac:	0040      	lsls	r0, r0, #1
 80024ae:	1a18      	subs	r0, r3, r0
 80024b0:	1040      	asrs	r0, r0, #1
 80024b2:	80d0      	strh	r0, [r2, #6]
}
 80024b4:	bd10      	pop	{r4, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	20002644 	.word	0x20002644
 80024bc:	20002744 	.word	0x20002744
 80024c0:	20002de0 	.word	0x20002de0

080024c4 <rm2_flood_getcounter>:
OT_WEAK ot_int rm2_flood_getcounter(void) {
 80024c4:	b510      	push	{r4, lr}
    offset_count    = (ot_int)sx127x_get_counter();
 80024c6:	f7ff fefb 	bl	80022c0 <sx127x_get_counter>
    offset_count   -= 7; //rm2_scale_codec(phymac[0].channel, 29);
 80024ca:	3807      	subs	r0, #7
 80024cc:	b200      	sxth	r0, r0
}
 80024ce:	bd10      	pop	{r4, pc}

080024d0 <rm2_flood_txstop>:
OT_WEAK void rm2_flood_txstop(void) {
 80024d0:	b510      	push	{r4, lr}
    rfctl.state = RADIO_STATE_TXDONE;
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <rm2_flood_txstop+0x14>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
    sx127x_stop_counter();
 80024d8:	f7ff fef0 	bl	80022bc <sx127x_stop_counter>
    sx127x_int_txdata();
 80024dc:	f7ff fe10 	bl	8002100 <sx127x_int_txdata>
}
 80024e0:	bd10      	pop	{r4, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	2000264c 	.word	0x2000264c

080024e8 <rm2_flood_txstart>:
OT_WEAK void rm2_flood_txstart(void) {
 80024e8:	b510      	push	{r4, lr}
    sx127x_start_counter();
 80024ea:	f7ff fedd 	bl	80022a8 <sx127x_start_counter>
}
 80024ee:	bd10      	pop	{r4, pc}

080024f0 <rm2_rxsync_isr>:
}
#endif


#ifndef EXTF_rm2_rxsync_isr
OT_WEAK void rm2_rxsync_isr(void) {
 80024f0:	b510      	push	{r4, lr}
/// - Multiframe packets are not possible in LoRa, so FRAME-CONT bit always 0
/// - LoRa packet reception is done with a manually-timed buffer interval,
///   via the mactimer.  LoRa's built-in packet engine is too dogmatic to be
///   useful for advanced applications (like this one)

    __DEBUG_ERRCODE_EVAL(=210); 
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <rm2_rxsync_isr+0x34>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	801a      	strh	r2, [r3, #0]
 80024f8:	32d2      	adds	r2, #210	; 0xd2
 80024fa:	805a      	strh	r2, [r3, #2]
    
    radio.state = RADIO_DataRX;
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <rm2_rxsync_isr+0x38>)
 80024fe:	3acd      	subs	r2, #205	; 0xcd
 8002500:	701a      	strb	r2, [r3, #0]
    dll_block();
 8002502:	f004 fac9 	bl	8006a98 <dll_block>

    // Manual download timing.
    // Either wait for the end of the packet (iter_ti=0: unencoded BG and PG frames)
    // or setup a timer interrupt.
    if (rfctl.iter_ti != 0) {
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <rm2_rxsync_isr+0x3c>)
 8002508:	78d8      	ldrb	r0, [r3, #3]
 800250a:	2800      	cmp	r0, #0
 800250c:	d106      	bne.n	800251c <rm2_rxsync_isr+0x2c>
    	radio_set_mactimer(rfctl.iter_ti);
    }
    sx127x_int_rxend();
 800250e:	f7ff fddf 	bl	80020d0 <sx127x_int_rxend>

    em2_decode_newpacket();
 8002512:	f000 fd0f 	bl	8002f34 <em2_decode_newpacket>
    em2_decode_newframe();
 8002516:	f000 fd0f 	bl	8002f38 <em2_decode_newframe>

}
 800251a:	bd10      	pop	{r4, pc}
    	radio_set_mactimer(rfctl.iter_ti);
 800251c:	b280      	uxth	r0, r0
 800251e:	f7ff ff35 	bl	800238c <radio_set_mactimer>
 8002522:	e7f4      	b.n	800250e <rm2_rxsync_isr+0x1e>
 8002524:	20002e6c 	.word	0x20002e6c
 8002528:	20002744 	.word	0x20002744
 800252c:	2000264c 	.word	0x2000264c

08002530 <rm2_txinit>:
/** Radio TX Functions  <BR>
  * ========================================================================<BR>
  */

#ifndef EXTF_rm2_txinit
OT_WEAK void rm2_txinit(ot_u8 psettings, ot_sig2 callback) {
 8002530:	b510      	push	{r4, lr}
            RADIO_FLAG_PG,
            RADIO_FLAG_CONT,
            (RADIO_FLAG_BG | RADIO_FLAG_CONT)
    };

    rfctl.flags    &= ~(RADIO_FLAG_BG | RADIO_FLAG_PG | RADIO_FLAG_CONT);
 8002532:	4a0d      	ldr	r2, [pc, #52]	; (8002568 <rm2_txinit+0x38>)
 8002534:	7853      	ldrb	r3, [r2, #1]
 8002536:	2407      	movs	r4, #7
 8002538:	43a3      	bics	r3, r4
    //rfctl.flags    |= (psettings & (M2_NETFLAG_BG | M2_NETFLAG_STREAM)) >> 6;

    ///@todo temporary method until PG mode refined
    rfctl.flags |= flag_lut[(psettings & (M2_NETFLAG_STREAM | M2_NETFLAG_BG)) >> 6];
 800253a:	0984      	lsrs	r4, r0, #6
 800253c:	480b      	ldr	r0, [pc, #44]	; (800256c <rm2_txinit+0x3c>)
 800253e:	1900      	adds	r0, r0, r4
 8002540:	2424      	movs	r4, #36	; 0x24
 8002542:	5d00      	ldrb	r0, [r0, r4]
 8002544:	4303      	orrs	r3, r0
 8002546:	7053      	strb	r3, [r2, #1]

    radio.evtdone   = callback;
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <rm2_txinit+0x40>)
 800254a:	6099      	str	r1, [r3, #8]
    radio.state     = RADIO_Csma;
 800254c:	2102      	movs	r1, #2
 800254e:	7019      	strb	r1, [r3, #0]
    rfctl.state     = RADIO_STATE_TXINIT;
 8002550:	2308      	movs	r3, #8
 8002552:	7013      	strb	r3, [r2, #0]

    /// If 0, it's a retransmission, no re-encoding necessary
    /// This value is revised later.
    txq.options.ubyte[UPPER] = 0;
 8002554:	4b07      	ldr	r3, [pc, #28]	; (8002574 <rm2_txinit+0x44>)
 8002556:	2200      	movs	r2, #0
 8002558:	70da      	strb	r2, [r3, #3]

    /// CSMA-CA interrupt based and fully pre-emptive.  This is
    /// possible using CC1 on the GPTIM to clock the intervals.
    radio_set_mactimer( (ot_uint)dll.comm.tca << 3 );
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <rm2_txinit+0x48>)
 800255c:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 800255e:	00c0      	lsls	r0, r0, #3
 8002560:	b280      	uxth	r0, r0
 8002562:	f7ff ff13 	bl	800238c <radio_set_mactimer>
}
 8002566:	bd10      	pop	{r4, pc}
 8002568:	2000264c 	.word	0x2000264c
 800256c:	0800b868 	.word	0x0800b868
 8002570:	20002744 	.word	0x20002744
 8002574:	20002df4 	.word	0x20002df4
 8002578:	200026d4 	.word	0x200026d4

0800257c <rm2_resend>:
#endif



#ifndef EXTF_rm2_resend
OT_WEAK void rm2_resend(ot_sig2 callback) {
 800257c:	b510      	push	{r4, lr}
    radio.evtdone               = callback;
 800257e:	4b07      	ldr	r3, [pc, #28]	; (800259c <rm2_resend+0x20>)
 8002580:	6098      	str	r0, [r3, #8]
    radio.state                 = RADIO_Csma;
 8002582:	2202      	movs	r2, #2
 8002584:	701a      	strb	r2, [r3, #0]
    rfctl.state                 = RADIO_STATE_TXINIT;
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <rm2_resend+0x24>)
 8002588:	3206      	adds	r2, #6
 800258a:	701a      	strb	r2, [r3, #0]
    txq.options.ubyte[UPPER]    = 255;
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <rm2_resend+0x28>)
 800258e:	32f7      	adds	r2, #247	; 0xf7
 8002590:	70da      	strb	r2, [r3, #3]
    radio_set_mactimer(0);
 8002592:	2000      	movs	r0, #0
 8002594:	f7ff fefa 	bl	800238c <radio_set_mactimer>
}
 8002598:	bd10      	pop	{r4, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	20002744 	.word	0x20002744
 80025a0:	2000264c 	.word	0x2000264c
 80025a4:	20002df4 	.word	0x20002df4

080025a8 <sub_cca_isfail>:
    sx127x_antsw_rx();
    sx127x_strobe(_OPMODE_CAD, False);  //non-blocking call
    radio.state = RADIO_Csma;
}

ot_bool sub_cca_isfail(void) {
 80025a8:	b510      	push	{r4, lr}
    ot_bool test;
    test = sx127x_check_cadpin();
 80025aa:	f7ff fdd1 	bl	8002150 <sx127x_check_cadpin>
 80025ae:	1e04      	subs	r4, r0, #0
    if (test) {
 80025b0:	d101      	bne.n	80025b6 <sub_cca_isfail+0xe>
        
        // This calls CSMA loop
        radio.evtdone(1, 0);
    }
    return test;
}
 80025b2:	0020      	movs	r0, r4
 80025b4:	bd10      	pop	{r4, pc}
        sx127x_int_off();
 80025b6:	f7ff fd6d 	bl	8002094 <sx127x_int_off>
        rfctl.state = RADIO_STATE_TXCAD1;
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <sub_cca_isfail+0x24>)
 80025bc:	2210      	movs	r2, #16
 80025be:	701a      	strb	r2, [r3, #0]
        radio.evtdone(1, 0);
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <sub_cca_isfail+0x28>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2100      	movs	r1, #0
 80025c6:	2001      	movs	r0, #1
 80025c8:	4798      	blx	r3
 80025ca:	e7f2      	b.n	80025b2 <sub_cca_isfail+0xa>
 80025cc:	2000264c 	.word	0x2000264c
 80025d0:	20002744 	.word	0x20002744

080025d4 <sx127xdrv_buffer_config>:

void sx127xdrv_null(ot_int arg1, ot_int arg2) { }


#ifndef EXTF_sx127xdrv_buffer_config
OT_WEAK void sx127xdrv_buffer_config(MODE_enum mode, ot_u16 param) {
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	000e      	movs	r6, r1
        (_BW_500_KHZ | _CODINGRATE_4_5 | _IMPLICITHEADER_ON | _RXPAYLOADCRC_OFF | _LOWDATARATEOPTIMIZE_OFF),
        (_BW_500_KHZ | _CODINGRATE_4_4 | _IMPLICITHEADER_ON | _RXPAYLOADCRC_OFF | _LOWDATARATEOPTIMIZE_OFF)
    };

    ///@todo Param manipulation must take into account the variable coding rate
    usefec  = (phymac[0].channel >> 7);
 80025d8:	4b10      	ldr	r3, [pc, #64]	; (800261c <sx127xdrv_buffer_config+0x48>)
 80025da:	789b      	ldrb	r3, [r3, #2]
 80025dc:	09db      	lsrs	r3, r3, #7
    offset  = (ot_u8)mode + usefec;
 80025de:	1818      	adds	r0, r3, r0
 80025e0:	b2c4      	uxtb	r4, r0

    sx127x_write(RFREG_LR_MODEMCONFIG1, mdmcfg1[usefec]);
 80025e2:	4d0f      	ldr	r5, [pc, #60]	; (8002620 <sx127xdrv_buffer_config+0x4c>)
 80025e4:	18eb      	adds	r3, r5, r3
 80025e6:	2228      	movs	r2, #40	; 0x28
 80025e8:	5c99      	ldrb	r1, [r3, r2]
 80025ea:	201d      	movs	r0, #29
 80025ec:	f7ff fde4 	bl	80021b8 <sx127x_write>
    //sx127x_write(RFREG_LR_MODEMCONFIG1, mdmcfg1[0]);

    sx127x_write(RFREG_LR_PREAMBLELSB, preamblelen[offset]);
 80025f0:	192d      	adds	r5, r5, r4
 80025f2:	232c      	movs	r3, #44	; 0x2c
 80025f4:	5ce9      	ldrb	r1, [r5, r3]
 80025f6:	2021      	movs	r0, #33	; 0x21
 80025f8:	f7ff fdde 	bl	80021b8 <sx127x_write>
    sx127x_write(RFREG_LR_SYNCWORD, syncword[offset]);
 80025fc:	2334      	movs	r3, #52	; 0x34
 80025fe:	5ce9      	ldrb	r1, [r5, r3]
 8002600:	2039      	movs	r0, #57	; 0x39
 8002602:	f7ff fdd9 	bl	80021b8 <sx127x_write>

    if (param == 0) {
 8002606:	2e00      	cmp	r6, #0
 8002608:	d103      	bne.n	8002612 <sx127xdrv_buffer_config+0x3e>
        param = deflength[offset];
 800260a:	4805      	ldr	r0, [pc, #20]	; (8002620 <sx127xdrv_buffer_config+0x4c>)
 800260c:	1904      	adds	r4, r0, r4
 800260e:	233c      	movs	r3, #60	; 0x3c
 8002610:	5ce6      	ldrb	r6, [r4, r3]
    }
    sx127x_write(RFREG_LR_PAYLOADLENGTH, param);
 8002612:	b2f1      	uxtb	r1, r6
 8002614:	2022      	movs	r0, #34	; 0x22
 8002616:	f7ff fdcf 	bl	80021b8 <sx127x_write>
}
 800261a:	bd70      	pop	{r4, r5, r6, pc}
 800261c:	20002750 	.word	0x20002750
 8002620:	0800b868 	.word	0x0800b868

08002624 <radio_gag>:
   radio_sleep();
}
#endif

#ifndef EXTF_radio_gag
OT_WEAK void radio_gag(void) {
 8002624:	b510      	push	{r4, lr}
    sx127x_int_off();                       // Disable pin interrutps on MCU
 8002626:	f7ff fd35 	bl	8002094 <sx127x_int_off>
    sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);  // Clear Register IRQ Flags on SX127x
 800262a:	21ff      	movs	r1, #255	; 0xff
 800262c:	2012      	movs	r0, #18
 800262e:	f7ff fdc3 	bl	80021b8 <sx127x_write>
}
 8002632:	bd10      	pop	{r4, pc}

08002634 <radio_finish>:
OT_WEAK void radio_finish(ot_int main_err, ot_int frame_err) {
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	0004      	movs	r4, r0
 8002638:	000d      	movs	r5, r1
    radio_gag();                            // redundant, but here for robustness
 800263a:	f7ff fff3 	bl	8002624 <radio_gag>
    dll_unblock();                          // also redundant and here for robustness
 800263e:	f004 fa31 	bl	8006aa4 <dll_unblock>
    rfctl.state     = 0;
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <radio_finish+0x2c>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
    rfctl.flags    &= (RADIO_FLAG_XOON);    //clear all other flags
 8002648:	7859      	ldrb	r1, [r3, #1]
 800264a:	3240      	adds	r2, #64	; 0x40
 800264c:	400a      	ands	r2, r1
 800264e:	705a      	strb	r2, [r3, #1]
    callback        = radio.evtdone;
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <radio_finish+0x30>)
 8002652:	689a      	ldr	r2, [r3, #8]
    radio.evtdone   = &otutils_sig2_null;
 8002654:	4904      	ldr	r1, [pc, #16]	; (8002668 <radio_finish+0x34>)
 8002656:	6099      	str	r1, [r3, #8]
    callback(main_err, frame_err);
 8002658:	0029      	movs	r1, r5
 800265a:	0020      	movs	r0, r4
 800265c:	4790      	blx	r2
}
 800265e:	bd70      	pop	{r4, r5, r6, pc}
 8002660:	2000264c 	.word	0x2000264c
 8002664:	20002744 	.word	0x20002744
 8002668:	08008df5 	.word	0x08008df5

0800266c <sub_hwtimeout_isr>:
void sub_hwtimeout_isr(void) {
 800266c:	b510      	push	{r4, lr}
    if (rfctl.flags & RADIO_FLAG_BG) {
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <sub_hwtimeout_isr+0x38>)
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	07db      	lsls	r3, r3, #31
 8002674:	d506      	bpl.n	8002684 <sub_hwtimeout_isr+0x18>
        if (--rfctl.tries <= 0) {
 8002676:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <sub_hwtimeout_isr+0x38>)
 8002678:	7893      	ldrb	r3, [r2, #2]
 800267a:	3b01      	subs	r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	7093      	strb	r3, [r2, #2]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <sub_hwtimeout_isr+0x2a>
    sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);
 8002684:	21ff      	movs	r1, #255	; 0xff
 8002686:	2012      	movs	r0, #18
 8002688:	f7ff fd96 	bl	80021b8 <sx127x_write>
    sx127x_strobe(_OPMODE_RXSINGLE, False);
 800268c:	2100      	movs	r1, #0
 800268e:	2006      	movs	r0, #6
 8002690:	f7ff fdc6 	bl	8002220 <sx127x_strobe>
}
 8002694:	bd10      	pop	{r4, pc}
            radio_finish(RM2_ERR_TIMEOUT, 1 /*radio.link.sqi*/);
 8002696:	2004      	movs	r0, #4
 8002698:	2101      	movs	r1, #1
 800269a:	4240      	negs	r0, r0
 800269c:	f7ff ffca 	bl	8002634 <radio_finish>
            return;
 80026a0:	e7f8      	b.n	8002694 <sub_hwtimeout_isr+0x28>
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	2000264c 	.word	0x2000264c

080026a8 <rm2_rxinit>:
OT_WEAK void rm2_rxinit(ot_u8 channel, ot_u8 psettings, ot_sig2 callback) {
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=200);
 80026ac:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <rm2_rxinit+0xb8>)
 80026ae:	2000      	movs	r0, #0
 80026b0:	8018      	strh	r0, [r3, #0]
 80026b2:	30c8      	adds	r0, #200	; 0xc8
 80026b4:	8058      	strh	r0, [r3, #2]
    radio.evtdone   = callback;
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <rm2_rxinit+0xbc>)
 80026b8:	609a      	str	r2, [r3, #8]
    rfctl.flags    &= ~(RADIO_FLAG_CONT | RADIO_FLAG_BG | RADIO_FLAG_PG);
 80026ba:	4a2b      	ldr	r2, [pc, #172]	; (8002768 <rm2_rxinit+0xc0>)
 80026bc:	7853      	ldrb	r3, [r2, #1]
 80026be:	38c1      	subs	r0, #193	; 0xc1
 80026c0:	4383      	bics	r3, r0
 80026c2:	7053      	strb	r3, [r2, #1]
    rfctl.tries 	= 1;
 80026c4:	3806      	subs	r0, #6
 80026c6:	7090      	strb	r0, [r2, #2]
    if (psettings & (M2_NETFLAG_BG)) {
 80026c8:	064a      	lsls	r2, r1, #25
 80026ca:	d51e      	bpl.n	800270a <rm2_rxinit+0x62>
        if ((psettings & M2_NETFLAG_STREAM) == 0) {
 80026cc:	b24a      	sxtb	r2, r1
 80026ce:	2a00      	cmp	r2, #0
 80026d0:	db07      	blt.n	80026e2 <rm2_rxinit+0x3a>
            rfctl.flags |= RADIO_FLAG_PG;
 80026d2:	2204      	movs	r2, #4
 80026d4:	4313      	orrs	r3, r2
 80026d6:	4a24      	ldr	r2, [pc, #144]	; (8002768 <rm2_rxinit+0xc0>)
 80026d8:	7053      	strb	r3, [r2, #1]
        	sub_init = &sub_initrx;
 80026da:	4e24      	ldr	r6, [pc, #144]	; (800276c <rm2_rxinit+0xc4>)
        	initvals = (ot_u8*)pginit;
 80026dc:	4d24      	ldr	r5, [pc, #144]	; (8002770 <rm2_rxinit+0xc8>)
 80026de:	3554      	adds	r5, #84	; 0x54
 80026e0:	e016      	b.n	8002710 <rm2_rxinit+0x68>
        else if (psettings & M2_NETSTATE_INIT) {
 80026e2:	070a      	lsls	r2, r1, #28
 80026e4:	d509      	bpl.n	80026fa <rm2_rxinit+0x52>
            rfctl.flags |= RADIO_FLAG_BG;
 80026e6:	4a20      	ldr	r2, [pc, #128]	; (8002768 <rm2_rxinit+0xc0>)
 80026e8:	2101      	movs	r1, #1
 80026ea:	430b      	orrs	r3, r1
 80026ec:	7053      	strb	r3, [r2, #1]
            rfctl.tries = 3;
 80026ee:	2303      	movs	r3, #3
 80026f0:	7093      	strb	r3, [r2, #2]
		    sub_init 	= &sub_initcad;
 80026f2:	4e20      	ldr	r6, [pc, #128]	; (8002774 <rm2_rxinit+0xcc>)
		    initvals 	= (ot_u8*)bg1init;
 80026f4:	4d1e      	ldr	r5, [pc, #120]	; (8002770 <rm2_rxinit+0xc8>)
 80026f6:	3544      	adds	r5, #68	; 0x44
 80026f8:	e00a      	b.n	8002710 <rm2_rxinit+0x68>
		    rfctl.flags |= RADIO_FLAG_BG;
 80026fa:	2201      	movs	r2, #1
 80026fc:	4313      	orrs	r3, r2
 80026fe:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <rm2_rxinit+0xc0>)
 8002700:	7053      	strb	r3, [r2, #1]
            sub_init = &sub_initrx;
 8002702:	4e1a      	ldr	r6, [pc, #104]	; (800276c <rm2_rxinit+0xc4>)
            initvals = (ot_u8*)bg2init;
 8002704:	4d1a      	ldr	r5, [pc, #104]	; (8002770 <rm2_rxinit+0xc8>)
 8002706:	355c      	adds	r5, #92	; 0x5c
 8002708:	e002      	b.n	8002710 <rm2_rxinit+0x68>
        sub_init    = &sub_initrx;
 800270a:	4e18      	ldr	r6, [pc, #96]	; (800276c <rm2_rxinit+0xc4>)
        initvals    = (ot_u8*)fginit;
 800270c:	4d18      	ldr	r5, [pc, #96]	; (8002770 <rm2_rxinit+0xc8>)
 800270e:	354c      	adds	r5, #76	; 0x4c
    if (rm2_test_channel(channel) == False) {
 8002710:	0020      	movs	r0, r4
 8002712:	f005 f8c7 	bl	80078a4 <rm2_test_channel>
 8002716:	2800      	cmp	r0, #0
 8002718:	d01b      	beq.n	8002752 <rm2_rxinit+0xaa>
    sx127xdrv_buffer_config(initvals[0], 0);
 800271a:	7828      	ldrb	r0, [r5, #0]
 800271c:	2100      	movs	r1, #0
 800271e:	f7ff ff59 	bl	80025d4 <sx127xdrv_buffer_config>
    channel			= (channel>>4) & 3;
 8002722:	0924      	lsrs	r4, r4, #4
 8002724:	2003      	movs	r0, #3
 8002726:	4020      	ands	r0, r4
    rfctl.iter_ti	= iterinit[channel];
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <rm2_rxinit+0xc8>)
 800272a:	181b      	adds	r3, r3, r0
 800272c:	2264      	movs	r2, #100	; 0x64
 800272e:	5c9a      	ldrb	r2, [r3, r2]
 8002730:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <rm2_rxinit+0xc0>)
 8002732:	70da      	strb	r2, [r3, #3]
    initvals[3]    |= sub_modemconfig2_baseval(channel);
 8002734:	f7ff fe42 	bl	80023bc <sub_modemconfig2_baseval>
 8002738:	78e9      	ldrb	r1, [r5, #3]
 800273a:	4301      	orrs	r1, r0
 800273c:	b2c9      	uxtb	r1, r1
 800273e:	70e9      	strb	r1, [r5, #3]
    sx127x_write(RFREG_LR_MODEMCONFIG2, initvals[3]);
 8002740:	201e      	movs	r0, #30
 8002742:	f7ff fd39 	bl	80021b8 <sx127x_write>
    sx127x_write(RFREG_LR_SYMBTIMEOUTLSB, initvals[4]);
 8002746:	7929      	ldrb	r1, [r5, #4]
 8002748:	201f      	movs	r0, #31
 800274a:	f7ff fd35 	bl	80021b8 <sx127x_write>
    sub_init();
 800274e:	47b0      	blx	r6
}
 8002750:	bd70      	pop	{r4, r5, r6, pc}
        radio_finish(RM2_ERR_BADCHANNEL, 0);
 8002752:	3003      	adds	r0, #3
 8002754:	2100      	movs	r1, #0
 8002756:	4240      	negs	r0, r0
 8002758:	f7ff ff6c 	bl	8002634 <radio_finish>
        return;
 800275c:	e7f8      	b.n	8002750 <rm2_rxinit+0xa8>
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	20002e6c 	.word	0x20002e6c
 8002764:	20002744 	.word	0x20002744
 8002768:	2000264c 	.word	0x2000264c
 800276c:	080029c1 	.word	0x080029c1
 8002770:	0800b868 	.word	0x0800b868
 8002774:	08002335 	.word	0x08002335

08002778 <rm2_decode_s2>:
void rm2_decode_s2(void) {
 8002778:	b510      	push	{r4, lr}
        llrbits = lorallr_getblock(&lorallr, rxq.getcursor);
 800277a:	4c24      	ldr	r4, [pc, #144]	; (800280c <rm2_decode_s2+0x94>)
 800277c:	6861      	ldr	r1, [r4, #4]
 800277e:	4824      	ldr	r0, [pc, #144]	; (8002810 <rm2_decode_s2+0x98>)
 8002780:	f002 fefe 	bl	8005580 <lorallr_getblock>
 8002784:	0002      	movs	r2, r0
        blockcrc = hsc_decode(&hsc, rxq.putcursor, llrbits);
 8002786:	68a1      	ldr	r1, [r4, #8]
 8002788:	4822      	ldr	r0, [pc, #136]	; (8002814 <rm2_decode_s2+0x9c>)
 800278a:	f000 fe45 	bl	8003418 <hsc_decode>
        if (blockcrc != 0) {
 800278e:	2800      	cmp	r0, #0
 8002790:	d127      	bne.n	80027e2 <rm2_decode_s2+0x6a>
        lorallr_popblock(&lorallr);
 8002792:	481f      	ldr	r0, [pc, #124]	; (8002810 <rm2_decode_s2+0x98>)
 8002794:	f002 ff32 	bl	80055fc <lorallr_popblock>
        rxq.putcursor += hsc.infobytes;
 8002798:	481e      	ldr	r0, [pc, #120]	; (8002814 <rm2_decode_s2+0x9c>)
 800279a:	88c3      	ldrh	r3, [r0, #6]
 800279c:	4c1b      	ldr	r4, [pc, #108]	; (800280c <rm2_decode_s2+0x94>)
 800279e:	68a2      	ldr	r2, [r4, #8]
 80027a0:	4694      	mov	ip, r2
 80027a2:	4463      	add	r3, ip
 80027a4:	60a3      	str	r3, [r4, #8]
        hsc_init(&hsc, (hscrate_t)(rxq.front[1] & 7));
 80027a6:	68e3      	ldr	r3, [r4, #12]
 80027a8:	785b      	ldrb	r3, [r3, #1]
 80027aa:	2107      	movs	r1, #7
 80027ac:	4019      	ands	r1, r3
 80027ae:	f000 fd0f 	bl	80031d0 <hsc_init>
        rxq.getcursor      += 16;
 80027b2:	6863      	ldr	r3, [r4, #4]
 80027b4:	3310      	adds	r3, #16
 80027b6:	6063      	str	r3, [r4, #4]
        unprocessed_bytes   = em2.bytes - (rxq.getcursor - (rxq.front + rxq.options.ushort));
 80027b8:	4a17      	ldr	r2, [pc, #92]	; (8002818 <rm2_decode_s2+0xa0>)
 80027ba:	8852      	ldrh	r2, [r2, #2]
 80027bc:	68e1      	ldr	r1, [r4, #12]
 80027be:	8860      	ldrh	r0, [r4, #2]
 80027c0:	1809      	adds	r1, r1, r0
 80027c2:	1a5b      	subs	r3, r3, r1
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	b21b      	sxth	r3, r3
    } while (unprocessed_bytes >= 16);
 80027c8:	2b0f      	cmp	r3, #15
 80027ca:	dcd6      	bgt.n	800277a <rm2_decode_s2+0x2>
    if (rfctl.state == RADIO_STATE_RXDONE) {
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <rm2_decode_s2+0xa4>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d10c      	bne.n	80027ee <rm2_decode_s2+0x76>
        radio_finish(0, em2_decode_endframe());
 80027d4:	f000 fca0 	bl	8003118 <em2_decode_endframe>
 80027d8:	b201      	sxth	r1, r0
 80027da:	2000      	movs	r0, #0
 80027dc:	f7ff ff2a 	bl	8002634 <radio_finish>
        return;
 80027e0:	e012      	b.n	8002808 <rm2_decode_s2+0x90>
            rxq.options.ushort  = 0;
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <rm2_decode_s2+0x94>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	805a      	strh	r2, [r3, #2]
            em2.state           = -1;
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <rm2_decode_s2+0xa0>)
 80027ea:	3a01      	subs	r2, #1
 80027ec:	809a      	strh	r2, [r3, #4]
    sys.task_RFA.event      = 5;
 80027ee:	490c      	ldr	r1, [pc, #48]	; (8002820 <rm2_decode_s2+0xa8>)
 80027f0:	2305      	movs	r3, #5
 80027f2:	710b      	strb	r3, [r1, #4]
    sys.task_RFA.nextevent  = (ot_uint)ti_per_block[(phymac[0].channel >> 4) & 3];
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <rm2_decode_s2+0xac>)
 80027f6:	789a      	ldrb	r2, [r3, #2]
 80027f8:	0912      	lsrs	r2, r2, #4
 80027fa:	2303      	movs	r3, #3
 80027fc:	401a      	ands	r2, r3
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <rm2_decode_s2+0xb0>)
 8002800:	189b      	adds	r3, r3, r2
 8002802:	2268      	movs	r2, #104	; 0x68
 8002804:	5c9b      	ldrb	r3, [r3, r2]
 8002806:	608b      	str	r3, [r1, #8]
}
 8002808:	bd10      	pop	{r4, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	20002de0 	.word	0x20002de0
 8002810:	20002238 	.word	0x20002238
 8002814:	20002230 	.word	0x20002230
 8002818:	20002710 	.word	0x20002710
 800281c:	2000264c 	.word	0x2000264c
 8002820:	20002e1c 	.word	0x20002e1c
 8002824:	20002750 	.word	0x20002750
 8002828:	0800b868 	.word	0x0800b868

0800282c <rm2_rxtimeout_isr>:
OT_WEAK void rm2_rxtimeout_isr(void) {
 800282c:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=280);
 800282e:	4b07      	ldr	r3, [pc, #28]	; (800284c <rm2_rxtimeout_isr+0x20>)
 8002830:	2200      	movs	r2, #0
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	3219      	adds	r2, #25
 8002836:	32ff      	adds	r2, #255	; 0xff
 8002838:	805a      	strh	r2, [r3, #2]
    radio_gag();
 800283a:	f7ff fef3 	bl	8002624 <radio_gag>
    radio_finish(RM2_ERR_TIMEOUT, 1 /*radio.link.sqi*/);
 800283e:	2004      	movs	r0, #4
 8002840:	2101      	movs	r1, #1
 8002842:	4240      	negs	r0, r0
 8002844:	f7ff fef6 	bl	8002634 <radio_finish>
}
 8002848:	bd10      	pop	{r4, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	20002e6c 	.word	0x20002e6c

08002850 <rm2_rxend_isr>:
OT_WEAK void rm2_rxend_isr(void) {
 8002850:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=230);
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <rm2_rxend_isr+0x38>)
 8002854:	2200      	movs	r2, #0
 8002856:	801a      	strh	r2, [r3, #0]
 8002858:	32e6      	adds	r2, #230	; 0xe6
 800285a:	805a      	strh	r2, [r3, #2]
    systim_disable_insertion();					// Here for safety purposes
 800285c:	f007 f8ba 	bl	80099d4 <systim_disable_insertion>
    radio_gag();                                // No more Radio interrupts!
 8002860:	f7ff fee0 	bl	8002624 <radio_gag>
    rm2_calc_link();                            // Calculate relative link info
 8002864:	f7ff fe0c 	bl	8002480 <rm2_calc_link>
    rfctl.state = RADIO_STATE_RXDONE;           // Make sure in DONE State, for decoding
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <rm2_rxend_isr+0x3c>)
 800286a:	2202      	movs	r2, #2
 800286c:	701a      	strb	r2, [r3, #0]
    em2_decode_data();                          // decode any leftover data
 800286e:	f000 fbc9 	bl	8003004 <em2_decode_data>
    if (sys.task_RFA.event != 6) {
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <rm2_rxend_isr+0x40>)
 8002874:	791b      	ldrb	r3, [r3, #4]
 8002876:	2b06      	cmp	r3, #6
 8002878:	d005      	beq.n	8002886 <rm2_rxend_isr+0x36>
        ot_u16 integrity = em2_decode_endframe();
 800287a:	f000 fc4d 	bl	8003118 <em2_decode_endframe>
        radio_finish(0, integrity);
 800287e:	b201      	sxth	r1, r0
 8002880:	2000      	movs	r0, #0
 8002882:	f7ff fed7 	bl	8002634 <radio_finish>
}
 8002886:	bd10      	pop	{r4, pc}
 8002888:	20002e6c 	.word	0x20002e6c
 800288c:	2000264c 	.word	0x2000264c
 8002890:	20002e1c 	.word	0x20002e1c

08002894 <radio_sleep>:
    }
}
#endif

#ifndef EXTF_radio_sleep
OT_WEAK void radio_sleep(void) {
 8002894:	b510      	push	{r4, lr}
    sx127x_antsw_off();
 8002896:	f007 fcbf 	bl	800a218 <sx127x_antsw_off>
    sx127x_strobe(_OPMODE_SLEEP, True);
 800289a:	2101      	movs	r1, #1
 800289c:	2000      	movs	r0, #0
 800289e:	f7ff fcbf 	bl	8002220 <sx127x_strobe>
//        radio.state  = RADIO_Idle;
//        rfctl.flags &= ~RADIO_FLAG_PWRMASK;
//        sx127x_strobe(_OPMODE_SLEEP);
//        sx127x_waitfor_sleep();
//    }
}
 80028a2:	bd10      	pop	{r4, pc}

080028a4 <radio_idle>:
#endif

#ifndef EXTF_radio_idle
OT_WEAK void radio_idle(void) {
 80028a4:	b510      	push	{r4, lr}
    sx127x_antsw_on();                    ///@todo see if this matters
 80028a6:	f007 fcb8 	bl	800a21a <sx127x_antsw_on>
    sx127x_strobe(_OPMODE_STANDBY, True);
 80028aa:	2101      	movs	r1, #1
 80028ac:	2001      	movs	r0, #1
 80028ae:	f7ff fcb7 	bl	8002220 <sx127x_strobe>
//    if (!test) {
//        radio.state  = RADIO_Idle;
//        rfctl.flags |= RADIO_FLAG_XOON;
//        sx127xdrv_force_standby();
//    }
}
 80028b2:	bd10      	pop	{r4, pc}

080028b4 <rm2_kill>:
OT_WEAK void rm2_kill(void) {
 80028b4:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=290);
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <rm2_kill+0x28>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	801a      	strh	r2, [r3, #0]
 80028bc:	3223      	adds	r2, #35	; 0x23
 80028be:	32ff      	adds	r2, #255	; 0xff
 80028c0:	805a      	strh	r2, [r3, #2]
    radio_gag();
 80028c2:	f7ff feaf 	bl	8002624 <radio_gag>
    radio_idle();
 80028c6:	f7ff ffed 	bl	80028a4 <radio_idle>
    dll_unblock();
 80028ca:	f004 f8eb 	bl	8006aa4 <dll_unblock>
    radio_finish(RM2_ERR_KILL, 0);
 80028ce:	2001      	movs	r0, #1
 80028d0:	2100      	movs	r1, #0
 80028d2:	4240      	negs	r0, r0
 80028d4:	f7ff feae 	bl	8002634 <radio_finish>
}
 80028d8:	bd10      	pop	{r4, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	20002e6c 	.word	0x20002e6c

080028e0 <sub_cad_csma>:
void sub_cad_csma(void) {
 80028e0:	b510      	push	{r4, lr}
    radio_gag(); 
 80028e2:	f7ff fe9f 	bl	8002624 <radio_gag>
    sx127x_iocfg_cad();
 80028e6:	f7ff fc75 	bl	80021d4 <sx127x_iocfg_cad>
    sx127x_int_csma();
 80028ea:	f7ff fbfd 	bl	80020e8 <sx127x_int_csma>
    radio_idle();
 80028ee:	f7ff ffd9 	bl	80028a4 <radio_idle>
    sx127x_antsw_rx();
 80028f2:	f007 fc94 	bl	800a21e <sx127x_antsw_rx>
    sx127x_strobe(_OPMODE_CAD, False);  //non-blocking call
 80028f6:	2100      	movs	r1, #0
 80028f8:	2007      	movs	r0, #7
 80028fa:	f7ff fc91 	bl	8002220 <sx127x_strobe>
    radio.state = RADIO_Csma;
 80028fe:	4b02      	ldr	r3, [pc, #8]	; (8002908 <sub_cad_csma+0x28>)
 8002900:	2202      	movs	r2, #2
 8002902:	701a      	strb	r2, [r3, #0]
}
 8002904:	bd10      	pop	{r4, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	20002744 	.word	0x20002744

0800290c <rm2_txdata_isr>:
OT_WEAK void rm2_txdata_isr(void) {
 800290c:	b510      	push	{r4, lr}
    if ((rfctl.flags & RADIO_FLAG_BGFLOOD) == RADIO_FLAG_BGFLOOD) {
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <rm2_txdata_isr+0x64>)
 8002910:	785a      	ldrb	r2, [r3, #1]
 8002912:	2303      	movs	r3, #3
 8002914:	4013      	ands	r3, r2
 8002916:	2b03      	cmp	r3, #3
 8002918:	d10a      	bne.n	8002930 <rm2_txdata_isr+0x24>
        radio.evtdone(RADIO_FLAG_CONT, 0);
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <rm2_txdata_isr+0x68>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2100      	movs	r1, #0
 8002920:	2002      	movs	r0, #2
 8002922:	4798      	blx	r3
        if ((rfctl.state & RADIO_STATE_TXMASK) == RADIO_STATE_TXDATA) {
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <rm2_txdata_isr+0x64>)
 8002926:	781a      	ldrb	r2, [r3, #0]
 8002928:	2338      	movs	r3, #56	; 0x38
 800292a:	4013      	ands	r3, r2
 800292c:	2b38      	cmp	r3, #56	; 0x38
 800292e:	d00b      	beq.n	8002948 <rm2_txdata_isr+0x3c>
    radio_gag();
 8002930:	f7ff fe78 	bl	8002624 <radio_gag>
    radio_idle();
 8002934:	f7ff ffb6 	bl	80028a4 <radio_idle>
    radio_finish((rfctl.flags & (RADIO_FLAG_PG | RADIO_FLAG_BG | RADIO_FLAG_CONT)), 0);
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <rm2_txdata_isr+0x64>)
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2007      	movs	r0, #7
 800293e:	4018      	ands	r0, r3
 8002940:	2100      	movs	r1, #0
 8002942:	f7ff fe77 	bl	8002634 <radio_finish>
}
 8002946:	bd10      	pop	{r4, pc}
            bgcrc8_put(&txq.front[2]);
 8002948:	4c0b      	ldr	r4, [pc, #44]	; (8002978 <rm2_txdata_isr+0x6c>)
 800294a:	68e3      	ldr	r3, [r4, #12]
 800294c:	1c98      	adds	r0, r3, #2
 800294e:	f003 fc72 	bl	8006236 <bgcrc8_put>
            sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);
 8002952:	21ff      	movs	r1, #255	; 0xff
 8002954:	2012      	movs	r0, #18
 8002956:	f7ff fc2f 	bl	80021b8 <sx127x_write>
            sx127x_burstwrite(RFREG_LR_FIFO, 6, &txq.front[2]);
 800295a:	68e2      	ldr	r2, [r4, #12]
 800295c:	3202      	adds	r2, #2
 800295e:	2106      	movs	r1, #6
 8002960:	2000      	movs	r0, #0
 8002962:	f7ff fc91 	bl	8002288 <sx127x_burstwrite>
            sx127x_strobe(_OPMODE_TX, False);   //non-blocking call
 8002966:	2100      	movs	r1, #0
 8002968:	2003      	movs	r0, #3
 800296a:	f7ff fc59 	bl	8002220 <sx127x_strobe>
            return;
 800296e:	e7ea      	b.n	8002946 <rm2_txdata_isr+0x3a>
 8002970:	2000264c 	.word	0x2000264c
 8002974:	20002744 	.word	0x20002744
 8002978:	20002df4 	.word	0x20002df4

0800297c <radio_flush_rx>:
/// Unused in SX127x
}
#endif

#ifndef EXTF_radio_flush_rx
OT_WEAK void radio_flush_rx(void) {
 800297c:	b510      	push	{r4, lr}
    sx127x_write(RFREG_LR_FIFOADDRPTR, 0);
 800297e:	2100      	movs	r1, #0
 8002980:	200d      	movs	r0, #13
 8002982:	f7ff fc19 	bl	80021b8 <sx127x_write>
}
 8002986:	bd10      	pop	{r4, pc}

08002988 <rm2_reenter_rx>:
OT_WEAK void rm2_reenter_rx(ot_sig2 callback) {
 8002988:	b510      	push	{r4, lr}
    radio.evtdone   = callback;
 800298a:	4c0b      	ldr	r4, [pc, #44]	; (80029b8 <rm2_reenter_rx+0x30>)
 800298c:	60a0      	str	r0, [r4, #8]
    rfctl.state     = RADIO_STATE_RXAUTO;
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <rm2_reenter_rx+0x34>)
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
    radio_gag();                            
 8002994:	f7ff fe46 	bl	8002624 <radio_gag>
    radio_flush_rx();
 8002998:	f7ff fff0 	bl	800297c <radio_flush_rx>
    sx127x_antsw_rx();
 800299c:	f007 fc3f 	bl	800a21e <sx127x_antsw_rx>
    sx127x_strobe(_OPMODE_RXSINGLE, False);  //sx127x_strobe(opmode, False);   //non-blocking call
 80029a0:	2100      	movs	r1, #0
 80029a2:	2006      	movs	r0, #6
 80029a4:	f7ff fc3c 	bl	8002220 <sx127x_strobe>
    sx127x_int_rxdata();
 80029a8:	f7ff fb86 	bl	80020b8 <sx127x_int_rxdata>
    radio.state = RADIO_Listening;
 80029ac:	2301      	movs	r3, #1
 80029ae:	7023      	strb	r3, [r4, #0]
    dll_unblock();
 80029b0:	f004 f878 	bl	8006aa4 <dll_unblock>
}
 80029b4:	bd10      	pop	{r4, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	20002744 	.word	0x20002744
 80029bc:	2000264c 	.word	0x2000264c

080029c0 <sub_initrx>:
void sub_initrx(void) {
 80029c0:	b510      	push	{r4, lr}
    sx127x_iocfg_rx();
 80029c2:	f7ff fc0f 	bl	80021e4 <sx127x_iocfg_rx>
    rm2_reenter_rx(radio.evtdone);
 80029c6:	4b02      	ldr	r3, [pc, #8]	; (80029d0 <sub_initrx+0x10>)
 80029c8:	6898      	ldr	r0, [r3, #8]
 80029ca:	f7ff ffdd 	bl	8002988 <rm2_reenter_rx>
}
 80029ce:	bd10      	pop	{r4, pc}
 80029d0:	20002744 	.word	0x20002744

080029d4 <rm2_rxdata_isr>:
OT_WEAK void rm2_rxdata_isr() {
 80029d4:	b510      	push	{r4, lr}
    em2_decode_data();
 80029d6:	f000 fb15 	bl	8003004 <em2_decode_data>
    if (em2.state < 0) {
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <rm2_rxdata_isr+0x78>)
 80029dc:	2204      	movs	r2, #4
 80029de:	5e9b      	ldrsh	r3, [r3, r2]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	db04      	blt.n	80029ee <rm2_rxdata_isr+0x1a>
    else if ((em2.crc5 == 1) && ((rfctl.flags & 7) == 0)) {
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <rm2_rxdata_isr+0x78>)
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d00d      	beq.n	8002a08 <rm2_rxdata_isr+0x34>
}
 80029ec:	bd10      	pop	{r4, pc}
        systim_disable_insertion();
 80029ee:	f006 fff1 	bl	80099d4 <systim_disable_insertion>
        radio.state = RADIO_Idle;
 80029f2:	4c17      	ldr	r4, [pc, #92]	; (8002a50 <rm2_rxdata_isr+0x7c>)
 80029f4:	2300      	movs	r3, #0
 80029f6:	7023      	strb	r3, [r4, #0]
        radio_gag();
 80029f8:	f7ff fe14 	bl	8002624 <radio_gag>
        radio_idle();
 80029fc:	f7ff ff52 	bl	80028a4 <radio_idle>
        rm2_reenter_rx(radio.evtdone);
 8002a00:	68a0      	ldr	r0, [r4, #8]
 8002a02:	f7ff ffc1 	bl	8002988 <rm2_reenter_rx>
 8002a06:	e7f1      	b.n	80029ec <rm2_rxdata_isr+0x18>
    else if ((em2.crc5 == 1) && ((rfctl.flags & 7) == 0)) {
 8002a08:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <rm2_rxdata_isr+0x80>)
 8002a0a:	785b      	ldrb	r3, [r3, #1]
 8002a0c:	075b      	lsls	r3, r3, #29
 8002a0e:	d1ed      	bne.n	80029ec <rm2_rxdata_isr+0x18>
        if (phymac[0].channel & 0x80) {
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <rm2_rxdata_isr+0x84>)
 8002a12:	789b      	ldrb	r3, [r3, #2]
 8002a14:	b25b      	sxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	db0a      	blt.n	8002a30 <rm2_rxdata_isr+0x5c>
            rx_octets = rxq.front[0]+1;
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <rm2_rxdata_isr+0x88>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	781c      	ldrb	r4, [r3, #0]
 8002a20:	3401      	adds	r4, #1
            systim_disable_insertion();
 8002a22:	f006 ffd7 	bl	80099d4 <systim_disable_insertion>
        sx127x_write(RFREG_LR_PAYLOADLENGTH, (ot_u8)rx_octets);
 8002a26:	b2e1      	uxtb	r1, r4
 8002a28:	2022      	movs	r0, #34	; 0x22
 8002a2a:	f7ff fbc5 	bl	80021b8 <sx127x_write>
}
 8002a2e:	e7dd      	b.n	80029ec <rm2_rxdata_isr+0x18>
            rx_octets   = (ot_uint)hsc_octetsinframe((hscrate_t)(rxq.front[1]&7), rxq.front[0]-7);
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <rm2_rxdata_isr+0x88>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	785a      	ldrb	r2, [r3, #1]
 8002a36:	2007      	movs	r0, #7
 8002a38:	4010      	ands	r0, r2
 8002a3a:	7819      	ldrb	r1, [r3, #0]
 8002a3c:	3907      	subs	r1, #7
 8002a3e:	b2c9      	uxtb	r1, r1
 8002a40:	f000 fbb8 	bl	80031b4 <hsc_octetsinframe>
            rx_octets  += 16;
 8002a44:	3010      	adds	r0, #16
 8002a46:	b284      	uxth	r4, r0
 8002a48:	e7ed      	b.n	8002a26 <rm2_rxdata_isr+0x52>
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	20002710 	.word	0x20002710
 8002a50:	20002744 	.word	0x20002744
 8002a54:	2000264c 	.word	0x2000264c
 8002a58:	20002750 	.word	0x20002750
 8002a5c:	20002de0 	.word	0x20002de0

08002a60 <radio_flush_tx>:
#endif

#ifndef EXTF_radio_flush_tx
OT_WEAK void radio_flush_tx(void) {
 8002a60:	b510      	push	{r4, lr}
    sx127x_write(RFREG_LR_FIFOADDRPTR, 0);
 8002a62:	2100      	movs	r1, #0
 8002a64:	200d      	movs	r0, #13
 8002a66:	f7ff fba7 	bl	80021b8 <sx127x_write>
}
 8002a6a:	bd10      	pop	{r4, pc}

08002a6c <rm2_txcsma_isr>:
OT_WEAK void rm2_txcsma_isr(void) {
 8002a6c:	b510      	push	{r4, lr}
    switch ( (rfctl.state >> RADIO_STATE_TXSHIFT) & (RADIO_STATE_TXMASK >> RADIO_STATE_TXSHIFT) ) {
 8002a6e:	4b48      	ldr	r3, [pc, #288]	; (8002b90 <rm2_txcsma_isr+0x124>)
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	08d2      	lsrs	r2, r2, #3
 8002a74:	2307      	movs	r3, #7
 8002a76:	4013      	ands	r3, r2
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	2a06      	cmp	r2, #6
 8002a7c:	d875      	bhi.n	8002b6a <rm2_txcsma_isr+0xfe>
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4a44      	ldr	r2, [pc, #272]	; (8002b94 <rm2_txcsma_isr+0x128>)
 8002a82:	58d3      	ldr	r3, [r2, r3]
 8002a84:	469f      	mov	pc, r3
            if (rm2_test_chanlist() == False) {
 8002a86:	f004 ff23 	bl	80078d0 <rm2_test_chanlist>
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d106      	bne.n	8002a9c <rm2_txcsma_isr+0x30>
                radio.evtdone(RM2_ERR_BADCHANNEL, 0);
 8002a8e:	4b42      	ldr	r3, [pc, #264]	; (8002b98 <rm2_txcsma_isr+0x12c>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	3003      	adds	r0, #3
 8002a94:	2100      	movs	r1, #0
 8002a96:	4240      	negs	r0, r0
 8002a98:	4798      	blx	r3
                break;
 8002a9a:	e066      	b.n	8002b6a <rm2_txcsma_isr+0xfe>
            mdmconfig2 = sub_modemconfig2_baseval((phymac[0].channel>>4) & 3);
 8002a9c:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <rm2_txcsma_isr+0x130>)
 8002a9e:	789b      	ldrb	r3, [r3, #2]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	2003      	movs	r0, #3
 8002aa4:	4018      	ands	r0, r3
 8002aa6:	f7ff fc89 	bl	80023bc <sub_modemconfig2_baseval>
 8002aaa:	0001      	movs	r1, r0
            sx127x_write(RFREG_LR_MODEMCONFIG2, mdmconfig2);
 8002aac:	201e      	movs	r0, #30
 8002aae:	f7ff fb83 	bl	80021b8 <sx127x_write>
            radio_activate_queue(&txq);
 8002ab2:	483b      	ldr	r0, [pc, #236]	; (8002ba0 <rm2_txcsma_isr+0x134>)
 8002ab4:	f7ff fc72 	bl	800239c <radio_activate_queue>
            em2_encode_newpacket();
 8002ab8:	f000 f944 	bl	8002d44 <em2_encode_newpacket>
            em2_encode_newframe();
 8002abc:	f000 f944 	bl	8002d48 <em2_encode_newframe>
            type = mode_lut[rfctl.flags & 7];
 8002ac0:	4b33      	ldr	r3, [pc, #204]	; (8002b90 <rm2_txcsma_isr+0x124>)
 8002ac2:	785a      	ldrb	r2, [r3, #1]
 8002ac4:	2307      	movs	r3, #7
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <rm2_txcsma_isr+0x138>)
 8002aca:	189b      	adds	r3, r3, r2
 8002acc:	226c      	movs	r2, #108	; 0x6c
 8002ace:	5c98      	ldrb	r0, [r3, r2]
            sx127xdrv_buffer_config(type, em2.bytes);
 8002ad0:	4b35      	ldr	r3, [pc, #212]	; (8002ba8 <rm2_txcsma_isr+0x13c>)
 8002ad2:	8859      	ldrh	r1, [r3, #2]
 8002ad4:	f7ff fd7e 	bl	80025d4 <sx127xdrv_buffer_config>
            sx127x_int_off();
 8002ad8:	f7ff fadc 	bl	8002094 <sx127x_int_off>
                goto rm2_txcsma_START;
 8002adc:	e01c      	b.n	8002b18 <rm2_txcsma_isr+0xac>
            rfctl.state = RADIO_STATE_TXCCA1;
 8002ade:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <rm2_txcsma_isr+0x124>)
 8002ae0:	2218      	movs	r2, #24
 8002ae2:	701a      	strb	r2, [r3, #0]
            sub_cad_csma();
 8002ae4:	f7ff fefc 	bl	80028e0 <sub_cad_csma>
            break;
 8002ae8:	e03f      	b.n	8002b6a <rm2_txcsma_isr+0xfe>
            if (sub_cca_isfail() == False) {
 8002aea:	f7ff fd5d 	bl	80025a8 <sub_cca_isfail>
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d13b      	bne.n	8002b6a <rm2_txcsma_isr+0xfe>
                radio_sleep();
 8002af2:	f7ff fecf 	bl	8002894 <radio_sleep>
                rfctl.state = RADIO_STATE_TXCAD2;
 8002af6:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <rm2_txcsma_isr+0x124>)
 8002af8:	2220      	movs	r2, #32
 8002afa:	701a      	strb	r2, [r3, #0]
                radio_set_mactimer(0 /*phymac[0].tg */);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7ff fc45 	bl	800238c <radio_set_mactimer>
 8002b02:	e032      	b.n	8002b6a <rm2_txcsma_isr+0xfe>
            rfctl.state = RADIO_STATE_TXCCA2;
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <rm2_txcsma_isr+0x124>)
 8002b06:	2228      	movs	r2, #40	; 0x28
 8002b08:	701a      	strb	r2, [r3, #0]
            sub_cad_csma();
 8002b0a:	f7ff fee9 	bl	80028e0 <sub_cad_csma>
            break;
 8002b0e:	e02c      	b.n	8002b6a <rm2_txcsma_isr+0xfe>
            if (sub_cca_isfail()) {
 8002b10:	f7ff fd4a 	bl	80025a8 <sub_cca_isfail>
 8002b14:	2800      	cmp	r0, #0
 8002b16:	d128      	bne.n	8002b6a <rm2_txcsma_isr+0xfe>
            rfctl.state = RADIO_STATE_TXSTART;
 8002b18:	4c1d      	ldr	r4, [pc, #116]	; (8002b90 <rm2_txcsma_isr+0x124>)
 8002b1a:	2330      	movs	r3, #48	; 0x30
 8002b1c:	7023      	strb	r3, [r4, #0]
            radio.evtdone(0, (rfctl.flags & (RADIO_FLAG_PG | RADIO_FLAG_CONT | RADIO_FLAG_BG)));
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <rm2_txcsma_isr+0x12c>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	7862      	ldrb	r2, [r4, #1]
 8002b24:	2107      	movs	r1, #7
 8002b26:	4011      	ands	r1, r2
 8002b28:	2000      	movs	r0, #0
 8002b2a:	4798      	blx	r3
            radio_gag();
 8002b2c:	f7ff fd7a 	bl	8002624 <radio_gag>
            txq.front[2] = phymac[0].tx_eirp;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <rm2_txcsma_isr+0x134>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a19      	ldr	r2, [pc, #100]	; (8002b9c <rm2_txcsma_isr+0x130>)
 8002b36:	7912      	ldrb	r2, [r2, #4]
 8002b38:	709a      	strb	r2, [r3, #2]
            if (rfctl.flags & RADIO_FLAG_BG) {
 8002b3a:	7863      	ldrb	r3, [r4, #1]
 8002b3c:	07db      	lsls	r3, r3, #31
 8002b3e:	d415      	bmi.n	8002b6c <rm2_txcsma_isr+0x100>
            radio_flush_tx();
 8002b40:	f7ff ff8e 	bl	8002a60 <radio_flush_tx>
            em2_encode_data();
 8002b44:	f000 f998 	bl	8002e78 <em2_encode_data>
            radio.state = RADIO_DataTX;
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <rm2_txcsma_isr+0x12c>)
 8002b4a:	2206      	movs	r2, #6
 8002b4c:	701a      	strb	r2, [r3, #0]
            rfctl.state = RADIO_STATE_TXDATA;
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <rm2_txcsma_isr+0x124>)
 8002b50:	3232      	adds	r2, #50	; 0x32
 8002b52:	701a      	strb	r2, [r3, #0]
            sx127x_iocfg_tx();
 8002b54:	f7ff fb4e 	bl	80021f4 <sx127x_iocfg_tx>
            sx127x_antsw_tx((ot_bool)BOARD_FEATURE(RF_PABOOST));
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f007 fb5f 	bl	800a21c <sx127x_antsw_tx>
            sx127x_int_txdata();
 8002b5e:	f7ff facf 	bl	8002100 <sx127x_int_txdata>
            sx127x_strobe(_OPMODE_TX, False);   //non-blocking call
 8002b62:	2100      	movs	r1, #0
 8002b64:	2003      	movs	r0, #3
 8002b66:	f7ff fb5b 	bl	8002220 <sx127x_strobe>
}
 8002b6a:	bd10      	pop	{r4, pc}
                radio_idle();
 8002b6c:	f7ff fe9a 	bl	80028a4 <radio_idle>
                if (rfctl.flags & RADIO_FLAG_CONT) {
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <rm2_txcsma_isr+0x124>)
 8002b72:	785b      	ldrb	r3, [r3, #1]
 8002b74:	079b      	lsls	r3, r3, #30
 8002b76:	d408      	bmi.n	8002b8a <rm2_txcsma_isr+0x11e>
                radio.evtdone((rfctl.flags & RADIO_FLAG_CONT), 0);
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <rm2_txcsma_isr+0x12c>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <rm2_txcsma_isr+0x124>)
 8002b7e:	7852      	ldrb	r2, [r2, #1]
 8002b80:	2002      	movs	r0, #2
 8002b82:	4010      	ands	r0, r2
 8002b84:	2100      	movs	r1, #0
 8002b86:	4798      	blx	r3
 8002b88:	e7da      	b.n	8002b40 <rm2_txcsma_isr+0xd4>
                    rm2_flood_txstart();
 8002b8a:	f7ff fcad 	bl	80024e8 <rm2_flood_txstart>
 8002b8e:	e7f3      	b.n	8002b78 <rm2_txcsma_isr+0x10c>
 8002b90:	2000264c 	.word	0x2000264c
 8002b94:	0800b830 	.word	0x0800b830
 8002b98:	20002744 	.word	0x20002744
 8002b9c:	20002750 	.word	0x20002750
 8002ba0:	20002df4 	.word	0x20002df4
 8002ba4:	0800b868 	.word	0x0800b868
 8002ba8:	20002710 	.word	0x20002710

08002bac <sx127x_virtual_isr>:
void sx127x_virtual_isr(ot_u8 code) {
 8002bac:	b510      	push	{r4, lr}
    switch (code) {
 8002bae:	2806      	cmp	r0, #6
 8002bb0:	d822      	bhi.n	8002bf8 <sx127x_virtual_isr+0x4c>
 8002bb2:	0080      	lsls	r0, r0, #2
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <sx127x_virtual_isr+0x54>)
 8002bb6:	581b      	ldr	r3, [r3, r0]
 8002bb8:	469f      	mov	pc, r3
            ot_uint test = sx127x_check_cadpin();
 8002bba:	f7ff fac9 	bl	8002150 <sx127x_check_cadpin>
            if (test) {
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d008      	beq.n	8002bd4 <sx127x_virtual_isr+0x28>
                radio_gag();
 8002bc2:	f7ff fd2f 	bl	8002624 <radio_gag>
                sx127x_strobe(_OPMODE_STANDBY, True);
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f7ff fb29 	bl	8002220 <sx127x_strobe>
                sub_initrx();
 8002bce:	f7ff fef7 	bl	80029c0 <sub_initrx>
 8002bd2:	e004      	b.n	8002bde <sx127x_virtual_isr+0x32>
                rm2_kill();
 8002bd4:	f7ff fe6e 	bl	80028b4 <rm2_kill>
 8002bd8:	e001      	b.n	8002bde <sx127x_virtual_isr+0x32>
        case RFIV_RXDONE:       rm2_rxend_isr();        break;
 8002bda:	f7ff fe39 	bl	8002850 <rm2_rxend_isr>
}
 8002bde:	bd10      	pop	{r4, pc}
        case RFIV_RXTIMEOUT:    sub_hwtimeout_isr();    break; 
 8002be0:	f7ff fd44 	bl	800266c <sub_hwtimeout_isr>
 8002be4:	e7fb      	b.n	8002bde <sx127x_virtual_isr+0x32>
        case RFIV_RXHEADER:     rm2_rxsync_isr();       break;
 8002be6:	f7ff fc83 	bl	80024f0 <rm2_rxsync_isr>
 8002bea:	e7f8      	b.n	8002bde <sx127x_virtual_isr+0x32>
        case RFIV_CCA:          rm2_txcsma_isr();       break;
 8002bec:	f7ff ff3e 	bl	8002a6c <rm2_txcsma_isr>
 8002bf0:	e7f5      	b.n	8002bde <sx127x_virtual_isr+0x32>
        case RFIV_TXDONE:       rm2_txdata_isr();       break;
 8002bf2:	f7ff fe8b 	bl	800290c <rm2_txdata_isr>
 8002bf6:	e7f2      	b.n	8002bde <sx127x_virtual_isr+0x32>
        default:                rm2_kill();             break;
 8002bf8:	f7ff fe5c 	bl	80028b4 <rm2_kill>
}
 8002bfc:	e7ef      	b.n	8002bde <sx127x_virtual_isr+0x32>
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	0800b84c 	.word	0x0800b84c

08002c04 <radio_mac_isr>:
OT_WEAK void radio_mac_isr(void) {
 8002c04:	b510      	push	{r4, lr}
	if (radio.state == RADIO_DataRX) {
 8002c06:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <radio_mac_isr+0x3c>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d00a      	beq.n	8002c24 <radio_mac_isr+0x20>
	systim_disable_insertion();
 8002c0e:	f006 fee1 	bl	80099d4 <systim_disable_insertion>
    if (radio.state == RADIO_Csma) {
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <radio_mac_isr+0x3c>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d007      	beq.n	8002c2a <radio_mac_isr+0x26>
    if (radio.state == RADIO_Listening) {
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d008      	beq.n	8002c30 <radio_mac_isr+0x2c>
	rm2_kill();
 8002c1e:	f7ff fe49 	bl	80028b4 <rm2_kill>
}
 8002c22:	bd10      	pop	{r4, pc}
		rm2_rxdata_isr();
 8002c24:	f7ff fed6 	bl	80029d4 <rm2_rxdata_isr>
		return;
 8002c28:	e7fb      	b.n	8002c22 <radio_mac_isr+0x1e>
    	rm2_txcsma_isr();
 8002c2a:	f7ff ff1f 	bl	8002a6c <rm2_txcsma_isr>
    	return;
 8002c2e:	e7f8      	b.n	8002c22 <radio_mac_isr+0x1e>
    	chan_rssi = sx127x_read(RFREG_LR_RSSIVALUE);
 8002c30:	201b      	movs	r0, #27
 8002c32:	f7ff fa95 	bl	8002160 <sx127x_read>
    	if (chan_rssi >= phymac[0].cs_thr) {
 8002c36:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <radio_mac_isr+0x40>)
 8002c38:	799b      	ldrb	r3, [r3, #6]
 8002c3a:	4283      	cmp	r3, r0
 8002c3c:	d8ef      	bhi.n	8002c1e <radio_mac_isr+0x1a>
 8002c3e:	e7f0      	b.n	8002c22 <radio_mac_isr+0x1e>
 8002c40:	20002744 	.word	0x20002744
 8002c44:	20002750 	.word	0x20002750

08002c48 <radio_getpwrcode>:
#   endif
}
#endif

#ifndef EXTF_radio_getpwrcode
OT_WEAK ot_u8 radio_getpwrcode(void) {
 8002c48:	b510      	push	{r4, lr}
/// Power code: 0-3.  sx127x_getbasepwr() typically returns 3 on most platforms
    return sx127x_getbasepwr() - (radio.state > RADIO_Idle);
 8002c4a:	f007 fa1f 	bl	800a08c <sx127x_getbasepwr>
 8002c4e:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <radio_getpwrcode+0x14>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	1e5a      	subs	r2, r3, #1
 8002c54:	4193      	sbcs	r3, r2
 8002c56:	1ac0      	subs	r0, r0, r3
 8002c58:	b2c0      	uxtb	r0, r0
}
 8002c5a:	bd10      	pop	{r4, pc}
 8002c5c:	20002744 	.word	0x20002744

08002c60 <sub_bytes_to_symbols_sf5>:
  * rm2_scale_codec
  */

typedef ot_uint (*converter_fn)(ot_int, ot_int);

static ot_uint sub_bytes_to_symbols_sf5(ot_int pkt_bytes, ot_int codesize) {
 8002c60:	b510      	push	{r4, lr}
 8002c62:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 12 + 19) / 20) * codesize );
 8002c64:	00c0      	lsls	r0, r0, #3
 8002c66:	3007      	adds	r0, #7
 8002c68:	2114      	movs	r1, #20
 8002c6a:	f7fd fad7 	bl	800021c <__divsi3>
 8002c6e:	4360      	muls	r0, r4
 8002c70:	3008      	adds	r0, #8
 8002c72:	b280      	uxth	r0, r0
}
 8002c74:	bd10      	pop	{r4, pc}

08002c76 <sub_bytes_to_symbols_sf7>:
static ot_uint sub_bytes_to_symbols_sf7(ot_int pkt_bytes, ot_int codesize) {
 8002c76:	b510      	push	{r4, lr}
 8002c78:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 20 + 27) / 28) * codesize );
 8002c7a:	00c0      	lsls	r0, r0, #3
 8002c7c:	3007      	adds	r0, #7
 8002c7e:	211c      	movs	r1, #28
 8002c80:	f7fd facc 	bl	800021c <__divsi3>
 8002c84:	4360      	muls	r0, r4
 8002c86:	3008      	adds	r0, #8
 8002c88:	b280      	uxth	r0, r0
}
 8002c8a:	bd10      	pop	{r4, pc}

08002c8c <sub_bytes_to_symbols_sf9>:
static ot_uint sub_bytes_to_symbols_sf9(ot_int pkt_bytes, ot_int codesize) {
 8002c8c:	b510      	push	{r4, lr}
 8002c8e:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 28 + 35) / 36) * codesize );
 8002c90:	00c0      	lsls	r0, r0, #3
 8002c92:	3007      	adds	r0, #7
 8002c94:	2124      	movs	r1, #36	; 0x24
 8002c96:	f7fd fac1 	bl	800021c <__divsi3>
 8002c9a:	4360      	muls	r0, r4
 8002c9c:	3008      	adds	r0, #8
 8002c9e:	b280      	uxth	r0, r0
}
 8002ca0:	bd10      	pop	{r4, pc}

08002ca2 <sub_bytes_to_symbols_sf11>:
static ot_uint sub_bytes_to_symbols_sf11(ot_int pkt_bytes, ot_int codesize) {
 8002ca2:	b510      	push	{r4, lr}
 8002ca4:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 36 + 43) / 44) * codesize );
 8002ca6:	00c0      	lsls	r0, r0, #3
 8002ca8:	3007      	adds	r0, #7
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	f7fd fab6 	bl	800021c <__divsi3>
 8002cb0:	4360      	muls	r0, r4
 8002cb2:	3008      	adds	r0, #8
 8002cb4:	b280      	uxth	r0, r0
}
 8002cb6:	bd10      	pop	{r4, pc}

08002cb8 <sub_symbols_to_ti>:



static ot_uint sub_symbols_to_ti(ot_int symbols, ot_uint miti_per_sym) {
    ot_ulong miti;
    miti    = symbols * miti_per_sym;
 8002cb8:	4348      	muls	r0, r1
    miti   += 1023;
 8002cba:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <sub_symbols_to_ti+0x10>)
 8002cbc:	469c      	mov	ip, r3
 8002cbe:	4460      	add	r0, ip
    return (ot_uint)(miti >> 10);
 8002cc0:	0a80      	lsrs	r0, r0, #10
 8002cc2:	b280      	uxth	r0, r0
}
 8002cc4:	4770      	bx	lr
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	000003ff 	.word	0x000003ff

08002ccc <rm2_rxtimeout_floor>:
                0, // 1100: FEC, extra coding, PAGE         (presently unspecified)
                0, // 1101: FEC, extra coding, SF9          (presently unspecified)
                0, // 1110: FEC, extra coding, SF7          (presently unspecified)
                0, // 1111: FEC, extra coding, SF5          (presently unspecified)
        };
    return (ot_uint)bgpkt_ti_lut[ (chan_id>>4) & 0x0F ];
 8002ccc:	0900      	lsrs	r0, r0, #4
 8002cce:	4b01      	ldr	r3, [pc, #4]	; (8002cd4 <rm2_rxtimeout_floor+0x8>)
 8002cd0:	5c18      	ldrb	r0, [r3, r0]
}
 8002cd2:	4770      	bx	lr
 8002cd4:	0800b990 	.word	0x0800b990

08002cd8 <rm2_default_tgd>:
            0, // 1101: FEC, extra coding, SF9          (presently unspecified)
            0, // 1110: FEC, extra coding, SF7          (presently unspecified)
            0, // 1111: FEC, extra coding, SF5          (presently unspecified)
    };
    
    return (ot_uint)tgdti_lut[ (chan_id>>4) & 0x0F ];
 8002cd8:	0903      	lsrs	r3, r0, #4
 8002cda:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <rm2_default_tgd+0xc>)
 8002cdc:	18c0      	adds	r0, r0, r3
 8002cde:	7c00      	ldrb	r0, [r0, #16]
}
 8002ce0:	4770      	bx	lr
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	0800b990 	.word	0x0800b990

08002ce8 <rm2_bgpkt_duration>:
ot_uint rm2_pkt_duration(ot_queue* pkt_q) {
    return rm2_scale_codec( phymac[0].channel, (ot_uint)pkt_q->front[0]+2 );
}


ot_uint rm2_bgpkt_duration() {
 8002ce8:	b510      	push	{r4, lr}
    return rm2_rxtimeout_floor(phymac[0].channel);
 8002cea:	4b02      	ldr	r3, [pc, #8]	; (8002cf4 <rm2_bgpkt_duration+0xc>)
 8002cec:	7898      	ldrb	r0, [r3, #2]
 8002cee:	f7ff ffed 	bl	8002ccc <rm2_rxtimeout_floor>
}
 8002cf2:	bd10      	pop	{r4, pc}
 8002cf4:	20002750 	.word	0x20002750

08002cf8 <rm2_scale_codec>:


///@todo this entire function might be done in a direct lookup table, even if in blocks.
ot_uint rm2_scale_codec(ot_u8 channel_code, ot_uint buf_bytes) {
 8002cf8:	b570      	push	{r4, r5, r6, lr}
    };

    ot_int codesize;
    ot_uint miti_per_sym;

    channel_code    = (channel_code >> 4) & 3;
 8002cfa:	0903      	lsrs	r3, r0, #4
 8002cfc:	2003      	movs	r0, #3
 8002cfe:	4018      	ands	r0, r3
    codesize        = (channel_code & 0x80) ? 4 : 5;
 8002d00:	2505      	movs	r5, #5
    miti_per_sym    = mitipersym_chan[channel_code];
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <rm2_scale_codec+0x30>)
 8002d04:	0042      	lsls	r2, r0, #1
 8002d06:	189a      	adds	r2, r3, r2
 8002d08:	8c14      	ldrh	r4, [r2, #32]
    buf_bytes       = converter[channel_code](buf_bytes, codesize);
 8002d0a:	0080      	lsls	r0, r0, #2
 8002d0c:	1818      	adds	r0, r3, r0
 8002d0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d10:	b208      	sxth	r0, r1
 8002d12:	0029      	movs	r1, r5
 8002d14:	4798      	blx	r3
    
    // + Also add Preamble & Sync Overhead
    // + Also add 4 or 5 symbols because LoRa TX-END is late-arriving by one symbol group
    buf_bytes  += RF_PARAM_PKT_OVERHEAD + codesize;
 8002d16:	1940      	adds	r0, r0, r5
 8002d18:	b280      	uxth	r0, r0
 8002d1a:	300f      	adds	r0, #15
    
    return sub_symbols_to_ti(buf_bytes, miti_per_sym);
 8002d1c:	b200      	sxth	r0, r0
 8002d1e:	0021      	movs	r1, r4
 8002d20:	f7ff ffca 	bl	8002cb8 <sub_symbols_to_ti>
}
 8002d24:	bd70      	pop	{r4, r5, r6, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	0800b990 	.word	0x0800b990

08002d2c <rm2_pkt_duration>:
ot_uint rm2_pkt_duration(ot_queue* pkt_q) {
 8002d2c:	b510      	push	{r4, lr}
    return rm2_scale_codec( phymac[0].channel, (ot_uint)pkt_q->front[0]+2 );
 8002d2e:	68c3      	ldr	r3, [r0, #12]
 8002d30:	7819      	ldrb	r1, [r3, #0]
 8002d32:	3102      	adds	r1, #2
 8002d34:	4b02      	ldr	r3, [pc, #8]	; (8002d40 <rm2_pkt_duration+0x14>)
 8002d36:	7898      	ldrb	r0, [r3, #2]
 8002d38:	f7ff ffde 	bl	8002cf8 <rm2_scale_codec>
}
 8002d3c:	bd10      	pop	{r4, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	20002750 	.word	0x20002750

08002d44 <em2_encode_newpacket>:
  * has these optimized encode and decode functions.
  *
  */

void em2_encode_newpacket() {
}
 8002d44:	4770      	bx	lr
	...

08002d48 <em2_encode_newframe>:





void em2_encode_newframe() {
 8002d48:	b570      	push	{r4, r5, r6, lr}
        {0, 2},             // b111 : PG/BG encoded (impossible)
        };
#   endif
    ///@todo this retransmission case is broken since state was reassigned to bit counter
    /// Case where this is a retransmission.  Don't re-encode.
    if (txq.options.ubyte[UPPER] == 0) {
 8002d4a:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <em2_encode_newframe+0x114>)
 8002d4c:	78db      	ldrb	r3, [r3, #3]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <em2_encode_newframe+0x14>
        em2.bytes = em2.state;
 8002d52:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <em2_encode_newframe+0x118>)
 8002d54:	2104      	movs	r1, #4
 8002d56:	5e5a      	ldrsh	r2, [r3, r1]
 8002d58:	805a      	strh	r2, [r3, #2]
#       endif

		/// Save amount of encoded bytes for this frame (last frame) in state
		em2.state = em2.bytes;
    }
}
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
        selector = (rfctl.flags & 5) | ((phymac[0].channel >> 6) & 2);
 8002d5c:	4b41      	ldr	r3, [pc, #260]	; (8002e64 <em2_encode_newframe+0x11c>)
 8002d5e:	785b      	ldrb	r3, [r3, #1]
 8002d60:	b25b      	sxtb	r3, r3
 8002d62:	2405      	movs	r4, #5
 8002d64:	4023      	ands	r3, r4
 8002d66:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <em2_encode_newframe+0x120>)
 8002d68:	7892      	ldrb	r2, [r2, #2]
 8002d6a:	0992      	lsrs	r2, r2, #6
 8002d6c:	3c03      	subs	r4, #3
 8002d6e:	4014      	ands	r4, r2
 8002d70:	431c      	orrs	r4, r3
        txq.options.ubyte[LOWER]= frparams[selector][0];
 8002d72:	0062      	lsls	r2, r4, #1
 8002d74:	1912      	adds	r2, r2, r4
 8002d76:	4b3d      	ldr	r3, [pc, #244]	; (8002e6c <em2_encode_newframe+0x124>)
 8002d78:	189b      	adds	r3, r3, r2
 8002d7a:	2238      	movs	r2, #56	; 0x38
 8002d7c:	5c9d      	ldrb	r5, [r3, r2]
 8002d7e:	4e37      	ldr	r6, [pc, #220]	; (8002e5c <em2_encode_newframe+0x114>)
 8002d80:	70b5      	strb	r5, [r6, #2]
        txq.getcursor           = txq.front + frparams[selector][1];
 8002d82:	3339      	adds	r3, #57	; 0x39
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	68f2      	ldr	r2, [r6, #12]
 8002d88:	4694      	mov	ip, r2
 8002d8a:	4463      	add	r3, ip
 8002d8c:	6073      	str	r3, [r6, #4]
        bytes_to_crc            = q_span(&txq);
 8002d8e:	0030      	movs	r0, r6
 8002d90:	f005 ff63 	bl	8008c5a <q_span>
 8002d94:	b282      	uxth	r2, r0
        txq.front[0]            = bytes_to_crc + frparams[selector][0];
 8002d96:	182b      	adds	r3, r5, r0
 8002d98:	68f1      	ldr	r1, [r6, #12]
 8002d9a:	700b      	strb	r3, [r1, #0]
        txq.front[1]            = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	68f1      	ldr	r1, [r6, #12]
 8002da0:	704b      	strb	r3, [r1, #1]
        txq.putcursor          += (frparams[selector][0] + 1);
 8002da2:	1c6b      	adds	r3, r5, #1
 8002da4:	68b1      	ldr	r1, [r6, #8]
 8002da6:	468c      	mov	ip, r1
 8002da8:	4463      	add	r3, ip
 8002daa:	60b3      	str	r3, [r6, #8]
        em2.bytes               = bytes_to_crc + (frparams[selector][0] + 1);
 8002dac:	18ad      	adds	r5, r5, r2
 8002dae:	3501      	adds	r5, #1
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <em2_encode_newframe+0x118>)
 8002db2:	805d      	strh	r5, [r3, #2]
 8002db4:	2501      	movs	r5, #1
 8002db6:	4025      	ands	r5, r4
        if ((selector & 1) == 0) {
 8002db8:	d01f      	beq.n	8002dfa <em2_encode_newframe+0xb2>
        if (selector == 0) {
 8002dba:	2c00      	cmp	r4, #0
 8002dbc:	d025      	beq.n	8002e0a <em2_encode_newframe+0xc2>
		else if (selector & 2) {
 8002dbe:	07a3      	lsls	r3, r4, #30
 8002dc0:	d516      	bpl.n	8002df0 <em2_encode_newframe+0xa8>
		    if (selector & 1) {
 8002dc2:	2d00      	cmp	r5, #0
 8002dc4:	d024      	beq.n	8002e10 <em2_encode_newframe+0xc8>
		        txq.front[1]= frparams[selector][2];
 8002dc6:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <em2_encode_newframe+0x114>)
 8002dc8:	68d9      	ldr	r1, [r3, #12]
 8002dca:	0062      	lsls	r2, r4, #1
 8002dcc:	1912      	adds	r2, r2, r4
 8002dce:	4b27      	ldr	r3, [pc, #156]	; (8002e6c <em2_encode_newframe+0x124>)
 8002dd0:	189b      	adds	r3, r3, r2
 8002dd2:	333a      	adds	r3, #58	; 0x3a
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	704b      	strb	r3, [r1, #1]
		        em2.bytes   = 16;
 8002dd8:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <em2_encode_newframe+0x118>)
 8002dda:	2210      	movs	r2, #16
 8002ddc:	805a      	strh	r2, [r3, #2]
		    hsc_init(&hsc, frparams[selector][2]);
 8002dde:	0063      	lsls	r3, r4, #1
 8002de0:	191b      	adds	r3, r3, r4
 8002de2:	4c22      	ldr	r4, [pc, #136]	; (8002e6c <em2_encode_newframe+0x124>)
 8002de4:	18e4      	adds	r4, r4, r3
 8002de6:	343a      	adds	r4, #58	; 0x3a
 8002de8:	7821      	ldrb	r1, [r4, #0]
 8002dea:	4821      	ldr	r0, [pc, #132]	; (8002e70 <em2_encode_newframe+0x128>)
 8002dec:	f000 f9f0 	bl	80031d0 <hsc_init>
		em2.state = em2.bytes;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <em2_encode_newframe+0x118>)
 8002df2:	2102      	movs	r1, #2
 8002df4:	5e5a      	ldrsh	r2, [r3, r1]
 8002df6:	809a      	strh	r2, [r3, #4]
}
 8002df8:	e7af      	b.n	8002d5a <em2_encode_newframe+0x12>
            crc_init_stream(&em2.crc, True, bytes_to_crc, txq.getcursor);
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <em2_encode_newframe+0x114>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	0002      	movs	r2, r0
 8002e00:	2101      	movs	r1, #1
 8002e02:	481c      	ldr	r0, [pc, #112]	; (8002e74 <em2_encode_newframe+0x12c>)
 8002e04:	f005 fed2 	bl	8008bac <crc_init_stream>
 8002e08:	e7d7      	b.n	8002dba <em2_encode_newframe+0x72>
            em2_add_crc5();
 8002e0a:	f004 f9bf 	bl	800718c <em2_add_crc5>
 8002e0e:	e7ef      	b.n	8002df0 <em2_encode_newframe+0xa8>
		    else if (selector & 4) {
 8002e10:	2304      	movs	r3, #4
 8002e12:	4223      	tst	r3, r4
 8002e14:	d00c      	beq.n	8002e30 <em2_encode_newframe+0xe8>
		        txq.front[1]= frparams[selector][2];
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <em2_encode_newframe+0x114>)
 8002e18:	68d9      	ldr	r1, [r3, #12]
 8002e1a:	0062      	lsls	r2, r4, #1
 8002e1c:	1912      	adds	r2, r2, r4
 8002e1e:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <em2_encode_newframe+0x124>)
 8002e20:	189b      	adds	r3, r3, r2
 8002e22:	333a      	adds	r3, #58	; 0x3a
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	704b      	strb	r3, [r1, #1]
		        em2.bytes   = 32;
 8002e28:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <em2_encode_newframe+0x118>)
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	805a      	strh	r2, [r3, #2]
 8002e2e:	e7d6      	b.n	8002dde <em2_encode_newframe+0x96>
		        txq.front[1]= RATE64;
 8002e30:	480a      	ldr	r0, [pc, #40]	; (8002e5c <em2_encode_newframe+0x114>)
 8002e32:	2300      	movs	r3, #0
 8002e34:	68c2      	ldr	r2, [r0, #12]
 8002e36:	7053      	strb	r3, [r2, #1]
		        em2.bytes   = 16;
 8002e38:	4d09      	ldr	r5, [pc, #36]	; (8002e60 <em2_encode_newframe+0x118>)
 8002e3a:	3310      	adds	r3, #16
 8002e3c:	806b      	strh	r3, [r5, #2]
		        em2.bytes  += hsc_octetsinframe(txq.front[1], q_span(&txq)-8);
 8002e3e:	68c3      	ldr	r3, [r0, #12]
 8002e40:	785e      	ldrb	r6, [r3, #1]
 8002e42:	f005 ff0a 	bl	8008c5a <q_span>
 8002e46:	0001      	movs	r1, r0
 8002e48:	3908      	subs	r1, #8
 8002e4a:	b2c9      	uxtb	r1, r1
 8002e4c:	0030      	movs	r0, r6
 8002e4e:	f000 f9b1 	bl	80031b4 <hsc_octetsinframe>
 8002e52:	886b      	ldrh	r3, [r5, #2]
 8002e54:	18c0      	adds	r0, r0, r3
 8002e56:	8068      	strh	r0, [r5, #2]
 8002e58:	e7c1      	b.n	8002dde <em2_encode_newframe+0x96>
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	20002df4 	.word	0x20002df4
 8002e60:	20002710 	.word	0x20002710
 8002e64:	2000264c 	.word	0x2000264c
 8002e68:	20002750 	.word	0x20002750
 8002e6c:	0800b990 	.word	0x0800b990
 8002e70:	20002230 	.word	0x20002230
 8002e74:	20002718 	.word	0x20002718

08002e78 <em2_encode_data>:


void em2_encode_data(void) {
 8002e78:	b570      	push	{r4, r5, r6, lr}
/// Only encode if this if not a retransmission
    if (txq.options.ubyte[UPPER] != 0) {
 8002e7a:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <em2_encode_data+0xa8>)
 8002e7c:	78db      	ldrb	r3, [r3, #3]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d035      	beq.n	8002eee <em2_encode_data+0x76>

        /// Do CRC of the long frame (FG/PG) or the short frame (BG)
        if (txq.options.ubyte[LOWER] != 0) {
 8002e82:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <em2_encode_data+0xa8>)
 8002e84:	789b      	ldrb	r3, [r3, #2]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <em2_encode_data+0x28>
            crc_calc_nstream(&em2.crc, em2.crc.count);
 8002e8a:	4826      	ldr	r0, [pc, #152]	; (8002f24 <em2_encode_data+0xac>)
 8002e8c:	8981      	ldrh	r1, [r0, #12]
 8002e8e:	3008      	adds	r0, #8
 8002e90:	f005 fea8 	bl	8008be4 <crc_calc_nstream>
        else {
            bgcrc8_put(txq.getcursor);
        }

#       if (M2_FEATURE(HSCODE))
        if (phymac[0].channel & 0x80) {
 8002e94:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <em2_encode_data+0xb0>)
 8002e96:	789b      	ldrb	r3, [r3, #2]
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	da35      	bge.n	8002f0a <em2_encode_data+0x92>
 8002e9e:	e021      	b.n	8002ee4 <em2_encode_data+0x6c>
            bgcrc8_put(txq.getcursor);
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <em2_encode_data+0xa8>)
 8002ea2:	6858      	ldr	r0, [r3, #4]
 8002ea4:	f003 f9c7 	bl	8006236 <bgcrc8_put>
 8002ea8:	e7f4      	b.n	8002e94 <em2_encode_data+0x1c>
            while (em2.bytes > 0) {
                hsc_encode(&hsc, hsc_iobuf, q_markbyte(&txq, hsc.infobytes));
 8002eaa:	4c20      	ldr	r4, [pc, #128]	; (8002f2c <em2_encode_data+0xb4>)
 8002eac:	2306      	movs	r3, #6
 8002eae:	5ee1      	ldrsh	r1, [r4, r3]
 8002eb0:	4e1b      	ldr	r6, [pc, #108]	; (8002f20 <em2_encode_data+0xa8>)
 8002eb2:	0030      	movs	r0, r6
 8002eb4:	f005 feff 	bl	8008cb6 <q_markbyte>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	4d1d      	ldr	r5, [pc, #116]	; (8002f30 <em2_encode_data+0xb8>)
 8002ebc:	0029      	movs	r1, r5
 8002ebe:	0020      	movs	r0, r4
 8002ec0:	f000 f9a2 	bl	8003208 <hsc_encode>
                hsc_init(&hsc, txq.front[1]&7);
 8002ec4:	68f3      	ldr	r3, [r6, #12]
 8002ec6:	785b      	ldrb	r3, [r3, #1]
 8002ec8:	2107      	movs	r1, #7
 8002eca:	4019      	ands	r1, r3
 8002ecc:	0020      	movs	r0, r4
 8002ece:	f000 f97f 	bl	80031d0 <hsc_init>
                sx127x_burstwrite(RFREG_LR_FIFO, 16, hsc_iobuf);
 8002ed2:	002a      	movs	r2, r5
 8002ed4:	2110      	movs	r1, #16
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7ff f9d6 	bl	8002288 <sx127x_burstwrite>
                em2.bytes -= 16;
 8002edc:	4a11      	ldr	r2, [pc, #68]	; (8002f24 <em2_encode_data+0xac>)
 8002ede:	8853      	ldrh	r3, [r2, #2]
 8002ee0:	3b10      	subs	r3, #16
 8002ee2:	8053      	strh	r3, [r2, #2]
            while (em2.bytes > 0) {
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <em2_encode_data+0xac>)
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	5e9b      	ldrsh	r3, [r3, r2]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	dcdd      	bgt.n	8002eaa <em2_encode_data+0x32>
                em2.bytes  -= fill;
                sx127x_burstwrite(RFREG_LR_FIFO, fill, q_markbyte(&txq, fill));
            }
        }
    }
}
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
                ot_int fill = (em2.bytes > 32) ? 32 : em2.bytes;
 8002ef0:	b214      	sxth	r4, r2
                em2.bytes  -= fill;
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	4a0b      	ldr	r2, [pc, #44]	; (8002f24 <em2_encode_data+0xac>)
 8002ef6:	8053      	strh	r3, [r2, #2]
                sx127x_burstwrite(RFREG_LR_FIFO, fill, q_markbyte(&txq, fill));
 8002ef8:	0021      	movs	r1, r4
 8002efa:	4809      	ldr	r0, [pc, #36]	; (8002f20 <em2_encode_data+0xa8>)
 8002efc:	f005 fedb 	bl	8008cb6 <q_markbyte>
 8002f00:	0002      	movs	r2, r0
 8002f02:	b2e1      	uxtb	r1, r4
 8002f04:	2000      	movs	r0, #0
 8002f06:	f7ff f9bf 	bl	8002288 <sx127x_burstwrite>
            while (em2.bytes > 0) {
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <em2_encode_data+0xac>)
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	ddec      	ble.n	8002eee <em2_encode_data+0x76>
                ot_int fill = (em2.bytes > 32) ? 32 : em2.bytes;
 8002f14:	1c1a      	adds	r2, r3, #0
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	ddea      	ble.n	8002ef0 <em2_encode_data+0x78>
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	e7e8      	b.n	8002ef0 <em2_encode_data+0x78>
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	20002df4 	.word	0x20002df4
 8002f24:	20002710 	.word	0x20002710
 8002f28:	20002750 	.word	0x20002750
 8002f2c:	20002230 	.word	0x20002230
 8002f30:	200002ec 	.word	0x200002ec

08002f34 <em2_decode_newpacket>:


void em2_decode_newpacket() {
/// Lora cannot support multiframe packets, so there is no difference between
/// packet and frame
}
 8002f34:	4770      	bx	lr
	...

08002f38 <em2_decode_newframe>:

void em2_decode_newframe() {
 8002f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3a:	b083      	sub	sp, #12
            5, // b101 : PG/BG (impossible)
            17, // b110 : PG, encoded
            17  // b111 : PG/BG encoded (impossible)
    };
    uint8_t selector;
    lorasf_t chansf = (phymac[0].channel >> 4) & 3;
 8002f3c:	4e2a      	ldr	r6, [pc, #168]	; (8002fe8 <em2_decode_newframe+0xb0>)
 8002f3e:	78b2      	ldrb	r2, [r6, #2]
 8002f40:	0912      	lsrs	r2, r2, #4
 8002f42:	2503      	movs	r5, #3
 8002f44:	4015      	ands	r5, r2
#   ifdef __DECODER_DEBUG__
    hits_sv = 0;
#   endif

    /// 1. Prepare the RX Queue to receive a new frame.
    q_empty(&rxq);
 8002f46:	4829      	ldr	r0, [pc, #164]	; (8002fec <em2_decode_newframe+0xb4>)
 8002f48:	f005 fea4 	bl	8008c94 <q_empty>

    /// The selector value is
    selector = (rfctl.flags & 5) | ((phymac[0].channel >> 6) & 2);
 8002f4c:	4b28      	ldr	r3, [pc, #160]	; (8002ff0 <em2_decode_newframe+0xb8>)
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	b25b      	sxtb	r3, r3
 8002f52:	2405      	movs	r4, #5
 8002f54:	401c      	ands	r4, r3
 8002f56:	78b3      	ldrb	r3, [r6, #2]
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	431c      	orrs	r4, r3
    /// provide seed information for the LLR interpolator.  Also, we need to provide
    /// default decoding setup -- lower 3 bits of front[1] are used for variable
    /// rate information.  The first frame is always RATE64, unless it's a BG frame
    /// in which case it's RATE48.
#   if (M2_FEATURE(HSCODE))
    if (selector & 2) {
 8002f60:	4222      	tst	r2, r4
 8002f62:	d125      	bne.n	8002fb0 <em2_decode_newframe+0x78>
    	rxq.front[1] = rate; // initial encoding rate
    }
    else
#   endif
    {
        rxq.front[1] = 0;
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <em2_decode_newframe+0xb4>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	705a      	strb	r2, [r3, #1]
    }

    rxq.front[0]    = initial_bytes[selector];
 8002f6c:	4b1f      	ldr	r3, [pc, #124]	; (8002fec <em2_decode_newframe+0xb4>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4a20      	ldr	r2, [pc, #128]	; (8002ff4 <em2_decode_newframe+0xbc>)
 8002f72:	1910      	adds	r0, r2, r4
 8002f74:	2150      	movs	r1, #80	; 0x50
 8002f76:	5c41      	ldrb	r1, [r0, r1]
 8002f78:	7019      	strb	r1, [r3, #0]
    em2.bytes       = 0;
 8002f7a:	4b1f      	ldr	r3, [pc, #124]	; (8002ff8 <em2_decode_newframe+0xc0>)
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	8059      	strh	r1, [r3, #2]
    em2.state       = 0;
 8002f80:	8099      	strh	r1, [r3, #4]
    em2.lctl        = bits_per_lorablock[chansf];
 8002f82:	1952      	adds	r2, r2, r5
 8002f84:	3158      	adds	r1, #88	; 0x58
 8002f86:	5c52      	ldrb	r2, [r2, r1]
 8002f88:	701a      	strb	r2, [r3, #0]
    em2.crc5        = 0;
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	705a      	strb	r2, [r3, #1]

    /// BG and PG frames are fixed-length, and they are shoehorned into the
    /// generic header structure via a special operation, here.
    if (selector & (RADIO_FLAG_BG | RADIO_FLAG_PG)) {
 8002f8e:	2305      	movs	r3, #5
 8002f90:	4223      	tst	r3, r4
 8002f92:	d00b      	beq.n	8002fac <em2_decode_newframe+0x74>
        rxq.front[1]       |= 0x20;
 8002f94:	4b15      	ldr	r3, [pc, #84]	; (8002fec <em2_decode_newframe+0xb4>)
 8002f96:	68d9      	ldr	r1, [r3, #12]
 8002f98:	784a      	ldrb	r2, [r1, #1]
 8002f9a:	2020      	movs	r0, #32
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	704a      	strb	r2, [r1, #1]
        rxq.options.ushort  = 2;
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	805a      	strh	r2, [r3, #2]
        rxq.putcursor       = &rxq.front[2];
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	3202      	adds	r2, #2
 8002fa8:	609a      	str	r2, [r3, #8]
        rxq.getcursor       = &rxq.front[2];
 8002faa:	605a      	str	r2, [r3, #4]
    }
}
 8002fac:	b003      	add	sp, #12
 8002fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ot_u8 rssi_nb   = sx127x_read(RFREG_LR_RSSIVALUE);
 8002fb0:	201b      	movs	r0, #27
 8002fb2:	f7ff f8d5 	bl	8002160 <sx127x_read>
 8002fb6:	0007      	movs	r7, r0
        ot_u8 rssi_wb   = sx127x_read(RFREG_LR_RSSIWIDEBAND);
 8002fb8:	202c      	movs	r0, #44	; 0x2c
 8002fba:	f7ff f8d1 	bl	8002160 <sx127x_read>
    	hscrate_t rate  = (selector & RADIO_FLAG_BG) ? RATE48 : RATE64;
 8002fbe:	07e3      	lsls	r3, r4, #31
 8002fc0:	d50f      	bpl.n	8002fe2 <em2_decode_newframe+0xaa>
 8002fc2:	2606      	movs	r6, #6
    	lorallr_init(&lorallr, rate, chansf, rssi_nb, rssi_wb);
 8002fc4:	9000      	str	r0, [sp, #0]
 8002fc6:	003b      	movs	r3, r7
 8002fc8:	002a      	movs	r2, r5
 8002fca:	0031      	movs	r1, r6
 8002fcc:	480b      	ldr	r0, [pc, #44]	; (8002ffc <em2_decode_newframe+0xc4>)
 8002fce:	f002 fa61 	bl	8005494 <lorallr_init>
    	hsc_init(&hsc, rate);
 8002fd2:	0031      	movs	r1, r6
 8002fd4:	480a      	ldr	r0, [pc, #40]	; (8003000 <em2_decode_newframe+0xc8>)
 8002fd6:	f000 f8fb 	bl	80031d0 <hsc_init>
    	rxq.front[1] = rate; // initial encoding rate
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <em2_decode_newframe+0xb4>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	705e      	strb	r6, [r3, #1]
 8002fe0:	e7c4      	b.n	8002f6c <em2_decode_newframe+0x34>
    	hscrate_t rate  = (selector & RADIO_FLAG_BG) ? RATE48 : RATE64;
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	e7ee      	b.n	8002fc4 <em2_decode_newframe+0x8c>
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	20002750 	.word	0x20002750
 8002fec:	20002de0 	.word	0x20002de0
 8002ff0:	2000264c 	.word	0x2000264c
 8002ff4:	0800b990 	.word	0x0800b990
 8002ff8:	20002710 	.word	0x20002710
 8002ffc:	20002238 	.word	0x20002238
 8003000:	20002230 	.word	0x20002230

08003004 <em2_decode_data>:




void em2_decode_data(void) {
 8003004:	b570      	push	{r4, r5, r6, lr}
    int newbytes;
    int grab;
    ot_u8* data;

    /// Live encoder needs to track the predicted bit position over the air
    em2.state += em2.lctl;
 8003006:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <em2_decode_data+0x100>)
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	8899      	ldrh	r1, [r3, #4]
 800300c:	1852      	adds	r2, r2, r1
 800300e:	809a      	strh	r2, [r3, #4]

    /// 1. When using HSCODE FEC, we need to take the RSSI and SNR values and log them.
    ///    It's important to do this as close to the time of reception as possible.
#	if (M2_FEATURE(HSCODE))
    if (phymac[0].channel & 0x80) {
 8003010:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <em2_decode_data+0x104>)
 8003012:	789b      	ldrb	r3, [r3, #2]
 8003014:	b25b      	sxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	db12      	blt.n	8003040 <em2_decode_data+0x3c>
#   endif

    /// 2. Just download whatever fresh data is in the LoRa radio and put it
    ///    on the rx queue.  After data is on the rx queue, it will be reprocessed
    ///    if it needs to be.  The implementation here has a 32 byte SPI buffer.
    rxbytes     = sx127x_read(RFREG_LR_FIFORXBYTEADDR);
 800301a:	2025      	movs	r0, #37	; 0x25
 800301c:	f7ff f8a0 	bl	8002160 <sx127x_read>
 8003020:	0004      	movs	r4, r0
    rxptr       = sx127x_read(RFREG_LR_FIFOADDRPTR);
 8003022:	200d      	movs	r0, #13
 8003024:	f7ff f89c 	bl	8002160 <sx127x_read>
    newbytes    = (int)rxbytes - (int)rxptr;
 8003028:	1a24      	subs	r4, r4, r0
    tim_sv[hits_sv] = LPTIM1->CNT;
    bits_sv[hits_sv] = em2.state;
    hits_sv++;
#   endif

    if (newbytes <= 0) {
 800302a:	2c00      	cmp	r4, #0
 800302c:	dd40      	ble.n	80030b0 <em2_decode_data+0xac>
    }

    // rxbyte-addr is at the last loaded byte, not ahead of the last loaded byte,
    // so need to increment newbytes.
    //newbytes++;
    data = rxq.front + rxq.options.ushort + em2.bytes;
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <em2_decode_data+0x108>)
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	885b      	ldrh	r3, [r3, #2]
 8003034:	4933      	ldr	r1, [pc, #204]	; (8003104 <em2_decode_data+0x100>)
 8003036:	2002      	movs	r0, #2
 8003038:	5e09      	ldrsh	r1, [r1, r0]
 800303a:	185b      	adds	r3, r3, r1
 800303c:	18d2      	adds	r2, r2, r3
	while (newbytes > 0) {
 800303e:	e019      	b.n	8003074 <em2_decode_data+0x70>
        ot_u8 rssi_wb  = sx127x_read(RFREG_LR_RSSIWIDEBAND);
 8003040:	202c      	movs	r0, #44	; 0x2c
 8003042:	f7ff f88d 	bl	8002160 <sx127x_read>
 8003046:	0004      	movs	r4, r0
        ot_u8 rssi_nb  = sx127x_read(RFREG_LR_RSSIVALUE);
 8003048:	201b      	movs	r0, #27
 800304a:	f7ff f889 	bl	8002160 <sx127x_read>
 800304e:	0001      	movs	r1, r0
        lorallr_pushsample(&lorallr, rssi_nb, rssi_wb, em2.lctl);
 8003050:	4b2c      	ldr	r3, [pc, #176]	; (8003104 <em2_decode_data+0x100>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	0022      	movs	r2, r4
 8003056:	482e      	ldr	r0, [pc, #184]	; (8003110 <em2_decode_data+0x10c>)
 8003058:	f002 fa52 	bl	8005500 <lorallr_pushsample>
 800305c:	e7dd      	b.n	800301a <em2_decode_data+0x16>
	    ot_u8* loadptr;
		grab        = (newbytes > 32) ? 32 : newbytes;
		newbytes   -= grab;
 800305e:	1a64      	subs	r4, r4, r1
		em2.bytes  += grab;
 8003060:	4828      	ldr	r0, [pc, #160]	; (8003104 <em2_decode_data+0x100>)
 8003062:	8843      	ldrh	r3, [r0, #2]
 8003064:	185b      	adds	r3, r3, r1
 8003066:	8043      	strh	r3, [r0, #2]
		loadptr     = data;
		data       += grab;
 8003068:	1855      	adds	r5, r2, r1
		sx127x_burstread(RFREG_LR_FIFO, grab, loadptr);
 800306a:	b2c9      	uxtb	r1, r1
 800306c:	2000      	movs	r0, #0
 800306e:	f7ff f88f 	bl	8002190 <sx127x_burstread>
		data       += grab;
 8003072:	002a      	movs	r2, r5
	while (newbytes > 0) {
 8003074:	2c00      	cmp	r4, #0
 8003076:	dd04      	ble.n	8003082 <em2_decode_data+0x7e>
		grab        = (newbytes > 32) ? 32 : newbytes;
 8003078:	0021      	movs	r1, r4
 800307a:	2c20      	cmp	r4, #32
 800307c:	ddef      	ble.n	800305e <em2_decode_data+0x5a>
 800307e:	2120      	movs	r1, #32
 8003080:	e7ed      	b.n	800305e <em2_decode_data+0x5a>
    /// 3. Raw data is in the queue.  If frame is unencoded, nothing more to do.
    ///    Encoded frames, on the other hand, require a substantial amount of
    ///    processing.  Decoding is block-based and occurs when a block is
    ///    available in the queue.  Blocks are 16 bytes.
#   if (M2_FEATURE(HSCODE))
	if (phymac[0].channel & 0x80) {
 8003082:	4b21      	ldr	r3, [pc, #132]	; (8003108 <em2_decode_data+0x104>)
 8003084:	789b      	ldrb	r3, [r3, #2]
 8003086:	b25b      	sxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	db12      	blt.n	80030b2 <em2_decode_data+0xae>
		}
	}
	else
#   endif
	{
	    rxq.putcursor   = rxq.getcursor + em2.bytes;
 800308c:	491f      	ldr	r1, [pc, #124]	; (800310c <em2_decode_data+0x108>)
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <em2_decode_data+0x100>)
 8003090:	2202      	movs	r2, #2
 8003092:	5e9a      	ldrsh	r2, [r3, r2]
 8003094:	684b      	ldr	r3, [r1, #4]
 8003096:	189b      	adds	r3, r3, r2
 8003098:	608b      	str	r3, [r1, #8]
	    em2.crc5       += (em2.bytes >= 2);
 800309a:	2301      	movs	r3, #1
 800309c:	2a01      	cmp	r2, #1
 800309e:	dd26      	ble.n	80030ee <em2_decode_data+0xea>
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	4a18      	ldr	r2, [pc, #96]	; (8003104 <em2_decode_data+0x100>)
 80030a4:	7851      	ldrb	r1, [r2, #1]
 80030a6:	185b      	adds	r3, r3, r1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	7053      	strb	r3, [r2, #1]
	    if (em2.crc5 == 1) {
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d020      	beq.n	80030f2 <em2_decode_data+0xee>
	        if (em2_check_crc5() != 0) {
	            em2.state = -1;
	        }
	    }
	}
}
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
		blcursor    = rxq.getcursor - (rxq.front + rxq.options.ushort);
 80030b2:	4916      	ldr	r1, [pc, #88]	; (800310c <em2_decode_data+0x108>)
 80030b4:	684b      	ldr	r3, [r1, #4]
 80030b6:	68ca      	ldr	r2, [r1, #12]
 80030b8:	8849      	ldrh	r1, [r1, #2]
 80030ba:	1852      	adds	r2, r2, r1
 80030bc:	1a9a      	subs	r2, r3, r2
 80030be:	b212      	sxth	r2, r2
		em2.crc5   += (em2.bytes >= 16);
 80030c0:	4b10      	ldr	r3, [pc, #64]	; (8003104 <em2_decode_data+0x100>)
 80030c2:	2102      	movs	r1, #2
 80030c4:	5e59      	ldrsh	r1, [r3, r1]
 80030c6:	2301      	movs	r3, #1
 80030c8:	290f      	cmp	r1, #15
 80030ca:	dc00      	bgt.n	80030ce <em2_decode_data+0xca>
 80030cc:	2300      	movs	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	480c      	ldr	r0, [pc, #48]	; (8003104 <em2_decode_data+0x100>)
 80030d2:	7844      	ldrb	r4, [r0, #1]
 80030d4:	191b      	adds	r3, r3, r4
 80030d6:	7043      	strb	r3, [r0, #1]
		if ((em2.bytes-blcursor) >= 16) {
 80030d8:	1a8a      	subs	r2, r1, r2
 80030da:	2a0f      	cmp	r2, #15
 80030dc:	dde8      	ble.n	80030b0 <em2_decode_data+0xac>
		    sys.task_RFA.event = 6;
 80030de:	480d      	ldr	r0, [pc, #52]	; (8003114 <em2_decode_data+0x110>)
 80030e0:	2306      	movs	r3, #6
 80030e2:	7103      	strb	r3, [r0, #4]
		    sys_preempt(&sys.task_RFA, 0);
 80030e4:	3004      	adds	r0, #4
 80030e6:	2100      	movs	r1, #0
 80030e8:	f006 faae 	bl	8009648 <sys_preempt>
 80030ec:	e7e0      	b.n	80030b0 <em2_decode_data+0xac>
	    em2.crc5       += (em2.bytes >= 2);
 80030ee:	2300      	movs	r3, #0
 80030f0:	e7d6      	b.n	80030a0 <em2_decode_data+0x9c>
	        if (em2_check_crc5() != 0) {
 80030f2:	f004 f85d 	bl	80071b0 <em2_check_crc5>
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d0da      	beq.n	80030b0 <em2_decode_data+0xac>
	            em2.state = -1;
 80030fa:	4b02      	ldr	r3, [pc, #8]	; (8003104 <em2_decode_data+0x100>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	4252      	negs	r2, r2
 8003100:	809a      	strh	r2, [r3, #4]
 8003102:	e7d5      	b.n	80030b0 <em2_decode_data+0xac>
 8003104:	20002710 	.word	0x20002710
 8003108:	20002750 	.word	0x20002750
 800310c:	20002de0 	.word	0x20002de0
 8003110:	20002238 	.word	0x20002238
 8003114:	20002e1c 	.word	0x20002e1c

08003118 <em2_decode_endframe>:
//    0xCC, 0xA0, 0x2E, 0x42, 0x65, 0x9F, 0xDD, 0xD7, 0x27, 0xDD, 0x9F, 0x95, 0x17, 0xB7, 0x5F, 0xFF
//};
//static ot_u8 rawdata_sv[32];
//#endif

ot_u16 em2_decode_endframe() {
 8003118:	b510      	push	{r4, lr}
/// Perform block-code error correction if available, strip blockcoding if its
/// there (after processing), and strip CRC
    ot_u16 crc_invalid;

    /// Decoder state errors (state < 1)
    if (em2.state < 1) {
 800311a:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <em2_decode_endframe+0x7c>)
 800311c:	2204      	movs	r2, #4
 800311e:	5e9b      	ldrsh	r3, [r3, r2]
 8003120:	2b00      	cmp	r3, #0
 8003122:	dd35      	ble.n	8003190 <em2_decode_endframe+0x78>
        crc_invalid = 1;
    }
    else {
        /// In FEC mode, need to clean-up rxq after successful packet received
#       if (M2_FEATURE(HSCODE))
        if (phymac[0].channel & 0x80) {
 8003124:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <em2_decode_endframe+0x80>)
 8003126:	789b      	ldrb	r3, [r3, #2]
 8003128:	b25b      	sxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	db14      	blt.n	8003158 <em2_decode_endframe+0x40>
#       endif
        {
        }

        /// BG Frame has CRC8
        if (rfctl.flags & RADIO_FLAG_BG) {
 800312e:	4b1b      	ldr	r3, [pc, #108]	; (800319c <em2_decode_endframe+0x84>)
 8003130:	785b      	ldrb	r3, [r3, #1]
 8003132:	07db      	lsls	r3, r3, #31
 8003134:	d51a      	bpl.n	800316c <em2_decode_endframe+0x54>
            crc_invalid = bgcrc8_check(rxq.getcursor);
 8003136:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <em2_decode_endframe+0x88>)
 8003138:	6858      	ldr	r0, [r3, #4]
 800313a:	f003 f875 	bl	8006228 <bgcrc8_check>
 800313e:	b280      	uxth	r0, r0
            /// PG, FG frames have CRC16
            crc_invalid     = crc_block(&em2.crc, False, q_span(&rxq), rxq.getcursor);
            rxq.front[0]   -= 2;
            rxq.putcursor  -= 2;
        }
        rxq.back = rxq.putcursor;
 8003140:	4b17      	ldr	r3, [pc, #92]	; (80031a0 <em2_decode_endframe+0x88>)
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	611a      	str	r2, [r3, #16]

        ///@note marker that shows packet is successfully read into driver.
        rxq.front[1] |= 0x20;
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	7853      	ldrb	r3, [r2, #1]
 800314a:	2120      	movs	r1, #32
 800314c:	430b      	orrs	r3, r1
 800314e:	7053      	strb	r3, [r2, #1]
//        errs   += ((diffbits & 0x01) != 0);
//        loralink.max_ebn0 += errs;
//    }
//#   endif

    rxq.options.ushort = 0;
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <em2_decode_endframe+0x88>)
 8003152:	2200      	movs	r2, #0
 8003154:	805a      	strh	r2, [r3, #2]
    return crc_invalid;
}
 8003156:	bd10      	pop	{r4, pc}
            rxq.getcursor   = rxq.front + rxq.options.ushort;
 8003158:	4a11      	ldr	r2, [pc, #68]	; (80031a0 <em2_decode_endframe+0x88>)
 800315a:	68d3      	ldr	r3, [r2, #12]
 800315c:	8851      	ldrh	r1, [r2, #2]
 800315e:	1859      	adds	r1, r3, r1
 8003160:	6051      	str	r1, [r2, #4]
            rxq.putcursor   = rxq.front + rxq.front[0] + 1;
 8003162:	7819      	ldrb	r1, [r3, #0]
 8003164:	3101      	adds	r1, #1
 8003166:	185b      	adds	r3, r3, r1
 8003168:	6093      	str	r3, [r2, #8]
 800316a:	e7e0      	b.n	800312e <em2_decode_endframe+0x16>
            crc_invalid     = crc_block(&em2.crc, False, q_span(&rxq), rxq.getcursor);
 800316c:	4c0c      	ldr	r4, [pc, #48]	; (80031a0 <em2_decode_endframe+0x88>)
 800316e:	0020      	movs	r0, r4
 8003170:	f005 fd73 	bl	8008c5a <q_span>
 8003174:	0002      	movs	r2, r0
 8003176:	6863      	ldr	r3, [r4, #4]
 8003178:	2100      	movs	r1, #0
 800317a:	480a      	ldr	r0, [pc, #40]	; (80031a4 <em2_decode_endframe+0x8c>)
 800317c:	f005 fd5a 	bl	8008c34 <crc_block>
            rxq.front[0]   -= 2;
 8003180:	68e2      	ldr	r2, [r4, #12]
 8003182:	7813      	ldrb	r3, [r2, #0]
 8003184:	3b02      	subs	r3, #2
 8003186:	7013      	strb	r3, [r2, #0]
            rxq.putcursor  -= 2;
 8003188:	68a3      	ldr	r3, [r4, #8]
 800318a:	3b02      	subs	r3, #2
 800318c:	60a3      	str	r3, [r4, #8]
 800318e:	e7d7      	b.n	8003140 <em2_decode_endframe+0x28>
        crc_invalid = 1;
 8003190:	2001      	movs	r0, #1
 8003192:	e7dd      	b.n	8003150 <em2_decode_endframe+0x38>
 8003194:	20002710 	.word	0x20002710
 8003198:	20002750 	.word	0x20002750
 800319c:	2000264c 	.word	0x2000264c
 80031a0:	20002de0 	.word	0x20002de0
 80031a4:	20002718 	.word	0x20002718

080031a8 <hsc_bytesperblock>:

uint8_t hsc_bytesperblock(hscrate_t rate) {
	static const uint8_t infobits_select[8] = {
	        8, 9, 10, 11, 12, 13, 6, 6
	};
	return infobits_select[rate];
 80031a8:	4b01      	ldr	r3, [pc, #4]	; (80031b0 <hsc_bytesperblock+0x8>)
 80031aa:	5c18      	ldrb	r0, [r3, r0]
}
 80031ac:	4770      	bx	lr
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	0800ba94 	.word	0x0800ba94

080031b4 <hsc_octetsinframe>:
	return infobits_select[rate];
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <hsc_octetsinframe+0x18>)

uint16_t hsc_octetsinframe(hscrate_t rate, uint8_t databytes) {
 80031b6:	b510      	push	{r4, lr}
	uint16_t foctets;
	uint16_t block;

	block	= (uint16_t)hsc_bytesperblock(rate);
	foctets = ((uint16_t)databytes + (block-1)) / block;
 80031b8:	5c1b      	ldrb	r3, [r3, r0]
 80031ba:	1e58      	subs	r0, r3, #1
 80031bc:	1840      	adds	r0, r0, r1
 80031be:	0019      	movs	r1, r3
 80031c0:	f7fd f82c 	bl	800021c <__divsi3>

	return (foctets << 4);
 80031c4:	0100      	lsls	r0, r0, #4
 80031c6:	b280      	uxth	r0, r0
}
 80031c8:	bd10      	pop	{r4, pc}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	0800ba94 	.word	0x0800ba94

080031d0 <hsc_init>:



void hsc_init(hsc_t* h, hscrate_t rate) {
 80031d0:	b510      	push	{r4, lr}
    static const uint8_t* const fbit_select[8] = {
        fbit64, fbit72, fbit80, fbit88, fbit96, fbit104, fbit48, fbit48
    };

    assert(h);
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d009      	beq.n	80031ea <hsc_init+0x1a>
    
    h->fbit        = fbit_select[rate];
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <hsc_init+0x2c>)
 80031d8:	008a      	lsls	r2, r1, #2
 80031da:	189a      	adds	r2, r3, r2
    h->infobytes   = hsc_bytesperblock(rate);
 80031dc:	5c5b      	ldrb	r3, [r3, r1]
    h->fbit        = fbit_select[rate];
 80031de:	6951      	ldr	r1, [r2, #20]
    h->infobits    = h->infobytes << 3;
 80031e0:	00da      	lsls	r2, r3, #3
    h->fbit        = fbit_select[rate];
 80031e2:	6001      	str	r1, [r0, #0]
    h->infobytes   = hsc_bytesperblock(rate);
 80031e4:	80c3      	strh	r3, [r0, #6]
    h->infobits    = h->infobytes << 3;
 80031e6:	8082      	strh	r2, [r0, #4]
}
 80031e8:	bd10      	pop	{r4, pc}
    assert(h);
 80031ea:	218c      	movs	r1, #140	; 0x8c
 80031ec:	4a03      	ldr	r2, [pc, #12]	; (80031fc <hsc_init+0x2c>)
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <hsc_init+0x30>)
 80031f0:	4804      	ldr	r0, [pc, #16]	; (8003204 <hsc_init+0x34>)
 80031f2:	3208      	adds	r2, #8
 80031f4:	0089      	lsls	r1, r1, #2
 80031f6:	f007 f90f 	bl	800a418 <__assert_func>
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	0800ba94 	.word	0x0800ba94
 8003200:	0800c8a4 	.word	0x0800c8a4
 8003204:	0800c8a8 	.word	0x0800c8a8

08003208 <hsc_encode>:
}




void hsc_encode(hsc_t* h, void* output, const uint8_t* input) {
 8003208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320a:	46de      	mov	lr, fp
 800320c:	464e      	mov	r6, r9
 800320e:	4645      	mov	r5, r8
 8003210:	4657      	mov	r7, sl
 8003212:	b5e0      	push	{r5, r6, r7, lr}
 8003214:	b087      	sub	sp, #28
 8003216:	000c      	movs	r4, r1
 8003218:	0006      	movs	r6, r0
 800321a:	0015      	movs	r5, r2
    int i;
    int j;
    uint8_t x[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 800321c:	2100      	movs	r1, #0
 800321e:	2210      	movs	r2, #16
 8003220:	a802      	add	r0, sp, #8
 8003222:	f007 f927 	bl	800a474 <memset>
    uint8_t* y;
    
    /// Zero output, and copy input to output
    ((uint32_t*)output)[0]  = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	6023      	str	r3, [r4, #0]
    ((uint32_t*)output)[1]  = 0;
 800322a:	6063      	str	r3, [r4, #4]
    ((uint32_t*)output)[2]  = 0;
 800322c:	60a3      	str	r3, [r4, #8]
    ((uint32_t*)output)[3]  = 0;
 800322e:	60e3      	str	r3, [r4, #12]
    memcpy(output, input, h->infobytes);
 8003230:	0020      	movs	r0, r4
 8003232:	88f2      	ldrh	r2, [r6, #6]
 8003234:	0029      	movs	r1, r5
 8003236:	f007 f871 	bl	800a31c <ot_memcpy>
    
    /// "y" variable is linked to output and only relevant for typing purposes.
    /// Copy input to the output, and add CRC
    y               = output;
    y[h->infobytes] = crccalc(y, h->infobytes);
 800323a:	88f3      	ldrh	r3, [r6, #6]
 800323c:	18e0      	adds	r0, r4, r3
    while (--len >= 0) {
 800323e:	2b00      	cmp	r3, #0
 8003240:	d100      	bne.n	8003244 <hsc_encode+0x3c>
 8003242:	e0d9      	b.n	80033f8 <hsc_encode+0x1f0>
 8003244:	0021      	movs	r1, r4
    uint8_t reg = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	4d6c      	ldr	r5, [pc, #432]	; (80033fc <hsc_encode+0x1f4>)
        reg = CRCTABLE[reg ^ *block++];
 800324a:	780a      	ldrb	r2, [r1, #0]
 800324c:	3101      	adds	r1, #1
 800324e:	4053      	eors	r3, r2
 8003250:	5ceb      	ldrb	r3, [r5, r3]
    while (--len >= 0) {
 8003252:	4288      	cmp	r0, r1
 8003254:	d1f9      	bne.n	800324a <hsc_encode+0x42>
    y[h->infobytes] = crccalc(y, h->infobytes);
 8003256:	7003      	strb	r3, [r0, #0]
    /// Polarization Stage 1: rate dependent
    ///@todo there is a bit relocation instruction on cortex M4 that can be used
    ///      to optimize this loop.  Basically, relocate a bit from y[i>>3] to
    ///      position from rseqbyte[i][1] in x[rseqbyte[i][0]]
    for (i=0; i<h->infobits+CRCBITS; i++) {
        uint8_t a = (y[i>>3] >> (7-(i&7))) & 1;
 8003258:	2207      	movs	r2, #7
    for (i=0; i<h->infobits+CRCBITS; i++) {
 800325a:	2300      	movs	r3, #0
 800325c:	88b6      	ldrh	r6, [r6, #4]
 800325e:	4868      	ldr	r0, [pc, #416]	; (8003400 <hsc_encode+0x1f8>)
 8003260:	3606      	adds	r6, #6
 8003262:	250f      	movs	r5, #15
 8003264:	2100      	movs	r1, #0
        uint8_t a = (y[i>>3] >> (7-(i&7))) & 1;
 8003266:	4694      	mov	ip, r2
 8003268:	2701      	movs	r7, #1
 800326a:	4698      	mov	r8, r3
 800326c:	e003      	b.n	8003276 <hsc_encode+0x6e>
 800326e:	7845      	ldrb	r5, [r0, #1]
 8003270:	3002      	adds	r0, #2
 8003272:	5d53      	ldrb	r3, [r2, r5]
 8003274:	4698      	mov	r8, r3
 8003276:	4662      	mov	r2, ip
 8003278:	10cb      	asrs	r3, r1, #3
 800327a:	5ce3      	ldrb	r3, [r4, r3]
 800327c:	438a      	bics	r2, r1
 800327e:	4113      	asrs	r3, r2
        x[rseqbyte[i][0]] |= a << rseqbyte[i][1];
 8003280:	7802      	ldrb	r2, [r0, #0]
 8003282:	403b      	ands	r3, r7
 8003284:	4093      	lsls	r3, r2
 8003286:	4642      	mov	r2, r8
    for (i=0; i<h->infobits+CRCBITS; i++) {
 8003288:	3101      	adds	r1, #1
        x[rseqbyte[i][0]] |= a << rseqbyte[i][1];
 800328a:	4313      	orrs	r3, r2
 800328c:	aa02      	add	r2, sp, #8
 800328e:	5553      	strb	r3, [r2, r5]
    for (i=0; i<h->infobits+CRCBITS; i++) {
 8003290:	42b1      	cmp	r1, r6
 8003292:	ddec      	ble.n	800326e <hsc_encode+0x66>
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8003294:	2301      	movs	r3, #1
 8003296:	469a      	mov	sl, r3
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8003298:	333f      	adds	r3, #63	; 0x3f
 800329a:	4699      	mov	r9, r3
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 800329c:	3b20      	subs	r3, #32
 800329e:	4698      	mov	r8, r3
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 80032a0:	9b05      	ldr	r3, [sp, #20]
 80032a2:	9e02      	ldr	r6, [sp, #8]
 80032a4:	469c      	mov	ip, r3
 80032a6:	4d57      	ldr	r5, [pc, #348]	; (8003404 <hsc_encode+0x1fc>)
 80032a8:	0073      	lsls	r3, r6, #1
 80032aa:	402b      	ands	r3, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 80032ac:	4f56      	ldr	r7, [pc, #344]	; (8003408 <hsc_encode+0x200>)
        ((uint32_t*)x)[i] ^= a;
 80032ae:	405e      	eors	r6, r3
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 80032b0:	00b3      	lsls	r3, r6, #2
 80032b2:	403b      	ands	r3, r7
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 80032b4:	9803      	ldr	r0, [sp, #12]
 80032b6:	0021      	movs	r1, r4
        ((uint32_t*)x)[i] ^= a;
 80032b8:	4073      	eors	r3, r6
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 80032ba:	4c54      	ldr	r4, [pc, #336]	; (800340c <hsc_encode+0x204>)
 80032bc:	011e      	lsls	r6, r3, #4
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 80032be:	9a04      	ldr	r2, [sp, #16]
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 80032c0:	4026      	ands	r6, r4
 80032c2:	46a3      	mov	fp, r4
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 80032c4:	0044      	lsls	r4, r0, #1
 80032c6:	402c      	ands	r4, r5
        ((uint32_t*)x)[i] ^= a;
 80032c8:	4044      	eors	r4, r0
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 80032ca:	0050      	lsls	r0, r2, #1
 80032cc:	4028      	ands	r0, r5
        ((uint32_t*)x)[i] ^= a;
 80032ce:	4050      	eors	r0, r2
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 80032d0:	4662      	mov	r2, ip
 80032d2:	0052      	lsls	r2, r2, #1
 80032d4:	402a      	ands	r2, r5
        ((uint32_t*)x)[i] ^= a;
 80032d6:	4665      	mov	r5, ip
 80032d8:	406a      	eors	r2, r5
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80032da:	4d4d      	ldr	r5, [pc, #308]	; (8003410 <hsc_encode+0x208>)
        ((uint32_t*)x)[i] ^= a;
 80032dc:	4073      	eors	r3, r6
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80032de:	46ac      	mov	ip, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 80032e0:	00a5      	lsls	r5, r4, #2
 80032e2:	403d      	ands	r5, r7
        ((uint32_t*)x)[i] ^= a;
 80032e4:	406c      	eors	r4, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 80032e6:	0085      	lsls	r5, r0, #2
 80032e8:	403d      	ands	r5, r7
        ((uint32_t*)x)[i] ^= a;
 80032ea:	4068      	eors	r0, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 80032ec:	0095      	lsls	r5, r2, #2
 80032ee:	403d      	ands	r5, r7
        ((uint32_t*)x)[i] ^= a;
 80032f0:	406a      	eors	r2, r5
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80032f2:	4665      	mov	r5, ip
 80032f4:	0a1e      	lsrs	r6, r3, #8
 80032f6:	402e      	ands	r6, r5
        ((uint32_t*)x)[i] ^= a;
 80032f8:	4073      	eors	r3, r6
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 80032fa:	465e      	mov	r6, fp
 80032fc:	0125      	lsls	r5, r4, #4
 80032fe:	4035      	ands	r5, r6
        ((uint32_t*)x)[i] ^= a;
 8003300:	406c      	eors	r4, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 8003302:	0105      	lsls	r5, r0, #4
 8003304:	4035      	ands	r5, r6
        ((uint32_t*)x)[i] ^= a;
 8003306:	4068      	eors	r0, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 8003308:	0115      	lsls	r5, r2, #4
 800330a:	4035      	ands	r5, r6
        ((uint32_t*)x)[i] ^= a;
 800330c:	406a      	eors	r2, r5
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 800330e:	4665      	mov	r5, ip
        uint32_t a = (((uint32_t*)x)[i] & 0xFFFF0000) >> 16;
 8003310:	0c1e      	lsrs	r6, r3, #16
        ((uint32_t*)x)[i] ^= a;
 8003312:	405e      	eors	r6, r3
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 8003314:	0a23      	lsrs	r3, r4, #8
 8003316:	402b      	ands	r3, r5
        ((uint32_t*)x)[i] ^= a;
 8003318:	405c      	eors	r4, r3
        uint32_t a = (((uint32_t*)x)[i] & 0xFFFF0000) >> 16;
 800331a:	0c23      	lsrs	r3, r4, #16
        ((uint32_t*)x)[i] ^= a;
 800331c:	405c      	eors	r4, r3
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 800331e:	0a03      	lsrs	r3, r0, #8
 8003320:	402b      	ands	r3, r5
        ((uint32_t*)x)[i] ^= a;
 8003322:	4058      	eors	r0, r3
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 8003324:	4663      	mov	r3, ip
        uint32_t a = (((uint32_t*)x)[i] & 0xFFFF0000) >> 16;
 8003326:	0c07      	lsrs	r7, r0, #16
        ((uint32_t*)x)[i] ^= a;
 8003328:	4047      	eors	r7, r0
 800332a:	483a      	ldr	r0, [pc, #232]	; (8003414 <hsc_encode+0x20c>)
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 800332c:	0a15      	lsrs	r5, r2, #8
 800332e:	401d      	ands	r5, r3
 8003330:	1c43      	adds	r3, r0, #1
 8003332:	33ff      	adds	r3, #255	; 0xff
 8003334:	469c      	mov	ip, r3
        ((uint32_t*)x)[i] ^= a;
 8003336:	406a      	eors	r2, r5
        uint32_t a = (((uint32_t*)x)[i] & 0xFFFF0000) >> 16;
 8003338:	0c15      	lsrs	r5, r2, #16
        ((uint32_t*)x)[i] ^= a;
 800333a:	406a      	eors	r2, r5
    ((uint32_t*)x)[0] ^= ((uint32_t*)x)[1];
 800333c:	4066      	eors	r6, r4
    ((uint32_t*)x)[2] ^= ((uint32_t*)x)[3];
 800333e:	4057      	eors	r7, r2
    ((uint32_t*)x)[1] ^= ((uint32_t*)x)[3];
 8003340:	4054      	eors	r4, r2
    ((uint32_t*)x)[0] ^= ((uint32_t*)x)[2];
 8003342:	407e      	eors	r6, r7
    ((uint32_t*)x)[1] ^= ((uint32_t*)x)[3];
 8003344:	9403      	str	r4, [sp, #12]
        ((uint32_t*)x)[i] ^= a;
 8003346:	9205      	str	r2, [sp, #20]
    ((uint32_t*)x)[0] ^= ((uint32_t*)x)[2];
 8003348:	9602      	str	r6, [sp, #8]
    ((uint32_t*)x)[2] ^= ((uint32_t*)x)[3];
 800334a:	9704      	str	r7, [sp, #16]
 800334c:	9101      	str	r1, [sp, #4]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 800334e:	7804      	ldrb	r4, [r0, #0]
 8003350:	a902      	add	r1, sp, #8
 8003352:	7845      	ldrb	r5, [r0, #1]
 8003354:	5d0f      	ldrb	r7, [r1, r4]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8003356:	7b82      	ldrb	r2, [r0, #14]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 8003358:	412f      	asrs	r7, r5
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 800335a:	7883      	ldrb	r3, [r0, #2]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 800335c:	7906      	ldrb	r6, [r0, #4]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 800335e:	5c8c      	ldrb	r4, [r1, r2]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8003360:	5cca      	ldrb	r2, [r1, r3]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8003362:	5d8b      	ldrb	r3, [r1, r6]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 8003364:	01f9      	lsls	r1, r7, #7
 8003366:	468b      	mov	fp, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8003368:	7bc5      	ldrb	r5, [r0, #15]
 800336a:	4651      	mov	r1, sl
 800336c:	412c      	asrs	r4, r5
 800336e:	465f      	mov	r7, fp
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8003370:	78c5      	ldrb	r5, [r0, #3]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8003372:	400c      	ands	r4, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8003374:	412a      	asrs	r2, r5
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 8003376:	7985      	ldrb	r5, [r0, #6]
 8003378:	a902      	add	r1, sp, #8
 800337a:	5d4e      	ldrb	r6, [r1, r5]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 800337c:	7945      	ldrb	r5, [r0, #5]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 800337e:	4327      	orrs	r7, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8003380:	412b      	asrs	r3, r5
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 8003382:	7a05      	ldrb	r5, [r0, #8]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8003384:	46bb      	mov	fp, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 8003386:	5d4d      	ldrb	r5, [r1, r5]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8003388:	4649      	mov	r1, r9
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 800338a:	79c4      	ldrb	r4, [r0, #7]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 800338c:	0192      	lsls	r2, r2, #6
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 800338e:	4126      	asrs	r6, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 8003390:	7a84      	ldrb	r4, [r0, #10]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8003392:	400a      	ands	r2, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 8003394:	a902      	add	r1, sp, #8
 8003396:	5d0c      	ldrb	r4, [r1, r4]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8003398:	4659      	mov	r1, fp
 800339a:	4311      	orrs	r1, r2
 800339c:	468b      	mov	fp, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 800339e:	4641      	mov	r1, r8
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 80033a0:	7b02      	ldrb	r2, [r0, #12]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 80033a2:	015b      	lsls	r3, r3, #5
 80033a4:	400b      	ands	r3, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 80033a6:	a902      	add	r1, sp, #8
 80033a8:	5c8a      	ldrb	r2, [r1, r2]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80033aa:	4659      	mov	r1, fp
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 80033ac:	7a47      	ldrb	r7, [r0, #9]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80033ae:	430b      	orrs	r3, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 80033b0:	413d      	asrs	r5, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 80033b2:	7ac7      	ldrb	r7, [r0, #11]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 80033b4:	2110      	movs	r1, #16
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 80033b6:	413c      	asrs	r4, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 80033b8:	7b47      	ldrb	r7, [r0, #13]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 80033ba:	0136      	lsls	r6, r6, #4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 80033bc:	413a      	asrs	r2, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 80033be:	400e      	ands	r6, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 80033c0:	00ed      	lsls	r5, r5, #3
 80033c2:	3908      	subs	r1, #8
 80033c4:	400d      	ands	r5, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80033c6:	4333      	orrs	r3, r6
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 80033c8:	3904      	subs	r1, #4
 80033ca:	00a4      	lsls	r4, r4, #2
 80033cc:	400c      	ands	r4, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80033ce:	432b      	orrs	r3, r5
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 80033d0:	0052      	lsls	r2, r2, #1
 80033d2:	3902      	subs	r1, #2
 80033d4:	400a      	ands	r2, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80033d6:	4323      	orrs	r3, r4
 80033d8:	4313      	orrs	r3, r2
 80033da:	9a01      	ldr	r2, [sp, #4]
 80033dc:	3010      	adds	r0, #16
 80033de:	7013      	strb	r3, [r2, #0]
 80033e0:	0013      	movs	r3, r2
 80033e2:	3301      	adds	r3, #1
 80033e4:	9301      	str	r3, [sp, #4]
    for (i=0, j=0; i<BLOCKLENGTH; j++) {
 80033e6:	4560      	cmp	r0, ip
 80033e8:	d1b1      	bne.n	800334e <hsc_encode+0x146>
    }

    /// The encoding is written to "output" via "y"
}
 80033ea:	b007      	add	sp, #28
 80033ec:	bc3c      	pop	{r2, r3, r4, r5}
 80033ee:	4690      	mov	r8, r2
 80033f0:	4699      	mov	r9, r3
 80033f2:	46a2      	mov	sl, r4
 80033f4:	46ab      	mov	fp, r5
 80033f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t reg = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e72c      	b.n	8003256 <hsc_encode+0x4e>
 80033fc:	0800bf88 	.word	0x0800bf88
 8003400:	0800bd09 	.word	0x0800bd09
 8003404:	aaaaaaaa 	.word	0xaaaaaaaa
 8003408:	cccccccc 	.word	0xcccccccc
 800340c:	f0f0f0f0 	.word	0xf0f0f0f0
 8003410:	00ff00ff 	.word	0x00ff00ff
 8003414:	0800be88 	.word	0x0800be88

08003418 <hsc_decode>:



uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 8003418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800341a:	46de      	mov	lr, fp
 800341c:	4657      	mov	r7, sl
 800341e:	464e      	mov	r6, r9
 8003420:	4645      	mov	r5, r8
 8003422:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t crcreg;
    int i;
    int num_paths;
    
    /// Zero intermediate buffers
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 8003424:	4f8b      	ldr	r7, [pc, #556]	; (8003654 <hsc_decode+0x23c>)
uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 8003426:	b099      	sub	sp, #100	; 0x64
 8003428:	9008      	str	r0, [sp, #32]
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 800342a:	0038      	movs	r0, r7
uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 800342c:	910b      	str	r1, [sp, #44]	; 0x2c
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 800342e:	301c      	adds	r0, #28
uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 8003430:	920c      	str	r2, [sp, #48]	; 0x30
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 8003432:	2100      	movs	r1, #0
 8003434:	2207      	movs	r2, #7
 8003436:	f006 ffa5 	bl	800a384 <ot_memset_4>
    ot_memset_4(PRIBIT(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 800343a:	0038      	movs	r0, r7
 800343c:	2207      	movs	r2, #7
 800343e:	2100      	movs	r1, #0
 8003440:	f006 ffa0 	bl	800a384 <ot_memset_4>
    ot_memset_4(PM(h), 0, LISTSIZE/4);
 8003444:	0038      	movs	r0, r7
 8003446:	2201      	movs	r2, #1
 8003448:	2100      	movs	r1, #0
 800344a:	3038      	adds	r0, #56	; 0x38
 800344c:	f006 ff9a 	bl	800a384 <ot_memset_4>
    /// num_paths intializes as 1, will expand to LISTSIZE
    num_paths = 1;

    /// Outer Decoding Loop.
    /// Runs once per each bit in the Block (128 iteration)
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 8003450:	2100      	movs	r1, #0
 8003452:	9105      	str	r1, [sp, #20]
    num_paths = 1;
 8003454:	3101      	adds	r1, #1
 8003456:	468a      	mov	sl, r1
    PRIORITY(h)[0] = 0;
 8003458:	2348      	movs	r3, #72	; 0x48
 800345a:	2200      	movs	r2, #0
                // update new paths dependencies
                // - deepest layers are taken from parent
                // - all bits are copied
                if (l != lr) {
                    int lmd = max_lmd;
                    switch (max_lmd-min_lmd) {
 800345c:	46d3      	mov	fp, sl
 800345e:	497e      	ldr	r1, [pc, #504]	; (8003658 <hsc_decode+0x240>)
    PRIORITY(h)[0] = 0;
 8003460:	54fa      	strb	r2, [r7, r3]
 8003462:	910a      	str	r1, [sp, #40]	; 0x28
 8003464:	497d      	ldr	r1, [pc, #500]	; (800365c <hsc_decode+0x244>)
                    switch (max_lmd-min_lmd) {
 8003466:	4b7e      	ldr	r3, [pc, #504]	; (8003660 <hsc_decode+0x248>)
 8003468:	9102      	str	r1, [sp, #8]
 800346a:	497e      	ldr	r1, [pc, #504]	; (8003664 <hsc_decode+0x24c>)
 800346c:	9312      	str	r3, [sp, #72]	; 0x48
 800346e:	9106      	str	r1, [sp, #24]
 8003470:	497d      	ldr	r1, [pc, #500]	; (8003668 <hsc_decode+0x250>)
 8003472:	9109      	str	r1, [sp, #36]	; 0x24
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 8003474:	497d      	ldr	r1, [pc, #500]	; (800366c <hsc_decode+0x254>)
 8003476:	910d      	str	r1, [sp, #52]	; 0x34
            int min_lmd = minlambda_lut[phi];
 8003478:	497d      	ldr	r1, [pc, #500]	; (8003670 <hsc_decode+0x258>)
 800347a:	9110      	str	r1, [sp, #64]	; 0x40
                        case 1: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
                        case 0: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];
                       default: break;
                    }
                    lmd = max_lmd;
                    switch (max_lmd) {
 800347c:	497d      	ldr	r1, [pc, #500]	; (8003674 <hsc_decode+0x25c>)
 800347e:	9111      	str	r1, [sp, #68]	; 0x44
        int next_pt     = (1 << lmd0);
 8003480:	2201      	movs	r2, #1
        int lmd0        = lambda_lut[phi];
 8003482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003484:	9905      	ldr	r1, [sp, #20]
 8003486:	5c58      	ldrb	r0, [r3, r1]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8003488:	2302      	movs	r3, #2
        int next_pt     = (1 << lmd0);
 800348a:	4082      	lsls	r2, r0
        bool use_gfunc  = (bool)(phi & next_pt);
 800348c:	4011      	ands	r1, r2
        int next_pt     = (1 << lmd0);
 800348e:	4694      	mov	ip, r2
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8003490:	4083      	lsls	r3, r0
        bool use_gfunc  = (bool)(phi & next_pt);
 8003492:	1e4a      	subs	r2, r1, #1
 8003494:	4191      	sbcs	r1, r2
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8003496:	1e5a      	subs	r2, r3, #1
        bool use_gfunc  = (bool)(phi & next_pt);
 8003498:	b2c9      	uxtb	r1, r1
        int lmd0        = lambda_lut[phi];
 800349a:	9004      	str	r0, [sp, #16]
        bool use_gfunc  = (bool)(phi & next_pt);
 800349c:	9103      	str	r1, [sp, #12]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 800349e:	2a00      	cmp	r2, #0
 80034a0:	dc00      	bgt.n	80034a4 <hsc_decode+0x8c>
 80034a2:	e0f0      	b.n	8003686 <hsc_decode+0x26e>
 80034a4:	4974      	ldr	r1, [pc, #464]	; (8003678 <hsc_decode+0x260>)
 80034a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80034a8:	4688      	mov	r8, r1
 80034aa:	4443      	add	r3, r8
 80034ac:	46a8      	mov	r8, r5
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 80034ae:	4659      	mov	r1, fp
 80034b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	4443      	add	r3, r8
 80034b6:	46a8      	mov	r8, r5
 80034b8:	1e4c      	subs	r4, r1, #1
 80034ba:	4970      	ldr	r1, [pc, #448]	; (800367c <hsc_decode+0x264>)
 80034bc:	00d0      	lsls	r0, r2, #3
 80034be:	9d02      	ldr	r5, [sp, #8]
 80034c0:	1841      	adds	r1, r0, r1
 80034c2:	4441      	add	r1, r8
 80034c4:	46a8      	mov	r8, r5
 80034c6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80034c8:	4440      	add	r0, r8
 80034ca:	46a8      	mov	r8, r5
 80034cc:	4665      	mov	r5, ip
 80034ce:	00a4      	lsls	r4, r4, #2
 80034d0:	4444      	add	r4, r8
 80034d2:	9407      	str	r4, [sp, #28]
 80034d4:	0054      	lsls	r4, r2, #1
 80034d6:	9400      	str	r4, [sp, #0]
 80034d8:	9501      	str	r5, [sp, #4]
 80034da:	46bc      	mov	ip, r7
 80034dc:	9c00      	ldr	r4, [sp, #0]
 80034de:	e031      	b.n	8003544 <hsc_decode+0x12c>
    llr_t a_inv = -llr_layer_a;
 80034e0:	426f      	negs	r7, r5
 80034e2:	46b8      	mov	r8, r7
    llr_t b_inv = -llr_layer_b;
 80034e4:	4277      	negs	r7, r6
 80034e6:	46b9      	mov	r9, r7
    if (llr_layer_a < llr_layer_b) {
 80034e8:	42b5      	cmp	r5, r6
 80034ea:	da00      	bge.n	80034ee <hsc_decode+0xd6>
 80034ec:	e094      	b.n	8003618 <hsc_decode+0x200>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 80034ee:	0035      	movs	r5, r6
 80034f0:	4546      	cmp	r6, r8
 80034f2:	da00      	bge.n	80034f6 <hsc_decode+0xde>
 80034f4:	4645      	mov	r5, r8
				for (int l=0; l<num_paths; l++) {
 80034f6:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80034f8:	601d      	str	r5, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 80034fa:	2c01      	cmp	r4, #1
 80034fc:	d015      	beq.n	800352a <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 80034fe:	0035      	movs	r5, r6
 8003500:	4546      	cmp	r6, r8
 8003502:	da00      	bge.n	8003506 <hsc_decode+0xee>
 8003504:	4645      	mov	r5, r8
				for (int l=0; l<num_paths; l++) {
 8003506:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003508:	605d      	str	r5, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 800350a:	2c02      	cmp	r4, #2
 800350c:	d00d      	beq.n	800352a <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 800350e:	0035      	movs	r5, r6
 8003510:	4546      	cmp	r6, r8
 8003512:	da00      	bge.n	8003516 <hsc_decode+0xfe>
 8003514:	4645      	mov	r5, r8
				for (int l=0; l<num_paths; l++) {
 8003516:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003518:	609d      	str	r5, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 800351a:	2c03      	cmp	r4, #3
 800351c:	d005      	beq.n	800352a <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 800351e:	46b1      	mov	r9, r6
 8003520:	4546      	cmp	r6, r8
 8003522:	da00      	bge.n	8003526 <hsc_decode+0x10e>
 8003524:	46c1      	mov	r9, r8
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003526:	464c      	mov	r4, r9
 8003528:	60dc      	str	r4, [r3, #12]
            if (beta == next_pt) {
 800352a:	9c01      	ldr	r4, [sp, #4]
 800352c:	4294      	cmp	r4, r2
 800352e:	d056      	beq.n	80035de <hsc_decode+0x1c6>
 8003530:	9c00      	ldr	r4, [sp, #0]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8003532:	3a01      	subs	r2, #1
 8003534:	3c02      	subs	r4, #2
 8003536:	9400      	str	r4, [sp, #0]
 8003538:	3b10      	subs	r3, #16
 800353a:	3808      	subs	r0, #8
 800353c:	3908      	subs	r1, #8
 800353e:	2a00      	cmp	r2, #0
 8003540:	d100      	bne.n	8003544 <hsc_decode+0x12c>
 8003542:	e09f      	b.n	8003684 <hsc_decode+0x26c>
			if (beta_x2 >= BLOCKLENGTH) {
 8003544:	2c7f      	cmp	r4, #127	; 0x7f
 8003546:	dc01      	bgt.n	800354c <hsc_decode+0x134>
 8003548:	f000 fd10 	bl	8003f6c <hsc_decode+0xb54>
					if (use_gfunc) {
 800354c:	9f03      	ldr	r7, [sp, #12]
				llr_t llr0  = llrinput[beta_e];
 800354e:	680d      	ldr	r5, [r1, #0]
				llr_t llr1  = llrinput[beta_e+1];
 8003550:	684e      	ldr	r6, [r1, #4]
					if (use_gfunc) {
 8003552:	2f00      	cmp	r7, #0
 8003554:	d0c4      	beq.n	80034e0 <hsc_decode+0xc8>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003556:	9f04      	ldr	r7, [sp, #16]
 8003558:	00bf      	lsls	r7, r7, #2
 800355a:	46b8      	mov	r8, r7
 800355c:	4667      	mov	r7, ip
 800355e:	4644      	mov	r4, r8
 8003560:	5d3c      	ldrb	r4, [r7, r4]
 8003562:	46a2      	mov	sl, r4
        llr_layer_a = -llr_layer_a;
 8003564:	426c      	negs	r4, r5
 8003566:	46a1      	mov	r9, r4
    if (bit_layer) {
 8003568:	4654      	mov	r4, sl
 800356a:	5d04      	ldrb	r4, [r0, r4]
 800356c:	2c00      	cmp	r4, #0
 800356e:	d100      	bne.n	8003572 <hsc_decode+0x15a>
				llr_t llr0  = llrinput[beta_e];
 8003570:	46a9      	mov	r9, r5
    return (llr_layer_b + llr_layer_a);
 8003572:	44b1      	add	r9, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003574:	464c      	mov	r4, r9
 8003576:	601c      	str	r4, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 8003578:	465c      	mov	r4, fp
 800357a:	2c01      	cmp	r4, #1
 800357c:	d0d5      	beq.n	800352a <hsc_decode+0x112>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800357e:	46e1      	mov	r9, ip
 8003580:	44c1      	add	r9, r8
 8003582:	464c      	mov	r4, r9
 8003584:	7864      	ldrb	r4, [r4, #1]
 8003586:	46a2      	mov	sl, r4
        llr_layer_a = -llr_layer_a;
 8003588:	426c      	negs	r4, r5
 800358a:	46a1      	mov	r9, r4
    if (bit_layer) {
 800358c:	4654      	mov	r4, sl
 800358e:	5d04      	ldrb	r4, [r0, r4]
 8003590:	2c00      	cmp	r4, #0
 8003592:	d100      	bne.n	8003596 <hsc_decode+0x17e>
				llr_t llr0  = llrinput[beta_e];
 8003594:	46a9      	mov	r9, r5
    return (llr_layer_b + llr_layer_a);
 8003596:	44b1      	add	r9, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003598:	464c      	mov	r4, r9
 800359a:	605c      	str	r4, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 800359c:	465c      	mov	r4, fp
 800359e:	2c02      	cmp	r4, #2
 80035a0:	d0c3      	beq.n	800352a <hsc_decode+0x112>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80035a2:	46e1      	mov	r9, ip
 80035a4:	44c1      	add	r9, r8
 80035a6:	464c      	mov	r4, r9
 80035a8:	78a4      	ldrb	r4, [r4, #2]
 80035aa:	46a2      	mov	sl, r4
        llr_layer_a = -llr_layer_a;
 80035ac:	426c      	negs	r4, r5
 80035ae:	46a1      	mov	r9, r4
    if (bit_layer) {
 80035b0:	4654      	mov	r4, sl
 80035b2:	5d04      	ldrb	r4, [r0, r4]
 80035b4:	2c00      	cmp	r4, #0
 80035b6:	d100      	bne.n	80035ba <hsc_decode+0x1a2>
				llr_t llr0  = llrinput[beta_e];
 80035b8:	46a9      	mov	r9, r5
    return (llr_layer_b + llr_layer_a);
 80035ba:	44b1      	add	r9, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80035bc:	464c      	mov	r4, r9
 80035be:	609c      	str	r4, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 80035c0:	465c      	mov	r4, fp
 80035c2:	2c03      	cmp	r4, #3
 80035c4:	d0b1      	beq.n	800352a <hsc_decode+0x112>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80035c6:	44e0      	add	r8, ip
 80035c8:	4644      	mov	r4, r8
 80035ca:	78e4      	ldrb	r4, [r4, #3]
    if (bit_layer) {
 80035cc:	5d04      	ldrb	r4, [r0, r4]
 80035ce:	2c00      	cmp	r4, #0
 80035d0:	d000      	beq.n	80035d4 <hsc_decode+0x1bc>
        llr_layer_a = -llr_layer_a;
 80035d2:	426d      	negs	r5, r5
    return (llr_layer_b + llr_layer_a);
 80035d4:	1975      	adds	r5, r6, r5
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80035d6:	60dd      	str	r5, [r3, #12]
            if (beta == next_pt) {
 80035d8:	9c01      	ldr	r4, [sp, #4]
 80035da:	4294      	cmp	r4, r2
 80035dc:	d1a8      	bne.n	8003530 <hsc_decode+0x118>
                use_gfunc   = phi & next_pt;
 80035de:	9d05      	ldr	r5, [sp, #20]
                next_pt   >>= 1;
 80035e0:	1064      	asrs	r4, r4, #1
                use_gfunc   = phi & next_pt;
 80035e2:	4025      	ands	r5, r4
 80035e4:	1e6e      	subs	r6, r5, #1
 80035e6:	41b5      	sbcs	r5, r6
                next_pt   >>= 1;
 80035e8:	9401      	str	r4, [sp, #4]
                use_gfunc   = phi & next_pt;
 80035ea:	b2ec      	uxtb	r4, r5
 80035ec:	9403      	str	r4, [sp, #12]
                if (--lmd0 >= 0) {
 80035ee:	9c04      	ldr	r4, [sp, #16]
 80035f0:	3c01      	subs	r4, #1
 80035f2:	9404      	str	r4, [sp, #16]
 80035f4:	d49c      	bmi.n	8003530 <hsc_decode+0x118>
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 80035f6:	9c04      	ldr	r4, [sp, #16]
 80035f8:	00a5      	lsls	r5, r4, #2
 80035fa:	4c21      	ldr	r4, [pc, #132]	; (8003680 <hsc_decode+0x268>)
 80035fc:	46a0      	mov	r8, r4
 80035fe:	44a8      	add	r8, r5
 8003600:	4644      	mov	r4, r8
 8003602:	6824      	ldr	r4, [r4, #0]
 8003604:	46a1      	mov	r9, r4
 8003606:	9c07      	ldr	r4, [sp, #28]
 8003608:	6b65      	ldr	r5, [r4, #52]	; 0x34
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 800360a:	6c66      	ldr	r6, [r4, #68]	; 0x44
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 800360c:	464c      	mov	r4, r9
 800360e:	4025      	ands	r5, r4
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 8003610:	4644      	mov	r4, r8
 8003612:	4335      	orrs	r5, r6
 8003614:	6025      	str	r5, [r4, #0]
 8003616:	e78b      	b.n	8003530 <hsc_decode+0x118>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003618:	46aa      	mov	sl, r5
 800361a:	4546      	cmp	r6, r8
 800361c:	dc00      	bgt.n	8003620 <hsc_decode+0x208>
    llr_t b_inv = -llr_layer_b;
 800361e:	46ba      	mov	sl, r7
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003620:	4654      	mov	r4, sl
 8003622:	601c      	str	r4, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 8003624:	465c      	mov	r4, fp
 8003626:	2c01      	cmp	r4, #1
 8003628:	d100      	bne.n	800362c <hsc_decode+0x214>
 800362a:	e77e      	b.n	800352a <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 800362c:	46aa      	mov	sl, r5
 800362e:	4546      	cmp	r6, r8
 8003630:	dc00      	bgt.n	8003634 <hsc_decode+0x21c>
    llr_t b_inv = -llr_layer_b;
 8003632:	46ca      	mov	sl, r9
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003634:	4654      	mov	r4, sl
 8003636:	605c      	str	r4, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 8003638:	465c      	mov	r4, fp
 800363a:	2c02      	cmp	r4, #2
 800363c:	d100      	bne.n	8003640 <hsc_decode+0x228>
 800363e:	e774      	b.n	800352a <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003640:	4546      	cmp	r6, r8
 8003642:	dc00      	bgt.n	8003646 <hsc_decode+0x22e>
 8003644:	e212      	b.n	8003a6c <hsc_decode+0x654>
				for (int l=0; l<num_paths; l++) {
 8003646:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003648:	609d      	str	r5, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 800364a:	46a9      	mov	r9, r5
 800364c:	2c03      	cmp	r4, #3
 800364e:	d000      	beq.n	8003652 <hsc_decode+0x23a>
 8003650:	e769      	b.n	8003526 <hsc_decode+0x10e>
 8003652:	e76a      	b.n	800352a <hsc_decode+0x112>
 8003654:	200002fc 	.word	0x200002fc
 8003658:	0800bc88 	.word	0x0800bc88
 800365c:	20000574 	.word	0x20000574
 8003660:	0800ba08 	.word	0x0800ba08
 8003664:	20000374 	.word	0x20000374
 8003668:	20000974 	.word	0x20000974
 800366c:	0800ba94 	.word	0x0800ba94
 8003670:	0800bc08 	.word	0x0800bc08
 8003674:	0800ba24 	.word	0x0800ba24
 8003678:	0fffffff 	.word	0x0fffffff
 800367c:	fffffe00 	.word	0xfffffe00
 8003680:	20000318 	.word	0x20000318
 8003684:	4667      	mov	r7, ip
        if (h->fbit[phi]) {
 8003686:	9b08      	ldr	r3, [sp, #32]
 8003688:	9a05      	ldr	r2, [sp, #20]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	5c9b      	ldrb	r3, [r3, r2]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d100      	bne.n	8003694 <hsc_decode+0x27c>
 8003692:	e1f2      	b.n	8003a7a <hsc_decode+0x662>
            switch (num_paths-1) {
 8003694:	465b      	mov	r3, fp
 8003696:	3b01      	subs	r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <hsc_decode+0x288>
 800369c:	f000 fc63 	bl	8003f66 <hsc_decode+0xb4e>
 80036a0:	dc01      	bgt.n	80036a6 <hsc_decode+0x28e>
 80036a2:	f000 fc49 	bl	8003f38 <hsc_decode+0xb20>
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d101      	bne.n	80036ae <hsc_decode+0x296>
 80036aa:	f000 fc59 	bl	8003f60 <hsc_decode+0xb48>
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d118      	bne.n	80036e4 <hsc_decode+0x2cc>
                case 3: if (LLR(h)[1][3] < 0) { PM(h)[3] -= LLR(h)[1][3]; }
 80036b2:	4a58      	ldr	r2, [pc, #352]	; (8003814 <hsc_decode+0x3fc>)
 80036b4:	69d3      	ldr	r3, [r2, #28]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	da02      	bge.n	80036c0 <hsc_decode+0x2a8>
 80036ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036bc:	1acb      	subs	r3, r1, r3
 80036be:	647b      	str	r3, [r7, #68]	; 0x44
                case 2: if (LLR(h)[1][2] < 0) { PM(h)[2] -= LLR(h)[1][2]; }
 80036c0:	6993      	ldr	r3, [r2, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	da02      	bge.n	80036cc <hsc_decode+0x2b4>
 80036c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036c8:	1acb      	subs	r3, r1, r3
 80036ca:	643b      	str	r3, [r7, #64]	; 0x40
                case 1: if (LLR(h)[1][1] < 0) { PM(h)[1] -= LLR(h)[1][1]; }
 80036cc:	6953      	ldr	r3, [r2, #20]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	da02      	bge.n	80036d8 <hsc_decode+0x2c0>
 80036d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036d4:	1acb      	subs	r3, r1, r3
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                case 0: if (LLR(h)[1][0] < 0) { PM(h)[0] -= LLR(h)[1][0]; }
 80036d8:	6913      	ldr	r3, [r2, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	da02      	bge.n	80036e4 <hsc_decode+0x2cc>
 80036de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	63bb      	str	r3, [r7, #56]	; 0x38
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 80036e4:	2601      	movs	r6, #1
 80036e6:	9c02      	ldr	r4, [sp, #8]
 80036e8:	2100      	movs	r1, #0
 80036ea:	46a4      	mov	ip, r4
 80036ec:	9805      	ldr	r0, [sp, #20]
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 80036ee:	4a4a      	ldr	r2, [pc, #296]	; (8003818 <hsc_decode+0x400>)
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 80036f0:	4006      	ands	r6, r0
 80036f2:	1cb3      	adds	r3, r6, #2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4463      	add	r3, ip
 80036f8:	6019      	str	r1, [r3, #0]
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 80036fa:	9906      	ldr	r1, [sp, #24]
 80036fc:	0083      	lsls	r3, r0, #2
 80036fe:	50ca      	str	r2, [r1, r3]
            }
        }


        // update bit tree
        if ((phi & 1) == 0) {
 8003700:	2e00      	cmp	r6, #0
 8003702:	d000      	beq.n	8003706 <hsc_decode+0x2ee>
 8003704:	e396      	b.n	8003e34 <hsc_decode+0xa1c>
#           if WORDIFY && (LISTSIZE==4)
            *(uint32_t*)PRIBIT(h)[0] = 0x03020100;
 8003706:	4b44      	ldr	r3, [pc, #272]	; (8003818 <hsc_decode+0x400>)
 8003708:	603b      	str	r3, [r7, #0]
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 800370a:	9b05      	ldr	r3, [sp, #20]
 800370c:	3301      	adds	r3, #1
 800370e:	9305      	str	r3, [sp, #20]
 8003710:	2b80      	cmp	r3, #128	; 0x80
 8003712:	d000      	beq.n	8003716 <hsc_decode+0x2fe>
 8003714:	e6b4      	b.n	8003480 <hsc_decode+0x68>
 8003716:	46da      	mov	sl, fp
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8003718:	4658      	mov	r0, fp
    *(uint32_t*)&indexOut[0] = 0x03020100;
 800371a:	4a3f      	ldr	r2, [pc, #252]	; (8003818 <hsc_decode+0x400>)
    *(uint32_t*)&indexOut[4] = 0x07060504;
 800371c:	4b3f      	ldr	r3, [pc, #252]	; (800381c <hsc_decode+0x404>)
    *(uint32_t*)&indexOut[0] = 0x03020100;
 800371e:	677a      	str	r2, [r7, #116]	; 0x74
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8003720:	67bb      	str	r3, [r7, #120]	; 0x78
        gap    -= (gap > 1);
 8003722:	2301      	movs	r3, #1
 8003724:	2801      	cmp	r0, #1
 8003726:	dc00      	bgt.n	800372a <hsc_decode+0x312>
 8003728:	2300      	movs	r3, #0
 800372a:	1ac0      	subs	r0, r0, r3
        sorted  = (gap == 1);
 800372c:	1e43      	subs	r3, r0, #1
 800372e:	425a      	negs	r2, r3
 8003730:	4153      	adcs	r3, r2
 8003732:	b2db      	uxtb	r3, r3
 8003734:	469c      	mov	ip, r3
        for (i=0, j=gap; j<length; i++, j++) {
 8003736:	4582      	cmp	sl, r0
 8003738:	dd15      	ble.n	8003766 <hsc_decode+0x34e>
 800373a:	003b      	movs	r3, r7
 800373c:	4652      	mov	r2, sl
 800373e:	3374      	adds	r3, #116	; 0x74
 8003740:	18d6      	adds	r6, r2, r3
 8003742:	1a36      	subs	r6, r6, r0
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 8003744:	781c      	ldrb	r4, [r3, #0]
 8003746:	5c1d      	ldrb	r5, [r3, r0]
 8003748:	00a1      	lsls	r1, r4, #2
 800374a:	00aa      	lsls	r2, r5, #2
 800374c:	1879      	adds	r1, r7, r1
 800374e:	18ba      	adds	r2, r7, r2
 8003750:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8003752:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003754:	4291      	cmp	r1, r2
 8003756:	dd03      	ble.n	8003760 <hsc_decode+0x348>
                sorted      = false;
 8003758:	2200      	movs	r2, #0
 800375a:	4694      	mov	ip, r2
                indexOut[i] = indexOut[j];
 800375c:	701d      	strb	r5, [r3, #0]
                indexOut[j] = k;
 800375e:	541c      	strb	r4, [r3, r0]
 8003760:	3301      	adds	r3, #1
        for (i=0, j=gap; j<length; i++, j++) {
 8003762:	42b3      	cmp	r3, r6
 8003764:	d1ee      	bne.n	8003744 <hsc_decode+0x32c>
    } while (!sorted);
 8003766:	4663      	mov	r3, ip
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0da      	beq.n	8003722 <hsc_decode+0x30a>

    /// CRC Path Check process
    /// The BITMEM buffer is reused here.  It is not needed anymore.
    ///@note DECMSG(h) replaced with BITMEM(h)
    crcreg = 0;
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 800376c:	2300      	movs	r3, #0
 800376e:	9315      	str	r3, [sp, #84]	; 0x54
        reg = CRCTABLE[reg ^ *block++];
 8003770:	4b2b      	ldr	r3, [pc, #172]	; (8003820 <hsc_decode+0x408>)
        int lp = INDEX(h)[correct_path];
        int phi;

        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
            DECMSG(h)[phi]    = MAP(h)[phi][lp] >> 7;
            lp                  = MAP(h)[phi][lp] & 0x7F;
 8003772:	267f      	movs	r6, #127	; 0x7f
        reg = CRCTABLE[reg ^ *block++];
 8003774:	9310      	str	r3, [sp, #64]	; 0x40
        int lp = INDEX(h)[correct_path];
 8003776:	4653      	mov	r3, sl
 8003778:	3774      	adds	r7, #116	; 0x74
 800377a:	9317      	str	r3, [sp, #92]	; 0x5c
 800377c:	9b02      	ldr	r3, [sp, #8]
 800377e:	9716      	str	r7, [sp, #88]	; 0x58
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 8003780:	207f      	movs	r0, #127	; 0x7f
        int lp = INDEX(h)[correct_path];
 8003782:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003784:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003786:	5c89      	ldrb	r1, [r1, r2]
 8003788:	9a06      	ldr	r2, [sp, #24]
            DECMSG(h)[phi]    = MAP(h)[phi][lp] >> 7;
 800378a:	0084      	lsls	r4, r0, #2
 800378c:	1914      	adds	r4, r2, r4
 800378e:	5c61      	ldrb	r1, [r4, r1]
 8003790:	09cc      	lsrs	r4, r1, #7
 8003792:	541c      	strb	r4, [r3, r0]
            lp                  = MAP(h)[phi][lp] & 0x7F;
 8003794:	4031      	ands	r1, r6
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 8003796:	3801      	subs	r0, #1
 8003798:	d2f7      	bcs.n	800378a <hsc_decode+0x372>
        }
        
        /// Bytewise CRC compute.
        /// Requires loading the bit data into a byte buffer.
        /// On success, the successful bytewise decoding is in the output[]
        for (i=0, phi=0; phi<h->infobits; i++) {
 800379a:	9a08      	ldr	r2, [sp, #32]
 800379c:	8891      	ldrh	r1, [r2, #4]
 800379e:	2900      	cmp	r1, #0
 80037a0:	d101      	bne.n	80037a6 <hsc_decode+0x38e>
 80037a2:	f000 fe2d 	bl	8004400 <hsc_decode+0xfe8>
 80037a6:	223f      	movs	r2, #63	; 0x3f
 80037a8:	2479      	movs	r4, #121	; 0x79
 80037aa:	920d      	str	r2, [sp, #52]	; 0x34
 80037ac:	3240      	adds	r2, #64	; 0x40
 80037ae:	4691      	mov	r9, r2
 80037b0:	3a05      	subs	r2, #5
 80037b2:	920c      	str	r2, [sp, #48]	; 0x30
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <hsc_decode+0x40c>)
 80037b6:	940a      	str	r4, [sp, #40]	; 0x28
 80037b8:	9200      	str	r2, [sp, #0]
 80037ba:	2201      	movs	r2, #1
 80037bc:	3404      	adds	r4, #4
 80037be:	9404      	str	r4, [sp, #16]
 80037c0:	3c07      	subs	r4, #7
 80037c2:	9409      	str	r4, [sp, #36]	; 0x24
 80037c4:	3405      	adds	r4, #5
 80037c6:	9402      	str	r4, [sp, #8]
 80037c8:	3c06      	subs	r4, #6
 80037ca:	9407      	str	r4, [sp, #28]
 80037cc:	3402      	adds	r4, #2
 80037ce:	9401      	str	r4, [sp, #4]
 80037d0:	3c09      	subs	r4, #9
 80037d2:	940f      	str	r4, [sp, #60]	; 0x3c
 80037d4:	3401      	adds	r4, #1
 80037d6:	9405      	str	r4, [sp, #20]
 80037d8:	3404      	adds	r4, #4
 80037da:	940e      	str	r4, [sp, #56]	; 0x38
 80037dc:	3c14      	subs	r4, #20
 80037de:	4812      	ldr	r0, [pc, #72]	; (8003828 <hsc_decode+0x410>)
 80037e0:	9403      	str	r4, [sp, #12]
 80037e2:	3414      	adds	r4, #20
 80037e4:	46a0      	mov	r8, r4
 80037e6:	3c05      	subs	r4, #5
 80037e8:	46a4      	mov	ip, r4
 80037ea:	1a12      	subs	r2, r2, r0
 80037ec:	207e      	movs	r0, #126	; 0x7e
 80037ee:	257a      	movs	r5, #122	; 0x7a
 80037f0:	9214      	str	r2, [sp, #80]	; 0x50
 80037f2:	464a      	mov	r2, r9
 80037f4:	4681      	mov	r9, r0
 80037f6:	4660      	mov	r0, ip
 80037f8:	3407      	adds	r4, #7
 80037fa:	46a2      	mov	sl, r4
 80037fc:	3401      	adds	r4, #1
 80037fe:	46a3      	mov	fp, r4
 8003800:	3c37      	subs	r4, #55	; 0x37
 8003802:	46a4      	mov	ip, r4
 8003804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003806:	4644      	mov	r4, r8
 8003808:	2779      	movs	r7, #121	; 0x79
 800380a:	46a8      	mov	r8, r5
 800380c:	9311      	str	r3, [sp, #68]	; 0x44
 800380e:	0005      	movs	r5, r0
 8003810:	0018      	movs	r0, r3
 8003812:	e033      	b.n	800387c <hsc_decode+0x464>
 8003814:	20000974 	.word	0x20000974
 8003818:	03020100 	.word	0x03020100
 800381c:	07060504 	.word	0x07060504
 8003820:	0800bf88 	.word	0x0800bf88
 8003824:	0800be0f 	.word	0x0800be0f
 8003828:	0800be08 	.word	0x0800be08
 800382c:	9b00      	ldr	r3, [sp, #0]
 800382e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	469c      	mov	ip, r3
 8003834:	9b00      	ldr	r3, [sp, #0]
 8003836:	789b      	ldrb	r3, [r3, #2]
 8003838:	4698      	mov	r8, r3
 800383a:	9b00      	ldr	r3, [sp, #0]
 800383c:	78df      	ldrb	r7, [r3, #3]
 800383e:	791b      	ldrb	r3, [r3, #4]
 8003840:	469b      	mov	fp, r3
 8003842:	9b00      	ldr	r3, [sp, #0]
 8003844:	795b      	ldrb	r3, [r3, #5]
 8003846:	469a      	mov	sl, r3
 8003848:	9b00      	ldr	r3, [sp, #0]
 800384a:	799d      	ldrb	r5, [r3, #6]
 800384c:	79dc      	ldrb	r4, [r3, #7]
 800384e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003850:	940e      	str	r4, [sp, #56]	; 0x38
 8003852:	9303      	str	r3, [sp, #12]
 8003854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003856:	950f      	str	r5, [sp, #60]	; 0x3c
 8003858:	9305      	str	r3, [sp, #20]
 800385a:	9b07      	ldr	r3, [sp, #28]
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003860:	9302      	str	r3, [sp, #8]
 8003862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003864:	970a      	str	r7, [sp, #40]	; 0x28
 8003866:	9304      	str	r3, [sp, #16]
 8003868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800386a:	4699      	mov	r9, r3
 800386c:	4643      	mov	r3, r8
 800386e:	930c      	str	r3, [sp, #48]	; 0x30
 8003870:	4663      	mov	r3, ip
 8003872:	930d      	str	r3, [sp, #52]	; 0x34
 8003874:	465b      	mov	r3, fp
 8003876:	9309      	str	r3, [sp, #36]	; 0x24
 8003878:	4653      	mov	r3, sl
 800387a:	9307      	str	r3, [sp, #28]
 800387c:	4663      	mov	r3, ip
 800387e:	9312      	str	r3, [sp, #72]	; 0x48
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 8003880:	464b      	mov	r3, r9
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
 8003882:	5c82      	ldrb	r2, [r0, r2]
 8003884:	01d2      	lsls	r2, r2, #7
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 800388a:	5cc3      	ldrb	r3, [r0, r3]
 800388c:	469c      	mov	ip, r3
 800388e:	4643      	mov	r3, r8
 8003890:	9313      	str	r3, [sp, #76]	; 0x4c
 8003892:	4663      	mov	r3, ip
 8003894:	019b      	lsls	r3, r3, #6
 8003896:	431a      	orrs	r2, r3
 8003898:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 800389a:	9b04      	ldr	r3, [sp, #16]
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 800389c:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 800389e:	5cc3      	ldrb	r3, [r0, r3]
 80038a0:	469c      	mov	ip, r3
 80038a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80038a4:	4699      	mov	r9, r3
 80038a6:	9b00      	ldr	r3, [sp, #0]
 80038a8:	4698      	mov	r8, r3
 80038aa:	4663      	mov	r3, ip
 80038ac:	015b      	lsls	r3, r3, #5
 80038ae:	431a      	orrs	r2, r3
 80038b0:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 80038b2:	9b02      	ldr	r3, [sp, #8]
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 80038b4:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 80038b6:	5cc3      	ldrb	r3, [r0, r3]
 80038b8:	44c1      	add	r9, r8
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	431a      	orrs	r2, r3
 80038be:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 80038c0:	9b01      	ldr	r3, [sp, #4]
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 80038c2:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 80038c4:	5cc3      	ldrb	r3, [r0, r3]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	431a      	orrs	r2, r3
 80038ca:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 80038cc:	9b05      	ldr	r3, [sp, #20]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 80038ce:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 80038d0:	5cc3      	ldrb	r3, [r0, r3]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	431a      	orrs	r2, r3
 80038d6:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 80038d8:	9b03      	ldr	r3, [sp, #12]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 80038da:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 80038dc:	5cc3      	ldrb	r3, [r0, r3]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	431a      	orrs	r2, r3
 80038e2:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 80038e4:	9b00      	ldr	r3, [sp, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 80038e6:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	5cc3      	ldrb	r3, [r0, r3]
 80038ec:	469c      	mov	ip, r3
 80038ee:	9b00      	ldr	r3, [sp, #0]
 80038f0:	3308      	adds	r3, #8
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	4663      	mov	r3, ip
 80038f6:	431a      	orrs	r2, r3
        for (i=0, phi=0; phi<h->infobits; i++) {
 80038f8:	9b08      	ldr	r3, [sp, #32]
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 80038fa:	700a      	strb	r2, [r1, #0]
        for (i=0, phi=0; phi<h->infobits; i++) {
 80038fc:	889a      	ldrh	r2, [r3, #4]
 80038fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003900:	1acb      	subs	r3, r1, r3
 8003902:	469c      	mov	ip, r3
 8003904:	3101      	adds	r1, #1
 8003906:	454a      	cmp	r2, r9
 8003908:	dc90      	bgt.n	800382c <hsc_decode+0x414>
 800390a:	46a0      	mov	r8, r4
 800390c:	4664      	mov	r4, ip
        reg = CRCTABLE[reg ^ *block++];
 800390e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003910:	46d9      	mov	r9, fp
 8003912:	7811      	ldrb	r1, [r2, #0]
 8003914:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003916:	46ac      	mov	ip, r5
 8003918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800391a:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 800391c:	2c00      	cmp	r4, #0
 800391e:	dc01      	bgt.n	8003924 <hsc_decode+0x50c>
 8003920:	f000 fc0b 	bl	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 8003924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003926:	7850      	ldrb	r0, [r2, #1]
 8003928:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800392a:	4041      	eors	r1, r0
 800392c:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 800392e:	2c01      	cmp	r4, #1
 8003930:	d101      	bne.n	8003936 <hsc_decode+0x51e>
 8003932:	f000 fc02 	bl	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 8003936:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003938:	7890      	ldrb	r0, [r2, #2]
 800393a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800393c:	4041      	eors	r1, r0
 800393e:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003940:	2c02      	cmp	r4, #2
 8003942:	d101      	bne.n	8003948 <hsc_decode+0x530>
 8003944:	f000 fbf9 	bl	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 8003948:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800394a:	78d0      	ldrb	r0, [r2, #3]
 800394c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800394e:	4041      	eors	r1, r0
 8003950:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003952:	2c03      	cmp	r4, #3
 8003954:	d101      	bne.n	800395a <hsc_decode+0x542>
 8003956:	f000 fbf0 	bl	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800395a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800395c:	7910      	ldrb	r0, [r2, #4]
 800395e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003960:	4041      	eors	r1, r0
 8003962:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003964:	2c04      	cmp	r4, #4
 8003966:	d100      	bne.n	800396a <hsc_decode+0x552>
 8003968:	e3e7      	b.n	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800396a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800396c:	7950      	ldrb	r0, [r2, #5]
 800396e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003970:	4041      	eors	r1, r0
 8003972:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003974:	2c05      	cmp	r4, #5
 8003976:	d100      	bne.n	800397a <hsc_decode+0x562>
 8003978:	e3df      	b.n	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800397a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800397c:	7990      	ldrb	r0, [r2, #6]
 800397e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003980:	4041      	eors	r1, r0
 8003982:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003984:	2c06      	cmp	r4, #6
 8003986:	d100      	bne.n	800398a <hsc_decode+0x572>
 8003988:	e3d7      	b.n	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800398a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800398c:	79d0      	ldrb	r0, [r2, #7]
 800398e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003990:	4041      	eors	r1, r0
 8003992:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003994:	2c07      	cmp	r4, #7
 8003996:	d100      	bne.n	800399a <hsc_decode+0x582>
 8003998:	e3cf      	b.n	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800399a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800399c:	7a10      	ldrb	r0, [r2, #8]
 800399e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039a0:	4041      	eors	r1, r0
 80039a2:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80039a4:	2c08      	cmp	r4, #8
 80039a6:	d100      	bne.n	80039aa <hsc_decode+0x592>
 80039a8:	e3c7      	b.n	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80039aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039ac:	7a50      	ldrb	r0, [r2, #9]
 80039ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039b0:	4041      	eors	r1, r0
 80039b2:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80039b4:	2c09      	cmp	r4, #9
 80039b6:	d100      	bne.n	80039ba <hsc_decode+0x5a2>
 80039b8:	e3bf      	b.n	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80039ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039bc:	7a90      	ldrb	r0, [r2, #10]
 80039be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039c0:	4041      	eors	r1, r0
 80039c2:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80039c4:	2c0a      	cmp	r4, #10
 80039c6:	d100      	bne.n	80039ca <hsc_decode+0x5b2>
 80039c8:	e3b7      	b.n	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80039ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039cc:	7ad0      	ldrb	r0, [r2, #11]
 80039ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039d0:	4041      	eors	r1, r0
 80039d2:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80039d4:	2c0b      	cmp	r4, #11
 80039d6:	d100      	bne.n	80039da <hsc_decode+0x5c2>
 80039d8:	e3af      	b.n	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80039da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039dc:	7b10      	ldrb	r0, [r2, #12]
 80039de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039e0:	4041      	eors	r1, r0
 80039e2:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80039e4:	2c0c      	cmp	r4, #12
 80039e6:	d100      	bne.n	80039ea <hsc_decode+0x5d2>
 80039e8:	e3a7      	b.n	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80039ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039ec:	7b50      	ldrb	r0, [r2, #13]
 80039ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039f0:	4041      	eors	r1, r0
 80039f2:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80039f4:	2c0d      	cmp	r4, #13
 80039f6:	d100      	bne.n	80039fa <hsc_decode+0x5e2>
 80039f8:	e39f      	b.n	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80039fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039fc:	7b90      	ldrb	r0, [r2, #14]
 80039fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a00:	4041      	eors	r1, r0
 8003a02:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003a04:	2c0f      	cmp	r4, #15
 8003a06:	d000      	beq.n	8003a0a <hsc_decode+0x5f2>
 8003a08:	e397      	b.n	800413a <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 8003a0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a0c:	7bd0      	ldrb	r0, [r2, #15]
 8003a0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a10:	4041      	eors	r1, r0
 8003a12:	5651      	ldrsb	r1, [r2, r1]
 8003a14:	9a12      	ldr	r2, [sp, #72]	; 0x48
        }
            
        crcreg  = crccalc(output, i);
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 8003a16:	5c98      	ldrb	r0, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 8003a18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 8003a1a:	5ddd      	ldrb	r5, [r3, r7]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 8003a1c:	5c9c      	ldrb	r4, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 8003a1e:	464a      	mov	r2, r9
 8003a20:	5c9f      	ldrb	r7, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8003a22:	4652      	mov	r2, sl
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 8003a24:	01c0      	lsls	r0, r0, #7
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 8003a26:	01a4      	lsls	r4, r4, #6
 8003a28:	4060      	eors	r0, r4
 8003a2a:	4041      	eors	r1, r0
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8003a2c:	5c98      	ldrb	r0, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 8003a2e:	4662      	mov	r2, ip
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 8003a30:	016d      	lsls	r5, r5, #5
 8003a32:	4069      	eors	r1, r5
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 8003a34:	5c9d      	ldrb	r5, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 8003a36:	4642      	mov	r2, r8
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 8003a38:	013f      	lsls	r7, r7, #4
 8003a3a:	4079      	eors	r1, r7
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8003a3c:	00c0      	lsls	r0, r0, #3
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 8003a3e:	5c9f      	ldrb	r7, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8003a40:	4048      	eors	r0, r1
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 8003a42:	00ad      	lsls	r5, r5, #2
 8003a44:	4068      	eors	r0, r5
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 8003a46:	007f      	lsls	r7, r7, #1
 8003a48:	4078      	eors	r0, r7
 8003a4a:	b2c0      	uxtb	r0, r0
        if (crcreg == 0) {
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d006      	beq.n	8003a5e <hsc_decode+0x646>
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 8003a50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003a52:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003a54:	3201      	adds	r2, #1
 8003a56:	9215      	str	r2, [sp, #84]	; 0x54
 8003a58:	4291      	cmp	r1, r2
 8003a5a:	d000      	beq.n	8003a5e <hsc_decode+0x646>
 8003a5c:	e690      	b.n	8003780 <hsc_decode+0x368>
    }
    /// CRC Path Check Process Over

    /// Decoded Bytewise data stored in output[].
    return crcreg;
}
 8003a5e:	b019      	add	sp, #100	; 0x64
 8003a60:	bc3c      	pop	{r2, r3, r4, r5}
 8003a62:	4690      	mov	r8, r2
 8003a64:	4699      	mov	r9, r3
 8003a66:	46a2      	mov	sl, r4
 8003a68:	46ab      	mov	fp, r5
 8003a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003a6c:	464c      	mov	r4, r9
 8003a6e:	609c      	str	r4, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 8003a70:	465c      	mov	r4, fp
 8003a72:	2c03      	cmp	r4, #3
 8003a74:	d000      	beq.n	8003a78 <hsc_decode+0x660>
 8003a76:	e556      	b.n	8003526 <hsc_decode+0x10e>
 8003a78:	e557      	b.n	800352a <hsc_decode+0x112>
 8003a7a:	0010      	movs	r0, r2
            int max_lmd = maxlambda_lut[phi];
 8003a7c:	4be5      	ldr	r3, [pc, #916]	; (8003e14 <hsc_decode+0x9fc>)
                if (LLR(h)[1][l] < 0) {
 8003a7e:	4ae6      	ldr	r2, [pc, #920]	; (8003e18 <hsc_decode+0xa00>)
            int max_lmd = maxlambda_lut[phi];
 8003a80:	5c1b      	ldrb	r3, [r3, r0]
                if (LLR(h)[1][l] < 0) {
 8003a82:	6911      	ldr	r1, [r2, #16]
            int max_lmd = maxlambda_lut[phi];
 8003a84:	9303      	str	r3, [sp, #12]
            int min_lmd = minlambda_lut[phi];
 8003a86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003a88:	5c1b      	ldrb	r3, [r3, r0]
 8003a8a:	469a      	mov	sl, r3
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                if (LLR(h)[1][l] < 0) {
 8003a8e:	2900      	cmp	r1, #0
 8003a90:	da00      	bge.n	8003a94 <hsc_decode+0x67c>
 8003a92:	e2e1      	b.n	8004058 <hsc_decode+0xc40>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8003a94:	18c9      	adds	r1, r1, r3
 8003a96:	6539      	str	r1, [r7, #80]	; 0x50
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8003a98:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (int l=0; l<num_paths; l++) {
 8003a9a:	465b      	mov	r3, fp
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d01d      	beq.n	8003adc <hsc_decode+0x6c4>
                if (LLR(h)[1][l] < 0) {
 8003aa0:	6953      	ldr	r3, [r2, #20]
 8003aa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	da00      	bge.n	8003aaa <hsc_decode+0x692>
 8003aa8:	e2fb      	b.n	80040a2 <hsc_decode+0xc8a>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8003aaa:	185b      	adds	r3, r3, r1
 8003aac:	65bb      	str	r3, [r7, #88]	; 0x58
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8003aae:	6579      	str	r1, [r7, #84]	; 0x54
            for (int l=0; l<num_paths; l++) {
 8003ab0:	465b      	mov	r3, fp
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d012      	beq.n	8003adc <hsc_decode+0x6c4>
                if (LLR(h)[1][l] < 0) {
 8003ab6:	6993      	ldr	r3, [r2, #24]
 8003ab8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	da00      	bge.n	8003ac0 <hsc_decode+0x6a8>
 8003abe:	e2f4      	b.n	80040aa <hsc_decode+0xc92>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8003ac0:	185b      	adds	r3, r3, r1
 8003ac2:	663b      	str	r3, [r7, #96]	; 0x60
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8003ac4:	65f9      	str	r1, [r7, #92]	; 0x5c
            for (int l=0; l<num_paths; l++) {
 8003ac6:	465b      	mov	r3, fp
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d007      	beq.n	8003adc <hsc_decode+0x6c4>
                if (LLR(h)[1][l] < 0) {
 8003acc:	69d3      	ldr	r3, [r2, #28]
 8003ace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	da00      	bge.n	8003ad6 <hsc_decode+0x6be>
 8003ad4:	e334      	b.n	8004140 <hsc_decode+0xd28>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	66bb      	str	r3, [r7, #104]	; 0x68
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8003ada:	667a      	str	r2, [r7, #100]	; 0x64
            num_paths = num_paths * 2;
 8003adc:	465b      	mov	r3, fp
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	469b      	mov	fp, r3
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	236c      	movs	r3, #108	; 0x6c
    *(uint32_t*)&indexOut[0] = 0x03020100;
 8003ae6:	4acd      	ldr	r2, [pc, #820]	; (8003e1c <hsc_decode+0xa04>)
 8003ae8:	469c      	mov	ip, r3
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8003aea:	4bcd      	ldr	r3, [pc, #820]	; (8003e20 <hsc_decode+0xa08>)
    *(uint32_t*)&indexOut[0] = 0x03020100;
 8003aec:	66fa      	str	r2, [r7, #108]	; 0x6c
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8003aee:	673b      	str	r3, [r7, #112]	; 0x70
        gap    -= (gap > 1);
 8003af0:	2301      	movs	r3, #1
 8003af2:	2801      	cmp	r0, #1
 8003af4:	dc00      	bgt.n	8003af8 <hsc_decode+0x6e0>
 8003af6:	2300      	movs	r3, #0
 8003af8:	1ac0      	subs	r0, r0, r3
        sorted  = (gap == 1);
 8003afa:	1e46      	subs	r6, r0, #1
 8003afc:	4273      	negs	r3, r6
 8003afe:	415e      	adcs	r6, r3
 8003b00:	b2f6      	uxtb	r6, r6
        for (i=0, j=gap; j<length; i++, j++) {
 8003b02:	4583      	cmp	fp, r0
 8003b04:	ddf4      	ble.n	8003af0 <hsc_decode+0x6d8>
 8003b06:	003b      	movs	r3, r7
 8003b08:	465a      	mov	r2, fp
 8003b0a:	336c      	adds	r3, #108	; 0x6c
 8003b0c:	18d2      	adds	r2, r2, r3
 8003b0e:	1a12      	subs	r2, r2, r0
 8003b10:	46b0      	mov	r8, r6
 8003b12:	0016      	movs	r6, r2
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 8003b14:	781c      	ldrb	r4, [r3, #0]
 8003b16:	5c1d      	ldrb	r5, [r3, r0]
 8003b18:	00a1      	lsls	r1, r4, #2
 8003b1a:	00aa      	lsls	r2, r5, #2
 8003b1c:	1879      	adds	r1, r7, r1
 8003b1e:	18ba      	adds	r2, r7, r2
 8003b20:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003b22:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b24:	4291      	cmp	r1, r2
 8003b26:	dd03      	ble.n	8003b30 <hsc_decode+0x718>
                sorted      = false;
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4690      	mov	r8, r2
                indexOut[i] = indexOut[j];
 8003b2c:	701d      	strb	r5, [r3, #0]
                indexOut[j] = k;
 8003b2e:	541c      	strb	r4, [r3, r0]
 8003b30:	3301      	adds	r3, #1
        for (i=0, j=gap; j<length; i++, j++) {
 8003b32:	429e      	cmp	r6, r3
 8003b34:	d1ee      	bne.n	8003b14 <hsc_decode+0x6fc>
 8003b36:	4663      	mov	r3, ip
 8003b38:	4646      	mov	r6, r8
 8003b3a:	5cfa      	ldrb	r2, [r7, r3]
    } while (!sorted);
 8003b3c:	2e00      	cmp	r6, #0
 8003b3e:	d0d7      	beq.n	8003af0 <hsc_decode+0x6d8>
            if (num_paths > LISTSIZE) {
 8003b40:	465b      	mov	r3, fp
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	dd00      	ble.n	8003b48 <hsc_decode+0x730>
 8003b46:	e1fe      	b.n	8003f46 <hsc_decode+0xb2e>
 8003b48:	1e9d      	subs	r5, r3, #2
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8003b4a:	1e5c      	subs	r4, r3, #1
           chk2       |= (1<<k);
 8003b4c:	2301      	movs	r3, #1
       k = idx_a[i] >> 1;
 8003b4e:	0850      	lsrs	r0, r2, #1
           chk2       |= (1<<k);
 8003b50:	469c      	mov	ip, r3
 8003b52:	4083      	lsls	r3, r0
 8003b54:	4699      	mov	r9, r3
       k = idx_a[i] >> 1;
 8003b56:	003b      	movs	r3, r7
 8003b58:	336c      	adds	r3, #108	; 0x6c
 8003b5a:	7859      	ldrb	r1, [r3, #1]
       if ((chk2 & (1<<k)) == 0) {
 8003b5c:	26ff      	movs	r6, #255	; 0xff
 8003b5e:	464b      	mov	r3, r9
 8003b60:	401e      	ands	r6, r3
       k = idx_a[i] >> 1;
 8003b62:	084b      	lsrs	r3, r1, #1
 8003b64:	9307      	str	r3, [sp, #28]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	4698      	mov	r8, r3
       if ((chk2 & (1<<k)) == 0) {
 8003b6a:	411e      	asrs	r6, r3
 8003b6c:	4663      	mov	r3, ip
           pri[p_i--]  = k;
 8003b6e:	193c      	adds	r4, r7, r4
 8003b70:	3448      	adds	r4, #72	; 0x48
 8003b72:	7020      	strb	r0, [r4, #0]
           idx_b[k]    = idx_a[i];
 8003b74:	1838      	adds	r0, r7, r0
 8003b76:	3074      	adds	r0, #116	; 0x74
 8003b78:	7002      	strb	r2, [r0, #0]
       if ((chk2 & (1<<k)) == 0) {
 8003b7a:	4233      	tst	r3, r6
 8003b7c:	d000      	beq.n	8003b80 <hsc_decode+0x768>
 8003b7e:	e1e7      	b.n	8003f50 <hsc_decode+0xb38>
           chk2       |= (1<<k);
 8003b80:	4643      	mov	r3, r8
 8003b82:	4660      	mov	r0, ip
 8003b84:	4098      	lsls	r0, r3
           chk1       |= (1<<i);
 8003b86:	2303      	movs	r3, #3
 8003b88:	9300      	str	r3, [sp, #0]
           chk2       |= (1<<k);
 8003b8a:	464b      	mov	r3, r9
 8003b8c:	4318      	orrs	r0, r3
 8003b8e:	b2c3      	uxtb	r3, r0
 8003b90:	4699      	mov	r9, r3
           pri[p_i--]  = k;
 8003b92:	4643      	mov	r3, r8
 8003b94:	197d      	adds	r5, r7, r5
 8003b96:	3548      	adds	r5, #72	; 0x48
 8003b98:	702b      	strb	r3, [r5, #0]
           idx_b[k]    = idx_a[i];
 8003b9a:	18f8      	adds	r0, r7, r3
           pri[p_i--]  = k;
 8003b9c:	465b      	mov	r3, fp
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	2407      	movs	r4, #7
           idx_b[k]    = idx_a[i];
 8003ba2:	3074      	adds	r0, #116	; 0x74
 8003ba4:	7001      	strb	r1, [r0, #0]
           pri[p_i--]  = k;
 8003ba6:	1edd      	subs	r5, r3, #3
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8003ba8:	465b      	mov	r3, fp
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d029      	beq.n	8003c02 <hsc_decode+0x7ea>
       k = idx_a[i] >> 1;
 8003bae:	003a      	movs	r2, r7
       if ((chk2 & (1<<k)) == 0) {
 8003bb0:	4648      	mov	r0, r9
       k = idx_a[i] >> 1;
 8003bb2:	326c      	adds	r2, #108	; 0x6c
 8003bb4:	7893      	ldrb	r3, [r2, #2]
       if ((chk2 & (1<<k)) == 0) {
 8003bb6:	2201      	movs	r2, #1
       k = idx_a[i] >> 1;
 8003bb8:	085e      	lsrs	r6, r3, #1
       if ((chk2 & (1<<k)) == 0) {
 8003bba:	4130      	asrs	r0, r6
       k = idx_a[i] >> 1;
 8003bbc:	469c      	mov	ip, r3
       if ((chk2 & (1<<k)) == 0) {
 8003bbe:	4202      	tst	r2, r0
 8003bc0:	d10e      	bne.n	8003be0 <hsc_decode+0x7c8>
           chk2       |= (1<<k);
 8003bc2:	40b2      	lsls	r2, r6
 8003bc4:	464b      	mov	r3, r9
 8003bc6:	0010      	movs	r0, r2
 8003bc8:	4318      	orrs	r0, r3
 8003bca:	b2c3      	uxtb	r3, r0
 8003bcc:	4699      	mov	r9, r3
           idx_b[k]    = idx_a[i];
 8003bce:	4663      	mov	r3, ip
           pri[p_i--]  = k;
 8003bd0:	197a      	adds	r2, r7, r5
           chk1       |= (1<<i);
 8003bd2:	9400      	str	r4, [sp, #0]
           idx_b[k]    = idx_a[i];
 8003bd4:	19bc      	adds	r4, r7, r6
 8003bd6:	3474      	adds	r4, #116	; 0x74
           pri[p_i--]  = k;
 8003bd8:	3248      	adds	r2, #72	; 0x48
           idx_b[k]    = idx_a[i];
 8003bda:	7023      	strb	r3, [r4, #0]
           pri[p_i--]  = k;
 8003bdc:	7016      	strb	r6, [r2, #0]
 8003bde:	3d01      	subs	r5, #1
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8003be0:	465b      	mov	r3, fp
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d000      	beq.n	8003be8 <hsc_decode+0x7d0>
 8003be6:	e3de      	b.n	80043a6 <hsc_decode+0xf8e>
       k = idx_a[i] >> 1;
 8003be8:	003a      	movs	r2, r7
 8003bea:	326c      	adds	r2, #108	; 0x6c
 8003bec:	78d6      	ldrb	r6, [r2, #3]
       if ((chk2 & (1<<k)) == 0) {
 8003bee:	464a      	mov	r2, r9
       k = idx_a[i] >> 1;
 8003bf0:	0874      	lsrs	r4, r6, #1
       if ((chk2 & (1<<k)) == 0) {
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	4122      	asrs	r2, r4
 8003bf6:	4210      	tst	r0, r2
 8003bf8:	d100      	bne.n	8003bfc <hsc_decode+0x7e4>
 8003bfa:	e231      	b.n	8004060 <hsc_decode+0xc48>
 8003bfc:	9b00      	ldr	r3, [sp, #0]
 8003bfe:	085a      	lsrs	r2, r3, #1
 8003c00:	b2d2      	uxtb	r2, r2
    switch ((chk1>>1) & 7) {
 8003c02:	2a06      	cmp	r2, #6
 8003c04:	d900      	bls.n	8003c08 <hsc_decode+0x7f0>
 8003c06:	e244      	b.n	8004092 <hsc_decode+0xc7a>
 8003c08:	4886      	ldr	r0, [pc, #536]	; (8003e24 <hsc_decode+0xa0c>)
 8003c0a:	0092      	lsls	r2, r2, #2
 8003c0c:	5882      	ldr	r2, [r0, r2]
 8003c0e:	4697      	mov	pc, r2
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8003c10:	003b      	movs	r3, r7
 8003c12:	2464      	movs	r4, #100	; 0x64
 8003c14:	336c      	adds	r3, #108	; 0x6c
 8003c16:	789b      	ldrb	r3, [r3, #2]
                pri[0]          = j0[chk2];
 8003c18:	2248      	movs	r2, #72	; 0x48
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8003c1a:	4883      	ldr	r0, [pc, #524]	; (8003e28 <hsc_decode+0xa10>)
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	4448      	add	r0, r9
 8003c20:	5d00      	ldrb	r0, [r0, r4]
                pri[0]          = j0[chk2];
 8003c22:	54b8      	strb	r0, [r7, r2]
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8003c24:	1838      	adds	r0, r7, r0
 8003c26:	3074      	adds	r0, #116	; 0x74
 8003c28:	7003      	strb	r3, [r0, #0]
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	9307      	str	r3, [sp, #28]
                    switch (max_lmd-min_lmd) {
 8003c2e:	4654      	mov	r4, sl
 8003c30:	2601      	movs	r6, #1
 8003c32:	9803      	ldr	r0, [sp, #12]
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8003c34:	2500      	movs	r5, #0
                    switch (max_lmd-min_lmd) {
 8003c36:	1b03      	subs	r3, r0, r4
 8003c38:	9c05      	ldr	r4, [sp, #20]
 8003c3a:	0098      	lsls	r0, r3, #2
 8003c3c:	4026      	ands	r6, r4
 8003c3e:	1cb4      	adds	r4, r6, #2
 8003c40:	00a4      	lsls	r4, r4, #2
 8003c42:	9400      	str	r4, [sp, #0]
 8003c44:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8003c46:	9304      	str	r3, [sp, #16]
 8003c48:	46a2      	mov	sl, r4
                    switch (max_lmd) {
 8003c4a:	9b03      	ldr	r3, [sp, #12]
                    switch (max_lmd-min_lmd) {
 8003c4c:	4482      	add	sl, r0
                    switch (max_lmd) {
 8003c4e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4698      	mov	r8, r3
 8003c54:	4684      	mov	ip, r0
 8003c56:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c58:	9b03      	ldr	r3, [sp, #12]
 8003c5a:	44c4      	add	ip, r8
 8003c5c:	2248      	movs	r2, #72	; 0x48
 8003c5e:	4698      	mov	r8, r3
 8003c60:	000b      	movs	r3, r1
 8003c62:	4661      	mov	r1, ip
 8003c64:	960e      	str	r6, [sp, #56]	; 0x38
 8003c66:	002e      	movs	r6, r5
 8003c68:	9c05      	ldr	r4, [sp, #20]
 8003c6a:	5cba      	ldrb	r2, [r7, r2]
 8003c6c:	00a4      	lsls	r4, r4, #2
 8003c6e:	9807      	ldr	r0, [sp, #28]
 8003c70:	9401      	str	r4, [sp, #4]
 8003c72:	9103      	str	r1, [sp, #12]
                int lr  = INDEX(h)[l] >> 1;
 8003c74:	b2c0      	uxtb	r0, r0
                if (l != lr) {
 8003c76:	4282      	cmp	r2, r0
 8003c78:	d04f      	beq.n	8003d1a <hsc_decode+0x902>
                    switch (max_lmd-min_lmd) {
 8003c7a:	9904      	ldr	r1, [sp, #16]
 8003c7c:	2906      	cmp	r1, #6
 8003c7e:	d82c      	bhi.n	8003cda <hsc_decode+0x8c2>
 8003c80:	4651      	mov	r1, sl
 8003c82:	6809      	ldr	r1, [r1, #0]
 8003c84:	468f      	mov	pc, r1
            int max_lmd = maxlambda_lut[phi];
 8003c86:	4641      	mov	r1, r8
                        case 5: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003c88:	008c      	lsls	r4, r1, #2
 8003c8a:	193c      	adds	r4, r7, r4
 8003c8c:	1825      	adds	r5, r4, r0
 8003c8e:	7f2d      	ldrb	r5, [r5, #28]
 8003c90:	18a4      	adds	r4, r4, r2
 8003c92:	3901      	subs	r1, #1
 8003c94:	7725      	strb	r5, [r4, #28]
                        case 4: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003c96:	008c      	lsls	r4, r1, #2
 8003c98:	193c      	adds	r4, r7, r4
 8003c9a:	1825      	adds	r5, r4, r0
 8003c9c:	7f2d      	ldrb	r5, [r5, #28]
 8003c9e:	18a4      	adds	r4, r4, r2
 8003ca0:	3901      	subs	r1, #1
 8003ca2:	7725      	strb	r5, [r4, #28]
                        case 3: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003ca4:	008c      	lsls	r4, r1, #2
 8003ca6:	193c      	adds	r4, r7, r4
 8003ca8:	1825      	adds	r5, r4, r0
 8003caa:	7f2d      	ldrb	r5, [r5, #28]
 8003cac:	18a4      	adds	r4, r4, r2
 8003cae:	3901      	subs	r1, #1
 8003cb0:	7725      	strb	r5, [r4, #28]
                        case 2: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003cb2:	008c      	lsls	r4, r1, #2
 8003cb4:	193c      	adds	r4, r7, r4
 8003cb6:	1825      	adds	r5, r4, r0
 8003cb8:	7f2d      	ldrb	r5, [r5, #28]
 8003cba:	18a4      	adds	r4, r4, r2
 8003cbc:	3901      	subs	r1, #1
 8003cbe:	7725      	strb	r5, [r4, #28]
                        case 1: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003cc0:	008c      	lsls	r4, r1, #2
 8003cc2:	193c      	adds	r4, r7, r4
 8003cc4:	1825      	adds	r5, r4, r0
 8003cc6:	7f2d      	ldrb	r5, [r5, #28]
 8003cc8:	18a4      	adds	r4, r4, r2
 8003cca:	3901      	subs	r1, #1
 8003ccc:	7725      	strb	r5, [r4, #28]
                        case 0: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];
 8003cce:	0089      	lsls	r1, r1, #2
 8003cd0:	1879      	adds	r1, r7, r1
 8003cd2:	180c      	adds	r4, r1, r0
 8003cd4:	7f24      	ldrb	r4, [r4, #28]
 8003cd6:	1889      	adds	r1, r1, r2
 8003cd8:	770c      	strb	r4, [r1, #28]
                    switch (max_lmd) {
 8003cda:	4641      	mov	r1, r8
 8003cdc:	2906      	cmp	r1, #6
 8003cde:	d81c      	bhi.n	8003d1a <hsc_decode+0x902>
 8003ce0:	9903      	ldr	r1, [sp, #12]
 8003ce2:	6809      	ldr	r1, [r1, #0]
 8003ce4:	468f      	mov	pc, r1
                        case 6: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003ce6:	1839      	adds	r1, r7, r0
 8003ce8:	7e0c      	ldrb	r4, [r1, #24]
 8003cea:	18b9      	adds	r1, r7, r2
 8003cec:	760c      	strb	r4, [r1, #24]
                        case 5: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003cee:	1839      	adds	r1, r7, r0
 8003cf0:	7d0c      	ldrb	r4, [r1, #20]
 8003cf2:	18b9      	adds	r1, r7, r2
 8003cf4:	750c      	strb	r4, [r1, #20]
                        case 4: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003cf6:	1839      	adds	r1, r7, r0
 8003cf8:	7c0c      	ldrb	r4, [r1, #16]
 8003cfa:	18b9      	adds	r1, r7, r2
 8003cfc:	740c      	strb	r4, [r1, #16]
                        case 3: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003cfe:	1839      	adds	r1, r7, r0
 8003d00:	7b0c      	ldrb	r4, [r1, #12]
 8003d02:	18b9      	adds	r1, r7, r2
 8003d04:	730c      	strb	r4, [r1, #12]
                        case 2: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003d06:	1839      	adds	r1, r7, r0
 8003d08:	7a0c      	ldrb	r4, [r1, #8]
 8003d0a:	18b9      	adds	r1, r7, r2
 8003d0c:	720c      	strb	r4, [r1, #8]
                        case 1: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003d0e:	1839      	adds	r1, r7, r0
 8003d10:	790c      	ldrb	r4, [r1, #4]
 8003d12:	18b9      	adds	r1, r7, r2
 8003d14:	710c      	strb	r4, [r1, #4]
                        case 0: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];
 8003d16:	5c39      	ldrb	r1, [r7, r0]
 8003d18:	54b9      	strb	r1, [r7, r2]
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d1a:	2401      	movs	r4, #1
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8003d1c:	0099      	lsls	r1, r3, #2
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d1e:	401c      	ands	r4, r3
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d20:	01db      	lsls	r3, r3, #7
 8003d22:	4303      	orrs	r3, r0
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d24:	9802      	ldr	r0, [sp, #8]
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8003d26:	1879      	adds	r1, r7, r1
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d28:	4684      	mov	ip, r0
 8003d2a:	9800      	ldr	r0, [sp, #0]
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8003d2c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d2e:	4681      	mov	r9, r0
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8003d30:	0095      	lsls	r5, r2, #2
 8003d32:	197d      	adds	r5, r7, r5
 8003d34:	63a9      	str	r1, [r5, #56]	; 0x38
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d36:	9d01      	ldr	r5, [sp, #4]
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d38:	44cc      	add	ip, r9
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d3a:	46a9      	mov	r9, r5
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d3c:	4660      	mov	r0, ip
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d3e:	9906      	ldr	r1, [sp, #24]
            for (int ll=0; ll<num_paths; ll++) {
 8003d40:	3601      	adds	r6, #1
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d42:	4449      	add	r1, r9
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d44:	5484      	strb	r4, [r0, r2]
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d46:	548b      	strb	r3, [r1, r2]
            for (int ll=0; ll<num_paths; ll++) {
 8003d48:	455e      	cmp	r6, fp
 8003d4a:	d06f      	beq.n	8003e2c <hsc_decode+0xa14>
 8003d4c:	003a      	movs	r2, r7
 8003d4e:	2374      	movs	r3, #116	; 0x74
 8003d50:	3248      	adds	r2, #72	; 0x48
 8003d52:	5cb2      	ldrb	r2, [r6, r2]
 8003d54:	18b9      	adds	r1, r7, r2
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	0858      	lsrs	r0, r3, #1
 8003d5a:	e78b      	b.n	8003c74 <hsc_decode+0x85c>
            int max_lmd = maxlambda_lut[phi];
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	e79a      	b.n	8003c96 <hsc_decode+0x87e>
 8003d60:	4641      	mov	r1, r8
 8003d62:	e79f      	b.n	8003ca4 <hsc_decode+0x88c>
 8003d64:	4641      	mov	r1, r8
 8003d66:	e7a4      	b.n	8003cb2 <hsc_decode+0x89a>
 8003d68:	4641      	mov	r1, r8
 8003d6a:	e7a9      	b.n	8003cc0 <hsc_decode+0x8a8>
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	e7ae      	b.n	8003cce <hsc_decode+0x8b6>
                        case 6: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003d70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003d72:	1879      	adds	r1, r7, r1
 8003d74:	180c      	adds	r4, r1, r0
 8003d76:	7f24      	ldrb	r4, [r4, #28]
 8003d78:	1889      	adds	r1, r1, r2
 8003d7a:	770c      	strb	r4, [r1, #28]
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	3901      	subs	r1, #1
 8003d80:	e782      	b.n	8003c88 <hsc_decode+0x870>
        case 3: idx_b[j0[chk2]] = idx_a[3]; 
 8003d82:	003b      	movs	r3, r7
 8003d84:	336c      	adds	r3, #108	; 0x6c
 8003d86:	2464      	movs	r4, #100	; 0x64
 8003d88:	78db      	ldrb	r3, [r3, #3]
 8003d8a:	e745      	b.n	8003c18 <hsc_decode+0x800>
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8003d8c:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <hsc_decode+0xa10>)
 8003d8e:	2254      	movs	r2, #84	; 0x54
 8003d90:	0018      	movs	r0, r3
                idx_b[j0[chk2]] = idx_a[3]; 
 8003d92:	003b      	movs	r3, r7
 8003d94:	2664      	movs	r6, #100	; 0x64
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8003d96:	4448      	add	r0, r9
 8003d98:	5c82      	ldrb	r2, [r0, r2]
                idx_b[j0[chk2]] = idx_a[3]; 
 8003d9a:	336c      	adds	r3, #108	; 0x6c
 8003d9c:	78dd      	ldrb	r5, [r3, #3]
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8003d9e:	18bb      	adds	r3, r7, r2
 8003da0:	3374      	adds	r3, #116	; 0x74
 8003da2:	7019      	strb	r1, [r3, #0]
                idx_b[j0[chk2]] = idx_a[3]; 
 8003da4:	5d83      	ldrb	r3, [r0, r6]
                pri[1]          = j1[chk2];
 8003da6:	0038      	movs	r0, r7
 8003da8:	2448      	movs	r4, #72	; 0x48
 8003daa:	3048      	adds	r0, #72	; 0x48
 8003dac:	7042      	strb	r2, [r0, #1]
                idx_b[j0[chk2]] = idx_a[3]; 
 8003dae:	18fa      	adds	r2, r7, r3
 8003db0:	3274      	adds	r2, #116	; 0x74
                pri[0]          = j0[chk2];
 8003db2:	553b      	strb	r3, [r7, r4]
 8003db4:	086b      	lsrs	r3, r5, #1
 8003db6:	0029      	movs	r1, r5
                idx_b[j0[chk2]] = idx_a[3]; 
 8003db8:	7015      	strb	r5, [r2, #0]
 8003dba:	9307      	str	r3, [sp, #28]
 8003dbc:	e737      	b.n	8003c2e <hsc_decode+0x816>
                pri[1]          = j1[chk2];
 8003dbe:	2348      	movs	r3, #72	; 0x48
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003dc0:	003a      	movs	r2, r7
                pri[1]          = j1[chk2];
 8003dc2:	4698      	mov	r8, r3
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003dc4:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <hsc_decode+0xa10>)
 8003dc6:	2554      	movs	r5, #84	; 0x54
 8003dc8:	0018      	movs	r0, r3
                idx_b[j0[chk2]] = idx_a[3]; 
 8003dca:	2664      	movs	r6, #100	; 0x64
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003dcc:	326c      	adds	r2, #108	; 0x6c
                idx_b[j0[chk2]] = idx_a[3]; 
 8003dce:	78d4      	ldrb	r4, [r2, #3]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003dd0:	7892      	ldrb	r2, [r2, #2]
 8003dd2:	4448      	add	r0, r9
                idx_b[j0[chk2]] = idx_a[3]; 
 8003dd4:	5d83      	ldrb	r3, [r0, r6]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003dd6:	4694      	mov	ip, r2
 8003dd8:	5d42      	ldrb	r2, [r0, r5]
                pri[1]          = j1[chk2];
 8003dda:	0038      	movs	r0, r7
 8003ddc:	3048      	adds	r0, #72	; 0x48
 8003dde:	7042      	strb	r2, [r0, #1]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003de0:	4660      	mov	r0, ip
 8003de2:	18ba      	adds	r2, r7, r2
 8003de4:	3274      	adds	r2, #116	; 0x74
 8003de6:	7010      	strb	r0, [r2, #0]
                pri[0]          = j0[chk2];
 8003de8:	4640      	mov	r0, r8
                idx_b[j0[chk2]] = idx_a[3]; 
 8003dea:	18fa      	adds	r2, r7, r3
 8003dec:	3274      	adds	r2, #116	; 0x74
                pri[0]          = j0[chk2];
 8003dee:	543b      	strb	r3, [r7, r0]
 8003df0:	0863      	lsrs	r3, r4, #1
 8003df2:	0021      	movs	r1, r4
                idx_b[j0[chk2]] = idx_a[3]; 
 8003df4:	7014      	strb	r4, [r2, #0]
 8003df6:	9307      	str	r3, [sp, #28]
 8003df8:	e719      	b.n	8003c2e <hsc_decode+0x816>
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8003dfa:	2364      	movs	r3, #100	; 0x64
                pri[0]          = j0[chk2];
 8003dfc:	2248      	movs	r2, #72	; 0x48
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8003dfe:	480a      	ldr	r0, [pc, #40]	; (8003e28 <hsc_decode+0xa10>)
 8003e00:	4448      	add	r0, r9
 8003e02:	5cc0      	ldrb	r0, [r0, r3]
 8003e04:	084b      	lsrs	r3, r1, #1
                pri[0]          = j0[chk2];
 8003e06:	54b8      	strb	r0, [r7, r2]
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8003e08:	1838      	adds	r0, r7, r0
 8003e0a:	3074      	adds	r0, #116	; 0x74
 8003e0c:	9307      	str	r3, [sp, #28]
 8003e0e:	7001      	strb	r1, [r0, #0]
 8003e10:	e70d      	b.n	8003c2e <hsc_decode+0x816>
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	0800bb08 	.word	0x0800bb08
 8003e18:	20000974 	.word	0x20000974
 8003e1c:	03020100 	.word	0x03020100
 8003e20:	07060504 	.word	0x07060504
 8003e24:	0800b9ec 	.word	0x0800b9ec
 8003e28:	0800ba94 	.word	0x0800ba94
 8003e2c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
        if ((phi & 1) == 0) {
 8003e2e:	2e00      	cmp	r6, #0
 8003e30:	d100      	bne.n	8003e34 <hsc_decode+0xa1c>
 8003e32:	e468      	b.n	8003706 <hsc_decode+0x2ee>
            beta_laststage  = eminlambda_lut[phi];
 8003e34:	4bc9      	ldr	r3, [pc, #804]	; (800415c <hsc_decode+0xd44>)
 8003e36:	9a05      	ldr	r2, [sp, #20]
 8003e38:	5c9b      	ldrb	r3, [r3, r2]
 8003e3a:	9301      	str	r3, [sp, #4]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	9303      	str	r3, [sp, #12]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	dc00      	bgt.n	8003e46 <hsc_decode+0xa2e>
 8003e44:	e180      	b.n	8004148 <hsc_decode+0xd30>
 8003e46:	465b      	mov	r3, fp
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d100      	bne.n	8003e4e <hsc_decode+0xa36>
 8003e4c:	e138      	b.n	80040c0 <hsc_decode+0xca8>
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d100      	bne.n	8003e54 <hsc_decode+0xa3c>
 8003e52:	e18b      	b.n	800416c <hsc_decode+0xd54>
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d100      	bne.n	8003e5a <hsc_decode+0xa42>
 8003e58:	e245      	b.n	80042e6 <hsc_decode+0xece>
 8003e5a:	2306      	movs	r3, #6
 8003e5c:	4698      	mov	r8, r3
            next_pt         = 2;
 8003e5e:	3b04      	subs	r3, #4
 8003e60:	9307      	str	r3, [sp, #28]
            lmd0            = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	9304      	str	r3, [sp, #16]
 8003e66:	469c      	mov	ip, r3
 8003e68:	465b      	mov	r3, fp
 8003e6a:	930e      	str	r3, [sp, #56]	; 0x38
 8003e6c:	4643      	mov	r3, r8
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003e6e:	2002      	movs	r0, #2
 8003e70:	46b9      	mov	r9, r7
 8003e72:	4abb      	ldr	r2, [pc, #748]	; (8004160 <hsc_decode+0xd48>)
 8003e74:	9300      	str	r3, [sp, #0]
                int incval  = (beta < beta_laststage);
 8003e76:	9901      	ldr	r1, [sp, #4]
 8003e78:	2301      	movs	r3, #1
 8003e7a:	4281      	cmp	r1, r0
 8003e7c:	dc00      	bgt.n	8003e80 <hsc_decode+0xa68>
 8003e7e:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003e80:	9f02      	ldr	r7, [sp, #8]
 8003e82:	4665      	mov	r5, ip
 8003e84:	4649      	mov	r1, r9
 8003e86:	46b8      	mov	r8, r7
 8003e88:	5d49      	ldrb	r1, [r1, r5]
 8003e8a:	0084      	lsls	r4, r0, #2
 8003e8c:	4444      	add	r4, r8
 8003e8e:	5c65      	ldrb	r5, [r4, r1]
 8003e90:	7816      	ldrb	r6, [r2, #0]
                int bit0_i  = (beta*2) + incval;
 8003e92:	0041      	lsls	r1, r0, #1
 8003e94:	4688      	mov	r8, r1
 8003e96:	18c9      	adds	r1, r1, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003e98:	4075      	eors	r5, r6
 8003e9a:	0089      	lsls	r1, r1, #2
 8003e9c:	547d      	strb	r5, [r7, r1]
                int bit1_i  = ((beta+1)*2) + incval;
 8003e9e:	9d00      	ldr	r5, [sp, #0]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003ea0:	7816      	ldrb	r6, [r2, #0]
                int bit1_i  = ((beta+1)*2) + incval;
 8003ea2:	46aa      	mov	sl, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003ea4:	464d      	mov	r5, r9
 8003ea6:	4465      	add	r5, ip
 8003ea8:	786f      	ldrb	r7, [r5, #1]
                int bit1_i  = ((beta+1)*2) + incval;
 8003eaa:	4453      	add	r3, sl
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003eac:	46ba      	mov	sl, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003eae:	9f02      	ldr	r7, [sp, #8]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	54fe      	strb	r6, [r7, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003eb4:	7857      	ldrb	r7, [r2, #1]
 8003eb6:	4656      	mov	r6, sl
 8003eb8:	46ba      	mov	sl, r7
 8003eba:	9f02      	ldr	r7, [sp, #8]
 8003ebc:	5da6      	ldrb	r6, [r4, r6]
 8003ebe:	46bb      	mov	fp, r7
 8003ec0:	4657      	mov	r7, sl
 8003ec2:	4459      	add	r1, fp
 8003ec4:	407e      	eors	r6, r7
 8003ec6:	704e      	strb	r6, [r1, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003ec8:	7856      	ldrb	r6, [r2, #1]
 8003eca:	445b      	add	r3, fp
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003ecc:	78af      	ldrb	r7, [r5, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003ece:	705e      	strb	r6, [r3, #1]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003ed0:	5de6      	ldrb	r6, [r4, r7]
 8003ed2:	7897      	ldrb	r7, [r2, #2]
 8003ed4:	78ed      	ldrb	r5, [r5, #3]
 8003ed6:	407e      	eors	r6, r7
 8003ed8:	708e      	strb	r6, [r1, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003eda:	7896      	ldrb	r6, [r2, #2]
 8003edc:	709e      	strb	r6, [r3, #2]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003ede:	5d64      	ldrb	r4, [r4, r5]
 8003ee0:	78d5      	ldrb	r5, [r2, #3]
 8003ee2:	406c      	eors	r4, r5
 8003ee4:	70cc      	strb	r4, [r1, #3]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003ee6:	78d1      	ldrb	r1, [r2, #3]
 8003ee8:	70d9      	strb	r1, [r3, #3]
                if (beta == next_pt) {
 8003eea:	9b07      	ldr	r3, [sp, #28]
 8003eec:	4298      	cmp	r0, r3
 8003eee:	d010      	beq.n	8003f12 <hsc_decode+0xafa>
 8003ef0:	9b00      	ldr	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003ef2:	3002      	adds	r0, #2
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	3208      	adds	r2, #8
 8003efc:	4283      	cmp	r3, r0
 8003efe:	dcba      	bgt.n	8003e76 <hsc_decode+0xa5e>
 8003f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f02:	464f      	mov	r7, r9
 8003f04:	469b      	mov	fp, r3
 8003f06:	4663      	mov	r3, ip
 8003f08:	18fb      	adds	r3, r7, r3
            *(uint32_t*)PRIBIT(h)[lmd0] = 0x03020100;
 8003f0a:	4a96      	ldr	r2, [pc, #600]	; (8004164 <hsc_decode+0xd4c>)
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f7ff fbfc 	bl	800370a <hsc_decode+0x2f2>
                    next_pt = (next_pt << 1) + 2;
 8003f12:	4643      	mov	r3, r8
 8003f14:	3302      	adds	r3, #2
 8003f16:	9307      	str	r3, [sp, #28]
                    lmd0++;
 8003f18:	9b04      	ldr	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003f1a:	3002      	adds	r0, #2
                    lmd0++;
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	9304      	str	r3, [sp, #16]
 8003f20:	9b00      	ldr	r3, [sp, #0]
 8003f22:	3208      	adds	r2, #8
 8003f24:	3304      	adds	r3, #4
 8003f26:	9300      	str	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003f28:	9b03      	ldr	r3, [sp, #12]
 8003f2a:	4298      	cmp	r0, r3
 8003f2c:	db00      	blt.n	8003f30 <hsc_decode+0xb18>
 8003f2e:	e0c0      	b.n	80040b2 <hsc_decode+0xc9a>
 8003f30:	9b04      	ldr	r3, [sp, #16]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	469c      	mov	ip, r3
 8003f36:	e79e      	b.n	8003e76 <hsc_decode+0xa5e>
            switch (num_paths-1) {
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <hsc_decode+0xb28>
 8003f3c:	f7ff fbd2 	bl	80036e4 <hsc_decode+0x2cc>
 8003f40:	4a89      	ldr	r2, [pc, #548]	; (8004168 <hsc_decode+0xd50>)
 8003f42:	f7ff fbc9 	bl	80036d8 <hsc_decode+0x2c0>
                num_paths = LISTSIZE;
 8003f46:	2304      	movs	r3, #4
 8003f48:	2403      	movs	r4, #3
 8003f4a:	2502      	movs	r5, #2
 8003f4c:	469b      	mov	fp, r3
 8003f4e:	e5fd      	b.n	8003b4c <hsc_decode+0x734>
           chk2       |= (1<<k);
 8003f50:	464b      	mov	r3, r9
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	4699      	mov	r9, r3
 8003f56:	2301      	movs	r3, #1
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2405      	movs	r4, #5
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	e623      	b.n	8003ba8 <hsc_decode+0x790>
 8003f60:	4a81      	ldr	r2, [pc, #516]	; (8004168 <hsc_decode+0xd50>)
 8003f62:	f7ff fbad 	bl	80036c0 <hsc_decode+0x2a8>
 8003f66:	4a80      	ldr	r2, [pc, #512]	; (8004168 <hsc_decode+0xd50>)
 8003f68:	f7ff fbb0 	bl	80036cc <hsc_decode+0x2b4>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f6c:	9c04      	ldr	r4, [sp, #16]
 8003f6e:	4665      	mov	r5, ip
 8003f70:	00a4      	lsls	r4, r4, #2
 8003f72:	46a0      	mov	r8, r4
 8003f74:	9c00      	ldr	r4, [sp, #0]
 8003f76:	4445      	add	r5, r8
 8003f78:	7f2e      	ldrb	r6, [r5, #28]
 8003f7a:	1c65      	adds	r5, r4, #1
 8003f7c:	00a4      	lsls	r4, r4, #2
 8003f7e:	46a2      	mov	sl, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f80:	00ac      	lsls	r4, r5, #2
 8003f82:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f84:	4655      	mov	r5, sl
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f86:	940e      	str	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f88:	19ad      	adds	r5, r5, r6
 8003f8a:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f8c:	444e      	add	r6, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f8e:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f90:	00b6      	lsls	r6, r6, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f92:	5965      	ldr	r5, [r4, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f94:	59a6      	ldr	r6, [r4, r6]
					if (use_gfunc) {
 8003f96:	9c03      	ldr	r4, [sp, #12]
 8003f98:	2c00      	cmp	r4, #0
 8003f9a:	d000      	beq.n	8003f9e <hsc_decode+0xb86>
 8003f9c:	e143      	b.n	8004226 <hsc_decode+0xe0e>
    llr_t a_inv = -llr_layer_a;
 8003f9e:	426c      	negs	r4, r5
    if (llr_layer_a < llr_layer_b) {
 8003fa0:	42b5      	cmp	r5, r6
 8003fa2:	db00      	blt.n	8003fa6 <hsc_decode+0xb8e>
 8003fa4:	e205      	b.n	80043b2 <hsc_decode+0xf9a>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003fa6:	42a6      	cmp	r6, r4
 8003fa8:	dc00      	bgt.n	8003fac <hsc_decode+0xb94>
    llr_t b_inv = -llr_layer_b;
 8003faa:	4275      	negs	r5, r6
				for (int l=0; l<num_paths; l++) {
 8003fac:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003fae:	601d      	str	r5, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 8003fb0:	2c01      	cmp	r4, #1
 8003fb2:	d101      	bne.n	8003fb8 <hsc_decode+0xba0>
 8003fb4:	f7ff fab9 	bl	800352a <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003fb8:	4665      	mov	r5, ip
 8003fba:	4654      	mov	r4, sl
 8003fbc:	4445      	add	r5, r8
 8003fbe:	7f6e      	ldrb	r6, [r5, #29]
 8003fc0:	19a5      	adds	r5, r4, r6
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003fc2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003fc4:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003fc6:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003fc8:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003fca:	444e      	add	r6, r9
 8003fcc:	00b6      	lsls	r6, r6, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003fce:	5965      	ldr	r5, [r4, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003fd0:	59a6      	ldr	r6, [r4, r6]
    llr_t a_inv = -llr_layer_a;
 8003fd2:	426c      	negs	r4, r5
 8003fd4:	46a1      	mov	r9, r4
    if (llr_layer_a < llr_layer_b) {
 8003fd6:	42b5      	cmp	r5, r6
 8003fd8:	db00      	blt.n	8003fdc <hsc_decode+0xbc4>
 8003fda:	e1f0      	b.n	80043be <hsc_decode+0xfa6>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003fdc:	454e      	cmp	r6, r9
 8003fde:	dc00      	bgt.n	8003fe2 <hsc_decode+0xbca>
    llr_t b_inv = -llr_layer_b;
 8003fe0:	4275      	negs	r5, r6
				for (int l=0; l<num_paths; l++) {
 8003fe2:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003fe4:	605d      	str	r5, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 8003fe6:	2c02      	cmp	r4, #2
 8003fe8:	d101      	bne.n	8003fee <hsc_decode+0xbd6>
 8003fea:	f7ff fa9e 	bl	800352a <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003fee:	4665      	mov	r5, ip
 8003ff0:	4654      	mov	r4, sl
 8003ff2:	4445      	add	r5, r8
 8003ff4:	7fae      	ldrb	r6, [r5, #30]
 8003ff6:	19a5      	adds	r5, r4, r6
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003ff8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003ffa:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003ffc:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003ffe:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004000:	444e      	add	r6, r9
 8004002:	00b6      	lsls	r6, r6, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004004:	5965      	ldr	r5, [r4, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004006:	59a6      	ldr	r6, [r4, r6]
    llr_t a_inv = -llr_layer_a;
 8004008:	426c      	negs	r4, r5
 800400a:	46a1      	mov	r9, r4
    if (llr_layer_a < llr_layer_b) {
 800400c:	42ae      	cmp	r6, r5
 800400e:	dc00      	bgt.n	8004012 <hsc_decode+0xbfa>
 8004010:	e1e7      	b.n	80043e2 <hsc_decode+0xfca>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8004012:	454e      	cmp	r6, r9
 8004014:	dc00      	bgt.n	8004018 <hsc_decode+0xc00>
    llr_t b_inv = -llr_layer_b;
 8004016:	4275      	negs	r5, r6
				for (int l=0; l<num_paths; l++) {
 8004018:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 800401a:	609d      	str	r5, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 800401c:	2c03      	cmp	r4, #3
 800401e:	d101      	bne.n	8004024 <hsc_decode+0xc0c>
 8004020:	f7ff fa83 	bl	800352a <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004024:	4645      	mov	r5, r8
 8004026:	4654      	mov	r4, sl
 8004028:	4465      	add	r5, ip
 800402a:	7fee      	ldrb	r6, [r5, #31]
 800402c:	19a5      	adds	r5, r4, r6
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800402e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004030:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004032:	46a0      	mov	r8, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004034:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004036:	4446      	add	r6, r8
 8004038:	00b6      	lsls	r6, r6, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800403a:	5965      	ldr	r5, [r4, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800403c:	59a6      	ldr	r6, [r4, r6]
    llr_t a_inv = -llr_layer_a;
 800403e:	426c      	negs	r4, r5
 8004040:	46a0      	mov	r8, r4
    if (llr_layer_a < llr_layer_b) {
 8004042:	42ae      	cmp	r6, r5
 8004044:	dc00      	bgt.n	8004048 <hsc_decode+0xc30>
 8004046:	e1d2      	b.n	80043ee <hsc_decode+0xfd6>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8004048:	4546      	cmp	r6, r8
 800404a:	dd01      	ble.n	8004050 <hsc_decode+0xc38>
 800404c:	f7ff fac3 	bl	80035d6 <hsc_decode+0x1be>
    llr_t b_inv = -llr_layer_b;
 8004050:	4275      	negs	r5, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004052:	60dd      	str	r5, [r3, #12]
 8004054:	f7ff fac0 	bl	80035d8 <hsc_decode+0x1c0>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8004058:	1a59      	subs	r1, r3, r1
 800405a:	64f9      	str	r1, [r7, #76]	; 0x4c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 800405c:	653b      	str	r3, [r7, #80]	; 0x50
 800405e:	e51c      	b.n	8003a9a <hsc_decode+0x682>
 8004060:	2304      	movs	r3, #4
 8004062:	469c      	mov	ip, r3
 8004064:	9b00      	ldr	r3, [sp, #0]
           chk2       |= (1<<k);
 8004066:	40a0      	lsls	r0, r4
 8004068:	085a      	lsrs	r2, r3, #1
 800406a:	464b      	mov	r3, r9
 800406c:	4318      	orrs	r0, r3
           idx_b[k]    = idx_a[i];
 800406e:	193b      	adds	r3, r7, r4
 8004070:	4698      	mov	r8, r3
 8004072:	2374      	movs	r3, #116	; 0x74
 8004074:	4699      	mov	r9, r3
 8004076:	4663      	mov	r3, ip
 8004078:	44c8      	add	r8, r9
 800407a:	431a      	orrs	r2, r3
           chk2       |= (1<<k);
 800407c:	b2c3      	uxtb	r3, r0
 800407e:	4699      	mov	r9, r3
           idx_b[k]    = idx_a[i];
 8004080:	4643      	mov	r3, r8
           pri[p_i--]  = k;
 8004082:	197d      	adds	r5, r7, r5
 8004084:	3548      	adds	r5, #72	; 0x48
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	702c      	strb	r4, [r5, #0]
           idx_b[k]    = idx_a[i];
 800408a:	701e      	strb	r6, [r3, #0]
    switch ((chk1>>1) & 7) {
 800408c:	2a06      	cmp	r2, #6
 800408e:	d800      	bhi.n	8004092 <hsc_decode+0xc7a>
 8004090:	e5ba      	b.n	8003c08 <hsc_decode+0x7f0>
 8004092:	2348      	movs	r3, #72	; 0x48
 8004094:	003a      	movs	r2, r7
 8004096:	5cfb      	ldrb	r3, [r7, r3]
 8004098:	3274      	adds	r2, #116	; 0x74
 800409a:	5cd1      	ldrb	r1, [r2, r3]
 800409c:	084b      	lsrs	r3, r1, #1
 800409e:	9307      	str	r3, [sp, #28]
 80040a0:	e5c5      	b.n	8003c2e <hsc_decode+0x816>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 80040a2:	1acb      	subs	r3, r1, r3
 80040a4:	657b      	str	r3, [r7, #84]	; 0x54
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 80040a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80040a8:	e502      	b.n	8003ab0 <hsc_decode+0x698>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 80040aa:	1acb      	subs	r3, r1, r3
 80040ac:	65fb      	str	r3, [r7, #92]	; 0x5c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 80040ae:	6639      	str	r1, [r7, #96]	; 0x60
 80040b0:	e509      	b.n	8003ac6 <hsc_decode+0x6ae>
 80040b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040b4:	464f      	mov	r7, r9
 80040b6:	469b      	mov	fp, r3
 80040b8:	9b04      	ldr	r3, [sp, #16]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	469c      	mov	ip, r3
 80040be:	e722      	b.n	8003f06 <hsc_decode+0xaee>
            next_pt         = 2;
 80040c0:	3301      	adds	r3, #1
 80040c2:	4699      	mov	r9, r3
            lmd0            = 0;
 80040c4:	2300      	movs	r3, #0
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80040c6:	2606      	movs	r6, #6
 80040c8:	2202      	movs	r2, #2
 80040ca:	469c      	mov	ip, r3
 80040cc:	46ba      	mov	sl, r7
 80040ce:	4c24      	ldr	r4, [pc, #144]	; (8004160 <hsc_decode+0xd48>)
            lmd0            = 0;
 80040d0:	9304      	str	r3, [sp, #16]
                int incval  = (beta < beta_laststage);
 80040d2:	9901      	ldr	r1, [sp, #4]
 80040d4:	2301      	movs	r3, #1
 80040d6:	4291      	cmp	r1, r2
 80040d8:	dc00      	bgt.n	80040dc <hsc_decode+0xcc4>
 80040da:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80040dc:	4660      	mov	r0, ip
 80040de:	4655      	mov	r5, sl
 80040e0:	5c2d      	ldrb	r5, [r5, r0]
 80040e2:	9802      	ldr	r0, [sp, #8]
 80040e4:	0091      	lsls	r1, r2, #2
 80040e6:	4680      	mov	r8, r0
 80040e8:	4441      	add	r1, r8
 80040ea:	5d49      	ldrb	r1, [r1, r5]
 80040ec:	7820      	ldrb	r0, [r4, #0]
 80040ee:	4688      	mov	r8, r1
 80040f0:	4647      	mov	r7, r8
 80040f2:	0055      	lsls	r5, r2, #1
 80040f4:	18e9      	adds	r1, r5, r3
 80040f6:	4047      	eors	r7, r0
 80040f8:	9802      	ldr	r0, [sp, #8]
 80040fa:	0089      	lsls	r1, r1, #2
 80040fc:	5447      	strb	r7, [r0, r1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80040fe:	18f3      	adds	r3, r6, r3
 8004100:	7821      	ldrb	r1, [r4, #0]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	54c1      	strb	r1, [r0, r3]
                if (beta == next_pt) {
 8004106:	4591      	cmp	r9, r2
 8004108:	d007      	beq.n	800411a <hsc_decode+0xd02>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800410a:	9b03      	ldr	r3, [sp, #12]
 800410c:	3202      	adds	r2, #2
 800410e:	3604      	adds	r6, #4
 8004110:	3408      	adds	r4, #8
 8004112:	4293      	cmp	r3, r2
 8004114:	dcdd      	bgt.n	80040d2 <hsc_decode+0xcba>
 8004116:	4657      	mov	r7, sl
 8004118:	e6f5      	b.n	8003f06 <hsc_decode+0xaee>
                    next_pt = (next_pt << 1) + 2;
 800411a:	1cab      	adds	r3, r5, #2
 800411c:	4699      	mov	r9, r3
                    lmd0++;
 800411e:	9b04      	ldr	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004120:	3202      	adds	r2, #2
                    lmd0++;
 8004122:	3301      	adds	r3, #1
 8004124:	9304      	str	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004126:	9b03      	ldr	r3, [sp, #12]
 8004128:	3604      	adds	r6, #4
 800412a:	3408      	adds	r4, #8
 800412c:	429a      	cmp	r2, r3
 800412e:	db00      	blt.n	8004132 <hsc_decode+0xd1a>
 8004130:	e14b      	b.n	80043ca <hsc_decode+0xfb2>
 8004132:	9b04      	ldr	r3, [sp, #16]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	469c      	mov	ip, r3
 8004138:	e7cb      	b.n	80040d2 <hsc_decode+0xcba>
 800413a:	b249      	sxtb	r1, r1
 800413c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800413e:	e46a      	b.n	8003a16 <hsc_decode+0x5fe>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	667b      	str	r3, [r7, #100]	; 0x64
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8004144:	66ba      	str	r2, [r7, #104]	; 0x68
 8004146:	e4c9      	b.n	8003adc <hsc_decode+0x6c4>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004148:	003b      	movs	r3, r7
 800414a:	e6de      	b.n	8003f0a <hsc_decode+0xaf2>
        case 0: idx_b[1]    = idx_a[1]; 
 800414c:	003a      	movs	r2, r7
                pri[0]      = 1;
 800414e:	2048      	movs	r0, #72	; 0x48
 8004150:	2401      	movs	r4, #1
        case 0: idx_b[1]    = idx_a[1]; 
 8004152:	3274      	adds	r2, #116	; 0x74
                pri[0]      = 1;
 8004154:	543c      	strb	r4, [r7, r0]
        case 0: idx_b[1]    = idx_a[1]; 
 8004156:	7051      	strb	r1, [r2, #1]
 8004158:	e569      	b.n	8003c2e <hsc_decode+0x816>
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	0800bb88 	.word	0x0800bb88
 8004160:	20000580 	.word	0x20000580
 8004164:	03020100 	.word	0x03020100
 8004168:	20000974 	.word	0x20000974
            lmd0            = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	469c      	mov	ip, r3
 8004170:	9304      	str	r3, [sp, #16]
 8004172:	465b      	mov	r3, fp
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004174:	2606      	movs	r6, #6
 8004176:	930e      	str	r3, [sp, #56]	; 0x38
 8004178:	4663      	mov	r3, ip
 800417a:	2102      	movs	r1, #2
            next_pt         = 2;
 800417c:	46da      	mov	sl, fp
 800417e:	46b8      	mov	r8, r7
 8004180:	4ca7      	ldr	r4, [pc, #668]	; (8004420 <hsc_decode+0x1008>)
 8004182:	9600      	str	r6, [sp, #0]
 8004184:	9307      	str	r3, [sp, #28]
                int incval  = (beta < beta_laststage);
 8004186:	9a01      	ldr	r2, [sp, #4]
 8004188:	2301      	movs	r3, #1
 800418a:	428a      	cmp	r2, r1
 800418c:	dc00      	bgt.n	8004190 <hsc_decode+0xd78>
 800418e:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004190:	4642      	mov	r2, r8
 8004192:	9f07      	ldr	r7, [sp, #28]
 8004194:	0088      	lsls	r0, r1, #2
 8004196:	5dd2      	ldrb	r2, [r2, r7]
 8004198:	9f02      	ldr	r7, [sp, #8]
 800419a:	7825      	ldrb	r5, [r4, #0]
 800419c:	46bc      	mov	ip, r7
 800419e:	4460      	add	r0, ip
 80041a0:	5c82      	ldrb	r2, [r0, r2]
 80041a2:	4691      	mov	r9, r2
 80041a4:	464e      	mov	r6, r9
                int bit0_i  = (beta*2) + incval;
 80041a6:	004a      	lsls	r2, r1, #1
 80041a8:	4694      	mov	ip, r2
 80041aa:	18d2      	adds	r2, r2, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80041ac:	4075      	eors	r5, r6
 80041ae:	0092      	lsls	r2, r2, #2
 80041b0:	54bd      	strb	r5, [r7, r2]
                int bit1_i  = ((beta+1)*2) + incval;
 80041b2:	9d00      	ldr	r5, [sp, #0]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80041b4:	003e      	movs	r6, r7
                int bit1_i  = ((beta+1)*2) + incval;
 80041b6:	46a9      	mov	r9, r5
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80041b8:	7825      	ldrb	r5, [r4, #0]
                int bit1_i  = ((beta+1)*2) + incval;
 80041ba:	444b      	add	r3, r9
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80041bc:	46a9      	mov	r9, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80041be:	9f07      	ldr	r7, [sp, #28]
 80041c0:	4645      	mov	r5, r8
 80041c2:	46bb      	mov	fp, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80041c4:	464f      	mov	r7, r9
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80041c6:	46b1      	mov	r9, r6
 80041c8:	445d      	add	r5, fp
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80041ca:	009b      	lsls	r3, r3, #2
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80041cc:	786d      	ldrb	r5, [r5, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80041ce:	54f7      	strb	r7, [r6, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80041d0:	5d40      	ldrb	r0, [r0, r5]
 80041d2:	7865      	ldrb	r5, [r4, #1]
 80041d4:	444a      	add	r2, r9
 80041d6:	4068      	eors	r0, r5
 80041d8:	7050      	strb	r0, [r2, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80041da:	7862      	ldrb	r2, [r4, #1]
 80041dc:	444b      	add	r3, r9
 80041de:	705a      	strb	r2, [r3, #1]
                if (beta == next_pt) {
 80041e0:	4551      	cmp	r1, sl
 80041e2:	d00d      	beq.n	8004200 <hsc_decode+0xde8>
 80041e4:	9b00      	ldr	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80041e6:	3102      	adds	r1, #2
 80041e8:	3304      	adds	r3, #4
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	9b03      	ldr	r3, [sp, #12]
 80041ee:	3408      	adds	r4, #8
 80041f0:	428b      	cmp	r3, r1
 80041f2:	dcc8      	bgt.n	8004186 <hsc_decode+0xd6e>
 80041f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041f6:	4647      	mov	r7, r8
 80041f8:	469b      	mov	fp, r3
 80041fa:	9b07      	ldr	r3, [sp, #28]
 80041fc:	469c      	mov	ip, r3
 80041fe:	e682      	b.n	8003f06 <hsc_decode+0xaee>
                    next_pt = (next_pt << 1) + 2;
 8004200:	2302      	movs	r3, #2
 8004202:	4463      	add	r3, ip
 8004204:	469a      	mov	sl, r3
                    lmd0++;
 8004206:	9b04      	ldr	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004208:	3102      	adds	r1, #2
                    lmd0++;
 800420a:	3301      	adds	r3, #1
 800420c:	9304      	str	r3, [sp, #16]
 800420e:	9b00      	ldr	r3, [sp, #0]
 8004210:	3408      	adds	r4, #8
 8004212:	3304      	adds	r3, #4
 8004214:	9300      	str	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004216:	9b03      	ldr	r3, [sp, #12]
 8004218:	4299      	cmp	r1, r3
 800421a:	db00      	blt.n	800421e <hsc_decode+0xe06>
 800421c:	e0da      	b.n	80043d4 <hsc_decode+0xfbc>
 800421e:	9b04      	ldr	r3, [sp, #16]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	9307      	str	r3, [sp, #28]
 8004224:	e7af      	b.n	8004186 <hsc_decode+0xd6e>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004226:	4664      	mov	r4, ip
 8004228:	4647      	mov	r7, r8
 800422a:	5de4      	ldrb	r4, [r4, r7]
    if (bit_layer) {
 800422c:	5d04      	ldrb	r4, [r0, r4]
 800422e:	2c00      	cmp	r4, #0
 8004230:	d000      	beq.n	8004234 <hsc_decode+0xe1c>
        llr_layer_a = -llr_layer_a;
 8004232:	426d      	negs	r5, r5
				for (int l=0; l<num_paths; l++) {
 8004234:	465c      	mov	r4, fp
    return (llr_layer_b + llr_layer_a);
 8004236:	1975      	adds	r5, r6, r5
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004238:	601d      	str	r5, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 800423a:	2c01      	cmp	r4, #1
 800423c:	d101      	bne.n	8004242 <hsc_decode+0xe2a>
 800423e:	f7ff f974 	bl	800352a <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004242:	4666      	mov	r6, ip
 8004244:	4446      	add	r6, r8
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004246:	7874      	ldrb	r4, [r6, #1]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004248:	7f75      	ldrb	r5, [r6, #29]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800424a:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800424c:	4654      	mov	r4, sl
 800424e:	1966      	adds	r6, r4, r5
    if (bit_layer) {
 8004250:	464c      	mov	r4, r9
 8004252:	5d04      	ldrb	r4, [r0, r4]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004254:	00b6      	lsls	r6, r6, #2
    if (bit_layer) {
 8004256:	0027      	movs	r7, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004258:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800425a:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800425c:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800425e:	444d      	add	r5, r9
 8004260:	00ad      	lsls	r5, r5, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004262:	59a6      	ldr	r6, [r4, r6]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004264:	5965      	ldr	r5, [r4, r5]
    if (bit_layer) {
 8004266:	2f00      	cmp	r7, #0
 8004268:	d000      	beq.n	800426c <hsc_decode+0xe54>
        llr_layer_a = -llr_layer_a;
 800426a:	4276      	negs	r6, r6
				for (int l=0; l<num_paths; l++) {
 800426c:	465c      	mov	r4, fp
    return (llr_layer_b + llr_layer_a);
 800426e:	19ae      	adds	r6, r5, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004270:	605e      	str	r6, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 8004272:	2c02      	cmp	r4, #2
 8004274:	d101      	bne.n	800427a <hsc_decode+0xe62>
 8004276:	f7ff f958 	bl	800352a <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800427a:	4666      	mov	r6, ip
 800427c:	4446      	add	r6, r8
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800427e:	78b4      	ldrb	r4, [r6, #2]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004280:	7fb5      	ldrb	r5, [r6, #30]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004282:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004284:	4654      	mov	r4, sl
 8004286:	1966      	adds	r6, r4, r5
    if (bit_layer) {
 8004288:	464c      	mov	r4, r9
 800428a:	5d04      	ldrb	r4, [r0, r4]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800428c:	00b6      	lsls	r6, r6, #2
    if (bit_layer) {
 800428e:	0027      	movs	r7, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004290:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004292:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004294:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004296:	444d      	add	r5, r9
 8004298:	00ad      	lsls	r5, r5, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800429a:	59a6      	ldr	r6, [r4, r6]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800429c:	5965      	ldr	r5, [r4, r5]
    if (bit_layer) {
 800429e:	2f00      	cmp	r7, #0
 80042a0:	d000      	beq.n	80042a4 <hsc_decode+0xe8c>
        llr_layer_a = -llr_layer_a;
 80042a2:	4276      	negs	r6, r6
				for (int l=0; l<num_paths; l++) {
 80042a4:	465c      	mov	r4, fp
    return (llr_layer_b + llr_layer_a);
 80042a6:	19ae      	adds	r6, r5, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80042a8:	609e      	str	r6, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 80042aa:	2c03      	cmp	r4, #3
 80042ac:	d101      	bne.n	80042b2 <hsc_decode+0xe9a>
 80042ae:	f7ff f93c 	bl	800352a <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80042b2:	4646      	mov	r6, r8
 80042b4:	4466      	add	r6, ip
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80042b6:	78f4      	ldrb	r4, [r6, #3]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80042b8:	7ff5      	ldrb	r5, [r6, #31]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80042ba:	46a0      	mov	r8, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80042bc:	4654      	mov	r4, sl
 80042be:	1966      	adds	r6, r4, r5
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80042c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80042c2:	00b6      	lsls	r6, r6, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80042c4:	46a1      	mov	r9, r4
    if (bit_layer) {
 80042c6:	4644      	mov	r4, r8
 80042c8:	5d04      	ldrb	r4, [r0, r4]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80042ca:	444d      	add	r5, r9
    if (bit_layer) {
 80042cc:	46a0      	mov	r8, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80042ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80042d0:	00ad      	lsls	r5, r5, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80042d2:	59a6      	ldr	r6, [r4, r6]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80042d4:	5965      	ldr	r5, [r4, r5]
    if (bit_layer) {
 80042d6:	4644      	mov	r4, r8
 80042d8:	2c00      	cmp	r4, #0
 80042da:	d000      	beq.n	80042de <hsc_decode+0xec6>
        llr_layer_a = -llr_layer_a;
 80042dc:	4276      	negs	r6, r6
    return (llr_layer_b + llr_layer_a);
 80042de:	19ae      	adds	r6, r5, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80042e0:	60de      	str	r6, [r3, #12]
 80042e2:	f7ff f922 	bl	800352a <hsc_decode+0x112>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80042e6:	3303      	adds	r3, #3
 80042e8:	469a      	mov	sl, r3
            next_pt         = 2;
 80042ea:	3b04      	subs	r3, #4
 80042ec:	9307      	str	r3, [sp, #28]
            lmd0            = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	9304      	str	r3, [sp, #16]
 80042f2:	469c      	mov	ip, r3
 80042f4:	465b      	mov	r3, fp
 80042f6:	930e      	str	r3, [sp, #56]	; 0x38
 80042f8:	4653      	mov	r3, sl
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80042fa:	2402      	movs	r4, #2
 80042fc:	46b9      	mov	r9, r7
 80042fe:	4948      	ldr	r1, [pc, #288]	; (8004420 <hsc_decode+0x1008>)
 8004300:	9300      	str	r3, [sp, #0]
                int incval  = (beta < beta_laststage);
 8004302:	9a01      	ldr	r2, [sp, #4]
 8004304:	2301      	movs	r3, #1
 8004306:	42a2      	cmp	r2, r4
 8004308:	dc00      	bgt.n	800430c <hsc_decode+0xef4>
 800430a:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800430c:	9f02      	ldr	r7, [sp, #8]
 800430e:	4665      	mov	r5, ip
 8004310:	464a      	mov	r2, r9
 8004312:	46b8      	mov	r8, r7
 8004314:	5d52      	ldrb	r2, [r2, r5]
 8004316:	00a0      	lsls	r0, r4, #2
 8004318:	4440      	add	r0, r8
 800431a:	5c85      	ldrb	r5, [r0, r2]
 800431c:	780e      	ldrb	r6, [r1, #0]
                int bit0_i  = (beta*2) + incval;
 800431e:	0062      	lsls	r2, r4, #1
 8004320:	4690      	mov	r8, r2
 8004322:	18d2      	adds	r2, r2, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004324:	4075      	eors	r5, r6
 8004326:	0092      	lsls	r2, r2, #2
 8004328:	464e      	mov	r6, r9
 800432a:	54bd      	strb	r5, [r7, r2]
                int bit1_i  = ((beta+1)*2) + incval;
 800432c:	9d00      	ldr	r5, [sp, #0]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800432e:	4466      	add	r6, ip
                int bit1_i  = ((beta+1)*2) + incval;
 8004330:	46aa      	mov	sl, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004332:	7877      	ldrb	r7, [r6, #1]
                int bit1_i  = ((beta+1)*2) + incval;
 8004334:	4453      	add	r3, sl
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004336:	46ba      	mov	sl, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004338:	780d      	ldrb	r5, [r1, #0]
 800433a:	9f02      	ldr	r7, [sp, #8]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	54fd      	strb	r5, [r7, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004340:	784f      	ldrb	r7, [r1, #1]
 8004342:	4655      	mov	r5, sl
 8004344:	46ba      	mov	sl, r7
 8004346:	9f02      	ldr	r7, [sp, #8]
 8004348:	5d45      	ldrb	r5, [r0, r5]
 800434a:	46bb      	mov	fp, r7
 800434c:	4657      	mov	r7, sl
 800434e:	445a      	add	r2, fp
 8004350:	407d      	eors	r5, r7
 8004352:	7055      	strb	r5, [r2, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004354:	784d      	ldrb	r5, [r1, #1]
 8004356:	445b      	add	r3, fp
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004358:	78b6      	ldrb	r6, [r6, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800435a:	705d      	strb	r5, [r3, #1]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800435c:	5d80      	ldrb	r0, [r0, r6]
 800435e:	788d      	ldrb	r5, [r1, #2]
 8004360:	4068      	eors	r0, r5
 8004362:	7090      	strb	r0, [r2, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004364:	788a      	ldrb	r2, [r1, #2]
 8004366:	709a      	strb	r2, [r3, #2]
                if (beta == next_pt) {
 8004368:	9b07      	ldr	r3, [sp, #28]
 800436a:	429c      	cmp	r4, r3
 800436c:	d008      	beq.n	8004380 <hsc_decode+0xf68>
 800436e:	9b00      	ldr	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004370:	3402      	adds	r4, #2
 8004372:	3304      	adds	r3, #4
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	9b03      	ldr	r3, [sp, #12]
 8004378:	3108      	adds	r1, #8
 800437a:	42a3      	cmp	r3, r4
 800437c:	dcc1      	bgt.n	8004302 <hsc_decode+0xeea>
 800437e:	e5bf      	b.n	8003f00 <hsc_decode+0xae8>
                    next_pt = (next_pt << 1) + 2;
 8004380:	4643      	mov	r3, r8
 8004382:	3302      	adds	r3, #2
 8004384:	9307      	str	r3, [sp, #28]
                    lmd0++;
 8004386:	9b04      	ldr	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004388:	3402      	adds	r4, #2
                    lmd0++;
 800438a:	3301      	adds	r3, #1
 800438c:	9304      	str	r3, [sp, #16]
 800438e:	9b00      	ldr	r3, [sp, #0]
 8004390:	3108      	adds	r1, #8
 8004392:	3304      	adds	r3, #4
 8004394:	9300      	str	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004396:	9b03      	ldr	r3, [sp, #12]
 8004398:	429c      	cmp	r4, r3
 800439a:	db00      	blt.n	800439e <hsc_decode+0xf86>
 800439c:	e689      	b.n	80040b2 <hsc_decode+0xc9a>
 800439e:	9b04      	ldr	r3, [sp, #16]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	469c      	mov	ip, r3
 80043a4:	e7ad      	b.n	8004302 <hsc_decode+0xeea>
 80043a6:	9b00      	ldr	r3, [sp, #0]
 80043a8:	085a      	lsrs	r2, r3, #1
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 80043aa:	2303      	movs	r3, #3
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	469b      	mov	fp, r3
 80043b0:	e427      	b.n	8003c02 <hsc_decode+0x7ea>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 80043b2:	0035      	movs	r5, r6
 80043b4:	42a6      	cmp	r6, r4
 80043b6:	db00      	blt.n	80043ba <hsc_decode+0xfa2>
 80043b8:	e5f8      	b.n	8003fac <hsc_decode+0xb94>
 80043ba:	0025      	movs	r5, r4
 80043bc:	e5f6      	b.n	8003fac <hsc_decode+0xb94>
 80043be:	0035      	movs	r5, r6
 80043c0:	454e      	cmp	r6, r9
 80043c2:	db00      	blt.n	80043c6 <hsc_decode+0xfae>
 80043c4:	e60d      	b.n	8003fe2 <hsc_decode+0xbca>
 80043c6:	464d      	mov	r5, r9
 80043c8:	e60b      	b.n	8003fe2 <hsc_decode+0xbca>
 80043ca:	9b04      	ldr	r3, [sp, #16]
 80043cc:	4657      	mov	r7, sl
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	469c      	mov	ip, r3
 80043d2:	e598      	b.n	8003f06 <hsc_decode+0xaee>
 80043d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043d6:	4647      	mov	r7, r8
 80043d8:	469b      	mov	fp, r3
 80043da:	9b04      	ldr	r3, [sp, #16]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	469c      	mov	ip, r3
 80043e0:	e591      	b.n	8003f06 <hsc_decode+0xaee>
 80043e2:	0035      	movs	r5, r6
 80043e4:	454e      	cmp	r6, r9
 80043e6:	db00      	blt.n	80043ea <hsc_decode+0xfd2>
 80043e8:	e616      	b.n	8004018 <hsc_decode+0xc00>
 80043ea:	464d      	mov	r5, r9
 80043ec:	e614      	b.n	8004018 <hsc_decode+0xc00>
 80043ee:	0035      	movs	r5, r6
 80043f0:	4546      	cmp	r6, r8
 80043f2:	db01      	blt.n	80043f8 <hsc_decode+0xfe0>
 80043f4:	f7ff f8ef 	bl	80035d6 <hsc_decode+0x1be>
 80043f8:	4645      	mov	r5, r8
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80043fa:	60dd      	str	r5, [r3, #12]
 80043fc:	f7ff f8ec 	bl	80035d8 <hsc_decode+0x1c0>
        for (i=0, phi=0; phi<h->infobits; i++) {
 8004400:	225f      	movs	r2, #95	; 0x5f
 8004402:	4690      	mov	r8, r2
 8004404:	3210      	adds	r2, #16
 8004406:	4694      	mov	ip, r2
 8004408:	3208      	adds	r2, #8
 800440a:	4692      	mov	sl, r2
 800440c:	3204      	adds	r2, #4
 800440e:	4691      	mov	r9, r2
 8004410:	3203      	adds	r2, #3
 8004412:	9213      	str	r2, [sp, #76]	; 0x4c
 8004414:	3201      	adds	r2, #1
 8004416:	277d      	movs	r7, #125	; 0x7d
 8004418:	2100      	movs	r1, #0
 800441a:	9212      	str	r2, [sp, #72]	; 0x48
 800441c:	f7ff fafb 	bl	8003a16 <hsc_decode+0x5fe>
 8004420:	20000580 	.word	0x20000580

08004424 <hsc_decode_blockllr>:




uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 8004424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004426:	46de      	mov	lr, fp
 8004428:	4657      	mov	r7, sl
 800442a:	464e      	mov	r6, r9
 800442c:	4645      	mov	r5, r8
 800442e:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t crcreg;
    int i;
    int num_paths;

    /// Zero intermediate buffers
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 8004430:	4fc2      	ldr	r7, [pc, #776]	; (800473c <hsc_decode_blockllr+0x318>)
uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 8004432:	b099      	sub	sp, #100	; 0x64
 8004434:	900f      	str	r0, [sp, #60]	; 0x3c
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 8004436:	0038      	movs	r0, r7
uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 8004438:	9112      	str	r1, [sp, #72]	; 0x48
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 800443a:	301c      	adds	r0, #28
uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 800443c:	920a      	str	r2, [sp, #40]	; 0x28
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 800443e:	2100      	movs	r1, #0
 8004440:	2207      	movs	r2, #7
uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 8004442:	001c      	movs	r4, r3
 8004444:	9300      	str	r3, [sp, #0]
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 8004446:	f005 ff9d 	bl	800a384 <ot_memset_4>
    ot_memset_4(PRIBIT(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 800444a:	0038      	movs	r0, r7
 800444c:	2207      	movs	r2, #7
 800444e:	2100      	movs	r1, #0
 8004450:	f005 ff98 	bl	800a384 <ot_memset_4>
    ot_memset_4(PM(h), 0, LISTSIZE/4);
 8004454:	0038      	movs	r0, r7
 8004456:	2201      	movs	r2, #1
 8004458:	3038      	adds	r0, #56	; 0x38
 800445a:	2100      	movs	r1, #0
 800445c:	f005 ff92 	bl	800a384 <ot_memset_4>
    /// num_paths intializes as 1, will expand to LISTSIZE
    num_paths = 1;

    /// Outer Decoding Loop.
    /// Runs once per each bit in the Block (128 iteration)
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 8004460:	2100      	movs	r1, #0
    PRIORITY(h)[0] = 0;
 8004462:	2348      	movs	r3, #72	; 0x48
 8004464:	2200      	movs	r2, #0
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 8004466:	9106      	str	r1, [sp, #24]
    num_paths = 1;
 8004468:	3101      	adds	r1, #1
				int ibit	= beta_e & 7;
				int ibyte	= beta_e >> 3;
				uint8_t bit1= (inbytes[ibyte] >> ibit);
				uint8_t bit0= b1 & 1;
				bit1		= (bit1>>1) & 1;
				llr0 		= bit0 ? -blockllr : blockllr;
 800446a:	468b      	mov	fp, r1
 800446c:	48b4      	ldr	r0, [pc, #720]	; (8004740 <hsc_decode_blockllr+0x31c>)
    PRIORITY(h)[0] = 0;
 800446e:	54fa      	strb	r2, [r7, r3]
 8004470:	9011      	str	r0, [sp, #68]	; 0x44
 8004472:	48b4      	ldr	r0, [pc, #720]	; (8004744 <hsc_decode_blockllr+0x320>)
				llr0 		= bit0 ? -blockllr : blockllr;
 8004474:	4263      	negs	r3, r4
 8004476:	9003      	str	r0, [sp, #12]
 8004478:	48b3      	ldr	r0, [pc, #716]	; (8004748 <hsc_decode_blockllr+0x324>)
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	900b      	str	r0, [sp, #44]	; 0x2c
 800447e:	48b3      	ldr	r0, [pc, #716]	; (800474c <hsc_decode_blockllr+0x328>)
 8004480:	9b06      	ldr	r3, [sp, #24]
 8004482:	9010      	str	r0, [sp, #64]	; 0x40
                next_pt   >>= 1;
                use_gfunc   = phi & next_pt;

                if (--lmd0 >= 0) {
#                   if WORDIFY && (LISTSIZE==4)
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 8004484:	48b2      	ldr	r0, [pc, #712]	; (8004750 <hsc_decode_blockllr+0x32c>)
 8004486:	900c      	str	r0, [sp, #48]	; 0x30
#           endif

        }
        else {
            // calculate llr of each fork path
            int min_lmd = minlambda_lut[phi];
 8004488:	48b2      	ldr	r0, [pc, #712]	; (8004754 <hsc_decode_blockllr+0x330>)
 800448a:	9013      	str	r0, [sp, #76]	; 0x4c
                        case 1: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
                        case 0: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];
                       default: break;
                    }
                    lmd = max_lmd;
                    switch (max_lmd) {
 800448c:	48b2      	ldr	r0, [pc, #712]	; (8004758 <hsc_decode_blockllr+0x334>)
 800448e:	9014      	str	r0, [sp, #80]	; 0x50
                    switch (max_lmd-min_lmd) {
 8004490:	48b2      	ldr	r0, [pc, #712]	; (800475c <hsc_decode_blockllr+0x338>)
 8004492:	9015      	str	r0, [sp, #84]	; 0x54
        int next_pt     = (1 << lmd0);
 8004494:	2401      	movs	r4, #1
        int lmd0        = lambda_lut[phi];
 8004496:	9a11      	ldr	r2, [sp, #68]	; 0x44
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8004498:	2102      	movs	r1, #2
        int lmd0        = lambda_lut[phi];
 800449a:	5cd0      	ldrb	r0, [r2, r3]
        int next_pt     = (1 << lmd0);
 800449c:	4084      	lsls	r4, r0
        bool use_gfunc  = (bool)(phi & next_pt);
 800449e:	4023      	ands	r3, r4
 80044a0:	001a      	movs	r2, r3
 80044a2:	1e53      	subs	r3, r2, #1
 80044a4:	419a      	sbcs	r2, r3
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 80044a6:	4081      	lsls	r1, r0
        bool use_gfunc  = (bool)(phi & next_pt);
 80044a8:	b2d3      	uxtb	r3, r2
        int lmd0        = lambda_lut[phi];
 80044aa:	9005      	str	r0, [sp, #20]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 80044ac:	4688      	mov	r8, r1
        bool use_gfunc  = (bool)(phi & next_pt);
 80044ae:	9304      	str	r3, [sp, #16]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 80044b0:	2901      	cmp	r1, #1
 80044b2:	dd7b      	ble.n	80045ac <hsc_decode_blockllr+0x188>
 80044b4:	9810      	ldr	r0, [sp, #64]	; 0x40
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 80044b6:	465b      	mov	r3, fp
 80044b8:	4684      	mov	ip, r0
 80044ba:	49a9      	ldr	r1, [pc, #676]	; (8004760 <hsc_decode_blockllr+0x33c>)
 80044bc:	3b01      	subs	r3, #1
 80044be:	4441      	add	r1, r8
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	0109      	lsls	r1, r1, #4
 80044c4:	930d      	str	r3, [sp, #52]	; 0x34
 80044c6:	4461      	add	r1, ip
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 80044c8:	469c      	mov	ip, r3
 80044ca:	4643      	mov	r3, r8
 80044cc:	1e5d      	subs	r5, r3, #1
 80044ce:	4ba5      	ldr	r3, [pc, #660]	; (8004764 <hsc_decode_blockllr+0x340>)
 80044d0:	9702      	str	r7, [sp, #8]
 80044d2:	4443      	add	r3, r8
 80044d4:	9308      	str	r3, [sp, #32]
 80044d6:	4ba4      	ldr	r3, [pc, #656]	; (8004768 <hsc_decode_blockllr+0x344>)
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 80044d8:	2200      	movs	r2, #0
 80044da:	4443      	add	r3, r8
 80044dc:	9307      	str	r3, [sp, #28]
 80044de:	4643      	mov	r3, r8
 80044e0:	0027      	movs	r7, r4
 80044e2:	46a8      	mov	r8, r5
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 80044e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80044e6:	9309      	str	r3, [sp, #36]	; 0x24
 80044e8:	4460      	add	r0, ip
 80044ea:	900e      	str	r0, [sp, #56]	; 0x38
 80044ec:	4d9f      	ldr	r5, [pc, #636]	; (800476c <hsc_decode_blockllr+0x348>)
 80044ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f0:	46ac      	mov	ip, r5
 80044f2:	1a9c      	subs	r4, r3, r2
 80044f4:	9b08      	ldr	r3, [sp, #32]
 80044f6:	00e0      	lsls	r0, r4, #3
 80044f8:	1a9e      	subs	r6, r3, r2
 80044fa:	0075      	lsls	r5, r6, #1
 80044fc:	4460      	add	r0, ip
 80044fe:	46ac      	mov	ip, r5
 8004500:	4645      	mov	r5, r8
 8004502:	1aad      	subs	r5, r5, r2
 8004504:	46aa      	mov	sl, r5
			if (beta_x2 >= BLOCKLENGTH) {
 8004506:	4665      	mov	r5, ip
 8004508:	9b07      	ldr	r3, [sp, #28]
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	2d7f      	cmp	r5, #127	; 0x7f
 8004510:	dc01      	bgt.n	8004516 <hsc_decode_blockllr+0xf2>
 8004512:	f000 fd57 	bl	8004fc4 <hsc_decode_blockllr+0xba0>
				uint8_t bit1= (inbytes[ibyte] >> ibit);
 8004516:	9d0a      	ldr	r5, [sp, #40]	; 0x28
				int ibyte	= beta_e >> 3;
 8004518:	10dc      	asrs	r4, r3, #3
				uint8_t bit1= (inbytes[ibyte] >> ibit);
 800451a:	5d2c      	ldrb	r4, [r5, r4]
				int ibit	= beta_e & 7;
 800451c:	2507      	movs	r5, #7
 800451e:	402b      	ands	r3, r5
				uint8_t bit1= (inbytes[ibyte] >> ibit);
 8004520:	411c      	asrs	r4, r3
				llr1		= bit1 ? -blockllr : blockllr;
 8004522:	2302      	movs	r3, #2
 8004524:	4223      	tst	r3, r4
 8004526:	d100      	bne.n	800452a <hsc_decode_blockllr+0x106>
 8004528:	e258      	b.n	80049dc <hsc_decode_blockllr+0x5b8>
					if (use_gfunc) {
 800452a:	9d01      	ldr	r5, [sp, #4]
 800452c:	9c04      	ldr	r4, [sp, #16]
 800452e:	002b      	movs	r3, r5
 8004530:	2c00      	cmp	r4, #0
 8004532:	d100      	bne.n	8004536 <hsc_decode_blockllr+0x112>
 8004534:	e29c      	b.n	8004a70 <hsc_decode_blockllr+0x64c>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004536:	9c05      	ldr	r4, [sp, #20]
 8004538:	00a5      	lsls	r5, r4, #2
 800453a:	9c02      	ldr	r4, [sp, #8]
 800453c:	5d66      	ldrb	r6, [r4, r5]
    if (bit_layer) {
 800453e:	9c00      	ldr	r4, [sp, #0]
 8004540:	5d86      	ldrb	r6, [r0, r6]
 8004542:	2e00      	cmp	r6, #0
 8004544:	d100      	bne.n	8004548 <hsc_decode_blockllr+0x124>
 8004546:	9c01      	ldr	r4, [sp, #4]
    return (llr_layer_b + llr_layer_a);
 8004548:	191c      	adds	r4, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800454a:	600c      	str	r4, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 800454c:	465c      	mov	r4, fp
 800454e:	2c01      	cmp	r4, #1
 8004550:	d024      	beq.n	800459c <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004552:	9c02      	ldr	r4, [sp, #8]
 8004554:	1964      	adds	r4, r4, r5
 8004556:	7866      	ldrb	r6, [r4, #1]
    if (bit_layer) {
 8004558:	9c00      	ldr	r4, [sp, #0]
 800455a:	5d86      	ldrb	r6, [r0, r6]
 800455c:	2e00      	cmp	r6, #0
 800455e:	d100      	bne.n	8004562 <hsc_decode_blockllr+0x13e>
 8004560:	9c01      	ldr	r4, [sp, #4]
    return (llr_layer_b + llr_layer_a);
 8004562:	191c      	adds	r4, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004564:	604c      	str	r4, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 8004566:	465c      	mov	r4, fp
 8004568:	2c02      	cmp	r4, #2
 800456a:	d017      	beq.n	800459c <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800456c:	9c02      	ldr	r4, [sp, #8]
 800456e:	1964      	adds	r4, r4, r5
 8004570:	78a6      	ldrb	r6, [r4, #2]
    if (bit_layer) {
 8004572:	9c00      	ldr	r4, [sp, #0]
 8004574:	5d86      	ldrb	r6, [r0, r6]
 8004576:	2e00      	cmp	r6, #0
 8004578:	d100      	bne.n	800457c <hsc_decode_blockllr+0x158>
 800457a:	9c01      	ldr	r4, [sp, #4]
    return (llr_layer_b + llr_layer_a);
 800457c:	191c      	adds	r4, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800457e:	608c      	str	r4, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 8004580:	465c      	mov	r4, fp
 8004582:	2c03      	cmp	r4, #3
 8004584:	d00a      	beq.n	800459c <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004586:	9c02      	ldr	r4, [sp, #8]
 8004588:	46a4      	mov	ip, r4
 800458a:	4465      	add	r5, ip
 800458c:	78ed      	ldrb	r5, [r5, #3]
    if (bit_layer) {
 800458e:	9c00      	ldr	r4, [sp, #0]
 8004590:	5d40      	ldrb	r0, [r0, r5]
 8004592:	2800      	cmp	r0, #0
 8004594:	d100      	bne.n	8004598 <hsc_decode_blockllr+0x174>
 8004596:	9c01      	ldr	r4, [sp, #4]
    return (llr_layer_b + llr_layer_a);
 8004598:	191b      	adds	r3, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800459a:	60cb      	str	r3, [r1, #12]
            if (beta == next_pt) {
 800459c:	4557      	cmp	r7, sl
 800459e:	d100      	bne.n	80045a2 <hsc_decode_blockllr+0x17e>
 80045a0:	e249      	b.n	8004a36 <hsc_decode_blockllr+0x612>
 80045a2:	3201      	adds	r2, #1
 80045a4:	3910      	subs	r1, #16
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 80045a6:	4590      	cmp	r8, r2
 80045a8:	d1a0      	bne.n	80044ec <hsc_decode_blockllr+0xc8>
 80045aa:	9f02      	ldr	r7, [sp, #8]
        if (h->fbit[phi]) {
 80045ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045ae:	9a06      	ldr	r2, [sp, #24]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	5c9b      	ldrb	r3, [r3, r2]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d100      	bne.n	80045ba <hsc_decode_blockllr+0x196>
 80045b8:	e2f6      	b.n	8004ba8 <hsc_decode_blockllr+0x784>
            switch (num_paths-1) {
 80045ba:	465b      	mov	r3, fp
 80045bc:	3b01      	subs	r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <hsc_decode_blockllr+0x1a2>
 80045c2:	f000 fcfc 	bl	8004fbe <hsc_decode_blockllr+0xb9a>
 80045c6:	dc01      	bgt.n	80045cc <hsc_decode_blockllr+0x1a8>
 80045c8:	f000 fce2 	bl	8004f90 <hsc_decode_blockllr+0xb6c>
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d101      	bne.n	80045d4 <hsc_decode_blockllr+0x1b0>
 80045d0:	f000 fcf2 	bl	8004fb8 <hsc_decode_blockllr+0xb94>
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d118      	bne.n	800460a <hsc_decode_blockllr+0x1e6>
                case 3: if (LLR(h)[1][3] < 0) { PM(h)[3] -= LLR(h)[1][3]; }
 80045d8:	4a5c      	ldr	r2, [pc, #368]	; (800474c <hsc_decode_blockllr+0x328>)
 80045da:	69d3      	ldr	r3, [r2, #28]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da02      	bge.n	80045e6 <hsc_decode_blockllr+0x1c2>
 80045e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045e2:	1acb      	subs	r3, r1, r3
 80045e4:	647b      	str	r3, [r7, #68]	; 0x44
                case 2: if (LLR(h)[1][2] < 0) { PM(h)[2] -= LLR(h)[1][2]; }
 80045e6:	6993      	ldr	r3, [r2, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	da02      	bge.n	80045f2 <hsc_decode_blockllr+0x1ce>
 80045ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045ee:	1acb      	subs	r3, r1, r3
 80045f0:	643b      	str	r3, [r7, #64]	; 0x40
                case 1: if (LLR(h)[1][1] < 0) { PM(h)[1] -= LLR(h)[1][1]; }
 80045f2:	6953      	ldr	r3, [r2, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	da02      	bge.n	80045fe <hsc_decode_blockllr+0x1da>
 80045f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045fa:	1acb      	subs	r3, r1, r3
 80045fc:	63fb      	str	r3, [r7, #60]	; 0x3c
                case 0: if (LLR(h)[1][0] < 0) { PM(h)[0] -= LLR(h)[1][0]; }
 80045fe:	6913      	ldr	r3, [r2, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	da02      	bge.n	800460a <hsc_decode_blockllr+0x1e6>
 8004604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	63bb      	str	r3, [r7, #56]	; 0x38
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 800460a:	2601      	movs	r6, #1
 800460c:	9c03      	ldr	r4, [sp, #12]
 800460e:	2100      	movs	r1, #0
 8004610:	46a4      	mov	ip, r4
 8004612:	9806      	ldr	r0, [sp, #24]
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 8004614:	4a56      	ldr	r2, [pc, #344]	; (8004770 <hsc_decode_blockllr+0x34c>)
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 8004616:	4006      	ands	r6, r0
 8004618:	1cb3      	adds	r3, r6, #2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4463      	add	r3, ip
 800461e:	6019      	str	r1, [r3, #0]
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 8004620:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004622:	0083      	lsls	r3, r0, #2
 8004624:	50ca      	str	r2, [r1, r3]
            }
        }


        // update bit tree
        if ((phi & 1) == 0) {
 8004626:	2e00      	cmp	r6, #0
 8004628:	d000      	beq.n	800462c <hsc_decode_blockllr+0x208>
 800462a:	e24d      	b.n	8004ac8 <hsc_decode_blockllr+0x6a4>
#           if WORDIFY && (LISTSIZE==4)
            *(uint32_t*)PRIBIT(h)[0] = 0x03020100;
 800462c:	4b50      	ldr	r3, [pc, #320]	; (8004770 <hsc_decode_blockllr+0x34c>)
 800462e:	603b      	str	r3, [r7, #0]
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 8004630:	9b06      	ldr	r3, [sp, #24]
 8004632:	3301      	adds	r3, #1
 8004634:	9306      	str	r3, [sp, #24]
 8004636:	2b80      	cmp	r3, #128	; 0x80
 8004638:	d000      	beq.n	800463c <hsc_decode_blockllr+0x218>
 800463a:	e72b      	b.n	8004494 <hsc_decode_blockllr+0x70>
 800463c:	4658      	mov	r0, fp
    *(uint32_t*)&indexOut[0] = 0x03020100;
 800463e:	4a4c      	ldr	r2, [pc, #304]	; (8004770 <hsc_decode_blockllr+0x34c>)
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8004640:	4b4c      	ldr	r3, [pc, #304]	; (8004774 <hsc_decode_blockllr+0x350>)
 8004642:	9016      	str	r0, [sp, #88]	; 0x58
    *(uint32_t*)&indexOut[0] = 0x03020100;
 8004644:	677a      	str	r2, [r7, #116]	; 0x74
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8004646:	67bb      	str	r3, [r7, #120]	; 0x78
        gap    -= (gap > 1);
 8004648:	2301      	movs	r3, #1
 800464a:	2801      	cmp	r0, #1
 800464c:	dc00      	bgt.n	8004650 <hsc_decode_blockllr+0x22c>
 800464e:	2300      	movs	r3, #0
 8004650:	1ac0      	subs	r0, r0, r3
        sorted  = (gap == 1);
 8004652:	1e43      	subs	r3, r0, #1
 8004654:	425a      	negs	r2, r3
 8004656:	4153      	adcs	r3, r2
        for (i=0, j=gap; j<length; i++, j++) {
 8004658:	9a16      	ldr	r2, [sp, #88]	; 0x58
        sorted  = (gap == 1);
 800465a:	b2de      	uxtb	r6, r3
        for (i=0, j=gap; j<length; i++, j++) {
 800465c:	4282      	cmp	r2, r0
 800465e:	dd17      	ble.n	8004690 <hsc_decode_blockllr+0x26c>
 8004660:	003b      	movs	r3, r7
 8004662:	3374      	adds	r3, #116	; 0x74
 8004664:	18d2      	adds	r2, r2, r3
 8004666:	1a12      	subs	r2, r2, r0
 8004668:	46b4      	mov	ip, r6
 800466a:	0016      	movs	r6, r2
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 800466c:	781c      	ldrb	r4, [r3, #0]
 800466e:	5c1d      	ldrb	r5, [r3, r0]
 8004670:	00a1      	lsls	r1, r4, #2
 8004672:	00aa      	lsls	r2, r5, #2
 8004674:	1879      	adds	r1, r7, r1
 8004676:	18ba      	adds	r2, r7, r2
 8004678:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800467a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800467c:	4291      	cmp	r1, r2
 800467e:	dd03      	ble.n	8004688 <hsc_decode_blockllr+0x264>
                sorted      = false;
 8004680:	2200      	movs	r2, #0
 8004682:	4694      	mov	ip, r2
                indexOut[i] = indexOut[j];
 8004684:	701d      	strb	r5, [r3, #0]
                indexOut[j] = k;
 8004686:	541c      	strb	r4, [r3, r0]
 8004688:	3301      	adds	r3, #1
        for (i=0, j=gap; j<length; i++, j++) {
 800468a:	42b3      	cmp	r3, r6
 800468c:	d1ee      	bne.n	800466c <hsc_decode_blockllr+0x248>
 800468e:	4666      	mov	r6, ip
    } while (!sorted);
 8004690:	2e00      	cmp	r6, #0
 8004692:	d0d9      	beq.n	8004648 <hsc_decode_blockllr+0x224>

    /// CRC Path Check process
    /// The BITMEM buffer is reused here.  It is not needed anymore.
    ///@note DECMSG(h) replaced with BITMEM(h)
    crcreg = 0;
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 8004694:	2300      	movs	r3, #0
        int lp = INDEX(h)[correct_path];
        int phi;

        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
            DECMSG(h)[phi]    = MAP(h)[phi][lp] >> 7;
            lp                  = MAP(h)[phi][lp] & 0x7F;
 8004696:	267f      	movs	r6, #127	; 0x7f
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 8004698:	9315      	str	r3, [sp, #84]	; 0x54
        reg = CRCTABLE[reg ^ *block++];
 800469a:	4b37      	ldr	r3, [pc, #220]	; (8004778 <hsc_decode_blockllr+0x354>)
        int lp = INDEX(h)[correct_path];
 800469c:	3774      	adds	r7, #116	; 0x74
        reg = CRCTABLE[reg ^ *block++];
 800469e:	930e      	str	r3, [sp, #56]	; 0x38
        int lp = INDEX(h)[correct_path];
 80046a0:	9b03      	ldr	r3, [sp, #12]
 80046a2:	9717      	str	r7, [sp, #92]	; 0x5c
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 80046a4:	207f      	movs	r0, #127	; 0x7f
        int lp = INDEX(h)[correct_path];
 80046a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80046a8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80046aa:	5c89      	ldrb	r1, [r1, r2]
 80046ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            DECMSG(h)[phi]    = MAP(h)[phi][lp] >> 7;
 80046ae:	0084      	lsls	r4, r0, #2
 80046b0:	1914      	adds	r4, r2, r4
 80046b2:	5c61      	ldrb	r1, [r4, r1]
 80046b4:	09cc      	lsrs	r4, r1, #7
 80046b6:	541c      	strb	r4, [r3, r0]
            lp                  = MAP(h)[phi][lp] & 0x7F;
 80046b8:	4031      	ands	r1, r6
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 80046ba:	3801      	subs	r0, #1
 80046bc:	d2f7      	bcs.n	80046ae <hsc_decode_blockllr+0x28a>
        }

        /// Bytewise CRC compute.
        /// Requires loading the bit data into a byte buffer.
        /// On success, the successful bytewise decoding is in the output[]
        for (i=0, phi=0; phi<h->infobits; i++) {
 80046be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80046c0:	8891      	ldrh	r1, [r2, #4]
 80046c2:	2900      	cmp	r1, #0
 80046c4:	d101      	bne.n	80046ca <hsc_decode_blockllr+0x2a6>
 80046c6:	f000 feb4 	bl	8005432 <hsc_decode_blockllr+0x100e>
 80046ca:	223f      	movs	r2, #63	; 0x3f
 80046cc:	2479      	movs	r4, #121	; 0x79
 80046ce:	920a      	str	r2, [sp, #40]	; 0x28
 80046d0:	3240      	adds	r2, #64	; 0x40
 80046d2:	4691      	mov	r9, r2
 80046d4:	3a05      	subs	r2, #5
 80046d6:	9209      	str	r2, [sp, #36]	; 0x24
 80046d8:	4a28      	ldr	r2, [pc, #160]	; (800477c <hsc_decode_blockllr+0x358>)
 80046da:	9408      	str	r4, [sp, #32]
 80046dc:	9200      	str	r2, [sp, #0]
 80046de:	2201      	movs	r2, #1
 80046e0:	3404      	adds	r4, #4
 80046e2:	9404      	str	r4, [sp, #16]
 80046e4:	3c07      	subs	r4, #7
 80046e6:	9407      	str	r4, [sp, #28]
 80046e8:	3405      	adds	r4, #5
 80046ea:	9401      	str	r4, [sp, #4]
 80046ec:	3c06      	subs	r4, #6
 80046ee:	9406      	str	r4, [sp, #24]
 80046f0:	3402      	adds	r4, #2
 80046f2:	9402      	str	r4, [sp, #8]
 80046f4:	3c09      	subs	r4, #9
 80046f6:	940d      	str	r4, [sp, #52]	; 0x34
 80046f8:	3401      	adds	r4, #1
 80046fa:	9403      	str	r4, [sp, #12]
 80046fc:	3404      	adds	r4, #4
 80046fe:	4820      	ldr	r0, [pc, #128]	; (8004780 <hsc_decode_blockllr+0x35c>)
 8004700:	940c      	str	r4, [sp, #48]	; 0x30
 8004702:	3c14      	subs	r4, #20
 8004704:	9405      	str	r4, [sp, #20]
 8004706:	3414      	adds	r4, #20
 8004708:	46a0      	mov	r8, r4
 800470a:	1a12      	subs	r2, r2, r0
 800470c:	207e      	movs	r0, #126	; 0x7e
 800470e:	3c05      	subs	r4, #5
 8004710:	46a4      	mov	ip, r4
 8004712:	257a      	movs	r5, #122	; 0x7a
 8004714:	9310      	str	r3, [sp, #64]	; 0x40
 8004716:	9214      	str	r2, [sp, #80]	; 0x50
 8004718:	233f      	movs	r3, #63	; 0x3f
 800471a:	464a      	mov	r2, r9
 800471c:	4681      	mov	r9, r0
 800471e:	4640      	mov	r0, r8
 8004720:	3407      	adds	r4, #7
 8004722:	46a2      	mov	sl, r4
 8004724:	3401      	adds	r4, #1
 8004726:	46a3      	mov	fp, r4
 8004728:	3c37      	subs	r4, #55	; 0x37
 800472a:	9411      	str	r4, [sp, #68]	; 0x44
 800472c:	46a8      	mov	r8, r5
 800472e:	4664      	mov	r4, ip
 8004730:	0005      	movs	r5, r0
 8004732:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004734:	2779      	movs	r7, #121	; 0x79
 8004736:	469c      	mov	ip, r3
 8004738:	9810      	ldr	r0, [sp, #64]	; 0x40
 800473a:	e04b      	b.n	80047d4 <hsc_decode_blockllr+0x3b0>
 800473c:	200002fc 	.word	0x200002fc
 8004740:	0800bc88 	.word	0x0800bc88
 8004744:	20000574 	.word	0x20000574
 8004748:	20000374 	.word	0x20000374
 800474c:	20000974 	.word	0x20000974
 8004750:	0800c088 	.word	0x0800c088
 8004754:	0800bc08 	.word	0x0800bc08
 8004758:	0800ba78 	.word	0x0800ba78
 800475c:	0800ba5c 	.word	0x0800ba5c
 8004760:	0fffffff 	.word	0x0fffffff
 8004764:	7fffffff 	.word	0x7fffffff
 8004768:	7fffffbf 	.word	0x7fffffbf
 800476c:	2000056c 	.word	0x2000056c
 8004770:	03020100 	.word	0x03020100
 8004774:	07060504 	.word	0x07060504
 8004778:	0800bf88 	.word	0x0800bf88
 800477c:	0800be0f 	.word	0x0800be0f
 8004780:	0800be08 	.word	0x0800be08
 8004784:	9b00      	ldr	r3, [sp, #0]
 8004786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	469c      	mov	ip, r3
 800478c:	9b00      	ldr	r3, [sp, #0]
 800478e:	789b      	ldrb	r3, [r3, #2]
 8004790:	4698      	mov	r8, r3
 8004792:	9b00      	ldr	r3, [sp, #0]
 8004794:	78df      	ldrb	r7, [r3, #3]
 8004796:	791b      	ldrb	r3, [r3, #4]
 8004798:	469b      	mov	fp, r3
 800479a:	9b00      	ldr	r3, [sp, #0]
 800479c:	795b      	ldrb	r3, [r3, #5]
 800479e:	469a      	mov	sl, r3
 80047a0:	9b00      	ldr	r3, [sp, #0]
 80047a2:	799c      	ldrb	r4, [r3, #6]
 80047a4:	79dd      	ldrb	r5, [r3, #7]
 80047a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047a8:	950c      	str	r5, [sp, #48]	; 0x30
 80047aa:	9305      	str	r3, [sp, #20]
 80047ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047ae:	940d      	str	r4, [sp, #52]	; 0x34
 80047b0:	9303      	str	r3, [sp, #12]
 80047b2:	9b06      	ldr	r3, [sp, #24]
 80047b4:	9302      	str	r3, [sp, #8]
 80047b6:	9b07      	ldr	r3, [sp, #28]
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	9b08      	ldr	r3, [sp, #32]
 80047bc:	9708      	str	r7, [sp, #32]
 80047be:	9304      	str	r3, [sp, #16]
 80047c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c2:	4699      	mov	r9, r3
 80047c4:	4643      	mov	r3, r8
 80047c6:	9309      	str	r3, [sp, #36]	; 0x24
 80047c8:	4663      	mov	r3, ip
 80047ca:	930a      	str	r3, [sp, #40]	; 0x28
 80047cc:	465b      	mov	r3, fp
 80047ce:	9307      	str	r3, [sp, #28]
 80047d0:	4653      	mov	r3, sl
 80047d2:	9306      	str	r3, [sp, #24]
 80047d4:	4663      	mov	r3, ip
 80047d6:	9311      	str	r3, [sp, #68]	; 0x44
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 80047d8:	464b      	mov	r3, r9
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
 80047da:	5c82      	ldrb	r2, [r0, r2]
 80047dc:	01d2      	lsls	r2, r2, #7
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 80047e2:	5cc3      	ldrb	r3, [r0, r3]
 80047e4:	469c      	mov	ip, r3
 80047e6:	4643      	mov	r3, r8
 80047e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80047ea:	4663      	mov	r3, ip
 80047ec:	019b      	lsls	r3, r3, #6
 80047ee:	431a      	orrs	r2, r3
 80047f0:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 80047f2:	9b04      	ldr	r3, [sp, #16]
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 80047f4:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 80047f6:	5cc3      	ldrb	r3, [r0, r3]
 80047f8:	469c      	mov	ip, r3
 80047fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80047fc:	4699      	mov	r9, r3
 80047fe:	9b00      	ldr	r3, [sp, #0]
 8004800:	4698      	mov	r8, r3
 8004802:	4663      	mov	r3, ip
 8004804:	015b      	lsls	r3, r3, #5
 8004806:	431a      	orrs	r2, r3
 8004808:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 800480a:	9b01      	ldr	r3, [sp, #4]
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 800480c:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 800480e:	5cc3      	ldrb	r3, [r0, r3]
 8004810:	44c1      	add	r9, r8
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	431a      	orrs	r2, r3
 8004816:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 8004818:	9b02      	ldr	r3, [sp, #8]
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 800481a:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 800481c:	5cc3      	ldrb	r3, [r0, r3]
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	431a      	orrs	r2, r3
 8004822:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 8004824:	9b03      	ldr	r3, [sp, #12]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 8004826:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 8004828:	5cc3      	ldrb	r3, [r0, r3]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	431a      	orrs	r2, r3
 800482e:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 8004830:	9b05      	ldr	r3, [sp, #20]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 8004832:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 8004834:	5cc3      	ldrb	r3, [r0, r3]
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	431a      	orrs	r2, r3
 800483a:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 800483c:	9b00      	ldr	r3, [sp, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 800483e:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	5cc3      	ldrb	r3, [r0, r3]
 8004844:	469c      	mov	ip, r3
 8004846:	9b00      	ldr	r3, [sp, #0]
 8004848:	3308      	adds	r3, #8
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	4663      	mov	r3, ip
 800484e:	431a      	orrs	r2, r3
        for (i=0, phi=0; phi<h->infobits; i++) {
 8004850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 8004852:	700a      	strb	r2, [r1, #0]
        for (i=0, phi=0; phi<h->infobits; i++) {
 8004854:	889a      	ldrh	r2, [r3, #4]
 8004856:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004858:	1acb      	subs	r3, r1, r3
 800485a:	469c      	mov	ip, r3
 800485c:	3101      	adds	r1, #1
 800485e:	454a      	cmp	r2, r9
 8004860:	dc90      	bgt.n	8004784 <hsc_decode_blockllr+0x360>
 8004862:	4662      	mov	r2, ip
 8004864:	46a4      	mov	ip, r4
 8004866:	0014      	movs	r4, r2
        reg = CRCTABLE[reg ^ *block++];
 8004868:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800486a:	46d9      	mov	r9, fp
 800486c:	7811      	ldrb	r1, [r2, #0]
 800486e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004870:	46a8      	mov	r8, r5
 8004872:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004874:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8004876:	2c00      	cmp	r4, #0
 8004878:	dc01      	bgt.n	800487e <hsc_decode_blockllr+0x45a>
 800487a:	f000 fc83 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 800487e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004880:	7850      	ldrb	r0, [r2, #1]
 8004882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004884:	4041      	eors	r1, r0
 8004886:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8004888:	2c01      	cmp	r4, #1
 800488a:	d101      	bne.n	8004890 <hsc_decode_blockllr+0x46c>
 800488c:	f000 fc7a 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8004890:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004892:	7890      	ldrb	r0, [r2, #2]
 8004894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004896:	4041      	eors	r1, r0
 8004898:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 800489a:	2c02      	cmp	r4, #2
 800489c:	d101      	bne.n	80048a2 <hsc_decode_blockllr+0x47e>
 800489e:	f000 fc71 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80048a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048a4:	78d0      	ldrb	r0, [r2, #3]
 80048a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048a8:	4041      	eors	r1, r0
 80048aa:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80048ac:	2c03      	cmp	r4, #3
 80048ae:	d101      	bne.n	80048b4 <hsc_decode_blockllr+0x490>
 80048b0:	f000 fc68 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80048b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048b6:	7910      	ldrb	r0, [r2, #4]
 80048b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048ba:	4041      	eors	r1, r0
 80048bc:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80048be:	2c04      	cmp	r4, #4
 80048c0:	d101      	bne.n	80048c6 <hsc_decode_blockllr+0x4a2>
 80048c2:	f000 fc5f 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80048c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048c8:	7950      	ldrb	r0, [r2, #5]
 80048ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048cc:	4041      	eors	r1, r0
 80048ce:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80048d0:	2c05      	cmp	r4, #5
 80048d2:	d101      	bne.n	80048d8 <hsc_decode_blockllr+0x4b4>
 80048d4:	f000 fc56 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80048d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048da:	7990      	ldrb	r0, [r2, #6]
 80048dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048de:	4041      	eors	r1, r0
 80048e0:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80048e2:	2c06      	cmp	r4, #6
 80048e4:	d101      	bne.n	80048ea <hsc_decode_blockllr+0x4c6>
 80048e6:	f000 fc4d 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80048ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048ec:	79d0      	ldrb	r0, [r2, #7]
 80048ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048f0:	4041      	eors	r1, r0
 80048f2:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80048f4:	2c07      	cmp	r4, #7
 80048f6:	d101      	bne.n	80048fc <hsc_decode_blockllr+0x4d8>
 80048f8:	f000 fc44 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80048fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048fe:	7a10      	ldrb	r0, [r2, #8]
 8004900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004902:	4041      	eors	r1, r0
 8004904:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8004906:	2c08      	cmp	r4, #8
 8004908:	d101      	bne.n	800490e <hsc_decode_blockllr+0x4ea>
 800490a:	f000 fc3b 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 800490e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004910:	7a50      	ldrb	r0, [r2, #9]
 8004912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004914:	4041      	eors	r1, r0
 8004916:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8004918:	2c09      	cmp	r4, #9
 800491a:	d101      	bne.n	8004920 <hsc_decode_blockllr+0x4fc>
 800491c:	f000 fc32 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8004920:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004922:	7a90      	ldrb	r0, [r2, #10]
 8004924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004926:	4041      	eors	r1, r0
 8004928:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 800492a:	2c0a      	cmp	r4, #10
 800492c:	d101      	bne.n	8004932 <hsc_decode_blockllr+0x50e>
 800492e:	f000 fc29 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8004932:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004934:	7ad0      	ldrb	r0, [r2, #11]
 8004936:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004938:	4041      	eors	r1, r0
 800493a:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 800493c:	2c0b      	cmp	r4, #11
 800493e:	d101      	bne.n	8004944 <hsc_decode_blockllr+0x520>
 8004940:	f000 fc20 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8004944:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004946:	7b10      	ldrb	r0, [r2, #12]
 8004948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800494a:	4041      	eors	r1, r0
 800494c:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 800494e:	2c0c      	cmp	r4, #12
 8004950:	d101      	bne.n	8004956 <hsc_decode_blockllr+0x532>
 8004952:	f000 fc17 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8004956:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004958:	7b50      	ldrb	r0, [r2, #13]
 800495a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800495c:	4041      	eors	r1, r0
 800495e:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8004960:	2c0d      	cmp	r4, #13
 8004962:	d101      	bne.n	8004968 <hsc_decode_blockllr+0x544>
 8004964:	f000 fc0e 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8004968:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800496a:	7b90      	ldrb	r0, [r2, #14]
 800496c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800496e:	4041      	eors	r1, r0
 8004970:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8004972:	2c0f      	cmp	r4, #15
 8004974:	d001      	beq.n	800497a <hsc_decode_blockllr+0x556>
 8004976:	f000 fc05 	bl	8005184 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 800497a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800497c:	7bd0      	ldrb	r0, [r2, #15]
 800497e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004980:	4041      	eors	r1, r0
 8004982:	5651      	ldrsb	r1, [r2, r1]
 8004984:	9a11      	ldr	r2, [sp, #68]	; 0x44
        }

        crcreg  = crccalc(output, i);
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 8004986:	5c98      	ldrb	r0, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 8004988:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 800498a:	5ddd      	ldrb	r5, [r3, r7]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 800498c:	5c9c      	ldrb	r4, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 800498e:	464a      	mov	r2, r9
 8004990:	5c9f      	ldrb	r7, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8004992:	4652      	mov	r2, sl
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 8004994:	01a4      	lsls	r4, r4, #6
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 8004996:	01c0      	lsls	r0, r0, #7
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 8004998:	4060      	eors	r0, r4
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 800499a:	5c9c      	ldrb	r4, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 800499c:	4662      	mov	r2, ip
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 800499e:	4041      	eors	r1, r0
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 80049a0:	016d      	lsls	r5, r5, #5
 80049a2:	4069      	eors	r1, r5
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 80049a4:	5c9d      	ldrb	r5, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 80049a6:	4642      	mov	r2, r8
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 80049a8:	0138      	lsls	r0, r7, #4
 80049aa:	4048      	eors	r0, r1
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 80049ac:	00e4      	lsls	r4, r4, #3
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 80049ae:	5c99      	ldrb	r1, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 80049b0:	4060      	eors	r0, r4
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 80049b2:	00ad      	lsls	r5, r5, #2
 80049b4:	4068      	eors	r0, r5
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 80049b6:	0049      	lsls	r1, r1, #1
 80049b8:	4048      	eors	r0, r1
 80049ba:	b2c0      	uxtb	r0, r0
        if (crcreg == 0) {
 80049bc:	2800      	cmp	r0, #0
 80049be:	d006      	beq.n	80049ce <hsc_decode_blockllr+0x5aa>
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 80049c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80049c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80049c4:	3201      	adds	r2, #1
 80049c6:	9215      	str	r2, [sp, #84]	; 0x54
 80049c8:	4291      	cmp	r1, r2
 80049ca:	d000      	beq.n	80049ce <hsc_decode_blockllr+0x5aa>
 80049cc:	e66a      	b.n	80046a4 <hsc_decode_blockllr+0x280>
    }
    /// CRC Path Check Process Over

    /// Decoded Bytewise data stored in output[].
    return crcreg;
}
 80049ce:	b019      	add	sp, #100	; 0x64
 80049d0:	bc3c      	pop	{r2, r3, r4, r5}
 80049d2:	4690      	mov	r8, r2
 80049d4:	4699      	mov	r9, r3
 80049d6:	46a2      	mov	sl, r4
 80049d8:	46ab      	mov	fp, r5
 80049da:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (use_gfunc) {
 80049dc:	9b04      	ldr	r3, [sp, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d144      	bne.n	8004a6c <hsc_decode_blockllr+0x648>
    if (llr_layer_a < llr_layer_b) {
 80049e2:	9b00      	ldr	r3, [sp, #0]
 80049e4:	9801      	ldr	r0, [sp, #4]
 80049e6:	4283      	cmp	r3, r0
 80049e8:	dc01      	bgt.n	80049ee <hsc_decode_blockllr+0x5ca>
 80049ea:	f000 fd32 	bl	8005452 <hsc_decode_blockllr+0x102e>
				for (int l=0; l<num_paths; l++) {
 80049ee:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80049f0:	6008      	str	r0, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d100      	bne.n	80049f8 <hsc_decode_blockllr+0x5d4>
 80049f6:	e5d1      	b.n	800459c <hsc_decode_blockllr+0x178>
    llr_t b_inv = -llr_layer_b;
 80049f8:	9b00      	ldr	r3, [sp, #0]
 80049fa:	9c01      	ldr	r4, [sp, #4]
 80049fc:	0018      	movs	r0, r3
 80049fe:	001d      	movs	r5, r3
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8004a00:	429d      	cmp	r5, r3
 8004a02:	da52      	bge.n	8004aaa <hsc_decode_blockllr+0x686>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8004a04:	9d01      	ldr	r5, [sp, #4]
 8004a06:	604d      	str	r5, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 8004a08:	465d      	mov	r5, fp
 8004a0a:	2d02      	cmp	r5, #2
 8004a0c:	d100      	bne.n	8004a10 <hsc_decode_blockllr+0x5ec>
 8004a0e:	e5c5      	b.n	800459c <hsc_decode_blockllr+0x178>
    if (llr_layer_a < llr_layer_b) {
 8004a10:	9d01      	ldr	r5, [sp, #4]
 8004a12:	429d      	cmp	r5, r3
 8004a14:	db01      	blt.n	8004a1a <hsc_decode_blockllr+0x5f6>
 8004a16:	f000 fd22 	bl	800545e <hsc_decode_blockllr+0x103a>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8004a1a:	9800      	ldr	r0, [sp, #0]
 8004a1c:	4298      	cmp	r0, r3
 8004a1e:	da4c      	bge.n	8004aba <hsc_decode_blockllr+0x696>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8004a20:	9b01      	ldr	r3, [sp, #4]
 8004a22:	608b      	str	r3, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 8004a24:	001c      	movs	r4, r3
 8004a26:	465b      	mov	r3, fp
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d100      	bne.n	8004a2e <hsc_decode_blockllr+0x60a>
 8004a2c:	e5b6      	b.n	800459c <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8004a2e:	60cc      	str	r4, [r1, #12]
            if (beta == next_pt) {
 8004a30:	4557      	cmp	r7, sl
 8004a32:	d000      	beq.n	8004a36 <hsc_decode_blockllr+0x612>
 8004a34:	e5b5      	b.n	80045a2 <hsc_decode_blockllr+0x17e>
                use_gfunc   = phi & next_pt;
 8004a36:	9806      	ldr	r0, [sp, #24]
                next_pt   >>= 1;
 8004a38:	107f      	asrs	r7, r7, #1
                use_gfunc   = phi & next_pt;
 8004a3a:	4038      	ands	r0, r7
 8004a3c:	1e43      	subs	r3, r0, #1
 8004a3e:	4198      	sbcs	r0, r3
 8004a40:	b2c3      	uxtb	r3, r0
 8004a42:	9304      	str	r3, [sp, #16]
                if (--lmd0 >= 0) {
 8004a44:	9b05      	ldr	r3, [sp, #20]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	9305      	str	r3, [sp, #20]
 8004a4a:	d500      	bpl.n	8004a4e <hsc_decode_blockllr+0x62a>
 8004a4c:	e5a9      	b.n	80045a2 <hsc_decode_blockllr+0x17e>
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 8004a4e:	9c02      	ldr	r4, [sp, #8]
 8004a50:	9b05      	ldr	r3, [sp, #20]
 8004a52:	341c      	adds	r4, #28
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	18e4      	adds	r4, r4, r3
 8004a58:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a5c:	6825      	ldr	r5, [r4, #0]
 8004a5e:	58c3      	ldr	r3, [r0, r3]
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 8004a60:	980e      	ldr	r0, [sp, #56]	; 0x38
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 8004a62:	402b      	ands	r3, r5
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 8004a64:	6900      	ldr	r0, [r0, #16]
 8004a66:	4303      	orrs	r3, r0
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	e59a      	b.n	80045a2 <hsc_decode_blockllr+0x17e>
					if (use_gfunc) {
 8004a6c:	9b00      	ldr	r3, [sp, #0]
 8004a6e:	e562      	b.n	8004536 <hsc_decode_blockllr+0x112>
 8004a70:	9c00      	ldr	r4, [sp, #0]
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 8004a72:	0018      	movs	r0, r3
 8004a74:	42a3      	cmp	r3, r4
 8004a76:	da00      	bge.n	8004a7a <hsc_decode_blockllr+0x656>
 8004a78:	0020      	movs	r0, r4
				for (int l=0; l<num_paths; l++) {
 8004a7a:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8004a7c:	6008      	str	r0, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 8004a7e:	2c01      	cmp	r4, #1
 8004a80:	d100      	bne.n	8004a84 <hsc_decode_blockllr+0x660>
 8004a82:	e58b      	b.n	800459c <hsc_decode_blockllr+0x178>
    if (llr_layer_a < llr_layer_b) {
 8004a84:	9d01      	ldr	r5, [sp, #4]
    llr_t b_inv = -llr_layer_b;
 8004a86:	425c      	negs	r4, r3
    if (llr_layer_a < llr_layer_b) {
 8004a88:	42ab      	cmp	r3, r5
 8004a8a:	dd01      	ble.n	8004a90 <hsc_decode_blockllr+0x66c>
 8004a8c:	f000 fce4 	bl	8005458 <hsc_decode_blockllr+0x1034>
				for (int l=0; l<num_paths; l++) {
 8004a90:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8004a92:	6048      	str	r0, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 8004a94:	0004      	movs	r4, r0
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d100      	bne.n	8004a9c <hsc_decode_blockllr+0x678>
 8004a9a:	e57f      	b.n	800459c <hsc_decode_blockllr+0x178>
 8004a9c:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8004a9e:	6088      	str	r0, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d100      	bne.n	8004aa6 <hsc_decode_blockllr+0x682>
 8004aa4:	e57a      	b.n	800459c <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8004aa6:	60cc      	str	r4, [r1, #12]
 8004aa8:	e7c2      	b.n	8004a30 <hsc_decode_blockllr+0x60c>
				for (int l=0; l<num_paths; l++) {
 8004aaa:	4658      	mov	r0, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8004aac:	604c      	str	r4, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 8004aae:	2802      	cmp	r0, #2
 8004ab0:	d100      	bne.n	8004ab4 <hsc_decode_blockllr+0x690>
 8004ab2:	e573      	b.n	800459c <hsc_decode_blockllr+0x178>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8004ab4:	9800      	ldr	r0, [sp, #0]
 8004ab6:	4298      	cmp	r0, r3
 8004ab8:	dbb2      	blt.n	8004a20 <hsc_decode_blockllr+0x5fc>
				for (int l=0; l<num_paths; l++) {
 8004aba:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8004abc:	608c      	str	r4, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d100      	bne.n	8004ac4 <hsc_decode_blockllr+0x6a0>
 8004ac2:	e56b      	b.n	800459c <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8004ac4:	60cc      	str	r4, [r1, #12]
 8004ac6:	e7b3      	b.n	8004a30 <hsc_decode_blockllr+0x60c>
            beta_laststage  = eminlambda_lut[phi];
 8004ac8:	4bd3      	ldr	r3, [pc, #844]	; (8004e18 <hsc_decode_blockllr+0x9f4>)
 8004aca:	9a06      	ldr	r2, [sp, #24]
 8004acc:	5c9b      	ldrb	r3, [r3, r2]
 8004ace:	9304      	str	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	9305      	str	r3, [sp, #20]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	dc00      	bgt.n	8004ada <hsc_decode_blockllr+0x6b6>
 8004ad8:	e358      	b.n	800518c <hsc_decode_blockllr+0xd68>
 8004ada:	465b      	mov	r3, fp
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d100      	bne.n	8004ae2 <hsc_decode_blockllr+0x6be>
 8004ae0:	e30f      	b.n	8005102 <hsc_decode_blockllr+0xcde>
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d100      	bne.n	8004ae8 <hsc_decode_blockllr+0x6c4>
 8004ae6:	e35a      	b.n	800519e <hsc_decode_blockllr+0xd7a>
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	d101      	bne.n	8004af0 <hsc_decode_blockllr+0x6cc>
 8004aec:	f000 fc12 	bl	8005314 <hsc_decode_blockllr+0xef0>
 8004af0:	2306      	movs	r3, #6
 8004af2:	4698      	mov	r8, r3
            next_pt         = 2;
 8004af4:	3b04      	subs	r3, #4
 8004af6:	9308      	str	r3, [sp, #32]
            lmd0            = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	9307      	str	r3, [sp, #28]
 8004afc:	469c      	mov	ip, r3
 8004afe:	465b      	mov	r3, fp
 8004b00:	9309      	str	r3, [sp, #36]	; 0x24
 8004b02:	4643      	mov	r3, r8
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004b04:	2002      	movs	r0, #2
 8004b06:	46b9      	mov	r9, r7
 8004b08:	4ac4      	ldr	r2, [pc, #784]	; (8004e1c <hsc_decode_blockllr+0x9f8>)
 8004b0a:	9302      	str	r3, [sp, #8]
                int incval  = (beta < beta_laststage);
 8004b0c:	9904      	ldr	r1, [sp, #16]
 8004b0e:	2301      	movs	r3, #1
 8004b10:	4281      	cmp	r1, r0
 8004b12:	dc00      	bgt.n	8004b16 <hsc_decode_blockllr+0x6f2>
 8004b14:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004b16:	9f03      	ldr	r7, [sp, #12]
 8004b18:	4665      	mov	r5, ip
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	46b8      	mov	r8, r7
 8004b1e:	5d49      	ldrb	r1, [r1, r5]
 8004b20:	0084      	lsls	r4, r0, #2
 8004b22:	4444      	add	r4, r8
 8004b24:	5c65      	ldrb	r5, [r4, r1]
 8004b26:	7816      	ldrb	r6, [r2, #0]
                int bit0_i  = (beta*2) + incval;
 8004b28:	0041      	lsls	r1, r0, #1
 8004b2a:	4688      	mov	r8, r1
 8004b2c:	18c9      	adds	r1, r1, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004b2e:	4075      	eors	r5, r6
 8004b30:	0089      	lsls	r1, r1, #2
 8004b32:	547d      	strb	r5, [r7, r1]
                int bit1_i  = ((beta+1)*2) + incval;
 8004b34:	9d02      	ldr	r5, [sp, #8]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004b36:	7816      	ldrb	r6, [r2, #0]
                int bit1_i  = ((beta+1)*2) + incval;
 8004b38:	46aa      	mov	sl, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004b3a:	464d      	mov	r5, r9
 8004b3c:	4465      	add	r5, ip
 8004b3e:	786f      	ldrb	r7, [r5, #1]
                int bit1_i  = ((beta+1)*2) + incval;
 8004b40:	4453      	add	r3, sl
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004b42:	46ba      	mov	sl, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004b44:	9f03      	ldr	r7, [sp, #12]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	54fe      	strb	r6, [r7, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004b4a:	7857      	ldrb	r7, [r2, #1]
 8004b4c:	4656      	mov	r6, sl
 8004b4e:	46ba      	mov	sl, r7
 8004b50:	9f03      	ldr	r7, [sp, #12]
 8004b52:	5da6      	ldrb	r6, [r4, r6]
 8004b54:	46bb      	mov	fp, r7
 8004b56:	4657      	mov	r7, sl
 8004b58:	4459      	add	r1, fp
 8004b5a:	407e      	eors	r6, r7
 8004b5c:	704e      	strb	r6, [r1, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004b5e:	7856      	ldrb	r6, [r2, #1]
 8004b60:	445b      	add	r3, fp
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004b62:	78af      	ldrb	r7, [r5, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004b64:	705e      	strb	r6, [r3, #1]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004b66:	5de6      	ldrb	r6, [r4, r7]
 8004b68:	7897      	ldrb	r7, [r2, #2]
 8004b6a:	78ed      	ldrb	r5, [r5, #3]
 8004b6c:	407e      	eors	r6, r7
 8004b6e:	708e      	strb	r6, [r1, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004b70:	7896      	ldrb	r6, [r2, #2]
 8004b72:	709e      	strb	r6, [r3, #2]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004b74:	5d64      	ldrb	r4, [r4, r5]
 8004b76:	78d5      	ldrb	r5, [r2, #3]
 8004b78:	406c      	eors	r4, r5
 8004b7a:	70cc      	strb	r4, [r1, #3]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004b7c:	78d1      	ldrb	r1, [r2, #3]
 8004b7e:	70d9      	strb	r1, [r3, #3]
                if (beta == next_pt) {
 8004b80:	9b08      	ldr	r3, [sp, #32]
 8004b82:	4298      	cmp	r0, r3
 8004b84:	d100      	bne.n	8004b88 <hsc_decode_blockllr+0x764>
 8004b86:	e1f0      	b.n	8004f6a <hsc_decode_blockllr+0xb46>
 8004b88:	9b02      	ldr	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004b8a:	3002      	adds	r0, #2
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	9302      	str	r3, [sp, #8]
 8004b90:	9b05      	ldr	r3, [sp, #20]
 8004b92:	3208      	adds	r2, #8
 8004b94:	4283      	cmp	r3, r0
 8004b96:	dcb9      	bgt.n	8004b0c <hsc_decode_blockllr+0x6e8>
 8004b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b9a:	464f      	mov	r7, r9
 8004b9c:	469b      	mov	fp, r3
 8004b9e:	4663      	mov	r3, ip
 8004ba0:	18fb      	adds	r3, r7, r3
            *(uint32_t*)PRIBIT(h)[lmd0] = 0x03020100;
 8004ba2:	4a9f      	ldr	r2, [pc, #636]	; (8004e20 <hsc_decode_blockllr+0x9fc>)
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e543      	b.n	8004630 <hsc_decode_blockllr+0x20c>
 8004ba8:	0010      	movs	r0, r2
            int max_lmd = maxlambda_lut[phi];
 8004baa:	4b9e      	ldr	r3, [pc, #632]	; (8004e24 <hsc_decode_blockllr+0xa00>)
                if (LLR(h)[1][l] < 0) {
 8004bac:	4a9e      	ldr	r2, [pc, #632]	; (8004e28 <hsc_decode_blockllr+0xa04>)
            int max_lmd = maxlambda_lut[phi];
 8004bae:	5c1b      	ldrb	r3, [r3, r0]
                if (LLR(h)[1][l] < 0) {
 8004bb0:	6911      	ldr	r1, [r2, #16]
            int max_lmd = maxlambda_lut[phi];
 8004bb2:	9305      	str	r3, [sp, #20]
            int min_lmd = minlambda_lut[phi];
 8004bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004bb6:	5c1b      	ldrb	r3, [r3, r0]
 8004bb8:	469a      	mov	sl, r3
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                if (LLR(h)[1][l] < 0) {
 8004bbc:	2900      	cmp	r1, #0
 8004bbe:	da00      	bge.n	8004bc2 <hsc_decode_blockllr+0x79e>
 8004bc0:	e26b      	b.n	800509a <hsc_decode_blockllr+0xc76>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8004bc2:	18c9      	adds	r1, r1, r3
 8004bc4:	6539      	str	r1, [r7, #80]	; 0x50
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8004bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (int l=0; l<num_paths; l++) {
 8004bc8:	465b      	mov	r3, fp
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d01d      	beq.n	8004c0a <hsc_decode_blockllr+0x7e6>
                if (LLR(h)[1][l] < 0) {
 8004bce:	6953      	ldr	r3, [r2, #20]
 8004bd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	da00      	bge.n	8004bd8 <hsc_decode_blockllr+0x7b4>
 8004bd6:	e285      	b.n	80050e4 <hsc_decode_blockllr+0xcc0>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8004bd8:	185b      	adds	r3, r3, r1
 8004bda:	65bb      	str	r3, [r7, #88]	; 0x58
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8004bdc:	6579      	str	r1, [r7, #84]	; 0x54
            for (int l=0; l<num_paths; l++) {
 8004bde:	465b      	mov	r3, fp
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d012      	beq.n	8004c0a <hsc_decode_blockllr+0x7e6>
                if (LLR(h)[1][l] < 0) {
 8004be4:	6993      	ldr	r3, [r2, #24]
 8004be6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	da00      	bge.n	8004bee <hsc_decode_blockllr+0x7ca>
 8004bec:	e27e      	b.n	80050ec <hsc_decode_blockllr+0xcc8>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8004bee:	185b      	adds	r3, r3, r1
 8004bf0:	663b      	str	r3, [r7, #96]	; 0x60
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8004bf2:	65f9      	str	r1, [r7, #92]	; 0x5c
            for (int l=0; l<num_paths; l++) {
 8004bf4:	465b      	mov	r3, fp
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d007      	beq.n	8004c0a <hsc_decode_blockllr+0x7e6>
                if (LLR(h)[1][l] < 0) {
 8004bfa:	69d3      	ldr	r3, [r2, #28]
 8004bfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da00      	bge.n	8004c04 <hsc_decode_blockllr+0x7e0>
 8004c02:	e2bb      	b.n	800517c <hsc_decode_blockllr+0xd58>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8004c04:	189b      	adds	r3, r3, r2
 8004c06:	66bb      	str	r3, [r7, #104]	; 0x68
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8004c08:	667a      	str	r2, [r7, #100]	; 0x64
            num_paths = num_paths * 2;
 8004c0a:	465b      	mov	r3, fp
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	469b      	mov	fp, r3
 8004c10:	0018      	movs	r0, r3
 8004c12:	236c      	movs	r3, #108	; 0x6c
    *(uint32_t*)&indexOut[0] = 0x03020100;
 8004c14:	4a82      	ldr	r2, [pc, #520]	; (8004e20 <hsc_decode_blockllr+0x9fc>)
 8004c16:	469c      	mov	ip, r3
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8004c18:	4b84      	ldr	r3, [pc, #528]	; (8004e2c <hsc_decode_blockllr+0xa08>)
    *(uint32_t*)&indexOut[0] = 0x03020100;
 8004c1a:	66fa      	str	r2, [r7, #108]	; 0x6c
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8004c1c:	673b      	str	r3, [r7, #112]	; 0x70
        gap    -= (gap > 1);
 8004c1e:	2301      	movs	r3, #1
 8004c20:	2801      	cmp	r0, #1
 8004c22:	dc00      	bgt.n	8004c26 <hsc_decode_blockllr+0x802>
 8004c24:	2300      	movs	r3, #0
 8004c26:	1ac0      	subs	r0, r0, r3
        sorted  = (gap == 1);
 8004c28:	1e46      	subs	r6, r0, #1
 8004c2a:	4273      	negs	r3, r6
 8004c2c:	415e      	adcs	r6, r3
 8004c2e:	b2f6      	uxtb	r6, r6
        for (i=0, j=gap; j<length; i++, j++) {
 8004c30:	4583      	cmp	fp, r0
 8004c32:	ddf4      	ble.n	8004c1e <hsc_decode_blockllr+0x7fa>
 8004c34:	003b      	movs	r3, r7
 8004c36:	465a      	mov	r2, fp
 8004c38:	336c      	adds	r3, #108	; 0x6c
 8004c3a:	18d2      	adds	r2, r2, r3
 8004c3c:	1a12      	subs	r2, r2, r0
 8004c3e:	46b0      	mov	r8, r6
 8004c40:	0016      	movs	r6, r2
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 8004c42:	781c      	ldrb	r4, [r3, #0]
 8004c44:	5c1d      	ldrb	r5, [r3, r0]
 8004c46:	00a1      	lsls	r1, r4, #2
 8004c48:	00aa      	lsls	r2, r5, #2
 8004c4a:	1879      	adds	r1, r7, r1
 8004c4c:	18ba      	adds	r2, r7, r2
 8004c4e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004c50:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c52:	4291      	cmp	r1, r2
 8004c54:	dd03      	ble.n	8004c5e <hsc_decode_blockllr+0x83a>
                sorted      = false;
 8004c56:	2200      	movs	r2, #0
 8004c58:	4690      	mov	r8, r2
                indexOut[i] = indexOut[j];
 8004c5a:	701d      	strb	r5, [r3, #0]
                indexOut[j] = k;
 8004c5c:	541c      	strb	r4, [r3, r0]
 8004c5e:	3301      	adds	r3, #1
        for (i=0, j=gap; j<length; i++, j++) {
 8004c60:	429e      	cmp	r6, r3
 8004c62:	d1ee      	bne.n	8004c42 <hsc_decode_blockllr+0x81e>
 8004c64:	4663      	mov	r3, ip
 8004c66:	4646      	mov	r6, r8
 8004c68:	5cfa      	ldrb	r2, [r7, r3]
    } while (!sorted);
 8004c6a:	2e00      	cmp	r6, #0
 8004c6c:	d0d7      	beq.n	8004c1e <hsc_decode_blockllr+0x7fa>
            if (num_paths > LISTSIZE) {
 8004c6e:	465b      	mov	r3, fp
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	dd00      	ble.n	8004c76 <hsc_decode_blockllr+0x852>
 8004c74:	e193      	b.n	8004f9e <hsc_decode_blockllr+0xb7a>
 8004c76:	1e9d      	subs	r5, r3, #2
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8004c78:	1e5c      	subs	r4, r3, #1
           chk2       |= (1<<k);
 8004c7a:	2301      	movs	r3, #1
       k = idx_a[i] >> 1;
 8004c7c:	0850      	lsrs	r0, r2, #1
           chk2       |= (1<<k);
 8004c7e:	469c      	mov	ip, r3
 8004c80:	4083      	lsls	r3, r0
 8004c82:	4699      	mov	r9, r3
       k = idx_a[i] >> 1;
 8004c84:	003b      	movs	r3, r7
 8004c86:	336c      	adds	r3, #108	; 0x6c
 8004c88:	7859      	ldrb	r1, [r3, #1]
       if ((chk2 & (1<<k)) == 0) {
 8004c8a:	26ff      	movs	r6, #255	; 0xff
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	401e      	ands	r6, r3
       k = idx_a[i] >> 1;
 8004c90:	084b      	lsrs	r3, r1, #1
 8004c92:	9308      	str	r3, [sp, #32]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	4698      	mov	r8, r3
       if ((chk2 & (1<<k)) == 0) {
 8004c98:	411e      	asrs	r6, r3
 8004c9a:	4663      	mov	r3, ip
           pri[p_i--]  = k;
 8004c9c:	193c      	adds	r4, r7, r4
 8004c9e:	3448      	adds	r4, #72	; 0x48
 8004ca0:	7020      	strb	r0, [r4, #0]
           idx_b[k]    = idx_a[i];
 8004ca2:	1838      	adds	r0, r7, r0
 8004ca4:	3074      	adds	r0, #116	; 0x74
 8004ca6:	7002      	strb	r2, [r0, #0]
       if ((chk2 & (1<<k)) == 0) {
 8004ca8:	4233      	tst	r3, r6
 8004caa:	d000      	beq.n	8004cae <hsc_decode_blockllr+0x88a>
 8004cac:	e17c      	b.n	8004fa8 <hsc_decode_blockllr+0xb84>
           chk2       |= (1<<k);
 8004cae:	4643      	mov	r3, r8
 8004cb0:	4660      	mov	r0, ip
 8004cb2:	4098      	lsls	r0, r3
           chk1       |= (1<<i);
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	9302      	str	r3, [sp, #8]
           chk2       |= (1<<k);
 8004cb8:	464b      	mov	r3, r9
 8004cba:	4318      	orrs	r0, r3
 8004cbc:	b2c3      	uxtb	r3, r0
 8004cbe:	4699      	mov	r9, r3
           pri[p_i--]  = k;
 8004cc0:	4643      	mov	r3, r8
 8004cc2:	197d      	adds	r5, r7, r5
 8004cc4:	3548      	adds	r5, #72	; 0x48
 8004cc6:	702b      	strb	r3, [r5, #0]
           idx_b[k]    = idx_a[i];
 8004cc8:	18f8      	adds	r0, r7, r3
           pri[p_i--]  = k;
 8004cca:	465b      	mov	r3, fp
 8004ccc:	2201      	movs	r2, #1
 8004cce:	2407      	movs	r4, #7
           idx_b[k]    = idx_a[i];
 8004cd0:	3074      	adds	r0, #116	; 0x74
 8004cd2:	7001      	strb	r1, [r0, #0]
           pri[p_i--]  = k;
 8004cd4:	1edd      	subs	r5, r3, #3
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8004cd6:	465b      	mov	r3, fp
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d02a      	beq.n	8004d32 <hsc_decode_blockllr+0x90e>
       k = idx_a[i] >> 1;
 8004cdc:	003a      	movs	r2, r7
       if ((chk2 & (1<<k)) == 0) {
 8004cde:	464b      	mov	r3, r9
       k = idx_a[i] >> 1;
 8004ce0:	326c      	adds	r2, #108	; 0x6c
 8004ce2:	7890      	ldrb	r0, [r2, #2]
       if ((chk2 & (1<<k)) == 0) {
 8004ce4:	2201      	movs	r2, #1
       k = idx_a[i] >> 1;
 8004ce6:	0846      	lsrs	r6, r0, #1
       if ((chk2 & (1<<k)) == 0) {
 8004ce8:	4133      	asrs	r3, r6
 8004cea:	421a      	tst	r2, r3
 8004cec:	d110      	bne.n	8004d10 <hsc_decode_blockllr+0x8ec>
           chk2       |= (1<<k);
 8004cee:	464b      	mov	r3, r9
 8004cf0:	40b2      	lsls	r2, r6
 8004cf2:	431a      	orrs	r2, r3
           pri[p_i--]  = k;
 8004cf4:	197b      	adds	r3, r7, r5
 8004cf6:	469c      	mov	ip, r3
 8004cf8:	2348      	movs	r3, #72	; 0x48
 8004cfa:	4698      	mov	r8, r3
           chk2       |= (1<<k);
 8004cfc:	b2d3      	uxtb	r3, r2
           pri[p_i--]  = k;
 8004cfe:	44c4      	add	ip, r8
           chk2       |= (1<<k);
 8004d00:	4699      	mov	r9, r3
           pri[p_i--]  = k;
 8004d02:	4663      	mov	r3, ip
           chk1       |= (1<<i);
 8004d04:	9402      	str	r4, [sp, #8]
           idx_b[k]    = idx_a[i];
 8004d06:	19bc      	adds	r4, r7, r6
 8004d08:	3474      	adds	r4, #116	; 0x74
 8004d0a:	7020      	strb	r0, [r4, #0]
           pri[p_i--]  = k;
 8004d0c:	701e      	strb	r6, [r3, #0]
 8004d0e:	3d01      	subs	r5, #1
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8004d10:	465b      	mov	r3, fp
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d000      	beq.n	8004d18 <hsc_decode_blockllr+0x8f4>
 8004d16:	e35e      	b.n	80053d6 <hsc_decode_blockllr+0xfb2>
       k = idx_a[i] >> 1;
 8004d18:	003a      	movs	r2, r7
 8004d1a:	326c      	adds	r2, #108	; 0x6c
 8004d1c:	78d6      	ldrb	r6, [r2, #3]
       if ((chk2 & (1<<k)) == 0) {
 8004d1e:	464a      	mov	r2, r9
       k = idx_a[i] >> 1;
 8004d20:	0874      	lsrs	r4, r6, #1
       if ((chk2 & (1<<k)) == 0) {
 8004d22:	2001      	movs	r0, #1
 8004d24:	4122      	asrs	r2, r4
 8004d26:	4210      	tst	r0, r2
 8004d28:	d100      	bne.n	8004d2c <hsc_decode_blockllr+0x908>
 8004d2a:	e1ba      	b.n	80050a2 <hsc_decode_blockllr+0xc7e>
 8004d2c:	9b02      	ldr	r3, [sp, #8]
 8004d2e:	085a      	lsrs	r2, r3, #1
 8004d30:	b2d2      	uxtb	r2, r2
    switch ((chk1>>1) & 7) {
 8004d32:	2a06      	cmp	r2, #6
 8004d34:	d900      	bls.n	8004d38 <hsc_decode_blockllr+0x914>
 8004d36:	e1cd      	b.n	80050d4 <hsc_decode_blockllr+0xcb0>
 8004d38:	483d      	ldr	r0, [pc, #244]	; (8004e30 <hsc_decode_blockllr+0xa0c>)
 8004d3a:	0092      	lsls	r2, r2, #2
 8004d3c:	5882      	ldr	r2, [r0, r2]
 8004d3e:	4697      	mov	pc, r2
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8004d40:	003b      	movs	r3, r7
 8004d42:	2564      	movs	r5, #100	; 0x64
 8004d44:	336c      	adds	r3, #108	; 0x6c
 8004d46:	789b      	ldrb	r3, [r3, #2]
                pri[0]          = j0[chk2];
 8004d48:	2448      	movs	r4, #72	; 0x48
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8004d4a:	483a      	ldr	r0, [pc, #232]	; (8004e34 <hsc_decode_blockllr+0xa10>)
 8004d4c:	0019      	movs	r1, r3
 8004d4e:	4448      	add	r0, r9
 8004d50:	5d42      	ldrb	r2, [r0, r5]
                pri[0]          = j0[chk2];
 8004d52:	553a      	strb	r2, [r7, r4]
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8004d54:	18ba      	adds	r2, r7, r2
 8004d56:	3274      	adds	r2, #116	; 0x74
 8004d58:	7013      	strb	r3, [r2, #0]
 8004d5a:	085b      	lsrs	r3, r3, #1
 8004d5c:	9308      	str	r3, [sp, #32]
                    switch (max_lmd-min_lmd) {
 8004d5e:	4654      	mov	r4, sl
 8004d60:	2601      	movs	r6, #1
 8004d62:	9805      	ldr	r0, [sp, #20]
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8004d64:	2500      	movs	r5, #0
                    switch (max_lmd-min_lmd) {
 8004d66:	1b03      	subs	r3, r0, r4
 8004d68:	9c06      	ldr	r4, [sp, #24]
 8004d6a:	0098      	lsls	r0, r3, #2
 8004d6c:	4026      	ands	r6, r4
 8004d6e:	1cb4      	adds	r4, r6, #2
 8004d70:	00a4      	lsls	r4, r4, #2
 8004d72:	9404      	str	r4, [sp, #16]
 8004d74:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8004d76:	9307      	str	r3, [sp, #28]
 8004d78:	46a2      	mov	sl, r4
                    switch (max_lmd) {
 8004d7a:	9b05      	ldr	r3, [sp, #20]
                    switch (max_lmd-min_lmd) {
 8004d7c:	4482      	add	sl, r0
                    switch (max_lmd) {
 8004d7e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4698      	mov	r8, r3
 8004d84:	4684      	mov	ip, r0
 8004d86:	930d      	str	r3, [sp, #52]	; 0x34
 8004d88:	9b05      	ldr	r3, [sp, #20]
 8004d8a:	44c4      	add	ip, r8
 8004d8c:	2248      	movs	r2, #72	; 0x48
 8004d8e:	4698      	mov	r8, r3
 8004d90:	000b      	movs	r3, r1
 8004d92:	4661      	mov	r1, ip
 8004d94:	9609      	str	r6, [sp, #36]	; 0x24
 8004d96:	002e      	movs	r6, r5
 8004d98:	9c06      	ldr	r4, [sp, #24]
 8004d9a:	5cba      	ldrb	r2, [r7, r2]
 8004d9c:	00a4      	lsls	r4, r4, #2
 8004d9e:	9808      	ldr	r0, [sp, #32]
 8004da0:	9402      	str	r4, [sp, #8]
 8004da2:	9105      	str	r1, [sp, #20]
                int lr  = INDEX(h)[l] >> 1;
 8004da4:	b2c0      	uxtb	r0, r0
                if (l != lr) {
 8004da6:	4282      	cmp	r2, r0
 8004da8:	d060      	beq.n	8004e6c <hsc_decode_blockllr+0xa48>
                    switch (max_lmd-min_lmd) {
 8004daa:	9907      	ldr	r1, [sp, #28]
 8004dac:	2906      	cmp	r1, #6
 8004dae:	d82c      	bhi.n	8004e0a <hsc_decode_blockllr+0x9e6>
 8004db0:	4651      	mov	r1, sl
 8004db2:	6809      	ldr	r1, [r1, #0]
 8004db4:	468f      	mov	pc, r1
            int max_lmd = maxlambda_lut[phi];
 8004db6:	4641      	mov	r1, r8
                        case 5: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8004db8:	008c      	lsls	r4, r1, #2
 8004dba:	193c      	adds	r4, r7, r4
 8004dbc:	1825      	adds	r5, r4, r0
 8004dbe:	7f2d      	ldrb	r5, [r5, #28]
 8004dc0:	18a4      	adds	r4, r4, r2
 8004dc2:	3901      	subs	r1, #1
 8004dc4:	7725      	strb	r5, [r4, #28]
                        case 4: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8004dc6:	008c      	lsls	r4, r1, #2
 8004dc8:	193c      	adds	r4, r7, r4
 8004dca:	1825      	adds	r5, r4, r0
 8004dcc:	7f2d      	ldrb	r5, [r5, #28]
 8004dce:	18a4      	adds	r4, r4, r2
 8004dd0:	3901      	subs	r1, #1
 8004dd2:	7725      	strb	r5, [r4, #28]
                        case 3: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8004dd4:	008c      	lsls	r4, r1, #2
 8004dd6:	193c      	adds	r4, r7, r4
 8004dd8:	1825      	adds	r5, r4, r0
 8004dda:	7f2d      	ldrb	r5, [r5, #28]
 8004ddc:	18a4      	adds	r4, r4, r2
 8004dde:	3901      	subs	r1, #1
 8004de0:	7725      	strb	r5, [r4, #28]
                        case 2: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8004de2:	008c      	lsls	r4, r1, #2
 8004de4:	193c      	adds	r4, r7, r4
 8004de6:	1825      	adds	r5, r4, r0
 8004de8:	7f2d      	ldrb	r5, [r5, #28]
 8004dea:	18a4      	adds	r4, r4, r2
 8004dec:	3901      	subs	r1, #1
 8004dee:	7725      	strb	r5, [r4, #28]
                        case 1: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8004df0:	008c      	lsls	r4, r1, #2
 8004df2:	193c      	adds	r4, r7, r4
 8004df4:	1825      	adds	r5, r4, r0
 8004df6:	7f2d      	ldrb	r5, [r5, #28]
 8004df8:	18a4      	adds	r4, r4, r2
 8004dfa:	3901      	subs	r1, #1
 8004dfc:	7725      	strb	r5, [r4, #28]
                        case 0: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];
 8004dfe:	0089      	lsls	r1, r1, #2
 8004e00:	1879      	adds	r1, r7, r1
 8004e02:	180c      	adds	r4, r1, r0
 8004e04:	7f24      	ldrb	r4, [r4, #28]
 8004e06:	1889      	adds	r1, r1, r2
 8004e08:	770c      	strb	r4, [r1, #28]
                    switch (max_lmd) {
 8004e0a:	4641      	mov	r1, r8
 8004e0c:	2906      	cmp	r1, #6
 8004e0e:	d82d      	bhi.n	8004e6c <hsc_decode_blockllr+0xa48>
 8004e10:	9905      	ldr	r1, [sp, #20]
 8004e12:	6809      	ldr	r1, [r1, #0]
 8004e14:	468f      	mov	pc, r1
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	0800bb88 	.word	0x0800bb88
 8004e1c:	20000580 	.word	0x20000580
 8004e20:	03020100 	.word	0x03020100
 8004e24:	0800bb08 	.word	0x0800bb08
 8004e28:	20000974 	.word	0x20000974
 8004e2c:	07060504 	.word	0x07060504
 8004e30:	0800ba40 	.word	0x0800ba40
 8004e34:	0800ba94 	.word	0x0800ba94
                        case 6: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8004e38:	1839      	adds	r1, r7, r0
 8004e3a:	7e0c      	ldrb	r4, [r1, #24]
 8004e3c:	18b9      	adds	r1, r7, r2
 8004e3e:	760c      	strb	r4, [r1, #24]
                        case 5: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8004e40:	1839      	adds	r1, r7, r0
 8004e42:	7d0c      	ldrb	r4, [r1, #20]
 8004e44:	18b9      	adds	r1, r7, r2
 8004e46:	750c      	strb	r4, [r1, #20]
                        case 4: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8004e48:	1839      	adds	r1, r7, r0
 8004e4a:	7c0c      	ldrb	r4, [r1, #16]
 8004e4c:	18b9      	adds	r1, r7, r2
 8004e4e:	740c      	strb	r4, [r1, #16]
                        case 3: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8004e50:	1839      	adds	r1, r7, r0
 8004e52:	7b0c      	ldrb	r4, [r1, #12]
 8004e54:	18b9      	adds	r1, r7, r2
 8004e56:	730c      	strb	r4, [r1, #12]
                        case 2: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8004e58:	1839      	adds	r1, r7, r0
 8004e5a:	7a0c      	ldrb	r4, [r1, #8]
 8004e5c:	18b9      	adds	r1, r7, r2
 8004e5e:	720c      	strb	r4, [r1, #8]
                        case 1: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8004e60:	1839      	adds	r1, r7, r0
 8004e62:	790c      	ldrb	r4, [r1, #4]
 8004e64:	18b9      	adds	r1, r7, r2
 8004e66:	710c      	strb	r4, [r1, #4]
                        case 0: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];
 8004e68:	5c39      	ldrb	r1, [r7, r0]
 8004e6a:	54b9      	strb	r1, [r7, r2]
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8004e6c:	2401      	movs	r4, #1
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8004e6e:	0099      	lsls	r1, r3, #2
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8004e70:	401c      	ands	r4, r3
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8004e72:	01db      	lsls	r3, r3, #7
 8004e74:	4303      	orrs	r3, r0
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8004e76:	9803      	ldr	r0, [sp, #12]
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8004e78:	1879      	adds	r1, r7, r1
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8004e7a:	4684      	mov	ip, r0
 8004e7c:	9804      	ldr	r0, [sp, #16]
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8004e7e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8004e80:	4681      	mov	r9, r0
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8004e82:	0095      	lsls	r5, r2, #2
 8004e84:	197d      	adds	r5, r7, r5
 8004e86:	63a9      	str	r1, [r5, #56]	; 0x38
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8004e88:	9d02      	ldr	r5, [sp, #8]
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8004e8a:	44cc      	add	ip, r9
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8004e8c:	46a9      	mov	r9, r5
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8004e8e:	4660      	mov	r0, ip
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8004e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
            for (int ll=0; ll<num_paths; ll++) {
 8004e92:	3601      	adds	r6, #1
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8004e94:	4449      	add	r1, r9
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8004e96:	5484      	strb	r4, [r0, r2]
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8004e98:	548b      	strb	r3, [r1, r2]
            for (int ll=0; ll<num_paths; ll++) {
 8004e9a:	455e      	cmp	r6, fp
 8004e9c:	d062      	beq.n	8004f64 <hsc_decode_blockllr+0xb40>
 8004e9e:	003a      	movs	r2, r7
 8004ea0:	2374      	movs	r3, #116	; 0x74
 8004ea2:	3248      	adds	r2, #72	; 0x48
 8004ea4:	5cb2      	ldrb	r2, [r6, r2]
 8004ea6:	18b9      	adds	r1, r7, r2
 8004ea8:	5ccb      	ldrb	r3, [r1, r3]
 8004eaa:	0858      	lsrs	r0, r3, #1
 8004eac:	e77a      	b.n	8004da4 <hsc_decode_blockllr+0x980>
            int max_lmd = maxlambda_lut[phi];
 8004eae:	4641      	mov	r1, r8
 8004eb0:	e789      	b.n	8004dc6 <hsc_decode_blockllr+0x9a2>
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	e78e      	b.n	8004dd4 <hsc_decode_blockllr+0x9b0>
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	e793      	b.n	8004de2 <hsc_decode_blockllr+0x9be>
 8004eba:	4641      	mov	r1, r8
 8004ebc:	e798      	b.n	8004df0 <hsc_decode_blockllr+0x9cc>
 8004ebe:	4641      	mov	r1, r8
 8004ec0:	e79d      	b.n	8004dfe <hsc_decode_blockllr+0x9da>
                        case 6: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8004ec2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ec4:	1879      	adds	r1, r7, r1
 8004ec6:	180c      	adds	r4, r1, r0
 8004ec8:	7f24      	ldrb	r4, [r4, #28]
 8004eca:	1889      	adds	r1, r1, r2
 8004ecc:	770c      	strb	r4, [r1, #28]
 8004ece:	4641      	mov	r1, r8
 8004ed0:	3901      	subs	r1, #1
 8004ed2:	e771      	b.n	8004db8 <hsc_decode_blockllr+0x994>
        case 3: idx_b[j0[chk2]] = idx_a[3]; 
 8004ed4:	003b      	movs	r3, r7
 8004ed6:	336c      	adds	r3, #108	; 0x6c
 8004ed8:	2564      	movs	r5, #100	; 0x64
 8004eda:	78db      	ldrb	r3, [r3, #3]
 8004edc:	e734      	b.n	8004d48 <hsc_decode_blockllr+0x924>
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8004ede:	4bde      	ldr	r3, [pc, #888]	; (8005258 <hsc_decode_blockllr+0xe34>)
 8004ee0:	2454      	movs	r4, #84	; 0x54
 8004ee2:	0018      	movs	r0, r3
                idx_b[j0[chk2]] = idx_a[3]; 
 8004ee4:	003b      	movs	r3, r7
 8004ee6:	2664      	movs	r6, #100	; 0x64
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8004ee8:	4448      	add	r0, r9
 8004eea:	5d02      	ldrb	r2, [r0, r4]
                idx_b[j0[chk2]] = idx_a[3]; 
 8004eec:	336c      	adds	r3, #108	; 0x6c
 8004eee:	78dd      	ldrb	r5, [r3, #3]
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8004ef0:	18bb      	adds	r3, r7, r2
 8004ef2:	3374      	adds	r3, #116	; 0x74
 8004ef4:	7019      	strb	r1, [r3, #0]
                idx_b[j0[chk2]] = idx_a[3]; 
 8004ef6:	5d83      	ldrb	r3, [r0, r6]
                pri[1]          = j1[chk2];
 8004ef8:	0038      	movs	r0, r7
 8004efa:	3048      	adds	r0, #72	; 0x48
 8004efc:	7042      	strb	r2, [r0, #1]
 8004efe:	3c0c      	subs	r4, #12
                idx_b[j0[chk2]] = idx_a[3]; 
 8004f00:	18fa      	adds	r2, r7, r3
                pri[0]          = j0[chk2];
 8004f02:	553b      	strb	r3, [r7, r4]
                idx_b[j0[chk2]] = idx_a[3]; 
 8004f04:	3274      	adds	r2, #116	; 0x74
 8004f06:	086b      	lsrs	r3, r5, #1
 8004f08:	7015      	strb	r5, [r2, #0]
 8004f0a:	0029      	movs	r1, r5
 8004f0c:	9308      	str	r3, [sp, #32]
 8004f0e:	e726      	b.n	8004d5e <hsc_decode_blockllr+0x93a>
                pri[1]          = j1[chk2];
 8004f10:	2348      	movs	r3, #72	; 0x48
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8004f12:	003a      	movs	r2, r7
                pri[1]          = j1[chk2];
 8004f14:	4698      	mov	r8, r3
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8004f16:	4bd0      	ldr	r3, [pc, #832]	; (8005258 <hsc_decode_blockllr+0xe34>)
 8004f18:	326c      	adds	r2, #108	; 0x6c
                idx_b[j0[chk2]] = idx_a[3]; 
 8004f1a:	78d5      	ldrb	r5, [r2, #3]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	7892      	ldrb	r2, [r2, #2]
 8004f20:	2454      	movs	r4, #84	; 0x54
 8004f22:	4694      	mov	ip, r2
                pri[1]          = j1[chk2];
 8004f24:	003a      	movs	r2, r7
                idx_b[j0[chk2]] = idx_a[3]; 
 8004f26:	2664      	movs	r6, #100	; 0x64
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8004f28:	4448      	add	r0, r9
 8004f2a:	5d04      	ldrb	r4, [r0, r4]
                pri[1]          = j1[chk2];
 8004f2c:	3248      	adds	r2, #72	; 0x48
 8004f2e:	7054      	strb	r4, [r2, #1]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8004f30:	4662      	mov	r2, ip
                idx_b[j0[chk2]] = idx_a[3]; 
 8004f32:	5d83      	ldrb	r3, [r0, r6]
                pri[0]          = j0[chk2];
 8004f34:	4640      	mov	r0, r8
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8004f36:	193c      	adds	r4, r7, r4
 8004f38:	3474      	adds	r4, #116	; 0x74
 8004f3a:	7022      	strb	r2, [r4, #0]
                idx_b[j0[chk2]] = idx_a[3]; 
 8004f3c:	18fa      	adds	r2, r7, r3
                pri[0]          = j0[chk2];
 8004f3e:	543b      	strb	r3, [r7, r0]
                idx_b[j0[chk2]] = idx_a[3]; 
 8004f40:	3274      	adds	r2, #116	; 0x74
 8004f42:	086b      	lsrs	r3, r5, #1
 8004f44:	7015      	strb	r5, [r2, #0]
 8004f46:	0029      	movs	r1, r5
 8004f48:	9308      	str	r3, [sp, #32]
 8004f4a:	e708      	b.n	8004d5e <hsc_decode_blockllr+0x93a>
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8004f4c:	2364      	movs	r3, #100	; 0x64
                pri[0]          = j0[chk2];
 8004f4e:	2448      	movs	r4, #72	; 0x48
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8004f50:	48c1      	ldr	r0, [pc, #772]	; (8005258 <hsc_decode_blockllr+0xe34>)
 8004f52:	4448      	add	r0, r9
 8004f54:	5cc2      	ldrb	r2, [r0, r3]
 8004f56:	084b      	lsrs	r3, r1, #1
                pri[0]          = j0[chk2];
 8004f58:	553a      	strb	r2, [r7, r4]
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8004f5a:	18ba      	adds	r2, r7, r2
 8004f5c:	3274      	adds	r2, #116	; 0x74
 8004f5e:	9308      	str	r3, [sp, #32]
 8004f60:	7011      	strb	r1, [r2, #0]
 8004f62:	e6fc      	b.n	8004d5e <hsc_decode_blockllr+0x93a>
 8004f64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004f66:	f7ff fb5e 	bl	8004626 <hsc_decode_blockllr+0x202>
                    next_pt = (next_pt << 1) + 2;
 8004f6a:	4643      	mov	r3, r8
 8004f6c:	3302      	adds	r3, #2
 8004f6e:	9308      	str	r3, [sp, #32]
                    lmd0++;
 8004f70:	9b07      	ldr	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004f72:	3002      	adds	r0, #2
                    lmd0++;
 8004f74:	3301      	adds	r3, #1
 8004f76:	9307      	str	r3, [sp, #28]
 8004f78:	9b02      	ldr	r3, [sp, #8]
 8004f7a:	3208      	adds	r2, #8
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	9302      	str	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004f80:	9b05      	ldr	r3, [sp, #20]
 8004f82:	4298      	cmp	r0, r3
 8004f84:	db00      	blt.n	8004f88 <hsc_decode_blockllr+0xb64>
 8004f86:	e0b5      	b.n	80050f4 <hsc_decode_blockllr+0xcd0>
 8004f88:	9b07      	ldr	r3, [sp, #28]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	469c      	mov	ip, r3
 8004f8e:	e5bd      	b.n	8004b0c <hsc_decode_blockllr+0x6e8>
            switch (num_paths-1) {
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <hsc_decode_blockllr+0xb74>
 8004f94:	f7ff fb39 	bl	800460a <hsc_decode_blockllr+0x1e6>
 8004f98:	4ab0      	ldr	r2, [pc, #704]	; (800525c <hsc_decode_blockllr+0xe38>)
 8004f9a:	f7ff fb30 	bl	80045fe <hsc_decode_blockllr+0x1da>
                num_paths = LISTSIZE;
 8004f9e:	2304      	movs	r3, #4
 8004fa0:	2403      	movs	r4, #3
 8004fa2:	2502      	movs	r5, #2
 8004fa4:	469b      	mov	fp, r3
 8004fa6:	e668      	b.n	8004c7a <hsc_decode_blockllr+0x856>
           chk2       |= (1<<k);
 8004fa8:	464b      	mov	r3, r9
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	4699      	mov	r9, r3
 8004fae:	2301      	movs	r3, #1
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2405      	movs	r4, #5
 8004fb4:	9302      	str	r3, [sp, #8]
 8004fb6:	e68e      	b.n	8004cd6 <hsc_decode_blockllr+0x8b2>
 8004fb8:	4aa8      	ldr	r2, [pc, #672]	; (800525c <hsc_decode_blockllr+0xe38>)
 8004fba:	f7ff fb14 	bl	80045e6 <hsc_decode_blockllr+0x1c2>
 8004fbe:	4aa7      	ldr	r2, [pc, #668]	; (800525c <hsc_decode_blockllr+0xe38>)
 8004fc0:	f7ff fb17 	bl	80045f2 <hsc_decode_blockllr+0x1ce>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004fc4:	9b05      	ldr	r3, [sp, #20]
 8004fc6:	00f6      	lsls	r6, r6, #3
 8004fc8:	009d      	lsls	r5, r3, #2
 8004fca:	0063      	lsls	r3, r4, #1
 8004fcc:	3b01      	subs	r3, #1
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4699      	mov	r9, r3
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004fd2:	9c02      	ldr	r4, [sp, #8]
 8004fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fd6:	1964      	adds	r4, r4, r5
 8004fd8:	7f24      	ldrb	r4, [r4, #28]
 8004fda:	1936      	adds	r6, r6, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004fdc:	444c      	add	r4, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004fde:	00b6      	lsls	r6, r6, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004fe0:	00a4      	lsls	r4, r4, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004fe2:	599e      	ldr	r6, [r3, r6]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004fe4:	591c      	ldr	r4, [r3, r4]
					if (use_gfunc) {
 8004fe6:	9b04      	ldr	r3, [sp, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d000      	beq.n	8004fee <hsc_decode_blockllr+0xbca>
 8004fec:	e13a      	b.n	8005264 <hsc_decode_blockllr+0xe40>
    llr_t a_inv = -llr_layer_a;
 8004fee:	4273      	negs	r3, r6
    if (llr_layer_a < llr_layer_b) {
 8004ff0:	42a6      	cmp	r6, r4
 8004ff2:	db00      	blt.n	8004ff6 <hsc_decode_blockllr+0xbd2>
 8004ff4:	e1f5      	b.n	80053e2 <hsc_decode_blockllr+0xfbe>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8004ff6:	429c      	cmp	r4, r3
 8004ff8:	dc00      	bgt.n	8004ffc <hsc_decode_blockllr+0xbd8>
    llr_t b_inv = -llr_layer_b;
 8004ffa:	4266      	negs	r6, r4
				for (int l=0; l<num_paths; l++) {
 8004ffc:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8004ffe:	600e      	str	r6, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <hsc_decode_blockllr+0xbe4>
 8005004:	f7ff faca 	bl	800459c <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8005008:	4660      	mov	r0, ip
 800500a:	9b02      	ldr	r3, [sp, #8]
 800500c:	0080      	lsls	r0, r0, #2
 800500e:	195b      	adds	r3, r3, r5
 8005010:	7f5b      	ldrb	r3, [r3, #29]
 8005012:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005014:	9016      	str	r0, [sp, #88]	; 0x58
 8005016:	18c0      	adds	r0, r0, r3
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8005018:	444b      	add	r3, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800501a:	0080      	lsls	r0, r0, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800501c:	009b      	lsls	r3, r3, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800501e:	5820      	ldr	r0, [r4, r0]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8005020:	58e3      	ldr	r3, [r4, r3]
    llr_t a_inv = -llr_layer_a;
 8005022:	4244      	negs	r4, r0
    if (llr_layer_a < llr_layer_b) {
 8005024:	4298      	cmp	r0, r3
 8005026:	db00      	blt.n	800502a <hsc_decode_blockllr+0xc06>
 8005028:	e1e7      	b.n	80053fa <hsc_decode_blockllr+0xfd6>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 800502a:	42a3      	cmp	r3, r4
 800502c:	dc00      	bgt.n	8005030 <hsc_decode_blockllr+0xc0c>
    llr_t b_inv = -llr_layer_b;
 800502e:	4258      	negs	r0, r3
				for (int l=0; l<num_paths; l++) {
 8005030:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8005032:	6048      	str	r0, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 8005034:	2b02      	cmp	r3, #2
 8005036:	d101      	bne.n	800503c <hsc_decode_blockllr+0xc18>
 8005038:	f7ff fab0 	bl	800459c <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800503c:	9b02      	ldr	r3, [sp, #8]
 800503e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005040:	195b      	adds	r3, r3, r5
 8005042:	7f98      	ldrb	r0, [r3, #30]
 8005044:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005046:	181b      	adds	r3, r3, r0
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8005048:	4448      	add	r0, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800504a:	009b      	lsls	r3, r3, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800504c:	0080      	lsls	r0, r0, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800504e:	58e3      	ldr	r3, [r4, r3]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8005050:	5820      	ldr	r0, [r4, r0]
    llr_t a_inv = -llr_layer_a;
 8005052:	425c      	negs	r4, r3
    if (llr_layer_a < llr_layer_b) {
 8005054:	4298      	cmp	r0, r3
 8005056:	dc00      	bgt.n	800505a <hsc_decode_blockllr+0xc36>
 8005058:	e1dd      	b.n	8005416 <hsc_decode_blockllr+0xff2>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 800505a:	42a0      	cmp	r0, r4
 800505c:	dc00      	bgt.n	8005060 <hsc_decode_blockllr+0xc3c>
    llr_t b_inv = -llr_layer_b;
 800505e:	4243      	negs	r3, r0
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8005060:	608b      	str	r3, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 8005062:	465b      	mov	r3, fp
 8005064:	2b03      	cmp	r3, #3
 8005066:	d101      	bne.n	800506c <hsc_decode_blockllr+0xc48>
 8005068:	f7ff fa98 	bl	800459c <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800506c:	9b02      	ldr	r3, [sp, #8]
 800506e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005070:	469c      	mov	ip, r3
 8005072:	4465      	add	r5, ip
 8005074:	7fe8      	ldrb	r0, [r5, #31]
 8005076:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005078:	181b      	adds	r3, r3, r0
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800507a:	4448      	add	r0, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800507c:	009b      	lsls	r3, r3, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800507e:	0080      	lsls	r0, r0, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8005080:	58e3      	ldr	r3, [r4, r3]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8005082:	5820      	ldr	r0, [r4, r0]
    llr_t a_inv = -llr_layer_a;
 8005084:	425c      	negs	r4, r3
    if (llr_layer_a < llr_layer_b) {
 8005086:	4298      	cmp	r0, r3
 8005088:	dc00      	bgt.n	800508c <hsc_decode_blockllr+0xc68>
 800508a:	e1ca      	b.n	8005422 <hsc_decode_blockllr+0xffe>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 800508c:	42a0      	cmp	r0, r4
 800508e:	dd01      	ble.n	8005094 <hsc_decode_blockllr+0xc70>
 8005090:	f7ff fa83 	bl	800459a <hsc_decode_blockllr+0x176>
    llr_t b_inv = -llr_layer_b;
 8005094:	4243      	negs	r3, r0
 8005096:	f7ff fa80 	bl	800459a <hsc_decode_blockllr+0x176>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 800509a:	1a59      	subs	r1, r3, r1
 800509c:	64f9      	str	r1, [r7, #76]	; 0x4c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 800509e:	653b      	str	r3, [r7, #80]	; 0x50
 80050a0:	e592      	b.n	8004bc8 <hsc_decode_blockllr+0x7a4>
 80050a2:	2304      	movs	r3, #4
 80050a4:	469c      	mov	ip, r3
 80050a6:	9b02      	ldr	r3, [sp, #8]
           chk2       |= (1<<k);
 80050a8:	40a0      	lsls	r0, r4
 80050aa:	085a      	lsrs	r2, r3, #1
 80050ac:	464b      	mov	r3, r9
 80050ae:	4318      	orrs	r0, r3
           idx_b[k]    = idx_a[i];
 80050b0:	193b      	adds	r3, r7, r4
 80050b2:	4698      	mov	r8, r3
 80050b4:	2374      	movs	r3, #116	; 0x74
 80050b6:	4699      	mov	r9, r3
 80050b8:	4663      	mov	r3, ip
 80050ba:	44c8      	add	r8, r9
 80050bc:	431a      	orrs	r2, r3
           chk2       |= (1<<k);
 80050be:	b2c3      	uxtb	r3, r0
 80050c0:	4699      	mov	r9, r3
           idx_b[k]    = idx_a[i];
 80050c2:	4643      	mov	r3, r8
           pri[p_i--]  = k;
 80050c4:	197d      	adds	r5, r7, r5
 80050c6:	3548      	adds	r5, #72	; 0x48
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	702c      	strb	r4, [r5, #0]
           idx_b[k]    = idx_a[i];
 80050cc:	701e      	strb	r6, [r3, #0]
    switch ((chk1>>1) & 7) {
 80050ce:	2a06      	cmp	r2, #6
 80050d0:	d800      	bhi.n	80050d4 <hsc_decode_blockllr+0xcb0>
 80050d2:	e631      	b.n	8004d38 <hsc_decode_blockllr+0x914>
 80050d4:	2348      	movs	r3, #72	; 0x48
 80050d6:	003a      	movs	r2, r7
 80050d8:	5cfb      	ldrb	r3, [r7, r3]
 80050da:	3274      	adds	r2, #116	; 0x74
 80050dc:	5cd1      	ldrb	r1, [r2, r3]
 80050de:	084b      	lsrs	r3, r1, #1
 80050e0:	9308      	str	r3, [sp, #32]
 80050e2:	e63c      	b.n	8004d5e <hsc_decode_blockllr+0x93a>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 80050e4:	1acb      	subs	r3, r1, r3
 80050e6:	657b      	str	r3, [r7, #84]	; 0x54
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 80050e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80050ea:	e578      	b.n	8004bde <hsc_decode_blockllr+0x7ba>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 80050ec:	1acb      	subs	r3, r1, r3
 80050ee:	65fb      	str	r3, [r7, #92]	; 0x5c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 80050f0:	6639      	str	r1, [r7, #96]	; 0x60
 80050f2:	e57f      	b.n	8004bf4 <hsc_decode_blockllr+0x7d0>
 80050f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f6:	464f      	mov	r7, r9
 80050f8:	469b      	mov	fp, r3
 80050fa:	9b07      	ldr	r3, [sp, #28]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	469c      	mov	ip, r3
 8005100:	e54d      	b.n	8004b9e <hsc_decode_blockllr+0x77a>
            next_pt         = 2;
 8005102:	3301      	adds	r3, #1
 8005104:	4699      	mov	r9, r3
            lmd0            = 0;
 8005106:	2300      	movs	r3, #0
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8005108:	2606      	movs	r6, #6
 800510a:	2202      	movs	r2, #2
 800510c:	469c      	mov	ip, r3
 800510e:	46ba      	mov	sl, r7
 8005110:	4c53      	ldr	r4, [pc, #332]	; (8005260 <hsc_decode_blockllr+0xe3c>)
            lmd0            = 0;
 8005112:	9307      	str	r3, [sp, #28]
                int incval  = (beta < beta_laststage);
 8005114:	9904      	ldr	r1, [sp, #16]
 8005116:	2301      	movs	r3, #1
 8005118:	4291      	cmp	r1, r2
 800511a:	dc00      	bgt.n	800511e <hsc_decode_blockllr+0xcfa>
 800511c:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800511e:	4660      	mov	r0, ip
 8005120:	4655      	mov	r5, sl
 8005122:	5c2d      	ldrb	r5, [r5, r0]
 8005124:	9803      	ldr	r0, [sp, #12]
 8005126:	0091      	lsls	r1, r2, #2
 8005128:	4680      	mov	r8, r0
 800512a:	4441      	add	r1, r8
 800512c:	5d49      	ldrb	r1, [r1, r5]
 800512e:	7820      	ldrb	r0, [r4, #0]
 8005130:	4688      	mov	r8, r1
 8005132:	4647      	mov	r7, r8
 8005134:	0055      	lsls	r5, r2, #1
 8005136:	18e9      	adds	r1, r5, r3
 8005138:	4047      	eors	r7, r0
 800513a:	9803      	ldr	r0, [sp, #12]
 800513c:	0089      	lsls	r1, r1, #2
 800513e:	5447      	strb	r7, [r0, r1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8005140:	18f3      	adds	r3, r6, r3
 8005142:	7821      	ldrb	r1, [r4, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	54c1      	strb	r1, [r0, r3]
                if (beta == next_pt) {
 8005148:	4591      	cmp	r9, r2
 800514a:	d007      	beq.n	800515c <hsc_decode_blockllr+0xd38>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800514c:	9b05      	ldr	r3, [sp, #20]
 800514e:	3202      	adds	r2, #2
 8005150:	3604      	adds	r6, #4
 8005152:	3408      	adds	r4, #8
 8005154:	4293      	cmp	r3, r2
 8005156:	dcdd      	bgt.n	8005114 <hsc_decode_blockllr+0xcf0>
 8005158:	4657      	mov	r7, sl
 800515a:	e520      	b.n	8004b9e <hsc_decode_blockllr+0x77a>
                    next_pt = (next_pt << 1) + 2;
 800515c:	1cab      	adds	r3, r5, #2
 800515e:	4699      	mov	r9, r3
                    lmd0++;
 8005160:	9b07      	ldr	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8005162:	3202      	adds	r2, #2
                    lmd0++;
 8005164:	3301      	adds	r3, #1
 8005166:	9307      	str	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8005168:	9b05      	ldr	r3, [sp, #20]
 800516a:	3604      	adds	r6, #4
 800516c:	3408      	adds	r4, #8
 800516e:	4293      	cmp	r3, r2
 8005170:	dc00      	bgt.n	8005174 <hsc_decode_blockllr+0xd50>
 8005172:	e13c      	b.n	80053ee <hsc_decode_blockllr+0xfca>
 8005174:	9b07      	ldr	r3, [sp, #28]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	469c      	mov	ip, r3
 800517a:	e7cb      	b.n	8005114 <hsc_decode_blockllr+0xcf0>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	667b      	str	r3, [r7, #100]	; 0x64
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8005180:	66ba      	str	r2, [r7, #104]	; 0x68
 8005182:	e542      	b.n	8004c0a <hsc_decode_blockllr+0x7e6>
 8005184:	b249      	sxtb	r1, r1
 8005186:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005188:	f7ff fbfd 	bl	8004986 <hsc_decode_blockllr+0x562>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800518c:	003b      	movs	r3, r7
 800518e:	e508      	b.n	8004ba2 <hsc_decode_blockllr+0x77e>
        case 0: idx_b[1]    = idx_a[1]; 
 8005190:	003a      	movs	r2, r7
                pri[0]      = 1;
 8005192:	2048      	movs	r0, #72	; 0x48
 8005194:	2401      	movs	r4, #1
        case 0: idx_b[1]    = idx_a[1]; 
 8005196:	3274      	adds	r2, #116	; 0x74
                pri[0]      = 1;
 8005198:	543c      	strb	r4, [r7, r0]
        case 0: idx_b[1]    = idx_a[1]; 
 800519a:	7051      	strb	r1, [r2, #1]
 800519c:	e5df      	b.n	8004d5e <hsc_decode_blockllr+0x93a>
            lmd0            = 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	469c      	mov	ip, r3
 80051a2:	9307      	str	r3, [sp, #28]
 80051a4:	465b      	mov	r3, fp
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80051a6:	2606      	movs	r6, #6
 80051a8:	9309      	str	r3, [sp, #36]	; 0x24
 80051aa:	4663      	mov	r3, ip
 80051ac:	2102      	movs	r1, #2
            next_pt         = 2;
 80051ae:	46da      	mov	sl, fp
 80051b0:	46b8      	mov	r8, r7
 80051b2:	4c2b      	ldr	r4, [pc, #172]	; (8005260 <hsc_decode_blockllr+0xe3c>)
 80051b4:	9602      	str	r6, [sp, #8]
 80051b6:	9308      	str	r3, [sp, #32]
                int incval  = (beta < beta_laststage);
 80051b8:	9a04      	ldr	r2, [sp, #16]
 80051ba:	2301      	movs	r3, #1
 80051bc:	428a      	cmp	r2, r1
 80051be:	dc00      	bgt.n	80051c2 <hsc_decode_blockllr+0xd9e>
 80051c0:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80051c2:	4642      	mov	r2, r8
 80051c4:	9f08      	ldr	r7, [sp, #32]
 80051c6:	0088      	lsls	r0, r1, #2
 80051c8:	5dd2      	ldrb	r2, [r2, r7]
 80051ca:	9f03      	ldr	r7, [sp, #12]
 80051cc:	7825      	ldrb	r5, [r4, #0]
 80051ce:	46bc      	mov	ip, r7
 80051d0:	4460      	add	r0, ip
 80051d2:	5c82      	ldrb	r2, [r0, r2]
 80051d4:	4691      	mov	r9, r2
 80051d6:	464e      	mov	r6, r9
                int bit0_i  = (beta*2) + incval;
 80051d8:	004a      	lsls	r2, r1, #1
 80051da:	4694      	mov	ip, r2
 80051dc:	18d2      	adds	r2, r2, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80051de:	4075      	eors	r5, r6
 80051e0:	0092      	lsls	r2, r2, #2
 80051e2:	54bd      	strb	r5, [r7, r2]
                int bit1_i  = ((beta+1)*2) + incval;
 80051e4:	9d02      	ldr	r5, [sp, #8]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80051e6:	003e      	movs	r6, r7
                int bit1_i  = ((beta+1)*2) + incval;
 80051e8:	46a9      	mov	r9, r5
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80051ea:	7825      	ldrb	r5, [r4, #0]
                int bit1_i  = ((beta+1)*2) + incval;
 80051ec:	444b      	add	r3, r9
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80051ee:	46a9      	mov	r9, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80051f0:	9f08      	ldr	r7, [sp, #32]
 80051f2:	4645      	mov	r5, r8
 80051f4:	46bb      	mov	fp, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80051f6:	464f      	mov	r7, r9
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80051f8:	46b1      	mov	r9, r6
 80051fa:	445d      	add	r5, fp
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80051fc:	009b      	lsls	r3, r3, #2
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80051fe:	786d      	ldrb	r5, [r5, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8005200:	54f7      	strb	r7, [r6, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8005202:	5d40      	ldrb	r0, [r0, r5]
 8005204:	7865      	ldrb	r5, [r4, #1]
 8005206:	444a      	add	r2, r9
 8005208:	4068      	eors	r0, r5
 800520a:	7050      	strb	r0, [r2, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800520c:	7862      	ldrb	r2, [r4, #1]
 800520e:	444b      	add	r3, r9
 8005210:	705a      	strb	r2, [r3, #1]
                if (beta == next_pt) {
 8005212:	4551      	cmp	r1, sl
 8005214:	d00d      	beq.n	8005232 <hsc_decode_blockllr+0xe0e>
 8005216:	9b02      	ldr	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8005218:	3102      	adds	r1, #2
 800521a:	3304      	adds	r3, #4
 800521c:	9302      	str	r3, [sp, #8]
 800521e:	9b05      	ldr	r3, [sp, #20]
 8005220:	3408      	adds	r4, #8
 8005222:	428b      	cmp	r3, r1
 8005224:	dcc8      	bgt.n	80051b8 <hsc_decode_blockllr+0xd94>
 8005226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005228:	4647      	mov	r7, r8
 800522a:	469b      	mov	fp, r3
 800522c:	9b08      	ldr	r3, [sp, #32]
 800522e:	469c      	mov	ip, r3
 8005230:	e4b5      	b.n	8004b9e <hsc_decode_blockllr+0x77a>
                    next_pt = (next_pt << 1) + 2;
 8005232:	2302      	movs	r3, #2
 8005234:	4463      	add	r3, ip
 8005236:	469a      	mov	sl, r3
                    lmd0++;
 8005238:	9b07      	ldr	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800523a:	3102      	adds	r1, #2
                    lmd0++;
 800523c:	3301      	adds	r3, #1
 800523e:	9307      	str	r3, [sp, #28]
 8005240:	9b02      	ldr	r3, [sp, #8]
 8005242:	3408      	adds	r4, #8
 8005244:	3304      	adds	r3, #4
 8005246:	9302      	str	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8005248:	9b05      	ldr	r3, [sp, #20]
 800524a:	428b      	cmp	r3, r1
 800524c:	dc00      	bgt.n	8005250 <hsc_decode_blockllr+0xe2c>
 800524e:	e0da      	b.n	8005406 <hsc_decode_blockllr+0xfe2>
 8005250:	9b07      	ldr	r3, [sp, #28]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	9308      	str	r3, [sp, #32]
 8005256:	e7af      	b.n	80051b8 <hsc_decode_blockllr+0xd94>
 8005258:	0800ba94 	.word	0x0800ba94
 800525c:	20000974 	.word	0x20000974
 8005260:	20000580 	.word	0x20000580
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8005264:	9b02      	ldr	r3, [sp, #8]
 8005266:	5d5b      	ldrb	r3, [r3, r5]
    if (bit_layer) {
 8005268:	5cc3      	ldrb	r3, [r0, r3]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d000      	beq.n	8005270 <hsc_decode_blockllr+0xe4c>
        llr_layer_a = -llr_layer_a;
 800526e:	4276      	negs	r6, r6
				for (int l=0; l<num_paths; l++) {
 8005270:	465b      	mov	r3, fp
    return (llr_layer_b + llr_layer_a);
 8005272:	19a4      	adds	r4, r4, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8005274:	600c      	str	r4, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <hsc_decode_blockllr+0xe5a>
 800527a:	f7ff f98f 	bl	800459c <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800527e:	9b02      	ldr	r3, [sp, #8]
 8005280:	4666      	mov	r6, ip
 8005282:	195b      	adds	r3, r3, r5
 8005284:	7f5c      	ldrb	r4, [r3, #29]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8005286:	785b      	ldrb	r3, [r3, #1]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8005288:	00b6      	lsls	r6, r6, #2
    if (bit_layer) {
 800528a:	5cc3      	ldrb	r3, [r0, r3]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800528c:	9616      	str	r6, [sp, #88]	; 0x58
    if (bit_layer) {
 800528e:	469c      	mov	ip, r3
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8005290:	464b      	mov	r3, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8005292:	1936      	adds	r6, r6, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8005294:	191b      	adds	r3, r3, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8005296:	00b4      	lsls	r4, r6, #2
 8005298:	9e10      	ldr	r6, [sp, #64]	; 0x40
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800529a:	009b      	lsls	r3, r3, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800529c:	5934      	ldr	r4, [r6, r4]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800529e:	58f3      	ldr	r3, [r6, r3]
    if (bit_layer) {
 80052a0:	4666      	mov	r6, ip
 80052a2:	2e00      	cmp	r6, #0
 80052a4:	d000      	beq.n	80052a8 <hsc_decode_blockllr+0xe84>
        llr_layer_a = -llr_layer_a;
 80052a6:	4264      	negs	r4, r4
    return (llr_layer_b + llr_layer_a);
 80052a8:	191b      	adds	r3, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80052aa:	604b      	str	r3, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 80052ac:	465b      	mov	r3, fp
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d101      	bne.n	80052b6 <hsc_decode_blockllr+0xe92>
 80052b2:	f7ff f973 	bl	800459c <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80052b6:	9b02      	ldr	r3, [sp, #8]
 80052b8:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80052ba:	195b      	adds	r3, r3, r5
 80052bc:	7f9c      	ldrb	r4, [r3, #30]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80052be:	789b      	ldrb	r3, [r3, #2]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80052c0:	1936      	adds	r6, r6, r4
    if (bit_layer) {
 80052c2:	5cc3      	ldrb	r3, [r0, r3]
 80052c4:	469c      	mov	ip, r3
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80052c6:	464b      	mov	r3, r9
 80052c8:	191b      	adds	r3, r3, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80052ca:	00b4      	lsls	r4, r6, #2
 80052cc:	9e10      	ldr	r6, [sp, #64]	; 0x40
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80052ce:	009b      	lsls	r3, r3, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80052d0:	5934      	ldr	r4, [r6, r4]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80052d2:	58f3      	ldr	r3, [r6, r3]
    if (bit_layer) {
 80052d4:	4666      	mov	r6, ip
 80052d6:	2e00      	cmp	r6, #0
 80052d8:	d000      	beq.n	80052dc <hsc_decode_blockllr+0xeb8>
        llr_layer_a = -llr_layer_a;
 80052da:	4264      	negs	r4, r4
    return (llr_layer_b + llr_layer_a);
 80052dc:	191b      	adds	r3, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80052de:	608b      	str	r3, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 80052e0:	465b      	mov	r3, fp
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d101      	bne.n	80052ea <hsc_decode_blockllr+0xec6>
 80052e6:	f7ff f959 	bl	800459c <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80052ea:	9b02      	ldr	r3, [sp, #8]
 80052ec:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80052ee:	469c      	mov	ip, r3
 80052f0:	4465      	add	r5, ip
 80052f2:	7feb      	ldrb	r3, [r5, #31]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80052f4:	78ec      	ldrb	r4, [r5, #3]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80052f6:	9d16      	ldr	r5, [sp, #88]	; 0x58
    if (bit_layer) {
 80052f8:	5d04      	ldrb	r4, [r0, r4]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80052fa:	18ed      	adds	r5, r5, r3
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80052fc:	444b      	add	r3, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80052fe:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8005300:	009b      	lsls	r3, r3, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8005302:	5970      	ldr	r0, [r6, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8005304:	58f3      	ldr	r3, [r6, r3]
    if (bit_layer) {
 8005306:	2c00      	cmp	r4, #0
 8005308:	d000      	beq.n	800530c <hsc_decode_blockllr+0xee8>
        llr_layer_a = -llr_layer_a;
 800530a:	4240      	negs	r0, r0
    return (llr_layer_b + llr_layer_a);
 800530c:	181b      	adds	r3, r3, r0
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800530e:	60cb      	str	r3, [r1, #12]
 8005310:	f7ff f944 	bl	800459c <hsc_decode_blockllr+0x178>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8005314:	3303      	adds	r3, #3
 8005316:	469a      	mov	sl, r3
            next_pt         = 2;
 8005318:	3b04      	subs	r3, #4
 800531a:	9308      	str	r3, [sp, #32]
            lmd0            = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	9307      	str	r3, [sp, #28]
 8005320:	469c      	mov	ip, r3
 8005322:	465b      	mov	r3, fp
 8005324:	9309      	str	r3, [sp, #36]	; 0x24
 8005326:	4653      	mov	r3, sl
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8005328:	2402      	movs	r4, #2
 800532a:	46b9      	mov	r9, r7
 800532c:	494d      	ldr	r1, [pc, #308]	; (8005464 <hsc_decode_blockllr+0x1040>)
 800532e:	9302      	str	r3, [sp, #8]
                int incval  = (beta < beta_laststage);
 8005330:	9a04      	ldr	r2, [sp, #16]
 8005332:	2301      	movs	r3, #1
 8005334:	42a2      	cmp	r2, r4
 8005336:	dc00      	bgt.n	800533a <hsc_decode_blockllr+0xf16>
 8005338:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800533a:	9f03      	ldr	r7, [sp, #12]
 800533c:	4665      	mov	r5, ip
 800533e:	464a      	mov	r2, r9
 8005340:	46b8      	mov	r8, r7
 8005342:	5d52      	ldrb	r2, [r2, r5]
 8005344:	00a0      	lsls	r0, r4, #2
 8005346:	4440      	add	r0, r8
 8005348:	5c85      	ldrb	r5, [r0, r2]
 800534a:	780e      	ldrb	r6, [r1, #0]
                int bit0_i  = (beta*2) + incval;
 800534c:	0062      	lsls	r2, r4, #1
 800534e:	4690      	mov	r8, r2
 8005350:	18d2      	adds	r2, r2, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8005352:	4075      	eors	r5, r6
 8005354:	0092      	lsls	r2, r2, #2
 8005356:	464e      	mov	r6, r9
 8005358:	54bd      	strb	r5, [r7, r2]
                int bit1_i  = ((beta+1)*2) + incval;
 800535a:	9d02      	ldr	r5, [sp, #8]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800535c:	4466      	add	r6, ip
                int bit1_i  = ((beta+1)*2) + incval;
 800535e:	46aa      	mov	sl, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8005360:	7877      	ldrb	r7, [r6, #1]
                int bit1_i  = ((beta+1)*2) + incval;
 8005362:	4453      	add	r3, sl
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8005364:	46ba      	mov	sl, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8005366:	780d      	ldrb	r5, [r1, #0]
 8005368:	9f03      	ldr	r7, [sp, #12]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	54fd      	strb	r5, [r7, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800536e:	784f      	ldrb	r7, [r1, #1]
 8005370:	4655      	mov	r5, sl
 8005372:	46ba      	mov	sl, r7
 8005374:	9f03      	ldr	r7, [sp, #12]
 8005376:	5d45      	ldrb	r5, [r0, r5]
 8005378:	46bb      	mov	fp, r7
 800537a:	4657      	mov	r7, sl
 800537c:	445a      	add	r2, fp
 800537e:	407d      	eors	r5, r7
 8005380:	7055      	strb	r5, [r2, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8005382:	784d      	ldrb	r5, [r1, #1]
 8005384:	445b      	add	r3, fp
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8005386:	78b6      	ldrb	r6, [r6, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8005388:	705d      	strb	r5, [r3, #1]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800538a:	5d80      	ldrb	r0, [r0, r6]
 800538c:	788d      	ldrb	r5, [r1, #2]
 800538e:	4068      	eors	r0, r5
 8005390:	7090      	strb	r0, [r2, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8005392:	788a      	ldrb	r2, [r1, #2]
 8005394:	709a      	strb	r2, [r3, #2]
                if (beta == next_pt) {
 8005396:	9b08      	ldr	r3, [sp, #32]
 8005398:	429c      	cmp	r4, r3
 800539a:	d009      	beq.n	80053b0 <hsc_decode_blockllr+0xf8c>
 800539c:	9b02      	ldr	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800539e:	3402      	adds	r4, #2
 80053a0:	3304      	adds	r3, #4
 80053a2:	9302      	str	r3, [sp, #8]
 80053a4:	9b05      	ldr	r3, [sp, #20]
 80053a6:	3108      	adds	r1, #8
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	dcc1      	bgt.n	8005330 <hsc_decode_blockllr+0xf0c>
 80053ac:	f7ff fbf4 	bl	8004b98 <hsc_decode_blockllr+0x774>
                    next_pt = (next_pt << 1) + 2;
 80053b0:	4643      	mov	r3, r8
 80053b2:	3302      	adds	r3, #2
 80053b4:	9308      	str	r3, [sp, #32]
                    lmd0++;
 80053b6:	9b07      	ldr	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80053b8:	3402      	adds	r4, #2
                    lmd0++;
 80053ba:	3301      	adds	r3, #1
 80053bc:	9307      	str	r3, [sp, #28]
 80053be:	9b02      	ldr	r3, [sp, #8]
 80053c0:	3108      	adds	r1, #8
 80053c2:	3304      	adds	r3, #4
 80053c4:	9302      	str	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80053c6:	9b05      	ldr	r3, [sp, #20]
 80053c8:	429c      	cmp	r4, r3
 80053ca:	db00      	blt.n	80053ce <hsc_decode_blockllr+0xfaa>
 80053cc:	e692      	b.n	80050f4 <hsc_decode_blockllr+0xcd0>
 80053ce:	9b07      	ldr	r3, [sp, #28]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	469c      	mov	ip, r3
 80053d4:	e7ac      	b.n	8005330 <hsc_decode_blockllr+0xf0c>
 80053d6:	9b02      	ldr	r3, [sp, #8]
 80053d8:	085a      	lsrs	r2, r3, #1
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 80053da:	2303      	movs	r3, #3
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	469b      	mov	fp, r3
 80053e0:	e4a7      	b.n	8004d32 <hsc_decode_blockllr+0x90e>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 80053e2:	0026      	movs	r6, r4
 80053e4:	429c      	cmp	r4, r3
 80053e6:	db00      	blt.n	80053ea <hsc_decode_blockllr+0xfc6>
 80053e8:	e608      	b.n	8004ffc <hsc_decode_blockllr+0xbd8>
 80053ea:	001e      	movs	r6, r3
 80053ec:	e606      	b.n	8004ffc <hsc_decode_blockllr+0xbd8>
 80053ee:	9b07      	ldr	r3, [sp, #28]
 80053f0:	4657      	mov	r7, sl
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	469c      	mov	ip, r3
 80053f6:	f7ff fbd2 	bl	8004b9e <hsc_decode_blockllr+0x77a>
 80053fa:	0018      	movs	r0, r3
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	db00      	blt.n	8005402 <hsc_decode_blockllr+0xfde>
 8005400:	e616      	b.n	8005030 <hsc_decode_blockllr+0xc0c>
 8005402:	0020      	movs	r0, r4
 8005404:	e614      	b.n	8005030 <hsc_decode_blockllr+0xc0c>
 8005406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005408:	4647      	mov	r7, r8
 800540a:	469b      	mov	fp, r3
 800540c:	9b07      	ldr	r3, [sp, #28]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	469c      	mov	ip, r3
 8005412:	f7ff fbc4 	bl	8004b9e <hsc_decode_blockllr+0x77a>
 8005416:	0003      	movs	r3, r0
 8005418:	42a0      	cmp	r0, r4
 800541a:	db00      	blt.n	800541e <hsc_decode_blockllr+0xffa>
 800541c:	e620      	b.n	8005060 <hsc_decode_blockllr+0xc3c>
 800541e:	0023      	movs	r3, r4
 8005420:	e61e      	b.n	8005060 <hsc_decode_blockllr+0xc3c>
 8005422:	0003      	movs	r3, r0
 8005424:	42a0      	cmp	r0, r4
 8005426:	db01      	blt.n	800542c <hsc_decode_blockllr+0x1008>
 8005428:	f7ff f8b7 	bl	800459a <hsc_decode_blockllr+0x176>
 800542c:	0023      	movs	r3, r4
 800542e:	f7ff f8b4 	bl	800459a <hsc_decode_blockllr+0x176>
        for (i=0, phi=0; phi<h->infobits; i++) {
 8005432:	225f      	movs	r2, #95	; 0x5f
 8005434:	4690      	mov	r8, r2
 8005436:	3210      	adds	r2, #16
 8005438:	4694      	mov	ip, r2
 800543a:	3208      	adds	r2, #8
 800543c:	4692      	mov	sl, r2
 800543e:	3204      	adds	r2, #4
 8005440:	4691      	mov	r9, r2
 8005442:	3203      	adds	r2, #3
 8005444:	9213      	str	r2, [sp, #76]	; 0x4c
 8005446:	3201      	adds	r2, #1
 8005448:	277d      	movs	r7, #125	; 0x7d
 800544a:	2100      	movs	r1, #0
 800544c:	9211      	str	r2, [sp, #68]	; 0x44
 800544e:	f7ff fa9a 	bl	8004986 <hsc_decode_blockllr+0x562>
 8005452:	001c      	movs	r4, r3
 8005454:	f7ff fb0d 	bl	8004a72 <hsc_decode_blockllr+0x64e>
 8005458:	9d00      	ldr	r5, [sp, #0]
 800545a:	f7ff fad1 	bl	8004a00 <hsc_decode_blockllr+0x5dc>
    if (llr_layer_a < llr_layer_b) {
 800545e:	0004      	movs	r4, r0
 8005460:	f7ff fb1c 	bl	8004a9c <hsc_decode_blockllr+0x678>
 8005464:	20000580 	.word	0x20000580

08005468 <sub_calc_llrindex>:
    else if (index < 0)     index = 0;
    else                    index >>= 8;

#   elif (LLRMODEL == LLRMODEL_NBRSSI)
    index = (int)lora_nrssi - 40;
    if (index < 0)          index = 0;
 8005468:	2328      	movs	r3, #40	; 0x28
 800546a:	425b      	negs	r3, r3
 800546c:	18c8      	adds	r0, r1, r3
 800546e:	d404      	bmi.n	800547a <sub_calc_llrindex+0x12>
    else if (index >= 31)   index = 31;
 8005470:	281e      	cmp	r0, #30
 8005472:	dd00      	ble.n	8005476 <sub_calc_llrindex+0xe>
 8005474:	201f      	movs	r0, #31

#   endif

    return (uint8_t)index;
 8005476:	b2c0      	uxtb	r0, r0
}
 8005478:	4770      	bx	lr
    if (index < 0)          index = 0;
 800547a:	2000      	movs	r0, #0
 800547c:	e7fb      	b.n	8005476 <sub_calc_llrindex+0xe>
	...

08005480 <sub_scale_llrmag>:
#   if (LLRMODEL == LLRMODEL_SPOTSNR)
    llrmag = llrvsnr[index];
#   elif (LLRMODEL == LLRMODEL_WBRSSI)
    llrmag = (int32_t)llrvebn0_0dB2[index];
#   elif (LLRMODEL == LLRMODEL_NBRSSI)
    llrmag = (int32_t)llrvrssi[index];
 8005480:	0040      	lsls	r0, r0, #1
 8005482:	4b03      	ldr	r3, [pc, #12]	; (8005490 <sub_scale_llrmag+0x10>)
 8005484:	5ac0      	ldrh	r0, [r0, r3]
#   endif

    llrmag *= bytesperblock;
 8005486:	4348      	muls	r0, r1
 8005488:	b280      	uxth	r0, r0
    llrmag>>= 3;
 800548a:	08c0      	lsrs	r0, r0, #3
    return llrmag;
}
 800548c:	4770      	bx	lr
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	0800c468 	.word	0x0800c468

08005494 <lorallr_init>:



void lorallr_init(lorallr_t* obj, hscrate_t coderate, lorasf_t lora_sf, uint8_t lora_nrssi, uint8_t lora_wrssi) {
 8005494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005496:	46c6      	mov	lr, r8
 8005498:	b500      	push	{lr}
 800549a:	0004      	movs	r4, r0
 800549c:	001d      	movs	r5, r3
 800549e:	ab06      	add	r3, sp, #24
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	4698      	mov	r8, r3
    ///@note no input checking
    obj->buffer_bits    = 0;
 80054a4:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <lorallr_init+0x54>)
 80054a6:	2000      	movs	r0, #0
 80054a8:	52e0      	strh	r0, [r4, r3]
    obj->bufput         = obj->buf;
 80054aa:	3b04      	subs	r3, #4
 80054ac:	50e4      	str	r4, [r4, r3]
    obj->llr_offset     = llroffset[lora_sf];
 80054ae:	0093      	lsls	r3, r2, #2
 80054b0:	4a0e      	ldr	r2, [pc, #56]	; (80054ec <lorallr_init+0x58>)
 80054b2:	18d2      	adds	r2, r2, r3
 80054b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80054b6:	4e0e      	ldr	r6, [pc, #56]	; (80054f0 <lorallr_init+0x5c>)
 80054b8:	55a3      	strb	r3, [r4, r6]
    obj->bytesperblock  = hsc_bytesperblock(coderate);
 80054ba:	0008      	movs	r0, r1
 80054bc:	f7fd fe74 	bl	80031a8 <hsc_bytesperblock>
 80054c0:	0007      	movs	r7, r0
 80054c2:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <lorallr_init+0x60>)
 80054c4:	54e0      	strb	r0, [r4, r3]

    obj->last_nrssi     = lora_nrssi;
 80054c6:	3301      	adds	r3, #1
 80054c8:	54e5      	strb	r5, [r4, r3]

#   if (LLRMODEL != LLRMODEL_FIXEDVAL)
    obj->last_index     = sub_calc_llrindex(obj->llr_offset, lora_nrssi, lora_wrssi);
 80054ca:	5da0      	ldrb	r0, [r4, r6]
 80054cc:	4642      	mov	r2, r8
 80054ce:	0029      	movs	r1, r5
 80054d0:	f7ff ffca 	bl	8005468 <sub_calc_llrindex>
 80054d4:	4b08      	ldr	r3, [pc, #32]	; (80054f8 <lorallr_init+0x64>)
 80054d6:	54e0      	strb	r0, [r4, r3]
#   else
    obj->last_index     = 0;
#   endif

    obj->last_llr = sub_scale_llrmag(obj->last_index, obj->bytesperblock);
 80054d8:	0039      	movs	r1, r7
 80054da:	f7ff ffd1 	bl	8005480 <sub_scale_llrmag>
 80054de:	4b07      	ldr	r3, [pc, #28]	; (80054fc <lorallr_init+0x68>)
 80054e0:	52e0      	strh	r0, [r4, r3]
}
 80054e2:	bc04      	pop	{r2}
 80054e4:	4690      	mov	r8, r2
 80054e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e8:	00000404 	.word	0x00000404
 80054ec:	0800c468 	.word	0x0800c468
 80054f0:	00000406 	.word	0x00000406
 80054f4:	00000407 	.word	0x00000407
 80054f8:	00000409 	.word	0x00000409
 80054fc:	0000040a 	.word	0x0000040a

08005500 <lorallr_pushsample>:

///@note pushsample is not threadsafe when used with popblock (it is threadsafe with getblock, though).
///      Since pushsample is generally used in an ISR, if popblock is not used within the same ISR
///      call (i.e. it's in a thread/task), popblock must be protected with interrupt halting or a
///      mutex (if mutex exists).
void lorallr_pushsample(lorallr_t* obj, uint8_t lora_nrssi, uint8_t lora_wrssi, int16_t new_bits) {
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	0005      	movs	r5, r0
 8005504:	1e1c      	subs	r4, r3, #0
    uint16_t next_mag;
    uint8_t index;

    /// Exit if no new information, or if too much
    if (new_bits <= 0) {
 8005506:	dd2f      	ble.n	8005568 <lorallr_pushsample+0x68>
        return;
    }
    obj->buffer_bits += new_bits;
 8005508:	4818      	ldr	r0, [pc, #96]	; (800556c <lorallr_pushsample+0x6c>)
 800550a:	5a2b      	ldrh	r3, [r5, r0]
 800550c:	191b      	adds	r3, r3, r4
 800550e:	b29b      	uxth	r3, r3
 8005510:	522b      	strh	r3, [r5, r0]
    if (obj->buffer_bits > 256) {
 8005512:	2080      	movs	r0, #128	; 0x80
 8005514:	0040      	lsls	r0, r0, #1
 8005516:	4283      	cmp	r3, r0
 8005518:	d826      	bhi.n	8005568 <lorallr_pushsample+0x68>
#   if (LLRMODEL == LLRMODEL_FIXEDVAL)
    index = 0;
#   else
    /// The rssi can have sharp deviations (sometimes).  If it's more than 6 dB more or less than last
    /// value, clip it.
    if (lora_nrssi > (obj->last_nrssi + 6)) {
 800551a:	2381      	movs	r3, #129	; 0x81
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	5ceb      	ldrb	r3, [r5, r3]
 8005520:	1d98      	adds	r0, r3, #6
 8005522:	4281      	cmp	r1, r0
 8005524:	dd12      	ble.n	800554c <lorallr_pushsample+0x4c>
        lora_nrssi = obj->last_nrssi + 6;
 8005526:	b2c1      	uxtb	r1, r0
    else if (lora_nrssi < (obj->last_nrssi - 6)) {
        lora_nrssi = obj->last_nrssi - 6;
    }

    /// Get the next index value, and average it with the last value.
    index   = sub_calc_llrindex(obj->llr_offset, lora_nrssi, lora_wrssi);
 8005528:	4b11      	ldr	r3, [pc, #68]	; (8005570 <lorallr_pushsample+0x70>)
 800552a:	5ce8      	ldrb	r0, [r5, r3]
 800552c:	f7ff ff9c 	bl	8005468 <sub_calc_llrindex>
    index   = (obj->last_index + index) >> 1;
 8005530:	4b10      	ldr	r3, [pc, #64]	; (8005574 <lorallr_pushsample+0x74>)
 8005532:	5ceb      	ldrb	r3, [r5, r3]
 8005534:	18c0      	adds	r0, r0, r3
 8005536:	1040      	asrs	r0, r0, #1
 8005538:	b2c0      	uxtb	r0, r0
#   endif

    next_mag = sub_scale_llrmag(index, obj->bytesperblock);
 800553a:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <lorallr_pushsample+0x78>)
 800553c:	5ce9      	ldrb	r1, [r5, r3]
 800553e:	f7ff ff9f 	bl	8005480 <sub_scale_llrmag>

    ///@note this last-llr might go away
    obj->last_llr = next_mag;
 8005542:	4b0e      	ldr	r3, [pc, #56]	; (800557c <lorallr_pushsample+0x7c>)
 8005544:	52e8      	strh	r0, [r5, r3]

    // Variant that just averages across the block
    {   register llr_t* bit = obj->bufput;
 8005546:	3b0a      	subs	r3, #10
 8005548:	58eb      	ldr	r3, [r5, r3]
        register llr_t mag  = next_mag;
        while (--new_bits >= 0) {
 800554a:	e006      	b.n	800555a <lorallr_pushsample+0x5a>
    else if (lora_nrssi < (obj->last_nrssi - 6)) {
 800554c:	1f98      	subs	r0, r3, #6
 800554e:	4281      	cmp	r1, r0
 8005550:	daea      	bge.n	8005528 <lorallr_pushsample+0x28>
        lora_nrssi = obj->last_nrssi - 6;
 8005552:	b2c1      	uxtb	r1, r0
 8005554:	e7e8      	b.n	8005528 <lorallr_pushsample+0x28>
            *bit++  = mag;
 8005556:	6018      	str	r0, [r3, #0]
 8005558:	3304      	adds	r3, #4
        while (--new_bits >= 0) {
 800555a:	3c01      	subs	r4, #1
 800555c:	b224      	sxth	r4, r4
 800555e:	2c00      	cmp	r4, #0
 8005560:	daf9      	bge.n	8005556 <lorallr_pushsample+0x56>
        }
        obj->bufput = bit;
 8005562:	2280      	movs	r2, #128	; 0x80
 8005564:	00d2      	lsls	r2, r2, #3
 8005566:	50ab      	str	r3, [r5, r2]
    }
}
 8005568:	bd70      	pop	{r4, r5, r6, pc}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	00000404 	.word	0x00000404
 8005570:	00000406 	.word	0x00000406
 8005574:	00000409 	.word	0x00000409
 8005578:	00000407 	.word	0x00000407
 800557c:	0000040a 	.word	0x0000040a

08005580 <lorallr_getblock>:


llr_t* lorallr_getblock(lorallr_t* obj, const uint8_t* blockbytes) {
 8005580:	b510      	push	{r4, lr}
//            return NULL;
//        }
//    }

    ///@todo this could be done with multiplication and/or SIMD on Cortex M4
    end     = &blockbytes[16];
 8005582:	000c      	movs	r4, r1
 8005584:	3410      	adds	r4, #16
    bitptr  = obj->buf;
 8005586:	0003      	movs	r3, r0
    while (blockbytes < end) {
 8005588:	e005      	b.n	8005596 <lorallr_getblock+0x16>
        if (*blockbytes & 0x80) *bitptr = 0 - *bitptr;
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4252      	negs	r2, r2
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e007      	b.n	80055a2 <lorallr_getblock+0x22>
        if (*blockbytes & 0x04) *bitptr = 0 - *bitptr;
        bitptr++;
        if (*blockbytes & 0x02) *bitptr = 0 - *bitptr;
        bitptr++;
        if (*blockbytes & 0x01) *bitptr = 0 - *bitptr;
        bitptr++;
 8005592:	3320      	adds	r3, #32
        blockbytes++;
 8005594:	3101      	adds	r1, #1
    while (blockbytes < end) {
 8005596:	42a1      	cmp	r1, r4
 8005598:	d22e      	bcs.n	80055f8 <lorallr_getblock+0x78>
        if (*blockbytes & 0x80) *bitptr = 0 - *bitptr;
 800559a:	2200      	movs	r2, #0
 800559c:	568a      	ldrsb	r2, [r1, r2]
 800559e:	2a00      	cmp	r2, #0
 80055a0:	dbf3      	blt.n	800558a <lorallr_getblock+0xa>
        if (*blockbytes & 0x40) *bitptr = 0 - *bitptr;
 80055a2:	780a      	ldrb	r2, [r1, #0]
 80055a4:	0652      	lsls	r2, r2, #25
 80055a6:	d502      	bpl.n	80055ae <lorallr_getblock+0x2e>
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	4252      	negs	r2, r2
 80055ac:	605a      	str	r2, [r3, #4]
        if (*blockbytes & 0x20) *bitptr = 0 - *bitptr;
 80055ae:	780a      	ldrb	r2, [r1, #0]
 80055b0:	0692      	lsls	r2, r2, #26
 80055b2:	d502      	bpl.n	80055ba <lorallr_getblock+0x3a>
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	4252      	negs	r2, r2
 80055b8:	609a      	str	r2, [r3, #8]
        if (*blockbytes & 0x10) *bitptr = 0 - *bitptr;
 80055ba:	780a      	ldrb	r2, [r1, #0]
 80055bc:	06d2      	lsls	r2, r2, #27
 80055be:	d502      	bpl.n	80055c6 <lorallr_getblock+0x46>
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	4252      	negs	r2, r2
 80055c4:	60da      	str	r2, [r3, #12]
        if (*blockbytes & 0x08) *bitptr = 0 - *bitptr;
 80055c6:	780a      	ldrb	r2, [r1, #0]
 80055c8:	0712      	lsls	r2, r2, #28
 80055ca:	d502      	bpl.n	80055d2 <lorallr_getblock+0x52>
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	4252      	negs	r2, r2
 80055d0:	611a      	str	r2, [r3, #16]
        if (*blockbytes & 0x04) *bitptr = 0 - *bitptr;
 80055d2:	780a      	ldrb	r2, [r1, #0]
 80055d4:	0752      	lsls	r2, r2, #29
 80055d6:	d502      	bpl.n	80055de <lorallr_getblock+0x5e>
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	4252      	negs	r2, r2
 80055dc:	615a      	str	r2, [r3, #20]
        if (*blockbytes & 0x02) *bitptr = 0 - *bitptr;
 80055de:	780a      	ldrb	r2, [r1, #0]
 80055e0:	0792      	lsls	r2, r2, #30
 80055e2:	d502      	bpl.n	80055ea <lorallr_getblock+0x6a>
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	4252      	negs	r2, r2
 80055e8:	619a      	str	r2, [r3, #24]
        if (*blockbytes & 0x01) *bitptr = 0 - *bitptr;
 80055ea:	780a      	ldrb	r2, [r1, #0]
 80055ec:	07d2      	lsls	r2, r2, #31
 80055ee:	d5d0      	bpl.n	8005592 <lorallr_getblock+0x12>
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	4252      	negs	r2, r2
 80055f4:	61da      	str	r2, [r3, #28]
 80055f6:	e7cc      	b.n	8005592 <lorallr_getblock+0x12>
    }

    return obj->buf;
}
 80055f8:	bd10      	pop	{r4, pc}
	...

080055fc <lorallr_popblock>:


void lorallr_popblock(lorallr_t* obj) {
 80055fc:	b510      	push	{r4, lr}
 80055fe:	0004      	movs	r4, r0
    ot_int cpy_units;

    cpy_units = ((void*)obj->bufput - (void*)&obj->buf[128]) / 4;
 8005600:	2380      	movs	r3, #128	; 0x80
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	58c3      	ldr	r3, [r0, r3]
 8005606:	2280      	movs	r2, #128	; 0x80
 8005608:	0092      	lsls	r2, r2, #2
 800560a:	1881      	adds	r1, r0, r2
 800560c:	1a5b      	subs	r3, r3, r1
 800560e:	17d8      	asrs	r0, r3, #31
 8005610:	3afe      	subs	r2, #254	; 0xfe
 8005612:	3aff      	subs	r2, #255	; 0xff
 8005614:	4002      	ands	r2, r0
 8005616:	18d2      	adds	r2, r2, r3
 8005618:	1092      	asrs	r2, r2, #2
 800561a:	b213      	sxth	r3, r2
    if (cpy_units > 0) {
 800561c:	2b00      	cmp	r3, #0
 800561e:	dd0e      	ble.n	800563e <lorallr_popblock+0x42>
        ot_memcpy_4(obj->buf, &obj->buf[128], cpy_units);
 8005620:	b292      	uxth	r2, r2
 8005622:	0020      	movs	r0, r4
 8005624:	f004 fe81 	bl	800a32a <ot_memcpy_4>
        obj->bufput        -= 128;
 8005628:	2280      	movs	r2, #128	; 0x80
 800562a:	00d2      	lsls	r2, r2, #3
 800562c:	58a3      	ldr	r3, [r4, r2]
 800562e:	4904      	ldr	r1, [pc, #16]	; (8005640 <lorallr_popblock+0x44>)
 8005630:	468c      	mov	ip, r1
 8005632:	4463      	add	r3, ip
 8005634:	50a3      	str	r3, [r4, r2]
        obj->buffer_bits   -= 128;
 8005636:	4a03      	ldr	r2, [pc, #12]	; (8005644 <lorallr_popblock+0x48>)
 8005638:	5aa3      	ldrh	r3, [r4, r2]
 800563a:	3b80      	subs	r3, #128	; 0x80
 800563c:	52a3      	strh	r3, [r4, r2]
    }
}
 800563e:	bd10      	pop	{r4, pc}
 8005640:	fffffe00 	.word	0xfffffe00
 8005644:	00000404 	.word	0x00000404

08005648 <sub_ubx_open>:


void sub_ubx_open() {
    ot_u32 scratch;
    __SYS_CLKON();
    __UART_CLKON();
 8005648:	4a07      	ldr	r2, [pc, #28]	; (8005668 <sub_ubx_open+0x20>)
 800564a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800564c:	2380      	movs	r3, #128	; 0x80
 800564e:	029b      	lsls	r3, r3, #10
 8005650:	430b      	orrs	r3, r1
 8005652:	6393      	str	r3, [r2, #56]	; 0x38

    scratch                 = BOARD_EXTUART_PORT->MODER;
 8005654:	22a0      	movs	r2, #160	; 0xa0
 8005656:	05d2      	lsls	r2, r2, #23
 8005658:	6813      	ldr	r3, [r2, #0]
    scratch                &= ~((3 << (BOARD_EXTUART_TXPINNUM*2)) | (3 << (BOARD_EXTUART_RXPINNUM*2)));
 800565a:	21f0      	movs	r1, #240	; 0xf0
 800565c:	438b      	bics	r3, r1
    scratch                |= (2 << (BOARD_EXTUART_TXPINNUM*2)) | (2 << (BOARD_EXTUART_RXPINNUM*2));
 800565e:	3950      	subs	r1, #80	; 0x50
 8005660:	430b      	orrs	r3, r1
    BOARD_EXTUART_PORT->MODER  = scratch;
 8005662:	6013      	str	r3, [r2, #0]
    //ubx.state             = UBX_Idle;
}
 8005664:	4770      	bx	lr
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	40021000 	.word	0x40021000

0800566c <sub_ubx_close>:

void sub_ubx_close() {
    ot_u32 scratch          = BOARD_EXTUART_PORT->MODER;
 800566c:	22a0      	movs	r2, #160	; 0xa0
 800566e:	05d2      	lsls	r2, r2, #23
 8005670:	6813      	ldr	r3, [r2, #0]
    scratch                &= ~((3 << (BOARD_EXTUART_TXPINNUM*2)) | (3 << (BOARD_EXTUART_RXPINNUM*2)));
 8005672:	21f0      	movs	r1, #240	; 0xf0
 8005674:	438b      	bics	r3, r1
    scratch                |= (1 << (BOARD_EXTUART_TXPINNUM*2)) | (0 << (BOARD_EXTUART_RXPINNUM*2));
 8005676:	39e0      	subs	r1, #224	; 0xe0
 8005678:	430b      	orrs	r3, r1
    BOARD_EXTUART_PORT->MODER  = scratch;
 800567a:	6013      	str	r3, [r2, #0]

    __DMA_ALL_CLOSE();
 800567c:	4a0d      	ldr	r2, [pc, #52]	; (80056b4 <sub_ubx_close+0x48>)
 800567e:	6813      	ldr	r3, [r2, #0]
 8005680:	490d      	ldr	r1, [pc, #52]	; (80056b8 <sub_ubx_close+0x4c>)
 8005682:	400b      	ands	r3, r1
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	2300      	movs	r3, #0
 8005688:	4a0c      	ldr	r2, [pc, #48]	; (80056bc <sub_ubx_close+0x50>)
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	4a0c      	ldr	r2, [pc, #48]	; (80056c0 <sub_ubx_close+0x54>)
 800568e:	6013      	str	r3, [r2, #0]
    __DMA_ALL_CLEAR();
 8005690:	4a0c      	ldr	r2, [pc, #48]	; (80056c4 <sub_ubx_close+0x58>)
 8005692:	21ff      	movs	r1, #255	; 0xff
 8005694:	0509      	lsls	r1, r1, #20
 8005696:	6051      	str	r1, [r2, #4]
    __DMA_CLKOFF();
    __UART_CLOSE();
 8005698:	4a0b      	ldr	r2, [pc, #44]	; (80056c8 <sub_ubx_close+0x5c>)
 800569a:	6013      	str	r3, [r2, #0]
    __UART_CLEAR();
 800569c:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <sub_ubx_close+0x60>)
 800569e:	6213      	str	r3, [r2, #32]
    __UART_CLKOFF();
 80056a0:	4a0b      	ldr	r2, [pc, #44]	; (80056d0 <sub_ubx_close+0x64>)
 80056a2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80056a4:	490b      	ldr	r1, [pc, #44]	; (80056d4 <sub_ubx_close+0x68>)
 80056a6:	400b      	ands	r3, r1
 80056a8:	6393      	str	r3, [r2, #56]	; 0x38

    //__DISMISS_FULL_SPEED();
    __CLR_UBX();
 80056aa:	4a0b      	ldr	r2, [pc, #44]	; (80056d8 <sub_ubx_close+0x6c>)
 80056ac:	2364      	movs	r3, #100	; 0x64
 80056ae:	21ff      	movs	r1, #255	; 0xff
 80056b0:	54d1      	strb	r1, [r2, r3]
}
 80056b2:	4770      	bx	lr
 80056b4:	400200a8 	.word	0x400200a8
 80056b8:	f00fffff 	.word	0xf00fffff
 80056bc:	40020080 	.word	0x40020080
 80056c0:	4002006c 	.word	0x4002006c
 80056c4:	40020000 	.word	0x40020000
 80056c8:	40004400 	.word	0x40004400
 80056cc:	00121b5f 	.word	0x00121b5f
 80056d0:	40021000 	.word	0x40021000
 80056d4:	fffdffff 	.word	0xfffdffff
 80056d8:	20002650 	.word	0x20002650

080056dc <sub_ubx_fletcher>:


ot_u16 sub_ubx_fletcher(ot_u8* input, ot_uint length) {
 80056dc:	b510      	push	{r4, lr}
    ot_uni16 ck;
    ck.ushort = 0;
 80056de:	2400      	movs	r4, #0
//        ck.ubyte[0] += input[i];
//        ck.ubyte[1] += ck.ubyte[0];
//    }
//    return ck.ushort;
    
    while (length > 0) {
 80056e0:	e011      	b.n	8005706 <sub_ubx_fletcher+0x2a>
        length--;
 80056e2:	3901      	subs	r1, #1
 80056e4:	b289      	uxth	r1, r1
        ck.ubyte[0] += *input++;
 80056e6:	7802      	ldrb	r2, [r0, #0]
 80056e8:	1912      	adds	r2, r2, r4
 80056ea:	b2d3      	uxtb	r3, r2
 80056ec:	22ff      	movs	r2, #255	; 0xff
 80056ee:	4394      	bics	r4, r2
 80056f0:	0022      	movs	r2, r4
 80056f2:	431a      	orrs	r2, r3
        ck.ubyte[1] += ck.ubyte[0];
 80056f4:	0414      	lsls	r4, r2, #16
 80056f6:	0e24      	lsrs	r4, r4, #24
 80056f8:	191b      	adds	r3, r3, r4
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	24ff      	movs	r4, #255	; 0xff
 8005700:	4014      	ands	r4, r2
 8005702:	431c      	orrs	r4, r3
        ck.ubyte[0] += *input++;
 8005704:	3001      	adds	r0, #1
    while (length > 0) {
 8005706:	2900      	cmp	r1, #0
 8005708:	d1eb      	bne.n	80056e2 <sub_ubx_fletcher+0x6>
    }
    return ck.ushort;
 800570a:	b2a0      	uxth	r0, r4
}
 800570c:	bd10      	pop	{r4, pc}
	...

08005710 <ubxdrv_rxsync_isr>:
  * There are two kinds of ISRs in this driver: DMA ISRs and Pin ISRs.
  * The DMA ISRs occur when the data is finished being transmitted or received.
  * The Pin ISRs occur when there is a wake-up or handshaking signal detected.
  */

void ubxdrv_rxsync_isr(void) {
 8005710:	b510      	push	{r4, lr}
#   if (__USE_RXBREAK)
    // Falling edge ISR on RX line, which can wakeup from stop
    EXTI->IMR  &= ~GNSS_UART_RXPIN;
    ubx.buf.sync.syncB5 = 0xB5;
#   else
    ubx.buf.sync.syncB5 = 0;
 8005712:	4b07      	ldr	r3, [pc, #28]	; (8005730 <ubxdrv_rxsync_isr+0x20>)
 8005714:	2400      	movs	r4, #0
 8005716:	701c      	strb	r4, [r3, #0]
#   endif
    ubx.buf.sync.sync62 = 0;
 8005718:	705c      	strb	r4, [r3, #1]
    
    // Open UART for character-RX
    ubx.state       = UBX_Idle;
 800571a:	2264      	movs	r2, #100	; 0x64
 800571c:	549c      	strb	r4, [r3, r2]
    //ubxevt_rxinit();        // can be used for RX timeout
    sub_ubx_open();
 800571e:	f7ff ff93 	bl	8005648 <sub_ubx_open>
    __UART_RXOPEN();
 8005722:	4b04      	ldr	r3, [pc, #16]	; (8005734 <ubxdrv_rxsync_isr+0x24>)
 8005724:	601c      	str	r4, [r3, #0]
 8005726:	4a04      	ldr	r2, [pc, #16]	; (8005738 <ubxdrv_rxsync_isr+0x28>)
 8005728:	621a      	str	r2, [r3, #32]
 800572a:	2225      	movs	r2, #37	; 0x25
 800572c:	601a      	str	r2, [r3, #0]
}
 800572e:	bd10      	pop	{r4, pc}
 8005730:	20002650 	.word	0x20002650
 8005734:	40004400 	.word	0x40004400
 8005738:	00121b5f 	.word	0x00121b5f

0800573c <ubxdrv_reset>:
        BOARD_GNSS_SDNPORT->BRR = BOARD_GNSS_SDNPIN;
 800573c:	23a0      	movs	r3, #160	; 0xa0
 800573e:	05db      	lsls	r3, r3, #23
 8005740:	2202      	movs	r2, #2
 8005742:	629a      	str	r2, [r3, #40]	; 0x28
    
#else
#   warning "GNSS board configuration does not have Reset or Shutdown pins defined."
    
#endif
}
 8005744:	4770      	bx	lr
	...

08005748 <ubxdrv_init>:
ot_int ubxdrv_init(void* port_id) {
 8005748:	b570      	push	{r4, r5, r6, lr}
    ubxdrv_reset();
 800574a:	f7ff fff7 	bl	800573c <ubxdrv_reset>
    ubx.state     = UBX_Null;
 800574e:	4b23      	ldr	r3, [pc, #140]	; (80057dc <ubxdrv_init+0x94>)
 8005750:	24ff      	movs	r4, #255	; 0xff
 8005752:	2264      	movs	r2, #100	; 0x64
 8005754:	549c      	strb	r4, [r3, r2]
    ubx.baudrate  = UBXBAUD_STARTUP;
 8005756:	2696      	movs	r6, #150	; 0x96
 8005758:	01b6      	lsls	r6, r6, #6
 800575a:	66de      	str	r6, [r3, #108]	; 0x6c
    __UART_CLKON();
 800575c:	4d20      	ldr	r5, [pc, #128]	; (80057e0 <ubxdrv_init+0x98>)
 800575e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	029b      	lsls	r3, r3, #10
 8005764:	4313      	orrs	r3, r2
 8005766:	63ab      	str	r3, [r5, #56]	; 0x38
    GNSS_UART->BRR = __SET_USARTDIV(UBXBAUD_STARTUP);
 8005768:	2001      	movs	r0, #1
 800576a:	f004 fa61 	bl	8009c30 <platform_get_clockhz>
 800576e:	2396      	movs	r3, #150	; 0x96
 8005770:	015b      	lsls	r3, r3, #5
 8005772:	469c      	mov	ip, r3
 8005774:	4460      	add	r0, ip
 8005776:	0031      	movs	r1, r6
 8005778:	f7fa fcc6 	bl	8000108 <__udivsi3>
 800577c:	4b19      	ldr	r3, [pc, #100]	; (80057e4 <ubxdrv_init+0x9c>)
 800577e:	60d8      	str	r0, [r3, #12]
    GNSS_UART->CR3 = USART_CR3_DMAR | USART_CR3_DMAT;
 8005780:	22c0      	movs	r2, #192	; 0xc0
 8005782:	609a      	str	r2, [r3, #8]
    GNSS_UART->CR2 = 0;
 8005784:	2200      	movs	r2, #0
 8005786:	605a      	str	r2, [r3, #4]
    GNSS_UART->CR1 = 0;
 8005788:	601a      	str	r2, [r3, #0]
    __UART_CLKOFF();
 800578a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800578c:	4a16      	ldr	r2, [pc, #88]	; (80057e8 <ubxdrv_init+0xa0>)
 800578e:	4013      	ands	r3, r2
 8005790:	63ab      	str	r3, [r5, #56]	; 0x38
    _DMARX->CPAR    = (uint32_t)&(GNSS_UART->RDR);
 8005792:	4b16      	ldr	r3, [pc, #88]	; (80057ec <ubxdrv_init+0xa4>)
 8005794:	4a16      	ldr	r2, [pc, #88]	; (80057f0 <ubxdrv_init+0xa8>)
 8005796:	609a      	str	r2, [r3, #8]
    _DMATX->CPAR    = (uint32_t)&(GNSS_UART->TDR);
 8005798:	4b16      	ldr	r3, [pc, #88]	; (80057f4 <ubxdrv_init+0xac>)
 800579a:	4a17      	ldr	r2, [pc, #92]	; (80057f8 <ubxdrv_init+0xb0>)
 800579c:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800579e:	4b17      	ldr	r3, [pc, #92]	; (80057fc <ubxdrv_init+0xb4>)
 80057a0:	21c2      	movs	r1, #194	; 0xc2
 80057a2:	0089      	lsls	r1, r1, #2
 80057a4:	585a      	ldr	r2, [r3, r1]
 80057a6:	0212      	lsls	r2, r2, #8
 80057a8:	0a12      	lsrs	r2, r2, #8
 80057aa:	2080      	movs	r0, #128	; 0x80
 80057ac:	05c0      	lsls	r0, r0, #23
 80057ae:	4302      	orrs	r2, r0
 80057b0:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057b2:	2580      	movs	r5, #128	; 0x80
 80057b4:	012d      	lsls	r5, r5, #4
 80057b6:	601d      	str	r5, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057b8:	585a      	ldr	r2, [r3, r1]
 80057ba:	0212      	lsls	r2, r2, #8
 80057bc:	0a12      	lsrs	r2, r2, #8
 80057be:	4302      	orrs	r2, r0
 80057c0:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057c2:	601d      	str	r5, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057c4:	3114      	adds	r1, #20
 80057c6:	585a      	ldr	r2, [r3, r1]
 80057c8:	43a2      	bics	r2, r4
 80057ca:	2040      	movs	r0, #64	; 0x40
 80057cc:	4302      	orrs	r2, r0
 80057ce:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	0552      	lsls	r2, r2, #21
 80057d4:	601a      	str	r2, [r3, #0]
}
 80057d6:	30bf      	adds	r0, #191	; 0xbf
 80057d8:	bd70      	pop	{r4, r5, r6, pc}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	20002650 	.word	0x20002650
 80057e0:	40021000 	.word	0x40021000
 80057e4:	40004400 	.word	0x40004400
 80057e8:	fffdffff 	.word	0xfffdffff
 80057ec:	4002006c 	.word	0x4002006c
 80057f0:	40004424 	.word	0x40004424
 80057f4:	40020080 	.word	0x40020080
 80057f8:	40004428 	.word	0x40004428
 80057fc:	e000e100 	.word	0xe000e100

08005800 <ubxdrv_turnon>:
        BOARD_GNSS_SDNPORT->BSRR = BOARD_GNSS_SDNPIN;
 8005800:	23a0      	movs	r3, #160	; 0xa0
 8005802:	05db      	lsls	r3, r3, #23
 8005804:	2202      	movs	r2, #2
 8005806:	619a      	str	r2, [r3, #24]
///      only data we can find has hard reset operation taking 10ms.  It needs
///      to be long enough for capacitance / inductance in the powering-up to 
///      be overcome.  Experimentation will ensue.
    BOARD_GNSS_TURNON();
    return 20;
}
 8005808:	2014      	movs	r0, #20
 800580a:	4770      	bx	lr

0800580c <ubxdrv_extwakeup>:
    	BOARD_GNSS_INT0PORT->BSRR = BOARD_GNSS_INT0PIN;
 800580c:	23a0      	movs	r3, #160	; 0xa0
 800580e:	05db      	lsls	r3, r3, #23
 8005810:	2201      	movs	r2, #1
 8005812:	619a      	str	r2, [r3, #24]


ot_long ubxdrv_extwakeup(void) {
	BOARD_GNSS_INTON();
	return 20;
}
 8005814:	2014      	movs	r0, #20
 8005816:	4770      	bx	lr

08005818 <ubxdrv_getpwrcode>:
}


ot_u8 ubxdrv_getpwrcode(void) {
/// Power code: 0-3.  For this GNSS impl it's always 1 or 2
    return 1 + (ubx.state < 0);
 8005818:	4a04      	ldr	r2, [pc, #16]	; (800582c <ubxdrv_getpwrcode+0x14>)
 800581a:	2364      	movs	r3, #100	; 0x64
 800581c:	56d3      	ldrsb	r3, [r2, r3]
 800581e:	2b00      	cmp	r3, #0
 8005820:	db01      	blt.n	8005826 <ubxdrv_getpwrcode+0xe>
 8005822:	2001      	movs	r0, #1
}
 8005824:	4770      	bx	lr
    return 1 + (ubx.state < 0);
 8005826:	2002      	movs	r0, #2
 8005828:	e7fc      	b.n	8005824 <ubxdrv_getpwrcode+0xc>
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	20002650 	.word	0x20002650

08005830 <ubxdrv_kill>:
    if (ubx.state == UBX_Null) {
        ubx.state = UBX_Idle;
    }
}

void ubxdrv_kill(void) {
 8005830:	b510      	push	{r4, lr}
    // Close down the UART peripheral
    sub_ubx_close();
 8005832:	f7ff ff1b 	bl	800566c <sub_ubx_close>
}
 8005836:	bd10      	pop	{r4, pc}

08005838 <ubxdrv_turnoff>:
void ubxdrv_turnoff(void) {
 8005838:	b510      	push	{r4, lr}
    ubxdrv_kill();
 800583a:	f7ff fff9 	bl	8005830 <ubxdrv_kill>
        BOARD_GNSS_SDNPORT->BRR = BOARD_GNSS_SDNPIN;
 800583e:	23a0      	movs	r3, #160	; 0xa0
 8005840:	05db      	lsls	r3, r3, #23
 8005842:	2202      	movs	r2, #2
 8005844:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005846:	bd10      	pop	{r4, pc}

08005848 <sub_ubx_txcont>:




void sub_ubx_txcont(void) {
    _DMATX->CCR         = 0;
 8005848:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <sub_ubx_txcont+0x38>)
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]
    _DMATX->CMAR        = (ot_u32)&ubx.buf.header;
 800584e:	4a0d      	ldr	r2, [pc, #52]	; (8005884 <sub_ubx_txcont+0x3c>)
 8005850:	60da      	str	r2, [r3, #12]
    _DMATX->CNDTR       = (ot_u16)ubx.frame_len + UBX_DMAFLUFF;
 8005852:	3a02      	subs	r2, #2
 8005854:	2166      	movs	r1, #102	; 0x66
 8005856:	5a52      	ldrh	r2, [r2, r1]
 8005858:	605a      	str	r2, [r3, #4]
    DMA1->IFCR          = (_DMARX_IFG | _DMATX_IFG);     
 800585a:	4a0b      	ldr	r2, [pc, #44]	; (8005888 <sub_ubx_txcont+0x40>)
 800585c:	21ff      	movs	r1, #255	; 0xff
 800585e:	0509      	lsls	r1, r1, #20
 8005860:	6051      	str	r1, [r2, #4]
    DMA1_CSELR->CSELR   = (DMA1_CSELR->CSELR & ~_DMA_CSEL_MASK) | _DMATX_CSEL;
 8005862:	480a      	ldr	r0, [pc, #40]	; (800588c <sub_ubx_txcont+0x44>)
 8005864:	6802      	ldr	r2, [r0, #0]
 8005866:	490a      	ldr	r1, [pc, #40]	; (8005890 <sub_ubx_txcont+0x48>)
 8005868:	4011      	ands	r1, r2
 800586a:	2280      	movs	r2, #128	; 0x80
 800586c:	04d2      	lsls	r2, r2, #19
 800586e:	430a      	orrs	r2, r1
 8005870:	6002      	str	r2, [r0, #0]
    __UART_CLEAR();
 8005872:	4a08      	ldr	r2, [pc, #32]	; (8005894 <sub_ubx_txcont+0x4c>)
 8005874:	4908      	ldr	r1, [pc, #32]	; (8005898 <sub_ubx_txcont+0x50>)
 8005876:	6211      	str	r1, [r2, #32]
    _DMATX->CCR         = (DMA_CCR_DIR | DMA_CCR_MINC | (2<<DMA_CCR_PL_Pos) | DMA_CCR_TCIE | DMA_CCR_EN);
 8005878:	4a08      	ldr	r2, [pc, #32]	; (800589c <sub_ubx_txcont+0x54>)
 800587a:	601a      	str	r2, [r3, #0]
}
 800587c:	4770      	bx	lr
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	40020080 	.word	0x40020080
 8005884:	20002652 	.word	0x20002652
 8005888:	40020000 	.word	0x40020000
 800588c:	400200a8 	.word	0x400200a8
 8005890:	f00fffff 	.word	0xf00fffff
 8005894:	40004400 	.word	0x40004400
 8005898:	00121b5f 	.word	0x00121b5f
 800589c:	00002093 	.word	0x00002093

080058a0 <ubxdrv_txsync>:


ot_u16 ubxdrv_txsync(void) {
 80058a0:	b510      	push	{r4, lr}
/// Send a single FF byte and return half a second, per spec.
    sub_ubx_open();
 80058a2:	f7ff fed1 	bl	8005648 <sub_ubx_open>
    __UART_CLEAR();
 80058a6:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <ubxdrv_txsync+0x28>)
 80058a8:	4a08      	ldr	r2, [pc, #32]	; (80058cc <ubxdrv_txsync+0x2c>)
 80058aa:	621a      	str	r2, [r3, #32]
    ubx.state       = UBX_Tx_Sync;
 80058ac:	4908      	ldr	r1, [pc, #32]	; (80058d0 <ubxdrv_txsync+0x30>)
 80058ae:	2264      	movs	r2, #100	; 0x64
 80058b0:	2005      	movs	r0, #5
 80058b2:	5488      	strb	r0, [r1, r2]
    GNSS_UART->CR1  = USART_CR1_UE;
 80058b4:	3a63      	subs	r2, #99	; 0x63
 80058b6:	601a      	str	r2, [r3, #0]
    GNSS_UART->TDR  = 0xFF;
 80058b8:	32fe      	adds	r2, #254	; 0xfe
 80058ba:	629a      	str	r2, [r3, #40]	; 0x28
    GNSS_UART->CR1  = (USART_CR1_UE | USART_CR1_TE | USART_CR1_TCIE);
 80058bc:	3ab6      	subs	r2, #182	; 0xb6
 80058be:	601a      	str	r2, [r3, #0]
    
    return 512;
 80058c0:	307b      	adds	r0, #123	; 0x7b
}
 80058c2:	0080      	lsls	r0, r0, #2
 80058c4:	bd10      	pop	{r4, pc}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	40004400 	.word	0x40004400
 80058cc:	00121b5f 	.word	0x00121b5f
 80058d0:	20002650 	.word	0x20002650

080058d4 <ubxdrv_tx>:


ot_int ubxdrv_tx(void) {
 80058d4:	b570      	push	{r4, r5, r6, lr}
/// Data TX will always occur on call.  RX will be stopped.
    ot_u16 holdtime;
    ot_uni16 fletcher;

    // close ongoing UART process (if any)
    sub_ubx_close();
 80058d6:	f7ff fec9 	bl	800566c <sub_ubx_close>
    
    // Set up TX
    __SYS_CLKON();

    ubx.frame_len   = ubx.buf.header.length + sizeof(ubx_header_t);
 80058da:	4d24      	ldr	r5, [pc, #144]	; (800596c <ubxdrv_tx+0x98>)
 80058dc:	88a9      	ldrh	r1, [r5, #4]
 80058de:	3104      	adds	r1, #4
 80058e0:	b289      	uxth	r1, r1
 80058e2:	2666      	movs	r6, #102	; 0x66
 80058e4:	53a9      	strh	r1, [r5, r6]
    ubx.cursor      = (ot_u8*)&ubx.buf.header + ubx.frame_len;
 80058e6:	1ca8      	adds	r0, r5, #2
 80058e8:	180c      	adds	r4, r1, r0
 80058ea:	66ac      	str	r4, [r5, #104]	; 0x68
    fletcher.ushort = sub_ubx_fletcher((ot_u8*)&ubx.buf.header, ubx.frame_len);
 80058ec:	f7ff fef6 	bl	80056dc <sub_ubx_fletcher>
    *ubx.cursor++   = fletcher.ubyte[0];
 80058f0:	1c63      	adds	r3, r4, #1
 80058f2:	66ab      	str	r3, [r5, #104]	; 0x68
 80058f4:	7020      	strb	r0, [r4, #0]
    *ubx.cursor++   = fletcher.ubyte[1];
 80058f6:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	66aa      	str	r2, [r5, #104]	; 0x68
 80058fc:	0400      	lsls	r0, r0, #16
 80058fe:	0e00      	lsrs	r0, r0, #24
 8005900:	7018      	strb	r0, [r3, #0]
    ubx.frame_len  += 2;
 8005902:	5bac      	ldrh	r4, [r5, r6]
 8005904:	3402      	adds	r4, #2
 8005906:	b2a4      	uxth	r4, r4
 8005908:	53ac      	strh	r4, [r5, r6]
    holdtime        = __UBX_TIMEOUT(ubx.frame_len+2);
 800590a:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800590c:	20a0      	movs	r0, #160	; 0xa0
 800590e:	0400      	lsls	r0, r0, #16
 8005910:	f7fa fbfa 	bl	8000108 <__udivsi3>
 8005914:	4344      	muls	r4, r0
 8005916:	3402      	adds	r4, #2
 8005918:	0aa4      	lsrs	r4, r4, #10
 800591a:	b2a4      	uxth	r4, r4
 800591c:	3401      	adds	r4, #1
 800591e:	b2a4      	uxth	r4, r4
    
    sub_ubx_open();
 8005920:	f7ff fe92 	bl	8005648 <sub_ubx_open>
    ubx.state = UBX_Tx_Wait;
 8005924:	2364      	movs	r3, #100	; 0x64
 8005926:	2203      	movs	r2, #3
 8005928:	54ea      	strb	r2, [r5, r3]
    __UART_TXOPEN();
 800592a:	4b11      	ldr	r3, [pc, #68]	; (8005970 <ubxdrv_tx+0x9c>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	4910      	ldr	r1, [pc, #64]	; (8005974 <ubxdrv_tx+0xa0>)
 8005932:	6219      	str	r1, [r3, #32]
 8005934:	2109      	movs	r1, #9
 8005936:	6019      	str	r1, [r3, #0]
    
    ubx.buf.sync.syncB5 = 0xb5;
 8005938:	23b5      	movs	r3, #181	; 0xb5
 800593a:	702b      	strb	r3, [r5, #0]
    ubx.buf.sync.sync62 = 0x62;
 800593c:	3b53      	subs	r3, #83	; 0x53
 800593e:	706b      	strb	r3, [r5, #1]
    __DMA_TXOPEN(&ubx.buf.sync.syncB5, 2);
 8005940:	4b0d      	ldr	r3, [pc, #52]	; (8005978 <ubxdrv_tx+0xa4>)
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	60dd      	str	r5, [r3, #12]
 8005946:	3202      	adds	r2, #2
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	4a0c      	ldr	r2, [pc, #48]	; (800597c <ubxdrv_tx+0xa8>)
 800594c:	21ff      	movs	r1, #255	; 0xff
 800594e:	0509      	lsls	r1, r1, #20
 8005950:	6051      	str	r1, [r2, #4]
 8005952:	480b      	ldr	r0, [pc, #44]	; (8005980 <ubxdrv_tx+0xac>)
 8005954:	6802      	ldr	r2, [r0, #0]
 8005956:	490b      	ldr	r1, [pc, #44]	; (8005984 <ubxdrv_tx+0xb0>)
 8005958:	4011      	ands	r1, r2
 800595a:	2280      	movs	r2, #128	; 0x80
 800595c:	04d2      	lsls	r2, r2, #19
 800595e:	430a      	orrs	r2, r1
 8005960:	6002      	str	r2, [r0, #0]
 8005962:	4a09      	ldr	r2, [pc, #36]	; (8005988 <ubxdrv_tx+0xb4>)
 8005964:	601a      	str	r2, [r3, #0]

    return holdtime;
 8005966:	b220      	sxth	r0, r4
}
 8005968:	bd70      	pop	{r4, r5, r6, pc}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	20002650 	.word	0x20002650
 8005970:	40004400 	.word	0x40004400
 8005974:	00121b5f 	.word	0x00121b5f
 8005978:	40020080 	.word	0x40020080
 800597c:	40020000 	.word	0x40020000
 8005980:	400200a8 	.word	0x400200a8
 8005984:	f00fffff 	.word	0xf00fffff
 8005988:	00002093 	.word	0x00002093

0800598c <ubxdrv_rx>:




void ubxdrv_rx(void) {
 800598c:	b510      	push	{r4, lr}
    sub_ubx_close();               // State will be UBX_NULL until RX edge detect
 800598e:	f7ff fe6d 	bl	800566c <sub_ubx_close>
    
    // Buffer emptying process
    ubx.cursor = (ot_u8*)&ubx.buf.header;
 8005992:	4b03      	ldr	r3, [pc, #12]	; (80059a0 <ubxdrv_rx+0x14>)
 8005994:	1c9a      	adds	r2, r3, #2
 8005996:	669a      	str	r2, [r3, #104]	; 0x68
    
#   if (__USE_RXBREAK)
    EXTI->IMR  |= GNSS_UART_RXPIN;
#   else
    ubxdrv_rxsync_isr();
 8005998:	f7ff feba 	bl	8005710 <ubxdrv_rxsync_isr>
#   endif
}
 800599c:	bd10      	pop	{r4, pc}
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	20002650 	.word	0x20002650

080059a4 <platform_isr_usart2>:
void __UART_ISR(void) {
 80059a4:	b510      	push	{r4, lr}
    uart_isr = GNSS_UART->ISR;
 80059a6:	4b21      	ldr	r3, [pc, #132]	; (8005a2c <platform_isr_usart2+0x88>)
 80059a8:	69da      	ldr	r2, [r3, #28]
    __UART_CLEAR();
 80059aa:	4921      	ldr	r1, [pc, #132]	; (8005a30 <platform_isr_usart2+0x8c>)
 80059ac:	6219      	str	r1, [r3, #32]
    if (uart_isr & USART_ISR_RXNE) {
 80059ae:	0693      	lsls	r3, r2, #26
 80059b0:	d52e      	bpl.n	8005a10 <platform_isr_usart2+0x6c>
        ot_u8 inbyte = GNSS_UART->RDR;
 80059b2:	4b1e      	ldr	r3, [pc, #120]	; (8005a2c <platform_isr_usart2+0x88>)
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	b2db      	uxtb	r3, r3
        if (ubx.buf.sync.syncB5 == 0xB5) {
 80059b8:	4a1e      	ldr	r2, [pc, #120]	; (8005a34 <platform_isr_usart2+0x90>)
 80059ba:	7812      	ldrb	r2, [r2, #0]
 80059bc:	2ab5      	cmp	r2, #181	; 0xb5
 80059be:	d002      	beq.n	80059c6 <platform_isr_usart2+0x22>
            ubx.buf.sync.syncB5 = inbyte;
 80059c0:	4a1c      	ldr	r2, [pc, #112]	; (8005a34 <platform_isr_usart2+0x90>)
 80059c2:	7013      	strb	r3, [r2, #0]
 80059c4:	e02d      	b.n	8005a22 <platform_isr_usart2+0x7e>
            ubx.buf.sync.sync62 = inbyte;
 80059c6:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <platform_isr_usart2+0x90>)
 80059c8:	7053      	strb	r3, [r2, #1]
            if (ubx.buf.sync.sync62 == 0x62) {
 80059ca:	2b62      	cmp	r3, #98	; 0x62
 80059cc:	d004      	beq.n	80059d8 <platform_isr_usart2+0x34>
                ubx.buf.sync.syncB5 = 0;
 80059ce:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <platform_isr_usart2+0x90>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
                ubx.buf.sync.sync62 = 0;
 80059d4:	705a      	strb	r2, [r3, #1]
 80059d6:	e024      	b.n	8005a22 <platform_isr_usart2+0x7e>
                ubx.state       = UBX_RxHeader;
 80059d8:	3302      	adds	r3, #2
 80059da:	2101      	movs	r1, #1
 80059dc:	54d1      	strb	r1, [r2, r3]
                GNSS_UART->CR1 = (USART_CR1_UE | USART_CR1_RE);
 80059de:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <platform_isr_usart2+0x88>)
 80059e0:	3104      	adds	r1, #4
 80059e2:	6019      	str	r1, [r3, #0]
                __DMA_RXOPEN( &ubx.buf.sync.sync62, UBX_OVERHEADBYTES+1);
 80059e4:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <platform_isr_usart2+0x94>)
 80059e6:	2100      	movs	r1, #0
 80059e8:	6019      	str	r1, [r3, #0]
 80059ea:	3201      	adds	r2, #1
 80059ec:	60da      	str	r2, [r3, #12]
 80059ee:	2207      	movs	r2, #7
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	4a12      	ldr	r2, [pc, #72]	; (8005a3c <platform_isr_usart2+0x98>)
 80059f4:	21ff      	movs	r1, #255	; 0xff
 80059f6:	0509      	lsls	r1, r1, #20
 80059f8:	6051      	str	r1, [r2, #4]
 80059fa:	4811      	ldr	r0, [pc, #68]	; (8005a40 <platform_isr_usart2+0x9c>)
 80059fc:	6802      	ldr	r2, [r0, #0]
 80059fe:	4911      	ldr	r1, [pc, #68]	; (8005a44 <platform_isr_usart2+0xa0>)
 8005a00:	4011      	ands	r1, r2
 8005a02:	2280      	movs	r2, #128	; 0x80
 8005a04:	03d2      	lsls	r2, r2, #15
 8005a06:	430a      	orrs	r2, r1
 8005a08:	6002      	str	r2, [r0, #0]
 8005a0a:	4a0f      	ldr	r2, [pc, #60]	; (8005a48 <platform_isr_usart2+0xa4>)
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	e008      	b.n	8005a22 <platform_isr_usart2+0x7e>
    else if ((uart_isr & USART_ISR_TC) && (ubx.state != UBX_Tx_Sync)) {
 8005a10:	0653      	lsls	r3, r2, #25
 8005a12:	d504      	bpl.n	8005a1e <platform_isr_usart2+0x7a>
 8005a14:	4a07      	ldr	r2, [pc, #28]	; (8005a34 <platform_isr_usart2+0x90>)
 8005a16:	2364      	movs	r3, #100	; 0x64
 8005a18:	56d3      	ldrsb	r3, [r2, r3]
 8005a1a:	2b05      	cmp	r3, #5
 8005a1c:	d102      	bne.n	8005a24 <platform_isr_usart2+0x80>
        sub_ubx_close();
 8005a1e:	f7ff fe25 	bl	800566c <sub_ubx_close>
}
 8005a22:	bd10      	pop	{r4, pc}
        ubxdrv_rx();
 8005a24:	f7ff ffb2 	bl	800598c <ubxdrv_rx>
 8005a28:	e7fb      	b.n	8005a22 <platform_isr_usart2+0x7e>
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	40004400 	.word	0x40004400
 8005a30:	00121b5f 	.word	0x00121b5f
 8005a34:	20002650 	.word	0x20002650
 8005a38:	4002006c 	.word	0x4002006c
 8005a3c:	40020000 	.word	0x40020000
 8005a40:	400200a8 	.word	0x400200a8
 8005a44:	f00fffff 	.word	0xf00fffff
 8005a48:	00002083 	.word	0x00002083

08005a4c <ubxdrv_setbaudrate>:
void ubxdrv_setbaudrate(ot_u32 baud_rate) {
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	0004      	movs	r4, r0
    sub_ubx_close();
 8005a50:	f7ff fe0c 	bl	800566c <sub_ubx_close>
    __UART_CLKON();
 8005a54:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <ubxdrv_setbaudrate+0x30>)
 8005a56:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	6393      	str	r3, [r2, #56]	; 0x38
    GNSS_UART->BRR = __SET_USARTDIV(baud_rate); 
 8005a60:	2001      	movs	r0, #1
 8005a62:	f004 f8e5 	bl	8009c30 <platform_get_clockhz>
 8005a66:	0863      	lsrs	r3, r4, #1
 8005a68:	18c0      	adds	r0, r0, r3
 8005a6a:	0021      	movs	r1, r4
 8005a6c:	f7fa fb4c 	bl	8000108 <__udivsi3>
 8005a70:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <ubxdrv_setbaudrate+0x34>)
 8005a72:	60d8      	str	r0, [r3, #12]
    ubxdrv_rx();
 8005a74:	f7ff ff8a 	bl	800598c <ubxdrv_rx>
}
 8005a78:	bd10      	pop	{r4, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	40004400 	.word	0x40004400

08005a84 <ubxdrv_isr>:





void ubxdrv_isr(void) {
 8005a84:	b510      	push	{r4, lr}
///      done, the process completes.  </LI>
    //ot_bool tx_process = False;
    ot_int      error_code;
    ot_uni16    fletcher;

    __DMA_ALL_CLOSE();
 8005a86:	4a36      	ldr	r2, [pc, #216]	; (8005b60 <ubxdrv_isr+0xdc>)
 8005a88:	6813      	ldr	r3, [r2, #0]
 8005a8a:	4936      	ldr	r1, [pc, #216]	; (8005b64 <ubxdrv_isr+0xe0>)
 8005a8c:	400b      	ands	r3, r1
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	2300      	movs	r3, #0
 8005a92:	4a35      	ldr	r2, [pc, #212]	; (8005b68 <ubxdrv_isr+0xe4>)
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	4a35      	ldr	r2, [pc, #212]	; (8005b6c <ubxdrv_isr+0xe8>)
 8005a98:	6013      	str	r3, [r2, #0]
    __DMA_ALL_CLEAR();
 8005a9a:	4b35      	ldr	r3, [pc, #212]	; (8005b70 <ubxdrv_isr+0xec>)
 8005a9c:	22ff      	movs	r2, #255	; 0xff
 8005a9e:	0512      	lsls	r2, r2, #20
 8005aa0:	605a      	str	r2, [r3, #4]

    switch (ubx.state) {
 8005aa2:	4a34      	ldr	r2, [pc, #208]	; (8005b74 <ubxdrv_isr+0xf0>)
 8005aa4:	2364      	movs	r3, #100	; 0x64
 8005aa6:	56d3      	ldrsb	r3, [r2, r3]
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	2a04      	cmp	r2, #4
 8005aac:	d830      	bhi.n	8005b10 <ubxdrv_isr+0x8c>
 8005aae:	0093      	lsls	r3, r2, #2
 8005ab0:	4a31      	ldr	r2, [pc, #196]	; (8005b78 <ubxdrv_isr+0xf4>)
 8005ab2:	58d3      	ldr	r3, [r2, r3]
 8005ab4:	469f      	mov	pc, r3
        case UBX_Idle: //note, case doesn't break!

        case UBX_RxHeader: {        
            // If there is no payload or if the input queue is being used by 
            // someone else, this packet is registered as an error.
            ubx.frame_len   = ubx.buf.header.length;
 8005ab6:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <ubxdrv_isr+0xf0>)
 8005ab8:	8899      	ldrh	r1, [r3, #4]
 8005aba:	2266      	movs	r2, #102	; 0x66
 8005abc:	5299      	strh	r1, [r3, r2]
            ubx.cursor     += UBX_OVERHEADBYTES;
 8005abe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005ac0:	3206      	adds	r2, #6
 8005ac2:	669a      	str	r2, [r3, #104]	; 0x68
            
            // Packet is 0 length: hence it is done
            if (ubx.frame_len == 0) {
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	d023      	beq.n	8005b10 <ubxdrv_isr+0x8c>
                goto ubxdrv_isr_RXSIG;
            }
            
            // Check to see if length is out of bounds.
            else if (ubx.frame_len > sizeof(ubx_buf_t)) {
 8005ac8:	295c      	cmp	r1, #92	; 0x5c
 8005aca:	d845      	bhi.n	8005b58 <ubxdrv_isr+0xd4>
            }
            
            // Length in bounds, receive rest of packet
            // Most important first thing is to reset DMA to grab first frame.
            else {
                __DMA_RXOPEN(ubx.cursor, ubx.frame_len);
 8005acc:	4b27      	ldr	r3, [pc, #156]	; (8005b6c <ubxdrv_isr+0xe8>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	4a28      	ldr	r2, [pc, #160]	; (8005b74 <ubxdrv_isr+0xf0>)
 8005ad4:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8005ad6:	60d9      	str	r1, [r3, #12]
 8005ad8:	2166      	movs	r1, #102	; 0x66
 8005ada:	5a51      	ldrh	r1, [r2, r1]
 8005adc:	6059      	str	r1, [r3, #4]
 8005ade:	4924      	ldr	r1, [pc, #144]	; (8005b70 <ubxdrv_isr+0xec>)
 8005ae0:	20ff      	movs	r0, #255	; 0xff
 8005ae2:	0500      	lsls	r0, r0, #20
 8005ae4:	6048      	str	r0, [r1, #4]
 8005ae6:	4c1e      	ldr	r4, [pc, #120]	; (8005b60 <ubxdrv_isr+0xdc>)
 8005ae8:	6821      	ldr	r1, [r4, #0]
 8005aea:	481e      	ldr	r0, [pc, #120]	; (8005b64 <ubxdrv_isr+0xe0>)
 8005aec:	4008      	ands	r0, r1
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	03c9      	lsls	r1, r1, #15
 8005af2:	4301      	orrs	r1, r0
 8005af4:	6021      	str	r1, [r4, #0]
 8005af6:	4921      	ldr	r1, [pc, #132]	; (8005b7c <ubxdrv_isr+0xf8>)
 8005af8:	6019      	str	r1, [r3, #0]
                ubx.state = UBX_RxPayload;
 8005afa:	2364      	movs	r3, #100	; 0x64
 8005afc:	2102      	movs	r1, #2
 8005afe:	54d1      	strb	r1, [r2, r3]
            }
        } return;             // Wait for next DMA RX interrupt
 8005b00:	e01c      	b.n	8005b3c <ubxdrv_isr+0xb8>

        case UBX_RxPayload: {
            ubx.cursor += ubx.frame_len;
 8005b02:	4b1c      	ldr	r3, [pc, #112]	; (8005b74 <ubxdrv_isr+0xf0>)
 8005b04:	2266      	movs	r2, #102	; 0x66
 8005b06:	5a9a      	ldrh	r2, [r3, r2]
 8005b08:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005b0a:	468c      	mov	ip, r1
 8005b0c:	4462      	add	r2, ip
 8005b0e:	669a      	str	r2, [r3, #104]	; 0x68
    }

    // The RX process is complete
    // - Close UBX and call rxdone event handler from UBX Task
    ubxdrv_isr_RXSIG:
    fletcher.ubyte[1]   = *(--ubx.cursor);
 8005b10:	4818      	ldr	r0, [pc, #96]	; (8005b74 <ubxdrv_isr+0xf0>)
 8005b12:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8005b14:	1e4b      	subs	r3, r1, #1
 8005b16:	6683      	str	r3, [r0, #104]	; 0x68
 8005b18:	781c      	ldrb	r4, [r3, #0]
    fletcher.ubyte[0]   = *(--ubx.cursor);
 8005b1a:	3902      	subs	r1, #2
 8005b1c:	6681      	str	r1, [r0, #104]	; 0x68
 8005b1e:	780b      	ldrb	r3, [r1, #0]
 8005b20:	0224      	lsls	r4, r4, #8
    error_code          = fletcher.ushort - sub_ubx_fletcher((ot_u8*)&ubx.buf.header, ubx.cursor - (ot_u8*)&ubx.buf.header);
 8005b22:	431c      	orrs	r4, r3
 8005b24:	3002      	adds	r0, #2
 8005b26:	1a09      	subs	r1, r1, r0
 8005b28:	b289      	uxth	r1, r1
 8005b2a:	f7ff fdd7 	bl	80056dc <sub_ubx_fletcher>
 8005b2e:	1a24      	subs	r4, r4, r0
 8005b30:	b224      	sxth	r4, r4
    
    // This driver runs pretty tight -- the amount of time to process the 
    // packet in ubxevt_rxdone is the amount of time it takes to receive the 
    // header of the next packet.
    ubxdrv_isr_EXIT:
    ubxdrv_rx();
 8005b32:	f7ff ff2b 	bl	800598c <ubxdrv_rx>
    ubxevt_rxdone(error_code);
 8005b36:	0020      	movs	r0, r4
 8005b38:	f000 f91e 	bl	8005d78 <ubxevt_rxdone>
}
 8005b3c:	bd10      	pop	{r4, pc}
            ubx.state = UBX_Tx_Done;
 8005b3e:	4a0d      	ldr	r2, [pc, #52]	; (8005b74 <ubxdrv_isr+0xf0>)
 8005b40:	2364      	movs	r3, #100	; 0x64
 8005b42:	2104      	movs	r1, #4
 8005b44:	54d1      	strb	r1, [r2, r3]
            sub_ubx_txcont();
 8005b46:	f7ff fe7f 	bl	8005848 <sub_ubx_txcont>
            return;
 8005b4a:	e7f7      	b.n	8005b3c <ubxdrv_isr+0xb8>
            __UART_CLEAR();
 8005b4c:	4b0c      	ldr	r3, [pc, #48]	; (8005b80 <ubxdrv_isr+0xfc>)
 8005b4e:	4a0d      	ldr	r2, [pc, #52]	; (8005b84 <ubxdrv_isr+0x100>)
 8005b50:	621a      	str	r2, [r3, #32]
            GNSS_UART->CR1 = (USART_CR1_UE | USART_CR1_TE | USART_CR1_TCIE);
 8005b52:	2249      	movs	r2, #73	; 0x49
 8005b54:	601a      	str	r2, [r3, #0]
            return; 
 8005b56:	e7f1      	b.n	8005b3c <ubxdrv_isr+0xb8>
                error_code = -1;
 8005b58:	2401      	movs	r4, #1
 8005b5a:	4264      	negs	r4, r4
 8005b5c:	e7e9      	b.n	8005b32 <ubxdrv_isr+0xae>
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	400200a8 	.word	0x400200a8
 8005b64:	f00fffff 	.word	0xf00fffff
 8005b68:	40020080 	.word	0x40020080
 8005b6c:	4002006c 	.word	0x4002006c
 8005b70:	40020000 	.word	0x40020000
 8005b74:	20002650 	.word	0x20002650
 8005b78:	0800c4b8 	.word	0x0800c4b8
 8005b7c:	00002083 	.word	0x00002083
 8005b80:	40004400 	.word	0x40004400
 8005b84:	00121b5f 	.word	0x00121b5f

08005b88 <platform_isr_dma1ch6>:
void __DMARX_ISR(void) {
 8005b88:	b510      	push	{r4, lr}
    ubxdrv_isr();
 8005b8a:	f7ff ff7b 	bl	8005a84 <ubxdrv_isr>
}
 8005b8e:	bd10      	pop	{r4, pc}

08005b90 <platform_isr_dma1ch7>:
void __DMATX_ISR(void) {
 8005b90:	b510      	push	{r4, lr}
    ubxdrv_isr();
 8005b92:	f7ff ff77 	bl	8005a84 <ubxdrv_isr>
}
 8005b96:	bd10      	pop	{r4, pc}

08005b98 <ubx_config>:

/** External API functions
  * ========================================================================
  */
void ubx_config(ot_sig2 callback, ot_int onoff_interval) {
	ubx.onoff_interval	= onoff_interval;
 8005b98:	4a06      	ldr	r2, [pc, #24]	; (8005bb4 <ubx_config+0x1c>)
 8005b9a:	2378      	movs	r3, #120	; 0x78
 8005b9c:	52d1      	strh	r1, [r2, r3]
	ubx.dataready		= (callback == NULL) ? &otutils_sig2_null : callback;
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d005      	beq.n	8005bae <ubx_config+0x16>
 8005ba2:	4b04      	ldr	r3, [pc, #16]	; (8005bb4 <ubx_config+0x1c>)
 8005ba4:	6758      	str	r0, [r3, #116]	; 0x74
	ubx_is_configured	= True;
 8005ba6:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <ubx_config+0x20>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	701a      	strb	r2, [r3, #0]
}
 8005bac:	4770      	bx	lr
	ubx.dataready		= (callback == NULL) ? &otutils_sig2_null : callback;
 8005bae:	4803      	ldr	r0, [pc, #12]	; (8005bbc <ubx_config+0x24>)
 8005bb0:	e7f7      	b.n	8005ba2 <ubx_config+0xa>
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	20002650 	.word	0x20002650
 8005bb8:	20001174 	.word	0x20001174
 8005bbc:	08008df5 	.word	0x08008df5

08005bc0 <ubx_connect>:

void ubx_connect(void) {
 8005bc0:	b510      	push	{r4, lr}
/// Do nothing if UBX module is already connected, or if callback is NULL
    if (ubx_is_configured && ((ubx.msg_stamp == 0xFFFF) || (ubx.msg_stamp == 0x4102))) {
 8005bc2:	4b0c      	ldr	r3, [pc, #48]	; (8005bf4 <ubx_connect+0x34>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d013      	beq.n	8005bf2 <ubx_connect+0x32>
 8005bca:	4a0b      	ldr	r2, [pc, #44]	; (8005bf8 <ubx_connect+0x38>)
 8005bcc:	237a      	movs	r3, #122	; 0x7a
 8005bce:	5ad3      	ldrh	r3, [r2, r3]
 8005bd0:	4a0a      	ldr	r2, [pc, #40]	; (8005bfc <ubx_connect+0x3c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d002      	beq.n	8005bdc <ubx_connect+0x1c>
 8005bd6:	4a0a      	ldr	r2, [pc, #40]	; (8005c00 <ubx_connect+0x40>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d10a      	bne.n	8005bf2 <ubx_connect+0x32>
        ubx.msg_stamp   = 0;
 8005bdc:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <ubx_connect+0x38>)
 8005bde:	227a      	movs	r2, #122	; 0x7a
 8005be0:	2100      	movs	r1, #0
 8005be2:	5299      	strh	r1, [r3, r2]
        ubx.task->event = (BOARD_FEATURE(GNSS_SDN)) ? UBX_TURNON : UBX_WAKEUP;
 8005be4:	3a79      	subs	r2, #121	; 0x79
 8005be6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005be8:	700a      	strb	r2, [r1, #0]
        sys_preempt(ubx.task, 0);
 8005bea:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005bec:	2100      	movs	r1, #0
 8005bee:	f003 fd2b 	bl	8009648 <sys_preempt>
    }
}
 8005bf2:	bd10      	pop	{r4, pc}
 8005bf4:	20001174 	.word	0x20001174
 8005bf8:	20002650 	.word	0x20002650
 8005bfc:	0000ffff 	.word	0x0000ffff
 8005c00:	00004102 	.word	0x00004102

08005c04 <sub_convert_baudrate>:
ot_u16 ubx_ackcheck(void);



ot_u32 sub_convert_baudrate(ubx_speed_t ibaud) {
    return baudrate_table[ibaud];
 8005c04:	0080      	lsls	r0, r0, #2
 8005c06:	4b01      	ldr	r3, [pc, #4]	; (8005c0c <sub_convert_baudrate+0x8>)
 8005c08:	58c0      	ldr	r0, [r0, r3]
    //return 9600;
}
 8005c0a:	4770      	bx	lr
 8005c0c:	0800c4cc 	.word	0x0800c4cc

08005c10 <ubx_taskinit>:
    ubx_send_gonext(UBX_MSG_CFG_MSG, sizeof(ubx_payload_tx_cfg_msg_t));
    return ubx_waitfor_ack(UBX_MSG_CFG_MSG, UBX_CONFIG_TIMEOUT);
}


void ubx_taskinit(ot_task task) {
 8005c10:	b510      	push	{r4, lr}
 8005c12:	0004      	movs	r4, r0
    /// Basic task stuff to do at startup or task kill, no matter what
    ubx.task        = task;
 8005c14:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <ubx_taskinit+0x50>)
 8005c16:	6718      	str	r0, [r3, #112]	; 0x70
    task->event     = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	7003      	strb	r3, [r0, #0]
    task->cursor    = 0;
 8005c1c:	7043      	strb	r3, [r0, #1]
    task->reserve   = 1;
 8005c1e:	3301      	adds	r3, #1
 8005c20:	7083      	strb	r3, [r0, #2]
    task->latency   = 255;
 8005c22:	33fe      	adds	r3, #254	; 0xfe
 8005c24:	70c3      	strb	r3, [r0, #3]
    
    if (ubx_is_configured) {
 8005c26:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <ubx_taskinit+0x54>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d100      	bne.n	8005c30 <ubx_taskinit+0x20>
        /// @todo Not sure if I want this or not.
        ubx.msg_stamp    = 0;
        ubx.task->event = UBX_TURNON;
        sys_preempt(ubx.task, 50);
    }
}
 8005c2e:	bd10      	pop	{r4, pc}
        ubxdrv_kill();
 8005c30:	f7ff fdfe 	bl	8005830 <ubxdrv_kill>
        task->latency = ubxdrv_init(NULL);
 8005c34:	2000      	movs	r0, #0
 8005c36:	f7ff fd87 	bl	8005748 <ubxdrv_init>
 8005c3a:	70e0      	strb	r0, [r4, #3]
        ubx.ephemeris_stamp = (ot_u32)(-2*24*60*60);
 8005c3c:	4b08      	ldr	r3, [pc, #32]	; (8005c60 <ubx_taskinit+0x50>)
 8005c3e:	4a0a      	ldr	r2, [pc, #40]	; (8005c68 <ubx_taskinit+0x58>)
 8005c40:	67da      	str	r2, [r3, #124]	; 0x7c
        ubx.start_state = UBX_CFG_UART2;
 8005c42:	2280      	movs	r2, #128	; 0x80
 8005c44:	2105      	movs	r1, #5
 8005c46:	5499      	strb	r1, [r3, r2]
        ubx.msg_stamp    = 0;
 8005c48:	3a06      	subs	r2, #6
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	5299      	strh	r1, [r3, r2]
        ubx.task->event = UBX_TURNON;
 8005c4e:	3a79      	subs	r2, #121	; 0x79
 8005c50:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005c52:	700a      	strb	r2, [r1, #0]
        sys_preempt(ubx.task, 50);
 8005c54:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005c56:	2132      	movs	r1, #50	; 0x32
 8005c58:	f003 fcf6 	bl	8009648 <sys_preempt>
}
 8005c5c:	e7e7      	b.n	8005c2e <ubx_taskinit+0x1e>
 8005c5e:	46c0      	nop			; (mov r8, r8)
 8005c60:	20002650 	.word	0x20002650
 8005c64:	20001174 	.word	0x20001174
 8005c68:	fffd5d00 	.word	0xfffd5d00

08005c6c <ubx_retry_check>:


ot_bool ubx_retry_check(ot_u8 limit) {
 8005c6c:	b510      	push	{r4, lr}

    // If retries fail past the limit, assume Hardware is messed up.
    // Do a reset and log it.
    if (++ubx.task->cursor > limit) {
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <ubx_retry_check+0x40>)
 8005c70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c72:	7853      	ldrb	r3, [r2, #1]
 8005c74:	3301      	adds	r3, #1
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	7053      	strb	r3, [r2, #1]
 8005c7a:	4283      	cmp	r3, r0
 8005c7c:	d913      	bls.n	8005ca6 <ubx_retry_check+0x3a>
    
        // Send error callback to application, and force disconnect.
        ubx.dataready(0, 0);
 8005c7e:	4c0b      	ldr	r4, [pc, #44]	; (8005cac <ubx_retry_check+0x40>)
 8005c80:	2100      	movs	r1, #0
 8005c82:	2000      	movs	r0, #0
 8005c84:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005c86:	4798      	blx	r3
        ubx.msg_stamp	= 0xFFFF;
 8005c88:	237a      	movs	r3, #122	; 0x7a
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	4252      	negs	r2, r2
 8005c8e:	52e2      	strh	r2, [r4, r3]
        ubx.dataready   = &otutils_sig2_null;
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <ubx_retry_check+0x44>)
 8005c92:	6763      	str	r3, [r4, #116]	; 0x74
    
        ///@todo log fault with fault manager
        ubxdrv_turnoff();
 8005c94:	f7ff fdd0 	bl	8005838 <ubxdrv_turnoff>
        ubx.task->cursor    = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8005c9c:	7053      	strb	r3, [r2, #1]
        ubx.task->event     = 0;
 8005c9e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8005ca0:	7013      	strb	r3, [r2, #0]
        return True;
 8005ca2:	2001      	movs	r0, #1
    }
    return False;
}
 8005ca4:	bd10      	pop	{r4, pc}
    return False;
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	e7fc      	b.n	8005ca4 <ubx_retry_check+0x38>
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	20002650 	.word	0x20002650
 8005cb0:	08008df5 	.word	0x08008df5

08005cb4 <ubx_send>:


ot_int ubx_send(ot_u16 msg_stamp, ot_uint length) {
 8005cb4:	b510      	push	{r4, lr}
	ubx.msg_stamp           = msg_stamp;
 8005cb6:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <ubx_send+0x14>)
 8005cb8:	227a      	movs	r2, #122	; 0x7a
 8005cba:	5298      	strh	r0, [r3, r2]
	ubx.buf.header.length   = length;
 8005cbc:	8099      	strh	r1, [r3, #4]
	ubx.buf.header.msg      = msg_stamp;
 8005cbe:	8058      	strh	r0, [r3, #2]
	/// Returns number of ticks that transmission will require on the wire
	return ubxdrv_tx();
 8005cc0:	f7ff fe08 	bl	80058d4 <ubxdrv_tx>
}
 8005cc4:	bd10      	pop	{r4, pc}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	20002650 	.word	0x20002650

08005ccc <ubx_send_gonext>:


ot_int ubx_send_gonext(ot_u16 msg_stamp, ot_uint length) {
 8005ccc:	b510      	push	{r4, lr}
	/// Advance state counter
    ubx.task->event++;
 8005cce:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <ubx_send_gonext+0x14>)
 8005cd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cd2:	7813      	ldrb	r3, [r2, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	7013      	strb	r3, [r2, #0]
    return ubx_send(msg_stamp, length);
 8005cd8:	f7ff ffec 	bl	8005cb4 <ubx_send>
}
 8005cdc:	bd10      	pop	{r4, pc}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	20002650 	.word	0x20002650

08005ce4 <sub_send_cfgmsg>:
ot_u16 sub_send_cfgmsg(ot_u16 msg_stamp, ot_u8 rate) {
 8005ce4:	b570      	push	{r4, r5, r6, lr}
    ubx.buf.payload.tx_cfg_msg.msg  = msg_stamp;
 8005ce6:	4c06      	ldr	r4, [pc, #24]	; (8005d00 <sub_send_cfgmsg+0x1c>)
 8005ce8:	80e0      	strh	r0, [r4, #6]
    ubx.buf.payload.tx_cfg_msg.rate = rate;
 8005cea:	7221      	strb	r1, [r4, #8]
    ubx_send_gonext(UBX_MSG_CFG_MSG, sizeof(ubx_payload_tx_cfg_msg_t));
 8005cec:	2583      	movs	r5, #131	; 0x83
 8005cee:	006d      	lsls	r5, r5, #1
 8005cf0:	2103      	movs	r1, #3
 8005cf2:	0028      	movs	r0, r5
 8005cf4:	f7ff ffea 	bl	8005ccc <ubx_send_gonext>


inline ot_u16 ubx_waitfor_ack(uint16_t msg_stamp, uint16_t timeout) {
    ubx.msg_stamp = msg_stamp;
 8005cf8:	237a      	movs	r3, #122	; 0x7a
 8005cfa:	52e5      	strh	r5, [r4, r3]
}
 8005cfc:	20c8      	movs	r0, #200	; 0xc8
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	20002650 	.word	0x20002650

08005d04 <ubx_ackcheck>:
    return timeout;
}


ot_u16 ubx_ackcheck(void) {
    if ((ubx.buf.header.msg == UBX_MSG_ACK_ACK) && (ubx.buf.payload.rx_ack_ack.msg == ubx.msg_stamp)) {
 8005d04:	4b0e      	ldr	r3, [pc, #56]	; (8005d40 <ubx_ackcheck+0x3c>)
 8005d06:	885a      	ldrh	r2, [r3, #2]
 8005d08:	2306      	movs	r3, #6
 8005d0a:	33ff      	adds	r3, #255	; 0xff
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d10f      	bne.n	8005d30 <ubx_ackcheck+0x2c>
 8005d10:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <ubx_ackcheck+0x3c>)
 8005d12:	88da      	ldrh	r2, [r3, #6]
 8005d14:	217a      	movs	r1, #122	; 0x7a
 8005d16:	5a5b      	ldrh	r3, [r3, r1]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d109      	bne.n	8005d30 <ubx_ackcheck+0x2c>
        ubx.task->cursor = 0;
 8005d1c:	4b08      	ldr	r3, [pc, #32]	; (8005d40 <ubx_ackcheck+0x3c>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005d22:	704a      	strb	r2, [r1, #1]
        ubx.task->event++;
 8005d24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d26:	7813      	ldrb	r3, [r2, #0]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	7013      	strb	r3, [r2, #0]
        return 0;
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	e005      	b.n	8005d3c <ubx_ackcheck+0x38>
    }
    ubx.task->event--;
 8005d30:	4b03      	ldr	r3, [pc, #12]	; (8005d40 <ubx_ackcheck+0x3c>)
 8005d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d34:	7813      	ldrb	r3, [r2, #0]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	7013      	strb	r3, [r2, #0]
    return 50;          ///wait period before retry (ticks)
 8005d3a:	2032      	movs	r0, #50	; 0x32
}
 8005d3c:	4770      	bx	lr
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	20002650 	.word	0x20002650

08005d44 <sub_load_assistnow>:


ot_int sub_load_assistnow(void) {
 8005d44:	b510      	push	{r4, lr}
///@todo redo this function in order to work with assisted data model, 
///      which is not yet implemented.
    
    vlFILE* fp = ISF_open_su(ISF_ID_agps_input);
 8005d46:	2018      	movs	r0, #24
 8005d48:	f003 fb47 	bl	80093da <ISF_open_su>
 8005d4c:	1e04      	subs	r4, r0, #0
    if (fp != NULL) {
 8005d4e:	d00b      	beq.n	8005d68 <sub_load_assistnow+0x24>
        if (fp->length != 0) {
 8005d50:	8903      	ldrh	r3, [r0, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d008      	beq.n	8005d68 <sub_load_assistnow+0x24>
            vl_load(fp, sizeof(ubx_payload_tx_mga_ano_t), (uint8_t*)&ubx.buf.payload);
 8005d56:	4a07      	ldr	r2, [pc, #28]	; (8005d74 <sub_load_assistnow+0x30>)
 8005d58:	214c      	movs	r1, #76	; 0x4c
 8005d5a:	f003 faa8 	bl	80092ae <vl_load>
            vl_close(fp);
 8005d5e:	0020      	movs	r0, r4
 8005d60:	f003 fb06 	bl	8009370 <vl_close>
            
            return 0;
 8005d64:	2000      	movs	r0, #0
        }
    }
    vl_close(fp);
    
    return -1;
}
 8005d66:	bd10      	pop	{r4, pc}
    vl_close(fp);
 8005d68:	0020      	movs	r0, r4
 8005d6a:	f003 fb01 	bl	8009370 <vl_close>
    return -1;
 8005d6e:	2001      	movs	r0, #1
 8005d70:	4240      	negs	r0, r0
 8005d72:	e7f8      	b.n	8005d66 <sub_load_assistnow+0x22>
 8005d74:	20002656 	.word	0x20002656

08005d78 <ubxevt_rxdone>:
           );
}



void ubxevt_rxdone(ot_int code) {
 8005d78:	b570      	push	{r4, r5, r6, lr}
    /// Handle fletcher errors as non acknowledged packets by wiping the msg id
    if (code != 0) {
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d002      	beq.n	8005d84 <ubxevt_rxdone+0xc>
        ubx.buf.header.msg = 0;
 8005d7e:	4b1f      	ldr	r3, [pc, #124]	; (8005dfc <ubxevt_rxdone+0x84>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	805a      	strh	r2, [r3, #2]
    
    /// 1. Handle inbound packets received during an active state.
    ///    We care (right now) about the following packets:
    ///    -- NAV-PVT: data received.
    ///    -- NAV-AOPSTATUS: AssistNow Autonomous status.
    if (ubx.task->event == UBX_TIMEOUT) {
 8005d84:	4b1d      	ldr	r3, [pc, #116]	; (8005dfc <ubxevt_rxdone+0x84>)
 8005d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b13      	cmp	r3, #19
 8005d8c:	d130      	bne.n	8005df0 <ubxevt_rxdone+0x78>
        switch (ubx.buf.header.msg) {
 8005d8e:	4b1b      	ldr	r3, [pc, #108]	; (8005dfc <ubxevt_rxdone+0x84>)
 8005d90:	885b      	ldrh	r3, [r3, #2]
 8005d92:	4a1b      	ldr	r2, [pc, #108]	; (8005e00 <ubxevt_rxdone+0x88>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d012      	beq.n	8005dbe <ubxevt_rxdone+0x46>
 8005d98:	4a1a      	ldr	r2, [pc, #104]	; (8005e04 <ubxevt_rxdone+0x8c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d12d      	bne.n	8005dfa <ubxevt_rxdone+0x82>
        } break;
        
        // NAV-AOPSTATUS: Tells us if Ephemeris is loaded.
        // We use this information to set a state variable, but it doesn't pre-empt.
        case UBX_MSG_NAV_AOPSTATUS:
            if ((ubx.buf.payload.rx_nav_aopstatus.aopCfg != 0)
 8005d9e:	4b17      	ldr	r3, [pc, #92]	; (8005dfc <ubxevt_rxdone+0x84>)
 8005da0:	7a9b      	ldrb	r3, [r3, #10]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d029      	beq.n	8005dfa <ubxevt_rxdone+0x82>
            &&  (ubx.buf.payload.rx_nav_aopstatus.status == 0) 
 8005da6:	4b15      	ldr	r3, [pc, #84]	; (8005dfc <ubxevt_rxdone+0x84>)
 8005da8:	7adb      	ldrb	r3, [r3, #11]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d125      	bne.n	8005dfa <ubxevt_rxdone+0x82>
            /*&&  (ubx.start_mode < UBX_hot_start)       */         ) {
                ubx.start_mode      = UBX_hot_start;
 8005dae:	4c13      	ldr	r4, [pc, #76]	; (8005dfc <ubxevt_rxdone+0x84>)
 8005db0:	3381      	adds	r3, #129	; 0x81
 8005db2:	2202      	movs	r2, #2
 8005db4:	54e2      	strb	r2, [r4, r3]
                ubx.ephemeris_stamp = time_uptime_secs();
 8005db6:	f003 fca9 	bl	800970c <time_uptime_secs>
 8005dba:	67e0      	str	r0, [r4, #124]	; 0x7c
 8005dbc:	e01d      	b.n	8005dfa <ubxevt_rxdone+0x82>
            ot_int fix = ubx.buf.payload.rx_nav_pvt.fixType;
 8005dbe:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <ubxevt_rxdone+0x84>)
 8005dc0:	7e9b      	ldrb	r3, [r3, #26]
            if ((fix < 2) || (fix > 4)) {
 8005dc2:	3b02      	subs	r3, #2
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d817      	bhi.n	8005dfa <ubxevt_rxdone+0x82>
            fp = ISF_open_su(ISF_ID_gnss_output);
 8005dca:	2017      	movs	r0, #23
 8005dcc:	f003 fb05 	bl	80093da <ISF_open_su>
 8005dd0:	1e04      	subs	r4, r0, #0
            if (fp != NULL) {
 8005dd2:	d00d      	beq.n	8005df0 <ubxevt_rxdone+0x78>
                vl_store(fp, sizeof(ubx_payload_rx_nav_pvt_t), (uint8_t*)&ubx.buf.payload);
 8005dd4:	4d0c      	ldr	r5, [pc, #48]	; (8005e08 <ubxevt_rxdone+0x90>)
 8005dd6:	002a      	movs	r2, r5
 8005dd8:	215c      	movs	r1, #92	; 0x5c
 8005dda:	f003 fa91 	bl	8009300 <vl_store>
                vl_close(fp);
 8005dde:	0020      	movs	r0, r4
 8005de0:	f003 fac6 	bl	8009370 <vl_close>
                ubx.dataready(1, 0x0107);
 8005de4:	3d06      	subs	r5, #6
 8005de6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005de8:	2108      	movs	r1, #8
 8005dea:	31ff      	adds	r1, #255	; 0xff
 8005dec:	2001      	movs	r0, #1
 8005dee:	4798      	blx	r3
    ///    CURRENTLY NOTHING TO HANDLE HERE.
    
    /// Fall through behavior is to pre-empt the UBX TASK, which is probably
    /// waiting on a message.
    ubxevt_rxdone_PREEMPT:
    sys_preempt(ubx.task, 0);
 8005df0:	4b02      	ldr	r3, [pc, #8]	; (8005dfc <ubxevt_rxdone+0x84>)
 8005df2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005df4:	2100      	movs	r1, #0
 8005df6:	f003 fc27 	bl	8009648 <sys_preempt>
    
    ubxevt_rxdone_IGNORE:
    return;
}
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	20002650 	.word	0x20002650
 8005e00:	00000701 	.word	0x00000701
 8005e04:	00006001 	.word	0x00006001
 8005e08:	20002656 	.word	0x20002656

08005e0c <ubx_systask>:

/** Main Task Function
  * ========================================================================
  */

void ubx_systask(ot_task task) {
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	0004      	movs	r4, r0
/// It is optional to use a loop in a task function, but for this task it helps
/// reduce some load on the scheduler.
    ot_u32  nextevent = 0;
 8005e10:	2500      	movs	r5, #0
 8005e12:	e1d9      	b.n	80061c8 <ubx_systask+0x3bc>

    do {
        switch (task->event) {
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d100      	bne.n	8005e1a <ubx_systask+0xe>
 8005e18:	e0cd      	b.n	8005fb6 <ubx_systask+0x1aa>
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d000      	beq.n	8005e20 <ubx_systask+0x14>
 8005e1e:	e1c7      	b.n	80061b0 <ubx_systask+0x3a4>
            
            ubx_send_gonext(UBX_MSG_CFG_PRT, sizeof(ubx_payload_tx_cfg_prt_t));
            nextevent = (ot_u32)ubx_waitfor_ack(UBX_MSG_CFG_PRT, UBX_CONFIG_TIMEOUT);
        } break;
        case UBX_CFG_UART_ACK: 
            nextevent = (ot_u32)ubx_ackcheck();
 8005e20:	f7ff ff70 	bl	8005d04 <ubx_ackcheck>
 8005e24:	0005      	movs	r5, r0
            break;
 8005e26:	e1c8      	b.n	80061ba <ubx_systask+0x3ae>
        switch (task->event) {
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d100      	bne.n	8005e2e <ubx_systask+0x22>
 8005e2c:	e11f      	b.n	800606e <ubx_systask+0x262>
 8005e2e:	d828      	bhi.n	8005e82 <ubx_systask+0x76>
 8005e30:	2b06      	cmp	r3, #6
 8005e32:	d100      	bne.n	8005e36 <ubx_systask+0x2a>
 8005e34:	e101      	b.n	800603a <ubx_systask+0x22e>
 8005e36:	2b07      	cmp	r3, #7
 8005e38:	d000      	beq.n	8005e3c <ubx_systask+0x30>
 8005e3a:	e1b9      	b.n	80061b0 <ubx_systask+0x3a4>

        /// Step 2: Configure the update rate of the Receiver
        case UBX_CFG_RATE: {
        	ot_u16 measRate_val;

            if (ubx_retry_check(UBX_RETRY_MAX)) return;
 8005e3c:	2004      	movs	r0, #4
 8005e3e:	f7ff ff15 	bl	8005c6c <ubx_retry_check>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d000      	beq.n	8005e48 <ubx_systask+0x3c>
 8005e46:	e0f7      	b.n	8006038 <ubx_systask+0x22c>
            memset(&ubx.buf.payload.tx_cfg_rate, 0, sizeof(ubx.buf.payload.tx_cfg_rate));
 8005e48:	4dcc      	ldr	r5, [pc, #816]	; (800617c <ubx_systask+0x370>)
 8005e4a:	2206      	movs	r2, #6
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	0028      	movs	r0, r5
 8005e50:	f004 fa72 	bl	800a338 <ot_memset>

            if (ubx.onoff_interval < 0) {
 8005e54:	3d06      	subs	r5, #6
 8005e56:	2378      	movs	r3, #120	; 0x78
 8005e58:	5eea      	ldrsh	r2, [r5, r3]
 8005e5a:	2a00      	cmp	r2, #0
 8005e5c:	da00      	bge.n	8005e60 <ubx_systask+0x54>
 8005e5e:	e0fa      	b.n	8006056 <ubx_systask+0x24a>
            	measRate_val = ((-ubx.onoff_interval) * 1000) / 3;  //3: UBX_TX_CFG_RATE_NAVRATE
            }
            else {
                measRate_val = 1000;//UBX_TX_CFG_RATE_MEASINTERVAL
 8005e60:	20fa      	movs	r0, #250	; 0xfa
 8005e62:	0080      	lsls	r0, r0, #2
            }
            ubx.buf.payload.tx_cfg_rate.measRate   = measRate_val;
 8005e64:	4dc6      	ldr	r5, [pc, #792]	; (8006180 <ubx_systask+0x374>)
 8005e66:	80e8      	strh	r0, [r5, #6]
            ubx.buf.payload.tx_cfg_rate.navRate    = 3; //UBX_TX_CFG_RATE_NAVRATE;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	812b      	strh	r3, [r5, #8]
            ubx.buf.payload.tx_cfg_rate.timeRef    = UBX_TX_CFG_RATE_TIMEREF;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	816b      	strh	r3, [r5, #10]
            
            ubx_send_gonext(UBX_MSG_CFG_RATE, sizeof(ubx_payload_tx_cfg_rate_t));
 8005e70:	4ec4      	ldr	r6, [pc, #784]	; (8006184 <ubx_systask+0x378>)
 8005e72:	2106      	movs	r1, #6
 8005e74:	0030      	movs	r0, r6
 8005e76:	f7ff ff29 	bl	8005ccc <ubx_send_gonext>
    ubx.msg_stamp = msg_stamp;
 8005e7a:	237a      	movs	r3, #122	; 0x7a
 8005e7c:	52ee      	strh	r6, [r5, r3]
            nextevent = (ot_u32)ubx_waitfor_ack(UBX_MSG_CFG_RATE, UBX_CONFIG_TIMEOUT);
 8005e7e:	25c8      	movs	r5, #200	; 0xc8
 8005e80:	e0d6      	b.n	8006030 <ubx_systask+0x224>
        switch (task->event) {
 8005e82:	2b09      	cmp	r3, #9
 8005e84:	d100      	bne.n	8005e88 <ubx_systask+0x7c>
 8005e86:	e0f6      	b.n	8006076 <ubx_systask+0x26a>
 8005e88:	2b0a      	cmp	r3, #10
 8005e8a:	d000      	beq.n	8005e8e <ubx_systask+0x82>
 8005e8c:	e190      	b.n	80061b0 <ubx_systask+0x3a4>
			ubx_send_gonext(UBX_MSG_CFG_NAVX5, sizeof(ubx_payload_tx_cfg_navx5_t));
			nextevent = ubx_waitfor_ack(UBX_MSG_CFG_NAVX5, UBX_CONFIG_TIMEOUT);
			break;

		case UBX_CFG_NAVX5_ACK:
			nextevent = (ot_u32)ubx_ackcheck();
 8005e8e:	f7ff ff39 	bl	8005d04 <ubx_ackcheck>
 8005e92:	0005      	movs	r5, r0
			break;
 8005e94:	e191      	b.n	80061ba <ubx_systask+0x3ae>
        switch (task->event) {
 8005e96:	2b11      	cmp	r3, #17
 8005e98:	d100      	bne.n	8005e9c <ubx_systask+0x90>
 8005e9a:	e141      	b.n	8006120 <ubx_systask+0x314>
 8005e9c:	d842      	bhi.n	8005f24 <ubx_systask+0x118>
 8005e9e:	2b0e      	cmp	r3, #14
 8005ea0:	d100      	bne.n	8005ea4 <ubx_systask+0x98>
 8005ea2:	e12a      	b.n	80060fa <ubx_systask+0x2ee>
 8005ea4:	d81f      	bhi.n	8005ee6 <ubx_systask+0xda>
 8005ea6:	2b0c      	cmp	r3, #12
 8005ea8:	d100      	bne.n	8005eac <ubx_systask+0xa0>
 8005eaa:	e120      	b.n	80060ee <ubx_systask+0x2e2>
 8005eac:	2b0d      	cmp	r3, #13
 8005eae:	d000      	beq.n	8005eb2 <ubx_systask+0xa6>
 8005eb0:	e17e      	b.n	80061b0 <ubx_systask+0x3a4>
            // start_mode = 2: hot start, threshold is 2 hours
            // hot/assisted start threshold: 2 hours
            // warm start threshold: 1 day
            // else, cold start
            {   ot_u32  since_ephemeris;
                since_ephemeris = time_uptime_secs() - ubx.ephemeris_stamp;
 8005eb2:	f003 fc2b 	bl	800970c <time_uptime_secs>
 8005eb6:	4ab2      	ldr	r2, [pc, #712]	; (8006180 <ubx_systask+0x374>)
 8005eb8:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8005eba:	1ac0      	subs	r0, r0, r3
                ubx.start_mode  = (since_ephemeris < (3600 * 2)); 		//hot start + 1
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	49b2      	ldr	r1, [pc, #712]	; (8006188 <ubx_systask+0x37c>)
 8005ec0:	001d      	movs	r5, r3
 8005ec2:	4281      	cmp	r1, r0
 8005ec4:	415d      	adcs	r5, r3
 8005ec6:	0029      	movs	r1, r5
                ubx.start_mode += (since_ephemeris < (3600 * 24));	    //warm start + 1
 8005ec8:	4db0      	ldr	r5, [pc, #704]	; (800618c <ubx_systask+0x380>)
 8005eca:	4285      	cmp	r5, r0
 8005ecc:	415b      	adcs	r3, r3
 8005ece:	185b      	adds	r3, r3, r1
 8005ed0:	2181      	movs	r1, #129	; 0x81
 8005ed2:	5453      	strb	r3, [r2, r1]
            }
            
            // If there is assist-now data, load it in.
            if (sub_load_assistnow() == 0) {
 8005ed4:	f7ff ff36 	bl	8005d44 <sub_load_assistnow>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d100      	bne.n	8005ede <ubx_systask+0xd2>
 8005edc:	e10b      	b.n	80060f6 <ubx_systask+0x2ea>
                task->event = UBX_MGA_ANO;
                goto UBX_MGA_ANO_ROUTINE;
            }
            
            // There's no assist now data, so just go to start.
            task->event = UBX_MODE_ENTRY;
 8005ede:	2310      	movs	r3, #16
 8005ee0:	7023      	strb	r3, [r4, #0]
            nextevent   = 0;
 8005ee2:	2500      	movs	r5, #0
 8005ee4:	e16c      	b.n	80061c0 <ubx_systask+0x3b4>
        switch (task->event) {
 8005ee6:	2b0f      	cmp	r3, #15
 8005ee8:	d100      	bne.n	8005eec <ubx_systask+0xe0>
 8005eea:	e115      	b.n	8006118 <ubx_systask+0x30c>
 8005eec:	2b10      	cmp	r3, #16
 8005eee:	d000      	beq.n	8005ef2 <ubx_systask+0xe6>
 8005ef0:	e15e      	b.n	80061b0 <ubx_systask+0x3a4>
        // Entry of GNSS per operating Mode
        // - Normal:        Use RST
        // - Persistent:    Use PM2 (On/Off Powersave mode)
        case UBX_MODE_ENTRY: {
            static const ot_u16 start_code[]        = { 0xFFFF, 0x0100, 0x0000 };
            ubx.dataready(0, 2);	// Startup message
 8005ef2:	4da3      	ldr	r5, [pc, #652]	; (8006180 <ubx_systask+0x374>)
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005efa:	4798      	blx	r3
            ubx.buf.payload.tx_cfg_rst.navBbrMask   = start_code[ubx.start_mode];
 8005efc:	2381      	movs	r3, #129	; 0x81
 8005efe:	5cea      	ldrb	r2, [r5, r3]
 8005f00:	0052      	lsls	r2, r2, #1
 8005f02:	4ba3      	ldr	r3, [pc, #652]	; (8006190 <ubx_systask+0x384>)
 8005f04:	189b      	adds	r3, r3, r2
 8005f06:	8b1b      	ldrh	r3, [r3, #24]
 8005f08:	80eb      	strh	r3, [r5, #6]
            ubx.buf.payload.tx_cfg_rst.resetMode    = 0x09;
 8005f0a:	2309      	movs	r3, #9
 8005f0c:	722b      	strb	r3, [r5, #8]
            ubx.buf.payload.tx_cfg_rst.reserved1	= 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	726b      	strb	r3, [r5, #9]
            nextevent   = (ot_u32)ubx_send_gonext(UBX_MSG_CFG_RST, sizeof(ubx_payload_tx_cfg_rst_t));
 8005f12:	2104      	movs	r1, #4
 8005f14:	489f      	ldr	r0, [pc, #636]	; (8006194 <ubx_systask+0x388>)
 8005f16:	f7ff fed9 	bl	8005ccc <ubx_send_gonext>
            nextevent  += UBX_CONFIG_TIMEOUT;
 8005f1a:	30c8      	adds	r0, #200	; 0xc8
 8005f1c:	0005      	movs	r5, r0
            task->event = UBX_RXDATA;
 8005f1e:	2312      	movs	r3, #18
 8005f20:	7023      	strb	r3, [r4, #0]
        } break;
 8005f22:	e14a      	b.n	80061ba <ubx_systask+0x3ae>
        switch (task->event) {
 8005f24:	2b15      	cmp	r3, #21
 8005f26:	d828      	bhi.n	8005f7a <ubx_systask+0x16e>
 8005f28:	2b14      	cmp	r3, #20
 8005f2a:	d300      	bcc.n	8005f2e <ubx_systask+0x122>
 8005f2c:	e119      	b.n	8006162 <ubx_systask+0x356>
 8005f2e:	2b12      	cmp	r3, #18
 8005f30:	d100      	bne.n	8005f34 <ubx_systask+0x128>
 8005f32:	e0f9      	b.n	8006128 <ubx_systask+0x31c>
 8005f34:	2b13      	cmp	r3, #19
 8005f36:	d000      	beq.n	8005f3a <ubx_systask+0x12e>
 8005f38:	e13a      	b.n	80061b0 <ubx_systask+0x3a4>
        /// - Timeout will delay going to shutdown until ephemeris is hot.
        /// - Hot ephemeris will be downloaded either by AGPS or directly from
        ///   satellites via AOPSTATUS.
        /// - When Timeout is successful, GPS Receiver is turned off.
        case UBX_TIMEOUT:
        	task->cursor++;
 8005f3a:	7863      	ldrb	r3, [r4, #1]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	7063      	strb	r3, [r4, #1]

        	if (ubx.onoff_interval < 0) {
 8005f42:	498f      	ldr	r1, [pc, #572]	; (8006180 <ubx_systask+0x374>)
 8005f44:	2278      	movs	r2, #120	; 0x78
 8005f46:	5e8a      	ldrsh	r2, [r1, r2]
 8005f48:	2a00      	cmp	r2, #0
 8005f4a:	da00      	bge.n	8005f4e <ubx_systask+0x142>
 8005f4c:	e0f9      	b.n	8006142 <ubx_systask+0x336>
                ///@todo Inside here we could do some logging.
                nextevent = 30 * 1024;
                ubx_send(UBX_MSG_NAV_AOPSTATUS, 0);

            }
            else if ((task->cursor < 10) && (ubx.start_mode < UBX_hot_start)) {
 8005f4e:	2b09      	cmp	r3, #9
 8005f50:	d800      	bhi.n	8005f54 <ubx_systask+0x148>
 8005f52:	e0fd      	b.n	8006150 <ubx_systask+0x344>
            	// Wait for AOPSTATUS.  This needs a lot of testing.
            	nextevent = 1024;
            }
            else {
            	ubx.start_mode      = UBX_warm_start;
 8005f54:	4e8a      	ldr	r6, [pc, #552]	; (8006180 <ubx_systask+0x374>)
 8005f56:	2381      	movs	r3, #129	; 0x81
 8005f58:	2201      	movs	r2, #1
 8005f5a:	54f2      	strb	r2, [r6, r3]
            	//ubx.ephemeris_stamp = time_uptime_secs();
            	task->cursor        = 0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	7063      	strb	r3, [r4, #1]
            	ubx.dataready(0, 1);    // Receiver-off message to client
 8005f60:	2101      	movs	r1, #1
 8005f62:	2000      	movs	r0, #0
 8005f64:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005f66:	4798      	blx	r3

            	// Yank power, OR do controlled shutdown.
            	if ((BOARD_FEATURE(GNSS_SDN) == ENABLED) && (ubx.onoff_interval == 0)) {
 8005f68:	2378      	movs	r3, #120	; 0x78
 8005f6a:	5ef3      	ldrsh	r3, [r6, r3]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d100      	bne.n	8005f72 <ubx_systask+0x166>
 8005f70:	e11e      	b.n	80061b0 <ubx_systask+0x3a4>
//            	ubx.buf.payload.tx_cfg_rst.navBbrMask   = 0;
//				ubx.buf.payload.tx_cfg_rst.resetMode    = 0x08;
//				ubx.buf.payload.tx_cfg_rst.reserved1    = 0;
//				nextevent   = (ot_u32)ubx_send(UBX_MSG_CFG_RST, sizeof(ubx_payload_tx_cfg_rst_t));
//				nextevent  += UBX_CONFIG_TIMEOUT;
				task->event = UBX_SHUTDOWN;
 8005f72:	2314      	movs	r3, #20
 8005f74:	7023      	strb	r3, [r4, #0]
				nextevent = 0;
 8005f76:	2500      	movs	r5, #0
 8005f78:	e122      	b.n	80061c0 <ubx_systask+0x3b4>
        switch (task->event) {
 8005f7a:	2bff      	cmp	r3, #255	; 0xff
 8005f7c:	d000      	beq.n	8005f80 <ubx_systask+0x174>
 8005f7e:	e117      	b.n	80061b0 <ubx_systask+0x3a4>
            task->event     = UBX_WAKEUP;
            nextevent       = ubx.onoff_interval * 1024;
        	break;
			
        // Return the power-code state of the driver, 0-3, without changing task states
        case 255: task->cursor = ubxdrv_getpwrcode();
 8005f80:	f7ff fc4a 	bl	8005818 <ubxdrv_getpwrcode>
 8005f84:	7060      	strb	r0, [r4, #1]
                  return;
 8005f86:	e057      	b.n	8006038 <ubx_systask+0x22c>
        case 0: sys_taskinit_macro(task, ubx_taskinit(task), otutils_null()); 
 8005f88:	0020      	movs	r0, r4
 8005f8a:	f7ff fe41 	bl	8005c10 <ubx_taskinit>
 8005f8e:	7863      	ldrb	r3, [r4, #1]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d051      	beq.n	8006038 <ubx_systask+0x22c>
 8005f94:	f002 ff2d 	bl	8008df2 <otutils_null>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	7063      	strb	r3, [r4, #1]
 8005f9c:	e04c      	b.n	8006038 <ubx_systask+0x22c>
        	ubxdrv_extwakeup();
 8005f9e:	f7ff fc35 	bl	800580c <ubxdrv_extwakeup>
            nextevent   = (ot_u32)ubxdrv_txsync();
 8005fa2:	f7ff fc7d 	bl	80058a0 <ubxdrv_txsync>
 8005fa6:	0005      	movs	r5, r0
            task->event = ubx.start_state;
 8005fa8:	4a75      	ldr	r2, [pc, #468]	; (8006180 <ubx_systask+0x374>)
 8005faa:	2380      	movs	r3, #128	; 0x80
 8005fac:	5cd3      	ldrb	r3, [r2, r3]
 8005fae:	7023      	strb	r3, [r4, #0]
            task->cursor= 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	7063      	strb	r3, [r4, #1]
            break;
 8005fb4:	e101      	b.n	80061ba <ubx_systask+0x3ae>
            uint8_t i = task->cursor;
 8005fb6:	7865      	ldrb	r5, [r4, #1]
            if (ubx_retry_check(UBX_BAUDRATE_MAX)) return;
 8005fb8:	2004      	movs	r0, #4
 8005fba:	f7ff fe57 	bl	8005c6c <ubx_retry_check>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d13a      	bne.n	8006038 <ubx_systask+0x22c>
            ubx.baudrate = sub_convert_baudrate(i);
 8005fc2:	0028      	movs	r0, r5
 8005fc4:	f7ff fe1e 	bl	8005c04 <sub_convert_baudrate>
 8005fc8:	4d6d      	ldr	r5, [pc, #436]	; (8006180 <ubx_systask+0x374>)
 8005fca:	66e8      	str	r0, [r5, #108]	; 0x6c
            ubxdrv_setbaudrate(ubx.baudrate);
 8005fcc:	f7ff fd3e 	bl	8005a4c <ubxdrv_setbaudrate>
            ubx.buf.payload.tx_cfg_prt.portID       = UBX_TX_CFG_PRT_PORTID;
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	71a9      	strb	r1, [r5, #6]
            ubx.buf.payload.tx_cfg_prt.mode         = UBX_TX_CFG_PRT_MODE;
 8005fd4:	228d      	movs	r2, #141	; 0x8d
 8005fd6:	0112      	lsls	r2, r2, #4
 8005fd8:	816a      	strh	r2, [r5, #10]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	81aa      	strh	r2, [r5, #12]
            ubx.buf.payload.tx_cfg_prt.baudRate     = ubx.baudrate;
 8005fde:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8005fe0:	041a      	lsls	r2, r3, #16
 8005fe2:	0c12      	lsrs	r2, r2, #16
 8005fe4:	81ea      	strh	r2, [r5, #14]
 8005fe6:	0c1b      	lsrs	r3, r3, #16
 8005fe8:	822b      	strh	r3, [r5, #16]
            ubx.buf.payload.tx_cfg_prt.inProtoMask  = UBX_TX_CFG_PRT_INPROTOMASK_GPS;
 8005fea:	2321      	movs	r3, #33	; 0x21
 8005fec:	826b      	strh	r3, [r5, #18]
            ubx.buf.payload.tx_cfg_prt.outProtoMask = UBX_TX_CFG_PRT_OUTPROTOMASK_GPS;
 8005fee:	82a9      	strh	r1, [r5, #20]
            ubx_send_gonext(UBX_MSG_CFG_PRT, sizeof(ubx_payload_tx_cfg_prt_t));
 8005ff0:	3113      	adds	r1, #19
 8005ff2:	2006      	movs	r0, #6
 8005ff4:	f7ff fe6a 	bl	8005ccc <ubx_send_gonext>
    ubx.msg_stamp = msg_stamp;
 8005ff8:	237a      	movs	r3, #122	; 0x7a
 8005ffa:	2206      	movs	r2, #6
 8005ffc:	52ea      	strh	r2, [r5, r3]
            nextevent = (ot_u32)ubx_waitfor_ack(UBX_MSG_CFG_PRT, UBX_CONFIG_TIMEOUT);
 8005ffe:	25c8      	movs	r5, #200	; 0xc8
 8006000:	e016      	b.n	8006030 <ubx_systask+0x224>
            ubx.buf.payload.tx_cfg_prt.portID       = UBX_TX_CFG_PRT_PORTID;
 8006002:	4d5f      	ldr	r5, [pc, #380]	; (8006180 <ubx_systask+0x374>)
 8006004:	2301      	movs	r3, #1
 8006006:	71ab      	strb	r3, [r5, #6]
            ubx.buf.payload.tx_cfg_prt.mode         = UBX_TX_CFG_PRT_MODE;
 8006008:	218d      	movs	r1, #141	; 0x8d
 800600a:	0109      	lsls	r1, r1, #4
 800600c:	8169      	strh	r1, [r5, #10]
 800600e:	2100      	movs	r1, #0
 8006010:	81a9      	strh	r1, [r5, #12]
            ubx.buf.payload.tx_cfg_prt.baudRate     = UBX_TX_CFG_PRT_BAUDRATE;
 8006012:	4a61      	ldr	r2, [pc, #388]	; (8006198 <ubx_systask+0x38c>)
 8006014:	81ea      	strh	r2, [r5, #14]
 8006016:	2201      	movs	r2, #1
 8006018:	822a      	strh	r2, [r5, #16]
            ubx.buf.payload.tx_cfg_prt.inProtoMask  = UBX_TX_CFG_PRT_INPROTOMASK_GPS;
 800601a:	3220      	adds	r2, #32
 800601c:	826a      	strh	r2, [r5, #18]
            ubx.buf.payload.tx_cfg_prt.outProtoMask = UBX_TX_CFG_PRT_OUTPROTOMASK_GPS;
 800601e:	82ab      	strh	r3, [r5, #20]
            ubx_send_gonext(UBX_MSG_CFG_PRT, sizeof(ubx_payload_tx_cfg_prt_t));
 8006020:	3114      	adds	r1, #20
 8006022:	2006      	movs	r0, #6
 8006024:	f7ff fe52 	bl	8005ccc <ubx_send_gonext>
    ubx.msg_stamp = msg_stamp;
 8006028:	237a      	movs	r3, #122	; 0x7a
 800602a:	2206      	movs	r2, #6
 800602c:	52ea      	strh	r2, [r5, r3]
            nextevent = (ot_u32)ubx_waitfor_ack(UBX_MSG_CFG_PRT, UBX_CONFIG_TIMEOUT);
 800602e:	25c8      	movs	r5, #200	; 0xc8
        
    } while ((nextevent <= TI2CLK(0)) && (task->event != 0));


    /// The task is done for now.  Instruct the Scheduler when to reinvoke this task.
    sys_task_setnext(task, nextevent);
 8006030:	0029      	movs	r1, r5
 8006032:	0020      	movs	r0, r4
 8006034:	f003 fa98 	bl	8009568 <sys_task_setnext>
}
 8006038:	bd70      	pop	{r4, r5, r6, pc}
            ubx.baudrate = UBX_TX_CFG_PRT_BAUDRATE;
 800603a:	20e1      	movs	r0, #225	; 0xe1
 800603c:	0240      	lsls	r0, r0, #9
 800603e:	4b50      	ldr	r3, [pc, #320]	; (8006180 <ubx_systask+0x374>)
 8006040:	66d8      	str	r0, [r3, #108]	; 0x6c
            ubxdrv_setbaudrate(ubx.baudrate);
 8006042:	f7ff fd03 	bl	8005a4c <ubxdrv_setbaudrate>
            task->event++;
 8006046:	7823      	ldrb	r3, [r4, #0]
 8006048:	3301      	adds	r3, #1
 800604a:	7023      	strb	r3, [r4, #0]
            task->cursor = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	7063      	strb	r3, [r4, #1]
            nextevent = 500;
 8006050:	25fa      	movs	r5, #250	; 0xfa
 8006052:	006d      	lsls	r5, r5, #1
 8006054:	e7ec      	b.n	8006030 <ubx_systask+0x224>
            	measRate_val = ((-ubx.onoff_interval) * 1000) / 3;  //3: UBX_TX_CFG_RATE_NAVRATE
 8006056:	0593      	lsls	r3, r2, #22
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	019b      	lsls	r3, r3, #6
 800605c:	189b      	adds	r3, r3, r2
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	189b      	adds	r3, r3, r2
 8006062:	00d8      	lsls	r0, r3, #3
 8006064:	2103      	movs	r1, #3
 8006066:	f7fa f8d9 	bl	800021c <__divsi3>
 800606a:	b280      	uxth	r0, r0
 800606c:	e6fa      	b.n	8005e64 <ubx_systask+0x58>
            nextevent = (ot_u32)ubx_ackcheck();
 800606e:	f7ff fe49 	bl	8005d04 <ubx_ackcheck>
 8006072:	0005      	movs	r5, r0
            break;
 8006074:	e0a1      	b.n	80061ba <ubx_systask+0x3ae>
			if (ubx_retry_check(UBX_RETRY_MAX)) return;
 8006076:	2004      	movs	r0, #4
 8006078:	f7ff fdf8 	bl	8005c6c <ubx_retry_check>
 800607c:	2800      	cmp	r0, #0
 800607e:	d1db      	bne.n	8006038 <ubx_systask+0x22c>
			memset(&ubx.buf.payload.tx_cfg_navx5, 0, sizeof(ubx_payload_tx_cfg_navx5_t));
 8006080:	4e3e      	ldr	r6, [pc, #248]	; (800617c <ubx_systask+0x370>)
 8006082:	2228      	movs	r2, #40	; 0x28
 8006084:	2100      	movs	r1, #0
 8006086:	0030      	movs	r0, r6
 8006088:	f004 f956 	bl	800a338 <ot_memset>
			ubx.buf.payload.tx_cfg_navx5.version			= 2;
 800608c:	1fb5      	subs	r5, r6, #6
 800608e:	2302      	movs	r3, #2
 8006090:	8033      	strh	r3, [r6, #0]
			ubx.buf.payload.tx_cfg_navx5.mask1				= (1<<14);
 8006092:	2380      	movs	r3, #128	; 0x80
 8006094:	01db      	lsls	r3, r3, #7
 8006096:	8073      	strh	r3, [r6, #2]
			ubx.buf.payload.tx_cfg_navx5.mask2				= 0;
 8006098:	2300      	movs	r3, #0
 800609a:	2100      	movs	r1, #0
 800609c:	80b1      	strh	r1, [r6, #4]
 800609e:	80f1      	strh	r1, [r6, #6]
			ubx.buf.payload.tx_cfg_navx5.minSVs				= 4;
 80060a0:	2204      	movs	r2, #4
 80060a2:	72b2      	strb	r2, [r6, #10]
			ubx.buf.payload.tx_cfg_navx5.maxSVs				= 32;
 80060a4:	3120      	adds	r1, #32
 80060a6:	72f1      	strb	r1, [r6, #11]
			ubx.buf.payload.tx_cfg_navx5.minCNO				= 6;
 80060a8:	3202      	adds	r2, #2
 80060aa:	7332      	strb	r2, [r6, #12]
			ubx.buf.payload.tx_cfg_navx5.iniFix3D			= 0;
 80060ac:	73b3      	strb	r3, [r6, #14]
			ubx.buf.payload.tx_cfg_navx5.ackAiding			= 0;
 80060ae:	7473      	strb	r3, [r6, #17]
			ubx.buf.payload.tx_cfg_navx5.wknrollover		= 1867;
 80060b0:	4a3a      	ldr	r2, [pc, #232]	; (800619c <ubx_systask+0x390>)
 80060b2:	8272      	strh	r2, [r6, #18]
			ubx.buf.payload.tx_cfg_navx5.sigAttnCompMode	= 0;
 80060b4:	7533      	strb	r3, [r6, #20]
			ubx.buf.payload.tx_cfg_navx5.usePPP				= 1;
 80060b6:	2201      	movs	r2, #1
 80060b8:	546a      	strb	r2, [r5, r1]
			ubx.buf.payload.tx_cfg_navx5.aopCfg				= 1;		//AssistNow Autonomous feature.
 80060ba:	3101      	adds	r1, #1
 80060bc:	546a      	strb	r2, [r5, r1]
			ubx.buf.payload.tx_cfg_navx5.aopOrbMaxErr		= 100;
 80060be:	3263      	adds	r2, #99	; 0x63
 80060c0:	83f2      	strh	r2, [r6, #30]
			ubx.buf.payload.tx_cfg_navx5.useAdr				= 0;
 80060c2:	3a37      	subs	r2, #55	; 0x37
 80060c4:	54ab      	strb	r3, [r5, r2]
			ubx_send_gonext(UBX_MSG_CFG_NAVX5, sizeof(ubx_payload_tx_cfg_navx5_t));
 80060c6:	4e36      	ldr	r6, [pc, #216]	; (80061a0 <ubx_systask+0x394>)
 80060c8:	3107      	adds	r1, #7
 80060ca:	0030      	movs	r0, r6
 80060cc:	f7ff fdfe 	bl	8005ccc <ubx_send_gonext>
    ubx.msg_stamp = msg_stamp;
 80060d0:	237a      	movs	r3, #122	; 0x7a
 80060d2:	52ee      	strh	r6, [r5, r3]
			nextevent = ubx_waitfor_ack(UBX_MSG_CFG_NAVX5, UBX_CONFIG_TIMEOUT);
 80060d4:	25c8      	movs	r5, #200	; 0xc8
 80060d6:	e7ab      	b.n	8006030 <ubx_systask+0x224>
            if (ubx_retry_check(UBX_RETRY_MAX))
 80060d8:	2004      	movs	r0, #4
 80060da:	f7ff fdc7 	bl	8005c6c <ubx_retry_check>
 80060de:	2800      	cmp	r0, #0
 80060e0:	d1aa      	bne.n	8006038 <ubx_systask+0x22c>
            nextevent = (ot_u32)sub_send_cfgmsg(UBX_MSG_NAV_PVT, 1);
 80060e2:	2101      	movs	r1, #1
 80060e4:	482f      	ldr	r0, [pc, #188]	; (80061a4 <ubx_systask+0x398>)
 80060e6:	f7ff fdfd 	bl	8005ce4 <sub_send_cfgmsg>
 80060ea:	0005      	movs	r5, r0
            break;
 80060ec:	e065      	b.n	80061ba <ubx_systask+0x3ae>
            nextevent = (ot_u32)ubx_ackcheck();
 80060ee:	f7ff fe09 	bl	8005d04 <ubx_ackcheck>
 80060f2:	0005      	movs	r5, r0
            break;
 80060f4:	e061      	b.n	80061ba <ubx_systask+0x3ae>
                task->event = UBX_MGA_ANO;
 80060f6:	230e      	movs	r3, #14
 80060f8:	7023      	strb	r3, [r4, #0]
            if (ubx_retry_check(UBX_RETRY_MAX))
 80060fa:	2004      	movs	r0, #4
 80060fc:	f7ff fdb6 	bl	8005c6c <ubx_retry_check>
 8006100:	2800      	cmp	r0, #0
 8006102:	d199      	bne.n	8006038 <ubx_systask+0x22c>
            ubx_send_gonext(UBX_MSG_MGA_ANO, sizeof(ubx_payload_tx_mga_ano_t));
 8006104:	4d28      	ldr	r5, [pc, #160]	; (80061a8 <ubx_systask+0x39c>)
 8006106:	214c      	movs	r1, #76	; 0x4c
 8006108:	0028      	movs	r0, r5
 800610a:	f7ff fddf 	bl	8005ccc <ubx_send_gonext>
    ubx.msg_stamp = msg_stamp;
 800610e:	4a1c      	ldr	r2, [pc, #112]	; (8006180 <ubx_systask+0x374>)
 8006110:	237a      	movs	r3, #122	; 0x7a
 8006112:	52d5      	strh	r5, [r2, r3]
            nextevent = (ot_u32)ubx_waitfor_ack(UBX_MSG_MGA_ANO, UBX_CONFIG_TIMEOUT);
 8006114:	25c8      	movs	r5, #200	; 0xc8
 8006116:	e78b      	b.n	8006030 <ubx_systask+0x224>
            nextevent = (ot_u32)ubx_ackcheck();
 8006118:	f7ff fdf4 	bl	8005d04 <ubx_ackcheck>
 800611c:	0005      	movs	r5, r0
            break;
 800611e:	e04c      	b.n	80061ba <ubx_systask+0x3ae>
            nextevent = (ot_u32)ubx_ackcheck();
 8006120:	f7ff fdf0 	bl	8005d04 <ubx_ackcheck>
 8006124:	0005      	movs	r5, r0
            break;
 8006126:	e048      	b.n	80061ba <ubx_systask+0x3ae>
            nextevent   	= (ot_u32)timeout_secs[ubx.start_mode] * 1024;
 8006128:	4a15      	ldr	r2, [pc, #84]	; (8006180 <ubx_systask+0x374>)
 800612a:	2381      	movs	r3, #129	; 0x81
 800612c:	5cd2      	ldrb	r2, [r2, r3]
 800612e:	0052      	lsls	r2, r2, #1
 8006130:	4b17      	ldr	r3, [pc, #92]	; (8006190 <ubx_systask+0x384>)
 8006132:	189b      	adds	r3, r3, r2
 8006134:	8c1d      	ldrh	r5, [r3, #32]
 8006136:	02ad      	lsls	r5, r5, #10
            task->event 	= UBX_TIMEOUT;
 8006138:	2313      	movs	r3, #19
 800613a:	7023      	strb	r3, [r4, #0]
            task->cursor	= 0;
 800613c:	2300      	movs	r3, #0
 800613e:	7063      	strb	r3, [r4, #1]
        } break;
 8006140:	e03b      	b.n	80061ba <ubx_systask+0x3ae>
                ubx_send(UBX_MSG_NAV_AOPSTATUS, 0);
 8006142:	2100      	movs	r1, #0
 8006144:	4819      	ldr	r0, [pc, #100]	; (80061ac <ubx_systask+0x3a0>)
 8006146:	f7ff fdb5 	bl	8005cb4 <ubx_send>
                nextevent = 30 * 1024;
 800614a:	25f0      	movs	r5, #240	; 0xf0
 800614c:	01ed      	lsls	r5, r5, #7
 800614e:	e76f      	b.n	8006030 <ubx_systask+0x224>
            else if ((task->cursor < 10) && (ubx.start_mode < UBX_hot_start)) {
 8006150:	4a0b      	ldr	r2, [pc, #44]	; (8006180 <ubx_systask+0x374>)
 8006152:	2381      	movs	r3, #129	; 0x81
 8006154:	5cd3      	ldrb	r3, [r2, r3]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d900      	bls.n	800615c <ubx_systask+0x350>
 800615a:	e6fb      	b.n	8005f54 <ubx_systask+0x148>
            	nextevent = 1024;
 800615c:	2580      	movs	r5, #128	; 0x80
 800615e:	00ed      	lsls	r5, r5, #3
 8006160:	e766      	b.n	8006030 <ubx_systask+0x224>
            ubxdrv_kill();
 8006162:	f7ff fb65 	bl	8005830 <ubxdrv_kill>
            ubx.start_state = UBX_MAIN_PROC;
 8006166:	4b06      	ldr	r3, [pc, #24]	; (8006180 <ubx_systask+0x374>)
 8006168:	2280      	movs	r2, #128	; 0x80
 800616a:	210d      	movs	r1, #13
 800616c:	5499      	strb	r1, [r3, r2]
            task->event     = UBX_WAKEUP;
 800616e:	3a7e      	subs	r2, #126	; 0x7e
 8006170:	7022      	strb	r2, [r4, #0]
            nextevent       = ubx.onoff_interval * 1024;
 8006172:	3276      	adds	r2, #118	; 0x76
 8006174:	5e9d      	ldrsh	r5, [r3, r2]
 8006176:	02ad      	lsls	r5, r5, #10
        	break;
 8006178:	e01f      	b.n	80061ba <ubx_systask+0x3ae>
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	20002656 	.word	0x20002656
 8006180:	20002650 	.word	0x20002650
 8006184:	00000806 	.word	0x00000806
 8006188:	00001c1f 	.word	0x00001c1f
 800618c:	0001517f 	.word	0x0001517f
 8006190:	0800c4cc 	.word	0x0800c4cc
 8006194:	00000406 	.word	0x00000406
 8006198:	ffffc200 	.word	0xffffc200
 800619c:	0000074b 	.word	0x0000074b
 80061a0:	00002306 	.word	0x00002306
 80061a4:	00000701 	.word	0x00000701
 80061a8:	00002013 	.word	0x00002013
 80061ac:	00006001 	.word	0x00006001
            ubxdrv_turnoff();
 80061b0:	f7ff fb42 	bl	8005838 <ubxdrv_turnoff>
            task->event    = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	7023      	strb	r3, [r4, #0]
            task->cursor   = 0;
 80061b8:	7063      	strb	r3, [r4, #1]
    } while ((nextevent <= TI2CLK(0)) && (task->event != 0));
 80061ba:	2d00      	cmp	r5, #0
 80061bc:	d000      	beq.n	80061c0 <ubx_systask+0x3b4>
 80061be:	e737      	b.n	8006030 <ubx_systask+0x224>
 80061c0:	7823      	ldrb	r3, [r4, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d100      	bne.n	80061c8 <ubx_systask+0x3bc>
 80061c6:	e733      	b.n	8006030 <ubx_systask+0x224>
        switch (task->event) {
 80061c8:	7823      	ldrb	r3, [r4, #0]
 80061ca:	2b0b      	cmp	r3, #11
 80061cc:	d100      	bne.n	80061d0 <ubx_systask+0x3c4>
 80061ce:	e783      	b.n	80060d8 <ubx_systask+0x2cc>
 80061d0:	d900      	bls.n	80061d4 <ubx_systask+0x3c8>
 80061d2:	e660      	b.n	8005e96 <ubx_systask+0x8a>
 80061d4:	2b05      	cmp	r3, #5
 80061d6:	d100      	bne.n	80061da <ubx_systask+0x3ce>
 80061d8:	e713      	b.n	8006002 <ubx_systask+0x1f6>
 80061da:	d900      	bls.n	80061de <ubx_systask+0x3d2>
 80061dc:	e624      	b.n	8005e28 <ubx_systask+0x1c>
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d100      	bne.n	80061e4 <ubx_systask+0x3d8>
 80061e2:	e6dc      	b.n	8005f9e <ubx_systask+0x192>
 80061e4:	d900      	bls.n	80061e8 <ubx_systask+0x3dc>
 80061e6:	e615      	b.n	8005e14 <ubx_systask+0x8>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d100      	bne.n	80061ee <ubx_systask+0x3e2>
 80061ec:	e6cc      	b.n	8005f88 <ubx_systask+0x17c>
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d1de      	bne.n	80061b0 <ubx_systask+0x3a4>
            nextevent   = ubxdrv_turnon();
 80061f2:	f7ff fb05 	bl	8005800 <ubxdrv_turnon>
 80061f6:	0005      	movs	r5, r0
            task->event = UBX_WAKEUP;
 80061f8:	2302      	movs	r3, #2
 80061fa:	7023      	strb	r3, [r4, #0]
            task->cursor= 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	7063      	strb	r3, [r4, #1]
            break;
 8006200:	e7db      	b.n	80061ba <ubx_systask+0x3ae>
 8006202:	46c0      	nop			; (mov r8, r8)

08006204 <bgcrc8_block>:
    0x33, 0x1C, 0x6D, 0x42
};



ot_u8 bgcrc8_block(ot_u8* block_addr) {
 8006204:	b510      	push	{r4, lr}
 8006206:	0002      	movs	r2, r0
    ot_int  cnt = 5;
    ot_u8   reg = 0xFF;
 8006208:	20ff      	movs	r0, #255	; 0xff
    ot_int  cnt = 5;
 800620a:	2305      	movs	r3, #5
    
    while (--cnt >= 0) {
 800620c:	e004      	b.n	8006218 <bgcrc8_block+0x14>
        reg = *block_addr ^ crc8tab[reg];
 800620e:	7811      	ldrb	r1, [r2, #0]
 8006210:	4c04      	ldr	r4, [pc, #16]	; (8006224 <bgcrc8_block+0x20>)
 8006212:	5c20      	ldrb	r0, [r4, r0]
 8006214:	4048      	eors	r0, r1
        block_addr++;
 8006216:	3201      	adds	r2, #1
    while (--cnt >= 0) {
 8006218:	3b01      	subs	r3, #1
 800621a:	b21b      	sxth	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	daf6      	bge.n	800620e <bgcrc8_block+0xa>
    }
    return reg;
}
 8006220:	bd10      	pop	{r4, pc}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	20000000 	.word	0x20000000

08006228 <bgcrc8_check>:

ot_u8 bgcrc8_check(ot_u8* block_addr) {
 8006228:	b510      	push	{r4, lr}
    return (block_addr[5] ^ bgcrc8_block(block_addr));
 800622a:	7944      	ldrb	r4, [r0, #5]
 800622c:	f7ff ffea 	bl	8006204 <bgcrc8_block>
 8006230:	4060      	eors	r0, r4
 8006232:	b2c0      	uxtb	r0, r0
}
 8006234:	bd10      	pop	{r4, pc}

08006236 <bgcrc8_put>:

void bgcrc8_put(ot_u8* block_addr) {
 8006236:	b510      	push	{r4, lr}
 8006238:	0004      	movs	r4, r0
    block_addr[5] = bgcrc8_block(block_addr);
 800623a:	f7ff ffe3 	bl	8006204 <bgcrc8_block>
 800623e:	7160      	strb	r0, [r4, #5]
}
 8006240:	bd10      	pop	{r4, pc}
	...

08006244 <otapi_new_telegram>:
#endif
}


///@todo this function is experimental, and it is subject to change
ot_u16 otapi_new_telegram(ot_u32 token, ot_u8 data_id, const ot_u8* data) {
 8006244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006246:	b083      	sub	sp, #12
 8006248:	0006      	movs	r6, r0
 800624a:	000d      	movs	r5, r1
 800624c:	9201      	str	r2, [sp, #4]
///         +---------+--------+-------+-------+---------+--------+
/// </PRE>
// ========================================================================
/// Set the header if the session is valid.  Also conditionally write the header
/// depending on the address type (a parameter).
    if (session_notempty()) {
 800624e:	f001 fc57 	bl	8007b00 <session_notempty>
 8006252:	2800      	cmp	r0, #0
 8006254:	d102      	bne.n	800625c <otapi_new_telegram+0x18>
        q_writebyte(&txq, data_id);
        q_writestring(&txq, data, 7);

        return 1;
    }
    return 0;
 8006256:	2000      	movs	r0, #0
}
 8006258:	b003      	add	sp, #12
 800625a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        s_active = session_top();
 800625c:	f001 fc1c 	bl	8007a98 <session_top>
 8006260:	0007      	movs	r7, r0
        dll_set_defaults(s_active);
 8006262:	f000 fe03 	bl	8006e6c <dll_set_defaults>
        dll.comm.rx_timeout = 0;
 8006266:	4b15      	ldr	r3, [pc, #84]	; (80062bc <otapi_new_telegram+0x78>)
 8006268:	2200      	movs	r2, #0
 800626a:	629a      	str	r2, [r3, #40]	; 0x28
        q_empty(&txq);
 800626c:	4c14      	ldr	r4, [pc, #80]	; (80062c0 <otapi_new_telegram+0x7c>)
 800626e:	0020      	movs	r0, r4
 8006270:	f002 fd10 	bl	8008c94 <q_empty>
        txq.getcursor += 2;         // Bypass unused length and Link CTL bytes
 8006274:	6863      	ldr	r3, [r4, #4]
 8006276:	3302      	adds	r3, #2
 8006278:	6063      	str	r3, [r4, #4]
        q_writebyte(&txq, 14);      // Dummy Length value (not actually sent)
 800627a:	210e      	movs	r1, #14
 800627c:	0020      	movs	r0, r4
 800627e:	f002 fd1f 	bl	8008cc0 <q_writebyte>
        q_writebyte(&txq, 0);       // Dummy Link-Control (not actually sent)
 8006282:	2100      	movs	r1, #0
 8006284:	0020      	movs	r0, r4
 8006286:	f002 fd1b 	bl	8008cc0 <q_writebyte>
        q_writebyte(&txq, 0);                           // Dummy TX-EIRP (updated by RF driver)
 800628a:	2100      	movs	r1, #0
 800628c:	0020      	movs	r0, r4
 800628e:	f002 fd17 	bl	8008cc0 <q_writebyte>
        q_writebyte(&txq, (s_active->subnet | 0x01));   // This byte is two nibbles: Subnet specifier and Page ID (1)
 8006292:	7ab9      	ldrb	r1, [r7, #10]
 8006294:	2301      	movs	r3, #1
 8006296:	4319      	orrs	r1, r3
 8006298:	0020      	movs	r0, r4
 800629a:	f002 fd11 	bl	8008cc0 <q_writebyte>
        q_writelong(&txq, token);                       // Application Token (32 bits)
 800629e:	0031      	movs	r1, r6
 80062a0:	0020      	movs	r0, r4
 80062a2:	f002 fd26 	bl	8008cf2 <q_writelong>
        q_writebyte(&txq, data_id);
 80062a6:	0029      	movs	r1, r5
 80062a8:	0020      	movs	r0, r4
 80062aa:	f002 fd09 	bl	8008cc0 <q_writebyte>
        q_writestring(&txq, data, 7);
 80062ae:	2207      	movs	r2, #7
 80062b0:	9901      	ldr	r1, [sp, #4]
 80062b2:	0020      	movs	r0, r4
 80062b4:	f002 fd63 	bl	8008d7e <q_writestring>
        return 1;
 80062b8:	2001      	movs	r0, #1
 80062ba:	e7cd      	b.n	8006258 <otapi_new_telegram+0x14>
 80062bc:	200026d4 	.word	0x200026d4
 80062c0:	20002df4 	.word	0x20002df4

080062c4 <otapi_open_request>:



ot_u16 otapi_open_request(addr_type addr, routing_tmpl* routing) {
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	0004      	movs	r4, r0
 80062c8:	000d      	movs	r5, r1
/// Set the header if the session is valid.  Also conditionally write the header
/// depending on the address type (a parameter).  
    if (session_notempty()) {
 80062ca:	f001 fc19 	bl	8007b00 <session_notempty>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d101      	bne.n	80062d6 <otapi_open_request+0x12>

        // Load the header
        m2np_header(s_active, (ot_u8)addr, M2FI_FRDIALOG);
        return 1;
    }
    return 0;
 80062d2:	2000      	movs	r0, #0
}
 80062d4:	bd70      	pop	{r4, r5, r6, pc}
        s_active = session_top();
 80062d6:	f001 fbdf 	bl	8007a98 <session_top>
 80062da:	0006      	movs	r6, r0
        dll_set_defaults(s_active);
 80062dc:	f000 fdc6 	bl	8006e6c <dll_set_defaults>
        if (addr & M2FI_UCAST) {
 80062e0:	07a3      	lsls	r3, r4, #30
 80062e2:	d406      	bmi.n	80062f2 <otapi_open_request+0x2e>
        m2np_header(s_active, (ot_u8)addr, M2FI_FRDIALOG);
 80062e4:	2200      	movs	r2, #0
 80062e6:	0021      	movs	r1, r4
 80062e8:	0030      	movs	r0, r6
 80062ea:	f000 fff3 	bl	80072d4 <m2np_header>
        return 1;
 80062ee:	2001      	movs	r0, #1
 80062f0:	e7f0      	b.n	80062d4 <otapi_open_request+0x10>
            ot_memcpy((ot_u8*)&m2np.rt, (ot_u8*)routing, sizeof(routing_tmpl));
 80062f2:	221c      	movs	r2, #28
 80062f4:	0029      	movs	r1, r5
 80062f6:	4802      	ldr	r0, [pc, #8]	; (8006300 <otapi_open_request+0x3c>)
 80062f8:	f004 f810 	bl	800a31c <ot_memcpy>
 80062fc:	e7f2      	b.n	80062e4 <otapi_open_request+0x20>
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	20002724 	.word	0x20002724

08006304 <otapi_close_request>:


ot_u16 otapi_close_request() {
 8006304:	b510      	push	{r4, lr}
/// Set the footer if the session is valid
    if (session_notempty()) {
 8006306:	f001 fbfb 	bl	8007b00 <session_notempty>
 800630a:	2800      	cmp	r0, #0
 800630c:	d101      	bne.n	8006312 <otapi_close_request+0xe>
        m2np_footer( /* session_top() */ );
        return 1;
    }
    return 0;
 800630e:	2000      	movs	r0, #0
}
 8006310:	bd10      	pop	{r4, pc}
        m2np_footer( /* session_top() */ );
 8006312:	f001 f8a9 	bl	8007468 <m2np_footer>
        return 1;
 8006316:	2001      	movs	r0, #1
 8006318:	e7fa      	b.n	8006310 <otapi_close_request+0xc>
	...

0800631c <otapi_start_dialog>:
//    if (radio.state != RADIO_Idle) {
//    	rm2_kill();
//    }
//#   endif

    if (timeout != 0) {
 800631c:	2800      	cmp	r0, #0
 800631e:	d001      	beq.n	8006324 <otapi_start_dialog+0x8>
        dll.comm.tc = TI2CLK(timeout);
 8006320:	4b01      	ldr	r3, [pc, #4]	; (8006328 <otapi_start_dialog+0xc>)
 8006322:	6218      	str	r0, [r3, #32]
//    sys.task_RFA.event = 0;
//    sys_preempt(&sys.task_RFA, 0);
//#   endif
    
    return 1;
}
 8006324:	2001      	movs	r0, #1
 8006326:	4770      	bx	lr
 8006328:	200026d4 	.word	0x200026d4

0800632c <otapi_put_command_tmpl>:




#ifndef EXTF_otapi_put_command_tmpl
ot_u16 otapi_put_command_tmpl(ot_u8* status, command_tmpl* command) {    
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	0004      	movs	r4, r0
    /// Check Opcodes to make sure this one is supported
    /// @todo base this on app_config.h settings.  Currently this is rudimentary
    ///       and hard-coded.  It just filters out Datastream and non-existing codes
    if (command->opcode > 15) {
 8006330:	784b      	ldrb	r3, [r1, #1]
 8006332:	2b0f      	cmp	r3, #15
 8006334:	d823      	bhi.n	800637e <otapi_put_command_tmpl+0x52>
        // command extension, not present at the moment
        *status = 0;
        return 0;
    }
    
    dll.comm.csmaca_params |= command->type & M2_CSMACA_A2P;
 8006336:	2200      	movs	r2, #0
 8006338:	568a      	ldrsb	r2, [r1, r2]
 800633a:	2340      	movs	r3, #64	; 0x40
 800633c:	4013      	ands	r3, r2
 800633e:	4818      	ldr	r0, [pc, #96]	; (80063a0 <otapi_put_command_tmpl+0x74>)
 8006340:	222e      	movs	r2, #46	; 0x2e
 8006342:	5c85      	ldrb	r5, [r0, r2]
 8006344:	432b      	orrs	r3, r5
 8006346:	5483      	strb	r3, [r0, r2]
    m2qp.cmd.code           = command->type | command->opcode;
 8006348:	780b      	ldrb	r3, [r1, #0]
 800634a:	784a      	ldrb	r2, [r1, #1]
 800634c:	4313      	orrs	r3, r2
    m2qp.cmd.code          |= (command->extension != 0) << 7;
 800634e:	b25b      	sxtb	r3, r3
 8006350:	788a      	ldrb	r2, [r1, #2]
 8006352:	2a00      	cmp	r2, #0
 8006354:	d017      	beq.n	8006386 <otapi_put_command_tmpl+0x5a>
 8006356:	2180      	movs	r1, #128	; 0x80
 8006358:	4249      	negs	r1, r1
 800635a:	4319      	orrs	r1, r3
 800635c:	b2c9      	uxtb	r1, r1
 800635e:	4d11      	ldr	r5, [pc, #68]	; (80063a4 <otapi_put_command_tmpl+0x78>)
 8006360:	7029      	strb	r1, [r5, #0]
    m2qp.cmd.ext            = command->extension;
 8006362:	706a      	strb	r2, [r5, #1]
    q_writebyte(&txq, m2qp.cmd.code);
 8006364:	4810      	ldr	r0, [pc, #64]	; (80063a8 <otapi_put_command_tmpl+0x7c>)
 8006366:	f002 fcab 	bl	8008cc0 <q_writebyte>
    
    if (m2qp.cmd.ext != 0) {
 800636a:	7869      	ldrb	r1, [r5, #1]
 800636c:	2900      	cmp	r1, #0
 800636e:	d10c      	bne.n	800638a <otapi_put_command_tmpl+0x5e>
        if (m2qp.cmd.ext & 2) {
            dll.comm.rx_timeout = 0;
        }
    }
    
    *status = 1;
 8006370:	2301      	movs	r3, #1
 8006372:	7023      	strb	r3, [r4, #0]
    return q_length(&txq);
 8006374:	480c      	ldr	r0, [pc, #48]	; (80063a8 <otapi_put_command_tmpl+0x7c>)
 8006376:	f002 fc6b 	bl	8008c50 <q_length>
 800637a:	b280      	uxth	r0, r0
}
 800637c:	bd70      	pop	{r4, r5, r6, pc}
        *status = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	7003      	strb	r3, [r0, #0]
        return 0;
 8006382:	2000      	movs	r0, #0
 8006384:	e7fa      	b.n	800637c <otapi_put_command_tmpl+0x50>
    m2qp.cmd.code          |= (command->extension != 0) << 7;
 8006386:	2100      	movs	r1, #0
 8006388:	e7e7      	b.n	800635a <otapi_put_command_tmpl+0x2e>
        q_writebyte(&txq, m2qp.cmd.ext);
 800638a:	4807      	ldr	r0, [pc, #28]	; (80063a8 <otapi_put_command_tmpl+0x7c>)
 800638c:	f002 fc98 	bl	8008cc0 <q_writebyte>
        if (m2qp.cmd.ext & 2) {
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <otapi_put_command_tmpl+0x78>)
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	079b      	lsls	r3, r3, #30
 8006396:	d5eb      	bpl.n	8006370 <otapi_put_command_tmpl+0x44>
            dll.comm.rx_timeout = 0;
 8006398:	4b01      	ldr	r3, [pc, #4]	; (80063a0 <otapi_put_command_tmpl+0x74>)
 800639a:	2200      	movs	r2, #0
 800639c:	629a      	str	r2, [r3, #40]	; 0x28
 800639e:	e7e7      	b.n	8006370 <otapi_put_command_tmpl+0x44>
 80063a0:	200026d4 	.word	0x200026d4
 80063a4:	2000278c 	.word	0x2000278c
 80063a8:	20002df4 	.word	0x20002df4

080063ac <otapi_put_dialog_tmpl>:
#endif


#ifndef EXTF_otapi_put_dialog_tmpl
ot_u16 otapi_put_dialog_tmpl(ot_u8* status, dialog_tmpl* dialog) {
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	0005      	movs	r5, r0
 80063b0:	1e0c      	subs	r4, r1, #0
    if (dialog == NULL) {
 80063b2:	d01f      	beq.n	80063f4 <otapi_put_dialog_tmpl+0x48>
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
        q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
    }
    else {
        // Place dialog with timeout
        dll.comm.rx_timeout = otutils_calc_timeout(dialog->timeout);
 80063b4:	7808      	ldrb	r0, [r1, #0]
 80063b6:	f002 fd29 	bl	8008e0c <otutils_calc_timeout>
 80063ba:	4b19      	ldr	r3, [pc, #100]	; (8006420 <otapi_put_dialog_tmpl+0x74>)
 80063bc:	6298      	str	r0, [r3, #40]	; 0x28
        dialog->timeout    |= (dialog->channels != 0) << 7;     // 0 or 0x80
 80063be:	2100      	movs	r1, #0
 80063c0:	5661      	ldrsb	r1, [r4, r1]
 80063c2:	7863      	ldrb	r3, [r4, #1]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d029      	beq.n	800641c <otapi_put_dialog_tmpl+0x70>
 80063c8:	2380      	movs	r3, #128	; 0x80
 80063ca:	425b      	negs	r3, r3
 80063cc:	4319      	orrs	r1, r3
 80063ce:	b2c9      	uxtb	r1, r1
 80063d0:	7021      	strb	r1, [r4, #0]
        q_writebyte(&txq, dialog->timeout);
 80063d2:	4814      	ldr	r0, [pc, #80]	; (8006424 <otapi_put_dialog_tmpl+0x78>)
 80063d4:	f002 fc74 	bl	8008cc0 <q_writebyte>
    
        // Write response list
        if (dialog->channels != 0) {
 80063d8:	7863      	ldrb	r3, [r4, #1]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d015      	beq.n	800640a <otapi_put_dialog_tmpl+0x5e>
            dll.comm.rx_channels = dialog->channels;
 80063de:	4a10      	ldr	r2, [pc, #64]	; (8006420 <otapi_put_dialog_tmpl+0x74>)
 80063e0:	2131      	movs	r1, #49	; 0x31
 80063e2:	5453      	strb	r3, [r2, r1]
            dll.comm.rx_chanlist = dialog->chanlist;
 80063e4:	6863      	ldr	r3, [r4, #4]
 80063e6:	6393      	str	r3, [r2, #56]	; 0x38
            q_writestring(&txq, dialog->chanlist, dialog->channels);
 80063e8:	7862      	ldrb	r2, [r4, #1]
 80063ea:	6861      	ldr	r1, [r4, #4]
 80063ec:	480d      	ldr	r0, [pc, #52]	; (8006424 <otapi_put_dialog_tmpl+0x78>)
 80063ee:	f002 fcc6 	bl	8008d7e <q_writestring>
 80063f2:	e00a      	b.n	800640a <otapi_put_dialog_tmpl+0x5e>
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
 80063f4:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <otapi_put_dialog_tmpl+0x7c>)
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	079b      	lsls	r3, r3, #30
 80063fa:	d40d      	bmi.n	8006418 <otapi_put_dialog_tmpl+0x6c>
 80063fc:	210f      	movs	r1, #15
 80063fe:	4b08      	ldr	r3, [pc, #32]	; (8006420 <otapi_put_dialog_tmpl+0x74>)
 8006400:	6299      	str	r1, [r3, #40]	; 0x28
        q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
 8006402:	b2c9      	uxtb	r1, r1
 8006404:	4807      	ldr	r0, [pc, #28]	; (8006424 <otapi_put_dialog_tmpl+0x78>)
 8006406:	f002 fc5b 	bl	8008cc0 <q_writebyte>
        }
    }

    *status = 1;
 800640a:	2301      	movs	r3, #1
 800640c:	702b      	strb	r3, [r5, #0]
    return q_length(&txq);
 800640e:	4805      	ldr	r0, [pc, #20]	; (8006424 <otapi_put_dialog_tmpl+0x78>)
 8006410:	f002 fc1e 	bl	8008c50 <q_length>
 8006414:	b280      	uxth	r0, r0
}
 8006416:	bd70      	pop	{r4, r5, r6, pc}
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
 8006418:	2100      	movs	r1, #0
 800641a:	e7f0      	b.n	80063fe <otapi_put_dialog_tmpl+0x52>
        dialog->timeout    |= (dialog->channels != 0) << 7;     // 0 or 0x80
 800641c:	2300      	movs	r3, #0
 800641e:	e7d5      	b.n	80063cc <otapi_put_dialog_tmpl+0x20>
 8006420:	200026d4 	.word	0x200026d4
 8006424:	20002df4 	.word	0x20002df4
 8006428:	2000278c 	.word	0x2000278c

0800642c <otapi_put_query_tmpl>:
#endif


#ifndef EXTF_otapi_put_query_tmpl
ot_u16 otapi_put_query_tmpl(ot_u8* status, query_tmpl* query) {
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	0005      	movs	r5, r0
 8006430:	000c      	movs	r4, r1
    /// Test for Anycast and Multicast addressing (query needs one of these)    

    if ((m2qp.cmd.code & M2TT_MASK) > M2TT_REQ_UB) {
 8006432:	4b15      	ldr	r3, [pc, #84]	; (8006488 <otapi_put_query_tmpl+0x5c>)
 8006434:	781a      	ldrb	r2, [r3, #0]
 8006436:	2370      	movs	r3, #112	; 0x70
 8006438:	4013      	ands	r3, r2
 800643a:	2b20      	cmp	r3, #32
 800643c:	d803      	bhi.n	8006446 <otapi_put_query_tmpl+0x1a>
        q_writestring(&txq, query->value, query->length);
    
        *status = 1;
        return q_length(&txq);
    }
    *status = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	7003      	strb	r3, [r0, #0]
    return 0;
 8006442:	2000      	movs	r0, #0
}
 8006444:	bd70      	pop	{r4, r5, r6, pc}
        q_writebyte(&txq, query->length);
 8006446:	7849      	ldrb	r1, [r1, #1]
 8006448:	4e10      	ldr	r6, [pc, #64]	; (800648c <otapi_put_query_tmpl+0x60>)
 800644a:	0030      	movs	r0, r6
 800644c:	f002 fc38 	bl	8008cc0 <q_writebyte>
        q_writebyte(&txq, query->code);
 8006450:	7821      	ldrb	r1, [r4, #0]
 8006452:	0030      	movs	r0, r6
 8006454:	f002 fc34 	bl	8008cc0 <q_writebyte>
        if (query->code & 0x80) {
 8006458:	2300      	movs	r3, #0
 800645a:	56e3      	ldrsb	r3, [r4, r3]
 800645c:	2b00      	cmp	r3, #0
 800645e:	db0c      	blt.n	800647a <otapi_put_query_tmpl+0x4e>
        q_writestring(&txq, query->value, query->length);
 8006460:	7862      	ldrb	r2, [r4, #1]
 8006462:	68a1      	ldr	r1, [r4, #8]
 8006464:	4c09      	ldr	r4, [pc, #36]	; (800648c <otapi_put_query_tmpl+0x60>)
 8006466:	0020      	movs	r0, r4
 8006468:	f002 fc89 	bl	8008d7e <q_writestring>
        *status = 1;
 800646c:	2301      	movs	r3, #1
 800646e:	702b      	strb	r3, [r5, #0]
        return q_length(&txq);
 8006470:	0020      	movs	r0, r4
 8006472:	f002 fbed 	bl	8008c50 <q_length>
 8006476:	b280      	uxth	r0, r0
 8006478:	e7e4      	b.n	8006444 <otapi_put_query_tmpl+0x18>
            q_writestring(&txq, query->mask, query->length);
 800647a:	7862      	ldrb	r2, [r4, #1]
 800647c:	6861      	ldr	r1, [r4, #4]
 800647e:	4803      	ldr	r0, [pc, #12]	; (800648c <otapi_put_query_tmpl+0x60>)
 8006480:	f002 fc7d 	bl	8008d7e <q_writestring>
 8006484:	e7ec      	b.n	8006460 <otapi_put_query_tmpl+0x34>
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	2000278c 	.word	0x2000278c
 800648c:	20002df4 	.word	0x20002df4

08006490 <sub_put_isf_offset>:
}
#endif


#ifndef EXTF_otapi_put_isf_offset
void sub_put_isf_offset(ot_u8 is_series, ot_u16 offset) {
 8006490:	b510      	push	{r4, lr}
    if (is_series) {
 8006492:	2800      	cmp	r0, #0
 8006494:	d104      	bne.n	80064a0 <sub_put_isf_offset+0x10>
        q_writeshort(&txq, offset);
    }
    else {
        q_writebyte(&txq, (ot_u8)offset);
 8006496:	b2c9      	uxtb	r1, r1
 8006498:	4803      	ldr	r0, [pc, #12]	; (80064a8 <sub_put_isf_offset+0x18>)
 800649a:	f002 fc11 	bl	8008cc0 <q_writebyte>
    }
}
 800649e:	bd10      	pop	{r4, pc}
        q_writeshort(&txq, offset);
 80064a0:	4801      	ldr	r0, [pc, #4]	; (80064a8 <sub_put_isf_offset+0x18>)
 80064a2:	f002 fc12 	bl	8008cca <q_writeshort>
 80064a6:	e7fa      	b.n	800649e <sub_put_isf_offset+0xe>
 80064a8:	20002df4 	.word	0x20002df4

080064ac <otapi_put_isf_comp>:
#endif


#ifndef EXTF_otapi_put_isf_comp
ot_u16 otapi_put_isf_comp(ot_u8* status, isfcomp_tmpl* isfcomp) {
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	0006      	movs	r6, r0
 80064b0:	000c      	movs	r4, r1
    q_writebyte(&txq, isfcomp->isf_id);
 80064b2:	7849      	ldrb	r1, [r1, #1]
 80064b4:	4d07      	ldr	r5, [pc, #28]	; (80064d4 <otapi_put_isf_comp+0x28>)
 80064b6:	0028      	movs	r0, r5
 80064b8:	f002 fc02 	bl	8008cc0 <q_writebyte>
    sub_put_isf_offset(isfcomp->is_series, isfcomp->offset);
 80064bc:	8861      	ldrh	r1, [r4, #2]
 80064be:	7820      	ldrb	r0, [r4, #0]
 80064c0:	f7ff ffe6 	bl	8006490 <sub_put_isf_offset>
    
    *status = 1;
 80064c4:	2301      	movs	r3, #1
 80064c6:	7033      	strb	r3, [r6, #0]
    return q_length(&txq);
 80064c8:	0028      	movs	r0, r5
 80064ca:	f002 fbc1 	bl	8008c50 <q_length>
 80064ce:	b280      	uxth	r0, r0
}
 80064d0:	bd70      	pop	{r4, r5, r6, pc}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	20002df4 	.word	0x20002df4

080064d8 <otapi_put_isf_call>:
#endif


#ifndef EXTF_otapi_put_isf_call
ot_u16 otapi_put_isf_call(ot_u8* status, isfcall_tmpl* isfcall) {
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	0006      	movs	r6, r0
 80064dc:	000c      	movs	r4, r1
    q_writebyte(&txq, isfcall->max_return);
 80064de:	7909      	ldrb	r1, [r1, #4]
 80064e0:	4d09      	ldr	r5, [pc, #36]	; (8006508 <otapi_put_isf_call+0x30>)
 80064e2:	0028      	movs	r0, r5
 80064e4:	f002 fbec 	bl	8008cc0 <q_writebyte>
    q_writebyte(&txq, isfcall->isf_id);
 80064e8:	7861      	ldrb	r1, [r4, #1]
 80064ea:	0028      	movs	r0, r5
 80064ec:	f002 fbe8 	bl	8008cc0 <q_writebyte>
    sub_put_isf_offset(isfcall->is_series, isfcall->offset);
 80064f0:	8861      	ldrh	r1, [r4, #2]
 80064f2:	7820      	ldrb	r0, [r4, #0]
 80064f4:	f7ff ffcc 	bl	8006490 <sub_put_isf_offset>
    
    *status = 1;
 80064f8:	2301      	movs	r3, #1
 80064fa:	7033      	strb	r3, [r6, #0]
    return q_length(&txq);
 80064fc:	0028      	movs	r0, r5
 80064fe:	f002 fba7 	bl	8008c50 <q_length>
 8006502:	b280      	uxth	r0, r0
}
 8006504:	bd70      	pop	{r4, r5, r6, pc}
 8006506:	46c0      	nop			; (mov r8, r8)
 8006508:	20002df4 	.word	0x20002df4

0800650c <otapi_put_udp_tmpl>:
}
#endif


#ifndef EXTF_otapi_put_udp_tmpl
ot_u16 otapi_put_udp_tmpl(ot_u8* status, udp_tmpl* udp) {
 800650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650e:	0007      	movs	r7, r0
 8006510:	000e      	movs	r6, r1
    ot_u16 space;
    vlFILE* fp = NULL;
    
    space = q_writespace(&txq);
 8006512:	4825      	ldr	r0, [pc, #148]	; (80065a8 <otapi_put_udp_tmpl+0x9c>)
 8006514:	f002 fba6 	bl	8008c64 <q_writespace>
 8006518:	b284      	uxth	r4, r0
    ///      detect boundaries across the packet rather than simply across the
    ///      frame.  It will probably require a network-layer function to 
    ///      determine the overhead when supplied payload length.
#   else
        
        if (udp->data == NULL) {
 800651a:	6873      	ldr	r3, [r6, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00f      	beq.n	8006540 <otapi_put_udp_tmpl+0x34>
    vlFILE* fp = NULL;
 8006520:	2500      	movs	r5, #0
        	///@todo add a user to UDP type for access control
        	fp              = ISF_open(udp->src_port, VL_ACCESS_R, AUTH_GUEST );
        	udp->data_length= (fp != NULL) ? fp->length : 0;
        }
        
        space -= 4;
 8006522:	3c04      	subs	r4, #4
 8006524:	b2a4      	uxth	r4, r4
        if (space < udp->data_length) {
 8006526:	8833      	ldrh	r3, [r6, #0]
 8006528:	42a3      	cmp	r3, r4
 800652a:	d915      	bls.n	8006558 <otapi_put_udp_tmpl+0x4c>
            *status = 0;
 800652c:	2300      	movs	r3, #0
 800652e:	703b      	strb	r3, [r7, #0]
            else {
            	q_writestring(&txq, udp->data, udp->data_length);
            }
        }
        
        vl_close(fp);
 8006530:	0028      	movs	r0, r5
 8006532:	f002 ff1d 	bl	8009370 <vl_close>
#   endif

    return q_length(&txq);
 8006536:	481c      	ldr	r0, [pc, #112]	; (80065a8 <otapi_put_udp_tmpl+0x9c>)
 8006538:	f002 fb8a 	bl	8008c50 <q_length>
 800653c:	b280      	uxth	r0, r0
}
 800653e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	fp              = ISF_open(udp->src_port, VL_ACCESS_R, AUTH_GUEST );
 8006540:	78f0      	ldrb	r0, [r6, #3]
 8006542:	4a1a      	ldr	r2, [pc, #104]	; (80065ac <otapi_put_udp_tmpl+0xa0>)
 8006544:	2124      	movs	r1, #36	; 0x24
 8006546:	f002 ff58 	bl	80093fa <ISF_open>
 800654a:	1e05      	subs	r5, r0, #0
        	udp->data_length= (fp != NULL) ? fp->length : 0;
 800654c:	d002      	beq.n	8006554 <otapi_put_udp_tmpl+0x48>
 800654e:	8903      	ldrh	r3, [r0, #8]
 8006550:	8033      	strh	r3, [r6, #0]
 8006552:	e7e6      	b.n	8006522 <otapi_put_udp_tmpl+0x16>
 8006554:	2300      	movs	r3, #0
 8006556:	e7fb      	b.n	8006550 <otapi_put_udp_tmpl+0x44>
            *status = 1;
 8006558:	2301      	movs	r3, #1
 800655a:	703b      	strb	r3, [r7, #0]
            q_writebyte(&txq, (ALP_FLAG_MB | ALP_FLAG_ME));
 800655c:	4c12      	ldr	r4, [pc, #72]	; (80065a8 <otapi_put_udp_tmpl+0x9c>)
 800655e:	21c0      	movs	r1, #192	; 0xc0
 8006560:	0020      	movs	r0, r4
 8006562:	f002 fbad 	bl	8008cc0 <q_writebyte>
            q_writebyte(&txq, (ot_u8)udp->data_length);
 8006566:	7831      	ldrb	r1, [r6, #0]
 8006568:	0020      	movs	r0, r4
 800656a:	f002 fba9 	bl	8008cc0 <q_writebyte>
            q_writebyte(&txq, udp->dst_port);
 800656e:	78b1      	ldrb	r1, [r6, #2]
 8006570:	0020      	movs	r0, r4
 8006572:	f002 fba5 	bl	8008cc0 <q_writebyte>
            q_writebyte(&txq, udp->src_port);
 8006576:	78f1      	ldrb	r1, [r6, #3]
 8006578:	0020      	movs	r0, r4
 800657a:	f002 fba1 	bl	8008cc0 <q_writebyte>
            if (udp->data == NULL) {
 800657e:	6871      	ldr	r1, [r6, #4]
 8006580:	2900      	cmp	r1, #0
 8006582:	d005      	beq.n	8006590 <otapi_put_udp_tmpl+0x84>
            	q_writestring(&txq, udp->data, udp->data_length);
 8006584:	2300      	movs	r3, #0
 8006586:	5ef2      	ldrsh	r2, [r6, r3]
 8006588:	4807      	ldr	r0, [pc, #28]	; (80065a8 <otapi_put_udp_tmpl+0x9c>)
 800658a:	f002 fbf8 	bl	8008d7e <q_writestring>
 800658e:	e7cf      	b.n	8006530 <otapi_put_udp_tmpl+0x24>
                txq.putcursor += vl_load(fp, udp->data_length, txq.putcursor);
 8006590:	4c05      	ldr	r4, [pc, #20]	; (80065a8 <otapi_put_udp_tmpl+0x9c>)
 8006592:	8831      	ldrh	r1, [r6, #0]
 8006594:	68a2      	ldr	r2, [r4, #8]
 8006596:	0028      	movs	r0, r5
 8006598:	f002 fe89 	bl	80092ae <vl_load>
 800659c:	68a3      	ldr	r3, [r4, #8]
 800659e:	469c      	mov	ip, r3
 80065a0:	4460      	add	r0, ip
 80065a2:	60a0      	str	r0, [r4, #8]
 80065a4:	e7c4      	b.n	8006530 <otapi_put_udp_tmpl+0x24>
 80065a6:	46c0      	nop			; (mov r8, r8)
 80065a8:	20002df4 	.word	0x20002df4
 80065ac:	200027c4 	.word	0x200027c4

080065b0 <dll_response_applet>:

/** Internal DLL applets <BR>
  * ========================================================================<BR>
  */

OT_WEAK void dll_response_applet(m2session* active) {
 80065b0:	b510      	push	{r4, lr}
/// If this is a response transmission of a session with "Listen" active, it
/// means the contention period (Tc) is followed immediately with a subsequent
/// request.  We must not overlap that request with the tail-end of our own
/// response.  Therefore, we subtract from Tc the duration of this response.
    if (active->flags & M2_FLAG_LISTEN) {
 80065b2:	230b      	movs	r3, #11
 80065b4:	56c3      	ldrsb	r3, [r0, r3]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	db00      	blt.n	80065bc <dll_response_applet+0xc>
            sys.task_HSS.cursor     = 0;
            sys.task_HSS.nextevent  = TI2CLK(dll.comm.rx_timeout);
            dll.comm.rx_timeout     = rm2_default_tgd(active->channel);
        }
    }
}
 80065ba:	bd10      	pop	{r4, pc}
        ot_u8 substate = active->netstate & M2_NETSTATE_TMASK;
 80065bc:	79c2      	ldrb	r2, [r0, #7]
 80065be:	2370      	movs	r3, #112	; 0x70
 80065c0:	4013      	ands	r3, r2
        if (substate == M2_NETSTATE_RESPTX) {
 80065c2:	2b10      	cmp	r3, #16
 80065c4:	d00c      	beq.n	80065e0 <dll_response_applet+0x30>
        else if (substate == M2_NETSTATE_REQRX) {
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d1f7      	bne.n	80065ba <dll_response_applet+0xa>
            sys.task_HSS.cursor     = 0;
 80065ca:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <dll_response_applet+0x40>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	755a      	strb	r2, [r3, #21]
            sys.task_HSS.nextevent  = TI2CLK(dll.comm.rx_timeout);
 80065d0:	4c08      	ldr	r4, [pc, #32]	; (80065f4 <dll_response_applet+0x44>)
 80065d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80065d4:	619a      	str	r2, [r3, #24]
            dll.comm.rx_timeout     = rm2_default_tgd(active->channel);
 80065d6:	7980      	ldrb	r0, [r0, #6]
 80065d8:	f7fc fb7e 	bl	8002cd8 <rm2_default_tgd>
 80065dc:	62a0      	str	r0, [r4, #40]	; 0x28
}
 80065de:	e7ec      	b.n	80065ba <dll_response_applet+0xa>
            dll.comm.tc -= rm2_pkt_duration(&txq);  //TI2CLK(rm2_pkt_duration(&txq));
 80065e0:	4805      	ldr	r0, [pc, #20]	; (80065f8 <dll_response_applet+0x48>)
 80065e2:	f7fc fba3 	bl	8002d2c <rm2_pkt_duration>
 80065e6:	4b03      	ldr	r3, [pc, #12]	; (80065f4 <dll_response_applet+0x44>)
 80065e8:	6a1a      	ldr	r2, [r3, #32]
 80065ea:	1a10      	subs	r0, r2, r0
 80065ec:	6218      	str	r0, [r3, #32]
 80065ee:	e7e4      	b.n	80065ba <dll_response_applet+0xa>
 80065f0:	20002e1c 	.word	0x20002e1c
 80065f4:	200026d4 	.word	0x200026d4
 80065f8:	20002df4 	.word	0x20002df4

080065fc <sub_csma_scramble>:





void sub_csma_scramble(void) {
 80065fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065fe:	b083      	sub	sp, #12
/// Sort of optional: Go through the channel list and scramble the channel
/// entries randomly in order to improve band utilization, as multiple devices
/// will scramble the list differently.
    ot_u8 txchans = dll.comm.tx_channels - 1;
 8006600:	4a1a      	ldr	r2, [pc, #104]	; (800666c <sub_csma_scramble+0x70>)
 8006602:	2330      	movs	r3, #48	; 0x30
 8006604:	5cd4      	ldrb	r4, [r2, r3]
 8006606:	3c01      	subs	r4, #1
 8006608:	b2e4      	uxtb	r4, r4

    if (txchans) {
 800660a:	2c00      	cmp	r4, #0
 800660c:	d101      	bne.n	8006612 <sub_csma_scramble+0x16>

            rot.ushort     &= ~0x0101;   //Shift each byte right 1 bit
            rot.ushort    >>= 1;
        }
    }
}
 800660e:	b003      	add	sp, #12
 8006610:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rot.ushort = rand_prn16();
 8006612:	f003 febf 	bl	800a394 <rand_prn16>
 8006616:	1c06      	adds	r6, r0, #0
        for (i=0; i<txchans; i++) {
 8006618:	2200      	movs	r2, #0
 800661a:	e023      	b.n	8006664 <sub_csma_scramble+0x68>
            j = i + ((rot.ubyte[0] & 1) != 0);
 800661c:	2301      	movs	r3, #1
 800661e:	0019      	movs	r1, r3
 8006620:	4031      	ands	r1, r6
 8006622:	1889      	adds	r1, r1, r2
 8006624:	b2c9      	uxtb	r1, r1
            k = txchans * ((rot.ubyte[1] & 1) != 0);
 8006626:	0435      	lsls	r5, r6, #16
 8006628:	0e2d      	lsrs	r5, r5, #24
 800662a:	402b      	ands	r3, r5
 800662c:	4363      	muls	r3, r4
 800662e:	b2db      	uxtb	r3, r3
            scratch                 = dll.comm.tx_chanlist[i];
 8006630:	4d0e      	ldr	r5, [pc, #56]	; (800666c <sub_csma_scramble+0x70>)
 8006632:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8006634:	9701      	str	r7, [sp, #4]
 8006636:	18b8      	adds	r0, r7, r2
 8006638:	7807      	ldrb	r7, [r0, #0]
 800663a:	46bc      	mov	ip, r7
            dll.comm.tx_chanlist[i] = dll.comm.tx_chanlist[k];
 800663c:	9f01      	ldr	r7, [sp, #4]
 800663e:	5cff      	ldrb	r7, [r7, r3]
 8006640:	7007      	strb	r7, [r0, #0]
            dll.comm.tx_chanlist[k] = scratch;
 8006642:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8006644:	4667      	mov	r7, ip
 8006646:	54c7      	strb	r7, [r0, r3]
            scratch                 = dll.comm.tx_chanlist[i];
 8006648:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800664a:	1883      	adds	r3, r0, r2
 800664c:	781f      	ldrb	r7, [r3, #0]
            dll.comm.tx_chanlist[i] = dll.comm.tx_chanlist[j];
 800664e:	5c40      	ldrb	r0, [r0, r1]
 8006650:	7018      	strb	r0, [r3, #0]
            dll.comm.tx_chanlist[j] = scratch;
 8006652:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006654:	545f      	strb	r7, [r3, r1]
            rot.ushort     &= ~0x0101;   //Shift each byte right 1 bit
 8006656:	4806      	ldr	r0, [pc, #24]	; (8006670 <sub_csma_scramble+0x74>)
 8006658:	4030      	ands	r0, r6
 800665a:	b280      	uxth	r0, r0
            rot.ushort    >>= 1;
 800665c:	0840      	lsrs	r0, r0, #1
 800665e:	1c06      	adds	r6, r0, #0
        for (i=0; i<txchans; i++) {
 8006660:	3201      	adds	r2, #1
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	42a2      	cmp	r2, r4
 8006666:	d3d9      	bcc.n	800661c <sub_csma_scramble+0x20>
 8006668:	e7d1      	b.n	800660e <sub_csma_scramble+0x12>
 800666a:	46c0      	nop			; (mov r8, r8)
 800666c:	200026d4 	.word	0x200026d4
 8006670:	fffffefe 	.word	0xfffffefe

08006674 <sub_rigd_newslot>:
    }
}



CLK_UNIT sub_rigd_newslot(void) {
 8006674:	b510      	push	{r4, lr}
/// halve tc from previous value and offset a random within that duration
    dll.comm.tc >>= 1;
 8006676:	4a07      	ldr	r2, [pc, #28]	; (8006694 <sub_rigd_newslot+0x20>)
 8006678:	6a13      	ldr	r3, [r2, #32]
 800667a:	105b      	asrs	r3, r3, #1
 800667c:	6213      	str	r3, [r2, #32]
    if (dll.comm.tc == 0)
 800667e:	d101      	bne.n	8006684 <sub_rigd_newslot+0x10>
        return 0;
 8006680:	2000      	movs	r0, #0
    
    //return (TI2CLK(rand_prn16()) % (CLK_UNIT)dll.comm.tc);
    return (rand_prn16() % (CLK_UNIT)dll.comm.tc);
}
 8006682:	bd10      	pop	{r4, pc}
    return (rand_prn16() % (CLK_UNIT)dll.comm.tc);
 8006684:	f003 fe86 	bl	800a394 <rand_prn16>
 8006688:	4b02      	ldr	r3, [pc, #8]	; (8006694 <sub_rigd_newslot+0x20>)
 800668a:	8c19      	ldrh	r1, [r3, #32]
 800668c:	f7f9 fdc2 	bl	8000214 <__aeabi_uidivmod>
 8006690:	b288      	uxth	r0, r1
 8006692:	e7f6      	b.n	8006682 <sub_rigd_newslot+0xe>
 8006694:	200026d4 	.word	0x200026d4

08006698 <sub_fcloop>:
CLK_UNIT sub_fcloop(void) {
 8006698:	b510      	push	{r4, lr}
    if (dll.comm.csmaca_params & 0x20) {    //NO CA
 800669a:	4a0d      	ldr	r2, [pc, #52]	; (80066d0 <sub_fcloop+0x38>)
 800669c:	232e      	movs	r3, #46	; 0x2e
 800669e:	5cd3      	ldrb	r3, [r2, r3]
 80066a0:	069a      	lsls	r2, r3, #26
 80066a2:	d40c      	bmi.n	80066be <sub_fcloop+0x26>
    if (dll.comm.csmaca_params & 0x18) {    //RAIND, AIND
 80066a4:	2218      	movs	r2, #24
 80066a6:	421a      	tst	r2, r3
 80066a8:	d10c      	bne.n	80066c4 <sub_fcloop+0x2c>
        wait    = (dll.comm.tc - dll.comm.tca);
 80066aa:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <sub_fcloop+0x38>)
 80066ac:	6a18      	ldr	r0, [r3, #32]
 80066ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80066b0:	1b04      	subs	r4, r0, r4
        wait   += sub_rigd_newslot();
 80066b2:	f7ff ffdf 	bl	8006674 <sub_rigd_newslot>
        return (wait < 0) ? 0 : (CLK_UNIT)wait;
 80066b6:	1900      	adds	r0, r0, r4
 80066b8:	d408      	bmi.n	80066cc <sub_fcloop+0x34>
 80066ba:	b280      	uxth	r0, r0
 80066bc:	e001      	b.n	80066c2 <sub_fcloop+0x2a>
        return phymac[0].tg; //TI2CLK(phymac[0].tg);
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <sub_fcloop+0x3c>)
 80066c0:	7858      	ldrb	r0, [r3, #1]
}
 80066c2:	bd10      	pop	{r4, pc}
        return rm2_pkt_duration(&txq); //TI2CLK(rm2_pkt_duration(&txq));
 80066c4:	4804      	ldr	r0, [pc, #16]	; (80066d8 <sub_fcloop+0x40>)
 80066c6:	f7fc fb31 	bl	8002d2c <rm2_pkt_duration>
 80066ca:	e7fa      	b.n	80066c2 <sub_fcloop+0x2a>
        return (wait < 0) ? 0 : (CLK_UNIT)wait;
 80066cc:	2000      	movs	r0, #0
 80066ce:	e7f8      	b.n	80066c2 <sub_fcloop+0x2a>
 80066d0:	200026d4 	.word	0x200026d4
 80066d4:	20002750 	.word	0x20002750
 80066d8:	20002df4 	.word	0x20002df4

080066dc <sub_fcinit>:
CLK_UNIT sub_fcinit(void) {
 80066dc:	b570      	push	{r4, r5, r6, lr}
    sub_csma_scramble();
 80066de:	f7ff ff8d 	bl	80065fc <sub_csma_scramble>
    if (dll.comm.csmaca_params & M2_CSMACA_AIND) {
 80066e2:	4a0d      	ldr	r2, [pc, #52]	; (8006718 <sub_fcinit+0x3c>)
 80066e4:	232e      	movs	r3, #46	; 0x2e
 80066e6:	5cd3      	ldrb	r3, [r2, r3]
 80066e8:	06da      	lsls	r2, r3, #27
 80066ea:	d412      	bmi.n	8006712 <sub_fcinit+0x36>
    if (dll.comm.csmaca_params & M2_CSMACA_RAIND) {
 80066ec:	071b      	lsls	r3, r3, #28
 80066ee:	d402      	bmi.n	80066f6 <sub_fcinit+0x1a>
    return sub_rigd_newslot();
 80066f0:	f7ff ffc0 	bl	8006674 <sub_rigd_newslot>
 80066f4:	e00e      	b.n	8006714 <sub_fcinit+0x38>
        random  = rand_prn16();
 80066f6:	f003 fe4d 	bl	800a394 <rand_prn16>
 80066fa:	0005      	movs	r5, r0
        random %= dll.comm.tc - rm2_pkt_duration(&txq);
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <sub_fcinit+0x3c>)
 80066fe:	6a1c      	ldr	r4, [r3, #32]
 8006700:	4806      	ldr	r0, [pc, #24]	; (800671c <sub_fcinit+0x40>)
 8006702:	f7fc fb13 	bl	8002d2c <rm2_pkt_duration>
 8006706:	1a21      	subs	r1, r4, r0
 8006708:	0028      	movs	r0, r5
 800670a:	f7f9 fe6d 	bl	80003e8 <__aeabi_idivmod>
 800670e:	b288      	uxth	r0, r1
        return random;
 8006710:	e000      	b.n	8006714 <sub_fcinit+0x38>
        return 0;
 8006712:	2000      	movs	r0, #0
}
 8006714:	bd70      	pop	{r4, r5, r6, pc}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	200026d4 	.word	0x200026d4
 800671c:	20002df4 	.word	0x20002df4

08006720 <dll_block_idletasks>:
    sys.task_HSS.event  = 0;
 8006720:	4b03      	ldr	r3, [pc, #12]	; (8006730 <dll_block_idletasks+0x10>)
 8006722:	2200      	movs	r2, #0
 8006724:	751a      	strb	r2, [r3, #20]
    sys.task_BTS.event  = 0;
 8006726:	771a      	strb	r2, [r3, #28]
    sys.task_SSS.event  = 0;
 8006728:	2124      	movs	r1, #36	; 0x24
 800672a:	545a      	strb	r2, [r3, r1]
}
 800672c:	4770      	bx	lr
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	20002e1c 	.word	0x20002e1c

08006734 <dll_refresh_rts>:
}
 8006734:	4770      	bx	lr
	...

08006738 <dll_silence>:
OT_WEAK void dll_silence(ot_bool onoff) {
 8006738:	b510      	push	{r4, lr}
	if (onoff == true) {
 800673a:	2800      	cmp	r0, #0
 800673c:	d004      	beq.n	8006748 <dll_silence+0x10>
		sys.task_SSS.nextevent 	= INT_MAX;
 800673e:	4b09      	ldr	r3, [pc, #36]	; (8006764 <dll_silence+0x2c>)
 8006740:	4a09      	ldr	r2, [pc, #36]	; (8006768 <dll_silence+0x30>)
 8006742:	629a      	str	r2, [r3, #40]	; 0x28
		sys.task_BTS.nextevent	= INT_MAX;
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bd10      	pop	{r4, pc}
		sys_task_setnext(&sys.task_SSS, 500);
 8006748:	21fa      	movs	r1, #250	; 0xfa
 800674a:	4c08      	ldr	r4, [pc, #32]	; (800676c <dll_silence+0x34>)
 800674c:	0049      	lsls	r1, r1, #1
 800674e:	0020      	movs	r0, r4
 8006750:	f002 ff0a 	bl	8009568 <sys_task_setnext>
		sys_task_setnext(&sys.task_BTS, 2000);
 8006754:	21fa      	movs	r1, #250	; 0xfa
 8006756:	0020      	movs	r0, r4
 8006758:	3808      	subs	r0, #8
 800675a:	00c9      	lsls	r1, r1, #3
 800675c:	f002 ff04 	bl	8009568 <sys_task_setnext>
}
 8006760:	e7f1      	b.n	8006746 <dll_silence+0xe>
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	20002e1c 	.word	0x20002e1c
 8006768:	7fffffff 	.word	0x7fffffff
 800676c:	20002e40 	.word	0x20002e40

08006770 <dll_idle>:
OT_WEAK void dll_idle(void) {
 8006770:	b570      	push	{r4, r5, r6, lr}
	radio_gag();
 8006772:	f7fb ff57 	bl	8002624 <radio_gag>
    radio_sleep();
 8006776:	f7fc f88d 	bl	8002894 <radio_sleep>
    sys.task_RFA.event  = 0;
 800677a:	4b0d      	ldr	r3, [pc, #52]	; (80067b0 <dll_idle+0x40>)
 800677c:	2200      	movs	r2, #0
 800677e:	711a      	strb	r2, [r3, #4]
    scan_evt_ptr        = (ot_u8*)&scan_events[dll.idle_state<<1];
 8006780:	4a0c      	ldr	r2, [pc, #48]	; (80067b4 <dll_idle+0x44>)
 8006782:	7814      	ldrb	r4, [r2, #0]
 8006784:	0061      	lsls	r1, r4, #1
 8006786:	480c      	ldr	r0, [pc, #48]	; (80067b8 <dll_idle+0x48>)
 8006788:	1845      	adds	r5, r0, r1
    sys.task_HSS.event  = *scan_evt_ptr;
 800678a:	5c41      	ldrb	r1, [r0, r1]
 800678c:	7519      	strb	r1, [r3, #20]
    sys.task_SSS.event  = *(++scan_evt_ptr);
 800678e:	7868      	ldrb	r0, [r5, #1]
 8006790:	2124      	movs	r1, #36	; 0x24
 8006792:	5458      	strb	r0, [r3, r1]
    sys.task_BTS.event  = ((dll.netconf.b_attempts != 0) \
 8006794:	7f53      	ldrb	r3, [r2, #29]
    		            && (dll.idle_state != M2_DLLIDLE_OFF));
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <dll_idle+0x32>
 800679a:	2c00      	cmp	r4, #0
 800679c:	d105      	bne.n	80067aa <dll_idle+0x3a>
 800679e:	2200      	movs	r2, #0
 80067a0:	e000      	b.n	80067a4 <dll_idle+0x34>
 80067a2:	2200      	movs	r2, #0
    sys.task_BTS.event  = ((dll.netconf.b_attempts != 0) \
 80067a4:	4b02      	ldr	r3, [pc, #8]	; (80067b0 <dll_idle+0x40>)
 80067a6:	771a      	strb	r2, [r3, #28]
}
 80067a8:	bd70      	pop	{r4, r5, r6, pc}
    		            && (dll.idle_state != M2_DLLIDLE_OFF));
 80067aa:	2201      	movs	r2, #1
 80067ac:	e7fa      	b.n	80067a4 <dll_idle+0x34>
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	20002e1c 	.word	0x20002e1c
 80067b4:	200026d4 	.word	0x200026d4
 80067b8:	0800c4f4 	.word	0x0800c4f4

080067bc <dll_rfevt_brx>:
OT_WEAK void dll_rfevt_brx(ot_int scode, ot_int fcode) {
 80067bc:	b510      	push	{r4, lr}
 80067be:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=100);
 80067c0:	4b1b      	ldr	r3, [pc, #108]	; (8006830 <dll_rfevt_brx+0x74>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	801a      	strh	r2, [r3, #0]
 80067c6:	3264      	adds	r2, #100	; 0x64
 80067c8:	805a      	strh	r2, [r3, #2]
    if (fcode != 0) {
 80067ca:	2900      	cmp	r1, #0
 80067cc:	d01a      	beq.n	8006804 <dll_rfevt_brx+0x48>
    	__DEBUG_ERRCODE_EVAL(=101);
 80067ce:	3201      	adds	r2, #1
 80067d0:	805a      	strh	r2, [r3, #2]
    	if (dll.comm.redundants != 0) {
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <dll_rfevt_brx+0x78>)
 80067d4:	232f      	movs	r3, #47	; 0x2f
 80067d6:	5cd3      	ldrb	r3, [r2, r3]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10f      	bne.n	80067fc <dll_rfevt_brx+0x40>
    session_pop();
 80067dc:	f001 f950 	bl	8007a80 <session_pop>
    dll_idle();
 80067e0:	f7ff ffc6 	bl	8006770 <dll_idle>
    DLL_SIG_RFTERMINATE(3, scode);
 80067e4:	0021      	movs	r1, r4
 80067e6:	2003      	movs	r0, #3
 80067e8:	f7fb f89c 	bl	8001924 <dll_sig_rfterminate>
    sys.task_RFA.event = 0;
 80067ec:	4812      	ldr	r0, [pc, #72]	; (8006838 <dll_rfevt_brx+0x7c>)
 80067ee:	2300      	movs	r3, #0
 80067f0:	7103      	strb	r3, [r0, #4]
    sys_preempt(&sys.task_RFA, 0);
 80067f2:	3004      	adds	r0, #4
 80067f4:	2100      	movs	r1, #0
 80067f6:	f002 ff27 	bl	8009648 <sys_preempt>
}
 80067fa:	bd10      	pop	{r4, pc}
    		rm2_reenter_rx(&dll_rfevt_brx);   //non-blocking
 80067fc:	480f      	ldr	r0, [pc, #60]	; (800683c <dll_rfevt_brx+0x80>)
 80067fe:	f7fc f8c3 	bl	8002988 <rm2_reenter_rx>
    		return;
 8006802:	e7fa      	b.n	80067fa <dll_rfevt_brx+0x3e>
    if (scode < 0) {
 8006804:	2800      	cmp	r0, #0
 8006806:	da05      	bge.n	8006814 <dll_rfevt_brx+0x58>
        __DEBUG_ERRCODE_EVAL(=102);
 8006808:	4b09      	ldr	r3, [pc, #36]	; (8006830 <dll_rfevt_brx+0x74>)
 800680a:	2266      	movs	r2, #102	; 0x66
 800680c:	805a      	strh	r2, [r3, #2]
        scode = RM2_ERR_GENERIC;
 800680e:	2406      	movs	r4, #6
 8006810:	4264      	negs	r4, r4
    	goto dll_rfevt_FAILURE;
 8006812:	e7e3      	b.n	80067dc <dll_rfevt_brx+0x20>
    if (rm2_mac_filter()) {
 8006814:	f000 ff72 	bl	80076fc <rm2_mac_filter>
 8006818:	2800      	cmp	r0, #0
 800681a:	d0df      	beq.n	80067dc <dll_rfevt_brx+0x20>
        __DEBUG_ERRCODE_EVAL(=103);
 800681c:	4b04      	ldr	r3, [pc, #16]	; (8006830 <dll_rfevt_brx+0x74>)
 800681e:	2200      	movs	r2, #0
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	3267      	adds	r2, #103	; 0x67
 8006824:	805a      	strh	r2, [r3, #2]
        if (network_parse_bf()) {
 8006826:	f000 ff55 	bl	80076d4 <network_parse_bf>
 800682a:	2800      	cmp	r0, #0
 800682c:	d1da      	bne.n	80067e4 <dll_rfevt_brx+0x28>
    dll_rfevt_FAILURE:
 800682e:	e7d5      	b.n	80067dc <dll_rfevt_brx+0x20>
 8006830:	20002e6c 	.word	0x20002e6c
 8006834:	200026d4 	.word	0x200026d4
 8006838:	20002e1c 	.word	0x20002e1c
 800683c:	080067bd 	.word	0x080067bd

08006840 <dll_rfevt_frx>:
OT_WEAK void dll_rfevt_frx(ot_int pcode, ot_int fcode) {
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	0005      	movs	r5, r0
 8006844:	000c      	movs	r4, r1
    m2session*  active  = session_top();
 8006846:	f001 f927 	bl	8007a98 <session_top>
 800684a:	0006      	movs	r6, r0
    __DEBUG_ERRCODE_EVAL(=110);
 800684c:	4b39      	ldr	r3, [pc, #228]	; (8006934 <dll_rfevt_frx+0xf4>)
 800684e:	2200      	movs	r2, #0
 8006850:	801a      	strh	r2, [r3, #0]
    if (pcode < 0) {
 8006852:	2d00      	cmp	r5, #0
 8006854:	db1f      	blt.n	8006896 <dll_rfevt_frx+0x56>
        __DEBUG_ERRCODE_EVAL(=113);
 8006856:	4b37      	ldr	r3, [pc, #220]	; (8006934 <dll_rfevt_frx+0xf4>)
 8006858:	2271      	movs	r2, #113	; 0x71
 800685a:	805a      	strh	r2, [r3, #2]
    	if (fcode != 0) {
 800685c:	2c00      	cmp	r4, #0
 800685e:	d03e      	beq.n	80068de <dll_rfevt_frx+0x9e>
    		frx_code = -1;
 8006860:	2401      	movs	r4, #1
 8006862:	4264      	negs	r4, r4
        if (pcode == 0) {
 8006864:	2d00      	cmp	r5, #0
 8006866:	d14d      	bne.n	8006904 <dll_rfevt_frx+0xc4>
            ot_bool rx_isresp = (active->netstate & M2_NETSTATE_RESP);
 8006868:	79f2      	ldrb	r2, [r6, #7]
 800686a:	2310      	movs	r3, #16
 800686c:	4013      	ands	r3, r2
            if (frx_code == 0) {
 800686e:	2c00      	cmp	r4, #0
 8006870:	d104      	bne.n	800687c <dll_rfevt_frx+0x3c>
                sys.task_RFA.reserve = 20;  ///@todo Could have quick evaluator here
 8006872:	4a31      	ldr	r2, [pc, #196]	; (8006938 <dll_rfevt_frx+0xf8>)
 8006874:	2114      	movs	r1, #20
 8006876:	7191      	strb	r1, [r2, #6]
                sys.task_RFA.event   = 1;   ///Process the packet!!!
 8006878:	3913      	subs	r1, #19
 800687a:	7111      	strb	r1, [r2, #4]
            if (rx_isresp) {
 800687c:	2b00      	cmp	r3, #0
 800687e:	d004      	beq.n	800688a <dll_rfevt_frx+0x4a>
                dll.counter     = dll.netconf.hold_limit;
 8006880:	4a2e      	ldr	r2, [pc, #184]	; (800693c <dll_rfevt_frx+0xfc>)
 8006882:	8bd1      	ldrh	r1, [r2, #30]
 8006884:	8051      	strh	r1, [r2, #2]
                dll.idle_state  = M2_DLLIDLE_HOLD;
 8006886:	2102      	movs	r1, #2
 8006888:	7011      	strb	r1, [r2, #0]
            re_init = (frx_code || rx_isresp);
 800688a:	2c00      	cmp	r4, #0
 800688c:	d12e      	bne.n	80068ec <dll_rfevt_frx+0xac>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d033      	beq.n	80068fa <dll_rfevt_frx+0xba>
 8006892:	2501      	movs	r5, #1
 8006894:	e02b      	b.n	80068ee <dll_rfevt_frx+0xae>
        __DEBUG_ERRCODE_EVAL(=111);
 8006896:	326f      	adds	r2, #111	; 0x6f
 8006898:	805a      	strh	r2, [r3, #2]
        sys.task_RFA.event  = 0;
 800689a:	4b27      	ldr	r3, [pc, #156]	; (8006938 <dll_rfevt_frx+0xf8>)
 800689c:	2200      	movs	r2, #0
 800689e:	711a      	strb	r2, [r3, #4]
        if (dll.comm.redundants) {
 80068a0:	4a26      	ldr	r2, [pc, #152]	; (800693c <dll_rfevt_frx+0xfc>)
 80068a2:	232f      	movs	r3, #47	; 0x2f
 80068a4:	5cd3      	ldrb	r3, [r2, r3]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d004      	beq.n	80068b4 <dll_rfevt_frx+0x74>
            active->netstate   = (M2_NETSTATE_REQTX | M2_NETSTATE_INIT | M2_NETFLAG_FIRSTRX);
 80068aa:	230a      	movs	r3, #10
 80068ac:	71c3      	strb	r3, [r0, #7]
    ot_bool     re_init = False;
 80068ae:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 80068b0:	2400      	movs	r4, #0
 80068b2:	e028      	b.n	8006906 <dll_rfevt_frx+0xc6>
        else if (((active->netstate & M2_NETSTATE_TMASK) == M2_NETSTATE_RESPRX) \
 80068b4:	79c2      	ldrb	r2, [r0, #7]
 80068b6:	2370      	movs	r3, #112	; 0x70
 80068b8:	4013      	ands	r3, r2
 80068ba:	2b30      	cmp	r3, #48	; 0x30
 80068bc:	d108      	bne.n	80068d0 <dll_rfevt_frx+0x90>
               && (active->applet != NULL)) {
 80068be:	6803      	ldr	r3, [r0, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <dll_rfevt_frx+0x90>
            active->netstate  &= ~M2_NETSTATE_TMASK;   // Default to Request-TX
 80068c4:	2370      	movs	r3, #112	; 0x70
 80068c6:	439a      	bics	r2, r3
 80068c8:	71c2      	strb	r2, [r0, #7]
    ot_bool     re_init = False;
 80068ca:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 80068cc:	2400      	movs	r4, #0
            active->netstate  &= ~M2_NETSTATE_TMASK;   // Default to Request-TX
 80068ce:	e01a      	b.n	8006906 <dll_rfevt_frx+0xc6>
            session_pop();
 80068d0:	f001 f8d6 	bl	8007a80 <session_pop>
            dll_idle();
 80068d4:	f7ff ff4c 	bl	8006770 <dll_idle>
    ot_bool     re_init = False;
 80068d8:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 80068da:	2400      	movs	r4, #0
 80068dc:	e013      	b.n	8006906 <dll_rfevt_frx+0xc6>
        else if (rm2_mac_filter() == False) {
 80068de:	f000 ff0d 	bl	80076fc <rm2_mac_filter>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d1be      	bne.n	8006864 <dll_rfevt_frx+0x24>
            frx_code = -4;
 80068e6:	2404      	movs	r4, #4
 80068e8:	4264      	negs	r4, r4
 80068ea:	e7bb      	b.n	8006864 <dll_rfevt_frx+0x24>
            re_init = (frx_code || rx_isresp);
 80068ec:	2501      	movs	r5, #1
            if (re_init) {
 80068ee:	2d00      	cmp	r5, #0
 80068f0:	d005      	beq.n	80068fe <dll_rfevt_frx+0xbe>
                rm2_reenter_rx(&dll_rfevt_frx);
 80068f2:	4813      	ldr	r0, [pc, #76]	; (8006940 <dll_rfevt_frx+0x100>)
 80068f4:	f7fc f848 	bl	8002988 <rm2_reenter_rx>
 80068f8:	e005      	b.n	8006906 <dll_rfevt_frx+0xc6>
            re_init = (frx_code || rx_isresp);
 80068fa:	2500      	movs	r5, #0
 80068fc:	e7f7      	b.n	80068ee <dll_rfevt_frx+0xae>
                radio_sleep();
 80068fe:	f7fb ffc9 	bl	8002894 <radio_sleep>
 8006902:	e000      	b.n	8006906 <dll_rfevt_frx+0xc6>
    ot_bool     re_init = False;
 8006904:	2500      	movs	r5, #0
    DLL_SIG_RFTERMINATE(3, frx_code);
 8006906:	0021      	movs	r1, r4
 8006908:	2003      	movs	r0, #3
 800690a:	f7fb f80b 	bl	8001924 <dll_sig_rfterminate>
    if (re_init) {
 800690e:	2d00      	cmp	r5, #0
 8006910:	d102      	bne.n	8006918 <dll_rfevt_frx+0xd8>
    if (frx_code == 0) {
 8006912:	2c00      	cmp	r4, #0
 8006914:	d009      	beq.n	800692a <dll_rfevt_frx+0xea>
}
 8006916:	bd70      	pop	{r4, r5, r6, pc}
        __DEBUG_ERRCODE_EVAL(=114);
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <dll_rfevt_frx+0xf4>)
 800691a:	2200      	movs	r2, #0
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	3272      	adds	r2, #114	; 0x72
 8006920:	805a      	strh	r2, [r3, #2]
        DLL_SIG_RFINIT(3);
 8006922:	2003      	movs	r0, #3
 8006924:	f7fa fff0 	bl	8001908 <dll_sig_rfinit>
 8006928:	e7f3      	b.n	8006912 <dll_rfevt_frx+0xd2>
        sys_preempt(&sys.task_RFA, 0);
 800692a:	2100      	movs	r1, #0
 800692c:	4805      	ldr	r0, [pc, #20]	; (8006944 <dll_rfevt_frx+0x104>)
 800692e:	f002 fe8b 	bl	8009648 <sys_preempt>
}
 8006932:	e7f0      	b.n	8006916 <dll_rfevt_frx+0xd6>
 8006934:	20002e6c 	.word	0x20002e6c
 8006938:	20002e1c 	.word	0x20002e1c
 800693c:	200026d4 	.word	0x200026d4
 8006940:	08006841 	.word	0x08006841
 8006944:	20002e20 	.word	0x20002e20

08006948 <dll_rfevt_txcsma>:
OT_WEAK void dll_rfevt_txcsma(ot_int pcode, ot_int tcode) {
 8006948:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=120);
 800694a:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <dll_rfevt_txcsma+0x98>)
 800694c:	2200      	movs	r2, #0
 800694e:	801a      	strh	r2, [r3, #0]
    if (pcode == 0) {
 8006950:	2800      	cmp	r0, #0
 8006952:	d120      	bne.n	8006996 <dll_rfevt_txcsma+0x4e>
        __DEBUG_ERRCODE_EVAL(=121);
 8006954:	3279      	adds	r2, #121	; 0x79
 8006956:	805a      	strh	r2, [r3, #2]
        sys.task_RFA.latency    = 0;
 8006958:	4b22      	ldr	r3, [pc, #136]	; (80069e4 <dll_rfevt_txcsma+0x9c>)
 800695a:	2200      	movs	r2, #0
 800695c:	71da      	strb	r2, [r3, #7]
        sys.task_RFA.event      = 5;
 800695e:	3205      	adds	r2, #5
 8006960:	711a      	strb	r2, [r3, #4]
        radio.evtdone   = (tcode & 1) ? &dll_rfevt_btx : &dll_rfevt_ftx;
 8006962:	b289      	uxth	r1, r1
 8006964:	07cb      	lsls	r3, r1, #31
 8006966:	d50f      	bpl.n	8006988 <dll_rfevt_txcsma+0x40>
 8006968:	4a1f      	ldr	r2, [pc, #124]	; (80069e8 <dll_rfevt_txcsma+0xa0>)
 800696a:	4b20      	ldr	r3, [pc, #128]	; (80069ec <dll_rfevt_txcsma+0xa4>)
 800696c:	609a      	str	r2, [r3, #8]
        event_ticks     = (tcode & 2) ? dll.counter+20 : (ot_uint)(rm2_pkt_duration(&txq));
 800696e:	078b      	lsls	r3, r1, #30
 8006970:	d50c      	bpl.n	800698c <dll_rfevt_txcsma+0x44>
 8006972:	4b1f      	ldr	r3, [pc, #124]	; (80069f0 <dll_rfevt_txcsma+0xa8>)
 8006974:	885c      	ldrh	r4, [r3, #2]
 8006976:	3414      	adds	r4, #20
 8006978:	b2a4      	uxth	r4, r4
        radio_idle();
 800697a:	f7fb ff93 	bl	80028a4 <radio_idle>
    sys_preempt(&sys.task_RFA, event_ticks);
 800697e:	0021      	movs	r1, r4
 8006980:	481c      	ldr	r0, [pc, #112]	; (80069f4 <dll_rfevt_txcsma+0xac>)
 8006982:	f002 fe61 	bl	8009648 <sys_preempt>
}
 8006986:	bd10      	pop	{r4, pc}
        radio.evtdone   = (tcode & 1) ? &dll_rfevt_btx : &dll_rfevt_ftx;
 8006988:	4a1b      	ldr	r2, [pc, #108]	; (80069f8 <dll_rfevt_txcsma+0xb0>)
 800698a:	e7ee      	b.n	800696a <dll_rfevt_txcsma+0x22>
        event_ticks     = (tcode & 2) ? dll.counter+20 : (ot_uint)(rm2_pkt_duration(&txq));
 800698c:	481b      	ldr	r0, [pc, #108]	; (80069fc <dll_rfevt_txcsma+0xb4>)
 800698e:	f7fc f9cd 	bl	8002d2c <rm2_pkt_duration>
 8006992:	0004      	movs	r4, r0
 8006994:	e7f1      	b.n	800697a <dll_rfevt_txcsma+0x32>
    else if (pcode > 0) {
 8006996:	2800      	cmp	r0, #0
 8006998:	dd10      	ble.n	80069bc <dll_rfevt_txcsma+0x74>
        __DEBUG_ERRCODE_EVAL(=122);
 800699a:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <dll_rfevt_txcsma+0x98>)
 800699c:	227a      	movs	r2, #122	; 0x7a
 800699e:	805a      	strh	r2, [r3, #2]
        nextcsma = (ot_uint)sub_fcloop();
 80069a0:	f7ff fe7a 	bl	8006698 <sub_fcloop>
 80069a4:	0004      	movs	r4, r0
        if (nextcsma < 2) 
 80069a6:	2801      	cmp	r0, #1
 80069a8:	d905      	bls.n	80069b6 <dll_rfevt_txcsma+0x6e>
            radio_sleep();
 80069aa:	f7fb ff73 	bl	8002894 <radio_sleep>
        radio_set_mactimer( nextcsma );
 80069ae:	0020      	movs	r0, r4
 80069b0:	f7fb fcec 	bl	800238c <radio_set_mactimer>
        return;
 80069b4:	e7e7      	b.n	8006986 <dll_rfevt_txcsma+0x3e>
            radio_idle();
 80069b6:	f7fb ff75 	bl	80028a4 <radio_idle>
 80069ba:	e7f8      	b.n	80069ae <dll_rfevt_txcsma+0x66>
        __DEBUG_ERRCODE_EVAL(=123);
 80069bc:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <dll_rfevt_txcsma+0x98>)
 80069be:	227b      	movs	r2, #123	; 0x7b
 80069c0:	805a      	strh	r2, [r3, #2]
        DLL_SIG_RFTERMINATE(sys.task_RFA.event, pcode);
 80069c2:	4c08      	ldr	r4, [pc, #32]	; (80069e4 <dll_rfevt_txcsma+0x9c>)
 80069c4:	7923      	ldrb	r3, [r4, #4]
 80069c6:	0001      	movs	r1, r0
 80069c8:	0018      	movs	r0, r3
 80069ca:	f7fa ffab 	bl	8001924 <dll_sig_rfterminate>
        session_pop();
 80069ce:	f001 f857 	bl	8007a80 <session_pop>
        dll_idle();
 80069d2:	f7ff fecd 	bl	8006770 <dll_idle>
        sys.task_RFA.event  = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	7123      	strb	r3, [r4, #4]
        event_ticks         = 0;
 80069da:	2400      	movs	r4, #0
 80069dc:	e7cf      	b.n	800697e <dll_rfevt_txcsma+0x36>
 80069de:	46c0      	nop			; (mov r8, r8)
 80069e0:	20002e6c 	.word	0x20002e6c
 80069e4:	20002e1c 	.word	0x20002e1c
 80069e8:	08006de1 	.word	0x08006de1
 80069ec:	20002744 	.word	0x20002744
 80069f0:	200026d4 	.word	0x200026d4
 80069f4:	20002e20 	.word	0x20002e20
 80069f8:	08006a01 	.word	0x08006a01
 80069fc:	20002df4 	.word	0x20002df4

08006a00 <dll_rfevt_ftx>:
OT_WEAK void dll_rfevt_ftx(ot_int pcode, ot_int scratch) {
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=140);
 8006a04:	4b20      	ldr	r3, [pc, #128]	; (8006a88 <dll_rfevt_ftx+0x88>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	801a      	strh	r2, [r3, #0]
 8006a0a:	328c      	adds	r2, #140	; 0x8c
 8006a0c:	805a      	strh	r2, [r3, #2]
    if (pcode == 1) {
 8006a0e:	2801      	cmp	r0, #1
 8006a10:	d02d      	beq.n	8006a6e <dll_rfevt_ftx+0x6e>
        __DEBUG_ERRCODE_EVAL(=141);
 8006a12:	3201      	adds	r2, #1
 8006a14:	805a      	strh	r2, [r3, #2]
        active = session_top();
 8006a16:	f001 f83f 	bl	8007a98 <session_top>
        scratch = ((active->netstate & M2_NETSTATE_RESPTX) \
 8006a1a:	79c3      	ldrb	r3, [r0, #7]
        		|| (dll.comm.rx_timeout <= 0));
 8006a1c:	06db      	lsls	r3, r3, #27
 8006a1e:	d407      	bmi.n	8006a30 <dll_rfevt_ftx+0x30>
 8006a20:	4b1a      	ldr	r3, [pc, #104]	; (8006a8c <dll_rfevt_ftx+0x8c>)
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	dd01      	ble.n	8006a2c <dll_rfevt_ftx+0x2c>
 8006a28:	2200      	movs	r2, #0
 8006a2a:	e002      	b.n	8006a32 <dll_rfevt_ftx+0x32>
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	e000      	b.n	8006a32 <dll_rfevt_ftx+0x32>
 8006a30:	2201      	movs	r2, #1
        scratch = ((active->netstate & M2_NETSTATE_RESPTX) \
 8006a32:	b212      	sxth	r2, r2
        dll.comm.redundants--;
 8006a34:	4d15      	ldr	r5, [pc, #84]	; (8006a8c <dll_rfevt_ftx+0x8c>)
 8006a36:	212f      	movs	r1, #47	; 0x2f
 8006a38:	5c6b      	ldrb	r3, [r5, r1]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	546b      	strb	r3, [r5, r1]
        if ((dll.comm.redundants != 0) && scratch) {
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <dll_rfevt_ftx+0x48>
 8006a44:	2a00      	cmp	r2, #0
 8006a46:	d113      	bne.n	8006a70 <dll_rfevt_ftx+0x70>
        if (scratch || pcode) {
 8006a48:	4322      	orrs	r2, r4
 8006a4a:	d118      	bne.n	8006a7e <dll_rfevt_ftx+0x7e>
            active->netstate  &= ~M2_NETSTATE_TMASK;
 8006a4c:	79c3      	ldrb	r3, [r0, #7]
 8006a4e:	2270      	movs	r2, #112	; 0x70
 8006a50:	4393      	bics	r3, r2
            active->netstate  |= M2_NETSTATE_RESPRX;
 8006a52:	2230      	movs	r2, #48	; 0x30
 8006a54:	4313      	orrs	r3, r2
 8006a56:	71c3      	strb	r3, [r0, #7]
        DLL_SIG_RFTERMINATE(sys.task_RFA.event, pcode);
 8006a58:	4d0d      	ldr	r5, [pc, #52]	; (8006a90 <dll_rfevt_ftx+0x90>)
 8006a5a:	7928      	ldrb	r0, [r5, #4]
 8006a5c:	0021      	movs	r1, r4
 8006a5e:	f7fa ff61 	bl	8001924 <dll_sig_rfterminate>
        sys.task_RFA.event = 0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	712b      	strb	r3, [r5, #4]
        sys_preempt(&sys.task_RFA, 0);
 8006a66:	1d28      	adds	r0, r5, #4
 8006a68:	2100      	movs	r1, #0
 8006a6a:	f002 fded 	bl	8009648 <sys_preempt>
}
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
            dll.comm.csmaca_params = (M2_CSMACA_NOCSMA | M2_CSMACA_MACCA);
 8006a70:	232e      	movs	r3, #46	; 0x2e
 8006a72:	310d      	adds	r1, #13
 8006a74:	54e9      	strb	r1, [r5, r3]
            rm2_resend( (ot_sig2)&dll_rfevt_txcsma );
 8006a76:	4807      	ldr	r0, [pc, #28]	; (8006a94 <dll_rfevt_ftx+0x94>)
 8006a78:	f7fb fd80 	bl	800257c <rm2_resend>
            return;
 8006a7c:	e7f7      	b.n	8006a6e <dll_rfevt_ftx+0x6e>
            session_pop();
 8006a7e:	f000 ffff 	bl	8007a80 <session_pop>
            dll_idle();
 8006a82:	f7ff fe75 	bl	8006770 <dll_idle>
 8006a86:	e7e7      	b.n	8006a58 <dll_rfevt_ftx+0x58>
 8006a88:	20002e6c 	.word	0x20002e6c
 8006a8c:	200026d4 	.word	0x200026d4
 8006a90:	20002e1c 	.word	0x20002e1c
 8006a94:	08006949 	.word	0x08006949

08006a98 <dll_block>:
	sys.task_RFA.latency = 0;
 8006a98:	4b01      	ldr	r3, [pc, #4]	; (8006aa0 <dll_block+0x8>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	71da      	strb	r2, [r3, #7]
}
 8006a9e:	4770      	bx	lr
 8006aa0:	20002e1c 	.word	0x20002e1c

08006aa4 <dll_unblock>:
	sys.task_RFA.latency = _REQRX_LATENCY;
 8006aa4:	4b01      	ldr	r3, [pc, #4]	; (8006aac <dll_unblock+0x8>)
 8006aa6:	2228      	movs	r2, #40	; 0x28
 8006aa8:	71da      	strb	r2, [r3, #7]
}
 8006aaa:	4770      	bx	lr
 8006aac:	20002e1c 	.word	0x20002e1c

08006ab0 <dll_clock>:
OT_WEAK void dll_clock(ot_uint clocks) {
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	0004      	movs	r4, r0
    if (sys.task_RFA.event != 0) {
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <dll_clock+0x34>)
 8006ab6:	791b      	ldrb	r3, [r3, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d004      	beq.n	8006ac6 <dll_clock+0x16>
    	dll.comm.rx_timeout -= CLK2TI(clocks);
 8006abc:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <dll_clock+0x38>)
 8006abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ac0:	1a14      	subs	r4, r2, r0
 8006ac2:	629c      	str	r4, [r3, #40]	; 0x28
}
 8006ac4:	bd70      	pop	{r4, r5, r6, pc}
    else if (session_notempty()) {
 8006ac6:	f001 f81b 	bl	8007b00 <session_notempty>
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d0fa      	beq.n	8006ac4 <dll_clock+0x14>
        sys.task_RFA.event      = 2;
 8006ace:	4d05      	ldr	r5, [pc, #20]	; (8006ae4 <dll_clock+0x34>)
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	712b      	strb	r3, [r5, #4]
        sys.task_RFA.nextevent  = clocks + TI2CLK(session_getnext());
 8006ad4:	f000 ff3c 	bl	8007950 <session_getnext>
 8006ad8:	1820      	adds	r0, r4, r0
 8006ada:	60a8      	str	r0, [r5, #8]
        dll_block_idletasks();
 8006adc:	f7ff fe20 	bl	8006720 <dll_block_idletasks>
}
 8006ae0:	e7f0      	b.n	8006ac4 <dll_clock+0x14>
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	20002e1c 	.word	0x20002e1c
 8006ae8:	200026d4 	.word	0x200026d4

08006aec <dll_processing>:
void dll_processing(void) {
 8006aec:	b570      	push	{r4, r5, r6, lr}
    sys.task_RFA.event  = 0;                // Only run processing once
 8006aee:	2500      	movs	r5, #0
 8006af0:	4b13      	ldr	r3, [pc, #76]	; (8006b40 <dll_processing+0x54>)
 8006af2:	711d      	strb	r5, [r3, #4]
    active              = session_top();
 8006af4:	f000 ffd0 	bl	8007a98 <session_top>
 8006af8:	0004      	movs	r4, r0
    active->counter     = 0;
 8006afa:	8085      	strh	r5, [r0, #4]
    proc_score          = network_route_ff(active);
 8006afc:	f000 fcc0 	bl	8007480 <network_route_ff>
    if (proc_score >= 0) {
 8006b00:	2800      	cmp	r0, #0
 8006b02:	db19      	blt.n	8006b38 <dll_processing+0x4c>
        sys.task_HSS.cursor = 0;
 8006b04:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <dll_processing+0x54>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	755a      	strb	r2, [r3, #21]
        dll.counter         = dll.netconf.hold_limit;
 8006b0a:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <dll_processing+0x58>)
 8006b0c:	8bda      	ldrh	r2, [r3, #30]
 8006b0e:	805a      	strh	r2, [r3, #2]
        dll.idle_state      = M2_DLLIDLE_HOLD;
 8006b10:	2202      	movs	r2, #2
 8006b12:	701a      	strb	r2, [r3, #0]
        if (active->flags & M2_FLAG_LISTEN) {
 8006b14:	230b      	movs	r3, #11
 8006b16:	56e3      	ldrsb	r3, [r4, r3]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	db07      	blt.n	8006b2c <dll_processing+0x40>
    if (active->netstate & M2_NETSTATE_SCRAP) {
 8006b1c:	79e3      	ldrb	r3, [r4, #7]
 8006b1e:	075b      	lsls	r3, r3, #29
 8006b20:	d503      	bpl.n	8006b2a <dll_processing+0x3e>
        session_pop();
 8006b22:	f000 ffad 	bl	8007a80 <session_pop>
        dll_idle();
 8006b26:	f7ff fe23 	bl	8006770 <dll_idle>
}
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
            session_continue(active->applet, M2_NETSTATE_REQRX, 0);
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2120      	movs	r1, #32
 8006b30:	6820      	ldr	r0, [r4, #0]
 8006b32:	f000 ffb7 	bl	8007aa4 <session_continue>
 8006b36:	e7f1      	b.n	8006b1c <dll_processing+0x30>
    else if ((active->netstate & M2_NETSTATE_RESP) == 0) {
 8006b38:	79e3      	ldrb	r3, [r4, #7]
 8006b3a:	06db      	lsls	r3, r3, #27
 8006b3c:	d5f1      	bpl.n	8006b22 <dll_processing+0x36>
 8006b3e:	e7ed      	b.n	8006b1c <dll_processing+0x30>
 8006b40:	20002e1c 	.word	0x20002e1c
 8006b44:	200026d4 	.word	0x200026d4

08006b48 <dll_systask_sleepscan>:
OT_WEAK void dll_systask_sleepscan(ot_task task) {
 8006b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b4a:	46c6      	mov	lr, r8
 8006b4c:	b500      	push	{lr}
 8006b4e:	0004      	movs	r4, r0
    if (task->event == 0) {
 8006b50:	7800      	ldrb	r0, [r0, #0]
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d102      	bne.n	8006b5c <dll_systask_sleepscan+0x14>
}
 8006b56:	bc04      	pop	{r2}
 8006b58:	4690      	mov	r8, r2
 8006b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fp = ISF_open_su( task->event );
 8006b5c:	f002 fc3d 	bl	80093da <ISF_open_su>
 8006b60:	0007      	movs	r7, r0
    scratch.ushort  = PLATFORM_ENDIAN16( vl_read(fp, task->cursor) );
 8006b62:	7861      	ldrb	r1, [r4, #1]
 8006b64:	f002 fb82 	bl	800926c <vl_read>
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8006b68:	ba40      	rev16	r0, r0
 8006b6a:	b280      	uxth	r0, r0
 8006b6c:	0a03      	lsrs	r3, r0, #8
 8006b6e:	4698      	mov	r8, r3
    sys_task_setnext(task, (ot_u32)otutils_calc_longtimeout(scratch.ushort));
 8006b70:	f002 f941 	bl	8008df6 <otutils_calc_longtimeout>
 8006b74:	0001      	movs	r1, r0
 8006b76:	0020      	movs	r0, r4
 8006b78:	f002 fcf6 	bl	8009568 <sys_task_setnext>
    task->cursor   += 2;
 8006b7c:	7861      	ldrb	r1, [r4, #1]
 8006b7e:	3102      	adds	r1, #2
 8006b80:	b2c9      	uxtb	r1, r1
 8006b82:	7061      	strb	r1, [r4, #1]
    scratch.ushort  = vl_read(fp, task->cursor);
 8006b84:	b289      	uxth	r1, r1
 8006b86:	0038      	movs	r0, r7
 8006b88:	f002 fb70 	bl	800926c <vl_read>
 8006b8c:	b2c6      	uxtb	r6, r0
 8006b8e:	0400      	lsls	r0, r0, #16
 8006b90:	0e05      	lsrs	r5, r0, #24
    task->cursor   += 2;
 8006b92:	7863      	ldrb	r3, [r4, #1]
 8006b94:	3302      	adds	r3, #2
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	7063      	strb	r3, [r4, #1]
    task->cursor    = (task->cursor >= fp->length) ? 0 : task->cursor;
 8006b9a:	b299      	uxth	r1, r3
 8006b9c:	893a      	ldrh	r2, [r7, #8]
 8006b9e:	4291      	cmp	r1, r2
 8006ba0:	d216      	bcs.n	8006bd0 <dll_systask_sleepscan+0x88>
 8006ba2:	7063      	strb	r3, [r4, #1]
    vl_close(fp);
 8006ba4:	0038      	movs	r0, r7
 8006ba6:	f002 fbe3 	bl	8009370 <vl_close>
    	s_type          = (s_type >> 1) | (s_code & 0x80);
 8006baa:	237f      	movs	r3, #127	; 0x7f
 8006bac:	002a      	movs	r2, r5
 8006bae:	439a      	bics	r2, r3
 8006bb0:	b253      	sxtb	r3, r2
 8006bb2:	4642      	mov	r2, r8
 8006bb4:	0851      	lsrs	r1, r2, #1
 8006bb6:	2240      	movs	r2, #64	; 0x40
 8006bb8:	400a      	ands	r2, r1
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	b2db      	uxtb	r3, r3
    	netstate        = s_type | (M2_NETSTATE_REQRX | M2_NETSTATE_INIT);
 8006bbe:	2228      	movs	r2, #40	; 0x28
 8006bc0:	4313      	orrs	r3, r2
		s_new           = session_new(&dll_scan_applet, 0, s_channel, netstate);
 8006bc2:	0032      	movs	r2, r6
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4803      	ldr	r0, [pc, #12]	; (8006bd4 <dll_systask_sleepscan+0x8c>)
 8006bc8:	f000 feca 	bl	8007960 <session_new>
		s_new->extra    = s_code;
 8006bcc:	7205      	strb	r5, [r0, #8]
 8006bce:	e7c2      	b.n	8006b56 <dll_systask_sleepscan+0xe>
    task->cursor    = (task->cursor >= fp->length) ? 0 : task->cursor;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e7e6      	b.n	8006ba2 <dll_systask_sleepscan+0x5a>
 8006bd4:	08006ec5 	.word	0x08006ec5

08006bd8 <dll_systask_beacon>:
OT_WEAK void dll_systask_beacon(ot_task task) {
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	0004      	movs	r4, r0
    if ((task->event == 0) || (dll.netconf.b_attempts == 0)) {
 8006bdc:	7803      	ldrb	r3, [r0, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d03b      	beq.n	8006c5a <dll_systask_beacon+0x82>
 8006be2:	4b22      	ldr	r3, [pc, #136]	; (8006c6c <dll_systask_beacon+0x94>)
 8006be4:	7f5b      	ldrb	r3, [r3, #29]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d037      	beq.n	8006c5a <dll_systask_beacon+0x82>
    if (dll.netconf.dd_flags == 0) {
 8006bea:	4b20      	ldr	r3, [pc, #128]	; (8006c6c <dll_systask_beacon+0x94>)
 8006bec:	7f1b      	ldrb	r3, [r3, #28]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d11e      	bne.n	8006c30 <dll_systask_beacon+0x58>
        fp = ISF_open_su( ISF_ID(beacon_transmit_sequence) );
 8006bf2:	2006      	movs	r0, #6
 8006bf4:	f002 fbf1 	bl	80093da <ISF_open_su>
 8006bf8:	1e05      	subs	r5, r0, #0
        if (fp == NULL) {
 8006bfa:	d035      	beq.n	8006c68 <dll_systask_beacon+0x90>
        if (fp->length == 0)    {
 8006bfc:	8903      	ldrh	r3, [r0, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d02e      	beq.n	8006c60 <dll_systask_beacon+0x88>
        scratch     = fp->start;
 8006c02:	8846      	ldrh	r6, [r0, #2]
        fp->start  += task->cursor;
 8006c04:	7863      	ldrb	r3, [r4, #1]
 8006c06:	199b      	adds	r3, r3, r6
 8006c08:	8043      	strh	r3, [r0, #2]
        task->cursor += 8;
 8006c0a:	7863      	ldrb	r3, [r4, #1]
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	7063      	strb	r3, [r4, #1]
        if (task->cursor >= fp->length) {
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8902      	ldrh	r2, [r0, #8]
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d301      	bcc.n	8006c1e <dll_systask_beacon+0x46>
        	task->cursor = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	7063      	strb	r3, [r4, #1]
        vl_load(fp, 8, dll.netconf.btemp);
 8006c1e:	4a14      	ldr	r2, [pc, #80]	; (8006c70 <dll_systask_beacon+0x98>)
 8006c20:	2108      	movs	r1, #8
 8006c22:	0028      	movs	r0, r5
 8006c24:	f002 fb43 	bl	80092ae <vl_load>
        fp->start = scratch;
 8006c28:	806e      	strh	r6, [r5, #2]
        vl_close(fp);
 8006c2a:	0028      	movs	r0, r5
 8006c2c:	f002 fba0 	bl	8009370 <vl_close>
		b_session           = session_new(  &dll_beacon_applet, 0, dll.netconf.btemp[2], b_flags);
 8006c30:	4d0e      	ldr	r5, [pc, #56]	; (8006c6c <dll_systask_beacon+0x94>)
 8006c32:	7a2a      	ldrb	r2, [r5, #8]
 8006c34:	230a      	movs	r3, #10
 8006c36:	2100      	movs	r1, #0
 8006c38:	480e      	ldr	r0, [pc, #56]	; (8006c74 <dll_systask_beacon+0x9c>)
 8006c3a:	f000 fe91 	bl	8007960 <session_new>
		b_session->subnet   = dll.netconf.b_subnet;
 8006c3e:	7e6b      	ldrb	r3, [r5, #25]
 8006c40:	7283      	strb	r3, [r0, #10]
		b_session->extra    = dll.netconf.btemp[3];
 8006c42:	7a6b      	ldrb	r3, [r5, #9]
 8006c44:	7203      	strb	r3, [r0, #8]
    nextbeacon = otutils_calc_longtimeout( PLATFORM_ENDIAN16(*(ot_u16*)&dll.netconf.btemp[0]) );
 8006c46:	88e8      	ldrh	r0, [r5, #6]
 8006c48:	ba40      	rev16	r0, r0
 8006c4a:	b280      	uxth	r0, r0
 8006c4c:	f002 f8d3 	bl	8008df6 <otutils_calc_longtimeout>
 8006c50:	b281      	uxth	r1, r0
    sys_task_setnext(task, (ot_u32)nextbeacon);
 8006c52:	0020      	movs	r0, r4
 8006c54:	f002 fc88 	bl	8009568 <sys_task_setnext>
 8006c58:	e001      	b.n	8006c5e <dll_systask_beacon+0x86>
        dll_idle();
 8006c5a:	f7ff fd89 	bl	8006770 <dll_idle>
}
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
            vl_close(fp);
 8006c60:	f002 fb86 	bl	8009370 <vl_close>
    nextbeacon = 10;
 8006c64:	210a      	movs	r1, #10
            goto dll_systask_beacon_END;
 8006c66:	e7f4      	b.n	8006c52 <dll_systask_beacon+0x7a>
    nextbeacon = 10;
 8006c68:	210a      	movs	r1, #10
 8006c6a:	e7f2      	b.n	8006c52 <dll_systask_beacon+0x7a>
 8006c6c:	200026d4 	.word	0x200026d4
 8006c70:	200026da 	.word	0x200026da
 8006c74:	08006ef1 	.word	0x08006ef1

08006c78 <dll_init_rx>:
OT_WEAK void dll_init_rx(m2session* active) {
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	0004      	movs	r4, r0
    sys.task_RFA.event      = 3;
 8006c7c:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <dll_init_rx+0x54>)
 8006c7e:	2203      	movs	r2, #3
 8006c80:	711a      	strb	r2, [r3, #4]
    sys.task_RFA.latency    = (active->netstate & M2_NETSTATE_RESP) ? \
 8006c82:	79c3      	ldrb	r3, [r0, #7]
 8006c84:	06db      	lsls	r3, r3, #27
 8006c86:	d51c      	bpl.n	8006cc2 <dll_init_rx+0x4a>
 8006c88:	3a01      	subs	r2, #1
 8006c8a:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <dll_init_rx+0x54>)
 8006c8c:	71da      	strb	r2, [r3, #7]
    min_timeout = rm2_rxtimeout_floor(active->channel);
 8006c8e:	79a0      	ldrb	r0, [r4, #6]
 8006c90:	f7fc f81c 	bl	8002ccc <rm2_rxtimeout_floor>
    if (dll.comm.rx_timeout < min_timeout) {
 8006c94:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <dll_init_rx+0x58>)
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	4283      	cmp	r3, r0
 8006c9a:	da01      	bge.n	8006ca0 <dll_init_rx+0x28>
        dll.comm.rx_timeout = min_timeout;
 8006c9c:	4b0c      	ldr	r3, [pc, #48]	; (8006cd0 <dll_init_rx+0x58>)
 8006c9e:	6298      	str	r0, [r3, #40]	; 0x28
	sys_task_setnext(&sys.task[TASK_radio], (ot_u32)dll.comm.rx_timeout);
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <dll_init_rx+0x58>)
 8006ca2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006ca4:	4d0b      	ldr	r5, [pc, #44]	; (8006cd4 <dll_init_rx+0x5c>)
 8006ca6:	0028      	movs	r0, r5
 8006ca8:	f002 fc5e 	bl	8009568 <sys_task_setnext>
    DLL_SIG_RFINIT(sys.task_RFA.event);
 8006cac:	7828      	ldrb	r0, [r5, #0]
 8006cae:	f7fa fe2b 	bl	8001908 <dll_sig_rfinit>
    callback = (active->netstate & M2_NETFLAG_BG) ? &dll_rfevt_brx : &dll_rfevt_frx;
 8006cb2:	79e1      	ldrb	r1, [r4, #7]
 8006cb4:	064b      	lsls	r3, r1, #25
 8006cb6:	d406      	bmi.n	8006cc6 <dll_init_rx+0x4e>
 8006cb8:	4a07      	ldr	r2, [pc, #28]	; (8006cd8 <dll_init_rx+0x60>)
    rm2_rxinit(active->channel, active->netstate, callback);
 8006cba:	79a0      	ldrb	r0, [r4, #6]
 8006cbc:	f7fb fcf4 	bl	80026a8 <rm2_rxinit>
}
 8006cc0:	bd70      	pop	{r4, r5, r6, pc}
    sys.task_RFA.latency    = (active->netstate & M2_NETSTATE_RESP) ? \
 8006cc2:	2228      	movs	r2, #40	; 0x28
 8006cc4:	e7e1      	b.n	8006c8a <dll_init_rx+0x12>
    callback = (active->netstate & M2_NETFLAG_BG) ? &dll_rfevt_brx : &dll_rfevt_frx;
 8006cc6:	4a05      	ldr	r2, [pc, #20]	; (8006cdc <dll_init_rx+0x64>)
 8006cc8:	e7f7      	b.n	8006cba <dll_init_rx+0x42>
 8006cca:	46c0      	nop			; (mov r8, r8)
 8006ccc:	20002e1c 	.word	0x20002e1c
 8006cd0:	200026d4 	.word	0x200026d4
 8006cd4:	20002e20 	.word	0x20002e20
 8006cd8:	08006841 	.word	0x08006841
 8006cdc:	080067bd 	.word	0x080067bd

08006ce0 <dll_init_tx>:
OT_WEAK void dll_init_tx(m2session* active) {
 8006ce0:	b570      	push	{r4, r5, r6, lr}
 8006ce2:	0005      	movs	r5, r0
    sys_task_setnext(&sys.task[TASK_radio], (ot_u32)dll.comm.tc);
 8006ce4:	4e0f      	ldr	r6, [pc, #60]	; (8006d24 <dll_init_tx+0x44>)
 8006ce6:	4c10      	ldr	r4, [pc, #64]	; (8006d28 <dll_init_tx+0x48>)
 8006ce8:	6a31      	ldr	r1, [r6, #32]
 8006cea:	0020      	movs	r0, r4
 8006cec:	f002 fc3c 	bl	8009568 <sys_task_setnext>
    dll.comm.tca            = sub_fcinit();
 8006cf0:	f7ff fcf4 	bl	80066dc <sub_fcinit>
 8006cf4:	6270      	str	r0, [r6, #36]	; 0x24
    sys.task_RFA.latency    = 1;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	70e3      	strb	r3, [r4, #3]
    sys.task_RFA.event      = 4;
 8006cfa:	3303      	adds	r3, #3
 8006cfc:	7023      	strb	r3, [r4, #0]
    DLL_SIG_RFINIT(sys.task_RFA.event);
 8006cfe:	2004      	movs	r0, #4
 8006d00:	f7fa fe02 	bl	8001908 <dll_sig_rfinit>
    if (active->netstate & M2_NETFLAG_BG) {
 8006d04:	79eb      	ldrb	r3, [r5, #7]
 8006d06:	065a      	lsls	r2, r3, #25
 8006d08:	d502      	bpl.n	8006d10 <dll_init_tx+0x30>
    	if (active->netstate & M2_NETFLAG_STREAM) {
 8006d0a:	b25b      	sxtb	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	db04      	blt.n	8006d1a <dll_init_tx+0x3a>
    rm2_txinit(active->netstate, &dll_rfevt_txcsma);
 8006d10:	79e8      	ldrb	r0, [r5, #7]
 8006d12:	4906      	ldr	r1, [pc, #24]	; (8006d2c <dll_init_tx+0x4c>)
 8006d14:	f7fb fc0c 	bl	8002530 <rm2_txinit>
}
 8006d18:	bd70      	pop	{r4, r5, r6, pc}
    		m2advp_open(session_follower());
 8006d1a:	f000 ff0d 	bl	8007b38 <session_follower>
 8006d1e:	f000 fc75 	bl	800760c <m2advp_open>
 8006d22:	e7f5      	b.n	8006d10 <dll_init_tx+0x30>
 8006d24:	200026d4 	.word	0x200026d4
 8006d28:	20002e20 	.word	0x20002e20
 8006d2c:	08006949 	.word	0x08006949

08006d30 <dll_activate>:
OT_WEAK void dll_activate(void) {
 8006d30:	b510      	push	{r4, lr}
    s_active            = session_top();
 8006d32:	f000 feb1 	bl	8007a98 <session_top>
 8006d36:	0004      	movs	r4, r0
    s_applet            = (s_active->applet == NULL) ? \
 8006d38:	6803      	ldr	r3, [r0, #0]
                            &dll_response_applet : s_active->applet;
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00c      	beq.n	8006d58 <dll_activate+0x28>
    s_active->applet    = NULL;
 8006d3e:	2200      	movs	r2, #0
 8006d40:	6022      	str	r2, [r4, #0]
    s_applet(s_active);
 8006d42:	0020      	movs	r0, r4
 8006d44:	4798      	blx	r3
    if (s_active->netstate & M2_NETSTATE_SCRAP) {
 8006d46:	79e3      	ldrb	r3, [r4, #7]
 8006d48:	075a      	lsls	r2, r3, #29
 8006d4a:	d407      	bmi.n	8006d5c <dll_activate+0x2c>
    else if (s_active->netstate & M2_NETSTATE_RX) {
 8006d4c:	069b      	lsls	r3, r3, #26
 8006d4e:	d40a      	bmi.n	8006d66 <dll_activate+0x36>
        dll_init_tx(s_active);
 8006d50:	0020      	movs	r0, r4
 8006d52:	f7ff ffc5 	bl	8006ce0 <dll_init_tx>
}
 8006d56:	bd10      	pop	{r4, pc}
                            &dll_response_applet : s_active->applet;
 8006d58:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <dll_activate+0x40>)
 8006d5a:	e7f0      	b.n	8006d3e <dll_activate+0xe>
        session_pop();
 8006d5c:	f000 fe90 	bl	8007a80 <session_pop>
        dll_idle();
 8006d60:	f7ff fd06 	bl	8006770 <dll_idle>
 8006d64:	e7f7      	b.n	8006d56 <dll_activate+0x26>
        dll_init_rx(s_active);
 8006d66:	0020      	movs	r0, r4
 8006d68:	f7ff ff86 	bl	8006c78 <dll_init_rx>
 8006d6c:	e7f3      	b.n	8006d56 <dll_activate+0x26>
 8006d6e:	46c0      	nop			; (mov r8, r8)
 8006d70:	080065b1 	.word	0x080065b1

08006d74 <dll_scan_timeout>:
OT_WEAK void dll_scan_timeout(void) {
 8006d74:	b510      	push	{r4, lr}
    if ((radio.state != RADIO_DataRX) || (dll.comm.csmaca_params & M2_CSMACA_A2P)) {    ///@todo change to LISTEN
 8006d76:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <dll_scan_timeout+0x2c>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2b05      	cmp	r3, #5
 8006d7c:	d104      	bne.n	8006d88 <dll_scan_timeout+0x14>
 8006d7e:	4a09      	ldr	r2, [pc, #36]	; (8006da4 <dll_scan_timeout+0x30>)
 8006d80:	3329      	adds	r3, #41	; 0x29
 8006d82:	5cd3      	ldrb	r3, [r2, r3]
 8006d84:	065b      	lsls	r3, r3, #25
 8006d86:	d502      	bpl.n	8006d8e <dll_scan_timeout+0x1a>
        rm2_rxtimeout_isr();
 8006d88:	f7fb fd50 	bl	800282c <rm2_rxtimeout_isr>
}
 8006d8c:	bd10      	pop	{r4, pc}
        sys.task[TASK_radio].event = 5;
 8006d8e:	4806      	ldr	r0, [pc, #24]	; (8006da8 <dll_scan_timeout+0x34>)
 8006d90:	2305      	movs	r3, #5
 8006d92:	7103      	strb	r3, [r0, #4]
        sys_task_setnext(&sys.task[TASK_radio], 128);
 8006d94:	3004      	adds	r0, #4
 8006d96:	2180      	movs	r1, #128	; 0x80
 8006d98:	f002 fbe6 	bl	8009568 <sys_task_setnext>
}
 8006d9c:	e7f6      	b.n	8006d8c <dll_scan_timeout+0x18>
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	20002744 	.word	0x20002744
 8006da4:	200026d4 	.word	0x200026d4
 8006da8:	20002e1c 	.word	0x20002e1c

08006dac <dll_m2advp_refresh>:
OT_WEAK void dll_m2advp_refresh(void) {
 8006dac:	b570      	push	{r4, r5, r6, lr}
    countdown = rm2_flood_getcounter();
 8006dae:	f7fb fb89 	bl	80024c4 <rm2_flood_getcounter>
 8006db2:	0004      	movs	r4, r0
    if (countdown < rm2_bgpkt_duration()) {
 8006db4:	f7fb ff98 	bl	8002ce8 <rm2_bgpkt_duration>
 8006db8:	4284      	cmp	r4, r0
 8006dba:	db03      	blt.n	8006dc4 <dll_m2advp_refresh+0x18>
        m2advp_update(countdown);
 8006dbc:	b2a0      	uxth	r0, r4
 8006dbe:	f000 fc4f 	bl	8007660 <m2advp_update>
}
 8006dc2:	bd70      	pop	{r4, r5, r6, pc}
        dll.counter = (countdown < 0) ? 0 : countdown;
 8006dc4:	1c23      	adds	r3, r4, #0
 8006dc6:	0422      	lsls	r2, r4, #16
 8006dc8:	d406      	bmi.n	8006dd8 <dll_m2advp_refresh+0x2c>
 8006dca:	4a04      	ldr	r2, [pc, #16]	; (8006ddc <dll_m2advp_refresh+0x30>)
 8006dcc:	8053      	strh	r3, [r2, #2]
        m2advp_close();
 8006dce:	f000 fc57 	bl	8007680 <m2advp_close>
        rm2_flood_txstop();
 8006dd2:	f7fb fb7d 	bl	80024d0 <rm2_flood_txstop>
 8006dd6:	e7f4      	b.n	8006dc2 <dll_m2advp_refresh+0x16>
        dll.counter = (countdown < 0) ? 0 : countdown;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e7f6      	b.n	8006dca <dll_m2advp_refresh+0x1e>
 8006ddc:	200026d4 	.word	0x200026d4

08006de0 <dll_rfevt_btx>:
OT_WEAK void dll_rfevt_btx(ot_int flcode, ot_int scratch) {
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=130);
 8006de4:	4b1e      	ldr	r3, [pc, #120]	; (8006e60 <dll_rfevt_btx+0x80>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	3282      	adds	r2, #130	; 0x82
 8006dec:	805a      	strh	r2, [r3, #2]
    switch (flcode) {
 8006dee:	2802      	cmp	r0, #2
 8006df0:	d012      	beq.n	8006e18 <dll_rfevt_btx+0x38>
 8006df2:	2803      	cmp	r0, #3
 8006df4:	d016      	beq.n	8006e24 <dll_rfevt_btx+0x44>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d031      	beq.n	8006e5e <dll_rfevt_btx+0x7e>
            __DEBUG_ERRCODE_EVAL(=133);
 8006dfa:	4b19      	ldr	r3, [pc, #100]	; (8006e60 <dll_rfevt_btx+0x80>)
 8006dfc:	2285      	movs	r2, #133	; 0x85
 8006dfe:	805a      	strh	r2, [r3, #2]
            dll_idle();
 8006e00:	f7ff fcb6 	bl	8006770 <dll_idle>
            dirty_adv_check = (session_netstate() & M2_NETFLAG_STREAM);
 8006e04:	f000 feb2 	bl	8007b6c <session_netstate>
 8006e08:	0005      	movs	r5, r0
            session_pop();// pop the BG session
 8006e0a:	f000 fe39 	bl	8007a80 <session_pop>
            if (dirty_adv_check) {
 8006e0e:	062b      	lsls	r3, r5, #24
 8006e10:	d51a      	bpl.n	8006e48 <dll_rfevt_btx+0x68>
                session_scrap();
 8006e12:	f000 fe21 	bl	8007a58 <session_scrap>
 8006e16:	e017      	b.n	8006e48 <dll_rfevt_btx+0x68>
            __DEBUG_ERRCODE_EVAL(=131);
 8006e18:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <dll_rfevt_btx+0x80>)
 8006e1a:	2283      	movs	r2, #131	; 0x83
 8006e1c:	805a      	strh	r2, [r3, #2]
            dll_m2advp_refresh();
 8006e1e:	f7ff ffc5 	bl	8006dac <dll_m2advp_refresh>
        } return; // skip termination section
 8006e22:	e01c      	b.n	8006e5e <dll_rfevt_btx+0x7e>
            __DEBUG_ERRCODE_EVAL(=132);
 8006e24:	4b0e      	ldr	r3, [pc, #56]	; (8006e60 <dll_rfevt_btx+0x80>)
 8006e26:	2284      	movs	r2, #132	; 0x84
 8006e28:	805a      	strh	r2, [r3, #2]
            follower                = session_follower();
 8006e2a:	f000 fe85 	bl	8007b38 <session_follower>
            follower->counter       = dll.counter;
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <dll_rfevt_btx+0x84>)
 8006e30:	885a      	ldrh	r2, [r3, #2]
 8006e32:	8082      	strh	r2, [r0, #4]
            sys.task_RFA.event      = 0;
 8006e34:	4a0c      	ldr	r2, [pc, #48]	; (8006e68 <dll_rfevt_btx+0x88>)
 8006e36:	2100      	movs	r1, #0
 8006e38:	7111      	strb	r1, [r2, #4]
            dll.comm.tc             = 2;    //TI2CLK(2);
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	621a      	str	r2, [r3, #32]
            dll.comm.csmaca_params  = (M2_CSMACA_NOCSMA | M2_CSMACA_MACCA);
 8006e3e:	322c      	adds	r2, #44	; 0x2c
 8006e40:	313c      	adds	r1, #60	; 0x3c
 8006e42:	5499      	strb	r1, [r3, r2]
            session_pop();
 8006e44:	f000 fe1c 	bl	8007a80 <session_pop>
    DLL_SIG_RFTERMINATE(sys.task_RFA.event, flcode);
 8006e48:	4d07      	ldr	r5, [pc, #28]	; (8006e68 <dll_rfevt_btx+0x88>)
 8006e4a:	7928      	ldrb	r0, [r5, #4]
 8006e4c:	0021      	movs	r1, r4
 8006e4e:	f7fa fd69 	bl	8001924 <dll_sig_rfterminate>
    sys.task_RFA.event = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	712b      	strb	r3, [r5, #4]
    sys_preempt(&sys.task_RFA, 0);
 8006e56:	1d28      	adds	r0, r5, #4
 8006e58:	2100      	movs	r1, #0
 8006e5a:	f002 fbf5 	bl	8009648 <sys_preempt>
}
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	20002e6c 	.word	0x20002e6c
 8006e64:	200026d4 	.word	0x200026d4
 8006e68:	20002e1c 	.word	0x20002e1c

08006e6c <dll_set_defaults>:
OT_WEAK void dll_set_defaults(m2session* s_active) {
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	0004      	movs	r4, r0
    ot_u16 follower         = session_follower_wait();
 8006e70:	f000 fe6e 	bl	8007b50 <session_follower_wait>
    dll.comm.tc             = follower >> 3;
 8006e74:	08c2      	lsrs	r2, r0, #3
 8006e76:	b292      	uxth	r2, r2
 8006e78:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <dll_set_defaults+0x4c>)
 8006e7a:	621a      	str	r2, [r3, #32]
    dll.comm.rx_timeout     = follower;
 8006e7c:	6298      	str	r0, [r3, #40]	; 0x28
    dll.comm.csmaca_params  = M2_CSMACA_MACCA;
 8006e7e:	222e      	movs	r2, #46	; 0x2e
 8006e80:	2138      	movs	r1, #56	; 0x38
 8006e82:	5499      	strb	r1, [r3, r2]
    dll.comm.redundants     = ((s_active->netstate & M2_NETSTATE_RX) == 0);
 8006e84:	79e2      	ldrb	r2, [r4, #7]
 8006e86:	0952      	lsrs	r2, r2, #5
 8006e88:	2001      	movs	r0, #1
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	404a      	eors	r2, r1
 8006e8e:	2101      	movs	r1, #1
 8006e90:	400a      	ands	r2, r1
 8006e92:	312e      	adds	r1, #46	; 0x2e
 8006e94:	545a      	strb	r2, [r3, r1]
    dll.comm.tx_channels    = 1;
 8006e96:	2230      	movs	r2, #48	; 0x30
 8006e98:	5498      	strb	r0, [r3, r2]
    dll.comm.rx_channels    = 1;
 8006e9a:	3201      	adds	r2, #1
 8006e9c:	5498      	strb	r0, [r3, r2]
    dll.comm.tx_chanlist    = &dll.comm.scratch[0];
 8006e9e:	001a      	movs	r2, r3
 8006ea0:	322c      	adds	r2, #44	; 0x2c
 8006ea2:	635a      	str	r2, [r3, #52]	; 0x34
    dll.comm.rx_chanlist    = &dll.comm.scratch[1];
 8006ea4:	001a      	movs	r2, r3
 8006ea6:	322d      	adds	r2, #45	; 0x2d
 8006ea8:	639a      	str	r2, [r3, #56]	; 0x38
    dll.comm.scratch[0]     = s_active->channel;
 8006eaa:	79a1      	ldrb	r1, [r4, #6]
 8006eac:	222c      	movs	r2, #44	; 0x2c
 8006eae:	5499      	strb	r1, [r3, r2]
    dll.comm.scratch[1]     = s_active->channel;
 8006eb0:	79a1      	ldrb	r1, [r4, #6]
 8006eb2:	3201      	adds	r2, #1
 8006eb4:	5499      	strb	r1, [r3, r2]
}
 8006eb6:	bd10      	pop	{r4, pc}
 8006eb8:	200026d4 	.word	0x200026d4

08006ebc <dll_default_applet>:
OT_WEAK void dll_default_applet(m2session* active) {
 8006ebc:	b510      	push	{r4, lr}
    dll_set_defaults(active);
 8006ebe:	f7ff ffd5 	bl	8006e6c <dll_set_defaults>
}
 8006ec2:	bd10      	pop	{r4, pc}

08006ec4 <dll_scan_applet>:
OT_WEAK void dll_scan_applet(m2session* active) {
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	0004      	movs	r4, r0
    dll_set_defaults(active);
 8006ec8:	f7ff ffd0 	bl	8006e6c <dll_set_defaults>
    scan_code       = active->extra;
 8006ecc:	7a20      	ldrb	r0, [r4, #8]
    active->extra   = 0;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	7223      	strb	r3, [r4, #8]
    timeout         = otutils_calc_timeout(scan_code);
 8006ed2:	f001 ff9b 	bl	8008e0c <otutils_calc_timeout>
    if (timeout > 65535) {
 8006ed6:	4b04      	ldr	r3, [pc, #16]	; (8006ee8 <dll_scan_applet+0x24>)
 8006ed8:	4298      	cmp	r0, r3
 8006eda:	dd00      	ble.n	8006ede <dll_scan_applet+0x1a>
        timeout = 65535;
 8006edc:	0018      	movs	r0, r3
    dll.comm.rx_timeout = (ot_u16)timeout;
 8006ede:	0400      	lsls	r0, r0, #16
 8006ee0:	0c00      	lsrs	r0, r0, #16
 8006ee2:	4b02      	ldr	r3, [pc, #8]	; (8006eec <dll_scan_applet+0x28>)
 8006ee4:	6298      	str	r0, [r3, #40]	; 0x28
}
 8006ee6:	bd10      	pop	{r4, pc}
 8006ee8:	0000ffff 	.word	0x0000ffff
 8006eec:	200026d4 	.word	0x200026d4

08006ef0 <dll_beacon_applet>:
OT_WEAK void dll_beacon_applet(m2session* active) {
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	0004      	movs	r4, r0
    b_params        = active->extra;
 8006ef6:	7a05      	ldrb	r5, [r0, #8]
    active->extra   = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	7203      	strb	r3, [r0, #8]
    dll_set_defaults(active);
 8006efc:	f7ff ffb6 	bl	8006e6c <dll_set_defaults>
    dll.comm.tc             = M2_PARAM_BEACON_TCA;  //TI2CLK(M2_PARAM_BEACON_TCA);
 8006f00:	4b41      	ldr	r3, [pc, #260]	; (8007008 <dll_beacon_applet+0x118>)
 8006f02:	220c      	movs	r2, #12
 8006f04:	621a      	str	r2, [r3, #32]
    dll.comm.rx_timeout     = (b_params & 0x02) ? 0 : rm2_default_tgd(active->channel);
 8006f06:	07ab      	lsls	r3, r5, #30
 8006f08:	d549      	bpl.n	8006f9e <dll_beacon_applet+0xae>
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	4b3e      	ldr	r3, [pc, #248]	; (8007008 <dll_beacon_applet+0x118>)
 8006f0e:	6298      	str	r0, [r3, #40]	; 0x28
    dll.comm.csmaca_params |= (b_params & 0x04) | M2_CSMACA_NA2P | M2_CSMACA_MACCA;
 8006f10:	202e      	movs	r0, #46	; 0x2e
 8006f12:	2104      	movs	r1, #4
 8006f14:	4029      	ands	r1, r5
 8006f16:	5c1a      	ldrb	r2, [r3, r0]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	2138      	movs	r1, #56	; 0x38
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	541a      	strb	r2, [r3, r0]
    dll.comm.redundants     = dll.netconf.b_attempts;
 8006f20:	7f59      	ldrb	r1, [r3, #29]
 8006f22:	222f      	movs	r2, #47	; 0x2f
 8006f24:	5499      	strb	r1, [r3, r2]
    if (dll.netconf.btemp[0] & 0x80) {
 8006f26:	799b      	ldrb	r3, [r3, #6]
 8006f28:	b25b      	sxtb	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	db3b      	blt.n	8006fa6 <dll_beacon_applet+0xb6>
		m2np_header(active, M2RT_BROADCAST, M2FI_FRDIALOG);
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2101      	movs	r1, #1
 8006f32:	0020      	movs	r0, r4
 8006f34:	f000 f9ce 	bl	80072d4 <m2np_header>
		cmd_ext     = (b_params & 0x06);                            // Normal extension bits
 8006f38:	2606      	movs	r6, #6
 8006f3a:	402e      	ands	r6, r5
		cmd_ext    |= (dll.netconf.btemp[4] == 0) << 6;             // Announcement No-File bit
 8006f3c:	4b32      	ldr	r3, [pc, #200]	; (8007008 <dll_beacon_applet+0x118>)
 8006f3e:	7a9b      	ldrb	r3, [r3, #10]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d157      	bne.n	8006ff4 <dll_beacon_applet+0x104>
 8006f44:	3340      	adds	r3, #64	; 0x40
 8006f46:	431e      	orrs	r6, r3
		cmd_code    = 0x20 | (b_params & 1) | ((cmd_ext!=0) << 7);
 8006f48:	2401      	movs	r4, #1
 8006f4a:	402c      	ands	r4, r5
 8006f4c:	2320      	movs	r3, #32
 8006f4e:	431c      	orrs	r4, r3
 8006f50:	2e00      	cmp	r6, #0
 8006f52:	d051      	beq.n	8006ff8 <dll_beacon_applet+0x108>
 8006f54:	2380      	movs	r3, #128	; 0x80
 8006f56:	425b      	negs	r3, r3
 8006f58:	431c      	orrs	r4, r3
 8006f5a:	b264      	sxtb	r4, r4
 8006f5c:	b2e4      	uxtb	r4, r4
		q_writebyte(&txq, cmd_code);
 8006f5e:	0021      	movs	r1, r4
 8006f60:	482a      	ldr	r0, [pc, #168]	; (800700c <dll_beacon_applet+0x11c>)
 8006f62:	f001 fead 	bl	8008cc0 <q_writebyte>
		if (cmd_code) {
 8006f66:	2c00      	cmp	r4, #0
 8006f68:	d148      	bne.n	8006ffc <dll_beacon_applet+0x10c>
		q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
 8006f6a:	4c27      	ldr	r4, [pc, #156]	; (8007008 <dll_beacon_applet+0x118>)
 8006f6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f6e:	b2d9      	uxtb	r1, r3
 8006f70:	4826      	ldr	r0, [pc, #152]	; (800700c <dll_beacon_applet+0x11c>)
 8006f72:	f001 fea5 	bl	8008cc0 <q_writebyte>
		if (dll.netconf.btemp[4] != 0) {
 8006f76:	7aa3      	ldrb	r3, [r4, #10]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00c      	beq.n	8006f96 <dll_beacon_applet+0xa6>
			q_init(&beacon_queue, &dll.netconf.btemp[4], 4);
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	4924      	ldr	r1, [pc, #144]	; (8007010 <dll_beacon_applet+0x120>)
 8006f80:	a801      	add	r0, sp, #4
 8006f82:	f001 fe90 	bl	8008ca6 <q_init>
			if (m2qp_isf_call((b_params & 1), &beacon_queue, AUTH_GUEST) < 0) {
 8006f86:	2001      	movs	r0, #1
 8006f88:	4028      	ands	r0, r5
 8006f8a:	4a22      	ldr	r2, [pc, #136]	; (8007014 <dll_beacon_applet+0x124>)
 8006f8c:	a901      	add	r1, sp, #4
 8006f8e:	f001 f91b 	bl	80081c8 <m2qp_isf_call>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	db29      	blt.n	8006fea <dll_beacon_applet+0xfa>
		m2np_footer();
 8006f96:	f000 fa67 	bl	8007468 <m2np_footer>
}
 8006f9a:	b006      	add	sp, #24
 8006f9c:	bd70      	pop	{r4, r5, r6, pc}
    dll.comm.rx_timeout     = (b_params & 0x02) ? 0 : rm2_default_tgd(active->channel);
 8006f9e:	79a0      	ldrb	r0, [r4, #6]
 8006fa0:	f7fb fe9a 	bl	8002cd8 <rm2_default_tgd>
 8006fa4:	e7b2      	b.n	8006f0c <dll_beacon_applet+0x1c>
    	ot_memset(beacon_tgram, 0, 8);
 8006fa6:	3a27      	subs	r2, #39	; 0x27
 8006fa8:	2100      	movs	r1, #0
 8006faa:	a801      	add	r0, sp, #4
 8006fac:	f003 f9c4 	bl	800a338 <ot_memset>
    	active->netstate |= M2_NETFLAG_BG;
 8006fb0:	79e3      	ldrb	r3, [r4, #7]
 8006fb2:	2240      	movs	r2, #64	; 0x40
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	71e3      	strb	r3, [r4, #7]
    	fp = vl_open(VL_ISF_BLOCKID, dll.netconf.btemp[5], VL_ACCESS_R, AUTH_GUEST);
 8006fb8:	4b13      	ldr	r3, [pc, #76]	; (8007008 <dll_beacon_applet+0x118>)
 8006fba:	7ad9      	ldrb	r1, [r3, #11]
 8006fbc:	4b15      	ldr	r3, [pc, #84]	; (8007014 <dll_beacon_applet+0x124>)
 8006fbe:	2224      	movs	r2, #36	; 0x24
 8006fc0:	2003      	movs	r0, #3
 8006fc2:	f002 f919 	bl	80091f8 <vl_open>
 8006fc6:	1e04      	subs	r4, r0, #0
    	if (fp != NULL) {
 8006fc8:	d007      	beq.n	8006fda <dll_beacon_applet+0xea>
    		vl_load(fp, dll.netconf.btemp[4], beacon_tgram);
 8006fca:	4b0f      	ldr	r3, [pc, #60]	; (8007008 <dll_beacon_applet+0x118>)
 8006fcc:	7a99      	ldrb	r1, [r3, #10]
 8006fce:	aa01      	add	r2, sp, #4
 8006fd0:	f002 f96d 	bl	80092ae <vl_load>
    		vl_close(fp);
 8006fd4:	0020      	movs	r0, r4
 8006fd6:	f002 f9cb 	bl	8009370 <vl_close>
    	if (otapi_new_telegram(token, dll.netconf.btemp[5], beacon_tgram) == 0) {
 8006fda:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <dll_beacon_applet+0x118>)
 8006fdc:	7ad9      	ldrb	r1, [r3, #11]
 8006fde:	aa01      	add	r2, sp, #4
 8006fe0:	480d      	ldr	r0, [pc, #52]	; (8007018 <dll_beacon_applet+0x128>)
 8006fe2:	f7ff f92f 	bl	8006244 <otapi_new_telegram>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d1d7      	bne.n	8006f9a <dll_beacon_applet+0xaa>
	session_pop();
 8006fea:	f000 fd49 	bl	8007a80 <session_pop>
	dll_idle();
 8006fee:	f7ff fbbf 	bl	8006770 <dll_idle>
	return;
 8006ff2:	e7d2      	b.n	8006f9a <dll_beacon_applet+0xaa>
		cmd_ext    |= (dll.netconf.btemp[4] == 0) << 6;             // Announcement No-File bit
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e7a6      	b.n	8006f46 <dll_beacon_applet+0x56>
		cmd_code    = 0x20 | (b_params & 1) | ((cmd_ext!=0) << 7);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e7ad      	b.n	8006f58 <dll_beacon_applet+0x68>
			q_writebyte(&txq, cmd_ext);
 8006ffc:	0031      	movs	r1, r6
 8006ffe:	4803      	ldr	r0, [pc, #12]	; (800700c <dll_beacon_applet+0x11c>)
 8007000:	f001 fe5e 	bl	8008cc0 <q_writebyte>
 8007004:	e7b1      	b.n	8006f6a <dll_beacon_applet+0x7a>
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	200026d4 	.word	0x200026d4
 800700c:	20002df4 	.word	0x20002df4
 8007010:	200026de 	.word	0x200026de
 8007014:	200027c4 	.word	0x200027c4
 8007018:	01020304 	.word	0x01020304

0800701c <sub_default_idle>:
}
 800701c:	2001      	movs	r0, #1
 800701e:	4770      	bx	lr

08007020 <sub_dll_flush>:
void sub_dll_flush(void) {
 8007020:	b510      	push	{r4, lr}
	if (radio.state != RADIO_Idle) {
 8007022:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <sub_dll_flush+0x40>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d116      	bne.n	8007058 <sub_dll_flush+0x38>
    rm2_mac_configure();
 800702a:	f7fb fa27 	bl	800247c <rm2_mac_configure>
    task = &sys.task_HSS;
 800702e:	4b0d      	ldr	r3, [pc, #52]	; (8007064 <sub_dll_flush+0x44>)
        task->cursor   = 0;
 8007030:	2200      	movs	r2, #0
 8007032:	705a      	strb	r2, [r3, #1]
        task->reserve  = 1;
 8007034:	2101      	movs	r1, #1
 8007036:	7099      	strb	r1, [r3, #2]
        task->latency  = 255;
 8007038:	31fe      	adds	r1, #254	; 0xfe
 800703a:	70d9      	strb	r1, [r3, #3]
        task->nextevent= 0;
 800703c:	605a      	str	r2, [r3, #4]
        task++;
 800703e:	3308      	adds	r3, #8
	} while (task < &sys.task[SSS_INDEX+1]);
 8007040:	4a09      	ldr	r2, [pc, #36]	; (8007068 <sub_dll_flush+0x48>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d3f4      	bcc.n	8007030 <sub_dll_flush+0x10>
    session_init();
 8007046:	f000 fc7b 	bl	8007940 <session_init>
    dll.idle_state  = sub_default_idle();
 800704a:	f7ff ffe7 	bl	800701c <sub_default_idle>
 800704e:	4b07      	ldr	r3, [pc, #28]	; (800706c <sub_dll_flush+0x4c>)
 8007050:	7018      	strb	r0, [r3, #0]
    dll_idle();
 8007052:	f7ff fb8d 	bl	8006770 <dll_idle>
}
 8007056:	bd10      	pop	{r4, pc}
		rm2_kill();
 8007058:	f7fb fc2c 	bl	80028b4 <rm2_kill>
 800705c:	e7e5      	b.n	800702a <sub_dll_flush+0xa>
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	20002744 	.word	0x20002744
 8007064:	20002e30 	.word	0x20002e30
 8007068:	20002e48 	.word	0x20002e48
 800706c:	200026d4 	.word	0x200026d4

08007070 <dll_refresh>:
OT_WEAK void dll_refresh(void) {
 8007070:	b570      	push	{r4, r5, r6, lr}
    fp = ISF_open_su(0);
 8007072:	2000      	movs	r0, #0
 8007074:	f002 f9b1 	bl	80093da <ISF_open_su>
 8007078:	0005      	movs	r5, r0
    vl_load(fp, 10, dll.netconf.vid);
 800707a:	4c0f      	ldr	r4, [pc, #60]	; (80070b8 <dll_refresh+0x48>)
 800707c:	0022      	movs	r2, r4
 800707e:	210a      	movs	r1, #10
 8007080:	f002 f915 	bl	80092ae <vl_load>
    dll.netconf.dd_flags    = 0;
 8007084:	3c16      	subs	r4, #22
 8007086:	2300      	movs	r3, #0
 8007088:	7723      	strb	r3, [r4, #28]
    dll.netconf.hold_limit  = PLATFORM_ENDIAN16(dll.netconf.hold_limit);
 800708a:	8be3      	ldrh	r3, [r4, #30]
 800708c:	ba5b      	rev16	r3, r3
 800708e:	83e3      	strh	r3, [r4, #30]
    vl_close(fp);
 8007090:	0028      	movs	r0, r5
 8007092:	f002 f96d 	bl	8009370 <vl_close>
    fp = ISF_open_su(1);
 8007096:	2001      	movs	r0, #1
 8007098:	f002 f99f 	bl	80093da <ISF_open_su>
 800709c:	0005      	movs	r5, r0
    vl_load(fp, 8, dll.netconf.uid);
 800709e:	0022      	movs	r2, r4
 80070a0:	320e      	adds	r2, #14
 80070a2:	2108      	movs	r1, #8
 80070a4:	f002 f903 	bl	80092ae <vl_load>
    vl_close(fp);
 80070a8:	0028      	movs	r0, r5
 80070aa:	f002 f961 	bl	8009370 <vl_close>
    dll_refresh_rts();
 80070ae:	f7ff fb41 	bl	8006734 <dll_refresh_rts>
    sub_dll_flush();
 80070b2:	f7ff ffb5 	bl	8007020 <sub_dll_flush>
}
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	200026ea 	.word	0x200026ea

080070bc <dll_init>:
OT_WEAK void dll_init(void) {
 80070bc:	b510      	push	{r4, lr}
    radio_init();
 80070be:	f7fb f94f 	bl	8002360 <radio_init>
    network_init();
 80070c2:	f000 f8ef 	bl	80072a4 <network_init>
    m2qp_init();
 80070c6:	f000 fde9 	bl	8007c9c <m2qp_init>
    auth_init();
 80070ca:	f001 fd40 	bl	8008b4e <auth_init>
    dll_refresh();
 80070ce:	f7ff ffcf 	bl	8007070 <dll_refresh>
}
 80070d2:	bd10      	pop	{r4, pc}

080070d4 <dll_systask_rf>:
OT_WEAK void dll_systask_rf(ot_task task) {
 80070d4:	b510      	push	{r4, lr}
 80070d6:	0004      	movs	r4, r0
        switch (sys.task_RFA.event) {
 80070d8:	4b11      	ldr	r3, [pc, #68]	; (8007120 <dll_systask_rf+0x4c>)
 80070da:	791b      	ldrb	r3, [r3, #4]
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d015      	beq.n	800710c <dll_systask_rf+0x38>
 80070e0:	d805      	bhi.n	80070ee <dll_systask_rf+0x1a>
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d00c      	beq.n	8007100 <dll_systask_rf+0x2c>
 80070e6:	d80e      	bhi.n	8007106 <dll_systask_rf+0x32>
            case 0: dll_refresh();          break;
 80070e8:	f7ff ffc2 	bl	8007070 <dll_refresh>
}
 80070ec:	bd10      	pop	{r4, pc}
        switch (sys.task_RFA.event) {
 80070ee:	2b06      	cmp	r3, #6
 80070f0:	d012      	beq.n	8007118 <dll_systask_rf+0x44>
 80070f2:	d30e      	bcc.n	8007112 <dll_systask_rf+0x3e>
 80070f4:	2bff      	cmp	r3, #255	; 0xff
 80070f6:	d1f9      	bne.n	80070ec <dll_systask_rf+0x18>
            case 255: task->cursor = radio_getpwrcode(); break;
 80070f8:	f7fb fda6 	bl	8002c48 <radio_getpwrcode>
 80070fc:	7060      	strb	r0, [r4, #1]
}
 80070fe:	e7f5      	b.n	80070ec <dll_systask_rf+0x18>
            case 1: dll_processing();       break;
 8007100:	f7ff fcf4 	bl	8006aec <dll_processing>
 8007104:	e7f2      	b.n	80070ec <dll_systask_rf+0x18>
            case 2: dll_activate();         break;
 8007106:	f7ff fe13 	bl	8006d30 <dll_activate>
 800710a:	e7ef      	b.n	80070ec <dll_systask_rf+0x18>
            case 3: dll_scan_timeout();    break;
 800710c:	f7ff fe32 	bl	8006d74 <dll_scan_timeout>
 8007110:	e7ec      	b.n	80070ec <dll_systask_rf+0x18>
            case 5: rm2_kill();             break;
 8007112:	f7fb fbcf 	bl	80028b4 <rm2_kill>
 8007116:	e7e9      	b.n	80070ec <dll_systask_rf+0x18>
            case 6: rm2_decode_s2();        break;
 8007118:	f7fb fb2e 	bl	8002778 <rm2_decode_s2>
 800711c:	e7e6      	b.n	80070ec <dll_systask_rf+0x18>
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	20002e1c 	.word	0x20002e1c

08007124 <dll_systask_holdscan>:
OT_WEAK void dll_systask_holdscan(ot_task task) {
 8007124:	b510      	push	{r4, lr}
    if (task->event == 0) return;
 8007126:	7803      	ldrb	r3, [r0, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00e      	beq.n	800714a <dll_systask_holdscan+0x26>
    if (dll.counter != 0) {
 800712c:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <dll_systask_holdscan+0x3c>)
 800712e:	885b      	ldrh	r3, [r3, #2]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10b      	bne.n	800714c <dll_systask_holdscan+0x28>
        dll.idle_state      = sub_default_idle();
 8007134:	f7ff ff72 	bl	800701c <sub_default_idle>
 8007138:	4b09      	ldr	r3, [pc, #36]	; (8007160 <dll_systask_holdscan+0x3c>)
 800713a:	7018      	strb	r0, [r3, #0]
        sys.task_HSS.event  = 0;
 800713c:	4b09      	ldr	r3, [pc, #36]	; (8007164 <dll_systask_holdscan+0x40>)
 800713e:	2200      	movs	r2, #0
 8007140:	751a      	strb	r2, [r3, #20]
        sys.task_HSS.cursor = 0;
 8007142:	755a      	strb	r2, [r3, #21]
        sys.task_SSS.event  = 5;
 8007144:	3224      	adds	r2, #36	; 0x24
 8007146:	2105      	movs	r1, #5
 8007148:	5499      	strb	r1, [r3, r2]
}
 800714a:	bd10      	pop	{r4, pc}
        dll.counter -= (sys.task_HSS.cursor == 0);
 800714c:	4a05      	ldr	r2, [pc, #20]	; (8007164 <dll_systask_holdscan+0x40>)
 800714e:	7d52      	ldrb	r2, [r2, #21]
 8007150:	4251      	negs	r1, r2
 8007152:	414a      	adcs	r2, r1
 8007154:	1a9b      	subs	r3, r3, r2
 8007156:	4a02      	ldr	r2, [pc, #8]	; (8007160 <dll_systask_holdscan+0x3c>)
 8007158:	8053      	strh	r3, [r2, #2]
        dll_systask_sleepscan(task);
 800715a:	f7ff fcf5 	bl	8006b48 <dll_systask_sleepscan>
 800715e:	e7f4      	b.n	800714a <dll_systask_holdscan+0x26>
 8007160:	200026d4 	.word	0x200026d4
 8007164:	20002e1c 	.word	0x20002e1c

08007168 <crc0B_table>:
    0x03, 0x08, 0x15, 0x1E, 0x04, 0x0F, 0x12, 0x19,
    0x0D, 0x06, 0x1B, 0x10, 0x0A, 0x01, 0x1C, 0x17
};

ot_u8 crc0B_table(ot_u8* data) {
    ot_u8 a = (data[0] >> 3);
 8007168:	7802      	ldrb	r2, [r0, #0]
 800716a:	08d1      	lsrs	r1, r2, #3
    ot_u8 b = ((data[1] >> 6) | (data[0] << 2)) & 0x1f;
 800716c:	7843      	ldrb	r3, [r0, #1]
 800716e:	0092      	lsls	r2, r2, #2
 8007170:	099b      	lsrs	r3, r3, #6
 8007172:	4313      	orrs	r3, r2
 8007174:	221f      	movs	r2, #31
 8007176:	4013      	ands	r3, r2
    return crc0B_5t5[ crc0B_0t5[a] ^ b ];
 8007178:	4a03      	ldr	r2, [pc, #12]	; (8007188 <crc0B_table+0x20>)
 800717a:	5c51      	ldrb	r1, [r2, r1]
 800717c:	404b      	eors	r3, r1
 800717e:	18d2      	adds	r2, r2, r3
 8007180:	2320      	movs	r3, #32
 8007182:	5cd0      	ldrb	r0, [r2, r3]
}
 8007184:	4770      	bx	lr
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	20000100 	.word	0x20000100

0800718c <em2_add_crc5>:

void em2_add_crc5() {
 800718c:	b510      	push	{r4, lr}
    txq.front[1] &= ~0x1f;
 800718e:	4a07      	ldr	r2, [pc, #28]	; (80071ac <em2_add_crc5+0x20>)
 8007190:	68d1      	ldr	r1, [r2, #12]
 8007192:	784b      	ldrb	r3, [r1, #1]
 8007194:	201f      	movs	r0, #31
 8007196:	4383      	bics	r3, r0
 8007198:	704b      	strb	r3, [r1, #1]
    txq.front[1] |= crc0B_table(txq.front);
 800719a:	68d4      	ldr	r4, [r2, #12]
 800719c:	0020      	movs	r0, r4
 800719e:	f7ff ffe3 	bl	8007168 <crc0B_table>
 80071a2:	7863      	ldrb	r3, [r4, #1]
 80071a4:	4318      	orrs	r0, r3
 80071a6:	7060      	strb	r0, [r4, #1]
}
 80071a8:	bd10      	pop	{r4, pc}
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	20002df4 	.word	0x20002df4

080071b0 <em2_check_crc5>:

ot_u8 em2_check_crc5() {
 80071b0:	b510      	push	{r4, lr}
    ot_u8 crc5_val;
    crc5_val = crc0B_table(rxq.front);
 80071b2:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <em2_check_crc5+0x18>)
 80071b4:	68dc      	ldr	r4, [r3, #12]
 80071b6:	0020      	movs	r0, r4
 80071b8:	f7ff ffd6 	bl	8007168 <crc0B_table>
    return ((rxq.front[1] & 0x1f) - crc5_val);
 80071bc:	7862      	ldrb	r2, [r4, #1]
 80071be:	231f      	movs	r3, #31
 80071c0:	4013      	ands	r3, r2
 80071c2:	1a18      	subs	r0, r3, r0
 80071c4:	b2c0      	uxtb	r0, r0
}
 80071c6:	bd10      	pop	{r4, pc}
 80071c8:	20002de0 	.word	0x20002de0

080071cc <sub_apply_subnet_flags>:
#include <m2/dll.h>
#include <m2/m2task.h>
#include <m2/session.h>


void sub_apply_subnet_flags(session_tmpl* s_tmpl) {
 80071cc:	b510      	push	{r4, lr}
    // Apply custom-masked subnet and flags to session (typically unused)
    s_tmpl->subnet  = (dll.netconf.subnet & ~s_tmpl->subnetmask) | \
 80071ce:	490a      	ldr	r1, [pc, #40]	; (80071f8 <sub_apply_subnet_flags+0x2c>)
 80071d0:	2318      	movs	r3, #24
 80071d2:	56cb      	ldrsb	r3, [r1, r3]
 80071d4:	78c4      	ldrb	r4, [r0, #3]
 80071d6:	43a3      	bics	r3, r4
 80071d8:	b25b      	sxtb	r3, r3
                                        (s_tmpl->subnet & s_tmpl->subnetmask);
 80071da:	7882      	ldrb	r2, [r0, #2]
    s_tmpl->subnet  = (dll.netconf.subnet & ~s_tmpl->subnetmask) | \
 80071dc:	4022      	ands	r2, r4
 80071de:	4313      	orrs	r3, r2
 80071e0:	7083      	strb	r3, [r0, #2]
    s_tmpl->flags   = (dll.netconf.dd_flags & ~s_tmpl->flagmask) | \
 80071e2:	231c      	movs	r3, #28
 80071e4:	56cb      	ldrsb	r3, [r1, r3]
 80071e6:	7941      	ldrb	r1, [r0, #5]
 80071e8:	438b      	bics	r3, r1
 80071ea:	b25b      	sxtb	r3, r3
                                        (s_tmpl->flags & s_tmpl->flagmask);
 80071ec:	7902      	ldrb	r2, [r0, #4]
    s_tmpl->flags   = (dll.netconf.dd_flags & ~s_tmpl->flagmask) | \
 80071ee:	400a      	ands	r2, r1
 80071f0:	4313      	orrs	r3, r2
 80071f2:	7103      	strb	r3, [r0, #4]
}
 80071f4:	bd10      	pop	{r4, pc}
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	200026d4 	.word	0x200026d4

080071fc <sub_newtask>:


m2session* sub_newtask(session_tmpl* s_tmpl, ot_app applet, ot_u16 offset) {
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	0004      	movs	r4, r0
 8007200:	000d      	movs	r5, r1
 8007202:	0016      	movs	r6, r2
    m2session* next;
    
    /// Make sure there is a free session... it is easiest this way
    if (session_numfree() < 1) {
 8007204:	f000 fc6e 	bl	8007ae4 <session_numfree>
 8007208:	2800      	cmp	r0, #0
 800720a:	dd0f      	ble.n	800722c <sub_newtask+0x30>
        return NULL;
    }
    
    /// Create new session (session always begins with req tx)
    next = session_new(applet, offset, s_tmpl->channel, (M2_NETSTATE_INIT | M2_NETSTATE_REQTX));
 800720c:	7862      	ldrb	r2, [r4, #1]
 800720e:	2308      	movs	r3, #8
 8007210:	0031      	movs	r1, r6
 8007212:	0028      	movs	r0, r5
 8007214:	f000 fba4 	bl	8007960 <session_new>
 8007218:	0005      	movs	r5, r0
    sub_apply_subnet_flags(s_tmpl);
 800721a:	0020      	movs	r0, r4
 800721c:	f7ff ffd6 	bl	80071cc <sub_apply_subnet_flags>
    next->subnet    = s_tmpl->subnet;
 8007220:	78a3      	ldrb	r3, [r4, #2]
 8007222:	72ab      	strb	r3, [r5, #10]
    next->flags     = s_tmpl->flags;
 8007224:	7923      	ldrb	r3, [r4, #4]
 8007226:	72eb      	strb	r3, [r5, #11]

    return next;
}
 8007228:	0028      	movs	r0, r5
 800722a:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 800722c:	2500      	movs	r5, #0
 800722e:	e7fb      	b.n	8007228 <sub_newtask+0x2c>

08007230 <m2task_immediate>:



m2session* m2task_immediate(session_tmpl* s_tmpl, ot_app applet) {
 8007230:	b510      	push	{r4, lr}
/// This call doesn't actually cause the session to occur immediately,
/// but it will happen immediately following any sessions happenning 
/// at this very moment.
    return sub_newtask(s_tmpl, applet, 0);
 8007232:	2200      	movs	r2, #0
 8007234:	f7ff ffe2 	bl	80071fc <sub_newtask>
}
 8007238:	bd10      	pop	{r4, pc}
	...

0800723c <m2task_advertise>:





m2session* m2task_advertise(advert_tmpl* adv_tmpl, session_tmpl* s_tmpl, ot_app applet) {
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	0005      	movs	r5, r0
 8007240:	000c      	movs	r4, r1
 8007242:	0016      	movs	r6, r2
/// creates two sessions: one for the flood and one for the request.
#   define _FLOOD_NETSTATE  (M2_NETFLAG_BG | M2_NETFLAG_STREAM | M2_NETSTATE_INIT | M2_NETSTATE_REQTX)
    m2session* next;
    
    /// Make sure there are at least two free sessions
    if (session_numfree() < 2) {
 8007244:	f000 fc4e 	bl	8007ae4 <session_numfree>
 8007248:	2801      	cmp	r0, #1
 800724a:	dd1b      	ble.n	8007284 <m2task_advertise+0x48>
        return NULL;
    }

    /// Apply session flags
    sub_apply_subnet_flags(s_tmpl);
 800724c:	0020      	movs	r0, r4
 800724e:	f7ff ffbd 	bl	80071cc <sub_apply_subnet_flags>
    
    /// Only add the flood if the user isn't an idiot (or an algorithm of some sort)
    if (adv_tmpl->duration != 0) {
 8007252:	88ab      	ldrh	r3, [r5, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10a      	bne.n	800726e <m2task_advertise+0x32>
        next        = session_new(&dll_default_applet, 0, adv_tmpl->channel, _FLOOD_NETSTATE);
        next->subnet= s_tmpl->subnet;
        next->flags = s_tmpl->flags;
    }
    
    next        = session_new(applet, adv_tmpl->duration, s_tmpl->channel, M2_NETSTATE_REQTX);
 8007258:	88a9      	ldrh	r1, [r5, #4]
 800725a:	7862      	ldrb	r2, [r4, #1]
 800725c:	2300      	movs	r3, #0
 800725e:	0030      	movs	r0, r6
 8007260:	f000 fb7e 	bl	8007960 <session_new>
    next->subnet= s_tmpl->subnet;
 8007264:	78a3      	ldrb	r3, [r4, #2]
 8007266:	7283      	strb	r3, [r0, #10]
    next->flags = s_tmpl->flags;
 8007268:	7923      	ldrb	r3, [r4, #4]
 800726a:	72c3      	strb	r3, [r0, #11]
    
    return next;
    
#   undef _FLOOD_NETSTATE
}
 800726c:	bd70      	pop	{r4, r5, r6, pc}
        next        = session_new(&dll_default_applet, 0, adv_tmpl->channel, _FLOOD_NETSTATE);
 800726e:	78ea      	ldrb	r2, [r5, #3]
 8007270:	23c8      	movs	r3, #200	; 0xc8
 8007272:	2100      	movs	r1, #0
 8007274:	4804      	ldr	r0, [pc, #16]	; (8007288 <m2task_advertise+0x4c>)
 8007276:	f000 fb73 	bl	8007960 <session_new>
        next->subnet= s_tmpl->subnet;
 800727a:	78a3      	ldrb	r3, [r4, #2]
 800727c:	7283      	strb	r3, [r0, #10]
        next->flags = s_tmpl->flags;
 800727e:	7923      	ldrb	r3, [r4, #4]
 8007280:	72c3      	strb	r3, [r0, #11]
 8007282:	e7e9      	b.n	8007258 <m2task_advertise+0x1c>
        return NULL;
 8007284:	2000      	movs	r0, #0
 8007286:	e7f1      	b.n	800726c <m2task_advertise+0x30>
 8007288:	08006ebd 	.word	0x08006ebd

0800728c <m2task_telegram>:




m2session* m2task_telegram(session_tmpl* s_tmpl, ot_app applet) {
 800728c:	b510      	push	{r4, lr}
 800728e:	0004      	movs	r4, r0
/// This is an experimental function
    m2session* next;
    next 			= sub_newtask(s_tmpl, applet, 0);
 8007290:	2200      	movs	r2, #0
 8007292:	f7ff ffb3 	bl	80071fc <sub_newtask>
    next->netstate |= M2_NETFLAG_BG;
 8007296:	79c3      	ldrb	r3, [r0, #7]
 8007298:	2240      	movs	r2, #64	; 0x40
 800729a:	4313      	orrs	r3, r2
 800729c:	71c3      	strb	r3, [r0, #7]
    next->flags     = s_tmpl->flags;
 800729e:	7923      	ldrb	r3, [r4, #4]
 80072a0:	72c3      	strb	r3, [r0, #11]

    return next;
}
 80072a2:	bd10      	pop	{r4, pc}

080072a4 <network_init>:
#   endif

    // Hop code should be explicitly set when producing an anycast or unicast 
    // transmission.  OTAPI will do this for you.
    //m2np.rt.hop_code  = 0;
}
 80072a4:	4770      	bx	lr
	...

080072a8 <m2np_put_deviceid>:
}




void m2np_put_deviceid(ot_bool use_vid) {
 80072a8:	b510      	push	{r4, lr}
    if (use_vid) q_writeshort_be(&txq, *(ot_u16*)dll.netconf.vid);
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d105      	bne.n	80072ba <m2np_put_deviceid+0x12>
    else         q_writestring(&txq, dll.netconf.uid, 8);
 80072ae:	2208      	movs	r2, #8
 80072b0:	4905      	ldr	r1, [pc, #20]	; (80072c8 <m2np_put_deviceid+0x20>)
 80072b2:	4806      	ldr	r0, [pc, #24]	; (80072cc <m2np_put_deviceid+0x24>)
 80072b4:	f001 fd63 	bl	8008d7e <q_writestring>
}
 80072b8:	bd10      	pop	{r4, pc}
    if (use_vid) q_writeshort_be(&txq, *(ot_u16*)dll.netconf.vid);
 80072ba:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <m2np_put_deviceid+0x28>)
 80072bc:	8ad9      	ldrh	r1, [r3, #22]
 80072be:	4803      	ldr	r0, [pc, #12]	; (80072cc <m2np_put_deviceid+0x24>)
 80072c0:	f001 fd0d 	bl	8008cde <q_writeshort_be>
 80072c4:	e7f8      	b.n	80072b8 <m2np_put_deviceid+0x10>
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	200026e2 	.word	0x200026e2
 80072cc:	20002df4 	.word	0x20002df4
 80072d0:	200026d4 	.word	0x200026d4

080072d4 <m2np_header>:
void m2np_header(m2session* active, ot_u8 addressing, ot_u8 nack) {
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	0004      	movs	r4, r0
 80072d8:	000e      	movs	r6, r1
    q_empty(&txq);
 80072da:	4d2e      	ldr	r5, [pc, #184]	; (8007394 <m2np_header+0xc0>)
 80072dc:	0028      	movs	r0, r5
 80072de:	f001 fcd9 	bl	8008c94 <q_empty>
        active->flags  &= ~M2_FLAG_RSCODE;
 80072e2:	7ae3      	ldrb	r3, [r4, #11]
 80072e4:	2208      	movs	r2, #8
 80072e6:	4393      	bics	r3, r2
 80072e8:	72e3      	strb	r3, [r4, #11]
        txq.back        = txq.getcursor + maxframe;
 80072ea:	686b      	ldr	r3, [r5, #4]
 80072ec:	33fe      	adds	r3, #254	; 0xfe
 80072ee:	612b      	str	r3, [r5, #16]
    q_writeshort(&txq, (ot_u16)((active->flags & M2_FLAG_RSCODE) << 3) );
 80072f0:	7ae3      	ldrb	r3, [r4, #11]
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	2140      	movs	r1, #64	; 0x40
 80072f6:	4019      	ands	r1, r3
 80072f8:	0028      	movs	r0, r5
 80072fa:	f001 fce6 	bl	8008cca <q_writeshort>
    q_writeshort(&txq, (ot_u16)active->subnet);
 80072fe:	7aa1      	ldrb	r1, [r4, #10]
 8007300:	0028      	movs	r0, r5
 8007302:	f001 fce2 	bl	8008cca <q_writeshort>
    active->flags &= M2_FLAG_ROUTE;
 8007306:	7ae3      	ldrb	r3, [r4, #11]
 8007308:	2104      	movs	r1, #4
 800730a:	4019      	ands	r1, r3
 800730c:	72e1      	strb	r1, [r4, #11]
    if (active->netstate & M2_NETSTATE_RESP) {
 800730e:	79e2      	ldrb	r2, [r4, #7]
 8007310:	06d3      	lsls	r3, r2, #27
 8007312:	d526      	bpl.n	8007362 <m2np_header+0x8e>
        vid_valid   = (*(ot_u16*)dll.netconf.vid != 0) | (active->flags & 1);
 8007314:	4b20      	ldr	r3, [pc, #128]	; (8007398 <m2np_header+0xc4>)
 8007316:	8ad9      	ldrh	r1, [r3, #22]
 8007318:	1e4b      	subs	r3, r1, #1
 800731a:	4199      	sbcs	r1, r3
        addressing |= vid_valid << 4;                           // Use Source VID if valid
 800731c:	0109      	lsls	r1, r1, #4
        addressing |= (active->flags & M2_FLAG_VID) >> 4;       // Use Target VID if Request source was VID
 800731e:	2302      	movs	r3, #2
 8007320:	4319      	orrs	r1, r3
    m2np.header.fr_info     = addressing;
 8007322:	4b1e      	ldr	r3, [pc, #120]	; (800739c <m2np_header+0xc8>)
 8007324:	7719      	strb	r1, [r3, #28]
    m2np.header.fr_info    |= ((active->extra & 0x0F) != 0) << 3;   //M2FI_EXT
 8007326:	b249      	sxtb	r1, r1
 8007328:	7a23      	ldrb	r3, [r4, #8]
 800732a:	071b      	lsls	r3, r3, #28
 800732c:	d022      	beq.n	8007374 <m2np_header+0xa0>
 800732e:	2308      	movs	r3, #8
 8007330:	4319      	orrs	r1, r3
 8007332:	b2c9      	uxtb	r1, r1
 8007334:	4d19      	ldr	r5, [pc, #100]	; (800739c <m2np_header+0xc8>)
 8007336:	7729      	strb	r1, [r5, #28]
    q_writebyte(&txq, m2np.header.fr_info);
 8007338:	4816      	ldr	r0, [pc, #88]	; (8007394 <m2np_header+0xc0>)
 800733a:	f001 fcc1 	bl	8008cc0 <q_writebyte>
    if (m2np.header.fr_info & M2FI_EXT) {
 800733e:	7f2b      	ldrb	r3, [r5, #28]
 8007340:	071b      	lsls	r3, r3, #28
 8007342:	d419      	bmi.n	8007378 <m2np_header+0xa4>
    q_writebyte(&txq, active->dialog_id);
 8007344:	7a61      	ldrb	r1, [r4, #9]
 8007346:	4813      	ldr	r0, [pc, #76]	; (8007394 <m2np_header+0xc0>)
 8007348:	f001 fcba 	bl	8008cc0 <q_writebyte>
    m2np_put_deviceid( (ot_bool)(m2np.header.fr_info & M2FI_VID) );
 800734c:	4c13      	ldr	r4, [pc, #76]	; (800739c <m2np_header+0xc8>)
 800734e:	7f23      	ldrb	r3, [r4, #28]
 8007350:	091b      	lsrs	r3, r3, #4
 8007352:	2001      	movs	r0, #1
 8007354:	4018      	ands	r0, r3
 8007356:	f7ff ffa7 	bl	80072a8 <m2np_put_deviceid>
    if (m2np.header.fr_info & M2FI_UCAST) {
 800735a:	7f23      	ldrb	r3, [r4, #28]
 800735c:	079b      	lsls	r3, r3, #30
 800735e:	d410      	bmi.n	8007382 <m2np_header+0xae>
}
 8007360:	bd70      	pop	{r4, r5, r6, pc}
        active->flags      |= addressing;
 8007362:	4331      	orrs	r1, r6
 8007364:	72e1      	strb	r1, [r4, #11]
        active->netstate   |= (addressing & M2FI_UCAST);    // M2_NETFLAG_FIRSTRX == M2FI_UCAST
 8007366:	2302      	movs	r3, #2
 8007368:	401e      	ands	r6, r3
 800736a:	4316      	orrs	r6, r2
 800736c:	71e6      	strb	r6, [r4, #7]
        addressing          = active->flags & ~M2_FLAG_RSCODE;
 800736e:	3306      	adds	r3, #6
 8007370:	4399      	bics	r1, r3
 8007372:	e7d6      	b.n	8007322 <m2np_header+0x4e>
    m2np.header.fr_info    |= ((active->extra & 0x0F) != 0) << 3;   //M2FI_EXT
 8007374:	2300      	movs	r3, #0
 8007376:	e7db      	b.n	8007330 <m2np_header+0x5c>
        q_writebyte(&txq, active->extra);
 8007378:	7a21      	ldrb	r1, [r4, #8]
 800737a:	4806      	ldr	r0, [pc, #24]	; (8007394 <m2np_header+0xc0>)
 800737c:	f001 fca0 	bl	8008cc0 <q_writebyte>
 8007380:	e7e0      	b.n	8007344 <m2np_header+0x70>
        ot_u8* tmp_id       = m2np.rt.dlog.value;
 8007382:	4b06      	ldr	r3, [pc, #24]	; (800739c <m2np_header+0xc8>)
 8007384:	6899      	ldr	r1, [r3, #8]
        m2np.rt.dlog.value  = txq.putcursor;
 8007386:	4803      	ldr	r0, [pc, #12]	; (8007394 <m2np_header+0xc0>)
 8007388:	6882      	ldr	r2, [r0, #8]
 800738a:	609a      	str	r2, [r3, #8]
        q_writestring(&txq, tmp_id, m2np.rt.dlog.length);
 800738c:	791a      	ldrb	r2, [r3, #4]
 800738e:	f001 fcf6 	bl	8008d7e <q_writestring>
}
 8007392:	e7e5      	b.n	8007360 <m2np_header+0x8c>
 8007394:	20002df4 	.word	0x20002df4
 8007398:	200026d4 	.word	0x200026d4
 800739c:	20002724 	.word	0x20002724

080073a0 <m2np_idcmp>:



ot_bool m2np_idcmp(ot_int length, ot_u8* id) {
 80073a0:	b530      	push	{r4, r5, lr}
    ot_u8* stored_id;
    ot_u8  check;
    
    // Don't match on vid == 0, that is reserved as unassigned value
    if ((length == 2) && (*(ot_u16*)dll.netconf.vid == 0)) {
 80073a2:	2802      	cmp	r0, #2
 80073a4:	d00a      	beq.n	80073bc <m2np_idcmp+0x1c>
        return False;
    }
    
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 80073a6:	2808      	cmp	r0, #8
 80073a8:	d00e      	beq.n	80073c8 <m2np_idcmp+0x28>
 80073aa:	4a2b      	ldr	r2, [pc, #172]	; (8007458 <m2np_idcmp+0xb8>)
    length      = 8 - length;
 80073ac:	2308      	movs	r3, #8
 80073ae:	1a18      	subs	r0, r3, r0
    check       = 0;
    
    switch (length & 7) {
 80073b0:	2307      	movs	r3, #7
 80073b2:	4018      	ands	r0, r3
 80073b4:	0080      	lsls	r0, r0, #2
 80073b6:	4b29      	ldr	r3, [pc, #164]	; (800745c <m2np_idcmp+0xbc>)
 80073b8:	581b      	ldr	r3, [r3, r0]
 80073ba:	469f      	mov	pc, r3
    if ((length == 2) && (*(ot_u16*)dll.netconf.vid == 0)) {
 80073bc:	4b28      	ldr	r3, [pc, #160]	; (8007460 <m2np_idcmp+0xc0>)
 80073be:	8adb      	ldrh	r3, [r3, #22]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1f0      	bne.n	80073a6 <m2np_idcmp+0x6>
        return False;
 80073c4:	2000      	movs	r0, #0
 80073c6:	e033      	b.n	8007430 <m2np_idcmp+0x90>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 80073c8:	4a26      	ldr	r2, [pc, #152]	; (8007464 <m2np_idcmp+0xc4>)
 80073ca:	e7ef      	b.n	80073ac <m2np_idcmp+0xc>
        case 0: check |= *stored_id++ ^ *id++; 
 80073cc:	7813      	ldrb	r3, [r2, #0]
 80073ce:	7808      	ldrb	r0, [r1, #0]
 80073d0:	4043      	eors	r3, r0
 80073d2:	3201      	adds	r2, #1
 80073d4:	3101      	adds	r1, #1
 80073d6:	e000      	b.n	80073da <m2np_idcmp+0x3a>
    check       = 0;
 80073d8:	2300      	movs	r3, #0
        case 1: check |= *stored_id++ ^ *id++; 
 80073da:	7810      	ldrb	r0, [r2, #0]
 80073dc:	780c      	ldrb	r4, [r1, #0]
 80073de:	4060      	eors	r0, r4
 80073e0:	4303      	orrs	r3, r0
 80073e2:	3201      	adds	r2, #1
 80073e4:	3101      	adds	r1, #1
        case 2: check |= *stored_id++ ^ *id++; 
 80073e6:	1c55      	adds	r5, r2, #1
 80073e8:	7810      	ldrb	r0, [r2, #0]
 80073ea:	1c4c      	adds	r4, r1, #1
 80073ec:	780a      	ldrb	r2, [r1, #0]
 80073ee:	4050      	eors	r0, r2
 80073f0:	4318      	orrs	r0, r3
        case 3: check |= *stored_id++ ^ *id++; 
 80073f2:	1c6a      	adds	r2, r5, #1
 80073f4:	782b      	ldrb	r3, [r5, #0]
 80073f6:	1c61      	adds	r1, r4, #1
 80073f8:	7824      	ldrb	r4, [r4, #0]
 80073fa:	4063      	eors	r3, r4
 80073fc:	4318      	orrs	r0, r3
        case 4: check |= *stored_id++ ^ *id++; 
 80073fe:	1c55      	adds	r5, r2, #1
 8007400:	7813      	ldrb	r3, [r2, #0]
 8007402:	1c4c      	adds	r4, r1, #1
 8007404:	780a      	ldrb	r2, [r1, #0]
 8007406:	4053      	eors	r3, r2
 8007408:	4303      	orrs	r3, r0
        case 5: check |= *stored_id++ ^ *id++; 
 800740a:	1c6a      	adds	r2, r5, #1
 800740c:	7828      	ldrb	r0, [r5, #0]
 800740e:	1c61      	adds	r1, r4, #1
 8007410:	7824      	ldrb	r4, [r4, #0]
 8007412:	4060      	eors	r0, r4
 8007414:	4303      	orrs	r3, r0
        case 6: check |= *stored_id++ ^ *id++; 
 8007416:	1c54      	adds	r4, r2, #1
 8007418:	7810      	ldrb	r0, [r2, #0]
 800741a:	1c4a      	adds	r2, r1, #1
 800741c:	7809      	ldrb	r1, [r1, #0]
 800741e:	4048      	eors	r0, r1
 8007420:	4318      	orrs	r0, r3
        case 7: check |= *stored_id ^ *id;
 8007422:	7823      	ldrb	r3, [r4, #0]
 8007424:	7812      	ldrb	r2, [r2, #0]
 8007426:	4053      	eors	r3, r2
 8007428:	4318      	orrs	r0, r3
                break;
    }
    
    return (ot_bool)(check == 0);
 800742a:	4243      	negs	r3, r0
 800742c:	4158      	adcs	r0, r3
 800742e:	b2c0      	uxtb	r0, r0
}
 8007430:	bd30      	pop	{r4, r5, pc}
    check       = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	e7d7      	b.n	80073e6 <m2np_idcmp+0x46>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 8007436:	0015      	movs	r5, r2
    switch (length & 7) {
 8007438:	000c      	movs	r4, r1
    check       = 0;
 800743a:	2000      	movs	r0, #0
 800743c:	e7d9      	b.n	80073f2 <m2np_idcmp+0x52>
 800743e:	2000      	movs	r0, #0
 8007440:	e7dd      	b.n	80073fe <m2np_idcmp+0x5e>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 8007442:	0015      	movs	r5, r2
    switch (length & 7) {
 8007444:	000c      	movs	r4, r1
    check       = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	e7df      	b.n	800740a <m2np_idcmp+0x6a>
 800744a:	2300      	movs	r3, #0
 800744c:	e7e3      	b.n	8007416 <m2np_idcmp+0x76>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 800744e:	0014      	movs	r4, r2
    switch (length & 7) {
 8007450:	000a      	movs	r2, r1
    check       = 0;
 8007452:	2000      	movs	r0, #0
 8007454:	e7e5      	b.n	8007422 <m2np_idcmp+0x82>
 8007456:	46c0      	nop			; (mov r8, r8)
 8007458:	200026ea 	.word	0x200026ea
 800745c:	0800c4fc 	.word	0x0800c4fc
 8007460:	200026d4 	.word	0x200026d4
 8007464:	200026e2 	.word	0x200026e2

08007468 <m2np_footer>:
#endif



#ifndef EXTF_m2np_footer
OT_WEAK void m2np_footer() {
 8007468:	b510      	push	{r4, lr}

    /// RS and CRC will be appended during encoding, and their extra length
    /// will be added to the frame length field.  -1 is because the length
    /// byte is not included in the length field.
    m2np_footer_END:
    txq.getcursor[0] = q_span(&txq) - 1;
 800746a:	4c04      	ldr	r4, [pc, #16]	; (800747c <m2np_footer+0x14>)
 800746c:	0020      	movs	r0, r4
 800746e:	f001 fbf4 	bl	8008c5a <q_span>
 8007472:	6863      	ldr	r3, [r4, #4]
 8007474:	3801      	subs	r0, #1
 8007476:	7018      	strb	r0, [r3, #0]
}
 8007478:	bd10      	pop	{r4, pc}
 800747a:	46c0      	nop			; (mov r8, r8)
 800747c:	20002df4 	.word	0x20002df4

08007480 <network_route_ff>:
ot_int network_route_ff(m2session* active) {
 8007480:	b570      	push	{r4, r5, r6, lr}
 8007482:	0004      	movs	r4, r0
    active->flags       = (rxq.front[1] & M2LC_RSCODE) >> 3;
 8007484:	4a48      	ldr	r2, [pc, #288]	; (80075a8 <network_route_ff+0x128>)
 8007486:	68d3      	ldr	r3, [r2, #12]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	10db      	asrs	r3, r3, #3
 800748c:	2508      	movs	r5, #8
 800748e:	402b      	ands	r3, r5
 8007490:	72c3      	strb	r3, [r0, #11]
    rxq.getcursor       = &rxq.front[4];
 8007492:	68d1      	ldr	r1, [r2, #12]
    m2np.header.fr_info = *rxq.getcursor++;
 8007494:	1d48      	adds	r0, r1, #5
 8007496:	6050      	str	r0, [r2, #4]
 8007498:	790b      	ldrb	r3, [r1, #4]
 800749a:	4a44      	ldr	r2, [pc, #272]	; (80075ac <network_route_ff+0x12c>)
 800749c:	7713      	strb	r3, [r2, #28]
    active->flags      |= (m2np.header.fr_info & ~M2_FLAG_RSCODE);     
 800749e:	b25b      	sxtb	r3, r3
 80074a0:	2608      	movs	r6, #8
 80074a2:	43b3      	bics	r3, r6
 80074a4:	7ae6      	ldrb	r6, [r4, #11]
 80074a6:	4333      	orrs	r3, r6
 80074a8:	72e3      	strb	r3, [r4, #11]
    m2np.header.ext_info = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	7753      	strb	r3, [r2, #29]
    if (m2np.header.fr_info & M2FI_EXT) {
 80074ae:	7f13      	ldrb	r3, [r2, #28]
 80074b0:	421d      	tst	r5, r3
 80074b2:	d005      	beq.n	80074c0 <network_route_ff+0x40>
        m2np.header.ext_info = *rxq.getcursor++;
 80074b4:	1d88      	adds	r0, r1, #6
 80074b6:	4a3c      	ldr	r2, [pc, #240]	; (80075a8 <network_route_ff+0x128>)
 80074b8:	6050      	str	r0, [r2, #4]
 80074ba:	7949      	ldrb	r1, [r1, #5]
 80074bc:	4a3b      	ldr	r2, [pc, #236]	; (80075ac <network_route_ff+0x12c>)
 80074be:	7751      	strb	r1, [r2, #29]
 80074c0:	2503      	movs	r5, #3
 80074c2:	401d      	ands	r5, r3
    use_m2np = ((m2np.header.fr_info & M2FI_ADDRMASK) != 0);
 80074c4:	002b      	movs	r3, r5
 80074c6:	1e5a      	subs	r2, r3, #1
 80074c8:	4193      	sbcs	r3, r2
 80074ca:	b2db      	uxtb	r3, r3
    if (active->netstate & M2_NETSTATE_CONNECTED) {
 80074cc:	79e2      	ldrb	r2, [r4, #7]
 80074ce:	07d1      	lsls	r1, r2, #31
 80074d0:	d434      	bmi.n	800753c <network_route_ff+0xbc>
    else if (use_m2np) {
 80074d2:	2d00      	cmp	r5, #0
 80074d4:	d058      	beq.n	8007588 <network_route_ff+0x108>
        active->netstate  |= M2_NETSTATE_CONNECTED;
 80074d6:	2301      	movs	r3, #1
 80074d8:	431a      	orrs	r2, r3
 80074da:	71e2      	strb	r2, [r4, #7]
        active->subnet     = rxq.front[3];
 80074dc:	4832      	ldr	r0, [pc, #200]	; (80075a8 <network_route_ff+0x128>)
 80074de:	68c3      	ldr	r3, [r0, #12]
 80074e0:	78db      	ldrb	r3, [r3, #3]
 80074e2:	72a3      	strb	r3, [r4, #10]
        active->dialog_id  = q_readbyte(&rxq);
 80074e4:	f001 fc1b 	bl	8008d1e <q_readbyte>
 80074e8:	7260      	strb	r0, [r4, #9]
    if (m2np.header.fr_info & M2FI_DLLS) {
 80074ea:	4b30      	ldr	r3, [pc, #192]	; (80075ac <network_route_ff+0x12c>)
 80074ec:	7f1a      	ldrb	r2, [r3, #28]
 80074ee:	0653      	lsls	r3, r2, #25
 80074f0:	d44d      	bmi.n	800758e <network_route_ff+0x10e>
    if (use_m2np) {
 80074f2:	2d00      	cmp	r5, #0
 80074f4:	d04e      	beq.n	8007594 <network_route_ff+0x114>
        m2np.rt.dlog.length = _idlen[ ((m2np.header.fr_info & M2FI_VID) != 0) ];
 80074f6:	0912      	lsrs	r2, r2, #4
 80074f8:	2301      	movs	r3, #1
 80074fa:	4013      	ands	r3, r2
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	4a2c      	ldr	r2, [pc, #176]	; (80075b0 <network_route_ff+0x130>)
 8007500:	5cd1      	ldrb	r1, [r2, r3]
 8007502:	4d2a      	ldr	r5, [pc, #168]	; (80075ac <network_route_ff+0x12c>)
 8007504:	7129      	strb	r1, [r5, #4]
        m2np.rt.dlog.value  = q_markbyte(&rxq, m2np.rt.dlog.length);
 8007506:	b209      	sxth	r1, r1
 8007508:	4827      	ldr	r0, [pc, #156]	; (80075a8 <network_route_ff+0x128>)
 800750a:	f001 fbd4 	bl	8008cb6 <q_markbyte>
 800750e:	60a8      	str	r0, [r5, #8]
        if ((m2np.header.fr_info & M2_FLAG_CRYPTO) == M2_FLAG_NLS) {
 8007510:	7f2a      	ldrb	r2, [r5, #28]
 8007512:	2360      	movs	r3, #96	; 0x60
 8007514:	4013      	ands	r3, r2
 8007516:	2b20      	cmp	r3, #32
 8007518:	d03f      	beq.n	800759a <network_route_ff+0x11a>
        if (m2np.header.fr_info & M2FI_UCAST) {
 800751a:	0793      	lsls	r3, r2, #30
 800751c:	d41a      	bmi.n	8007554 <network_route_ff+0xd4>
        m2np.rt.hop_code = 0;
 800751e:	4b23      	ldr	r3, [pc, #140]	; (80075ac <network_route_ff+0x12c>)
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
        if (m2np.header.fr_info & M2FI_ROUTE) {
 8007524:	7f1b      	ldrb	r3, [r3, #28]
 8007526:	075b      	lsls	r3, r3, #29
 8007528:	d43a      	bmi.n	80075a0 <network_route_ff+0x120>
            route_val = m2qp_parse_frame(active);
 800752a:	0020      	movs	r0, r4
 800752c:	f000 fe30 	bl	8008190 <m2qp_parse_frame>
 8007530:	1e04      	subs	r4, r0, #0
    if (route_val >= 0) {
 8007532:	db01      	blt.n	8007538 <network_route_ff+0xb8>
        m2np_footer( /* active */);
 8007534:	f7ff ff98 	bl	8007468 <m2np_footer>
}
 8007538:	0020      	movs	r0, r4
 800753a:	bd70      	pop	{r4, r5, r6, pc}
        active->dialog_id += use_m2np;
 800753c:	7a66      	ldrb	r6, [r4, #9]
 800753e:	199e      	adds	r6, r3, r6
 8007540:	b2f6      	uxtb	r6, r6
 8007542:	7266      	strb	r6, [r4, #9]
        if (active->dialog_id != q_readbyte(&rxq)) {
 8007544:	4818      	ldr	r0, [pc, #96]	; (80075a8 <network_route_ff+0x128>)
 8007546:	f001 fbea 	bl	8008d1e <q_readbyte>
 800754a:	4286      	cmp	r6, r0
 800754c:	d0cd      	beq.n	80074ea <network_route_ff+0x6a>
            return -1;
 800754e:	2401      	movs	r4, #1
 8007550:	4264      	negs	r4, r4
 8007552:	e7f1      	b.n	8007538 <network_route_ff+0xb8>
            active->flags      |= (target_len << 4);        //sets M2_FLAG_VID (SRC)
 8007554:	2301      	movs	r3, #1
 8007556:	401a      	ands	r2, r3
 8007558:	0111      	lsls	r1, r2, #4
 800755a:	7ae3      	ldrb	r3, [r4, #11]
 800755c:	430b      	orrs	r3, r1
 800755e:	72e3      	strb	r3, [r4, #11]
            active->netstate   |= M2_NETFLAG_FIRSTRX;
 8007560:	79e3      	ldrb	r3, [r4, #7]
 8007562:	2102      	movs	r1, #2
 8007564:	430b      	orrs	r3, r1
 8007566:	71e3      	strb	r3, [r4, #7]
            target_len          = _idlen[ target_len ];
 8007568:	0052      	lsls	r2, r2, #1
 800756a:	4b11      	ldr	r3, [pc, #68]	; (80075b0 <network_route_ff+0x130>)
 800756c:	5ed5      	ldrsh	r5, [r2, r3]
            if (m2np_idcmp(target_len, q_markbyte(&rxq, target_len)) == False) {
 800756e:	0029      	movs	r1, r5
 8007570:	480d      	ldr	r0, [pc, #52]	; (80075a8 <network_route_ff+0x128>)
 8007572:	f001 fba0 	bl	8008cb6 <q_markbyte>
 8007576:	0001      	movs	r1, r0
 8007578:	0028      	movs	r0, r5
 800757a:	f7ff ff11 	bl	80073a0 <m2np_idcmp>
 800757e:	2800      	cmp	r0, #0
 8007580:	d1cd      	bne.n	800751e <network_route_ff+0x9e>
                return -1;
 8007582:	2401      	movs	r4, #1
 8007584:	4264      	negs	r4, r4
 8007586:	e7d7      	b.n	8007538 <network_route_ff+0xb8>
        return -1;  //M2DP cannot be first frame!
 8007588:	2401      	movs	r4, #1
 800758a:	4264      	negs	r4, r4
 800758c:	e7d4      	b.n	8007538 <network_route_ff+0xb8>
        return -1;
 800758e:	2401      	movs	r4, #1
 8007590:	4264      	negs	r4, r4
 8007592:	e7d1      	b.n	8007538 <network_route_ff+0xb8>
        route_val = -1;     // placeholder until multiframe implemented
 8007594:	2401      	movs	r4, #1
 8007596:	4264      	negs	r4, r4
 8007598:	e7ce      	b.n	8007538 <network_route_ff+0xb8>
            return -1;
 800759a:	2401      	movs	r4, #1
 800759c:	4264      	negs	r4, r4
 800759e:	e7cb      	b.n	8007538 <network_route_ff+0xb8>
                return -1;
 80075a0:	2401      	movs	r4, #1
 80075a2:	4264      	negs	r4, r4
 80075a4:	e7c8      	b.n	8007538 <network_route_ff+0xb8>
 80075a6:	46c0      	nop			; (mov r8, r8)
 80075a8:	20002de0 	.word	0x20002de0
 80075ac:	20002724 	.word	0x20002724
 80075b0:	0800c51c 	.word	0x0800c51c

080075b4 <m2advp_parse>:
    //ot_u8   txadv_buffer[10];
#endif


#ifndef EXTF_m2advp_parse
OT_WEAK m2session* m2advp_parse(void) {
 80075b4:	b570      	push	{r4, r5, r6, lr}
    ot_int      slop;
    m2session*	s_next;
    ot_u16      pkt_ti;

    // Get the counter-ETA information from the inbound frame
    count.ubyte[UPPER]  = rxq.getcursor[3];
 80075b6:	4b13      	ldr	r3, [pc, #76]	; (8007604 <m2advp_parse+0x50>)
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	78d3      	ldrb	r3, [r2, #3]
    count.ubyte[LOWER]  = rxq.getcursor[4];
 80075bc:	7914      	ldrb	r4, [r2, #4]
 80075be:	021b      	lsls	r3, r3, #8
 80075c0:	431c      	orrs	r4, r3
    count.ushort       &= 0x7FFF;
 80075c2:	0464      	lsls	r4, r4, #17
 80075c4:	0c64      	lsrs	r4, r4, #17

    // stores the bg packet duration of the active channel.  We need this
    // in order to deal with timing skew.
    pkt_ti  = rm2_bgpkt_duration();
 80075c6:	f7fb fb8f 	bl	8002ce8 <rm2_bgpkt_duration>

    // Account for "slop" due to clock deviation, process latency,
    // and other such things.  Thus the follow-up session is
    // either a second BG scan (if too much slop), or it is FG
    // listening for the request.
    slop = (count.ushort / OT_GPTIM_ERRDIV);
 80075ca:	2300      	movs	r3, #0
    if (slop <= pkt_ti) {
 80075cc:	4283      	cmp	r3, r0
 80075ce:	dd0f      	ble.n	80075f0 <m2advp_parse+0x3c>
        netstate    	= M2_NETSTATE_REQRX;
    }
    else {
    	count.ushort   -= slop;
        scancode        = 0x80;
        netstate        = M2_NETSTATE_REQRX | M2_NETFLAG_BG;
 80075d0:	2660      	movs	r6, #96	; 0x60
        scancode        = 0x80;
 80075d2:	2580      	movs	r5, #128	; 0x80
    }

    // ensure that count value is never negative.
    if (count.sshort < 0) {
 80075d4:	0423      	lsls	r3, r4, #16
 80075d6:	d413      	bmi.n	8007600 <m2advp_parse+0x4c>
        count.sshort = 0;
    }

    // The next session is written in-place of the current session
    s_next              = session_top();
 80075d8:	f000 fa5e 	bl	8007a98 <session_top>
    s_next->applet      = &dll_scan_applet;
 80075dc:	4b0a      	ldr	r3, [pc, #40]	; (8007608 <m2advp_parse+0x54>)
 80075de:	6003      	str	r3, [r0, #0]
    s_next->counter     = count.ushort;
 80075e0:	8084      	strh	r4, [r0, #4]
    s_next->channel     = rxq.getcursor[2];
 80075e2:	4b08      	ldr	r3, [pc, #32]	; (8007604 <m2advp_parse+0x50>)
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	789b      	ldrb	r3, [r3, #2]
 80075e8:	7183      	strb	r3, [r0, #6]
    s_next->netstate    = netstate;
 80075ea:	71c6      	strb	r6, [r0, #7]
    s_next->extra       = scancode;
 80075ec:	7205      	strb	r5, [r0, #8]

    return s_next;
}
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
    	count.ushort   -= pkt_ti;
 80075f0:	1a24      	subs	r4, r4, r0
    	scancode        = otutils_encode_timeout(pkt_ti<<1);
 80075f2:	0040      	lsls	r0, r0, #1
 80075f4:	b280      	uxth	r0, r0
 80075f6:	f001 fc14 	bl	8008e22 <otutils_encode_timeout>
 80075fa:	0005      	movs	r5, r0
        netstate    	= M2_NETSTATE_REQRX;
 80075fc:	2620      	movs	r6, #32
 80075fe:	e7e9      	b.n	80075d4 <m2advp_parse+0x20>
        count.sshort = 0;
 8007600:	2400      	movs	r4, #0
 8007602:	e7e9      	b.n	80075d8 <m2advp_parse+0x24>
 8007604:	20002de0 	.word	0x20002de0
 8007608:	08006ec5 	.word	0x08006ec5

0800760c <m2advp_open>:
#endif



#ifndef EXTF_m2advp_open
OT_WEAK void m2advp_open(m2session* follower) {
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	0005      	movs	r5, r0
    q_empty(&txq);
 8007610:	4c11      	ldr	r4, [pc, #68]	; (8007658 <m2advp_open+0x4c>)
 8007612:	0020      	movs	r0, r4
 8007614:	f001 fb3e 	bl	8008c94 <q_empty>
    txq.getcursor += 2;     //Bypass unused length and Link CTL bytes
 8007618:	6863      	ldr	r3, [r4, #4]
 800761a:	3302      	adds	r3, #2
 800761c:	6063      	str	r3, [r4, #4]
    
    q_writebyte(&txq, (BG_FRAMESIZE-1));    //Dummy Length value (not actually sent)
 800761e:	2105      	movs	r1, #5
 8007620:	0020      	movs	r0, r4
 8007622:	f001 fb4d 	bl	8008cc0 <q_writebyte>
    q_writebyte(&txq, 0);                   //Dummy Link-Control (not actually sent)
 8007626:	2100      	movs	r1, #0
 8007628:	0020      	movs	r0, r4
 800762a:	f001 fb49 	bl	8008cc0 <q_writebyte>
    q_writebyte(&txq, 0);                   //Dummy TX-EIRP (updated by RF driver)
 800762e:	2100      	movs	r1, #0
 8007630:	0020      	movs	r0, r4
 8007632:	f001 fb45 	bl	8008cc0 <q_writebyte>
    
    // This byte is two nibbles: Subnet specifier and AdvP ID (F)
    q_writebyte(&txq, (follower->subnet | 0x0F));
 8007636:	7aa9      	ldrb	r1, [r5, #10]
 8007638:	230f      	movs	r3, #15
 800763a:	4319      	orrs	r1, r3
 800763c:	0020      	movs	r0, r4
 800763e:	f001 fb3f 	bl	8008cc0 <q_writebyte>
    
    // Follower session channel
    q_writebyte(&txq, follower->channel);
 8007642:	79a9      	ldrb	r1, [r5, #6]
 8007644:	0020      	movs	r0, r4
 8007646:	f001 fb3b 	bl	8008cc0 <q_writebyte>
    
    // Follower wait time is set to dll counter
    dll.counter = follower->counter;
 800764a:	88a9      	ldrh	r1, [r5, #4]
 800764c:	4b03      	ldr	r3, [pc, #12]	; (800765c <m2advp_open+0x50>)
 800764e:	8059      	strh	r1, [r3, #2]
    q_writeshort(&txq, follower->counter);
 8007650:	0020      	movs	r0, r4
 8007652:	f001 fb3a 	bl	8008cca <q_writeshort>
}
 8007656:	bd70      	pop	{r4, r5, r6, pc}
 8007658:	20002df4 	.word	0x20002df4
 800765c:	200026d4 	.word	0x200026d4

08007660 <m2advp_update>:
#ifndef EXTF_m2advp_update
OT_WEAK void m2advp_update(ot_u16 countdown) {
///@note In this function we manually reset the txq cursors to the places
///      they need to be for the encoder.  The encoder implementation may or
///      may not do this automatically, but it is safer to be redundant.
    txq.getcursor       = &txq.front[2];                //No length, link-CTL bytes in BG Frame
 8007660:	4b06      	ldr	r3, [pc, #24]	; (800767c <m2advp_update+0x1c>)
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	1c91      	adds	r1, r2, #2
 8007666:	6059      	str	r1, [r3, #4]
    txq.putcursor       = txq.getcursor;
    txq.putcursor      += 3;                            //Skip EIRP, Subnet, Channel bytes
    *txq.putcursor++    = ((ot_u8*)&countdown)[UPPER];  //Countdown (upper 8 bits)
 8007668:	1d91      	adds	r1, r2, #6
 800766a:	6099      	str	r1, [r3, #8]
 800766c:	0a01      	lsrs	r1, r0, #8
 800766e:	7151      	strb	r1, [r2, #5]
    *txq.putcursor++    = ((ot_u8*)&countdown)[LOWER];  //Countdown (lower 8 bits)
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	1c51      	adds	r1, r2, #1
 8007674:	6099      	str	r1, [r3, #8]
 8007676:	7010      	strb	r0, [r2, #0]
}
 8007678:	4770      	bx	lr
 800767a:	46c0      	nop			; (mov r8, r8)
 800767c:	20002df4 	.word	0x20002df4

08007680 <m2advp_close>:
#endif


#ifndef EXTF_m2advp_close
OT_WEAK void m2advp_close() {
}
 8007680:	4770      	bx	lr
	...

08007684 <m2tgram_parse>:

///@todo This is patchwork code, just to deliver basic functionality with
/// with existing buffer structure and M2QP impl.
extern alp_tmpl m2alp;

m2session* m2tgram_parse(void) {
 8007684:	b510      	push	{r4, lr}
/// Telegram format is made into an ALP frame and sent to telegram forwarder
/// ALP (ID = ???)
/// @todo ID currently set to 16, but subject to change

	// Shift 14 byte telegram by four bytes to make room for ALP header
	for (ot_int i=13; i>=0; i--) {
 8007686:	230d      	movs	r3, #13
 8007688:	e006      	b.n	8007698 <m2tgram_parse+0x14>
		rxq.getcursor[i+4] = rxq.getcursor[i];
 800768a:	4a0f      	ldr	r2, [pc, #60]	; (80076c8 <m2tgram_parse+0x44>)
 800768c:	6852      	ldr	r2, [r2, #4]
 800768e:	1d19      	adds	r1, r3, #4
 8007690:	5cd0      	ldrb	r0, [r2, r3]
 8007692:	5450      	strb	r0, [r2, r1]
	for (ot_int i=13; i>=0; i--) {
 8007694:	3b01      	subs	r3, #1
 8007696:	b21b      	sxth	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	daf6      	bge.n	800768a <m2tgram_parse+0x6>
	}

	// Putcursor re-oriented to include only ALP header and telegram payload
	rxq.putcursor    = rxq.getcursor + 4 + 14;
 800769c:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <m2tgram_parse+0x44>)
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	0011      	movs	r1, r2
 80076a2:	3112      	adds	r1, #18
 80076a4:	6099      	str	r1, [r3, #8]

	// Put ALP header
	rxq.getcursor[0] = 0xD0;
 80076a6:	21d0      	movs	r1, #208	; 0xd0
 80076a8:	7011      	strb	r1, [r2, #0]
	rxq.getcursor[1] = 14;
 80076aa:	220e      	movs	r2, #14
 80076ac:	6859      	ldr	r1, [r3, #4]
 80076ae:	704a      	strb	r2, [r1, #1]
	rxq.getcursor[2] = 16;
 80076b0:	3202      	adds	r2, #2
 80076b2:	6859      	ldr	r1, [r3, #4]
 80076b4:	708a      	strb	r2, [r1, #2]
	rxq.getcursor[3] = 0;
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	70da      	strb	r2, [r3, #3]

	alp_parse_message(&m2alp, AUTH_GUEST);
 80076bc:	4903      	ldr	r1, [pc, #12]	; (80076cc <m2tgram_parse+0x48>)
 80076be:	4804      	ldr	r0, [pc, #16]	; (80076d0 <m2tgram_parse+0x4c>)
 80076c0:	f001 f998 	bl	80089f4 <alp_parse_message>

	return NULL;
}
 80076c4:	2000      	movs	r0, #0
 80076c6:	bd10      	pop	{r4, pc}
 80076c8:	20002de0 	.word	0x20002de0
 80076cc:	200027c4 	.word	0x200027c4
 80076d0:	200027a0 	.word	0x200027a0

080076d4 <network_parse_bf>:
OT_WEAK m2session* network_parse_bf(void) {
 80076d4:	b510      	push	{r4, lr}
	    switch (rxq.getcursor[1] & 15) {
 80076d6:	4b08      	ldr	r3, [pc, #32]	; (80076f8 <network_parse_bf+0x24>)
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	785a      	ldrb	r2, [r3, #1]
 80076dc:	230f      	movs	r3, #15
 80076de:	4013      	ands	r3, r2
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d004      	beq.n	80076ee <network_parse_bf+0x1a>
 80076e4:	2b0f      	cmp	r3, #15
 80076e6:	d105      	bne.n	80076f4 <network_parse_bf+0x20>
	    case 15:    s_next = m2advp_parse();        break;
 80076e8:	f7ff ff64 	bl	80075b4 <m2advp_parse>
	}
 80076ec:	bd10      	pop	{r4, pc}
	    case 1:     s_next = m2tgram_parse();       break;
 80076ee:	f7ff ffc9 	bl	8007684 <m2tgram_parse>
 80076f2:	e7fb      	b.n	80076ec <network_parse_bf+0x18>
	    s_next  = NULL;
 80076f4:	2000      	movs	r0, #0
	    return s_next;
 80076f6:	e7f9      	b.n	80076ec <network_parse_bf+0x18>
 80076f8:	20002de0 	.word	0x20002de0

080076fc <rm2_mac_filter>:




#ifndef EXTF_rm2_mac_filter
OT_WEAK ot_bool rm2_mac_filter() {
 80076fc:	b530      	push	{r4, r5, lr}

    // TX EIRP encoded value    = (dBm + 40) * 2
    // TX EIRP dBm              = ((encoded value) / 2) - 40
    // Link Loss                = TX EIRP dBm - Detected RX dBm
    // Link Quality Filter      = (Link Loss <= Link Loss Limit)
    ot_u8 qualifier = (ot_u8)(radio.last_linkloss <= ((ot_int)phymac[0].link_qual)<<1);
 80076fe:	4b12      	ldr	r3, [pc, #72]	; (8007748 <rm2_mac_filter+0x4c>)
 8007700:	2206      	movs	r2, #6
 8007702:	5e9a      	ldrsh	r2, [r3, r2]
 8007704:	4b11      	ldr	r3, [pc, #68]	; (800774c <rm2_mac_filter+0x50>)
 8007706:	795b      	ldrb	r3, [r3, #5]
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	0fd0      	lsrs	r0, r2, #31
 800770c:	17d9      	asrs	r1, r3, #31
 800770e:	4293      	cmp	r3, r2
 8007710:	4148      	adcs	r0, r1
 8007712:	b2c0      	uxtb	r0, r0
    {   ot_u8 fr_subnet, dsm, specifier, mask;
        fr_subnet   = rxq.front[3];
 8007714:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <rm2_mac_filter+0x54>)
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	78da      	ldrb	r2, [r3, #3]
        dsm         = dll.netconf.subnet & 0x0F;
 800771a:	4b0e      	ldr	r3, [pc, #56]	; (8007754 <rm2_mac_filter+0x58>)
 800771c:	7e1b      	ldrb	r3, [r3, #24]
 800771e:	240f      	movs	r4, #15
 8007720:	210f      	movs	r1, #15
 8007722:	4019      	ands	r1, r3
        mask        = fr_subnet & dsm;
 8007724:	000d      	movs	r5, r1
 8007726:	4015      	ands	r5, r2
        specifier   = (fr_subnet ^ dll.netconf.subnet) & 0xF0;
 8007728:	4053      	eors	r3, r2
 800772a:	43a3      	bics	r3, r4
        fr_subnet  &= 0xF0;
 800772c:	43a2      	bics	r2, r4
        qualifier  &= (ot_bool)(((fr_subnet == 0xF0) || (specifier == 0)) && (mask == dsm));
 800772e:	2af0      	cmp	r2, #240	; 0xf0
 8007730:	d001      	beq.n	8007736 <rm2_mac_filter+0x3a>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d104      	bne.n	8007740 <rm2_mac_filter+0x44>
 8007736:	42a9      	cmp	r1, r5
 8007738:	d004      	beq.n	8007744 <rm2_mac_filter+0x48>
 800773a:	2300      	movs	r3, #0
    }
    return qualifier;
 800773c:	4018      	ands	r0, r3
}
 800773e:	bd30      	pop	{r4, r5, pc}
        qualifier  &= (ot_bool)(((fr_subnet == 0xF0) || (specifier == 0)) && (mask == dsm));
 8007740:	2300      	movs	r3, #0
 8007742:	e7fb      	b.n	800773c <rm2_mac_filter+0x40>
 8007744:	2301      	movs	r3, #1
 8007746:	e7f9      	b.n	800773c <rm2_mac_filter+0x40>
 8007748:	20002744 	.word	0x20002744
 800774c:	20002750 	.word	0x20002750
 8007750:	20002de0 	.word	0x20002de0
 8007754:	200026d4 	.word	0x200026d4

08007758 <rm2_channel_refresh>:
#endif


#ifndef EXTF_rm2_channel_refresh
OT_WEAK void rm2_channel_refresh(void) {
    radio.flags |= RADIO_FLAG_REFRESH;
 8007758:	4a02      	ldr	r2, [pc, #8]	; (8007764 <rm2_channel_refresh+0xc>)
 800775a:	7853      	ldrb	r3, [r2, #1]
 800775c:	2101      	movs	r1, #1
 800775e:	430b      	orrs	r3, r1
 8007760:	7053      	strb	r3, [r2, #1]
}
 8007762:	4770      	bx	lr
 8007764:	20002744 	.word	0x20002744

08007768 <rm2_channel_lookup>:
}
#endif


#ifndef EXTF_rm2_channel_lookup
OT_WEAK ot_bool rm2_channel_lookup(ot_u8 chan_id, vlFILE* fp) {
 8007768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776a:	46d6      	mov	lr, sl
 800776c:	464f      	mov	r7, r9
 800776e:	4646      	mov	r6, r8
 8007770:	b5c0      	push	{r6, r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	0007      	movs	r7, r0
 8007776:	000d      	movs	r5, r1
    ot_u8       spectrum_id;
    ot_int      i;
    volatile ot_uni16    scratch;

    // Strip the FEC & Spread bits
    spectrum_id = chan_id & 0x3F;
 8007778:	263f      	movs	r6, #63	; 0x3f
 800777a:	4006      	ands	r6, r0

    /// Populate the phymac flags: these are not frequently used
    /// @todo I might want to do this in radio_init() instead
    scratch.ushort  = vl_read(fp, 2);
 800777c:	2102      	movs	r1, #2
 800777e:	0028      	movs	r0, r5
 8007780:	f001 fd74 	bl	800926c <vl_read>
 8007784:	ab01      	add	r3, sp, #4
 8007786:	8018      	strh	r0, [r3, #0]
    phymac[0].flags = scratch.ubyte[0];
 8007788:	781a      	ldrb	r2, [r3, #0]
 800778a:	4b33      	ldr	r3, [pc, #204]	; (8007858 <rm2_channel_lookup+0xf0>)
 800778c:	701a      	strb	r2, [r3, #0]

    /// Look through the channel list to find the one with matching spectrum id.
    /// The channel list is not necessarily sorted.
    /// @todo might do this with vl_get() in the future
    for (i=6; i<fp->length; i+=6) {
 800778e:	2406      	movs	r4, #6
 8007790:	892b      	ldrh	r3, [r5, #8]
 8007792:	429c      	cmp	r4, r3
 8007794:	da5d      	bge.n	8007852 <rm2_channel_lookup+0xea>
        scratch.ushort = vl_read(fp, i);
 8007796:	b2a4      	uxth	r4, r4
 8007798:	0021      	movs	r1, r4
 800779a:	0028      	movs	r0, r5
 800779c:	f001 fd66 	bl	800926c <vl_read>
 80077a0:	ab01      	add	r3, sp, #4
 80077a2:	8018      	strh	r0, [r3, #0]

        if ((spectrum_id == scratch.ubyte[0]) \
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	42b3      	cmp	r3, r6
 80077aa:	d009      	beq.n	80077c0 <rm2_channel_lookup+0x58>
        || ((spectrum_id & 0xF0) == scratch.ubyte[0])) {
 80077ac:	ab01      	add	r3, sp, #4
 80077ae:	781a      	ldrb	r2, [r3, #0]
 80077b0:	b2d2      	uxtb	r2, r2
 80077b2:	2330      	movs	r3, #48	; 0x30
 80077b4:	403b      	ands	r3, r7
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d002      	beq.n	80077c0 <rm2_channel_lookup+0x58>
    for (i=6; i<fp->length; i+=6) {
 80077ba:	3406      	adds	r4, #6
 80077bc:	b224      	sxth	r4, r4
 80077be:	e7e7      	b.n	8007790 <rm2_channel_lookup+0x28>
            ot_u8 old_chan_id   = phymac[0].channel;
 80077c0:	4b25      	ldr	r3, [pc, #148]	; (8007858 <rm2_channel_lookup+0xf0>)
 80077c2:	4698      	mov	r8, r3
 80077c4:	789b      	ldrb	r3, [r3, #2]
 80077c6:	469a      	mov	sl, r3
            ot_u8 old_tx_eirp   = (phymac[0].tx_eirp & 0x7f);
 80077c8:	4643      	mov	r3, r8
 80077ca:	791b      	ldrb	r3, [r3, #4]
 80077cc:	227f      	movs	r2, #127	; 0x7f
 80077ce:	401a      	ands	r2, r3
 80077d0:	4691      	mov	r9, r2

            phymac[0].tg        = rm2_default_tgd(chan_id);
 80077d2:	0038      	movs	r0, r7
 80077d4:	f7fb fa80 	bl	8002cd8 <rm2_default_tgd>
 80077d8:	4643      	mov	r3, r8
 80077da:	7058      	strb	r0, [r3, #1]
            phymac[0].channel   = chan_id;
 80077dc:	709f      	strb	r7, [r3, #2]
          //phymac[0].autoscale = scratch.ubyte[1];

            scratch.ushort      = vl_read(fp, i+2);
 80077de:	1ca1      	adds	r1, r4, #2
 80077e0:	b289      	uxth	r1, r1
 80077e2:	0028      	movs	r0, r5
 80077e4:	f001 fd42 	bl	800926c <vl_read>
 80077e8:	ae01      	add	r6, sp, #4
 80077ea:	8030      	strh	r0, [r6, #0]
            phymac[0].tx_eirp   = scratch.ubyte[0] & 0x80;
 80077ec:	7833      	ldrb	r3, [r6, #0]
 80077ee:	227f      	movs	r2, #127	; 0x7f
 80077f0:	4393      	bics	r3, r2
 80077f2:	4642      	mov	r2, r8
 80077f4:	7113      	strb	r3, [r2, #4]
            phymac[0].tx_eirp  |= rm2_clip_txeirp(scratch.ubyte[0]);
 80077f6:	7830      	ldrb	r0, [r6, #0]
 80077f8:	b2c0      	uxtb	r0, r0
 80077fa:	f7fa fdd5 	bl	80023a8 <rm2_clip_txeirp>
 80077fe:	4643      	mov	r3, r8
 8007800:	791b      	ldrb	r3, [r3, #4]
 8007802:	4318      	orrs	r0, r3
 8007804:	4643      	mov	r3, r8
 8007806:	7118      	strb	r0, [r3, #4]
            phymac[0].link_qual = scratch.ubyte[1];
 8007808:	7873      	ldrb	r3, [r6, #1]
 800780a:	4642      	mov	r2, r8
 800780c:	7153      	strb	r3, [r2, #5]

            ///@todo Try this: *(ot_u16*)&phymac[0].cs_thr = vl_read(fp, i+4);  
            ///it will need some rearrangement in phymac struct
            /// Convert thresholds from DASH7 numeric encoding to native encoding
            scratch.ushort      = vl_read(fp, i+4);
 800780e:	1d21      	adds	r1, r4, #4
 8007810:	b289      	uxth	r1, r1
 8007812:	0028      	movs	r0, r5
 8007814:	f001 fd2a 	bl	800926c <vl_read>
 8007818:	8030      	strh	r0, [r6, #0]
            //phymac[0].cs_thr    = __THR(scratch.ubyte[0]);
            //phymac[0].cca_thr   = scratch.ubyte[1];
            //phymac[0].cs_thr    = rm2_calc_rssithr(phymac[0].cs_thr);
            //phymac[0].cca_thr   = rm2_calc_rssithr(phymac[0].cca_thr);
            radio.threshold.raw = scratch.ubyte[0];
 800781a:	7830      	ldrb	r0, [r6, #0]
 800781c:	b2c0      	uxtb	r0, r0
 800781e:	4b0f      	ldr	r3, [pc, #60]	; (800785c <rm2_channel_lookup+0xf4>)
 8007820:	70d8      	strb	r0, [r3, #3]
            phymac[0].cs_thr    = rm2_calc_rssithr( (ot_u8)(radio.threshold.raw + radio.threshold.offset) );
 8007822:	789b      	ldrb	r3, [r3, #2]
 8007824:	18c0      	adds	r0, r0, r3
 8007826:	b2c0      	uxtb	r0, r0
 8007828:	f7fa fdc4 	bl	80023b4 <rm2_calc_rssithr>
 800782c:	4643      	mov	r3, r8
 800782e:	7198      	strb	r0, [r3, #6]
            phymac[0].cca_thr   = rm2_calc_rssithr( scratch.ubyte[1] );
 8007830:	7870      	ldrb	r0, [r6, #1]
 8007832:	b2c0      	uxtb	r0, r0
 8007834:	f7fa fdbe 	bl	80023b4 <rm2_calc_rssithr>
 8007838:	4643      	mov	r3, r8
 800783a:	71d8      	strb	r0, [r3, #7]
            
            rm2_enter_channel(old_chan_id, old_tx_eirp);
 800783c:	4649      	mov	r1, r9
 800783e:	4650      	mov	r0, sl
 8007840:	f7fa fddc 	bl	80023fc <rm2_enter_channel>
            return True;
 8007844:	2001      	movs	r0, #1
        }
    }
    return False;
}
 8007846:	b002      	add	sp, #8
 8007848:	bc1c      	pop	{r2, r3, r4}
 800784a:	4690      	mov	r8, r2
 800784c:	4699      	mov	r9, r3
 800784e:	46a2      	mov	sl, r4
 8007850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return False;
 8007852:	2000      	movs	r0, #0
 8007854:	e7f7      	b.n	8007846 <rm2_channel_lookup+0xde>
 8007856:	46c0      	nop			; (mov r8, r8)
 8007858:	20002750 	.word	0x20002750
 800785c:	20002744 	.word	0x20002744

08007860 <rm2_init>:
OT_WEAK void rm2_init(void) {
 8007860:	b510      	push	{r4, lr}
    radio.state     = RADIO_Idle;
 8007862:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <rm2_init+0x38>)
 8007864:	2200      	movs	r2, #0
 8007866:	701a      	strb	r2, [r3, #0]
    radio.flags     = RADIO_FLAG_REFRESH;
 8007868:	2101      	movs	r1, #1
 800786a:	7059      	strb	r1, [r3, #1]
    radio.evtdone   = &otutils_sig2_null;
 800786c:	490b      	ldr	r1, [pc, #44]	; (800789c <rm2_init+0x3c>)
 800786e:	6099      	str	r1, [r3, #8]
    radio.threshold.offset  = 0;
 8007870:	709a      	strb	r2, [r3, #2]
    radio.threshold.raw     = 0;
 8007872:	70da      	strb	r2, [r3, #3]
    phymac[0].channel   = 0xF0;
 8007874:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <rm2_init+0x40>)
 8007876:	32f0      	adds	r2, #240	; 0xf0
 8007878:	709a      	strb	r2, [r3, #2]
    phymac[0].tx_eirp   = 0x7F;
 800787a:	3a71      	subs	r2, #113	; 0x71
 800787c:	711a      	strb	r2, [r3, #4]
    fp                  = ISF_open_su( ISF_ID(channel_configuration) );
 800787e:	2002      	movs	r0, #2
 8007880:	f001 fdab 	bl	80093da <ISF_open_su>
 8007884:	0004      	movs	r4, r0
    rm2_channel_lookup(0x18, fp);
 8007886:	0001      	movs	r1, r0
 8007888:	2018      	movs	r0, #24
 800788a:	f7ff ff6d 	bl	8007768 <rm2_channel_lookup>
    vl_close(fp);
 800788e:	0020      	movs	r0, r4
 8007890:	f001 fd6e 	bl	8009370 <vl_close>
}
 8007894:	bd10      	pop	{r4, pc}
 8007896:	46c0      	nop			; (mov r8, r8)
 8007898:	20002744 	.word	0x20002744
 800789c:	08008df5 	.word	0x08008df5
 80078a0:	20002750 	.word	0x20002750

080078a4 <rm2_test_channel>:
OT_WEAK ot_bool rm2_test_channel(ot_u8 channel) {
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	0005      	movs	r5, r0
    test = rm2_channel_fastcheck(channel);
 80078a8:	f7fa fd8e 	bl	80023c8 <rm2_channel_fastcheck>
 80078ac:	1e04      	subs	r4, r0, #0
    if (test == False) {
 80078ae:	d001      	beq.n	80078b4 <rm2_test_channel+0x10>
}
 80078b0:	0020      	movs	r0, r4
 80078b2:	bd70      	pop	{r4, r5, r6, pc}
        fp      = ISF_open_su( ISF_ID(channel_configuration) );
 80078b4:	2002      	movs	r0, #2
 80078b6:	f001 fd90 	bl	80093da <ISF_open_su>
 80078ba:	0006      	movs	r6, r0
        test    = rm2_channel_lookup(channel, fp);
 80078bc:	0001      	movs	r1, r0
 80078be:	0028      	movs	r0, r5
 80078c0:	f7ff ff52 	bl	8007768 <rm2_channel_lookup>
 80078c4:	0004      	movs	r4, r0
        vl_close(fp);
 80078c6:	0030      	movs	r0, r6
 80078c8:	f001 fd52 	bl	8009370 <vl_close>
 80078cc:	e7f0      	b.n	80078b0 <rm2_test_channel+0xc>
	...

080078d0 <rm2_test_chanlist>:
OT_WEAK ot_bool rm2_test_chanlist() {
 80078d0:	b570      	push	{r4, r5, r6, lr}
    fp = ISF_open_su( ISF_ID(channel_configuration) );
 80078d2:	2002      	movs	r0, #2
 80078d4:	f001 fd81 	bl	80093da <ISF_open_su>
 80078d8:	0006      	movs	r6, r0
    for (i=0, test=False; i<dll.comm.tx_channels; i++) {
 80078da:	2400      	movs	r4, #0
 80078dc:	4a0f      	ldr	r2, [pc, #60]	; (800791c <rm2_test_chanlist+0x4c>)
 80078de:	2330      	movs	r3, #48	; 0x30
 80078e0:	5cd3      	ldrb	r3, [r2, r3]
 80078e2:	429c      	cmp	r4, r3
 80078e4:	da10      	bge.n	8007908 <rm2_test_chanlist+0x38>
        next_channel = dll.comm.tx_chanlist[i];
 80078e6:	4b0d      	ldr	r3, [pc, #52]	; (800791c <rm2_test_chanlist+0x4c>)
 80078e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ea:	5d1d      	ldrb	r5, [r3, r4]
        if (rm2_channel_fastcheck(next_channel)) {
 80078ec:	0028      	movs	r0, r5
 80078ee:	f7fa fd6b 	bl	80023c8 <rm2_channel_fastcheck>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d10e      	bne.n	8007914 <rm2_test_chanlist+0x44>
        if (rm2_channel_lookup(next_channel, fp)) {
 80078f6:	0031      	movs	r1, r6
 80078f8:	0028      	movs	r0, r5
 80078fa:	f7ff ff35 	bl	8007768 <rm2_channel_lookup>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d10a      	bne.n	8007918 <rm2_test_chanlist+0x48>
    for (i=0, test=False; i<dll.comm.tx_channels; i++) {
 8007902:	3401      	adds	r4, #1
 8007904:	b224      	sxth	r4, r4
 8007906:	e7e9      	b.n	80078dc <rm2_test_chanlist+0xc>
 8007908:	2400      	movs	r4, #0
    vl_close(fp);
 800790a:	0030      	movs	r0, r6
 800790c:	f001 fd30 	bl	8009370 <vl_close>
}
 8007910:	0020      	movs	r0, r4
 8007912:	bd70      	pop	{r4, r5, r6, pc}
        	test = True;
 8007914:	2401      	movs	r4, #1
 8007916:	e7f8      	b.n	800790a <rm2_test_chanlist+0x3a>
        	test = True;
 8007918:	2401      	movs	r4, #1
 800791a:	e7f6      	b.n	800790a <rm2_test_chanlist+0x3a>
 800791c:	200026d4 	.word	0x200026d4

08007920 <session_applet_null>:

session_struct session;



void session_applet_null(m2session* a) { }
 8007920:	4770      	bx	lr

08007922 <sub_store_session>:



static m2session* sub_store_session(m2session* store, ot_app applet, ot_u16 wait, ot_u8 netstate, ot_u8 channel) {
 8007922:	b510      	push	{r4, lr}
 8007924:	0004      	movs	r4, r0
 8007926:	a802      	add	r0, sp, #8
 8007928:	7800      	ldrb	r0, [r0, #0]
/// Attach session to location specified
    store->applet       = applet;
 800792a:	6021      	str	r1, [r4, #0]
    store->counter      = wait;
 800792c:	80a2      	strh	r2, [r4, #4]
    store->channel      = channel;
 800792e:	71a0      	strb	r0, [r4, #6]
    store->netstate     = netstate;
 8007930:	71e3      	strb	r3, [r4, #7]
    store->extra        = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	7223      	strb	r3, [r4, #8]
    store->dialog_id    = rand_prn8();
 8007936:	f002 fd3d 	bl	800a3b4 <rand_prn8>
 800793a:	7260      	strb	r0, [r4, #9]
    return store;
}
 800793c:	0020      	movs	r0, r4
 800793e:	bd10      	pop	{r4, pc}

08007940 <session_init>:



#ifndef EXTF_session_init
void session_init() {
    session.top = &session.heap[_END];
 8007940:	4b02      	ldr	r3, [pc, #8]	; (800794c <session_init+0xc>)
 8007942:	001a      	movs	r2, r3
 8007944:	3234      	adds	r2, #52	; 0x34
 8007946:	601a      	str	r2, [r3, #0]
}
 8007948:	4770      	bx	lr
 800794a:	46c0      	nop			; (mov r8, r8)
 800794c:	20002758 	.word	0x20002758

08007950 <session_getnext>:
#ifndef EXTF_session_getnext
OT_WEAK ot_uint session_getnext() {
/// Not idiot proof.  Do not call this unless you have already checked
/// session_notempty().
    ot_uint wait;
    wait                    = session.top->counter;
 8007950:	4b02      	ldr	r3, [pc, #8]	; (800795c <session_getnext+0xc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	8898      	ldrh	r0, [r3, #4]
    session.top->counter    = 0;
 8007956:	2200      	movs	r2, #0
 8007958:	809a      	strh	r2, [r3, #4]
    return wait;
}
 800795a:	4770      	bx	lr
 800795c:	20002758 	.word	0x20002758

08007960 <session_new>:
#endif



#ifndef EXTF_session_new
OT_WEAK m2session* session_new(ot_app applet, ot_u16 wait, ot_u8 channel, ot_u8 netstate) {
 8007960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007962:	b083      	sub	sp, #12
 8007964:	0004      	movs	r4, r0
 8007966:	000d      	movs	r5, r1
 8007968:	0017      	movs	r7, r2
 800796a:	001e      	movs	r6, r3
    ot_u8* src;
    ot_uint length;

    // Always reserve an extra session for extension.
    // i.e. There must be two or more free sessions to do session_new()
    if (session.top <= &session.heap[_2ND] ) {
 800796c:	4b0d      	ldr	r3, [pc, #52]	; (80079a4 <session_new+0x44>)
 800796e:	6819      	ldr	r1, [r3, #0]
 8007970:	3310      	adds	r3, #16
 8007972:	4299      	cmp	r1, r3
 8007974:	d914      	bls.n	80079a0 <session_new+0x40>
        return NULL;
    }

    // We're adding a new session to the bottom of the heap/stack/queue...
    src         = (ot_u8*)session.top;
    session.top--;
 8007976:	0008      	movs	r0, r1
 8007978:	380c      	subs	r0, #12
 800797a:	4a0a      	ldr	r2, [pc, #40]	; (80079a4 <session_new+0x44>)
 800797c:	6010      	str	r0, [r2, #0]
    length      = (ot_uint)((ot_u8*)&session.heap[_END] - src);
 800797e:	3234      	adds	r2, #52	; 0x34
 8007980:	1a52      	subs	r2, r2, r1
 8007982:	b292      	uxth	r2, r2

    // Only do the copy if the size is not zero
    if (length != 0) {
 8007984:	2a00      	cmp	r2, #0
 8007986:	d108      	bne.n	800799a <session_new+0x3a>
        memcpy( (ot_u8*)session.top, src, length);
    }

    return sub_store_session(&session.heap[_LAST], applet, wait, netstate, channel);
 8007988:	9700      	str	r7, [sp, #0]
 800798a:	0033      	movs	r3, r6
 800798c:	002a      	movs	r2, r5
 800798e:	0021      	movs	r1, r4
 8007990:	4805      	ldr	r0, [pc, #20]	; (80079a8 <session_new+0x48>)
 8007992:	f7ff ffc6 	bl	8007922 <sub_store_session>
}
 8007996:	b003      	add	sp, #12
 8007998:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy( (ot_u8*)session.top, src, length);
 800799a:	f002 fcbf 	bl	800a31c <ot_memcpy>
 800799e:	e7f3      	b.n	8007988 <session_new+0x28>
        return NULL;
 80079a0:	2000      	movs	r0, #0
 80079a2:	e7f8      	b.n	8007996 <session_new+0x36>
 80079a4:	20002758 	.word	0x20002758
 80079a8:	20002780 	.word	0x20002780

080079ac <session_extend>:
#endif



#ifndef EXTF_session_extend
OT_WEAK m2session* session_extend(ot_app applet, ot_u16 wait, ot_u8 channel, ot_u8 netstate) {
 80079ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ae:	b085      	sub	sp, #20
 80079b0:	9003      	str	r0, [sp, #12]
 80079b2:	000e      	movs	r6, r1
 80079b4:	0017      	movs	r7, r2
 80079b6:	001d      	movs	r5, r3
    m2session* extend;

    // If not one free session, there's no room!
    if (session.top <= &session.heap[_1ST]) {
 80079b8:	4b10      	ldr	r3, [pc, #64]	; (80079fc <session_extend+0x50>)
 80079ba:	cb02      	ldmia	r3!, {r1}
 80079bc:	4299      	cmp	r1, r3
 80079be:	d91b      	bls.n	80079f8 <session_extend+0x4c>
        return NULL;
    }

    // We're adding a new session...
    session.top--;
 80079c0:	0008      	movs	r0, r1
 80079c2:	380c      	subs	r0, #12
 80079c4:	4b0d      	ldr	r3, [pc, #52]	; (80079fc <session_extend+0x50>)
 80079c6:	6018      	str	r0, [r3, #0]
    // If the new session is on the last spot, it means the heap is actually
    // empty, so no movement is necessary.  If heap is not empty and not full
    // (we know this by condition above and condition below), go through the
    // session heap to see where to put this extended session, and move all
    // higher data one spot up.
    if (extend < &session.heap[_LAST]) {
 80079c8:	3328      	adds	r3, #40	; 0x28
 80079ca:	4298      	cmp	r0, r3
 80079cc:	d20c      	bcs.n	80079e8 <session_extend+0x3c>
    extend = session.top;
 80079ce:	0004      	movs	r4, r0
        do {
            // Increment session, noting that first increment simply counters
            // "session.top--" above.
            extend++;
 80079d0:	340c      	adds	r4, #12

            // Inspect following session. If it is INIT, then we extend the
            // session sequence below this point.  Else, following session is
            // still part of the current session sequence, so keep looking.
            if (extend[1].netstate & M2_NETSTATE_INIT) {
 80079d2:	7ce3      	ldrb	r3, [r4, #19]
 80079d4:	071b      	lsls	r3, r3, #28
 80079d6:	d402      	bmi.n	80079de <session_extend+0x32>
                break;
            }

            // The above "if (session.top <= &session.heap[_1ST])" make it OK
            // if we are at the 1st place in the session heap
        } while (extend < &session.heap[_LAST]);
 80079d8:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <session_extend+0x54>)
 80079da:	429c      	cmp	r4, r3
 80079dc:	d3f8      	bcc.n	80079d0 <session_extend+0x24>

        // Shift the stack down one notch, from top to extension point.
        memcpy( (ot_u8*)session.top,
                (ot_u8*)&session.top[1],
                (ot_uint)((ot_u8*)extend - (ot_u8*)session.top) );
 80079de:	1a22      	subs	r2, r4, r0
        memcpy( (ot_u8*)session.top,
 80079e0:	b292      	uxth	r2, r2
 80079e2:	f002 fc9b 	bl	800a31c <ot_memcpy>
            extend++;
 80079e6:	0020      	movs	r0, r4
    }

    return sub_store_session(extend, applet, wait, channel, netstate);
 80079e8:	9500      	str	r5, [sp, #0]
 80079ea:	003b      	movs	r3, r7
 80079ec:	0032      	movs	r2, r6
 80079ee:	9903      	ldr	r1, [sp, #12]
 80079f0:	f7ff ff97 	bl	8007922 <sub_store_session>
}
 80079f4:	b005      	add	sp, #20
 80079f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NULL;
 80079f8:	2000      	movs	r0, #0
 80079fa:	e7fb      	b.n	80079f4 <session_extend+0x48>
 80079fc:	20002758 	.word	0x20002758
 8007a00:	20002780 	.word	0x20002780

08007a04 <session_app_purge>:
OT_WEAK void session_app_purge(ot_app applet) {
///@todo At present the purge leaves the session-session timing delays intact.
///      Need to determine what the right approach is: either set delays to 0
///      or leave as programmed.
    m2session* next;
    next = session.top;
 8007a04:	4b07      	ldr	r3, [pc, #28]	; (8007a24 <session_app_purge+0x20>)
 8007a06:	681b      	ldr	r3, [r3, #0]

    while (next < &session.heap[_END]) {
 8007a08:	e000      	b.n	8007a0c <session_app_purge+0x8>
        if (next->applet == applet) {
            next->applet    = &session_applet_null;
            next->netstate  = M2_NETSTATE_SCRAP;
        }
        next++;
 8007a0a:	330c      	adds	r3, #12
    while (next < &session.heap[_END]) {
 8007a0c:	4a06      	ldr	r2, [pc, #24]	; (8007a28 <session_app_purge+0x24>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d207      	bcs.n	8007a22 <session_app_purge+0x1e>
        if (next->applet == applet) {
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	4282      	cmp	r2, r0
 8007a16:	d1f8      	bne.n	8007a0a <session_app_purge+0x6>
            next->applet    = &session_applet_null;
 8007a18:	4a04      	ldr	r2, [pc, #16]	; (8007a2c <session_app_purge+0x28>)
 8007a1a:	601a      	str	r2, [r3, #0]
            next->netstate  = M2_NETSTATE_SCRAP;
 8007a1c:	2204      	movs	r2, #4
 8007a1e:	71da      	strb	r2, [r3, #7]
 8007a20:	e7f3      	b.n	8007a0a <session_app_purge+0x6>
    }
}
 8007a22:	4770      	bx	lr
 8007a24:	20002758 	.word	0x20002758
 8007a28:	2000278c 	.word	0x2000278c
 8007a2c:	08007921 	.word	0x08007921

08007a30 <session_app_isloaded>:


#ifndef EXTF_session_app_isloaded
OT_WEAK ot_bool session_app_isloaded(ot_app applet) {
    m2session* next;
    next = session.top;
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <session_app_isloaded+0x20>)
 8007a32:	681b      	ldr	r3, [r3, #0]

    while ((next->applet != applet) && (next < &session.heap[_END])) {
 8007a34:	e000      	b.n	8007a38 <session_app_isloaded+0x8>
        next++;
 8007a36:	330c      	adds	r3, #12
    while ((next->applet != applet) && (next < &session.heap[_END])) {
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	4282      	cmp	r2, r0
 8007a3c:	d002      	beq.n	8007a44 <session_app_isloaded+0x14>
 8007a3e:	4a05      	ldr	r2, [pc, #20]	; (8007a54 <session_app_isloaded+0x24>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d3f8      	bcc.n	8007a36 <session_app_isloaded+0x6>
    }
    return (ot_bool)(next < &session.heap[_END]);
 8007a44:	4803      	ldr	r0, [pc, #12]	; (8007a54 <session_app_isloaded+0x24>)
 8007a46:	4283      	cmp	r3, r0
 8007a48:	4180      	sbcs	r0, r0
 8007a4a:	4240      	negs	r0, r0
}
 8007a4c:	4770      	bx	lr
 8007a4e:	46c0      	nop			; (mov r8, r8)
 8007a50:	20002758 	.word	0x20002758
 8007a54:	2000278c 	.word	0x2000278c

08007a58 <session_scrap>:
}
#endif


#ifndef EXTF_session_scrap
OT_WEAK void session_scrap(void) {
 8007a58:	b510      	push	{r4, lr}
    if (session.top != &session.heap[_END]) {
 8007a5a:	4b08      	ldr	r3, [pc, #32]	; (8007a7c <session_scrap+0x24>)
 8007a5c:	6818      	ldr	r0, [r3, #0]
 8007a5e:	3334      	adds	r3, #52	; 0x34
 8007a60:	4298      	cmp	r0, r3
 8007a62:	d009      	beq.n	8007a78 <session_scrap+0x20>
        m2session* old_top;
        old_top = session.top++;
 8007a64:	0003      	movs	r3, r0
 8007a66:	330c      	adds	r3, #12
 8007a68:	4a04      	ldr	r2, [pc, #16]	; (8007a7c <session_scrap+0x24>)
 8007a6a:	6013      	str	r3, [r2, #0]

        if (old_top->applet != NULL) {
 8007a6c:	6803      	ldr	r3, [r0, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d002      	beq.n	8007a78 <session_scrap+0x20>
            old_top->netstate = M2_NETSTATE_SCRAP;
 8007a72:	2204      	movs	r2, #4
 8007a74:	71c2      	strb	r2, [r0, #7]
            old_top->applet(old_top);
 8007a76:	4798      	blx	r3
        }
    }
}
 8007a78:	bd10      	pop	{r4, pc}
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	20002758 	.word	0x20002758

08007a80 <session_pop>:
#ifndef EXTF_session_pop
OT_WEAK void session_pop() {
/// session.top++ will pop a session, but this routine includes protection
/// against less-than-perfect API usage by assuring that session.top is
/// only incremented when in bounds.
    if (session.top != &session.heap[_END])
 8007a80:	4b04      	ldr	r3, [pc, #16]	; (8007a94 <session_pop+0x14>)
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	3334      	adds	r3, #52	; 0x34
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d002      	beq.n	8007a90 <session_pop+0x10>
        session.top++;
 8007a8a:	320c      	adds	r2, #12
 8007a8c:	4b01      	ldr	r3, [pc, #4]	; (8007a94 <session_pop+0x14>)
 8007a8e:	601a      	str	r2, [r3, #0]
}
 8007a90:	4770      	bx	lr
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	20002758 	.word	0x20002758

08007a98 <session_top>:
#endif


#ifndef EXTF_session_top
OT_WEAK m2session* session_top() {
    return session.top;
 8007a98:	4b01      	ldr	r3, [pc, #4]	; (8007aa0 <session_top+0x8>)
 8007a9a:	6818      	ldr	r0, [r3, #0]
}
 8007a9c:	4770      	bx	lr
 8007a9e:	46c0      	nop			; (mov r8, r8)
 8007aa0:	20002758 	.word	0x20002758

08007aa4 <session_continue>:
OT_WEAK m2session* session_continue(ot_app applet, ot_u8 next_state, ot_uint wait) {
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa6:	0006      	movs	r6, r0
 8007aa8:	000d      	movs	r5, r1
 8007aaa:	0017      	movs	r7, r2
    active      = session_top();
 8007aac:	f7ff fff4 	bl	8007a98 <session_top>
 8007ab0:	0004      	movs	r4, r0
    netstate    = (active->netstate & 0x0F) | M2_NETSTATE_CONNECTED | next_state;
 8007ab2:	79c2      	ldrb	r2, [r0, #7]
 8007ab4:	230e      	movs	r3, #14
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	431d      	orrs	r5, r3
 8007aba:	2301      	movs	r3, #1
 8007abc:	432b      	orrs	r3, r5
    next = session_extend(applet, /*dll.comm.tc +*/ wait, active->channel, netstate);
 8007abe:	7982      	ldrb	r2, [r0, #6]
 8007ac0:	0039      	movs	r1, r7
 8007ac2:	0030      	movs	r0, r6
 8007ac4:	f7ff ff72 	bl	80079ac <session_extend>
    if (next) {
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d009      	beq.n	8007ae0 <session_continue+0x3c>
        next->extra     = active->extra;
 8007acc:	7a23      	ldrb	r3, [r4, #8]
 8007ace:	7203      	strb	r3, [r0, #8]
        next->dialog_id = active->dialog_id++;
 8007ad0:	7a63      	ldrb	r3, [r4, #9]
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	7262      	strb	r2, [r4, #9]
 8007ad6:	7243      	strb	r3, [r0, #9]
        next->subnet    = active->subnet;
 8007ad8:	7aa3      	ldrb	r3, [r4, #10]
 8007ada:	7283      	strb	r3, [r0, #10]
        next->flags     = active->flags;
 8007adc:	7ae3      	ldrb	r3, [r4, #11]
 8007ade:	72c3      	strb	r3, [r0, #11]
}
 8007ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ae4 <session_numfree>:
#endif


#ifndef EXTF_session_numfree
OT_WEAK ot_int session_numfree() {
 8007ae4:	b510      	push	{r4, lr}
    ot_uint block;
    block   = (ot_uint)((ot_u8*)session.top - (ot_u8*)&session.heap[_1ST]);
 8007ae6:	4b05      	ldr	r3, [pc, #20]	; (8007afc <session_numfree+0x18>)
 8007ae8:	cb01      	ldmia	r3!, {r0}
 8007aea:	1ac0      	subs	r0, r0, r3
 8007aec:	b280      	uxth	r0, r0
    block  /= sizeof(m2session);
 8007aee:	210c      	movs	r1, #12
 8007af0:	f7f8 fb0a 	bl	8000108 <__udivsi3>
 8007af4:	b280      	uxth	r0, r0
    block  -= 1;            //because we always keep one free for extensions
 8007af6:	3801      	subs	r0, #1

    return (ot_int)block;
 8007af8:	b200      	sxth	r0, r0
}
 8007afa:	bd10      	pop	{r4, pc}
 8007afc:	20002758 	.word	0x20002758

08007b00 <session_notempty>:
#endif


#ifndef EXTF_session_notempty
OT_WEAK ot_bool session_notempty() {
    return (session.top < &session.heap[_END]);
 8007b00:	4b03      	ldr	r3, [pc, #12]	; (8007b10 <session_notempty+0x10>)
 8007b02:	6818      	ldr	r0, [r3, #0]
 8007b04:	3334      	adds	r3, #52	; 0x34
 8007b06:	4298      	cmp	r0, r3
 8007b08:	4180      	sbcs	r0, r0
 8007b0a:	4240      	negs	r0, r0
}
 8007b0c:	4770      	bx	lr
 8007b0e:	46c0      	nop			; (mov r8, r8)
 8007b10:	20002758 	.word	0x20002758

08007b14 <session_flush>:
OT_WEAK void session_flush() {
 8007b14:	b510      	push	{r4, lr}
    while (session_notempty()) {
 8007b16:	f7ff fff3 	bl	8007b00 <session_notempty>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d008      	beq.n	8007b30 <session_flush+0x1c>
        if (session.top->netstate & M2_NETSTATE_INIT) {
 8007b1e:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <session_flush+0x20>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	79da      	ldrb	r2, [r3, #7]
 8007b24:	0712      	lsls	r2, r2, #28
 8007b26:	d403      	bmi.n	8007b30 <session_flush+0x1c>
        session.top++;      //session_pop();
 8007b28:	330c      	adds	r3, #12
 8007b2a:	4a02      	ldr	r2, [pc, #8]	; (8007b34 <session_flush+0x20>)
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	e7f2      	b.n	8007b16 <session_flush+0x2>
}
 8007b30:	bd10      	pop	{r4, pc}
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	20002758 	.word	0x20002758

08007b38 <session_follower>:



#ifndef EXTF_session_follower
OT_WEAK m2session* session_follower() {
    if (session.top < &session.heap[_LAST]) {
 8007b38:	4b04      	ldr	r3, [pc, #16]	; (8007b4c <session_follower+0x14>)
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	3328      	adds	r3, #40	; 0x28
 8007b3e:	4298      	cmp	r0, r3
 8007b40:	d201      	bcs.n	8007b46 <session_follower+0xe>
        return &session.top[1];
 8007b42:	300c      	adds	r0, #12
    }
    return NULL;
}
 8007b44:	4770      	bx	lr
    return NULL;
 8007b46:	2000      	movs	r0, #0
 8007b48:	e7fc      	b.n	8007b44 <session_follower+0xc>
 8007b4a:	46c0      	nop			; (mov r8, r8)
 8007b4c:	20002758 	.word	0x20002758

08007b50 <session_follower_wait>:
#endif


#ifndef EXTF_session_follower_wait
OT_WEAK ot_u16 session_follower_wait() {
    if (session.top < &session.heap[_LAST]) {
 8007b50:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <session_follower_wait+0x14>)
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	3328      	adds	r3, #40	; 0x28
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d201      	bcs.n	8007b5e <session_follower_wait+0xe>
        return session.top[1].counter;
 8007b5a:	8a10      	ldrh	r0, [r2, #16]
    }
    return 65535;
}
 8007b5c:	4770      	bx	lr
    return 65535;
 8007b5e:	4802      	ldr	r0, [pc, #8]	; (8007b68 <session_follower_wait+0x18>)
 8007b60:	e7fc      	b.n	8007b5c <session_follower_wait+0xc>
 8007b62:	46c0      	nop			; (mov r8, r8)
 8007b64:	20002758 	.word	0x20002758
 8007b68:	0000ffff 	.word	0x0000ffff

08007b6c <session_netstate>:



#ifndef EXTF_session_netstate
OT_WEAK ot_u8 session_netstate() {
    return session.top->netstate;
 8007b6c:	4b01      	ldr	r3, [pc, #4]	; (8007b74 <session_netstate+0x8>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	79d8      	ldrb	r0, [r3, #7]
}
 8007b72:	4770      	bx	lr
 8007b74:	20002758 	.word	0x20002758

08007b78 <sub_opgroup_scinit>:



void sub_opgroup_scinit(void) {
/// This is an SCTP command.  RFU
}
 8007b78:	4770      	bx	lr

08007b7a <sub_opgroup_sctransport>:



void sub_opgroup_sctransport(void) {
/// This is an SCTP command.  RFU
}
 8007b7a:	4770      	bx	lr

08007b7c <sub_load_charcorrelation>:
/** Protocol File Loading Subroutines <BR>
  * ========================================================================<BR>
  * - Used as the load_function() argument to sub_load_isf()
  */

ot_int sub_load_charcorrelation(ot_int* cursor, ot_u8 data_byte) {
 8007b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ot_int c;
    ot_u8* local_buf;

    /// The datastream is buffered in an unused part of the data-queue.
    /// The LOCAL_U8() macro behaves similar to array nomenclature
    local_buf = &LOCAL_U8(0);
 8007b7e:	4b1c      	ldr	r3, [pc, #112]	; (8007bf0 <sub_load_charcorrelation+0x74>)
 8007b80:	68dc      	ldr	r4, [r3, #12]
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	3b10      	subs	r3, #16
 8007b86:	18e4      	adds	r4, r4, r3
    local_buf[*cursor] = data_byte;
 8007b88:	2200      	movs	r2, #0
 8007b8a:	5e83      	ldrsh	r3, [r0, r2]
 8007b8c:	54e1      	strb	r1, [r4, r3]

    /// If the datastream is *not* fully pre-buffered, return to the caller.
    /// If the datastream is fully pre-buffered, then proceed to correlation.
    if ( *cursor < (m2qp.qtmpl.length-1) ) {
 8007b8e:	2300      	movs	r3, #0
 8007b90:	5ec2      	ldrsh	r2, [r0, r3]
 8007b92:	4b18      	ldr	r3, [pc, #96]	; (8007bf4 <sub_load_charcorrelation+0x78>)
 8007b94:	7a5b      	ldrb	r3, [r3, #9]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	db02      	blt.n	8007ba2 <sub_load_charcorrelation+0x26>
    /// Equality Correlation with data shifting of the buffer after each
    /// comparison operation.  The value c is the comparison score.  It is a
    /// bipolar accumulator, so a non-equality alters the score by -1 and an
    /// equality by +1.  It is implemented as c += (0 or 2) - 1
    else {
        for (i=0, c=0; i<m2qp.qtmpl.length; i++) {
 8007b9c:	2700      	movs	r7, #0
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e00c      	b.n	8007bbc <sub_load_charcorrelation+0x40>
        (*cursor)++;
 8007ba2:	3201      	adds	r2, #1
 8007ba4:	8002      	strh	r2, [r0, #0]
        return 0;
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	e021      	b.n	8007bee <sub_load_charcorrelation+0x72>
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 8007baa:	2200      	movs	r2, #0
 8007bac:	19d2      	adds	r2, r2, r7
 8007bae:	b292      	uxth	r2, r2
                   (m2qp.qtmpl.value[i] & m2qp.qtmpl.mask[i]) ) << 1;
            c -= 1;
 8007bb0:	3a01      	subs	r2, #1
 8007bb2:	b217      	sxth	r7, r2

            local_buf[i-1] = local_buf[i];
 8007bb4:	3901      	subs	r1, #1
 8007bb6:	5465      	strb	r5, [r4, r1]
        for (i=0, c=0; i<m2qp.qtmpl.length; i++) {
 8007bb8:	3301      	adds	r3, #1
 8007bba:	b21b      	sxth	r3, r3
 8007bbc:	4a0d      	ldr	r2, [pc, #52]	; (8007bf4 <sub_load_charcorrelation+0x78>)
 8007bbe:	7a52      	ldrb	r2, [r2, #9]
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	da0b      	bge.n	8007bdc <sub_load_charcorrelation+0x60>
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 8007bc4:	0019      	movs	r1, r3
 8007bc6:	5ce5      	ldrb	r5, [r4, r3]
                   (m2qp.qtmpl.value[i] & m2qp.qtmpl.mask[i]) ) << 1;
 8007bc8:	4e0a      	ldr	r6, [pc, #40]	; (8007bf4 <sub_load_charcorrelation+0x78>)
 8007bca:	6932      	ldr	r2, [r6, #16]
 8007bcc:	5cd0      	ldrb	r0, [r2, r3]
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 8007bce:	68f2      	ldr	r2, [r6, #12]
 8007bd0:	5cd2      	ldrb	r2, [r2, r3]
 8007bd2:	4068      	eors	r0, r5
 8007bd4:	4210      	tst	r0, r2
 8007bd6:	d1e8      	bne.n	8007baa <sub_load_charcorrelation+0x2e>
 8007bd8:	2202      	movs	r2, #2
 8007bda:	e7e7      	b.n	8007bac <sub_load_charcorrelation+0x30>

    /// One parameter of the correlation query is a correlation threshold.  It
    /// occupies the lower 5 bits of the query code.  It is an integer value.
    /// Scores higher than the threshold are passing scores.  The query score
    /// indicates the number of hits the query made on the file data.
    return (c >= (ot_int)(m2qp.qtmpl.code & 0x1F));
 8007bdc:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <sub_load_charcorrelation+0x78>)
 8007bde:	7a1a      	ldrb	r2, [r3, #8]
 8007be0:	231f      	movs	r3, #31
 8007be2:	4013      	ands	r3, r2
 8007be4:	17f8      	asrs	r0, r7, #31
 8007be6:	0fda      	lsrs	r2, r3, #31
 8007be8:	429f      	cmp	r7, r3
 8007bea:	4150      	adcs	r0, r2
 8007bec:	b200      	sxth	r0, r0
}
 8007bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bf0:	20002df4 	.word	0x20002df4
 8007bf4:	2000278c 	.word	0x2000278c

08007bf8 <sub_load_comparison>:


ot_int sub_load_comparison(ot_int* cursor, ot_u8 data_byte) {
 8007bf8:	b530      	push	{r4, r5, lr}
/// Just loads comparison data, from the file system, into the local buffer.
/// Comparison is limited to16 bytes per the Mode 2 Spec.
    LOCAL_U8(*cursor) = data_byte;
 8007bfa:	4b07      	ldr	r3, [pc, #28]	; (8007c18 <sub_load_comparison+0x20>)
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	3b10      	subs	r3, #16
 8007c02:	2500      	movs	r5, #0
 8007c04:	5f44      	ldrsh	r4, [r0, r5]
 8007c06:	191b      	adds	r3, r3, r4
 8007c08:	54d1      	strb	r1, [r2, r3]
    (*cursor)++;
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	5e83      	ldrsh	r3, [r0, r2]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	8003      	strh	r3, [r0, #0]
    return 0;
}
 8007c12:	2000      	movs	r0, #0
 8007c14:	bd30      	pop	{r4, r5, pc}
 8007c16:	46c0      	nop			; (mov r8, r8)
 8007c18:	20002df4 	.word	0x20002df4

08007c1c <sub_load_return>:


ot_int sub_load_return(ot_int* cursor, ot_u8 data_byte) {
 8007c1c:	b510      	push	{r4, lr}
 8007c1e:	0004      	movs	r4, r0
/// Just loads file data into the TX queue.
    q_writebyte(&txq, data_byte);
 8007c20:	4804      	ldr	r0, [pc, #16]	; (8007c34 <sub_load_return+0x18>)
 8007c22:	f001 f84d 	bl	8008cc0 <q_writebyte>
    (*cursor)++;
 8007c26:	2200      	movs	r2, #0
 8007c28:	5ea3      	ldrsh	r3, [r4, r2]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	8023      	strh	r3, [r4, #0]
    return 0;
}
 8007c2e:	2000      	movs	r0, #0
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	46c0      	nop			; (mov r8, r8)
 8007c34:	20002df4 	.word	0x20002df4

08007c38 <sub_opgroup_globalisf>:
void sub_opgroup_globalisf(void) {
 8007c38:	b510      	push	{r4, lr}
    M2QP_CB_ISF();
 8007c3a:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <sub_opgroup_globalisf+0x18>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	210f      	movs	r1, #15
 8007c40:	4019      	ands	r1, r3
 8007c42:	2070      	movs	r0, #112	; 0x70
 8007c44:	4018      	ands	r0, r3
 8007c46:	4a03      	ldr	r2, [pc, #12]	; (8007c54 <sub_opgroup_globalisf+0x1c>)
 8007c48:	f7f9 fcaa 	bl	80015a0 <m2qp_sig_isf>
}
 8007c4c:	bd10      	pop	{r4, pc}
 8007c4e:	46c0      	nop			; (mov r8, r8)
 8007c50:	2000278c 	.word	0x2000278c
 8007c54:	20002728 	.word	0x20002728

08007c58 <sub_opgroup_udp>:
void sub_opgroup_udp(void) {
 8007c58:	b510      	push	{r4, lr}
    rxq.putcursor = rxq.back;
 8007c5a:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <sub_opgroup_udp+0x2c>)
 8007c5c:	691a      	ldr	r2, [r3, #16]
 8007c5e:	609a      	str	r2, [r3, #8]
    status  = alp_parse_message(&m2alp, &m2np.rt.dlog);
 8007c60:	4909      	ldr	r1, [pc, #36]	; (8007c88 <sub_opgroup_udp+0x30>)
 8007c62:	480a      	ldr	r0, [pc, #40]	; (8007c8c <sub_opgroup_udp+0x34>)
 8007c64:	f000 fec6 	bl	80089f4 <alp_parse_message>
    if (status == MSG_Null) {
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	d000      	beq.n	8007c6e <sub_opgroup_udp+0x16>
}
 8007c6c:	bd10      	pop	{r4, pc}
        M2QP_CB_ISF();
 8007c6e:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <sub_opgroup_udp+0x38>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	210f      	movs	r1, #15
 8007c74:	4019      	ands	r1, r3
 8007c76:	3070      	adds	r0, #112	; 0x70
 8007c78:	4018      	ands	r0, r3
 8007c7a:	4a03      	ldr	r2, [pc, #12]	; (8007c88 <sub_opgroup_udp+0x30>)
 8007c7c:	f7f9 fc90 	bl	80015a0 <m2qp_sig_isf>
}
 8007c80:	e7f4      	b.n	8007c6c <sub_opgroup_udp+0x14>
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	20002de0 	.word	0x20002de0
 8007c88:	20002728 	.word	0x20002728
 8007c8c:	200027a0 	.word	0x200027a0
 8007c90:	2000278c 	.word	0x2000278c

08007c94 <m2qp_sig_ctl>:
OT_WEAK ot_bool m2qp_sig_ctl(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 8007c94:	2000      	movs	r0, #0
 8007c96:	4770      	bx	lr

08007c98 <m2qp_sig_a2p>:
OT_WEAK ot_bool m2qp_sig_a2p(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 8007c98:	2000      	movs	r0, #0
 8007c9a:	4770      	bx	lr

08007c9c <m2qp_init>:
OT_WEAK void m2qp_init() {
 8007c9c:	b510      	push	{r4, lr}
    m2qp.cmd.code = 0x1F;
 8007c9e:	4b04      	ldr	r3, [pc, #16]	; (8007cb0 <m2qp_init+0x14>)
 8007ca0:	221f      	movs	r2, #31
 8007ca2:	701a      	strb	r2, [r3, #0]
    alp_init(&m2alp, &rxq, &txq);
 8007ca4:	4a03      	ldr	r2, [pc, #12]	; (8007cb4 <m2qp_init+0x18>)
 8007ca6:	4904      	ldr	r1, [pc, #16]	; (8007cb8 <m2qp_init+0x1c>)
 8007ca8:	4804      	ldr	r0, [pc, #16]	; (8007cbc <m2qp_init+0x20>)
 8007caa:	f000 fe9c 	bl	80089e6 <alp_init>
}
 8007cae:	bd10      	pop	{r4, pc}
 8007cb0:	2000278c 	.word	0x2000278c
 8007cb4:	20002df4 	.word	0x20002df4
 8007cb8:	20002de0 	.word	0x20002de0
 8007cbc:	200027a0 	.word	0x200027a0

08007cc0 <sub_parse_response>:
ot_int sub_parse_response(m2session* active) {
 8007cc0:	b570      	push	{r4, r5, r6, lr}
    req_cmdcode     = m2qp.cmd.code;
 8007cc2:	4d17      	ldr	r5, [pc, #92]	; (8007d20 <sub_parse_response+0x60>)
 8007cc4:	782c      	ldrb	r4, [r5, #0]
    m2qp.cmd.code   = q_readbyte(&rxq);
 8007cc6:	4817      	ldr	r0, [pc, #92]	; (8007d24 <sub_parse_response+0x64>)
 8007cc8:	f001 f829 	bl	8008d1e <q_readbyte>
 8007ccc:	7028      	strb	r0, [r5, #0]
    if (((req_cmdcode ^ m2qp.cmd.code) & 0x0F) == 0) {
 8007cce:	4060      	eors	r0, r4
 8007cd0:	0703      	lsls	r3, r0, #28
 8007cd2:	d10a      	bne.n	8007cea <sub_parse_response+0x2a>
        if (((req_cmdcode & 0x60) == M2TT_REQ_M_INIT) && (q_writespace(&txq) > 48)) {
 8007cd4:	2360      	movs	r3, #96	; 0x60
 8007cd6:	4023      	ands	r3, r4
 8007cd8:	2b40      	cmp	r3, #64	; 0x40
 8007cda:	d009      	beq.n	8007cf0 <sub_parse_response+0x30>
            opgroup_proc[((req_cmdcode>>1) & 7)]();
 8007cdc:	0864      	lsrs	r4, r4, #1
 8007cde:	2307      	movs	r3, #7
 8007ce0:	401c      	ands	r4, r3
 8007ce2:	00a4      	lsls	r4, r4, #2
 8007ce4:	4b10      	ldr	r3, [pc, #64]	; (8007d28 <sub_parse_response+0x68>)
 8007ce6:	58e3      	ldr	r3, [r4, r3]
 8007ce8:	4798      	blx	r3
    return -1; //(ot_int)test - 1;
 8007cea:	2001      	movs	r0, #1
}
 8007cec:	4240      	negs	r0, r0
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
        if (((req_cmdcode & 0x60) == M2TT_REQ_M_INIT) && (q_writespace(&txq) > 48)) {
 8007cf0:	480e      	ldr	r0, [pc, #56]	; (8007d2c <sub_parse_response+0x6c>)
 8007cf2:	f000 ffb7 	bl	8008c64 <q_writespace>
 8007cf6:	2830      	cmp	r0, #48	; 0x30
 8007cf8:	ddf0      	ble.n	8007cdc <sub_parse_response+0x1c>
            txq.getcursor[0]++;
 8007cfa:	480c      	ldr	r0, [pc, #48]	; (8007d2c <sub_parse_response+0x6c>)
 8007cfc:	6842      	ldr	r2, [r0, #4]
 8007cfe:	7813      	ldrb	r3, [r2, #0]
 8007d00:	3301      	adds	r3, #1
 8007d02:	7013      	strb	r3, [r2, #0]
            q_writestring(&txq, m2np.rt.dlog.value, m2np.rt.dlog.length);
 8007d04:	4d0a      	ldr	r5, [pc, #40]	; (8007d30 <sub_parse_response+0x70>)
 8007d06:	792a      	ldrb	r2, [r5, #4]
 8007d08:	68a9      	ldr	r1, [r5, #8]
 8007d0a:	f001 f838 	bl	8008d7e <q_writestring>
            test = (ot_u8)M2QP_CB_A2P();
 8007d0e:	1d2a      	adds	r2, r5, #4
 8007d10:	2100      	movs	r1, #0
 8007d12:	2000      	movs	r0, #0
 8007d14:	f7ff ffc0 	bl	8007c98 <m2qp_sig_a2p>
        if (test) {
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d1df      	bne.n	8007cdc <sub_parse_response+0x1c>
 8007d1c:	e7e5      	b.n	8007cea <sub_parse_response+0x2a>
 8007d1e:	46c0      	nop			; (mov r8, r8)
 8007d20:	2000278c 	.word	0x2000278c
 8007d24:	20002de0 	.word	0x20002de0
 8007d28:	0800c538 	.word	0x0800c538
 8007d2c:	20002df4 	.word	0x20002df4
 8007d30:	20002724 	.word	0x20002724

08007d34 <sub_parse_control>:
ot_int sub_parse_control(m2session* active) {
 8007d34:	b570      	push	{r4, r5, r6, lr}
    code    = q_readbyte(&rxq);
 8007d36:	4c07      	ldr	r4, [pc, #28]	; (8007d54 <sub_parse_control+0x20>)
 8007d38:	0020      	movs	r0, r4
 8007d3a:	f000 fff0 	bl	8008d1e <q_readbyte>
 8007d3e:	0005      	movs	r5, r0
    subcode = q_readbyte(&rxq);
 8007d40:	0020      	movs	r0, r4
 8007d42:	f000 ffec 	bl	8008d1e <q_readbyte>
 8007d46:	0001      	movs	r1, r0
    return (ot_int)M2QP_CB_ERROR(code, subcode);
 8007d48:	4a03      	ldr	r2, [pc, #12]	; (8007d58 <sub_parse_control+0x24>)
 8007d4a:	0028      	movs	r0, r5
 8007d4c:	f7ff ffa2 	bl	8007c94 <m2qp_sig_ctl>
 8007d50:	b200      	sxth	r0, r0
}
 8007d52:	bd70      	pop	{r4, r5, r6, pc}
 8007d54:	20002de0 	.word	0x20002de0
 8007d58:	20002728 	.word	0x20002728

08007d5c <sub_renack>:
void sub_renack(ot_int nack) {
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	0001      	movs	r1, r0
    txq.getcursor[-1]  |= 0x10;     //M2QP Nack Bit
 8007d60:	4807      	ldr	r0, [pc, #28]	; (8007d80 <sub_renack+0x24>)
 8007d62:	6843      	ldr	r3, [r0, #4]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	781a      	ldrb	r2, [r3, #0]
 8007d68:	2410      	movs	r4, #16
 8007d6a:	4322      	orrs	r2, r4
 8007d6c:	701a      	strb	r2, [r3, #0]
    txq.front[3]       |= 1;        //DLL Nack Bit ///@todo wrap into DLL layer
 8007d6e:	68c2      	ldr	r2, [r0, #12]
 8007d70:	78d3      	ldrb	r3, [r2, #3]
 8007d72:	2401      	movs	r4, #1
 8007d74:	4323      	orrs	r3, r4
 8007d76:	70d3      	strb	r3, [r2, #3]
    q_writebyte(&txq, (ot_u8)nack);
 8007d78:	b2c9      	uxtb	r1, r1
 8007d7a:	f000 ffa1 	bl	8008cc0 <q_writebyte>
}
 8007d7e:	bd10      	pop	{r4, pc}
 8007d80:	20002df4 	.word	0x20002df4

08007d84 <sub_opgroup_rfu>:
void sub_opgroup_rfu(void) {
 8007d84:	b510      	push	{r4, lr}
    sub_renack(1);
 8007d86:	2001      	movs	r0, #1
 8007d88:	f7ff ffe8 	bl	8007d5c <sub_renack>
}
 8007d8c:	bd10      	pop	{r4, pc}
	...

08007d90 <sub_load_query>:
void sub_load_query(void) {
 8007d90:	b570      	push	{r4, r5, r6, lr}
    m2qp.qtmpl.length = q_readbyte(&rxq);
 8007d92:	4d0f      	ldr	r5, [pc, #60]	; (8007dd0 <sub_load_query+0x40>)
 8007d94:	0028      	movs	r0, r5
 8007d96:	f000 ffc2 	bl	8008d1e <q_readbyte>
 8007d9a:	4c0e      	ldr	r4, [pc, #56]	; (8007dd4 <sub_load_query+0x44>)
 8007d9c:	7260      	strb	r0, [r4, #9]
    m2qp.qtmpl.code   = q_readbyte(&rxq);
 8007d9e:	0028      	movs	r0, r5
 8007da0:	f000 ffbd 	bl	8008d1e <q_readbyte>
 8007da4:	7220      	strb	r0, [r4, #8]
    if ((m2qp.qtmpl.code & M2QC_MASKED) != 0) {
 8007da6:	b240      	sxtb	r0, r0
 8007da8:	2800      	cmp	r0, #0
 8007daa:	db0a      	blt.n	8007dc2 <sub_load_query+0x32>
        m2qp.qtmpl.mask = (ot_u8*)fixed_mask;
 8007dac:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <sub_load_query+0x48>)
 8007dae:	4a09      	ldr	r2, [pc, #36]	; (8007dd4 <sub_load_query+0x44>)
 8007db0:	3320      	adds	r3, #32
 8007db2:	60d3      	str	r3, [r2, #12]
    m2qp.qtmpl.value  = q_markbyte(&rxq, m2qp.qtmpl.length);
 8007db4:	4c07      	ldr	r4, [pc, #28]	; (8007dd4 <sub_load_query+0x44>)
 8007db6:	7a61      	ldrb	r1, [r4, #9]
 8007db8:	4805      	ldr	r0, [pc, #20]	; (8007dd0 <sub_load_query+0x40>)
 8007dba:	f000 ff7c 	bl	8008cb6 <q_markbyte>
 8007dbe:	6120      	str	r0, [r4, #16]
}
 8007dc0:	bd70      	pop	{r4, r5, r6, pc}
        m2qp.qtmpl.mask = q_markbyte(&rxq, m2qp.qtmpl.length);
 8007dc2:	4c04      	ldr	r4, [pc, #16]	; (8007dd4 <sub_load_query+0x44>)
 8007dc4:	7a61      	ldrb	r1, [r4, #9]
 8007dc6:	4802      	ldr	r0, [pc, #8]	; (8007dd0 <sub_load_query+0x40>)
 8007dc8:	f000 ff75 	bl	8008cb6 <q_markbyte>
 8007dcc:	60e0      	str	r0, [r4, #12]
 8007dce:	e7f1      	b.n	8007db4 <sub_load_query+0x24>
 8007dd0:	20002de0 	.word	0x20002de0
 8007dd4:	2000278c 	.word	0x2000278c
 8007dd8:	0800c538 	.word	0x0800c538

08007ddc <m2qp_load_isf>:
                                id_tmpl*    user_id ) {
 8007ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dde:	46de      	mov	lr, fp
 8007de0:	4657      	mov	r7, sl
 8007de2:	464e      	mov	r6, r9
 8007de4:	4645      	mov	r5, r8
 8007de6:	b5e0      	push	{r5, r6, r7, lr}
 8007de8:	b085      	sub	sp, #20
 8007dea:	4682      	mov	sl, r0
 8007dec:	0008      	movs	r0, r1
 8007dee:	0014      	movs	r4, r2
 8007df0:	4699      	mov	r9, r3
    ot_int  j       = 0;
 8007df2:	ab02      	add	r3, sp, #8
 8007df4:	2200      	movs	r2, #0
 8007df6:	805a      	strh	r2, [r3, #2]
    if (is_series) {
 8007df8:	4653      	mov	r3, sl
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d109      	bne.n	8007e12 <m2qp_load_isf+0x36>
        scratch.ubyte[0]    = isf_id;
 8007dfe:	ab03      	add	r3, sp, #12
 8007e00:	7019      	strb	r1, [r3, #0]
        n_files             = 1;
 8007e02:	2301      	movs	r3, #1
 8007e04:	469b      	mov	fp, r3
    vlFILE* fp_s    = NULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	9301      	str	r3, [sp, #4]
    ot_int  output  = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4698      	mov	r8, r3
    for (i=0; i<n_files; i++) {
 8007e0e:	2600      	movs	r6, #0
 8007e10:	e01d      	b.n	8007e4e <m2qp_load_isf+0x72>
        fp_s = ISS_open( isf_id, VL_ACCESS_R, user_id );
 8007e12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e14:	2124      	movs	r1, #36	; 0x24
 8007e16:	f001 fae8 	bl	80093ea <ISS_open>
 8007e1a:	9001      	str	r0, [sp, #4]
        if (fp_s == NULL) {
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d059      	beq.n	8007ed4 <m2qp_load_isf+0xf8>
        n_files = fp_s->length;
 8007e20:	2208      	movs	r2, #8
 8007e22:	5e83      	ldrsh	r3, [r0, r2]
 8007e24:	469b      	mov	fp, r3
 8007e26:	e7f0      	b.n	8007e0a <m2qp_load_isf+0x2e>
        fp_f = ISF_open( scratch.ubyte[align], VL_ACCESS_R, user_id );
 8007e28:	ab03      	add	r3, sp, #12
 8007e2a:	5d58      	ldrb	r0, [r3, r5]
 8007e2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e2e:	2124      	movs	r1, #36	; 0x24
 8007e30:	f001 fae3 	bl	80093fa <ISF_open>
 8007e34:	1e07      	subs	r7, r0, #0
        if (fp_f == NULL) {
 8007e36:	d01a      	beq.n	8007e6e <m2qp_load_isf+0x92>
        offset -= fp_f->length;
 8007e38:	8905      	ldrh	r5, [r0, #8]
 8007e3a:	1b65      	subs	r5, r4, r5
 8007e3c:	b22d      	sxth	r5, r5
        if (offset < 0) {
 8007e3e:	2d00      	cmp	r5, #0
 8007e40:	db2c      	blt.n	8007e9c <m2qp_load_isf+0xc0>
        vl_close(fp_f);
 8007e42:	0038      	movs	r0, r7
 8007e44:	f001 fa94 	bl	8009370 <vl_close>
    for (i=0; i<n_files; i++) {
 8007e48:	3601      	adds	r6, #1
 8007e4a:	b236      	sxth	r6, r6
 8007e4c:	002c      	movs	r4, r5
 8007e4e:	455e      	cmp	r6, fp
 8007e50:	da35      	bge.n	8007ebe <m2qp_load_isf+0xe2>
        ot_u8 align = (i & 1);
 8007e52:	2501      	movs	r5, #1
 8007e54:	4035      	ands	r5, r6
        if ((is_series) && (align == 0)) {
 8007e56:	4653      	mov	r3, sl
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0e5      	beq.n	8007e28 <m2qp_load_isf+0x4c>
 8007e5c:	2d00      	cmp	r5, #0
 8007e5e:	d1e3      	bne.n	8007e28 <m2qp_load_isf+0x4c>
            scratch.ushort = vl_read(fp_s, i);
 8007e60:	b2b1      	uxth	r1, r6
 8007e62:	9801      	ldr	r0, [sp, #4]
 8007e64:	f001 fa02 	bl	800926c <vl_read>
 8007e68:	ab03      	add	r3, sp, #12
 8007e6a:	8018      	strh	r0, [r3, #0]
 8007e6c:	e7dc      	b.n	8007e28 <m2qp_load_isf+0x4c>
            vl_close(fp_s);
 8007e6e:	9801      	ldr	r0, [sp, #4]
 8007e70:	f001 fa7e 	bl	8009370 <vl_close>
            return -32768;
 8007e74:	4b19      	ldr	r3, [pc, #100]	; (8007edc <m2qp_load_isf+0x100>)
 8007e76:	4698      	mov	r8, r3
 8007e78:	e024      	b.n	8007ec4 <m2qp_load_isf+0xe8>
                    ldata.ushort = vl_read(fp_f, offset);
 8007e7a:	b2a1      	uxth	r1, r4
 8007e7c:	0038      	movs	r0, r7
 8007e7e:	f001 f9f5 	bl	800926c <vl_read>
 8007e82:	ab02      	add	r3, sp, #8
 8007e84:	8018      	strh	r0, [r3, #0]
                output += load_function( &j, ldata.ubyte[align] );
 8007e86:	ab02      	add	r3, sp, #8
 8007e88:	5d59      	ldrb	r1, [r3, r5]
 8007e8a:	1c98      	adds	r0, r3, #2
 8007e8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e8e:	4798      	blx	r3
 8007e90:	b280      	uxth	r0, r0
 8007e92:	4440      	add	r0, r8
 8007e94:	b203      	sxth	r3, r0
 8007e96:	4698      	mov	r8, r3
                offset++;
 8007e98:	3401      	adds	r4, #1
 8007e9a:	b224      	sxth	r4, r4
            while ( (j < window_bytes) && (offset < fp_f->length) ) {
 8007e9c:	ab02      	add	r3, sp, #8
 8007e9e:	3302      	adds	r3, #2
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	5e9b      	ldrsh	r3, [r3, r2]
 8007ea4:	454b      	cmp	r3, r9
 8007ea6:	da08      	bge.n	8007eba <m2qp_load_isf+0xde>
 8007ea8:	893b      	ldrh	r3, [r7, #8]
 8007eaa:	429c      	cmp	r4, r3
 8007eac:	da03      	bge.n	8007eb6 <m2qp_load_isf+0xda>
                align = offset & 1;
 8007eae:	2501      	movs	r5, #1
 8007eb0:	4025      	ands	r5, r4
                if (align == 0) {
 8007eb2:	d1e8      	bne.n	8007e86 <m2qp_load_isf+0xaa>
 8007eb4:	e7e1      	b.n	8007e7a <m2qp_load_isf+0x9e>
            offset = 0;
 8007eb6:	2500      	movs	r5, #0
 8007eb8:	e7c3      	b.n	8007e42 <m2qp_load_isf+0x66>
 8007eba:	2500      	movs	r5, #0
 8007ebc:	e7c1      	b.n	8007e42 <m2qp_load_isf+0x66>
    vl_close(fp_s);
 8007ebe:	9801      	ldr	r0, [sp, #4]
 8007ec0:	f001 fa56 	bl	8009370 <vl_close>
}
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	b005      	add	sp, #20
 8007ec8:	bc3c      	pop	{r2, r3, r4, r5}
 8007eca:	4690      	mov	r8, r2
 8007ecc:	4699      	mov	r9, r3
 8007ece:	46a2      	mov	sl, r4
 8007ed0:	46ab      	mov	fp, r5
 8007ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -32768;
 8007ed4:	4b01      	ldr	r3, [pc, #4]	; (8007edc <m2qp_load_isf+0x100>)
 8007ed6:	4698      	mov	r8, r3
 8007ed8:	e7f4      	b.n	8007ec4 <m2qp_load_isf+0xe8>
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	ffff8000 	.word	0xffff8000

08007ee0 <m2qp_isf_comp>:
OT_WEAK ot_int m2qp_isf_comp(ot_u8 is_series, id_tmpl* user_id) {
 8007ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	0004      	movs	r4, r0
 8007ee6:	000e      	movs	r6, r1
        m2qp.qtmpl.length   = (m2qp.qtmpl.code) ? m2qp.qtmpl.length : 0;
 8007ee8:	4b38      	ldr	r3, [pc, #224]	; (8007fcc <m2qp_isf_comp+0xec>)
 8007eea:	7a1b      	ldrb	r3, [r3, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d03b      	beq.n	8007f68 <m2qp_isf_comp+0x88>
 8007ef0:	4a36      	ldr	r2, [pc, #216]	; (8007fcc <m2qp_isf_comp+0xec>)
 8007ef2:	7a51      	ldrb	r1, [r2, #9]
 8007ef4:	4a35      	ldr	r2, [pc, #212]	; (8007fcc <m2qp_isf_comp+0xec>)
 8007ef6:	7251      	strb	r1, [r2, #9]
                               &sub_load_charcorrelation : &sub_load_comparison;
 8007ef8:	065b      	lsls	r3, r3, #25
 8007efa:	d537      	bpl.n	8007f6c <m2qp_isf_comp+0x8c>
 8007efc:	4d34      	ldr	r5, [pc, #208]	; (8007fd0 <m2qp_isf_comp+0xf0>)
        m2qp.qdata.comp_id  = q_readbyte(&rxq);
 8007efe:	4835      	ldr	r0, [pc, #212]	; (8007fd4 <m2qp_isf_comp+0xf4>)
 8007f00:	f000 ff0d 	bl	8008d1e <q_readbyte>
 8007f04:	4b31      	ldr	r3, [pc, #196]	; (8007fcc <m2qp_isf_comp+0xec>)
 8007f06:	7098      	strb	r0, [r3, #2]
        if (is_series)  m2qp.qdata.comp_offset  = q_readshort(&rxq);
 8007f08:	2c00      	cmp	r4, #0
 8007f0a:	d031      	beq.n	8007f70 <m2qp_isf_comp+0x90>
 8007f0c:	4831      	ldr	r0, [pc, #196]	; (8007fd4 <m2qp_isf_comp+0xf4>)
 8007f0e:	f000 ff0b 	bl	8008d28 <q_readshort>
 8007f12:	4b2e      	ldr	r3, [pc, #184]	; (8007fcc <m2qp_isf_comp+0xec>)
 8007f14:	8098      	strh	r0, [r3, #4]
        score   = m2qp_load_isf(is_series, m2qp.qdata.comp_id, m2qp.qdata.comp_offset,
 8007f16:	4b2d      	ldr	r3, [pc, #180]	; (8007fcc <m2qp_isf_comp+0xec>)
 8007f18:	7899      	ldrb	r1, [r3, #2]
 8007f1a:	2004      	movs	r0, #4
 8007f1c:	5e1a      	ldrsh	r2, [r3, r0]
 8007f1e:	7a5b      	ldrb	r3, [r3, #9]
 8007f20:	9601      	str	r6, [sp, #4]
 8007f22:	9500      	str	r5, [sp, #0]
 8007f24:	0020      	movs	r0, r4
 8007f26:	f7ff ff59 	bl	8007ddc <m2qp_load_isf>
 8007f2a:	1e03      	subs	r3, r0, #0
    if (score < 0) {
 8007f2c:	db2a      	blt.n	8007f84 <m2qp_isf_comp+0xa4>
    else if (m2qp.qtmpl.code & M2QC_COR_SEARCH) {
 8007f2e:	4a27      	ldr	r2, [pc, #156]	; (8007fcc <m2qp_isf_comp+0xec>)
 8007f30:	7a17      	ldrb	r7, [r2, #8]
 8007f32:	067a      	lsls	r2, r7, #25
 8007f34:	d422      	bmi.n	8007f7c <m2qp_isf_comp+0x9c>
    else if (m2qp.qtmpl.code & M2QC_ALU) {
 8007f36:	06bb      	lsls	r3, r7, #26
 8007f38:	d524      	bpl.n	8007f84 <m2qp_isf_comp+0xa4>
        for (i=0; i<m2qp.qtmpl.length; i++) {
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	4a23      	ldr	r2, [pc, #140]	; (8007fcc <m2qp_isf_comp+0xec>)
 8007f3e:	7a52      	ldrb	r2, [r2, #9]
 8007f40:	4293      	cmp	r3, r2
 8007f42:	da34      	bge.n	8007fae <m2qp_isf_comp+0xce>
            ot_u8* local_buf = &LOCAL_U8(0);
 8007f44:	4a24      	ldr	r2, [pc, #144]	; (8007fd8 <m2qp_isf_comp+0xf8>)
 8007f46:	68d4      	ldr	r4, [r2, #12]
 8007f48:	8815      	ldrh	r5, [r2, #0]
 8007f4a:	3d10      	subs	r5, #16
            j = m2qp.qtmpl.mask[i] & m2qp.qtmpl.value[i];
 8007f4c:	4a1f      	ldr	r2, [pc, #124]	; (8007fcc <m2qp_isf_comp+0xec>)
 8007f4e:	68d1      	ldr	r1, [r2, #12]
 8007f50:	5cce      	ldrb	r6, [r1, r3]
 8007f52:	6912      	ldr	r2, [r2, #16]
 8007f54:	5cd1      	ldrb	r1, [r2, r3]
 8007f56:	4031      	ands	r1, r6
            k = m2qp.qtmpl.mask[i] & local_buf[i];
 8007f58:	1964      	adds	r4, r4, r5
 8007f5a:	5ce2      	ldrb	r2, [r4, r3]
 8007f5c:	4032      	ands	r2, r6
            if (j != k) {
 8007f5e:	4291      	cmp	r1, r2
 8007f60:	d112      	bne.n	8007f88 <m2qp_isf_comp+0xa8>
        for (i=0; i<m2qp.qtmpl.length; i++) {
 8007f62:	3301      	adds	r3, #1
 8007f64:	b21b      	sxth	r3, r3
 8007f66:	e7e9      	b.n	8007f3c <m2qp_isf_comp+0x5c>
        m2qp.qtmpl.length   = (m2qp.qtmpl.code) ? m2qp.qtmpl.length : 0;
 8007f68:	0019      	movs	r1, r3
 8007f6a:	e7c3      	b.n	8007ef4 <m2qp_isf_comp+0x14>
                               &sub_load_charcorrelation : &sub_load_comparison;
 8007f6c:	4d1b      	ldr	r5, [pc, #108]	; (8007fdc <m2qp_isf_comp+0xfc>)
 8007f6e:	e7c6      	b.n	8007efe <m2qp_isf_comp+0x1e>
        else            m2qp.qdata.comp_offset  = q_readbyte(&rxq);
 8007f70:	4818      	ldr	r0, [pc, #96]	; (8007fd4 <m2qp_isf_comp+0xf4>)
 8007f72:	f000 fed4 	bl	8008d1e <q_readbyte>
 8007f76:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <m2qp_isf_comp+0xec>)
 8007f78:	8098      	strh	r0, [r3, #4]
 8007f7a:	e7cc      	b.n	8007f16 <m2qp_isf_comp+0x36>
        score -= (score == 0);
 8007f7c:	4258      	negs	r0, r3
 8007f7e:	4158      	adcs	r0, r3
 8007f80:	1a18      	subs	r0, r3, r0
 8007f82:	b200      	sxth	r0, r0
}
 8007f84:	b003      	add	sp, #12
 8007f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
                switch (m2qp.qtmpl.code & 0x1F) {
 8007f88:	201f      	movs	r0, #31
 8007f8a:	4038      	ands	r0, r7
 8007f8c:	b2c3      	uxtb	r3, r0
 8007f8e:	2b05      	cmp	r3, #5
 8007f90:	d812      	bhi.n	8007fb8 <m2qp_isf_comp+0xd8>
 8007f92:	0080      	lsls	r0, r0, #2
 8007f94:	4b12      	ldr	r3, [pc, #72]	; (8007fe0 <m2qp_isf_comp+0x100>)
 8007f96:	581b      	ldr	r3, [r3, r0]
 8007f98:	469f      	mov	pc, r3
                    case 0: return 0;                   // !=
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	e7f2      	b.n	8007f84 <m2qp_isf_comp+0xa4>
                    case 3: return (j < k) - 1;         // <, <=
 8007f9e:	4291      	cmp	r1, r2
 8007fa0:	da0d      	bge.n	8007fbe <m2qp_isf_comp+0xde>
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	e7ee      	b.n	8007f84 <m2qp_isf_comp+0xa4>
                    case 5: return (j > k) - 1;         // >, >=
 8007fa6:	4291      	cmp	r1, r2
 8007fa8:	dd0c      	ble.n	8007fc4 <m2qp_isf_comp+0xe4>
 8007faa:	2000      	movs	r0, #0
 8007fac:	e7ea      	b.n	8007f84 <m2qp_isf_comp+0xa4>
        return ((ot_int)m2qp.qtmpl.code & 1) - 1;
 8007fae:	2001      	movs	r0, #1
 8007fb0:	4038      	ands	r0, r7
 8007fb2:	3801      	subs	r0, #1
 8007fb4:	b200      	sxth	r0, r0
 8007fb6:	e7e5      	b.n	8007f84 <m2qp_isf_comp+0xa4>
                    case 1: return -1;                  // ==
 8007fb8:	2001      	movs	r0, #1
 8007fba:	4240      	negs	r0, r0
 8007fbc:	e7e2      	b.n	8007f84 <m2qp_isf_comp+0xa4>
                    case 3: return (j < k) - 1;         // <, <=
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	4240      	negs	r0, r0
 8007fc2:	e7df      	b.n	8007f84 <m2qp_isf_comp+0xa4>
                    case 5: return (j > k) - 1;         // >, >=
 8007fc4:	2001      	movs	r0, #1
 8007fc6:	4240      	negs	r0, r0
 8007fc8:	e7dc      	b.n	8007f84 <m2qp_isf_comp+0xa4>
 8007fca:	46c0      	nop			; (mov r8, r8)
 8007fcc:	2000278c 	.word	0x2000278c
 8007fd0:	08007b7d 	.word	0x08007b7d
 8007fd4:	20002de0 	.word	0x20002de0
 8007fd8:	20002df4 	.word	0x20002df4
 8007fdc:	08007bf9 	.word	0x08007bf9
 8007fe0:	0800c520 	.word	0x0800c520

08007fe4 <sub_process_query>:
ot_int sub_process_query(m2session* active) {
 8007fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe6:	0005      	movs	r5, r0
    ot_u8 cmd_type = m2qp.cmd.code & 0x70;
 8007fe8:	4b26      	ldr	r3, [pc, #152]	; (8008084 <sub_process_query+0xa0>)
 8007fea:	781f      	ldrb	r7, [r3, #0]
 8007fec:	2370      	movs	r3, #112	; 0x70
 8007fee:	403b      	ands	r3, r7
    if (cmd_type > M2TT_REQ_M_INIT) {     ///@todo future update code
 8007ff0:	2b40      	cmp	r3, #64	; 0x40
 8007ff2:	d915      	bls.n	8008020 <sub_process_query+0x3c>
        ot_int  number_of_acks  = (ot_int)q_readbyte(&rxq);
 8007ff4:	4824      	ldr	r0, [pc, #144]	; (8008088 <sub_process_query+0xa4>)
 8007ff6:	f000 fe92 	bl	8008d1e <q_readbyte>
 8007ffa:	b204      	sxth	r4, r0
            id_test = m2np_idcmp(m2np.rt.dlog.length, q_markbyte(&rxq, m2np.rt.dlog.length));
 8007ffc:	4b23      	ldr	r3, [pc, #140]	; (800808c <sub_process_query+0xa8>)
 8007ffe:	791e      	ldrb	r6, [r3, #4]
 8008000:	0031      	movs	r1, r6
 8008002:	4821      	ldr	r0, [pc, #132]	; (8008088 <sub_process_query+0xa4>)
 8008004:	f000 fe57 	bl	8008cb6 <q_markbyte>
 8008008:	0001      	movs	r1, r0
 800800a:	0030      	movs	r0, r6
 800800c:	f7ff f9c8 	bl	80073a0 <m2np_idcmp>
            number_of_acks--;
 8008010:	3c01      	subs	r4, #1
 8008012:	b224      	sxth	r4, r4
        while ((number_of_acks >= 0) && (id_test == False));
 8008014:	2c00      	cmp	r4, #0
 8008016:	db01      	blt.n	800801c <sub_process_query+0x38>
 8008018:	2800      	cmp	r0, #0
 800801a:	d0ef      	beq.n	8007ffc <sub_process_query+0x18>
        if (number_of_acks != 0) {
 800801c:	2c00      	cmp	r4, #0
 800801e:	d129      	bne.n	8008074 <sub_process_query+0x90>
    sub_load_query();
 8008020:	f7ff feb6 	bl	8007d90 <sub_load_query>
    if (cmd_type & M2TT_REQ_M) {  ///@todo future update code
 8008024:	067b      	lsls	r3, r7, #25
 8008026:	d51d      	bpl.n	8008064 <sub_process_query+0x80>
        local_ptr       = rxq.getcursor;
 8008028:	4c17      	ldr	r4, [pc, #92]	; (8008088 <sub_process_query+0xa4>)
 800802a:	6867      	ldr	r7, [r4, #4]
        query_size      = q_readbyte(&rxq);                 //token
 800802c:	0020      	movs	r0, r4
 800802e:	f000 fe76 	bl	8008d1e <q_readbyte>
 8008032:	0006      	movs	r6, r0
        query_size    <<= ((q_readbyte(&rxq) & 0x80) != 0);  //mask
 8008034:	0020      	movs	r0, r4
 8008036:	f000 fe72 	bl	8008d1e <q_readbyte>
 800803a:	b240      	sxtb	r0, r0
 800803c:	0fc0      	lsrs	r0, r0, #31
 800803e:	4086      	lsls	r6, r0
 8008040:	b236      	sxth	r6, r6
        rxq.getcursor  += query_size;
 8008042:	6863      	ldr	r3, [r4, #4]
 8008044:	469c      	mov	ip, r3
 8008046:	4466      	add	r6, ip
 8008048:	6066      	str	r6, [r4, #4]
        if (m2qp_isf_comp((m2qp.cmd.code & 1), &m2np.rt.dlog) < 0) {
 800804a:	4b0e      	ldr	r3, [pc, #56]	; (8008084 <sub_process_query+0xa0>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2001      	movs	r0, #1
 8008050:	4018      	ands	r0, r3
 8008052:	490f      	ldr	r1, [pc, #60]	; (8008090 <sub_process_query+0xac>)
 8008054:	f7ff ff44 	bl	8007ee0 <m2qp_isf_comp>
 8008058:	2800      	cmp	r0, #0
 800805a:	db0b      	blt.n	8008074 <sub_process_query+0x90>
        rxq.getcursor   = local_ptr;
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <sub_process_query+0xa4>)
 800805e:	605f      	str	r7, [r3, #4]
        sub_load_query();
 8008060:	f7ff fe96 	bl	8007d90 <sub_load_query>
    return m2qp_isf_comp((m2qp.cmd.code & 1), &m2np.rt.dlog);
 8008064:	4b07      	ldr	r3, [pc, #28]	; (8008084 <sub_process_query+0xa0>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2001      	movs	r0, #1
 800806a:	4018      	ands	r0, r3
 800806c:	4908      	ldr	r1, [pc, #32]	; (8008090 <sub_process_query+0xac>)
 800806e:	f7ff ff37 	bl	8007ee0 <m2qp_isf_comp>
}
 8008072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    active->flags &= ~M2FI_LISTEN;
 8008074:	7aea      	ldrb	r2, [r5, #11]
 8008076:	237f      	movs	r3, #127	; 0x7f
 8008078:	4013      	ands	r3, r2
 800807a:	72eb      	strb	r3, [r5, #11]
    return -1;
 800807c:	2001      	movs	r0, #1
 800807e:	4240      	negs	r0, r0
 8008080:	e7f7      	b.n	8008072 <sub_process_query+0x8e>
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	2000278c 	.word	0x2000278c
 8008088:	20002de0 	.word	0x20002de0
 800808c:	20002724 	.word	0x20002724
 8008090:	20002728 	.word	0x20002728

08008094 <sub_parse_request>:
ot_int sub_parse_request(m2session* active) {
 8008094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008096:	0006      	movs	r6, r0
    active->netstate      &= ~M2_NETSTATE_TMASK;
 8008098:	79c3      	ldrb	r3, [r0, #7]
 800809a:	2270      	movs	r2, #112	; 0x70
 800809c:	4393      	bics	r3, r2
 800809e:	71c3      	strb	r3, [r0, #7]
    m2qp.cmd.code           = q_readbyte(&rxq);
 80080a0:	4836      	ldr	r0, [pc, #216]	; (800817c <sub_parse_request+0xe8>)
 80080a2:	f000 fe3c 	bl	8008d1e <q_readbyte>
 80080a6:	4b36      	ldr	r3, [pc, #216]	; (8008180 <sub_parse_request+0xec>)
 80080a8:	7018      	strb	r0, [r3, #0]
    m2qp.cmd.ext            = (m2qp.cmd.code & 0x80) ? q_readbyte(&rxq) : 0;
 80080aa:	b240      	sxtb	r0, r0
 80080ac:	2800      	cmp	r0, #0
 80080ae:	db31      	blt.n	8008114 <sub_parse_request+0x80>
 80080b0:	2300      	movs	r3, #0
 80080b2:	4a33      	ldr	r2, [pc, #204]	; (8008180 <sub_parse_request+0xec>)
 80080b4:	7053      	strb	r3, [r2, #1]
    dll.comm.redundants     = 1;
 80080b6:	4d33      	ldr	r5, [pc, #204]	; (8008184 <sub_parse_request+0xf0>)
 80080b8:	212f      	movs	r1, #47	; 0x2f
 80080ba:	2001      	movs	r0, #1
 80080bc:	5468      	strb	r0, [r5, r1]
    dll.comm.csmaca_params  = m2qp.cmd.ext & (M2_CSMACA_CAMASK | M2_CSMACA_NOCSMA);
 80080be:	303b      	adds	r0, #59	; 0x3b
 80080c0:	4003      	ands	r3, r0
    dll.comm.csmaca_params |= m2qp.cmd.code & M2_CSMACA_ARBMASK;
 80080c2:	7812      	ldrb	r2, [r2, #0]
 80080c4:	b251      	sxtb	r1, r2
 80080c6:	3004      	adds	r0, #4
 80080c8:	4008      	ands	r0, r1
 80080ca:	4318      	orrs	r0, r3
 80080cc:	232e      	movs	r3, #46	; 0x2e
 80080ce:	54e8      	strb	r0, [r5, r3]
    cmd_opcode              = m2qp.cmd.code & M2OP_MASK;
 80080d0:	240f      	movs	r4, #15
 80080d2:	4014      	ands	r4, r2
    {   ot_u8 timeout_code  = q_readbyte(&rxq);
 80080d4:	4829      	ldr	r0, [pc, #164]	; (800817c <sub_parse_request+0xe8>)
 80080d6:	f000 fe22 	bl	8008d1e <q_readbyte>
 80080da:	0007      	movs	r7, r0
        dll.comm.rx_timeout = otutils_calc_timeout(timeout_code);   // original contention period
 80080dc:	f000 fe96 	bl	8008e0c <otutils_calc_timeout>
 80080e0:	62a8      	str	r0, [r5, #40]	; 0x28
        dll.comm.tc         = dll.comm.rx_timeout;                  // contention period counter
 80080e2:	6228      	str	r0, [r5, #32]
        if (timeout_code & 0x80) {
 80080e4:	063b      	lsls	r3, r7, #24
 80080e6:	d41a      	bmi.n	800811e <sub_parse_request+0x8a>
            dll.comm.tx_channels    = 1;
 80080e8:	4b26      	ldr	r3, [pc, #152]	; (8008184 <sub_parse_request+0xf0>)
 80080ea:	2230      	movs	r2, #48	; 0x30
 80080ec:	2101      	movs	r1, #1
 80080ee:	5499      	strb	r1, [r3, r2]
            dll.comm.tx_chanlist    = &dll.comm.scratch[0];
 80080f0:	001a      	movs	r2, r3
 80080f2:	322c      	adds	r2, #44	; 0x2c
 80080f4:	635a      	str	r2, [r3, #52]	; 0x34
            dll.comm.scratch[0]     = active->channel;
 80080f6:	79b1      	ldrb	r1, [r6, #6]
 80080f8:	222c      	movs	r2, #44	; 0x2c
 80080fa:	5499      	strb	r1, [r3, r2]
    if ((m2qp.cmd.code & 0x70) > M2TT_REQ_UB) {
 80080fc:	4b20      	ldr	r3, [pc, #128]	; (8008180 <sub_parse_request+0xec>)
 80080fe:	781a      	ldrb	r2, [r3, #0]
 8008100:	2370      	movs	r3, #112	; 0x70
 8008102:	4013      	ands	r3, r2
 8008104:	2b20      	cmp	r3, #32
 8008106:	d917      	bls.n	8008138 <sub_parse_request+0xa4>
        score = sub_process_query(active);
 8008108:	0030      	movs	r0, r6
 800810a:	f7ff ff6b 	bl	8007fe4 <sub_process_query>
 800810e:	1e05      	subs	r5, r0, #0
    if (score >= 0) {
 8008110:	da13      	bge.n	800813a <sub_parse_request+0xa6>
 8008112:	e022      	b.n	800815a <sub_parse_request+0xc6>
    m2qp.cmd.ext            = (m2qp.cmd.code & 0x80) ? q_readbyte(&rxq) : 0;
 8008114:	4819      	ldr	r0, [pc, #100]	; (800817c <sub_parse_request+0xe8>)
 8008116:	f000 fe02 	bl	8008d1e <q_readbyte>
 800811a:	0003      	movs	r3, r0
 800811c:	e7c9      	b.n	80080b2 <sub_parse_request+0x1e>
            dll.comm.tx_channels    = q_readbyte(&rxq);
 800811e:	4d17      	ldr	r5, [pc, #92]	; (800817c <sub_parse_request+0xe8>)
 8008120:	0028      	movs	r0, r5
 8008122:	f000 fdfc 	bl	8008d1e <q_readbyte>
 8008126:	4f17      	ldr	r7, [pc, #92]	; (8008184 <sub_parse_request+0xf0>)
 8008128:	2330      	movs	r3, #48	; 0x30
 800812a:	54f8      	strb	r0, [r7, r3]
            dll.comm.tx_chanlist    = q_markbyte(&rxq, dll.comm.tx_channels);
 800812c:	b201      	sxth	r1, r0
 800812e:	0028      	movs	r0, r5
 8008130:	f000 fdc1 	bl	8008cb6 <q_markbyte>
 8008134:	6378      	str	r0, [r7, #52]	; 0x34
 8008136:	e7e1      	b.n	80080fc <sub_parse_request+0x68>
    ot_int  score   = 0;
 8008138:	2500      	movs	r5, #0
        q_empty(&txq); // Flush TX ot_queue
 800813a:	4813      	ldr	r0, [pc, #76]	; (8008188 <sub_parse_request+0xf4>)
 800813c:	f000 fdaa 	bl	8008c94 <q_empty>
        if (m2qp.cmd.ext & M2CE_NORESP) {
 8008140:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <sub_parse_request+0xec>)
 8008142:	785b      	ldrb	r3, [r3, #1]
 8008144:	079b      	lsls	r3, r3, #30
 8008146:	d50a      	bpl.n	800815e <sub_parse_request+0xca>
            active->netstate |= M2_NETSTATE_SCRAP;
 8008148:	79f3      	ldrb	r3, [r6, #7]
 800814a:	2204      	movs	r2, #4
 800814c:	4313      	orrs	r3, r2
 800814e:	71f3      	strb	r3, [r6, #7]
        opgroup_proc[((cmd_opcode>>1) & 7)]();
 8008150:	0864      	lsrs	r4, r4, #1
 8008152:	00a4      	lsls	r4, r4, #2
 8008154:	4b0d      	ldr	r3, [pc, #52]	; (800818c <sub_parse_request+0xf8>)
 8008156:	58e3      	ldr	r3, [r4, r3]
 8008158:	4798      	blx	r3
}
 800815a:	0028      	movs	r0, r5
 800815c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            active->netstate |= M2_NETSTATE_RESPTX;
 800815e:	79f3      	ldrb	r3, [r6, #7]
 8008160:	2210      	movs	r2, #16
 8008162:	4313      	orrs	r3, r2
 8008164:	71f3      	strb	r3, [r6, #7]
            m2np_header(active, 0, M2FI_FRDIALOG); ///@todo Future Update Code, Can use 0 in addressing for Response
 8008166:	2200      	movs	r2, #0
 8008168:	2100      	movs	r1, #0
 800816a:	0030      	movs	r0, r6
 800816c:	f7ff f8b2 	bl	80072d4 <m2np_header>
            q_writebyte(&txq, (M2TT_RESPONSE | cmd_opcode));            // Write Cmd code byte
 8008170:	0021      	movs	r1, r4
 8008172:	4805      	ldr	r0, [pc, #20]	; (8008188 <sub_parse_request+0xf4>)
 8008174:	f000 fda4 	bl	8008cc0 <q_writebyte>
 8008178:	e7ea      	b.n	8008150 <sub_parse_request+0xbc>
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	20002de0 	.word	0x20002de0
 8008180:	2000278c 	.word	0x2000278c
 8008184:	200026d4 	.word	0x200026d4
 8008188:	20002df4 	.word	0x20002df4
 800818c:	0800c538 	.word	0x0800c538

08008190 <m2qp_parse_frame>:
OT_WEAK ot_int m2qp_parse_frame(m2session* active) {
 8008190:	b510      	push	{r4, lr}
    ot_u8 cmd_type = (*rxq.getcursor >> 4) & 7;
 8008192:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <m2qp_parse_frame+0x34>)
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	781a      	ldrb	r2, [r3, #0]
 8008198:	0912      	lsrs	r2, r2, #4
 800819a:	2307      	movs	r3, #7
 800819c:	4013      	ands	r3, r2
    if (cmd_type == 0)  return sub_parse_response(active);
 800819e:	d007      	beq.n	80081b0 <m2qp_parse_frame+0x20>
    if (cmd_type == 1)  return sub_parse_control(active);
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d008      	beq.n	80081b6 <m2qp_parse_frame+0x26>
    if (active->netstate & M2_NETSTATE_RESP) return -1;
 80081a4:	79c3      	ldrb	r3, [r0, #7]
 80081a6:	06db      	lsls	r3, r3, #27
 80081a8:	d408      	bmi.n	80081bc <m2qp_parse_frame+0x2c>
    return sub_parse_request(active);
 80081aa:	f7ff ff73 	bl	8008094 <sub_parse_request>
}
 80081ae:	bd10      	pop	{r4, pc}
    if (cmd_type == 0)  return sub_parse_response(active);
 80081b0:	f7ff fd86 	bl	8007cc0 <sub_parse_response>
 80081b4:	e7fb      	b.n	80081ae <m2qp_parse_frame+0x1e>
    if (cmd_type == 1)  return sub_parse_control(active);
 80081b6:	f7ff fdbd 	bl	8007d34 <sub_parse_control>
 80081ba:	e7f8      	b.n	80081ae <m2qp_parse_frame+0x1e>
    if (active->netstate & M2_NETSTATE_RESP) return -1;
 80081bc:	2001      	movs	r0, #1
 80081be:	4240      	negs	r0, r0
 80081c0:	e7f5      	b.n	80081ae <m2qp_parse_frame+0x1e>
 80081c2:	46c0      	nop			; (mov r8, r8)
 80081c4:	20002de0 	.word	0x20002de0

080081c8 <m2qp_isf_call>:
OT_WEAK ot_int m2qp_isf_call( ot_u8 is_series, ot_queue* input_q, id_tmpl* user_id ) {
 80081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ca:	46d6      	mov	lr, sl
 80081cc:	464f      	mov	r7, r9
 80081ce:	4646      	mov	r6, r8
 80081d0:	b5c0      	push	{r6, r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	0006      	movs	r6, r0
 80081d6:	9005      	str	r0, [sp, #20]
 80081d8:	000c      	movs	r4, r1
 80081da:	0017      	movs	r7, r2
 80081dc:	9203      	str	r2, [sp, #12]
    max_bytes   = (ot_int)q_readbyte(input_q);
 80081de:	0008      	movs	r0, r1
 80081e0:	f000 fd9d 	bl	8008d1e <q_readbyte>
 80081e4:	b203      	sxth	r3, r0
 80081e6:	4698      	mov	r8, r3
    isf_id      = q_readbyte(input_q);
 80081e8:	0020      	movs	r0, r4
 80081ea:	f000 fd98 	bl	8008d1e <q_readbyte>
 80081ee:	0005      	movs	r5, r0
 80081f0:	9004      	str	r0, [sp, #16]
    q_writebyte(&txq, isf_id);
 80081f2:	0001      	movs	r1, r0
 80081f4:	4847      	ldr	r0, [pc, #284]	; (8008314 <m2qp_isf_call+0x14c>)
 80081f6:	f000 fd63 	bl	8008cc0 <q_writebyte>
    if (is_series) {
 80081fa:	2e00      	cmp	r6, #0
 80081fc:	d069      	beq.n	80082d2 <m2qp_isf_call+0x10a>
        fp_s = ISS_open( isf_id, VL_ACCESS_R, user_id );
 80081fe:	003a      	movs	r2, r7
 8008200:	2124      	movs	r1, #36	; 0x24
 8008202:	0028      	movs	r0, r5
 8008204:	f001 f8f1 	bl	80093ea <ISS_open>
 8008208:	1e07      	subs	r7, r0, #0
        if (fp_s == NULL) {
 800820a:	d100      	bne.n	800820e <m2qp_isf_call+0x46>
 800820c:	e07c      	b.n	8008308 <m2qp_isf_call+0x140>
        offset = q_readshort(input_q);
 800820e:	0020      	movs	r0, r4
 8008210:	f000 fd8a 	bl	8008d28 <q_readshort>
 8008214:	0006      	movs	r6, r0
 8008216:	b203      	sxth	r3, r0
 8008218:	4699      	mov	r9, r3
        q_writebyte( &txq, (ot_u8)fp_s->length );
 800821a:	7a39      	ldrb	r1, [r7, #8]
 800821c:	4c3d      	ldr	r4, [pc, #244]	; (8008314 <m2qp_isf_call+0x14c>)
 800821e:	0020      	movs	r0, r4
 8008220:	f000 fd4e 	bl	8008cc0 <q_writebyte>
        q_writeshort(&txq, offset );
 8008224:	0031      	movs	r1, r6
 8008226:	0020      	movs	r0, r4
 8008228:	f000 fd4f 	bl	8008cca <q_writeshort>
        clength_ptr     = txq.putcursor;
 800822c:	68a3      	ldr	r3, [r4, #8]
 800822e:	469a      	mov	sl, r3
        txq.putcursor  += 2;
 8008230:	3302      	adds	r3, #2
 8008232:	60a3      	str	r3, [r4, #8]
        for (i=0; i<fp_s->length; i++) {
 8008234:	2400      	movs	r4, #0
    ot_int  total_length = 0;
 8008236:	2500      	movs	r5, #0
        for (i=0; i<fp_s->length; i++) {
 8008238:	e00b      	b.n	8008252 <m2qp_isf_call+0x8a>
                scratch.ushort = vl_read(fp_s, i);
 800823a:	0021      	movs	r1, r4
 800823c:	0038      	movs	r0, r7
 800823e:	f001 f815 	bl	800926c <vl_read>
 8008242:	ab07      	add	r3, sp, #28
 8008244:	8018      	strh	r0, [r3, #0]
 8008246:	e00b      	b.n	8008260 <m2qp_isf_call+0x98>
            vl_close(fp_f);
 8008248:	0030      	movs	r0, r6
 800824a:	f001 f891 	bl	8009370 <vl_close>
        for (i=0; i<fp_s->length; i++) {
 800824e:	3401      	adds	r4, #1
 8008250:	b224      	sxth	r4, r4
 8008252:	893b      	ldrh	r3, [r7, #8]
 8008254:	429c      	cmp	r4, r3
 8008256:	da17      	bge.n	8008288 <m2qp_isf_call+0xc0>
            if ( (i&1) == 0 ) {
 8008258:	b2a4      	uxth	r4, r4
 800825a:	2601      	movs	r6, #1
 800825c:	4026      	ands	r6, r4
 800825e:	d0ec      	beq.n	800823a <m2qp_isf_call+0x72>
            fp_f = ISF_open(scratch.ubyte[i&1], VL_ACCESS_R, user_id);
 8008260:	ab07      	add	r3, sp, #28
 8008262:	5d98      	ldrb	r0, [r3, r6]
 8008264:	9a03      	ldr	r2, [sp, #12]
 8008266:	2124      	movs	r1, #36	; 0x24
 8008268:	f001 f8c7 	bl	80093fa <ISF_open>
 800826c:	1e06      	subs	r6, r0, #0
            if (fp_f != NULL) {
 800826e:	d0eb      	beq.n	8008248 <m2qp_isf_call+0x80>
                q_writebyte(&txq, GET_B0_U16(fp_f->idmod) );
 8008270:	7981      	ldrb	r1, [r0, #6]
 8008272:	4828      	ldr	r0, [pc, #160]	; (8008314 <m2qp_isf_call+0x14c>)
 8008274:	f000 fd24 	bl	8008cc0 <q_writebyte>
                q_writebyte(&txq, (ot_u8)fp_f->length );
 8008278:	7a31      	ldrb	r1, [r6, #8]
 800827a:	4826      	ldr	r0, [pc, #152]	; (8008314 <m2qp_isf_call+0x14c>)
 800827c:	f000 fd20 	bl	8008cc0 <q_writebyte>
                total_length += fp_f->length;
 8008280:	8933      	ldrh	r3, [r6, #8]
 8008282:	195d      	adds	r5, r3, r5
 8008284:	b22d      	sxth	r5, r5
 8008286:	e7df      	b.n	8008248 <m2qp_isf_call+0x80>
        vl_close(fp_s);
 8008288:	0038      	movs	r0, r7
 800828a:	f001 f871 	bl	8009370 <vl_close>
        clength_ptr[0]  = scratch.ubyte[UPPER];
 800828e:	042b      	lsls	r3, r5, #16
 8008290:	0e1b      	lsrs	r3, r3, #24
 8008292:	4652      	mov	r2, sl
 8008294:	7013      	strb	r3, [r2, #0]
        clength_ptr[1]  = scratch.ubyte[LOWER];
 8008296:	7055      	strb	r5, [r2, #1]
    scratch.sshort = (txq.back - txq.putcursor);
 8008298:	4b1e      	ldr	r3, [pc, #120]	; (8008314 <m2qp_isf_call+0x14c>)
 800829a:	691a      	ldr	r2, [r3, #16]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	1ad2      	subs	r2, r2, r3
 80082a0:	b212      	sxth	r2, r2
    if (max_bytes > scratch.sshort) {
 80082a2:	4542      	cmp	r2, r8
 80082a4:	db00      	blt.n	80082a8 <m2qp_isf_call+0xe0>
    max_bytes   = (ot_int)q_readbyte(input_q);
 80082a6:	4642      	mov	r2, r8
    scratch.sshort = (total_length - offset);
 80082a8:	464b      	mov	r3, r9
 80082aa:	1aeb      	subs	r3, r5, r3
 80082ac:	b21b      	sxth	r3, r3
    if (max_bytes > scratch.sshort) {
 80082ae:	4293      	cmp	r3, r2
 80082b0:	db00      	blt.n	80082b4 <m2qp_isf_call+0xec>
 80082b2:	0013      	movs	r3, r2
    return m2qp_load_isf(is_series, isf_id, offset, max_bytes, &sub_load_return, user_id);
 80082b4:	9a03      	ldr	r2, [sp, #12]
 80082b6:	9201      	str	r2, [sp, #4]
 80082b8:	4a17      	ldr	r2, [pc, #92]	; (8008318 <m2qp_isf_call+0x150>)
 80082ba:	9200      	str	r2, [sp, #0]
 80082bc:	464a      	mov	r2, r9
 80082be:	9904      	ldr	r1, [sp, #16]
 80082c0:	9805      	ldr	r0, [sp, #20]
 80082c2:	f7ff fd8b 	bl	8007ddc <m2qp_load_isf>
}
 80082c6:	b008      	add	sp, #32
 80082c8:	bc1c      	pop	{r2, r3, r4}
 80082ca:	4690      	mov	r8, r2
 80082cc:	4699      	mov	r9, r3
 80082ce:	46a2      	mov	sl, r4
 80082d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        fp_f = ISF_open( isf_id, VL_ACCESS_R, user_id );
 80082d2:	9a03      	ldr	r2, [sp, #12]
 80082d4:	2124      	movs	r1, #36	; 0x24
 80082d6:	9804      	ldr	r0, [sp, #16]
 80082d8:	f001 f88f 	bl	80093fa <ISF_open>
 80082dc:	1e06      	subs	r6, r0, #0
        if (fp_f == NULL) {
 80082de:	d016      	beq.n	800830e <m2qp_isf_call+0x146>
        offset          = q_readbyte(input_q);
 80082e0:	0020      	movs	r0, r4
 80082e2:	f000 fd1c 	bl	8008d1e <q_readbyte>
 80082e6:	0001      	movs	r1, r0
 80082e8:	b203      	sxth	r3, r0
 80082ea:	4699      	mov	r9, r3
        total_length    = fp_f->length;
 80082ec:	8934      	ldrh	r4, [r6, #8]
 80082ee:	b225      	sxth	r5, r4
        q_writebyte(&txq, (ot_u8)offset );
 80082f0:	4f08      	ldr	r7, [pc, #32]	; (8008314 <m2qp_isf_call+0x14c>)
 80082f2:	0038      	movs	r0, r7
 80082f4:	f000 fce4 	bl	8008cc0 <q_writebyte>
        q_writebyte(&txq, (ot_u8)total_length );
 80082f8:	b2e1      	uxtb	r1, r4
 80082fa:	0038      	movs	r0, r7
 80082fc:	f000 fce0 	bl	8008cc0 <q_writebyte>
        vl_close(fp_f);
 8008300:	0030      	movs	r0, r6
 8008302:	f001 f835 	bl	8009370 <vl_close>
 8008306:	e7c7      	b.n	8008298 <m2qp_isf_call+0xd0>
            return -2;
 8008308:	2002      	movs	r0, #2
 800830a:	4240      	negs	r0, r0
 800830c:	e7db      	b.n	80082c6 <m2qp_isf_call+0xfe>
            return -2;
 800830e:	2002      	movs	r0, #2
 8008310:	4240      	negs	r0, r0
 8008312:	e7d8      	b.n	80082c6 <m2qp_isf_call+0xfe>
 8008314:	20002df4 	.word	0x20002df4
 8008318:	08007c1d 	.word	0x08007c1d

0800831c <sub_opgroup_collection>:
void sub_opgroup_collection(void) {
 800831c:	b510      	push	{r4, lr}
    if ( (*(ot_u16*)&m2qp.cmd & ((0x0070<<8)|M2CE_NORESP)) == 0 ) {
 800831e:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <sub_opgroup_collection+0x2c>)
 8008320:	881a      	ldrh	r2, [r3, #0]
 8008322:	4b0a      	ldr	r3, [pc, #40]	; (800834c <sub_opgroup_collection+0x30>)
 8008324:	421a      	tst	r2, r3
 8008326:	d002      	beq.n	800832e <sub_opgroup_collection+0x12>
    sub_opgroup_globalisf();
 8008328:	f7ff fc86 	bl	8007c38 <sub_opgroup_globalisf>
}
 800832c:	bd10      	pop	{r4, pc}
            nack = m2qp_isf_call((m2qp.cmd.code & 1), &rxq, &m2np.rt.dlog);
 800832e:	4b06      	ldr	r3, [pc, #24]	; (8008348 <sub_opgroup_collection+0x2c>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2001      	movs	r0, #1
 8008334:	4018      	ands	r0, r3
 8008336:	4a06      	ldr	r2, [pc, #24]	; (8008350 <sub_opgroup_collection+0x34>)
 8008338:	4906      	ldr	r1, [pc, #24]	; (8008354 <sub_opgroup_collection+0x38>)
 800833a:	f7ff ff45 	bl	80081c8 <m2qp_isf_call>
            if (nack != 0) {
 800833e:	2800      	cmp	r0, #0
 8008340:	d0f2      	beq.n	8008328 <sub_opgroup_collection+0xc>
                sub_renack(nack);
 8008342:	f7ff fd0b 	bl	8007d5c <sub_renack>
 8008346:	e7ef      	b.n	8008328 <sub_opgroup_collection+0xc>
 8008348:	2000278c 	.word	0x2000278c
 800834c:	00007002 	.word	0x00007002
 8008350:	20002728 	.word	0x20002728
 8008354:	20002de0 	.word	0x20002de0

08008358 <sub_return>:


// Return functions are not handled by the server (ignore)
static ot_int sub_return(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
    return 0;
}
 8008358:	2000      	movs	r0, #0
 800835a:	4770      	bx	lr

0800835c <sub_qnotfull>:
}



/// This is a form of overwrite protection
static ot_bool sub_qnotfull(ot_u8 write, ot_u8 write_size, ot_queue* q) {
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	0005      	movs	r5, r0
 8008360:	000c      	movs	r4, r1
    return (ot_bool)((write_size <= q_writespace(q)) || (write == 0));
 8008362:	0010      	movs	r0, r2
 8008364:	f000 fc7e 	bl	8008c64 <q_writespace>
 8008368:	4284      	cmp	r4, r0
 800836a:	dd05      	ble.n	8008378 <sub_qnotfull+0x1c>
 800836c:	2d00      	cmp	r5, #0
 800836e:	d001      	beq.n	8008374 <sub_qnotfull+0x18>
 8008370:	2000      	movs	r0, #0
 8008372:	e002      	b.n	800837a <sub_qnotfull+0x1e>
 8008374:	2001      	movs	r0, #1
 8008376:	e000      	b.n	800837a <sub_qnotfull+0x1e>
 8008378:	2001      	movs	r0, #1

    ///@note impl used prior to q_space()
    //return (ot_bool)(((q->putcursor+write_size) < q->back) || (write == 0));
}
 800837a:	bd70      	pop	{r4, r5, r6, pc}

0800837c <sub_filerestore>:




/// Not currently supported, always returns "unrestorable" error
static ot_int sub_filerestore(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837e:	0005      	movs	r5, r0
 8008380:	0016      	movs	r6, r2
 8008382:	ab06      	add	r3, sp, #24
 8008384:	2400      	movs	r4, #0
 8008386:	5f1c      	ldrsh	r4, [r3, r4]
    ot_int  data_out    = 0;
 8008388:	2700      	movs	r7, #0
    //vlBLOCK file_block  = ((cmd_in >> 4) & 0x07);

    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 800838a:	e009      	b.n	80083a0 <sub_filerestore+0x24>
        ot_u8   err_code    = 0x03;
        ot_u8   file_id     = q_readbyte(alp->inq);
        data_in            -= 1;

        if (respond) {
            q_writebyte(alp->outq, file_id);
 800838c:	0001      	movs	r1, r0
 800838e:	68e8      	ldr	r0, [r5, #12]
 8008390:	f000 fc96 	bl	8008cc0 <q_writebyte>
            q_writebyte(alp->outq, err_code);
 8008394:	2103      	movs	r1, #3
 8008396:	68e8      	ldr	r0, [r5, #12]
 8008398:	f000 fc92 	bl	8008cc0 <q_writebyte>
            data_out += 2;
 800839c:	3702      	adds	r7, #2
 800839e:	b23f      	sxth	r7, r7
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 80083a0:	2c00      	cmp	r4, #0
 80083a2:	dd0e      	ble.n	80083c2 <sub_filerestore+0x46>
 80083a4:	68ea      	ldr	r2, [r5, #12]
 80083a6:	2102      	movs	r1, #2
 80083a8:	0030      	movs	r0, r6
 80083aa:	f7ff ffd7 	bl	800835c <sub_qnotfull>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d007      	beq.n	80083c2 <sub_filerestore+0x46>
        ot_u8   file_id     = q_readbyte(alp->inq);
 80083b2:	68a8      	ldr	r0, [r5, #8]
 80083b4:	f000 fcb3 	bl	8008d1e <q_readbyte>
        data_in            -= 1;
 80083b8:	3c01      	subs	r4, #1
 80083ba:	b224      	sxth	r4, r4
        if (respond) {
 80083bc:	2e00      	cmp	r6, #0
 80083be:	d0ef      	beq.n	80083a0 <sub_filerestore+0x24>
 80083c0:	e7e4      	b.n	800838c <sub_filerestore+0x10>
        }
    }

    return data_out;
}
 80083c2:	0038      	movs	r0, r7
 80083c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083c6 <sub_filecreate>:
static ot_int sub_filecreate(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
 80083c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083c8:	46d6      	mov	lr, sl
 80083ca:	b500      	push	{lr}
 80083cc:	b088      	sub	sp, #32
 80083ce:	0004      	movs	r4, r0
 80083d0:	468a      	mov	sl, r1
 80083d2:	0017      	movs	r7, r2
 80083d4:	aa0e      	add	r2, sp, #56	; 0x38
 80083d6:	2500      	movs	r5, #0
 80083d8:	5f55      	ldrsh	r5, [r2, r5]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 80083da:	091b      	lsrs	r3, r3, #4
 80083dc:	2207      	movs	r2, #7
 80083de:	401a      	ands	r2, r3
 80083e0:	9205      	str	r2, [sp, #20]
    ot_int  data_out    = 0;
 80083e2:	2600      	movs	r6, #0
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 80083e4:	e00c      	b.n	8008400 <sub_filecreate+0x3a>
            q_writebyte(alp->outq, id);
 80083e6:	9903      	ldr	r1, [sp, #12]
 80083e8:	68e0      	ldr	r0, [r4, #12]
 80083ea:	f000 fc69 	bl	8008cc0 <q_writebyte>
            q_writebyte(alp->outq, err_code);
 80083ee:	9904      	ldr	r1, [sp, #16]
 80083f0:	68e0      	ldr	r0, [r4, #12]
 80083f2:	f000 fc65 	bl	8008cc0 <q_writebyte>
            data_out += 2;
 80083f6:	3602      	adds	r6, #2
 80083f8:	b236      	sxth	r6, r6
        vl_close(fp);
 80083fa:	9807      	ldr	r0, [sp, #28]
 80083fc:	f000 ffb8 	bl	8009370 <vl_close>
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8008400:	2d00      	cmp	r5, #0
 8008402:	dd26      	ble.n	8008452 <sub_filecreate+0x8c>
 8008404:	68e2      	ldr	r2, [r4, #12]
 8008406:	2102      	movs	r1, #2
 8008408:	0038      	movs	r0, r7
 800840a:	f7ff ffa7 	bl	800835c <sub_qnotfull>
 800840e:	2800      	cmp	r0, #0
 8008410:	d01f      	beq.n	8008452 <sub_filecreate+0x8c>
        vlFILE*     fp = NULL;
 8008412:	2300      	movs	r3, #0
 8008414:	9307      	str	r3, [sp, #28]
        data_in            -= 6;
 8008416:	3d06      	subs	r5, #6
 8008418:	b22d      	sxth	r5, r5
        id                  = q_readbyte(alp->inq);
 800841a:	68a0      	ldr	r0, [r4, #8]
 800841c:	f000 fc7f 	bl	8008d1e <q_readbyte>
 8008420:	9003      	str	r0, [sp, #12]
        mod                 = q_readbyte(alp->inq);
 8008422:	68a0      	ldr	r0, [r4, #8]
 8008424:	f000 fc7b 	bl	8008d1e <q_readbyte>
 8008428:	9004      	str	r0, [sp, #16]
        alp->inq->getcursor+= 2;           
 800842a:	68a2      	ldr	r2, [r4, #8]
 800842c:	6851      	ldr	r1, [r2, #4]
 800842e:	1c8b      	adds	r3, r1, #2
 8008430:	6053      	str	r3, [r2, #4]
        alloc               = q_readshort(alp->inq);
 8008432:	68a0      	ldr	r0, [r4, #8]
 8008434:	f000 fc78 	bl	8008d28 <q_readshort>
        err_code            = vl_new(&fp, file_block, id, mod, alloc, user_id);
 8008438:	4651      	mov	r1, sl
 800843a:	9101      	str	r1, [sp, #4]
 800843c:	9000      	str	r0, [sp, #0]
 800843e:	9b04      	ldr	r3, [sp, #16]
 8008440:	9a03      	ldr	r2, [sp, #12]
 8008442:	9905      	ldr	r1, [sp, #20]
 8008444:	a807      	add	r0, sp, #28
 8008446:	f000 fdb1 	bl	8008fac <vl_new>
 800844a:	9004      	str	r0, [sp, #16]
        if (respond) {
 800844c:	2f00      	cmp	r7, #0
 800844e:	d0d4      	beq.n	80083fa <sub_filecreate+0x34>
 8008450:	e7c9      	b.n	80083e6 <sub_filecreate+0x20>
}
 8008452:	0030      	movs	r0, r6
 8008454:	b008      	add	sp, #32
 8008456:	bc04      	pop	{r2}
 8008458:	4692      	mov	sl, r2
 800845a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800845c <sub_filedelete>:
static ot_int sub_filedelete( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 800845c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800845e:	b085      	sub	sp, #20
 8008460:	0005      	movs	r5, r0
 8008462:	9103      	str	r1, [sp, #12]
 8008464:	0014      	movs	r4, r2
 8008466:	aa0a      	add	r2, sp, #40	; 0x28
 8008468:	2600      	movs	r6, #0
 800846a:	5f96      	ldrsh	r6, [r2, r6]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 800846c:	091b      	lsrs	r3, r3, #4
 800846e:	2207      	movs	r2, #7
 8008470:	401a      	ands	r2, r3
 8008472:	9202      	str	r2, [sp, #8]
    ot_int  data_out    = 0;
 8008474:	2700      	movs	r7, #0
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8008476:	e009      	b.n	800848c <sub_filedelete+0x30>
            q_writebyte(alp->outq, file_id);
 8008478:	9900      	ldr	r1, [sp, #0]
 800847a:	68e8      	ldr	r0, [r5, #12]
 800847c:	f000 fc20 	bl	8008cc0 <q_writebyte>
            q_writebyte(alp->outq, err_code);
 8008480:	9901      	ldr	r1, [sp, #4]
 8008482:	68e8      	ldr	r0, [r5, #12]
 8008484:	f000 fc1c 	bl	8008cc0 <q_writebyte>
            data_out += 2;
 8008488:	3702      	adds	r7, #2
 800848a:	b23f      	sxth	r7, r7
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 800848c:	2e00      	cmp	r6, #0
 800848e:	dd15      	ble.n	80084bc <sub_filedelete+0x60>
 8008490:	68ea      	ldr	r2, [r5, #12]
 8008492:	2102      	movs	r1, #2
 8008494:	0020      	movs	r0, r4
 8008496:	f7ff ff61 	bl	800835c <sub_qnotfull>
 800849a:	2800      	cmp	r0, #0
 800849c:	d00e      	beq.n	80084bc <sub_filedelete+0x60>
        data_in--;
 800849e:	3e01      	subs	r6, #1
 80084a0:	b236      	sxth	r6, r6
        file_id     = q_readbyte(alp->inq);
 80084a2:	68a8      	ldr	r0, [r5, #8]
 80084a4:	f000 fc3b 	bl	8008d1e <q_readbyte>
 80084a8:	0001      	movs	r1, r0
 80084aa:	9000      	str	r0, [sp, #0]
        err_code    = vl_delete(file_block, file_id, user_id);
 80084ac:	9a03      	ldr	r2, [sp, #12]
 80084ae:	9802      	ldr	r0, [sp, #8]
 80084b0:	f000 fdd4 	bl	800905c <vl_delete>
 80084b4:	9001      	str	r0, [sp, #4]
        if (respond) {
 80084b6:	2c00      	cmp	r4, #0
 80084b8:	d0e8      	beq.n	800848c <sub_filedelete+0x30>
 80084ba:	e7dd      	b.n	8008478 <sub_filedelete+0x1c>
}
 80084bc:	0038      	movs	r0, r7
 80084be:	b005      	add	sp, #20
 80084c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084c2 <sub_fileheaders>:
static ot_int sub_fileheaders( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 80084c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084c4:	46d6      	mov	lr, sl
 80084c6:	4647      	mov	r7, r8
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b087      	sub	sp, #28
 80084cc:	0006      	movs	r6, r0
 80084ce:	0011      	movs	r1, r2
 80084d0:	9203      	str	r2, [sp, #12]
 80084d2:	aa0e      	add	r2, sp, #56	; 0x38
 80084d4:	2400      	movs	r4, #0
 80084d6:	5f14      	ldrsh	r4, [r2, r4]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 80084d8:	091b      	lsrs	r3, r3, #4
 80084da:	2507      	movs	r5, #7
 80084dc:	401d      	ands	r5, r3
    if (respond) {
 80084de:	2900      	cmp	r1, #0
 80084e0:	d002      	beq.n	80084e8 <sub_fileheaders+0x26>
    ot_int  data_out    = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	4698      	mov	r8, r3
 80084e6:	e02e      	b.n	8008546 <sub_fileheaders+0x84>
 80084e8:	2300      	movs	r3, #0
 80084ea:	4698      	mov	r8, r3
}
 80084ec:	4640      	mov	r0, r8
 80084ee:	b007      	add	sp, #28
 80084f0:	bc0c      	pop	{r2, r3}
 80084f2:	4690      	mov	r8, r2
 80084f4:	469a      	mov	sl, r3
 80084f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                q_writeshort_be(alp->outq, vworm_read(header + 4)); // id & mod
 80084f8:	68f3      	ldr	r3, [r6, #12]
 80084fa:	469a      	mov	sl, r3
 80084fc:	270e      	movs	r7, #14
 80084fe:	ab02      	add	r3, sp, #8
 8008500:	469c      	mov	ip, r3
 8008502:	4467      	add	r7, ip
 8008504:	8838      	ldrh	r0, [r7, #0]
 8008506:	3004      	adds	r0, #4
 8008508:	b280      	uxth	r0, r0
 800850a:	f001 ff67 	bl	800a3dc <vworm_read>
 800850e:	0001      	movs	r1, r0
 8008510:	4650      	mov	r0, sl
 8008512:	f000 fbe4 	bl	8008cde <q_writeshort_be>
                q_writeshort(alp->outq, vworm_read(header + 0)); // length
 8008516:	68f3      	ldr	r3, [r6, #12]
 8008518:	469a      	mov	sl, r3
 800851a:	8838      	ldrh	r0, [r7, #0]
 800851c:	f001 ff5e 	bl	800a3dc <vworm_read>
 8008520:	0001      	movs	r1, r0
 8008522:	4650      	mov	r0, sl
 8008524:	f000 fbd1 	bl	8008cca <q_writeshort>
                q_writeshort(alp->outq, vworm_read(header + 2)); // alloc
 8008528:	68f3      	ldr	r3, [r6, #12]
 800852a:	469a      	mov	sl, r3
 800852c:	8838      	ldrh	r0, [r7, #0]
 800852e:	3002      	adds	r0, #2
 8008530:	b280      	uxth	r0, r0
 8008532:	f001 ff53 	bl	800a3dc <vworm_read>
 8008536:	0001      	movs	r1, r0
 8008538:	4650      	mov	r0, sl
 800853a:	f000 fbc6 	bl	8008cca <q_writeshort>
                data_out += 6;
 800853e:	4643      	mov	r3, r8
 8008540:	3306      	adds	r3, #6
 8008542:	b21b      	sxth	r3, r3
 8008544:	4698      	mov	r8, r3
        while ((data_in > 0) && sub_qnotfull(respond, 6, alp->outq)) {
 8008546:	2c00      	cmp	r4, #0
 8008548:	ddd0      	ble.n	80084ec <sub_fileheaders+0x2a>
 800854a:	68f2      	ldr	r2, [r6, #12]
 800854c:	2106      	movs	r1, #6
 800854e:	9803      	ldr	r0, [sp, #12]
 8008550:	f7ff ff04 	bl	800835c <sub_qnotfull>
 8008554:	2800      	cmp	r0, #0
 8008556:	d0c9      	beq.n	80084ec <sub_fileheaders+0x2a>
            data_in--;  // one for the file id
 8008558:	3c01      	subs	r4, #1
 800855a:	b224      	sxth	r4, r4
            allow_output = (ot_bool)(vl_getheader_vaddr(&header, file_block, \
 800855c:	68b0      	ldr	r0, [r6, #8]
 800855e:	f000 fbde 	bl	8008d1e <q_readbyte>
 8008562:	0002      	movs	r2, r0
 8008564:	2300      	movs	r3, #0
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	3324      	adds	r3, #36	; 0x24
 800856a:	0029      	movs	r1, r5
 800856c:	200e      	movs	r0, #14
 800856e:	af02      	add	r7, sp, #8
 8008570:	46bc      	mov	ip, r7
 8008572:	4460      	add	r0, ip
 8008574:	f000 fdca 	bl	800910c <vl_getheader_vaddr>
            if (allow_output) {
 8008578:	2800      	cmp	r0, #0
 800857a:	d1e4      	bne.n	8008546 <sub_fileheaders+0x84>
 800857c:	e7bc      	b.n	80084f8 <sub_fileheaders+0x36>
	...

08008580 <sub_filedata>:
static ot_int sub_filedata(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
 8008580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008582:	46de      	mov	lr, fp
 8008584:	4657      	mov	r7, sl
 8008586:	464e      	mov	r6, r9
 8008588:	4645      	mov	r5, r8
 800858a:	b5e0      	push	{r5, r6, r7, lr}
 800858c:	b093      	sub	sp, #76	; 0x4c
 800858e:	900c      	str	r0, [sp, #48]	; 0x30
 8008590:	9109      	str	r1, [sp, #36]	; 0x24
 8008592:	920a      	str	r2, [sp, #40]	; 0x28
 8008594:	aa1c      	add	r2, sp, #112	; 0x70
 8008596:	2100      	movs	r1, #0
 8008598:	5e52      	ldrsh	r2, [r2, r1]
 800859a:	4692      	mov	sl, r2
 800859c:	220f      	movs	r2, #15
 800859e:	401a      	ands	r2, r3
 80085a0:	920b      	str	r2, [sp, #44]	; 0x2c
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 80085a2:	091a      	lsrs	r2, r3, #4
 80085a4:	2107      	movs	r1, #7
 80085a6:	4011      	ands	r1, r2
 80085a8:	9108      	str	r1, [sp, #32]
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 80085aa:	079a      	lsls	r2, r3, #30
 80085ac:	d511      	bpl.n	80085d2 <sub_filedata+0x52>
 80085ae:	2212      	movs	r2, #18
 80085b0:	9205      	str	r2, [sp, #20]
    ot_u8   insert_mode = (cmd_in & 0x01);
 80085b2:	2201      	movs	r2, #1
 80085b4:	401a      	ands	r2, r3
 80085b6:	920e      	str	r2, [sp, #56]	; 0x38
    ot_queue*  inq      = alp->inq;
 80085b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ba:	689e      	ldr	r6, [r3, #8]
    ot_queue*  outq     = alp->outq;
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	9304      	str	r3, [sp, #16]
    ot_qcur outq_marker = alp->outq->putcursor;
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	930f      	str	r3, [sp, #60]	; 0x3c
    vlFILE* fp          = NULL;
 80085c4:	2300      	movs	r3, #0
 80085c6:	9303      	str	r3, [sp, #12]
    ot_int  data_out    = 0;
 80085c8:	2700      	movs	r7, #0
 80085ca:	9607      	str	r6, [sp, #28]
 80085cc:	46bb      	mov	fp, r7
 80085ce:	4654      	mov	r4, sl
    while (data_in > 0) {
 80085d0:	e0c1      	b.n	8008756 <sub_filedata+0x1d6>
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 80085d2:	2224      	movs	r2, #36	; 0x24
 80085d4:	9205      	str	r2, [sp, #20]
 80085d6:	e7ec      	b.n	80085b2 <sub_filedata+0x32>
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 80085d8:	4b9f      	ldr	r3, [pc, #636]	; (8008858 <sub_filedata+0x2d8>)
 80085da:	469a      	mov	sl, r3
 80085dc:	e0d3      	b.n	8008786 <sub_filedata+0x206>
            if (limit > fp->alloc) {
 80085de:	4556      	cmp	r6, sl
 80085e0:	d324      	bcc.n	800862c <sub_filedata+0xac>
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 80085e2:	4656      	mov	r6, sl
            if (insert_mode == 0) {
 80085e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d122      	bne.n	8008630 <sub_filedata+0xb0>
                fp->length = 0;
 80085ea:	9a03      	ldr	r2, [sp, #12]
 80085ec:	8113      	strh	r3, [r2, #8]
 80085ee:	4643      	mov	r3, r8
 80085f0:	46b0      	mov	r8, r6
 80085f2:	46ba      	mov	sl, r7
 80085f4:	9f07      	ldr	r7, [sp, #28]
 80085f6:	001e      	movs	r6, r3
            for (; offset<limit; offset+=2, span-=2, data_in-=2) {
 80085f8:	4545      	cmp	r5, r8
 80085fa:	d21f      	bcs.n	800863c <sub_filedata+0xbc>
                if (inq->getcursor >= inq->back) {
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	4293      	cmp	r3, r2
 8008602:	d300      	bcc.n	8008606 <sub_filedata+0x86>
 8008604:	e114      	b.n	8008830 <sub_filedata+0x2b0>
                err_code |= vl_write(fp, offset, q_readshort_be(inq));
 8008606:	0038      	movs	r0, r7
 8008608:	f000 fb99 	bl	8008d3e <q_readshort_be>
 800860c:	0002      	movs	r2, r0
 800860e:	0029      	movs	r1, r5
 8008610:	9803      	ldr	r0, [sp, #12]
 8008612:	f000 fe32 	bl	800927a <vl_write>
 8008616:	4653      	mov	r3, sl
 8008618:	4303      	orrs	r3, r0
 800861a:	b2db      	uxtb	r3, r3
 800861c:	469a      	mov	sl, r3
            for (; offset<limit; offset+=2, span-=2, data_in-=2) {
 800861e:	3502      	adds	r5, #2
 8008620:	b2ad      	uxth	r5, r5
 8008622:	3e02      	subs	r6, #2
 8008624:	b2b6      	uxth	r6, r6
 8008626:	3c02      	subs	r4, #2
 8008628:	b224      	sxth	r4, r4
 800862a:	e7e5      	b.n	80085f8 <sub_filedata+0x78>
                err_code    = 0x08;
 800862c:	2708      	movs	r7, #8
 800862e:	e7d9      	b.n	80085e4 <sub_filedata+0x64>
 8008630:	4643      	mov	r3, r8
 8008632:	46b0      	mov	r8, r6
 8008634:	46ba      	mov	sl, r7
 8008636:	9f07      	ldr	r7, [sp, #28]
 8008638:	001e      	movs	r6, r3
 800863a:	e7dd      	b.n	80085f8 <sub_filedata+0x78>
 800863c:	46b0      	mov	r8, r6
 800863e:	4657      	mov	r7, sl
 8008640:	e079      	b.n	8008736 <sub_filedata+0x1b6>
            ot_u8 overhead = 5 << (inc_header != 0);
 8008642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008644:	2b0c      	cmp	r3, #12
 8008646:	d026      	beq.n	8008696 <sub_filedata+0x116>
 8008648:	2305      	movs	r3, #5
 800864a:	930d      	str	r3, [sp, #52]	; 0x34
            if (overhead >= q_writespace(outq)) {
 800864c:	9804      	ldr	r0, [sp, #16]
 800864e:	f000 fb09 	bl	8008c64 <q_writespace>
 8008652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008654:	4283      	cmp	r3, r0
 8008656:	db00      	blt.n	800865a <sub_filedata+0xda>
 8008658:	e0ec      	b.n	8008834 <sub_filedata+0x2b4>
            data_out += overhead;
 800865a:	445b      	add	r3, fp
 800865c:	b21b      	sxth	r3, r3
 800865e:	469b      	mov	fp, r3
            if (inc_header) {
 8008660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008662:	2b0c      	cmp	r3, #12
 8008664:	d01a      	beq.n	800869c <sub_filedata+0x11c>
                q_writebyte(outq, (vworm_read(header+4) & 0x00ff) );
 8008666:	230e      	movs	r3, #14
 8008668:	aa0e      	add	r2, sp, #56	; 0x38
 800866a:	4694      	mov	ip, r2
 800866c:	4463      	add	r3, ip
 800866e:	8818      	ldrh	r0, [r3, #0]
 8008670:	3004      	adds	r0, #4
 8008672:	b280      	uxth	r0, r0
 8008674:	f001 feb2 	bl	800a3dc <vworm_read>
 8008678:	b2c1      	uxtb	r1, r0
 800867a:	9804      	ldr	r0, [sp, #16]
 800867c:	f000 fb20 	bl	8008cc0 <q_writebyte>
            if (offset >= fp->length) {
 8008680:	9b03      	ldr	r3, [sp, #12]
 8008682:	891b      	ldrh	r3, [r3, #8]
 8008684:	42ab      	cmp	r3, r5
 8008686:	d926      	bls.n	80086d6 <sub_filedata+0x156>
            else if (limit > fp->length) {
 8008688:	4553      	cmp	r3, sl
 800868a:	d227      	bcs.n	80086dc <sub_filedata+0x15c>
                span    = fp->length - offset;
 800868c:	1b9a      	subs	r2, r3, r6
 800868e:	b292      	uxth	r2, r2
 8008690:	4690      	mov	r8, r2
                limit   = fp->length;
 8008692:	469a      	mov	sl, r3
 8008694:	e022      	b.n	80086dc <sub_filedata+0x15c>
            ot_u8 overhead = 5 << (inc_header != 0);
 8008696:	3b02      	subs	r3, #2
 8008698:	930d      	str	r3, [sp, #52]	; 0x34
 800869a:	e7d7      	b.n	800864c <sub_filedata+0xcc>
                q_writeshort_be(outq, vworm_read(header + 4));
 800869c:	ab0e      	add	r3, sp, #56	; 0x38
 800869e:	89d8      	ldrh	r0, [r3, #14]
 80086a0:	3004      	adds	r0, #4
 80086a2:	b280      	uxth	r0, r0
 80086a4:	f001 fe9a 	bl	800a3dc <vworm_read>
 80086a8:	0001      	movs	r1, r0
 80086aa:	9804      	ldr	r0, [sp, #16]
 80086ac:	f000 fb17 	bl	8008cde <q_writeshort_be>
                q_writeshort(outq, vworm_read(header + 0));    // length
 80086b0:	ab0e      	add	r3, sp, #56	; 0x38
 80086b2:	89d8      	ldrh	r0, [r3, #14]
 80086b4:	f001 fe92 	bl	800a3dc <vworm_read>
 80086b8:	0001      	movs	r1, r0
 80086ba:	9804      	ldr	r0, [sp, #16]
 80086bc:	f000 fb05 	bl	8008cca <q_writeshort>
                q_writeshort(outq, vworm_read(header + 2));    // alloc
 80086c0:	ab0e      	add	r3, sp, #56	; 0x38
 80086c2:	89d8      	ldrh	r0, [r3, #14]
 80086c4:	3002      	adds	r0, #2
 80086c6:	b280      	uxth	r0, r0
 80086c8:	f001 fe88 	bl	800a3dc <vworm_read>
 80086cc:	0001      	movs	r1, r0
 80086ce:	9804      	ldr	r0, [sp, #16]
 80086d0:	f000 fafb 	bl	8008cca <q_writeshort>
 80086d4:	e7d4      	b.n	8008680 <sub_filedata+0x100>
                limit   = 0;
 80086d6:	2300      	movs	r3, #0
 80086d8:	469a      	mov	sl, r3
                span    = 0;
 80086da:	4698      	mov	r8, r3
            q_writeshort(outq, offset);
 80086dc:	0031      	movs	r1, r6
 80086de:	9e04      	ldr	r6, [sp, #16]
 80086e0:	0030      	movs	r0, r6
 80086e2:	f000 faf2 	bl	8008cca <q_writeshort>
            q_writeshort(outq, span);
 80086e6:	4641      	mov	r1, r8
 80086e8:	0030      	movs	r0, r6
 80086ea:	f000 faee 	bl	8008cca <q_writeshort>
 80086ee:	4646      	mov	r6, r8
 80086f0:	46b8      	mov	r8, r7
 80086f2:	4657      	mov	r7, sl
 80086f4:	0023      	movs	r3, r4
 80086f6:	465c      	mov	r4, fp
 80086f8:	469b      	mov	fp, r3
            for (; offset<limit; offset+=2, span-=2, data_out+=2) {
 80086fa:	42bd      	cmp	r5, r7
 80086fc:	d214      	bcs.n	8008728 <sub_filedata+0x1a8>
                if (2 >= q_writespace(outq)) {
 80086fe:	9804      	ldr	r0, [sp, #16]
 8008700:	f000 fab0 	bl	8008c64 <q_writespace>
 8008704:	2802      	cmp	r0, #2
 8008706:	dc00      	bgt.n	800870a <sub_filedata+0x18a>
 8008708:	e096      	b.n	8008838 <sub_filedata+0x2b8>
                q_writeshort_be(outq, vl_read(fp, offset));
 800870a:	0029      	movs	r1, r5
 800870c:	9803      	ldr	r0, [sp, #12]
 800870e:	f000 fdad 	bl	800926c <vl_read>
 8008712:	0001      	movs	r1, r0
 8008714:	9804      	ldr	r0, [sp, #16]
 8008716:	f000 fae2 	bl	8008cde <q_writeshort_be>
            for (; offset<limit; offset+=2, span-=2, data_out+=2) {
 800871a:	3502      	adds	r5, #2
 800871c:	b2ad      	uxth	r5, r5
 800871e:	3e02      	subs	r6, #2
 8008720:	b2b6      	uxth	r6, r6
 8008722:	3402      	adds	r4, #2
 8008724:	b224      	sxth	r4, r4
 8008726:	e7e8      	b.n	80086fa <sub_filedata+0x17a>
 8008728:	4647      	mov	r7, r8
 800872a:	46b0      	mov	r8, r6
 800872c:	465b      	mov	r3, fp
 800872e:	46a3      	mov	fp, r4
 8008730:	001c      	movs	r4, r3
 8008732:	e000      	b.n	8008736 <sub_filedata+0x1b6>
            err_code = 0xFF;
 8008734:	27ff      	movs	r7, #255	; 0xff
            app_err = vl_close(fp);
 8008736:	9803      	ldr	r0, [sp, #12]
 8008738:	f000 fe1a 	bl	8009370 <vl_close>
            if ((app_err != 0) && (err_code == 0)) {
 800873c:	2800      	cmp	r0, #0
 800873e:	d002      	beq.n	8008746 <sub_filedata+0x1c6>
 8008740:	2f00      	cmp	r7, #0
 8008742:	d100      	bne.n	8008746 <sub_filedata+0x1c6>
                err_code = 0x09;    
 8008744:	3709      	adds	r7, #9
        if (respond) {
 8008746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008748:	2b00      	cmp	r3, #0
 800874a:	d148      	bne.n	80087de <sub_filedata+0x25e>
        data_in -= 5;       // 5 bytes input header
 800874c:	3c05      	subs	r4, #5
 800874e:	b2a4      	uxth	r4, r4
        data_in -= span;    // Bypass data payload
 8008750:	4643      	mov	r3, r8
 8008752:	1ae4      	subs	r4, r4, r3
 8008754:	b224      	sxth	r4, r4
    while (data_in > 0) {
 8008756:	2c00      	cmp	r4, #0
 8008758:	dc00      	bgt.n	800875c <sub_filedata+0x1dc>
 800875a:	e07b      	b.n	8008854 <sub_filedata+0x2d4>
        file_id     = q_readbyte(inq);
 800875c:	9f07      	ldr	r7, [sp, #28]
 800875e:	0038      	movs	r0, r7
 8008760:	f000 fadd 	bl	8008d1e <q_readbyte>
 8008764:	9006      	str	r0, [sp, #24]
        offset      = q_readshort(inq);
 8008766:	0038      	movs	r0, r7
 8008768:	f000 fade 	bl	8008d28 <q_readshort>
 800876c:	0006      	movs	r6, r0
 800876e:	0005      	movs	r5, r0
        span        = q_readshort(inq);
 8008770:	0038      	movs	r0, r7
 8008772:	f000 fad9 	bl	8008d28 <q_readshort>
 8008776:	4680      	mov	r8, r0
        lim_check   = (ot_long)offset + (ot_long)span;
 8008778:	1832      	adds	r2, r6, r0
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 800877a:	4b37      	ldr	r3, [pc, #220]	; (8008858 <sub_filedata+0x2d8>)
 800877c:	429a      	cmp	r2, r3
 800877e:	dd00      	ble.n	8008782 <sub_filedata+0x202>
 8008780:	e72a      	b.n	80085d8 <sub_filedata+0x58>
 8008782:	b293      	uxth	r3, r2
 8008784:	469a      	mov	sl, r3
        err_code    = vl_getheader_vaddr(&header, file_block, file_id, file_mod, user_id);
 8008786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	9b05      	ldr	r3, [sp, #20]
 800878c:	4699      	mov	r9, r3
 800878e:	9a06      	ldr	r2, [sp, #24]
 8008790:	9908      	ldr	r1, [sp, #32]
 8008792:	200e      	movs	r0, #14
 8008794:	af0e      	add	r7, sp, #56	; 0x38
 8008796:	46bc      	mov	ip, r7
 8008798:	4460      	add	r0, ip
 800879a:	f000 fcb7 	bl	800910c <vl_getheader_vaddr>
 800879e:	0007      	movs	r7, r0
 80087a0:	2312      	movs	r3, #18
 80087a2:	464a      	mov	r2, r9
 80087a4:	401a      	ands	r2, r3
 80087a6:	4691      	mov	r9, r2
        file_mod    = ((file_mod & VL_ACCESS_W) != 0);
 80087a8:	0013      	movs	r3, r2
 80087aa:	1e5a      	subs	r2, r3, #1
 80087ac:	4193      	sbcs	r3, r2
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	9305      	str	r3, [sp, #20]
        if (err_code != 0) {
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d1bf      	bne.n	8008736 <sub_filedata+0x1b6>
        fp = vl_open_file(header);
 80087b6:	230e      	movs	r3, #14
 80087b8:	aa0e      	add	r2, sp, #56	; 0x38
 80087ba:	4694      	mov	ip, r2
 80087bc:	4463      	add	r3, ip
 80087be:	8818      	ldrh	r0, [r3, #0]
 80087c0:	f000 fcda 	bl	8009178 <vl_open_file>
 80087c4:	9003      	str	r0, [sp, #12]
        if (fp == NULL) {
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d0b4      	beq.n	8008734 <sub_filedata+0x1b4>
        if (file_mod) {
 80087ca:	464a      	mov	r2, r9
 80087cc:	2a00      	cmp	r2, #0
 80087ce:	d100      	bne.n	80087d2 <sub_filedata+0x252>
 80087d0:	e737      	b.n	8008642 <sub_filedata+0xc2>
            if (offset >= fp->alloc) {
 80087d2:	8886      	ldrh	r6, [r0, #4]
 80087d4:	42ae      	cmp	r6, r5
 80087d6:	d900      	bls.n	80087da <sub_filedata+0x25a>
 80087d8:	e701      	b.n	80085de <sub_filedata+0x5e>
                err_code = 0x07;
 80087da:	2707      	movs	r7, #7
 80087dc:	e7ab      	b.n	8008736 <sub_filedata+0x1b6>
            if (2 >= q_writespace(outq)) {
 80087de:	9d04      	ldr	r5, [sp, #16]
 80087e0:	0028      	movs	r0, r5
 80087e2:	f000 fa3f 	bl	8008c64 <q_writespace>
 80087e6:	2802      	cmp	r0, #2
 80087e8:	dd32      	ble.n	8008850 <sub_filedata+0x2d0>
            if (file_mod | err_code) {
 80087ea:	9b05      	ldr	r3, [sp, #20]
 80087ec:	433b      	orrs	r3, r7
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0ab      	beq.n	800874c <sub_filedata+0x1cc>
                if (file_mod == 0) {
 80087f4:	464b      	mov	r3, r9
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d107      	bne.n	800880a <sub_filedata+0x28a>
                    outq->putcursor     = outq_marker;
 80087fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087fc:	60ab      	str	r3, [r5, #8]
                    alp->OUTREC(CMD)   |= 0x0F;
 80087fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008800:	794b      	ldrb	r3, [r1, #5]
 8008802:	220f      	movs	r2, #15
 8008804:	4313      	orrs	r3, r2
 8008806:	714b      	strb	r3, [r1, #5]
                    data_in             = 0;
 8008808:	2400      	movs	r4, #0
                q_writebyte(outq, file_id);
 800880a:	9906      	ldr	r1, [sp, #24]
 800880c:	9d04      	ldr	r5, [sp, #16]
 800880e:	0028      	movs	r0, r5
 8008810:	f000 fa56 	bl	8008cc0 <q_writebyte>
                q_writebyte(outq, err_code);
 8008814:	0039      	movs	r1, r7
 8008816:	0028      	movs	r0, r5
 8008818:	f000 fa52 	bl	8008cc0 <q_writebyte>
                q_markbyte(inq, span);         // go past any leftover input data
 800881c:	4643      	mov	r3, r8
 800881e:	b219      	sxth	r1, r3
 8008820:	9807      	ldr	r0, [sp, #28]
 8008822:	f000 fa48 	bl	8008cb6 <q_markbyte>
                data_out += 2;
 8008826:	465b      	mov	r3, fp
 8008828:	3302      	adds	r3, #2
 800882a:	b21b      	sxth	r3, r3
 800882c:	469b      	mov	fp, r3
 800882e:	e78d      	b.n	800874c <sub_filedata+0x1cc>
 8008830:	465f      	mov	r7, fp
 8008832:	e002      	b.n	800883a <sub_filedata+0x2ba>
 8008834:	465f      	mov	r7, fp
 8008836:	e000      	b.n	800883a <sub_filedata+0x2ba>
 8008838:	0027      	movs	r7, r4
    vl_close(fp);
 800883a:	9803      	ldr	r0, [sp, #12]
 800883c:	f000 fd98 	bl	8009370 <vl_close>
}
 8008840:	0038      	movs	r0, r7
 8008842:	b013      	add	sp, #76	; 0x4c
 8008844:	bc3c      	pop	{r2, r3, r4, r5}
 8008846:	4690      	mov	r8, r2
 8008848:	4699      	mov	r9, r3
 800884a:	46a2      	mov	sl, r4
 800884c:	46ab      	mov	fp, r5
 800884e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008850:	465f      	mov	r7, fp
 8008852:	e7f2      	b.n	800883a <sub_filedata+0x2ba>
 8008854:	465f      	mov	r7, fp
 8008856:	e7f3      	b.n	8008840 <sub_filedata+0x2c0>
 8008858:	0000ffff 	.word	0x0000ffff

0800885c <sub_fileperms>:
static ot_int sub_fileperms( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 800885c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800885e:	46ce      	mov	lr, r9
 8008860:	4647      	mov	r7, r8
 8008862:	b580      	push	{r7, lr}
 8008864:	b089      	sub	sp, #36	; 0x24
 8008866:	0006      	movs	r6, r0
 8008868:	9105      	str	r1, [sp, #20]
 800886a:	4691      	mov	r9, r2
 800886c:	aa10      	add	r2, sp, #64	; 0x40
 800886e:	2400      	movs	r4, #0
 8008870:	5f14      	ldrsh	r4, [r2, r4]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 8008872:	091a      	lsrs	r2, r3, #4
 8008874:	2707      	movs	r7, #7
 8008876:	4017      	ands	r7, r2
 8008878:	9704      	str	r7, [sp, #16]
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 800887a:	079b      	lsls	r3, r3, #30
 800887c:	d453      	bmi.n	8008926 <sub_fileperms+0xca>
 800887e:	2724      	movs	r7, #36	; 0x24
 8008880:	2300      	movs	r3, #0
 8008882:	4698      	mov	r8, r3
 8008884:	e00d      	b.n	80088a2 <sub_fileperms+0x46>
            data_in--;  // two for the new mod
 8008886:	3b02      	subs	r3, #2
 8008888:	b21c      	sxth	r4, r3
            file_mod = vl_chmod(file_block, file_id, q_readbyte(alp->inq), user_id);
 800888a:	68b0      	ldr	r0, [r6, #8]
 800888c:	f000 fa47 	bl	8008d1e <q_readbyte>
 8008890:	0002      	movs	r2, r0
 8008892:	9b05      	ldr	r3, [sp, #20]
 8008894:	9903      	ldr	r1, [sp, #12]
 8008896:	9804      	ldr	r0, [sp, #16]
 8008898:	f000 fcc7 	bl	800922a <vl_chmod>
 800889c:	0007      	movs	r7, r0
        if (allow_write) {
 800889e:	2d00      	cmp	r5, #0
 80088a0:	d134      	bne.n	800890c <sub_fileperms+0xb0>
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 80088a2:	2c00      	cmp	r4, #0
 80088a4:	dd41      	ble.n	800892a <sub_fileperms+0xce>
 80088a6:	68f2      	ldr	r2, [r6, #12]
 80088a8:	2102      	movs	r1, #2
 80088aa:	4648      	mov	r0, r9
 80088ac:	f7ff fd56 	bl	800835c <sub_qnotfull>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d03a      	beq.n	800892a <sub_fileperms+0xce>
        ot_u8   file_id         = q_readbyte(alp->inq);
 80088b4:	68b0      	ldr	r0, [r6, #8]
 80088b6:	f000 fa32 	bl	8008d1e <q_readbyte>
 80088ba:	9003      	str	r0, [sp, #12]
        ot_bool allow_write     = respond;
 80088bc:	464d      	mov	r5, r9
 80088be:	1e6b      	subs	r3, r5, #1
 80088c0:	419d      	sbcs	r5, r3
 80088c2:	b2ed      	uxtb	r5, r5
        data_in--;  // one for the file id
 80088c4:	b2a3      	uxth	r3, r4
 80088c6:	1e5c      	subs	r4, r3, #1
 80088c8:	b224      	sxth	r4, r4
        if (file_mod == VL_ACCESS_W ) {
 80088ca:	2f12      	cmp	r7, #18
 80088cc:	d0db      	beq.n	8008886 <sub_fileperms+0x2a>
        else if (allow_write) {
 80088ce:	464b      	mov	r3, r9
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0e4      	beq.n	800889e <sub_fileperms+0x42>
            allow_write = (ot_bool)(vl_getheader_vaddr(&header, file_block, file_id, \
 80088d4:	2300      	movs	r3, #0
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	3324      	adds	r3, #36	; 0x24
 80088da:	9a03      	ldr	r2, [sp, #12]
 80088dc:	9904      	ldr	r1, [sp, #16]
 80088de:	200e      	movs	r0, #14
 80088e0:	ad04      	add	r5, sp, #16
 80088e2:	46ac      	mov	ip, r5
 80088e4:	4460      	add	r0, ip
 80088e6:	f000 fc11 	bl	800910c <vl_getheader_vaddr>
 80088ea:	4245      	negs	r5, r0
 80088ec:	4145      	adcs	r5, r0
 80088ee:	b2ed      	uxtb	r5, r5
            if (allow_write) {
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d1d4      	bne.n	800889e <sub_fileperms+0x42>
                file_idmod  = vworm_read(header + 4);   //shortcut to idmod, hack-ish but fast
 80088f4:	230e      	movs	r3, #14
 80088f6:	aa04      	add	r2, sp, #16
 80088f8:	4694      	mov	ip, r2
 80088fa:	4463      	add	r3, ip
 80088fc:	8818      	ldrh	r0, [r3, #0]
 80088fe:	3004      	adds	r0, #4
 8008900:	b280      	uxth	r0, r0
 8008902:	f001 fd6b 	bl	800a3dc <vworm_read>
                file_mod    = file_idmod >> 8;          ///@todo this might be endian dependent
 8008906:	0a00      	lsrs	r0, r0, #8
 8008908:	b2c7      	uxtb	r7, r0
 800890a:	e7c8      	b.n	800889e <sub_fileperms+0x42>
            q_writebyte(alp->outq, file_id);
 800890c:	9903      	ldr	r1, [sp, #12]
 800890e:	68f0      	ldr	r0, [r6, #12]
 8008910:	f000 f9d6 	bl	8008cc0 <q_writebyte>
            q_writebyte(alp->outq, file_mod);
 8008914:	0039      	movs	r1, r7
 8008916:	68f0      	ldr	r0, [r6, #12]
 8008918:	f000 f9d2 	bl	8008cc0 <q_writebyte>
            data_out += 2;
 800891c:	4643      	mov	r3, r8
 800891e:	3302      	adds	r3, #2
 8008920:	b21b      	sxth	r3, r3
 8008922:	4698      	mov	r8, r3
 8008924:	e7bd      	b.n	80088a2 <sub_fileperms+0x46>
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 8008926:	2712      	movs	r7, #18
 8008928:	e7aa      	b.n	8008880 <sub_fileperms+0x24>
}
 800892a:	4640      	mov	r0, r8
 800892c:	b009      	add	sp, #36	; 0x24
 800892e:	bc0c      	pop	{r2, r3}
 8008930:	4690      	mov	r8, r2
 8008932:	4699      	mov	r9, r3
 8008934:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008938 <alp_proc_filedata>:
OT_WEAK ot_bool alp_proc_filedata(alp_tmpl* alp, const id_tmpl* user_id) {
 8008938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800893a:	b085      	sub	sp, #20
 800893c:	0004      	movs	r4, r0
 800893e:	9103      	str	r1, [sp, #12]
    ot_int  data_in     = INREC(alp, PLEN);     //alp->INREC(PLEN);
 8008940:	2103      	movs	r1, #3
 8008942:	4249      	negs	r1, r1
 8008944:	6880      	ldr	r0, [r0, #8]
 8008946:	f000 f980 	bl	8008c4a <q_getcursor_val>
 800894a:	b207      	sxth	r7, r0
    ot_u8   cmd_in      = INREC(alp, CMD);      //alp->INREC(CMD);
 800894c:	2101      	movs	r1, #1
 800894e:	4249      	negs	r1, r1
 8008950:	68a0      	ldr	r0, [r4, #8]
 8008952:	f000 f97a 	bl	8008c4a <q_getcursor_val>
 8008956:	0006      	movs	r6, r0
    alp->OUTREC(PLEN) = cmd_fn[cmd_in & 0x0F](alp, user_id, (cmd_in & 0x80), cmd_in, data_in);
 8008958:	230f      	movs	r3, #15
 800895a:	4003      	ands	r3, r0
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4a11      	ldr	r2, [pc, #68]	; (80089a4 <alp_proc_filedata+0x6c>)
 8008960:	589d      	ldr	r5, [r3, r2]
 8008962:	237f      	movs	r3, #127	; 0x7f
 8008964:	0002      	movs	r2, r0
 8008966:	439a      	bics	r2, r3
 8008968:	b2d2      	uxtb	r2, r2
 800896a:	9700      	str	r7, [sp, #0]
 800896c:	0003      	movs	r3, r0
 800896e:	9903      	ldr	r1, [sp, #12]
 8008970:	0020      	movs	r0, r4
 8008972:	47a8      	blx	r5
 8008974:	b2c0      	uxtb	r0, r0
 8008976:	70e0      	strb	r0, [r4, #3]
    if (cmd_in & 0x80) {
 8008978:	0633      	lsls	r3, r6, #24
 800897a:	d406      	bmi.n	800898a <alp_proc_filedata+0x52>
        alp->outq->putcursor   -= alp->OUTREC(PLEN);
 800897c:	68e3      	ldr	r3, [r4, #12]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	1a10      	subs	r0, r2, r0
 8008982:	6098      	str	r0, [r3, #8]
}
 8008984:	2001      	movs	r0, #1
 8008986:	b005      	add	sp, #20
 8008988:	bdf0      	pop	{r4, r5, r6, r7, pc}
        alp->OUTREC(CMD)  ^= 0x80;
 800898a:	7962      	ldrb	r2, [r4, #5]
 800898c:	2380      	movs	r3, #128	; 0x80
 800898e:	425b      	negs	r3, r3
 8008990:	4053      	eors	r3, r2
        alp->OUTREC(CMD)  |= (cmd_in & 0x02) ? 0x0F : 0x01;
 8008992:	b25b      	sxtb	r3, r3
 8008994:	07b2      	lsls	r2, r6, #30
 8008996:	d403      	bmi.n	80089a0 <alp_proc_filedata+0x68>
 8008998:	2201      	movs	r2, #1
 800899a:	4313      	orrs	r3, r2
 800899c:	7163      	strb	r3, [r4, #5]
 800899e:	e7f1      	b.n	8008984 <alp_proc_filedata+0x4c>
 80089a0:	220f      	movs	r2, #15
 80089a2:	e7fa      	b.n	800899a <alp_proc_filedata+0x62>
 80089a4:	0800c568 	.word	0x0800c568

080089a8 <alp_proc_logger>:
#include <otlib/auth.h>
#include <otlib/queue.h>

///@todo replace INREC calls with direct access from input

OT_WEAK ot_bool alp_proc_logger(alp_tmpl* alp, const id_tmpl* user_id) {
 80089a8:	b510      	push	{r4, lr}
 80089aa:	0004      	movs	r4, r0
/// Logger ALP is like ECHO.  The input is copied to the output.

    // Only root can log directly (this is an important security firewall)
    if (auth_isroot(user_id)) {
 80089ac:	0008      	movs	r0, r1
 80089ae:	f000 f8cf 	bl	8008b50 <auth_isroot>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d101      	bne.n	80089ba <alp_proc_logger+0x12>
        if (alp->inq != alp->outq) {
            q_movedata(alp->outq, alp->inq, alp->OUTREC(PLEN));
        }
    }
    return True;
}
 80089b6:	2001      	movs	r0, #1
 80089b8:	bd10      	pop	{r4, pc}
        alp->OUTREC(FLAGS)  = q_readbyte(alp->inq);
 80089ba:	68a0      	ldr	r0, [r4, #8]
 80089bc:	f000 f9af 	bl	8008d1e <q_readbyte>
 80089c0:	70a0      	strb	r0, [r4, #2]
        alp->OUTREC(PLEN)   = q_readbyte(alp->inq);
 80089c2:	68a0      	ldr	r0, [r4, #8]
 80089c4:	f000 f9ab 	bl	8008d1e <q_readbyte>
 80089c8:	70e0      	strb	r0, [r4, #3]
        alp->inq->getcursor+= 2;
 80089ca:	68a2      	ldr	r2, [r4, #8]
 80089cc:	6853      	ldr	r3, [r2, #4]
 80089ce:	3302      	adds	r3, #2
 80089d0:	6053      	str	r3, [r2, #4]
        if (alp->inq != alp->outq) {
 80089d2:	68a1      	ldr	r1, [r4, #8]
 80089d4:	68e0      	ldr	r0, [r4, #12]
 80089d6:	4281      	cmp	r1, r0
 80089d8:	d0ed      	beq.n	80089b6 <alp_proc_logger+0xe>
            q_movedata(alp->outq, alp->inq, alp->OUTREC(PLEN));
 80089da:	78e2      	ldrb	r2, [r4, #3]
 80089dc:	f000 f9e6 	bl	8008dac <q_movedata>
 80089e0:	e7e9      	b.n	80089b6 <alp_proc_logger+0xe>

080089e2 <alp_proc_null>:
 * The Null Processor is implemented here.  The rest of the processors are
 * implemented in separate C files, named alp_...c
 */
OT_WEAK ot_bool alp_proc_null(alp_tmpl* a0, const id_tmpl* a1) {
    return True;   // Atomic, with no payload data
}
 80089e2:	2001      	movs	r0, #1
 80089e4:	4770      	bx	lr

080089e6 <alp_init>:
 * ========================================================================<BR>
 */

#ifndef EXTF_alp_init
void alp_init(alp_tmpl* alp, ot_queue* inq, ot_queue* outq) {
    alp->purge_id       = 1;
 80089e6:	2301      	movs	r3, #1
 80089e8:	8003      	strh	r3, [r0, #0]
    alp->OUTREC(FLAGS)  = (ALP_FLAG_MB | ALP_FLAG_ME | ALP_FLAG_SR);   ///@todo this will need to be removed soon
 80089ea:	33cf      	adds	r3, #207	; 0xcf
 80089ec:	7083      	strb	r3, [r0, #2]
    alp->inq            = inq;
 80089ee:	6081      	str	r1, [r0, #8]
    alp->outq           = outq;
 80089f0:	60c2      	str	r2, [r0, #12]
}
 80089f2:	4770      	bx	lr

080089f4 <alp_parse_message>:
///@todo To be completed when transformation of ALP is complete
}



ALP_status alp_parse_message(alp_tmpl* alp, const id_tmpl* user_id) {
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	0004      	movs	r4, r0
 80089f8:	000d      	movs	r5, r1
    //ot_u8       hdr_len;
    ot_int      proc_output;
    //ot_int      bytes;

    /// Lock the ot_queues while ALP is parsing/processing
    q_lock(alp->inq);
 80089fa:	6880      	ldr	r0, [r0, #8]
 80089fc:	f000 f93c 	bl	8008c78 <q_lock>
    q_lock(alp->outq);
 8008a00:	68e0      	ldr	r0, [r4, #12]
 8008a02:	f000 f939 	bl	8008c78 <q_lock>
 8008a06:	e027      	b.n	8008a58 <alp_parse_message+0x64>
    /// previous message.  If new input record header does not match
    /// OpenTag requirement, bypass it and go to the next.  Else, copy
    /// the input record to the output record.  alp_proc() will adjust
    /// the output payload length and flags, as necessary.
    if (alp->OUTREC(FLAGS) & ALP_FLAG_ME) {
        alp->OUTREC(FLAGS)  = q_getcursor_val(alp->inq, 0);
 8008a08:	2100      	movs	r1, #0
 8008a0a:	68a0      	ldr	r0, [r4, #8]
 8008a0c:	f000 f91d 	bl	8008c4a <q_getcursor_val>
 8008a10:	70a0      	strb	r0, [r4, #2]
        alp->OUTREC(PLEN)   = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	70e3      	strb	r3, [r4, #3]
        alp->OUTREC(ID)     = q_getcursor_val(alp->inq, 2);
 8008a16:	2102      	movs	r1, #2
 8008a18:	68a0      	ldr	r0, [r4, #8]
 8008a1a:	f000 f916 	bl	8008c4a <q_getcursor_val>
 8008a1e:	7120      	strb	r0, [r4, #4]
        alp->OUTREC(CMD)    = q_getcursor_val(alp->inq, 3);
 8008a20:	2103      	movs	r1, #3
 8008a22:	68a0      	ldr	r0, [r4, #8]
 8008a24:	f000 f911 	bl	8008c4a <q_getcursor_val>
 8008a28:	7160      	strb	r0, [r4, #5]
 8008a2a:	e022      	b.n	8008a72 <alp_parse_message+0x7e>
        // Also, remove output chunking flag
        alp->outq->putcursor   = hdr_position;
        alp->OUTREC(FLAGS)    &= ~NDEF_CF;
    }
    else {
        memcpy(hdr_position, &alp->OUTREC(FLAGS), 4);
 8008a2c:	1ca1      	adds	r1, r4, #2
 8008a2e:	2204      	movs	r2, #4
 8008a30:	0038      	movs	r0, r7
 8008a32:	f001 fc73 	bl	800a31c <ot_memcpy>
        alp->OUTREC(FLAGS)  &= ~ALP_FLAG_MB;
 8008a36:	78a2      	ldrb	r2, [r4, #2]
 8008a38:	237f      	movs	r3, #127	; 0x7f
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	70a3      	strb	r3, [r4, #2]
    }
    
    ///@note Added from old sources to handle batched ALP inputs
    {   ot_u8* nextrecord;
        nextrecord = input_position + input_position[1] + 4;
 8008a3e:	7873      	ldrb	r3, [r6, #1]
 8008a40:	3304      	adds	r3, #4
 8008a42:	18f3      	adds	r3, r6, r3
        if (nextrecord == alp->inq->putcursor) {
 8008a44:	68a2      	ldr	r2, [r4, #8]
 8008a46:	6891      	ldr	r1, [r2, #8]
 8008a48:	4299      	cmp	r1, r3
 8008a4a:	d028      	beq.n	8008a9e <alp_parse_message+0xaa>
            /// The input record, now treated, shall be rewound
            alp->inq->putcursor = input_position;
            alp->inq->getcursor = input_position;
        }
        else {
            alp->inq->getcursor = nextrecord;
 8008a4c:	6053      	str	r3, [r2, #4]

            ///@note HACK
            /// should be put into a loop
            if (alp->inq->putcursor > alp->inq->getcursor) {
 8008a4e:	68a3      	ldr	r3, [r4, #8]
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d925      	bls.n	8008aa4 <alp_parse_message+0xb0>
    if ((q_readspace(alp->inq) < 4) || (q_writespace(alp->outq) < 4)) {
 8008a58:	68a0      	ldr	r0, [r4, #8]
 8008a5a:	f000 f908 	bl	8008c6e <q_readspace>
 8008a5e:	2803      	cmp	r0, #3
 8008a60:	dd28      	ble.n	8008ab4 <alp_parse_message+0xc0>
 8008a62:	68e0      	ldr	r0, [r4, #12]
 8008a64:	f000 f8fe 	bl	8008c64 <q_writespace>
 8008a68:	2803      	cmp	r0, #3
 8008a6a:	dd25      	ble.n	8008ab8 <alp_parse_message+0xc4>
    if (alp->OUTREC(FLAGS) & ALP_FLAG_ME) {
 8008a6c:	78a3      	ldrb	r3, [r4, #2]
 8008a6e:	065b      	lsls	r3, r3, #25
 8008a70:	d4ca      	bmi.n	8008a08 <alp_parse_message+0x14>
    input_position          = alp->inq->getcursor;
 8008a72:	68a3      	ldr	r3, [r4, #8]
 8008a74:	685e      	ldr	r6, [r3, #4]
    alp->inq->getcursor    += 4;
 8008a76:	1d32      	adds	r2, r6, #4
 8008a78:	605a      	str	r2, [r3, #4]
    hdr_position            = alp->outq->putcursor;
 8008a7a:	68e3      	ldr	r3, [r4, #12]
 8008a7c:	689f      	ldr	r7, [r3, #8]
    alp->outq->putcursor   += 4;
 8008a7e:	1d3a      	adds	r2, r7, #4
 8008a80:	609a      	str	r2, [r3, #8]
    proc_output = alp_proc(alp, user_id);
 8008a82:	0029      	movs	r1, r5
 8008a84:	0020      	movs	r0, r4
 8008a86:	f7f8 ffaf 	bl	80019e8 <alp_proc>
    if (alp->OUTREC(PLEN) == 0) {
 8008a8a:	78e3      	ldrb	r3, [r4, #3]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1cd      	bne.n	8008a2c <alp_parse_message+0x38>
        alp->outq->putcursor   = hdr_position;
 8008a90:	68e3      	ldr	r3, [r4, #12]
 8008a92:	609f      	str	r7, [r3, #8]
        alp->OUTREC(FLAGS)    &= ~NDEF_CF;
 8008a94:	78a3      	ldrb	r3, [r4, #2]
 8008a96:	2220      	movs	r2, #32
 8008a98:	4393      	bics	r3, r2
 8008a9a:	70a3      	strb	r3, [r4, #2]
 8008a9c:	e7cf      	b.n	8008a3e <alp_parse_message+0x4a>
            alp->inq->putcursor = input_position;
 8008a9e:	6096      	str	r6, [r2, #8]
            alp->inq->getcursor = input_position;
 8008aa0:	68a3      	ldr	r3, [r4, #8]
 8008aa2:	605e      	str	r6, [r3, #4]
            }
        }
    }
    
    /// Unlock the ot_queues after ALP is parsing/processing
    q_unlock(alp->inq);
 8008aa4:	68a0      	ldr	r0, [r4, #8]
 8008aa6:	f000 f8f2 	bl	8008c8e <q_unlock>
    q_unlock(alp->outq);
 8008aaa:	68e0      	ldr	r0, [r4, #12]
 8008aac:	f000 f8ef 	bl	8008c8e <q_unlock>
    
    exit_code = MSG_End;
 8008ab0:	2006      	movs	r0, #6

    alp_parse_message_END:
    return exit_code;
}
 8008ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        exit_code = MSG_Null;
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	e7fc      	b.n	8008ab2 <alp_parse_message+0xbe>
 8008ab8:	2000      	movs	r0, #0
 8008aba:	e7fa      	b.n	8008ab2 <alp_parse_message+0xbe>

08008abc <alp_breakdown_query_tmpl>:





OT_WEAK void alp_breakdown_query_tmpl(ot_queue* in_q, void* data_type) {
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abe:	0006      	movs	r6, r0
 8008ac0:	000d      	movs	r5, r1
    ot_u8   query_length;
    ot_u8   query_code;
    ot_u8*  query_mask;
    
    query_code      = q_readbyte(in_q);
 8008ac2:	f000 f92c 	bl	8008d1e <q_readbyte>
 8008ac6:	0007      	movs	r7, r0
    query_length    = q_readbyte(in_q);
 8008ac8:	0030      	movs	r0, r6
 8008aca:	f000 f928 	bl	8008d1e <q_readbyte>
 8008ace:	0004      	movs	r4, r0
    query_mask      = NULL;
    
    if (query_code & 0x80) {
 8008ad0:	063b      	lsls	r3, r7, #24
 8008ad2:	d409      	bmi.n	8008ae8 <alp_breakdown_query_tmpl+0x2c>
    query_mask      = NULL;
 8008ad4:	2000      	movs	r0, #0
        query_mask  = q_markbyte(in_q, query_length);
    }
    
    ((query_tmpl*)data_type)->code      = query_code;
 8008ad6:	702f      	strb	r7, [r5, #0]
    ((query_tmpl*)data_type)->length    = query_length;
 8008ad8:	706c      	strb	r4, [r5, #1]
    ((query_tmpl*)data_type)->mask      = query_mask;
 8008ada:	6068      	str	r0, [r5, #4]
    ((query_tmpl*)data_type)->value     = q_markbyte(in_q, query_length);
 8008adc:	b221      	sxth	r1, r4
 8008ade:	0030      	movs	r0, r6
 8008ae0:	f000 f8e9 	bl	8008cb6 <q_markbyte>
 8008ae4:	60a8      	str	r0, [r5, #8]
}
 8008ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        query_mask  = q_markbyte(in_q, query_length);
 8008ae8:	b201      	sxth	r1, r0
 8008aea:	0030      	movs	r0, r6
 8008aec:	f000 f8e3 	bl	8008cb6 <q_markbyte>
 8008af0:	e7f1      	b.n	8008ad6 <alp_breakdown_query_tmpl+0x1a>

08008af2 <alp_breakdown_udp_tmpl>:





OT_WEAK void alp_breakdown_udp_tmpl(ot_queue* in_q, void* data_type) {
 8008af2:	b570      	push	{r4, r5, r6, lr}
 8008af4:	0005      	movs	r5, r0
 8008af6:	000c      	movs	r4, r1
    ot_int udp_data_length;
    udp_data_length                       = q_readshort(in_q);
 8008af8:	f000 f916 	bl	8008d28 <q_readshort>
 8008afc:	b206      	sxth	r6, r0
    ((udp_tmpl*)data_type)->data_length   = udp_data_length;
 8008afe:	8020      	strh	r0, [r4, #0]
    ((udp_tmpl*)data_type)->dst_port      = q_readbyte(in_q);
 8008b00:	0028      	movs	r0, r5
 8008b02:	f000 f90c 	bl	8008d1e <q_readbyte>
 8008b06:	70a0      	strb	r0, [r4, #2]
    ((udp_tmpl*)data_type)->src_port      = q_readbyte(in_q);
 8008b08:	0028      	movs	r0, r5
 8008b0a:	f000 f908 	bl	8008d1e <q_readbyte>
 8008b0e:	70e0      	strb	r0, [r4, #3]
    ((udp_tmpl*)data_type)->data          = q_markbyte(in_q, udp_data_length);
 8008b10:	0031      	movs	r1, r6
 8008b12:	0028      	movs	r0, r5
 8008b14:	f000 f8cf 	bl	8008cb6 <q_markbyte>
 8008b18:	6060      	str	r0, [r4, #4]
}
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}

08008b1c <alp_breakdown_isfcomp_tmpl>:





OT_WEAK void alp_breakdown_isfcomp_tmpl(ot_queue* in_q, void* data_type) {
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	0005      	movs	r5, r0
 8008b20:	000c      	movs	r4, r1
    ((isfcomp_tmpl*)data_type)->is_series   = q_readbyte(in_q);
 8008b22:	f000 f8fc 	bl	8008d1e <q_readbyte>
 8008b26:	7020      	strb	r0, [r4, #0]
    ((isfcomp_tmpl*)data_type)->isf_id      = q_readbyte(in_q);
 8008b28:	0028      	movs	r0, r5
 8008b2a:	f000 f8f8 	bl	8008d1e <q_readbyte>
 8008b2e:	7060      	strb	r0, [r4, #1]
    ((isfcomp_tmpl*)data_type)->offset      = q_readshort(in_q);
 8008b30:	0028      	movs	r0, r5
 8008b32:	f000 f8f9 	bl	8008d28 <q_readshort>
 8008b36:	8060      	strh	r0, [r4, #2]
}
 8008b38:	bd70      	pop	{r4, r5, r6, pc}

08008b3a <alp_breakdown_isfcall_tmpl>:





OT_WEAK void alp_breakdown_isfcall_tmpl(ot_queue* in_q, void* data_type) {
 8008b3a:	b570      	push	{r4, r5, r6, lr}
 8008b3c:	0005      	movs	r5, r0
 8008b3e:	000c      	movs	r4, r1
    alp_breakdown_isfcomp_tmpl(in_q, data_type);
 8008b40:	f7ff ffec 	bl	8008b1c <alp_breakdown_isfcomp_tmpl>
    ((isfcall_tmpl*)data_type)->max_return  = q_readshort(in_q);
 8008b44:	0028      	movs	r0, r5
 8008b46:	f000 f8ef 	bl	8008d28 <q_readshort>
 8008b4a:	80a0      	strh	r0, [r4, #4]
}
 8008b4c:	bd70      	pop	{r4, r5, r6, pc}

08008b4e <auth_init>:
#endif

#if (_SEC_NLS)
    ///@todo
#endif
}
 8008b4e:	4770      	bx	lr

08008b50 <auth_isroot>:
#if (_SEC_ANY)
    return sub_ismask(user_id, b00000000);
#else
    return False;
#endif
}
 8008b50:	2000      	movs	r0, #0
 8008b52:	4770      	bx	lr

08008b54 <auth_check>:

    return 0;

#else
    // Try guest access
    return (0x07 & req_mod & rw_mod);
 8008b54:	4001      	ands	r1, r0
 8008b56:	2007      	movs	r0, #7
 8008b58:	4008      	ands	r0, r1
#endif
}
 8008b5a:	4770      	bx	lr

08008b5c <buffers_init>:
#endif



#ifndef EXTF_buffers_init
void buffers_init() {
 8008b5c:	b570      	push	{r4, r5, r6, lr}
#   if (OT_FEATURE(SERVER) == ENABLED)
    q_init(&rxq,    otbuf,              TXRX_SIZE);
 8008b5e:	2580      	movs	r5, #128	; 0x80
 8008b60:	006d      	lsls	r5, r5, #1
 8008b62:	4c0d      	ldr	r4, [pc, #52]	; (8008b98 <buffers_init+0x3c>)
 8008b64:	002a      	movs	r2, r5
 8008b66:	0021      	movs	r1, r4
 8008b68:	480c      	ldr	r0, [pc, #48]	; (8008b9c <buffers_init+0x40>)
 8008b6a:	f000 f89c 	bl	8008ca6 <q_init>
    q_init(&txq,    otbuf+TXRX_SIZE,    TXRX_SIZE);    
 8008b6e:	1961      	adds	r1, r4, r5
 8008b70:	002a      	movs	r2, r5
 8008b72:	480b      	ldr	r0, [pc, #44]	; (8008ba0 <buffers_init+0x44>)
 8008b74:	f000 f897 	bl	8008ca6 <q_init>
#   endif
#   if (ALP_ENABLED)
    q_init(&otmpin,     otbuf+(TXRX_SIZE*2),            ALP_SIZE );
 8008b78:	3501      	adds	r5, #1
 8008b7a:	35ff      	adds	r5, #255	; 0xff
 8008b7c:	1961      	adds	r1, r4, r5
 8008b7e:	002a      	movs	r2, r5
 8008b80:	4808      	ldr	r0, [pc, #32]	; (8008ba4 <buffers_init+0x48>)
 8008b82:	f000 f890 	bl	8008ca6 <q_init>
    q_init(&otmpout,    otbuf+(TXRX_SIZE*2)+ALP_SIZE,   ALP_SIZE );
 8008b86:	2380      	movs	r3, #128	; 0x80
 8008b88:	00db      	lsls	r3, r3, #3
 8008b8a:	18e1      	adds	r1, r4, r3
 8008b8c:	002a      	movs	r2, r5
 8008b8e:	4806      	ldr	r0, [pc, #24]	; (8008ba8 <buffers_init+0x4c>)
 8008b90:	f000 f889 	bl	8008ca6 <q_init>
#   endif
}
 8008b94:	bd70      	pop	{r4, r5, r6, pc}
 8008b96:	46c0      	nop			; (mov r8, r8)
 8008b98:	200027e0 	.word	0x200027e0
 8008b9c:	20002de0 	.word	0x20002de0
 8008ba0:	20002df4 	.word	0x20002df4
 8008ba4:	20002e08 	.word	0x20002e08
 8008ba8:	200027cc 	.word	0x200027cc

08008bac <crc_init_stream>:

//crc_struct crc;


void crc_init_stream(crcstream_t* stream, ot_bool writeout, ot_int size, ot_u8* data) {
    stream->writeout    = writeout;
 8008bac:	7181      	strb	r1, [r0, #6]
    stream->cursor      = data;
 8008bae:	6003      	str	r3, [r0, #0]
    stream->count       = size;
 8008bb0:	8082      	strh	r2, [r0, #4]
    stream->val         = crc16drv_init();
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	425b      	negs	r3, r3
 8008bb6:	8103      	strh	r3, [r0, #8]
}
 8008bb8:	4770      	bx	lr
	...

08008bbc <crc16drv_block_manual>:
}
#endif


#ifndef EXTF_crc16drv_block_manual
OT_WEAK ot_u16 crc16drv_block_manual(ot_u8* block_addr, ot_int block_size, ot_u16 init) {
 8008bbc:	b510      	push	{r4, lr}
/// One nice thing about the software-only CRC16 method is that it doesn't
/// require any sort of interrupt blocking.  In practice, interrupt blocking
/// by CRC isn't much of an issue, but if you are getting weird CRC errors
/// when using streams, try comparing against this software implemetation.

    while (--block_size >= 0) {
 8008bbe:	e009      	b.n	8008bd4 <crc16drv_block_manual+0x18>
        ot_u8 index = ((ot_u8*)&init)[UPPER] ^ *block_addr++;       //((crc_val>>8) & 0xff) ^ *block_addr++;
 8008bc0:	0a13      	lsrs	r3, r2, #8
 8008bc2:	7804      	ldrb	r4, [r0, #0]
 8008bc4:	4063      	eors	r3, r4
        init        = (init<<8) ^ crc16_table[index];
 8008bc6:	0212      	lsls	r2, r2, #8
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	4c05      	ldr	r4, [pc, #20]	; (8008be0 <crc16drv_block_manual+0x24>)
 8008bcc:	5f1b      	ldrsh	r3, [r3, r4]
 8008bce:	405a      	eors	r2, r3
 8008bd0:	b292      	uxth	r2, r2
        ot_u8 index = ((ot_u8*)&init)[UPPER] ^ *block_addr++;       //((crc_val>>8) & 0xff) ^ *block_addr++;
 8008bd2:	3001      	adds	r0, #1
    while (--block_size >= 0) {
 8008bd4:	3901      	subs	r1, #1
 8008bd6:	b209      	sxth	r1, r1
 8008bd8:	2900      	cmp	r1, #0
 8008bda:	daf1      	bge.n	8008bc0 <crc16drv_block_manual+0x4>
    }
    return init;
}
 8008bdc:	0010      	movs	r0, r2
 8008bde:	bd10      	pop	{r4, pc}
 8008be0:	0800c5a8 	.word	0x0800c5a8

08008be4 <crc_calc_nstream>:
void crc_calc_nstream(crcstream_t* stream, ot_u16 n) {
 8008be4:	b510      	push	{r4, lr}
 8008be6:	0004      	movs	r4, r0
    if (stream->count > 0) {
 8008be8:	2204      	movs	r2, #4
 8008bea:	5e83      	ldrsh	r3, [r0, r2]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dd0c      	ble.n	8008c0a <crc_calc_nstream+0x26>
        if (n > stream->count) {
 8008bf0:	4299      	cmp	r1, r3
 8008bf2:	dd00      	ble.n	8008bf6 <crc_calc_nstream+0x12>
            n = stream->count;
 8008bf4:	b299      	uxth	r1, r3
        stream->count  -= n;
 8008bf6:	1a5b      	subs	r3, r3, r1
 8008bf8:	80a3      	strh	r3, [r4, #4]
        data            = stream->cursor;
 8008bfa:	6820      	ldr	r0, [r4, #0]
        stream->cursor += n;
 8008bfc:	1843      	adds	r3, r0, r1
 8008bfe:	6023      	str	r3, [r4, #0]
        stream->val     = crc16drv_block_manual(data, n, stream->val);
 8008c00:	8922      	ldrh	r2, [r4, #8]
 8008c02:	b209      	sxth	r1, r1
 8008c04:	f7ff ffda 	bl	8008bbc <crc16drv_block_manual>
 8008c08:	8120      	strh	r0, [r4, #8]
    if ((stream->count == 0) && (stream->writeout)) {
 8008c0a:	2204      	movs	r2, #4
 8008c0c:	5ea3      	ldrsh	r3, [r4, r2]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10f      	bne.n	8008c32 <crc_calc_nstream+0x4e>
 8008c12:	79a3      	ldrb	r3, [r4, #6]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00c      	beq.n	8008c32 <crc_calc_nstream+0x4e>
        stream->writeout    = False;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	71a3      	strb	r3, [r4, #6]
        *stream->cursor++   = (ot_u8)(stream->val >> 8);
 8008c1c:	8923      	ldrh	r3, [r4, #8]
 8008c1e:	6822      	ldr	r2, [r4, #0]
 8008c20:	1c51      	adds	r1, r2, #1
 8008c22:	6021      	str	r1, [r4, #0]
 8008c24:	0a1b      	lsrs	r3, r3, #8
 8008c26:	7013      	strb	r3, [r2, #0]
        *stream->cursor++   = (ot_u8)(stream->val);
 8008c28:	8922      	ldrh	r2, [r4, #8]
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	1c59      	adds	r1, r3, #1
 8008c2e:	6021      	str	r1, [r4, #0]
 8008c30:	701a      	strb	r2, [r3, #0]
}
 8008c32:	bd10      	pop	{r4, pc}

08008c34 <crc_block>:
ot_u16 crc_block(crcstream_t* stream, ot_bool writeout, ot_int size, ot_u8* data) {
 8008c34:	b570      	push	{r4, r5, r6, lr}
 8008c36:	0005      	movs	r5, r0
 8008c38:	0014      	movs	r4, r2
    crc_init_stream(stream, writeout, size, data);
 8008c3a:	f7ff ffb7 	bl	8008bac <crc_init_stream>
    crc_calc_nstream(stream, size);
 8008c3e:	b2a1      	uxth	r1, r4
 8008c40:	0028      	movs	r0, r5
 8008c42:	f7ff ffcf 	bl	8008be4 <crc_calc_nstream>
    return stream->val;
 8008c46:	8928      	ldrh	r0, [r5, #8]
}
 8008c48:	bd70      	pop	{r4, r5, r6, pc}

08008c4a <q_getcursor_val>:
  * ==================
  */

#ifndef EXTF_q_intrinsics
OT_INLINE ot_u8 q_getcursor_val(ot_queue* q, ot_int offset) {
    return q->getcursor[offset];
 8008c4a:	6843      	ldr	r3, [r0, #4]
 8008c4c:	5c58      	ldrb	r0, [r3, r1]
}
 8008c4e:	4770      	bx	lr

08008c50 <q_length>:
  * ====================
  */

#ifndef EXTF_q_length
ot_int q_length(ot_queue* q) {
    return (q->putcursor - q->front);
 8008c50:	6883      	ldr	r3, [r0, #8]
 8008c52:	68c0      	ldr	r0, [r0, #12]
 8008c54:	1a18      	subs	r0, r3, r0
 8008c56:	b200      	sxth	r0, r0
}
 8008c58:	4770      	bx	lr

08008c5a <q_span>:
#endif


#ifndef EXTF_q_span
ot_int q_span(ot_queue* q) {
    return (q->putcursor - q->getcursor);
 8008c5a:	6883      	ldr	r3, [r0, #8]
 8008c5c:	6840      	ldr	r0, [r0, #4]
 8008c5e:	1a18      	subs	r0, r3, r0
 8008c60:	b200      	sxth	r0, r0
}
 8008c62:	4770      	bx	lr

08008c64 <q_writespace>:
#endif


#ifndef EXTF_q_writespace
ot_int q_writespace(ot_queue* q) {
    return (q->back - q->putcursor);
 8008c64:	6903      	ldr	r3, [r0, #16]
 8008c66:	6880      	ldr	r0, [r0, #8]
 8008c68:	1a18      	subs	r0, r3, r0
 8008c6a:	b200      	sxth	r0, r0
}
 8008c6c:	4770      	bx	lr

08008c6e <q_readspace>:
#endif


#ifndef EXTF_q_readspace
ot_int q_readspace(ot_queue* q) {
    return (q->back - q->getcursor);
 8008c6e:	6903      	ldr	r3, [r0, #16]
 8008c70:	6840      	ldr	r0, [r0, #4]
 8008c72:	1a18      	subs	r0, r3, r0
 8008c74:	b200      	sxth	r0, r0
}
 8008c76:	4770      	bx	lr

08008c78 <q_lock>:
    q->options.ushort = blocktime;
}
#endif

#ifndef EXTF_q_lock
void q_lock(ot_queue* q) {
 8008c78:	b510      	push	{r4, lr}
 8008c7a:	0004      	movs	r4, r0
    while (q->options.ushort != 0) {
 8008c7c:	e001      	b.n	8008c82 <q_lock+0xa>
        //    otthread_set_tmask( &(q->tmask), thandle );
        //    otthread_wait();
        //    otthread_clear_tmask( &(q->tmask), thandle );
        //}
        //else 
        {   delay_ti(q->options.ushort);
 8008c7e:	f001 faf1 	bl	800a264 <delay_ti>
    while (q->options.ushort != 0) {
 8008c82:	8860      	ldrh	r0, [r4, #2]
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d1fa      	bne.n	8008c7e <q_lock+0x6>
        }
    }
    q->options.ushort = 1;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	8063      	strh	r3, [r4, #2]
}
 8008c8c:	bd10      	pop	{r4, pc}

08008c8e <q_unlock>:
#endif

#ifndef EXTF_q_unlock
void q_unlock(ot_queue* q) {
    // otthread_release_any( &(q->tmask) );
    q->options.ushort = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	8043      	strh	r3, [r0, #2]
}
 8008c92:	4770      	bx	lr

08008c94 <q_empty>:



#ifndef EXTF_q_empty
void q_empty(ot_queue* q) {
    q->options.ushort   = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	8043      	strh	r3, [r0, #2]
    q->back             = q->front + q->alloc;
 8008c98:	68c3      	ldr	r3, [r0, #12]
 8008c9a:	8802      	ldrh	r2, [r0, #0]
 8008c9c:	189a      	adds	r2, r3, r2
 8008c9e:	6102      	str	r2, [r0, #16]
    q->putcursor        = q->front;
 8008ca0:	6083      	str	r3, [r0, #8]
    q->getcursor        = q->front;
 8008ca2:	6043      	str	r3, [r0, #4]
}
 8008ca4:	4770      	bx	lr

08008ca6 <q_init>:
void q_init(ot_queue* q, void* buffer, ot_u16 alloc) {
 8008ca6:	b510      	push	{r4, lr}
    q->alloc    = alloc;
 8008ca8:	8002      	strh	r2, [r0, #0]
    q->front    = buffer;
 8008caa:	60c1      	str	r1, [r0, #12]
    q->back     = buffer+alloc;
 8008cac:	1889      	adds	r1, r1, r2
 8008cae:	6101      	str	r1, [r0, #16]
    q_empty(q);
 8008cb0:	f7ff fff0 	bl	8008c94 <q_empty>
}
 8008cb4:	bd10      	pop	{r4, pc}

08008cb6 <q_markbyte>:


#ifndef EXTF_q_markbyte
ot_qcur q_markbyte(ot_queue* q, ot_int shift) {
    ot_qcur output;
    output          = q->getcursor;
 8008cb6:	6843      	ldr	r3, [r0, #4]
    q->getcursor   += shift;
 8008cb8:	1859      	adds	r1, r3, r1
 8008cba:	6041      	str	r1, [r0, #4]
    return output;
}
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	4770      	bx	lr

08008cc0 <q_writebyte>:
#endif


#ifndef EXTF_q_writebyte
void q_writebyte(ot_queue* q, ot_u8 byte_in) {
    *q->putcursor++ = byte_in;
 8008cc0:	6883      	ldr	r3, [r0, #8]
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	6082      	str	r2, [r0, #8]
 8008cc6:	7019      	strb	r1, [r3, #0]
}
 8008cc8:	4770      	bx	lr

08008cca <q_writeshort>:
#   if defined(__UNALIGNED_ACCESS__)
        *(ot_u16*)q->putcursor  = PLATFORM_ENDIAN16(short_in);
        q->putcursor           += 2;
#   else
        ot_u8* data     = (ot_u8*)&short_in;
        *q->putcursor++ = data[UPPER];
 8008cca:	6883      	ldr	r3, [r0, #8]
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	6082      	str	r2, [r0, #8]
 8008cd0:	0a0a      	lsrs	r2, r1, #8
 8008cd2:	701a      	strb	r2, [r3, #0]
        *q->putcursor++ = data[LOWER];
 8008cd4:	6883      	ldr	r3, [r0, #8]
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	6082      	str	r2, [r0, #8]
 8008cda:	7019      	strb	r1, [r3, #0]
#   endif
}
 8008cdc:	4770      	bx	lr

08008cde <q_writeshort_be>:
#   elif defined(__UNALIGNED_ACCESS__)
        *(ot_u16*)q->putcursor = short_in;
        q->putcursor          += 4;
#   else
        ot_u8* data     = (ot_u8*)&short_in;
        *q->putcursor++ = data[0];
 8008cde:	6883      	ldr	r3, [r0, #8]
 8008ce0:	1c5a      	adds	r2, r3, #1
 8008ce2:	6082      	str	r2, [r0, #8]
 8008ce4:	7019      	strb	r1, [r3, #0]
        *q->putcursor++ = data[1];
 8008ce6:	6883      	ldr	r3, [r0, #8]
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	6082      	str	r2, [r0, #8]
 8008cec:	0a09      	lsrs	r1, r1, #8
 8008cee:	7019      	strb	r1, [r3, #0]
#   endif
}
 8008cf0:	4770      	bx	lr

08008cf2 <q_writelong>:
        *(ot_u32*)q->putcursor = PLATFORM_ENDIAN32(long_in);
        q->putcursor          += 4;
#   else
        ot_u8* data;
        data = (ot_u8*)&long_in;
        *q->putcursor++ = data[_B3];
 8008cf2:	6883      	ldr	r3, [r0, #8]
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	6082      	str	r2, [r0, #8]
 8008cf8:	0e0a      	lsrs	r2, r1, #24
 8008cfa:	701a      	strb	r2, [r3, #0]
        *q->putcursor++ = data[_B2];
 8008cfc:	6882      	ldr	r2, [r0, #8]
 8008cfe:	1c53      	adds	r3, r2, #1
 8008d00:	6083      	str	r3, [r0, #8]
 8008d02:	020b      	lsls	r3, r1, #8
 8008d04:	0e1b      	lsrs	r3, r3, #24
 8008d06:	7013      	strb	r3, [r2, #0]
        *q->putcursor++ = data[_B1];
 8008d08:	6882      	ldr	r2, [r0, #8]
 8008d0a:	1c53      	adds	r3, r2, #1
 8008d0c:	6083      	str	r3, [r0, #8]
 8008d0e:	040b      	lsls	r3, r1, #16
 8008d10:	0e1b      	lsrs	r3, r3, #24
 8008d12:	7013      	strb	r3, [r2, #0]
        *q->putcursor++ = data[_B0];
 8008d14:	6883      	ldr	r3, [r0, #8]
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	6082      	str	r2, [r0, #8]
 8008d1a:	7019      	strb	r1, [r3, #0]
#   endif
}
 8008d1c:	4770      	bx	lr

08008d1e <q_readbyte>:
#endif


#ifndef EXTF_q_readbyte
ot_u8 q_readbyte(ot_queue* q) {
    return *q->getcursor++;
 8008d1e:	6843      	ldr	r3, [r0, #4]
 8008d20:	1c5a      	adds	r2, r3, #1
 8008d22:	6042      	str	r2, [r0, #4]
 8008d24:	7818      	ldrb	r0, [r3, #0]
}
 8008d26:	4770      	bx	lr

08008d28 <q_readshort>:
#endif



#ifndef EXTF_q_readshort
ot_u16 q_readshort(ot_queue* q) {
 8008d28:	0001      	movs	r1, r0
        ot_u16 data     = *(ot_u16*)q->getcursor;
        q->getcursor   += 2;
        return PLATFORM_ENDIAN16(data);
#   else
        ot_uni16 data;
        data.ubyte[UPPER] = *q->getcursor++;
 8008d2a:	6842      	ldr	r2, [r0, #4]
 8008d2c:	1c53      	adds	r3, r2, #1
 8008d2e:	6043      	str	r3, [r0, #4]
 8008d30:	7810      	ldrb	r0, [r2, #0]
        data.ubyte[LOWER] = *q->getcursor++;
 8008d32:	1c93      	adds	r3, r2, #2
 8008d34:	604b      	str	r3, [r1, #4]
 8008d36:	7853      	ldrb	r3, [r2, #1]
 8008d38:	0200      	lsls	r0, r0, #8
        return data.ushort;
 8008d3a:	4318      	orrs	r0, r3
#   endif
}
 8008d3c:	4770      	bx	lr

08008d3e <q_readshort_be>:
        ot_u16 data     = *(ot_u16*)q->getcursor;
        q->getcursor   += 2
        return data;
#   else
        ot_uni16 data;
        data.ubyte[0]   = *q->getcursor++;
 8008d3e:	6841      	ldr	r1, [r0, #4]
 8008d40:	1c4b      	adds	r3, r1, #1
 8008d42:	6043      	str	r3, [r0, #4]
 8008d44:	780a      	ldrb	r2, [r1, #0]
        data.ubyte[1]   = *q->getcursor++;
 8008d46:	1c8b      	adds	r3, r1, #2
 8008d48:	6043      	str	r3, [r0, #4]
 8008d4a:	7848      	ldrb	r0, [r1, #1]
 8008d4c:	0200      	lsls	r0, r0, #8
        return data.ushort;
 8008d4e:	4310      	orrs	r0, r2
#   endif
}
 8008d50:	4770      	bx	lr

08008d52 <q_readlong>:
#endif


#ifndef EXTF_q_readlong
ot_u32 q_readlong(ot_queue* q)  {
 8008d52:	b530      	push	{r4, r5, lr}
 8008d54:	0002      	movs	r2, r0
        ot_u32 data     = *(ot_u32*)q->getcursor;
        q->getcursor   += 4;
        return PLATFORM_ENDIAN32(data);
#   else
        ot_uni32 data;
        data.ubyte[_B3]  = *q->getcursor++;
 8008d56:	6841      	ldr	r1, [r0, #4]
 8008d58:	1c48      	adds	r0, r1, #1
 8008d5a:	6050      	str	r0, [r2, #4]
 8008d5c:	780b      	ldrb	r3, [r1, #0]
        data.ubyte[_B2]  = *q->getcursor++;
 8008d5e:	1c8c      	adds	r4, r1, #2
 8008d60:	6054      	str	r4, [r2, #4]
 8008d62:	784d      	ldrb	r5, [r1, #1]
 8008d64:	042d      	lsls	r5, r5, #16
 8008d66:	061b      	lsls	r3, r3, #24
        data.ubyte[_B1]  = *q->getcursor++;
 8008d68:	3103      	adds	r1, #3
 8008d6a:	6051      	str	r1, [r2, #4]
 8008d6c:	7840      	ldrb	r0, [r0, #1]
 8008d6e:	0200      	lsls	r0, r0, #8
 8008d70:	432b      	orrs	r3, r5
        data.ubyte[_B0]  = *q->getcursor++;
 8008d72:	1ca1      	adds	r1, r4, #2
 8008d74:	6051      	str	r1, [r2, #4]
 8008d76:	7862      	ldrb	r2, [r4, #1]
 8008d78:	4318      	orrs	r0, r3
 8008d7a:	4310      	orrs	r0, r2
        return data.ulong;
#   endif
}
 8008d7c:	bd30      	pop	{r4, r5, pc}

08008d7e <q_writestring>:
}
#endif


#ifndef EXTF_q_writestring
ot_int q_writestring(ot_queue* q, ot_u8* string, ot_int length) {
 8008d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d80:	0005      	movs	r5, r0
 8008d82:	000f      	movs	r7, r1
 8008d84:	1e16      	subs	r6, r2, #0
    ot_int limit;
    
    if (length <= 0) {
 8008d86:	dd0f      	ble.n	8008da8 <q_writestring+0x2a>
        return 0;
    }
    
    limit = q_writespace(q);
 8008d88:	f7ff ff6c 	bl	8008c64 <q_writespace>
 8008d8c:	0004      	movs	r4, r0
    if (limit < length) {
 8008d8e:	4286      	cmp	r6, r0
 8008d90:	dc00      	bgt.n	8008d94 <q_writestring+0x16>
 8008d92:	0034      	movs	r4, r6
        length = limit;
    } 

    ot_memcpy(q->putcursor, string, length);
 8008d94:	b2a2      	uxth	r2, r4
 8008d96:	0039      	movs	r1, r7
 8008d98:	68a8      	ldr	r0, [r5, #8]
 8008d9a:	f001 fabf 	bl	800a31c <ot_memcpy>
    q->putcursor += length;
 8008d9e:	68ab      	ldr	r3, [r5, #8]
 8008da0:	191b      	adds	r3, r3, r4
 8008da2:	60ab      	str	r3, [r5, #8]
    
    return length;
}
 8008da4:	0020      	movs	r0, r4
 8008da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8008da8:	2400      	movs	r4, #0
 8008daa:	e7fb      	b.n	8008da4 <q_writestring+0x26>

08008dac <q_movedata>:
#endif



#ifndef EXTF_q_movedata
ot_int q_movedata(ot_queue* qdst, ot_queue* qsrc, ot_int length) {
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	0007      	movs	r7, r0
 8008db0:	000d      	movs	r5, r1
 8008db2:	1e14      	subs	r4, r2, #0
    ot_int writespace, readspace, limit;
    ot_u8* dst;
    ot_u8* src;

    if (length <= 0) {
 8008db4:	dd1b      	ble.n	8008dee <q_movedata+0x42>
        return 0;
    }
    
    writespace  = q_writespace(qdst);
 8008db6:	f7ff ff55 	bl	8008c64 <q_writespace>
 8008dba:	0006      	movs	r6, r0
    readspace   = q_readspace(qsrc);
 8008dbc:	0028      	movs	r0, r5
 8008dbe:	f7ff ff56 	bl	8008c6e <q_readspace>
    limit       = (writespace < readspace) ? writespace : readspace;
 8008dc2:	1c33      	adds	r3, r6, #0
 8008dc4:	4286      	cmp	r6, r0
 8008dc6:	dd00      	ble.n	8008dca <q_movedata+0x1e>
 8008dc8:	1c03      	adds	r3, r0, #0
 8008dca:	b21a      	sxth	r2, r3
    if (limit < length) {
 8008dcc:	4294      	cmp	r4, r2
 8008dce:	dd02      	ble.n	8008dd6 <q_movedata+0x2a>
        return length - limit;
 8008dd0:	1ae4      	subs	r4, r4, r3
 8008dd2:	b220      	sxth	r0, r4
    qdst->putcursor    += length;
    qsrc->getcursor    += length;
    ot_memcpy(dst, src, length);
    
    return length;
}
 8008dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dst                 = qdst->putcursor;
 8008dd6:	68b8      	ldr	r0, [r7, #8]
    src                 = qsrc->getcursor;
 8008dd8:	6869      	ldr	r1, [r5, #4]
    qdst->putcursor    += length;
 8008dda:	1903      	adds	r3, r0, r4
 8008ddc:	60bb      	str	r3, [r7, #8]
    qsrc->getcursor    += length;
 8008dde:	686b      	ldr	r3, [r5, #4]
 8008de0:	191b      	adds	r3, r3, r4
 8008de2:	606b      	str	r3, [r5, #4]
    ot_memcpy(dst, src, length);
 8008de4:	b2a2      	uxth	r2, r4
 8008de6:	f001 fa99 	bl	800a31c <ot_memcpy>
    return length;
 8008dea:	0020      	movs	r0, r4
 8008dec:	e7f2      	b.n	8008dd4 <q_movedata+0x28>
        return 0;
 8008dee:	2000      	movs	r0, #0
 8008df0:	e7f0      	b.n	8008dd4 <q_movedata+0x28>

08008df2 <otutils_null>:
#include <otlib/utils.h>
#include <otlib/memcpy.h>


// Null Signals
void otutils_null(void)                     { }
 8008df2:	4770      	bx	lr

08008df4 <otutils_sig2_null>:
void otutils_sig_null(ot_int a)             { }
void otutils_sig2_null(ot_int a, ot_int b)  { }
 8008df4:	4770      	bx	lr

08008df6 <otutils_calc_longtimeout>:

#ifndef EXTF_otutils_calc_longtimeout
ot_ulong otutils_calc_longtimeout(ot_u16 timeout_code) {
	ot_uint 	shift;
	ot_ulong    timeout;
	shift       = (timeout_code >> 8) & 0x001C;
 8008df6:	0a03      	lsrs	r3, r0, #8
 8008df8:	221c      	movs	r2, #28
 8008dfa:	401a      	ands	r2, r3
	timeout     = (timeout_code & 0x3FF);
 8008dfc:	0580      	lsls	r0, r0, #22
 8008dfe:	0d80      	lsrs	r0, r0, #22
	timeout    += (shift != 0);
 8008e00:	0013      	movs	r3, r2
 8008e02:	1e59      	subs	r1, r3, #1
 8008e04:	418b      	sbcs	r3, r1
 8008e06:	1818      	adds	r0, r3, r0
	timeout    *= (1 << shift);
 8008e08:	4090      	lsls	r0, r2
	return timeout;
}
 8008e0a:	4770      	bx	lr

08008e0c <otutils_calc_timeout>:

#ifndef EXTF_otutils_calc_timeout
ot_ulong otutils_calc_timeout(ot_u8 timeout_code) {
	ot_uint		shift;
	ot_ulong    timeout;
	shift       = (timeout_code >> 3) & 0x000E;
 8008e0c:	08c2      	lsrs	r2, r0, #3
 8008e0e:	210e      	movs	r1, #14
 8008e10:	400a      	ands	r2, r1
 8008e12:	b293      	uxth	r3, r2
	timeout     = (timeout_code & 0x0E);
 8008e14:	4001      	ands	r1, r0
	timeout    += (shift != 0);
 8008e16:	0018      	movs	r0, r3
 8008e18:	1e43      	subs	r3, r0, #1
 8008e1a:	4198      	sbcs	r0, r3
 8008e1c:	1840      	adds	r0, r0, r1
	timeout    *= (1 << shift);
 8008e1e:	4090      	lsls	r0, r2
	return timeout;
}
 8008e20:	4770      	bx	lr

08008e22 <otutils_encode_timeout>:

#ifndef EXTF_otutils_encode_timeout
ot_u8 otutils_encode_timeout(ot_u16 timeout_ticks) {
	ot_uint exp;

	if (timeout_ticks < 0x10) {
 8008e22:	280f      	cmp	r0, #15
 8008e24:	d902      	bls.n	8008e2c <otutils_encode_timeout+0xa>
		return (ot_u8)timeout_ticks;
	}

	exp 			= 1;
	timeout_ticks >>= 2;
 8008e26:	0880      	lsrs	r0, r0, #2
	exp 			= 1;
 8008e28:	2301      	movs	r3, #1

	while (timeout_ticks > 0x10) {
 8008e2a:	e004      	b.n	8008e36 <otutils_encode_timeout+0x14>
		return (ot_u8)timeout_ticks;
 8008e2c:	b2c0      	uxtb	r0, r0
 8008e2e:	e00a      	b.n	8008e46 <otutils_encode_timeout+0x24>
		exp += 2;
 8008e30:	3302      	adds	r3, #2
 8008e32:	b29b      	uxth	r3, r3
		timeout_ticks >>= 4;
 8008e34:	0900      	lsrs	r0, r0, #4
	while (timeout_ticks > 0x10) {
 8008e36:	2810      	cmp	r0, #16
 8008e38:	d8fa      	bhi.n	8008e30 <otutils_encode_timeout+0xe>
	}
	timeout_ticks--;
 8008e3a:	1e42      	subs	r2, r0, #1

	return (exp << 4) + (ot_u8)timeout_ticks;
 8008e3c:	011b      	lsls	r3, r3, #4
 8008e3e:	b2d8      	uxtb	r0, r3
 8008e40:	b2d2      	uxtb	r2, r2
 8008e42:	1880      	adds	r0, r0, r2
 8008e44:	b2c0      	uxtb	r0, r0
}
 8008e46:	4770      	bx	lr

08008e48 <sub_gfb_new>:
                        GFB_Header_START_USER,
                        GFB_NUM_USER_FILES   );
#else
    return NULL;
#endif
}
 8008e48:	2000      	movs	r0, #0
 8008e4a:	4770      	bx	lr

08008e4c <sub_iss_new>:
                        ISS_Header_START_USER,
                        ISS_NUM_USER_CODES   );
#else
    return NULL;
#endif
}
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	4770      	bx	lr

08008e50 <sub_isf_new>:
                        ISF_Header_START_USER,
                        ISF_NUM_USER_FILES );
#else
    return NULL;
#endif
}
 8008e50:	2000      	movs	r0, #0
 8008e52:	4770      	bx	lr

08008e54 <sub_gfb_delete_check>:
#if ((OT_FEATURE(VLNEW) == ENABLED) && ((GFB_HEAP_BYTES > 0) && (GFB_NUM_USER_FILES > 0)))
    return ( id > GFB_NUM_STOCK_FILES );
#else
    return 0;
#endif
}
 8008e54:	2000      	movs	r0, #0
 8008e56:	4770      	bx	lr

08008e58 <sub_iss_delete_check>:
#if ((OT_FEATURE(VLNEW) == ENABLED) && (ISS_NUM_USER_CODES > 0))
    return ( id >= ISS_ID_extended_service);
#else
    return 0;
#endif
}
 8008e58:	2000      	movs	r0, #0
 8008e5a:	4770      	bx	lr

08008e5c <sub_isf_delete_check>:
    return ((id >= (ISF_NUM_M1_FILES+ISF_NUM_M2_FILES)) && \
            (id < (256-ISF_NUM_EXT_FILES)) );
#else
    return 0;
#endif
}
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	4770      	bx	lr

08008e60 <sub_new_fp>:

static vlFILE* sub_new_fp() {
#if (OT_PARAM(VLFPS) < 8)
    ot_int fd;

    for (fd=0; fd<OT_PARAM(VLFPS); fd++) {
 8008e60:	2300      	movs	r3, #0
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	dc0d      	bgt.n	8008e82 <sub_new_fp+0x22>
        if (vlfile[fd].read == NULL)
 8008e66:	009a      	lsls	r2, r3, #2
 8008e68:	18d2      	adds	r2, r2, r3
 8008e6a:	0091      	lsls	r1, r2, #2
 8008e6c:	4a06      	ldr	r2, [pc, #24]	; (8008e88 <sub_new_fp+0x28>)
 8008e6e:	1852      	adds	r2, r2, r1
 8008e70:	68d2      	ldr	r2, [r2, #12]
 8008e72:	2a00      	cmp	r2, #0
 8008e74:	d002      	beq.n	8008e7c <sub_new_fp+0x1c>
    for (fd=0; fd<OT_PARAM(VLFPS); fd++) {
 8008e76:	3301      	adds	r3, #1
 8008e78:	b21b      	sxth	r3, r3
 8008e7a:	e7f2      	b.n	8008e62 <sub_new_fp+0x2>
            return &vlfile[fd];
 8008e7c:	4802      	ldr	r0, [pc, #8]	; (8008e88 <sub_new_fp+0x28>)
 8008e7e:	1840      	adds	r0, r0, r1
 8008e80:	e000      	b.n	8008e84 <sub_new_fp+0x24>
    }
#else
        ///@todo do a binary search
#endif

    return NULL;
 8008e82:	2000      	movs	r0, #0
}
 8008e84:	4770      	bx	lr
 8008e86:	46c0      	nop			; (mov r8, r8)
 8008e88:	20001178 	.word	0x20001178

08008e8c <sub_write_header>:
        header += 2;
    }
}


static void sub_write_header(vaddr header, ot_u16* data, ot_uint length ) {
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	0007      	movs	r7, r0
 8008e90:	000d      	movs	r5, r1
 8008e92:	0016      	movs	r6, r2
    ot_int i;

    for (i=0; i<length; i+=2, data++) {
 8008e94:	2300      	movs	r3, #0
 8008e96:	e008      	b.n	8008eaa <sub_write_header+0x1e>
        vworm_write( (header+i), *data);
 8008e98:	b29c      	uxth	r4, r3
 8008e9a:	8829      	ldrh	r1, [r5, #0]
 8008e9c:	19e0      	adds	r0, r4, r7
 8008e9e:	b280      	uxth	r0, r0
 8008ea0:	f001 faa4 	bl	800a3ec <vworm_write>
    for (i=0; i<length; i+=2, data++) {
 8008ea4:	3402      	adds	r4, #2
 8008ea6:	b223      	sxth	r3, r4
 8008ea8:	3502      	adds	r5, #2
 8008eaa:	42b3      	cmp	r3, r6
 8008eac:	dbf4      	blt.n	8008e98 <sub_write_header+0xc>
    }
}
 8008eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008eb0 <sub_header_search>:
static vaddr sub_header_search(vaddr header, ot_u8 search_id, ot_int num_headers) {
 8008eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb2:	0004      	movs	r4, r0
 8008eb4:	000f      	movs	r7, r1
 8008eb6:	0016      	movs	r6, r2
    for (; num_headers > 0; num_headers--) {
 8008eb8:	e003      	b.n	8008ec2 <sub_header_search+0x12>
        header += OCTETS_IN_vl_header_t;
 8008eba:	3410      	adds	r4, #16
 8008ebc:	b2a4      	uxth	r4, r4
    for (; num_headers > 0; num_headers--) {
 8008ebe:	3e01      	subs	r6, #1
 8008ec0:	b236      	sxth	r6, r6
 8008ec2:	2e00      	cmp	r6, #0
 8008ec4:	dd12      	ble.n	8008eec <sub_header_search+0x3c>
        ot_u16 base     = vworm_read(header + 6);
 8008ec6:	1da0      	adds	r0, r4, #6
 8008ec8:	b280      	uxth	r0, r0
 8008eca:	f001 fa87 	bl	800a3dc <vworm_read>
 8008ece:	0005      	movs	r5, r0
        idmod.ushort    = vworm_read(header + 4);
 8008ed0:	1d20      	adds	r0, r4, #4
 8008ed2:	b280      	uxth	r0, r0
 8008ed4:	f001 fa82 	bl	800a3dc <vworm_read>
        if ( base != 0 && base != 0xFFFF) {
 8008ed8:	3d01      	subs	r5, #1
 8008eda:	b2ad      	uxth	r5, r5
 8008edc:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <sub_header_search+0x40>)
 8008ede:	429d      	cmp	r5, r3
 8008ee0:	d8eb      	bhi.n	8008eba <sub_header_search+0xa>
            if (idmod.ubyte[0] == search_id)
 8008ee2:	b2c0      	uxtb	r0, r0
 8008ee4:	4287      	cmp	r7, r0
 8008ee6:	d1e8      	bne.n	8008eba <sub_header_search+0xa>
                return header;
 8008ee8:	0020      	movs	r0, r4
 8008eea:	e000      	b.n	8008eee <sub_header_search+0x3e>
    return NULL_vaddr;
 8008eec:	4801      	ldr	r0, [pc, #4]	; (8008ef4 <sub_header_search+0x44>)
}
 8008eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef0:	0000fffd 	.word	0x0000fffd
 8008ef4:	0000ffff 	.word	0x0000ffff

08008ef8 <sub_isf_search>:
static vaddr sub_isf_search(ot_u8 id) {
 8008ef8:	b510      	push	{r4, lr}
    if ( (id >= ISF_NUM_STOCK_FILES) && (id < (256-ISF_NUM_EXT_FILES)) ) {
 8008efa:	0003      	movs	r3, r0
 8008efc:	3b19      	subs	r3, #25
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2be5      	cmp	r3, #229	; 0xe5
 8008f02:	d905      	bls.n	8008f10 <sub_isf_search+0x18>
    if (id > (255-ISF_NUM_EXT_FILES)) {
 8008f04:	28ff      	cmp	r0, #255	; 0xff
 8008f06:	d00a      	beq.n	8008f1e <sub_isf_search+0x26>
    return (OCTETS_IN_vl_header_t * id) + ISF_Header_START;
 8008f08:	300e      	adds	r0, #14
 8008f0a:	0100      	lsls	r0, r0, #4
 8008f0c:	b280      	uxth	r0, r0
}
 8008f0e:	bd10      	pop	{r4, pc}
        return sub_header_search(ISF_Header_START_USER, id, ISF_NUM_USER_FILES);
 8008f10:	239c      	movs	r3, #156	; 0x9c
 8008f12:	2200      	movs	r2, #0
 8008f14:	0001      	movs	r1, r0
 8008f16:	0098      	lsls	r0, r3, #2
 8008f18:	f7ff ffca 	bl	8008eb0 <sub_header_search>
 8008f1c:	e7f7      	b.n	8008f0e <sub_isf_search+0x16>
        id = (ot_u8)((ot_int)ISF_NUM_STOCK_FILES + (255-id));
 8008f1e:	2118      	movs	r1, #24
 8008f20:	1a08      	subs	r0, r1, r0
 8008f22:	b2c0      	uxtb	r0, r0
 8008f24:	e7f0      	b.n	8008f08 <sub_isf_search+0x10>

08008f26 <sub_iss_search>:
static vaddr sub_iss_search(ot_u8 id) {
 8008f26:	b510      	push	{r4, lr}
 8008f28:	0001      	movs	r1, r0
    return sub_header_search( ISS_Header_START, id, ISS_NUM_FILES );
 8008f2a:	220c      	movs	r2, #12
 8008f2c:	2020      	movs	r0, #32
 8008f2e:	f7ff ffbf 	bl	8008eb0 <sub_header_search>
}
 8008f32:	bd10      	pop	{r4, pc}

08008f34 <sub_gfb_search>:
static vaddr sub_gfb_search(ot_u8 id) {
 8008f34:	b510      	push	{r4, lr}
 8008f36:	0001      	movs	r1, r0
    return sub_header_search( GFB_Header_START, id, GFB_NUM_USER_FILES );
 8008f38:	2200      	movs	r2, #0
 8008f3a:	2020      	movs	r0, #32
 8008f3c:	f7ff ffb8 	bl	8008eb0 <sub_header_search>
}
 8008f40:	bd10      	pop	{r4, pc}
	...

08008f44 <sub_action>:
static ot_u8 sub_action(vlFILE* fp) {
 8008f44:	b510      	push	{r4, lr}
 8008f46:	0004      	movs	r4, r0
    select = vworm_read(fp->header+10) >> 8;        ///@todo this is little endian only
 8008f48:	8800      	ldrh	r0, [r0, #0]
 8008f4a:	300a      	adds	r0, #10
 8008f4c:	b280      	uxth	r0, r0
 8008f4e:	f001 fa45 	bl	800a3dc <vworm_read>
 8008f52:	0a00      	lsrs	r0, r0, #8
 8008f54:	b280      	uxth	r0, r0
    if (select < OT_PARAM(VLACTIONS)) {
 8008f56:	2807      	cmp	r0, #7
 8008f58:	d807      	bhi.n	8008f6a <sub_action+0x26>
        retval = vlaction[select](fp);
 8008f5a:	0080      	lsls	r0, r0, #2
 8008f5c:	4b04      	ldr	r3, [pc, #16]	; (8008f70 <sub_action+0x2c>)
 8008f5e:	1818      	adds	r0, r3, r0
 8008f60:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008f62:	0020      	movs	r0, r4
 8008f64:	4798      	blx	r3
 8008f66:	b2c0      	uxtb	r0, r0
}
 8008f68:	bd10      	pop	{r4, pc}
    ot_u8 retval = 0;
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	e7fc      	b.n	8008f68 <sub_action+0x24>
 8008f6e:	46c0      	nop			; (mov r8, r8)
 8008f70:	20001178 	.word	0x20001178

08008f74 <sub_delete_file>:
static void sub_delete_file(vaddr del_header) {
 8008f74:	b570      	push	{r4, r5, r6, lr}
 8008f76:	0004      	movs	r4, r0
    header_alloc    = (ot_u16)vworm_read(del_header+2);
 8008f78:	1c85      	adds	r5, r0, #2
 8008f7a:	b2ad      	uxth	r5, r5
 8008f7c:	0028      	movs	r0, r5
 8008f7e:	f001 fa2d 	bl	800a3dc <vworm_read>
 8008f82:	0006      	movs	r6, r0
    header_base     = (vaddr)vworm_read(del_header+6);
 8008f84:	3406      	adds	r4, #6
 8008f86:	b2a4      	uxth	r4, r4
 8008f88:	0020      	movs	r0, r4
 8008f8a:	f001 fa27 	bl	800a3dc <vworm_read>
    vworm_wipeblock(header_base, header_alloc);
 8008f8e:	0031      	movs	r1, r6
 8008f90:	f001 fa38 	bl	800a404 <vworm_wipeblock>
    vworm_mark((del_header+2), 0);                //alloc
 8008f94:	2100      	movs	r1, #0
 8008f96:	0028      	movs	r0, r5
 8008f98:	f001 fa30 	bl	800a3fc <vworm_mark>
    vworm_mark((del_header+6), NULL_vaddr);       //base
 8008f9c:	4902      	ldr	r1, [pc, #8]	; (8008fa8 <sub_delete_file+0x34>)
 8008f9e:	0020      	movs	r0, r4
 8008fa0:	f001 fa2c 	bl	800a3fc <vworm_mark>
}
 8008fa4:	bd70      	pop	{r4, r5, r6, pc}
 8008fa6:	46c0      	nop			; (mov r8, r8)
 8008fa8:	0000ffff 	.word	0x0000ffff

08008fac <vl_new>:
OT_WEAK ot_u8 vl_new(vlFILE** fp_new, vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, ot_uint max_length, const id_tmpl* user_id) {
 8008fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	0006      	movs	r6, r0
 8008fb2:	000c      	movs	r4, r1
 8008fb4:	9200      	str	r2, [sp, #0]
 8008fb6:	9301      	str	r3, [sp, #4]
 8008fb8:	ab08      	add	r3, sp, #32
 8008fba:	881f      	ldrh	r7, [r3, #0]
    if (user_id != NULL) {
 8008fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d006      	beq.n	8008fd0 <vl_new+0x24>
        if ( auth_check(VL_ACCESS_USER, VL_ACCESS_W, user_id) == 0 ) {
 8008fc2:	001a      	movs	r2, r3
 8008fc4:	2112      	movs	r1, #18
 8008fc6:	2038      	movs	r0, #56	; 0x38
 8008fc8:	f7ff fdc4 	bl	8008b54 <auth_check>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d02f      	beq.n	8009030 <vl_new+0x84>
    block_id--;
 8008fd0:	3c01      	subs	r4, #1
 8008fd2:	b2e4      	uxtb	r4, r4
    switch (block_id) {
 8008fd4:	2c01      	cmp	r4, #1
 8008fd6:	d028      	beq.n	800902a <vl_new+0x7e>
 8008fd8:	2c00      	cmp	r4, #0
 8008fda:	d003      	beq.n	8008fe4 <vl_new+0x38>
 8008fdc:	2c02      	cmp	r4, #2
 8008fde:	d021      	beq.n	8009024 <vl_new+0x78>
       default: return 0xFF;
 8008fe0:	20ff      	movs	r0, #255	; 0xff
 8008fe2:	e01d      	b.n	8009020 <vl_new+0x74>
                new_fn      = &sub_gfb_new;
 8008fe4:	4d15      	ldr	r5, [pc, #84]	; (800903c <vl_new+0x90>)
        case 0: search_fn   = &sub_gfb_search;
 8008fe6:	4b16      	ldr	r3, [pc, #88]	; (8009040 <vl_new+0x94>)
    header = search_fn(data_id);
 8008fe8:	9800      	ldr	r0, [sp, #0]
 8008fea:	4798      	blx	r3
    if (header != NULL_vaddr) {
 8008fec:	4b15      	ldr	r3, [pc, #84]	; (8009044 <vl_new+0x98>)
 8008fee:	4298      	cmp	r0, r3
 8008ff0:	d120      	bne.n	8009034 <vl_new+0x88>
    *fp_new = new_fn(data_id, mod, max_length);
 8008ff2:	b2fa      	uxtb	r2, r7
 8008ff4:	9901      	ldr	r1, [sp, #4]
 8008ff6:	9800      	ldr	r0, [sp, #0]
 8008ff8:	47a8      	blx	r5
 8008ffa:	6030      	str	r0, [r6, #0]
    if (*fp_new == NULL) {
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d01b      	beq.n	8009038 <vl_new+0x8c>
        block[block_id].files  += 1;
 8009000:	4a11      	ldr	r2, [pc, #68]	; (8009048 <vl_new+0x9c>)
 8009002:	3262      	adds	r2, #98	; 0x62
 8009004:	0063      	lsls	r3, r4, #1
 8009006:	191c      	adds	r4, r3, r4
 8009008:	0063      	lsls	r3, r4, #1
 800900a:	18d2      	adds	r2, r2, r3
 800900c:	7911      	ldrb	r1, [r2, #4]
 800900e:	7953      	ldrb	r3, [r2, #5]
 8009010:	021b      	lsls	r3, r3, #8
 8009012:	430b      	orrs	r3, r1
 8009014:	3301      	adds	r3, #1
 8009016:	b29b      	uxth	r3, r3
 8009018:	7113      	strb	r3, [r2, #4]
 800901a:	0a1b      	lsrs	r3, r3, #8
 800901c:	7153      	strb	r3, [r2, #5]
    return 0;
 800901e:	2000      	movs	r0, #0
}
 8009020:	b003      	add	sp, #12
 8009022:	bdf0      	pop	{r4, r5, r6, r7, pc}
                new_fn      = &sub_isf_new;
 8009024:	4d09      	ldr	r5, [pc, #36]	; (800904c <vl_new+0xa0>)
        case 2: search_fn   = &sub_isf_search;
 8009026:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <vl_new+0xa4>)
                break;
 8009028:	e7de      	b.n	8008fe8 <vl_new+0x3c>
                new_fn      = &sub_iss_new;
 800902a:	4d0a      	ldr	r5, [pc, #40]	; (8009054 <vl_new+0xa8>)
        case 1: search_fn   = &sub_iss_search;
 800902c:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <vl_new+0xac>)
 800902e:	e7db      	b.n	8008fe8 <vl_new+0x3c>
            return 0x04;
 8009030:	2004      	movs	r0, #4
 8009032:	e7f5      	b.n	8009020 <vl_new+0x74>
        return 0x02;
 8009034:	2002      	movs	r0, #2
 8009036:	e7f3      	b.n	8009020 <vl_new+0x74>
        return 0x06;
 8009038:	2006      	movs	r0, #6
 800903a:	e7f1      	b.n	8009020 <vl_new+0x74>
 800903c:	08008e49 	.word	0x08008e49
 8009040:	08008f35 	.word	0x08008f35
 8009044:	0000ffff 	.word	0x0000ffff
 8009048:	20001178 	.word	0x20001178
 800904c:	08008e51 	.word	0x08008e51
 8009050:	08008ef9 	.word	0x08008ef9
 8009054:	08008e4d 	.word	0x08008e4d
 8009058:	08008f27 	.word	0x08008f27

0800905c <vl_delete>:
OT_WEAK ot_u8 vl_delete(vlBLOCK block_id, ot_u8 data_id, const id_tmpl* user_id) {
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	000d      	movs	r5, r1
 8009060:	0016      	movs	r6, r2
    block_id--;
 8009062:	3801      	subs	r0, #1
 8009064:	b2c4      	uxtb	r4, r0
    switch (block_id) {
 8009066:	2c01      	cmp	r4, #1
 8009068:	d036      	beq.n	80090d8 <vl_delete+0x7c>
 800906a:	2c00      	cmp	r4, #0
 800906c:	d003      	beq.n	8009076 <vl_delete+0x1a>
 800906e:	2c02      	cmp	r4, #2
 8009070:	d02f      	beq.n	80090d2 <vl_delete+0x76>
       default: return 255;
 8009072:	20ff      	movs	r0, #255	; 0xff
 8009074:	e02c      	b.n	80090d0 <vl_delete+0x74>
        case 0: check_fn    = &sub_gfb_delete_check;
 8009076:	4b1d      	ldr	r3, [pc, #116]	; (80090ec <vl_delete+0x90>)
                search_fn   = &sub_gfb_search;
 8009078:	4f1d      	ldr	r7, [pc, #116]	; (80090f0 <vl_delete+0x94>)
    if (check_fn(data_id) != 0) {
 800907a:	0028      	movs	r0, r5
 800907c:	4798      	blx	r3
 800907e:	2800      	cmp	r0, #0
 8009080:	d02d      	beq.n	80090de <vl_delete+0x82>
        header = search_fn(data_id);
 8009082:	0028      	movs	r0, r5
 8009084:	47b8      	blx	r7
 8009086:	0005      	movs	r5, r0
    if (header == NULL_vaddr) {
 8009088:	4b1a      	ldr	r3, [pc, #104]	; (80090f4 <vl_delete+0x98>)
 800908a:	4298      	cmp	r0, r3
 800908c:	d029      	beq.n	80090e2 <vl_delete+0x86>
    if (user_id != NULL) {
 800908e:	2e00      	cmp	r6, #0
 8009090:	d00b      	beq.n	80090aa <vl_delete+0x4e>
        filemod.ushort = vworm_read(header + 4);
 8009092:	3004      	adds	r0, #4
 8009094:	b280      	uxth	r0, r0
 8009096:	f001 f9a1 	bl	800a3dc <vworm_read>
        if ( auth_check(filemod.ubyte[1], VL_ACCESS_RW, user_id) == 0 ) {
 800909a:	0400      	lsls	r0, r0, #16
 800909c:	0e00      	lsrs	r0, r0, #24
 800909e:	0032      	movs	r2, r6
 80090a0:	2136      	movs	r1, #54	; 0x36
 80090a2:	f7ff fd57 	bl	8008b54 <auth_check>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d01d      	beq.n	80090e6 <vl_delete+0x8a>
    sub_delete_file(header);
 80090aa:	0028      	movs	r0, r5
 80090ac:	f7ff ff62 	bl	8008f74 <sub_delete_file>
        block[block_id].files  -= 1;
 80090b0:	4a11      	ldr	r2, [pc, #68]	; (80090f8 <vl_delete+0x9c>)
 80090b2:	3262      	adds	r2, #98	; 0x62
 80090b4:	0060      	lsls	r0, r4, #1
 80090b6:	1904      	adds	r4, r0, r4
 80090b8:	0063      	lsls	r3, r4, #1
 80090ba:	18d2      	adds	r2, r2, r3
 80090bc:	7911      	ldrb	r1, [r2, #4]
 80090be:	7953      	ldrb	r3, [r2, #5]
 80090c0:	021b      	lsls	r3, r3, #8
 80090c2:	430b      	orrs	r3, r1
 80090c4:	3b01      	subs	r3, #1
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	7113      	strb	r3, [r2, #4]
 80090ca:	0a1b      	lsrs	r3, r3, #8
 80090cc:	7153      	strb	r3, [r2, #5]
    return 0;
 80090ce:	2000      	movs	r0, #0
}
 80090d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 2: check_fn    = &sub_isf_delete_check;
 80090d2:	4b0a      	ldr	r3, [pc, #40]	; (80090fc <vl_delete+0xa0>)
                search_fn   = &sub_isf_search;
 80090d4:	4f0a      	ldr	r7, [pc, #40]	; (8009100 <vl_delete+0xa4>)
                break;
 80090d6:	e7d0      	b.n	800907a <vl_delete+0x1e>
        case 1: check_fn    = &sub_iss_delete_check;
 80090d8:	4b0a      	ldr	r3, [pc, #40]	; (8009104 <vl_delete+0xa8>)
                search_fn   = &sub_iss_search;
 80090da:	4f0b      	ldr	r7, [pc, #44]	; (8009108 <vl_delete+0xac>)
 80090dc:	e7cd      	b.n	800907a <vl_delete+0x1e>
        return 0x01;
 80090de:	2001      	movs	r0, #1
 80090e0:	e7f6      	b.n	80090d0 <vl_delete+0x74>
 80090e2:	2001      	movs	r0, #1
 80090e4:	e7f4      	b.n	80090d0 <vl_delete+0x74>
            return 0x04;
 80090e6:	2004      	movs	r0, #4
 80090e8:	e7f2      	b.n	80090d0 <vl_delete+0x74>
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	08008e55 	.word	0x08008e55
 80090f0:	08008f35 	.word	0x08008f35
 80090f4:	0000ffff 	.word	0x0000ffff
 80090f8:	20001178 	.word	0x20001178
 80090fc:	08008e5d 	.word	0x08008e5d
 8009100:	08008ef9 	.word	0x08008ef9
 8009104:	08008e59 	.word	0x08008e59
 8009108:	08008f27 	.word	0x08008f27

0800910c <vl_getheader_vaddr>:
OT_WEAK ot_u8 vl_getheader_vaddr(vaddr* header, vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	0005      	movs	r5, r0
 8009110:	001c      	movs	r4, r3
    switch (block_id) {
 8009112:	2902      	cmp	r1, #2
 8009114:	d01e      	beq.n	8009154 <vl_getheader_vaddr+0x48>
 8009116:	2903      	cmp	r1, #3
 8009118:	d021      	beq.n	800915e <vl_getheader_vaddr+0x52>
 800911a:	2901      	cmp	r1, #1
 800911c:	d001      	beq.n	8009122 <vl_getheader_vaddr+0x16>
        default:                return 255;
 800911e:	20ff      	movs	r0, #255	; 0xff
}
 8009120:	bd70      	pop	{r4, r5, r6, pc}
        case VL_GFB_BLOCKID:    *header = sub_gfb_search(data_id);      break;
 8009122:	0010      	movs	r0, r2
 8009124:	f7ff ff06 	bl	8008f34 <sub_gfb_search>
 8009128:	8028      	strh	r0, [r5, #0]
    if (*header == NULL_vaddr) {
 800912a:	8828      	ldrh	r0, [r5, #0]
 800912c:	4b11      	ldr	r3, [pc, #68]	; (8009174 <vl_getheader_vaddr+0x68>)
 800912e:	4298      	cmp	r0, r3
 8009130:	d01c      	beq.n	800916c <vl_getheader_vaddr+0x60>
    if (user_id != NULL) {
 8009132:	9b04      	ldr	r3, [sp, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d01b      	beq.n	8009170 <vl_getheader_vaddr+0x64>
        filemod.ushort = vworm_read(*header + 4);
 8009138:	3004      	adds	r0, #4
 800913a:	b280      	uxth	r0, r0
 800913c:	f001 f94e 	bl	800a3dc <vworm_read>
        if ( auth_check(filemod.ubyte[1], mod, user_id) == 0 ) {
 8009140:	0400      	lsls	r0, r0, #16
 8009142:	0e00      	lsrs	r0, r0, #24
 8009144:	9a04      	ldr	r2, [sp, #16]
 8009146:	0021      	movs	r1, r4
 8009148:	f7ff fd04 	bl	8008b54 <auth_check>
 800914c:	2800      	cmp	r0, #0
 800914e:	d00b      	beq.n	8009168 <vl_getheader_vaddr+0x5c>
    return 0;
 8009150:	2000      	movs	r0, #0
 8009152:	e7e5      	b.n	8009120 <vl_getheader_vaddr+0x14>
        case VL_ISS_BLOCKID:    *header = sub_iss_search(data_id);     break;
 8009154:	0010      	movs	r0, r2
 8009156:	f7ff fee6 	bl	8008f26 <sub_iss_search>
 800915a:	8028      	strh	r0, [r5, #0]
 800915c:	e7e5      	b.n	800912a <vl_getheader_vaddr+0x1e>
        case VL_ISF_BLOCKID:    *header = sub_isf_search(data_id);      break;
 800915e:	0010      	movs	r0, r2
 8009160:	f7ff feca 	bl	8008ef8 <sub_isf_search>
 8009164:	8028      	strh	r0, [r5, #0]
 8009166:	e7e0      	b.n	800912a <vl_getheader_vaddr+0x1e>
            return 0x04;
 8009168:	3004      	adds	r0, #4
 800916a:	e7d9      	b.n	8009120 <vl_getheader_vaddr+0x14>
        return 0x01;
 800916c:	2001      	movs	r0, #1
 800916e:	e7d7      	b.n	8009120 <vl_getheader_vaddr+0x14>
    return 0;
 8009170:	2000      	movs	r0, #0
 8009172:	e7d5      	b.n	8009120 <vl_getheader_vaddr+0x14>
 8009174:	0000ffff 	.word	0x0000ffff

08009178 <vl_open_file>:
OT_WEAK vlFILE* vl_open_file(vaddr header) {
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	0005      	movs	r5, r0
    fp = sub_new_fp();
 800917c:	f7ff fe70 	bl	8008e60 <sub_new_fp>
 8009180:	1e04      	subs	r4, r0, #0
    if (fp != NULL) {
 8009182:	d01e      	beq.n	80091c2 <vl_open_file+0x4a>
        fp->header  = header;
 8009184:	8005      	strh	r5, [r0, #0]
        fp->alloc   = vworm_read(header + 2);               //alloc
 8009186:	1ca8      	adds	r0, r5, #2
 8009188:	b280      	uxth	r0, r0
 800918a:	f001 f927 	bl	800a3dc <vworm_read>
 800918e:	80a0      	strh	r0, [r4, #4]
        fp->idmod   = vworm_read(header + 4);
 8009190:	1d28      	adds	r0, r5, #4
 8009192:	b280      	uxth	r0, r0
 8009194:	f001 f922 	bl	800a3dc <vworm_read>
 8009198:	80e0      	strh	r0, [r4, #6]
        fp->start   = vworm_read(header + 8);               //mirror base addr
 800919a:	0028      	movs	r0, r5
 800919c:	3008      	adds	r0, #8
 800919e:	b280      	uxth	r0, r0
 80091a0:	f001 f91c 	bl	800a3dc <vworm_read>
 80091a4:	8060      	strh	r0, [r4, #2]
        fp->flags   = VL_FLAG_OPENED;
 80091a6:	2301      	movs	r3, #1
 80091a8:	8163      	strh	r3, [r4, #10]
        if (fp->start != NULL_vaddr) {
 80091aa:	4b0e      	ldr	r3, [pc, #56]	; (80091e4 <vl_open_file+0x6c>)
 80091ac:	4298      	cmp	r0, r3
 80091ae:	d00a      	beq.n	80091c6 <vl_open_file+0x4e>
            fp->start  += 2;
 80091b0:	1c83      	adds	r3, r0, #2
 80091b2:	8063      	strh	r3, [r4, #2]
            fp->write   = &vsram_mark;
 80091b4:	4b0c      	ldr	r3, [pc, #48]	; (80091e8 <vl_open_file+0x70>)
 80091b6:	6123      	str	r3, [r4, #16]
            fp->read    = &vsram_read;
 80091b8:	4b0c      	ldr	r3, [pc, #48]	; (80091ec <vl_open_file+0x74>)
 80091ba:	60e3      	str	r3, [r4, #12]
            fp->length  = vsram_read(mlen);
 80091bc:	f001 f924 	bl	800a408 <vsram_read>
 80091c0:	8120      	strh	r0, [r4, #8]
}
 80091c2:	0020      	movs	r0, r4
 80091c4:	bd70      	pop	{r4, r5, r6, pc}
            fp->write   = &vworm_write;
 80091c6:	4b0a      	ldr	r3, [pc, #40]	; (80091f0 <vl_open_file+0x78>)
 80091c8:	6123      	str	r3, [r4, #16]
            fp->read    = &vworm_read;
 80091ca:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <vl_open_file+0x7c>)
 80091cc:	60e3      	str	r3, [r4, #12]
            fp->length  = vworm_read(header + 0);           //length
 80091ce:	0028      	movs	r0, r5
 80091d0:	f001 f904 	bl	800a3dc <vworm_read>
 80091d4:	8120      	strh	r0, [r4, #8]
            fp->start   = vworm_read(header + 6);           //vworm base addr
 80091d6:	3506      	adds	r5, #6
 80091d8:	b2a8      	uxth	r0, r5
 80091da:	f001 f8ff 	bl	800a3dc <vworm_read>
 80091de:	8060      	strh	r0, [r4, #2]
    return fp;
 80091e0:	e7ef      	b.n	80091c2 <vl_open_file+0x4a>
 80091e2:	46c0      	nop			; (mov r8, r8)
 80091e4:	0000ffff 	.word	0x0000ffff
 80091e8:	0800a411 	.word	0x0800a411
 80091ec:	0800a409 	.word	0x0800a409
 80091f0:	0800a3ed 	.word	0x0800a3ed
 80091f4:	0800a3dd 	.word	0x0800a3dd

080091f8 <vl_open>:
OT_WEAK vlFILE* vl_open(vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 80091f8:	b530      	push	{r4, r5, lr}
 80091fa:	b085      	sub	sp, #20
 80091fc:	0004      	movs	r4, r0
    vaddr header = NULL_vaddr;
 80091fe:	200e      	movs	r0, #14
 8009200:	4468      	add	r0, sp
 8009202:	2501      	movs	r5, #1
 8009204:	426d      	negs	r5, r5
 8009206:	8005      	strh	r5, [r0, #0]
    if (vl_getheader_vaddr(&header, block_id, data_id, mod, user_id) == 0) {
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	0013      	movs	r3, r2
 800920c:	000a      	movs	r2, r1
 800920e:	0021      	movs	r1, r4
 8009210:	f7ff ff7c 	bl	800910c <vl_getheader_vaddr>
 8009214:	2800      	cmp	r0, #0
 8009216:	d106      	bne.n	8009226 <vl_open+0x2e>
        return vl_open_file(header);
 8009218:	230e      	movs	r3, #14
 800921a:	446b      	add	r3, sp
 800921c:	8818      	ldrh	r0, [r3, #0]
 800921e:	f7ff ffab 	bl	8009178 <vl_open_file>
}
 8009222:	b005      	add	sp, #20
 8009224:	bd30      	pop	{r4, r5, pc}
    return NULL;
 8009226:	2000      	movs	r0, #0
 8009228:	e7fb      	b.n	8009222 <vl_open+0x2a>

0800922a <vl_chmod>:
OT_WEAK ot_u8 vl_chmod(vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 800922a:	b570      	push	{r4, r5, r6, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	0004      	movs	r4, r0
 8009230:	000d      	movs	r5, r1
 8009232:	0016      	movs	r6, r2
    vaddr header = NULL_vaddr;
 8009234:	200e      	movs	r0, #14
 8009236:	4468      	add	r0, sp
 8009238:	2201      	movs	r2, #1
 800923a:	4252      	negs	r2, r2
 800923c:	8002      	strh	r2, [r0, #0]
    output = vl_getheader_vaddr(&header, block_id, data_id, VL_ACCESS_RW, user_id);
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	2336      	movs	r3, #54	; 0x36
 8009242:	000a      	movs	r2, r1
 8009244:	0021      	movs	r1, r4
 8009246:	f7ff ff61 	bl	800910c <vl_getheader_vaddr>
 800924a:	1e04      	subs	r4, r0, #0
    if (output == 0) {
 800924c:	d002      	beq.n	8009254 <vl_chmod+0x2a>
}
 800924e:	0020      	movs	r0, r4
 8009250:	b004      	add	sp, #16
 8009252:	bd70      	pop	{r4, r5, r6, pc}
        idmod.ubyte[0]  = data_id;
 8009254:	a903      	add	r1, sp, #12
 8009256:	700d      	strb	r5, [r1, #0]
        idmod.ubyte[1]  = mod;
 8009258:	704e      	strb	r6, [r1, #1]
        sub_write_header((header+4), &idmod.ushort, 2);
 800925a:	230e      	movs	r3, #14
 800925c:	446b      	add	r3, sp
 800925e:	8818      	ldrh	r0, [r3, #0]
 8009260:	3004      	adds	r0, #4
 8009262:	b280      	uxth	r0, r0
 8009264:	2202      	movs	r2, #2
 8009266:	f7ff fe11 	bl	8008e8c <sub_write_header>
 800926a:	e7f0      	b.n	800924e <vl_chmod+0x24>

0800926c <vl_read>:
OT_WEAK ot_u16 vl_read( vlFILE* fp, ot_uint offset ) {
 800926c:	b510      	push	{r4, lr}
    return fp->read( (ot_uint)(offset+fp->start) );
 800926e:	68c3      	ldr	r3, [r0, #12]
 8009270:	8840      	ldrh	r0, [r0, #2]
 8009272:	1840      	adds	r0, r0, r1
 8009274:	b280      	uxth	r0, r0
 8009276:	4798      	blx	r3
}
 8009278:	bd10      	pop	{r4, pc}

0800927a <vl_write>:
OT_WEAK ot_u8 vl_write( vlFILE* fp, ot_uint offset, ot_u16 data ) {
 800927a:	b510      	push	{r4, lr}
    if (offset >= fp->alloc) {
 800927c:	8883      	ldrh	r3, [r0, #4]
 800927e:	428b      	cmp	r3, r1
 8009280:	d913      	bls.n	80092aa <vl_write+0x30>
    if (offset >= fp->length) {
 8009282:	8903      	ldrh	r3, [r0, #8]
 8009284:	428b      	cmp	r3, r1
 8009286:	d805      	bhi.n	8009294 <vl_write+0x1a>
        fp->length  = offset+2;
 8009288:	1c8b      	adds	r3, r1, #2
 800928a:	8103      	strh	r3, [r0, #8]
        fp->flags  |= VL_FLAG_RESIZED;
 800928c:	8943      	ldrh	r3, [r0, #10]
 800928e:	2404      	movs	r4, #4
 8009290:	4323      	orrs	r3, r4
 8009292:	8143      	strh	r3, [r0, #10]
    fp->flags |= VL_FLAG_MODDED;
 8009294:	8943      	ldrh	r3, [r0, #10]
 8009296:	2402      	movs	r4, #2
 8009298:	4323      	orrs	r3, r4
 800929a:	8143      	strh	r3, [r0, #10]
    return fp->write( (offset+fp->start), data);
 800929c:	6903      	ldr	r3, [r0, #16]
 800929e:	8840      	ldrh	r0, [r0, #2]
 80092a0:	1840      	adds	r0, r0, r1
 80092a2:	b280      	uxth	r0, r0
 80092a4:	0011      	movs	r1, r2
 80092a6:	4798      	blx	r3
}
 80092a8:	bd10      	pop	{r4, pc}
        return 255;
 80092aa:	20ff      	movs	r0, #255	; 0xff
 80092ac:	e7fc      	b.n	80092a8 <vl_write+0x2e>

080092ae <vl_load>:
OT_WEAK ot_uint vl_load( vlFILE* fp, ot_uint length, ot_u8* data ) {
 80092ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092b0:	46c6      	mov	lr, r8
 80092b2:	b500      	push	{lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	4680      	mov	r8, r0
 80092b8:	0017      	movs	r7, r2
    if (length > fp->length) {
 80092ba:	8900      	ldrh	r0, [r0, #8]
 80092bc:	4288      	cmp	r0, r1
 80092be:	d300      	bcc.n	80092c2 <vl_load+0x14>
 80092c0:	0008      	movs	r0, r1
    cursor      = fp->start;        // guaranteed to be 16 bit aligned
 80092c2:	4643      	mov	r3, r8
 80092c4:	885c      	ldrh	r4, [r3, #2]
    length      = cursor+length;
 80092c6:	1900      	adds	r0, r0, r4
 80092c8:	b286      	uxth	r6, r0
    for (; cursor<length; cursor++) {
 80092ca:	e005      	b.n	80092d8 <vl_load+0x2a>
        *data++ = scratch.ubyte[align];
 80092cc:	ab01      	add	r3, sp, #4
 80092ce:	5d5b      	ldrb	r3, [r3, r5]
 80092d0:	703b      	strb	r3, [r7, #0]
    for (; cursor<length; cursor++) {
 80092d2:	3401      	adds	r4, #1
 80092d4:	b2a4      	uxth	r4, r4
        *data++ = scratch.ubyte[align];
 80092d6:	3701      	adds	r7, #1
    for (; cursor<length; cursor++) {
 80092d8:	42b4      	cmp	r4, r6
 80092da:	d209      	bcs.n	80092f0 <vl_load+0x42>
        ot_u8 align = (cursor & 1);
 80092dc:	2501      	movs	r5, #1
 80092de:	4025      	ands	r5, r4
        if (align == 0) {
 80092e0:	d1f4      	bne.n	80092cc <vl_load+0x1e>
            scratch.ushort = fp->read(cursor);
 80092e2:	0020      	movs	r0, r4
 80092e4:	4643      	mov	r3, r8
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	4798      	blx	r3
 80092ea:	ab01      	add	r3, sp, #4
 80092ec:	8018      	strh	r0, [r3, #0]
 80092ee:	e7ed      	b.n	80092cc <vl_load+0x1e>
    return (length - fp->start);
 80092f0:	4643      	mov	r3, r8
 80092f2:	8858      	ldrh	r0, [r3, #2]
 80092f4:	1a30      	subs	r0, r6, r0
 80092f6:	b280      	uxth	r0, r0
}
 80092f8:	b002      	add	sp, #8
 80092fa:	bc04      	pop	{r2}
 80092fc:	4690      	mov	r8, r2
 80092fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009300 <vl_store>:
OT_WEAK ot_u8 vl_store( vlFILE* fp, ot_uint length, const ot_u8* data ) {
 8009300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009302:	46ce      	mov	lr, r9
 8009304:	b500      	push	{lr}
 8009306:	b082      	sub	sp, #8
 8009308:	0005      	movs	r5, r0
    if (length > fp->alloc) {
 800930a:	8886      	ldrh	r6, [r0, #4]
 800930c:	428e      	cmp	r6, r1
 800930e:	d300      	bcc.n	8009312 <vl_store+0x12>
 8009310:	000e      	movs	r6, r1
    fp->flags  |= (length != fp->length) ? (VL_FLAG_RESIZED|VL_FLAG_MODDED) : VL_FLAG_MODDED;
 8009312:	210a      	movs	r1, #10
 8009314:	5e6b      	ldrsh	r3, [r5, r1]
 8009316:	8929      	ldrh	r1, [r5, #8]
 8009318:	42b1      	cmp	r1, r6
 800931a:	d008      	beq.n	800932e <vl_store+0x2e>
 800931c:	2106      	movs	r1, #6
 800931e:	430b      	orrs	r3, r1
 8009320:	816b      	strh	r3, [r5, #10]
    fp->length  = length;
 8009322:	812e      	strh	r6, [r5, #8]
    cursor      = fp->start;
 8009324:	886c      	ldrh	r4, [r5, #2]
    length      = cursor+length;
 8009326:	1936      	adds	r6, r6, r4
 8009328:	b2b6      	uxth	r6, r6
    for (test=0; cursor<length; cursor+=2) {
 800932a:	2700      	movs	r7, #0
 800932c:	e019      	b.n	8009362 <vl_store+0x62>
    fp->flags  |= (length != fp->length) ? (VL_FLAG_RESIZED|VL_FLAG_MODDED) : VL_FLAG_MODDED;
 800932e:	2102      	movs	r1, #2
 8009330:	e7f5      	b.n	800931e <vl_store+0x1e>
        scratch.ubyte[0]    = *data++;
 8009332:	7813      	ldrb	r3, [r2, #0]
 8009334:	21ff      	movs	r1, #255	; 0xff
 8009336:	4668      	mov	r0, sp
 8009338:	8880      	ldrh	r0, [r0, #4]
 800933a:	4388      	bics	r0, r1
 800933c:	4303      	orrs	r3, r0
        scratch.ubyte[1]    = *data++;
 800933e:	1c91      	adds	r1, r2, #2
 8009340:	4689      	mov	r9, r1
 8009342:	7852      	ldrb	r2, [r2, #1]
 8009344:	0212      	lsls	r2, r2, #8
 8009346:	21ff      	movs	r1, #255	; 0xff
 8009348:	4019      	ands	r1, r3
 800934a:	4311      	orrs	r1, r2
 800934c:	466b      	mov	r3, sp
 800934e:	8099      	strh	r1, [r3, #4]
        test               |= fp->write(cursor, scratch.ushort);
 8009350:	b289      	uxth	r1, r1
 8009352:	0020      	movs	r0, r4
 8009354:	692b      	ldr	r3, [r5, #16]
 8009356:	4798      	blx	r3
 8009358:	4307      	orrs	r7, r0
 800935a:	b2ff      	uxtb	r7, r7
    for (test=0; cursor<length; cursor+=2) {
 800935c:	3402      	adds	r4, #2
 800935e:	b2a4      	uxth	r4, r4
        scratch.ubyte[1]    = *data++;
 8009360:	464a      	mov	r2, r9
    for (test=0; cursor<length; cursor+=2) {
 8009362:	42b4      	cmp	r4, r6
 8009364:	d3e5      	bcc.n	8009332 <vl_store+0x32>
}
 8009366:	0038      	movs	r0, r7
 8009368:	b002      	add	sp, #8
 800936a:	bc04      	pop	{r2}
 800936c:	4691      	mov	r9, r2
 800936e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009370 <vl_close>:
OT_WEAK ot_u8 vl_close( vlFILE* fp ) {
 8009370:	b510      	push	{r4, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	1e04      	subs	r4, r0, #0
    if (FP_ISVALID(fp)) {
 8009376:	d02e      	beq.n	80093d6 <vl_close+0x66>
        if (vworm_read(fp->header+0) != fp->length) {
 8009378:	8800      	ldrh	r0, [r0, #0]
 800937a:	f001 f82f 	bl	800a3dc <vworm_read>
 800937e:	8923      	ldrh	r3, [r4, #8]
 8009380:	4298      	cmp	r0, r3
 8009382:	d115      	bne.n	80093b0 <vl_close+0x40>
        epoch_s = time_get_utc();
 8009384:	f000 f9b5 	bl	80096f2 <time_get_utc>
 8009388:	9001      	str	r0, [sp, #4]
        if (fp->flags & VL_FLAG_MODDED) {
 800938a:	8963      	ldrh	r3, [r4, #10]
 800938c:	079b      	lsls	r3, r3, #30
 800938e:	d416      	bmi.n	80093be <vl_close+0x4e>
            action.ushort       = vworm_read(fp->header+10);    ///@todo make offset constant instead of 10
 8009390:	8820      	ldrh	r0, [r4, #0]
 8009392:	300a      	adds	r0, #10
 8009394:	b280      	uxth	r0, r0
 8009396:	f001 f821 	bl	800a3dc <vworm_read>
            action.ubyte[0]    &= (ot_u8)fp->flags;
 800939a:	7aa3      	ldrb	r3, [r4, #10]
 800939c:	4018      	ands	r0, r3
            if (action.ubyte[0] != 0) {
 800939e:	d116      	bne.n	80093ce <vl_close+0x5e>
        fp->start   = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	8063      	strh	r3, [r4, #2]
        fp->length  = 0;
 80093a4:	8123      	strh	r3, [r4, #8]
        fp->flags   = 0;
 80093a6:	8163      	strh	r3, [r4, #10]
        fp->read    = NULL;
 80093a8:	60e3      	str	r3, [r4, #12]
        fp->write   = NULL;
 80093aa:	6123      	str	r3, [r4, #16]
}
 80093ac:	b002      	add	sp, #8
 80093ae:	bd10      	pop	{r4, pc}
            sub_write_header( (fp->header+0), &(fp->length), 2);
 80093b0:	0021      	movs	r1, r4
 80093b2:	3108      	adds	r1, #8
 80093b4:	8820      	ldrh	r0, [r4, #0]
 80093b6:	2202      	movs	r2, #2
 80093b8:	f7ff fd68 	bl	8008e8c <sub_write_header>
 80093bc:	e7e2      	b.n	8009384 <vl_close+0x14>
            sub_write_header( (fp->header+12), (ot_u16*)&epoch_s, 4);    ///@todo make offset constant instead of 12
 80093be:	8820      	ldrh	r0, [r4, #0]
 80093c0:	300c      	adds	r0, #12
 80093c2:	b280      	uxth	r0, r0
 80093c4:	2204      	movs	r2, #4
 80093c6:	a901      	add	r1, sp, #4
 80093c8:	f7ff fd60 	bl	8008e8c <sub_write_header>
 80093cc:	e7e0      	b.n	8009390 <vl_close+0x20>
                retval = sub_action(fp);
 80093ce:	0020      	movs	r0, r4
 80093d0:	f7ff fdb8 	bl	8008f44 <sub_action>
 80093d4:	e7e4      	b.n	80093a0 <vl_close+0x30>
        retval = 255;
 80093d6:	20ff      	movs	r0, #255	; 0xff
 80093d8:	e7e8      	b.n	80093ac <vl_close+0x3c>

080093da <ISF_open_su>:
OT_WEAK vlFILE* ISF_open_su( ot_u8 id ) {
 80093da:	b510      	push	{r4, lr}
 80093dc:	0001      	movs	r1, r0
    return vl_open(VL_ISF_BLOCKID, id, VL_ACCESS_SU, NULL);
 80093de:	2300      	movs	r3, #0
 80093e0:	223f      	movs	r2, #63	; 0x3f
 80093e2:	2003      	movs	r0, #3
 80093e4:	f7ff ff08 	bl	80091f8 <vl_open>
}
 80093e8:	bd10      	pop	{r4, pc}

080093ea <ISS_open>:
OT_WEAK vlFILE* ISS_open( ot_u8 id, ot_u8 mod, const id_tmpl* user_id ) {
 80093ea:	b510      	push	{r4, lr}
 80093ec:	0013      	movs	r3, r2
    return vl_open(VL_ISS_BLOCKID, id, mod, user_id);
 80093ee:	000a      	movs	r2, r1
 80093f0:	0001      	movs	r1, r0
 80093f2:	2002      	movs	r0, #2
 80093f4:	f7ff ff00 	bl	80091f8 <vl_open>
}
 80093f8:	bd10      	pop	{r4, pc}

080093fa <ISF_open>:
OT_WEAK vlFILE* ISF_open( ot_u8 id, ot_u8 mod, const id_tmpl* user_id ) {
 80093fa:	b510      	push	{r4, lr}
 80093fc:	0013      	movs	r3, r2
    return vl_open(VL_ISF_BLOCKID, id, mod, user_id);
 80093fe:	000a      	movs	r2, r1
 8009400:	0001      	movs	r1, r0
 8009402:	2003      	movs	r0, #3
 8009404:	f7ff fef8 	bl	80091f8 <vl_open>
}
 8009408:	bd10      	pop	{r4, pc}

0800940a <ISF_loadmirror>:
}
 800940a:	2000      	movs	r0, #0
 800940c:	4770      	bx	lr
	...

08009410 <vl_init>:
OT_WEAK ot_u8 vl_init(void) {
 8009410:	b510      	push	{r4, lr}
    memset(vlaction, 0, sizeof(vlaction));
 8009412:	4c11      	ldr	r4, [pc, #68]	; (8009458 <vl_init+0x48>)
 8009414:	0020      	movs	r0, r4
 8009416:	303c      	adds	r0, #60	; 0x3c
 8009418:	2220      	movs	r2, #32
 800941a:	2100      	movs	r1, #0
 800941c:	f000 ff8c 	bl	800a338 <ot_memset>
    memset(vlaction_users, 0, sizeof(vlaction_users));
 8009420:	0020      	movs	r0, r4
 8009422:	307c      	adds	r0, #124	; 0x7c
 8009424:	2208      	movs	r2, #8
 8009426:	2100      	movs	r1, #0
 8009428:	f000 ff86 	bl	800a338 <ot_memset>
    memset(vlfile, 0, sizeof(vlfile));
 800942c:	223c      	movs	r2, #60	; 0x3c
 800942e:	2100      	movs	r1, #0
 8009430:	0020      	movs	r0, r4
 8009432:	f000 ff81 	bl	800a338 <ot_memset>
    for (i=0; i<OT_PARAM(VLFPS); i++) {
 8009436:	2300      	movs	r3, #0
 8009438:	e008      	b.n	800944c <vl_init+0x3c>
        vlfile[i].header   = NULL_vaddr;
 800943a:	009a      	lsls	r2, r3, #2
 800943c:	18d2      	adds	r2, r2, r3
 800943e:	0091      	lsls	r1, r2, #2
 8009440:	4a05      	ldr	r2, [pc, #20]	; (8009458 <vl_init+0x48>)
 8009442:	2001      	movs	r0, #1
 8009444:	4240      	negs	r0, r0
 8009446:	5288      	strh	r0, [r1, r2]
    for (i=0; i<OT_PARAM(VLFPS); i++) {
 8009448:	3301      	adds	r3, #1
 800944a:	b21b      	sxth	r3, r3
 800944c:	2b02      	cmp	r3, #2
 800944e:	ddf4      	ble.n	800943a <vl_init+0x2a>
    ISF_loadmirror();
 8009450:	f7ff ffdb 	bl	800940a <ISF_loadmirror>
}
 8009454:	2000      	movs	r0, #0
 8009456:	bd10      	pop	{r4, pc}
 8009458:	20001178 	.word	0x20001178

0800945c <sub_init_task>:
#endif
};



ot_u8 sub_init_task(Task_Index i, ot_u8 is_restart) {
 800945c:	b570      	push	{r4, r5, r6, lr}
    ot_u8 task_event;
    task_event          = sys.task[i].event;
 800945e:	00c3      	lsls	r3, r0, #3
 8009460:	4c07      	ldr	r4, [pc, #28]	; (8009480 <sub_init_task+0x24>)
 8009462:	18e4      	adds	r4, r4, r3
 8009464:	1d22      	adds	r2, r4, #4
 8009466:	7926      	ldrb	r6, [r4, #4]
    sys.task[i].event   = 0;
 8009468:	2500      	movs	r5, #0
 800946a:	7125      	strb	r5, [r4, #4]
    sys.task[i].cursor  = is_restart;
 800946c:	7161      	strb	r1, [r4, #5]
    TASK_INDEXED_CALL(i);
 800946e:	0080      	lsls	r0, r0, #2
 8009470:	4904      	ldr	r1, [pc, #16]	; (8009484 <sub_init_task+0x28>)
 8009472:	5843      	ldr	r3, [r0, r1]
 8009474:	0010      	movs	r0, r2
 8009476:	4798      	blx	r3
    sys.task[i].cursor  = 0;
 8009478:	7165      	strb	r5, [r4, #5]
    return task_event;
}
 800947a:	0030      	movs	r0, r6
 800947c:	bd70      	pop	{r4, r5, r6, pc}
 800947e:	46c0      	nop			; (mov r8, r8)
 8009480:	20002e1c 	.word	0x20002e1c
 8009484:	0800c7a8 	.word	0x0800c7a8

08009488 <sys_init>:
/** System Core Functions
  * ============================================================================
  */

#ifndef EXTF_sys_init
OT_WEAK void sys_init() {
 8009488:	b510      	push	{r4, lr}
#   endif

    /// Set default values in system tasks.  At a minimum, this is doing a
    /// memset on the task struct to 0.  If dynamic task callbacks are enabled,
    /// also set theses callbacks to the default values.
    memset((ot_u8*)sys.task, 0, sizeof(task_marker)*SYS_TASKS);
 800948a:	4c0b      	ldr	r4, [pc, #44]	; (80094b8 <sys_init+0x30>)
 800948c:	2238      	movs	r2, #56	; 0x38
 800948e:	2100      	movs	r1, #0
 8009490:	0020      	movs	r0, r4
 8009492:	f000 ff51 	bl	800a338 <ot_memset>
            sys_task->call  = default_call;
        }
    }
#   endif

    sys.active = TASK_MAX;
 8009496:	3c04      	subs	r4, #4
 8009498:	2300      	movs	r3, #0
 800949a:	7023      	strb	r3, [r4, #0]
//#   endif

    /// Initialize DLL, which also initializes the rest of the protocol stack.
    /// In some HW, the radio must be initialized before MPipe.
#   if (OT_FEATURE(M2))
        dll_init();
 800949c:	f7fd fe0e 	bl	80070bc <dll_init>
//        mpipe_connect(NULL);
//#   endif
        
    ///@todo change these manual calls into normal task calls using event=0,
    ///      which is the initialization/kill state.
    i = TASK_terminus;
 80094a0:	2407      	movs	r4, #7
    while (i > 1) {
 80094a2:	e006      	b.n	80094b2 <sys_init+0x2a>
        sub_init_task(--i, 1);
 80094a4:	3c01      	subs	r4, #1
 80094a6:	b2a0      	uxth	r0, r4
 80094a8:	b204      	sxth	r4, r0
 80094aa:	b240      	sxtb	r0, r0
 80094ac:	2101      	movs	r1, #1
 80094ae:	f7ff ffd5 	bl	800945c <sub_init_task>
    while (i > 1) {
 80094b2:	2c01      	cmp	r4, #1
 80094b4:	dcf6      	bgt.n	80094a4 <sys_init+0x1c>
    }
}
 80094b6:	bd10      	pop	{r4, pc}
 80094b8:	20002e20 	.word	0x20002e20

080094bc <sys_panic>:
#endif



#ifndef EXTF_sys_panic
OT_WEAK void sys_panic(ot_u8 err_code) {
 80094bc:	b510      	push	{r4, lr}
 80094be:	0004      	movs	r4, r0
/// Go to OFF state
#   if (OT_FEATURE(M2))
        dll.idle_state = 0;
 80094c0:	4b06      	ldr	r3, [pc, #24]	; (80094dc <sys_panic+0x20>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	701a      	strb	r2, [r3, #0]
        session_flush();
 80094c6:	f7fe fb25 	bl	8007b14 <session_flush>
        dll_idle();
 80094ca:	f7fd f951 	bl	8006770 <dll_idle>
#   endif

    systim_disable();
 80094ce:	f000 fa11 	bl	80098f4 <systim_disable>

#   if defined(EXTF_sys_sig_panic)
        sys_sig_panic(err_code);
 80094d2:	b220      	sxth	r0, r4
 80094d4:	f7f8 fa2f 	bl	8001936 <sys_sig_panic>
#   elif (OT_FEATURE(SYSKERN_CALLBACKS) == ENABLED)
        sys.panic(err_code);
#   endif
}
 80094d8:	bd10      	pop	{r4, pc}
 80094da:	46c0      	nop			; (mov r8, r8)
 80094dc:	200026d4 	.word	0x200026d4

080094e0 <sys_powerdown>:
#endif



#ifndef EXTF_sys_powerdown
OT_WEAK void sys_powerdown() {
 80094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e2:	46ce      	mov	lr, r9
 80094e4:	4647      	mov	r7, r8
 80094e6:	b580      	push	{r7, lr}
    ot_uint code = 3;
    ot_int i;

    ///@todo This call-model is kludgey, but for now it is OK in practice.
    ///      Better to have a second status call for exotasks.
    for (i=0; i<_NUM_EXOTASKS; i++) {
 80094e8:	2400      	movs	r4, #0
    ot_uint code = 3;
 80094ea:	2703      	movs	r7, #3
    for (i=0; i<_NUM_EXOTASKS; i++) {
 80094ec:	e008      	b.n	8009500 <sys_powerdown+0x20>
        if (sys.task[i].cursor < code) {
            code = sys.task[i].cursor;
        }
        
        // Reset event and cursor to previous values
        sys.task[i].event   = task_event;
 80094ee:	00f6      	lsls	r6, r6, #3
 80094f0:	4b13      	ldr	r3, [pc, #76]	; (8009540 <sys_powerdown+0x60>)
 80094f2:	199b      	adds	r3, r3, r6
 80094f4:	464a      	mov	r2, r9
 80094f6:	711a      	strb	r2, [r3, #4]
        sys.task[i].cursor  = task_cursor;
 80094f8:	4642      	mov	r2, r8
 80094fa:	715a      	strb	r2, [r3, #5]
    for (i=0; i<_NUM_EXOTASKS; i++) {
 80094fc:	3401      	adds	r4, #1
 80094fe:	b224      	sxth	r4, r4
 8009500:	2c01      	cmp	r4, #1
 8009502:	dc13      	bgt.n	800952c <sys_powerdown+0x4c>
        ot_u8 task_event    = sys.task[i].event;
 8009504:	0026      	movs	r6, r4
 8009506:	00e3      	lsls	r3, r4, #3
 8009508:	4d0d      	ldr	r5, [pc, #52]	; (8009540 <sys_powerdown+0x60>)
 800950a:	18ed      	adds	r5, r5, r3
 800950c:	1d28      	adds	r0, r5, #4
 800950e:	792b      	ldrb	r3, [r5, #4]
 8009510:	4699      	mov	r9, r3
        ot_u8 task_cursor   = sys.task[i].cursor;
 8009512:	796b      	ldrb	r3, [r5, #5]
 8009514:	4698      	mov	r8, r3
        sys.task[i].event   = 255;
 8009516:	23ff      	movs	r3, #255	; 0xff
 8009518:	712b      	strb	r3, [r5, #4]
        TASK_INDEXED_CALL(i);
 800951a:	00a3      	lsls	r3, r4, #2
 800951c:	4a09      	ldr	r2, [pc, #36]	; (8009544 <sys_powerdown+0x64>)
 800951e:	589b      	ldr	r3, [r3, r2]
 8009520:	4798      	blx	r3
        if (sys.task[i].cursor < code) {
 8009522:	796b      	ldrb	r3, [r5, #5]
 8009524:	42bb      	cmp	r3, r7
 8009526:	d2e2      	bcs.n	80094ee <sys_powerdown+0xe>
            code = sys.task[i].cursor;
 8009528:	001f      	movs	r7, r3
 800952a:	e7e0      	b.n	80094ee <sys_powerdown+0xe>
    }

    // Shut down the clocker: a task isn't running during powerdown
    systim_stop_clocker();
 800952c:	f000 fa66 	bl	80099fc <systim_stop_clocker>

#   if defined(EXTF_sys_sig_powerdown)
        sys_sig_powerdown(code);
 8009530:	b238      	sxth	r0, r7
 8009532:	f7f8 fa01 	bl	8001938 <sys_sig_powerdown>
#   elif (OT_FEATURE(SYSKERN_CALLBACKS))
        sys.powerdown(code);
#   else
#       error "powerdown applet (sys_sig_powerdown) is not available."
#   endif
}
 8009536:	bc0c      	pop	{r2, r3}
 8009538:	4690      	mov	r8, r2
 800953a:	4699      	mov	r9, r3
 800953c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800953e:	46c0      	nop			; (mov r8, r8)
 8009540:	20002e1c 	.word	0x20002e1c
 8009544:	0800c7a8 	.word	0x0800c7a8

08009548 <sys_task_setevent>:




void sys_task_setevent(ot_task task, ot_u8 event) {
    task->event = event;
 8009548:	7001      	strb	r1, [r0, #0]
}
 800954a:	4770      	bx	lr

0800954c <sys_task_setcursor>:

void sys_task_setcursor(ot_task task, ot_u8 cursor) {
    task->cursor = cursor;
 800954c:	7041      	strb	r1, [r0, #1]
}
 800954e:	4770      	bx	lr

08009550 <sys_task_setreserve>:

void sys_task_setreserve(ot_task task, ot_u8 reserve) {
    task->reserve = reserve;
 8009550:	7081      	strb	r1, [r0, #2]
}
 8009552:	4770      	bx	lr

08009554 <sys_task_setlatency>:

void sys_task_setlatency(ot_task task, ot_u8 latency) {
    task->latency = latency;
 8009554:	70c1      	strb	r1, [r0, #3]
}
 8009556:	4770      	bx	lr

08009558 <sys_task_setnext_clocks>:

void sys_task_setnext(ot_task task, ot_u32 nextevent_ti) {
    sys_task_setnext_clocks(task, (ot_long)TI2CLK(nextevent_ti));
}

void sys_task_setnext_clocks(ot_task task, ot_long nextevent_clocks) {
 8009558:	b570      	push	{r4, r5, r6, lr}
 800955a:	0004      	movs	r4, r0
 800955c:	000d      	movs	r5, r1
    task->nextevent = nextevent_clocks + (ot_long)systim_get();
 800955e:	f000 f9bd 	bl	80098dc <systim_get>
 8009562:	1940      	adds	r0, r0, r5
 8009564:	6060      	str	r0, [r4, #4]
}
 8009566:	bd70      	pop	{r4, r5, r6, pc}

08009568 <sys_task_setnext>:
void sys_task_setnext(ot_task task, ot_u32 nextevent_ti) {
 8009568:	b510      	push	{r4, lr}
    sys_task_setnext_clocks(task, (ot_long)TI2CLK(nextevent_ti));
 800956a:	f7ff fff5 	bl	8009558 <sys_task_setnext_clocks>
}
 800956e:	bd10      	pop	{r4, pc}

08009570 <sys_event_manager>:
  * The Event Manager is multiplexed in order to work with dynamic task calls
  * or static task calls.  Some platforms work better with dynamic, and some
  * better with static.
  */
#ifndef EXTF_sys_event_manager
OT_WEAK ot_uint sys_event_manager() {
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Task_Index  i;
#   endif

    /// 1. Get the elapsed time since the scheduler last run.  We also update
    ///    the time, which does nothing unless time is enabled.
    elapsed = systim_get();
 8009572:	f000 f9b3 	bl	80098dc <systim_get>
 8009576:	b284      	uxth	r4, r0
 8009578:	0400      	lsls	r0, r0, #16
 800957a:	0c07      	lsrs	r7, r0, #16
    time_add(elapsed); 
 800957c:	0038      	movs	r0, r7
 800957e:	f000 f8db 	bl	8009738 <time_add>
    systim_flush();
 8009582:	f000 f9b9 	bl	80098f8 <systim_flush>
    ///      nearest task (nextevent), which loads into timer on exit </LI>
    /// <LI> If a pending task is selected, loop through higher priority
    ///      tasks than the one selected to find if they need to block the
    ///      invocation of the pending task. </LI>
#   if (OT_FEATURE(M2))
    dll_clock(elapsed);
 8009586:	0020      	movs	r0, r4
 8009588:	f7fd fa92 	bl	8006ab0 <dll_clock>

    nextevent   = OT_GPTIM_LIMIT;
    task_i      = &sys.task[TASK_terminus];
    select      = TASK_MAX; //TASK_terminus;
#   if (OT_FEATURE(SYSTASK_CALLBACKS) != ENABLED)
    i           = TASK_terminus;
 800958c:	2107      	movs	r1, #7
    select      = TASK_MAX; //TASK_terminus;
 800958e:	2500      	movs	r5, #0
    task_i      = &sys.task[TASK_terminus];
 8009590:	4b1c      	ldr	r3, [pc, #112]	; (8009604 <sys_event_manager+0x94>)
    nextevent   = OT_GPTIM_LIMIT;
 8009592:	4c1d      	ldr	r4, [pc, #116]	; (8009608 <sys_event_manager+0x98>)
#   endif

    // Select the highest priority task that is active and pending
    // Note that nextevent is always clocked, allowing task blocking without
    // losing synchronization.
    while (task_i != &sys.task[0]) {
 8009594:	e001      	b.n	800959a <sys_event_manager+0x2a>
            if (task_i->nextevent <= nextevent) {
#               if (OT_PARAM_SYSTHREADS != 0)
                nextnext  = nextevent;
#               endif
                nextevent = task_i->nextevent;
                select    = TASK_SELECT(task_i, i);
 8009596:	000d      	movs	r5, r1
                nextevent = task_i->nextevent;
 8009598:	0014      	movs	r4, r2
    while (task_i != &sys.task[0]) {
 800959a:	4a1c      	ldr	r2, [pc, #112]	; (800960c <sys_event_manager+0x9c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d011      	beq.n	80095c4 <sys_event_manager+0x54>
        TASK_DECREMENT(task_i, i);
 80095a0:	3b08      	subs	r3, #8
 80095a2:	3901      	subs	r1, #1
 80095a4:	b249      	sxtb	r1, r1
        task_i->nextevent -= elapsed;
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	1bd2      	subs	r2, r2, r7
 80095aa:	605a      	str	r2, [r3, #4]
        if (task_i->event != 0) {
 80095ac:	781e      	ldrb	r6, [r3, #0]
 80095ae:	2e00      	cmp	r6, #0
 80095b0:	d0f3      	beq.n	800959a <sys_event_manager+0x2a>
            if (task_i->nextevent <= nextevent) {
 80095b2:	42a2      	cmp	r2, r4
 80095b4:	ddef      	ble.n	8009596 <sys_event_manager+0x26>
            }
            // Sometime nextevent can be negative, due to a long-waiting task.
            // higher priority tasks will always take precedent.
            else if (task_i->nextevent <= 0) {
 80095b6:	2a00      	cmp	r2, #0
 80095b8:	dcef      	bgt.n	800959a <sys_event_manager+0x2a>
                select = TASK_SELECT(task_i, i);
 80095ba:	000d      	movs	r5, r1
 80095bc:	e7ed      	b.n	800959a <sys_event_manager+0x2a>
                nextevent   = task_i->nextevent;
                select      = TASK_SELECT(task_i, i);
                break;
            }
        }
        TASK_INCREMENT(task_i, i);
 80095be:	3308      	adds	r3, #8
 80095c0:	3101      	adds	r1, #1
 80095c2:	b249      	sxtb	r1, r1
    while (task_i < TASK(select)) {
 80095c4:	0028      	movs	r0, r5
 80095c6:	00ea      	lsls	r2, r5, #3
 80095c8:	4e11      	ldr	r6, [pc, #68]	; (8009610 <sys_event_manager+0xa0>)
 80095ca:	1992      	adds	r2, r2, r6
 80095cc:	3204      	adds	r2, #4
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d90e      	bls.n	80095f0 <sys_event_manager+0x80>
        if (task_i->event != 0) {
 80095d2:	781a      	ldrb	r2, [r3, #0]
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	d0f2      	beq.n	80095be <sys_event_manager+0x4e>
            if ((task_i->latency < TASK(select)->reserve) || \
 80095d8:	78de      	ldrb	r6, [r3, #3]
 80095da:	00c0      	lsls	r0, r0, #3
 80095dc:	4a0c      	ldr	r2, [pc, #48]	; (8009610 <sys_event_manager+0xa0>)
 80095de:	1810      	adds	r0, r2, r0
 80095e0:	7982      	ldrb	r2, [r0, #6]
 80095e2:	4296      	cmp	r6, r2
 80095e4:	d302      	bcc.n	80095ec <sys_event_manager+0x7c>
 80095e6:	6858      	ldr	r0, [r3, #4]
 80095e8:	4290      	cmp	r0, r2
 80095ea:	dae8      	bge.n	80095be <sys_event_manager+0x4e>
                nextevent   = task_i->nextevent;
 80095ec:	685c      	ldr	r4, [r3, #4]
                select      = TASK_SELECT(task_i, i);
 80095ee:	000d      	movs	r5, r1
    }

    /// 3. Set the active task callback to the selected
    sys.active = select;
 80095f0:	4b07      	ldr	r3, [pc, #28]	; (8009610 <sys_event_manager+0xa0>)
 80095f2:	701d      	strb	r5, [r3, #0]

    /// 4. The event manager is done here.  systim_schedule() will
    ///    make sure that the task hasn't been pended during the scheduler
    ///    runtime.
    return systim_schedule(nextevent, systim_get());
 80095f4:	f000 f972 	bl	80098dc <systim_get>
 80095f8:	0001      	movs	r1, r0
 80095fa:	0020      	movs	r0, r4
 80095fc:	f000 f984 	bl	8009908 <systim_schedule>
//
//        }
//        platform_set_ktim(interval);
//        return retval;
//    }
}
 8009600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009602:	46c0      	nop			; (mov r8, r8)
 8009604:	20002e58 	.word	0x20002e58
 8009608:	00001efc 	.word	0x00001efc
 800960c:	20002e20 	.word	0x20002e20
 8009610:	20002e1c 	.word	0x20002e1c

08009614 <sys_run_task>:
#endif



#ifndef EXTF_sys_run_task
OT_INLINE void sys_run_task() {
 8009614:	b510      	push	{r4, lr}
    }
#   endif

    ///@todo integrate any necessary systim suppression into the
    ///      task clocker feature
    systim_disable();
 8009616:	f000 f96d 	bl	80098f4 <systim_disable>
    systim_start_clocker();
 800961a:	f000 f9e7 	bl	80099ec <systim_start_clocker>
    
    sys_run_task_CALL:
    if (TASK(sys.active)->event != 0) {
 800961e:	4b08      	ldr	r3, [pc, #32]	; (8009640 <sys_run_task+0x2c>)
 8009620:	2000      	movs	r0, #0
 8009622:	5618      	ldrsb	r0, [r3, r0]
 8009624:	00c2      	lsls	r2, r0, #3
 8009626:	189b      	adds	r3, r3, r2
 8009628:	791b      	ldrb	r3, [r3, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d007      	beq.n	800963e <sys_run_task+0x2a>
        TASK_CALL(sys.active);
 800962e:	0082      	lsls	r2, r0, #2
 8009630:	4b04      	ldr	r3, [pc, #16]	; (8009644 <sys_run_task+0x30>)
 8009632:	58d3      	ldr	r3, [r2, r3]
 8009634:	00c0      	lsls	r0, r0, #3
 8009636:	4a02      	ldr	r2, [pc, #8]	; (8009640 <sys_run_task+0x2c>)
 8009638:	1880      	adds	r0, r0, r2
 800963a:	3004      	adds	r0, #4
 800963c:	4798      	blx	r3
    }
}
 800963e:	bd10      	pop	{r4, pc}
 8009640:	20002e1c 	.word	0x20002e1c
 8009644:	0800c7a8 	.word	0x0800c7a8

08009648 <sys_preempt>:





OT_WEAK void sys_preempt(ot_task task, ot_uint nextevent_ti) {
 8009648:	b510      	push	{r4, lr}
/// Pre-empting will "pend" the timer.  In device terms, this is implemented
/// by manually setting the timer interrupt flag.  If a task is running while
/// this function is called (typical usage), first the task will finish and then
/// the scheduler will run anyway.
    sys_task_setnext(task, (ot_u32)nextevent_ti);
 800964a:	f7ff ff8d 	bl	8009568 <sys_task_setnext>
    platform_ot_preempt();
 800964e:	f000 fcdb 	bl	800a008 <platform_ot_preempt>
}
 8009652:	bd10      	pop	{r4, pc}

08009654 <time_load_now>:
/** Driver functions
  * The following functions are sometimes implemented in the platform driver.
  * They do the low-level work for the system time module.
  */
#ifndef EXTF_time_load_now
OT_WEAK void time_load_now(ot_time* now) {
 8009654:	b510      	push	{r4, lr}
 8009656:	0004      	movs	r4, r0
    ot_u32 clocks;
    ot_u32 scratch;
    *now        = time_sys;
 8009658:	4b08      	ldr	r3, [pc, #32]	; (800967c <time_load_now+0x28>)
 800965a:	0002      	movs	r2, r0
 800965c:	cb03      	ldmia	r3!, {r0, r1}
 800965e:	c203      	stmia	r2!, {r0, r1}
    clocks      = systim_get();
 8009660:	f000 f93c 	bl	80098dc <systim_get>
    scratch     = clocks + now->clocks;
 8009664:	6863      	ldr	r3, [r4, #4]
 8009666:	181b      	adds	r3, r3, r0
    now->upper += (scratch < clocks);       ///@note changed this
 8009668:	4283      	cmp	r3, r0
 800966a:	4180      	sbcs	r0, r0
 800966c:	4240      	negs	r0, r0
 800966e:	6822      	ldr	r2, [r4, #0]
 8009670:	4694      	mov	ip, r2
 8009672:	4460      	add	r0, ip
 8009674:	6020      	str	r0, [r4, #0]
    now->clocks = scratch;
 8009676:	6063      	str	r3, [r4, #4]
}
 8009678:	bd10      	pop	{r4, pc}
 800967a:	46c0      	nop			; (mov r8, r8)
 800967c:	20002e58 	.word	0x20002e58

08009680 <time_set>:
}
#endif


#ifndef EXTF_time_set
OT_WEAK void time_set(ot_time set_time) {
 8009680:	b530      	push	{r4, r5, lr}
 8009682:	b085      	sub	sp, #20
 8009684:	466c      	mov	r4, sp
 8009686:	9000      	str	r0, [sp, #0]
 8009688:	6061      	str	r1, [r4, #4]
    ot_time delta;
    time_load_now(&delta);
 800968a:	a802      	add	r0, sp, #8
 800968c:	f7ff ffe2 	bl	8009654 <time_load_now>
    
    /// 1. Set time_sys to new value.
    time_sys = set_time;
 8009690:	4b0e      	ldr	r3, [pc, #56]	; (80096cc <time_set+0x4c>)
 8009692:	001a      	movs	r2, r3
 8009694:	0021      	movs	r1, r4
 8009696:	c921      	ldmia	r1!, {r0, r5}
 8009698:	c221      	stmia	r2!, {r0, r5}
    
    /// 2. determine delta between previous time and new time
    delta.upper     = (time_sys.upper - delta.upper) + (time_sys.clocks < delta.clocks);
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	9a02      	ldr	r2, [sp, #8]
 800969e:	1a9b      	subs	r3, r3, r2
 80096a0:	6862      	ldr	r2, [r4, #4]
 80096a2:	9803      	ldr	r0, [sp, #12]
 80096a4:	4282      	cmp	r2, r0
 80096a6:	4189      	sbcs	r1, r1
 80096a8:	4249      	negs	r1, r1
 80096aa:	1859      	adds	r1, r3, r1
    delta.clocks    = (time_sys.clocks - delta.clocks);
 80096ac:	1a12      	subs	r2, r2, r0
    
    /// 3. Apply Delta to time_start
    ///    This is necessary to maintain relative uptime figure
    time_start.clocks   += delta.clocks;
 80096ae:	4808      	ldr	r0, [pc, #32]	; (80096d0 <time_set+0x50>)
 80096b0:	6843      	ldr	r3, [r0, #4]
 80096b2:	18d3      	adds	r3, r2, r3
 80096b4:	6043      	str	r3, [r0, #4]
    time_start.upper    += delta.upper + (time_start.clocks < delta.clocks);
 80096b6:	4293      	cmp	r3, r2
 80096b8:	419b      	sbcs	r3, r3
 80096ba:	425b      	negs	r3, r3
 80096bc:	18cb      	adds	r3, r1, r3
 80096be:	6802      	ldr	r2, [r0, #0]
 80096c0:	4694      	mov	ip, r2
 80096c2:	4463      	add	r3, ip
 80096c4:	6003      	str	r3, [r0, #0]
}
 80096c6:	b005      	add	sp, #20
 80096c8:	bd30      	pop	{r4, r5, pc}
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	20002e58 	.word	0x20002e58
 80096d0:	20002e60 	.word	0x20002e60

080096d4 <time_set_utcprecise>:
#endif



#ifndef EXTF_time_set_utcprecise
OT_WEAK void time_set_utcprecise(ot_u32 utc, ot_u32 subseconds) {
 80096d4:	b500      	push	{lr}
 80096d6:	b083      	sub	sp, #12
 80096d8:	0003      	movs	r3, r0
	ot_time set_time;
    set_time.upper   = (utc >> _UPPER_SHIFT);
 80096da:	0d80      	lsrs	r0, r0, #22
    set_time.clocks  = (utc << _LOWER_SHIFT);
 80096dc:	029b      	lsls	r3, r3, #10
    set_time.clocks |= subseconds;
 80096de:	4319      	orrs	r1, r3
    
    time_set(set_time);
 80096e0:	f7ff ffce 	bl	8009680 <time_set>
}
 80096e4:	b003      	add	sp, #12
 80096e6:	bd00      	pop	{pc}

080096e8 <time_set_utc>:
#endif


#ifndef EXTF_time_set_utc
OT_WEAK void time_set_utc(ot_u32 utc) {
 80096e8:	b510      	push	{r4, lr}
    time_set_utcprecise(utc, 0);
 80096ea:	2100      	movs	r1, #0
 80096ec:	f7ff fff2 	bl	80096d4 <time_set_utcprecise>
}
 80096f0:	bd10      	pop	{r4, pc}

080096f2 <time_get_utc>:
    *get_time = time_sys;
}
#endif

#ifndef EXTF_time_get_utc
OT_WEAK ot_u32 time_get_utc(void) {
 80096f2:	b500      	push	{lr}
 80096f4:	b083      	sub	sp, #12
    ot_time now;
    time_load_now(&now);
 80096f6:	4668      	mov	r0, sp
 80096f8:	f7ff ffac 	bl	8009654 <time_load_now>
    now.upper  <<= _UPPER_SHIFT;
 80096fc:	9b00      	ldr	r3, [sp, #0]
 80096fe:	0598      	lsls	r0, r3, #22
    now.clocks >>= _LOWER_SHIFT;
 8009700:	9b01      	ldr	r3, [sp, #4]
 8009702:	0a9b      	lsrs	r3, r3, #10
    return (now.upper | now.clocks);
 8009704:	4318      	orrs	r0, r3
}
 8009706:	b003      	add	sp, #12
 8009708:	bd00      	pop	{pc}
	...

0800970c <time_uptime_secs>:
#endif


#ifndef EXTF_time_uptime_secs
OT_WEAK ot_u32 time_uptime_secs(void) {
 800970c:	b500      	push	{lr}
 800970e:	b083      	sub	sp, #12
    ot_time now;
    ot_u32  startsecs, nowsecs;
    time_load_now(&now);
 8009710:	4668      	mov	r0, sp
 8009712:	f7ff ff9f 	bl	8009654 <time_load_now>
    
    startsecs   = (time_start.upper << _UPPER_SHIFT) + (time_start.clocks >> _LOWER_SHIFT);
 8009716:	4b07      	ldr	r3, [pc, #28]	; (8009734 <time_uptime_secs+0x28>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	0590      	lsls	r0, r2, #22
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	0a9b      	lsrs	r3, r3, #10
 8009720:	18c3      	adds	r3, r0, r3
    nowsecs     = (now.upper << _UPPER_SHIFT) + (now.clocks >> _LOWER_SHIFT);
 8009722:	9a00      	ldr	r2, [sp, #0]
 8009724:	0590      	lsls	r0, r2, #22
 8009726:	9a01      	ldr	r2, [sp, #4]
 8009728:	0a92      	lsrs	r2, r2, #10
 800972a:	1880      	adds	r0, r0, r2

    return (nowsecs - startsecs);
 800972c:	1ac0      	subs	r0, r0, r3
}
 800972e:	b003      	add	sp, #12
 8009730:	bd00      	pop	{pc}
 8009732:	46c0      	nop			; (mov r8, r8)
 8009734:	20002e60 	.word	0x20002e60

08009738 <time_add>:


#ifndef EXTF_time_add
OT_WEAK void time_add(ot_u32 clocks) {
    ot_u32 scratch;
    scratch         = clocks + time_sys.clocks;
 8009738:	4b05      	ldr	r3, [pc, #20]	; (8009750 <time_add+0x18>)
 800973a:	685a      	ldr	r2, [r3, #4]
 800973c:	1812      	adds	r2, r2, r0
    time_sys.upper  += (scratch < clocks);
 800973e:	4282      	cmp	r2, r0
 8009740:	4180      	sbcs	r0, r0
 8009742:	4240      	negs	r0, r0
 8009744:	6819      	ldr	r1, [r3, #0]
 8009746:	468c      	mov	ip, r1
 8009748:	4460      	add	r0, ip
 800974a:	6018      	str	r0, [r3, #0]
    time_sys.clocks  = scratch;
 800974c:	605a      	str	r2, [r3, #4]
}
 800974e:	4770      	bx	lr
 8009750:	20002e58 	.word	0x20002e58

08009754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009754:	480b      	ldr	r0, [pc, #44]	; (8009784 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009756:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8009758:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800975a:	e003      	b.n	8009764 <LoopCopyDataInit>

0800975c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800975c:	4b0a      	ldr	r3, [pc, #40]	; (8009788 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800975e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009760:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009762:	3104      	adds	r1, #4

08009764 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8009764:	4809      	ldr	r0, [pc, #36]	; (800978c <LoopForever+0xa>)
  ldr  r3, =_edata
 8009766:	4b0a      	ldr	r3, [pc, #40]	; (8009790 <LoopForever+0xe>)
  adds  r2, r0, r1
 8009768:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800976a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800976c:	d3f6      	bcc.n	800975c <CopyDataInit>
  ldr  r2, =_sbss
 800976e:	4a09      	ldr	r2, [pc, #36]	; (8009794 <LoopForever+0x12>)
  b  LoopFillZerobss
 8009770:	e002      	b.n	8009778 <LoopFillZerobss>

08009772 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8009772:	2300      	movs	r3, #0
  str  r3, [r2]
 8009774:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009776:	3204      	adds	r2, #4

08009778 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8009778:	4b07      	ldr	r3, [pc, #28]	; (8009798 <LoopForever+0x16>)
  cmp  r2, r3
 800977a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800977c:	d3f9      	bcc.n	8009772 <FillZerobss>
/* Call the clock system intitialization function.
  bl  SystemInit*/
/* Call static constructors 
    bl __libc_init_array*/
/* Call the application's entry point.*/
  bl  main
 800977e:	f7f8 f897 	bl	80018b0 <main>

08009782 <LoopForever>:

LoopForever:
    b LoopForever
 8009782:	e7fe      	b.n	8009782 <LoopForever>
   ldr   r0, =_estack
 8009784:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8009788:	0800c9e8 	.word	0x0800c9e8
  ldr  r0, =_sdata
 800978c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009790:	200001a8 	.word	0x200001a8
  ldr  r2, =_sbss
 8009794:	200001a8 	.word	0x200001a8
  ldr  r3, = _ebss
 8009798:	20003288 	.word	0x20003288

0800979c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800979c:	e7fe      	b.n	800979c <ADC1_COMP_IRQHandler>
	...

080097a0 <NMI_Handler>:
}



/// The NMI is triggerable by software.  It is used to manage runtime errors.
void NMI_Handler(void) {
 80097a0:	b510      	push	{r4, lr}
    ot_int code;

#   ifdef __DEBUG__
    if (platform.error_code == 0)
 80097a2:	4b06      	ldr	r3, [pc, #24]	; (80097bc <NMI_Handler+0x1c>)
 80097a4:	2002      	movs	r0, #2
 80097a6:	5e18      	ldrsh	r0, [r3, r0]
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d100      	bne.n	80097ae <NMI_Handler+0xe>
 80097ac:	e7fe      	b.n	80097ac <NMI_Handler+0xc>
        while(1);
#   endif

    code                = platform.error_code;
    platform.error_code = 0;
 80097ae:	4b03      	ldr	r3, [pc, #12]	; (80097bc <NMI_Handler+0x1c>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	805a      	strh	r2, [r3, #2]
    sys_panic(code);
 80097b4:	b2c0      	uxtb	r0, r0
 80097b6:	f7ff fe81 	bl	80094bc <sys_panic>
}
 80097ba:	bd10      	pop	{r4, pc}
 80097bc:	20002e6c 	.word	0x20002e6c

080097c0 <HardFault_Handler>:


void HardFault_Handler(void) {
 80097c0:	b570      	push	{r4, r5, r6, lr}
	static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
 80097c2:	24a0      	movs	r4, #160	; 0xa0
 80097c4:	05e4      	lsls	r4, r4, #23
 80097c6:	2680      	movs	r6, #128	; 0x80
 80097c8:	00b6      	lsls	r6, r6, #2
 80097ca:	62a6      	str	r6, [r4, #40]	; 0x28
	static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 80097cc:	2580      	movs	r5, #128	; 0x80
 80097ce:	00ed      	lsls	r5, r5, #3
 80097d0:	61a5      	str	r5, [r4, #24]
/// other serious problem (possibly interrupt storm)
#if defined(__DEBUG__) || defined(__PROTO__)
    while (1) {
        BOARD_led1_on();
        BOARD_led2_off();
        delay_ti(100);
 80097d2:	2064      	movs	r0, #100	; 0x64
 80097d4:	f000 fd46 	bl	800a264 <delay_ti>
	static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 80097d8:	61a6      	str	r6, [r4, #24]
	static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 80097da:	62a5      	str	r5, [r4, #40]	; 0x28
        BOARD_led1_off();
        BOARD_led2_on();
        delay_ti(100);
 80097dc:	2064      	movs	r0, #100	; 0x64
 80097de:	f000 fd41 	bl	800a264 <delay_ti>
 80097e2:	e7ee      	b.n	80097c2 <HardFault_Handler+0x2>

080097e4 <__read_lptim_cnt>:
  *        STM320 reference manual recommends reading the CNT in a loop until
  *        two successive reads match.  That is the purpose of this function.
  */
ot_u16 __read_lptim_cnt() {
    ot_u16 a, b;
    b = LPTIM1->CNT;
 80097e4:	4b05      	ldr	r3, [pc, #20]	; (80097fc <__read_lptim_cnt+0x18>)
 80097e6:	69db      	ldr	r3, [r3, #28]
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	e000      	b.n	80097ee <__read_lptim_cnt+0xa>
    do {
        a = b;
        b = LPTIM1->CNT;
 80097ec:	0003      	movs	r3, r0
 80097ee:	4a03      	ldr	r2, [pc, #12]	; (80097fc <__read_lptim_cnt+0x18>)
 80097f0:	69d0      	ldr	r0, [r2, #28]
 80097f2:	b280      	uxth	r0, r0
    } while (b != a);
 80097f4:	4283      	cmp	r3, r0
 80097f6:	d1f9      	bne.n	80097ec <__read_lptim_cnt+0x8>

    return b;
}
 80097f8:	4770      	bx	lr
 80097fa:	46c0      	nop			; (mov r8, r8)
 80097fc:	40007c00 	.word	0x40007c00

08009800 <__write_lptim_cmp>:

void __write_lptim_cmp(ot_u16 new_cmp) {
// Clear the CMPOK bit ahead of setting CMP
// Set the CMP to the new value
// Assure that CMP was successfully written 
    LPTIM1->ICR = LPTIM_ICR_CMPOKCF;
 8009800:	4b04      	ldr	r3, [pc, #16]	; (8009814 <__write_lptim_cmp+0x14>)
 8009802:	2208      	movs	r2, #8
 8009804:	605a      	str	r2, [r3, #4]
    LPTIM1->CMP = new_cmp;
 8009806:	6158      	str	r0, [r3, #20]
    while ((LPTIM1->ISR & LPTIM_ISR_CMPOK) == 0) {
 8009808:	4b02      	ldr	r3, [pc, #8]	; (8009814 <__write_lptim_cmp+0x14>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	071b      	lsls	r3, r3, #28
 800980e:	d5fb      	bpl.n	8009808 <__write_lptim_cmp+0x8>
        //test_cmp++;
    }
}
 8009810:	4770      	bx	lr
 8009812:	46c0      	nop			; (mov r8, r8)
 8009814:	40007c00 	.word	0x40007c00

08009818 <__write_lptim_arr>:


void __write_lptim_arr(ot_u16 new_arr) {
    LPTIM1->ICR = LPTIM_ICR_ARROKCF;
 8009818:	4b04      	ldr	r3, [pc, #16]	; (800982c <__write_lptim_arr+0x14>)
 800981a:	2210      	movs	r2, #16
 800981c:	605a      	str	r2, [r3, #4]
    LPTIM1->ARR = new_arr;
 800981e:	6198      	str	r0, [r3, #24]
    while ((LPTIM1->ISR & LPTIM_ISR_ARROK) == 0);
 8009820:	4b02      	ldr	r3, [pc, #8]	; (800982c <__write_lptim_arr+0x14>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	06db      	lsls	r3, r3, #27
 8009826:	d5fb      	bpl.n	8009820 <__write_lptim_arr+0x8>
}
 8009828:	4770      	bx	lr
 800982a:	46c0      	nop			; (mov r8, r8)
 800982c:	40007c00 	.word	0x40007c00

08009830 <platform_isr_lptim1>:
    
    //volatile ot_u16 test;
    //test = __read_lptim_cnt();
    
    // Clear interrupt flags
    lptim_flags = LPTIM1->ISR;
 8009830:	4905      	ldr	r1, [pc, #20]	; (8009848 <platform_isr_lptim1+0x18>)
 8009832:	680a      	ldr	r2, [r1, #0]
 8009834:	23ff      	movs	r3, #255	; 0xff
 8009836:	4013      	ands	r3, r2
    LPTIM1->ICR = lptim_flags;
 8009838:	604b      	str	r3, [r1, #4]

    // Kernel Timer Compare Interrupt: clear the sleep flag that prevents the
    // scheduler from running
    if (lptim_flags & LPTIM_ISR_CMPM) {
 800983a:	07d3      	lsls	r3, r2, #31
 800983c:	d502      	bpl.n	8009844 <platform_isr_lptim1+0x14>
        systim.flags = 0;
 800983e:	4b03      	ldr	r3, [pc, #12]	; (800984c <platform_isr_lptim1+0x1c>)
 8009840:	2200      	movs	r2, #0
 8009842:	701a      	strb	r2, [r3, #0]
    }
    
    //test = 0;
}
 8009844:	4770      	bx	lr
 8009846:	46c0      	nop			; (mov r8, r8)
 8009848:	40007c00 	.word	0x40007c00
 800984c:	20002e68 	.word	0x20002e68

08009850 <platform_isr_rtcwakeup>:

/// Used for Insertor & Ticker:
/// - The ticker doesn't do a damn thing except wakeup from sleep 
/// - The Insertor manually vectors to radio_mac_isr(), although this should be
///   changed in the future to a dynamic callback.
void platform_isr_rtcwakeup() { 
 8009850:	b510      	push	{r4, lr}
#if (RF_FEATURE(CSMATIMER) != ENABLED)
    //if (systim.opt & SYSTIM_INSERTION_ON) {
        //systim.opt ^= SYSTIM_INSERTION_ON;
        //RTC->ISR    = ~RTC_ISR_WUTF;
        //RTC->CR    &= ~RTC_CR_WUTE;
        radio_mac_isr();
 8009852:	f7f9 f9d7 	bl	8002c04 <radio_mac_isr>
    //}
#endif
#endif
}
 8009856:	bd10      	pop	{r4, pc}

08009858 <systim_init>:




#ifndef EXTF_systim_init
void systim_init(void* tim_init) {
 8009858:	b570      	push	{r4, r5, r6, lr}
    ///    MAC Timer.  We must:
    ///    <LI> Unlock RTC as a whole </LI>
    ///    <LI> put into INIT mode </LI>
    ///    <LI> Use a prescaler to match the clock used.  For LSE, this is 1.
    ///         (set to 0).  For LSI, this is...
    RTC->WPR    = 0xCA;
 800985a:	4b1a      	ldr	r3, [pc, #104]	; (80098c4 <systim_init+0x6c>)
 800985c:	22ca      	movs	r2, #202	; 0xca
 800985e:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR    = 0x53;
 8009860:	3a77      	subs	r2, #119	; 0x77
 8009862:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->CR     = 0;    //(1<<5);
 8009864:	2200      	movs	r2, #0
 8009866:	609a      	str	r2, [r3, #8]
    RTC->ISR    = 0xFFFFFFFF;
 8009868:	3a01      	subs	r2, #1
 800986a:	60da      	str	r2, [r3, #12]
    while ((RTC->ISR & RTC_ISR_INITF) == 0);
 800986c:	4b15      	ldr	r3, [pc, #84]	; (80098c4 <systim_init+0x6c>)
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	065b      	lsls	r3, r3, #25
 8009872:	d5fb      	bpl.n	800986c <systim_init+0x14>
    RTC->TR     = 0;
 8009874:	4b13      	ldr	r3, [pc, #76]	; (80098c4 <systim_init+0x6c>)
 8009876:	2400      	movs	r4, #0
 8009878:	601c      	str	r4, [r3, #0]
        RTC->PRER               = (127 << 16) | lsi_hz >> 7;
    }
#   endif

    // Clear any ISRs
    RTC->ISR = 0;
 800987a:	60dc      	str	r4, [r3, #12]

    /// 2. Set LPTIM1 to use LSE/32 (or LSI/32)
    
    // IER and CFGR must be set with LPTIM disabled
    LPTIM1->CR      = 0;            // disable timer
 800987c:	4d12      	ldr	r5, [pc, #72]	; (80098c8 <systim_init+0x70>)
 800987e:	612c      	str	r4, [r5, #16]
    LPTIM1->IER     = LPTIM_IER_CMPMIE;
 8009880:	2301      	movs	r3, #1
 8009882:	60ab      	str	r3, [r5, #8]
    LPTIM1->CFGR    = ((5-MCU_PRESCALER_SHIFT) << 9);    // generally div32, 16, 8
 8009884:	2280      	movs	r2, #128	; 0x80
 8009886:	00d2      	lsls	r2, r2, #3
 8009888:	60ea      	str	r2, [r5, #12]
    
    // ARR and CMP must be set with LPTIM enabled
    LPTIM1->CR      = LPTIM_CR_ENABLE;
 800988a:	612b      	str	r3, [r5, #16]
    __write_lptim_arr(65535);
 800988c:	4e0f      	ldr	r6, [pc, #60]	; (80098cc <systim_init+0x74>)
 800988e:	0030      	movs	r0, r6
 8009890:	f7ff ffc2 	bl	8009818 <__write_lptim_arr>
    __write_lptim_cmp(65535);
 8009894:	0030      	movs	r0, r6
 8009896:	f7ff ffb3 	bl	8009800 <__write_lptim_cmp>
    LPTIM1->ICR     = 0x7F;         // clear all interrupt flags
 800989a:	237f      	movs	r3, #127	; 0x7f
 800989c:	606b      	str	r3, [r5, #4]
    
    // Start Timer
    LPTIM1->CR      = LPTIM_CR_CNTSTRT | LPTIM_CR_ENABLE;
 800989e:	3b7a      	subs	r3, #122	; 0x7a
 80098a0:	612b      	str	r3, [r5, #16]
    

    /// 3. Clear flags and stamps
    systim.flags    = 0;
 80098a2:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <systim_init+0x78>)
 80098a4:	701c      	strb	r4, [r3, #0]
    systim.stamp1   = 0;
 80098a6:	805c      	strh	r4, [r3, #2]
    
    
    /// 4. Clocker initialization.  OpenTag doesn't really care about Clocker
    ///    so we also need a way to configure if it should be enabled or not.
    RCC->APB1ENR   |= (RCC_APB1ENR_TIM6EN); 
 80098a8:	490a      	ldr	r1, [pc, #40]	; (80098d4 <systim_init+0x7c>)
 80098aa:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80098ac:	2210      	movs	r2, #16
 80098ae:	4313      	orrs	r3, r2
 80098b0:	638b      	str	r3, [r1, #56]	; 0x38
    TIM6->CR1       = 0;
 80098b2:	4b09      	ldr	r3, [pc, #36]	; (80098d8 <systim_init+0x80>)
 80098b4:	601c      	str	r4, [r3, #0]
    TIM6->CR2       = (b001 << 4);
 80098b6:	605a      	str	r2, [r3, #4]
    TIM6->DIER      = 0;
 80098b8:	60dc      	str	r4, [r3, #12]
    TIM6->ARR       = 65535;
 80098ba:	62de      	str	r6, [r3, #44]	; 0x2c
    TIM6->PSC       = ((PLATFORM_HSCLOCK_HZ / BOARD_PARAM_APB1CLKDIV) / 32768);
 80098bc:	32d9      	adds	r2, #217	; 0xd9
 80098be:	32ff      	adds	r2, #255	; 0xff
 80098c0:	629a      	str	r2, [r3, #40]	; 0x28
    //TIM6->EGR   = TIM_EGR_UG;
}
 80098c2:	bd70      	pop	{r4, r5, r6, pc}
 80098c4:	40002800 	.word	0x40002800
 80098c8:	40007c00 	.word	0x40007c00
 80098cc:	0000ffff 	.word	0x0000ffff
 80098d0:	20002e68 	.word	0x20002e68
 80098d4:	40021000 	.word	0x40021000
 80098d8:	40001000 	.word	0x40001000

080098dc <systim_get>:





ot_u32 systim_get() {
 80098dc:	b510      	push	{r4, lr}
    ot_u16 timer_cnt;
    timer_cnt   = __read_lptim_cnt();
 80098de:	f7ff ff81 	bl	80097e4 <__read_lptim_cnt>
    timer_cnt  -= (ot_u16)systim.stamp1;
 80098e2:	4b03      	ldr	r3, [pc, #12]	; (80098f0 <systim_get+0x14>)
 80098e4:	885b      	ldrh	r3, [r3, #2]
 80098e6:	1ac0      	subs	r0, r0, r3
 80098e8:	b280      	uxth	r0, r0
    return (ot_u32)(timer_cnt >> OT_GPTIM_OVERSAMPLE);
 80098ea:	08c0      	lsrs	r0, r0, #3
}
 80098ec:	bd10      	pop	{r4, pc}
 80098ee:	46c0      	nop			; (mov r8, r8)
 80098f0:	20002e68 	.word	0x20002e68

080098f4 <systim_disable>:
}

void systim_disable() {
/// systim_enable and systim_disable are empty on STM32L0
    //LPTIM1->IER = 0;
}
 80098f4:	4770      	bx	lr
	...

080098f8 <systim_flush>:
    systim.stamp1 = __read_lptim_cnt();
    __write_lptim_cmp(systim.stamp1);
    EXTI->SWIER = (1<<29);
}

void systim_flush() {
 80098f8:	b510      	push	{r4, lr}
    //systim_disable();
    systim.stamp1 = __read_lptim_cnt();
 80098fa:	f7ff ff73 	bl	80097e4 <__read_lptim_cnt>
 80098fe:	4b01      	ldr	r3, [pc, #4]	; (8009904 <systim_flush+0xc>)
 8009900:	8058      	strh	r0, [r3, #2]
}
 8009902:	bd10      	pop	{r4, pc}
 8009904:	20002e68 	.word	0x20002e68

08009908 <systim_schedule>:

ot_u16 systim_schedule(ot_u32 nextevent, ot_u32 overhead) {
 8009908:	b570      	push	{r4, r5, r6, lr}
/// This should only be called from the scheduler.

    /// Subtracting the overhead of the scheduler runtime yields the true time
    /// to schedule the nextevent.
    nextevent = (ot_long)nextevent - (ot_long)overhead;
 800990a:	1a44      	subs	r4, r0, r1
    
    /// If the task to be scheduled is already due return 0.
    /// This will ignore the sleep process and go straight to the task.
    if ((ot_long)nextevent <= 0) {
 800990c:	2c00      	cmp	r4, #0
 800990e:	dd0f      	ble.n	8009930 <systim_schedule+0x28>
    
    /// Program the scheduled time into the timer, in ticks.
    /// Oversampling is done at the driver level, versus shifting which is done
    /// at the kernel level.  Oversampling can help timers without synchronized 
    /// updates whereas shifting can improve scheduling precision.
    systim.flags    = GPTIM_FLAG_SLEEP;
 8009910:	4e0a      	ldr	r6, [pc, #40]	; (800993c <systim_schedule+0x34>)
 8009912:	2301      	movs	r3, #1
 8009914:	7033      	strb	r3, [r6, #0]
    LPTIM1->ICR     = 0x7f;     //LPTIM_ICR_CMPMCF;                 // Clear compare match
 8009916:	4d0a      	ldr	r5, [pc, #40]	; (8009940 <systim_schedule+0x38>)
 8009918:	337e      	adds	r3, #126	; 0x7e
 800991a:	606b      	str	r3, [r5, #4]
    systim.stamp1   = __read_lptim_cnt();
 800991c:	f7ff ff62 	bl	80097e4 <__read_lptim_cnt>
 8009920:	0003      	movs	r3, r0
 8009922:	8070      	strh	r0, [r6, #2]
    
    LPTIM1->CMP     = _LPTIM_OVERHEAD_HACK + systim.stamp1 + (ot_u16)(nextevent << OT_GPTIM_OVERSAMPLE);
 8009924:	b2a0      	uxth	r0, r4
 8009926:	00c2      	lsls	r2, r0, #3
 8009928:	b292      	uxth	r2, r2
 800992a:	189b      	adds	r3, r3, r2
 800992c:	616b      	str	r3, [r5, #20]
    //__write_lptim_cmp(_LPTIM_OVERHEAD_HACK + systim.stamp1 + (ot_u16)(nextevent << OT_GPTIM_OVERSAMPLE) );

    return (ot_u16)nextevent;
}
 800992e:	bd70      	pop	{r4, r5, r6, pc}
        systim.flags = 0;
 8009930:	4b02      	ldr	r3, [pc, #8]	; (800993c <systim_schedule+0x34>)
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]
        return 0;
 8009936:	2000      	movs	r0, #0
 8009938:	e7f9      	b.n	800992e <systim_schedule+0x26>
 800993a:	46c0      	nop			; (mov r8, r8)
 800993c:	20002e68 	.word	0x20002e68
 8009940:	40007c00 	.word	0x40007c00

08009944 <sub_disable_wkuptim>:
/// <LI> Wakeup Timer interrupt is always enabled (see systim_init()) </LI>
/// <LI> Make sure Wakeup Timer is off </LI>
/// <LI> Make sure RTC is off (if required, sometimes it is always on) </LI>
    ot_u32 scratch;
    
    scratch = RTC->CR;
 8009944:	4b04      	ldr	r3, [pc, #16]	; (8009958 <sub_disable_wkuptim+0x14>)
 8009946:	689b      	ldr	r3, [r3, #8]
    if (scratch & RTC_CR_WUTE) {
 8009948:	055a      	lsls	r2, r3, #21
 800994a:	d503      	bpl.n	8009954 <sub_disable_wkuptim+0x10>
        RTC->CR = scratch & ~(RTC_CR_WUTE|RTC_CR_WUTIE);
 800994c:	4a03      	ldr	r2, [pc, #12]	; (800995c <sub_disable_wkuptim+0x18>)
 800994e:	4013      	ands	r3, r2
 8009950:	4a01      	ldr	r2, [pc, #4]	; (8009958 <sub_disable_wkuptim+0x14>)
 8009952:	6093      	str	r3, [r2, #8]
    }
}
 8009954:	4770      	bx	lr
 8009956:	46c0      	nop			; (mov r8, r8)
 8009958:	40002800 	.word	0x40002800
 800995c:	ffffbbff 	.word	0xffffbbff

08009960 <sub_set_wkuptim>:
void sub_set_wkuptim(ot_uint period) {
    ot_u32 rtc_cr;
    ot_uint wdog;

    // Ensure Wakeup Timer is off
    rtc_cr  = RTC->CR;
 8009960:	4b0a      	ldr	r3, [pc, #40]	; (800998c <sub_set_wkuptim+0x2c>)
 8009962:	6899      	ldr	r1, [r3, #8]
    RTC->CR = rtc_cr & ~RTC_CR_WUTE;
 8009964:	4a0a      	ldr	r2, [pc, #40]	; (8009990 <sub_set_wkuptim+0x30>)
 8009966:	400a      	ands	r2, r1
 8009968:	609a      	str	r2, [r3, #8]

    // Poll WUTWF until it is set, afterwhich WUTR can be set
    // SW watchdog assumes 10 clocks per loop, to yield ~80us at 32MHz
    wdog = 256; // ~70 us at 32 MHz 
 800996a:	2380      	movs	r3, #128	; 0x80
 800996c:	005b      	lsls	r3, r3, #1
    while ((RTC->ISR & RTC_ISR_WUTWF) == 0) {
 800996e:	4a07      	ldr	r2, [pc, #28]	; (800998c <sub_set_wkuptim+0x2c>)
 8009970:	68d2      	ldr	r2, [r2, #12]
 8009972:	0752      	lsls	r2, r2, #29
 8009974:	d403      	bmi.n	800997e <sub_set_wkuptim+0x1e>
        if (--wdog == 0) {
 8009976:	3b01      	subs	r3, #1
 8009978:	b29b      	uxth	r3, r3
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1f7      	bne.n	800996e <sub_set_wkuptim+0xe>
        }
    }
    
    // Ticks interval to run wakeup.
    //RTC->WUTR = (period << _TICKER_SHIFT);
    RTC->WUTR = period;
 800997e:	4a03      	ldr	r2, [pc, #12]	; (800998c <sub_set_wkuptim+0x2c>)
 8009980:	6150      	str	r0, [r2, #20]

    // Enable Wakeup with interrupt
    // This will do nothing more than wake-up the chip from STOP at the set
    // interval.  The default ISR in platform_isr_STM32L.c is sufficient.
    RTC->CR = rtc_cr | RTC_CR_WUTIE | RTC_CR_WUTE | b001;
 8009982:	4b04      	ldr	r3, [pc, #16]	; (8009994 <sub_set_wkuptim+0x34>)
 8009984:	430b      	orrs	r3, r1
 8009986:	6093      	str	r3, [r2, #8]
}
 8009988:	4770      	bx	lr
 800998a:	46c0      	nop			; (mov r8, r8)
 800998c:	40002800 	.word	0x40002800
 8009990:	fffffbff 	.word	0xfffffbff
 8009994:	00004401 	.word	0x00004401

08009998 <systim_stop_ticker>:

#ifndef EXTF_systim_stop_ticker
void systim_stop_ticker() {
/// Ticker is not used on STM32L0 implementation
    //sub_disable_wkuptim();
}
 8009998:	4770      	bx	lr
	...

0800999c <systim_set_insertion>:
  * @note On STM32L0, the insertor utilizes the ticker, therefore you can only
  * use one or the other safely.  Also, in OpenTag, the Mode 2 MAC timer needs
  * the insertor, so if Mode 2 is being used then you can't really use either
  * except for special cases (e.g. during bootup).
  */
void systim_set_insertion(ot_u16 value) {
 800999c:	b510      	push	{r4, lr}
    if (systim.opt & SYSTIM_INSERTION_ON) {
 800999e:	4b07      	ldr	r3, [pc, #28]	; (80099bc <systim_set_insertion+0x20>)
 80099a0:	785b      	ldrb	r3, [r3, #1]
 80099a2:	07db      	lsls	r3, r3, #31
 80099a4:	d505      	bpl.n	80099b2 <systim_set_insertion+0x16>
        if (value == 0) {
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d104      	bne.n	80099b4 <systim_set_insertion+0x18>
            EXTI->SWIER = (1<<20);
 80099aa:	4b05      	ldr	r3, [pc, #20]	; (80099c0 <systim_set_insertion+0x24>)
 80099ac:	2280      	movs	r2, #128	; 0x80
 80099ae:	0352      	lsls	r2, r2, #13
 80099b0:	611a      	str	r2, [r3, #16]
        }
        else {
            sub_set_wkuptim(value);
        }
    }
}
 80099b2:	bd10      	pop	{r4, pc}
            sub_set_wkuptim(value);
 80099b4:	f7ff ffd4 	bl	8009960 <sub_set_wkuptim>
}
 80099b8:	e7fb      	b.n	80099b2 <systim_set_insertion+0x16>
 80099ba:	46c0      	nop			; (mov r8, r8)
 80099bc:	20002e68 	.word	0x20002e68
 80099c0:	40010400 	.word	0x40010400

080099c4 <systim_enable_insertion>:

OT_INLINE void systim_enable_insertion() {
    systim.opt |= SYSTIM_INSERTION_ON;
 80099c4:	4a02      	ldr	r2, [pc, #8]	; (80099d0 <systim_enable_insertion+0xc>)
 80099c6:	7853      	ldrb	r3, [r2, #1]
 80099c8:	2101      	movs	r1, #1
 80099ca:	430b      	orrs	r3, r1
 80099cc:	7053      	strb	r3, [r2, #1]
    //sub_enable_wkuptim();
}
 80099ce:	4770      	bx	lr
 80099d0:	20002e68 	.word	0x20002e68

080099d4 <systim_disable_insertion>:

OT_INLINE void systim_disable_insertion() {
 80099d4:	b510      	push	{r4, lr}
    systim.opt &= ~SYSTIM_INSERTION_ON;
 80099d6:	4a04      	ldr	r2, [pc, #16]	; (80099e8 <systim_disable_insertion+0x14>)
 80099d8:	7853      	ldrb	r3, [r2, #1]
 80099da:	2101      	movs	r1, #1
 80099dc:	438b      	bics	r3, r1
 80099de:	7053      	strb	r3, [r2, #1]
    sub_disable_wkuptim();
 80099e0:	f7ff ffb0 	bl	8009944 <sub_disable_wkuptim>
}
 80099e4:	bd10      	pop	{r4, pc}
 80099e6:	46c0      	nop			; (mov r8, r8)
 80099e8:	20002e68 	.word	0x20002e68

080099ec <systim_start_clocker>:

///@todo clocker implementation.  OpenTag doesn't really care about clocker, so
/// we also need a way to configure if it should be enabled or not.

void systim_start_clocker() {
    TIM6->CR1 = TIM_CR1_CEN;
 80099ec:	4b02      	ldr	r3, [pc, #8]	; (80099f8 <systim_start_clocker+0xc>)
 80099ee:	2201      	movs	r2, #1
 80099f0:	601a      	str	r2, [r3, #0]
    TIM6->EGR = TIM_EGR_UG;
 80099f2:	615a      	str	r2, [r3, #20]
}
 80099f4:	4770      	bx	lr
 80099f6:	46c0      	nop			; (mov r8, r8)
 80099f8:	40001000 	.word	0x40001000

080099fc <systim_stop_clocker>:
ot_u16 systim_get_clocker() {
    return TIM6->CNT;
}

void systim_stop_clocker() {
    TIM6->CR1 = 0;
 80099fc:	4b01      	ldr	r3, [pc, #4]	; (8009a04 <systim_stop_clocker+0x8>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	601a      	str	r2, [r3, #0]
}
 8009a02:	4770      	bx	lr
 8009a04:	40001000 	.word	0x40001000

08009a08 <systim_chronstamp>:
  * and it needs the timer to run through STOP mode.  So, LPTIM is the perfect
  * choice.  Since LPTIM is already set-up as a free-running counter as the
  * kernel timer, all we need to do in this implementation is to read it.
  */

ot_u32 systim_chronstamp(ot_u32* timestamp) {
 8009a08:	b510      	push	{r4, lr}
 8009a0a:	0004      	movs	r4, r0
    ot_u16 timer_cnt = __read_lptim_cnt();
 8009a0c:	f7ff feea 	bl	80097e4 <__read_lptim_cnt>
    timer_cnt >>= OT_GPTIM_OVERSAMPLE;
 8009a10:	08c0      	lsrs	r0, r0, #3
 8009a12:	b280      	uxth	r0, r0
    
    if (timestamp != NULL) {
 8009a14:	2c00      	cmp	r4, #0
 8009a16:	d002      	beq.n	8009a1e <systim_chronstamp+0x16>
        timer_cnt -= (ot_u16)*timestamp;
 8009a18:	8823      	ldrh	r3, [r4, #0]
 8009a1a:	1ac0      	subs	r0, r0, r3
 8009a1c:	b280      	uxth	r0, r0
    }
    return (ot_u32)timer_cnt;
}
 8009a1e:	bd10      	pop	{r4, pc}

08009a20 <RTC_IRQHandler>:
#define _RTCALARM   (defined(__ISR_RTC_Alarm) && !defined(__N_ISR_RTC_Alarm))
#define _RTCWKUP    (defined(__ISR_RTC_WKUP) && !defined(__N_ISR_RTC_WKUP)) 
#define _TAMPER     (defined(__ISR_TAMPER_STAMP) && !defined(__N_ISR_TAMPER_STAMP))
#define _CSSLSE     (defined(__ISR_CSSLSE) && !defined(__N_ISR_CSSLSE))
#if (_RTCALARM || _RTCWKUP || _TAMPER || CSSLSE)
void RTC_IRQHandler(void) {
 8009a20:	b510      	push	{r4, lr}
    ot_u32 exti_pr;
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    exti_pr     = EXTI->PR;
 8009a22:	4b08      	ldr	r3, [pc, #32]	; (8009a44 <RTC_IRQHandler+0x24>)
 8009a24:	6959      	ldr	r1, [r3, #20]
    EXTI->PR    = (1<<17) | (1<<19) | (1<<20);
 8009a26:	22d0      	movs	r2, #208	; 0xd0
 8009a28:	0352      	lsls	r2, r2, #13
 8009a2a:	615a      	str	r2, [r3, #20]
    RTC->ISR   &= ~(RTC_ISR_RSF | RTC_ISR_WUTF);
 8009a2c:	4a06      	ldr	r2, [pc, #24]	; (8009a48 <RTC_IRQHandler+0x28>)
 8009a2e:	68d3      	ldr	r3, [r2, #12]
 8009a30:	4806      	ldr	r0, [pc, #24]	; (8009a4c <RTC_IRQHandler+0x2c>)
 8009a32:	4003      	ands	r3, r0
 8009a34:	60d3      	str	r3, [r2, #12]
    if (RCC->CIER & RCC->CIFR & RCC_CIFR_CSSLSEF) {
        platform_isr_csslse();
    }
#   endif
#   if (_RTCWKUP)
    if (exti_pr & (1<<20)) 
 8009a36:	02cb      	lsls	r3, r1, #11
 8009a38:	d400      	bmi.n	8009a3c <RTC_IRQHandler+0x1c>
        // platform_isr_tamperstamp must clear its own flags in RTC->ISR
        platform_isr_tamperstamp();
#   endif

    __ISR_EXIT_HOOK();
}
 8009a3a:	bd10      	pop	{r4, pc}
        platform_isr_rtcwakeup();
 8009a3c:	f7ff ff08 	bl	8009850 <platform_isr_rtcwakeup>
}
 8009a40:	e7fb      	b.n	8009a3a <RTC_IRQHandler+0x1a>
 8009a42:	46c0      	nop			; (mov r8, r8)
 8009a44:	40010400 	.word	0x40010400
 8009a48:	40002800 	.word	0x40002800
 8009a4c:	fffffbdf 	.word	0xfffffbdf

08009a50 <EXTI0_1_IRQHandler>:



#if (  ((defined(__ISR_EXTI0) || defined(__USE_EXTI0)) && !defined(__N_ISR_EXTI0)) \
    || ((defined(__ISR_EXTI1) || defined(__USE_EXTI1)) && !defined(__N_ISR_EXTI1)) )
void EXTI0_1_IRQHandler(void) {
 8009a50:	b510      	push	{r4, lr}
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    
#   if ((defined(__ISR_EXTI0) || defined(__USE_EXTI0)) && !defined(__N_ISR_EXTI0))
    __EXTI_MACRO(0);
 8009a52:	4b09      	ldr	r3, [pc, #36]	; (8009a78 <EXTI0_1_IRQHandler+0x28>)
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	07db      	lsls	r3, r3, #31
 8009a58:	d502      	bpl.n	8009a60 <EXTI0_1_IRQHandler+0x10>
 8009a5a:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <EXTI0_1_IRQHandler+0x28>)
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI1) || defined(__USE_EXTI1)) && !defined(__N_ISR_EXTI1))
    __EXTI_MACRO(1);
 8009a60:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <EXTI0_1_IRQHandler+0x28>)
 8009a62:	695b      	ldr	r3, [r3, #20]
 8009a64:	079b      	lsls	r3, r3, #30
 8009a66:	d400      	bmi.n	8009a6a <EXTI0_1_IRQHandler+0x1a>
#   endif
    { } //to terminate "else"

    __ISR_EXIT_HOOK();
}
 8009a68:	bd10      	pop	{r4, pc}
    __EXTI_MACRO(1);
 8009a6a:	4b03      	ldr	r3, [pc, #12]	; (8009a78 <EXTI0_1_IRQHandler+0x28>)
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	615a      	str	r2, [r3, #20]
 8009a70:	f7f8 fb64 	bl	800213c <sx127x_irq3_isr>
}
 8009a74:	e7f8      	b.n	8009a68 <EXTI0_1_IRQHandler+0x18>
 8009a76:	46c0      	nop			; (mov r8, r8)
 8009a78:	40010400 	.word	0x40010400

08009a7c <EXTI2_3_IRQHandler>:
void EXTI2_3_IRQHandler(void) {
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    
#   if ((defined(__ISR_EXTI2) || defined(__USE_EXTI2)) && !defined(__N_ISR_EXTI2))
    __EXTI_MACRO(2);
 8009a7c:	4b07      	ldr	r3, [pc, #28]	; (8009a9c <EXTI2_3_IRQHandler+0x20>)
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	075b      	lsls	r3, r3, #29
 8009a82:	d502      	bpl.n	8009a8a <EXTI2_3_IRQHandler+0xe>
 8009a84:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <EXTI2_3_IRQHandler+0x20>)
 8009a86:	2204      	movs	r2, #4
 8009a88:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI3) || defined(__USE_EXTI3)) && !defined(__N_ISR_EXTI3))
    __EXTI_MACRO(3);
 8009a8a:	4b04      	ldr	r3, [pc, #16]	; (8009a9c <EXTI2_3_IRQHandler+0x20>)
 8009a8c:	695b      	ldr	r3, [r3, #20]
 8009a8e:	071b      	lsls	r3, r3, #28
 8009a90:	d502      	bpl.n	8009a98 <EXTI2_3_IRQHandler+0x1c>
 8009a92:	4b02      	ldr	r3, [pc, #8]	; (8009a9c <EXTI2_3_IRQHandler+0x20>)
 8009a94:	2208      	movs	r2, #8
 8009a96:	615a      	str	r2, [r3, #20]
#   endif
    { } //to terminate "else"

    __ISR_EXIT_HOOK();
}
 8009a98:	4770      	bx	lr
 8009a9a:	46c0      	nop			; (mov r8, r8)
 8009a9c:	40010400 	.word	0x40010400

08009aa0 <EXTI4_15_IRQHandler>:
    || ((defined(__ISR_EXTI11) || defined(__USE_EXTI11)) && !defined(__N_ISR_EXTI11)) \
    || ((defined(__ISR_EXTI12) || defined(__USE_EXTI12)) && !defined(__N_ISR_EXTI12)) \
    || ((defined(__ISR_EXTI13) || defined(__USE_EXTI13)) && !defined(__N_ISR_EXTI13)) \
    || ((defined(__ISR_EXTI14) || defined(__USE_EXTI14)) && !defined(__N_ISR_EXTI14)) \
    || ((defined(__ISR_EXTI15) || defined(__USE_EXTI15)) && !defined(__N_ISR_EXTI15)) )
void EXTI4_15_IRQHandler(void) {
 8009aa0:	b510      	push	{r4, lr}
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();

#   if ((defined(__ISR_EXTI4) || defined(__USE_EXTI4)) && !defined(__N_ISR_EXTI4))
    __EXTI_MACRO(4);
 8009aa2:	4b31      	ldr	r3, [pc, #196]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	06db      	lsls	r3, r3, #27
 8009aa8:	d502      	bpl.n	8009ab0 <EXTI4_15_IRQHandler+0x10>
 8009aaa:	4b2f      	ldr	r3, [pc, #188]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009aac:	2210      	movs	r2, #16
 8009aae:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI5) || defined(__USE_EXTI5)) && !defined(__N_ISR_EXTI5))
    __EXTI_MACRO(5);
 8009ab0:	4b2d      	ldr	r3, [pc, #180]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	069b      	lsls	r3, r3, #26
 8009ab6:	d502      	bpl.n	8009abe <EXTI4_15_IRQHandler+0x1e>
 8009ab8:	4b2b      	ldr	r3, [pc, #172]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009aba:	2220      	movs	r2, #32
 8009abc:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI6) || defined(__USE_EXTI6)) && !defined(__N_ISR_EXTI6))
    __EXTI_MACRO(6);
 8009abe:	4b2a      	ldr	r3, [pc, #168]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	065b      	lsls	r3, r3, #25
 8009ac4:	d502      	bpl.n	8009acc <EXTI4_15_IRQHandler+0x2c>
 8009ac6:	4b28      	ldr	r3, [pc, #160]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009ac8:	2240      	movs	r2, #64	; 0x40
 8009aca:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI7) || defined(__USE_EXTI7)) && !defined(__N_ISR_EXTI7))
    __EXTI_MACRO(7);
 8009acc:	4b26      	ldr	r3, [pc, #152]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	061b      	lsls	r3, r3, #24
 8009ad2:	d502      	bpl.n	8009ada <EXTI4_15_IRQHandler+0x3a>
 8009ad4:	4b24      	ldr	r3, [pc, #144]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009ad6:	2280      	movs	r2, #128	; 0x80
 8009ad8:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI8) || defined(__USE_EXTI8)) && !defined(__N_ISR_EXTI8))
    __EXTI_MACRO(8);
 8009ada:	4b23      	ldr	r3, [pc, #140]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	05db      	lsls	r3, r3, #23
 8009ae0:	d503      	bpl.n	8009aea <EXTI4_15_IRQHandler+0x4a>
 8009ae2:	4b21      	ldr	r3, [pc, #132]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009ae4:	2280      	movs	r2, #128	; 0x80
 8009ae6:	0052      	lsls	r2, r2, #1
 8009ae8:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI9) || defined(__USE_EXTI9)) && !defined(__N_ISR_EXTI9))
    __EXTI_MACRO(9);
 8009aea:	4b1f      	ldr	r3, [pc, #124]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	059b      	lsls	r3, r3, #22
 8009af0:	d503      	bpl.n	8009afa <EXTI4_15_IRQHandler+0x5a>
 8009af2:	4b1d      	ldr	r3, [pc, #116]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009af4:	2280      	movs	r2, #128	; 0x80
 8009af6:	0092      	lsls	r2, r2, #2
 8009af8:	615a      	str	r2, [r3, #20]
#   endif    
#   if ((defined(__ISR_EXTI10) || defined(__USE_EXTI10)) && !defined(__N_ISR_EXTI10))
    __EXTI_MACRO(10);
 8009afa:	4b1b      	ldr	r3, [pc, #108]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009afc:	695b      	ldr	r3, [r3, #20]
 8009afe:	055b      	lsls	r3, r3, #21
 8009b00:	d503      	bpl.n	8009b0a <EXTI4_15_IRQHandler+0x6a>
 8009b02:	4b19      	ldr	r3, [pc, #100]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009b04:	2280      	movs	r2, #128	; 0x80
 8009b06:	00d2      	lsls	r2, r2, #3
 8009b08:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI11) || defined(__USE_EXTI11)) && !defined(__N_ISR_EXTI11))
    __EXTI_MACRO(11);
 8009b0a:	4b17      	ldr	r3, [pc, #92]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	051b      	lsls	r3, r3, #20
 8009b10:	d41c      	bmi.n	8009b4c <EXTI4_15_IRQHandler+0xac>
#   endif
#   if ((defined(__ISR_EXTI12) || defined(__USE_EXTI12)) && !defined(__N_ISR_EXTI12))
    __EXTI_MACRO(12);
 8009b12:	4b15      	ldr	r3, [pc, #84]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009b14:	695b      	ldr	r3, [r3, #20]
 8009b16:	04db      	lsls	r3, r3, #19
 8009b18:	d41f      	bmi.n	8009b5a <EXTI4_15_IRQHandler+0xba>
#   endif
#   if ((defined(__ISR_EXTI13) || defined(__USE_EXTI13)) && !defined(__N_ISR_EXTI13))
    __EXTI_MACRO(13);
 8009b1a:	4b13      	ldr	r3, [pc, #76]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	049b      	lsls	r3, r3, #18
 8009b20:	d503      	bpl.n	8009b2a <EXTI4_15_IRQHandler+0x8a>
 8009b22:	4b11      	ldr	r3, [pc, #68]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009b24:	2280      	movs	r2, #128	; 0x80
 8009b26:	0192      	lsls	r2, r2, #6
 8009b28:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI14) || defined(__USE_EXTI14)) && !defined(__N_ISR_EXTI14))
    __EXTI_MACRO(14);
 8009b2a:	4b0f      	ldr	r3, [pc, #60]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	045b      	lsls	r3, r3, #17
 8009b30:	d503      	bpl.n	8009b3a <EXTI4_15_IRQHandler+0x9a>
 8009b32:	4b0d      	ldr	r3, [pc, #52]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009b34:	2280      	movs	r2, #128	; 0x80
 8009b36:	01d2      	lsls	r2, r2, #7
 8009b38:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI15) || defined(__USE_EXTI15)) && !defined(__N_ISR_EXTI15))
    __EXTI_MACRO(15);
 8009b3a:	4b0b      	ldr	r3, [pc, #44]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	041b      	lsls	r3, r3, #16
 8009b40:	d503      	bpl.n	8009b4a <EXTI4_15_IRQHandler+0xaa>
 8009b42:	4b09      	ldr	r3, [pc, #36]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009b44:	2280      	movs	r2, #128	; 0x80
 8009b46:	0212      	lsls	r2, r2, #8
 8009b48:	615a      	str	r2, [r3, #20]
#   endif
    { } //to terminate "else"

    __ISR_EXIT_HOOK();
}
 8009b4a:	bd10      	pop	{r4, pc}
    __EXTI_MACRO(11);
 8009b4c:	4b06      	ldr	r3, [pc, #24]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009b4e:	2280      	movs	r2, #128	; 0x80
 8009b50:	0112      	lsls	r2, r2, #4
 8009b52:	615a      	str	r2, [r3, #20]
 8009b54:	f7f8 fae8 	bl	8002128 <sx127x_irq1_isr>
 8009b58:	e7db      	b.n	8009b12 <EXTI4_15_IRQHandler+0x72>
    __EXTI_MACRO(12);
 8009b5a:	4b03      	ldr	r3, [pc, #12]	; (8009b68 <EXTI4_15_IRQHandler+0xc8>)
 8009b5c:	2280      	movs	r2, #128	; 0x80
 8009b5e:	0152      	lsls	r2, r2, #5
 8009b60:	615a      	str	r2, [r3, #20]
 8009b62:	f7f8 fad9 	bl	8002118 <sx127x_irq0_isr>
 8009b66:	e7d8      	b.n	8009b1a <EXTI4_15_IRQHandler+0x7a>
 8009b68:	40010400 	.word	0x40010400

08009b6c <DMA1_Channel4_5_6_7_IRQHandler>:
#define _DMA4   ((defined(__USE_DMA1_CHAN4) || defined(__ISR_DMA1_Channel4)) && !defined(__N_ISR_DMA1_Channel4))
#define _DMA5   ((defined(__USE_DMA1_CHAN5) || defined(__ISR_DMA1_Channel5)) && !defined(__N_ISR_DMA1_Channel5))
#define _DMA6   ((defined(__USE_DMA1_CHAN6) || defined(__ISR_DMA1_Channel6)) && !defined(__N_ISR_DMA1_Channel6))
#define _DMA7   ((defined(__USE_DMA1_CHAN7) || defined(__ISR_DMA1_Channel7)) && !defined(__N_ISR_DMA1_Channel7))
#if (_DMA4 || _DMA5 || _DMA6 || _DMA7)
void DMA1_Channel4_5_6_7_IRQHandler(void) {
 8009b6c:	b510      	push	{r4, lr}
        chan_x = DMA1_Channel5->CCR;
        if ((chan_x & 1) && (chan_x & 0x000E) && (DMA1->ISR & (1<<16)))
            platform_isr_dma1ch5();
#   endif
#   if (_DMA6)
        chan_x = DMA1_Channel6->CCR;
 8009b6e:	4b0e      	ldr	r3, [pc, #56]	; (8009ba8 <DMA1_Channel4_5_6_7_IRQHandler+0x3c>)
 8009b70:	681b      	ldr	r3, [r3, #0]
        if ((chan_x & 1) && (chan_x & 0x000E) && (DMA1->ISR & (1<<20)))
 8009b72:	07da      	lsls	r2, r3, #31
 8009b74:	d506      	bpl.n	8009b84 <DMA1_Channel4_5_6_7_IRQHandler+0x18>
 8009b76:	220e      	movs	r2, #14
 8009b78:	421a      	tst	r2, r3
 8009b7a:	d003      	beq.n	8009b84 <DMA1_Channel4_5_6_7_IRQHandler+0x18>
 8009b7c:	4b0b      	ldr	r3, [pc, #44]	; (8009bac <DMA1_Channel4_5_6_7_IRQHandler+0x40>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	02db      	lsls	r3, r3, #11
 8009b82:	d40b      	bmi.n	8009b9c <DMA1_Channel4_5_6_7_IRQHandler+0x30>
            platform_isr_dma1ch6();
#   endif
#   if (_DMA7)
        chan_x = DMA1_Channel7->CCR;
 8009b84:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <DMA1_Channel4_5_6_7_IRQHandler+0x44>)
 8009b86:	681b      	ldr	r3, [r3, #0]
        if ((chan_x & 1) && (chan_x & 0x000E) && (DMA1->ISR & (1<<24)))
 8009b88:	07da      	lsls	r2, r3, #31
 8009b8a:	d506      	bpl.n	8009b9a <DMA1_Channel4_5_6_7_IRQHandler+0x2e>
 8009b8c:	220e      	movs	r2, #14
 8009b8e:	421a      	tst	r2, r3
 8009b90:	d003      	beq.n	8009b9a <DMA1_Channel4_5_6_7_IRQHandler+0x2e>
 8009b92:	4b06      	ldr	r3, [pc, #24]	; (8009bac <DMA1_Channel4_5_6_7_IRQHandler+0x40>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	01db      	lsls	r3, r3, #7
 8009b98:	d403      	bmi.n	8009ba2 <DMA1_Channel4_5_6_7_IRQHandler+0x36>
            platform_isr_dma1ch7();
#   endif
    __ISR_EXIT_HOOK();
}
 8009b9a:	bd10      	pop	{r4, pc}
            platform_isr_dma1ch6();
 8009b9c:	f7fb fff4 	bl	8005b88 <platform_isr_dma1ch6>
 8009ba0:	e7f0      	b.n	8009b84 <DMA1_Channel4_5_6_7_IRQHandler+0x18>
            platform_isr_dma1ch7();
 8009ba2:	f7fb fff5 	bl	8005b90 <platform_isr_dma1ch7>
}
 8009ba6:	e7f8      	b.n	8009b9a <DMA1_Channel4_5_6_7_IRQHandler+0x2e>
 8009ba8:	4002006c 	.word	0x4002006c
 8009bac:	40020000 	.word	0x40020000
 8009bb0:	40020080 	.word	0x40020080

08009bb4 <LPTIM1_IRQHandler>:



/// Open LPTIM Interrupt
#if defined(__ISR_LPTIM1) && !defined(__N_ISR_LPTIM1)
void LPTIM1_IRQHandler(void) {
 8009bb4:	b510      	push	{r4, lr}
    
    ///@todo Not certain this PR clear is necessary or good
    //EXTI->PR = (1<<29);         
    
    __ISR_KTIM_WAKEUP_HOOK();
    platform_isr_lptim1();
 8009bb6:	f7ff fe3b 	bl	8009830 <platform_isr_lptim1>
    __ISR_EXIT_HOOK();
}
 8009bba:	bd10      	pop	{r4, pc}

08009bbc <USART2_IRQHandler>:
    __ISR_EXIT_HOOK();
}
#endif

#if defined(__ISR_USART2) && !defined(__N_ISR_USART2)
void USART2_IRQHandler(void) {
 8009bbc:	b510      	push	{r4, lr}
    __ISR_ENTRY_HOOK();
    EXTI->PR = (1<<26);
 8009bbe:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <USART2_IRQHandler+0x10>)
 8009bc0:	2280      	movs	r2, #128	; 0x80
 8009bc2:	04d2      	lsls	r2, r2, #19
 8009bc4:	615a      	str	r2, [r3, #20]
    __ISR_WAKEUP_HOOK();
    platform_isr_usart2();
 8009bc6:	f7fb feed 	bl	80059a4 <platform_isr_usart2>
    __ISR_EXIT_HOOK();
}
 8009bca:	bd10      	pop	{r4, pc}
 8009bcc:	40010400 	.word	0x40010400

08009bd0 <sub_osc_startup>:

void sub_osc_startup(ot_u16 counter, ot_u32 osc_mask) {
    ///@todo figure out a way to do this with WFE
    
    // Wait for Oscillator to get ready, counter goes to 0 on failure
    RCC->CR    |= osc_mask;
 8009bd0:	4a08      	ldr	r2, [pc, #32]	; (8009bf4 <sub_osc_startup+0x24>)
 8009bd2:	6813      	ldr	r3, [r2, #0]
 8009bd4:	430b      	orrs	r3, r1
 8009bd6:	6013      	str	r3, [r2, #0]
    osc_mask  <<= (osc_mask & 1);   // hack for STM32L0 HSI
 8009bd8:	2301      	movs	r3, #1
 8009bda:	400b      	ands	r3, r1
 8009bdc:	4099      	lsls	r1, r3
    osc_mask  <<= 1;
 8009bde:	0049      	lsls	r1, r1, #1
    while ( ((RCC->CR & osc_mask) == 0) && (--counter) );
 8009be0:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <sub_osc_startup+0x24>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4219      	tst	r1, r3
 8009be6:	d103      	bne.n	8009bf0 <sub_osc_startup+0x20>
 8009be8:	3801      	subs	r0, #1
 8009bea:	b280      	uxth	r0, r0
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d1f7      	bne.n	8009be0 <sub_osc_startup+0x10>

    /// Test if oscillator failed to startup
    if (counter == 0) {
        ///@todo Death message / Death Blinkly
    }
}
 8009bf0:	4770      	bx	lr
 8009bf2:	46c0      	nop			; (mov r8, r8)
 8009bf4:	40021000 	.word	0x40021000

08009bf8 <sub_osc_setclock>:


void sub_osc_setclock(ot_u32 clock_mask) {
    ///@todo have this fail into hardware fault
    ot_u32 scratch;
    scratch         = RCC->CFGR & ~(3 | RCC_CFGR_STOPWUCK);
 8009bf8:	4907      	ldr	r1, [pc, #28]	; (8009c18 <sub_osc_setclock+0x20>)
 8009bfa:	68cb      	ldr	r3, [r1, #12]
 8009bfc:	4a07      	ldr	r2, [pc, #28]	; (8009c1c <sub_osc_setclock+0x24>)
 8009bfe:	4013      	ands	r3, r2
    scratch        |= clock_mask;
 8009c00:	4303      	orrs	r3, r0
    clock_mask      = (clock_mask & 3) << 2;
 8009c02:	0082      	lsls	r2, r0, #2
 8009c04:	200c      	movs	r0, #12
 8009c06:	4010      	ands	r0, r2
    RCC->CFGR       = scratch;
 8009c08:	60cb      	str	r3, [r1, #12]
    while ( (RCC->CFGR & (3<<2)) != clock_mask);
 8009c0a:	4b03      	ldr	r3, [pc, #12]	; (8009c18 <sub_osc_setclock+0x20>)
 8009c0c:	68da      	ldr	r2, [r3, #12]
 8009c0e:	230c      	movs	r3, #12
 8009c10:	4013      	ands	r3, r2
 8009c12:	4283      	cmp	r3, r0
 8009c14:	d1f9      	bne.n	8009c0a <sub_osc_setclock+0x12>
}
 8009c16:	4770      	bx	lr
 8009c18:	40021000 	.word	0x40021000
 8009c1c:	ffff7ffc 	.word	0xffff7ffc

08009c20 <sub_set_clockhz>:

void sub_set_clockhz(ot_ulong cpu_clock_hz) {
/// In interest of speed and size, you need to setup your clock dividers as
/// constants in the board configuration file.
    ///@todo Additional argument for changing the clock dividers.
    platform_ext.clock_hz[0]    = cpu_clock_hz >> (BOARD_PARAM_AHBCLKDIV-1);    //AHB
 8009c20:	4b02      	ldr	r3, [pc, #8]	; (8009c2c <sub_set_clockhz+0xc>)
 8009c22:	6058      	str	r0, [r3, #4]
    platform_ext.clock_hz[1]    = cpu_clock_hz >> (BOARD_PARAM_APB1CLKDIV-1);    //APB1
 8009c24:	6098      	str	r0, [r3, #8]
    platform_ext.clock_hz[2]    = cpu_clock_hz >> (BOARD_PARAM_APB2CLKDIV-1);    //APB2
 8009c26:	60d8      	str	r0, [r3, #12]
}
 8009c28:	4770      	bx	lr
 8009c2a:	46c0      	nop			; (mov r8, r8)
 8009c2c:	20002e70 	.word	0x20002e70

08009c30 <platform_get_clockhz>:
/** Clock Hz retrieval function
  * ========================================================================<BR>
  */
ot_ulong platform_get_clockhz(ot_uint clock_index) {
#   if defined(__DEBUG__)
    if (clock_index > 2) {
 8009c30:	2802      	cmp	r0, #2
 8009c32:	d900      	bls.n	8009c36 <platform_get_clockhz+0x6>
 8009c34:	e7fe      	b.n	8009c34 <platform_get_clockhz+0x4>
#   elif defined(__API__)
    if (clock_index > 2) {
        return 0;   //result for dumb APIs
    }
#   endif
    return (clock_index > 2) ? 0 : platform_ext.clock_hz[clock_index];
 8009c36:	0080      	lsls	r0, r0, #2
 8009c38:	4b01      	ldr	r3, [pc, #4]	; (8009c40 <platform_get_clockhz+0x10>)
 8009c3a:	1818      	adds	r0, r3, r0
 8009c3c:	6840      	ldr	r0, [r0, #4]
}
 8009c3e:	4770      	bx	lr
 8009c40:	20002e70 	.word	0x20002e70

08009c44 <platform_full_speed>:




#ifndef EXTF_platform_full_speed
void platform_full_speed() {
 8009c44:	b510      	push	{r4, lr}
/// Only go through the process of entering Full Speed if it is not activated
/// already.  Also, in Multispeed systems, we need to make sure there are no
/// active full speed or flank speed requests.

#if BOARD_FEATURE(FULLSPEED)
    if ( _FULLSPEED_OFF() /* && !_FLANKRQ() */ ) {
 8009c46:	4b10      	ldr	r3, [pc, #64]	; (8009c88 <platform_full_speed+0x44>)
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	4b10      	ldr	r3, [pc, #64]	; (8009c8c <platform_full_speed+0x48>)
 8009c4c:	421a      	tst	r2, r3
 8009c4e:	d100      	bne.n	8009c52 <platform_full_speed+0xe>
        RCC->CR    &= ~(RCC_CR_MSION | RCC_CR_PLLON);
        sub_set_clockhz(PLATFORM_HSCLOCK_HZ);
        platform_enable_interrupts();
    }
#endif
}
 8009c50:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8009c52:	b672      	cpsid	i
        sub_osc_startup(_FULLOSC_TIMEOUT, _FULLOSC_ONBIT);
 8009c54:	2096      	movs	r0, #150	; 0x96
 8009c56:	2101      	movs	r1, #1
 8009c58:	0040      	lsls	r0, r0, #1
 8009c5a:	f7ff ffb9 	bl	8009bd0 <sub_osc_startup>
            FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY;
 8009c5e:	4b0c      	ldr	r3, [pc, #48]	; (8009c90 <platform_full_speed+0x4c>)
 8009c60:	2203      	movs	r2, #3
 8009c62:	601a      	str	r2, [r3, #0]
            sub_osc_setclock(_FULLOSC_CLOCKBIT);    ///@todo FIXED TO HSI
 8009c64:	480b      	ldr	r0, [pc, #44]	; (8009c94 <platform_full_speed+0x50>)
 8009c66:	f7ff ffc7 	bl	8009bf8 <sub_osc_setclock>
        RCC->CFGR  |= RCC_CFGR_STOPWUCK;
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <platform_full_speed+0x44>)
 8009c6c:	68d9      	ldr	r1, [r3, #12]
 8009c6e:	2280      	movs	r2, #128	; 0x80
 8009c70:	0212      	lsls	r2, r2, #8
 8009c72:	430a      	orrs	r2, r1
 8009c74:	60da      	str	r2, [r3, #12]
        RCC->CR    &= ~(RCC_CR_MSION | RCC_CR_PLLON);
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	4907      	ldr	r1, [pc, #28]	; (8009c98 <platform_full_speed+0x54>)
 8009c7a:	400a      	ands	r2, r1
 8009c7c:	601a      	str	r2, [r3, #0]
        sub_set_clockhz(PLATFORM_HSCLOCK_HZ);
 8009c7e:	4807      	ldr	r0, [pc, #28]	; (8009c9c <platform_full_speed+0x58>)
 8009c80:	f7ff ffce 	bl	8009c20 <sub_set_clockhz>
  __ASM volatile ("cpsie i" : : : "memory");
 8009c84:	b662      	cpsie	i
}
 8009c86:	e7e3      	b.n	8009c50 <platform_full_speed+0xc>
 8009c88:	40021000 	.word	0x40021000
 8009c8c:	01000100 	.word	0x01000100
 8009c90:	40022000 	.word	0x40022000
 8009c94:	00008001 	.word	0x00008001
 8009c98:	fefffeff 	.word	0xfefffeff
 8009c9c:	00f42400 	.word	0x00f42400

08009ca0 <platform_disable_interrupts>:
  __ASM volatile ("cpsid i" : : : "memory");
 8009ca0:	b672      	cpsid	i
  */

#ifndef EXTF_platform_disable_interrupts
OT_INLINE void platform_disable_interrupts(void) {
    __disable_irq();    // CMSIS intrinsic
}
 8009ca2:	4770      	bx	lr

08009ca4 <platform_enable_interrupts>:
  __ASM volatile ("cpsie i" : : : "memory");
 8009ca4:	b662      	cpsie	i


#ifndef EXTF_platform_enable_interrupts
OT_INLINE void platform_enable_interrupts(void) {
    __enable_irq();     // CMSIS intrinsic
}
 8009ca6:	4770      	bx	lr

08009ca8 <platform_init_OT>:
#endif



#ifndef EXTF_platform_init_OT
void platform_init_OT() {
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	b084      	sub	sp, #16
    /// 1. Initialize Data sources required by basically all OT features
    ///    - Buffers module allocates the data queues, used by all I/O
    ///    - Veelite module allocates and prepares the filesystem
    buffers_init();
 8009cac:	f7fe ff56 	bl	8008b5c <buffers_init>
    vl_init();
 8009cb0:	f7ff fbae 	bl	8009410 <vl_init>

    /// 2. Initialize the System Time.  If the build does not support time,
    ///    then this will do nothing.
    time_set_utc(364489200);
 8009cb4:	4836      	ldr	r0, [pc, #216]	; (8009d90 <platform_init_OT+0xe8>)
 8009cb6:	f7ff fd17 	bl	80096e8 <time_set_utc>

    /// 3. Look for errors, report them, and make sure to clear the error RAM.
    /// @note This is a decent place to put a breakpoint when debugging.
    if (RTC->BKP2R != 0) {
 8009cba:	4b36      	ldr	r3, [pc, #216]	; (8009d94 <platform_init_OT+0xec>)
 8009cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d117      	bne.n	8009cf2 <platform_init_OT+0x4a>
            ot_u16 halfw[6];
        } generated_id;
        ot_u16* hwid;
        ot_int  i;

        generated_id.word[0]    = *((ot_u32*)(0x1FF80050));
 8009cc2:	4b35      	ldr	r3, [pc, #212]	; (8009d98 <platform_init_OT+0xf0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	ac01      	add	r4, sp, #4
 8009cc8:	9301      	str	r3, [sp, #4]
        generated_id.halfw[1]  ^= *((ot_u16*)(0x1FF80064));
 8009cca:	4a34      	ldr	r2, [pc, #208]	; (8009d9c <platform_init_OT+0xf4>)
 8009ccc:	8812      	ldrh	r2, [r2, #0]
 8009cce:	0c1b      	lsrs	r3, r3, #16
 8009cd0:	4053      	eors	r3, r2
 8009cd2:	8063      	strh	r3, [r4, #2]
        generated_id.halfw[2]   = *((ot_u16*)(0x1FF80066));
 8009cd4:	4b32      	ldr	r3, [pc, #200]	; (8009da0 <platform_init_OT+0xf8>)
 8009cd6:	881b      	ldrh	r3, [r3, #0]
 8009cd8:	80a3      	strh	r3, [r4, #4]
        generated_id.word[0]   ^= *((ot_u32*)(0x1FF80054));
 8009cda:	4b32      	ldr	r3, [pc, #200]	; (8009da4 <platform_init_OT+0xfc>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	9a01      	ldr	r2, [sp, #4]
 8009ce0:	4053      	eors	r3, r2
 8009ce2:	9301      	str	r3, [sp, #4]
        
        fpid    = ISF_open_su(ISF_ID(device_features));
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	f7ff fb78 	bl	80093da <ISF_open_su>
 8009cea:	0005      	movs	r5, r0
        hwid    = &generated_id.halfw[0];
        for (i=6; i!=0; i-=2) {
 8009cec:	2106      	movs	r1, #6
        hwid    = &generated_id.halfw[0];
 8009cee:	0023      	movs	r3, r4
        for (i=6; i!=0; i-=2) {
 8009cf0:	e045      	b.n	8009d7e <platform_init_OT+0xd6>
        error.ulong     = RTC->BKP2R;
 8009cf2:	4b28      	ldr	r3, [pc, #160]	; (8009d94 <platform_init_OT+0xec>)
 8009cf4:	6d9c      	ldr	r4, [r3, #88]	; 0x58
        RTC->BKP2R      = 0;
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	659a      	str	r2, [r3, #88]	; 0x58
        fp              = ISF_open_su(ISF_ID(hardware_fault_status));
 8009cfa:	2016      	movs	r0, #22
 8009cfc:	f7ff fb6d 	bl	80093da <ISF_open_su>
 8009d00:	0005      	movs	r5, r0
        resets.ushort   = vl_read(fp, 0);
 8009d02:	2100      	movs	r1, #0
 8009d04:	f7ff fab2 	bl	800926c <vl_read>
 8009d08:	0006      	movs	r6, r0
        faults.ushort   = vl_read(fp, 2);
 8009d0a:	2102      	movs	r1, #2
 8009d0c:	0028      	movs	r0, r5
 8009d0e:	f7ff faad 	bl	800926c <vl_read>
 8009d12:	b2a1      	uxth	r1, r4
        resets.ubyte[0]+= (error.ushort[LOWER] != 0);
 8009d14:	000b      	movs	r3, r1
 8009d16:	1e5a      	subs	r2, r3, #1
 8009d18:	4193      	sbcs	r3, r2
 8009d1a:	199b      	adds	r3, r3, r6
        resets.ubyte[1]+= (error.ushort[UPPER] != 0);
 8009d1c:	0c24      	lsrs	r4, r4, #16
 8009d1e:	0022      	movs	r2, r4
 8009d20:	1e54      	subs	r4, r2, #1
 8009d22:	41a2      	sbcs	r2, r4
 8009d24:	0436      	lsls	r6, r6, #16
 8009d26:	0e36      	lsrs	r6, r6, #24
 8009d28:	1992      	adds	r2, r2, r6
 8009d2a:	b2d2      	uxtb	r2, r2
 8009d2c:	0212      	lsls	r2, r2, #8
 8009d2e:	24ff      	movs	r4, #255	; 0xff
 8009d30:	4023      	ands	r3, r4
 8009d32:	431a      	orrs	r2, r3
 8009d34:	0403      	lsls	r3, r0, #16
 8009d36:	0e1b      	lsrs	r3, r3, #24
        faults.ubyte[1]+= (error.ushort[LOWER] == 11) << 1; //Memory Fault
 8009d38:	290b      	cmp	r1, #11
 8009d3a:	d014      	beq.n	8009d66 <platform_init_OT+0xbe>
 8009d3c:	2400      	movs	r4, #0
 8009d3e:	18e3      	adds	r3, r4, r3
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	021b      	lsls	r3, r3, #8
 8009d44:	24ff      	movs	r4, #255	; 0xff
 8009d46:	4004      	ands	r4, r0
 8009d48:	431c      	orrs	r4, r3
        vl_write(fp, 0, resets.ushort);
 8009d4a:	b292      	uxth	r2, r2
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	0028      	movs	r0, r5
 8009d50:	f7ff fa93 	bl	800927a <vl_write>
        vl_write(fp, 2, faults.ushort);
 8009d54:	b2a2      	uxth	r2, r4
 8009d56:	2102      	movs	r1, #2
 8009d58:	0028      	movs	r0, r5
 8009d5a:	f7ff fa8e 	bl	800927a <vl_write>
        vl_close(fp);
 8009d5e:	0028      	movs	r0, r5
 8009d60:	f7ff fb06 	bl	8009370 <vl_close>
 8009d64:	e7ad      	b.n	8009cc2 <platform_init_OT+0x1a>
        faults.ubyte[1]+= (error.ushort[LOWER] == 11) << 1; //Memory Fault
 8009d66:	3cfd      	subs	r4, #253	; 0xfd
 8009d68:	e7e9      	b.n	8009d3e <platform_init_OT+0x96>
            vl_write(fpid, i, *hwid++);
 8009d6a:	b28c      	uxth	r4, r1
 8009d6c:	1c9e      	adds	r6, r3, #2
 8009d6e:	881a      	ldrh	r2, [r3, #0]
 8009d70:	0021      	movs	r1, r4
 8009d72:	0028      	movs	r0, r5
 8009d74:	f7ff fa81 	bl	800927a <vl_write>
        for (i=6; i!=0; i-=2) {
 8009d78:	3c02      	subs	r4, #2
 8009d7a:	b221      	sxth	r1, r4
            vl_write(fpid, i, *hwid++);
 8009d7c:	0033      	movs	r3, r6
        for (i=6; i!=0; i-=2) {
 8009d7e:	2900      	cmp	r1, #0
 8009d80:	d1f3      	bne.n	8009d6a <platform_init_OT+0xc2>
        }
        vl_close(fpid);
 8009d82:	0028      	movs	r0, r5
 8009d84:	f7ff faf4 	bl	8009370 <vl_close>
#   endif
    
    /// 5. Initialize the System (Kernel & more).  The System initializer must
    ///    initialize all modules that are built onto the kernel.  These include
    ///    the DLL and MPipe.
    sys_init();
 8009d88:	f7ff fb7e 	bl	8009488 <sys_init>
}
 8009d8c:	b004      	add	sp, #16
 8009d8e:	bd70      	pop	{r4, r5, r6, pc}
 8009d90:	15b9a9f0 	.word	0x15b9a9f0
 8009d94:	40002800 	.word	0x40002800
 8009d98:	1ff80050 	.word	0x1ff80050
 8009d9c:	1ff80064 	.word	0x1ff80064
 8009da0:	1ff80066 	.word	0x1ff80066
 8009da4:	1ff80054 	.word	0x1ff80054

08009da8 <platform_init_busclk>:
#endif



#ifndef EXTF_platform_init_busclk
void platform_init_busclk() {
 8009da8:	b510      	push	{r4, lr}

    ///1. RESET System Clocks
    ///@todo This may not be necessary.  These settings should be reset default settings.

    // Assure MSI bit is on (it should be, by default)
    RCC->CR    |= (uint32_t)0x00000100;
 8009daa:	4c0c      	ldr	r4, [pc, #48]	; (8009ddc <platform_init_busclk+0x34>)
 8009dac:	6822      	ldr	r2, [r4, #0]
 8009dae:	2380      	movs	r3, #128	; 0x80
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	4313      	orrs	r3, r2
 8009db4:	6023      	str	r3, [r4, #0]

    // Configure dividers and PLL information (even if not used) and keep 
    // active clock via MSI (these fields are 0)
    RCC->CFGR   = ( _PLL_SRC | _PLL_MULT | _PLL_DIV | _AHB_DIV | _APB1_DIV | _APB2_DIV );
 8009db6:	2300      	movs	r3, #0
 8009db8:	60e3      	str	r3, [r4, #12]

    // Reset HSION, HSEON, HSEBYP, CSSON and PLLON bits
    // Disable all clocker interrupts (default)
    RCC->CR    &= 0xFEF0FFF6;   // 0xEEFAFFFE;
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	4a08      	ldr	r2, [pc, #32]	; (8009de0 <platform_init_busclk+0x38>)
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	6023      	str	r3, [r4, #0]
#   elif BOARD_FEATURE(FULLSPEED)
#       if ((_FULLSPEED_VOLTAGE != POWER_1V5) && (_FULL_UPVOLT() == 0))
            sub_voltage_config(_FULLSPEED_VOLTAGE | _RTC_PROTECTION);   ///@note This isn't running
#       endif
        // Basic Flash setup, then run normal routine
        FLASH->ACR = FLASH_ACR_PRFTEN;
 8009dc2:	4b08      	ldr	r3, [pc, #32]	; (8009de4 <platform_init_busclk+0x3c>)
 8009dc4:	2202      	movs	r2, #2
 8009dc6:	601a      	str	r2, [r3, #0]
        platform_full_speed();
 8009dc8:	f7ff ff3c 	bl	8009c44 <platform_full_speed>
#       error "At least one of BOARD_FEATURE_STDSPEED, _FULLSPEED, or _FLANKSPEED must be ENABLED"
#   endif

    
    ///4. Clock selection for special buses
    RCC->CCIPR  = ((BOARD_FEATURE(USBPLL)!=ENABLED) << 26)  /* HSI48MSEL */ \
 8009dcc:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <platform_init_busclk+0x40>)
 8009dce:	64e3      	str	r3, [r4, #76]	; 0x4c
    /// X. Vector Table Relocation in Internal SRAM or FLASH.
#   ifdef VECT_TAB_SRAM
#       error "Silly rabbit! SRAM is for DATA!"
        SCB->VTOR   = SRAM_BASE;
#   else
        SCB->VTOR   = FLASH_BASE;
 8009dd0:	4b06      	ldr	r3, [pc, #24]	; (8009dec <platform_init_busclk+0x44>)
 8009dd2:	2280      	movs	r2, #128	; 0x80
 8009dd4:	0512      	lsls	r2, r2, #20
 8009dd6:	609a      	str	r2, [r3, #8]
#   endif
}
 8009dd8:	bd10      	pop	{r4, pc}
 8009dda:	46c0      	nop			; (mov r8, r8)
 8009ddc:	40021000 	.word	0x40021000
 8009de0:	fef0fff6 	.word	0xfef0fff6
 8009de4:	40022000 	.word	0x40022000
 8009de8:	040c0c00 	.word	0x040c0c00
 8009dec:	e000ed00 	.word	0xe000ed00

08009df0 <platform_init_periphclk>:

#define CR_OFFSET                (PWR_OFFSET + 0x00)
#define DBP_BitNumber            0x08
#define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
*/
    ot_u32  pwr_cr_save = (PWR->CR | PWR_CR_DBP);
 8009df0:	4b0a      	ldr	r3, [pc, #40]	; (8009e1c <platform_init_periphclk+0x2c>)
 8009df2:	6819      	ldr	r1, [r3, #0]
 8009df4:	2280      	movs	r2, #128	; 0x80
 8009df6:	0052      	lsls	r2, r2, #1
 8009df8:	430a      	orrs	r2, r1

#   if BOARD_FEATURE(LFXTAL)
    PWR->CR     = ((1 << 11) | PWR_CR_DBP);
 8009dfa:	2190      	movs	r1, #144	; 0x90
 8009dfc:	0109      	lsls	r1, r1, #4
 8009dfe:	6019      	str	r1, [r3, #0]
    RCC->CSR    = RCC_CSR_RMVF | RCC_CSR_RTCRST;
 8009e00:	4b07      	ldr	r3, [pc, #28]	; (8009e20 <platform_init_periphclk+0x30>)
 8009e02:	2188      	movs	r1, #136	; 0x88
 8009e04:	0409      	lsls	r1, r1, #16
 8009e06:	6519      	str	r1, [r3, #80]	; 0x50
    RCC->CSR    = RCC_CSR_LSEON | RCC_CSR_RTCEN | RCC_CSR_RTCSEL_LSE;
 8009e08:	4906      	ldr	r1, [pc, #24]	; (8009e24 <platform_init_periphclk+0x34>)
 8009e0a:	6519      	str	r1, [r3, #80]	; 0x50
    while ((RCC->CSR & RCC_CSR_LSERDY) == 0);
 8009e0c:	4b04      	ldr	r3, [pc, #16]	; (8009e20 <platform_init_periphclk+0x30>)
 8009e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e10:	059b      	lsls	r3, r3, #22
 8009e12:	d5fb      	bpl.n	8009e0c <platform_init_periphclk+0x1c>
    RCC->CSR    = RCC_CSR_LSION | RCC_CSR_RTCEN | RCC_CSR_RTCSEL_LSI;
    while ((RCC->CSR & RCC_CSR_LSIRDY) == 0);

#   endif

   PWR->CR = (pwr_cr_save);
 8009e14:	4b01      	ldr	r3, [pc, #4]	; (8009e1c <platform_init_periphclk+0x2c>)
 8009e16:	601a      	str	r2, [r3, #0]
}
 8009e18:	4770      	bx	lr
 8009e1a:	46c0      	nop			; (mov r8, r8)
 8009e1c:	40007000 	.word	0x40007000
 8009e20:	40021000 	.word	0x40021000
 8009e24:	00050100 	.word	0x00050100

08009e28 <platform_init_interruptor>:
/** OpenTag Resource Initializers <BR>
  * ========================================================================<BR>
  */

#ifndef EXTF_platform_init_interruptor
void platform_init_interruptor() {
 8009e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    SYSCFG->EXTICR[0]   = (BOARD_GNSS_INT0PORTNUM << 0) \
 8009e2a:	4b29      	ldr	r3, [pc, #164]	; (8009ed0 <platform_init_interruptor+0xa8>)
 8009e2c:	2210      	movs	r2, #16
 8009e2e:	609a      	str	r2, [r3, #8]
    SYSCFG->EXTICR[1]   = (1 << 0) \
 8009e30:	3201      	adds	r2, #1
 8009e32:	60da      	str	r2, [r3, #12]
    SYSCFG->EXTICR[2]   = (0 << 0) \
 8009e34:	2200      	movs	r2, #0
 8009e36:	611a      	str	r2, [r3, #16]
    SYSCFG->EXTICR[3]   = (BOARD_RFGPIO_0PORTNUM << 0) \
 8009e38:	615a      	str	r2, [r3, #20]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009e3a:	4a26      	ldr	r2, [pc, #152]	; (8009ed4 <platform_init_interruptor+0xac>)
 8009e3c:	69d3      	ldr	r3, [r2, #28]
 8009e3e:	021b      	lsls	r3, r3, #8
 8009e40:	0a1b      	lsrs	r3, r3, #8
 8009e42:	61d3      	str	r3, [r2, #28]
 8009e44:	6a10      	ldr	r0, [r2, #32]
 8009e46:	4924      	ldr	r1, [pc, #144]	; (8009ed8 <platform_init_interruptor+0xb0>)
 8009e48:	4008      	ands	r0, r1
 8009e4a:	23c0      	movs	r3, #192	; 0xc0
 8009e4c:	041b      	lsls	r3, r3, #16
 8009e4e:	4303      	orrs	r3, r0
 8009e50:	6213      	str	r3, [r2, #32]
    // Line 25: USART1-wakeup
    // Line 26: USART2-wakeup
    // Line 28: LPUART1-wakeup
    // Line 29: LPTIM-wakeup

    EXTI->PR    = (1<<20) | (1<<29);
 8009e52:	4b22      	ldr	r3, [pc, #136]	; (8009edc <platform_init_interruptor+0xb4>)
 8009e54:	4a22      	ldr	r2, [pc, #136]	; (8009ee0 <platform_init_interruptor+0xb8>)
 8009e56:	615a      	str	r2, [r3, #20]
    EXTI->IMR  |= (1<<20) | (1<<29);
 8009e58:	6818      	ldr	r0, [r3, #0]
 8009e5a:	4310      	orrs	r0, r2
 8009e5c:	6018      	str	r0, [r3, #0]
    EXTI->RTSR |= (1<<20) | (1<<29);
 8009e5e:	6898      	ldr	r0, [r3, #8]
 8009e60:	4302      	orrs	r2, r0
 8009e62:	609a      	str	r2, [r3, #8]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009e64:	4b1f      	ldr	r3, [pc, #124]	; (8009ee4 <platform_init_interruptor+0xbc>)
 8009e66:	20c0      	movs	r0, #192	; 0xc0
 8009e68:	0080      	lsls	r0, r0, #2
 8009e6a:	581a      	ldr	r2, [r3, r0]
 8009e6c:	400a      	ands	r2, r1
 8009e6e:	2480      	movs	r4, #128	; 0x80
 8009e70:	03e4      	lsls	r4, r4, #15
 8009e72:	4322      	orrs	r2, r4
 8009e74:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e76:	2204      	movs	r2, #4
 8009e78:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009e7a:	300c      	adds	r0, #12
 8009e7c:	581a      	ldr	r2, [r3, r0]
 8009e7e:	4f1a      	ldr	r7, [pc, #104]	; (8009ee8 <platform_init_interruptor+0xc0>)
 8009e80:	403a      	ands	r2, r7
 8009e82:	2580      	movs	r5, #128	; 0x80
 8009e84:	01ed      	lsls	r5, r5, #7
 8009e86:	432a      	orrs	r2, r5
 8009e88:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e8a:	2280      	movs	r2, #128	; 0x80
 8009e8c:	0192      	lsls	r2, r2, #6
 8009e8e:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009e90:	22c1      	movs	r2, #193	; 0xc1
 8009e92:	0092      	lsls	r2, r2, #2
 8009e94:	589e      	ldr	r6, [r3, r2]
 8009e96:	403e      	ands	r6, r7
 8009e98:	4335      	orrs	r5, r6
 8009e9a:	509d      	str	r5, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e9c:	2520      	movs	r5, #32
 8009e9e:	601d      	str	r5, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009ea0:	589d      	ldr	r5, [r3, r2]
 8009ea2:	4029      	ands	r1, r5
 8009ea4:	430c      	orrs	r4, r1
 8009ea6:	509c      	str	r4, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ea8:	2140      	movs	r1, #64	; 0x40
 8009eaa:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009eac:	5899      	ldr	r1, [r3, r2]
 8009eae:	0209      	lsls	r1, r1, #8
 8009eb0:	0a09      	lsrs	r1, r1, #8
 8009eb2:	2480      	movs	r4, #128	; 0x80
 8009eb4:	05e4      	lsls	r4, r4, #23
 8009eb6:	4321      	orrs	r1, r4
 8009eb8:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009eba:	2180      	movs	r1, #128	; 0x80
 8009ebc:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009ebe:	581a      	ldr	r2, [r3, r0]
 8009ec0:	24ff      	movs	r4, #255	; 0xff
 8009ec2:	43a2      	bics	r2, r4
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ec8:	2280      	movs	r2, #128	; 0x80
 8009eca:	0152      	lsls	r2, r2, #5
 8009ecc:	601a      	str	r2, [r3, #0]
//#   if defined(__USE_ADC1)
    NVIC_SetPriority(ADC1_COMP_IRQn, _HIPRI_GROUP);
    NVIC_EnableIRQ(ADC1_COMP_IRQn);
//#   endif

}
 8009ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ed0:	40010000 	.word	0x40010000
 8009ed4:	e000ed00 	.word	0xe000ed00
 8009ed8:	ff00ffff 	.word	0xff00ffff
 8009edc:	40010400 	.word	0x40010400
 8009ee0:	20100000 	.word	0x20100000
 8009ee4:	e000e100 	.word	0xe000e100
 8009ee8:	ffff00ff 	.word	0xffff00ff

08009eec <platform_poweron>:
void platform_poweron() {
 8009eec:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8009eee:	f3ef 8308 	mrs	r3, MSP
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8009ef2:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	f383 8814 	msr	CONTROL, r3
    __set_MSP( (ot_u32)&platform_ext.sstack[(OT_PARAM_SSTACK_ALLOC/4)-1] );
 8009efc:	4c29      	ldr	r4, [pc, #164]	; (8009fa4 <platform_poweron+0xb8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8009efe:	f384 8808 	msr	MSP, r4
    RCC->AHBENR     = (_CRYPCLK_N | _RNGCLK_N | _TOUCHCLK_N | _CRCCLK_N | _MIFCLK_N | _DMACLK_N);
 8009f02:	4b29      	ldr	r3, [pc, #164]	; (8009fa8 <platform_poweron+0xbc>)
 8009f04:	4a29      	ldr	r2, [pc, #164]	; (8009fac <platform_poweron+0xc0>)
 8009f06:	631a      	str	r2, [r3, #48]	; 0x30
    RCC->AHBSMENR   = (_CRYPCLK_LP| _RNGCLK_LP| _TOUCHCLK_LP| _CRCCLK_LP| _MIFCLK_LP| _DMACLK_LP);
 8009f08:	4a29      	ldr	r2, [pc, #164]	; (8009fb0 <platform_poweron+0xc4>)
 8009f0a:	641a      	str	r2, [r3, #64]	; 0x40
    RCC->IOPENR     = _IOPENR_STARTUP;
 8009f0c:	4a29      	ldr	r2, [pc, #164]	; (8009fb4 <platform_poweron+0xc8>)
 8009f0e:	62da      	str	r2, [r3, #44]	; 0x2c
    RCC->APB2ENR   = (RCC_APB2ENR_DBGMCUEN | RCC_APB2ENR_SYSCFGEN);
 8009f10:	4a29      	ldr	r2, [pc, #164]	; (8009fb8 <platform_poweron+0xcc>)
 8009f12:	635a      	str	r2, [r3, #52]	; 0x34
    RCC->APB1ENR   = (RCC_APB1ENR_LPTIM1EN | RCC_APB1ENR_PWREN); 
 8009f14:	2290      	movs	r2, #144	; 0x90
 8009f16:	0612      	lsls	r2, r2, #24
 8009f18:	639a      	str	r2, [r3, #56]	; 0x38
    PWR->CR    |= PWR_CR_PLS_LEV0 | PWR_CR_PVDE;  
 8009f1a:	4a28      	ldr	r2, [pc, #160]	; (8009fbc <platform_poweron+0xd0>)
 8009f1c:	6813      	ldr	r3, [r2, #0]
 8009f1e:	2110      	movs	r1, #16
 8009f20:	430b      	orrs	r3, r1
 8009f22:	6013      	str	r3, [r2, #0]
	    GPIOA->BSRR = (0 \
 8009f24:	23a0      	movs	r3, #160	; 0xa0
 8009f26:	05db      	lsls	r3, r3, #23
 8009f28:	2285      	movs	r2, #133	; 0x85
 8009f2a:	0092      	lsls	r2, r2, #2
 8009f2c:	619a      	str	r2, [r3, #24]
    GPIOA->OTYPER   = (1 << (BOARD_LEDO_PINNUM)) \
 8009f2e:	22c0      	movs	r2, #192	; 0xc0
 8009f30:	00d2      	lsls	r2, r2, #3
 8009f32:	605a      	str	r2, [r3, #4]
    GPIOA->PUPDR    = (1 << (3*2)) \
 8009f34:	4a22      	ldr	r2, [pc, #136]	; (8009fc0 <platform_poweron+0xd4>)
 8009f36:	60da      	str	r2, [r3, #12]
    GPIOA->OSPEEDR  = (GPIO_OSPEEDR_10MHz << (0*2)) \
 8009f38:	4a22      	ldr	r2, [pc, #136]	; (8009fc4 <platform_poweron+0xd8>)
 8009f3a:	609a      	str	r2, [r3, #8]
    GPIOA->MODER    = (GPIO_MODER_ANALOG << (0*2)) \
 8009f3c:	4a22      	ldr	r2, [pc, #136]	; (8009fc8 <platform_poweron+0xdc>)
 8009f3e:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[0]   = (4 << (BOARD_EXTUART_TXPINNUM*4)) \
 8009f40:	2288      	movs	r2, #136	; 0x88
 8009f42:	01d2      	lsls	r2, r2, #7
 8009f44:	621a      	str	r2, [r3, #32]
    GPIOB->BSRR     = (1 << (BOARD_I2C_SCLPINNUM)) | (1 << (BOARD_I2C_SDAPINNUM));
 8009f46:	4b21      	ldr	r3, [pc, #132]	; (8009fcc <platform_poweron+0xe0>)
 8009f48:	22c0      	movs	r2, #192	; 0xc0
 8009f4a:	619a      	str	r2, [r3, #24]
    GPIOB->OTYPER   = (1 << (BOARD_I2C_SCLPINNUM)) | (1 << (BOARD_I2C_SDAPINNUM));
 8009f4c:	605a      	str	r2, [r3, #4]
    GPIOB->PUPDR    = (2 << (0*2)) \
 8009f4e:	3ab6      	subs	r2, #182	; 0xb6
 8009f50:	60da      	str	r2, [r3, #12]
    GPIOB->OSPEEDR  = (GPIO_OSPEEDR_10MHz << (0*2)) \
 8009f52:	4a1f      	ldr	r2, [pc, #124]	; (8009fd0 <platform_poweron+0xe4>)
 8009f54:	609a      	str	r2, [r3, #8]
    GPIOB->MODER    = (GPIO_MODER_IN     << (0*2)) \
 8009f56:	4a1f      	ldr	r2, [pc, #124]	; (8009fd4 <platform_poweron+0xe8>)
 8009f58:	601a      	str	r2, [r3, #0]
	GPIOB->AFR[0]   = (1 << ((BOARD_I2C_SCLPINNUM)*4)) \
 8009f5a:	2288      	movs	r2, #136	; 0x88
 8009f5c:	0552      	lsls	r2, r2, #21
 8009f5e:	621a      	str	r2, [r3, #32]
    GPIOC->MODER    = (GPIO_MODER_ANALOG << (0*2)) \
 8009f60:	4b1d      	ldr	r3, [pc, #116]	; (8009fd8 <platform_poweron+0xec>)
 8009f62:	4a1e      	ldr	r2, [pc, #120]	; (8009fdc <platform_poweron+0xf0>)
 8009f64:	601a      	str	r2, [r3, #0]
    platform_init_periphclk();
 8009f66:	f7ff ff43 	bl	8009df0 <platform_init_periphclk>
    platform_init_busclk();
 8009f6a:	f7ff ff1d 	bl	8009da8 <platform_init_busclk>
    DBGMCU->CR     |= ( DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
 8009f6e:	4b1c      	ldr	r3, [pc, #112]	; (8009fe0 <platform_poweron+0xf4>)
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	2107      	movs	r1, #7
 8009f74:	430a      	orrs	r2, r1
 8009f76:	605a      	str	r2, [r3, #4]
    DBGMCU->APB1FZ |= ( DBGMCU_APB1_FZ_DBG_TIM2_STOP \
 8009f78:	6899      	ldr	r1, [r3, #8]
 8009f7a:	4a1a      	ldr	r2, [pc, #104]	; (8009fe4 <platform_poweron+0xf8>)
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	609a      	str	r2, [r3, #8]
    DBGMCU->APB2FZ |= ( DBGMCU_APB2_FZ_DBG_TIM22_STOP \
 8009f80:	68da      	ldr	r2, [r3, #12]
 8009f82:	2124      	movs	r1, #36	; 0x24
 8009f84:	430a      	orrs	r2, r1
 8009f86:	60da      	str	r2, [r3, #12]
    platform_init_interruptor();    // Interrupts OpenTag cares about
 8009f88:	f7ff ff4e 	bl	8009e28 <platform_init_interruptor>
    systim_init(NULL);         // Initialize GPTIM (to 1024 Hz)
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	f7ff fc63 	bl	8009858 <systim_init>
    vworm_init();
 8009f92:	f000 fa15 	bl	800a3c0 <vworm_init>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8009f96:	f3ef 8309 	mrs	r3, PSP
    platform_ext.task_exit = (void*)__get_PSP();
 8009f9a:	4a13      	ldr	r2, [pc, #76]	; (8009fe8 <platform_poweron+0xfc>)
 8009f9c:	4694      	mov	ip, r2
 8009f9e:	4464      	add	r4, ip
 8009fa0:	6023      	str	r3, [r4, #0]
}
 8009fa2:	bd10      	pop	{r4, pc}
 8009fa4:	20003280 	.word	0x20003280
 8009fa8:	40021000 	.word	0x40021000
 8009fac:	00101101 	.word	0x00101101
 8009fb0:	00100101 	.word	0x00100101
 8009fb4:	00001187 	.word	0x00001187
 8009fb8:	00400001 	.word	0x00400001
 8009fbc:	40007000 	.word	0x40007000
 8009fc0:	02800040 	.word	0x02800040
 8009fc4:	3c28faaa 	.word	0x3c28faaa
 8009fc8:	e814a9a7 	.word	0xe814a9a7
 8009fcc:	50000400 	.word	0x50000400
 8009fd0:	0000aa0a 	.word	0x0000aa0a
 8009fd4:	ffffaff0 	.word	0xffffaff0
 8009fd8:	50000800 	.word	0x50000800
 8009fdc:	0fffffff 	.word	0x0fffffff
 8009fe0:	40015800 	.word	0x40015800
 8009fe4:	80601c11 	.word	0x80601c11
 8009fe8:	fffffbf0 	.word	0xfffffbf0

08009fec <SVC_Handler>:


/** KERNEL INTERRUPTS
  * =================
  */
void SVC_Handler(void) {
 8009fec:	b510      	push	{r4, lr}
/// At present, the only protected system call is the call to the scheduler.
/// (sys_event_manager()).  Future system calls might make-use of the SVC
/// vectoring, however.
    sys_event_manager();
 8009fee:	f7ff fabf 	bl	8009570 <sys_event_manager>
       default: //sys_notify();
                break;  //goto SVC_Handler_eventmgr;
    }

#endif
}
 8009ff2:	bd10      	pop	{r4, pc}

08009ff4 <PendSV_Handler>:
/// PendSV ISR is issued if and only if some task or event is asynchronously
/// pre-empting the kernel.  It is invoked __only__ through platform_ot_preempt().
/// @note SV is for "Supervisor," not "Sport Veloce"

    // There is an erratum that PendSV bit is not adequately cleared in HW
    __CLR_PENDSV();
 8009ff4:	4a03      	ldr	r2, [pc, #12]	; (800a004 <PendSV_Handler+0x10>)
 8009ff6:	6851      	ldr	r1, [r2, #4]
 8009ff8:	2380      	movs	r3, #128	; 0x80
 8009ffa:	051b      	lsls	r3, r3, #20
 8009ffc:	430b      	orrs	r3, r1
 8009ffe:	6053      	str	r3, [r2, #4]

    // SVC(0) runs the scheduler runtime in protected context
    __SEND_SVC(0);
 800a000:	df00      	svc	0
}
 800a002:	4770      	bx	lr
 800a004:	e000ed00 	.word	0xe000ed00

0800a008 <platform_ot_preempt>:
/// Run the kernel scheduler by using system call.  If running a kernel task,
/// do not run the scheduler (we check this by inspecting the KTIM interrupt
/// enabler bit), as the ktask will run to completion and do the call in its
/// own context (platform_ot_run()).

    if (platform_ext.task_exit == NULL)
 800a008:	4b05      	ldr	r3, [pc, #20]	; (800a020 <platform_ot_preempt+0x18>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d000      	beq.n	800a012 <platform_ot_preempt+0xa>
        __SET_PENDSV();
}
 800a010:	4770      	bx	lr
        __SET_PENDSV();
 800a012:	4a04      	ldr	r2, [pc, #16]	; (800a024 <platform_ot_preempt+0x1c>)
 800a014:	6851      	ldr	r1, [r2, #4]
 800a016:	2380      	movs	r3, #128	; 0x80
 800a018:	055b      	lsls	r3, r3, #21
 800a01a:	430b      	orrs	r3, r1
 800a01c:	6053      	str	r3, [r2, #4]
}
 800a01e:	e7f7      	b.n	800a010 <platform_ot_preempt+0x8>
 800a020:	20002e70 	.word	0x20002e70
 800a024:	e000ed00 	.word	0xe000ed00

0800a028 <platform_ot_run>:
#endif



#ifndef EXTF_platform_ot_run
OT_INLINE void platform_ot_run() {
 800a028:	b510      	push	{r4, lr}

    /// 1. Run the Scheduler.  The scheduler will issue a PendSV if there is a
    /// threaded task, in which case the P-stack will get changed to that
    /// thread, and the code after this call will not run until all threads are
    /// dormant.
    platform_enable_interrupts();
 800a02a:	f7ff fe3b 	bl	8009ca4 <platform_enable_interrupts>
    __SEND_SVC(0);
 800a02e:	df00      	svc	0

    /// 2. When the PC is here, it means that a kernel task has been scheduled
    ///    or that no task is scheduled.  If no task is scheduled, then it is
    ///    time to go to sleep.  sys_powerdown() MUST re-enable interrupts
    ///    immediately before issuing WFI instruction.
    while (systim.flags & GPTIM_FLAG_SLEEP) {
 800a030:	e004      	b.n	800a03c <platform_ot_run+0x14>
        platform_disable_interrupts();
 800a032:	f7ff fe35 	bl	8009ca0 <platform_disable_interrupts>
        //systim_enable();                // LPTIM must be always running
        sys_powerdown();
 800a036:	f7ff fa53 	bl	80094e0 <sys_powerdown>
        
        // At this point, system has just woke-up from sleep.  
        // The wakeup ISR must clear GPTIM_FLAG_SLEEP if task scheduling is to continue
        __NOP();
 800a03a:	46c0      	nop			; (mov r8, r8)
    while (systim.flags & GPTIM_FLAG_SLEEP) {
 800a03c:	4b0c      	ldr	r3, [pc, #48]	; (800a070 <platform_ot_run+0x48>)
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	07db      	lsls	r3, r3, #31
 800a042:	d4f6      	bmi.n	800a032 <platform_ot_run+0xa>
    }
    
    /// 3. Stop the backup timer, which is used as a kernel watchdog.
    platform_disable_interrupts();
 800a044:	f7ff fe2c 	bl	8009ca0 <platform_disable_interrupts>
    systim_stop_ticker();
 800a048:	f7ff fca6 	bl	8009998 <systim_stop_ticker>
 800a04c:	f3ef 8309 	mrs	r3, PSP
    ///    onto this position.  If the task is killed during its runtime, this
    ///    data will be used to reset the P-stack and PC.
    ///@note this code only works with GCC-based compilers.  The && operator
    /// ahead of the label is a label-reference, and it is a GCC feature.
    {   register ot_u32 return_from_task;
        platform_ext.task_exit  = (void*)__get_PSP();
 800a050:	4c08      	ldr	r4, [pc, #32]	; (800a074 <platform_ot_run+0x4c>)
 800a052:	6023      	str	r3, [r4, #0]
        return_from_task        = (ot_u32)&&RETURN_FROM_TASK;
 800a054:	4b08      	ldr	r3, [pc, #32]	; (800a078 <platform_ot_run+0x50>)
        asm volatile ("PUSH {%0}" : : "r"(return_from_task) );
 800a056:	b408      	push	{r3}
    }

    /// 5. Run the Tasking Engine.  It will call the ktask or switch to the
    /// thread, as needed based on what is scheduled.
    platform_enable_interrupts();
 800a058:	f7ff fe24 	bl	8009ca4 <platform_enable_interrupts>
    sys_run_task();
 800a05c:	f7ff fada 	bl	8009614 <sys_run_task>

    /// 6. In any condition, retract the stack to a known, stable condition.
    /// If the task/thread exited cleanly, this changes nothing.  If killed,
    /// this will flush the stack.
    RETURN_FROM_TASK:
    platform_disable_interrupts();
 800a060:	f7ff fe1e 	bl	8009ca0 <platform_disable_interrupts>
    __set_PSP( (ot_u32)platform_ext.task_exit );
 800a064:	6823      	ldr	r3, [r4, #0]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800a066:	f383 8809 	msr	PSP, r3
    platform_ext.task_exit = NULL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	6023      	str	r3, [r4, #0]
}
 800a06e:	bd10      	pop	{r4, pc}
 800a070:	20002e68 	.word	0x20002e68
 800a074:	20002e70 	.word	0x20002e70
 800a078:	0800a060 	.word	0x0800a060

0800a07c <WWDG_IRQHandler>:



#ifndef EXTF_WWDG_IRQHandler
void WWDG_IRQHandler(void) {
}
 800a07c:	4770      	bx	lr

0800a07e <sx127x_cadpin_ishigh>:
#if defined(_READY_PIN)
inline ot_uint sx127x_readypin_ishigh(void)   { return (_READY_PORT->IDR & _READY_PIN); }
#endif

// CAD-Detect may be implemented on DIO1
inline ot_uint sx127x_cadpin_ishigh(void)     { return (_CAD_DETECT_PORT->IDR & _CAD_DETECT_PIN); }
 800a07e:	23a0      	movs	r3, #160	; 0xa0
 800a080:	05db      	lsls	r3, r3, #23
 800a082:	6918      	ldr	r0, [r3, #16]
 800a084:	2380      	movs	r3, #128	; 0x80
 800a086:	011b      	lsls	r3, r3, #4
 800a088:	4018      	ands	r0, r3
 800a08a:	4770      	bx	lr

0800a08c <sx127x_getbasepwr>:


ot_u8 sx127x_getbasepwr() {
/// Base Power code: 0-3.  For this SX127x impl it's always 3.
    return 3;
}
 800a08c:	2003      	movs	r0, #3
 800a08e:	4770      	bx	lr

0800a090 <sx127x_reset>:


/** Bus interface (SPI + 2x GPIO) <BR>
  * ========================================================================
  */
void sx127x_reset() {
 800a090:	b570      	push	{r4, r5, r6, lr}
/// - this sequence is taken from Semtech's implementation
/// - it doesn't agree 100% with documentation, namely how output/input shift occurs

    // Set Reset pin to Output, and set high
    {   ot_u32 moder;
        moder   = BOARD_RFCTL_RESETPORT->MODER;  
 800a092:	24a0      	movs	r4, #160	; 0xa0
 800a094:	05e4      	lsls	r4, r4, #23
 800a096:	6822      	ldr	r2, [r4, #0]
        moder  &= ~(3 << (BOARD_RFCTL_RESETPINNUM*2));
 800a098:	4d09      	ldr	r5, [pc, #36]	; (800a0c0 <sx127x_reset+0x30>)
 800a09a:	402a      	ands	r2, r5
        moder  |= (GPIO_MODER_OUT << (BOARD_RFCTL_RESETPINNUM*2));
 800a09c:	2380      	movs	r3, #128	; 0x80
 800a09e:	025b      	lsls	r3, r3, #9
 800a0a0:	4313      	orrs	r3, r2
        
        BOARD_RFCTL_RESETPORT->MODER    = moder;
 800a0a2:	6023      	str	r3, [r4, #0]
        BOARD_RFCTL_RESETPORT->BSRR     = BOARD_RFCTL_RESETPIN;
 800a0a4:	2380      	movs	r3, #128	; 0x80
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	61a3      	str	r3, [r4, #24]
    }
    delay_us(1200);   //wait ~120 us
 800a0aa:	2096      	movs	r0, #150	; 0x96
 800a0ac:	00c0      	lsls	r0, r0, #3
 800a0ae:	f000 f8dd 	bl	800a26c <delay_us>
    
    // Set Reset pin to Input, floating
    BOARD_RFCTL_RESETPORT->MODER &= ~(3 << (BOARD_RFCTL_RESETPINNUM*2));
 800a0b2:	6823      	ldr	r3, [r4, #0]
 800a0b4:	402b      	ands	r3, r5
 800a0b6:	6023      	str	r3, [r4, #0]

    // wait ~6ms
    delay_ti(6);    // wait ~6ms 
 800a0b8:	2006      	movs	r0, #6
 800a0ba:	f000 f8d3 	bl	800a264 <delay_ti>
}
 800a0be:	bd70      	pop	{r4, r5, r6, pc}
 800a0c0:	fffcffff 	.word	0xfffcffff

0800a0c4 <sx127x_init_bus>:


void sx127x_init_bus() {
 800a0c4:	b510      	push	{r4, lr}
    sx127x.clkreq = False;
#   endif

    ///1. Do a Reset.  
    ///@todo precede this with POR
    sx127x_reset();
 800a0c6:	f7ff ffe3 	bl	800a090 <sx127x_reset>
    ///2. Set-up DMA to work with SPI.  The DMA is bound to the SPI and it is
    ///   used for Duplex TX+RX.  The DMA RX Channel is used as an EVENT.  The
    ///   STM32L can do in-context naps using EVENTS.  To enable the EVENT, we
    ///   enable the DMA RX interrupt bit, but not the NVIC.
    BOARD_DMA_CLKON();
    _DMARX->CMAR    = (ot_u32)&sx127x.busrx[-1];
 800a0ca:	4a0c      	ldr	r2, [pc, #48]	; (800a0fc <sx127x_init_bus+0x38>)
 800a0cc:	4b0c      	ldr	r3, [pc, #48]	; (800a100 <sx127x_init_bus+0x3c>)
 800a0ce:	60d3      	str	r3, [r2, #12]
    _DMARX->CPAR    = (ot_u32)&RADIO_SPI->DR;
 800a0d0:	4b0c      	ldr	r3, [pc, #48]	; (800a104 <sx127x_init_bus+0x40>)
 800a0d2:	6093      	str	r3, [r2, #8]
    _DMATX->CPAR    = (ot_u32)&RADIO_SPI->DR;
 800a0d4:	4a0c      	ldr	r2, [pc, #48]	; (800a108 <sx127x_init_bus+0x44>)
 800a0d6:	6093      	str	r3, [r2, #8]
    ///
    /// However, here we set the EXTI lines to the rising edge triggers we need
    /// and configure the NVIC.  Eventually, the NVIC stuff might be done in
    /// the platform module JUST FOR EXTI interrupts though.

    EXTI->PR    =  RFI_ALL;         //clear flag bits
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	; (800a10c <sx127x_init_bus+0x48>)
 800a0da:	4a0d      	ldr	r2, [pc, #52]	; (800a110 <sx127x_init_bus+0x4c>)
 800a0dc:	615a      	str	r2, [r3, #20]
    EXTI->IMR  &= ~RFI_ALL;         //clear interrupt enablers
 800a0de:	6818      	ldr	r0, [r3, #0]
 800a0e0:	4c0c      	ldr	r4, [pc, #48]	; (800a114 <sx127x_init_bus+0x50>)
 800a0e2:	4020      	ands	r0, r4
 800a0e4:	6018      	str	r0, [r3, #0]
    EXTI->EMR  &= ~RFI_ALL;         //clear event enablers
 800a0e6:	6859      	ldr	r1, [r3, #4]
 800a0e8:	4021      	ands	r1, r4
 800a0ea:	6059      	str	r1, [r3, #4]

    // All IRQ pins are rising edge detect
    EXTI->RTSR |= (RFI_SOURCE0 | RFI_SOURCE1 | RFI_SOURCE2 | RFI_SOURCE3);
 800a0ec:	6899      	ldr	r1, [r3, #8]
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	609a      	str	r2, [r3, #8]
#       endif
#   endif
    
    /// 4. Put SX127x to sleep
    //delay_ti(6);    // wait ~6ms 
    sx127x_strobe(_OPMODE_SLEEP, True);
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	f7f8 f893 	bl	8002220 <sx127x_strobe>
}
 800a0fa:	bd10      	pop	{r4, pc}
 800a0fc:	4002001c 	.word	0x4002001c
 800a100:	2000220e 	.word	0x2000220e
 800a104:	4001300c 	.word	0x4001300c
 800a108:	40020030 	.word	0x40020030
 800a10c:	40010400 	.word	0x40010400
 800a110:	00001802 	.word	0x00001802
 800a114:	ffffe7fd 	.word	0xffffe7fd

0800a118 <sx127x_spibus_io>:
}




void sx127x_spibus_io(ot_u8 cmd_len, ot_u8 resp_len, ot_u8* cmd) {
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	0004      	movs	r4, r0
 800a11c:	000e      	movs	r6, r1
 800a11e:	0015      	movs	r5, r2
///@note BOARD_DMA_CLKON() must be defined in the board support header as a
/// macro or inline function.  As the board may be using DMA for numerous
/// peripherals, we cannot assume in this module if it is appropriate to turn-
/// off the DMA for all other modules.

    platform_disable_interrupts();
 800a120:	f7ff fdbe 	bl	8009ca0 <platform_disable_interrupts>
    __SPI_CLKON();
 800a124:	4a30      	ldr	r2, [pc, #192]	; (800a1e8 <sx127x_spibus_io+0xd0>)
 800a126:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a128:	2380      	movs	r3, #128	; 0x80
 800a12a:	015b      	lsls	r3, r3, #5
 800a12c:	430b      	orrs	r3, r1
 800a12e:	6353      	str	r3, [r2, #52]	; 0x34
    __SPI_ENABLE();
 800a130:	4b2e      	ldr	r3, [pc, #184]	; (800a1ec <sx127x_spibus_io+0xd4>)
 800a132:	2203      	movs	r2, #3
 800a134:	605a      	str	r2, [r3, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	609a      	str	r2, [r3, #8]
 800a13a:	22d1      	movs	r2, #209	; 0xd1
 800a13c:	0092      	lsls	r2, r2, #2
 800a13e:	601a      	str	r2, [r3, #0]
    __SPI_CS_ON();
 800a140:	23a0      	movs	r3, #160	; 0xa0
 800a142:	05db      	lsls	r3, r3, #23
 800a144:	2210      	movs	r2, #16
 800a146:	629a      	str	r2, [r3, #40]	; 0x28
    spi_moder   = GPIOA->MODER;
 800a148:	681a      	ldr	r2, [r3, #0]
    spi_moder  &= ~((3 << (BOARD_RFSPI_MISOPINNUM*2)) \
 800a14a:	4929      	ldr	r1, [pc, #164]	; (800a1f0 <sx127x_spibus_io+0xd8>)
 800a14c:	4011      	ands	r1, r2
    spi_moder  |= (GPIO_MODER_ALT << (BOARD_RFSPI_MISOPINNUM*2)) \
 800a14e:	22a8      	movs	r2, #168	; 0xa8
 800a150:	0212      	lsls	r2, r2, #8
 800a152:	430a      	orrs	r2, r1
    GPIOA->MODER = spi_moder;
 800a154:	601a      	str	r2, [r3, #0]
    /// module buffer.  If doing a read, the garbage data getting duplexed onto
    /// TX doesn't affect the SX127x.  If doing a write, simply disregard the
    /// RX duplexed data.
    BOARD_RFSPI_CLKON();
    BOARD_DMA_CLKON();
    __DMA_CLEAR_IFG();
 800a156:	4b27      	ldr	r3, [pc, #156]	; (800a1f4 <sx127x_spibus_io+0xdc>)
 800a158:	22ff      	movs	r2, #255	; 0xff
 800a15a:	0112      	lsls	r2, r2, #4
 800a15c:	605a      	str	r2, [r3, #4]
    cmd_len        += resp_len;
 800a15e:	19a4      	adds	r4, r4, r6
 800a160:	b2e4      	uxtb	r4, r4
    _DMARX->CNDTR   = cmd_len;
 800a162:	4825      	ldr	r0, [pc, #148]	; (800a1f8 <sx127x_spibus_io+0xe0>)
 800a164:	6044      	str	r4, [r0, #4]
    _DMATX->CNDTR   = cmd_len;
 800a166:	4b25      	ldr	r3, [pc, #148]	; (800a1fc <sx127x_spibus_io+0xe4>)
 800a168:	605c      	str	r4, [r3, #4]
    _DMATX->CMAR    = (ot_u32)cmd;
 800a16a:	60dd      	str	r5, [r3, #12]
    __DMA_ENABLE();
 800a16c:	4c24      	ldr	r4, [pc, #144]	; (800a200 <sx127x_spibus_io+0xe8>)
 800a16e:	6822      	ldr	r2, [r4, #0]
 800a170:	4924      	ldr	r1, [pc, #144]	; (800a204 <sx127x_spibus_io+0xec>)
 800a172:	4011      	ands	r1, r2
 800a174:	2288      	movs	r2, #136	; 0x88
 800a176:	0052      	lsls	r2, r2, #1
 800a178:	430a      	orrs	r2, r1
 800a17a:	6022      	str	r2, [r4, #0]
 800a17c:	4a22      	ldr	r2, [pc, #136]	; (800a208 <sx127x_spibus_io+0xf0>)
 800a17e:	6002      	str	r2, [r0, #0]
 800a180:	6819      	ldr	r1, [r3, #0]
 800a182:	4a22      	ldr	r2, [pc, #136]	; (800a20c <sx127x_spibus_io+0xf4>)
 800a184:	430a      	orrs	r2, r1
 800a186:	601a      	str	r2, [r3, #0]
    /// WFE only works on EXTI line interrupts, as far as I can test. 
    /// So do busywait until DMA is done RX-ing
    //do {
        //__WFE();
    //}
    while((DMA1->ISR & _DMARX_IFG) == 0);
 800a188:	4b1a      	ldr	r3, [pc, #104]	; (800a1f4 <sx127x_spibus_io+0xdc>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	069b      	lsls	r3, r3, #26
 800a18e:	d5fb      	bpl.n	800a188 <sx127x_spibus_io+0x70>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a190:	4a1f      	ldr	r2, [pc, #124]	; (800a210 <sx127x_spibus_io+0xf8>)
 800a192:	23c0      	movs	r3, #192	; 0xc0
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	2180      	movs	r1, #128	; 0x80
 800a198:	00c9      	lsls	r1, r1, #3
 800a19a:	50d1      	str	r1, [r2, r3]
    __DMA_CLEAR_IRQ();
    __DMA_CLEAR_IFG();
 800a19c:	4b15      	ldr	r3, [pc, #84]	; (800a1f4 <sx127x_spibus_io+0xdc>)
 800a19e:	22ff      	movs	r2, #255	; 0xff
 800a1a0:	0112      	lsls	r2, r2, #4
 800a1a2:	605a      	str	r2, [r3, #4]
    __DMA_DISABLE();
 800a1a4:	4a16      	ldr	r2, [pc, #88]	; (800a200 <sx127x_spibus_io+0xe8>)
 800a1a6:	6813      	ldr	r3, [r2, #0]
 800a1a8:	4916      	ldr	r1, [pc, #88]	; (800a204 <sx127x_spibus_io+0xec>)
 800a1aa:	400b      	ands	r3, r1
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	4a11      	ldr	r2, [pc, #68]	; (800a1f8 <sx127x_spibus_io+0xe0>)
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	4a11      	ldr	r2, [pc, #68]	; (800a1fc <sx127x_spibus_io+0xe4>)
 800a1b6:	6013      	str	r3, [r2, #0]

    /// Turn-off and disable SPI to save energy
    __SPI_CS_OFF();
 800a1b8:	23a0      	movs	r3, #160	; 0xa0
 800a1ba:	05db      	lsls	r3, r3, #23
 800a1bc:	2210      	movs	r2, #16
 800a1be:	619a      	str	r2, [r3, #24]
    __SPI_DISABLE();
 800a1c0:	4a0a      	ldr	r2, [pc, #40]	; (800a1ec <sx127x_spibus_io+0xd4>)
 800a1c2:	21c1      	movs	r1, #193	; 0xc1
 800a1c4:	0089      	lsls	r1, r1, #2
 800a1c6:	6011      	str	r1, [r2, #0]
    __SPI_CLKOFF();
 800a1c8:	4907      	ldr	r1, [pc, #28]	; (800a1e8 <sx127x_spibus_io+0xd0>)
 800a1ca:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800a1cc:	4811      	ldr	r0, [pc, #68]	; (800a214 <sx127x_spibus_io+0xfc>)
 800a1ce:	4002      	ands	r2, r0
 800a1d0:	634a      	str	r2, [r1, #52]	; 0x34
    spi_moder   = GPIOA->MODER;
 800a1d2:	681a      	ldr	r2, [r3, #0]
    spi_moder  &= ~((3 << (BOARD_RFSPI_MISOPINNUM*2)) \
 800a1d4:	4906      	ldr	r1, [pc, #24]	; (800a1f0 <sx127x_spibus_io+0xd8>)
 800a1d6:	4011      	ands	r1, r2
    spi_moder  |= (GPIO_MODER_IN << (BOARD_RFSPI_MISOPINNUM*2)) \
 800a1d8:	2288      	movs	r2, #136	; 0x88
 800a1da:	01d2      	lsls	r2, r2, #7
 800a1dc:	430a      	orrs	r2, r1
    GPIOA->MODER = spi_moder;
 800a1de:	601a      	str	r2, [r3, #0]
    BOARD_DMA_CLKOFF();
    BOARD_RFSPI_CLKOFF();
    platform_enable_interrupts();
 800a1e0:	f7ff fd60 	bl	8009ca4 <platform_enable_interrupts>
}
 800a1e4:	bd70      	pop	{r4, r5, r6, pc}
 800a1e6:	46c0      	nop			; (mov r8, r8)
 800a1e8:	40021000 	.word	0x40021000
 800a1ec:	40013000 	.word	0x40013000
 800a1f0:	ffff03ff 	.word	0xffff03ff
 800a1f4:	40020000 	.word	0x40020000
 800a1f8:	4002001c 	.word	0x4002001c
 800a1fc:	40020030 	.word	0x40020030
 800a200:	400200a8 	.word	0x400200a8
 800a204:	fffff00f 	.word	0xfffff00f
 800a208:	00003083 	.word	0x00003083
 800a20c:	00003091 	.word	0x00003091
 800a210:	e000e100 	.word	0xe000e100
 800a214:	ffffefff 	.word	0xffffefff

0800a218 <sx127x_antsw_off>:

void sx127x_antsw_off(void) {
#   if (defined(__SX127x_PABOOST__) || defined(__SX127x_TXSW__) || defined(__SX127x_RXSW__))
    BOARD_RFANT_OFF();
#   endif
}
 800a218:	4770      	bx	lr

0800a21a <sx127x_antsw_on>:

void sx127x_antsw_on(void) {
#   if (defined(__SX127x_PABOOST__) || defined(__SX127x_TXSW__) || defined(__SX127x_RXSW__))
    BOARD_RFANT_ON();
#   endif
}
 800a21a:	4770      	bx	lr

0800a21c <sx127x_antsw_tx>:
void sx127x_antsw_tx(ot_bool use_paboost) {
#   if (defined(__SX127x_PABOOST__) || defined(__SX127x_TXSW__))
    sx127x_antsw_on();
    BOARD_RFANT_TX(use_paboost);
#   endif
}
 800a21c:	4770      	bx	lr

0800a21e <sx127x_antsw_rx>:
void sx127x_antsw_rx(void) {
#   if defined(__SX127x_RXSW__)
    sx127x_antsw_on();
    BOARD_RFANT_RX();
#   endif
}
 800a21e:	4770      	bx	lr

0800a220 <sx127x_int_config>:



void sx127x_int_config(ot_u32 ie_sel) {
    ot_u32 scratch;
    EXTI->PR    = (ot_u32)RFI_ALL;
 800a220:	4a04      	ldr	r2, [pc, #16]	; (800a234 <sx127x_int_config+0x14>)
 800a222:	4b05      	ldr	r3, [pc, #20]	; (800a238 <sx127x_int_config+0x18>)
 800a224:	6153      	str	r3, [r2, #20]
    scratch     = EXTI->IMR;
 800a226:	6813      	ldr	r3, [r2, #0]
    scratch    &= ~((ot_u32)RFI_ALL);
 800a228:	4904      	ldr	r1, [pc, #16]	; (800a23c <sx127x_int_config+0x1c>)
 800a22a:	400b      	ands	r3, r1
    scratch    |= ie_sel;
 800a22c:	4318      	orrs	r0, r3
    EXTI->IMR   = scratch;
 800a22e:	6010      	str	r0, [r2, #0]
}
 800a230:	4770      	bx	lr
 800a232:	46c0      	nop			; (mov r8, r8)
 800a234:	40010400 	.word	0x40010400
 800a238:	00001802 	.word	0x00001802
 800a23c:	ffffe7fd 	.word	0xffffe7fd

0800a240 <sx127x_int_clearall>:

inline void sx127x_int_clearall(void) {
    EXTI->PR = RFI_ALL;
 800a240:	4b01      	ldr	r3, [pc, #4]	; (800a248 <sx127x_int_clearall+0x8>)
 800a242:	4a02      	ldr	r2, [pc, #8]	; (800a24c <sx127x_int_clearall+0xc>)
 800a244:	615a      	str	r2, [r3, #20]
}
 800a246:	4770      	bx	lr
 800a248:	40010400 	.word	0x40010400
 800a24c:	00001802 	.word	0x00001802

0800a250 <delay_ms>:


#ifndef EXTF_delay_ms
void delay_ms(ot_u16 n) {
    ot_long c;
    c   = (platform_ext.clock_hz[0]>>10);   // Set cycles per ms
 800a250:	4b03      	ldr	r3, [pc, #12]	; (800a260 <delay_ms+0x10>)
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	0a9b      	lsrs	r3, r3, #10
    c  *= n;                                // Multiply by number of ms
 800a256:	4358      	muls	r0, r3
    do {
        c -= 7;                         // 7 cycles per loop (measured)
 800a258:	3807      	subs	r0, #7
    } while (c > 0);
 800a25a:	2800      	cmp	r0, #0
 800a25c:	dcfc      	bgt.n	800a258 <delay_ms+0x8>
}
 800a25e:	4770      	bx	lr
 800a260:	20002e70 	.word	0x20002e70

0800a264 <delay_ti>:
void delay_ti(ot_u16 n) {
 800a264:	b510      	push	{r4, lr}
    delay_ms(n);
 800a266:	f7ff fff3 	bl	800a250 <delay_ms>
}
 800a26a:	bd10      	pop	{r4, pc}

0800a26c <delay_us>:
#endif


#ifndef EXTF_delay_us
void delay_us(ot_u16 n) {
 800a26c:	0003      	movs	r3, r0
    ot_long c;
    c   = (platform_ext.clock_hz[0]>>10);   // Set cycles per ms
 800a26e:	4a04      	ldr	r2, [pc, #16]	; (800a280 <delay_us+0x14>)
 800a270:	6850      	ldr	r0, [r2, #4]
 800a272:	0a80      	lsrs	r0, r0, #10
    c  *= n;                                // Multiply by number of us
 800a274:	4358      	muls	r0, r3
    c >>= 10;                               // Divide into cycles per us
 800a276:	1280      	asrs	r0, r0, #10
    do {
        c -= 7;                         // 7 cycles per loop (measured)
 800a278:	3807      	subs	r0, #7
    } while (c > 0);
 800a27a:	2800      	cmp	r0, #0
 800a27c:	dcfc      	bgt.n	800a278 <delay_us+0xc>
}
 800a27e:	4770      	bx	lr
 800a280:	20002e70 	.word	0x20002e70

0800a284 <sub_memcpy_dma>:


#if MCU_CONFIG(MEMCPYDMA)
#   define MEMCPY_DMA_INT  (1 << ((MEMCPY_DMA_CHAN_ID-1)*4))

void sub_memcpy_dma(ot_u8* dest, ot_u8* src, ot_uint length) {
 800a284:	b570      	push	{r4, r5, r6, lr}
 800a286:	0004      	movs	r4, r0
 800a288:	000e      	movs	r6, r1
 800a28a:	0015      	movs	r5, r2
/// Use 8, 16, or 32 bit chunks based on detected alignment
    static const ot_u16 ccr[4]      = { 0x4AD1, 0x40D1, 0x45D1, 0x40D1 };
    static const ot_u16 len_div[4]  = { 2, 0, 1, 0 };
    ot_int align;

    platform_disable_interrupts();
 800a28c:	f7ff fd08 	bl	8009ca0 <platform_disable_interrupts>

    MEMCPY_DMACHAN->CCR     = 0;
 800a290:	4a0f      	ldr	r2, [pc, #60]	; (800a2d0 <sub_memcpy_dma+0x4c>)
 800a292:	2300      	movs	r3, #0
 800a294:	6013      	str	r3, [r2, #0]
    MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;
 800a296:	4b0f      	ldr	r3, [pc, #60]	; (800a2d4 <sub_memcpy_dma+0x50>)
 800a298:	2180      	movs	r1, #128	; 0x80
 800a29a:	0249      	lsls	r1, r1, #9
 800a29c:	6059      	str	r1, [r3, #4]
    MEMCPY_DMACHAN->CPAR    = (ot_u32)dest;
 800a29e:	6094      	str	r4, [r2, #8]
    MEMCPY_DMACHAN->CMAR    = (ot_u32)src;
 800a2a0:	60d6      	str	r6, [r2, #12]
    align                   = ((ot_u32)dest | (ot_u32)src | (ot_u32)length) & 3;
 800a2a2:	4334      	orrs	r4, r6
 800a2a4:	b2a4      	uxth	r4, r4
 800a2a6:	432c      	orrs	r4, r5
 800a2a8:	b224      	sxth	r4, r4
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	401c      	ands	r4, r3
    length                >>= len_div[align];
 800a2ae:	4b0a      	ldr	r3, [pc, #40]	; (800a2d8 <sub_memcpy_dma+0x54>)
 800a2b0:	0064      	lsls	r4, r4, #1
 800a2b2:	5ae1      	ldrh	r1, [r4, r3]
 800a2b4:	410d      	asrs	r5, r1
    MEMCPY_DMACHAN->CNDTR   = length;
 800a2b6:	042d      	lsls	r5, r5, #16
 800a2b8:	0c2d      	lsrs	r5, r5, #16
 800a2ba:	6055      	str	r5, [r2, #4]
    MEMCPY_DMACHAN->CCR     = ccr[align];
 800a2bc:	191c      	adds	r4, r3, r4
 800a2be:	8923      	ldrh	r3, [r4, #8]
 800a2c0:	6013      	str	r3, [r2, #0]
    while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 800a2c2:	4b04      	ldr	r3, [pc, #16]	; (800a2d4 <sub_memcpy_dma+0x50>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	03db      	lsls	r3, r3, #15
 800a2c8:	d5fb      	bpl.n	800a2c2 <sub_memcpy_dma+0x3e>

    platform_enable_interrupts();
 800a2ca:	f7ff fceb 	bl	8009ca4 <platform_enable_interrupts>
}
 800a2ce:	bd70      	pop	{r4, r5, r6, pc}
 800a2d0:	40020058 	.word	0x40020058
 800a2d4:	40020000 	.word	0x40020000
 800a2d8:	0800c7c4 	.word	0x0800c7c4

0800a2dc <sub_memcpy4_dma>:

    platform_enable_interrupts();
}


void sub_memcpy4_dma(ot_u32* dest, ot_u32* src, ot_uint length) {
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	0006      	movs	r6, r0
 800a2e0:	000d      	movs	r5, r1
 800a2e2:	0014      	movs	r4, r2
/// 32 bit chunks based on detected alignment
    platform_disable_interrupts();
 800a2e4:	f7ff fcdc 	bl	8009ca0 <platform_disable_interrupts>

    MEMCPY_DMACHAN->CCR     = 0;
 800a2e8:	4b09      	ldr	r3, [pc, #36]	; (800a310 <sub_memcpy4_dma+0x34>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	601a      	str	r2, [r3, #0]
    MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;
 800a2ee:	4a09      	ldr	r2, [pc, #36]	; (800a314 <sub_memcpy4_dma+0x38>)
 800a2f0:	2180      	movs	r1, #128	; 0x80
 800a2f2:	0249      	lsls	r1, r1, #9
 800a2f4:	6051      	str	r1, [r2, #4]
    MEMCPY_DMACHAN->CPAR    = (ot_u32)dest;
 800a2f6:	609e      	str	r6, [r3, #8]
    MEMCPY_DMACHAN->CMAR    = (ot_u32)src;
 800a2f8:	60dd      	str	r5, [r3, #12]
    MEMCPY_DMACHAN->CNDTR   = length;
 800a2fa:	605c      	str	r4, [r3, #4]
    MEMCPY_DMACHAN->CCR     = 0x4AD1;
 800a2fc:	4a06      	ldr	r2, [pc, #24]	; (800a318 <sub_memcpy4_dma+0x3c>)
 800a2fe:	601a      	str	r2, [r3, #0]
    while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 800a300:	4b04      	ldr	r3, [pc, #16]	; (800a314 <sub_memcpy4_dma+0x38>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	03db      	lsls	r3, r3, #15
 800a306:	d5fb      	bpl.n	800a300 <sub_memcpy4_dma+0x24>

    platform_enable_interrupts();
 800a308:	f7ff fccc 	bl	8009ca4 <platform_enable_interrupts>
}
 800a30c:	bd70      	pop	{r4, r5, r6, pc}
 800a30e:	46c0      	nop			; (mov r8, r8)
 800a310:	40020058 	.word	0x40020058
 800a314:	40020000 	.word	0x40020000
 800a318:	00004ad1 	.word	0x00004ad1

0800a31c <ot_memcpy>:
#endif  //MCU_CONFIG(MEMCPYDMA)




void ot_memcpy(ot_u8* dst, ot_u8* src, ot_uint length) {
 800a31c:	b510      	push	{r4, lr}
    if (length != 0) {
 800a31e:	2a00      	cmp	r2, #0
 800a320:	d100      	bne.n	800a324 <ot_memcpy+0x8>
        sub_memcpy_dma(dst, src, length);
#       else
        DUFF_DEVICE_8(*dst++, *src++, length);
#       endif
    }
}
 800a322:	bd10      	pop	{r4, pc}
        sub_memcpy_dma(dst, src, length);
 800a324:	f7ff ffae 	bl	800a284 <sub_memcpy_dma>
}
 800a328:	e7fb      	b.n	800a322 <ot_memcpy+0x6>

0800a32a <ot_memcpy_4>:
        ot_memcpy((ot_u8*)dst, (ot_u8*)src, length<<1);
#       endif
    }
}

void ot_memcpy_4(ot_u32* dst, ot_u32* src, ot_uint length) {
 800a32a:	b510      	push	{r4, lr}
    if (length != 0) {
 800a32c:	2a00      	cmp	r2, #0
 800a32e:	d100      	bne.n	800a332 <ot_memcpy_4+0x8>
        sub_memcpy4_dma( dst, src, length);
#       else
        ot_memcpy((ot_u8*)dst, (ot_u8*)src, length<<2);
#       endif
    }
}
 800a330:	bd10      	pop	{r4, pc}
        sub_memcpy4_dma( dst, src, length);
 800a332:	f7ff ffd3 	bl	800a2dc <sub_memcpy4_dma>
}
 800a336:	e7fb      	b.n	800a330 <ot_memcpy_4+0x6>

0800a338 <ot_memset>:


void ot_memset(ot_u8* dst, ot_u8 value, ot_uint length) {
 800a338:	b530      	push	{r4, r5, lr}
 800a33a:	b083      	sub	sp, #12
 800a33c:	0005      	movs	r5, r0
 800a33e:	1e14      	subs	r4, r2, #0
 800a340:	466b      	mov	r3, sp
 800a342:	71d9      	strb	r1, [r3, #7]
    if (length != 0) {
 800a344:	d101      	bne.n	800a34a <ot_memset+0x12>
#       else
        DUFF_DEVICE_8(*dst++, value, length);
#       endif
        platform_enable_interrupts();
    }
}
 800a346:	b003      	add	sp, #12
 800a348:	bd30      	pop	{r4, r5, pc}
        platform_disable_interrupts();
 800a34a:	f7ff fca9 	bl	8009ca0 <platform_disable_interrupts>
        MEMCPY_DMACHAN->CCR     = 0;
 800a34e:	4b0a      	ldr	r3, [pc, #40]	; (800a378 <ot_memset+0x40>)
 800a350:	2200      	movs	r2, #0
 800a352:	601a      	str	r2, [r3, #0]
        MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;       ///@todo see if this can be globalized
 800a354:	4a09      	ldr	r2, [pc, #36]	; (800a37c <ot_memset+0x44>)
 800a356:	2180      	movs	r1, #128	; 0x80
 800a358:	0249      	lsls	r1, r1, #9
 800a35a:	6051      	str	r1, [r2, #4]
        MEMCPY_DMACHAN->CPAR    = (ot_u32)dst;
 800a35c:	609d      	str	r5, [r3, #8]
        MEMCPY_DMACHAN->CMAR    = (ot_u32)&value;
 800a35e:	466a      	mov	r2, sp
 800a360:	3207      	adds	r2, #7
 800a362:	60da      	str	r2, [r3, #12]
        MEMCPY_DMACHAN->CNDTR   = length;
 800a364:	605c      	str	r4, [r3, #4]
        MEMCPY_DMACHAN->CCR     = DMA_CCR_DIR      | DMA_CCR_PINC     | \
 800a366:	4a06      	ldr	r2, [pc, #24]	; (800a380 <ot_memset+0x48>)
 800a368:	601a      	str	r2, [r3, #0]
        while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 800a36a:	4b04      	ldr	r3, [pc, #16]	; (800a37c <ot_memset+0x44>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	03db      	lsls	r3, r3, #15
 800a370:	d5fb      	bpl.n	800a36a <ot_memset+0x32>
        platform_enable_interrupts();
 800a372:	f7ff fc97 	bl	8009ca4 <platform_enable_interrupts>
}
 800a376:	e7e6      	b.n	800a346 <ot_memset+0xe>
 800a378:	40020058 	.word	0x40020058
 800a37c:	40020000 	.word	0x40020000
 800a380:	00004051 	.word	0x00004051

0800a384 <ot_memset_4>:

void ot_memset_2(ot_u16* dst, ot_u16 value, ot_uint length) {
    ot_memset( (ot_u8*)dst, (ot_u8)value, length<<1 );
}

void ot_memset_4(ot_u32* dst, ot_u32 value, ot_uint length) {
 800a384:	b510      	push	{r4, lr}
    ot_memset( (ot_u8*)dst, (ot_u8)value, length<<2 );
 800a386:	0092      	lsls	r2, r2, #2
 800a388:	b292      	uxth	r2, r2
 800a38a:	b2c9      	uxtb	r1, r1
 800a38c:	f7ff ffd4 	bl	800a338 <ot_memset>
}
 800a390:	bd10      	pop	{r4, pc}
	...

0800a394 <rand_prn16>:
    return (ot_u8)rand_prn16();
}



ot_u16 rand_prn16() {
 800a394:	b510      	push	{r4, lr}
    static ot_u16 _prn_freg;
    _prn_freg ^= LPTIM1->CNT;
 800a396:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <rand_prn16+0x18>)
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	4805      	ldr	r0, [pc, #20]	; (800a3b0 <rand_prn16+0x1c>)
 800a39c:	8802      	ldrh	r2, [r0, #0]
 800a39e:	405a      	eors	r2, r3
 800a3a0:	b292      	uxth	r2, r2
 800a3a2:	8002      	strh	r2, [r0, #0]
    return crc16drv_block_manual( (ot_u8*)&_prn_freg, 2, _prn_freg );
 800a3a4:	2102      	movs	r1, #2
 800a3a6:	f7fe fc09 	bl	8008bbc <crc16drv_block_manual>
}
 800a3aa:	bd10      	pop	{r4, pc}
 800a3ac:	40007c00 	.word	0x40007c00
 800a3b0:	200011fc 	.word	0x200011fc

0800a3b4 <rand_prn8>:
ot_u8 rand_prn8() {
 800a3b4:	b510      	push	{r4, lr}
    return (ot_u8)rand_prn16();
 800a3b6:	f7ff ffed 	bl	800a394 <rand_prn16>
 800a3ba:	b2c0      	uxtb	r0, r0
}
 800a3bc:	bd10      	pop	{r4, pc}
	...

0800a3c0 <vworm_init>:
}
#endif


#ifndef EXTF_vworm_init
ot_u8 vworm_init() {
 800a3c0:	b510      	push	{r4, lr}
    ot_memcpy_4(fsram, (ot_u32*)FLASH_FS_ADDR, sizeof(fsram)/4);
 800a3c2:	2280      	movs	r2, #128	; 0x80
 800a3c4:	00d2      	lsls	r2, r2, #3
 800a3c6:	4903      	ldr	r1, [pc, #12]	; (800a3d4 <vworm_init+0x14>)
 800a3c8:	4803      	ldr	r0, [pc, #12]	; (800a3d8 <vworm_init+0x18>)
 800a3ca:	f7ff ffae 	bl	800a32a <ot_memcpy_4>
    return 0;
}
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	bd10      	pop	{r4, pc}
 800a3d2:	46c0      	nop			; (mov r8, r8)
 800a3d4:	08017000 	.word	0x08017000
 800a3d8:	20001200 	.word	0x20001200

0800a3dc <vworm_read>:

#ifndef EXTF_vworm_read
ot_u16 vworm_read(vaddr addr) {
    ot_u16* data;
    addr   -= VWORM_BASE_VADDR;
    addr   &= ~1;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	4398      	bics	r0, r3
    data    = (ot_u16*)((ot_u8*)fsram + addr);
    return *data;
 800a3e0:	4b01      	ldr	r3, [pc, #4]	; (800a3e8 <vworm_read+0xc>)
 800a3e2:	5a18      	ldrh	r0, [r3, r0]
}
 800a3e4:	4770      	bx	lr
 800a3e6:	46c0      	nop			; (mov r8, r8)
 800a3e8:	20001200 	.word	0x20001200

0800a3ec <vworm_write>:

#ifndef EXTF_vworm_write
ot_u8 vworm_write(vaddr addr, ot_u16 data) {
    ot_u16* aptr;
    addr   -= VWORM_BASE_VADDR;
    addr   &= ~1;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	4398      	bics	r0, r3
    aptr    = (ot_u16*)((ot_u8*)fsram + addr);
    *aptr   = data;
 800a3f0:	4b01      	ldr	r3, [pc, #4]	; (800a3f8 <vworm_write+0xc>)
 800a3f2:	5219      	strh	r1, [r3, r0]
    return 0;
}
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	4770      	bx	lr
 800a3f8:	20001200 	.word	0x20001200

0800a3fc <vworm_mark>:
#endif
    


#ifndef EXTF_vworm_mark
ot_u8 vworm_mark(vaddr addr, ot_u16 value) {
 800a3fc:	b510      	push	{r4, lr}
    return vworm_write(addr, value);
 800a3fe:	f7ff fff5 	bl	800a3ec <vworm_write>
}
 800a402:	bd10      	pop	{r4, pc}

0800a404 <vworm_wipeblock>:
#endif

#ifndef EXTF_vworm_wipeblock
ot_u8 vworm_wipeblock(vaddr addr, ot_uint wipe_span) {
    return 0;
}
 800a404:	2000      	movs	r0, #0
 800a406:	4770      	bx	lr

0800a408 <vsram_read>:
  * ========================================================================<BR>
  * SRAM version of Veelite doesn't utilize VSRAM
  */

#ifndef EXTF_vsram_read
ot_u16 vsram_read(vaddr addr) {
 800a408:	b510      	push	{r4, lr}
    return vworm_read(addr);
 800a40a:	f7ff ffe7 	bl	800a3dc <vworm_read>
}
 800a40e:	bd10      	pop	{r4, pc}

0800a410 <vsram_mark>:
#endif

#ifndef EXTF_vsram_mark
ot_u8 vsram_mark(vaddr addr, ot_u16 value) {
 800a410:	b510      	push	{r4, lr}
    return vworm_mark(addr, value);
 800a412:	f7ff fff3 	bl	800a3fc <vworm_mark>
}
 800a416:	bd10      	pop	{r4, pc}

0800a418 <__assert_func>:
 800a418:	b530      	push	{r4, r5, lr}
 800a41a:	001c      	movs	r4, r3
 800a41c:	4b09      	ldr	r3, [pc, #36]	; (800a444 <__assert_func+0x2c>)
 800a41e:	0005      	movs	r5, r0
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	b085      	sub	sp, #20
 800a424:	68d8      	ldr	r0, [r3, #12]
 800a426:	4b08      	ldr	r3, [pc, #32]	; (800a448 <__assert_func+0x30>)
 800a428:	2a00      	cmp	r2, #0
 800a42a:	d101      	bne.n	800a430 <__assert_func+0x18>
 800a42c:	4b07      	ldr	r3, [pc, #28]	; (800a44c <__assert_func+0x34>)
 800a42e:	001a      	movs	r2, r3
 800a430:	9202      	str	r2, [sp, #8]
 800a432:	9301      	str	r3, [sp, #4]
 800a434:	9100      	str	r1, [sp, #0]
 800a436:	002b      	movs	r3, r5
 800a438:	0022      	movs	r2, r4
 800a43a:	4905      	ldr	r1, [pc, #20]	; (800a450 <__assert_func+0x38>)
 800a43c:	f000 f80a 	bl	800a454 <fiprintf>
 800a440:	f000 fba0 	bl	800ab84 <abort>
 800a444:	20000140 	.word	0x20000140
 800a448:	0800c8ec 	.word	0x0800c8ec
 800a44c:	0800c927 	.word	0x0800c927
 800a450:	0800c8f9 	.word	0x0800c8f9

0800a454 <fiprintf>:
 800a454:	b40e      	push	{r1, r2, r3}
 800a456:	b503      	push	{r0, r1, lr}
 800a458:	0001      	movs	r1, r0
 800a45a:	ab03      	add	r3, sp, #12
 800a45c:	4804      	ldr	r0, [pc, #16]	; (800a470 <fiprintf+0x1c>)
 800a45e:	cb04      	ldmia	r3!, {r2}
 800a460:	6800      	ldr	r0, [r0, #0]
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	f000 f836 	bl	800a4d4 <_vfiprintf_r>
 800a468:	b002      	add	sp, #8
 800a46a:	bc08      	pop	{r3}
 800a46c:	b003      	add	sp, #12
 800a46e:	4718      	bx	r3
 800a470:	20000140 	.word	0x20000140

0800a474 <memset>:
 800a474:	0003      	movs	r3, r0
 800a476:	1812      	adds	r2, r2, r0
 800a478:	4293      	cmp	r3, r2
 800a47a:	d100      	bne.n	800a47e <memset+0xa>
 800a47c:	4770      	bx	lr
 800a47e:	7019      	strb	r1, [r3, #0]
 800a480:	3301      	adds	r3, #1
 800a482:	e7f9      	b.n	800a478 <memset+0x4>

0800a484 <__sfputc_r>:
 800a484:	6893      	ldr	r3, [r2, #8]
 800a486:	b510      	push	{r4, lr}
 800a488:	3b01      	subs	r3, #1
 800a48a:	6093      	str	r3, [r2, #8]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	da04      	bge.n	800a49a <__sfputc_r+0x16>
 800a490:	6994      	ldr	r4, [r2, #24]
 800a492:	42a3      	cmp	r3, r4
 800a494:	db07      	blt.n	800a4a6 <__sfputc_r+0x22>
 800a496:	290a      	cmp	r1, #10
 800a498:	d005      	beq.n	800a4a6 <__sfputc_r+0x22>
 800a49a:	6813      	ldr	r3, [r2, #0]
 800a49c:	1c58      	adds	r0, r3, #1
 800a49e:	6010      	str	r0, [r2, #0]
 800a4a0:	7019      	strb	r1, [r3, #0]
 800a4a2:	0008      	movs	r0, r1
 800a4a4:	bd10      	pop	{r4, pc}
 800a4a6:	f000 faa1 	bl	800a9ec <__swbuf_r>
 800a4aa:	0001      	movs	r1, r0
 800a4ac:	e7f9      	b.n	800a4a2 <__sfputc_r+0x1e>

0800a4ae <__sfputs_r>:
 800a4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b0:	0006      	movs	r6, r0
 800a4b2:	000f      	movs	r7, r1
 800a4b4:	0014      	movs	r4, r2
 800a4b6:	18d5      	adds	r5, r2, r3
 800a4b8:	42ac      	cmp	r4, r5
 800a4ba:	d101      	bne.n	800a4c0 <__sfputs_r+0x12>
 800a4bc:	2000      	movs	r0, #0
 800a4be:	e007      	b.n	800a4d0 <__sfputs_r+0x22>
 800a4c0:	7821      	ldrb	r1, [r4, #0]
 800a4c2:	003a      	movs	r2, r7
 800a4c4:	0030      	movs	r0, r6
 800a4c6:	f7ff ffdd 	bl	800a484 <__sfputc_r>
 800a4ca:	3401      	adds	r4, #1
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d1f3      	bne.n	800a4b8 <__sfputs_r+0xa>
 800a4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4d4 <_vfiprintf_r>:
 800a4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4d6:	b0a1      	sub	sp, #132	; 0x84
 800a4d8:	9003      	str	r0, [sp, #12]
 800a4da:	000f      	movs	r7, r1
 800a4dc:	0016      	movs	r6, r2
 800a4de:	001d      	movs	r5, r3
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d005      	beq.n	800a4f0 <_vfiprintf_r+0x1c>
 800a4e4:	6983      	ldr	r3, [r0, #24]
 800a4e6:	9305      	str	r3, [sp, #20]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <_vfiprintf_r+0x1c>
 800a4ec:	f000 fc4a 	bl	800ad84 <__sinit>
 800a4f0:	4b7b      	ldr	r3, [pc, #492]	; (800a6e0 <_vfiprintf_r+0x20c>)
 800a4f2:	429f      	cmp	r7, r3
 800a4f4:	d15c      	bne.n	800a5b0 <_vfiprintf_r+0xdc>
 800a4f6:	9b03      	ldr	r3, [sp, #12]
 800a4f8:	685f      	ldr	r7, [r3, #4]
 800a4fa:	89bb      	ldrh	r3, [r7, #12]
 800a4fc:	071b      	lsls	r3, r3, #28
 800a4fe:	d563      	bpl.n	800a5c8 <_vfiprintf_r+0xf4>
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d060      	beq.n	800a5c8 <_vfiprintf_r+0xf4>
 800a506:	2300      	movs	r3, #0
 800a508:	ac08      	add	r4, sp, #32
 800a50a:	6163      	str	r3, [r4, #20]
 800a50c:	3320      	adds	r3, #32
 800a50e:	7663      	strb	r3, [r4, #25]
 800a510:	3310      	adds	r3, #16
 800a512:	76a3      	strb	r3, [r4, #26]
 800a514:	9507      	str	r5, [sp, #28]
 800a516:	0035      	movs	r5, r6
 800a518:	782b      	ldrb	r3, [r5, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <_vfiprintf_r+0x4e>
 800a51e:	2b25      	cmp	r3, #37	; 0x25
 800a520:	d15c      	bne.n	800a5dc <_vfiprintf_r+0x108>
 800a522:	1bab      	subs	r3, r5, r6
 800a524:	9305      	str	r3, [sp, #20]
 800a526:	d00c      	beq.n	800a542 <_vfiprintf_r+0x6e>
 800a528:	0032      	movs	r2, r6
 800a52a:	0039      	movs	r1, r7
 800a52c:	9803      	ldr	r0, [sp, #12]
 800a52e:	f7ff ffbe 	bl	800a4ae <__sfputs_r>
 800a532:	1c43      	adds	r3, r0, #1
 800a534:	d100      	bne.n	800a538 <_vfiprintf_r+0x64>
 800a536:	e0c4      	b.n	800a6c2 <_vfiprintf_r+0x1ee>
 800a538:	6962      	ldr	r2, [r4, #20]
 800a53a:	9b05      	ldr	r3, [sp, #20]
 800a53c:	4694      	mov	ip, r2
 800a53e:	4463      	add	r3, ip
 800a540:	6163      	str	r3, [r4, #20]
 800a542:	782b      	ldrb	r3, [r5, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d100      	bne.n	800a54a <_vfiprintf_r+0x76>
 800a548:	e0bb      	b.n	800a6c2 <_vfiprintf_r+0x1ee>
 800a54a:	2201      	movs	r2, #1
 800a54c:	2300      	movs	r3, #0
 800a54e:	4252      	negs	r2, r2
 800a550:	6062      	str	r2, [r4, #4]
 800a552:	a904      	add	r1, sp, #16
 800a554:	3254      	adds	r2, #84	; 0x54
 800a556:	1852      	adds	r2, r2, r1
 800a558:	1c6e      	adds	r6, r5, #1
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	60e3      	str	r3, [r4, #12]
 800a55e:	60a3      	str	r3, [r4, #8]
 800a560:	7013      	strb	r3, [r2, #0]
 800a562:	65a3      	str	r3, [r4, #88]	; 0x58
 800a564:	7831      	ldrb	r1, [r6, #0]
 800a566:	2205      	movs	r2, #5
 800a568:	485e      	ldr	r0, [pc, #376]	; (800a6e4 <_vfiprintf_r+0x210>)
 800a56a:	f000 fd0b 	bl	800af84 <memchr>
 800a56e:	1c75      	adds	r5, r6, #1
 800a570:	2800      	cmp	r0, #0
 800a572:	d135      	bne.n	800a5e0 <_vfiprintf_r+0x10c>
 800a574:	6822      	ldr	r2, [r4, #0]
 800a576:	06d3      	lsls	r3, r2, #27
 800a578:	d504      	bpl.n	800a584 <_vfiprintf_r+0xb0>
 800a57a:	2353      	movs	r3, #83	; 0x53
 800a57c:	a904      	add	r1, sp, #16
 800a57e:	185b      	adds	r3, r3, r1
 800a580:	2120      	movs	r1, #32
 800a582:	7019      	strb	r1, [r3, #0]
 800a584:	0713      	lsls	r3, r2, #28
 800a586:	d504      	bpl.n	800a592 <_vfiprintf_r+0xbe>
 800a588:	2353      	movs	r3, #83	; 0x53
 800a58a:	a904      	add	r1, sp, #16
 800a58c:	185b      	adds	r3, r3, r1
 800a58e:	212b      	movs	r1, #43	; 0x2b
 800a590:	7019      	strb	r1, [r3, #0]
 800a592:	7833      	ldrb	r3, [r6, #0]
 800a594:	2b2a      	cmp	r3, #42	; 0x2a
 800a596:	d02c      	beq.n	800a5f2 <_vfiprintf_r+0x11e>
 800a598:	0035      	movs	r5, r6
 800a59a:	2100      	movs	r1, #0
 800a59c:	200a      	movs	r0, #10
 800a59e:	68e3      	ldr	r3, [r4, #12]
 800a5a0:	782a      	ldrb	r2, [r5, #0]
 800a5a2:	1c6e      	adds	r6, r5, #1
 800a5a4:	3a30      	subs	r2, #48	; 0x30
 800a5a6:	2a09      	cmp	r2, #9
 800a5a8:	d964      	bls.n	800a674 <_vfiprintf_r+0x1a0>
 800a5aa:	2900      	cmp	r1, #0
 800a5ac:	d02e      	beq.n	800a60c <_vfiprintf_r+0x138>
 800a5ae:	e026      	b.n	800a5fe <_vfiprintf_r+0x12a>
 800a5b0:	4b4d      	ldr	r3, [pc, #308]	; (800a6e8 <_vfiprintf_r+0x214>)
 800a5b2:	429f      	cmp	r7, r3
 800a5b4:	d102      	bne.n	800a5bc <_vfiprintf_r+0xe8>
 800a5b6:	9b03      	ldr	r3, [sp, #12]
 800a5b8:	689f      	ldr	r7, [r3, #8]
 800a5ba:	e79e      	b.n	800a4fa <_vfiprintf_r+0x26>
 800a5bc:	4b4b      	ldr	r3, [pc, #300]	; (800a6ec <_vfiprintf_r+0x218>)
 800a5be:	429f      	cmp	r7, r3
 800a5c0:	d19b      	bne.n	800a4fa <_vfiprintf_r+0x26>
 800a5c2:	9b03      	ldr	r3, [sp, #12]
 800a5c4:	68df      	ldr	r7, [r3, #12]
 800a5c6:	e798      	b.n	800a4fa <_vfiprintf_r+0x26>
 800a5c8:	0039      	movs	r1, r7
 800a5ca:	9803      	ldr	r0, [sp, #12]
 800a5cc:	f000 fa64 	bl	800aa98 <__swsetup_r>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d098      	beq.n	800a506 <_vfiprintf_r+0x32>
 800a5d4:	2001      	movs	r0, #1
 800a5d6:	4240      	negs	r0, r0
 800a5d8:	b021      	add	sp, #132	; 0x84
 800a5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5dc:	3501      	adds	r5, #1
 800a5de:	e79b      	b.n	800a518 <_vfiprintf_r+0x44>
 800a5e0:	4b40      	ldr	r3, [pc, #256]	; (800a6e4 <_vfiprintf_r+0x210>)
 800a5e2:	6822      	ldr	r2, [r4, #0]
 800a5e4:	1ac0      	subs	r0, r0, r3
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	4083      	lsls	r3, r0
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	002e      	movs	r6, r5
 800a5f0:	e7b8      	b.n	800a564 <_vfiprintf_r+0x90>
 800a5f2:	9b07      	ldr	r3, [sp, #28]
 800a5f4:	1d19      	adds	r1, r3, #4
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	9107      	str	r1, [sp, #28]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	db01      	blt.n	800a602 <_vfiprintf_r+0x12e>
 800a5fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800a600:	e004      	b.n	800a60c <_vfiprintf_r+0x138>
 800a602:	425b      	negs	r3, r3
 800a604:	60e3      	str	r3, [r4, #12]
 800a606:	2302      	movs	r3, #2
 800a608:	4313      	orrs	r3, r2
 800a60a:	6023      	str	r3, [r4, #0]
 800a60c:	782b      	ldrb	r3, [r5, #0]
 800a60e:	2b2e      	cmp	r3, #46	; 0x2e
 800a610:	d10a      	bne.n	800a628 <_vfiprintf_r+0x154>
 800a612:	786b      	ldrb	r3, [r5, #1]
 800a614:	2b2a      	cmp	r3, #42	; 0x2a
 800a616:	d135      	bne.n	800a684 <_vfiprintf_r+0x1b0>
 800a618:	9b07      	ldr	r3, [sp, #28]
 800a61a:	3502      	adds	r5, #2
 800a61c:	1d1a      	adds	r2, r3, #4
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	9207      	str	r2, [sp, #28]
 800a622:	2b00      	cmp	r3, #0
 800a624:	db2b      	blt.n	800a67e <_vfiprintf_r+0x1aa>
 800a626:	9309      	str	r3, [sp, #36]	; 0x24
 800a628:	4e31      	ldr	r6, [pc, #196]	; (800a6f0 <_vfiprintf_r+0x21c>)
 800a62a:	7829      	ldrb	r1, [r5, #0]
 800a62c:	2203      	movs	r2, #3
 800a62e:	0030      	movs	r0, r6
 800a630:	f000 fca8 	bl	800af84 <memchr>
 800a634:	2800      	cmp	r0, #0
 800a636:	d006      	beq.n	800a646 <_vfiprintf_r+0x172>
 800a638:	2340      	movs	r3, #64	; 0x40
 800a63a:	1b80      	subs	r0, r0, r6
 800a63c:	4083      	lsls	r3, r0
 800a63e:	6822      	ldr	r2, [r4, #0]
 800a640:	3501      	adds	r5, #1
 800a642:	4313      	orrs	r3, r2
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	7829      	ldrb	r1, [r5, #0]
 800a648:	2206      	movs	r2, #6
 800a64a:	482a      	ldr	r0, [pc, #168]	; (800a6f4 <_vfiprintf_r+0x220>)
 800a64c:	1c6e      	adds	r6, r5, #1
 800a64e:	7621      	strb	r1, [r4, #24]
 800a650:	f000 fc98 	bl	800af84 <memchr>
 800a654:	2800      	cmp	r0, #0
 800a656:	d03a      	beq.n	800a6ce <_vfiprintf_r+0x1fa>
 800a658:	4b27      	ldr	r3, [pc, #156]	; (800a6f8 <_vfiprintf_r+0x224>)
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d125      	bne.n	800a6aa <_vfiprintf_r+0x1d6>
 800a65e:	2207      	movs	r2, #7
 800a660:	9b07      	ldr	r3, [sp, #28]
 800a662:	3307      	adds	r3, #7
 800a664:	4393      	bics	r3, r2
 800a666:	3308      	adds	r3, #8
 800a668:	9307      	str	r3, [sp, #28]
 800a66a:	6963      	ldr	r3, [r4, #20]
 800a66c:	9a04      	ldr	r2, [sp, #16]
 800a66e:	189b      	adds	r3, r3, r2
 800a670:	6163      	str	r3, [r4, #20]
 800a672:	e750      	b.n	800a516 <_vfiprintf_r+0x42>
 800a674:	4343      	muls	r3, r0
 800a676:	2101      	movs	r1, #1
 800a678:	189b      	adds	r3, r3, r2
 800a67a:	0035      	movs	r5, r6
 800a67c:	e790      	b.n	800a5a0 <_vfiprintf_r+0xcc>
 800a67e:	2301      	movs	r3, #1
 800a680:	425b      	negs	r3, r3
 800a682:	e7d0      	b.n	800a626 <_vfiprintf_r+0x152>
 800a684:	2300      	movs	r3, #0
 800a686:	200a      	movs	r0, #10
 800a688:	001a      	movs	r2, r3
 800a68a:	3501      	adds	r5, #1
 800a68c:	6063      	str	r3, [r4, #4]
 800a68e:	7829      	ldrb	r1, [r5, #0]
 800a690:	1c6e      	adds	r6, r5, #1
 800a692:	3930      	subs	r1, #48	; 0x30
 800a694:	2909      	cmp	r1, #9
 800a696:	d903      	bls.n	800a6a0 <_vfiprintf_r+0x1cc>
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d0c5      	beq.n	800a628 <_vfiprintf_r+0x154>
 800a69c:	9209      	str	r2, [sp, #36]	; 0x24
 800a69e:	e7c3      	b.n	800a628 <_vfiprintf_r+0x154>
 800a6a0:	4342      	muls	r2, r0
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	1852      	adds	r2, r2, r1
 800a6a6:	0035      	movs	r5, r6
 800a6a8:	e7f1      	b.n	800a68e <_vfiprintf_r+0x1ba>
 800a6aa:	ab07      	add	r3, sp, #28
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	003a      	movs	r2, r7
 800a6b0:	4b12      	ldr	r3, [pc, #72]	; (800a6fc <_vfiprintf_r+0x228>)
 800a6b2:	0021      	movs	r1, r4
 800a6b4:	9803      	ldr	r0, [sp, #12]
 800a6b6:	e000      	b.n	800a6ba <_vfiprintf_r+0x1e6>
 800a6b8:	bf00      	nop
 800a6ba:	9004      	str	r0, [sp, #16]
 800a6bc:	9b04      	ldr	r3, [sp, #16]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	d1d3      	bne.n	800a66a <_vfiprintf_r+0x196>
 800a6c2:	89bb      	ldrh	r3, [r7, #12]
 800a6c4:	065b      	lsls	r3, r3, #25
 800a6c6:	d500      	bpl.n	800a6ca <_vfiprintf_r+0x1f6>
 800a6c8:	e784      	b.n	800a5d4 <_vfiprintf_r+0x100>
 800a6ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a6cc:	e784      	b.n	800a5d8 <_vfiprintf_r+0x104>
 800a6ce:	ab07      	add	r3, sp, #28
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	003a      	movs	r2, r7
 800a6d4:	4b09      	ldr	r3, [pc, #36]	; (800a6fc <_vfiprintf_r+0x228>)
 800a6d6:	0021      	movs	r1, r4
 800a6d8:	9803      	ldr	r0, [sp, #12]
 800a6da:	f000 f87f 	bl	800a7dc <_printf_i>
 800a6de:	e7ec      	b.n	800a6ba <_vfiprintf_r+0x1e6>
 800a6e0:	0800c980 	.word	0x0800c980
 800a6e4:	0800c92c 	.word	0x0800c92c
 800a6e8:	0800c9a0 	.word	0x0800c9a0
 800a6ec:	0800c960 	.word	0x0800c960
 800a6f0:	0800c932 	.word	0x0800c932
 800a6f4:	0800c936 	.word	0x0800c936
 800a6f8:	00000000 	.word	0x00000000
 800a6fc:	0800a4af 	.word	0x0800a4af

0800a700 <_printf_common>:
 800a700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a702:	0015      	movs	r5, r2
 800a704:	9301      	str	r3, [sp, #4]
 800a706:	688a      	ldr	r2, [r1, #8]
 800a708:	690b      	ldr	r3, [r1, #16]
 800a70a:	9000      	str	r0, [sp, #0]
 800a70c:	000c      	movs	r4, r1
 800a70e:	4293      	cmp	r3, r2
 800a710:	da00      	bge.n	800a714 <_printf_common+0x14>
 800a712:	0013      	movs	r3, r2
 800a714:	0022      	movs	r2, r4
 800a716:	602b      	str	r3, [r5, #0]
 800a718:	3243      	adds	r2, #67	; 0x43
 800a71a:	7812      	ldrb	r2, [r2, #0]
 800a71c:	2a00      	cmp	r2, #0
 800a71e:	d001      	beq.n	800a724 <_printf_common+0x24>
 800a720:	3301      	adds	r3, #1
 800a722:	602b      	str	r3, [r5, #0]
 800a724:	6823      	ldr	r3, [r4, #0]
 800a726:	069b      	lsls	r3, r3, #26
 800a728:	d502      	bpl.n	800a730 <_printf_common+0x30>
 800a72a:	682b      	ldr	r3, [r5, #0]
 800a72c:	3302      	adds	r3, #2
 800a72e:	602b      	str	r3, [r5, #0]
 800a730:	2706      	movs	r7, #6
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	401f      	ands	r7, r3
 800a736:	d027      	beq.n	800a788 <_printf_common+0x88>
 800a738:	0023      	movs	r3, r4
 800a73a:	3343      	adds	r3, #67	; 0x43
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	1e5a      	subs	r2, r3, #1
 800a740:	4193      	sbcs	r3, r2
 800a742:	6822      	ldr	r2, [r4, #0]
 800a744:	0692      	lsls	r2, r2, #26
 800a746:	d430      	bmi.n	800a7aa <_printf_common+0xaa>
 800a748:	0022      	movs	r2, r4
 800a74a:	9901      	ldr	r1, [sp, #4]
 800a74c:	3243      	adds	r2, #67	; 0x43
 800a74e:	9800      	ldr	r0, [sp, #0]
 800a750:	9e08      	ldr	r6, [sp, #32]
 800a752:	47b0      	blx	r6
 800a754:	1c43      	adds	r3, r0, #1
 800a756:	d025      	beq.n	800a7a4 <_printf_common+0xa4>
 800a758:	2306      	movs	r3, #6
 800a75a:	6820      	ldr	r0, [r4, #0]
 800a75c:	682a      	ldr	r2, [r5, #0]
 800a75e:	68e1      	ldr	r1, [r4, #12]
 800a760:	4003      	ands	r3, r0
 800a762:	2500      	movs	r5, #0
 800a764:	2b04      	cmp	r3, #4
 800a766:	d103      	bne.n	800a770 <_printf_common+0x70>
 800a768:	1a8d      	subs	r5, r1, r2
 800a76a:	43eb      	mvns	r3, r5
 800a76c:	17db      	asrs	r3, r3, #31
 800a76e:	401d      	ands	r5, r3
 800a770:	68a3      	ldr	r3, [r4, #8]
 800a772:	6922      	ldr	r2, [r4, #16]
 800a774:	4293      	cmp	r3, r2
 800a776:	dd01      	ble.n	800a77c <_printf_common+0x7c>
 800a778:	1a9b      	subs	r3, r3, r2
 800a77a:	18ed      	adds	r5, r5, r3
 800a77c:	2700      	movs	r7, #0
 800a77e:	42bd      	cmp	r5, r7
 800a780:	d120      	bne.n	800a7c4 <_printf_common+0xc4>
 800a782:	2000      	movs	r0, #0
 800a784:	e010      	b.n	800a7a8 <_printf_common+0xa8>
 800a786:	3701      	adds	r7, #1
 800a788:	68e3      	ldr	r3, [r4, #12]
 800a78a:	682a      	ldr	r2, [r5, #0]
 800a78c:	1a9b      	subs	r3, r3, r2
 800a78e:	42bb      	cmp	r3, r7
 800a790:	ddd2      	ble.n	800a738 <_printf_common+0x38>
 800a792:	0022      	movs	r2, r4
 800a794:	2301      	movs	r3, #1
 800a796:	3219      	adds	r2, #25
 800a798:	9901      	ldr	r1, [sp, #4]
 800a79a:	9800      	ldr	r0, [sp, #0]
 800a79c:	9e08      	ldr	r6, [sp, #32]
 800a79e:	47b0      	blx	r6
 800a7a0:	1c43      	adds	r3, r0, #1
 800a7a2:	d1f0      	bne.n	800a786 <_printf_common+0x86>
 800a7a4:	2001      	movs	r0, #1
 800a7a6:	4240      	negs	r0, r0
 800a7a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7aa:	2030      	movs	r0, #48	; 0x30
 800a7ac:	18e1      	adds	r1, r4, r3
 800a7ae:	3143      	adds	r1, #67	; 0x43
 800a7b0:	7008      	strb	r0, [r1, #0]
 800a7b2:	0021      	movs	r1, r4
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	3145      	adds	r1, #69	; 0x45
 800a7b8:	7809      	ldrb	r1, [r1, #0]
 800a7ba:	18a2      	adds	r2, r4, r2
 800a7bc:	3243      	adds	r2, #67	; 0x43
 800a7be:	3302      	adds	r3, #2
 800a7c0:	7011      	strb	r1, [r2, #0]
 800a7c2:	e7c1      	b.n	800a748 <_printf_common+0x48>
 800a7c4:	0022      	movs	r2, r4
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	321a      	adds	r2, #26
 800a7ca:	9901      	ldr	r1, [sp, #4]
 800a7cc:	9800      	ldr	r0, [sp, #0]
 800a7ce:	9e08      	ldr	r6, [sp, #32]
 800a7d0:	47b0      	blx	r6
 800a7d2:	1c43      	adds	r3, r0, #1
 800a7d4:	d0e6      	beq.n	800a7a4 <_printf_common+0xa4>
 800a7d6:	3701      	adds	r7, #1
 800a7d8:	e7d1      	b.n	800a77e <_printf_common+0x7e>
	...

0800a7dc <_printf_i>:
 800a7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7de:	b089      	sub	sp, #36	; 0x24
 800a7e0:	9204      	str	r2, [sp, #16]
 800a7e2:	000a      	movs	r2, r1
 800a7e4:	3243      	adds	r2, #67	; 0x43
 800a7e6:	9305      	str	r3, [sp, #20]
 800a7e8:	9003      	str	r0, [sp, #12]
 800a7ea:	9202      	str	r2, [sp, #8]
 800a7ec:	7e0a      	ldrb	r2, [r1, #24]
 800a7ee:	000c      	movs	r4, r1
 800a7f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7f2:	2a6e      	cmp	r2, #110	; 0x6e
 800a7f4:	d100      	bne.n	800a7f8 <_printf_i+0x1c>
 800a7f6:	e086      	b.n	800a906 <_printf_i+0x12a>
 800a7f8:	d81f      	bhi.n	800a83a <_printf_i+0x5e>
 800a7fa:	2a63      	cmp	r2, #99	; 0x63
 800a7fc:	d033      	beq.n	800a866 <_printf_i+0x8a>
 800a7fe:	d808      	bhi.n	800a812 <_printf_i+0x36>
 800a800:	2a00      	cmp	r2, #0
 800a802:	d100      	bne.n	800a806 <_printf_i+0x2a>
 800a804:	e08c      	b.n	800a920 <_printf_i+0x144>
 800a806:	2a58      	cmp	r2, #88	; 0x58
 800a808:	d04d      	beq.n	800a8a6 <_printf_i+0xca>
 800a80a:	0025      	movs	r5, r4
 800a80c:	3542      	adds	r5, #66	; 0x42
 800a80e:	702a      	strb	r2, [r5, #0]
 800a810:	e030      	b.n	800a874 <_printf_i+0x98>
 800a812:	2a64      	cmp	r2, #100	; 0x64
 800a814:	d001      	beq.n	800a81a <_printf_i+0x3e>
 800a816:	2a69      	cmp	r2, #105	; 0x69
 800a818:	d1f7      	bne.n	800a80a <_printf_i+0x2e>
 800a81a:	6819      	ldr	r1, [r3, #0]
 800a81c:	6825      	ldr	r5, [r4, #0]
 800a81e:	1d0a      	adds	r2, r1, #4
 800a820:	0628      	lsls	r0, r5, #24
 800a822:	d529      	bpl.n	800a878 <_printf_i+0x9c>
 800a824:	6808      	ldr	r0, [r1, #0]
 800a826:	601a      	str	r2, [r3, #0]
 800a828:	2800      	cmp	r0, #0
 800a82a:	da03      	bge.n	800a834 <_printf_i+0x58>
 800a82c:	232d      	movs	r3, #45	; 0x2d
 800a82e:	9a02      	ldr	r2, [sp, #8]
 800a830:	4240      	negs	r0, r0
 800a832:	7013      	strb	r3, [r2, #0]
 800a834:	4e6b      	ldr	r6, [pc, #428]	; (800a9e4 <_printf_i+0x208>)
 800a836:	270a      	movs	r7, #10
 800a838:	e04f      	b.n	800a8da <_printf_i+0xfe>
 800a83a:	2a73      	cmp	r2, #115	; 0x73
 800a83c:	d074      	beq.n	800a928 <_printf_i+0x14c>
 800a83e:	d808      	bhi.n	800a852 <_printf_i+0x76>
 800a840:	2a6f      	cmp	r2, #111	; 0x6f
 800a842:	d01f      	beq.n	800a884 <_printf_i+0xa8>
 800a844:	2a70      	cmp	r2, #112	; 0x70
 800a846:	d1e0      	bne.n	800a80a <_printf_i+0x2e>
 800a848:	2220      	movs	r2, #32
 800a84a:	6809      	ldr	r1, [r1, #0]
 800a84c:	430a      	orrs	r2, r1
 800a84e:	6022      	str	r2, [r4, #0]
 800a850:	e003      	b.n	800a85a <_printf_i+0x7e>
 800a852:	2a75      	cmp	r2, #117	; 0x75
 800a854:	d016      	beq.n	800a884 <_printf_i+0xa8>
 800a856:	2a78      	cmp	r2, #120	; 0x78
 800a858:	d1d7      	bne.n	800a80a <_printf_i+0x2e>
 800a85a:	0022      	movs	r2, r4
 800a85c:	2178      	movs	r1, #120	; 0x78
 800a85e:	3245      	adds	r2, #69	; 0x45
 800a860:	7011      	strb	r1, [r2, #0]
 800a862:	4e61      	ldr	r6, [pc, #388]	; (800a9e8 <_printf_i+0x20c>)
 800a864:	e022      	b.n	800a8ac <_printf_i+0xd0>
 800a866:	0025      	movs	r5, r4
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	3542      	adds	r5, #66	; 0x42
 800a86c:	1d11      	adds	r1, r2, #4
 800a86e:	6019      	str	r1, [r3, #0]
 800a870:	6813      	ldr	r3, [r2, #0]
 800a872:	702b      	strb	r3, [r5, #0]
 800a874:	2301      	movs	r3, #1
 800a876:	e065      	b.n	800a944 <_printf_i+0x168>
 800a878:	6808      	ldr	r0, [r1, #0]
 800a87a:	601a      	str	r2, [r3, #0]
 800a87c:	0669      	lsls	r1, r5, #25
 800a87e:	d5d3      	bpl.n	800a828 <_printf_i+0x4c>
 800a880:	b200      	sxth	r0, r0
 800a882:	e7d1      	b.n	800a828 <_printf_i+0x4c>
 800a884:	6819      	ldr	r1, [r3, #0]
 800a886:	6825      	ldr	r5, [r4, #0]
 800a888:	1d08      	adds	r0, r1, #4
 800a88a:	6018      	str	r0, [r3, #0]
 800a88c:	6808      	ldr	r0, [r1, #0]
 800a88e:	062e      	lsls	r6, r5, #24
 800a890:	d505      	bpl.n	800a89e <_printf_i+0xc2>
 800a892:	4e54      	ldr	r6, [pc, #336]	; (800a9e4 <_printf_i+0x208>)
 800a894:	2708      	movs	r7, #8
 800a896:	2a6f      	cmp	r2, #111	; 0x6f
 800a898:	d01b      	beq.n	800a8d2 <_printf_i+0xf6>
 800a89a:	270a      	movs	r7, #10
 800a89c:	e019      	b.n	800a8d2 <_printf_i+0xf6>
 800a89e:	066d      	lsls	r5, r5, #25
 800a8a0:	d5f7      	bpl.n	800a892 <_printf_i+0xb6>
 800a8a2:	b280      	uxth	r0, r0
 800a8a4:	e7f5      	b.n	800a892 <_printf_i+0xb6>
 800a8a6:	3145      	adds	r1, #69	; 0x45
 800a8a8:	4e4e      	ldr	r6, [pc, #312]	; (800a9e4 <_printf_i+0x208>)
 800a8aa:	700a      	strb	r2, [r1, #0]
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	6822      	ldr	r2, [r4, #0]
 800a8b0:	1d01      	adds	r1, r0, #4
 800a8b2:	6800      	ldr	r0, [r0, #0]
 800a8b4:	6019      	str	r1, [r3, #0]
 800a8b6:	0615      	lsls	r5, r2, #24
 800a8b8:	d521      	bpl.n	800a8fe <_printf_i+0x122>
 800a8ba:	07d3      	lsls	r3, r2, #31
 800a8bc:	d502      	bpl.n	800a8c4 <_printf_i+0xe8>
 800a8be:	2320      	movs	r3, #32
 800a8c0:	431a      	orrs	r2, r3
 800a8c2:	6022      	str	r2, [r4, #0]
 800a8c4:	2710      	movs	r7, #16
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d103      	bne.n	800a8d2 <_printf_i+0xf6>
 800a8ca:	2320      	movs	r3, #32
 800a8cc:	6822      	ldr	r2, [r4, #0]
 800a8ce:	439a      	bics	r2, r3
 800a8d0:	6022      	str	r2, [r4, #0]
 800a8d2:	0023      	movs	r3, r4
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	3343      	adds	r3, #67	; 0x43
 800a8d8:	701a      	strb	r2, [r3, #0]
 800a8da:	6863      	ldr	r3, [r4, #4]
 800a8dc:	60a3      	str	r3, [r4, #8]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	db58      	blt.n	800a994 <_printf_i+0x1b8>
 800a8e2:	2204      	movs	r2, #4
 800a8e4:	6821      	ldr	r1, [r4, #0]
 800a8e6:	4391      	bics	r1, r2
 800a8e8:	6021      	str	r1, [r4, #0]
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	d154      	bne.n	800a998 <_printf_i+0x1bc>
 800a8ee:	9d02      	ldr	r5, [sp, #8]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d05a      	beq.n	800a9aa <_printf_i+0x1ce>
 800a8f4:	0025      	movs	r5, r4
 800a8f6:	7833      	ldrb	r3, [r6, #0]
 800a8f8:	3542      	adds	r5, #66	; 0x42
 800a8fa:	702b      	strb	r3, [r5, #0]
 800a8fc:	e055      	b.n	800a9aa <_printf_i+0x1ce>
 800a8fe:	0655      	lsls	r5, r2, #25
 800a900:	d5db      	bpl.n	800a8ba <_printf_i+0xde>
 800a902:	b280      	uxth	r0, r0
 800a904:	e7d9      	b.n	800a8ba <_printf_i+0xde>
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	680d      	ldr	r5, [r1, #0]
 800a90a:	1d10      	adds	r0, r2, #4
 800a90c:	6949      	ldr	r1, [r1, #20]
 800a90e:	6018      	str	r0, [r3, #0]
 800a910:	6813      	ldr	r3, [r2, #0]
 800a912:	062e      	lsls	r6, r5, #24
 800a914:	d501      	bpl.n	800a91a <_printf_i+0x13e>
 800a916:	6019      	str	r1, [r3, #0]
 800a918:	e002      	b.n	800a920 <_printf_i+0x144>
 800a91a:	066d      	lsls	r5, r5, #25
 800a91c:	d5fb      	bpl.n	800a916 <_printf_i+0x13a>
 800a91e:	8019      	strh	r1, [r3, #0]
 800a920:	2300      	movs	r3, #0
 800a922:	9d02      	ldr	r5, [sp, #8]
 800a924:	6123      	str	r3, [r4, #16]
 800a926:	e04f      	b.n	800a9c8 <_printf_i+0x1ec>
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	1d11      	adds	r1, r2, #4
 800a92c:	6019      	str	r1, [r3, #0]
 800a92e:	6815      	ldr	r5, [r2, #0]
 800a930:	2100      	movs	r1, #0
 800a932:	6862      	ldr	r2, [r4, #4]
 800a934:	0028      	movs	r0, r5
 800a936:	f000 fb25 	bl	800af84 <memchr>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d001      	beq.n	800a942 <_printf_i+0x166>
 800a93e:	1b40      	subs	r0, r0, r5
 800a940:	6060      	str	r0, [r4, #4]
 800a942:	6863      	ldr	r3, [r4, #4]
 800a944:	6123      	str	r3, [r4, #16]
 800a946:	2300      	movs	r3, #0
 800a948:	9a02      	ldr	r2, [sp, #8]
 800a94a:	7013      	strb	r3, [r2, #0]
 800a94c:	e03c      	b.n	800a9c8 <_printf_i+0x1ec>
 800a94e:	6923      	ldr	r3, [r4, #16]
 800a950:	002a      	movs	r2, r5
 800a952:	9904      	ldr	r1, [sp, #16]
 800a954:	9803      	ldr	r0, [sp, #12]
 800a956:	9d05      	ldr	r5, [sp, #20]
 800a958:	47a8      	blx	r5
 800a95a:	1c43      	adds	r3, r0, #1
 800a95c:	d03e      	beq.n	800a9dc <_printf_i+0x200>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	079b      	lsls	r3, r3, #30
 800a962:	d415      	bmi.n	800a990 <_printf_i+0x1b4>
 800a964:	9b07      	ldr	r3, [sp, #28]
 800a966:	68e0      	ldr	r0, [r4, #12]
 800a968:	4298      	cmp	r0, r3
 800a96a:	da39      	bge.n	800a9e0 <_printf_i+0x204>
 800a96c:	0018      	movs	r0, r3
 800a96e:	e037      	b.n	800a9e0 <_printf_i+0x204>
 800a970:	0022      	movs	r2, r4
 800a972:	2301      	movs	r3, #1
 800a974:	3219      	adds	r2, #25
 800a976:	9904      	ldr	r1, [sp, #16]
 800a978:	9803      	ldr	r0, [sp, #12]
 800a97a:	9e05      	ldr	r6, [sp, #20]
 800a97c:	47b0      	blx	r6
 800a97e:	1c43      	adds	r3, r0, #1
 800a980:	d02c      	beq.n	800a9dc <_printf_i+0x200>
 800a982:	3501      	adds	r5, #1
 800a984:	68e3      	ldr	r3, [r4, #12]
 800a986:	9a07      	ldr	r2, [sp, #28]
 800a988:	1a9b      	subs	r3, r3, r2
 800a98a:	42ab      	cmp	r3, r5
 800a98c:	dcf0      	bgt.n	800a970 <_printf_i+0x194>
 800a98e:	e7e9      	b.n	800a964 <_printf_i+0x188>
 800a990:	2500      	movs	r5, #0
 800a992:	e7f7      	b.n	800a984 <_printf_i+0x1a8>
 800a994:	2800      	cmp	r0, #0
 800a996:	d0ad      	beq.n	800a8f4 <_printf_i+0x118>
 800a998:	9d02      	ldr	r5, [sp, #8]
 800a99a:	0039      	movs	r1, r7
 800a99c:	f7f5 fc3a 	bl	8000214 <__aeabi_uidivmod>
 800a9a0:	5c73      	ldrb	r3, [r6, r1]
 800a9a2:	3d01      	subs	r5, #1
 800a9a4:	702b      	strb	r3, [r5, #0]
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d1f7      	bne.n	800a99a <_printf_i+0x1be>
 800a9aa:	2f08      	cmp	r7, #8
 800a9ac:	d109      	bne.n	800a9c2 <_printf_i+0x1e6>
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	07db      	lsls	r3, r3, #31
 800a9b2:	d506      	bpl.n	800a9c2 <_printf_i+0x1e6>
 800a9b4:	6863      	ldr	r3, [r4, #4]
 800a9b6:	6922      	ldr	r2, [r4, #16]
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	dc02      	bgt.n	800a9c2 <_printf_i+0x1e6>
 800a9bc:	2330      	movs	r3, #48	; 0x30
 800a9be:	3d01      	subs	r5, #1
 800a9c0:	702b      	strb	r3, [r5, #0]
 800a9c2:	9b02      	ldr	r3, [sp, #8]
 800a9c4:	1b5b      	subs	r3, r3, r5
 800a9c6:	6123      	str	r3, [r4, #16]
 800a9c8:	9b05      	ldr	r3, [sp, #20]
 800a9ca:	aa07      	add	r2, sp, #28
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	0021      	movs	r1, r4
 800a9d0:	9b04      	ldr	r3, [sp, #16]
 800a9d2:	9803      	ldr	r0, [sp, #12]
 800a9d4:	f7ff fe94 	bl	800a700 <_printf_common>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	d1b8      	bne.n	800a94e <_printf_i+0x172>
 800a9dc:	2001      	movs	r0, #1
 800a9de:	4240      	negs	r0, r0
 800a9e0:	b009      	add	sp, #36	; 0x24
 800a9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9e4:	0800c93d 	.word	0x0800c93d
 800a9e8:	0800c94e 	.word	0x0800c94e

0800a9ec <__swbuf_r>:
 800a9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ee:	0005      	movs	r5, r0
 800a9f0:	000e      	movs	r6, r1
 800a9f2:	0014      	movs	r4, r2
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d004      	beq.n	800aa02 <__swbuf_r+0x16>
 800a9f8:	6983      	ldr	r3, [r0, #24]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <__swbuf_r+0x16>
 800a9fe:	f000 f9c1 	bl	800ad84 <__sinit>
 800aa02:	4b22      	ldr	r3, [pc, #136]	; (800aa8c <__swbuf_r+0xa0>)
 800aa04:	429c      	cmp	r4, r3
 800aa06:	d12d      	bne.n	800aa64 <__swbuf_r+0x78>
 800aa08:	686c      	ldr	r4, [r5, #4]
 800aa0a:	69a3      	ldr	r3, [r4, #24]
 800aa0c:	60a3      	str	r3, [r4, #8]
 800aa0e:	89a3      	ldrh	r3, [r4, #12]
 800aa10:	071b      	lsls	r3, r3, #28
 800aa12:	d531      	bpl.n	800aa78 <__swbuf_r+0x8c>
 800aa14:	6923      	ldr	r3, [r4, #16]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d02e      	beq.n	800aa78 <__swbuf_r+0x8c>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	6922      	ldr	r2, [r4, #16]
 800aa1e:	b2f7      	uxtb	r7, r6
 800aa20:	1a98      	subs	r0, r3, r2
 800aa22:	6963      	ldr	r3, [r4, #20]
 800aa24:	b2f6      	uxtb	r6, r6
 800aa26:	4283      	cmp	r3, r0
 800aa28:	dc05      	bgt.n	800aa36 <__swbuf_r+0x4a>
 800aa2a:	0021      	movs	r1, r4
 800aa2c:	0028      	movs	r0, r5
 800aa2e:	f000 f93b 	bl	800aca8 <_fflush_r>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	d126      	bne.n	800aa84 <__swbuf_r+0x98>
 800aa36:	68a3      	ldr	r3, [r4, #8]
 800aa38:	3001      	adds	r0, #1
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	60a3      	str	r3, [r4, #8]
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	6022      	str	r2, [r4, #0]
 800aa44:	701f      	strb	r7, [r3, #0]
 800aa46:	6963      	ldr	r3, [r4, #20]
 800aa48:	4283      	cmp	r3, r0
 800aa4a:	d004      	beq.n	800aa56 <__swbuf_r+0x6a>
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	07db      	lsls	r3, r3, #31
 800aa50:	d51a      	bpl.n	800aa88 <__swbuf_r+0x9c>
 800aa52:	2e0a      	cmp	r6, #10
 800aa54:	d118      	bne.n	800aa88 <__swbuf_r+0x9c>
 800aa56:	0021      	movs	r1, r4
 800aa58:	0028      	movs	r0, r5
 800aa5a:	f000 f925 	bl	800aca8 <_fflush_r>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d012      	beq.n	800aa88 <__swbuf_r+0x9c>
 800aa62:	e00f      	b.n	800aa84 <__swbuf_r+0x98>
 800aa64:	4b0a      	ldr	r3, [pc, #40]	; (800aa90 <__swbuf_r+0xa4>)
 800aa66:	429c      	cmp	r4, r3
 800aa68:	d101      	bne.n	800aa6e <__swbuf_r+0x82>
 800aa6a:	68ac      	ldr	r4, [r5, #8]
 800aa6c:	e7cd      	b.n	800aa0a <__swbuf_r+0x1e>
 800aa6e:	4b09      	ldr	r3, [pc, #36]	; (800aa94 <__swbuf_r+0xa8>)
 800aa70:	429c      	cmp	r4, r3
 800aa72:	d1ca      	bne.n	800aa0a <__swbuf_r+0x1e>
 800aa74:	68ec      	ldr	r4, [r5, #12]
 800aa76:	e7c8      	b.n	800aa0a <__swbuf_r+0x1e>
 800aa78:	0021      	movs	r1, r4
 800aa7a:	0028      	movs	r0, r5
 800aa7c:	f000 f80c 	bl	800aa98 <__swsetup_r>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d0ca      	beq.n	800aa1a <__swbuf_r+0x2e>
 800aa84:	2601      	movs	r6, #1
 800aa86:	4276      	negs	r6, r6
 800aa88:	0030      	movs	r0, r6
 800aa8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa8c:	0800c980 	.word	0x0800c980
 800aa90:	0800c9a0 	.word	0x0800c9a0
 800aa94:	0800c960 	.word	0x0800c960

0800aa98 <__swsetup_r>:
 800aa98:	4b36      	ldr	r3, [pc, #216]	; (800ab74 <__swsetup_r+0xdc>)
 800aa9a:	b570      	push	{r4, r5, r6, lr}
 800aa9c:	681d      	ldr	r5, [r3, #0]
 800aa9e:	0006      	movs	r6, r0
 800aaa0:	000c      	movs	r4, r1
 800aaa2:	2d00      	cmp	r5, #0
 800aaa4:	d005      	beq.n	800aab2 <__swsetup_r+0x1a>
 800aaa6:	69ab      	ldr	r3, [r5, #24]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d102      	bne.n	800aab2 <__swsetup_r+0x1a>
 800aaac:	0028      	movs	r0, r5
 800aaae:	f000 f969 	bl	800ad84 <__sinit>
 800aab2:	4b31      	ldr	r3, [pc, #196]	; (800ab78 <__swsetup_r+0xe0>)
 800aab4:	429c      	cmp	r4, r3
 800aab6:	d10f      	bne.n	800aad8 <__swsetup_r+0x40>
 800aab8:	686c      	ldr	r4, [r5, #4]
 800aaba:	230c      	movs	r3, #12
 800aabc:	5ee2      	ldrsh	r2, [r4, r3]
 800aabe:	b293      	uxth	r3, r2
 800aac0:	0719      	lsls	r1, r3, #28
 800aac2:	d42d      	bmi.n	800ab20 <__swsetup_r+0x88>
 800aac4:	06d9      	lsls	r1, r3, #27
 800aac6:	d411      	bmi.n	800aaec <__swsetup_r+0x54>
 800aac8:	2309      	movs	r3, #9
 800aaca:	2001      	movs	r0, #1
 800aacc:	6033      	str	r3, [r6, #0]
 800aace:	3337      	adds	r3, #55	; 0x37
 800aad0:	4313      	orrs	r3, r2
 800aad2:	81a3      	strh	r3, [r4, #12]
 800aad4:	4240      	negs	r0, r0
 800aad6:	bd70      	pop	{r4, r5, r6, pc}
 800aad8:	4b28      	ldr	r3, [pc, #160]	; (800ab7c <__swsetup_r+0xe4>)
 800aada:	429c      	cmp	r4, r3
 800aadc:	d101      	bne.n	800aae2 <__swsetup_r+0x4a>
 800aade:	68ac      	ldr	r4, [r5, #8]
 800aae0:	e7eb      	b.n	800aaba <__swsetup_r+0x22>
 800aae2:	4b27      	ldr	r3, [pc, #156]	; (800ab80 <__swsetup_r+0xe8>)
 800aae4:	429c      	cmp	r4, r3
 800aae6:	d1e8      	bne.n	800aaba <__swsetup_r+0x22>
 800aae8:	68ec      	ldr	r4, [r5, #12]
 800aaea:	e7e6      	b.n	800aaba <__swsetup_r+0x22>
 800aaec:	075b      	lsls	r3, r3, #29
 800aaee:	d513      	bpl.n	800ab18 <__swsetup_r+0x80>
 800aaf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaf2:	2900      	cmp	r1, #0
 800aaf4:	d008      	beq.n	800ab08 <__swsetup_r+0x70>
 800aaf6:	0023      	movs	r3, r4
 800aaf8:	3344      	adds	r3, #68	; 0x44
 800aafa:	4299      	cmp	r1, r3
 800aafc:	d002      	beq.n	800ab04 <__swsetup_r+0x6c>
 800aafe:	0030      	movs	r0, r6
 800ab00:	f000 fa4c 	bl	800af9c <_free_r>
 800ab04:	2300      	movs	r3, #0
 800ab06:	6363      	str	r3, [r4, #52]	; 0x34
 800ab08:	2224      	movs	r2, #36	; 0x24
 800ab0a:	89a3      	ldrh	r3, [r4, #12]
 800ab0c:	4393      	bics	r3, r2
 800ab0e:	81a3      	strh	r3, [r4, #12]
 800ab10:	2300      	movs	r3, #0
 800ab12:	6063      	str	r3, [r4, #4]
 800ab14:	6923      	ldr	r3, [r4, #16]
 800ab16:	6023      	str	r3, [r4, #0]
 800ab18:	2308      	movs	r3, #8
 800ab1a:	89a2      	ldrh	r2, [r4, #12]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	81a3      	strh	r3, [r4, #12]
 800ab20:	6923      	ldr	r3, [r4, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d10b      	bne.n	800ab3e <__swsetup_r+0xa6>
 800ab26:	21a0      	movs	r1, #160	; 0xa0
 800ab28:	2280      	movs	r2, #128	; 0x80
 800ab2a:	89a3      	ldrh	r3, [r4, #12]
 800ab2c:	0089      	lsls	r1, r1, #2
 800ab2e:	0092      	lsls	r2, r2, #2
 800ab30:	400b      	ands	r3, r1
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d003      	beq.n	800ab3e <__swsetup_r+0xa6>
 800ab36:	0021      	movs	r1, r4
 800ab38:	0030      	movs	r0, r6
 800ab3a:	f000 f9df 	bl	800aefc <__smakebuf_r>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	89a2      	ldrh	r2, [r4, #12]
 800ab42:	4013      	ands	r3, r2
 800ab44:	d011      	beq.n	800ab6a <__swsetup_r+0xd2>
 800ab46:	2300      	movs	r3, #0
 800ab48:	60a3      	str	r3, [r4, #8]
 800ab4a:	6963      	ldr	r3, [r4, #20]
 800ab4c:	425b      	negs	r3, r3
 800ab4e:	61a3      	str	r3, [r4, #24]
 800ab50:	2000      	movs	r0, #0
 800ab52:	6923      	ldr	r3, [r4, #16]
 800ab54:	4283      	cmp	r3, r0
 800ab56:	d1be      	bne.n	800aad6 <__swsetup_r+0x3e>
 800ab58:	230c      	movs	r3, #12
 800ab5a:	5ee2      	ldrsh	r2, [r4, r3]
 800ab5c:	0613      	lsls	r3, r2, #24
 800ab5e:	d5ba      	bpl.n	800aad6 <__swsetup_r+0x3e>
 800ab60:	2340      	movs	r3, #64	; 0x40
 800ab62:	4313      	orrs	r3, r2
 800ab64:	81a3      	strh	r3, [r4, #12]
 800ab66:	3801      	subs	r0, #1
 800ab68:	e7b5      	b.n	800aad6 <__swsetup_r+0x3e>
 800ab6a:	0792      	lsls	r2, r2, #30
 800ab6c:	d400      	bmi.n	800ab70 <__swsetup_r+0xd8>
 800ab6e:	6963      	ldr	r3, [r4, #20]
 800ab70:	60a3      	str	r3, [r4, #8]
 800ab72:	e7ed      	b.n	800ab50 <__swsetup_r+0xb8>
 800ab74:	20000140 	.word	0x20000140
 800ab78:	0800c980 	.word	0x0800c980
 800ab7c:	0800c9a0 	.word	0x0800c9a0
 800ab80:	0800c960 	.word	0x0800c960

0800ab84 <abort>:
 800ab84:	b510      	push	{r4, lr}
 800ab86:	2006      	movs	r0, #6
 800ab88:	f000 faec 	bl	800b164 <raise>
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	f000 fdd7 	bl	800b740 <_exit>
	...

0800ab94 <__sflush_r>:
 800ab94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab96:	898a      	ldrh	r2, [r1, #12]
 800ab98:	0005      	movs	r5, r0
 800ab9a:	000c      	movs	r4, r1
 800ab9c:	0713      	lsls	r3, r2, #28
 800ab9e:	d460      	bmi.n	800ac62 <__sflush_r+0xce>
 800aba0:	684b      	ldr	r3, [r1, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	dc04      	bgt.n	800abb0 <__sflush_r+0x1c>
 800aba6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	dc01      	bgt.n	800abb0 <__sflush_r+0x1c>
 800abac:	2000      	movs	r0, #0
 800abae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800abb0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800abb2:	2f00      	cmp	r7, #0
 800abb4:	d0fa      	beq.n	800abac <__sflush_r+0x18>
 800abb6:	2300      	movs	r3, #0
 800abb8:	682e      	ldr	r6, [r5, #0]
 800abba:	602b      	str	r3, [r5, #0]
 800abbc:	2380      	movs	r3, #128	; 0x80
 800abbe:	015b      	lsls	r3, r3, #5
 800abc0:	6a21      	ldr	r1, [r4, #32]
 800abc2:	401a      	ands	r2, r3
 800abc4:	d034      	beq.n	800ac30 <__sflush_r+0x9c>
 800abc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	075b      	lsls	r3, r3, #29
 800abcc:	d506      	bpl.n	800abdc <__sflush_r+0x48>
 800abce:	6863      	ldr	r3, [r4, #4]
 800abd0:	1ac0      	subs	r0, r0, r3
 800abd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <__sflush_r+0x48>
 800abd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abda:	1ac0      	subs	r0, r0, r3
 800abdc:	0002      	movs	r2, r0
 800abde:	6a21      	ldr	r1, [r4, #32]
 800abe0:	2300      	movs	r3, #0
 800abe2:	0028      	movs	r0, r5
 800abe4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800abe6:	47b8      	blx	r7
 800abe8:	89a1      	ldrh	r1, [r4, #12]
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	d106      	bne.n	800abfc <__sflush_r+0x68>
 800abee:	682b      	ldr	r3, [r5, #0]
 800abf0:	2b1d      	cmp	r3, #29
 800abf2:	d830      	bhi.n	800ac56 <__sflush_r+0xc2>
 800abf4:	4a2b      	ldr	r2, [pc, #172]	; (800aca4 <__sflush_r+0x110>)
 800abf6:	40da      	lsrs	r2, r3
 800abf8:	07d3      	lsls	r3, r2, #31
 800abfa:	d52c      	bpl.n	800ac56 <__sflush_r+0xc2>
 800abfc:	2300      	movs	r3, #0
 800abfe:	6063      	str	r3, [r4, #4]
 800ac00:	6923      	ldr	r3, [r4, #16]
 800ac02:	6023      	str	r3, [r4, #0]
 800ac04:	04cb      	lsls	r3, r1, #19
 800ac06:	d505      	bpl.n	800ac14 <__sflush_r+0x80>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d102      	bne.n	800ac12 <__sflush_r+0x7e>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d100      	bne.n	800ac14 <__sflush_r+0x80>
 800ac12:	6560      	str	r0, [r4, #84]	; 0x54
 800ac14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac16:	602e      	str	r6, [r5, #0]
 800ac18:	2900      	cmp	r1, #0
 800ac1a:	d0c7      	beq.n	800abac <__sflush_r+0x18>
 800ac1c:	0023      	movs	r3, r4
 800ac1e:	3344      	adds	r3, #68	; 0x44
 800ac20:	4299      	cmp	r1, r3
 800ac22:	d002      	beq.n	800ac2a <__sflush_r+0x96>
 800ac24:	0028      	movs	r0, r5
 800ac26:	f000 f9b9 	bl	800af9c <_free_r>
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	6360      	str	r0, [r4, #52]	; 0x34
 800ac2e:	e7be      	b.n	800abae <__sflush_r+0x1a>
 800ac30:	2301      	movs	r3, #1
 800ac32:	0028      	movs	r0, r5
 800ac34:	47b8      	blx	r7
 800ac36:	1c43      	adds	r3, r0, #1
 800ac38:	d1c6      	bne.n	800abc8 <__sflush_r+0x34>
 800ac3a:	682b      	ldr	r3, [r5, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0c3      	beq.n	800abc8 <__sflush_r+0x34>
 800ac40:	2b1d      	cmp	r3, #29
 800ac42:	d001      	beq.n	800ac48 <__sflush_r+0xb4>
 800ac44:	2b16      	cmp	r3, #22
 800ac46:	d101      	bne.n	800ac4c <__sflush_r+0xb8>
 800ac48:	602e      	str	r6, [r5, #0]
 800ac4a:	e7af      	b.n	800abac <__sflush_r+0x18>
 800ac4c:	2340      	movs	r3, #64	; 0x40
 800ac4e:	89a2      	ldrh	r2, [r4, #12]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	81a3      	strh	r3, [r4, #12]
 800ac54:	e7ab      	b.n	800abae <__sflush_r+0x1a>
 800ac56:	2340      	movs	r3, #64	; 0x40
 800ac58:	430b      	orrs	r3, r1
 800ac5a:	2001      	movs	r0, #1
 800ac5c:	81a3      	strh	r3, [r4, #12]
 800ac5e:	4240      	negs	r0, r0
 800ac60:	e7a5      	b.n	800abae <__sflush_r+0x1a>
 800ac62:	690f      	ldr	r7, [r1, #16]
 800ac64:	2f00      	cmp	r7, #0
 800ac66:	d0a1      	beq.n	800abac <__sflush_r+0x18>
 800ac68:	680b      	ldr	r3, [r1, #0]
 800ac6a:	600f      	str	r7, [r1, #0]
 800ac6c:	1bdb      	subs	r3, r3, r7
 800ac6e:	9301      	str	r3, [sp, #4]
 800ac70:	2300      	movs	r3, #0
 800ac72:	0792      	lsls	r2, r2, #30
 800ac74:	d100      	bne.n	800ac78 <__sflush_r+0xe4>
 800ac76:	694b      	ldr	r3, [r1, #20]
 800ac78:	60a3      	str	r3, [r4, #8]
 800ac7a:	9b01      	ldr	r3, [sp, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	dc00      	bgt.n	800ac82 <__sflush_r+0xee>
 800ac80:	e794      	b.n	800abac <__sflush_r+0x18>
 800ac82:	9b01      	ldr	r3, [sp, #4]
 800ac84:	003a      	movs	r2, r7
 800ac86:	6a21      	ldr	r1, [r4, #32]
 800ac88:	0028      	movs	r0, r5
 800ac8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac8c:	47b0      	blx	r6
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	dc03      	bgt.n	800ac9a <__sflush_r+0x106>
 800ac92:	2340      	movs	r3, #64	; 0x40
 800ac94:	89a2      	ldrh	r2, [r4, #12]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	e7df      	b.n	800ac5a <__sflush_r+0xc6>
 800ac9a:	9b01      	ldr	r3, [sp, #4]
 800ac9c:	183f      	adds	r7, r7, r0
 800ac9e:	1a1b      	subs	r3, r3, r0
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	e7ea      	b.n	800ac7a <__sflush_r+0xe6>
 800aca4:	20400001 	.word	0x20400001

0800aca8 <_fflush_r>:
 800aca8:	690b      	ldr	r3, [r1, #16]
 800acaa:	b570      	push	{r4, r5, r6, lr}
 800acac:	0005      	movs	r5, r0
 800acae:	000c      	movs	r4, r1
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <_fflush_r+0x10>
 800acb4:	2000      	movs	r0, #0
 800acb6:	bd70      	pop	{r4, r5, r6, pc}
 800acb8:	2800      	cmp	r0, #0
 800acba:	d004      	beq.n	800acc6 <_fflush_r+0x1e>
 800acbc:	6983      	ldr	r3, [r0, #24]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <_fflush_r+0x1e>
 800acc2:	f000 f85f 	bl	800ad84 <__sinit>
 800acc6:	4b0b      	ldr	r3, [pc, #44]	; (800acf4 <_fflush_r+0x4c>)
 800acc8:	429c      	cmp	r4, r3
 800acca:	d109      	bne.n	800ace0 <_fflush_r+0x38>
 800accc:	686c      	ldr	r4, [r5, #4]
 800acce:	220c      	movs	r2, #12
 800acd0:	5ea3      	ldrsh	r3, [r4, r2]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d0ee      	beq.n	800acb4 <_fflush_r+0xc>
 800acd6:	0021      	movs	r1, r4
 800acd8:	0028      	movs	r0, r5
 800acda:	f7ff ff5b 	bl	800ab94 <__sflush_r>
 800acde:	e7ea      	b.n	800acb6 <_fflush_r+0xe>
 800ace0:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <_fflush_r+0x50>)
 800ace2:	429c      	cmp	r4, r3
 800ace4:	d101      	bne.n	800acea <_fflush_r+0x42>
 800ace6:	68ac      	ldr	r4, [r5, #8]
 800ace8:	e7f1      	b.n	800acce <_fflush_r+0x26>
 800acea:	4b04      	ldr	r3, [pc, #16]	; (800acfc <_fflush_r+0x54>)
 800acec:	429c      	cmp	r4, r3
 800acee:	d1ee      	bne.n	800acce <_fflush_r+0x26>
 800acf0:	68ec      	ldr	r4, [r5, #12]
 800acf2:	e7ec      	b.n	800acce <_fflush_r+0x26>
 800acf4:	0800c980 	.word	0x0800c980
 800acf8:	0800c9a0 	.word	0x0800c9a0
 800acfc:	0800c960 	.word	0x0800c960

0800ad00 <std>:
 800ad00:	2300      	movs	r3, #0
 800ad02:	b510      	push	{r4, lr}
 800ad04:	0004      	movs	r4, r0
 800ad06:	6003      	str	r3, [r0, #0]
 800ad08:	6043      	str	r3, [r0, #4]
 800ad0a:	6083      	str	r3, [r0, #8]
 800ad0c:	8181      	strh	r1, [r0, #12]
 800ad0e:	6643      	str	r3, [r0, #100]	; 0x64
 800ad10:	81c2      	strh	r2, [r0, #14]
 800ad12:	6103      	str	r3, [r0, #16]
 800ad14:	6143      	str	r3, [r0, #20]
 800ad16:	6183      	str	r3, [r0, #24]
 800ad18:	0019      	movs	r1, r3
 800ad1a:	2208      	movs	r2, #8
 800ad1c:	305c      	adds	r0, #92	; 0x5c
 800ad1e:	f7ff fba9 	bl	800a474 <memset>
 800ad22:	4b05      	ldr	r3, [pc, #20]	; (800ad38 <std+0x38>)
 800ad24:	6224      	str	r4, [r4, #32]
 800ad26:	6263      	str	r3, [r4, #36]	; 0x24
 800ad28:	4b04      	ldr	r3, [pc, #16]	; (800ad3c <std+0x3c>)
 800ad2a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad2c:	4b04      	ldr	r3, [pc, #16]	; (800ad40 <std+0x40>)
 800ad2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad30:	4b04      	ldr	r3, [pc, #16]	; (800ad44 <std+0x44>)
 800ad32:	6323      	str	r3, [r4, #48]	; 0x30
 800ad34:	bd10      	pop	{r4, pc}
 800ad36:	46c0      	nop			; (mov r8, r8)
 800ad38:	0800b1a5 	.word	0x0800b1a5
 800ad3c:	0800b1cd 	.word	0x0800b1cd
 800ad40:	0800b205 	.word	0x0800b205
 800ad44:	0800b231 	.word	0x0800b231

0800ad48 <_cleanup_r>:
 800ad48:	b510      	push	{r4, lr}
 800ad4a:	4902      	ldr	r1, [pc, #8]	; (800ad54 <_cleanup_r+0xc>)
 800ad4c:	f000 f88c 	bl	800ae68 <_fwalk_reent>
 800ad50:	bd10      	pop	{r4, pc}
 800ad52:	46c0      	nop			; (mov r8, r8)
 800ad54:	0800aca9 	.word	0x0800aca9

0800ad58 <__sfmoreglue>:
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	2568      	movs	r5, #104	; 0x68
 800ad5c:	1e4a      	subs	r2, r1, #1
 800ad5e:	4355      	muls	r5, r2
 800ad60:	000e      	movs	r6, r1
 800ad62:	0029      	movs	r1, r5
 800ad64:	3174      	adds	r1, #116	; 0x74
 800ad66:	f000 f963 	bl	800b030 <_malloc_r>
 800ad6a:	1e04      	subs	r4, r0, #0
 800ad6c:	d008      	beq.n	800ad80 <__sfmoreglue+0x28>
 800ad6e:	2100      	movs	r1, #0
 800ad70:	002a      	movs	r2, r5
 800ad72:	6001      	str	r1, [r0, #0]
 800ad74:	6046      	str	r6, [r0, #4]
 800ad76:	300c      	adds	r0, #12
 800ad78:	60a0      	str	r0, [r4, #8]
 800ad7a:	3268      	adds	r2, #104	; 0x68
 800ad7c:	f7ff fb7a 	bl	800a474 <memset>
 800ad80:	0020      	movs	r0, r4
 800ad82:	bd70      	pop	{r4, r5, r6, pc}

0800ad84 <__sinit>:
 800ad84:	6983      	ldr	r3, [r0, #24]
 800ad86:	b513      	push	{r0, r1, r4, lr}
 800ad88:	0004      	movs	r4, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d128      	bne.n	800ade0 <__sinit+0x5c>
 800ad8e:	6483      	str	r3, [r0, #72]	; 0x48
 800ad90:	64c3      	str	r3, [r0, #76]	; 0x4c
 800ad92:	6503      	str	r3, [r0, #80]	; 0x50
 800ad94:	4b13      	ldr	r3, [pc, #76]	; (800ade4 <__sinit+0x60>)
 800ad96:	4a14      	ldr	r2, [pc, #80]	; (800ade8 <__sinit+0x64>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	6282      	str	r2, [r0, #40]	; 0x28
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	4298      	cmp	r0, r3
 800ada0:	d101      	bne.n	800ada6 <__sinit+0x22>
 800ada2:	2301      	movs	r3, #1
 800ada4:	6183      	str	r3, [r0, #24]
 800ada6:	0020      	movs	r0, r4
 800ada8:	f000 f820 	bl	800adec <__sfp>
 800adac:	6060      	str	r0, [r4, #4]
 800adae:	0020      	movs	r0, r4
 800adb0:	f000 f81c 	bl	800adec <__sfp>
 800adb4:	60a0      	str	r0, [r4, #8]
 800adb6:	0020      	movs	r0, r4
 800adb8:	f000 f818 	bl	800adec <__sfp>
 800adbc:	2200      	movs	r2, #0
 800adbe:	60e0      	str	r0, [r4, #12]
 800adc0:	2104      	movs	r1, #4
 800adc2:	6860      	ldr	r0, [r4, #4]
 800adc4:	f7ff ff9c 	bl	800ad00 <std>
 800adc8:	2201      	movs	r2, #1
 800adca:	2109      	movs	r1, #9
 800adcc:	68a0      	ldr	r0, [r4, #8]
 800adce:	f7ff ff97 	bl	800ad00 <std>
 800add2:	2202      	movs	r2, #2
 800add4:	2112      	movs	r1, #18
 800add6:	68e0      	ldr	r0, [r4, #12]
 800add8:	f7ff ff92 	bl	800ad00 <std>
 800addc:	2301      	movs	r3, #1
 800adde:	61a3      	str	r3, [r4, #24]
 800ade0:	bd13      	pop	{r0, r1, r4, pc}
 800ade2:	46c0      	nop			; (mov r8, r8)
 800ade4:	0800c928 	.word	0x0800c928
 800ade8:	0800ad49 	.word	0x0800ad49

0800adec <__sfp>:
 800adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adee:	4b1c      	ldr	r3, [pc, #112]	; (800ae60 <__sfp+0x74>)
 800adf0:	0007      	movs	r7, r0
 800adf2:	681e      	ldr	r6, [r3, #0]
 800adf4:	69b3      	ldr	r3, [r6, #24]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d102      	bne.n	800ae00 <__sfp+0x14>
 800adfa:	0030      	movs	r0, r6
 800adfc:	f7ff ffc2 	bl	800ad84 <__sinit>
 800ae00:	3648      	adds	r6, #72	; 0x48
 800ae02:	68b4      	ldr	r4, [r6, #8]
 800ae04:	6873      	ldr	r3, [r6, #4]
 800ae06:	3b01      	subs	r3, #1
 800ae08:	d504      	bpl.n	800ae14 <__sfp+0x28>
 800ae0a:	6833      	ldr	r3, [r6, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d007      	beq.n	800ae20 <__sfp+0x34>
 800ae10:	6836      	ldr	r6, [r6, #0]
 800ae12:	e7f6      	b.n	800ae02 <__sfp+0x16>
 800ae14:	220c      	movs	r2, #12
 800ae16:	5ea5      	ldrsh	r5, [r4, r2]
 800ae18:	2d00      	cmp	r5, #0
 800ae1a:	d00d      	beq.n	800ae38 <__sfp+0x4c>
 800ae1c:	3468      	adds	r4, #104	; 0x68
 800ae1e:	e7f2      	b.n	800ae06 <__sfp+0x1a>
 800ae20:	2104      	movs	r1, #4
 800ae22:	0038      	movs	r0, r7
 800ae24:	f7ff ff98 	bl	800ad58 <__sfmoreglue>
 800ae28:	6030      	str	r0, [r6, #0]
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	d1f0      	bne.n	800ae10 <__sfp+0x24>
 800ae2e:	230c      	movs	r3, #12
 800ae30:	0004      	movs	r4, r0
 800ae32:	603b      	str	r3, [r7, #0]
 800ae34:	0020      	movs	r0, r4
 800ae36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae38:	0020      	movs	r0, r4
 800ae3a:	4b0a      	ldr	r3, [pc, #40]	; (800ae64 <__sfp+0x78>)
 800ae3c:	6665      	str	r5, [r4, #100]	; 0x64
 800ae3e:	6025      	str	r5, [r4, #0]
 800ae40:	6065      	str	r5, [r4, #4]
 800ae42:	60a5      	str	r5, [r4, #8]
 800ae44:	60e3      	str	r3, [r4, #12]
 800ae46:	6125      	str	r5, [r4, #16]
 800ae48:	6165      	str	r5, [r4, #20]
 800ae4a:	61a5      	str	r5, [r4, #24]
 800ae4c:	2208      	movs	r2, #8
 800ae4e:	0029      	movs	r1, r5
 800ae50:	305c      	adds	r0, #92	; 0x5c
 800ae52:	f7ff fb0f 	bl	800a474 <memset>
 800ae56:	6365      	str	r5, [r4, #52]	; 0x34
 800ae58:	63a5      	str	r5, [r4, #56]	; 0x38
 800ae5a:	64a5      	str	r5, [r4, #72]	; 0x48
 800ae5c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ae5e:	e7e9      	b.n	800ae34 <__sfp+0x48>
 800ae60:	0800c928 	.word	0x0800c928
 800ae64:	ffff0001 	.word	0xffff0001

0800ae68 <_fwalk_reent>:
 800ae68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae6a:	0004      	movs	r4, r0
 800ae6c:	0007      	movs	r7, r0
 800ae6e:	2600      	movs	r6, #0
 800ae70:	9101      	str	r1, [sp, #4]
 800ae72:	3448      	adds	r4, #72	; 0x48
 800ae74:	2c00      	cmp	r4, #0
 800ae76:	d101      	bne.n	800ae7c <_fwalk_reent+0x14>
 800ae78:	0030      	movs	r0, r6
 800ae7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae7c:	6863      	ldr	r3, [r4, #4]
 800ae7e:	68a5      	ldr	r5, [r4, #8]
 800ae80:	9300      	str	r3, [sp, #0]
 800ae82:	9b00      	ldr	r3, [sp, #0]
 800ae84:	3b01      	subs	r3, #1
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	d501      	bpl.n	800ae8e <_fwalk_reent+0x26>
 800ae8a:	6824      	ldr	r4, [r4, #0]
 800ae8c:	e7f2      	b.n	800ae74 <_fwalk_reent+0xc>
 800ae8e:	89ab      	ldrh	r3, [r5, #12]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d908      	bls.n	800aea6 <_fwalk_reent+0x3e>
 800ae94:	220e      	movs	r2, #14
 800ae96:	5eab      	ldrsh	r3, [r5, r2]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	d004      	beq.n	800aea6 <_fwalk_reent+0x3e>
 800ae9c:	0029      	movs	r1, r5
 800ae9e:	0038      	movs	r0, r7
 800aea0:	9b01      	ldr	r3, [sp, #4]
 800aea2:	4798      	blx	r3
 800aea4:	4306      	orrs	r6, r0
 800aea6:	3568      	adds	r5, #104	; 0x68
 800aea8:	e7eb      	b.n	800ae82 <_fwalk_reent+0x1a>
	...

0800aeac <__swhatbuf_r>:
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	000e      	movs	r6, r1
 800aeb0:	001d      	movs	r5, r3
 800aeb2:	230e      	movs	r3, #14
 800aeb4:	5ec9      	ldrsh	r1, [r1, r3]
 800aeb6:	b096      	sub	sp, #88	; 0x58
 800aeb8:	0014      	movs	r4, r2
 800aeba:	2900      	cmp	r1, #0
 800aebc:	da07      	bge.n	800aece <__swhatbuf_r+0x22>
 800aebe:	2300      	movs	r3, #0
 800aec0:	602b      	str	r3, [r5, #0]
 800aec2:	89b3      	ldrh	r3, [r6, #12]
 800aec4:	061b      	lsls	r3, r3, #24
 800aec6:	d411      	bmi.n	800aeec <__swhatbuf_r+0x40>
 800aec8:	2380      	movs	r3, #128	; 0x80
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	e00f      	b.n	800aeee <__swhatbuf_r+0x42>
 800aece:	466a      	mov	r2, sp
 800aed0:	f000 f9da 	bl	800b288 <_fstat_r>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	dbf2      	blt.n	800aebe <__swhatbuf_r+0x12>
 800aed8:	22f0      	movs	r2, #240	; 0xf0
 800aeda:	9b01      	ldr	r3, [sp, #4]
 800aedc:	0212      	lsls	r2, r2, #8
 800aede:	4013      	ands	r3, r2
 800aee0:	4a05      	ldr	r2, [pc, #20]	; (800aef8 <__swhatbuf_r+0x4c>)
 800aee2:	189b      	adds	r3, r3, r2
 800aee4:	425a      	negs	r2, r3
 800aee6:	4153      	adcs	r3, r2
 800aee8:	602b      	str	r3, [r5, #0]
 800aeea:	e7ed      	b.n	800aec8 <__swhatbuf_r+0x1c>
 800aeec:	2340      	movs	r3, #64	; 0x40
 800aeee:	2000      	movs	r0, #0
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	b016      	add	sp, #88	; 0x58
 800aef4:	bd70      	pop	{r4, r5, r6, pc}
 800aef6:	46c0      	nop			; (mov r8, r8)
 800aef8:	ffffe000 	.word	0xffffe000

0800aefc <__smakebuf_r>:
 800aefc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aefe:	2602      	movs	r6, #2
 800af00:	898b      	ldrh	r3, [r1, #12]
 800af02:	0005      	movs	r5, r0
 800af04:	000c      	movs	r4, r1
 800af06:	4233      	tst	r3, r6
 800af08:	d006      	beq.n	800af18 <__smakebuf_r+0x1c>
 800af0a:	0023      	movs	r3, r4
 800af0c:	3347      	adds	r3, #71	; 0x47
 800af0e:	6023      	str	r3, [r4, #0]
 800af10:	6123      	str	r3, [r4, #16]
 800af12:	2301      	movs	r3, #1
 800af14:	6163      	str	r3, [r4, #20]
 800af16:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800af18:	ab01      	add	r3, sp, #4
 800af1a:	466a      	mov	r2, sp
 800af1c:	f7ff ffc6 	bl	800aeac <__swhatbuf_r>
 800af20:	9900      	ldr	r1, [sp, #0]
 800af22:	0007      	movs	r7, r0
 800af24:	0028      	movs	r0, r5
 800af26:	f000 f883 	bl	800b030 <_malloc_r>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d108      	bne.n	800af40 <__smakebuf_r+0x44>
 800af2e:	220c      	movs	r2, #12
 800af30:	5ea3      	ldrsh	r3, [r4, r2]
 800af32:	059a      	lsls	r2, r3, #22
 800af34:	d4ef      	bmi.n	800af16 <__smakebuf_r+0x1a>
 800af36:	2203      	movs	r2, #3
 800af38:	4393      	bics	r3, r2
 800af3a:	431e      	orrs	r6, r3
 800af3c:	81a6      	strh	r6, [r4, #12]
 800af3e:	e7e4      	b.n	800af0a <__smakebuf_r+0xe>
 800af40:	4b0f      	ldr	r3, [pc, #60]	; (800af80 <__smakebuf_r+0x84>)
 800af42:	62ab      	str	r3, [r5, #40]	; 0x28
 800af44:	2380      	movs	r3, #128	; 0x80
 800af46:	89a2      	ldrh	r2, [r4, #12]
 800af48:	6020      	str	r0, [r4, #0]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	81a3      	strh	r3, [r4, #12]
 800af4e:	9b00      	ldr	r3, [sp, #0]
 800af50:	6120      	str	r0, [r4, #16]
 800af52:	6163      	str	r3, [r4, #20]
 800af54:	9b01      	ldr	r3, [sp, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00d      	beq.n	800af76 <__smakebuf_r+0x7a>
 800af5a:	230e      	movs	r3, #14
 800af5c:	5ee1      	ldrsh	r1, [r4, r3]
 800af5e:	0028      	movs	r0, r5
 800af60:	f000 f9a4 	bl	800b2ac <_isatty_r>
 800af64:	2800      	cmp	r0, #0
 800af66:	d006      	beq.n	800af76 <__smakebuf_r+0x7a>
 800af68:	2203      	movs	r2, #3
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	4393      	bics	r3, r2
 800af6e:	001a      	movs	r2, r3
 800af70:	2301      	movs	r3, #1
 800af72:	4313      	orrs	r3, r2
 800af74:	81a3      	strh	r3, [r4, #12]
 800af76:	89a0      	ldrh	r0, [r4, #12]
 800af78:	4338      	orrs	r0, r7
 800af7a:	81a0      	strh	r0, [r4, #12]
 800af7c:	e7cb      	b.n	800af16 <__smakebuf_r+0x1a>
 800af7e:	46c0      	nop			; (mov r8, r8)
 800af80:	0800ad49 	.word	0x0800ad49

0800af84 <memchr>:
 800af84:	b2c9      	uxtb	r1, r1
 800af86:	1882      	adds	r2, r0, r2
 800af88:	4290      	cmp	r0, r2
 800af8a:	d101      	bne.n	800af90 <memchr+0xc>
 800af8c:	2000      	movs	r0, #0
 800af8e:	4770      	bx	lr
 800af90:	7803      	ldrb	r3, [r0, #0]
 800af92:	428b      	cmp	r3, r1
 800af94:	d0fb      	beq.n	800af8e <memchr+0xa>
 800af96:	3001      	adds	r0, #1
 800af98:	e7f6      	b.n	800af88 <memchr+0x4>
	...

0800af9c <_free_r>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	0005      	movs	r5, r0
 800afa0:	2900      	cmp	r1, #0
 800afa2:	d010      	beq.n	800afc6 <_free_r+0x2a>
 800afa4:	1f0c      	subs	r4, r1, #4
 800afa6:	6823      	ldr	r3, [r4, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	da00      	bge.n	800afae <_free_r+0x12>
 800afac:	18e4      	adds	r4, r4, r3
 800afae:	0028      	movs	r0, r5
 800afb0:	f000 f9a2 	bl	800b2f8 <__malloc_lock>
 800afb4:	4a1d      	ldr	r2, [pc, #116]	; (800b02c <_free_r+0x90>)
 800afb6:	6813      	ldr	r3, [r2, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d105      	bne.n	800afc8 <_free_r+0x2c>
 800afbc:	6063      	str	r3, [r4, #4]
 800afbe:	6014      	str	r4, [r2, #0]
 800afc0:	0028      	movs	r0, r5
 800afc2:	f000 f99a 	bl	800b2fa <__malloc_unlock>
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
 800afc8:	42a3      	cmp	r3, r4
 800afca:	d909      	bls.n	800afe0 <_free_r+0x44>
 800afcc:	6821      	ldr	r1, [r4, #0]
 800afce:	1860      	adds	r0, r4, r1
 800afd0:	4283      	cmp	r3, r0
 800afd2:	d1f3      	bne.n	800afbc <_free_r+0x20>
 800afd4:	6818      	ldr	r0, [r3, #0]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	1841      	adds	r1, r0, r1
 800afda:	6021      	str	r1, [r4, #0]
 800afdc:	e7ee      	b.n	800afbc <_free_r+0x20>
 800afde:	0013      	movs	r3, r2
 800afe0:	685a      	ldr	r2, [r3, #4]
 800afe2:	2a00      	cmp	r2, #0
 800afe4:	d001      	beq.n	800afea <_free_r+0x4e>
 800afe6:	42a2      	cmp	r2, r4
 800afe8:	d9f9      	bls.n	800afde <_free_r+0x42>
 800afea:	6819      	ldr	r1, [r3, #0]
 800afec:	1858      	adds	r0, r3, r1
 800afee:	42a0      	cmp	r0, r4
 800aff0:	d10b      	bne.n	800b00a <_free_r+0x6e>
 800aff2:	6820      	ldr	r0, [r4, #0]
 800aff4:	1809      	adds	r1, r1, r0
 800aff6:	1858      	adds	r0, r3, r1
 800aff8:	6019      	str	r1, [r3, #0]
 800affa:	4282      	cmp	r2, r0
 800affc:	d1e0      	bne.n	800afc0 <_free_r+0x24>
 800affe:	6810      	ldr	r0, [r2, #0]
 800b000:	6852      	ldr	r2, [r2, #4]
 800b002:	1841      	adds	r1, r0, r1
 800b004:	6019      	str	r1, [r3, #0]
 800b006:	605a      	str	r2, [r3, #4]
 800b008:	e7da      	b.n	800afc0 <_free_r+0x24>
 800b00a:	42a0      	cmp	r0, r4
 800b00c:	d902      	bls.n	800b014 <_free_r+0x78>
 800b00e:	230c      	movs	r3, #12
 800b010:	602b      	str	r3, [r5, #0]
 800b012:	e7d5      	b.n	800afc0 <_free_r+0x24>
 800b014:	6821      	ldr	r1, [r4, #0]
 800b016:	1860      	adds	r0, r4, r1
 800b018:	4282      	cmp	r2, r0
 800b01a:	d103      	bne.n	800b024 <_free_r+0x88>
 800b01c:	6810      	ldr	r0, [r2, #0]
 800b01e:	6852      	ldr	r2, [r2, #4]
 800b020:	1841      	adds	r1, r0, r1
 800b022:	6021      	str	r1, [r4, #0]
 800b024:	6062      	str	r2, [r4, #4]
 800b026:	605c      	str	r4, [r3, #4]
 800b028:	e7ca      	b.n	800afc0 <_free_r+0x24>
 800b02a:	46c0      	nop			; (mov r8, r8)
 800b02c:	20002200 	.word	0x20002200

0800b030 <_malloc_r>:
 800b030:	2303      	movs	r3, #3
 800b032:	b570      	push	{r4, r5, r6, lr}
 800b034:	1ccd      	adds	r5, r1, #3
 800b036:	439d      	bics	r5, r3
 800b038:	3508      	adds	r5, #8
 800b03a:	0006      	movs	r6, r0
 800b03c:	2d0c      	cmp	r5, #12
 800b03e:	d21e      	bcs.n	800b07e <_malloc_r+0x4e>
 800b040:	250c      	movs	r5, #12
 800b042:	42a9      	cmp	r1, r5
 800b044:	d81d      	bhi.n	800b082 <_malloc_r+0x52>
 800b046:	0030      	movs	r0, r6
 800b048:	f000 f956 	bl	800b2f8 <__malloc_lock>
 800b04c:	4a25      	ldr	r2, [pc, #148]	; (800b0e4 <_malloc_r+0xb4>)
 800b04e:	6814      	ldr	r4, [r2, #0]
 800b050:	0021      	movs	r1, r4
 800b052:	2900      	cmp	r1, #0
 800b054:	d119      	bne.n	800b08a <_malloc_r+0x5a>
 800b056:	4c24      	ldr	r4, [pc, #144]	; (800b0e8 <_malloc_r+0xb8>)
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d103      	bne.n	800b066 <_malloc_r+0x36>
 800b05e:	0030      	movs	r0, r6
 800b060:	f000 f844 	bl	800b0ec <_sbrk_r>
 800b064:	6020      	str	r0, [r4, #0]
 800b066:	0029      	movs	r1, r5
 800b068:	0030      	movs	r0, r6
 800b06a:	f000 f83f 	bl	800b0ec <_sbrk_r>
 800b06e:	1c43      	adds	r3, r0, #1
 800b070:	d12b      	bne.n	800b0ca <_malloc_r+0x9a>
 800b072:	230c      	movs	r3, #12
 800b074:	0030      	movs	r0, r6
 800b076:	6033      	str	r3, [r6, #0]
 800b078:	f000 f93f 	bl	800b2fa <__malloc_unlock>
 800b07c:	e003      	b.n	800b086 <_malloc_r+0x56>
 800b07e:	2d00      	cmp	r5, #0
 800b080:	dadf      	bge.n	800b042 <_malloc_r+0x12>
 800b082:	230c      	movs	r3, #12
 800b084:	6033      	str	r3, [r6, #0]
 800b086:	2000      	movs	r0, #0
 800b088:	bd70      	pop	{r4, r5, r6, pc}
 800b08a:	680b      	ldr	r3, [r1, #0]
 800b08c:	1b5b      	subs	r3, r3, r5
 800b08e:	d419      	bmi.n	800b0c4 <_malloc_r+0x94>
 800b090:	2b0b      	cmp	r3, #11
 800b092:	d903      	bls.n	800b09c <_malloc_r+0x6c>
 800b094:	600b      	str	r3, [r1, #0]
 800b096:	18cc      	adds	r4, r1, r3
 800b098:	6025      	str	r5, [r4, #0]
 800b09a:	e003      	b.n	800b0a4 <_malloc_r+0x74>
 800b09c:	684b      	ldr	r3, [r1, #4]
 800b09e:	428c      	cmp	r4, r1
 800b0a0:	d10d      	bne.n	800b0be <_malloc_r+0x8e>
 800b0a2:	6013      	str	r3, [r2, #0]
 800b0a4:	0030      	movs	r0, r6
 800b0a6:	f000 f928 	bl	800b2fa <__malloc_unlock>
 800b0aa:	0020      	movs	r0, r4
 800b0ac:	2207      	movs	r2, #7
 800b0ae:	300b      	adds	r0, #11
 800b0b0:	1d23      	adds	r3, r4, #4
 800b0b2:	4390      	bics	r0, r2
 800b0b4:	1ac3      	subs	r3, r0, r3
 800b0b6:	d0e7      	beq.n	800b088 <_malloc_r+0x58>
 800b0b8:	425a      	negs	r2, r3
 800b0ba:	50e2      	str	r2, [r4, r3]
 800b0bc:	e7e4      	b.n	800b088 <_malloc_r+0x58>
 800b0be:	6063      	str	r3, [r4, #4]
 800b0c0:	000c      	movs	r4, r1
 800b0c2:	e7ef      	b.n	800b0a4 <_malloc_r+0x74>
 800b0c4:	000c      	movs	r4, r1
 800b0c6:	6849      	ldr	r1, [r1, #4]
 800b0c8:	e7c3      	b.n	800b052 <_malloc_r+0x22>
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	1cc4      	adds	r4, r0, #3
 800b0ce:	439c      	bics	r4, r3
 800b0d0:	42a0      	cmp	r0, r4
 800b0d2:	d0e1      	beq.n	800b098 <_malloc_r+0x68>
 800b0d4:	1a21      	subs	r1, r4, r0
 800b0d6:	0030      	movs	r0, r6
 800b0d8:	f000 f808 	bl	800b0ec <_sbrk_r>
 800b0dc:	1c43      	adds	r3, r0, #1
 800b0de:	d1db      	bne.n	800b098 <_malloc_r+0x68>
 800b0e0:	e7c7      	b.n	800b072 <_malloc_r+0x42>
 800b0e2:	46c0      	nop			; (mov r8, r8)
 800b0e4:	20002200 	.word	0x20002200
 800b0e8:	20002204 	.word	0x20002204

0800b0ec <_sbrk_r>:
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	b570      	push	{r4, r5, r6, lr}
 800b0f0:	4c06      	ldr	r4, [pc, #24]	; (800b10c <_sbrk_r+0x20>)
 800b0f2:	0005      	movs	r5, r0
 800b0f4:	0008      	movs	r0, r1
 800b0f6:	6023      	str	r3, [r4, #0]
 800b0f8:	f000 fb0a 	bl	800b710 <_sbrk>
 800b0fc:	1c43      	adds	r3, r0, #1
 800b0fe:	d103      	bne.n	800b108 <_sbrk_r+0x1c>
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d000      	beq.n	800b108 <_sbrk_r+0x1c>
 800b106:	602b      	str	r3, [r5, #0]
 800b108:	bd70      	pop	{r4, r5, r6, pc}
 800b10a:	46c0      	nop			; (mov r8, r8)
 800b10c:	20003284 	.word	0x20003284

0800b110 <_raise_r>:
 800b110:	b570      	push	{r4, r5, r6, lr}
 800b112:	0004      	movs	r4, r0
 800b114:	000d      	movs	r5, r1
 800b116:	291f      	cmp	r1, #31
 800b118:	d904      	bls.n	800b124 <_raise_r+0x14>
 800b11a:	2316      	movs	r3, #22
 800b11c:	6003      	str	r3, [r0, #0]
 800b11e:	2001      	movs	r0, #1
 800b120:	4240      	negs	r0, r0
 800b122:	bd70      	pop	{r4, r5, r6, pc}
 800b124:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b126:	2b00      	cmp	r3, #0
 800b128:	d004      	beq.n	800b134 <_raise_r+0x24>
 800b12a:	008a      	lsls	r2, r1, #2
 800b12c:	189b      	adds	r3, r3, r2
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	2a00      	cmp	r2, #0
 800b132:	d108      	bne.n	800b146 <_raise_r+0x36>
 800b134:	0020      	movs	r0, r4
 800b136:	f000 f831 	bl	800b19c <_getpid_r>
 800b13a:	002a      	movs	r2, r5
 800b13c:	0001      	movs	r1, r0
 800b13e:	0020      	movs	r0, r4
 800b140:	f000 f81a 	bl	800b178 <_kill_r>
 800b144:	e7ed      	b.n	800b122 <_raise_r+0x12>
 800b146:	2000      	movs	r0, #0
 800b148:	2a01      	cmp	r2, #1
 800b14a:	d0ea      	beq.n	800b122 <_raise_r+0x12>
 800b14c:	1c51      	adds	r1, r2, #1
 800b14e:	d103      	bne.n	800b158 <_raise_r+0x48>
 800b150:	2316      	movs	r3, #22
 800b152:	3001      	adds	r0, #1
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	e7e4      	b.n	800b122 <_raise_r+0x12>
 800b158:	2400      	movs	r4, #0
 800b15a:	0028      	movs	r0, r5
 800b15c:	601c      	str	r4, [r3, #0]
 800b15e:	4790      	blx	r2
 800b160:	0020      	movs	r0, r4
 800b162:	e7de      	b.n	800b122 <_raise_r+0x12>

0800b164 <raise>:
 800b164:	b510      	push	{r4, lr}
 800b166:	4b03      	ldr	r3, [pc, #12]	; (800b174 <raise+0x10>)
 800b168:	0001      	movs	r1, r0
 800b16a:	6818      	ldr	r0, [r3, #0]
 800b16c:	f7ff ffd0 	bl	800b110 <_raise_r>
 800b170:	bd10      	pop	{r4, pc}
 800b172:	46c0      	nop			; (mov r8, r8)
 800b174:	20000140 	.word	0x20000140

0800b178 <_kill_r>:
 800b178:	2300      	movs	r3, #0
 800b17a:	b570      	push	{r4, r5, r6, lr}
 800b17c:	4c06      	ldr	r4, [pc, #24]	; (800b198 <_kill_r+0x20>)
 800b17e:	0005      	movs	r5, r0
 800b180:	0008      	movs	r0, r1
 800b182:	0011      	movs	r1, r2
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	f000 faab 	bl	800b6e0 <_kill>
 800b18a:	1c43      	adds	r3, r0, #1
 800b18c:	d103      	bne.n	800b196 <_kill_r+0x1e>
 800b18e:	6823      	ldr	r3, [r4, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d000      	beq.n	800b196 <_kill_r+0x1e>
 800b194:	602b      	str	r3, [r5, #0]
 800b196:	bd70      	pop	{r4, r5, r6, pc}
 800b198:	20003284 	.word	0x20003284

0800b19c <_getpid_r>:
 800b19c:	b510      	push	{r4, lr}
 800b19e:	f000 fa8f 	bl	800b6c0 <_getpid>
 800b1a2:	bd10      	pop	{r4, pc}

0800b1a4 <__sread>:
 800b1a4:	b570      	push	{r4, r5, r6, lr}
 800b1a6:	000c      	movs	r4, r1
 800b1a8:	250e      	movs	r5, #14
 800b1aa:	5f49      	ldrsh	r1, [r1, r5]
 800b1ac:	f000 f8a6 	bl	800b2fc <_read_r>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	db03      	blt.n	800b1bc <__sread+0x18>
 800b1b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b1b6:	181b      	adds	r3, r3, r0
 800b1b8:	6563      	str	r3, [r4, #84]	; 0x54
 800b1ba:	bd70      	pop	{r4, r5, r6, pc}
 800b1bc:	89a3      	ldrh	r3, [r4, #12]
 800b1be:	4a02      	ldr	r2, [pc, #8]	; (800b1c8 <__sread+0x24>)
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	81a3      	strh	r3, [r4, #12]
 800b1c4:	e7f9      	b.n	800b1ba <__sread+0x16>
 800b1c6:	46c0      	nop			; (mov r8, r8)
 800b1c8:	ffffefff 	.word	0xffffefff

0800b1cc <__swrite>:
 800b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ce:	001f      	movs	r7, r3
 800b1d0:	898b      	ldrh	r3, [r1, #12]
 800b1d2:	0005      	movs	r5, r0
 800b1d4:	000c      	movs	r4, r1
 800b1d6:	0016      	movs	r6, r2
 800b1d8:	05db      	lsls	r3, r3, #23
 800b1da:	d505      	bpl.n	800b1e8 <__swrite+0x1c>
 800b1dc:	230e      	movs	r3, #14
 800b1de:	5ec9      	ldrsh	r1, [r1, r3]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	2302      	movs	r3, #2
 800b1e4:	f000 f874 	bl	800b2d0 <_lseek_r>
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	4a05      	ldr	r2, [pc, #20]	; (800b200 <__swrite+0x34>)
 800b1ec:	0028      	movs	r0, r5
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	81a3      	strh	r3, [r4, #12]
 800b1f2:	0032      	movs	r2, r6
 800b1f4:	230e      	movs	r3, #14
 800b1f6:	5ee1      	ldrsh	r1, [r4, r3]
 800b1f8:	003b      	movs	r3, r7
 800b1fa:	f000 f81f 	bl	800b23c <_write_r>
 800b1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b200:	ffffefff 	.word	0xffffefff

0800b204 <__sseek>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	000c      	movs	r4, r1
 800b208:	250e      	movs	r5, #14
 800b20a:	5f49      	ldrsh	r1, [r1, r5]
 800b20c:	f000 f860 	bl	800b2d0 <_lseek_r>
 800b210:	89a3      	ldrh	r3, [r4, #12]
 800b212:	1c42      	adds	r2, r0, #1
 800b214:	d103      	bne.n	800b21e <__sseek+0x1a>
 800b216:	4a05      	ldr	r2, [pc, #20]	; (800b22c <__sseek+0x28>)
 800b218:	4013      	ands	r3, r2
 800b21a:	81a3      	strh	r3, [r4, #12]
 800b21c:	bd70      	pop	{r4, r5, r6, pc}
 800b21e:	2280      	movs	r2, #128	; 0x80
 800b220:	0152      	lsls	r2, r2, #5
 800b222:	4313      	orrs	r3, r2
 800b224:	81a3      	strh	r3, [r4, #12]
 800b226:	6560      	str	r0, [r4, #84]	; 0x54
 800b228:	e7f8      	b.n	800b21c <__sseek+0x18>
 800b22a:	46c0      	nop			; (mov r8, r8)
 800b22c:	ffffefff 	.word	0xffffefff

0800b230 <__sclose>:
 800b230:	b510      	push	{r4, lr}
 800b232:	230e      	movs	r3, #14
 800b234:	5ec9      	ldrsh	r1, [r1, r3]
 800b236:	f000 f815 	bl	800b264 <_close_r>
 800b23a:	bd10      	pop	{r4, pc}

0800b23c <_write_r>:
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	0005      	movs	r5, r0
 800b240:	0008      	movs	r0, r1
 800b242:	0011      	movs	r1, r2
 800b244:	2200      	movs	r2, #0
 800b246:	4c06      	ldr	r4, [pc, #24]	; (800b260 <_write_r+0x24>)
 800b248:	6022      	str	r2, [r4, #0]
 800b24a:	001a      	movs	r2, r3
 800b24c:	f000 fa70 	bl	800b730 <_write>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d103      	bne.n	800b25c <_write_r+0x20>
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d000      	beq.n	800b25c <_write_r+0x20>
 800b25a:	602b      	str	r3, [r5, #0]
 800b25c:	bd70      	pop	{r4, r5, r6, pc}
 800b25e:	46c0      	nop			; (mov r8, r8)
 800b260:	20003284 	.word	0x20003284

0800b264 <_close_r>:
 800b264:	2300      	movs	r3, #0
 800b266:	b570      	push	{r4, r5, r6, lr}
 800b268:	4c06      	ldr	r4, [pc, #24]	; (800b284 <_close_r+0x20>)
 800b26a:	0005      	movs	r5, r0
 800b26c:	0008      	movs	r0, r1
 800b26e:	6023      	str	r3, [r4, #0]
 800b270:	f000 fa16 	bl	800b6a0 <_close>
 800b274:	1c43      	adds	r3, r0, #1
 800b276:	d103      	bne.n	800b280 <_close_r+0x1c>
 800b278:	6823      	ldr	r3, [r4, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d000      	beq.n	800b280 <_close_r+0x1c>
 800b27e:	602b      	str	r3, [r5, #0]
 800b280:	bd70      	pop	{r4, r5, r6, pc}
 800b282:	46c0      	nop			; (mov r8, r8)
 800b284:	20003284 	.word	0x20003284

0800b288 <_fstat_r>:
 800b288:	2300      	movs	r3, #0
 800b28a:	b570      	push	{r4, r5, r6, lr}
 800b28c:	4c06      	ldr	r4, [pc, #24]	; (800b2a8 <_fstat_r+0x20>)
 800b28e:	0005      	movs	r5, r0
 800b290:	0008      	movs	r0, r1
 800b292:	0011      	movs	r1, r2
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	f000 fa0b 	bl	800b6b0 <_fstat>
 800b29a:	1c43      	adds	r3, r0, #1
 800b29c:	d103      	bne.n	800b2a6 <_fstat_r+0x1e>
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d000      	beq.n	800b2a6 <_fstat_r+0x1e>
 800b2a4:	602b      	str	r3, [r5, #0]
 800b2a6:	bd70      	pop	{r4, r5, r6, pc}
 800b2a8:	20003284 	.word	0x20003284

0800b2ac <_isatty_r>:
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	b570      	push	{r4, r5, r6, lr}
 800b2b0:	4c06      	ldr	r4, [pc, #24]	; (800b2cc <_isatty_r+0x20>)
 800b2b2:	0005      	movs	r5, r0
 800b2b4:	0008      	movs	r0, r1
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	f000 fa0a 	bl	800b6d0 <_isatty>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d103      	bne.n	800b2c8 <_isatty_r+0x1c>
 800b2c0:	6823      	ldr	r3, [r4, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d000      	beq.n	800b2c8 <_isatty_r+0x1c>
 800b2c6:	602b      	str	r3, [r5, #0]
 800b2c8:	bd70      	pop	{r4, r5, r6, pc}
 800b2ca:	46c0      	nop			; (mov r8, r8)
 800b2cc:	20003284 	.word	0x20003284

0800b2d0 <_lseek_r>:
 800b2d0:	b570      	push	{r4, r5, r6, lr}
 800b2d2:	0005      	movs	r5, r0
 800b2d4:	0008      	movs	r0, r1
 800b2d6:	0011      	movs	r1, r2
 800b2d8:	2200      	movs	r2, #0
 800b2da:	4c06      	ldr	r4, [pc, #24]	; (800b2f4 <_lseek_r+0x24>)
 800b2dc:	6022      	str	r2, [r4, #0]
 800b2de:	001a      	movs	r2, r3
 800b2e0:	f000 fa06 	bl	800b6f0 <_lseek>
 800b2e4:	1c43      	adds	r3, r0, #1
 800b2e6:	d103      	bne.n	800b2f0 <_lseek_r+0x20>
 800b2e8:	6823      	ldr	r3, [r4, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d000      	beq.n	800b2f0 <_lseek_r+0x20>
 800b2ee:	602b      	str	r3, [r5, #0]
 800b2f0:	bd70      	pop	{r4, r5, r6, pc}
 800b2f2:	46c0      	nop			; (mov r8, r8)
 800b2f4:	20003284 	.word	0x20003284

0800b2f8 <__malloc_lock>:
 800b2f8:	4770      	bx	lr

0800b2fa <__malloc_unlock>:
 800b2fa:	4770      	bx	lr

0800b2fc <_read_r>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	0005      	movs	r5, r0
 800b300:	0008      	movs	r0, r1
 800b302:	0011      	movs	r1, r2
 800b304:	2200      	movs	r2, #0
 800b306:	4c06      	ldr	r4, [pc, #24]	; (800b320 <_read_r+0x24>)
 800b308:	6022      	str	r2, [r4, #0]
 800b30a:	001a      	movs	r2, r3
 800b30c:	f000 f9f8 	bl	800b700 <_read>
 800b310:	1c43      	adds	r3, r0, #1
 800b312:	d103      	bne.n	800b31c <_read_r+0x20>
 800b314:	6823      	ldr	r3, [r4, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d000      	beq.n	800b31c <_read_r+0x20>
 800b31a:	602b      	str	r3, [r5, #0]
 800b31c:	bd70      	pop	{r4, r5, r6, pc}
 800b31e:	46c0      	nop			; (mov r8, r8)
 800b320:	20003284 	.word	0x20003284

0800b324 <logf>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	2500      	movs	r5, #0
 800b328:	b08c      	sub	sp, #48	; 0x30
 800b32a:	1c04      	adds	r4, r0, #0
 800b32c:	f000 f872 	bl	800b414 <__ieee754_logf>
 800b330:	4b33      	ldr	r3, [pc, #204]	; (800b400 <logf+0xdc>)
 800b332:	1c06      	adds	r6, r0, #0
 800b334:	575d      	ldrsb	r5, [r3, r5]
 800b336:	1c6b      	adds	r3, r5, #1
 800b338:	d05e      	beq.n	800b3f8 <logf+0xd4>
 800b33a:	1c21      	adds	r1, r4, #0
 800b33c:	1c20      	adds	r0, r4, #0
 800b33e:	f7f5 ff13 	bl	8001168 <__aeabi_fcmpun>
 800b342:	2800      	cmp	r0, #0
 800b344:	d158      	bne.n	800b3f8 <logf+0xd4>
 800b346:	2100      	movs	r1, #0
 800b348:	1c20      	adds	r0, r4, #0
 800b34a:	f7f5 f879 	bl	8000440 <__aeabi_fcmpgt>
 800b34e:	2800      	cmp	r0, #0
 800b350:	d152      	bne.n	800b3f8 <logf+0xd4>
 800b352:	4b2c      	ldr	r3, [pc, #176]	; (800b404 <logf+0xe0>)
 800b354:	900a      	str	r0, [sp, #40]	; 0x28
 800b356:	1c20      	adds	r0, r4, #0
 800b358:	9303      	str	r3, [sp, #12]
 800b35a:	f7f5 ffc5 	bl	80012e8 <__aeabi_f2d>
 800b35e:	9006      	str	r0, [sp, #24]
 800b360:	9107      	str	r1, [sp, #28]
 800b362:	9004      	str	r0, [sp, #16]
 800b364:	9105      	str	r1, [sp, #20]
 800b366:	2d00      	cmp	r5, #0
 800b368:	d113      	bne.n	800b392 <logf+0x6e>
 800b36a:	22e0      	movs	r2, #224	; 0xe0
 800b36c:	4b26      	ldr	r3, [pc, #152]	; (800b408 <logf+0xe4>)
 800b36e:	0612      	lsls	r2, r2, #24
 800b370:	2100      	movs	r1, #0
 800b372:	1c20      	adds	r0, r4, #0
 800b374:	9208      	str	r2, [sp, #32]
 800b376:	9309      	str	r3, [sp, #36]	; 0x24
 800b378:	f7f5 f848 	bl	800040c <__aeabi_fcmpeq>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d126      	bne.n	800b3ce <logf+0xaa>
 800b380:	2301      	movs	r3, #1
 800b382:	9302      	str	r3, [sp, #8]
 800b384:	2d02      	cmp	r5, #2
 800b386:	d117      	bne.n	800b3b8 <logf+0x94>
 800b388:	f000 f984 	bl	800b694 <__errno>
 800b38c:	2321      	movs	r3, #33	; 0x21
 800b38e:	6003      	str	r3, [r0, #0]
 800b390:	e017      	b.n	800b3c2 <logf+0x9e>
 800b392:	2200      	movs	r2, #0
 800b394:	4b1d      	ldr	r3, [pc, #116]	; (800b40c <logf+0xe8>)
 800b396:	2100      	movs	r1, #0
 800b398:	1c20      	adds	r0, r4, #0
 800b39a:	9208      	str	r2, [sp, #32]
 800b39c:	9309      	str	r3, [sp, #36]	; 0x24
 800b39e:	f7f5 f835 	bl	800040c <__aeabi_fcmpeq>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d0ec      	beq.n	800b380 <logf+0x5c>
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	9302      	str	r3, [sp, #8]
 800b3aa:	429d      	cmp	r5, r3
 800b3ac:	d111      	bne.n	800b3d2 <logf+0xae>
 800b3ae:	f000 f971 	bl	800b694 <__errno>
 800b3b2:	2322      	movs	r3, #34	; 0x22
 800b3b4:	6003      	str	r3, [r0, #0]
 800b3b6:	e011      	b.n	800b3dc <logf+0xb8>
 800b3b8:	a802      	add	r0, sp, #8
 800b3ba:	f000 f963 	bl	800b684 <matherr>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d0e2      	beq.n	800b388 <logf+0x64>
 800b3c2:	4813      	ldr	r0, [pc, #76]	; (800b410 <logf+0xec>)
 800b3c4:	f000 f960 	bl	800b688 <nan>
 800b3c8:	9008      	str	r0, [sp, #32]
 800b3ca:	9109      	str	r1, [sp, #36]	; 0x24
 800b3cc:	e006      	b.n	800b3dc <logf+0xb8>
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	9302      	str	r3, [sp, #8]
 800b3d2:	a802      	add	r0, sp, #8
 800b3d4:	f000 f956 	bl	800b684 <matherr>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d0e8      	beq.n	800b3ae <logf+0x8a>
 800b3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3de:	9301      	str	r3, [sp, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d004      	beq.n	800b3ee <logf+0xca>
 800b3e4:	f000 f956 	bl	800b694 <__errno>
 800b3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ea:	9301      	str	r3, [sp, #4]
 800b3ec:	6003      	str	r3, [r0, #0]
 800b3ee:	9808      	ldr	r0, [sp, #32]
 800b3f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3f2:	f7f5 ffcb 	bl	800138c <__aeabi_d2f>
 800b3f6:	1c06      	adds	r6, r0, #0
 800b3f8:	1c30      	adds	r0, r6, #0
 800b3fa:	b00c      	add	sp, #48	; 0x30
 800b3fc:	bd70      	pop	{r4, r5, r6, pc}
 800b3fe:	46c0      	nop			; (mov r8, r8)
 800b400:	200001a4 	.word	0x200001a4
 800b404:	0800c9c0 	.word	0x0800c9c0
 800b408:	c7efffff 	.word	0xc7efffff
 800b40c:	fff00000 	.word	0xfff00000
 800b410:	0800c927 	.word	0x0800c927

0800b414 <__ieee754_logf>:
 800b414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b416:	0003      	movs	r3, r0
 800b418:	b085      	sub	sp, #20
 800b41a:	0042      	lsls	r2, r0, #1
 800b41c:	d106      	bne.n	800b42c <__ieee754_logf+0x18>
 800b41e:	20cc      	movs	r0, #204	; 0xcc
 800b420:	2100      	movs	r1, #0
 800b422:	0600      	lsls	r0, r0, #24
 800b424:	f7f5 f9d2 	bl	80007cc <__aeabi_fdiv>
 800b428:	b005      	add	sp, #20
 800b42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b42c:	2800      	cmp	r0, #0
 800b42e:	da04      	bge.n	800b43a <__ieee754_logf+0x26>
 800b430:	1c01      	adds	r1, r0, #0
 800b432:	f7f5 fcd5 	bl	8000de0 <__aeabi_fsub>
 800b436:	2100      	movs	r1, #0
 800b438:	e7f4      	b.n	800b424 <__ieee754_logf+0x10>
 800b43a:	4a83      	ldr	r2, [pc, #524]	; (800b648 <__ieee754_logf+0x234>)
 800b43c:	1c01      	adds	r1, r0, #0
 800b43e:	4290      	cmp	r0, r2
 800b440:	dc3d      	bgt.n	800b4be <__ieee754_logf+0xaa>
 800b442:	4982      	ldr	r1, [pc, #520]	; (800b64c <__ieee754_logf+0x238>)
 800b444:	2200      	movs	r2, #0
 800b446:	4288      	cmp	r0, r1
 800b448:	dc06      	bgt.n	800b458 <__ieee754_logf+0x44>
 800b44a:	2198      	movs	r1, #152	; 0x98
 800b44c:	05c9      	lsls	r1, r1, #23
 800b44e:	f7f5 fb95 	bl	8000b7c <__aeabi_fmul>
 800b452:	2219      	movs	r2, #25
 800b454:	0003      	movs	r3, r0
 800b456:	4252      	negs	r2, r2
 800b458:	15dd      	asrs	r5, r3, #23
 800b45a:	3d7f      	subs	r5, #127	; 0x7f
 800b45c:	18ad      	adds	r5, r5, r2
 800b45e:	025b      	lsls	r3, r3, #9
 800b460:	4a7b      	ldr	r2, [pc, #492]	; (800b650 <__ieee754_logf+0x23c>)
 800b462:	0a5b      	lsrs	r3, r3, #9
 800b464:	1898      	adds	r0, r3, r2
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	2380      	movs	r3, #128	; 0x80
 800b46a:	041b      	lsls	r3, r3, #16
 800b46c:	4003      	ands	r3, r0
 800b46e:	20fe      	movs	r0, #254	; 0xfe
 800b470:	21fe      	movs	r1, #254	; 0xfe
 800b472:	0580      	lsls	r0, r0, #22
 800b474:	15da      	asrs	r2, r3, #23
 800b476:	4058      	eors	r0, r3
 800b478:	9b00      	ldr	r3, [sp, #0]
 800b47a:	0589      	lsls	r1, r1, #22
 800b47c:	4318      	orrs	r0, r3
 800b47e:	1955      	adds	r5, r2, r5
 800b480:	f7f5 fcae 	bl	8000de0 <__aeabi_fsub>
 800b484:	9b00      	ldr	r3, [sp, #0]
 800b486:	1c04      	adds	r4, r0, #0
 800b488:	330f      	adds	r3, #15
 800b48a:	025b      	lsls	r3, r3, #9
 800b48c:	0a5b      	lsrs	r3, r3, #9
 800b48e:	2b0f      	cmp	r3, #15
 800b490:	dc47      	bgt.n	800b522 <__ieee754_logf+0x10e>
 800b492:	2100      	movs	r1, #0
 800b494:	f7f4 ffba 	bl	800040c <__aeabi_fcmpeq>
 800b498:	2800      	cmp	r0, #0
 800b49a:	d013      	beq.n	800b4c4 <__ieee754_logf+0xb0>
 800b49c:	2000      	movs	r0, #0
 800b49e:	2d00      	cmp	r5, #0
 800b4a0:	d0c2      	beq.n	800b428 <__ieee754_logf+0x14>
 800b4a2:	0028      	movs	r0, r5
 800b4a4:	f7f5 fe96 	bl	80011d4 <__aeabi_i2f>
 800b4a8:	496a      	ldr	r1, [pc, #424]	; (800b654 <__ieee754_logf+0x240>)
 800b4aa:	1c04      	adds	r4, r0, #0
 800b4ac:	f7f5 fb66 	bl	8000b7c <__aeabi_fmul>
 800b4b0:	4969      	ldr	r1, [pc, #420]	; (800b658 <__ieee754_logf+0x244>)
 800b4b2:	1c05      	adds	r5, r0, #0
 800b4b4:	1c20      	adds	r0, r4, #0
 800b4b6:	f7f5 fb61 	bl	8000b7c <__aeabi_fmul>
 800b4ba:	1c01      	adds	r1, r0, #0
 800b4bc:	1c28      	adds	r0, r5, #0
 800b4be:	f7f4 ffeb 	bl	8000498 <__aeabi_fadd>
 800b4c2:	e7b1      	b.n	800b428 <__ieee754_logf+0x14>
 800b4c4:	4965      	ldr	r1, [pc, #404]	; (800b65c <__ieee754_logf+0x248>)
 800b4c6:	1c20      	adds	r0, r4, #0
 800b4c8:	f7f5 fb58 	bl	8000b7c <__aeabi_fmul>
 800b4cc:	1c01      	adds	r1, r0, #0
 800b4ce:	20fc      	movs	r0, #252	; 0xfc
 800b4d0:	0580      	lsls	r0, r0, #22
 800b4d2:	f7f5 fc85 	bl	8000de0 <__aeabi_fsub>
 800b4d6:	1c21      	adds	r1, r4, #0
 800b4d8:	1c06      	adds	r6, r0, #0
 800b4da:	1c20      	adds	r0, r4, #0
 800b4dc:	f7f5 fb4e 	bl	8000b7c <__aeabi_fmul>
 800b4e0:	1c01      	adds	r1, r0, #0
 800b4e2:	1c30      	adds	r0, r6, #0
 800b4e4:	f7f5 fb4a 	bl	8000b7c <__aeabi_fmul>
 800b4e8:	1c06      	adds	r6, r0, #0
 800b4ea:	2d00      	cmp	r5, #0
 800b4ec:	d101      	bne.n	800b4f2 <__ieee754_logf+0xde>
 800b4ee:	1c31      	adds	r1, r6, #0
 800b4f0:	e07c      	b.n	800b5ec <__ieee754_logf+0x1d8>
 800b4f2:	0028      	movs	r0, r5
 800b4f4:	f7f5 fe6e 	bl	80011d4 <__aeabi_i2f>
 800b4f8:	4956      	ldr	r1, [pc, #344]	; (800b654 <__ieee754_logf+0x240>)
 800b4fa:	1c05      	adds	r5, r0, #0
 800b4fc:	f7f5 fb3e 	bl	8000b7c <__aeabi_fmul>
 800b500:	4955      	ldr	r1, [pc, #340]	; (800b658 <__ieee754_logf+0x244>)
 800b502:	1c07      	adds	r7, r0, #0
 800b504:	1c28      	adds	r0, r5, #0
 800b506:	f7f5 fb39 	bl	8000b7c <__aeabi_fmul>
 800b50a:	1c01      	adds	r1, r0, #0
 800b50c:	1c30      	adds	r0, r6, #0
 800b50e:	f7f5 fc67 	bl	8000de0 <__aeabi_fsub>
 800b512:	1c21      	adds	r1, r4, #0
 800b514:	f7f5 fc64 	bl	8000de0 <__aeabi_fsub>
 800b518:	1c01      	adds	r1, r0, #0
 800b51a:	1c38      	adds	r0, r7, #0
 800b51c:	f7f5 fc60 	bl	8000de0 <__aeabi_fsub>
 800b520:	e782      	b.n	800b428 <__ieee754_logf+0x14>
 800b522:	2180      	movs	r1, #128	; 0x80
 800b524:	05c9      	lsls	r1, r1, #23
 800b526:	f7f4 ffb7 	bl	8000498 <__aeabi_fadd>
 800b52a:	1c01      	adds	r1, r0, #0
 800b52c:	1c20      	adds	r0, r4, #0
 800b52e:	f7f5 f94d 	bl	80007cc <__aeabi_fdiv>
 800b532:	9001      	str	r0, [sp, #4]
 800b534:	0028      	movs	r0, r5
 800b536:	f7f5 fe4d 	bl	80011d4 <__aeabi_i2f>
 800b53a:	9901      	ldr	r1, [sp, #4]
 800b53c:	9002      	str	r0, [sp, #8]
 800b53e:	1c08      	adds	r0, r1, #0
 800b540:	f7f5 fb1c 	bl	8000b7c <__aeabi_fmul>
 800b544:	4a46      	ldr	r2, [pc, #280]	; (800b660 <__ieee754_logf+0x24c>)
 800b546:	9b00      	ldr	r3, [sp, #0]
 800b548:	4694      	mov	ip, r2
 800b54a:	1c01      	adds	r1, r0, #0
 800b54c:	4463      	add	r3, ip
 800b54e:	9303      	str	r3, [sp, #12]
 800b550:	1c07      	adds	r7, r0, #0
 800b552:	f7f5 fb13 	bl	8000b7c <__aeabi_fmul>
 800b556:	4943      	ldr	r1, [pc, #268]	; (800b664 <__ieee754_logf+0x250>)
 800b558:	1c06      	adds	r6, r0, #0
 800b55a:	f7f5 fb0f 	bl	8000b7c <__aeabi_fmul>
 800b55e:	4942      	ldr	r1, [pc, #264]	; (800b668 <__ieee754_logf+0x254>)
 800b560:	f7f4 ff9a 	bl	8000498 <__aeabi_fadd>
 800b564:	1c31      	adds	r1, r6, #0
 800b566:	f7f5 fb09 	bl	8000b7c <__aeabi_fmul>
 800b56a:	4940      	ldr	r1, [pc, #256]	; (800b66c <__ieee754_logf+0x258>)
 800b56c:	f7f4 ff94 	bl	8000498 <__aeabi_fadd>
 800b570:	1c31      	adds	r1, r6, #0
 800b572:	f7f5 fb03 	bl	8000b7c <__aeabi_fmul>
 800b576:	493e      	ldr	r1, [pc, #248]	; (800b670 <__ieee754_logf+0x25c>)
 800b578:	f7f4 ff8e 	bl	8000498 <__aeabi_fadd>
 800b57c:	1c39      	adds	r1, r7, #0
 800b57e:	f7f5 fafd 	bl	8000b7c <__aeabi_fmul>
 800b582:	493c      	ldr	r1, [pc, #240]	; (800b674 <__ieee754_logf+0x260>)
 800b584:	1c07      	adds	r7, r0, #0
 800b586:	1c30      	adds	r0, r6, #0
 800b588:	f7f5 faf8 	bl	8000b7c <__aeabi_fmul>
 800b58c:	493a      	ldr	r1, [pc, #232]	; (800b678 <__ieee754_logf+0x264>)
 800b58e:	f7f4 ff83 	bl	8000498 <__aeabi_fadd>
 800b592:	1c31      	adds	r1, r6, #0
 800b594:	f7f5 faf2 	bl	8000b7c <__aeabi_fmul>
 800b598:	4938      	ldr	r1, [pc, #224]	; (800b67c <__ieee754_logf+0x268>)
 800b59a:	f7f4 ff7d 	bl	8000498 <__aeabi_fadd>
 800b59e:	1c31      	adds	r1, r6, #0
 800b5a0:	f7f5 faec 	bl	8000b7c <__aeabi_fmul>
 800b5a4:	1c01      	adds	r1, r0, #0
 800b5a6:	1c38      	adds	r0, r7, #0
 800b5a8:	f7f4 ff76 	bl	8000498 <__aeabi_fadd>
 800b5ac:	9b00      	ldr	r3, [sp, #0]
 800b5ae:	1c07      	adds	r7, r0, #0
 800b5b0:	4833      	ldr	r0, [pc, #204]	; (800b680 <__ieee754_logf+0x26c>)
 800b5b2:	1ac0      	subs	r0, r0, r3
 800b5b4:	9b03      	ldr	r3, [sp, #12]
 800b5b6:	4318      	orrs	r0, r3
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	dd2f      	ble.n	800b61c <__ieee754_logf+0x208>
 800b5bc:	21fc      	movs	r1, #252	; 0xfc
 800b5be:	1c20      	adds	r0, r4, #0
 800b5c0:	0589      	lsls	r1, r1, #22
 800b5c2:	f7f5 fadb 	bl	8000b7c <__aeabi_fmul>
 800b5c6:	1c21      	adds	r1, r4, #0
 800b5c8:	f7f5 fad8 	bl	8000b7c <__aeabi_fmul>
 800b5cc:	1c01      	adds	r1, r0, #0
 800b5ce:	1c06      	adds	r6, r0, #0
 800b5d0:	1c38      	adds	r0, r7, #0
 800b5d2:	f7f4 ff61 	bl	8000498 <__aeabi_fadd>
 800b5d6:	9901      	ldr	r1, [sp, #4]
 800b5d8:	f7f5 fad0 	bl	8000b7c <__aeabi_fmul>
 800b5dc:	1c07      	adds	r7, r0, #0
 800b5de:	2d00      	cmp	r5, #0
 800b5e0:	d106      	bne.n	800b5f0 <__ieee754_logf+0x1dc>
 800b5e2:	1c01      	adds	r1, r0, #0
 800b5e4:	1c30      	adds	r0, r6, #0
 800b5e6:	f7f5 fbfb 	bl	8000de0 <__aeabi_fsub>
 800b5ea:	1c01      	adds	r1, r0, #0
 800b5ec:	1c20      	adds	r0, r4, #0
 800b5ee:	e795      	b.n	800b51c <__ieee754_logf+0x108>
 800b5f0:	4918      	ldr	r1, [pc, #96]	; (800b654 <__ieee754_logf+0x240>)
 800b5f2:	9802      	ldr	r0, [sp, #8]
 800b5f4:	f7f5 fac2 	bl	8000b7c <__aeabi_fmul>
 800b5f8:	4917      	ldr	r1, [pc, #92]	; (800b658 <__ieee754_logf+0x244>)
 800b5fa:	1c05      	adds	r5, r0, #0
 800b5fc:	9802      	ldr	r0, [sp, #8]
 800b5fe:	f7f5 fabd 	bl	8000b7c <__aeabi_fmul>
 800b602:	1c39      	adds	r1, r7, #0
 800b604:	f7f4 ff48 	bl	8000498 <__aeabi_fadd>
 800b608:	1c01      	adds	r1, r0, #0
 800b60a:	1c30      	adds	r0, r6, #0
 800b60c:	f7f5 fbe8 	bl	8000de0 <__aeabi_fsub>
 800b610:	1c21      	adds	r1, r4, #0
 800b612:	f7f5 fbe5 	bl	8000de0 <__aeabi_fsub>
 800b616:	1c01      	adds	r1, r0, #0
 800b618:	1c28      	adds	r0, r5, #0
 800b61a:	e77f      	b.n	800b51c <__ieee754_logf+0x108>
 800b61c:	1c39      	adds	r1, r7, #0
 800b61e:	1c20      	adds	r0, r4, #0
 800b620:	f7f5 fbde 	bl	8000de0 <__aeabi_fsub>
 800b624:	9901      	ldr	r1, [sp, #4]
 800b626:	f7f5 faa9 	bl	8000b7c <__aeabi_fmul>
 800b62a:	1c06      	adds	r6, r0, #0
 800b62c:	2d00      	cmp	r5, #0
 800b62e:	d100      	bne.n	800b632 <__ieee754_logf+0x21e>
 800b630:	e75d      	b.n	800b4ee <__ieee754_logf+0xda>
 800b632:	4908      	ldr	r1, [pc, #32]	; (800b654 <__ieee754_logf+0x240>)
 800b634:	9802      	ldr	r0, [sp, #8]
 800b636:	f7f5 faa1 	bl	8000b7c <__aeabi_fmul>
 800b63a:	4907      	ldr	r1, [pc, #28]	; (800b658 <__ieee754_logf+0x244>)
 800b63c:	1c05      	adds	r5, r0, #0
 800b63e:	9802      	ldr	r0, [sp, #8]
 800b640:	f7f5 fa9c 	bl	8000b7c <__aeabi_fmul>
 800b644:	e7e0      	b.n	800b608 <__ieee754_logf+0x1f4>
 800b646:	46c0      	nop			; (mov r8, r8)
 800b648:	7f7fffff 	.word	0x7f7fffff
 800b64c:	007fffff 	.word	0x007fffff
 800b650:	004afb20 	.word	0x004afb20
 800b654:	3f317180 	.word	0x3f317180
 800b658:	3717f7d1 	.word	0x3717f7d1
 800b65c:	3eaaaaab 	.word	0x3eaaaaab
 800b660:	ffcf5c30 	.word	0xffcf5c30
 800b664:	3e178897 	.word	0x3e178897
 800b668:	3e3a3325 	.word	0x3e3a3325
 800b66c:	3e924925 	.word	0x3e924925
 800b670:	3f2aaaab 	.word	0x3f2aaaab
 800b674:	3e1cd04f 	.word	0x3e1cd04f
 800b678:	3e638e29 	.word	0x3e638e29
 800b67c:	3ecccccd 	.word	0x3ecccccd
 800b680:	0035c288 	.word	0x0035c288

0800b684 <matherr>:
 800b684:	2000      	movs	r0, #0
 800b686:	4770      	bx	lr

0800b688 <nan>:
 800b688:	2000      	movs	r0, #0
 800b68a:	4901      	ldr	r1, [pc, #4]	; (800b690 <nan+0x8>)
 800b68c:	4770      	bx	lr
 800b68e:	46c0      	nop			; (mov r8, r8)
 800b690:	7ff80000 	.word	0x7ff80000

0800b694 <__errno>:
 800b694:	4b01      	ldr	r3, [pc, #4]	; (800b69c <__errno+0x8>)
 800b696:	6818      	ldr	r0, [r3, #0]
 800b698:	4770      	bx	lr
 800b69a:	46c0      	nop			; (mov r8, r8)
 800b69c:	20000140 	.word	0x20000140

0800b6a0 <_close>:
 800b6a0:	2258      	movs	r2, #88	; 0x58
 800b6a2:	2001      	movs	r0, #1
 800b6a4:	4b01      	ldr	r3, [pc, #4]	; (800b6ac <_close+0xc>)
 800b6a6:	4240      	negs	r0, r0
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	4770      	bx	lr
 800b6ac:	20003284 	.word	0x20003284

0800b6b0 <_fstat>:
 800b6b0:	2258      	movs	r2, #88	; 0x58
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	4b01      	ldr	r3, [pc, #4]	; (800b6bc <_fstat+0xc>)
 800b6b6:	4240      	negs	r0, r0
 800b6b8:	601a      	str	r2, [r3, #0]
 800b6ba:	4770      	bx	lr
 800b6bc:	20003284 	.word	0x20003284

0800b6c0 <_getpid>:
 800b6c0:	2258      	movs	r2, #88	; 0x58
 800b6c2:	2001      	movs	r0, #1
 800b6c4:	4b01      	ldr	r3, [pc, #4]	; (800b6cc <_getpid+0xc>)
 800b6c6:	4240      	negs	r0, r0
 800b6c8:	601a      	str	r2, [r3, #0]
 800b6ca:	4770      	bx	lr
 800b6cc:	20003284 	.word	0x20003284

0800b6d0 <_isatty>:
 800b6d0:	2258      	movs	r2, #88	; 0x58
 800b6d2:	4b02      	ldr	r3, [pc, #8]	; (800b6dc <_isatty+0xc>)
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	601a      	str	r2, [r3, #0]
 800b6d8:	4770      	bx	lr
 800b6da:	46c0      	nop			; (mov r8, r8)
 800b6dc:	20003284 	.word	0x20003284

0800b6e0 <_kill>:
 800b6e0:	2258      	movs	r2, #88	; 0x58
 800b6e2:	2001      	movs	r0, #1
 800b6e4:	4b01      	ldr	r3, [pc, #4]	; (800b6ec <_kill+0xc>)
 800b6e6:	4240      	negs	r0, r0
 800b6e8:	601a      	str	r2, [r3, #0]
 800b6ea:	4770      	bx	lr
 800b6ec:	20003284 	.word	0x20003284

0800b6f0 <_lseek>:
 800b6f0:	2258      	movs	r2, #88	; 0x58
 800b6f2:	2001      	movs	r0, #1
 800b6f4:	4b01      	ldr	r3, [pc, #4]	; (800b6fc <_lseek+0xc>)
 800b6f6:	4240      	negs	r0, r0
 800b6f8:	601a      	str	r2, [r3, #0]
 800b6fa:	4770      	bx	lr
 800b6fc:	20003284 	.word	0x20003284

0800b700 <_read>:
 800b700:	2258      	movs	r2, #88	; 0x58
 800b702:	2001      	movs	r0, #1
 800b704:	4b01      	ldr	r3, [pc, #4]	; (800b70c <_read+0xc>)
 800b706:	4240      	negs	r0, r0
 800b708:	601a      	str	r2, [r3, #0]
 800b70a:	4770      	bx	lr
 800b70c:	20003284 	.word	0x20003284

0800b710 <_sbrk>:
 800b710:	4b05      	ldr	r3, [pc, #20]	; (800b728 <_sbrk+0x18>)
 800b712:	0002      	movs	r2, r0
 800b714:	6819      	ldr	r1, [r3, #0]
 800b716:	2900      	cmp	r1, #0
 800b718:	d101      	bne.n	800b71e <_sbrk+0xe>
 800b71a:	4904      	ldr	r1, [pc, #16]	; (800b72c <_sbrk+0x1c>)
 800b71c:	6019      	str	r1, [r3, #0]
 800b71e:	6818      	ldr	r0, [r3, #0]
 800b720:	1882      	adds	r2, r0, r2
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	4770      	bx	lr
 800b726:	46c0      	nop			; (mov r8, r8)
 800b728:	20002208 	.word	0x20002208
 800b72c:	20003288 	.word	0x20003288

0800b730 <_write>:
 800b730:	2258      	movs	r2, #88	; 0x58
 800b732:	2001      	movs	r0, #1
 800b734:	4b01      	ldr	r3, [pc, #4]	; (800b73c <_write+0xc>)
 800b736:	4240      	negs	r0, r0
 800b738:	601a      	str	r2, [r3, #0]
 800b73a:	4770      	bx	lr
 800b73c:	20003284 	.word	0x20003284

0800b740 <_exit>:
 800b740:	e7fe      	b.n	800b740 <_exit>
	...

0800b744 <query_str.8741>:
 800b744:	5041 3d50 6f50 676e 544c 0000 010c 8028     APP=PongLT....(.

0800b754 <sleep_gateway.8768>:
 800b754:	0080 5081                                   ...P

0800b758 <sleep_endpoint.8769>:
 800b758:	0308 8081                                   ....

0800b75c <appstr.8775>:
 800b75c:	5041 3d50 6f50 676e 544c 0000               APP=PongLT..

0800b768 <rcc_flags.5129>:
 800b768:	0007 0000 0001 0000                         ........

0800b770 <stop_flags.5128>:
 800b770:	0009 0609                                   ....

0800b774 <proc.6991>:
 800b774:	89e3 0800 8939 0800 89e3 0800 89e3 0800     ....9...........
 800b784:	89a9 0800 89e3 0800 89e3 0800 1f65 0800     ............e...
 800b794:	17c9 0800                                   ....

0800b798 <base_std>:
 800b798:	0812 0c0c 0a14 0e0e 0a0a 0a0a 0a0a 0a0a     ................
 800b7a8:	0606 0606 0606 0606 0606 0606 0606 0606     ................

0800b7b8 <ext_std>:
 800b7b8:	0100 0707                                   ....

0800b7bc <m2tt_lut.7075>:
 800b7bc:	2020 4030                                     0@

0800b7c0 <opcode_lut.7060>:
 800b7c0:	0202 0100 0202 0100 0202 0806 0303 0907     ................
 800b7d0:	0404 0100 0404 0100 0404 0806 0505 0907     ................
 800b7e0:	4552 5f47 0000 0000                         REG_....

0800b7e8 <defaults.5792>:
 800b7e8:	0002 0003 0004 0005 8001 fe09 090a 120b     ................
 800b7f8:	230c 000d 000e 000f 9c1d 741e 4b1f 0020     .#.........t.K .
 800b808:	0a21 0622 ff23 0024 c331 2733 0a37 d739     !.".#.$.1.3'7.9.
 800b818:	1d3b a140 0041 0000                         ;.@.A...

0800b820 <wdog_amount.5838>:
 800b820:	0a01 017d 1996 23a0 1996 23a0 23a0 23a0     ..}....#...#.#.#
 800b830:	2b6a 0800 2a86 0800 2ade 0800 2aea 0800     j+...*...*...*..
 800b840:	2b04 0800 2b10 0800 2b18 0800 2bba 0800     .+...+...+...+..
 800b850:	2bda 0800 2be0 0800 2bf8 0800 2be6 0800     .+...+...+...+..
 800b860:	2bec 0800 2bf2 0800                         .+...+..

0800b868 <mdmcfg2.6574>:
 800b868:	94b4 7474                                   ..tt

0800b86c <detection.6582>:
 800b86c:	0ac3 0ac3 0ac4 0ac5 0ac3 0ac3 0ac4 0ac5     ................
 800b87c:	02c2 04c2 07c4 0ac4 02c2 04c2 07c4 0ac4     ................

0800b88c <flag_lut.6667>:
 800b88c:	0400 0302                                   ....

0800b890 <mdmcfg1.6717>:
 800b890:	848c 0000                                   ....

0800b894 <preamblelen.6715>:
 800b894:	0606 0a0a 0a04 0000                         ........

0800b89c <syncword.6714>:
 800b89c:	28d7 14eb 728d 0000                         .(...r..

0800b8a4 <deflength.6716>:
 800b8a4:	1006 2010 2010 0000                         ... . ..

0800b8ac <bg1init>:
 800b8ac:	0600 049e 004b 0000                         ....K...

0800b8b4 <fginit>:
 800b8b4:	ff02 079e 00ff 0000                         ........

0800b8bc <pginit>:
 800b8bc:	1004 079e 00ff 0000                         ........

0800b8c4 <bg2init>:
 800b8c4:	0600 079e 00ff 0000                         ........

0800b8cc <iterinit>:
 800b8cc:	1144 0505                                   D...

0800b8d0 <ti_per_block.6656>:
 800b8d0:	1133 0206                                   3...

0800b8d4 <mode_lut.6690>:
 800b8d4:	0002 0002 0404 0404                         ........

0800b8dc <bandplan.6583>:
 800b8dc:	6c86 ed46 6c86 594e 6c86 c555 6c86 315d     .lF..lNY.lU..l]1
 800b8ec:	6c86 9d64 6c86 096c 6c86 7573 6c86 e17a     .ld..ll..lsu.lz.
 800b8fc:	6c86 4d82 6c86 b989 6c86 2591 6c86 9198     .l.M.l...l.%.l..
 800b90c:	6c86 fd9f 6c86 69a7 6c86 d5ae d886 0048     .l...l.i.l....H.
 800b91c:	d886 0058 d886 0068 d886 0078 d886 0088     ..X...h...x.....
 800b92c:	d886 0098 d886 00a8 d886 00b8 d886 00c8     ................
 800b93c:	d886 00d8 d886 00e8 d886 00f8 d986 0008     ................
 800b94c:	d986 0018 d986 0028 e186 77b7 e286 6626     ......(....w..&f
 800b95c:	e286 5595 e386 4404 e386 3373 e386 22e2     ...U...D..s3..."
 800b96c:	e486 1151 e486 00c0 e586 ef2e e586 de9d     ..Q.............
 800b97c:	e686 cd0c e686 bc7b e686 abea e786 9a59     ......{.......Y.
 800b98c:	e786 89c8                                   ....

0800b990 <bgpkt_ti_lut.6577>:
 800b990:	1962 0207 0000 0000 1c6f 0309 0000 0000     b.......o.......

0800b9a0 <tgdti_lut.6581>:
 800b9a0:	3578 0611 0000 0000 54c0 091b 0000 0000     x5.......T......

0800b9b0 <mitipersym_chan.6592>:
 800b9b0:	10c7 0432 010d 0044                         ..2...D.

0800b9b8 <converter.6591>:
 800b9b8:	2ca3 0800 2c8d 0800 2c77 0800 2c61 0800     .,...,..w,..a,..

0800b9c8 <frparams.6599>:
 800b9c8:	0001 0000 0002 0001 0000 0602 0201 0000     ................
 800b9d8:	0602 0201 0000 0602                         ........

0800b9e0 <initial_bytes.6617>:
 800b9e0:	0507 070f 050f 1111                         ........

0800b9e8 <bits_per_lorablock.6616>:
 800b9e8:	242c 141c 414c 0800 3dbe 0800 3d8c 0800     ,$..LA...=...=..
 800b9f8:	3d82 0800 3c10 0800 3c10 0800 3dfa 0800     .=...<...<...=..
 800ba08:	3d6c 0800 3d68 0800 3d64 0800 3d60 0800     l=..h=..d=..`=..
 800ba18:	3d5c 0800 3c86 0800 3d70 0800 3d16 0800     \=...<..p=...=..
 800ba28:	3d0e 0800 3d06 0800 3cfe 0800 3cf6 0800     .=...=...<...<..
 800ba38:	3cee 0800 3ce6 0800 5190 0800 4f10 0800     .<...<...Q...O..
 800ba48:	4ede 0800 4ed4 0800 4d40 0800 4d40 0800     .N...N..@M..@M..
 800ba58:	4f4c 0800 4ebe 0800 4eba 0800 4eb6 0800     LO...N...N...N..
 800ba68:	4eb2 0800 4eae 0800 4db6 0800 4ec2 0800     .N...N...M...N..
 800ba78:	4e68 0800 4e60 0800 4e58 0800 4e50 0800     hN..`N..XN..PN..
 800ba88:	4e48 0800 4e40 0800 4e38 0800               HN..@N..8N..

0800ba94 <infobits_select.6287>:
 800ba94:	0908 0b0a 0d0c 0606                         ........

0800ba9c <__func__.6299>:
 800ba9c:	7368 5f63 6e69 7469 0000 0000               hsc_init....

0800baa8 <fbit_select.6298>:
 800baa8:	c368 0800 c2e8 0800 c268 0800 c1e8 0800     h.......h.......
 800bab8:	c168 0800 c0e8 0800 c3e8 0800 c3e8 0800     h...............

0800bac8 <wordmask.6344>:
 800bac8:	ff00 ffff 0000 ffff 0000 ff00 0000 0000     ................

0800bad8 <wordload.6345>:
 800bad8:	0000 0000 0100 0000 0100 0002 0100 0302     ................

0800bae8 <j1.6265>:
 800bae8:	0000 0200 0102 0000 0100 0000 0000 0000     ................

0800baf8 <j0.6266>:
 800baf8:	0000 0300 0303 0303 0202 0202 0101 0000     ................

0800bb08 <maxlambda_lut>:
 800bb08:	0000 0101 0202 0202 0303 0303 0303 0303     ................
 800bb18:	0404 0404 0404 0404 0404 0404 0404 0404     ................
 800bb28:	0505 0505 0505 0505 0505 0505 0505 0505     ................
 800bb38:	0505 0505 0505 0505 0505 0505 0505 0505     ................
 800bb48:	0606 0606 0606 0606 0606 0606 0606 0606     ................
 800bb58:	0606 0606 0606 0606 0606 0606 0606 0606     ................
 800bb68:	0606 0606 0606 0606 0606 0606 0606 0606     ................
 800bb78:	0606 0606 0606 0606 0606 0606 0606 0606     ................

0800bb88 <eminlambda_lut>:
 800bb88:	0201 0401 0201 0801 0201 0401 0201 1001     ................
 800bb98:	0201 0401 0201 0801 0201 0401 0201 2001     ............... 
 800bba8:	0201 0401 0201 0801 0201 0401 0201 1001     ................
 800bbb8:	0201 0401 0201 0801 0201 0401 0201 4001     ...............@
 800bbc8:	0201 0401 0201 0801 0201 0401 0201 1001     ................
 800bbd8:	0201 0401 0201 0801 0201 0401 0201 2001     ............... 
 800bbe8:	0201 0401 0201 0801 0201 0401 0201 1001     ................
 800bbf8:	0201 0401 0201 0801 0201 0401 0201 0101     ................

0800bc08 <minlambda_lut>:
 800bc08:	0100 0200 0100 0300 0100 0200 0100 0400     ................
 800bc18:	0100 0200 0100 0300 0100 0200 0100 0500     ................
 800bc28:	0100 0200 0100 0300 0100 0200 0100 0400     ................
 800bc38:	0100 0200 0100 0300 0100 0200 0100 0600     ................
 800bc48:	0100 0200 0100 0300 0100 0200 0100 0400     ................
 800bc58:	0100 0200 0100 0300 0100 0200 0100 0500     ................
 800bc68:	0100 0200 0100 0300 0100 0200 0100 0400     ................
 800bc78:	0100 0200 0100 0300 0100 0200 0100 0700     ................

0800bc88 <lambda_lut>:
 800bc88:	0006 0001 0002 0001 0003 0001 0002 0001     ................
 800bc98:	0004 0001 0002 0001 0003 0001 0002 0001     ................
 800bca8:	0005 0001 0002 0001 0003 0001 0002 0001     ................
 800bcb8:	0004 0001 0002 0001 0003 0001 0002 0001     ................
 800bcc8:	0006 0001 0002 0001 0003 0001 0002 0001     ................
 800bcd8:	0004 0001 0002 0001 0003 0001 0002 0001     ................
 800bce8:	0005 0001 0002 0001 0003 0001 0002 0001     ................
 800bcf8:	0004 0001 0002 0001 0003 0001 0002 0001     ................

0800bd08 <rseqbyte>:
 800bd08:	000f 010f 020f 040f 000e 000d 000b 030f     ................
 800bd18:	0007 050f 060f 010e 020e 010d 040e 020d     ................
 800bd28:	010b 040d 020b 000c 0107 070f 040b 0207     ................
 800bd38:	030e 000a 050e 0407 030d 0009 060e 0006     ................
 800bd48:	050d 0005 030b 060d 010c 050b 0003 020c     ................
 800bd58:	060b 0307 010a 040c 0507 020a 0109 070e     ................
 800bd68:	0607 040a 0106 0209 0206 070d 0409 0105     ................
 800bd78:	0406 030c 0205 0008 0103 070b 050c 0405     ................
 800bd88:	0203 030a 0004 060c 0403 0707 050a 0309     ................
 800bd98:	0002 0306 0001 0609 0506 060a 0305 0108     ................
 800bda8:	0509 0606 0505 0208 0303 0605 0408 070c     ................
 800bdb8:	0104 0102 0603 0204 070a 0503 0404 0202     ................
 800bdc8:	0709 0101 0706 0201 0402 0308 0705 0401     ................
 800bdd8:	0508 0000 0304 0703 0504 0302 0608 0604     ................
 800bde8:	0301 0502 0501 0602 0100 0601 0708 0200     ................
 800bdf8:	0400 0704 0702 0701 0300 0500 0600 0700     ................

0800be08 <rseq>:
 800be08:	7e7f 7b7d 6f77 7c5f 7a3f 7679 6e75 6d73     .~}{wo_|?zyvunsm
 800be18:	6b5e 675d 783e 3d5b 5774 3b72 4f6c 3771     ^k]g>x[=tWr;lOq7
 800be28:	2f6a 695c 5a66 651f 3c59 6356 553a 704e     j/\ifZ.eY<Vc:UNp
 800be38:	5339 4d36 6835 2e4b 6433 472d 581e 2b62     9S6M5hK.3d-G.Xb+
 800be48:	541d 6127 381b 4c52 3417 490f 5132 462c     .T'a.8RL.4.I2Q,F
 800be58:	314a 452a 291c 6043 1626 2519 1a50 1523     J1*E.)C`&..%P.#.
 800be68:	0e48 0d30 4413 0b28 0742 1824 1422 2141     H.0..D(.B.$.".A!
 800be78:	120c 110a 0906 0540 2003 0810 0204 0001     ......@.. ......

0800be88 <rbyte>:
 800be88:	0700 0708 0704 070c 0702 070a 0706 070e     ................
 800be98:	0701 0709 0705 070d 0703 070b 0707 070f     ................
 800bea8:	0300 0308 0304 030c 0302 030a 0306 030e     ................
 800beb8:	0301 0309 0305 030d 0303 030b 0307 030f     ................
 800bec8:	0500 0508 0504 050c 0502 050a 0506 050e     ................
 800bed8:	0501 0509 0505 050d 0503 050b 0507 050f     ................
 800bee8:	0100 0108 0104 010c 0102 010a 0106 010e     ................
 800bef8:	0101 0109 0105 010d 0103 010b 0107 010f     ................
 800bf08:	0600 0608 0604 060c 0602 060a 0606 060e     ................
 800bf18:	0601 0609 0605 060d 0603 060b 0607 060f     ................
 800bf28:	0200 0208 0204 020c 0202 020a 0206 020e     ................
 800bf38:	0201 0209 0205 020d 0203 020b 0207 020f     ................
 800bf48:	0400 0408 0404 040c 0402 040a 0406 040e     ................
 800bf58:	0401 0409 0405 040d 0403 040b 0407 040f     ................
 800bf68:	0000 0008 0004 000c 0002 000a 0006 000e     ................
 800bf78:	0001 0009 0005 000d 0003 000b 0007 000f     ................

0800bf88 <crc7tab>:
 800bf88:	1200 3624 5a48 7e6c 8290 a6b4 cad8 eefc     ..$6HZl~........
 800bf98:	2032 0416 687a 4c5e b0a2 9486 f8ea dcce     2 ..zh^L........
 800bfa8:	7664 5240 3e2c 1a08 e6f4 c2d0 aebc 8a98     dv@R,>..........
 800bfb8:	4456 6072 0c1e 283a d4c6 f0e2 9c8e b8aa     VDr`..:(........
 800bfc8:	dac8 feec 9280 b6a4 4a58 6e7c 0210 2634     ........XJ|n..4&
 800bfd8:	e8fa ccde a0b2 8496 786a 5c4e 3022 1406     ........jxN\"0..
 800bfe8:	beac 9a88 f6e4 d2c0 2e3c 0a18 6674 4250     ........<...tfPB
 800bff8:	8c9e a8ba c4d6 e0f2 1c0e 382a 5446 7062     ..........*8FTbp
 800c008:	9082 b4a6 d8ca fcee 0012 2436 485a 6c7e     ..........6$ZH~l
 800c018:	a2b0 8694 eaf8 cedc 3220 1604 7a68 5e4c     ........ 2..hzL^
 800c028:	f4e6 d0c2 bcae 988a 6476 4052 2c3e 081a     ........vdR@>,..
 800c038:	c6d4 e2f0 8e9c aab8 5644 7260 1e0c 3a28     ........DV`r..(:
 800c048:	584a 7c6e 1002 3426 c8da ecfe 8092 a4b6     JXn|..&4........
 800c058:	6a78 4e5c 2230 0614 fae8 decc b2a0 9684     xj\N0"..........
 800c068:	3c2e 180a 7466 5042 acbe 889a e4f6 c0d2     .<..ftBP........
 800c078:	0e1c 2a38 4654 6270 9e8c baa8 d6c4 f2e0     ..8*TFpb........

0800c088 <wordmask.6442>:
 800c088:	ff00 ffff 0000 ffff 0000 ff00 0000 0000     ................

0800c098 <wordload.6443>:
 800c098:	0000 0000 0100 0000 0100 0002 0100 0302     ................

0800c0a8 <bitify.6551>:
 800c0a8:	0000 0000 0001 0000 0100 0000 0101 0000     ................
 800c0b8:	0000 0001 0001 0001 0100 0001 0101 0001     ................
 800c0c8:	0000 0100 0001 0100 0100 0100 0101 0100     ................
 800c0d8:	0000 0101 0001 0101 0100 0101 0101 0101     ................

0800c0e8 <fbit104>:
 800c0e8:	0101 0101 0101 0001 0101 0001 0001 0000     ................
 800c0f8:	0101 0001 0000 0000 0000 0000 0000 0000     ................
 800c108:	0101 0000 0000 0000 0000 0000 0000 0000     ................
	...
 800c128:	0001 0000 0000 0000 0000 0000 0000 0000     ................
	...

0800c168 <fbit96>:
 800c168:	0101 0101 0101 0101 0101 0101 0001 0000     ................
 800c178:	0101 0001 0001 0000 0001 0000 0000 0000     ................
 800c188:	0101 0001 0001 0000 0000 0000 0000 0000     ................
	...
 800c1a8:	0101 0001 0000 0000 0000 0000 0000 0000     ................
	...

0800c1e8 <fbit88>:
 800c1e8:	0101 0101 0101 0101 0101 0101 0101 0001     ................
 800c1f8:	0101 0101 0101 0000 0001 0000 0000 0000     ................
 800c208:	0101 0001 0001 0000 0001 0000 0000 0000     ................
 800c218:	0001 0000 0000 0000 0000 0000 0000 0000     ................
 800c228:	0101 0001 0001 0000 0001 0000 0000 0000     ................
	...

0800c268 <fbit80>:
 800c268:	0101 0101 0101 0101 0101 0101 0101 0001     ................
 800c278:	0101 0101 0101 0001 0101 0001 0000 0000     ................
 800c288:	0101 0101 0101 0001 0001 0000 0000 0000     ................
 800c298:	0001 0000 0000 0000 0000 0000 0000 0000     ................
 800c2a8:	0101 0001 0001 0000 0001 0000 0000 0000     ................
 800c2b8:	0001 0000 0000 0000 0000 0000 0000 0000     ................
 800c2c8:	0001 0000 0000 0000 0000 0000 0000 0000     ................
	...

0800c2e8 <fbit72>:
 800c2e8:	0101 0101 0101 0101 0101 0101 0101 0001     ................
 800c2f8:	0101 0101 0101 0001 0101 0001 0001 0000     ................
 800c308:	0101 0101 0101 0001 0101 0001 0000 0000     ................
 800c318:	0101 0000 0000 0000 0000 0000 0000 0000     ................
 800c328:	0101 0101 0101 0001 0001 0001 0000 0000     ................
 800c338:	0001 0000 0000 0000 0000 0000 0000 0000     ................
 800c348:	0001 0000 0000 0000 0000 0000 0000 0000     ................
	...

0800c368 <fbit64>:
 800c368:	0101 0101 0101 0101 0101 0101 0101 0101     ................
 800c378:	0101 0101 0101 0101 0101 0001 0001 0000     ................
 800c388:	0101 0101 0101 0001 0101 0001 0001 0000     ................
 800c398:	0101 0001 0001 0000 0000 0000 0000 0000     ................
 800c3a8:	0101 0101 0101 0001 0101 0001 0001 0000     ................
 800c3b8:	0101 0000 0000 0000 0000 0000 0000 0000     ................
 800c3c8:	0001 0000 0000 0000 0000 0000 0000 0000     ................
	...

0800c3e8 <fbit48>:
 800c3e8:	0101 0101 0101 0101 0101 0101 0101 0101     ................
 800c3f8:	0101 0101 0101 0101 0101 0101 0101 0001     ................
 800c408:	0101 0101 0101 0101 0101 0101 0101 0001     ................
 800c418:	0101 0101 0001 0000 0001 0000 0000 0000     ................
 800c428:	0101 0101 0101 0101 0101 0001 0001 0000     ................
 800c438:	0101 0001 0001 0000 0001 0000 0000 0000     ................
 800c448:	0101 0001 0001 0000 0000 0000 0000 0000     ................
	...

0800c468 <llrvrssi>:
 800c468:	0120 0143 016b 0198 01c8 0200 023e 0286      .C.k.......>...
 800c478:	02d3 032c 038f 03ff 043a 0479 04be 0506     ..,.....:.y.....
 800c488:	05a5 0653 07f7 0a07 0c9f 0fe5 1400 192f     ..S.........../.
 800c498:	1fb6 27e8 323a 3f3e 4f9e 643b 7723 7723     ...':2>?.O;d#w#w

0800c4a8 <llroffset>:
	...
 800c4b8:	5ab6 0800 5ab6 0800 5b02 0800 5b3e 0800     .Z...Z...[..>[..
 800c4c8:	5b4c 0800                                   L[..

0800c4cc <baudrate_table>:
 800c4cc:	2580 0000 7080 0000 e100 0000 c200 0001     .%...p..........
 800c4dc:	d090 0003 a120 0007                         .... ...

0800c4e4 <start_code.7288>:
 800c4e4:	ffff 0100 0000 0000                         ........

0800c4ec <timeout_secs.7291>:
 800c4ec:	0258 0032 0032 0000                         X.2.2...

0800c4f4 <scan_events.6848>:
 800c4f4:	0000 0500 0004 0001 73cc 0800 73d8 0800     .........s...s..
 800c504:	7432 0800 7436 0800 743e 0800 7442 0800     2t..6t..>t..Bt..
 800c514:	744a 0800 744e 0800                         Jt..Nt..

0800c51c <_idlen>:
 800c51c:	0008 0002 7f9a 0800 7fb8 0800 7f9e 0800     ................
 800c52c:	7f9e 0800 7fa6 0800 7fa6 0800               ............

0800c538 <opgroup_proc>:
 800c538:	7c39 0800 7c39 0800 7c59 0800 831d 0800     9|..9|..Y|......
 800c548:	831d 0800 7b79 0800 7b7b 0800 7d85 0800     ....y{..{{...}..

0800c558 <fixed_mask.6568>:
 800c558:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

0800c568 <cmd_fn.6261>:
 800c568:	885d 0800 8359 0800 885d 0800 885d 0800     ]...Y...]...]...
 800c578:	8581 0800 8359 0800 8581 0800 8581 0800     ....Y...........
 800c588:	84c3 0800 8359 0800 845d 0800 83c7 0800     ....Y...].......
 800c598:	8581 0800 8359 0800 837d 0800 8359 0800     ....Y...}...Y...

0800c5a8 <crc16_table>:
 800c5a8:	0000 8005 800f 000a 801b 001e 0014 8011     ................
 800c5b8:	8033 0036 003c 8039 0028 802d 8027 0022     3.6.<.9.(.-.'.".
 800c5c8:	8063 0066 006c 8069 0078 807d 8077 0072     c.f.l.i.x.}.w.r.
 800c5d8:	0050 8055 805f 005a 804b 004e 0044 8041     P.U._.Z.K.N.D.A.
 800c5e8:	80c3 00c6 00cc 80c9 00d8 80dd 80d7 00d2     ................
 800c5f8:	00f0 80f5 80ff 00fa 80eb 00ee 00e4 80e1     ................
 800c608:	00a0 80a5 80af 00aa 80bb 00be 00b4 80b1     ................
 800c618:	8093 0096 009c 8099 0088 808d 8087 0082     ................
 800c628:	8183 0186 018c 8189 0198 819d 8197 0192     ................
 800c638:	01b0 81b5 81bf 01ba 81ab 01ae 01a4 81a1     ................
 800c648:	01e0 81e5 81ef 01ea 81fb 01fe 01f4 81f1     ................
 800c658:	81d3 01d6 01dc 81d9 01c8 81cd 81c7 01c2     ................
 800c668:	0140 8145 814f 014a 815b 015e 0154 8151     @.E.O.J.[.^.T.Q.
 800c678:	8173 0176 017c 8179 0168 816d 8167 0162     s.v.|.y.h.m.g.b.
 800c688:	8123 0126 012c 8129 0138 813d 8137 0132     #.&.,.).8.=.7.2.
 800c698:	0110 8115 811f 011a 810b 010e 0104 8101     ................
 800c6a8:	8303 0306 030c 8309 0318 831d 8317 0312     ................
 800c6b8:	0330 8335 833f 033a 832b 032e 0324 8321     0.5.?.:.+...$.!.
 800c6c8:	0360 8365 836f 036a 837b 037e 0374 8371     `.e.o.j.{.~.t.q.
 800c6d8:	8353 0356 035c 8359 0348 834d 8347 0342     S.V.\.Y.H.M.G.B.
 800c6e8:	03c0 83c5 83cf 03ca 83db 03de 03d4 83d1     ................
 800c6f8:	83f3 03f6 03fc 83f9 03e8 83ed 83e7 03e2     ................
 800c708:	83a3 03a6 03ac 83a9 03b8 83bd 83b7 03b2     ................
 800c718:	0390 8395 839f 039a 838b 038e 0384 8381     ................
 800c728:	0280 8285 828f 028a 829b 029e 0294 8291     ................
 800c738:	82b3 02b6 02bc 82b9 02a8 82ad 82a7 02a2     ................
 800c748:	82e3 02e6 02ec 82e9 02f8 82fd 82f7 02f2     ................
 800c758:	02d0 82d5 82df 02da 82cb 02ce 02c4 82c1     ................
 800c768:	8243 0246 024c 8249 0258 825d 8257 0252     C.F.L.I.X.].W.R.
 800c778:	0270 8275 827f 027a 826b 026e 0264 8261     p.u...z.k.n.d.a.
 800c788:	0220 8225 822f 022a 823b 023e 0234 8231      .%./.*.;.>.4.1.
 800c798:	8213 0216 021c 8219 0208 820d 8207 0202     ................

0800c7a8 <systask_call>:
 800c7a8:	70d5 0800 5e0d 0800 7125 0800 6bd9 0800     .p...^..%q...k..
 800c7b8:	6b49 0800 16e9 0800 15a5 0800               Ik..........

0800c7c4 <len_div.5474>:
 800c7c4:	0002 0000 0001 0000                         ........

0800c7cc <ccr.5473>:
 800c7cc:	4ad1 40d1 45d1 40d1                         .J.@.E.@

0800c7d4 <len_div.5502>:
 800c7d4:	0002 0000 0001 0000                         ........

0800c7dc <ccr.5501>:
 800c7dc:	4ad1 40d1 45d1 40d1 094a 0800 0886 0800     .J.@.E.@J.......
 800c7ec:	08aa 0800 0848 0800 08aa 0800 0926 0800     ....H.......&...
 800c7fc:	08aa 0800 0848 0800 0886 0800 0886 0800     ....H...........
 800c80c:	0926 0800 0848 0800 097c 0800 097c 0800     &...H...|...|...
 800c81c:	097c 0800 0932 0800 0886 0800 0886 0800     |...2...........
 800c82c:	08aa 0800 0846 0800 08aa 0800 0926 0800     ....F.......&...
 800c83c:	08aa 0800 0846 0800 0886 0800 0886 0800     ....F...........
 800c84c:	0926 0800 0846 0800 097c 0800 097c 0800     &...F...|...|...
 800c85c:	097c 0800 0930 0800 0c74 0800 0c1e 0800     |...0...t.......
 800c86c:	0c1e 0800 0d4c 0800 0c1a 0800 0c1a 0800     ....L...........
 800c87c:	0d42 0800 0d4c 0800 0c1a 0800 0d42 0800     B...L.......B...
 800c88c:	0c1a 0800 0d4c 0800 0d50 0800 0d50 0800     ....L...P...P...
 800c89c:	0d50 0800 0d58 0800 0068 0000 552f 6573     P...X...h.../Use
 800c8ac:	7372 6a2f 6e70 6f62 6b6f 532f 6e79 2f63     rs/jpnbook/Sync/
 800c8bc:	6552 6f70 6973 6f74 7972 4f2f 6570 546e     Repository/OpenT
 800c8cc:	6761 485f 4f44 682f 7562 6c69 6564 2f72     ag_HDO/hbuilder/
 800c8dc:	6268 696c 2f62 7368 6f63 6564 632e 0000     hblib/hscode.c..
 800c8ec:	202c 7566 636e 6974 6e6f 203a 6100 7373     , function: .ass
 800c8fc:	7265 6974 6e6f 2220 7325 2022 6166 6c69     ertion "%s" fail
 800c90c:	6465 203a 6966 656c 2220 7325 2c22 6c20     ed: file "%s", l
 800c91c:	6e69 2065 6425 7325 7325 000a               ine %d%s%s..

0800c928 <_global_impure_ptr>:
 800c928:	0144 2000 2d23 2b30 0020 6c68 004c 6665     D.. #-0+ .hlL.ef
 800c938:	4567 4746 3000 3231 3433 3635 3837 4139     gEFG.0123456789A
 800c948:	4342 4544 0046 3130 3332 3534 3736 3938     BCDEF.0123456789
 800c958:	6261 6463 6665 0000                         abcdef..

0800c960 <__sf_fake_stderr>:
	...

0800c980 <__sf_fake_stdin>:
	...

0800c9a0 <__sf_fake_stdout>:
	...
 800c9c0:	6f6c 6667 0000 0000                         logf....

0800c9c8 <_init>:
 800c9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ca:	46c0      	nop			; (mov r8, r8)
 800c9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ce:	bc08      	pop	{r3}
 800c9d0:	469e      	mov	lr, r3
 800c9d2:	4770      	bx	lr

0800c9d4 <_fini>:
 800c9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d6:	46c0      	nop			; (mov r8, r8)
 800c9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9da:	bc08      	pop	{r3}
 800c9dc:	469e      	mov	lr, r3
 800c9de:	4770      	bx	lr

0800c9e0 <__init_array_start>:
 800c9e0:	080000e9 	.word	0x080000e9

0800c9e4 <__fini_array_start>:
 800c9e4:	080000c1 	.word	0x080000c1
