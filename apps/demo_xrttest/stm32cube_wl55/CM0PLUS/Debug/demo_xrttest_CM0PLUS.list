
demo_xrttest_CM0PLUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08030000  08030000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ce8  080300c0  080300c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  08036da8  08036da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08037444  08037444  0001c1ac  2**0
                  CONTENTS
  4 .ARM          00000000  08037444  08037444  0001c1ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08037444  08037444  0001c1ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08037444  08037444  00017444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08037448  08037448  00017448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ac  2000c000  0803744c  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .optionbytes  00000000  1fff7800  1fff7800  0001c1ac  2**0
                  CONTENTS
 10 .otp          00000000  1fff7400  1fff7400  0001c1ac  2**0
                  CONTENTS
 11 .sysboot      00000000  1fff7400  1fff7400  0001c1ac  2**0
                  CONTENTS
 12 .bss          00001f50  2000c1ac  080375f8  0001c1ac  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000e0fc  080375f8  0001e0fc  2**0
                  ALLOC
 14 .ARM.attributes 00000028  00000000  00000000  0001c1ac  2**0
                  CONTENTS, READONLY
 15 .debug_info   00020b33  00000000  00000000  0001c1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006fa3  00000000  00000000  0003cd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0000d597  00000000  00000000  00043caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001a18  00000000  00000000  00051248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00001ae8  00000000  00000000  00052c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00028e6f  00000000  00000000  00054748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003e4e5  00000000  00000000  0007d5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000b389d  00000000  00000000  000bba9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  0016f339  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00004614  00000000  00000000  0016f38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .stabstr      000001b9  00000000  00000000  001739a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080300c0 <__do_global_dtors_aux>:
 80300c0:	b510      	push	{r4, lr}
 80300c2:	4c06      	ldr	r4, [pc, #24]	; (80300dc <__do_global_dtors_aux+0x1c>)
 80300c4:	7823      	ldrb	r3, [r4, #0]
 80300c6:	2b00      	cmp	r3, #0
 80300c8:	d107      	bne.n	80300da <__do_global_dtors_aux+0x1a>
 80300ca:	4b05      	ldr	r3, [pc, #20]	; (80300e0 <__do_global_dtors_aux+0x20>)
 80300cc:	2b00      	cmp	r3, #0
 80300ce:	d002      	beq.n	80300d6 <__do_global_dtors_aux+0x16>
 80300d0:	4804      	ldr	r0, [pc, #16]	; (80300e4 <__do_global_dtors_aux+0x24>)
 80300d2:	e000      	b.n	80300d6 <__do_global_dtors_aux+0x16>
 80300d4:	bf00      	nop
 80300d6:	2301      	movs	r3, #1
 80300d8:	7023      	strb	r3, [r4, #0]
 80300da:	bd10      	pop	{r4, pc}
 80300dc:	2000c1ac 	.word	0x2000c1ac
 80300e0:	00000000 	.word	0x00000000
 80300e4:	08036d90 	.word	0x08036d90

080300e8 <frame_dummy>:
 80300e8:	4b04      	ldr	r3, [pc, #16]	; (80300fc <frame_dummy+0x14>)
 80300ea:	b510      	push	{r4, lr}
 80300ec:	2b00      	cmp	r3, #0
 80300ee:	d003      	beq.n	80300f8 <frame_dummy+0x10>
 80300f0:	4903      	ldr	r1, [pc, #12]	; (8030100 <frame_dummy+0x18>)
 80300f2:	4804      	ldr	r0, [pc, #16]	; (8030104 <frame_dummy+0x1c>)
 80300f4:	e000      	b.n	80300f8 <frame_dummy+0x10>
 80300f6:	bf00      	nop
 80300f8:	bd10      	pop	{r4, pc}
 80300fa:	46c0      	nop			; (mov r8, r8)
 80300fc:	00000000 	.word	0x00000000
 8030100:	2000c1b0 	.word	0x2000c1b0
 8030104:	08036d90 	.word	0x08036d90

08030108 <__gnu_thumb1_case_shi>:
 8030108:	b403      	push	{r0, r1}
 803010a:	4671      	mov	r1, lr
 803010c:	0849      	lsrs	r1, r1, #1
 803010e:	0040      	lsls	r0, r0, #1
 8030110:	0049      	lsls	r1, r1, #1
 8030112:	5e09      	ldrsh	r1, [r1, r0]
 8030114:	0049      	lsls	r1, r1, #1
 8030116:	448e      	add	lr, r1
 8030118:	bc03      	pop	{r0, r1}
 803011a:	4770      	bx	lr

0803011c <__udivsi3>:
 803011c:	2200      	movs	r2, #0
 803011e:	0843      	lsrs	r3, r0, #1
 8030120:	428b      	cmp	r3, r1
 8030122:	d374      	bcc.n	803020e <__udivsi3+0xf2>
 8030124:	0903      	lsrs	r3, r0, #4
 8030126:	428b      	cmp	r3, r1
 8030128:	d35f      	bcc.n	80301ea <__udivsi3+0xce>
 803012a:	0a03      	lsrs	r3, r0, #8
 803012c:	428b      	cmp	r3, r1
 803012e:	d344      	bcc.n	80301ba <__udivsi3+0x9e>
 8030130:	0b03      	lsrs	r3, r0, #12
 8030132:	428b      	cmp	r3, r1
 8030134:	d328      	bcc.n	8030188 <__udivsi3+0x6c>
 8030136:	0c03      	lsrs	r3, r0, #16
 8030138:	428b      	cmp	r3, r1
 803013a:	d30d      	bcc.n	8030158 <__udivsi3+0x3c>
 803013c:	22ff      	movs	r2, #255	; 0xff
 803013e:	0209      	lsls	r1, r1, #8
 8030140:	ba12      	rev	r2, r2
 8030142:	0c03      	lsrs	r3, r0, #16
 8030144:	428b      	cmp	r3, r1
 8030146:	d302      	bcc.n	803014e <__udivsi3+0x32>
 8030148:	1212      	asrs	r2, r2, #8
 803014a:	0209      	lsls	r1, r1, #8
 803014c:	d065      	beq.n	803021a <__udivsi3+0xfe>
 803014e:	0b03      	lsrs	r3, r0, #12
 8030150:	428b      	cmp	r3, r1
 8030152:	d319      	bcc.n	8030188 <__udivsi3+0x6c>
 8030154:	e000      	b.n	8030158 <__udivsi3+0x3c>
 8030156:	0a09      	lsrs	r1, r1, #8
 8030158:	0bc3      	lsrs	r3, r0, #15
 803015a:	428b      	cmp	r3, r1
 803015c:	d301      	bcc.n	8030162 <__udivsi3+0x46>
 803015e:	03cb      	lsls	r3, r1, #15
 8030160:	1ac0      	subs	r0, r0, r3
 8030162:	4152      	adcs	r2, r2
 8030164:	0b83      	lsrs	r3, r0, #14
 8030166:	428b      	cmp	r3, r1
 8030168:	d301      	bcc.n	803016e <__udivsi3+0x52>
 803016a:	038b      	lsls	r3, r1, #14
 803016c:	1ac0      	subs	r0, r0, r3
 803016e:	4152      	adcs	r2, r2
 8030170:	0b43      	lsrs	r3, r0, #13
 8030172:	428b      	cmp	r3, r1
 8030174:	d301      	bcc.n	803017a <__udivsi3+0x5e>
 8030176:	034b      	lsls	r3, r1, #13
 8030178:	1ac0      	subs	r0, r0, r3
 803017a:	4152      	adcs	r2, r2
 803017c:	0b03      	lsrs	r3, r0, #12
 803017e:	428b      	cmp	r3, r1
 8030180:	d301      	bcc.n	8030186 <__udivsi3+0x6a>
 8030182:	030b      	lsls	r3, r1, #12
 8030184:	1ac0      	subs	r0, r0, r3
 8030186:	4152      	adcs	r2, r2
 8030188:	0ac3      	lsrs	r3, r0, #11
 803018a:	428b      	cmp	r3, r1
 803018c:	d301      	bcc.n	8030192 <__udivsi3+0x76>
 803018e:	02cb      	lsls	r3, r1, #11
 8030190:	1ac0      	subs	r0, r0, r3
 8030192:	4152      	adcs	r2, r2
 8030194:	0a83      	lsrs	r3, r0, #10
 8030196:	428b      	cmp	r3, r1
 8030198:	d301      	bcc.n	803019e <__udivsi3+0x82>
 803019a:	028b      	lsls	r3, r1, #10
 803019c:	1ac0      	subs	r0, r0, r3
 803019e:	4152      	adcs	r2, r2
 80301a0:	0a43      	lsrs	r3, r0, #9
 80301a2:	428b      	cmp	r3, r1
 80301a4:	d301      	bcc.n	80301aa <__udivsi3+0x8e>
 80301a6:	024b      	lsls	r3, r1, #9
 80301a8:	1ac0      	subs	r0, r0, r3
 80301aa:	4152      	adcs	r2, r2
 80301ac:	0a03      	lsrs	r3, r0, #8
 80301ae:	428b      	cmp	r3, r1
 80301b0:	d301      	bcc.n	80301b6 <__udivsi3+0x9a>
 80301b2:	020b      	lsls	r3, r1, #8
 80301b4:	1ac0      	subs	r0, r0, r3
 80301b6:	4152      	adcs	r2, r2
 80301b8:	d2cd      	bcs.n	8030156 <__udivsi3+0x3a>
 80301ba:	09c3      	lsrs	r3, r0, #7
 80301bc:	428b      	cmp	r3, r1
 80301be:	d301      	bcc.n	80301c4 <__udivsi3+0xa8>
 80301c0:	01cb      	lsls	r3, r1, #7
 80301c2:	1ac0      	subs	r0, r0, r3
 80301c4:	4152      	adcs	r2, r2
 80301c6:	0983      	lsrs	r3, r0, #6
 80301c8:	428b      	cmp	r3, r1
 80301ca:	d301      	bcc.n	80301d0 <__udivsi3+0xb4>
 80301cc:	018b      	lsls	r3, r1, #6
 80301ce:	1ac0      	subs	r0, r0, r3
 80301d0:	4152      	adcs	r2, r2
 80301d2:	0943      	lsrs	r3, r0, #5
 80301d4:	428b      	cmp	r3, r1
 80301d6:	d301      	bcc.n	80301dc <__udivsi3+0xc0>
 80301d8:	014b      	lsls	r3, r1, #5
 80301da:	1ac0      	subs	r0, r0, r3
 80301dc:	4152      	adcs	r2, r2
 80301de:	0903      	lsrs	r3, r0, #4
 80301e0:	428b      	cmp	r3, r1
 80301e2:	d301      	bcc.n	80301e8 <__udivsi3+0xcc>
 80301e4:	010b      	lsls	r3, r1, #4
 80301e6:	1ac0      	subs	r0, r0, r3
 80301e8:	4152      	adcs	r2, r2
 80301ea:	08c3      	lsrs	r3, r0, #3
 80301ec:	428b      	cmp	r3, r1
 80301ee:	d301      	bcc.n	80301f4 <__udivsi3+0xd8>
 80301f0:	00cb      	lsls	r3, r1, #3
 80301f2:	1ac0      	subs	r0, r0, r3
 80301f4:	4152      	adcs	r2, r2
 80301f6:	0883      	lsrs	r3, r0, #2
 80301f8:	428b      	cmp	r3, r1
 80301fa:	d301      	bcc.n	8030200 <__udivsi3+0xe4>
 80301fc:	008b      	lsls	r3, r1, #2
 80301fe:	1ac0      	subs	r0, r0, r3
 8030200:	4152      	adcs	r2, r2
 8030202:	0843      	lsrs	r3, r0, #1
 8030204:	428b      	cmp	r3, r1
 8030206:	d301      	bcc.n	803020c <__udivsi3+0xf0>
 8030208:	004b      	lsls	r3, r1, #1
 803020a:	1ac0      	subs	r0, r0, r3
 803020c:	4152      	adcs	r2, r2
 803020e:	1a41      	subs	r1, r0, r1
 8030210:	d200      	bcs.n	8030214 <__udivsi3+0xf8>
 8030212:	4601      	mov	r1, r0
 8030214:	4152      	adcs	r2, r2
 8030216:	4610      	mov	r0, r2
 8030218:	4770      	bx	lr
 803021a:	e7ff      	b.n	803021c <__udivsi3+0x100>
 803021c:	b501      	push	{r0, lr}
 803021e:	2000      	movs	r0, #0
 8030220:	f000 f8f0 	bl	8030404 <__aeabi_idiv0>
 8030224:	bd02      	pop	{r1, pc}
 8030226:	46c0      	nop			; (mov r8, r8)

08030228 <__aeabi_uidivmod>:
 8030228:	2900      	cmp	r1, #0
 803022a:	d0f7      	beq.n	803021c <__udivsi3+0x100>
 803022c:	e776      	b.n	803011c <__udivsi3>
 803022e:	4770      	bx	lr

08030230 <__divsi3>:
 8030230:	4603      	mov	r3, r0
 8030232:	430b      	orrs	r3, r1
 8030234:	d47f      	bmi.n	8030336 <__divsi3+0x106>
 8030236:	2200      	movs	r2, #0
 8030238:	0843      	lsrs	r3, r0, #1
 803023a:	428b      	cmp	r3, r1
 803023c:	d374      	bcc.n	8030328 <__divsi3+0xf8>
 803023e:	0903      	lsrs	r3, r0, #4
 8030240:	428b      	cmp	r3, r1
 8030242:	d35f      	bcc.n	8030304 <__divsi3+0xd4>
 8030244:	0a03      	lsrs	r3, r0, #8
 8030246:	428b      	cmp	r3, r1
 8030248:	d344      	bcc.n	80302d4 <__divsi3+0xa4>
 803024a:	0b03      	lsrs	r3, r0, #12
 803024c:	428b      	cmp	r3, r1
 803024e:	d328      	bcc.n	80302a2 <__divsi3+0x72>
 8030250:	0c03      	lsrs	r3, r0, #16
 8030252:	428b      	cmp	r3, r1
 8030254:	d30d      	bcc.n	8030272 <__divsi3+0x42>
 8030256:	22ff      	movs	r2, #255	; 0xff
 8030258:	0209      	lsls	r1, r1, #8
 803025a:	ba12      	rev	r2, r2
 803025c:	0c03      	lsrs	r3, r0, #16
 803025e:	428b      	cmp	r3, r1
 8030260:	d302      	bcc.n	8030268 <__divsi3+0x38>
 8030262:	1212      	asrs	r2, r2, #8
 8030264:	0209      	lsls	r1, r1, #8
 8030266:	d065      	beq.n	8030334 <__divsi3+0x104>
 8030268:	0b03      	lsrs	r3, r0, #12
 803026a:	428b      	cmp	r3, r1
 803026c:	d319      	bcc.n	80302a2 <__divsi3+0x72>
 803026e:	e000      	b.n	8030272 <__divsi3+0x42>
 8030270:	0a09      	lsrs	r1, r1, #8
 8030272:	0bc3      	lsrs	r3, r0, #15
 8030274:	428b      	cmp	r3, r1
 8030276:	d301      	bcc.n	803027c <__divsi3+0x4c>
 8030278:	03cb      	lsls	r3, r1, #15
 803027a:	1ac0      	subs	r0, r0, r3
 803027c:	4152      	adcs	r2, r2
 803027e:	0b83      	lsrs	r3, r0, #14
 8030280:	428b      	cmp	r3, r1
 8030282:	d301      	bcc.n	8030288 <__divsi3+0x58>
 8030284:	038b      	lsls	r3, r1, #14
 8030286:	1ac0      	subs	r0, r0, r3
 8030288:	4152      	adcs	r2, r2
 803028a:	0b43      	lsrs	r3, r0, #13
 803028c:	428b      	cmp	r3, r1
 803028e:	d301      	bcc.n	8030294 <__divsi3+0x64>
 8030290:	034b      	lsls	r3, r1, #13
 8030292:	1ac0      	subs	r0, r0, r3
 8030294:	4152      	adcs	r2, r2
 8030296:	0b03      	lsrs	r3, r0, #12
 8030298:	428b      	cmp	r3, r1
 803029a:	d301      	bcc.n	80302a0 <__divsi3+0x70>
 803029c:	030b      	lsls	r3, r1, #12
 803029e:	1ac0      	subs	r0, r0, r3
 80302a0:	4152      	adcs	r2, r2
 80302a2:	0ac3      	lsrs	r3, r0, #11
 80302a4:	428b      	cmp	r3, r1
 80302a6:	d301      	bcc.n	80302ac <__divsi3+0x7c>
 80302a8:	02cb      	lsls	r3, r1, #11
 80302aa:	1ac0      	subs	r0, r0, r3
 80302ac:	4152      	adcs	r2, r2
 80302ae:	0a83      	lsrs	r3, r0, #10
 80302b0:	428b      	cmp	r3, r1
 80302b2:	d301      	bcc.n	80302b8 <__divsi3+0x88>
 80302b4:	028b      	lsls	r3, r1, #10
 80302b6:	1ac0      	subs	r0, r0, r3
 80302b8:	4152      	adcs	r2, r2
 80302ba:	0a43      	lsrs	r3, r0, #9
 80302bc:	428b      	cmp	r3, r1
 80302be:	d301      	bcc.n	80302c4 <__divsi3+0x94>
 80302c0:	024b      	lsls	r3, r1, #9
 80302c2:	1ac0      	subs	r0, r0, r3
 80302c4:	4152      	adcs	r2, r2
 80302c6:	0a03      	lsrs	r3, r0, #8
 80302c8:	428b      	cmp	r3, r1
 80302ca:	d301      	bcc.n	80302d0 <__divsi3+0xa0>
 80302cc:	020b      	lsls	r3, r1, #8
 80302ce:	1ac0      	subs	r0, r0, r3
 80302d0:	4152      	adcs	r2, r2
 80302d2:	d2cd      	bcs.n	8030270 <__divsi3+0x40>
 80302d4:	09c3      	lsrs	r3, r0, #7
 80302d6:	428b      	cmp	r3, r1
 80302d8:	d301      	bcc.n	80302de <__divsi3+0xae>
 80302da:	01cb      	lsls	r3, r1, #7
 80302dc:	1ac0      	subs	r0, r0, r3
 80302de:	4152      	adcs	r2, r2
 80302e0:	0983      	lsrs	r3, r0, #6
 80302e2:	428b      	cmp	r3, r1
 80302e4:	d301      	bcc.n	80302ea <__divsi3+0xba>
 80302e6:	018b      	lsls	r3, r1, #6
 80302e8:	1ac0      	subs	r0, r0, r3
 80302ea:	4152      	adcs	r2, r2
 80302ec:	0943      	lsrs	r3, r0, #5
 80302ee:	428b      	cmp	r3, r1
 80302f0:	d301      	bcc.n	80302f6 <__divsi3+0xc6>
 80302f2:	014b      	lsls	r3, r1, #5
 80302f4:	1ac0      	subs	r0, r0, r3
 80302f6:	4152      	adcs	r2, r2
 80302f8:	0903      	lsrs	r3, r0, #4
 80302fa:	428b      	cmp	r3, r1
 80302fc:	d301      	bcc.n	8030302 <__divsi3+0xd2>
 80302fe:	010b      	lsls	r3, r1, #4
 8030300:	1ac0      	subs	r0, r0, r3
 8030302:	4152      	adcs	r2, r2
 8030304:	08c3      	lsrs	r3, r0, #3
 8030306:	428b      	cmp	r3, r1
 8030308:	d301      	bcc.n	803030e <__divsi3+0xde>
 803030a:	00cb      	lsls	r3, r1, #3
 803030c:	1ac0      	subs	r0, r0, r3
 803030e:	4152      	adcs	r2, r2
 8030310:	0883      	lsrs	r3, r0, #2
 8030312:	428b      	cmp	r3, r1
 8030314:	d301      	bcc.n	803031a <__divsi3+0xea>
 8030316:	008b      	lsls	r3, r1, #2
 8030318:	1ac0      	subs	r0, r0, r3
 803031a:	4152      	adcs	r2, r2
 803031c:	0843      	lsrs	r3, r0, #1
 803031e:	428b      	cmp	r3, r1
 8030320:	d301      	bcc.n	8030326 <__divsi3+0xf6>
 8030322:	004b      	lsls	r3, r1, #1
 8030324:	1ac0      	subs	r0, r0, r3
 8030326:	4152      	adcs	r2, r2
 8030328:	1a41      	subs	r1, r0, r1
 803032a:	d200      	bcs.n	803032e <__divsi3+0xfe>
 803032c:	4601      	mov	r1, r0
 803032e:	4152      	adcs	r2, r2
 8030330:	4610      	mov	r0, r2
 8030332:	4770      	bx	lr
 8030334:	e05d      	b.n	80303f2 <__divsi3+0x1c2>
 8030336:	0fca      	lsrs	r2, r1, #31
 8030338:	d000      	beq.n	803033c <__divsi3+0x10c>
 803033a:	4249      	negs	r1, r1
 803033c:	1003      	asrs	r3, r0, #32
 803033e:	d300      	bcc.n	8030342 <__divsi3+0x112>
 8030340:	4240      	negs	r0, r0
 8030342:	4053      	eors	r3, r2
 8030344:	2200      	movs	r2, #0
 8030346:	469c      	mov	ip, r3
 8030348:	0903      	lsrs	r3, r0, #4
 803034a:	428b      	cmp	r3, r1
 803034c:	d32d      	bcc.n	80303aa <__divsi3+0x17a>
 803034e:	0a03      	lsrs	r3, r0, #8
 8030350:	428b      	cmp	r3, r1
 8030352:	d312      	bcc.n	803037a <__divsi3+0x14a>
 8030354:	22fc      	movs	r2, #252	; 0xfc
 8030356:	0189      	lsls	r1, r1, #6
 8030358:	ba12      	rev	r2, r2
 803035a:	0a03      	lsrs	r3, r0, #8
 803035c:	428b      	cmp	r3, r1
 803035e:	d30c      	bcc.n	803037a <__divsi3+0x14a>
 8030360:	0189      	lsls	r1, r1, #6
 8030362:	1192      	asrs	r2, r2, #6
 8030364:	428b      	cmp	r3, r1
 8030366:	d308      	bcc.n	803037a <__divsi3+0x14a>
 8030368:	0189      	lsls	r1, r1, #6
 803036a:	1192      	asrs	r2, r2, #6
 803036c:	428b      	cmp	r3, r1
 803036e:	d304      	bcc.n	803037a <__divsi3+0x14a>
 8030370:	0189      	lsls	r1, r1, #6
 8030372:	d03a      	beq.n	80303ea <__divsi3+0x1ba>
 8030374:	1192      	asrs	r2, r2, #6
 8030376:	e000      	b.n	803037a <__divsi3+0x14a>
 8030378:	0989      	lsrs	r1, r1, #6
 803037a:	09c3      	lsrs	r3, r0, #7
 803037c:	428b      	cmp	r3, r1
 803037e:	d301      	bcc.n	8030384 <__divsi3+0x154>
 8030380:	01cb      	lsls	r3, r1, #7
 8030382:	1ac0      	subs	r0, r0, r3
 8030384:	4152      	adcs	r2, r2
 8030386:	0983      	lsrs	r3, r0, #6
 8030388:	428b      	cmp	r3, r1
 803038a:	d301      	bcc.n	8030390 <__divsi3+0x160>
 803038c:	018b      	lsls	r3, r1, #6
 803038e:	1ac0      	subs	r0, r0, r3
 8030390:	4152      	adcs	r2, r2
 8030392:	0943      	lsrs	r3, r0, #5
 8030394:	428b      	cmp	r3, r1
 8030396:	d301      	bcc.n	803039c <__divsi3+0x16c>
 8030398:	014b      	lsls	r3, r1, #5
 803039a:	1ac0      	subs	r0, r0, r3
 803039c:	4152      	adcs	r2, r2
 803039e:	0903      	lsrs	r3, r0, #4
 80303a0:	428b      	cmp	r3, r1
 80303a2:	d301      	bcc.n	80303a8 <__divsi3+0x178>
 80303a4:	010b      	lsls	r3, r1, #4
 80303a6:	1ac0      	subs	r0, r0, r3
 80303a8:	4152      	adcs	r2, r2
 80303aa:	08c3      	lsrs	r3, r0, #3
 80303ac:	428b      	cmp	r3, r1
 80303ae:	d301      	bcc.n	80303b4 <__divsi3+0x184>
 80303b0:	00cb      	lsls	r3, r1, #3
 80303b2:	1ac0      	subs	r0, r0, r3
 80303b4:	4152      	adcs	r2, r2
 80303b6:	0883      	lsrs	r3, r0, #2
 80303b8:	428b      	cmp	r3, r1
 80303ba:	d301      	bcc.n	80303c0 <__divsi3+0x190>
 80303bc:	008b      	lsls	r3, r1, #2
 80303be:	1ac0      	subs	r0, r0, r3
 80303c0:	4152      	adcs	r2, r2
 80303c2:	d2d9      	bcs.n	8030378 <__divsi3+0x148>
 80303c4:	0843      	lsrs	r3, r0, #1
 80303c6:	428b      	cmp	r3, r1
 80303c8:	d301      	bcc.n	80303ce <__divsi3+0x19e>
 80303ca:	004b      	lsls	r3, r1, #1
 80303cc:	1ac0      	subs	r0, r0, r3
 80303ce:	4152      	adcs	r2, r2
 80303d0:	1a41      	subs	r1, r0, r1
 80303d2:	d200      	bcs.n	80303d6 <__divsi3+0x1a6>
 80303d4:	4601      	mov	r1, r0
 80303d6:	4663      	mov	r3, ip
 80303d8:	4152      	adcs	r2, r2
 80303da:	105b      	asrs	r3, r3, #1
 80303dc:	4610      	mov	r0, r2
 80303de:	d301      	bcc.n	80303e4 <__divsi3+0x1b4>
 80303e0:	4240      	negs	r0, r0
 80303e2:	2b00      	cmp	r3, #0
 80303e4:	d500      	bpl.n	80303e8 <__divsi3+0x1b8>
 80303e6:	4249      	negs	r1, r1
 80303e8:	4770      	bx	lr
 80303ea:	4663      	mov	r3, ip
 80303ec:	105b      	asrs	r3, r3, #1
 80303ee:	d300      	bcc.n	80303f2 <__divsi3+0x1c2>
 80303f0:	4240      	negs	r0, r0
 80303f2:	b501      	push	{r0, lr}
 80303f4:	2000      	movs	r0, #0
 80303f6:	f000 f805 	bl	8030404 <__aeabi_idiv0>
 80303fa:	bd02      	pop	{r1, pc}

080303fc <__aeabi_idivmod>:
 80303fc:	2900      	cmp	r1, #0
 80303fe:	d0f8      	beq.n	80303f2 <__divsi3+0x1c2>
 8030400:	e716      	b.n	8030230 <__divsi3>
 8030402:	4770      	bx	lr

08030404 <__aeabi_idiv0>:
 8030404:	4770      	bx	lr
 8030406:	46c0      	nop			; (mov r8, r8)

08030408 <alp_proc>:




#ifdef EXTF_alp_proc
ot_bool alp_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 8030408:	b570      	push	{r4, r5, r6, lr}
 803040a:	0004      	movs	r4, r0
 803040c:	000d      	movs	r5, r1
    };

    ot_u8 alp_handle;

    // Always flush payload length of output before any data is written
    alp->outrec.plength = 0;
 803040e:	2300      	movs	r3, #0
 8030410:	70c3      	strb	r3, [r0, #3]

    /// <LI> IDs in range 0-to-ALP_FUNCTIONS are standardized, or psuedo-standardized </LI>
    /// <LI> IDs in range 128-to-(128+ALP_API) are mapped OTAPI functions </LI>
    /// <LI> IDs outside this range get pushed to ALP_EXT </LI>
    //alp_handle = alp->inq->getcursor[2];
    alp_handle = INREC(alp, ID);
 8030412:	2102      	movs	r1, #2
 8030414:	4249      	negs	r1, r1
 8030416:	6880      	ldr	r0, [r0, #8]
 8030418:	f004 f9ca 	bl	80347b0 <q_getcursor_val>

    //ASAPI section
    if (alp_handle > 7) {
 803041c:	2807      	cmp	r0, #7
 803041e:	d900      	bls.n	8030422 <alp_proc+0x1a>
        alp_handle = 8;
 8030420:	2008      	movs	r0, #8
    }
    alp_handle = (ot_u8)proc[alp_handle](alp, user_id);
 8030422:	0080      	lsls	r0, r0, #2
 8030424:	4b04      	ldr	r3, [pc, #16]	; (8030438 <alp_proc+0x30>)
 8030426:	58c3      	ldr	r3, [r0, r3]
 8030428:	0029      	movs	r1, r5
 803042a:	0020      	movs	r0, r4
 803042c:	4798      	blx	r3
    /// If the output bookmark is non-Null, there is output chunking.  Else,
    /// the output message is complete (ended)
    ///@todo Bookmarked has been refactored, and is not currently supported... sort it.
    //alp->OUTREC(_FLAGS)   &= ~ALP_FLAG_ME;
    //alp->OUTREC(_FLAGS)   |= (alp->BOOKMARK_OUT) ? ALP_FLAG_CF : ALP_FLAG_ME;
    alp->OUTREC(FLAGS)   |= ALP_FLAG_ME;   //Temporary fix
 803042e:	78a3      	ldrb	r3, [r4, #2]
 8030430:	2240      	movs	r2, #64	; 0x40
 8030432:	4313      	orrs	r3, r2
 8030434:	70a3      	strb	r3, [r4, #2]

    // Return True (atomic) or False (non-atomic)
    return (ot_bool)alp_handle;
}
 8030436:	bd70      	pop	{r4, r5, r6, pc}
 8030438:	08036db8 	.word	0x08036db8

0803043c <sub_release_record>:
    }
}


static void sub_release_record(ot_queue* appq) {
    appq->front    += appq->front[1] + 4;
 803043c:	68c3      	ldr	r3, [r0, #12]
 803043e:	785a      	ldrb	r2, [r3, #1]
 8030440:	3204      	adds	r2, #4
 8030442:	189b      	adds	r3, r3, r2
 8030444:	60c3      	str	r3, [r0, #12]
    appq->getcursor = appq->front;
 8030446:	6043      	str	r3, [r0, #4]
}
 8030448:	4770      	bx	lr
	...

0803044c <sub_q_purge>:
static void sub_q_purge(ot_queue* q) {
 803044c:	b510      	push	{r4, lr}
    if (q_length(q) <= 0) {
 803044e:	f004 f9b2 	bl	80347b6 <q_length>
 8030452:	2800      	cmp	r0, #0
 8030454:	dd00      	ble.n	8030458 <sub_q_purge+0xc>
}
 8030456:	bd10      	pop	{r4, pc}
        q_init(&srv.q, srv_buffer, 256);
 8030458:	2280      	movs	r2, #128	; 0x80
 803045a:	4803      	ldr	r0, [pc, #12]	; (8030468 <sub_q_purge+0x1c>)
 803045c:	0052      	lsls	r2, r2, #1
 803045e:	4903      	ldr	r1, [pc, #12]	; (803046c <sub_q_purge+0x20>)
 8030460:	3008      	adds	r0, #8
 8030462:	f004 f9d7 	bl	8034814 <q_init>
}
 8030466:	e7f6      	b.n	8030456 <sub_q_purge+0xa>
 8030468:	2000c1c8 	.word	0x2000c1c8
 803046c:	2000c1e4 	.word	0x2000c1e4

08030470 <sub_retrieve_record>:


static ot_u8* sub_retrieve_record(alp_record* apprec, ot_queue* appq) {
 8030470:	b510      	push	{r4, lr}
 8030472:	000c      	movs	r4, r1
    memcpy((ot_u8*)&apprec->flags, appq->getcursor, 4);
 8030474:	2204      	movs	r2, #4
 8030476:	6849      	ldr	r1, [r1, #4]
 8030478:	f005 fc1c 	bl	8035cb4 <ot_memcpy>
    appq->getcursor    += 4;
 803047c:	6863      	ldr	r3, [r4, #4]
 803047e:	3304      	adds	r3, #4
 8030480:	6063      	str	r3, [r4, #4]
    return appq->front;
 8030482:	68e0      	ldr	r0, [r4, #12]
}
 8030484:	bd10      	pop	{r4, pc}

08030486 <sub_check_more_records>:

static ot_u8 sub_check_more_records(ot_queue* appq) {
 8030486:	b510      	push	{r4, lr}
    return (q_span(appq) > 0);
 8030488:	f004 f99a 	bl	80347c0 <q_span>
 803048c:	17c3      	asrs	r3, r0, #31
 803048e:	1a18      	subs	r0, r3, r0
 8030490:	0fc0      	lsrs	r0, r0, #31
}
 8030492:	bd10      	pop	{r4, pc}

08030494 <sub_test_stream>:
ot_int sub_test_stream(ot_u8* msg, ot_u8 cmd, ot_u8 ext) {
 8030494:	b570      	push	{r4, r5, r6, lr}
 8030496:	b082      	sub	sp, #8
    test_len    = base_std[cmd&31];
 8030498:	231f      	movs	r3, #31
 803049a:	400b      	ands	r3, r1
 803049c:	4c1d      	ldr	r4, [pc, #116]	; (8030514 <sub_test_stream+0x80>)
 803049e:	5ce3      	ldrb	r3, [r4, r3]
 80304a0:	466c      	mov	r4, sp
 80304a2:	1da5      	adds	r5, r4, #6
 80304a4:	80e3      	strh	r3, [r4, #6]
    test_len   += ext_std[(ext>>5) & 3];
 80304a6:	0956      	lsrs	r6, r2, #5
 80304a8:	2403      	movs	r4, #3
 80304aa:	4034      	ands	r4, r6
 80304ac:	4e1a      	ldr	r6, [pc, #104]	; (8030518 <sub_test_stream+0x84>)
 80304ae:	5d34      	ldrb	r4, [r6, r4]
 80304b0:	191b      	adds	r3, r3, r4
 80304b2:	802b      	strh	r3, [r5, #0]
    msg_curs    = msg + test_len;
 80304b4:	18c3      	adds	r3, r0, r3
    if (cmd & ASAPI_CMD_DLLS) {
 80304b6:	074c      	lsls	r4, r1, #29
 80304b8:	d506      	bpl.n	80304c8 <sub_test_stream+0x34>
        test_len    = 2 + ((msg_curs[0] == 0) << 4);
 80304ba:	781c      	ldrb	r4, [r3, #0]
 80304bc:	2c00      	cmp	r4, #0
 80304be:	d115      	bne.n	80304ec <sub_test_stream+0x58>
 80304c0:	3412      	adds	r4, #18
 80304c2:	466d      	mov	r5, sp
 80304c4:	80ec      	strh	r4, [r5, #6]
        msg_curs   += test_len;  
 80304c6:	191b      	adds	r3, r3, r4
    if (cmd & ASAPI_CMD_ANYCAST) {
 80304c8:	078c      	lsls	r4, r1, #30
 80304ca:	d41d      	bmi.n	8030508 <sub_test_stream+0x74>
    if (ext & ASAPI_EXT_UDP) {
 80304cc:	0692      	lsls	r2, r2, #26
 80304ce:	d509      	bpl.n	80304e4 <sub_test_stream+0x50>
        ((ot_u8*)&test_len)[UPPER]  = msg_curs[0];
 80304d0:	781a      	ldrb	r2, [r3, #0]
 80304d2:	4669      	mov	r1, sp
 80304d4:	71ca      	strb	r2, [r1, #7]
        ((ot_u8*)&test_len)[LOWER]  = msg_curs[1];
 80304d6:	785a      	ldrb	r2, [r3, #1]
 80304d8:	718a      	strb	r2, [r1, #6]
        test_len                   += ASAPI_UDP_SIZE;
 80304da:	88ca      	ldrh	r2, [r1, #6]
 80304dc:	3204      	adds	r2, #4
 80304de:	b292      	uxth	r2, r2
 80304e0:	80ca      	strh	r2, [r1, #6]
        msg_curs                   += test_len;
 80304e2:	189b      	adds	r3, r3, r2
    return (ot_int)(msg_curs - msg);
 80304e4:	1a18      	subs	r0, r3, r0
 80304e6:	b200      	sxth	r0, r0
}
 80304e8:	b002      	add	sp, #8
 80304ea:	bd70      	pop	{r4, r5, r6, pc}
        test_len    = 2 + ((msg_curs[0] == 0) << 4);
 80304ec:	2402      	movs	r4, #2
 80304ee:	e7e8      	b.n	80304c2 <sub_test_stream+0x2e>
        test_len    = (msg_curs[0] & 0x80) ? msg_curs[1]<<1 : msg_curs[1];
 80304f0:	785c      	ldrb	r4, [r3, #1]
 80304f2:	0064      	lsls	r4, r4, #1
 80304f4:	466d      	mov	r5, sp
 80304f6:	80ec      	strh	r4, [r5, #6]
        test_len   += 2;
 80304f8:	3402      	adds	r4, #2
 80304fa:	80ec      	strh	r4, [r5, #6]
        msg_curs   += test_len;
 80304fc:	191b      	adds	r3, r3, r4
        if ((cmd & (ASAPI_CMD_MULTICAST+ASAPI_CMD_INIT)) == (ASAPI_CMD_MULTICAST+ASAPI_CMD_INIT)) {
 80304fe:	240b      	movs	r4, #11
 8030500:	400c      	ands	r4, r1
            cmd = 0;
 8030502:	2100      	movs	r1, #0
        if ((cmd & (ASAPI_CMD_MULTICAST+ASAPI_CMD_INIT)) == (ASAPI_CMD_MULTICAST+ASAPI_CMD_INIT)) {
 8030504:	2c0b      	cmp	r4, #11
 8030506:	d1e1      	bne.n	80304cc <sub_test_stream+0x38>
        test_len    = (msg_curs[0] & 0x80) ? msg_curs[1]<<1 : msg_curs[1];
 8030508:	2400      	movs	r4, #0
 803050a:	571c      	ldrsb	r4, [r3, r4]
 803050c:	2c00      	cmp	r4, #0
 803050e:	dbef      	blt.n	80304f0 <sub_test_stream+0x5c>
 8030510:	785c      	ldrb	r4, [r3, #1]
 8030512:	e7ef      	b.n	80304f4 <sub_test_stream+0x60>
 8030514:	08036ddc 	.word	0x08036ddc
 8030518:	08036dfc 	.word	0x08036dfc

0803051c <asapi_init_srv>:
void asapi_init_srv() {
 803051c:	b510      	push	{r4, lr}
    srv.alp         = NULL;
 803051e:	4805      	ldr	r0, [pc, #20]	; (8030534 <asapi_init_srv+0x18>)
 8030520:	2300      	movs	r3, #0
 8030522:	6003      	str	r3, [r0, #0]
    q_init(&srv.q, srv_buffer, 256);
 8030524:	2280      	movs	r2, #128	; 0x80
 8030526:	3008      	adds	r0, #8
 8030528:	0052      	lsls	r2, r2, #1
 803052a:	4903      	ldr	r1, [pc, #12]	; (8030538 <asapi_init_srv+0x1c>)
 803052c:	f004 f972 	bl	8034814 <q_init>
}
 8030530:	bd10      	pop	{r4, pc}
 8030532:	46c0      	nop			; (mov r8, r8)
 8030534:	2000c1c8 	.word	0x2000c1c8
 8030538:	2000c1e4 	.word	0x2000c1e4

0803053c <sub_stop_srv>:
static void sub_stop_srv() {
 803053c:	b510      	push	{r4, lr}
    session_app_purge(&asapi_applet);
 803053e:	4803      	ldr	r0, [pc, #12]	; (803054c <sub_stop_srv+0x10>)
 8030540:	f002 ff28 	bl	8033394 <session_app_purge>
    asapi_init_srv();
 8030544:	f7ff ffea 	bl	803051c <asapi_init_srv>
}
 8030548:	bd10      	pop	{r4, pc}
 803054a:	46c0      	nop			; (mov r8, r8)
 803054c:	0803061d 	.word	0x0803061d

08030550 <sub_start_session>:





static ot_int sub_start_session(alp_tmpl* alp) {
 8030550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8030552:	b087      	sub	sp, #28
    alp_record      rec;
    advert_tmpl     adv;

    /// 1. Start with a blank session creation template.  It will get updated
    ///    later, either in the advertising setup or the applet itself.
    memset((ot_u8*)&s_tmpl, 0, sizeof(session_tmpl));
 8030554:	2206      	movs	r2, #6
 8030556:	2100      	movs	r1, #0
 8030558:	a804      	add	r0, sp, #16
 803055a:	f005 fbb9 	bl	8035cd0 <ot_memset>
    ///      advertising request that follows.
    
    /// 2. The first record must be an initialization record.  Advertising can
    ///    be used with init.type_code = 1.  With init.type_code = 0, no 
    ///    advertising is performed, simply a following request is processed.
    sub_retrieve_record(&rec, &srv.q);
 803055e:	492d      	ldr	r1, [pc, #180]	; (8030614 <sub_start_session+0xc4>)
 8030560:	ac03      	add	r4, sp, #12
 8030562:	3108      	adds	r1, #8
 8030564:	0020      	movs	r0, r4
 8030566:	f7ff ff83 	bl	8030470 <sub_retrieve_record>
    if ((rec.cmd & ASAPI_CMD_INIT) == 0) {
 803056a:	78e2      	ldrb	r2, [r4, #3]
 803056c:	0713      	lsls	r3, r2, #28
 803056e:	d547      	bpl.n	8030600 <sub_start_session+0xb0>
    }
    
    /// 3. If the message contains INIT, there are no further templates in the
    ///    message (by design).  Load the INIT template and then release this
    ///    ASAPI record.
    srv.q.getcursor+= (rec.cmd & ASAPI_CMD_EXT) ? 3 : 2;    //Ext byte & transid
 8030570:	4b28      	ldr	r3, [pc, #160]	; (8030614 <sub_start_session+0xc4>)
 8030572:	68db      	ldr	r3, [r3, #12]
 8030574:	0692      	lsls	r2, r2, #26
 8030576:	d53b      	bpl.n	80305f0 <sub_start_session+0xa0>
 8030578:	2203      	movs	r2, #3
 803057a:	4c26      	ldr	r4, [pc, #152]	; (8030614 <sub_start_session+0xc4>)
 803057c:	189b      	adds	r3, r3, r2
 803057e:	60e3      	str	r3, [r4, #12]
    type_code       = q_readbyte(&srv.q);
 8030580:	3408      	adds	r4, #8
 8030582:	0020      	movs	r0, r4
 8030584:	f004 f994 	bl	80348b0 <q_readbyte>
 8030588:	0007      	movs	r7, r0
    s_tmpl.flags    = q_readbyte(&srv.q);       // link_flags byte
 803058a:	0020      	movs	r0, r4
 803058c:	f004 f990 	bl	80348b0 <q_readbyte>
 8030590:	ae04      	add	r6, sp, #16
 8030592:	7130      	strb	r0, [r6, #4]
    s_tmpl.flagmask = (1<<3) | (1<<4);          // RS coding flag & VID flag    ///@todo VID usage might need extra attention
 8030594:	2318      	movs	r3, #24
 8030596:	7173      	strb	r3, [r6, #5]
    adv.duty_off    = q_readbyte(&srv.q);
 8030598:	0020      	movs	r0, r4
 803059a:	f004 f989 	bl	80348b0 <q_readbyte>
 803059e:	ad01      	add	r5, sp, #4
 80305a0:	7028      	strb	r0, [r5, #0]
    adv.duty_on     = q_readbyte(&srv.q);
 80305a2:	0020      	movs	r0, r4
 80305a4:	f004 f984 	bl	80348b0 <q_readbyte>
 80305a8:	7068      	strb	r0, [r5, #1]
    adv.subnet      = q_readbyte(&srv.q);
 80305aa:	0020      	movs	r0, r4
 80305ac:	f004 f980 	bl	80348b0 <q_readbyte>
 80305b0:	70a8      	strb	r0, [r5, #2]
    adv.channel     = q_readbyte(&srv.q);
 80305b2:	0020      	movs	r0, r4
 80305b4:	f004 f97c 	bl	80348b0 <q_readbyte>
 80305b8:	70e8      	strb	r0, [r5, #3]
    s_tmpl.channel  = adv.channel;
 80305ba:	7070      	strb	r0, [r6, #1]
    adv.duration    = q_readshort(&srv.q);
 80305bc:	0020      	movs	r0, r4
 80305be:	f004 f97c 	bl	80348ba <q_readshort>
 80305c2:	80a8      	strh	r0, [r5, #4]
    sub_release_record(&srv.q);                 // We are done with init record
 80305c4:	0020      	movs	r0, r4
 80305c6:	f7ff ff39 	bl	803043c <sub_release_record>
    ///    should be performed.
    ///    <LI> 0: no explicity connection initialization, just a "naked 
    ///             request" that is specified in the next record. </LI>
    ///    <LI> 1: Standard advertising followed by request in next record</LI>
    ///    <LI> 255: Strobing, no follow-on request required. </LI>
    if (type_code > 1) {
 80305ca:	2f01      	cmp	r7, #1
 80305cc:	d81c      	bhi.n	8030608 <sub_start_session+0xb8>
        hb_run_strobe(adv.channel, s_tmpl.flags, adv.subnet, adv.duration, adv.duty_on);
#       endif
        //srv.inprogress = False;
        return -1;
    }
    else if (sub_check_more_records(&srv.q) == 0) {
 80305ce:	4811      	ldr	r0, [pc, #68]	; (8030614 <sub_start_session+0xc4>)
 80305d0:	3008      	adds	r0, #8
 80305d2:	f7ff ff58 	bl	8030486 <sub_check_more_records>
 80305d6:	2800      	cmp	r0, #0
 80305d8:	d012      	beq.n	8030600 <sub_start_session+0xb0>
        goto sub_start_session_SESSION_ERR;
    }
    else if (type_code == 0) {  
 80305da:	2f00      	cmp	r7, #0
 80305dc:	d10a      	bne.n	80305f4 <sub_start_session+0xa4>
        // Naked Request
        ///@todo this doesn't seem to work
        active = m2task_immediate(&s_tmpl, &asapi_applet);
 80305de:	490e      	ldr	r1, [pc, #56]	; (8030618 <sub_start_session+0xc8>)
 80305e0:	0030      	movs	r0, r6
 80305e2:	f002 fae5 	bl	8032bb0 <m2task_immediate>
        active = m2task_advertise(&adv, &s_tmpl, &asapi_applet);
    }
    
    /// 5. Report error if the session stack was too full to initialize the new
    ///    session.
    if (active == NULL) {
 80305e6:	2800      	cmp	r0, #0
 80305e8:	d011      	beq.n	803060e <sub_start_session+0xbe>
    }
    
    ///@note removing this flag, replaced with session_app_isloaded() calls, which
    ///      are direct checks to the underlying session stack, adding reliability.
    //srv.inprogress  = True;
    return 0;
 80305ea:	2000      	movs	r0, #0
    
    sub_start_session_SESSION_ERR:
    sub_stop_srv();
    return ASAPI_ERR_NOSESSION;
}
 80305ec:	b007      	add	sp, #28
 80305ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    srv.q.getcursor+= (rec.cmd & ASAPI_CMD_EXT) ? 3 : 2;    //Ext byte & transid
 80305f0:	2202      	movs	r2, #2
 80305f2:	e7c2      	b.n	803057a <sub_start_session+0x2a>
        active = m2task_advertise(&adv, &s_tmpl, &asapi_applet);
 80305f4:	4a08      	ldr	r2, [pc, #32]	; (8030618 <sub_start_session+0xc8>)
 80305f6:	a904      	add	r1, sp, #16
 80305f8:	a801      	add	r0, sp, #4
 80305fa:	f002 fadf 	bl	8032bbc <m2task_advertise>
 80305fe:	e7f2      	b.n	80305e6 <sub_start_session+0x96>
    sub_stop_srv();
 8030600:	f7ff ff9c 	bl	803053c <sub_stop_srv>
    return ASAPI_ERR_NOSESSION;
 8030604:	200b      	movs	r0, #11
 8030606:	e7f1      	b.n	80305ec <sub_start_session+0x9c>
        return -1;
 8030608:	2001      	movs	r0, #1
 803060a:	4240      	negs	r0, r0
 803060c:	e7ee      	b.n	80305ec <sub_start_session+0x9c>
        return ASAPI_ERR_STACKFULL;
 803060e:	2009      	movs	r0, #9
 8030610:	e7ec      	b.n	80305ec <sub_start_session+0x9c>
 8030612:	46c0      	nop			; (mov r8, r8)
 8030614:	2000c1c8 	.word	0x2000c1c8
 8030618:	0803061d 	.word	0x0803061d

0803061c <asapi_applet>:

///@todo make sure that hold periods start getting clocked immedately after
/// valid REQUEST is processed.  This way, the delay period shall be front- 
/// chained from the point following the request transmission.

void asapi_applet(m2session* active) {
 803061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 803061e:	46d6      	mov	lr, sl
 8030620:	464f      	mov	r7, r9
 8030622:	4646      	mov	r6, r8
 8030624:	b5c0      	push	{r6, r7, lr}
 8030626:	b08e      	sub	sp, #56	; 0x38
 8030628:	0004      	movs	r4, r0
 803062a:	2500      	movs	r5, #0
    ot_u8           scratch;

    /// 1. Preliminary operations
    ///@note check to session_app_isloaded() is redundant, because asapi_applet()
    ///      is only called from the session stack.
    if ((srv.alp == NULL) /*|| (session_app_isloaded(&asapi_applet) == False) */ ) {
 803062c:	4bd4      	ldr	r3, [pc, #848]	; (8030980 <asapi_applet+0x364>)
 803062e:	681b      	ldr	r3, [r3, #0]
 8030630:	2b00      	cmp	r3, #0
 8030632:	d100      	bne.n	8030636 <asapi_applet+0x1a>
 8030634:	e0cb      	b.n	80307ce <asapi_applet+0x1b2>

    /// 2. Move to the next record that matches this ID.  If it returns False,
    ///    there are no more records of this type, so ASAPI is no longer in
    ///    in progress.
    ///    Else, store the command and move past the header
    if (sub_check_more_records(&srv.q) == 0) {
 8030636:	48d2      	ldr	r0, [pc, #840]	; (8030980 <asapi_applet+0x364>)
 8030638:	3008      	adds	r0, #8
 803063a:	f7ff ff24 	bl	8030486 <sub_check_more_records>
 803063e:	2800      	cmp	r0, #0
 8030640:	d100      	bne.n	8030644 <asapi_applet+0x28>
 8030642:	e0c2      	b.n	80307ca <asapi_applet+0x1ae>
        goto asapi_applet_CLOSED;
    }
    
    /// 3. alp_goto_next moved us to the right place, so formally retrive the
    /// command without worrying about validation.
    sub_retrieve_record(&rec, &srv.q);
 8030644:	49ce      	ldr	r1, [pc, #824]	; (8030980 <asapi_applet+0x364>)
 8030646:	3108      	adds	r1, #8
 8030648:	a808      	add	r0, sp, #32
 803064a:	f7ff ff11 	bl	8030470 <sub_retrieve_record>
    
    /// 4. If the netstate has SCRAP set, then this record should be released
    ///    before it even starts.
    if (active->netstate & M2_NETSTATE_SCRAP) {
 803064e:	79e3      	ldrb	r3, [r4, #7]
 8030650:	075b      	lsls	r3, r3, #29
 8030652:	d500      	bpl.n	8030656 <asapi_applet+0x3a>
 8030654:	e0a7      	b.n	80307a6 <asapi_applet+0x18a>
    }
    
    /// 5. Bypass Transaction ID, which is not relevant here.  It is important
    ///    during the message loading state, not the processing.  Also, save
    ///    the EXT byte if there is one.
    srv.q.getcursor    += ASAPI_TRANSID_SIZE;
 8030656:	4aca      	ldr	r2, [pc, #808]	; (8030980 <asapi_applet+0x364>)
 8030658:	68d3      	ldr	r3, [r2, #12]
 803065a:	3302      	adds	r3, #2
 803065c:	60d3      	str	r3, [r2, #12]
    ext                 = (rec.cmd & ASAPI_CMD_EXT) ? q_readbyte(&srv.q) : 0;
 803065e:	ab08      	add	r3, sp, #32
 8030660:	78db      	ldrb	r3, [r3, #3]
 8030662:	2220      	movs	r2, #32
 8030664:	0016      	movs	r6, r2
 8030666:	401e      	ands	r6, r3
 8030668:	421a      	tst	r2, r3
 803066a:	d000      	beq.n	803066e <asapi_applet+0x52>
 803066c:	e0b7      	b.n	80307de <asapi_applet+0x1c2>
    /// @todo is it true that INIT must be advertising?
    /// 6. If there is an init field here, it must be an advertising-type of
    ///    initialization.  Convert the active session to an advertising 
    ///    flooding session, then add an extension session for the follow-up 
    ///    request. Duty Cycling not supported for intra-session advertising.
    if (rec.cmd & ASAPI_CMD_INIT) {
 803066e:	ab08      	add	r3, sp, #32
 8030670:	78db      	ldrb	r3, [r3, #3]
 8030672:	071b      	lsls	r3, r3, #28
 8030674:	d500      	bpl.n	8030678 <asapi_applet+0x5c>
 8030676:	e0b8      	b.n	80307ea <asapi_applet+0x1ce>
    // dialog that the session should pause before resuming.  It must be
    // zero for connection-oriented sessions (i.e. single advertising, 
    // multiple dialogs).  If 0, listen bit is set in session variables.
    
    // Dialog Template is always needed, always present
    active->subnet  = q_readbyte(&srv.q);
 8030678:	4fc1      	ldr	r7, [pc, #772]	; (8030980 <asapi_applet+0x364>)
 803067a:	003d      	movs	r5, r7
 803067c:	3508      	adds	r5, #8
 803067e:	0028      	movs	r0, r5
 8030680:	f004 f916 	bl	80348b0 <q_readbyte>
 8030684:	72a0      	strb	r0, [r4, #10]
    active->channel = q_readbyte(&srv.q);   // req channel
 8030686:	0028      	movs	r0, r5
 8030688:	f004 f912 	bl	80348b0 <q_readbyte>
 803068c:	71a0      	strb	r0, [r4, #6]
    dialog.chanlist = srv.q.getcursor;
 803068e:	68fb      	ldr	r3, [r7, #12]
 8030690:	af0c      	add	r7, sp, #48	; 0x30
 8030692:	930d      	str	r3, [sp, #52]	; 0x34
    scratch         = q_readbyte(&srv.q);   // resp channel
 8030694:	0028      	movs	r0, r5
 8030696:	f004 f90b 	bl	80348b0 <q_readbyte>
    dialog.channels = (scratch != active->channel);
 803069a:	79a3      	ldrb	r3, [r4, #6]
 803069c:	1a1b      	subs	r3, r3, r0
 803069e:	1e5a      	subs	r2, r3, #1
 80306a0:	4193      	sbcs	r3, r2
 80306a2:	707b      	strb	r3, [r7, #1]
    dialog.timeout  = q_readbyte(&srv.q);   // timeout code
 80306a4:	0028      	movs	r0, r5
 80306a6:	f004 f903 	bl	80348b0 <q_readbyte>
 80306aa:	7038      	strb	r0, [r7, #0]
    next_wait       = q_readshort(&srv.q);
 80306ac:	0028      	movs	r0, r5
 80306ae:	f004 f904 	bl	80348ba <q_readshort>
 80306b2:	0005      	movs	r5, r0
    active->flags  |= (next_wait == 0) << 7;          // M2_FLAG_LISTEN
 80306b4:	230b      	movs	r3, #11
 80306b6:	56e3      	ldrsb	r3, [r4, r3]
 80306b8:	2800      	cmp	r0, #0
 80306ba:	d000      	beq.n	80306be <asapi_applet+0xa2>
 80306bc:	e0c8      	b.n	8030850 <asapi_applet+0x234>
 80306be:	2280      	movs	r2, #128	; 0x80
 80306c0:	4252      	negs	r2, r2
 80306c2:	4313      	orrs	r3, r2
 80306c4:	b2db      	uxtb	r3, r3
 80306c6:	72e3      	strb	r3, [r4, #11]
    
    // DLL Security Template can be included, set session vars for DLLS
    if (rec.cmd & ASAPI_CMD_DLLS) {
 80306c8:	aa08      	add	r2, sp, #32
 80306ca:	78d2      	ldrb	r2, [r2, #3]
 80306cc:	0752      	lsls	r2, r2, #29
 80306ce:	d500      	bpl.n	80306d2 <asapi_applet+0xb6>
 80306d0:	e0c0      	b.n	8030854 <asapi_applet+0x238>
    // implicit.  It must be used to open the request, though.
    ///@todo Routing is going to get updated with new DLL/network control
    ///      structure, but ASAPI will not support multihopping in 1.0 anyway.
    {   routing_tmpl routing;
        ot_u8 addressing;
        addressing   = (rec.cmd & ASAPI_CMD_ADDRMASK);
 80306d2:	ab08      	add	r3, sp, #32
 80306d4:	78db      	ldrb	r3, [r3, #3]
        if (addressing == ASAPI_CMD_UNICAST) {
 80306d6:	079b      	lsls	r3, r3, #30
 80306d8:	d100      	bne.n	80306dc <asapi_applet+0xc0>
 80306da:	e0cc      	b.n	8030876 <asapi_applet+0x25a>
            routing.dlog.value  = q_markbyte(&srv.q, routing.dlog.length);
            addressing          = ADDR_unicast;                 // Unicast with UID Target (2)
            addressing         |= (routing.dlog.length == 2);   // Unicast with VID Target (3)
        }
        else {
            addressing          = ADDR_broadcast;
 80306dc:	2001      	movs	r0, #1
        }
        routing.hop_code    = 0;    //override hop code value
 80306de:	2300      	movs	r3, #0
 80306e0:	466a      	mov	r2, sp
 80306e2:	7013      	strb	r3, [r2, #0]
        otapi_open_request((ADDR_Type)addressing, &routing);
 80306e4:	4669      	mov	r1, sp
 80306e6:	f001 fac7 	bl	8031c78 <otapi_open_request>
    }
    
    // The presence of these file tmpls and UDP tmpl dictate the command opcode
    scratch = 0;
    if (rec.cmd & ASAPI_CMD_FILECOMP) {
 80306ea:	ab08      	add	r3, sp, #32
 80306ec:	78db      	ldrb	r3, [r3, #3]
 80306ee:	2202      	movs	r2, #2
 80306f0:	0011      	movs	r1, r2
 80306f2:	4019      	ands	r1, r3
 80306f4:	4688      	mov	r8, r1
 80306f6:	421a      	tst	r2, r3
 80306f8:	d000      	beq.n	80306fc <asapi_applet+0xe0>
 80306fa:	e0d9      	b.n	80308b0 <asapi_applet+0x294>
        alp_breakdown_isfcomp_tmpl(&srv.q, (void*)&comp);
        scratch  = (2 | (comp.is_series & 1) << 2);
    }
    if (ext & ASAPI_EXT_FILECALL) {
 80306fc:	2340      	movs	r3, #64	; 0x40
 80306fe:	001a      	movs	r2, r3
 8030700:	4032      	ands	r2, r6
 8030702:	4692      	mov	sl, r2
 8030704:	4233      	tst	r3, r6
 8030706:	d000      	beq.n	803070a <asapi_applet+0xee>
 8030708:	e0e2      	b.n	80308d0 <asapi_applet+0x2b4>
        alp_breakdown_isfcall_tmpl(&srv.q, (void*)&call);
        scratch |= (2 | (call.is_series & 1));
    }
    else if (ext & ASAPI_EXT_UDP) {
 803070a:	06b3      	lsls	r3, r6, #26
 803070c:	d504      	bpl.n	8030718 <asapi_applet+0xfc>
        scratch |= (1<<4);
 803070e:	2310      	movs	r3, #16
 8030710:	4642      	mov	r2, r8
 8030712:	431a      	orrs	r2, r3
 8030714:	b2d3      	uxtb	r3, r2
 8030716:	4698      	mov	r8, r3
    // Command Tmpl Building based on existing information
    // Plus command & Dialog Tmpl streaming
    {   ///@todo make sure this works with multicast, I don't think it really does.
        static const ot_u8 m2tt_lut[4] = { M2TT_REQ_UB, M2TT_REQ_UB, M2TT_REQ_A, M2TT_REQ_M_INIT };
        command_tmpl cmd;
        cmd.type        = m2tt_lut[(rec.cmd & ASAPI_CMD_ADDRMASK)];
 8030718:	af08      	add	r7, sp, #32
 803071a:	78fb      	ldrb	r3, [r7, #3]
 803071c:	2203      	movs	r2, #3
 803071e:	4691      	mov	r9, r2
 8030720:	4013      	ands	r3, r2
 8030722:	4a98      	ldr	r2, [pc, #608]	; (8030984 <asapi_applet+0x368>)
 8030724:	5cd3      	ldrb	r3, [r2, r3]
 8030726:	466a      	mov	r2, sp
 8030728:	7013      	strb	r3, [r2, #0]
        cmd.opcode      = opcode_lut[scratch];
 803072a:	4b97      	ldr	r3, [pc, #604]	; (8030988 <asapi_applet+0x36c>)
 803072c:	4642      	mov	r2, r8
 803072e:	5c9b      	ldrb	r3, [r3, r2]
 8030730:	466a      	mov	r2, sp
 8030732:	7053      	strb	r3, [r2, #1]
        cmd.extension   = 0;
 8030734:	2300      	movs	r3, #0
 8030736:	7093      	strb	r3, [r2, #2]
        otapi_put_command_tmpl(&local_status, &cmd);
 8030738:	331e      	adds	r3, #30
 803073a:	446b      	add	r3, sp
 803073c:	4698      	mov	r8, r3
 803073e:	4669      	mov	r1, sp
 8030740:	0018      	movs	r0, r3
 8030742:	f001 facd 	bl	8031ce0 <otapi_put_command_tmpl>
        otapi_put_dialog_tmpl(&status, &dialog);
 8030746:	a90c      	add	r1, sp, #48	; 0x30
 8030748:	231f      	movs	r3, #31
 803074a:	446b      	add	r3, sp
 803074c:	0018      	movs	r0, r3
 803074e:	f001 fb09 	bl	8031d64 <otapi_put_dialog_tmpl>
        status &= local_status;
 8030752:	466b      	mov	r3, sp
 8030754:	7fda      	ldrb	r2, [r3, #31]
 8030756:	4643      	mov	r3, r8
 8030758:	781b      	ldrb	r3, [r3, #0]
 803075a:	4013      	ands	r3, r2
 803075c:	466a      	mov	r2, sp
 803075e:	77d3      	strb	r3, [r2, #31]
    }

    // Load Queries, if enabled
    if ((rec.cmd & ASAPI_CMD_ADDRMASK) == ASAPI_CMD_MULTICAST) {
 8030760:	78fb      	ldrb	r3, [r7, #3]
 8030762:	464a      	mov	r2, r9
 8030764:	4013      	ands	r3, r2
 8030766:	2b03      	cmp	r3, #3
 8030768:	d100      	bne.n	803076c <asapi_applet+0x150>
 803076a:	e0c2      	b.n	80308f2 <asapi_applet+0x2d6>
        query_tmpl query;
        alp_breakdown_query_tmpl(&srv.q, (void*)&query);
        otapi_put_query_tmpl(&local_status, &query);
        status &= local_status;
    }
    if (rec.cmd & ASAPI_CMD_LQUERY) {
 803076c:	ab08      	add	r3, sp, #32
 803076e:	78db      	ldrb	r3, [r3, #3]
 8030770:	079b      	lsls	r3, r3, #30
 8030772:	d500      	bpl.n	8030776 <asapi_applet+0x15a>
 8030774:	e0ce      	b.n	8030914 <asapi_applet+0x2f8>
        otapi_put_query_tmpl(&local_status, &query);
        status &= local_status;
    }

    // call & comp
    if (rec.cmd & ASAPI_CMD_FILECOMP) {
 8030776:	ab08      	add	r3, sp, #32
 8030778:	78db      	ldrb	r3, [r3, #3]
 803077a:	079b      	lsls	r3, r3, #30
 803077c:	d500      	bpl.n	8030780 <asapi_applet+0x164>
 803077e:	e0db      	b.n	8030938 <asapi_applet+0x31c>
        otapi_put_isf_comp(&local_status, &comp);
        status &= local_status;
    }
    if (ext & ASAPI_EXT_FILECALL) {
 8030780:	4653      	mov	r3, sl
 8030782:	2b00      	cmp	r3, #0
 8030784:	d000      	beq.n	8030788 <asapi_applet+0x16c>
 8030786:	e0e4      	b.n	8030952 <asapi_applet+0x336>
        otapi_put_isf_call(&local_status, &call);
    }
    else if (ext & ASAPI_EXT_UDP) {
 8030788:	06b3      	lsls	r3, r6, #26
 803078a:	d500      	bpl.n	803078e <asapi_applet+0x172>
 803078c:	e0e7      	b.n	803095e <asapi_applet+0x342>
    }
    
    /// Status message checking.  It should be non-zero.  If not, 
    /// scrap the session and don't bother closing the request
    /// (because it's going to get cancelled anyway).
    status &= local_status;
 803078e:	221f      	movs	r2, #31
 8030790:	446a      	add	r2, sp
 8030792:	7811      	ldrb	r1, [r2, #0]
 8030794:	231e      	movs	r3, #30
 8030796:	446b      	add	r3, sp
 8030798:	781b      	ldrb	r3, [r3, #0]
 803079a:	400b      	ands	r3, r1
 803079c:	7013      	strb	r3, [r2, #0]
    if (status == 0) {
 803079e:	d000      	beq.n	80307a2 <asapi_applet+0x186>
 80307a0:	e0e8      	b.n	8030974 <asapi_applet+0x358>
        active->netstate = M2_NETSTATE_SCRAP;
 80307a2:	3304      	adds	r3, #4
 80307a4:	71e3      	strb	r3, [r4, #7]
    ///         set), then we need to create a dummy session which will recall
    ///         asapi_applet() when it begins.  </LI>
    ///    <LI> On the other hand, if HOLDOPEN is clear, we need to turn-off the
    ///         "inprogress" flag to allow new ASAPI sequences to be entered. </LI>
    asapi_applet_END:
    sub_release_record(&srv.q);
 80307a6:	4876      	ldr	r0, [pc, #472]	; (8030980 <asapi_applet+0x364>)
 80307a8:	3008      	adds	r0, #8
 80307aa:	f7ff fe47 	bl	803043c <sub_release_record>

    if (active->netstate & M2_NETSTATE_SCRAP) {
 80307ae:	79e3      	ldrb	r3, [r4, #7]
 80307b0:	075b      	lsls	r3, r3, #29
 80307b2:	d500      	bpl.n	80307b6 <asapi_applet+0x19a>
 80307b4:	e0e1      	b.n	803097a <asapi_applet+0x35e>
        sub_stop_srv();
    }
    else if (rec.cmd & ASAPI_CMD_HOLDOPEN) {
 80307b6:	ab08      	add	r3, sp, #32
 80307b8:	78db      	ldrb	r3, [r3, #3]
 80307ba:	065b      	lsls	r3, r3, #25
 80307bc:	d509      	bpl.n	80307d2 <asapi_applet+0x1b6>
        session_continue(active->applet, M2_NETSTATE_REQTX, next_wait);
 80307be:	6820      	ldr	r0, [r4, #0]
 80307c0:	002a      	movs	r2, r5
 80307c2:	2100      	movs	r1, #0
 80307c4:	f002 fe36 	bl	8033434 <session_continue>
 80307c8:	e003      	b.n	80307d2 <asapi_applet+0x1b6>
        sub_stop_srv();
 80307ca:	f7ff feb7 	bl	803053c <sub_stop_srv>
    return;

    /// 9. the server is closed, yet this applet was invoked.  Scrap it,
    ///    which will cause no communication to occur.
    asapi_applet_CLOSED:
    active->netstate = M2_NETSTATE_SCRAP;
 80307ce:	2304      	movs	r3, #4
 80307d0:	71e3      	strb	r3, [r4, #7]
}
 80307d2:	b00e      	add	sp, #56	; 0x38
 80307d4:	bce0      	pop	{r5, r6, r7}
 80307d6:	46ba      	mov	sl, r7
 80307d8:	46b1      	mov	r9, r6
 80307da:	46a8      	mov	r8, r5
 80307dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ext                 = (rec.cmd & ASAPI_CMD_EXT) ? q_readbyte(&srv.q) : 0;
 80307de:	4868      	ldr	r0, [pc, #416]	; (8030980 <asapi_applet+0x364>)
 80307e0:	3008      	adds	r0, #8
 80307e2:	f004 f865 	bl	80348b0 <q_readbyte>
 80307e6:	0006      	movs	r6, r0
 80307e8:	e741      	b.n	803066e <asapi_applet+0x52>
        if (q_readbyte(&srv.q) != 1) { 
 80307ea:	4865      	ldr	r0, [pc, #404]	; (8030980 <asapi_applet+0x364>)
 80307ec:	3008      	adds	r0, #8
 80307ee:	f004 f85f 	bl	80348b0 <q_readbyte>
 80307f2:	2801      	cmp	r0, #1
 80307f4:	d006      	beq.n	8030804 <asapi_applet+0x1e8>
            active->netstate = M2_NETSTATE_SCRAP;
 80307f6:	2304      	movs	r3, #4
 80307f8:	71e3      	strb	r3, [r4, #7]
        sub_release_record(&srv.q);
 80307fa:	4861      	ldr	r0, [pc, #388]	; (8030980 <asapi_applet+0x364>)
 80307fc:	3008      	adds	r0, #8
 80307fe:	f7ff fe1d 	bl	803043c <sub_release_record>
        return;
 8030802:	e7e6      	b.n	80307d2 <asapi_applet+0x1b6>
            active->netstate    = (M2_NETFLAG_BG | M2_NETFLAG_STREAM | M2_NETSTATE_REQTX | M2_NETSTATE_INIT);
 8030804:	23c8      	movs	r3, #200	; 0xc8
 8030806:	71e3      	strb	r3, [r4, #7]
            active->flags      |= (3<<3) & q_readbyte(&srv.q);      // lc flags
 8030808:	4e5d      	ldr	r6, [pc, #372]	; (8030980 <asapi_applet+0x364>)
 803080a:	0035      	movs	r5, r6
 803080c:	3508      	adds	r5, #8
 803080e:	0028      	movs	r0, r5
 8030810:	f004 f84e 	bl	80348b0 <q_readbyte>
 8030814:	2318      	movs	r3, #24
 8030816:	4003      	ands	r3, r0
 8030818:	7ae0      	ldrb	r0, [r4, #11]
 803081a:	4318      	orrs	r0, r3
 803081c:	72e0      	strb	r0, [r4, #11]
            srv.q.getcursor    += 2;                                // go past duty-cycle flags (not supported)
 803081e:	68f3      	ldr	r3, [r6, #12]
 8030820:	3302      	adds	r3, #2
 8030822:	60f3      	str	r3, [r6, #12]
            active->subnet      = q_readbyte(&srv.q);
 8030824:	0028      	movs	r0, r5
 8030826:	f004 f843 	bl	80348b0 <q_readbyte>
 803082a:	72a0      	strb	r0, [r4, #10]
            active->channel     = q_readbyte(&srv.q);
 803082c:	0028      	movs	r0, r5
 803082e:	f004 f83f 	bl	80348b0 <q_readbyte>
 8030832:	71a0      	strb	r0, [r4, #6]
            adv_duration        = q_readshort(&srv.q);
 8030834:	0028      	movs	r0, r5
 8030836:	f004 f840 	bl	80348ba <q_readshort>
 803083a:	0005      	movs	r5, r0
            dll_set_defaults(active);
 803083c:	0020      	movs	r0, r4
 803083e:	f001 ffd3 	bl	80327e8 <dll_set_defaults>
            active = session_extend(&asapi_applet, adv_duration, active->channel, M2_NETSTATE_REQTX);
 8030842:	79a2      	ldrb	r2, [r4, #6]
 8030844:	2300      	movs	r3, #0
 8030846:	0029      	movs	r1, r5
 8030848:	4850      	ldr	r0, [pc, #320]	; (803098c <asapi_applet+0x370>)
 803084a:	f002 fd71 	bl	8033330 <session_extend>
 803084e:	e7d4      	b.n	80307fa <asapi_applet+0x1de>
    active->flags  |= (next_wait == 0) << 7;          // M2_FLAG_LISTEN
 8030850:	2200      	movs	r2, #0
 8030852:	e736      	b.n	80306c2 <asapi_applet+0xa6>
        active->flags  |= M2_FLAG_DLLS;
 8030854:	2240      	movs	r2, #64	; 0x40
 8030856:	4313      	orrs	r3, r2
 8030858:	72e3      	strb	r3, [r4, #11]
        active->extra   = q_readbyte(&srv.q);           // Key-Index to use for encryption
 803085a:	4f49      	ldr	r7, [pc, #292]	; (8030980 <asapi_applet+0x364>)
 803085c:	3708      	adds	r7, #8
 803085e:	0038      	movs	r0, r7
 8030860:	f004 f826 	bl	80348b0 <q_readbyte>
 8030864:	7220      	strb	r0, [r4, #8]
        active->extra  |= (q_readbyte(&srv.q) << 7);    // User=1, Root=0
 8030866:	0038      	movs	r0, r7
 8030868:	f004 f822 	bl	80348b0 <q_readbyte>
 803086c:	01c3      	lsls	r3, r0, #7
 803086e:	7a20      	ldrb	r0, [r4, #8]
 8030870:	4318      	orrs	r0, r3
 8030872:	7220      	strb	r0, [r4, #8]
 8030874:	e72d      	b.n	80306d2 <asapi_applet+0xb6>
            routing.hop_code    = q_readbyte(&srv.q);
 8030876:	4f42      	ldr	r7, [pc, #264]	; (8030980 <asapi_applet+0x364>)
 8030878:	3708      	adds	r7, #8
 803087a:	0038      	movs	r0, r7
 803087c:	f004 f818 	bl	80348b0 <q_readbyte>
 8030880:	466b      	mov	r3, sp
 8030882:	7018      	strb	r0, [r3, #0]
            routing.hop_ext     = 0;
 8030884:	2300      	movs	r3, #0
 8030886:	466a      	mov	r2, sp
 8030888:	7053      	strb	r3, [r2, #1]
            routing.dlog.length = q_readbyte(&srv.q);
 803088a:	0038      	movs	r0, r7
 803088c:	f004 f810 	bl	80348b0 <q_readbyte>
 8030890:	466b      	mov	r3, sp
 8030892:	7118      	strb	r0, [r3, #4]
            routing.dlog.value  = q_markbyte(&srv.q, routing.dlog.length);
 8030894:	b201      	sxth	r1, r0
 8030896:	0038      	movs	r0, r7
 8030898:	f003 ffd6 	bl	8034848 <q_markbyte>
 803089c:	9002      	str	r0, [sp, #8]
            addressing         |= (routing.dlog.length == 2);   // Unicast with VID Target (3)
 803089e:	466b      	mov	r3, sp
 80308a0:	7918      	ldrb	r0, [r3, #4]
 80308a2:	3802      	subs	r0, #2
 80308a4:	4243      	negs	r3, r0
 80308a6:	4158      	adcs	r0, r3
 80308a8:	2302      	movs	r3, #2
 80308aa:	4318      	orrs	r0, r3
 80308ac:	b2c0      	uxtb	r0, r0
 80308ae:	e716      	b.n	80306de <asapi_applet+0xc2>
        alp_breakdown_isfcomp_tmpl(&srv.q, (void*)&comp);
 80308b0:	af0b      	add	r7, sp, #44	; 0x2c
 80308b2:	4833      	ldr	r0, [pc, #204]	; (8030980 <asapi_applet+0x364>)
 80308b4:	0039      	movs	r1, r7
 80308b6:	3008      	adds	r0, #8
 80308b8:	f003 fe80 	bl	80345bc <alp_breakdown_isfcomp_tmpl>
        scratch  = (2 | (comp.is_series & 1) << 2);
 80308bc:	783a      	ldrb	r2, [r7, #0]
 80308be:	0092      	lsls	r2, r2, #2
 80308c0:	2304      	movs	r3, #4
 80308c2:	4013      	ands	r3, r2
 80308c4:	2202      	movs	r2, #2
 80308c6:	4313      	orrs	r3, r2
 80308c8:	b25b      	sxtb	r3, r3
 80308ca:	b2db      	uxtb	r3, r3
 80308cc:	4698      	mov	r8, r3
 80308ce:	e715      	b.n	80306fc <asapi_applet+0xe0>
        alp_breakdown_isfcall_tmpl(&srv.q, (void*)&call);
 80308d0:	af09      	add	r7, sp, #36	; 0x24
 80308d2:	482b      	ldr	r0, [pc, #172]	; (8030980 <asapi_applet+0x364>)
 80308d4:	0039      	movs	r1, r7
 80308d6:	3008      	adds	r0, #8
 80308d8:	f003 fe7f 	bl	80345da <alp_breakdown_isfcall_tmpl>
        scratch |= (2 | (call.is_series & 1));
 80308dc:	783a      	ldrb	r2, [r7, #0]
 80308de:	2301      	movs	r3, #1
 80308e0:	4013      	ands	r3, r2
 80308e2:	4642      	mov	r2, r8
 80308e4:	431a      	orrs	r2, r3
 80308e6:	0013      	movs	r3, r2
 80308e8:	2202      	movs	r2, #2
 80308ea:	4313      	orrs	r3, r2
 80308ec:	b2db      	uxtb	r3, r3
 80308ee:	4698      	mov	r8, r3
 80308f0:	e712      	b.n	8030718 <asapi_applet+0xfc>
        alp_breakdown_query_tmpl(&srv.q, (void*)&query);
 80308f2:	4823      	ldr	r0, [pc, #140]	; (8030980 <asapi_applet+0x364>)
 80308f4:	4669      	mov	r1, sp
 80308f6:	3008      	adds	r0, #8
 80308f8:	f003 fe30 	bl	803455c <alp_breakdown_query_tmpl>
        otapi_put_query_tmpl(&local_status, &query);
 80308fc:	4647      	mov	r7, r8
 80308fe:	4669      	mov	r1, sp
 8030900:	4640      	mov	r0, r8
 8030902:	f001 fa6f 	bl	8031de4 <otapi_put_query_tmpl>
        status &= local_status;
 8030906:	221f      	movs	r2, #31
 8030908:	446a      	add	r2, sp
 803090a:	7811      	ldrb	r1, [r2, #0]
 803090c:	783b      	ldrb	r3, [r7, #0]
 803090e:	400b      	ands	r3, r1
 8030910:	7013      	strb	r3, [r2, #0]
 8030912:	e72b      	b.n	803076c <asapi_applet+0x150>
        alp_breakdown_query_tmpl(&srv.q, (void*)&query);
 8030914:	481a      	ldr	r0, [pc, #104]	; (8030980 <asapi_applet+0x364>)
 8030916:	4669      	mov	r1, sp
 8030918:	3008      	adds	r0, #8
 803091a:	f003 fe1f 	bl	803455c <alp_breakdown_query_tmpl>
        otapi_put_query_tmpl(&local_status, &query);
 803091e:	271e      	movs	r7, #30
 8030920:	446f      	add	r7, sp
 8030922:	4669      	mov	r1, sp
 8030924:	0038      	movs	r0, r7
 8030926:	f001 fa5d 	bl	8031de4 <otapi_put_query_tmpl>
        status &= local_status;
 803092a:	221f      	movs	r2, #31
 803092c:	446a      	add	r2, sp
 803092e:	7811      	ldrb	r1, [r2, #0]
 8030930:	783b      	ldrb	r3, [r7, #0]
 8030932:	400b      	ands	r3, r1
 8030934:	7013      	strb	r3, [r2, #0]
 8030936:	e71e      	b.n	8030776 <asapi_applet+0x15a>
        otapi_put_isf_comp(&local_status, &comp);
 8030938:	271e      	movs	r7, #30
 803093a:	446f      	add	r7, sp
 803093c:	a90b      	add	r1, sp, #44	; 0x2c
 803093e:	0038      	movs	r0, r7
 8030940:	f001 fa90 	bl	8031e64 <otapi_put_isf_comp>
        status &= local_status;
 8030944:	221f      	movs	r2, #31
 8030946:	446a      	add	r2, sp
 8030948:	7811      	ldrb	r1, [r2, #0]
 803094a:	783b      	ldrb	r3, [r7, #0]
 803094c:	400b      	ands	r3, r1
 803094e:	7013      	strb	r3, [r2, #0]
 8030950:	e716      	b.n	8030780 <asapi_applet+0x164>
        otapi_put_isf_call(&local_status, &call);
 8030952:	a909      	add	r1, sp, #36	; 0x24
 8030954:	201e      	movs	r0, #30
 8030956:	4468      	add	r0, sp
 8030958:	f001 fa9a 	bl	8031e90 <otapi_put_isf_call>
 803095c:	e717      	b.n	803078e <asapi_applet+0x172>
        alp_breakdown_udp_tmpl(&srv.q, (void*)&udp);
 803095e:	4808      	ldr	r0, [pc, #32]	; (8030980 <asapi_applet+0x364>)
 8030960:	4669      	mov	r1, sp
 8030962:	3008      	adds	r0, #8
 8030964:	f003 fe15 	bl	8034592 <alp_breakdown_udp_tmpl>
        otapi_put_udp_tmpl(&local_status, &udp);
 8030968:	4669      	mov	r1, sp
 803096a:	201e      	movs	r0, #30
 803096c:	4468      	add	r0, sp
 803096e:	f001 faa9 	bl	8031ec4 <otapi_put_udp_tmpl>
 8030972:	e70c      	b.n	803078e <asapi_applet+0x172>
        otapi_close_request();
 8030974:	f001 f9a0 	bl	8031cb8 <otapi_close_request>
 8030978:	e715      	b.n	80307a6 <asapi_applet+0x18a>
        sub_stop_srv();
 803097a:	f7ff fddf 	bl	803053c <sub_stop_srv>
 803097e:	e728      	b.n	80307d2 <asapi_applet+0x1b6>
 8030980:	2000c1c8 	.word	0x2000c1c8
 8030984:	08036e00 	.word	0x08036e00
 8030988:	08036e04 	.word	0x08036e04
 803098c:	0803061d 	.word	0x0803061d

08030990 <asapi_open_srv>:
    if (srv.alp == NULL) {
 8030990:	4b03      	ldr	r3, [pc, #12]	; (80309a0 <asapi_open_srv+0x10>)
 8030992:	681b      	ldr	r3, [r3, #0]
 8030994:	2b00      	cmp	r3, #0
 8030996:	d000      	beq.n	803099a <asapi_open_srv+0xa>
}
 8030998:	4770      	bx	lr
        srv.alp         = alp;
 803099a:	4b01      	ldr	r3, [pc, #4]	; (80309a0 <asapi_open_srv+0x10>)
 803099c:	6018      	str	r0, [r3, #0]
}
 803099e:	e7fb      	b.n	8030998 <asapi_open_srv+0x8>
 80309a0:	2000c1c8 	.word	0x2000c1c8

080309a4 <asapi_proc>:
ot_bool asapi_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 80309a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80309a6:	46d6      	mov	lr, sl
 80309a8:	464f      	mov	r7, r9
 80309aa:	4646      	mov	r6, r8
 80309ac:	b5c0      	push	{r6, r7, lr}
 80309ae:	0004      	movs	r4, r0
 80309b0:	2700      	movs	r7, #0
    if (srv.alp != alp) {
 80309b2:	4b4c      	ldr	r3, [pc, #304]	; (8030ae4 <asapi_proc+0x140>)
 80309b4:	681b      	ldr	r3, [r3, #0]
 80309b6:	4283      	cmp	r3, r0
 80309b8:	d00e      	beq.n	80309d8 <asapi_proc+0x34>
        if (srv.alp == NULL) {
 80309ba:	2b00      	cmp	r3, #0
 80309bc:	d00a      	beq.n	80309d4 <asapi_proc+0x30>
            errcode = ASAPI_ERR_SERVERBUSY;
 80309be:	2301      	movs	r3, #1
 80309c0:	4698      	mov	r8, r3
    if (inrec_cmd & ASAPI_CMD_RESPONSE) {
 80309c2:	063b      	lsls	r3, r7, #24
 80309c4:	d500      	bpl.n	80309c8 <asapi_proc+0x24>
 80309c6:	e070      	b.n	8030aaa <asapi_proc+0x106>
}
 80309c8:	2001      	movs	r0, #1
 80309ca:	bce0      	pop	{r5, r6, r7}
 80309cc:	46ba      	mov	sl, r7
 80309ce:	46b1      	mov	r9, r6
 80309d0:	46a8      	mov	r8, r5
 80309d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            asapi_open_srv(alp);
 80309d4:	f7ff ffdc 	bl	8030990 <asapi_open_srv>
    inrec_plen  = INREC(alp, PLEN);
 80309d8:	2103      	movs	r1, #3
 80309da:	4249      	negs	r1, r1
 80309dc:	68a0      	ldr	r0, [r4, #8]
 80309de:	f003 fee7 	bl	80347b0 <q_getcursor_val>
 80309e2:	0006      	movs	r6, r0
    inrec_cmd   = INREC(alp, CMD);
 80309e4:	2101      	movs	r1, #1
 80309e6:	4249      	negs	r1, r1
 80309e8:	68a0      	ldr	r0, [r4, #8]
 80309ea:	f003 fee1 	bl	80347b0 <q_getcursor_val>
 80309ee:	0005      	movs	r5, r0
 80309f0:	0007      	movs	r7, r0
    if (inrec_cmd & ASAPI_CMD_STATUS) {
 80309f2:	2310      	movs	r3, #16
 80309f4:	001a      	movs	r2, r3
 80309f6:	4002      	ands	r2, r0
 80309f8:	4690      	mov	r8, r2
 80309fa:	4203      	tst	r3, r0
 80309fc:	d120      	bne.n	8030a40 <asapi_proc+0x9c>
    payload             = &alp->inq->getcursor[0];
 80309fe:	68a3      	ldr	r3, [r4, #8]
 8030a00:	6858      	ldr	r0, [r3, #4]
    tid.ubyte[UPPER]    = payload[0];
 8030a02:	7803      	ldrb	r3, [r0, #0]
    tid.ubyte[LOWER]    = payload[1];
 8030a04:	7842      	ldrb	r2, [r0, #1]
 8030a06:	021b      	lsls	r3, r3, #8
 8030a08:	431a      	orrs	r2, r3
 8030a0a:	4691      	mov	r9, r2
    ext_value           = (inrec_cmd & ASAPI_CMD_EXT) ? payload[2] : 0;
 8030a0c:	2320      	movs	r3, #32
 8030a0e:	001a      	movs	r2, r3
 8030a10:	402a      	ands	r2, r5
 8030a12:	422b      	tst	r3, r5
 8030a14:	d000      	beq.n	8030a18 <asapi_proc+0x74>
 8030a16:	7882      	ldrb	r2, [r0, #2]
    len_check           = sub_test_stream(payload, inrec_cmd, ext_value);
 8030a18:	0029      	movs	r1, r5
 8030a1a:	f7ff fd3b 	bl	8030494 <sub_test_stream>
    len_check          -= (ot_int)inrec_plen;
 8030a1e:	b2b6      	uxth	r6, r6
 8030a20:	1b80      	subs	r0, r0, r6
 8030a22:	b202      	sxth	r2, r0
    len_check           = (len_check < 0) - (len_check > 0);
 8030a24:	b280      	uxth	r0, r0
 8030a26:	0bc0      	lsrs	r0, r0, #15
 8030a28:	17d3      	asrs	r3, r2, #31
 8030a2a:	1a9b      	subs	r3, r3, r2
 8030a2c:	0fdb      	lsrs	r3, r3, #31
 8030a2e:	1ac0      	subs	r0, r0, r3
 8030a30:	b283      	uxth	r3, r0
    if (len_check) {
 8030a32:	2800      	cmp	r0, #0
 8030a34:	d00e      	beq.n	8030a54 <asapi_proc+0xb0>
        errcode = ASAPI_ERR_BADDATA + len_check;
 8030a36:	b2db      	uxtb	r3, r3
 8030a38:	3306      	adds	r3, #6
 8030a3a:	b2db      	uxtb	r3, r3
 8030a3c:	4698      	mov	r8, r3
        goto asapi_proc_END;
 8030a3e:	e7c0      	b.n	80309c2 <asapi_proc+0x1e>
        if (inrec_cmd & ASAPI_CMD_INIT) {  // KILL
 8030a40:	0703      	lsls	r3, r0, #28
 8030a42:	d402      	bmi.n	8030a4a <asapi_proc+0xa6>
        errcode = ASAPI_ERR_FLUSH;
 8030a44:	23ff      	movs	r3, #255	; 0xff
 8030a46:	4698      	mov	r8, r3
        goto asapi_proc_END;
 8030a48:	e7bb      	b.n	80309c2 <asapi_proc+0x1e>
            dll_refresh();
 8030a4a:	f001 ffcf 	bl	80329ec <dll_refresh>
            sub_stop_srv();
 8030a4e:	f7ff fd75 	bl	803053c <sub_stop_srv>
 8030a52:	e7f7      	b.n	8030a44 <asapi_proc+0xa0>
    sub_q_purge(&srv.q);
 8030a54:	4b23      	ldr	r3, [pc, #140]	; (8030ae4 <asapi_proc+0x140>)
 8030a56:	2208      	movs	r2, #8
 8030a58:	4692      	mov	sl, r2
 8030a5a:	449a      	add	sl, r3
 8030a5c:	4650      	mov	r0, sl
 8030a5e:	f7ff fcf5 	bl	803044c <sub_q_purge>
    len_check = 4 + inrec_plen;
 8030a62:	3604      	adds	r6, #4
 8030a64:	b236      	sxth	r6, r6
    if (q_writespace(&srv.q) < len_check) {
 8030a66:	4650      	mov	r0, sl
 8030a68:	f003 feaf 	bl	80347ca <q_writespace>
 8030a6c:	42b0      	cmp	r0, r6
 8030a6e:	da02      	bge.n	8030a76 <asapi_proc+0xd2>
        errcode = ASAPI_ERR_STACKFULL;
 8030a70:	2309      	movs	r3, #9
 8030a72:	4698      	mov	r8, r3
 8030a74:	e7a5      	b.n	80309c2 <asapi_proc+0x1e>
    q_writestring(&srv.q, &alp->inq->getcursor[-4], len_check);
 8030a76:	68a3      	ldr	r3, [r4, #8]
 8030a78:	6859      	ldr	r1, [r3, #4]
 8030a7a:	3904      	subs	r1, #4
 8030a7c:	4819      	ldr	r0, [pc, #100]	; (8030ae4 <asapi_proc+0x140>)
 8030a7e:	0032      	movs	r2, r6
 8030a80:	3008      	adds	r0, #8
 8030a82:	f003 ff44 	bl	803490e <q_writestring>
    if ((inrec_cmd & ASAPI_CMD_HOLDOPEN) == 0) {
 8030a86:	2340      	movs	r3, #64	; 0x40
 8030a88:	001e      	movs	r6, r3
 8030a8a:	402e      	ands	r6, r5
 8030a8c:	422b      	tst	r3, r5
 8030a8e:	d198      	bne.n	80309c2 <asapi_proc+0x1e>
        if (session_app_isloaded(&asapi_applet) == False) {
 8030a90:	4815      	ldr	r0, [pc, #84]	; (8030ae8 <asapi_proc+0x144>)
 8030a92:	f002 fc95 	bl	80333c0 <session_app_isloaded>
 8030a96:	2800      	cmp	r0, #0
 8030a98:	d001      	beq.n	8030a9e <asapi_proc+0xfa>
    ot_u8       errcode     = 0;
 8030a9a:	46b0      	mov	r8, r6
 8030a9c:	e791      	b.n	80309c2 <asapi_proc+0x1e>
            errcode = sub_start_session(alp);
 8030a9e:	0020      	movs	r0, r4
 8030aa0:	f7ff fd56 	bl	8030550 <sub_start_session>
 8030aa4:	b2c3      	uxtb	r3, r0
 8030aa6:	4698      	mov	r8, r3
 8030aa8:	e78b      	b.n	80309c2 <asapi_proc+0x1e>
        alp->OUTREC(CMD) |= ASAPI_CMD_STATUS;
 8030aaa:	7963      	ldrb	r3, [r4, #5]
 8030aac:	2210      	movs	r2, #16
 8030aae:	4313      	orrs	r3, r2
 8030ab0:	7163      	strb	r3, [r4, #5]
        alp->OUTREC(PLEN) = 6;
 8030ab2:	2306      	movs	r3, #6
 8030ab4:	70e3      	strb	r3, [r4, #3]
        q_writeshort(alp->outq, tid.ushort);                // Write transaction ID
 8030ab6:	464b      	mov	r3, r9
 8030ab8:	b299      	uxth	r1, r3
 8030aba:	68e0      	ldr	r0, [r4, #12]
 8030abc:	f003 fece 	bl	803485c <q_writeshort>
        q_writebyte(alp->outq, 0);                          // RFU byte
 8030ac0:	2100      	movs	r1, #0
 8030ac2:	68e0      	ldr	r0, [r4, #12]
 8030ac4:	f003 fec5 	bl	8034852 <q_writebyte>
        q_writebyte(alp->outq, errcode);                    // Write Error code
 8030ac8:	4641      	mov	r1, r8
 8030aca:	68e0      	ldr	r0, [r4, #12]
 8030acc:	f003 fec1 	bl	8034852 <q_writebyte>
        q_writeshort(alp->outq, q_writespace(&srv.q));      // Space remaining in ALP queue
 8030ad0:	68e4      	ldr	r4, [r4, #12]
 8030ad2:	4804      	ldr	r0, [pc, #16]	; (8030ae4 <asapi_proc+0x140>)
 8030ad4:	3008      	adds	r0, #8
 8030ad6:	f003 fe78 	bl	80347ca <q_writespace>
 8030ada:	b281      	uxth	r1, r0
 8030adc:	0020      	movs	r0, r4
 8030ade:	f003 febd 	bl	803485c <q_writeshort>
 8030ae2:	e771      	b.n	80309c8 <asapi_proc+0x24>
 8030ae4:	2000c1c8 	.word	0x2000c1c8
 8030ae8:	0803061d 	.word	0x0803061d

08030aec <xrt_applet_fec>:

/** Communication Task Applets  <BR>
  * ========================================================================<BR>
  */

void xrt_applet_fec(m2session* active) {
 8030aec:	b500      	push	{lr}
 8030aee:	b083      	sub	sp, #12
/// This is a page operation, which gets buried directly onto the queue
	ot_u8 	payload[7];
	ot_u32  dev_token = ((ot_u32*)UID_BASE)[0];
 8030af0:	4b0c      	ldr	r3, [pc, #48]	; (8030b24 <xrt_applet_fec+0x38>)
 8030af2:	6818      	ldr	r0, [r3, #0]

	payload[0]	= 0;
 8030af4:	2300      	movs	r3, #0
 8030af6:	466a      	mov	r2, sp
 8030af8:	7013      	strb	r3, [r2, #0]
	payload[1]	= 0x81;
 8030afa:	2281      	movs	r2, #129	; 0x81
 8030afc:	4669      	mov	r1, sp
 8030afe:	704a      	strb	r2, [r1, #1]
	payload[2]	= 0;
 8030b00:	708b      	strb	r3, [r1, #2]
	payload[3]	= (ot_u8)setup.page_count;
 8030b02:	4a09      	ldr	r2, [pc, #36]	; (8030b28 <xrt_applet_fec+0x3c>)
 8030b04:	7912      	ldrb	r2, [r2, #4]
 8030b06:	70ca      	strb	r2, [r1, #3]
	payload[4]	= 0;
 8030b08:	466a      	mov	r2, sp
 8030b0a:	710b      	strb	r3, [r1, #4]
	payload[5]	= 0;
 8030b0c:	714b      	strb	r3, [r1, #5]
	payload[6]	= 0;
 8030b0e:	718b      	strb	r3, [r1, #6]

    otapi_new_telegram(dev_token, 2, payload);
 8030b10:	2102      	movs	r1, #2
 8030b12:	f001 f86d 	bl	8031bf0 <otapi_new_telegram>
    otapi_start_dialog(1024);
 8030b16:	2080      	movs	r0, #128	; 0x80
 8030b18:	00c0      	lsls	r0, r0, #3
 8030b1a:	f001 f8d9 	bl	8031cd0 <otapi_start_dialog>
}
 8030b1e:	b003      	add	sp, #12
 8030b20:	bd00      	pop	{pc}
 8030b22:	46c0      	nop			; (mov r8, r8)
 8030b24:	1fff7590 	.word	0x1fff7590
 8030b28:	2000c000 	.word	0x2000c000

08030b2c <alp_ext_proc>:
ot_bool alp_ext_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 8030b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030b2e:	0004      	movs	r4, r0
    ot_u8 flags      	= INREC(alp, FLAGS);
 8030b30:	2104      	movs	r1, #4
 8030b32:	4249      	negs	r1, r1
 8030b34:	6880      	ldr	r0, [r0, #8]
 8030b36:	f003 fe3b 	bl	80347b0 <q_getcursor_val>
    ot_u8 payload_len 	= INREC(alp, PLEN);
 8030b3a:	2103      	movs	r1, #3
 8030b3c:	4249      	negs	r1, r1
 8030b3e:	68a0      	ldr	r0, [r4, #8]
 8030b40:	f003 fe36 	bl	80347b0 <q_getcursor_val>
    ot_u8 alp_id      	= INREC(alp, ID);
 8030b44:	2102      	movs	r1, #2
 8030b46:	4249      	negs	r1, r1
 8030b48:	68a0      	ldr	r0, [r4, #8]
 8030b4a:	f003 fe31 	bl	80347b0 <q_getcursor_val>
 8030b4e:	0005      	movs	r5, r0
    ot_u8 alp_cmd     	= INREC(alp, CMD);
 8030b50:	2101      	movs	r1, #1
 8030b52:	4249      	negs	r1, r1
 8030b54:	68a0      	ldr	r0, [r4, #8]
 8030b56:	f003 fe2b 	bl	80347b0 <q_getcursor_val>
    switch (alp_id) {
 8030b5a:	2d10      	cmp	r5, #16
 8030b5c:	d01b      	beq.n	8030b96 <alp_ext_proc+0x6a>
        logger_header(MSG_raw, 0);
 8030b5e:	2100      	movs	r1, #0
 8030b60:	2004      	movs	r0, #4
 8030b62:	f003 fdbd 	bl	80346e0 <logger_header>
        q_writestring(mpipe.alp.outq, (ot_u8*)"ALP", 4);
 8030b66:	4e37      	ldr	r6, [pc, #220]	; (8030c44 <alp_ext_proc+0x118>)
 8030b68:	2204      	movs	r2, #4
 8030b6a:	4937      	ldr	r1, [pc, #220]	; (8030c48 <alp_ext_proc+0x11c>)
 8030b6c:	6930      	ldr	r0, [r6, #16]
 8030b6e:	f003 fece 	bl	803490e <q_writestring>
        len = q_span(alp->inq);
 8030b72:	68a0      	ldr	r0, [r4, #8]
 8030b74:	f003 fe24 	bl	80347c0 <q_span>
 8030b78:	0005      	movs	r5, r0
        q_writestring(mpipe.alp.outq, q_markbyte(alp->inq, len), len);
 8030b7a:	6936      	ldr	r6, [r6, #16]
 8030b7c:	68a0      	ldr	r0, [r4, #8]
 8030b7e:	0029      	movs	r1, r5
 8030b80:	f003 fe62 	bl	8034848 <q_markbyte>
 8030b84:	0001      	movs	r1, r0
 8030b86:	002a      	movs	r2, r5
 8030b88:	0030      	movs	r0, r6
 8030b8a:	f003 fec0 	bl	803490e <q_writestring>
        logger_direct();
 8030b8e:	f003 fded 	bl	803476c <logger_direct>
}
 8030b92:	2001      	movs	r0, #1
 8030b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_snr_t* snrdata = radio_getlinkinfo();
 8030b96:	f000 fd6f 	bl	8031678 <radio_getlinkinfo>
 8030b9a:	0005      	movs	r5, r0
		setup.page_received = True;
 8030b9c:	4f2b      	ldr	r7, [pc, #172]	; (8030c4c <alp_ext_proc+0x120>)
 8030b9e:	2301      	movs	r3, #1
 8030ba0:	707b      	strb	r3, [r7, #1]
		tx_eirp	= q_readbyte(alp->inq);
 8030ba2:	68a0      	ldr	r0, [r4, #8]
 8030ba4:	f003 fe84 	bl	80348b0 <q_readbyte>
		subnet  = q_readbyte(alp->inq);
 8030ba8:	68a0      	ldr	r0, [r4, #8]
 8030baa:	f003 fe81 	bl	80348b0 <q_readbyte>
		token   = q_readlong(alp->inq);
 8030bae:	68a0      	ldr	r0, [r4, #8]
 8030bb0:	f003 fe97 	bl	80348e2 <q_readlong>
 8030bb4:	0006      	movs	r6, r0
		ptype   = q_readbyte(alp->inq);
 8030bb6:	68a0      	ldr	r0, [r4, #8]
 8030bb8:	f003 fe7a 	bl	80348b0 <q_readbyte>
		dtype.ubyte[UPPER] 	= q_readbyte(alp->inq);
 8030bbc:	68a0      	ldr	r0, [r4, #8]
 8030bbe:	f003 fe77 	bl	80348b0 <q_readbyte>
		dtype.ubyte[LOWER] 	= q_readbyte(alp->inq);
 8030bc2:	68a0      	ldr	r0, [r4, #8]
 8030bc4:	f003 fe74 	bl	80348b0 <q_readbyte>
		pcnt.ubyte[UPPER] 	= q_readbyte(alp->inq);
 8030bc8:	68a0      	ldr	r0, [r4, #8]
 8030bca:	f003 fe71 	bl	80348b0 <q_readbyte>
		pcnt.ubyte[LOWER] 	= q_readbyte(alp->inq);
 8030bce:	68a0      	ldr	r0, [r4, #8]
 8030bd0:	f003 fe6e 	bl	80348b0 <q_readbyte>
		if (setup.is_gateway) {
 8030bd4:	783b      	ldrb	r3, [r7, #0]
 8030bd6:	2b00      	cmp	r3, #0
 8030bd8:	d0db      	beq.n	8030b92 <alp_ext_proc+0x66>
			logger_header(DATA_json, 0);
 8030bda:	2100      	movs	r1, #0
 8030bdc:	2002      	movs	r0, #2
 8030bde:	f003 fd7f 	bl	80346e0 <logger_header>
			mpipe.alp.outq->putcursor += sprintf(mpipe.alp.outq->putcursor, "{\"tgtest\":{");
 8030be2:	4c18      	ldr	r4, [pc, #96]	; (8030c44 <alp_ext_proc+0x118>)
 8030be4:	6923      	ldr	r3, [r4, #16]
 8030be6:	6898      	ldr	r0, [r3, #8]
 8030be8:	220c      	movs	r2, #12
 8030bea:	4919      	ldr	r1, [pc, #100]	; (8030c50 <alp_ext_proc+0x124>)
 8030bec:	f005 fc58 	bl	80364a0 <memcpy>
 8030bf0:	6922      	ldr	r2, [r4, #16]
 8030bf2:	6893      	ldr	r3, [r2, #8]
 8030bf4:	330b      	adds	r3, #11
 8030bf6:	6093      	str	r3, [r2, #8]
			mpipe.alp.outq->putcursor += sprintf(mpipe.alp.outq->putcursor, "\"token\":\"%08X\", ", token);
 8030bf8:	6923      	ldr	r3, [r4, #16]
 8030bfa:	6898      	ldr	r0, [r3, #8]
 8030bfc:	0032      	movs	r2, r6
 8030bfe:	4915      	ldr	r1, [pc, #84]	; (8030c54 <alp_ext_proc+0x128>)
 8030c00:	f005 fdd8 	bl	80367b4 <siprintf>
 8030c04:	6922      	ldr	r2, [r4, #16]
 8030c06:	6893      	ldr	r3, [r2, #8]
 8030c08:	3314      	adds	r3, #20
 8030c0a:	6093      	str	r3, [r2, #8]
			mpipe.alp.outq->putcursor += sprintf(mpipe.alp.outq->putcursor, "\"rssi\":%i, ", radio.last_rssi);
 8030c0c:	6923      	ldr	r3, [r4, #16]
 8030c0e:	6898      	ldr	r0, [r3, #8]
 8030c10:	4b11      	ldr	r3, [pc, #68]	; (8030c58 <alp_ext_proc+0x12c>)
 8030c12:	2204      	movs	r2, #4
 8030c14:	5e9a      	ldrsh	r2, [r3, r2]
 8030c16:	4911      	ldr	r1, [pc, #68]	; (8030c5c <alp_ext_proc+0x130>)
 8030c18:	f005 fdcc 	bl	80367b4 <siprintf>
 8030c1c:	6923      	ldr	r3, [r4, #16]
 8030c1e:	689a      	ldr	r2, [r3, #8]
 8030c20:	4694      	mov	ip, r2
 8030c22:	4460      	add	r0, ip
 8030c24:	6098      	str	r0, [r3, #8]
			mpipe.alp.outq->putcursor += sprintf(mpipe.alp.outq->putcursor, "\"mean-snr\":%i}}", snrdata->mean_snr);
 8030c26:	6923      	ldr	r3, [r4, #16]
 8030c28:	6898      	ldr	r0, [r3, #8]
 8030c2a:	2304      	movs	r3, #4
 8030c2c:	5eea      	ldrsh	r2, [r5, r3]
 8030c2e:	490c      	ldr	r1, [pc, #48]	; (8030c60 <alp_ext_proc+0x134>)
 8030c30:	f005 fdc0 	bl	80367b4 <siprintf>
 8030c34:	6923      	ldr	r3, [r4, #16]
 8030c36:	689a      	ldr	r2, [r3, #8]
 8030c38:	4694      	mov	ip, r2
 8030c3a:	4460      	add	r0, ip
 8030c3c:	6098      	str	r0, [r3, #8]
			logger_direct();
 8030c3e:	f003 fd95 	bl	803476c <logger_direct>
	} break;
 8030c42:	e7a6      	b.n	8030b92 <alp_ext_proc+0x66>
 8030c44:	2000cbc4 	.word	0x2000cbc4
 8030c48:	08036e60 	.word	0x08036e60
 8030c4c:	2000c000 	.word	0x2000c000
 8030c50:	08036e24 	.word	0x08036e24
 8030c54:	08036e30 	.word	0x08036e30
 8030c58:	2000c488 	.word	0x2000c488
 8030c5c:	08036e44 	.word	0x08036e44
 8030c60:	08036e50 	.word	0x08036e50

08030c64 <xrt_invoke>:
  * Then, the kernel will call the DLL session task as soon as necessary
  * resources are available to run that task (by default DLL task is top
  * priority, so it should get called right away).
  */

void xrt_invoke(ot_u8 state) {
 8030c64:	b510      	push	{r4, lr}
 8030c66:	0001      	movs	r1, r0
    sys_task_setevent(XRTTEST_TASK, state);
 8030c68:	4c08      	ldr	r4, [pc, #32]	; (8030c8c <xrt_invoke+0x28>)
 8030c6a:	0020      	movs	r0, r4
 8030c6c:	f004 fae8 	bl	8035240 <sys_task_setevent>
    sys_task_setreserve(XRTTEST_TASK, 1);
 8030c70:	2101      	movs	r1, #1
 8030c72:	0020      	movs	r0, r4
 8030c74:	f004 fae6 	bl	8035244 <sys_task_setreserve>
    sys_task_setlatency(XRTTEST_TASK, 255);
 8030c78:	21ff      	movs	r1, #255	; 0xff
 8030c7a:	0020      	movs	r0, r4
 8030c7c:	f004 fae4 	bl	8035248 <sys_task_setlatency>
    sys_preempt(XRTTEST_TASK, 0);
 8030c80:	2100      	movs	r1, #0
 8030c82:	0020      	movs	r0, r4
 8030c84:	f004 fb56 	bl	8035334 <sys_preempt>
}
 8030c88:	bd10      	pop	{r4, pc}
 8030c8a:	46c0      	nop			; (mov r8, r8)
 8030c8c:	2000cc08 	.word	0x2000cc08

08030c90 <app_set_txpwr>:


/** Function for modulating power <BR>
  * ==================================================================<BR>
  */
void app_set_txpwr(ot_int dBm) {
 8030c90:	b570      	push	{r4, r5, r6, lr}
 8030c92:	0004      	movs	r4, r0
    vlFILE* fp;
    ot_uni16 pwr_flt;

    fp = ISF_open_su(0x02);
 8030c94:	2002      	movs	r0, #2
 8030c96:	f004 f970 	bl	8034f7a <ISF_open_su>
 8030c9a:	1e05      	subs	r5, r0, #0
    if (fp != NULL) {
 8030c9c:	d02b      	beq.n	8030cf6 <app_set_txpwr+0x66>
        ot_uint offset;

        // Replace existing power levels for each of three channel groups
        // with new power spec.
        offset              = 6+2;
        pwr_flt.ushort      = vl_read(fp, offset);
 8030c9e:	2108      	movs	r1, #8
 8030ca0:	f004 f8b1 	bl	8034e06 <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 8030ca4:	3428      	adds	r4, #40	; 0x28
 8030ca6:	0064      	lsls	r4, r4, #1
 8030ca8:	b2e4      	uxtb	r4, r4
 8030caa:	26ff      	movs	r6, #255	; 0xff
 8030cac:	0002      	movs	r2, r0
 8030cae:	43b2      	bics	r2, r6
 8030cb0:	4322      	orrs	r2, r4
        vl_write(fp, offset, pwr_flt.ushort);
 8030cb2:	b292      	uxth	r2, r2
 8030cb4:	2108      	movs	r1, #8
 8030cb6:	0028      	movs	r0, r5
 8030cb8:	f004 f8ac 	bl	8034e14 <vl_write>

        offset              = 6+6+2;
        pwr_flt.ushort      = vl_read(fp, offset);
 8030cbc:	210e      	movs	r1, #14
 8030cbe:	0028      	movs	r0, r5
 8030cc0:	f004 f8a1 	bl	8034e06 <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 8030cc4:	0002      	movs	r2, r0
 8030cc6:	43b2      	bics	r2, r6
 8030cc8:	4322      	orrs	r2, r4
        vl_write(fp, offset, pwr_flt.ushort);
 8030cca:	b292      	uxth	r2, r2
 8030ccc:	210e      	movs	r1, #14
 8030cce:	0028      	movs	r0, r5
 8030cd0:	f004 f8a0 	bl	8034e14 <vl_write>

        offset              = 6+6+6+2;
        pwr_flt.ushort      = vl_read(fp, offset);
 8030cd4:	2114      	movs	r1, #20
 8030cd6:	0028      	movs	r0, r5
 8030cd8:	f004 f895 	bl	8034e06 <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 8030cdc:	0002      	movs	r2, r0
 8030cde:	43b2      	bics	r2, r6
 8030ce0:	4322      	orrs	r2, r4
        vl_write(fp, offset, pwr_flt.ushort);
 8030ce2:	b292      	uxth	r2, r2
 8030ce4:	2114      	movs	r1, #20
 8030ce6:	0028      	movs	r0, r5
 8030ce8:	f004 f894 	bl	8034e14 <vl_write>

        vl_close(fp);
 8030cec:	0028      	movs	r0, r5
 8030cee:	f004 f90d 	bl	8034f0c <vl_close>
        // This block of code resets the channel status, forcing the
        // radio module to update the channel information.
        // It's a hack, but this whole app is a hack.
        //phymac[0].channel   = 0xF0;
        //phymac[0].tx_eirp   = 0x7F;
        rm2_channel_refresh();
 8030cf2:	f002 f9fd 	bl	80330f0 <rm2_channel_refresh>
    }

}
 8030cf6:	bd70      	pop	{r4, r5, r6, pc}

08030cf8 <setup_init>:
  * any of the kernel & system features are initialized.  It's a good
  * place to put features that control which drivers or apps get 
  * activated.
  */
  
void setup_init() {
 8030cf8:	b510      	push	{r4, lr}
#   if defined(__FORCE_GATEWAY)
    setup.is_gateway = 1;
#   elif !defined(OT_SWITCH1_ISR)
    setup.is_gateway = 0;
#   else
    setup.is_gateway = (ot_bool)((OT_SWITCH1_PORT->IDR & OT_SWITCH1_PIN) != (OT_SWITCH1_POLARITY << OT_SWITCH1_PIN));
 8030cfa:	2390      	movs	r3, #144	; 0x90
 8030cfc:	05db      	lsls	r3, r3, #23
 8030cfe:	691a      	ldr	r2, [r3, #16]
 8030d00:	2301      	movs	r3, #1
 8030d02:	4013      	ands	r3, r2
 8030d04:	4a15      	ldr	r2, [pc, #84]	; (8030d5c <setup_init+0x64>)
 8030d06:	7013      	strb	r3, [r2, #0]
#   endif
    
    /// Blink the board LEDs to show that it is starting up.
    {   ot_u8 i;

        i=4;
 8030d08:	2404      	movs	r4, #4
        while (i != 0) {
 8030d0a:	e00f      	b.n	8030d2c <setup_init+0x34>
#endif

static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
static inline void BOARD_led1_toggle(void)  { OT_TRIG1_TOG(); }
static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 8030d0c:	4b14      	ldr	r3, [pc, #80]	; (8030d60 <setup_init+0x68>)
 8030d0e:	2280      	movs	r2, #128	; 0x80
 8030d10:	0112      	lsls	r2, r2, #4
 8030d12:	619a      	str	r2, [r3, #24]
            if (i&1)    BOARD_led1_on();
            else        BOARD_led2_on();

            delay_ti(60);
 8030d14:	203c      	movs	r0, #60	; 0x3c
 8030d16:	f004 ff71 	bl	8035bfc <delay_ti>
static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 8030d1a:	4b11      	ldr	r3, [pc, #68]	; (8030d60 <setup_init+0x68>)
 8030d1c:	2280      	movs	r2, #128	; 0x80
 8030d1e:	0112      	lsls	r2, r2, #4
 8030d20:	629a      	str	r2, [r3, #40]	; 0x28
static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 8030d22:	2280      	movs	r2, #128	; 0x80
 8030d24:	0092      	lsls	r2, r2, #2
 8030d26:	629a      	str	r2, [r3, #40]	; 0x28
            BOARD_led2_off();
            BOARD_led1_off();
            i--;
 8030d28:	3c01      	subs	r4, #1
 8030d2a:	b2e4      	uxtb	r4, r4
        while (i != 0) {
 8030d2c:	2c00      	cmp	r4, #0
 8030d2e:	d006      	beq.n	8030d3e <setup_init+0x46>
            if (i&1)    BOARD_led1_on();
 8030d30:	07e3      	lsls	r3, r4, #31
 8030d32:	d5eb      	bpl.n	8030d0c <setup_init+0x14>
static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
 8030d34:	4b0a      	ldr	r3, [pc, #40]	; (8030d60 <setup_init+0x68>)
 8030d36:	2280      	movs	r2, #128	; 0x80
 8030d38:	0092      	lsls	r2, r2, #2
 8030d3a:	619a      	str	r2, [r3, #24]
 8030d3c:	e7ea      	b.n	8030d14 <setup_init+0x1c>
        }
    }
    
    // BusyWait for button to be released.
#   if defined(OT_SWITCH1_ISR) && !defined(__FORCE_GATEWAY)
    while ((OT_SWITCH1_PORT->IDR & OT_SWITCH1_PIN) == (BOARD_SW1_POLARITY << OT_SWITCH1_PIN));
 8030d3e:	2390      	movs	r3, #144	; 0x90
 8030d40:	05db      	lsls	r3, r3, #23
 8030d42:	691b      	ldr	r3, [r3, #16]
 8030d44:	07db      	lsls	r3, r3, #31
 8030d46:	d5fa      	bpl.n	8030d3e <setup_init+0x46>
#   endif

    // Setup Button for interrupt
#	ifdef OT_SWITCH1_PIN
    EXTI->RTSR1 |= OT_SWITCH1_PIN;
 8030d48:	4b06      	ldr	r3, [pc, #24]	; (8030d64 <setup_init+0x6c>)
 8030d4a:	6819      	ldr	r1, [r3, #0]
 8030d4c:	2001      	movs	r0, #1
 8030d4e:	4301      	orrs	r1, r0
 8030d50:	6019      	str	r1, [r3, #0]
    EXTI->IMR1  |= OT_SWITCH1_PIN;
 8030d52:	2180      	movs	r1, #128	; 0x80
 8030d54:	585a      	ldr	r2, [r3, r1]
 8030d56:	4302      	orrs	r2, r0
 8030d58:	505a      	str	r2, [r3, r1]
#	endif
}
 8030d5a:	bd10      	pop	{r4, pc}
 8030d5c:	2000c000 	.word	0x2000c000
 8030d60:	48000400 	.word	0x48000400
 8030d64:	58000800 	.word	0x58000800

08030d68 <setup_beacons>:




ot_int setup_beacons(ot_u16 interval, ot_u8 channel) {
 8030d68:	b530      	push	{r4, r5, lr}
 8030d6a:	b083      	sub	sp, #12
	ot_u8 beacon_list[8] = {0x00, 0x00, TG_CHANNEL, 0x02, 0x20, 0x00, 0x00, 0x08};
 8030d6c:	466a      	mov	r2, sp
 8030d6e:	4b19      	ldr	r3, [pc, #100]	; (8030dd4 <setup_beacons+0x6c>)
 8030d70:	cb30      	ldmia	r3!, {r4, r5}
 8030d72:	c230      	stmia	r2!, {r4, r5}
    vlFILE* fp;
    ot_int 	output = -1;

    if (interval == 0) {
 8030d74:	2800      	cmp	r0, #0
 8030d76:	d110      	bne.n	8030d9a <setup_beacons+0x32>
    	fp = ISF_open_su(0);
 8030d78:	f004 f8ff 	bl	8034f7a <ISF_open_su>
 8030d7c:	1e05      	subs	r5, r0, #0
		if (fp != NULL) {
 8030d7e:	d022      	beq.n	8030dc6 <setup_beacons+0x5e>
			output = vl_write(fp, 6, 1);
 8030d80:	2201      	movs	r2, #1
 8030d82:	2106      	movs	r1, #6
 8030d84:	f004 f846 	bl	8034e14 <vl_write>
 8030d88:	b204      	sxth	r4, r0
			vl_close(fp);
 8030d8a:	0028      	movs	r0, r5
 8030d8c:	f004 f8be 	bl	8034f0c <vl_close>
			dll_refresh();
 8030d90:	f001 fe2c 	bl	80329ec <dll_refresh>
			dll_refresh();
		}
    }

    return output;
}
 8030d94:	0020      	movs	r0, r4
 8030d96:	b003      	add	sp, #12
 8030d98:	bd30      	pop	{r4, r5, pc}
    	beacon_list[2] = channel;
 8030d9a:	466b      	mov	r3, sp
 8030d9c:	7099      	strb	r1, [r3, #2]
    	beacon_list[6] = (ot_u8)(interval >> 8);
 8030d9e:	0a03      	lsrs	r3, r0, #8
 8030da0:	466a      	mov	r2, sp
 8030da2:	7193      	strb	r3, [r2, #6]
    	beacon_list[7] = (ot_u8)(interval);
 8030da4:	71d0      	strb	r0, [r2, #7]
    	fp = ISF_open_su(6);
 8030da6:	2006      	movs	r0, #6
 8030da8:	f004 f8e7 	bl	8034f7a <ISF_open_su>
 8030dac:	1e05      	subs	r5, r0, #0
		if (fp != NULL) {
 8030dae:	d00d      	beq.n	8030dcc <setup_beacons+0x64>
			output = vl_store(fp, 8, beacon_list);
 8030db0:	466a      	mov	r2, sp
 8030db2:	2108      	movs	r1, #8
 8030db4:	f004 f874 	bl	8034ea0 <vl_store>
 8030db8:	b204      	sxth	r4, r0
			vl_close(fp);
 8030dba:	0028      	movs	r0, r5
 8030dbc:	f004 f8a6 	bl	8034f0c <vl_close>
			dll_refresh();
 8030dc0:	f001 fe14 	bl	80329ec <dll_refresh>
 8030dc4:	e7e6      	b.n	8030d94 <setup_beacons+0x2c>
    ot_int 	output = -1;
 8030dc6:	2401      	movs	r4, #1
 8030dc8:	4264      	negs	r4, r4
 8030dca:	e7e3      	b.n	8030d94 <setup_beacons+0x2c>
 8030dcc:	2401      	movs	r4, #1
 8030dce:	4264      	negs	r4, r4
 8030dd0:	e7e0      	b.n	8030d94 <setup_beacons+0x2c>
 8030dd2:	46c0      	nop			; (mov r8, r8)
 8030dd4:	08036da8 	.word	0x08036da8

08030dd8 <setup_listen>:


void setup_listen(bool is_gateway, ot_u8 channel) {
 8030dd8:	b570      	push	{r4, r5, r6, lr}
 8030dda:	b082      	sub	sp, #8
 8030ddc:	0006      	movs	r6, r0
 8030dde:	000d      	movs	r5, r1
	ot_u8 sleep_gateway[4] = { SPLIT_TIME16(2,0,0), TG_CHANNEL, 0x50 };
 8030de0:	4b0c      	ldr	r3, [pc, #48]	; (8030e14 <setup_listen+0x3c>)
 8030de2:	9301      	str	r3, [sp, #4]
	ot_u8 sleep_endpoint[4]= { SPLIT_TIME16(0,2,3), TG_CHANNEL, 0x80 };
 8030de4:	4b0c      	ldr	r3, [pc, #48]	; (8030e18 <setup_listen+0x40>)
 8030de6:	9300      	str	r3, [sp, #0]
    vlFILE* fp;
    ot_u8* data;

    fp = ISF_open_su(5);
 8030de8:	2005      	movs	r0, #5
 8030dea:	f004 f8c6 	bl	8034f7a <ISF_open_su>
 8030dee:	1e04      	subs	r4, r0, #0
    if (fp != NULL) {
 8030df0:	d00c      	beq.n	8030e0c <setup_listen+0x34>
        data = is_gateway ? (ot_u8*)sleep_gateway : (ot_u8*)sleep_endpoint;
 8030df2:	2e00      	cmp	r6, #0
 8030df4:	d00c      	beq.n	8030e10 <setup_listen+0x38>
 8030df6:	aa01      	add	r2, sp, #4
        data[2] = channel;
 8030df8:	7095      	strb	r5, [r2, #2]
        vl_store(fp, 4, data);
 8030dfa:	2104      	movs	r1, #4
 8030dfc:	0020      	movs	r0, r4
 8030dfe:	f004 f84f 	bl	8034ea0 <vl_store>
        vl_close(fp);
 8030e02:	0020      	movs	r0, r4
 8030e04:	f004 f882 	bl	8034f0c <vl_close>
        dll_refresh();
 8030e08:	f001 fdf0 	bl	80329ec <dll_refresh>
    }
}
 8030e0c:	b002      	add	sp, #8
 8030e0e:	bd70      	pop	{r4, r5, r6, pc}
        data = is_gateway ? (ot_u8*)sleep_gateway : (ot_u8*)sleep_endpoint;
 8030e10:	466a      	mov	r2, sp
 8030e12:	e7f1      	b.n	8030df8 <setup_listen+0x20>
 8030e14:	50890080 	.word	0x50890080
 8030e18:	80890308 	.word	0x80890308

08030e1c <xrttest_systask>:
void xrttest_systask(void* arg) {
 8030e1c:	b510      	push	{r4, lr}
 8030e1e:	b082      	sub	sp, #8
 8030e20:	0004      	movs	r4, r0
    switch (task->event) {
 8030e22:	7803      	ldrb	r3, [r0, #0]
 8030e24:	2b01      	cmp	r3, #1
 8030e26:	d02f      	beq.n	8030e88 <xrttest_systask+0x6c>
 8030e28:	2b02      	cmp	r3, #2
 8030e2a:	d01e      	beq.n	8030e6a <xrttest_systask+0x4e>
 8030e2c:	2b00      	cmp	r3, #0
 8030e2e:	d002      	beq.n	8030e36 <xrttest_systask+0x1a>
        task->event = 0;
 8030e30:	2300      	movs	r3, #0
 8030e32:	7003      	strb	r3, [r0, #0]
}
 8030e34:	e036      	b.n	8030ea4 <xrttest_systask+0x88>
    	setup.page_count = __PAGE_NUMBURST__;
 8030e36:	4b1d      	ldr	r3, [pc, #116]	; (8030eac <xrttest_systask+0x90>)
 8030e38:	2201      	movs	r2, #1
 8030e3a:	809a      	strh	r2, [r3, #4]
    	setup.page_received = False;
 8030e3c:	2200      	movs	r2, #0
 8030e3e:	705a      	strb	r2, [r3, #1]
    	setup.page_type = 0;
 8030e40:	805a      	strh	r2, [r3, #2]
    	break;
 8030e42:	e02f      	b.n	8030ea4 <xrttest_systask+0x88>
				s_tmpl.channel 	= (TG_CHANNEL);
 8030e44:	2389      	movs	r3, #137	; 0x89
 8030e46:	466a      	mov	r2, sp
 8030e48:	7053      	strb	r3, [r2, #1]
			s_tmpl.flagmask     = 0;
 8030e4a:	2300      	movs	r3, #0
 8030e4c:	7153      	strb	r3, [r2, #5]
			s_tmpl.subnetmask   = 0;
 8030e4e:	70d3      	strb	r3, [r2, #3]
			m2task_telegram(&s_tmpl, applet);
 8030e50:	4917      	ldr	r1, [pc, #92]	; (8030eb0 <xrttest_systask+0x94>)
 8030e52:	4668      	mov	r0, sp
 8030e54:	f001 feda 	bl	8032c0c <m2task_telegram>
			setup.page_type 	= (setup.page_type == 0);
 8030e58:	4a14      	ldr	r2, [pc, #80]	; (8030eac <xrttest_systask+0x90>)
 8030e5a:	2102      	movs	r1, #2
 8030e5c:	5e53      	ldrsh	r3, [r2, r1]
 8030e5e:	4259      	negs	r1, r3
 8030e60:	414b      	adcs	r3, r1
 8030e62:	8053      	strh	r3, [r2, #2]
			nextevent_ti = __PAGE_PERIOD_TI__;
 8030e64:	2180      	movs	r1, #128	; 0x80
 8030e66:	00c9      	lsls	r1, r1, #3
 8030e68:	e017      	b.n	8030e9a <xrttest_systask+0x7e>
    	if (setup.is_gateway) {
 8030e6a:	4b10      	ldr	r3, [pc, #64]	; (8030eac <xrttest_systask+0x90>)
 8030e6c:	7818      	ldrb	r0, [r3, #0]
 8030e6e:	2800      	cmp	r0, #0
 8030e70:	d00a      	beq.n	8030e88 <xrttest_systask+0x6c>
    		ot_u8 chan = (setup.page_count == 0) ? (0x80|TG_CHANNEL) : ((~0x80)&TG_CHANNEL);
 8030e72:	2204      	movs	r2, #4
 8030e74:	5e9b      	ldrsh	r3, [r3, r2]
 8030e76:	2b00      	cmp	r3, #0
 8030e78:	d116      	bne.n	8030ea8 <xrttest_systask+0x8c>
 8030e7a:	2189      	movs	r1, #137	; 0x89
    		setup.page_count = (setup.page_count == 0);
 8030e7c:	425a      	negs	r2, r3
 8030e7e:	4153      	adcs	r3, r2
 8030e80:	4a0a      	ldr	r2, [pc, #40]	; (8030eac <xrttest_systask+0x90>)
 8030e82:	8093      	strh	r3, [r2, #4]
    		setup_listen(setup.is_gateway, chan);
 8030e84:	f7ff ffa8 	bl	8030dd8 <setup_listen>
    	if (setup.is_gateway) {
 8030e88:	4b08      	ldr	r3, [pc, #32]	; (8030eac <xrttest_systask+0x90>)
 8030e8a:	781b      	ldrb	r3, [r3, #0]
 8030e8c:	2b00      	cmp	r3, #0
 8030e8e:	d0d9      	beq.n	8030e44 <xrttest_systask+0x28>
    		setup.page_received	= False;
 8030e90:	4b06      	ldr	r3, [pc, #24]	; (8030eac <xrttest_systask+0x90>)
 8030e92:	2200      	movs	r2, #0
 8030e94:	705a      	strb	r2, [r3, #1]
    		nextevent_ti		= __PAGE_PERIOD_TI__*3;
 8030e96:	21c0      	movs	r1, #192	; 0xc0
 8030e98:	0109      	lsls	r1, r1, #4
    	task->event = 1;
 8030e9a:	2301      	movs	r3, #1
 8030e9c:	7023      	strb	r3, [r4, #0]
    	sys_task_setnext(task, nextevent_ti);
 8030e9e:	0020      	movs	r0, r4
 8030ea0:	f004 f9dc 	bl	803525c <sys_task_setnext>
}
 8030ea4:	b002      	add	sp, #8
 8030ea6:	bd10      	pop	{r4, pc}
    		ot_u8 chan = (setup.page_count == 0) ? (0x80|TG_CHANNEL) : ((~0x80)&TG_CHANNEL);
 8030ea8:	2109      	movs	r1, #9
 8030eaa:	e7e7      	b.n	8030e7c <xrttest_systask+0x60>
 8030eac:	2000c000 	.word	0x2000c000
 8030eb0:	08030aed 	.word	0x08030aed

08030eb4 <main>:
	return (ot_int)crcreg;
}
#endif


void main(void) {
 8030eb4:	b510      	push	{r4, lr}
 8030eb6:	b082      	sub	sp, #8
    ///1. Standard Power-on routine (Clocks, Timers, IRQ's, etc)
    ///2. Standard OpenTag Init (most stuff actually will not be used)
    platform_poweron();
 8030eb8:	f004 fdbc 	bl	8035a34 <platform_poweron>
    platform_init_OT();
 8030ebc:	f004 fcb2 	bl	8035824 <platform_init_OT>

    // 3. Preparing this application (local functions)
    setup_init();
 8030ec0:	f7ff ff1a 	bl	8030cf8 <setup_init>
    app_set_txpwr((ot_int)(__DBM_DEFAULT));
 8030ec4:	2014      	movs	r0, #20
 8030ec6:	f7ff fee3 	bl	8030c90 <app_set_txpwr>
    setup_listen(setup.is_gateway, TG_CHANNEL);
 8030eca:	4c15      	ldr	r4, [pc, #84]	; (8030f20 <main+0x6c>)
 8030ecc:	7820      	ldrb	r0, [r4, #0]
 8030ece:	2189      	movs	r1, #137	; 0x89
 8030ed0:	f7ff ff82 	bl	8030dd8 <setup_listen>
    setup_beacons(0, TG_CHANNEL);
 8030ed4:	2189      	movs	r1, #137	; 0x89
 8030ed6:	2000      	movs	r0, #0
 8030ed8:	f7ff ff46 	bl	8030d68 <setup_beacons>

    if (setup.is_gateway) {
 8030edc:	7823      	ldrb	r3, [r4, #0]
 8030ede:	2b00      	cmp	r3, #0
 8030ee0:	d11b      	bne.n	8030f1a <main+0x66>
    	asapi_init_srv();
    }

    xrt_invoke(1);
 8030ee2:	2001      	movs	r0, #1
 8030ee4:	f7ff febe 	bl	8030c64 <xrt_invoke>
    
    ///4. Set the app name (PageTest) as a cookie in the User-ID.
    ///   This is used for query filtering
    {   static const ot_u8 appstr[] = "APP=PageTest";
        vlFILE* fp;
        fp = ISF_open_su(ISF_ID(user_id));
 8030ee8:	2011      	movs	r0, #17
 8030eea:	f004 f846 	bl	8034f7a <ISF_open_su>
 8030eee:	1e04      	subs	r4, r0, #0
        if (fp != NULL) {
 8030ef0:	d003      	beq.n	8030efa <main+0x46>
            vl_store(fp, sizeof(appstr), appstr);
 8030ef2:	4a0c      	ldr	r2, [pc, #48]	; (8030f24 <main+0x70>)
 8030ef4:	210d      	movs	r1, #13
 8030ef6:	f003 ffd3 	bl	8034ea0 <vl_store>
        }
        vl_close(fp);
 8030efa:	0020      	movs	r0, r4
 8030efc:	f004 f806 	bl	8034f0c <vl_close>
    ///5a. The device will wait (and block anything else) until you connect
    ///    it to a valid console app.
    ///5b. Load a message to show that main startup has passed
#   if (OT_FEATURE(MPIPE))
    //if (setup.is_gateway) {
        mpipedrv_standby();
 8030f00:	f004 ffdc 	bl	8035ebc <mpipedrv_standby>
        logger_msg(MSG_utf8, 6, 27, (ot_u8*)"SYS_ON", (ot_u8*)"System on and Mpipe active\n");
 8030f04:	4b08      	ldr	r3, [pc, #32]	; (8030f28 <main+0x74>)
 8030f06:	9300      	str	r3, [sp, #0]
 8030f08:	4b08      	ldr	r3, [pc, #32]	; (8030f2c <main+0x78>)
 8030f0a:	221b      	movs	r2, #27
 8030f0c:	2106      	movs	r1, #6
 8030f0e:	2005      	movs	r0, #5
 8030f10:	f003 fc16 	bl	8034740 <logger_msg>
    ///<LI> You could put code before or after platform_ot_run, which will
    ///     run before or after the (task + kernel).  If you do, keep the code
    ///     very short or else you are risking timing glitches.</LI>
    ///<LI> To run any significant amount of user code, use tasks. </LI>
    while(1) {
        platform_ot_run();
 8030f14:	f004 fe48 	bl	8035ba8 <platform_ot_run>
    while(1) {
 8030f18:	e7fc      	b.n	8030f14 <main+0x60>
    	asapi_init_srv();
 8030f1a:	f7ff faff 	bl	803051c <asapi_init_srv>
 8030f1e:	e7e0      	b.n	8030ee2 <main+0x2e>
 8030f20:	2000c000 	.word	0x2000c000
 8030f24:	08036e88 	.word	0x08036e88
 8030f28:	08036e6c 	.word	0x08036e6c
 8030f2c:	08036e64 	.word	0x08036e64

08030f30 <dll_sig_rfinit>:
/// 2 = Session invocation (rfinit() not called here)
/// 3 = RX initialization (!)
/// 4 = TX CSMA init (!)
/// 5 = TX watchdog (rfinit() not called here)

    if (pcode == 3) BOARD_led2_on();    // Orange (preferred) / Yellow / Red lamp
 8030f30:	2803      	cmp	r0, #3
 8030f32:	d004      	beq.n	8030f3e <dll_sig_rfinit+0xe>
 8030f34:	4b04      	ldr	r3, [pc, #16]	; (8030f48 <dll_sig_rfinit+0x18>)
 8030f36:	2280      	movs	r2, #128	; 0x80
 8030f38:	0092      	lsls	r2, r2, #2
 8030f3a:	619a      	str	r2, [r3, #24]
    else            BOARD_led1_on();    // Green lamp
}
 8030f3c:	4770      	bx	lr
static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 8030f3e:	4b02      	ldr	r3, [pc, #8]	; (8030f48 <dll_sig_rfinit+0x18>)
 8030f40:	2280      	movs	r2, #128	; 0x80
 8030f42:	0112      	lsls	r2, r2, #4
 8030f44:	619a      	str	r2, [r3, #24]
 8030f46:	e7f9      	b.n	8030f3c <dll_sig_rfinit+0xc>
 8030f48:	48000400 	.word	0x48000400

08030f4c <dll_sig_rfterminate>:
static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 8030f4c:	4b03      	ldr	r3, [pc, #12]	; (8030f5c <dll_sig_rfterminate+0x10>)
 8030f4e:	2280      	movs	r2, #128	; 0x80
 8030f50:	0112      	lsls	r2, r2, #4
 8030f52:	629a      	str	r2, [r3, #40]	; 0x28
static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 8030f54:	2280      	movs	r2, #128	; 0x80
 8030f56:	0092      	lsls	r2, r2, #2
 8030f58:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef EXTF_dll_sig_rfterminate
void dll_sig_rfterminate(ot_int pcode, ot_int scode) {
    BOARD_led2_off();   //Orange LED off
    BOARD_led1_off();   //Green LED off
}
 8030f5a:	4770      	bx	lr
 8030f5c:	48000400 	.word	0x48000400

08030f60 <sys_sig_panic>:
#include <otsys/syskern.h>
#include <otlib/logger.h>


#ifdef EXTF_sys_sig_panic
void sys_sig_panic(ot_int code) {
 8030f60:	b510      	push	{r4, lr}
#   if (OT_FEATURE(MPIPE))
    logger_code(3, (ot_u8*)"WTF", (ot_u16)code);
 8030f62:	b282      	uxth	r2, r0
 8030f64:	4902      	ldr	r1, [pc, #8]	; (8030f70 <sys_sig_panic+0x10>)
 8030f66:	2003      	movs	r0, #3
 8030f68:	f003 fc10 	bl	803478c <logger_code>
#   endif
}
 8030f6c:	bd10      	pop	{r4, pc}
 8030f6e:	46c0      	nop			; (mov r8, r8)
 8030f70:	08036e98 	.word	0x08036e98

08030f74 <wllora_getbasepwr>:


ot_u8 wllora_getbasepwr() {
/// Base Power code: 0-3.  For this SX127x impl it's always 3.
    return 3;
}
 8030f74:	2003      	movs	r0, #3
 8030f76:	4770      	bx	lr

08030f78 <wllora_reset>:


/** Bus interface (SPI + 2x GPIO) <BR>
  * ========================================================================
  */
void wllora_reset() {
 8030f78:	b510      	push	{r4, lr}
//         moder  |= (GPIO_MODER_OUT << (BOARD_RFCTL_RESETPINNUM*2));
//         
//         BOARD_RFCTL_RESETPORT->MODER    = moder;
//         BOARD_RFCTL_RESETPORT->BSRR     = BOARD_RFCTL_RESETPIN;
//     }
    delay_us(1200);   //wait ~120 us
 8030f7a:	2096      	movs	r0, #150	; 0x96
 8030f7c:	00c0      	lsls	r0, r0, #3
 8030f7e:	f004 fe3f 	bl	8035c00 <delay_us>
    
    // Set Reset pin to Input, floating
//     BOARD_RFCTL_RESETPORT->MODER &= ~(3 << (BOARD_RFCTL_RESETPINNUM*2));

    // wait ~6ms
    delay_ti(6);    // wait ~6ms 
 8030f82:	2006      	movs	r0, #6
 8030f84:	f004 fe3a 	bl	8035bfc <delay_ti>
}
 8030f88:	bd10      	pop	{r4, pc}

08030f8a <wllora_init_bus>:


void wllora_init_bus() {
 8030f8a:	b510      	push	{r4, lr}
    wllora.clkreq = False;
#   endif

    ///1. Do a Reset.  
    ///@todo precede this with POR
    wllora_reset();
 8030f8c:	f7ff fff4 	bl	8030f78 <wllora_reset>
// #       endif
// #   endif
    
    /// 4. Put SX127x to sleep
    //delay_ti(6);    // wait ~6ms 
    wllora_strobe(_OPMODE_SLEEP, True);
 8030f90:	2101      	movs	r1, #1
 8030f92:	2000      	movs	r0, #0
 8030f94:	f000 fd94 	bl	8031ac0 <wllora_strobe>
}
 8030f98:	bd10      	pop	{r4, pc}

08030f9a <wllora_spibus_io>:
//     __SPI_DISABLE();
//     __SPI_CLKOFF();
//     BOARD_DMA_CLKOFF();
//     BOARD_RFSPI_CLKOFF();
//     platform_enable_interrupts();
}
 8030f9a:	4770      	bx	lr

08030f9c <wllora_antsw_off>:
    GPIOC->BSRR     = ((1<<4) | (1<<5)) << 16;
 8030f9c:	4b04      	ldr	r3, [pc, #16]	; (8030fb0 <wllora_antsw_off+0x14>)
 8030f9e:	22c0      	movs	r2, #192	; 0xc0
 8030fa0:	0392      	lsls	r2, r2, #14
 8030fa2:	619a      	str	r2, [r3, #24]
    GPIOC->MODER    = GPIOC->MODER | (3 << (3*2));
 8030fa4:	681a      	ldr	r2, [r3, #0]
 8030fa6:	21c0      	movs	r1, #192	; 0xc0
 8030fa8:	430a      	orrs	r2, r1
 8030faa:	601a      	str	r2, [r3, #0]
  * (TX)            
  */

void wllora_antsw_off(void) {
    BOARD_RFANT_OFF();
}
 8030fac:	4770      	bx	lr
 8030fae:	46c0      	nop			; (mov r8, r8)
 8030fb0:	48000800 	.word	0x48000800

08030fb4 <wllora_antsw_on>:
    GPIOC->BSRR     = (1<<3) | (((1<<4) | (1<<5)) << 16);
 8030fb4:	4a04      	ldr	r2, [pc, #16]	; (8030fc8 <wllora_antsw_on+0x14>)
 8030fb6:	4b05      	ldr	r3, [pc, #20]	; (8030fcc <wllora_antsw_on+0x18>)
 8030fb8:	6193      	str	r3, [r2, #24]
    GPIOC->MODER    = (GPIOC->MODER & ~(3 << (3*2))) | (1 << (3*2));
 8030fba:	6813      	ldr	r3, [r2, #0]
 8030fbc:	21c0      	movs	r1, #192	; 0xc0
 8030fbe:	438b      	bics	r3, r1
 8030fc0:	3980      	subs	r1, #128	; 0x80
 8030fc2:	430b      	orrs	r3, r1
 8030fc4:	6013      	str	r3, [r2, #0]

void wllora_antsw_on(void) {
    BOARD_RFANT_ON();
}
 8030fc6:	4770      	bx	lr
 8030fc8:	48000800 	.word	0x48000800
 8030fcc:	00300008 	.word	0x00300008

08030fd0 <wllora_antsw_tx>:

void wllora_antsw_tx(ot_bool use_paboost) {
 8030fd0:	b510      	push	{r4, lr}
 8030fd2:	0004      	movs	r4, r0
    wllora_antsw_on();
 8030fd4:	f7ff ffee 	bl	8030fb4 <wllora_antsw_on>
    GPIOC->BSRR = (1<<5) | ((ot_u32)use_boost << 16);
 8030fd8:	0424      	lsls	r4, r4, #16
 8030fda:	2020      	movs	r0, #32
 8030fdc:	4304      	orrs	r4, r0
 8030fde:	4b01      	ldr	r3, [pc, #4]	; (8030fe4 <wllora_antsw_tx+0x14>)
 8030fe0:	619c      	str	r4, [r3, #24]
    BOARD_RFANT_TX(use_paboost);
}
 8030fe2:	bd10      	pop	{r4, pc}
 8030fe4:	48000800 	.word	0x48000800

08030fe8 <wllora_antsw_rx>:

void wllora_antsw_rx(void) {
 8030fe8:	b510      	push	{r4, lr}
    wllora_antsw_on();
 8030fea:	f7ff ffe3 	bl	8030fb4 <wllora_antsw_on>
    GPIOC->BSRR = (1<<4) | ((1<<5) << 16);
 8030fee:	4b02      	ldr	r3, [pc, #8]	; (8030ff8 <wllora_antsw_rx+0x10>)
 8030ff0:	4a02      	ldr	r2, [pc, #8]	; (8030ffc <wllora_antsw_rx+0x14>)
 8030ff2:	619a      	str	r2, [r3, #24]
    BOARD_RFANT_RX();
}
 8030ff4:	bd10      	pop	{r4, pc}
 8030ff6:	46c0      	nop			; (mov r8, r8)
 8030ff8:	48000800 	.word	0x48000800
 8030ffc:	00200010 	.word	0x00200010

08031000 <wllora_int_config>:
//     EXTI->PR    = (ot_u32)RFI_ALL;
//     scratch     = EXTI->IMR;
//     scratch    &= ~((ot_u32)RFI_ALL);
//     scratch    |= ie_sel;
//     EXTI->IMR   = scratch;
}
 8031000:	4770      	bx	lr

08031002 <wllora_int_clearall>:

inline void wllora_int_clearall(void) {
//     EXTI->PR = RFI_ALL;
}
 8031002:	4770      	bx	lr

08031004 <sub_initcad>:
    //dll_offset_rxtimeout();
    
    rm2_reenter_rx(radio.evtdone);
}

void sub_initcad(void) {
 8031004:	b510      	push	{r4, lr}
    // Set I/O for CAD detect
    wllora_write(RFREG_LR_IRQFLAGS, 0xFF);  
 8031006:	21ff      	movs	r1, #255	; 0xff
 8031008:	2012      	movs	r0, #18
 803100a:	f000 fd2d 	bl	8031a68 <wllora_write>
    wllora_iocfg_cad();
 803100e:	f000 fd31 	bl	8031a74 <wllora_iocfg_cad>
    wllora_int_listen();
 8031012:	f000 fcdd 	bl	80319d0 <wllora_int_listen>
    
    radio.state = RADIO_Listening;
 8031016:	4b05      	ldr	r3, [pc, #20]	; (803102c <sub_initcad+0x28>)
 8031018:	2201      	movs	r2, #1
 803101a:	701a      	strb	r2, [r3, #0]
    /// time for CAD->RSSI is dependent on SF and BW
    /// - SF7:500kHZ = 320us
    /// - SF7:125kHZ = 1280us
    //radio_set_mactimer(?);
    
    wllora_antsw_rx();
 803101c:	f7ff ffe4 	bl	8030fe8 <wllora_antsw_rx>
    wllora_strobe(_OPMODE_CAD, False);  //non-blocking call
 8031020:	2100      	movs	r1, #0
 8031022:	2007      	movs	r0, #7
 8031024:	f000 fd4c 	bl	8031ac0 <wllora_strobe>
}
 8031028:	bd10      	pop	{r4, pc}
 803102a:	46c0      	nop			; (mov r8, r8)
 803102c:	2000c488 	.word	0x2000c488

08031030 <radio_init>:
OT_WEAK void radio_init(void) {
 8031030:	b510      	push	{r4, lr}
    rfctl.flags     = 0;
 8031032:	2200      	movs	r2, #0
 8031034:	4b06      	ldr	r3, [pc, #24]	; (8031050 <radio_init+0x20>)
 8031036:	705a      	strb	r2, [r3, #1]
    radio.state     = RADIO_Idle;
 8031038:	4b06      	ldr	r3, [pc, #24]	; (8031054 <radio_init+0x24>)
 803103a:	701a      	strb	r2, [r3, #0]
    radio.evtdone   = &otutils_sig2_null;
 803103c:	4a06      	ldr	r2, [pc, #24]	; (8031058 <radio_init+0x28>)
 803103e:	609a      	str	r2, [r3, #8]
    wllora_init_bus();
 8031040:	f7ff ffa3 	bl	8030f8a <wllora_init_bus>
    wllora_load_defaults();
 8031044:	f000 fd2e 	bl	8031aa4 <wllora_load_defaults>
    rm2_init();
 8031048:	f002 f8ca 	bl	80331e0 <rm2_init>
}
 803104c:	bd10      	pop	{r4, pc}
 803104e:	46c0      	nop			; (mov r8, r8)
 8031050:	2000c2e4 	.word	0x2000c2e4
 8031054:	2000c488 	.word	0x2000c488
 8031058:	08034983 	.word	0x08034983

0803105c <radio_set_mactimer>:
OT_WEAK void radio_set_mactimer(ot_u16 clocks) {
 803105c:	b510      	push	{r4, lr}
 803105e:	0004      	movs	r4, r0
    systim_enable_insertion();
 8031060:	f004 faec 	bl	803563c <systim_enable_insertion>
    systim_set_insertion(clocks);
 8031064:	0020      	movs	r0, r4
 8031066:	f004 facb 	bl	8035600 <systim_set_insertion>
}
 803106a:	bd10      	pop	{r4, pc}

0803106c <radio_activate_queue>:
    q->options.ubyte[UPPER]    += 1;
 803106c:	78c3      	ldrb	r3, [r0, #3]
 803106e:	3301      	adds	r3, #1
 8031070:	70c3      	strb	r3, [r0, #3]
    q->options.ubyte[LOWER]     = 0;
 8031072:	2300      	movs	r3, #0
 8031074:	7083      	strb	r3, [r0, #2]
}
 8031076:	4770      	bx	lr

08031078 <rm2_clip_txeirp>:
OT_INLINE ot_u8 rm2_clip_txeirp(ot_u8 m2_txeirp) {
 8031078:	b510      	push	{r4, lr}
    return wllora_clip_txeirp(m2_txeirp & 0x7f);
 803107a:	237f      	movs	r3, #127	; 0x7f
 803107c:	4018      	ands	r0, r3
 803107e:	f000 fd7b 	bl	8031b78 <wllora_clip_txeirp>
}
 8031082:	bd10      	pop	{r4, pc}

08031084 <rm2_calc_rssithr>:
OT_INLINE ot_u8 rm2_calc_rssithr(ot_u8 m2_rssithr) {
 8031084:	b510      	push	{r4, lr}
    return wllora_calc_rssithr(m2_rssithr);
 8031086:	f000 fd75 	bl	8031b74 <wllora_calc_rssithr>
}
 803108a:	bd10      	pop	{r4, pc}

0803108c <rm2_channel_fastcheck>:
    if (radio.flags & RADIO_FLAG_REFRESH) {
 803108c:	4b0a      	ldr	r3, [pc, #40]	; (80310b8 <rm2_channel_fastcheck+0x2c>)
 803108e:	785b      	ldrb	r3, [r3, #1]
 8031090:	07da      	lsls	r2, r3, #31
 8031092:	d407      	bmi.n	80310a4 <rm2_channel_fastcheck+0x18>
    if ((chan_id == 0) || (chan_id == phymac[0].channel)) {
 8031094:	2800      	cmp	r0, #0
 8031096:	d00b      	beq.n	80310b0 <rm2_channel_fastcheck+0x24>
 8031098:	4b08      	ldr	r3, [pc, #32]	; (80310bc <rm2_channel_fastcheck+0x30>)
 803109a:	789b      	ldrb	r3, [r3, #2]
 803109c:	4283      	cmp	r3, r0
 803109e:	d009      	beq.n	80310b4 <rm2_channel_fastcheck+0x28>
    return False;
 80310a0:	2000      	movs	r0, #0
}
 80310a2:	4770      	bx	lr
        radio.flags ^= RADIO_FLAG_REFRESH;
 80310a4:	2201      	movs	r2, #1
 80310a6:	4053      	eors	r3, r2
 80310a8:	4a03      	ldr	r2, [pc, #12]	; (80310b8 <rm2_channel_fastcheck+0x2c>)
 80310aa:	7053      	strb	r3, [r2, #1]
        return False;
 80310ac:	2000      	movs	r0, #0
 80310ae:	e7f8      	b.n	80310a2 <rm2_channel_fastcheck+0x16>
        return True;
 80310b0:	2001      	movs	r0, #1
 80310b2:	e7f6      	b.n	80310a2 <rm2_channel_fastcheck+0x16>
 80310b4:	2001      	movs	r0, #1
 80310b6:	e7f4      	b.n	80310a2 <rm2_channel_fastcheck+0x16>
 80310b8:	2000c488 	.word	0x2000c488
 80310bc:	2000c480 	.word	0x2000c480

080310c0 <rm2_enter_channel>:
OT_WEAK void rm2_enter_channel(ot_u8 old_chan_id, ot_u8 old_tx_eirp) {
 80310c0:	b570      	push	{r4, r5, r6, lr}
 80310c2:	0004      	movs	r4, r0
    if (old_tx_eirp != phymac[0].tx_eirp) {
 80310c4:	4b13      	ldr	r3, [pc, #76]	; (8031114 <rm2_enter_channel+0x54>)
 80310c6:	7918      	ldrb	r0, [r3, #4]
 80310c8:	4288      	cmp	r0, r1
 80310ca:	d109      	bne.n	80310e0 <rm2_enter_channel+0x20>
    old_chan_id ^= phymac[0].channel;
 80310cc:	4b11      	ldr	r3, [pc, #68]	; (8031114 <rm2_enter_channel+0x54>)
 80310ce:	789b      	ldrb	r3, [r3, #2]
 80310d0:	405c      	eors	r4, r3
    if (old_chan_id & 0xF0) {
 80310d2:	220f      	movs	r2, #15
 80310d4:	0021      	movs	r1, r4
 80310d6:	4391      	bics	r1, r2
 80310d8:	d105      	bne.n	80310e6 <rm2_enter_channel+0x26>
    if (old_chan_id & 0x0F) {
 80310da:	0723      	lsls	r3, r4, #28
 80310dc:	d110      	bne.n	8031100 <rm2_enter_channel+0x40>
}
 80310de:	bd70      	pop	{r4, r5, r6, pc}
        wllora_set_txpwr( phymac[0].tx_eirp );
 80310e0:	f000 fd53 	bl	8031b8a <wllora_set_txpwr>
 80310e4:	e7f2      	b.n	80310cc <rm2_enter_channel+0xc>
        const ot_u8* detect_regs = detection[phymac[0].channel>>4];
 80310e6:	091b      	lsrs	r3, r3, #4
 80310e8:	4a0b      	ldr	r2, [pc, #44]	; (8031118 <rm2_enter_channel+0x58>)
 80310ea:	005b      	lsls	r3, r3, #1
 80310ec:	18d5      	adds	r5, r2, r3
        wllora_write(RFREG_LR_DETECTOPTIMIZE, detect_regs[0]);
 80310ee:	5cd1      	ldrb	r1, [r2, r3]
 80310f0:	2031      	movs	r0, #49	; 0x31
 80310f2:	f000 fcb9 	bl	8031a68 <wllora_write>
        wllora_write(RFREG_LR_DETECTIONTHRESHOLD, detect_regs[1]);
 80310f6:	7869      	ldrb	r1, [r5, #1]
 80310f8:	2037      	movs	r0, #55	; 0x37
 80310fa:	f000 fcb5 	bl	8031a68 <wllora_write>
 80310fe:	e7ec      	b.n	80310da <rm2_enter_channel+0x1a>
        wllora_configure_chan(phymac[0].flags, (phymac[0].channel & 0x0F)-1);
 8031100:	4b04      	ldr	r3, [pc, #16]	; (8031114 <rm2_enter_channel+0x54>)
 8031102:	789a      	ldrb	r2, [r3, #2]
 8031104:	210f      	movs	r1, #15
 8031106:	4011      	ands	r1, r2
 8031108:	3901      	subs	r1, #1
 803110a:	b2c9      	uxtb	r1, r1
 803110c:	7818      	ldrb	r0, [r3, #0]
 803110e:	f000 fc1e 	bl	803194e <wllora_configure_chan>
}
 8031112:	e7e4      	b.n	80310de <rm2_enter_channel+0x1e>
 8031114:	2000c480 	.word	0x2000c480
 8031118:	08036ec8 	.word	0x08036ec8

0803111c <rm2_mac_configure>:
}
 803111c:	4770      	bx	lr

0803111e <rm2_flood_getcounter>:
OT_WEAK ot_int rm2_flood_getcounter(void) {
 803111e:	b510      	push	{r4, lr}
    offset_count    = (ot_int)wllora_get_counter();
 8031120:	f000 fd1a 	bl	8031b58 <wllora_get_counter>
    offset_count   -= 7; //rm2_scale_codec(phymac[0].channel, 29);
 8031124:	3807      	subs	r0, #7
 8031126:	b200      	sxth	r0, r0
}
 8031128:	bd10      	pop	{r4, pc}
	...

0803112c <rm2_flood_txstop>:
OT_WEAK void rm2_flood_txstop(void) {
 803112c:	b510      	push	{r4, lr}
    rfctl.state = RADIO_STATE_TXDONE;
 803112e:	4b04      	ldr	r3, [pc, #16]	; (8031140 <rm2_flood_txstop+0x14>)
 8031130:	2200      	movs	r2, #0
 8031132:	701a      	strb	r2, [r3, #0]
    wllora_stop_counter();
 8031134:	f000 fd0e 	bl	8031b54 <wllora_stop_counter>
    wllora_int_txdata();
 8031138:	f000 fc68 	bl	8031a0c <wllora_int_txdata>
}
 803113c:	bd10      	pop	{r4, pc}
 803113e:	46c0      	nop			; (mov r8, r8)
 8031140:	2000c2e4 	.word	0x2000c2e4

08031144 <rm2_flood_txstart>:
OT_WEAK void rm2_flood_txstart(void) {
 8031144:	b510      	push	{r4, lr}
    wllora_start_counter();
 8031146:	f000 fcfb 	bl	8031b40 <wllora_start_counter>
}
 803114a:	bd10      	pop	{r4, pc}

0803114c <rm2_decode_s2>:
    rm2_decode_s2_WAITNEXT:
    sys.task_RFA.event      = 5;
    sys.task_RFA.nextevent  = (ot_uint)wllora_hscblock_ti(&phymac[0]);
    return;
#endif
}
 803114c:	4770      	bx	lr
	...

08031150 <rm2_txinit>:
/** Radio TX Functions  <BR>
  * ========================================================================<BR>
  */

#ifndef EXTF_rm2_txinit
OT_WEAK void rm2_txinit(ot_u8 psettings, ot_sig2 callback) {
 8031150:	b510      	push	{r4, lr}
            RADIO_FLAG_PG,
            RADIO_FLAG_CONT,
            (RADIO_FLAG_BG | RADIO_FLAG_CONT)
    };

    rfctl.flags    &= ~(RADIO_FLAG_BG | RADIO_FLAG_PG | RADIO_FLAG_CONT);
 8031152:	4a0d      	ldr	r2, [pc, #52]	; (8031188 <rm2_txinit+0x38>)
 8031154:	7853      	ldrb	r3, [r2, #1]
 8031156:	2407      	movs	r4, #7
 8031158:	43a3      	bics	r3, r4
 803115a:	7053      	strb	r3, [r2, #1]
    //rfctl.flags    |= (psettings & (M2_NETFLAG_BG | M2_NETFLAG_STREAM)) >> 6;

    ///@todo temporary method until PG mode refined
    rfctl.flags |= flag_lut[(psettings & (M2_NETFLAG_STREAM | M2_NETFLAG_BG)) >> 6];
 803115c:	0980      	lsrs	r0, r0, #6
 803115e:	4c0b      	ldr	r4, [pc, #44]	; (803118c <rm2_txinit+0x3c>)
 8031160:	5c20      	ldrb	r0, [r4, r0]
 8031162:	4303      	orrs	r3, r0
 8031164:	7053      	strb	r3, [r2, #1]

    radio.evtdone   = callback;
 8031166:	4b0a      	ldr	r3, [pc, #40]	; (8031190 <rm2_txinit+0x40>)
 8031168:	6099      	str	r1, [r3, #8]
    radio.state     = RADIO_Csma;
 803116a:	2102      	movs	r1, #2
 803116c:	7019      	strb	r1, [r3, #0]
    rfctl.state     = RADIO_STATE_TXINIT;
 803116e:	2308      	movs	r3, #8
 8031170:	7013      	strb	r3, [r2, #0]

    /// If 0, it's a retransmission, no re-encoding necessary
    /// This value is revised later.
    txq.options.ubyte[UPPER] = 0;
 8031172:	4b08      	ldr	r3, [pc, #32]	; (8031194 <rm2_txinit+0x44>)
 8031174:	2200      	movs	r2, #0
 8031176:	70da      	strb	r2, [r3, #3]

    /// CSMA-CA interrupt based and fully pre-emptive.  This is
    /// possible using CC1 on the GPTIM to clock the intervals.
    radio_set_mactimer( (ot_uint)dll.comm.tca << 3 );
 8031178:	4b07      	ldr	r3, [pc, #28]	; (8031198 <rm2_txinit+0x48>)
 803117a:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 803117c:	00c0      	lsls	r0, r0, #3
 803117e:	b280      	uxth	r0, r0
 8031180:	f7ff ff6c 	bl	803105c <radio_set_mactimer>
}
 8031184:	bd10      	pop	{r4, pc}
 8031186:	46c0      	nop			; (mov r8, r8)
 8031188:	2000c2e4 	.word	0x2000c2e4
 803118c:	08036eec 	.word	0x08036eec
 8031190:	2000c488 	.word	0x2000c488
 8031194:	2000cb2c 	.word	0x2000cb2c
 8031198:	2000c410 	.word	0x2000c410

0803119c <rm2_resend>:
#endif



#ifndef EXTF_rm2_resend
OT_WEAK void rm2_resend(ot_sig2 callback) {
 803119c:	b510      	push	{r4, lr}
    radio.evtdone               = callback;
 803119e:	4b07      	ldr	r3, [pc, #28]	; (80311bc <rm2_resend+0x20>)
 80311a0:	6098      	str	r0, [r3, #8]
    radio.state                 = RADIO_Csma;
 80311a2:	2202      	movs	r2, #2
 80311a4:	701a      	strb	r2, [r3, #0]
    rfctl.state                 = RADIO_STATE_TXINIT;
 80311a6:	4b06      	ldr	r3, [pc, #24]	; (80311c0 <rm2_resend+0x24>)
 80311a8:	3206      	adds	r2, #6
 80311aa:	701a      	strb	r2, [r3, #0]
    txq.options.ubyte[UPPER]    = 255;
 80311ac:	4b05      	ldr	r3, [pc, #20]	; (80311c4 <rm2_resend+0x28>)
 80311ae:	32f7      	adds	r2, #247	; 0xf7
 80311b0:	70da      	strb	r2, [r3, #3]
    radio_set_mactimer(0);
 80311b2:	2000      	movs	r0, #0
 80311b4:	f7ff ff52 	bl	803105c <radio_set_mactimer>
}
 80311b8:	bd10      	pop	{r4, pc}
 80311ba:	46c0      	nop			; (mov r8, r8)
 80311bc:	2000c488 	.word	0x2000c488
 80311c0:	2000c2e4 	.word	0x2000c2e4
 80311c4:	2000cb2c 	.word	0x2000cb2c

080311c8 <sub_cca_isfail>:
    wllora_antsw_rx();
    wllora_strobe(_OPMODE_CAD, False);  //non-blocking call
    radio.state = RADIO_Csma;
}

ot_bool sub_cca_isfail(void) {
 80311c8:	b510      	push	{r4, lr}
    ot_bool test;
    test = wllora_check_cadpin();
 80311ca:	f000 fc29 	bl	8031a20 <wllora_check_cadpin>
 80311ce:	1e04      	subs	r4, r0, #0
    if (test) {
 80311d0:	d101      	bne.n	80311d6 <sub_cca_isfail+0xe>
        
        // This calls CSMA loop
        radio.evtdone(1, 0);
    }
    return test;
}
 80311d2:	0020      	movs	r0, r4
 80311d4:	bd10      	pop	{r4, pc}
        wllora_int_off();
 80311d6:	f000 fbf5 	bl	80319c4 <wllora_int_off>
        rfctl.state = RADIO_STATE_TXCAD1;
 80311da:	4b04      	ldr	r3, [pc, #16]	; (80311ec <sub_cca_isfail+0x24>)
 80311dc:	2210      	movs	r2, #16
 80311de:	701a      	strb	r2, [r3, #0]
        radio.evtdone(1, 0);
 80311e0:	4b03      	ldr	r3, [pc, #12]	; (80311f0 <sub_cca_isfail+0x28>)
 80311e2:	689b      	ldr	r3, [r3, #8]
 80311e4:	2100      	movs	r1, #0
 80311e6:	2001      	movs	r0, #1
 80311e8:	4798      	blx	r3
 80311ea:	e7f2      	b.n	80311d2 <sub_cca_isfail+0xa>
 80311ec:	2000c2e4 	.word	0x2000c2e4
 80311f0:	2000c488 	.word	0x2000c488

080311f4 <wlloradrv_mdmconfig>:

void wlloradrv_null(ot_int arg1, ot_int arg2) { }


#ifndef EXTF_wlloradrv_mdmconfig
OT_WEAK void wlloradrv_mdmconfig(MODE_enum mode, ot_u8 mdmcfg2_val, ot_u8 symtimeout_def, ot_u16 param) {
 80311f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80311f6:	46ce      	mov	lr, r9
 80311f8:	4647      	mov	r7, r8
 80311fa:	b580      	push	{r7, lr}
 80311fc:	b083      	sub	sp, #12
 80311fe:	4688      	mov	r8, r1
 8031200:	4691      	mov	r9, r2
 8031202:	001d      	movs	r5, r3
        (0 | _CODINGRATE_4_5 | _IMPLICITHEADER_ON | _RXPAYLOADCRC_OFF | _LOWDATARATEOPTIMIZE_OFF),
        (0 | _CODINGRATE_4_4 | _IMPLICITHEADER_ON | _RXPAYLOADCRC_OFF | _LOWDATARATEOPTIMIZE_OFF)
    };

    // spibus command buffer
    ot_u8 mdmregs[7] = {
 8031204:	4b1d      	ldr	r3, [pc, #116]	; (803127c <wlloradrv_mdmconfig+0x88>)
 8031206:	681a      	ldr	r2, [r3, #0]
 8031208:	9200      	str	r2, [sp, #0]
 803120a:	889a      	ldrh	r2, [r3, #4]
 803120c:	4669      	mov	r1, sp
 803120e:	808a      	strh	r2, [r1, #4]
 8031210:	799b      	ldrb	r3, [r3, #6]
 8031212:	718b      	strb	r3, [r1, #6]
        0,                                  // Preamble MSB
        0,                                  // Preamble LSB
        0,                                  // Packet Length
    };

    usefec      = (phymac[0].channel >> 7);
 8031214:	4f1a      	ldr	r7, [pc, #104]	; (8031280 <wlloradrv_mdmconfig+0x8c>)
 8031216:	78be      	ldrb	r6, [r7, #2]
 8031218:	09f6      	lsrs	r6, r6, #7
    offset      = (ot_u8)mode + usefec;
 803121a:	1830      	adds	r0, r6, r0
 803121c:	b2c4      	uxtb	r4, r0

    // Prepare the modem configuration registers (mdmcfg1, mdmcfg2)
    mdmregs[1]  = wllora_get_bw(phymac[0].flags) | mdmcfg1_lut[usefec];
 803121e:	7838      	ldrb	r0, [r7, #0]
 8031220:	f000 fb9e 	bl	8031960 <wllora_get_bw>
 8031224:	4b17      	ldr	r3, [pc, #92]	; (8031284 <wlloradrv_mdmconfig+0x90>)
 8031226:	5d9b      	ldrb	r3, [r3, r6]
 8031228:	4318      	orrs	r0, r3
 803122a:	466b      	mov	r3, sp
 803122c:	7058      	strb	r0, [r3, #1]
    mdmregs[2]  = mdmcfg2_sf[(phymac[0].channel>>4)&3] | mdmcfg2_val;
 803122e:	78ba      	ldrb	r2, [r7, #2]
 8031230:	0912      	lsrs	r2, r2, #4
 8031232:	2303      	movs	r3, #3
 8031234:	4013      	ands	r3, r2
 8031236:	4a14      	ldr	r2, [pc, #80]	; (8031288 <wlloradrv_mdmconfig+0x94>)
 8031238:	5cd1      	ldrb	r1, [r2, r3]
 803123a:	4643      	mov	r3, r8
 803123c:	4319      	orrs	r1, r3
 803123e:	466b      	mov	r3, sp
 8031240:	7099      	strb	r1, [r3, #2]

    // Prepare the symbol timeout value (only relevant on RX)
    mdmregs[3]  = symtimeout_def;
 8031242:	464a      	mov	r2, r9
 8031244:	70da      	strb	r2, [r3, #3]

    // Prepare the preamble length, which is only done via the LSB
    mdmregs[5]  = preamblelen[offset];
 8031246:	4b11      	ldr	r3, [pc, #68]	; (803128c <wlloradrv_mdmconfig+0x98>)
 8031248:	5d1b      	ldrb	r3, [r3, r4]
 803124a:	466a      	mov	r2, sp
 803124c:	7153      	strb	r3, [r2, #5]

    // Prepare the packet length, which in TX is known and in RX is the size of an initial header chunk
    ///@todo Param manipulation must take into account the variable coding rate
    mdmregs[6]  = (param == 0) ? deflength[offset] : param;
 803124e:	2d00      	cmp	r5, #0
 8031250:	d112      	bne.n	8031278 <wlloradrv_mdmconfig+0x84>
 8031252:	4b0f      	ldr	r3, [pc, #60]	; (8031290 <wlloradrv_mdmconfig+0x9c>)
 8031254:	5d1d      	ldrb	r5, [r3, r4]
 8031256:	466b      	mov	r3, sp
 8031258:	719d      	strb	r5, [r3, #6]

    // Store in a single SPI write operation
    wllora_spibus_io(7, 0, mdmregs);
 803125a:	466a      	mov	r2, sp
 803125c:	2100      	movs	r1, #0
 803125e:	2007      	movs	r0, #7
 8031260:	f7ff fe9b 	bl	8030f9a <wllora_spibus_io>

    // Sync word is too far away to be done in a single write
    wllora_write(RFREG_LR_SYNCWORD, syncword[offset]);
 8031264:	4b0b      	ldr	r3, [pc, #44]	; (8031294 <wlloradrv_mdmconfig+0xa0>)
 8031266:	5d19      	ldrb	r1, [r3, r4]
 8031268:	2039      	movs	r0, #57	; 0x39
 803126a:	f000 fbfd 	bl	8031a68 <wllora_write>

}
 803126e:	b003      	add	sp, #12
 8031270:	bcc0      	pop	{r6, r7}
 8031272:	46b9      	mov	r9, r7
 8031274:	46b0      	mov	r8, r6
 8031276:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mdmregs[6]  = (param == 0) ? deflength[offset] : param;
 8031278:	b2ed      	uxtb	r5, r5
 803127a:	e7ec      	b.n	8031256 <wlloradrv_mdmconfig+0x62>
 803127c:	08036db0 	.word	0x08036db0
 8031280:	2000c480 	.word	0x2000c480
 8031284:	08036ef0 	.word	0x08036ef0
 8031288:	08036ef4 	.word	0x08036ef4
 803128c:	08036f04 	.word	0x08036f04
 8031290:	08036ec0 	.word	0x08036ec0
 8031294:	08036f0c 	.word	0x08036f0c

08031298 <radio_gag>:
   radio_sleep();
}
#endif

#ifndef EXTF_radio_gag
OT_WEAK void radio_gag(void) {
 8031298:	b510      	push	{r4, lr}
    wllora_int_off();                       // Disable pin interrutps on MCU
 803129a:	f000 fb93 	bl	80319c4 <wllora_int_off>
    wllora_write(RFREG_LR_IRQFLAGS, 0xFF);  // Clear Register IRQ Flags on SX127x
 803129e:	21ff      	movs	r1, #255	; 0xff
 80312a0:	2012      	movs	r0, #18
 80312a2:	f000 fbe1 	bl	8031a68 <wllora_write>
}
 80312a6:	bd10      	pop	{r4, pc}

080312a8 <radio_finish>:
OT_WEAK void radio_finish(ot_int main_err, ot_int frame_err) {
 80312a8:	b570      	push	{r4, r5, r6, lr}
 80312aa:	0004      	movs	r4, r0
 80312ac:	000d      	movs	r5, r1
    radio_gag();                            // redundant, but here for robustness
 80312ae:	f7ff fff3 	bl	8031298 <radio_gag>
    dll_unblock();                          // also redundant and here for robustness
 80312b2:	f001 f8b3 	bl	803241c <dll_unblock>
    rfctl.state     = 0;
 80312b6:	4b07      	ldr	r3, [pc, #28]	; (80312d4 <radio_finish+0x2c>)
 80312b8:	2200      	movs	r2, #0
 80312ba:	701a      	strb	r2, [r3, #0]
    rfctl.flags    &= (RADIO_FLAG_XOON);    //clear all other flags
 80312bc:	7859      	ldrb	r1, [r3, #1]
 80312be:	3240      	adds	r2, #64	; 0x40
 80312c0:	400a      	ands	r2, r1
 80312c2:	705a      	strb	r2, [r3, #1]
    callback        = radio.evtdone;
 80312c4:	4b04      	ldr	r3, [pc, #16]	; (80312d8 <radio_finish+0x30>)
 80312c6:	689a      	ldr	r2, [r3, #8]
    radio.evtdone   = &otutils_sig2_null;
 80312c8:	4904      	ldr	r1, [pc, #16]	; (80312dc <radio_finish+0x34>)
 80312ca:	6099      	str	r1, [r3, #8]
    callback(main_err, frame_err);
 80312cc:	0029      	movs	r1, r5
 80312ce:	0020      	movs	r0, r4
 80312d0:	4790      	blx	r2
}
 80312d2:	bd70      	pop	{r4, r5, r6, pc}
 80312d4:	2000c2e4 	.word	0x2000c2e4
 80312d8:	2000c488 	.word	0x2000c488
 80312dc:	08034983 	.word	0x08034983

080312e0 <rm2_rxinit>:
OT_WEAK void rm2_rxinit(ot_u8 channel, ot_u8 psettings, ot_sig2 callback) {
 80312e0:	b570      	push	{r4, r5, r6, lr}
    __DEBUG_ERRCODE_EVAL(=200);
 80312e2:	4b24      	ldr	r3, [pc, #144]	; (8031374 <rm2_rxinit+0x94>)
 80312e4:	2400      	movs	r4, #0
 80312e6:	801c      	strh	r4, [r3, #0]
 80312e8:	34c8      	adds	r4, #200	; 0xc8
 80312ea:	805c      	strh	r4, [r3, #2]
    radio.evtdone   = callback;
 80312ec:	4b22      	ldr	r3, [pc, #136]	; (8031378 <rm2_rxinit+0x98>)
 80312ee:	609a      	str	r2, [r3, #8]
    rfctl.flags    &= ~(RADIO_FLAG_CONT | RADIO_FLAG_BG | RADIO_FLAG_PG);
 80312f0:	4a22      	ldr	r2, [pc, #136]	; (803137c <rm2_rxinit+0x9c>)
 80312f2:	7853      	ldrb	r3, [r2, #1]
 80312f4:	3cc1      	subs	r4, #193	; 0xc1
 80312f6:	43a3      	bics	r3, r4
 80312f8:	7053      	strb	r3, [r2, #1]
    rfctl.tries 	= 1;
 80312fa:	3c06      	subs	r4, #6
 80312fc:	7094      	strb	r4, [r2, #2]
    if (psettings & (M2_NETFLAG_BG)) {
 80312fe:	064a      	lsls	r2, r1, #25
 8031300:	d51b      	bpl.n	803133a <rm2_rxinit+0x5a>
        if ((psettings & M2_NETFLAG_STREAM) == 0) {
 8031302:	b24a      	sxtb	r2, r1
 8031304:	2a00      	cmp	r2, #0
 8031306:	db06      	blt.n	8031316 <rm2_rxinit+0x36>
            rfctl.flags |= RADIO_FLAG_PG;
 8031308:	2204      	movs	r2, #4
 803130a:	4313      	orrs	r3, r2
 803130c:	4a1b      	ldr	r2, [pc, #108]	; (803137c <rm2_rxinit+0x9c>)
 803130e:	7053      	strb	r3, [r2, #1]
        	sub_init = &sub_initrx;
 8031310:	4d1b      	ldr	r5, [pc, #108]	; (8031380 <rm2_rxinit+0xa0>)
        	initvals = (ot_u8*)pginit;
 8031312:	4c1c      	ldr	r4, [pc, #112]	; (8031384 <rm2_rxinit+0xa4>)
 8031314:	e013      	b.n	803133e <rm2_rxinit+0x5e>
        else if (psettings & M2_NETSTATE_INIT) {
 8031316:	070a      	lsls	r2, r1, #28
 8031318:	d508      	bpl.n	803132c <rm2_rxinit+0x4c>
            rfctl.flags |= RADIO_FLAG_BG;
 803131a:	4a18      	ldr	r2, [pc, #96]	; (803137c <rm2_rxinit+0x9c>)
 803131c:	2101      	movs	r1, #1
 803131e:	430b      	orrs	r3, r1
 8031320:	7053      	strb	r3, [r2, #1]
            rfctl.tries = 3;
 8031322:	2303      	movs	r3, #3
 8031324:	7093      	strb	r3, [r2, #2]
		    sub_init 	= &sub_initcad;
 8031326:	4d18      	ldr	r5, [pc, #96]	; (8031388 <rm2_rxinit+0xa8>)
		    initvals 	= (ot_u8*)bg1init;
 8031328:	4c18      	ldr	r4, [pc, #96]	; (803138c <rm2_rxinit+0xac>)
 803132a:	e008      	b.n	803133e <rm2_rxinit+0x5e>
		    rfctl.flags |= RADIO_FLAG_BG;
 803132c:	2201      	movs	r2, #1
 803132e:	4313      	orrs	r3, r2
 8031330:	4a12      	ldr	r2, [pc, #72]	; (803137c <rm2_rxinit+0x9c>)
 8031332:	7053      	strb	r3, [r2, #1]
            sub_init = &sub_initrx;
 8031334:	4d12      	ldr	r5, [pc, #72]	; (8031380 <rm2_rxinit+0xa0>)
            initvals = (ot_u8*)bg2init;
 8031336:	4c16      	ldr	r4, [pc, #88]	; (8031390 <rm2_rxinit+0xb0>)
 8031338:	e001      	b.n	803133e <rm2_rxinit+0x5e>
        sub_init    = &sub_initrx;
 803133a:	4d11      	ldr	r5, [pc, #68]	; (8031380 <rm2_rxinit+0xa0>)
        initvals    = (ot_u8*)fginit;
 803133c:	4c15      	ldr	r4, [pc, #84]	; (8031394 <rm2_rxinit+0xb4>)
    if (rm2_test_channel(channel) == False) {
 803133e:	f001 ff71 	bl	8033224 <rm2_test_channel>
 8031342:	2800      	cmp	r0, #0
 8031344:	d00f      	beq.n	8031366 <rm2_rxinit+0x86>
    wlloradrv_mdmconfig(initvals[0], initvals[1], initvals[2], 0);
 8031346:	7820      	ldrb	r0, [r4, #0]
 8031348:	7861      	ldrb	r1, [r4, #1]
 803134a:	78a2      	ldrb	r2, [r4, #2]
 803134c:	2300      	movs	r3, #0
 803134e:	f7ff ff51 	bl	80311f4 <wlloradrv_mdmconfig>
    rfctl.iter_ti = (ot_u8)(wllora_block_miti(&phymac[0]) >> 8) + 1;
 8031352:	4811      	ldr	r0, [pc, #68]	; (8031398 <rm2_rxinit+0xb8>)
 8031354:	f000 fb18 	bl	8031988 <wllora_block_miti>
 8031358:	0a00      	lsrs	r0, r0, #8
 803135a:	b2c0      	uxtb	r0, r0
 803135c:	3001      	adds	r0, #1
 803135e:	4b07      	ldr	r3, [pc, #28]	; (803137c <rm2_rxinit+0x9c>)
 8031360:	70d8      	strb	r0, [r3, #3]
    sub_init();
 8031362:	47a8      	blx	r5
}
 8031364:	bd70      	pop	{r4, r5, r6, pc}
        radio_finish(RM2_ERR_BADCHANNEL, 0);
 8031366:	3003      	adds	r0, #3
 8031368:	2100      	movs	r1, #0
 803136a:	4240      	negs	r0, r0
 803136c:	f7ff ff9c 	bl	80312a8 <radio_finish>
        return;
 8031370:	e7f8      	b.n	8031364 <rm2_rxinit+0x84>
 8031372:	46c0      	nop			; (mov r8, r8)
 8031374:	2000cc2c 	.word	0x2000cc2c
 8031378:	2000c488 	.word	0x2000c488
 803137c:	2000c2e4 	.word	0x2000c2e4
 8031380:	08031485 	.word	0x08031485
 8031384:	08036f00 	.word	0x08036f00
 8031388:	08031005 	.word	0x08031005
 803138c:	08036eb8 	.word	0x08036eb8
 8031390:	08036ebc 	.word	0x08036ebc
 8031394:	08036ee8 	.word	0x08036ee8
 8031398:	2000c480 	.word	0x2000c480

0803139c <rm2_rxtimeout_isr>:
OT_WEAK void rm2_rxtimeout_isr(void) {
 803139c:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=280);
 803139e:	4b07      	ldr	r3, [pc, #28]	; (80313bc <rm2_rxtimeout_isr+0x20>)
 80313a0:	2200      	movs	r2, #0
 80313a2:	801a      	strh	r2, [r3, #0]
 80313a4:	3219      	adds	r2, #25
 80313a6:	32ff      	adds	r2, #255	; 0xff
 80313a8:	805a      	strh	r2, [r3, #2]
    radio_gag();
 80313aa:	f7ff ff75 	bl	8031298 <radio_gag>
    radio_finish(RM2_ERR_TIMEOUT, 1 /*radio.link.sqi*/);
 80313ae:	2004      	movs	r0, #4
 80313b0:	2101      	movs	r1, #1
 80313b2:	4240      	negs	r0, r0
 80313b4:	f7ff ff78 	bl	80312a8 <radio_finish>
}
 80313b8:	bd10      	pop	{r4, pc}
 80313ba:	46c0      	nop			; (mov r8, r8)
 80313bc:	2000cc2c 	.word	0x2000cc2c

080313c0 <radio_sleep>:
    }
}
#endif

#ifndef EXTF_radio_sleep
OT_WEAK void radio_sleep(void) {
 80313c0:	b510      	push	{r4, lr}
    wllora_antsw_off();
 80313c2:	f7ff fdeb 	bl	8030f9c <wllora_antsw_off>
    wllora_strobe(_OPMODE_SLEEP, True);
 80313c6:	2101      	movs	r1, #1
 80313c8:	2000      	movs	r0, #0
 80313ca:	f000 fb79 	bl	8031ac0 <wllora_strobe>
//        radio.state  = RADIO_Idle;
//        rfctl.flags &= ~RADIO_FLAG_PWRMASK;
//        wllora_strobe(_OPMODE_SLEEP);
//        wllora_waitfor_sleep();
//    }
}
 80313ce:	bd10      	pop	{r4, pc}

080313d0 <radio_idle>:
#endif

#ifndef EXTF_radio_idle
OT_WEAK void radio_idle(void) {
 80313d0:	b510      	push	{r4, lr}
    wllora_antsw_on();                    ///@todo see if this matters
 80313d2:	f7ff fdef 	bl	8030fb4 <wllora_antsw_on>
    wllora_strobe(_OPMODE_STANDBY, True);
 80313d6:	2101      	movs	r1, #1
 80313d8:	2001      	movs	r0, #1
 80313da:	f000 fb71 	bl	8031ac0 <wllora_strobe>
//    if (!test) {
//        radio.state  = RADIO_Idle;
//        rfctl.flags |= RADIO_FLAG_XOON;
//        wlloradrv_force_standby();
//    }
}
 80313de:	bd10      	pop	{r4, pc}

080313e0 <rm2_kill>:
OT_WEAK void rm2_kill(void) {
 80313e0:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=290);
 80313e2:	4b09      	ldr	r3, [pc, #36]	; (8031408 <rm2_kill+0x28>)
 80313e4:	2200      	movs	r2, #0
 80313e6:	801a      	strh	r2, [r3, #0]
 80313e8:	3223      	adds	r2, #35	; 0x23
 80313ea:	32ff      	adds	r2, #255	; 0xff
 80313ec:	805a      	strh	r2, [r3, #2]
    radio_gag();
 80313ee:	f7ff ff53 	bl	8031298 <radio_gag>
    radio_idle();
 80313f2:	f7ff ffed 	bl	80313d0 <radio_idle>
    dll_unblock();
 80313f6:	f001 f811 	bl	803241c <dll_unblock>
    radio_finish(RM2_ERR_KILL, 0);
 80313fa:	2001      	movs	r0, #1
 80313fc:	2100      	movs	r1, #0
 80313fe:	4240      	negs	r0, r0
 8031400:	f7ff ff52 	bl	80312a8 <radio_finish>
}
 8031404:	bd10      	pop	{r4, pc}
 8031406:	46c0      	nop			; (mov r8, r8)
 8031408:	2000cc2c 	.word	0x2000cc2c

0803140c <wllora_virtual_isr>:
void wllora_virtual_isr(ot_u8 code) {
 803140c:	b510      	push	{r4, lr}
    rm2_kill();
 803140e:	f7ff ffe7 	bl	80313e0 <rm2_kill>
}
 8031412:	bd10      	pop	{r4, pc}

08031414 <sub_cad_csma>:
void sub_cad_csma(void) {
 8031414:	b510      	push	{r4, lr}
    radio_gag(); 
 8031416:	f7ff ff3f 	bl	8031298 <radio_gag>
    wllora_iocfg_cad();
 803141a:	f000 fb2b 	bl	8031a74 <wllora_iocfg_cad>
    wllora_int_csma();
 803141e:	f000 faeb 	bl	80319f8 <wllora_int_csma>
    radio_idle();
 8031422:	f7ff ffd5 	bl	80313d0 <radio_idle>
    wllora_antsw_rx();
 8031426:	f7ff fddf 	bl	8030fe8 <wllora_antsw_rx>
    wllora_strobe(_OPMODE_CAD, False);  //non-blocking call
 803142a:	2100      	movs	r1, #0
 803142c:	2007      	movs	r0, #7
 803142e:	f000 fb47 	bl	8031ac0 <wllora_strobe>
    radio.state = RADIO_Csma;
 8031432:	4b02      	ldr	r3, [pc, #8]	; (803143c <sub_cad_csma+0x28>)
 8031434:	2202      	movs	r2, #2
 8031436:	701a      	strb	r2, [r3, #0]
}
 8031438:	bd10      	pop	{r4, pc}
 803143a:	46c0      	nop			; (mov r8, r8)
 803143c:	2000c488 	.word	0x2000c488

08031440 <radio_flush_rx>:
/// Unused in SX127x
}
#endif

#ifndef EXTF_radio_flush_rx
OT_WEAK void radio_flush_rx(void) {
 8031440:	b510      	push	{r4, lr}
    wllora_write(RFREG_LR_FIFOADDRPTR, 0);
 8031442:	2100      	movs	r1, #0
 8031444:	200d      	movs	r0, #13
 8031446:	f000 fb0f 	bl	8031a68 <wllora_write>
}
 803144a:	bd10      	pop	{r4, pc}

0803144c <rm2_reenter_rx>:
OT_WEAK void rm2_reenter_rx(ot_sig2 callback) {
 803144c:	b510      	push	{r4, lr}
    radio.evtdone   = callback;
 803144e:	4c0b      	ldr	r4, [pc, #44]	; (803147c <rm2_reenter_rx+0x30>)
 8031450:	60a0      	str	r0, [r4, #8]
    rfctl.state     = RADIO_STATE_RXAUTO;
 8031452:	4b0b      	ldr	r3, [pc, #44]	; (8031480 <rm2_reenter_rx+0x34>)
 8031454:	2200      	movs	r2, #0
 8031456:	701a      	strb	r2, [r3, #0]
    radio_gag();                            
 8031458:	f7ff ff1e 	bl	8031298 <radio_gag>
    radio_flush_rx();
 803145c:	f7ff fff0 	bl	8031440 <radio_flush_rx>
    wllora_antsw_rx();
 8031460:	f7ff fdc2 	bl	8030fe8 <wllora_antsw_rx>
    wllora_strobe(_OPMODE_RXSINGLE, False);  //wllora_strobe(opmode, False);   //non-blocking call
 8031464:	2100      	movs	r1, #0
 8031466:	2006      	movs	r0, #6
 8031468:	f000 fb2a 	bl	8031ac0 <wllora_strobe>
    wllora_int_rxdata();
 803146c:	f000 faba 	bl	80319e4 <wllora_int_rxdata>
    radio.state = RADIO_Listening;
 8031470:	2301      	movs	r3, #1
 8031472:	7023      	strb	r3, [r4, #0]
    dll_unblock();
 8031474:	f000 ffd2 	bl	803241c <dll_unblock>
}
 8031478:	bd10      	pop	{r4, pc}
 803147a:	46c0      	nop			; (mov r8, r8)
 803147c:	2000c488 	.word	0x2000c488
 8031480:	2000c2e4 	.word	0x2000c2e4

08031484 <sub_initrx>:
void sub_initrx(void) {
 8031484:	b510      	push	{r4, lr}
    wllora_iocfg_rx();
 8031486:	f000 fafd 	bl	8031a84 <wllora_iocfg_rx>
    rm2_reenter_rx(radio.evtdone);
 803148a:	4b02      	ldr	r3, [pc, #8]	; (8031494 <sub_initrx+0x10>)
 803148c:	6898      	ldr	r0, [r3, #8]
 803148e:	f7ff ffdd 	bl	803144c <rm2_reenter_rx>
}
 8031492:	bd10      	pop	{r4, pc}
 8031494:	2000c488 	.word	0x2000c488

08031498 <rm2_rxdata_isr>:
OT_WEAK void rm2_rxdata_isr() {
 8031498:	b510      	push	{r4, lr}
    em2_decode_data();
 803149a:	f000 f9fb 	bl	8031894 <em2_decode_data>
    if (em2.state < 0) {
 803149e:	4b13      	ldr	r3, [pc, #76]	; (80314ec <rm2_rxdata_isr+0x54>)
 80314a0:	2204      	movs	r2, #4
 80314a2:	5e9b      	ldrsh	r3, [r3, r2]
 80314a4:	2b00      	cmp	r3, #0
 80314a6:	db04      	blt.n	80314b2 <rm2_rxdata_isr+0x1a>
    else if ((em2.crc5 == 1) && ((rfctl.flags & 7) == 0)) {
 80314a8:	4b10      	ldr	r3, [pc, #64]	; (80314ec <rm2_rxdata_isr+0x54>)
 80314aa:	785b      	ldrb	r3, [r3, #1]
 80314ac:	2b01      	cmp	r3, #1
 80314ae:	d00d      	beq.n	80314cc <rm2_rxdata_isr+0x34>
}
 80314b0:	bd10      	pop	{r4, pc}
        systim_disable_insertion();
 80314b2:	f004 f8cd 	bl	8035650 <systim_disable_insertion>
        radio.state = RADIO_Idle;
 80314b6:	4c0e      	ldr	r4, [pc, #56]	; (80314f0 <rm2_rxdata_isr+0x58>)
 80314b8:	2300      	movs	r3, #0
 80314ba:	7023      	strb	r3, [r4, #0]
        radio_gag();
 80314bc:	f7ff feec 	bl	8031298 <radio_gag>
        radio_idle();
 80314c0:	f7ff ff86 	bl	80313d0 <radio_idle>
        rm2_reenter_rx(radio.evtdone);
 80314c4:	68a0      	ldr	r0, [r4, #8]
 80314c6:	f7ff ffc1 	bl	803144c <rm2_reenter_rx>
 80314ca:	e7f1      	b.n	80314b0 <rm2_rxdata_isr+0x18>
    else if ((em2.crc5 == 1) && ((rfctl.flags & 7) == 0)) {
 80314cc:	4b09      	ldr	r3, [pc, #36]	; (80314f4 <rm2_rxdata_isr+0x5c>)
 80314ce:	785b      	ldrb	r3, [r3, #1]
 80314d0:	075b      	lsls	r3, r3, #29
 80314d2:	d1ed      	bne.n	80314b0 <rm2_rxdata_isr+0x18>
            rx_octets = rxq.front[0]+1;
 80314d4:	4b08      	ldr	r3, [pc, #32]	; (80314f8 <rm2_rxdata_isr+0x60>)
 80314d6:	68db      	ldr	r3, [r3, #12]
 80314d8:	781c      	ldrb	r4, [r3, #0]
            systim_disable_insertion();
 80314da:	f004 f8b9 	bl	8035650 <systim_disable_insertion>
        wllora_write(RFREG_LR_PAYLOADLENGTH, (ot_u8)rx_octets);
 80314de:	3401      	adds	r4, #1
 80314e0:	b2e1      	uxtb	r1, r4
 80314e2:	2022      	movs	r0, #34	; 0x22
 80314e4:	f000 fac0 	bl	8031a68 <wllora_write>
}
 80314e8:	e7e2      	b.n	80314b0 <rm2_rxdata_isr+0x18>
 80314ea:	46c0      	nop			; (mov r8, r8)
 80314ec:	2000c44c 	.word	0x2000c44c
 80314f0:	2000c488 	.word	0x2000c488
 80314f4:	2000c2e4 	.word	0x2000c2e4
 80314f8:	2000cb18 	.word	0x2000cb18

080314fc <radio_flush_tx>:
#endif

#ifndef EXTF_radio_flush_tx
OT_WEAK void radio_flush_tx(void) {
 80314fc:	b510      	push	{r4, lr}
    wllora_write(RFREG_LR_FIFOADDRPTR, 0);
 80314fe:	2100      	movs	r1, #0
 8031500:	200d      	movs	r0, #13
 8031502:	f000 fab1 	bl	8031a68 <wllora_write>
}
 8031506:	bd10      	pop	{r4, pc}

08031508 <rm2_txcsma_isr>:
OT_WEAK void rm2_txcsma_isr(void) {
 8031508:	b510      	push	{r4, lr}
    switch ( (rfctl.state >> RADIO_STATE_TXSHIFT) & (RADIO_STATE_TXMASK >> RADIO_STATE_TXSHIFT) ) {
 803150a:	4b43      	ldr	r3, [pc, #268]	; (8031618 <rm2_txcsma_isr+0x110>)
 803150c:	781a      	ldrb	r2, [r3, #0]
 803150e:	08d2      	lsrs	r2, r2, #3
 8031510:	2307      	movs	r3, #7
 8031512:	0019      	movs	r1, r3
 8031514:	4011      	ands	r1, r2
 8031516:	2906      	cmp	r1, #6
 8031518:	d86b      	bhi.n	80315f2 <rm2_txcsma_isr+0xea>
 803151a:	0089      	lsls	r1, r1, #2
 803151c:	4a3f      	ldr	r2, [pc, #252]	; (803161c <rm2_txcsma_isr+0x114>)
 803151e:	5853      	ldr	r3, [r2, r1]
 8031520:	469f      	mov	pc, r3
            if (rm2_test_chanlist() == False) {
 8031522:	f001 fe95 	bl	8033250 <rm2_test_chanlist>
 8031526:	2800      	cmp	r0, #0
 8031528:	d106      	bne.n	8031538 <rm2_txcsma_isr+0x30>
                radio.evtdone(RM2_ERR_BADCHANNEL, 0);
 803152a:	4b3d      	ldr	r3, [pc, #244]	; (8031620 <rm2_txcsma_isr+0x118>)
 803152c:	689b      	ldr	r3, [r3, #8]
 803152e:	3003      	adds	r0, #3
 8031530:	2100      	movs	r1, #0
 8031532:	4240      	negs	r0, r0
 8031534:	4798      	blx	r3
                break;
 8031536:	e05c      	b.n	80315f2 <rm2_txcsma_isr+0xea>
            radio_activate_queue(&txq);
 8031538:	483a      	ldr	r0, [pc, #232]	; (8031624 <rm2_txcsma_isr+0x11c>)
 803153a:	f7ff fd97 	bl	803106c <radio_activate_queue>
            em2_encode_newpacket();
 803153e:	f000 f923 	bl	8031788 <em2_encode_newpacket>
            em2_encode_newframe();
 8031542:	f000 f923 	bl	803178c <em2_encode_newframe>
            type = mode_lut[rfctl.flags & 7];
 8031546:	4b34      	ldr	r3, [pc, #208]	; (8031618 <rm2_txcsma_isr+0x110>)
 8031548:	785a      	ldrb	r2, [r3, #1]
 803154a:	2307      	movs	r3, #7
 803154c:	4013      	ands	r3, r2
 803154e:	4a36      	ldr	r2, [pc, #216]	; (8031628 <rm2_txcsma_isr+0x120>)
 8031550:	5cd0      	ldrb	r0, [r2, r3]
            wlloradrv_mdmconfig(type, (DRF_LR_MODEMCONFIG2 & 0x0F), (0), em2.bytes);
 8031552:	4b36      	ldr	r3, [pc, #216]	; (803162c <rm2_txcsma_isr+0x124>)
 8031554:	2202      	movs	r2, #2
 8031556:	5e9b      	ldrsh	r3, [r3, r2]
 8031558:	2200      	movs	r2, #0
 803155a:	2104      	movs	r1, #4
 803155c:	f7ff fe4a 	bl	80311f4 <wlloradrv_mdmconfig>
            wllora_int_off();
 8031560:	f000 fa30 	bl	80319c4 <wllora_int_off>
                goto rm2_txcsma_START;
 8031564:	e01c      	b.n	80315a0 <rm2_txcsma_isr+0x98>
            rfctl.state = RADIO_STATE_TXCCA1;
 8031566:	4b2c      	ldr	r3, [pc, #176]	; (8031618 <rm2_txcsma_isr+0x110>)
 8031568:	2218      	movs	r2, #24
 803156a:	701a      	strb	r2, [r3, #0]
            sub_cad_csma();
 803156c:	f7ff ff52 	bl	8031414 <sub_cad_csma>
            break;
 8031570:	e03f      	b.n	80315f2 <rm2_txcsma_isr+0xea>
            if (sub_cca_isfail() == False) {
 8031572:	f7ff fe29 	bl	80311c8 <sub_cca_isfail>
 8031576:	2800      	cmp	r0, #0
 8031578:	d13b      	bne.n	80315f2 <rm2_txcsma_isr+0xea>
                radio_sleep();
 803157a:	f7ff ff21 	bl	80313c0 <radio_sleep>
                rfctl.state = RADIO_STATE_TXCAD2;
 803157e:	4b26      	ldr	r3, [pc, #152]	; (8031618 <rm2_txcsma_isr+0x110>)
 8031580:	2220      	movs	r2, #32
 8031582:	701a      	strb	r2, [r3, #0]
                radio_set_mactimer(0 /*phymac[0].tg */);
 8031584:	2000      	movs	r0, #0
 8031586:	f7ff fd69 	bl	803105c <radio_set_mactimer>
 803158a:	e032      	b.n	80315f2 <rm2_txcsma_isr+0xea>
            rfctl.state = RADIO_STATE_TXCCA2;
 803158c:	4b22      	ldr	r3, [pc, #136]	; (8031618 <rm2_txcsma_isr+0x110>)
 803158e:	2228      	movs	r2, #40	; 0x28
 8031590:	701a      	strb	r2, [r3, #0]
            sub_cad_csma();
 8031592:	f7ff ff3f 	bl	8031414 <sub_cad_csma>
            break;
 8031596:	e02c      	b.n	80315f2 <rm2_txcsma_isr+0xea>
            if (sub_cca_isfail()) {
 8031598:	f7ff fe16 	bl	80311c8 <sub_cca_isfail>
 803159c:	2800      	cmp	r0, #0
 803159e:	d128      	bne.n	80315f2 <rm2_txcsma_isr+0xea>
            rfctl.state = RADIO_STATE_TXSTART;
 80315a0:	4c1d      	ldr	r4, [pc, #116]	; (8031618 <rm2_txcsma_isr+0x110>)
 80315a2:	2330      	movs	r3, #48	; 0x30
 80315a4:	7023      	strb	r3, [r4, #0]
            radio.evtdone(0, (rfctl.flags & (RADIO_FLAG_PG | RADIO_FLAG_CONT | RADIO_FLAG_BG)));
 80315a6:	4b1e      	ldr	r3, [pc, #120]	; (8031620 <rm2_txcsma_isr+0x118>)
 80315a8:	689b      	ldr	r3, [r3, #8]
 80315aa:	7862      	ldrb	r2, [r4, #1]
 80315ac:	2107      	movs	r1, #7
 80315ae:	4011      	ands	r1, r2
 80315b0:	2000      	movs	r0, #0
 80315b2:	4798      	blx	r3
            radio_gag();
 80315b4:	f7ff fe70 	bl	8031298 <radio_gag>
            txq.front[2] = phymac[0].tx_eirp;
 80315b8:	4b1a      	ldr	r3, [pc, #104]	; (8031624 <rm2_txcsma_isr+0x11c>)
 80315ba:	68db      	ldr	r3, [r3, #12]
 80315bc:	4a1c      	ldr	r2, [pc, #112]	; (8031630 <rm2_txcsma_isr+0x128>)
 80315be:	7912      	ldrb	r2, [r2, #4]
 80315c0:	709a      	strb	r2, [r3, #2]
            if (rfctl.flags & RADIO_FLAG_BG) {
 80315c2:	7863      	ldrb	r3, [r4, #1]
 80315c4:	07db      	lsls	r3, r3, #31
 80315c6:	d415      	bmi.n	80315f4 <rm2_txcsma_isr+0xec>
            radio_flush_tx();
 80315c8:	f7ff ff98 	bl	80314fc <radio_flush_tx>
            em2_encode_data();
 80315cc:	f000 f932 	bl	8031834 <em2_encode_data>
            radio.state = RADIO_DataTX;
 80315d0:	4b13      	ldr	r3, [pc, #76]	; (8031620 <rm2_txcsma_isr+0x118>)
 80315d2:	2206      	movs	r2, #6
 80315d4:	701a      	strb	r2, [r3, #0]
            rfctl.state = RADIO_STATE_TXDATA;
 80315d6:	4b10      	ldr	r3, [pc, #64]	; (8031618 <rm2_txcsma_isr+0x110>)
 80315d8:	3232      	adds	r2, #50	; 0x32
 80315da:	701a      	strb	r2, [r3, #0]
            wllora_iocfg_tx();
 80315dc:	f000 fa5a 	bl	8031a94 <wllora_iocfg_tx>
            wllora_antsw_tx((ot_bool)BOARD_FEATURE(RF_PABOOST));
 80315e0:	2000      	movs	r0, #0
 80315e2:	f7ff fcf5 	bl	8030fd0 <wllora_antsw_tx>
            wllora_int_txdata();
 80315e6:	f000 fa11 	bl	8031a0c <wllora_int_txdata>
            wllora_strobe(_OPMODE_TX, False);   //non-blocking call
 80315ea:	2100      	movs	r1, #0
 80315ec:	2003      	movs	r0, #3
 80315ee:	f000 fa67 	bl	8031ac0 <wllora_strobe>
}
 80315f2:	bd10      	pop	{r4, pc}
                radio_idle();
 80315f4:	f7ff feec 	bl	80313d0 <radio_idle>
                if (rfctl.flags & RADIO_FLAG_CONT) {
 80315f8:	4b07      	ldr	r3, [pc, #28]	; (8031618 <rm2_txcsma_isr+0x110>)
 80315fa:	785b      	ldrb	r3, [r3, #1]
 80315fc:	079b      	lsls	r3, r3, #30
 80315fe:	d408      	bmi.n	8031612 <rm2_txcsma_isr+0x10a>
                radio.evtdone((rfctl.flags & RADIO_FLAG_CONT), 0);
 8031600:	4b07      	ldr	r3, [pc, #28]	; (8031620 <rm2_txcsma_isr+0x118>)
 8031602:	689b      	ldr	r3, [r3, #8]
 8031604:	4a04      	ldr	r2, [pc, #16]	; (8031618 <rm2_txcsma_isr+0x110>)
 8031606:	7852      	ldrb	r2, [r2, #1]
 8031608:	2002      	movs	r0, #2
 803160a:	4010      	ands	r0, r2
 803160c:	2100      	movs	r1, #0
 803160e:	4798      	blx	r3
 8031610:	e7da      	b.n	80315c8 <rm2_txcsma_isr+0xc0>
                    rm2_flood_txstart();
 8031612:	f7ff fd97 	bl	8031144 <rm2_flood_txstart>
 8031616:	e7f3      	b.n	8031600 <rm2_txcsma_isr+0xf8>
 8031618:	2000c2e4 	.word	0x2000c2e4
 803161c:	08036e9c 	.word	0x08036e9c
 8031620:	2000c488 	.word	0x2000c488
 8031624:	2000cb2c 	.word	0x2000cb2c
 8031628:	08036ef8 	.word	0x08036ef8
 803162c:	2000c44c 	.word	0x2000c44c
 8031630:	2000c480 	.word	0x2000c480

08031634 <radio_mac_isr>:
OT_WEAK void radio_mac_isr(void) {
 8031634:	b510      	push	{r4, lr}
	if (radio.state == RADIO_DataRX) {
 8031636:	4b0e      	ldr	r3, [pc, #56]	; (8031670 <radio_mac_isr+0x3c>)
 8031638:	781b      	ldrb	r3, [r3, #0]
 803163a:	2b05      	cmp	r3, #5
 803163c:	d00a      	beq.n	8031654 <radio_mac_isr+0x20>
	systim_disable_insertion();
 803163e:	f004 f807 	bl	8035650 <systim_disable_insertion>
    if (radio.state == RADIO_Csma) {
 8031642:	4b0b      	ldr	r3, [pc, #44]	; (8031670 <radio_mac_isr+0x3c>)
 8031644:	781b      	ldrb	r3, [r3, #0]
 8031646:	2b02      	cmp	r3, #2
 8031648:	d007      	beq.n	803165a <radio_mac_isr+0x26>
    if (radio.state == RADIO_Listening) {
 803164a:	2b01      	cmp	r3, #1
 803164c:	d008      	beq.n	8031660 <radio_mac_isr+0x2c>
	rm2_kill();
 803164e:	f7ff fec7 	bl	80313e0 <rm2_kill>
}
 8031652:	bd10      	pop	{r4, pc}
		rm2_rxdata_isr();
 8031654:	f7ff ff20 	bl	8031498 <rm2_rxdata_isr>
		return;
 8031658:	e7fb      	b.n	8031652 <radio_mac_isr+0x1e>
    	rm2_txcsma_isr();
 803165a:	f7ff ff55 	bl	8031508 <rm2_txcsma_isr>
    	return;
 803165e:	e7f8      	b.n	8031652 <radio_mac_isr+0x1e>
    	chan_rssi = wllora_read(RFREG_LR_RSSIVALUE);
 8031660:	201b      	movs	r0, #27
 8031662:	f000 f9df 	bl	8031a24 <wllora_read>
    	if (chan_rssi >= phymac[0].cs_thr) {
 8031666:	4b03      	ldr	r3, [pc, #12]	; (8031674 <radio_mac_isr+0x40>)
 8031668:	799b      	ldrb	r3, [r3, #6]
 803166a:	4283      	cmp	r3, r0
 803166c:	d8ef      	bhi.n	803164e <radio_mac_isr+0x1a>
 803166e:	e7f0      	b.n	8031652 <radio_mac_isr+0x1e>
 8031670:	2000c488 	.word	0x2000c488
 8031674:	2000c480 	.word	0x2000c480

08031678 <radio_getlinkinfo>:
#   if (M2_FEATURE_HSCODE)
    return &loralink;
#   else
    return NULL;
#   endif
}
 8031678:	2000      	movs	r0, #0
 803167a:	4770      	bx	lr

0803167c <radio_getpwrcode>:
#endif

#ifndef EXTF_radio_getpwrcode
OT_WEAK ot_u8 radio_getpwrcode(void) {
 803167c:	b510      	push	{r4, lr}
/// Power code: 0-3.  wllora_getbasepwr() typically returns 3 on most platforms
    return wllora_getbasepwr() - (radio.state > RADIO_Idle);
 803167e:	f7ff fc79 	bl	8030f74 <wllora_getbasepwr>
 8031682:	4b03      	ldr	r3, [pc, #12]	; (8031690 <radio_getpwrcode+0x14>)
 8031684:	781b      	ldrb	r3, [r3, #0]
 8031686:	1e5a      	subs	r2, r3, #1
 8031688:	4193      	sbcs	r3, r2
 803168a:	1ac0      	subs	r0, r0, r3
 803168c:	b2c0      	uxtb	r0, r0
}
 803168e:	bd10      	pop	{r4, pc}
 8031690:	2000c488 	.word	0x2000c488

08031694 <sub_bytes_to_symbols_sf5>:
  * rm2_scale_codec
  */

typedef ot_uint (*converter_fn)(ot_int, ot_int);

static ot_uint sub_bytes_to_symbols_sf5(ot_int pkt_bytes, ot_int codesize) {
 8031694:	b510      	push	{r4, lr}
 8031696:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 12 + 19) / 20) * codesize );
 8031698:	00c0      	lsls	r0, r0, #3
 803169a:	3007      	adds	r0, #7
 803169c:	2114      	movs	r1, #20
 803169e:	f7fe fdc7 	bl	8030230 <__divsi3>
 80316a2:	4360      	muls	r0, r4
 80316a4:	3008      	adds	r0, #8
 80316a6:	b280      	uxth	r0, r0
}
 80316a8:	bd10      	pop	{r4, pc}

080316aa <sub_bytes_to_symbols_sf7>:
static ot_uint sub_bytes_to_symbols_sf7(ot_int pkt_bytes, ot_int codesize) {
 80316aa:	b510      	push	{r4, lr}
 80316ac:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 20 + 27) / 28) * codesize );
 80316ae:	00c0      	lsls	r0, r0, #3
 80316b0:	3007      	adds	r0, #7
 80316b2:	211c      	movs	r1, #28
 80316b4:	f7fe fdbc 	bl	8030230 <__divsi3>
 80316b8:	4360      	muls	r0, r4
 80316ba:	3008      	adds	r0, #8
 80316bc:	b280      	uxth	r0, r0
}
 80316be:	bd10      	pop	{r4, pc}

080316c0 <sub_bytes_to_symbols_sf9>:
static ot_uint sub_bytes_to_symbols_sf9(ot_int pkt_bytes, ot_int codesize) {
 80316c0:	b510      	push	{r4, lr}
 80316c2:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 28 + 35) / 36) * codesize );
 80316c4:	00c0      	lsls	r0, r0, #3
 80316c6:	3007      	adds	r0, #7
 80316c8:	2124      	movs	r1, #36	; 0x24
 80316ca:	f7fe fdb1 	bl	8030230 <__divsi3>
 80316ce:	4360      	muls	r0, r4
 80316d0:	3008      	adds	r0, #8
 80316d2:	b280      	uxth	r0, r0
}
 80316d4:	bd10      	pop	{r4, pc}

080316d6 <sub_bytes_to_symbols_sf11>:
static ot_uint sub_bytes_to_symbols_sf11(ot_int pkt_bytes, ot_int codesize) {
 80316d6:	b510      	push	{r4, lr}
 80316d8:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 36 + 43) / 44) * codesize );
 80316da:	00c0      	lsls	r0, r0, #3
 80316dc:	3007      	adds	r0, #7
 80316de:	212c      	movs	r1, #44	; 0x2c
 80316e0:	f7fe fda6 	bl	8030230 <__divsi3>
 80316e4:	4360      	muls	r0, r4
 80316e6:	3008      	adds	r0, #8
 80316e8:	b280      	uxth	r0, r0
}
 80316ea:	bd10      	pop	{r4, pc}

080316ec <sub_symbols_to_ti>:



static ot_uint sub_symbols_to_ti(ot_int symbols, ot_uint miti_per_sym) {
    ot_ulong miti;
    miti    = symbols * miti_per_sym;
 80316ec:	4348      	muls	r0, r1
    miti   += 1023;
 80316ee:	4b03      	ldr	r3, [pc, #12]	; (80316fc <sub_symbols_to_ti+0x10>)
 80316f0:	469c      	mov	ip, r3
 80316f2:	4460      	add	r0, ip
    return (ot_uint)(miti >> 10);
 80316f4:	0a80      	lsrs	r0, r0, #10
 80316f6:	b280      	uxth	r0, r0
}
 80316f8:	4770      	bx	lr
 80316fa:	46c0      	nop			; (mov r8, r8)
 80316fc:	000003ff 	.word	0x000003ff

08031700 <rm2_rxtimeout_floor>:
                0, // 1100: FEC, extra coding, PAGE         (presently unspecified)
                0, // 1101: FEC, extra coding, SF9          (presently unspecified)
                0, // 1110: FEC, extra coding, SF7          (presently unspecified)
                0, // 1111: FEC, extra coding, SF5          (presently unspecified)
        };
    return (ot_uint)bgpkt_ti_lut[ (chan_id>>4) & 0x0F ];
 8031700:	0900      	lsrs	r0, r0, #4
 8031702:	4b01      	ldr	r3, [pc, #4]	; (8031708 <rm2_rxtimeout_floor+0x8>)
 8031704:	5c18      	ldrb	r0, [r3, r0]
}
 8031706:	4770      	bx	lr
 8031708:	08036f14 	.word	0x08036f14

0803170c <rm2_default_tgd>:
            0, // 1101: FEC, extra coding, SF9          (presently unspecified)
            0, // 1110: FEC, extra coding, SF7          (presently unspecified)
            0, // 1111: FEC, extra coding, SF5          (presently unspecified)
    };
    
    return (ot_uint)tgdti_lut[ (chan_id>>4) & 0x0F ];
 803170c:	0900      	lsrs	r0, r0, #4
 803170e:	4b01      	ldr	r3, [pc, #4]	; (8031714 <rm2_default_tgd+0x8>)
 8031710:	5c18      	ldrb	r0, [r3, r0]
}
 8031712:	4770      	bx	lr
 8031714:	08036f44 	.word	0x08036f44

08031718 <rm2_bgpkt_duration>:
    ///@note this is a little bit of a hack, using em2.state, but it's OK for this hacky implementation
    return rm2_scale_codec( phymac[0].channel, em2.state );
}


ot_uint rm2_bgpkt_duration() {
 8031718:	b510      	push	{r4, lr}
    return rm2_rxtimeout_floor(phymac[0].channel);
 803171a:	4b02      	ldr	r3, [pc, #8]	; (8031724 <rm2_bgpkt_duration+0xc>)
 803171c:	7898      	ldrb	r0, [r3, #2]
 803171e:	f7ff ffef 	bl	8031700 <rm2_rxtimeout_floor>
}
 8031722:	bd10      	pop	{r4, pc}
 8031724:	2000c480 	.word	0x2000c480

08031728 <rm2_scale_codec>:


///@todo this entire function might be done in a direct lookup table, even if in blocks.
ot_uint rm2_scale_codec(ot_u8 channel_code, ot_uint buf_bytes) {
 8031728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803172a:	000e      	movs	r6, r1
    };

    ot_int codesize;
    ot_uint miti_per_sym;

    codesize        = (channel_code & 0x80) ? 4 : 5;
 803172c:	b243      	sxtb	r3, r0
 803172e:	2b00      	cmp	r3, #0
 8031730:	db17      	blt.n	8031762 <rm2_scale_codec+0x3a>
 8031732:	2705      	movs	r7, #5
    channel_code    = (channel_code >> 4) & 3;
 8031734:	0900      	lsrs	r0, r0, #4
 8031736:	2403      	movs	r4, #3
 8031738:	4004      	ands	r4, r0
    miti_per_sym    = wllora_symbol_miti(phymac[0].flags, channel_code);
 803173a:	4b0b      	ldr	r3, [pc, #44]	; (8031768 <rm2_scale_codec+0x40>)
 803173c:	7818      	ldrb	r0, [r3, #0]
 803173e:	0021      	movs	r1, r4
 8031740:	f000 f916 	bl	8031970 <wllora_symbol_miti>
 8031744:	0005      	movs	r5, r0
    buf_bytes       = converter[channel_code](buf_bytes, codesize);
 8031746:	00a4      	lsls	r4, r4, #2
 8031748:	4b08      	ldr	r3, [pc, #32]	; (803176c <rm2_scale_codec+0x44>)
 803174a:	58e3      	ldr	r3, [r4, r3]
 803174c:	b230      	sxth	r0, r6
 803174e:	0039      	movs	r1, r7
 8031750:	4798      	blx	r3
    
    // + Also add Preamble & Sync Overhead
    // + Also add 4 or 5 symbols because LoRa TX-END is late-arriving by one symbol group
    buf_bytes  += RF_PARAM_PKT_OVERHEAD + codesize;
 8031752:	19c0      	adds	r0, r0, r7
 8031754:	b280      	uxth	r0, r0
 8031756:	300f      	adds	r0, #15
    
    return sub_symbols_to_ti(buf_bytes, miti_per_sym);
 8031758:	b200      	sxth	r0, r0
 803175a:	0029      	movs	r1, r5
 803175c:	f7ff ffc6 	bl	80316ec <sub_symbols_to_ti>
}
 8031760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    codesize        = (channel_code & 0x80) ? 4 : 5;
 8031762:	2704      	movs	r7, #4
 8031764:	e7e6      	b.n	8031734 <rm2_scale_codec+0xc>
 8031766:	46c0      	nop			; (mov r8, r8)
 8031768:	2000c480 	.word	0x2000c480
 803176c:	08036f24 	.word	0x08036f24

08031770 <rm2_txpkt_duration>:
ot_uint rm2_txpkt_duration(ot_queue* pkt_q) {
 8031770:	b510      	push	{r4, lr}
    return rm2_scale_codec( phymac[0].channel, em2.state );
 8031772:	4b03      	ldr	r3, [pc, #12]	; (8031780 <rm2_txpkt_duration+0x10>)
 8031774:	8899      	ldrh	r1, [r3, #4]
 8031776:	4b03      	ldr	r3, [pc, #12]	; (8031784 <rm2_txpkt_duration+0x14>)
 8031778:	7898      	ldrb	r0, [r3, #2]
 803177a:	f7ff ffd5 	bl	8031728 <rm2_scale_codec>
}
 803177e:	bd10      	pop	{r4, pc}
 8031780:	2000c44c 	.word	0x2000c44c
 8031784:	2000c480 	.word	0x2000c480

08031788 <em2_encode_newpacket>:
  * has these optimized encode and decode functions.
  *
  */

void em2_encode_newpacket() {
}
 8031788:	4770      	bx	lr
	...

0803178c <em2_encode_newframe>:





void em2_encode_newframe() {
 803178c:	b570      	push	{r4, r5, r6, lr}
        {0, 2},             // b111 : PG/BG encoded (impossible)
        };
#   endif
    ///@todo this retransmission case is broken since state was reassigned to bit counter
    /// Case where this is a retransmission.  Don't re-encode.
    if (txq.options.ubyte[UPPER] == 0) {
 803178e:	4b23      	ldr	r3, [pc, #140]	; (803181c <em2_encode_newframe+0x90>)
 8031790:	78db      	ldrb	r3, [r3, #3]
 8031792:	2b00      	cmp	r3, #0
 8031794:	d104      	bne.n	80317a0 <em2_encode_newframe+0x14>
        em2.bytes = em2.state;
 8031796:	4b22      	ldr	r3, [pc, #136]	; (8031820 <em2_encode_newframe+0x94>)
 8031798:	2104      	movs	r1, #4
 803179a:	5e5a      	ldrsh	r2, [r3, r1]
 803179c:	805a      	strh	r2, [r3, #2]
#       endif

		/// Save amount of encoded bytes for this frame (last frame) in state
		em2.state = em2.bytes;
    }
}
 803179e:	bd70      	pop	{r4, r5, r6, pc}
        selector = (rfctl.flags & 5) | ((phymac[0].channel >> 6) & 2);
 80317a0:	4b20      	ldr	r3, [pc, #128]	; (8031824 <em2_encode_newframe+0x98>)
 80317a2:	785b      	ldrb	r3, [r3, #1]
 80317a4:	b25b      	sxtb	r3, r3
 80317a6:	2605      	movs	r6, #5
 80317a8:	401e      	ands	r6, r3
 80317aa:	4b1f      	ldr	r3, [pc, #124]	; (8031828 <em2_encode_newframe+0x9c>)
 80317ac:	789a      	ldrb	r2, [r3, #2]
 80317ae:	0992      	lsrs	r2, r2, #6
 80317b0:	2302      	movs	r3, #2
 80317b2:	4013      	ands	r3, r2
 80317b4:	431e      	orrs	r6, r3
        txq.options.ubyte[LOWER]= frparams[selector][0];
 80317b6:	4b1d      	ldr	r3, [pc, #116]	; (803182c <em2_encode_newframe+0xa0>)
 80317b8:	0072      	lsls	r2, r6, #1
 80317ba:	5cd4      	ldrb	r4, [r2, r3]
 80317bc:	4d17      	ldr	r5, [pc, #92]	; (803181c <em2_encode_newframe+0x90>)
 80317be:	70ac      	strb	r4, [r5, #2]
        txq.getcursor           = txq.front + frparams[selector][1];
 80317c0:	189b      	adds	r3, r3, r2
 80317c2:	785b      	ldrb	r3, [r3, #1]
 80317c4:	68ea      	ldr	r2, [r5, #12]
 80317c6:	4694      	mov	ip, r2
 80317c8:	4463      	add	r3, ip
 80317ca:	606b      	str	r3, [r5, #4]
        bytes_to_crc            = q_span(&txq);
 80317cc:	0028      	movs	r0, r5
 80317ce:	f002 fff7 	bl	80347c0 <q_span>
 80317d2:	b282      	uxth	r2, r0
        txq.front[0]            = bytes_to_crc + frparams[selector][0];
 80317d4:	1823      	adds	r3, r4, r0
 80317d6:	68e9      	ldr	r1, [r5, #12]
 80317d8:	700b      	strb	r3, [r1, #0]
        txq.front[1]            = 0;
 80317da:	2300      	movs	r3, #0
 80317dc:	68e9      	ldr	r1, [r5, #12]
 80317de:	704b      	strb	r3, [r1, #1]
        txq.putcursor          += (frparams[selector][0] + 1);
 80317e0:	1c63      	adds	r3, r4, #1
 80317e2:	68a9      	ldr	r1, [r5, #8]
 80317e4:	468c      	mov	ip, r1
 80317e6:	4463      	add	r3, ip
 80317e8:	60ab      	str	r3, [r5, #8]
        em2.bytes               = bytes_to_crc + (frparams[selector][0] + 1);
 80317ea:	18a4      	adds	r4, r4, r2
 80317ec:	3401      	adds	r4, #1
 80317ee:	4b0c      	ldr	r3, [pc, #48]	; (8031820 <em2_encode_newframe+0x94>)
 80317f0:	805c      	strh	r4, [r3, #2]
        if ((selector & 1) == 0) {
 80317f2:	07f3      	lsls	r3, r6, #31
 80317f4:	d506      	bpl.n	8031804 <em2_encode_newframe+0x78>
        if (selector == 0) {
 80317f6:	2e00      	cmp	r6, #0
 80317f8:	d00c      	beq.n	8031814 <em2_encode_newframe+0x88>
		em2.state = em2.bytes;
 80317fa:	4b09      	ldr	r3, [pc, #36]	; (8031820 <em2_encode_newframe+0x94>)
 80317fc:	2102      	movs	r1, #2
 80317fe:	5e5a      	ldrsh	r2, [r3, r1]
 8031800:	809a      	strh	r2, [r3, #4]
}
 8031802:	e7cc      	b.n	803179e <em2_encode_newframe+0x12>
            crc_init_stream(&em2.crc, True, bytes_to_crc, txq.getcursor);
 8031804:	4b05      	ldr	r3, [pc, #20]	; (803181c <em2_encode_newframe+0x90>)
 8031806:	685b      	ldr	r3, [r3, #4]
 8031808:	0002      	movs	r2, r0
 803180a:	2101      	movs	r1, #1
 803180c:	4808      	ldr	r0, [pc, #32]	; (8031830 <em2_encode_newframe+0xa4>)
 803180e:	f002 ff1d 	bl	803464c <crc_init_stream>
 8031812:	e7f0      	b.n	80317f6 <em2_encode_newframe+0x6a>
            em2_add_crc5();
 8031814:	f001 f97a 	bl	8032b0c <em2_add_crc5>
 8031818:	e7ef      	b.n	80317fa <em2_encode_newframe+0x6e>
 803181a:	46c0      	nop			; (mov r8, r8)
 803181c:	2000cb2c 	.word	0x2000cb2c
 8031820:	2000c44c 	.word	0x2000c44c
 8031824:	2000c2e4 	.word	0x2000c2e4
 8031828:	2000c480 	.word	0x2000c480
 803182c:	08036f34 	.word	0x08036f34
 8031830:	2000c454 	.word	0x2000c454

08031834 <em2_encode_data>:


void em2_encode_data(void) {
 8031834:	b510      	push	{r4, lr}
/// Only encode if this if not a retransmission
    if (txq.options.ubyte[UPPER] != 0) {
 8031836:	4b15      	ldr	r3, [pc, #84]	; (803188c <em2_encode_data+0x58>)
 8031838:	78db      	ldrb	r3, [r3, #3]
 803183a:	2b00      	cmp	r3, #0
 803183c:	d025      	beq.n	803188a <em2_encode_data+0x56>

        /// Do CRC of the long frame (FG/PG) or the short frame (BG)
        if (txq.options.ubyte[LOWER] != 0) {
 803183e:	4b13      	ldr	r3, [pc, #76]	; (803188c <em2_encode_data+0x58>)
 8031840:	789b      	ldrb	r3, [r3, #2]
 8031842:	2b00      	cmp	r3, #0
 8031844:	d005      	beq.n	8031852 <em2_encode_data+0x1e>
            crc_calc_nstream(&em2.crc, em2.crc.count);
 8031846:	4812      	ldr	r0, [pc, #72]	; (8031890 <em2_encode_data+0x5c>)
 8031848:	8981      	ldrh	r1, [r0, #12]
 803184a:	3008      	adds	r0, #8
 803184c:	f002 ff20 	bl	8034690 <crc_calc_nstream>
 8031850:	e011      	b.n	8031876 <em2_encode_data+0x42>
        }
        else {
            bgcrc8_put(txq.getcursor);
 8031852:	4b0e      	ldr	r3, [pc, #56]	; (803188c <em2_encode_data+0x58>)
 8031854:	6858      	ldr	r0, [r3, #4]
 8031856:	f000 f9c5 	bl	8031be4 <bgcrc8_put>
 803185a:	e00c      	b.n	8031876 <em2_encode_data+0x42>
        }
        else
#       endif
        {   ///@todo fix spibus_io function to have an internal buffer and such a loop as below.
            while (em2.bytes > 0) {
                ot_int fill = (em2.bytes > 32) ? 32 : em2.bytes;
 803185c:	b214      	sxth	r4, r2
                em2.bytes  -= fill;
 803185e:	1a9b      	subs	r3, r3, r2
 8031860:	4a0b      	ldr	r2, [pc, #44]	; (8031890 <em2_encode_data+0x5c>)
 8031862:	8053      	strh	r3, [r2, #2]
                wllora_burstwrite(RFREG_LR_FIFO, fill, q_markbyte(&txq, fill));
 8031864:	0021      	movs	r1, r4
 8031866:	4809      	ldr	r0, [pc, #36]	; (803188c <em2_encode_data+0x58>)
 8031868:	f002 ffee 	bl	8034848 <q_markbyte>
 803186c:	0002      	movs	r2, r0
 803186e:	b2e1      	uxtb	r1, r4
 8031870:	2000      	movs	r0, #0
 8031872:	f000 f957 	bl	8031b24 <wllora_burstwrite>
            while (em2.bytes > 0) {
 8031876:	4b06      	ldr	r3, [pc, #24]	; (8031890 <em2_encode_data+0x5c>)
 8031878:	2202      	movs	r2, #2
 803187a:	5e9b      	ldrsh	r3, [r3, r2]
 803187c:	2b00      	cmp	r3, #0
 803187e:	dd04      	ble.n	803188a <em2_encode_data+0x56>
                ot_int fill = (em2.bytes > 32) ? 32 : em2.bytes;
 8031880:	1c1a      	adds	r2, r3, #0
 8031882:	2b20      	cmp	r3, #32
 8031884:	ddea      	ble.n	803185c <em2_encode_data+0x28>
 8031886:	2220      	movs	r2, #32
 8031888:	e7e8      	b.n	803185c <em2_encode_data+0x28>
            }
        }
    }
}
 803188a:	bd10      	pop	{r4, pc}
 803188c:	2000cb2c 	.word	0x2000cb2c
 8031890:	2000c44c 	.word	0x2000c44c

08031894 <em2_decode_data>:
}




void em2_decode_data(void) {
 8031894:	b570      	push	{r4, r5, r6, lr}
    int newbytes;
    int grab;
    ot_u8* data;

    /// Live encoder needs to track the predicted bit position over the air
    em2.state += em2.lctl;
 8031896:	4b24      	ldr	r3, [pc, #144]	; (8031928 <em2_decode_data+0x94>)
 8031898:	781a      	ldrb	r2, [r3, #0]
 803189a:	8899      	ldrh	r1, [r3, #4]
 803189c:	1852      	adds	r2, r2, r1
 803189e:	809a      	strh	r2, [r3, #4]
#   endif

    /// 2. Just download whatever fresh data is in the LoRa radio and put it
    ///    on the rx queue.  After data is on the rx queue, it will be reprocessed
    ///    if it needs to be.  The implementation here has a 32 byte SPI buffer.
    rxbytes     = wllora_read(RFREG_LR_FIFORXBYTEADDR);
 80318a0:	2025      	movs	r0, #37	; 0x25
 80318a2:	f000 f8bf 	bl	8031a24 <wllora_read>
 80318a6:	0004      	movs	r4, r0
    rxptr       = wllora_read(RFREG_LR_FIFOADDRPTR);
 80318a8:	200d      	movs	r0, #13
 80318aa:	f000 f8bb 	bl	8031a24 <wllora_read>
    newbytes    = (int)rxbytes - (int)rxptr;
 80318ae:	1a24      	subs	r4, r4, r0
    tim_sv[hits_sv] = LPTIM1->CNT;
    bits_sv[hits_sv] = em2.state;
    hits_sv++;
#   endif

    if (newbytes <= 0) {
 80318b0:	2c00      	cmp	r4, #0
 80318b2:	dd2c      	ble.n	803190e <em2_decode_data+0x7a>
    }

    // rxbyte-addr is at the last loaded byte, not ahead of the last loaded byte,
    // so need to increment newbytes.
    //newbytes++;
    data = rxq.front + rxq.options.ushort + em2.bytes;
 80318b4:	4b1d      	ldr	r3, [pc, #116]	; (803192c <em2_decode_data+0x98>)
 80318b6:	68da      	ldr	r2, [r3, #12]
 80318b8:	885b      	ldrh	r3, [r3, #2]
 80318ba:	491b      	ldr	r1, [pc, #108]	; (8031928 <em2_decode_data+0x94>)
 80318bc:	2002      	movs	r0, #2
 80318be:	5e09      	ldrsh	r1, [r1, r0]
 80318c0:	185b      	adds	r3, r3, r1
 80318c2:	18d2      	adds	r2, r2, r3
	while (newbytes > 0) {
 80318c4:	e00a      	b.n	80318dc <em2_decode_data+0x48>
	    ot_u8* loadptr;
		grab        = (newbytes > 32) ? 32 : newbytes;
		newbytes   -= grab;
 80318c6:	1a64      	subs	r4, r4, r1
		em2.bytes  += grab;
 80318c8:	4817      	ldr	r0, [pc, #92]	; (8031928 <em2_decode_data+0x94>)
 80318ca:	8843      	ldrh	r3, [r0, #2]
 80318cc:	185b      	adds	r3, r3, r1
 80318ce:	8043      	strh	r3, [r0, #2]
		loadptr     = data;
		data       += grab;
 80318d0:	1855      	adds	r5, r2, r1
		wllora_burstread(RFREG_LR_FIFO, grab, loadptr);
 80318d2:	b2c9      	uxtb	r1, r1
 80318d4:	2000      	movs	r0, #0
 80318d6:	f000 f8b3 	bl	8031a40 <wllora_burstread>
		data       += grab;
 80318da:	002a      	movs	r2, r5
	while (newbytes > 0) {
 80318dc:	2c00      	cmp	r4, #0
 80318de:	dd04      	ble.n	80318ea <em2_decode_data+0x56>
		grab        = (newbytes > 32) ? 32 : newbytes;
 80318e0:	0021      	movs	r1, r4
 80318e2:	2c20      	cmp	r4, #32
 80318e4:	ddef      	ble.n	80318c6 <em2_decode_data+0x32>
 80318e6:	2120      	movs	r1, #32
 80318e8:	e7ed      	b.n	80318c6 <em2_decode_data+0x32>
		}
	}
	else
#   endif
	{
	    rxq.putcursor   = rxq.getcursor + em2.bytes;
 80318ea:	4910      	ldr	r1, [pc, #64]	; (803192c <em2_decode_data+0x98>)
 80318ec:	4b0e      	ldr	r3, [pc, #56]	; (8031928 <em2_decode_data+0x94>)
 80318ee:	2202      	movs	r2, #2
 80318f0:	5e9a      	ldrsh	r2, [r3, r2]
 80318f2:	684b      	ldr	r3, [r1, #4]
 80318f4:	189b      	adds	r3, r3, r2
 80318f6:	608b      	str	r3, [r1, #8]
	    em2.crc5       += (em2.bytes >= 2);
 80318f8:	2301      	movs	r3, #1
 80318fa:	2a01      	cmp	r2, #1
 80318fc:	dd08      	ble.n	8031910 <em2_decode_data+0x7c>
 80318fe:	b2db      	uxtb	r3, r3
 8031900:	4a09      	ldr	r2, [pc, #36]	; (8031928 <em2_decode_data+0x94>)
 8031902:	7851      	ldrb	r1, [r2, #1]
 8031904:	185b      	adds	r3, r3, r1
 8031906:	b2db      	uxtb	r3, r3
 8031908:	7053      	strb	r3, [r2, #1]
	    if (em2.crc5 == 1) {
 803190a:	2b01      	cmp	r3, #1
 803190c:	d002      	beq.n	8031914 <em2_decode_data+0x80>
	        if (em2_check_crc5() != 0) {
	            em2.state = -1;
	        }
	    }
	}
}
 803190e:	bd70      	pop	{r4, r5, r6, pc}
	    em2.crc5       += (em2.bytes >= 2);
 8031910:	2300      	movs	r3, #0
 8031912:	e7f4      	b.n	80318fe <em2_decode_data+0x6a>
	        if (em2_check_crc5() != 0) {
 8031914:	f001 f90c 	bl	8032b30 <em2_check_crc5>
 8031918:	2800      	cmp	r0, #0
 803191a:	d0f8      	beq.n	803190e <em2_decode_data+0x7a>
	            em2.state = -1;
 803191c:	4b02      	ldr	r3, [pc, #8]	; (8031928 <em2_decode_data+0x94>)
 803191e:	2201      	movs	r2, #1
 8031920:	4252      	negs	r2, r2
 8031922:	809a      	strh	r2, [r3, #4]
 8031924:	e7f3      	b.n	803190e <em2_decode_data+0x7a>
 8031926:	46c0      	nop			; (mov r8, r8)
 8031928:	2000c44c 	.word	0x2000c44c
 803192c:	2000cb18 	.word	0x2000cb18

08031930 <wllora_get_bandplan>:
};



const ot_u8* wllora_get_bandplan(ot_u8 region_code) {
    region_code &= 3;
 8031930:	2303      	movs	r3, #3
 8031932:	4018      	ands	r0, r3
    return channel_map[region_code];
 8031934:	0080      	lsls	r0, r0, #2
 8031936:	4b01      	ldr	r3, [pc, #4]	; (803193c <wllora_get_bandplan+0xc>)
 8031938:	58c0      	ldr	r0, [r0, r3]
}
 803193a:	4770      	bx	lr
 803193c:	08036f58 	.word	0x08036f58

08031940 <wllora_get_chanregs>:


const ot_u8* wllora_get_chanregs(ot_u8 region_code, ot_u8 chan_ordinal) {
 8031940:	b510      	push	{r4, lr}
 8031942:	000c      	movs	r4, r1
    const ot_u8* channel    = wllora_get_bandplan(region_code);
 8031944:	f7ff fff4 	bl	8031930 <wllora_get_bandplan>
    const ot_u8* chanregs   = &channel[chan_ordinal * FREQ_SIZE];
 8031948:	00a4      	lsls	r4, r4, #2
 803194a:	1900      	adds	r0, r0, r4
    return chanregs;
}
 803194c:	bd10      	pop	{r4, pc}

0803194e <wllora_configure_chan>:


void wllora_configure_chan(ot_u8 region_code, ot_u8 chan_ordinal) {
 803194e:	b510      	push	{r4, lr}
    const ot_u8* chanregs = wllora_get_chanregs(region_code, chan_ordinal);
 8031950:	f7ff fff6 	bl	8031940 <wllora_get_chanregs>
 8031954:	0002      	movs	r2, r0
    wllora_spibus_io(4, 0, chanregs);
 8031956:	2100      	movs	r1, #0
 8031958:	2004      	movs	r0, #4
 803195a:	f7ff fb1e 	bl	8030f9a <wllora_spibus_io>
}
 803195e:	bd10      	pop	{r4, pc}

08031960 <wllora_get_bw>:


ot_u8 wllora_get_bw(ot_u8 region_code) {
    region_code &= 3;
 8031960:	2303      	movs	r3, #3
 8031962:	4003      	ands	r3, r0

    return bandwidth_lut[region_code];
 8031964:	4a01      	ldr	r2, [pc, #4]	; (803196c <wllora_get_bw+0xc>)
 8031966:	5cd0      	ldrb	r0, [r2, r3]
}
 8031968:	4770      	bx	lr
 803196a:	46c0      	nop			; (mov r8, r8)
 803196c:	08036f54 	.word	0x08036f54

08031970 <wllora_symbol_miti>:


///@todo this is subject to change
ot_u16 wllora_symbol_miti(ot_u8 region_code, ot_u8 rate_code) {
    const ot_u16* mitipersym;
    region_code &= 3;
 8031970:	2303      	movs	r3, #3
 8031972:	4018      	ands	r0, r3
    rate_code   &= 3;
 8031974:	400b      	ands	r3, r1

    mitipersym = mitipersym_lut[region_code];
 8031976:	0080      	lsls	r0, r0, #2
 8031978:	4a02      	ldr	r2, [pc, #8]	; (8031984 <wllora_symbol_miti+0x14>)
 803197a:	5882      	ldr	r2, [r0, r2]

    return mitipersym[rate_code];
 803197c:	005b      	lsls	r3, r3, #1
 803197e:	5ad0      	ldrh	r0, [r2, r3]
}
 8031980:	4770      	bx	lr
 8031982:	46c0      	nop			; (mov r8, r8)
 8031984:	08037034 	.word	0x08037034

08031988 <wllora_block_miti>:
    const phymac_struct* pm = phy_handle;
    ot_u8 regime;
    ot_u8 rcode;
    ot_u16 miti;

    regime  = pm->flags & 3;
 8031988:	7802      	ldrb	r2, [r0, #0]
 803198a:	2303      	movs	r3, #3
 803198c:	401a      	ands	r2, r3
    rcode   = (pm->channel >> 4) & 3;
 803198e:	7881      	ldrb	r1, [r0, #2]
 8031990:	0908      	lsrs	r0, r1, #4
 8031992:	4003      	ands	r3, r0
    miti    = (mitipersym_lut[regime])[rcode];
 8031994:	0092      	lsls	r2, r2, #2
 8031996:	4806      	ldr	r0, [pc, #24]	; (80319b0 <wllora_block_miti+0x28>)
 8031998:	5812      	ldr	r2, [r2, r0]
 803199a:	005b      	lsls	r3, r3, #1
 803199c:	5ad0      	ldrh	r0, [r2, r3]
    miti   *= (pm->channel & 0x80) ? 4 : 5;
 803199e:	b249      	sxtb	r1, r1
 80319a0:	2900      	cmp	r1, #0
 80319a2:	db03      	blt.n	80319ac <wllora_block_miti+0x24>
 80319a4:	2305      	movs	r3, #5
 80319a6:	4358      	muls	r0, r3
 80319a8:	b280      	uxth	r0, r0

    return miti;
}
 80319aa:	4770      	bx	lr
    miti   *= (pm->channel & 0x80) ? 4 : 5;
 80319ac:	2304      	movs	r3, #4
 80319ae:	e7fa      	b.n	80319a6 <wllora_block_miti+0x1e>
 80319b0:	08037034 	.word	0x08037034

080319b4 <platform_isr_rfirq>:
  * <LI> wllora_int_force() </LI>
  * <LI> wllora_int_turnon() </LI>
  * <LI> wllora_int_turnoff() </LI>
  */

void platform_isr_rfirq() {
 80319b4:	b510      	push	{r4, lr}
///@todo read the IRQ bytes and vector accordingly

    // This is placeholder code only
    wllora_virtual_isr(wllora.imode);
 80319b6:	4b02      	ldr	r3, [pc, #8]	; (80319c0 <platform_isr_rfirq+0xc>)
 80319b8:	7818      	ldrb	r0, [r3, #0]
 80319ba:	f7ff fd27 	bl	803140c <wllora_virtual_isr>
}
 80319be:	bd10      	pop	{r4, pc}
 80319c0:	2000c3ec 	.word	0x2000c3ec

080319c4 <wllora_int_off>:

OT_WEAK void wllora_int_off() {
 80319c4:	b510      	push	{r4, lr}
    wllora_int_config(0);
 80319c6:	2000      	movs	r0, #0
 80319c8:	f7ff fb1a 	bl	8031000 <wllora_int_config>
}
 80319cc:	bd10      	pop	{r4, pc}
	...

080319d0 <wllora_int_listen>:
inline void wllora_iocfg_tx()  {
    wllora_int_clearall();
    wllora_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_TX);
}

inline void wllora_int_listen() {
 80319d0:	b510      	push	{r4, lr}
    wllora.imode = MODE_Listen;
 80319d2:	4b03      	ldr	r3, [pc, #12]	; (80319e0 <wllora_int_listen+0x10>)
 80319d4:	2200      	movs	r2, #0
 80319d6:	701a      	strb	r2, [r3, #0]
    wllora_int_config(RFI_LISTEN);
 80319d8:	2000      	movs	r0, #0
 80319da:	f7ff fb11 	bl	8031000 <wllora_int_config>
}
 80319de:	bd10      	pop	{r4, pc}
 80319e0:	2000c3ec 	.word	0x2000c3ec

080319e4 <wllora_int_rxdata>:

inline void wllora_int_rxdata() {
 80319e4:	b510      	push	{r4, lr}
    wllora.imode = MODE_RXData;
 80319e6:	4b03      	ldr	r3, [pc, #12]	; (80319f4 <wllora_int_rxdata+0x10>)
 80319e8:	2201      	movs	r2, #1
 80319ea:	701a      	strb	r2, [r3, #0]
    wllora_int_config(RFI_RXDATA);
 80319ec:	2000      	movs	r0, #0
 80319ee:	f7ff fb07 	bl	8031000 <wllora_int_config>
}
 80319f2:	bd10      	pop	{r4, pc}
 80319f4:	2000c3ec 	.word	0x2000c3ec

080319f8 <wllora_int_csma>:
inline void wllora_int_rxend() {
    wllora.imode = MODE_RXData;
    wllora_int_config(RFI_RXEND);
}

inline void wllora_int_csma() {
 80319f8:	b510      	push	{r4, lr}
    wllora.imode = MODE_CSMA;
 80319fa:	4b03      	ldr	r3, [pc, #12]	; (8031a08 <wllora_int_csma+0x10>)
 80319fc:	2205      	movs	r2, #5
 80319fe:	701a      	strb	r2, [r3, #0]
    wllora_int_config(RFI_CSMA);
 8031a00:	2000      	movs	r0, #0
 8031a02:	f7ff fafd 	bl	8031000 <wllora_int_config>
}
 8031a06:	bd10      	pop	{r4, pc}
 8031a08:	2000c3ec 	.word	0x2000c3ec

08031a0c <wllora_int_txdata>:

inline void wllora_int_txdata() {
 8031a0c:	b510      	push	{r4, lr}
    wllora.imode = MODE_TXData;
 8031a0e:	4b03      	ldr	r3, [pc, #12]	; (8031a1c <wllora_int_txdata+0x10>)
 8031a10:	2206      	movs	r2, #6
 8031a12:	701a      	strb	r2, [r3, #0]
    wllora_int_config(RFI_TXDONE);
 8031a14:	2000      	movs	r0, #0
 8031a16:	f7ff faf3 	bl	8031000 <wllora_int_config>
}
 8031a1a:	bd10      	pop	{r4, pc}
 8031a1c:	2000c3ec 	.word	0x2000c3ec

08031a20 <wllora_check_cadpin>:
void wllora_waitfor_ready() {
}

ot_bool wllora_check_cadpin() {
    return True;
}
 8031a20:	2001      	movs	r0, #1
 8031a22:	4770      	bx	lr

08031a24 <wllora_read>:
        }
    }
}

ot_u8 wllora_read(ot_u8 addr) {
    return faux_regs[addr];
 8031a24:	4b01      	ldr	r3, [pc, #4]	; (8031a2c <wllora_read+0x8>)
 8031a26:	5c18      	ldrb	r0, [r3, r0]
}
 8031a28:	4770      	bx	lr
 8031a2a:	46c0      	nop			; (mov r8, r8)
 8031a2c:	2000c2e8 	.word	0x2000c2e8

08031a30 <wllora_mode>:
ot_u8 wllora_mode() {
 8031a30:	b510      	push	{r4, lr}
    return wllora_read(RFREG_LR_OPMODE) & _OPMODE;
 8031a32:	2001      	movs	r0, #1
 8031a34:	f7ff fff6 	bl	8031a24 <wllora_read>
 8031a38:	2307      	movs	r3, #7
 8031a3a:	4018      	ands	r0, r3
}
 8031a3c:	bd10      	pop	{r4, pc}
	...

08031a40 <wllora_burstread>:

void wllora_burstread(ot_u8 start_addr, ot_u8 length, ot_u8* data) {
 8031a40:	b510      	push	{r4, lr}
 8031a42:	0004      	movs	r4, r0
 8031a44:	000b      	movs	r3, r1
 8031a46:	0010      	movs	r0, r2
    if (start_addr == RFREG_LR_FIFO) {
 8031a48:	2c00      	cmp	r4, #0
 8031a4a:	d104      	bne.n	8031a56 <wllora_burstread+0x16>
        memset(data, 0, length);
 8031a4c:	b28a      	uxth	r2, r1
 8031a4e:	2100      	movs	r1, #0
 8031a50:	f004 f93e 	bl	8035cd0 <ot_memset>
    }
    else {
        memcpy(data, &faux_regs[start_addr], length);
    }
}
 8031a54:	bd10      	pop	{r4, pc}
        memcpy(data, &faux_regs[start_addr], length);
 8031a56:	4903      	ldr	r1, [pc, #12]	; (8031a64 <wllora_burstread+0x24>)
 8031a58:	1861      	adds	r1, r4, r1
 8031a5a:	b29a      	uxth	r2, r3
 8031a5c:	f004 f92a 	bl	8035cb4 <ot_memcpy>
}
 8031a60:	e7f8      	b.n	8031a54 <wllora_burstread+0x14>
 8031a62:	46c0      	nop			; (mov r8, r8)
 8031a64:	2000c2e8 	.word	0x2000c2e8

08031a68 <wllora_write>:

void wllora_write(ot_u8 addr, ot_u8 data) {
    faux_regs[addr] = data; 
 8031a68:	4b01      	ldr	r3, [pc, #4]	; (8031a70 <wllora_write+0x8>)
 8031a6a:	5419      	strb	r1, [r3, r0]
}
 8031a6c:	4770      	bx	lr
 8031a6e:	46c0      	nop			; (mov r8, r8)
 8031a70:	2000c2e8 	.word	0x2000c2e8

08031a74 <wllora_iocfg_cad>:
inline void wllora_iocfg_cad()  {
 8031a74:	b510      	push	{r4, lr}
    wllora_int_clearall();
 8031a76:	f7ff fac4 	bl	8031002 <wllora_int_clearall>
    wllora_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_CAD);
 8031a7a:	21a1      	movs	r1, #161	; 0xa1
 8031a7c:	2040      	movs	r0, #64	; 0x40
 8031a7e:	f7ff fff3 	bl	8031a68 <wllora_write>
}
 8031a82:	bd10      	pop	{r4, pc}

08031a84 <wllora_iocfg_rx>:
inline void wllora_iocfg_rx()  {
 8031a84:	b510      	push	{r4, lr}
    wllora_int_clearall();
 8031a86:	f7ff fabc 	bl	8031002 <wllora_int_clearall>
    wllora_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_RX);
 8031a8a:	2101      	movs	r1, #1
 8031a8c:	2040      	movs	r0, #64	; 0x40
 8031a8e:	f7ff ffeb 	bl	8031a68 <wllora_write>
}
 8031a92:	bd10      	pop	{r4, pc}

08031a94 <wllora_iocfg_tx>:
inline void wllora_iocfg_tx()  {
 8031a94:	b510      	push	{r4, lr}
    wllora_int_clearall();
 8031a96:	f7ff fab4 	bl	8031002 <wllora_int_clearall>
    wllora_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_TX);
 8031a9a:	2140      	movs	r1, #64	; 0x40
 8031a9c:	2040      	movs	r0, #64	; 0x40
 8031a9e:	f7ff ffe3 	bl	8031a68 <wllora_write>
}
 8031aa2:	bd10      	pop	{r4, pc}

08031aa4 <wllora_load_defaults>:
void wllora_load_defaults() {
 8031aa4:	b510      	push	{r4, lr}
    cursor = (ot_u8*)defaults;
 8031aa6:	4c05      	ldr	r4, [pc, #20]	; (8031abc <wllora_load_defaults+0x18>)
    while (*cursor != 0) {
 8031aa8:	e003      	b.n	8031ab2 <wllora_load_defaults+0xe>
        wllora_write(cursor[0], cursor[1]);
 8031aaa:	7861      	ldrb	r1, [r4, #1]
 8031aac:	f7ff ffdc 	bl	8031a68 <wllora_write>
        cursor += 2;
 8031ab0:	3402      	adds	r4, #2
    while (*cursor != 0) {
 8031ab2:	7820      	ldrb	r0, [r4, #0]
 8031ab4:	2800      	cmp	r0, #0
 8031ab6:	d1f8      	bne.n	8031aaa <wllora_load_defaults+0x6>
}
 8031ab8:	bd10      	pop	{r4, pc}
 8031aba:	46c0      	nop			; (mov r8, r8)
 8031abc:	08037044 	.word	0x08037044

08031ac0 <wllora_strobe>:
void wllora_strobe(ot_u8 new_mode, ot_bool blocking) {
 8031ac0:	b570      	push	{r4, r5, r6, lr}
 8031ac2:	0005      	movs	r5, r0
    if (!blocking) {
 8031ac4:	2900      	cmp	r1, #0
 8031ac6:	d005      	beq.n	8031ad4 <wllora_strobe+0x14>
        ot_u8 old_mode = wllora_mode();
 8031ac8:	f7ff ffb2 	bl	8031a30 <wllora_mode>
 8031acc:	0004      	movs	r4, r0
        if (old_mode != new_mode) {
 8031ace:	42a8      	cmp	r0, r5
 8031ad0:	d107      	bne.n	8031ae2 <wllora_strobe+0x22>
}
 8031ad2:	bd70      	pop	{r4, r5, r6, pc}
        wllora_write(RFREG_LR_OPMODE, _LORAMODE|new_mode);
 8031ad4:	3980      	subs	r1, #128	; 0x80
 8031ad6:	4301      	orrs	r1, r0
 8031ad8:	b2c9      	uxtb	r1, r1
 8031ada:	2001      	movs	r0, #1
 8031adc:	f7ff ffc4 	bl	8031a68 <wllora_write>
 8031ae0:	e7f7      	b.n	8031ad2 <wllora_strobe+0x12>
            wllora_write(RFREG_LR_OPMODE, _LORAMODE|new_mode);
 8031ae2:	2180      	movs	r1, #128	; 0x80
 8031ae4:	4249      	negs	r1, r1
 8031ae6:	4329      	orrs	r1, r5
 8031ae8:	b2c9      	uxtb	r1, r1
 8031aea:	2001      	movs	r0, #1
 8031aec:	f7ff ffbc 	bl	8031a68 <wllora_write>
            wdog = wdog_amount[(new_mode<<1) + (old_mode!=0)];
 8031af0:	006b      	lsls	r3, r5, #1
 8031af2:	1e62      	subs	r2, r4, #1
 8031af4:	4194      	sbcs	r4, r2
 8031af6:	191c      	adds	r4, r3, r4
 8031af8:	4b09      	ldr	r3, [pc, #36]	; (8031b20 <wllora_strobe+0x60>)
 8031afa:	5d1c      	ldrb	r4, [r3, r4]
                if (--wdog == 0) {
 8031afc:	3c01      	subs	r4, #1
 8031afe:	b2a4      	uxth	r4, r4
 8031b00:	2c00      	cmp	r4, #0
 8031b02:	d004      	beq.n	8031b0e <wllora_strobe+0x4e>
                old_mode = wllora_mode();
 8031b04:	f7ff ff94 	bl	8031a30 <wllora_mode>
            } while (old_mode != new_mode);
 8031b08:	4285      	cmp	r5, r0
 8031b0a:	d1f7      	bne.n	8031afc <wllora_strobe+0x3c>
 8031b0c:	e7e1      	b.n	8031ad2 <wllora_strobe+0x12>
                    wllora_reset();
 8031b0e:	f7ff fa33 	bl	8030f78 <wllora_reset>
                    delay_us(400);
 8031b12:	20c8      	movs	r0, #200	; 0xc8
 8031b14:	0040      	lsls	r0, r0, #1
 8031b16:	f004 f873 	bl	8035c00 <delay_us>
                    dll_init();
 8031b1a:	f000 ff8d 	bl	8032a38 <dll_init>
                    return;
 8031b1e:	e7d8      	b.n	8031ad2 <wllora_strobe+0x12>
 8031b20:	0803707c 	.word	0x0803707c

08031b24 <wllora_burstwrite>:

void wllora_burstwrite(ot_u8 start_addr, ot_u8 length, ot_u8* cmd_data) {
 8031b24:	b510      	push	{r4, lr}
 8031b26:	0013      	movs	r3, r2
    if (start_addr == RFREG_LR_FIFO) {
 8031b28:	2800      	cmp	r0, #0
 8031b2a:	d100      	bne.n	8031b2e <wllora_burstwrite+0xa>
        // do nothing, no fifo
    }
    else {
        memcpy(&faux_regs[start_addr], cmd_data, length);
    }
}
 8031b2c:	bd10      	pop	{r4, pc}
        memcpy(&faux_regs[start_addr], cmd_data, length);
 8031b2e:	4a03      	ldr	r2, [pc, #12]	; (8031b3c <wllora_burstwrite+0x18>)
 8031b30:	1880      	adds	r0, r0, r2
 8031b32:	b28a      	uxth	r2, r1
 8031b34:	0019      	movs	r1, r3
 8031b36:	f004 f8bd 	bl	8035cb4 <ot_memcpy>
}
 8031b3a:	e7f7      	b.n	8031b2c <wllora_burstwrite+0x8>
 8031b3c:	2000c2e8 	.word	0x2000c2e8

08031b40 <wllora_start_counter>:
  * internal timers of WL SUBGHZ, we instead use the more reliable chronstamp
  * feature of OpenTag.
  */
static ot_u32 macstamp;

void wllora_start_counter() {
 8031b40:	b510      	push	{r4, lr}
    macstamp = systim_chronstamp(NULL);
 8031b42:	2000      	movs	r0, #0
 8031b44:	f003 fd8e 	bl	8035664 <systim_chronstamp>
 8031b48:	4b01      	ldr	r3, [pc, #4]	; (8031b50 <wllora_start_counter+0x10>)
 8031b4a:	6018      	str	r0, [r3, #0]
}
 8031b4c:	bd10      	pop	{r4, pc}
 8031b4e:	46c0      	nop			; (mov r8, r8)
 8031b50:	2000c3e8 	.word	0x2000c3e8

08031b54 <wllora_stop_counter>:

void wllora_stop_counter() {
}
 8031b54:	4770      	bx	lr
	...

08031b58 <wllora_get_counter>:

ot_u16 wllora_get_counter() {
 8031b58:	b510      	push	{r4, lr}
    ot_u16 value;
    value = dll.counter - (ot_u16)systim_chronstamp(&macstamp);
 8031b5a:	4b04      	ldr	r3, [pc, #16]	; (8031b6c <wllora_get_counter+0x14>)
 8031b5c:	885c      	ldrh	r4, [r3, #2]
 8031b5e:	4804      	ldr	r0, [pc, #16]	; (8031b70 <wllora_get_counter+0x18>)
 8031b60:	f003 fd80 	bl	8035664 <systim_chronstamp>
 8031b64:	b280      	uxth	r0, r0
 8031b66:	1a20      	subs	r0, r4, r0
 8031b68:	b280      	uxth	r0, r0
    return value;
}
 8031b6a:	bd10      	pop	{r4, pc}
 8031b6c:	2000c410 	.word	0x2000c410
 8031b70:	2000c3e8 	.word	0x2000c3e8

08031b74 <wllora_calc_rssithr>:
        rssi_thr = (157 - 140) + input;
#   endif
#   endif
        
    return (ot_u8)rssi_thr;
}
 8031b74:	2000      	movs	r0, #0
 8031b76:	4770      	bx	lr

08031b78 <wllora_clip_txeirp>:
ot_u8 wllora_clip_txeirp(ot_u8 input_eirp) {
/// This considers Normal-Mode.  In TX Boost mode, 13dBm --> 20dBm
#   define _MAX_DBM_EIRP (((20*2) - RF_HDB_ATTEN) + 80)
#   define _MIN_DBM_EIRP (((5*2) - RF_HDB_ATTEN) + 80)

    if (input_eirp > _MAX_DBM_EIRP) {
 8031b78:	2874      	cmp	r0, #116	; 0x74
 8031b7a:	d802      	bhi.n	8031b82 <wllora_clip_txeirp+0xa>
        input_eirp = _MAX_DBM_EIRP;
    }
    else if (input_eirp < _MIN_DBM_EIRP) {
 8031b7c:	2855      	cmp	r0, #85	; 0x55
 8031b7e:	d902      	bls.n	8031b86 <wllora_clip_txeirp+0xe>
    
    return input_eirp;
    
#   undef _MAX_DBM_EIRP
#   undef _MIN_DBM_EIRP
}
 8031b80:	4770      	bx	lr
        input_eirp = _MAX_DBM_EIRP;
 8031b82:	2074      	movs	r0, #116	; 0x74
 8031b84:	e7fc      	b.n	8031b80 <wllora_clip_txeirp+0x8>
        input_eirp = _MIN_DBM_EIRP;
 8031b86:	2056      	movs	r0, #86	; 0x56
 8031b88:	e7fa      	b.n	8031b80 <wllora_clip_txeirp+0x8>

08031b8a <wllora_set_txpwr>:


void wllora_set_txpwr(ot_u8 pwr_code) {
 8031b8a:	b510      	push	{r4, lr}
/// i.e. eirp_code=0 => -40 dBm, eirp_code=80 => 0 dBm, etc
    ot_int dBm;
    ot_u8 padac;
    
    // get dBm
    dBm = (((ot_int)pwr_code + RF_HDB_ATTEN) >> 1) - 40;
 8031b8c:	3004      	adds	r0, #4
 8031b8e:	0840      	lsrs	r0, r0, #1
 8031b90:	0003      	movs	r3, r0
 8031b92:	3b28      	subs	r3, #40	; 0x28

    // Convert to SX1276/8/9 units (PA Boost on, max 20dBm)
    if (dBm > 17) {
 8031b94:	2b11      	cmp	r3, #17
 8031b96:	dd0e      	ble.n	8031bb6 <wllora_set_txpwr+0x2c>
        padac   = _PADAC_20DBM_ON;
        dBm    -= 5;
 8031b98:	382d      	subs	r0, #45	; 0x2d
 8031b9a:	b204      	sxth	r4, r0
        padac   = _PADAC_20DBM_ON;
 8031b9c:	2187      	movs	r1, #135	; 0x87
    }
    else {
        padac   = _PADAC_20DBM_OFF;
        dBm    -= 2;
    }
    wllora_write(RFREG_LR_PADAC, padac);
 8031b9e:	205a      	movs	r0, #90	; 0x5a
 8031ba0:	f7ff ff62 	bl	8031a68 <wllora_write>
    pwr_code = (1<<7) | (7<<4) | ((ot_u8)dBm & 0x0F);
 8031ba4:	b2e4      	uxtb	r4, r4
 8031ba6:	2110      	movs	r1, #16
 8031ba8:	4249      	negs	r1, r1
 8031baa:	4321      	orrs	r1, r4
 8031bac:	b2c9      	uxtb	r1, r1

    // Write new PA Table to device
    wllora_write(RFREG_LR_PACONFIG, pwr_code);
 8031bae:	2009      	movs	r0, #9
 8031bb0:	f7ff ff5a 	bl	8031a68 <wllora_write>
}
 8031bb4:	bd10      	pop	{r4, pc}
        dBm    -= 2;
 8031bb6:	382a      	subs	r0, #42	; 0x2a
 8031bb8:	b204      	sxth	r4, r0
        padac   = _PADAC_20DBM_OFF;
 8031bba:	2184      	movs	r1, #132	; 0x84
 8031bbc:	e7ef      	b.n	8031b9e <wllora_set_txpwr+0x14>
	...

08031bc0 <bgcrc8_block>:
    0x33, 0x1C, 0x6D, 0x42
};



ot_u8 bgcrc8_block(ot_u8* block_addr) {
 8031bc0:	b510      	push	{r4, lr}
 8031bc2:	0002      	movs	r2, r0
    ot_int  cnt = 5;
    ot_u8   reg = 0xFF;
 8031bc4:	20ff      	movs	r0, #255	; 0xff
    ot_int  cnt = 5;
 8031bc6:	2105      	movs	r1, #5
    
    while (--cnt >= 0) {
 8031bc8:	e004      	b.n	8031bd4 <bgcrc8_block+0x14>
        reg = *block_addr ^ crc8tab[reg];
 8031bca:	7813      	ldrb	r3, [r2, #0]
 8031bcc:	4c04      	ldr	r4, [pc, #16]	; (8031be0 <bgcrc8_block+0x20>)
 8031bce:	5c20      	ldrb	r0, [r4, r0]
 8031bd0:	4058      	eors	r0, r3
        block_addr++;
 8031bd2:	3201      	adds	r2, #1
    while (--cnt >= 0) {
 8031bd4:	1e4b      	subs	r3, r1, #1
 8031bd6:	b219      	sxth	r1, r3
 8031bd8:	041b      	lsls	r3, r3, #16
 8031bda:	d5f6      	bpl.n	8031bca <bgcrc8_block+0xa>
    }
    return reg;
}
 8031bdc:	bd10      	pop	{r4, pc}
 8031bde:	46c0      	nop			; (mov r8, r8)
 8031be0:	2000c008 	.word	0x2000c008

08031be4 <bgcrc8_put>:

ot_u8 bgcrc8_check(ot_u8* block_addr) {
    return (block_addr[5] ^ bgcrc8_block(block_addr));
}

void bgcrc8_put(ot_u8* block_addr) {
 8031be4:	b510      	push	{r4, lr}
 8031be6:	0004      	movs	r4, r0
    block_addr[5] = bgcrc8_block(block_addr);
 8031be8:	f7ff ffea 	bl	8031bc0 <bgcrc8_block>
 8031bec:	7160      	strb	r0, [r4, #5]
}
 8031bee:	bd10      	pop	{r4, pc}

08031bf0 <otapi_new_telegram>:
#endif
}


///@todo this function is experimental, and it is subject to change
ot_u16 otapi_new_telegram(ot_u32 token, ot_u8 data_id, const ot_u8* data) {
 8031bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8031bf2:	46c6      	mov	lr, r8
 8031bf4:	b500      	push	{lr}
 8031bf6:	0006      	movs	r6, r0
 8031bf8:	000d      	movs	r5, r1
 8031bfa:	0014      	movs	r4, r2
///         +---------+--------+-------+-------+---------+--------+
/// </PRE>
// ========================================================================
/// Set the header if the session is valid.  Also conditionally write the header
/// depending on the address type (a parameter).
    if (session_notempty()) {
 8031bfc:	f001 fc48 	bl	8033490 <session_notempty>
 8031c00:	2800      	cmp	r0, #0
 8031c02:	d103      	bne.n	8031c0c <otapi_new_telegram+0x1c>
        q_writebyte(&txq, data_id);
        q_writestring(&txq, data, 7);

        return 1;
    }
    return 0;
 8031c04:	2000      	movs	r0, #0
}
 8031c06:	bc80      	pop	{r7}
 8031c08:	46b8      	mov	r8, r7
 8031c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        s_active = session_top();
 8031c0c:	f001 fc0c 	bl	8033428 <session_top>
 8031c10:	4680      	mov	r8, r0
        dll_set_defaults(s_active);
 8031c12:	f000 fde9 	bl	80327e8 <dll_set_defaults>
        dll.comm.rx_timeout = 0;
 8031c16:	4b16      	ldr	r3, [pc, #88]	; (8031c70 <otapi_new_telegram+0x80>)
 8031c18:	2200      	movs	r2, #0
 8031c1a:	629a      	str	r2, [r3, #40]	; 0x28
        q_empty(&txq);
 8031c1c:	4f15      	ldr	r7, [pc, #84]	; (8031c74 <otapi_new_telegram+0x84>)
 8031c1e:	0038      	movs	r0, r7
 8031c20:	f002 fdef 	bl	8034802 <q_empty>
        txq.getcursor += 2;         // Bypass unused length and Link CTL bytes
 8031c24:	687b      	ldr	r3, [r7, #4]
 8031c26:	3302      	adds	r3, #2
 8031c28:	607b      	str	r3, [r7, #4]
        q_writebyte(&txq, 14);      // Dummy Length value (not actually sent)
 8031c2a:	210e      	movs	r1, #14
 8031c2c:	0038      	movs	r0, r7
 8031c2e:	f002 fe10 	bl	8034852 <q_writebyte>
        q_writebyte(&txq, 0);       // Dummy Link-Control (not actually sent)
 8031c32:	2100      	movs	r1, #0
 8031c34:	0038      	movs	r0, r7
 8031c36:	f002 fe0c 	bl	8034852 <q_writebyte>
        q_writebyte(&txq, 0);                           // Dummy TX-EIRP (updated by RF driver)
 8031c3a:	2100      	movs	r1, #0
 8031c3c:	0038      	movs	r0, r7
 8031c3e:	f002 fe08 	bl	8034852 <q_writebyte>
        q_writebyte(&txq, (s_active->subnet | 0x01));   // This byte is two nibbles: Subnet specifier and Page ID (1)
 8031c42:	4643      	mov	r3, r8
 8031c44:	7a99      	ldrb	r1, [r3, #10]
 8031c46:	2301      	movs	r3, #1
 8031c48:	4319      	orrs	r1, r3
 8031c4a:	b2c9      	uxtb	r1, r1
 8031c4c:	0038      	movs	r0, r7
 8031c4e:	f002 fe00 	bl	8034852 <q_writebyte>
        q_writelong(&txq, token);                       // Application Token (32 bits)
 8031c52:	0031      	movs	r1, r6
 8031c54:	0038      	movs	r0, r7
 8031c56:	f002 fe15 	bl	8034884 <q_writelong>
        q_writebyte(&txq, data_id);
 8031c5a:	0029      	movs	r1, r5
 8031c5c:	0038      	movs	r0, r7
 8031c5e:	f002 fdf8 	bl	8034852 <q_writebyte>
        q_writestring(&txq, data, 7);
 8031c62:	2207      	movs	r2, #7
 8031c64:	0021      	movs	r1, r4
 8031c66:	0038      	movs	r0, r7
 8031c68:	f002 fe51 	bl	803490e <q_writestring>
        return 1;
 8031c6c:	2001      	movs	r0, #1
 8031c6e:	e7ca      	b.n	8031c06 <otapi_new_telegram+0x16>
 8031c70:	2000c410 	.word	0x2000c410
 8031c74:	2000cb2c 	.word	0x2000cb2c

08031c78 <otapi_open_request>:



ot_u16 otapi_open_request(addr_type addr, routing_tmpl* routing) {
 8031c78:	b570      	push	{r4, r5, r6, lr}
 8031c7a:	0005      	movs	r5, r0
 8031c7c:	000c      	movs	r4, r1
/// Set the header if the session is valid.  Also conditionally write the header
/// depending on the address type (a parameter).  
    if (session_notempty()) {
 8031c7e:	f001 fc07 	bl	8033490 <session_notempty>
 8031c82:	2800      	cmp	r0, #0
 8031c84:	d101      	bne.n	8031c8a <otapi_open_request+0x12>

        // Load the header
        m2np_header(s_active, (ot_u8)addr, M2FI_FRDIALOG);
        return 1;
    }
    return 0;
 8031c86:	2000      	movs	r0, #0
}
 8031c88:	bd70      	pop	{r4, r5, r6, pc}
        s_active = session_top();
 8031c8a:	f001 fbcd 	bl	8033428 <session_top>
 8031c8e:	0006      	movs	r6, r0
        dll_set_defaults(s_active);
 8031c90:	f000 fdaa 	bl	80327e8 <dll_set_defaults>
        if (addr & M2FI_UCAST) {
 8031c94:	07ab      	lsls	r3, r5, #30
 8031c96:	d406      	bmi.n	8031ca6 <otapi_open_request+0x2e>
        m2np_header(s_active, (ot_u8)addr, M2FI_FRDIALOG);
 8031c98:	2200      	movs	r2, #0
 8031c9a:	0029      	movs	r1, r5
 8031c9c:	0030      	movs	r0, r6
 8031c9e:	f000 ffd9 	bl	8032c54 <m2np_header>
        return 1;
 8031ca2:	2001      	movs	r0, #1
 8031ca4:	e7f0      	b.n	8031c88 <otapi_open_request+0x10>
            ot_memcpy((ot_u8*)&m2np.rt, (ot_u8*)routing, sizeof(routing_tmpl));
 8031ca6:	221c      	movs	r2, #28
 8031ca8:	0021      	movs	r1, r4
 8031caa:	4802      	ldr	r0, [pc, #8]	; (8031cb4 <otapi_open_request+0x3c>)
 8031cac:	f004 f802 	bl	8035cb4 <ot_memcpy>
 8031cb0:	e7f2      	b.n	8031c98 <otapi_open_request+0x20>
 8031cb2:	46c0      	nop			; (mov r8, r8)
 8031cb4:	2000c460 	.word	0x2000c460

08031cb8 <otapi_close_request>:


ot_u16 otapi_close_request() {
 8031cb8:	b510      	push	{r4, lr}
/// Set the footer if the session is valid
    if (session_notempty()) {
 8031cba:	f001 fbe9 	bl	8033490 <session_notempty>
 8031cbe:	2800      	cmp	r0, #0
 8031cc0:	d101      	bne.n	8031cc6 <otapi_close_request+0xe>
        m2np_footer( /* session_top() */ );
        return 1;
    }
    return 0;
 8031cc2:	2000      	movs	r0, #0
}
 8031cc4:	bd10      	pop	{r4, pc}
        m2np_footer( /* session_top() */ );
 8031cc6:	f001 f895 	bl	8032df4 <m2np_footer>
        return 1;
 8031cca:	2001      	movs	r0, #1
 8031ccc:	e7fa      	b.n	8031cc4 <otapi_close_request+0xc>
	...

08031cd0 <otapi_start_dialog>:
//    if (radio.state != RADIO_Idle) {
//    	rm2_kill();
//    }
//#   endif

    if (timeout != 0) {
 8031cd0:	2800      	cmp	r0, #0
 8031cd2:	d001      	beq.n	8031cd8 <otapi_start_dialog+0x8>
        dll.comm.tc = TI2CLK(timeout);
 8031cd4:	4b01      	ldr	r3, [pc, #4]	; (8031cdc <otapi_start_dialog+0xc>)
 8031cd6:	6218      	str	r0, [r3, #32]
//    sys.task_RFA.event = 0;
//    sys_preempt(&sys.task_RFA, 0);
//#   endif
    
    return 1;
}
 8031cd8:	2001      	movs	r0, #1
 8031cda:	4770      	bx	lr
 8031cdc:	2000c410 	.word	0x2000c410

08031ce0 <otapi_put_command_tmpl>:




#ifndef EXTF_otapi_put_command_tmpl
ot_u16 otapi_put_command_tmpl(ot_u8* status, command_tmpl* command) {    
 8031ce0:	b570      	push	{r4, r5, r6, lr}
 8031ce2:	0004      	movs	r4, r0
    /// Check Opcodes to make sure this one is supported
    /// @todo base this on app_config.h settings.  Currently this is rudimentary
    ///       and hard-coded.  It just filters out Datastream and non-existing codes
    if (command->opcode > 15) {
 8031ce4:	784b      	ldrb	r3, [r1, #1]
 8031ce6:	2b0f      	cmp	r3, #15
 8031ce8:	d825      	bhi.n	8031d36 <otapi_put_command_tmpl+0x56>
        // command extension, not present at the moment
        *status = 0;
        return 0;
    }
    
    dll.comm.csmaca_params |= command->type & M2_CSMACA_A2P;
 8031cea:	2200      	movs	r2, #0
 8031cec:	568a      	ldrsb	r2, [r1, r2]
 8031cee:	2340      	movs	r3, #64	; 0x40
 8031cf0:	4013      	ands	r3, r2
 8031cf2:	4819      	ldr	r0, [pc, #100]	; (8031d58 <otapi_put_command_tmpl+0x78>)
 8031cf4:	222e      	movs	r2, #46	; 0x2e
 8031cf6:	5c85      	ldrb	r5, [r0, r2]
 8031cf8:	432b      	orrs	r3, r5
 8031cfa:	5483      	strb	r3, [r0, r2]
    m2qp.cmd.code           = command->type | command->opcode;
 8031cfc:	780b      	ldrb	r3, [r1, #0]
 8031cfe:	784a      	ldrb	r2, [r1, #1]
 8031d00:	4313      	orrs	r3, r2
 8031d02:	4a16      	ldr	r2, [pc, #88]	; (8031d5c <otapi_put_command_tmpl+0x7c>)
 8031d04:	7013      	strb	r3, [r2, #0]
    m2qp.cmd.code          |= (command->extension != 0) << 7;
 8031d06:	b25b      	sxtb	r3, r3
 8031d08:	788a      	ldrb	r2, [r1, #2]
 8031d0a:	2a00      	cmp	r2, #0
 8031d0c:	d017      	beq.n	8031d3e <otapi_put_command_tmpl+0x5e>
 8031d0e:	2180      	movs	r1, #128	; 0x80
 8031d10:	4249      	negs	r1, r1
 8031d12:	4319      	orrs	r1, r3
 8031d14:	b2c9      	uxtb	r1, r1
 8031d16:	4d11      	ldr	r5, [pc, #68]	; (8031d5c <otapi_put_command_tmpl+0x7c>)
 8031d18:	7029      	strb	r1, [r5, #0]
    m2qp.cmd.ext            = command->extension;
 8031d1a:	706a      	strb	r2, [r5, #1]
    q_writebyte(&txq, m2qp.cmd.code);
 8031d1c:	4810      	ldr	r0, [pc, #64]	; (8031d60 <otapi_put_command_tmpl+0x80>)
 8031d1e:	f002 fd98 	bl	8034852 <q_writebyte>
    
    if (m2qp.cmd.ext != 0) {
 8031d22:	7869      	ldrb	r1, [r5, #1]
 8031d24:	2900      	cmp	r1, #0
 8031d26:	d10c      	bne.n	8031d42 <otapi_put_command_tmpl+0x62>
        if (m2qp.cmd.ext & 2) {
            dll.comm.rx_timeout = 0;
        }
    }
    
    *status = 1;
 8031d28:	2301      	movs	r3, #1
 8031d2a:	7023      	strb	r3, [r4, #0]
    return q_length(&txq);
 8031d2c:	480c      	ldr	r0, [pc, #48]	; (8031d60 <otapi_put_command_tmpl+0x80>)
 8031d2e:	f002 fd42 	bl	80347b6 <q_length>
 8031d32:	b280      	uxth	r0, r0
}
 8031d34:	bd70      	pop	{r4, r5, r6, pc}
        *status = 0;
 8031d36:	2300      	movs	r3, #0
 8031d38:	7003      	strb	r3, [r0, #0]
        return 0;
 8031d3a:	2000      	movs	r0, #0
 8031d3c:	e7fa      	b.n	8031d34 <otapi_put_command_tmpl+0x54>
    m2qp.cmd.code          |= (command->extension != 0) << 7;
 8031d3e:	2100      	movs	r1, #0
 8031d40:	e7e7      	b.n	8031d12 <otapi_put_command_tmpl+0x32>
        q_writebyte(&txq, m2qp.cmd.ext);
 8031d42:	4807      	ldr	r0, [pc, #28]	; (8031d60 <otapi_put_command_tmpl+0x80>)
 8031d44:	f002 fd85 	bl	8034852 <q_writebyte>
        if (m2qp.cmd.ext & 2) {
 8031d48:	4b04      	ldr	r3, [pc, #16]	; (8031d5c <otapi_put_command_tmpl+0x7c>)
 8031d4a:	785b      	ldrb	r3, [r3, #1]
 8031d4c:	079b      	lsls	r3, r3, #30
 8031d4e:	d5eb      	bpl.n	8031d28 <otapi_put_command_tmpl+0x48>
            dll.comm.rx_timeout = 0;
 8031d50:	4b01      	ldr	r3, [pc, #4]	; (8031d58 <otapi_put_command_tmpl+0x78>)
 8031d52:	2200      	movs	r2, #0
 8031d54:	629a      	str	r2, [r3, #40]	; 0x28
 8031d56:	e7e7      	b.n	8031d28 <otapi_put_command_tmpl+0x48>
 8031d58:	2000c410 	.word	0x2000c410
 8031d5c:	2000c4dc 	.word	0x2000c4dc
 8031d60:	2000cb2c 	.word	0x2000cb2c

08031d64 <otapi_put_dialog_tmpl>:
#endif


#ifndef EXTF_otapi_put_dialog_tmpl
ot_u16 otapi_put_dialog_tmpl(ot_u8* status, dialog_tmpl* dialog) {
 8031d64:	b570      	push	{r4, r5, r6, lr}
 8031d66:	0005      	movs	r5, r0
 8031d68:	1e0c      	subs	r4, r1, #0
    if (dialog == NULL) {
 8031d6a:	d01e      	beq.n	8031daa <otapi_put_dialog_tmpl+0x46>
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
        q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
    }
    else {
        // Place dialog with timeout
        dll.comm.rx_timeout = otutils_calc_timeout(dialog->timeout);
 8031d6c:	7808      	ldrb	r0, [r1, #0]
 8031d6e:	f002 fe14 	bl	803499a <otutils_calc_timeout>
 8031d72:	4b19      	ldr	r3, [pc, #100]	; (8031dd8 <otapi_put_dialog_tmpl+0x74>)
 8031d74:	6298      	str	r0, [r3, #40]	; 0x28
        dialog->timeout    |= (dialog->channels != 0) << 7;     // 0 or 0x80
 8031d76:	2100      	movs	r1, #0
 8031d78:	5661      	ldrsb	r1, [r4, r1]
 8031d7a:	7863      	ldrb	r3, [r4, #1]
 8031d7c:	2b00      	cmp	r3, #0
 8031d7e:	d028      	beq.n	8031dd2 <otapi_put_dialog_tmpl+0x6e>
 8031d80:	2380      	movs	r3, #128	; 0x80
 8031d82:	425b      	negs	r3, r3
 8031d84:	4319      	orrs	r1, r3
 8031d86:	b2c9      	uxtb	r1, r1
 8031d88:	7021      	strb	r1, [r4, #0]
        q_writebyte(&txq, dialog->timeout);
 8031d8a:	4814      	ldr	r0, [pc, #80]	; (8031ddc <otapi_put_dialog_tmpl+0x78>)
 8031d8c:	f002 fd61 	bl	8034852 <q_writebyte>
    
        // Write response list
        if (dialog->channels != 0) {
 8031d90:	7863      	ldrb	r3, [r4, #1]
 8031d92:	2b00      	cmp	r3, #0
 8031d94:	d014      	beq.n	8031dc0 <otapi_put_dialog_tmpl+0x5c>
            dll.comm.rx_channels = dialog->channels;
 8031d96:	4a10      	ldr	r2, [pc, #64]	; (8031dd8 <otapi_put_dialog_tmpl+0x74>)
 8031d98:	2131      	movs	r1, #49	; 0x31
 8031d9a:	5453      	strb	r3, [r2, r1]
            dll.comm.rx_chanlist = dialog->chanlist;
 8031d9c:	6861      	ldr	r1, [r4, #4]
 8031d9e:	6391      	str	r1, [r2, #56]	; 0x38
            q_writestring(&txq, dialog->chanlist, dialog->channels);
 8031da0:	7862      	ldrb	r2, [r4, #1]
 8031da2:	480e      	ldr	r0, [pc, #56]	; (8031ddc <otapi_put_dialog_tmpl+0x78>)
 8031da4:	f002 fdb3 	bl	803490e <q_writestring>
 8031da8:	e00a      	b.n	8031dc0 <otapi_put_dialog_tmpl+0x5c>
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
 8031daa:	4b0d      	ldr	r3, [pc, #52]	; (8031de0 <otapi_put_dialog_tmpl+0x7c>)
 8031dac:	785b      	ldrb	r3, [r3, #1]
 8031dae:	079b      	lsls	r3, r3, #30
 8031db0:	d50d      	bpl.n	8031dce <otapi_put_dialog_tmpl+0x6a>
 8031db2:	2100      	movs	r1, #0
 8031db4:	4b08      	ldr	r3, [pc, #32]	; (8031dd8 <otapi_put_dialog_tmpl+0x74>)
 8031db6:	6299      	str	r1, [r3, #40]	; 0x28
        q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
 8031db8:	b2c9      	uxtb	r1, r1
 8031dba:	4808      	ldr	r0, [pc, #32]	; (8031ddc <otapi_put_dialog_tmpl+0x78>)
 8031dbc:	f002 fd49 	bl	8034852 <q_writebyte>
        }
    }

    *status = 1;
 8031dc0:	2301      	movs	r3, #1
 8031dc2:	702b      	strb	r3, [r5, #0]
    return q_length(&txq);
 8031dc4:	4805      	ldr	r0, [pc, #20]	; (8031ddc <otapi_put_dialog_tmpl+0x78>)
 8031dc6:	f002 fcf6 	bl	80347b6 <q_length>
 8031dca:	b280      	uxth	r0, r0
}
 8031dcc:	bd70      	pop	{r4, r5, r6, pc}
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
 8031dce:	210f      	movs	r1, #15
 8031dd0:	e7f0      	b.n	8031db4 <otapi_put_dialog_tmpl+0x50>
        dialog->timeout    |= (dialog->channels != 0) << 7;     // 0 or 0x80
 8031dd2:	2300      	movs	r3, #0
 8031dd4:	e7d6      	b.n	8031d84 <otapi_put_dialog_tmpl+0x20>
 8031dd6:	46c0      	nop			; (mov r8, r8)
 8031dd8:	2000c410 	.word	0x2000c410
 8031ddc:	2000cb2c 	.word	0x2000cb2c
 8031de0:	2000c4dc 	.word	0x2000c4dc

08031de4 <otapi_put_query_tmpl>:
#endif


#ifndef EXTF_otapi_put_query_tmpl
ot_u16 otapi_put_query_tmpl(ot_u8* status, query_tmpl* query) {
 8031de4:	b570      	push	{r4, r5, r6, lr}
 8031de6:	0005      	movs	r5, r0
 8031de8:	000c      	movs	r4, r1
    /// Test for Anycast and Multicast addressing (query needs one of these)    

    if ((m2qp.cmd.code & M2TT_MASK) > M2TT_REQ_UB) {
 8031dea:	4b15      	ldr	r3, [pc, #84]	; (8031e40 <otapi_put_query_tmpl+0x5c>)
 8031dec:	781a      	ldrb	r2, [r3, #0]
 8031dee:	2370      	movs	r3, #112	; 0x70
 8031df0:	4013      	ands	r3, r2
 8031df2:	2b20      	cmp	r3, #32
 8031df4:	d803      	bhi.n	8031dfe <otapi_put_query_tmpl+0x1a>
        q_writestring(&txq, query->value, query->length);
    
        *status = 1;
        return q_length(&txq);
    }
    *status = 0;
 8031df6:	2300      	movs	r3, #0
 8031df8:	7003      	strb	r3, [r0, #0]
    return 0;
 8031dfa:	2000      	movs	r0, #0
}
 8031dfc:	bd70      	pop	{r4, r5, r6, pc}
        q_writebyte(&txq, query->length);
 8031dfe:	7849      	ldrb	r1, [r1, #1]
 8031e00:	4e10      	ldr	r6, [pc, #64]	; (8031e44 <otapi_put_query_tmpl+0x60>)
 8031e02:	0030      	movs	r0, r6
 8031e04:	f002 fd25 	bl	8034852 <q_writebyte>
        q_writebyte(&txq, query->code);
 8031e08:	7821      	ldrb	r1, [r4, #0]
 8031e0a:	0030      	movs	r0, r6
 8031e0c:	f002 fd21 	bl	8034852 <q_writebyte>
        if (query->code & 0x80) {
 8031e10:	2300      	movs	r3, #0
 8031e12:	56e3      	ldrsb	r3, [r4, r3]
 8031e14:	2b00      	cmp	r3, #0
 8031e16:	db0c      	blt.n	8031e32 <otapi_put_query_tmpl+0x4e>
        q_writestring(&txq, query->value, query->length);
 8031e18:	7862      	ldrb	r2, [r4, #1]
 8031e1a:	68a1      	ldr	r1, [r4, #8]
 8031e1c:	4c09      	ldr	r4, [pc, #36]	; (8031e44 <otapi_put_query_tmpl+0x60>)
 8031e1e:	0020      	movs	r0, r4
 8031e20:	f002 fd75 	bl	803490e <q_writestring>
        *status = 1;
 8031e24:	2301      	movs	r3, #1
 8031e26:	702b      	strb	r3, [r5, #0]
        return q_length(&txq);
 8031e28:	0020      	movs	r0, r4
 8031e2a:	f002 fcc4 	bl	80347b6 <q_length>
 8031e2e:	b280      	uxth	r0, r0
 8031e30:	e7e4      	b.n	8031dfc <otapi_put_query_tmpl+0x18>
            q_writestring(&txq, query->mask, query->length);
 8031e32:	7862      	ldrb	r2, [r4, #1]
 8031e34:	6861      	ldr	r1, [r4, #4]
 8031e36:	4803      	ldr	r0, [pc, #12]	; (8031e44 <otapi_put_query_tmpl+0x60>)
 8031e38:	f002 fd69 	bl	803490e <q_writestring>
 8031e3c:	e7ec      	b.n	8031e18 <otapi_put_query_tmpl+0x34>
 8031e3e:	46c0      	nop			; (mov r8, r8)
 8031e40:	2000c4dc 	.word	0x2000c4dc
 8031e44:	2000cb2c 	.word	0x2000cb2c

08031e48 <sub_put_isf_offset>:
}
#endif


#ifndef EXTF_otapi_put_isf_offset
void sub_put_isf_offset(ot_u8 is_series, ot_u16 offset) {
 8031e48:	b510      	push	{r4, lr}
    if (is_series) {
 8031e4a:	2800      	cmp	r0, #0
 8031e4c:	d003      	beq.n	8031e56 <sub_put_isf_offset+0xe>
        q_writeshort(&txq, offset);
 8031e4e:	4804      	ldr	r0, [pc, #16]	; (8031e60 <sub_put_isf_offset+0x18>)
 8031e50:	f002 fd04 	bl	803485c <q_writeshort>
    }
    else {
        q_writebyte(&txq, (ot_u8)offset);
    }
}
 8031e54:	bd10      	pop	{r4, pc}
        q_writebyte(&txq, (ot_u8)offset);
 8031e56:	b2c9      	uxtb	r1, r1
 8031e58:	4801      	ldr	r0, [pc, #4]	; (8031e60 <sub_put_isf_offset+0x18>)
 8031e5a:	f002 fcfa 	bl	8034852 <q_writebyte>
}
 8031e5e:	e7f9      	b.n	8031e54 <sub_put_isf_offset+0xc>
 8031e60:	2000cb2c 	.word	0x2000cb2c

08031e64 <otapi_put_isf_comp>:
#endif


#ifndef EXTF_otapi_put_isf_comp
ot_u16 otapi_put_isf_comp(ot_u8* status, isfcomp_tmpl* isfcomp) {
 8031e64:	b570      	push	{r4, r5, r6, lr}
 8031e66:	0005      	movs	r5, r0
 8031e68:	000c      	movs	r4, r1
    q_writebyte(&txq, isfcomp->isf_id);
 8031e6a:	7849      	ldrb	r1, [r1, #1]
 8031e6c:	4e07      	ldr	r6, [pc, #28]	; (8031e8c <otapi_put_isf_comp+0x28>)
 8031e6e:	0030      	movs	r0, r6
 8031e70:	f002 fcef 	bl	8034852 <q_writebyte>
    sub_put_isf_offset(isfcomp->is_series, isfcomp->offset);
 8031e74:	8861      	ldrh	r1, [r4, #2]
 8031e76:	7820      	ldrb	r0, [r4, #0]
 8031e78:	f7ff ffe6 	bl	8031e48 <sub_put_isf_offset>
    
    *status = 1;
 8031e7c:	2301      	movs	r3, #1
 8031e7e:	702b      	strb	r3, [r5, #0]
    return q_length(&txq);
 8031e80:	0030      	movs	r0, r6
 8031e82:	f002 fc98 	bl	80347b6 <q_length>
 8031e86:	b280      	uxth	r0, r0
}
 8031e88:	bd70      	pop	{r4, r5, r6, pc}
 8031e8a:	46c0      	nop			; (mov r8, r8)
 8031e8c:	2000cb2c 	.word	0x2000cb2c

08031e90 <otapi_put_isf_call>:
#endif


#ifndef EXTF_otapi_put_isf_call
ot_u16 otapi_put_isf_call(ot_u8* status, isfcall_tmpl* isfcall) {
 8031e90:	b570      	push	{r4, r5, r6, lr}
 8031e92:	0006      	movs	r6, r0
 8031e94:	000c      	movs	r4, r1
    q_writebyte(&txq, isfcall->max_return);
 8031e96:	7909      	ldrb	r1, [r1, #4]
 8031e98:	4d09      	ldr	r5, [pc, #36]	; (8031ec0 <otapi_put_isf_call+0x30>)
 8031e9a:	0028      	movs	r0, r5
 8031e9c:	f002 fcd9 	bl	8034852 <q_writebyte>
    q_writebyte(&txq, isfcall->isf_id);
 8031ea0:	7861      	ldrb	r1, [r4, #1]
 8031ea2:	0028      	movs	r0, r5
 8031ea4:	f002 fcd5 	bl	8034852 <q_writebyte>
    sub_put_isf_offset(isfcall->is_series, isfcall->offset);
 8031ea8:	8861      	ldrh	r1, [r4, #2]
 8031eaa:	7820      	ldrb	r0, [r4, #0]
 8031eac:	f7ff ffcc 	bl	8031e48 <sub_put_isf_offset>
    
    *status = 1;
 8031eb0:	2301      	movs	r3, #1
 8031eb2:	7033      	strb	r3, [r6, #0]
    return q_length(&txq);
 8031eb4:	0028      	movs	r0, r5
 8031eb6:	f002 fc7e 	bl	80347b6 <q_length>
 8031eba:	b280      	uxth	r0, r0
}
 8031ebc:	bd70      	pop	{r4, r5, r6, pc}
 8031ebe:	46c0      	nop			; (mov r8, r8)
 8031ec0:	2000cb2c 	.word	0x2000cb2c

08031ec4 <otapi_put_udp_tmpl>:
}
#endif


#ifndef EXTF_otapi_put_udp_tmpl
ot_u16 otapi_put_udp_tmpl(ot_u8* status, udp_tmpl* udp) {
 8031ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031ec6:	0006      	movs	r6, r0
 8031ec8:	000d      	movs	r5, r1
    ot_u16 space;
    vlFILE* fp = NULL;
    
    space = q_writespace(&txq);
 8031eca:	4825      	ldr	r0, [pc, #148]	; (8031f60 <otapi_put_udp_tmpl+0x9c>)
 8031ecc:	f002 fc7d 	bl	80347ca <q_writespace>
 8031ed0:	b284      	uxth	r4, r0
    ///      detect boundaries across the packet rather than simply across the
    ///      frame.  It will probably require a network-layer function to 
    ///      determine the overhead when supplied payload length.
#   else
        
        if (udp->data == NULL) {
 8031ed2:	686b      	ldr	r3, [r5, #4]
 8031ed4:	2b00      	cmp	r3, #0
 8031ed6:	d00f      	beq.n	8031ef8 <otapi_put_udp_tmpl+0x34>
    vlFILE* fp = NULL;
 8031ed8:	2700      	movs	r7, #0
        	///@todo add a user to UDP type for access control
        	fp              = ISF_open(udp->src_port, VL_ACCESS_R, AUTH_GUEST );
        	udp->data_length= (fp != NULL) ? fp->length : 0;
        }
        
        space -= 4;
 8031eda:	3c04      	subs	r4, #4
 8031edc:	b2a4      	uxth	r4, r4
        if (space < udp->data_length) {
 8031ede:	882b      	ldrh	r3, [r5, #0]
 8031ee0:	42a3      	cmp	r3, r4
 8031ee2:	d915      	bls.n	8031f10 <otapi_put_udp_tmpl+0x4c>
            *status = 0;
 8031ee4:	2300      	movs	r3, #0
 8031ee6:	7033      	strb	r3, [r6, #0]
            else {
            	q_writestring(&txq, udp->data, udp->data_length);
            }
        }
        
        vl_close(fp);
 8031ee8:	0038      	movs	r0, r7
 8031eea:	f003 f80f 	bl	8034f0c <vl_close>
#   endif

    return q_length(&txq);
 8031eee:	481c      	ldr	r0, [pc, #112]	; (8031f60 <otapi_put_udp_tmpl+0x9c>)
 8031ef0:	f002 fc61 	bl	80347b6 <q_length>
 8031ef4:	b280      	uxth	r0, r0
}
 8031ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	fp              = ISF_open(udp->src_port, VL_ACCESS_R, AUTH_GUEST );
 8031ef8:	78e8      	ldrb	r0, [r5, #3]
 8031efa:	4a1a      	ldr	r2, [pc, #104]	; (8031f64 <otapi_put_udp_tmpl+0xa0>)
 8031efc:	2124      	movs	r1, #36	; 0x24
 8031efe:	f003 f84c 	bl	8034f9a <ISF_open>
 8031f02:	1e07      	subs	r7, r0, #0
        	udp->data_length= (fp != NULL) ? fp->length : 0;
 8031f04:	d002      	beq.n	8031f0c <otapi_put_udp_tmpl+0x48>
 8031f06:	8903      	ldrh	r3, [r0, #8]
 8031f08:	802b      	strh	r3, [r5, #0]
 8031f0a:	e7e6      	b.n	8031eda <otapi_put_udp_tmpl+0x16>
 8031f0c:	2300      	movs	r3, #0
 8031f0e:	e7fb      	b.n	8031f08 <otapi_put_udp_tmpl+0x44>
            *status = 1;
 8031f10:	2301      	movs	r3, #1
 8031f12:	7033      	strb	r3, [r6, #0]
            q_writebyte(&txq, (ALP_FLAG_MB | ALP_FLAG_ME));
 8031f14:	4c12      	ldr	r4, [pc, #72]	; (8031f60 <otapi_put_udp_tmpl+0x9c>)
 8031f16:	21c0      	movs	r1, #192	; 0xc0
 8031f18:	0020      	movs	r0, r4
 8031f1a:	f002 fc9a 	bl	8034852 <q_writebyte>
            q_writebyte(&txq, (ot_u8)udp->data_length);
 8031f1e:	7829      	ldrb	r1, [r5, #0]
 8031f20:	0020      	movs	r0, r4
 8031f22:	f002 fc96 	bl	8034852 <q_writebyte>
            q_writebyte(&txq, udp->dst_port);
 8031f26:	78a9      	ldrb	r1, [r5, #2]
 8031f28:	0020      	movs	r0, r4
 8031f2a:	f002 fc92 	bl	8034852 <q_writebyte>
            q_writebyte(&txq, udp->src_port);
 8031f2e:	78e9      	ldrb	r1, [r5, #3]
 8031f30:	0020      	movs	r0, r4
 8031f32:	f002 fc8e 	bl	8034852 <q_writebyte>
            if (udp->data == NULL) {
 8031f36:	6869      	ldr	r1, [r5, #4]
 8031f38:	2900      	cmp	r1, #0
 8031f3a:	d005      	beq.n	8031f48 <otapi_put_udp_tmpl+0x84>
            	q_writestring(&txq, udp->data, udp->data_length);
 8031f3c:	2300      	movs	r3, #0
 8031f3e:	5eea      	ldrsh	r2, [r5, r3]
 8031f40:	4807      	ldr	r0, [pc, #28]	; (8031f60 <otapi_put_udp_tmpl+0x9c>)
 8031f42:	f002 fce4 	bl	803490e <q_writestring>
 8031f46:	e7cf      	b.n	8031ee8 <otapi_put_udp_tmpl+0x24>
                txq.putcursor += vl_load(fp, udp->data_length, txq.putcursor);
 8031f48:	4c05      	ldr	r4, [pc, #20]	; (8031f60 <otapi_put_udp_tmpl+0x9c>)
 8031f4a:	8829      	ldrh	r1, [r5, #0]
 8031f4c:	68a2      	ldr	r2, [r4, #8]
 8031f4e:	0038      	movs	r0, r7
 8031f50:	f002 ff7b 	bl	8034e4a <vl_load>
 8031f54:	68a3      	ldr	r3, [r4, #8]
 8031f56:	469c      	mov	ip, r3
 8031f58:	4460      	add	r0, ip
 8031f5a:	60a0      	str	r0, [r4, #8]
 8031f5c:	e7c4      	b.n	8031ee8 <otapi_put_udp_tmpl+0x24>
 8031f5e:	46c0      	nop			; (mov r8, r8)
 8031f60:	2000cb2c 	.word	0x2000cb2c
 8031f64:	08037144 	.word	0x08037144

08031f68 <dll_response_applet>:

/** Internal DLL applets <BR>
  * ========================================================================<BR>
  */

OT_WEAK void dll_response_applet(m2session* active) {
 8031f68:	b510      	push	{r4, lr}
/// If this is a response transmission of a session with "Listen" active, it
/// means the contention period (Tc) is followed immediately with a subsequent
/// request.  We must not overlap that request with the tail-end of our own
/// response.  Therefore, we subtract from Tc the duration of this response.
    if (active->flags & M2_FLAG_LISTEN) {
 8031f6a:	230b      	movs	r3, #11
 8031f6c:	56c3      	ldrsb	r3, [r0, r3]
 8031f6e:	2b00      	cmp	r3, #0
 8031f70:	db00      	blt.n	8031f74 <dll_response_applet+0xc>
            sys.task_HSS.cursor     = 0;
            sys.task_HSS.nextevent  = TI2CLK(dll.comm.rx_timeout);
            dll.comm.rx_timeout     = rm2_default_tgd(active->channel);
        }
    }
}
 8031f72:	bd10      	pop	{r4, pc}
        ot_u8 substate = active->netstate & M2_NETSTATE_TMASK;
 8031f74:	79c2      	ldrb	r2, [r0, #7]
 8031f76:	2370      	movs	r3, #112	; 0x70
 8031f78:	4013      	ands	r3, r2
        if (substate == M2_NETSTATE_RESPTX) {
 8031f7a:	2b10      	cmp	r3, #16
 8031f7c:	d00c      	beq.n	8031f98 <dll_response_applet+0x30>
        else if (substate == M2_NETSTATE_REQRX) {
 8031f7e:	2b20      	cmp	r3, #32
 8031f80:	d1f7      	bne.n	8031f72 <dll_response_applet+0xa>
            sys.task_HSS.cursor     = 0;
 8031f82:	4b09      	ldr	r3, [pc, #36]	; (8031fa8 <dll_response_applet+0x40>)
 8031f84:	2200      	movs	r2, #0
 8031f86:	755a      	strb	r2, [r3, #21]
            sys.task_HSS.nextevent  = TI2CLK(dll.comm.rx_timeout);
 8031f88:	4c08      	ldr	r4, [pc, #32]	; (8031fac <dll_response_applet+0x44>)
 8031f8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8031f8c:	619a      	str	r2, [r3, #24]
            dll.comm.rx_timeout     = rm2_default_tgd(active->channel);
 8031f8e:	7980      	ldrb	r0, [r0, #6]
 8031f90:	f7ff fbbc 	bl	803170c <rm2_default_tgd>
 8031f94:	62a0      	str	r0, [r4, #40]	; 0x28
}
 8031f96:	e7ec      	b.n	8031f72 <dll_response_applet+0xa>
            dll.comm.tc -= rm2_txpkt_duration(&txq);  //TI2CLK(rm2_txpkt_duration(&txq));
 8031f98:	4805      	ldr	r0, [pc, #20]	; (8031fb0 <dll_response_applet+0x48>)
 8031f9a:	f7ff fbe9 	bl	8031770 <rm2_txpkt_duration>
 8031f9e:	4b03      	ldr	r3, [pc, #12]	; (8031fac <dll_response_applet+0x44>)
 8031fa0:	6a1a      	ldr	r2, [r3, #32]
 8031fa2:	1a10      	subs	r0, r2, r0
 8031fa4:	6218      	str	r0, [r3, #32]
 8031fa6:	e7e4      	b.n	8031f72 <dll_response_applet+0xa>
 8031fa8:	2000cbdc 	.word	0x2000cbdc
 8031fac:	2000c410 	.word	0x2000c410
 8031fb0:	2000cb2c 	.word	0x2000cb2c

08031fb4 <sub_csma_scramble>:





void sub_csma_scramble(void) {
 8031fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8031fb6:	46c6      	mov	lr, r8
 8031fb8:	b500      	push	{lr}
/// Sort of optional: Go through the channel list and scramble the channel
/// entries randomly in order to improve band utilization, as multiple devices
/// will scramble the list differently.
    ot_u8 txchans = dll.comm.tx_channels - 1;
 8031fba:	4a18      	ldr	r2, [pc, #96]	; (803201c <sub_csma_scramble+0x68>)
 8031fbc:	2330      	movs	r3, #48	; 0x30
 8031fbe:	5cd4      	ldrb	r4, [r2, r3]
 8031fc0:	3c01      	subs	r4, #1
 8031fc2:	b2e4      	uxtb	r4, r4

    if (txchans) {
 8031fc4:	2c00      	cmp	r4, #0
 8031fc6:	d102      	bne.n	8031fce <sub_csma_scramble+0x1a>

            rot.ushort     &= ~0x0101;   //Shift each byte right 1 bit
            rot.ushort    >>= 1;
        }
    }
}
 8031fc8:	bc80      	pop	{r7}
 8031fca:	46b8      	mov	r8, r7
 8031fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rot.ushort = rand_prn16();
 8031fce:	f003 fea5 	bl	8035d1c <rand_prn16>
 8031fd2:	1c06      	adds	r6, r0, #0
        for (i=0; i<txchans; i++) {
 8031fd4:	2300      	movs	r3, #0
 8031fd6:	e01e      	b.n	8032016 <sub_csma_scramble+0x62>
            j = i + ((rot.ubyte[0] & 1) != 0);
 8031fd8:	2201      	movs	r2, #1
 8031fda:	0011      	movs	r1, r2
 8031fdc:	4031      	ands	r1, r6
 8031fde:	18c9      	adds	r1, r1, r3
 8031fe0:	b2c9      	uxtb	r1, r1
            k = txchans * ((rot.ubyte[1] & 1) != 0);
 8031fe2:	0430      	lsls	r0, r6, #16
 8031fe4:	0e00      	lsrs	r0, r0, #24
 8031fe6:	4002      	ands	r2, r0
 8031fe8:	4362      	muls	r2, r4
 8031fea:	b2d2      	uxtb	r2, r2
            scratch                 = dll.comm.tx_chanlist[i];
 8031fec:	4d0b      	ldr	r5, [pc, #44]	; (803201c <sub_csma_scramble+0x68>)
 8031fee:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8031ff0:	5cc7      	ldrb	r7, [r0, r3]
 8031ff2:	46b8      	mov	r8, r7
            dll.comm.tx_chanlist[i] = dll.comm.tx_chanlist[k];
 8031ff4:	5c87      	ldrb	r7, [r0, r2]
 8031ff6:	54c7      	strb	r7, [r0, r3]
            dll.comm.tx_chanlist[k] = scratch;
 8031ff8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8031ffa:	4647      	mov	r7, r8
 8031ffc:	5487      	strb	r7, [r0, r2]
            scratch                 = dll.comm.tx_chanlist[i];
 8031ffe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8032000:	5cd0      	ldrb	r0, [r2, r3]
            dll.comm.tx_chanlist[i] = dll.comm.tx_chanlist[j];
 8032002:	5c57      	ldrb	r7, [r2, r1]
 8032004:	54d7      	strb	r7, [r2, r3]
            dll.comm.tx_chanlist[j] = scratch;
 8032006:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8032008:	5450      	strb	r0, [r2, r1]
            rot.ushort     &= ~0x0101;   //Shift each byte right 1 bit
 803200a:	4805      	ldr	r0, [pc, #20]	; (8032020 <sub_csma_scramble+0x6c>)
 803200c:	4030      	ands	r0, r6
 803200e:	b280      	uxth	r0, r0
            rot.ushort    >>= 1;
 8032010:	0846      	lsrs	r6, r0, #1
        for (i=0; i<txchans; i++) {
 8032012:	3301      	adds	r3, #1
 8032014:	b2db      	uxtb	r3, r3
 8032016:	42a3      	cmp	r3, r4
 8032018:	d3de      	bcc.n	8031fd8 <sub_csma_scramble+0x24>
 803201a:	e7d5      	b.n	8031fc8 <sub_csma_scramble+0x14>
 803201c:	2000c410 	.word	0x2000c410
 8032020:	fffffefe 	.word	0xfffffefe

08032024 <sub_rigd_newslot>:
    }
}



CLK_UNIT sub_rigd_newslot(void) {
 8032024:	b510      	push	{r4, lr}
/// halve tc from previous value and offset a random within that duration
    dll.comm.tc >>= 1;
 8032026:	4a07      	ldr	r2, [pc, #28]	; (8032044 <sub_rigd_newslot+0x20>)
 8032028:	6a13      	ldr	r3, [r2, #32]
 803202a:	105b      	asrs	r3, r3, #1
 803202c:	6213      	str	r3, [r2, #32]
    if (dll.comm.tc == 0)
 803202e:	d101      	bne.n	8032034 <sub_rigd_newslot+0x10>
        return 0;
 8032030:	2000      	movs	r0, #0
    
    //return (TI2CLK(rand_prn16()) % (CLK_UNIT)dll.comm.tc);
    return (rand_prn16() % (CLK_UNIT)dll.comm.tc);
}
 8032032:	bd10      	pop	{r4, pc}
    return (rand_prn16() % (CLK_UNIT)dll.comm.tc);
 8032034:	f003 fe72 	bl	8035d1c <rand_prn16>
 8032038:	4b02      	ldr	r3, [pc, #8]	; (8032044 <sub_rigd_newslot+0x20>)
 803203a:	8c19      	ldrh	r1, [r3, #32]
 803203c:	f7fe f8f4 	bl	8030228 <__aeabi_uidivmod>
 8032040:	b288      	uxth	r0, r1
 8032042:	e7f6      	b.n	8032032 <sub_rigd_newslot+0xe>
 8032044:	2000c410 	.word	0x2000c410

08032048 <sub_fcloop>:
CLK_UNIT sub_fcloop(void) {
 8032048:	b510      	push	{r4, lr}
    if (dll.comm.csmaca_params & 0x20) {    //NO CA
 803204a:	4a0d      	ldr	r2, [pc, #52]	; (8032080 <sub_fcloop+0x38>)
 803204c:	232e      	movs	r3, #46	; 0x2e
 803204e:	5cd3      	ldrb	r3, [r2, r3]
 8032050:	069a      	lsls	r2, r3, #26
 8032052:	d40c      	bmi.n	803206e <sub_fcloop+0x26>
    if (dll.comm.csmaca_params & 0x18) {    //RAIND, AIND
 8032054:	2218      	movs	r2, #24
 8032056:	421a      	tst	r2, r3
 8032058:	d10c      	bne.n	8032074 <sub_fcloop+0x2c>
        wait    = (dll.comm.tc - dll.comm.tca);
 803205a:	4b09      	ldr	r3, [pc, #36]	; (8032080 <sub_fcloop+0x38>)
 803205c:	6a18      	ldr	r0, [r3, #32]
 803205e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8032060:	1b04      	subs	r4, r0, r4
        wait   += sub_rigd_newslot();
 8032062:	f7ff ffdf 	bl	8032024 <sub_rigd_newslot>
        return (wait < 0) ? 0 : (CLK_UNIT)wait;
 8032066:	1900      	adds	r0, r0, r4
 8032068:	d408      	bmi.n	803207c <sub_fcloop+0x34>
 803206a:	b280      	uxth	r0, r0
 803206c:	e001      	b.n	8032072 <sub_fcloop+0x2a>
        return phymac[0].tg; //TI2CLK(phymac[0].tg);
 803206e:	4b05      	ldr	r3, [pc, #20]	; (8032084 <sub_fcloop+0x3c>)
 8032070:	7858      	ldrb	r0, [r3, #1]
}
 8032072:	bd10      	pop	{r4, pc}
        return rm2_txpkt_duration(&txq); //TI2CLK(rm2_txpkt_duration(&txq));
 8032074:	4804      	ldr	r0, [pc, #16]	; (8032088 <sub_fcloop+0x40>)
 8032076:	f7ff fb7b 	bl	8031770 <rm2_txpkt_duration>
 803207a:	e7fa      	b.n	8032072 <sub_fcloop+0x2a>
        return (wait < 0) ? 0 : (CLK_UNIT)wait;
 803207c:	2000      	movs	r0, #0
 803207e:	e7f8      	b.n	8032072 <sub_fcloop+0x2a>
 8032080:	2000c410 	.word	0x2000c410
 8032084:	2000c480 	.word	0x2000c480
 8032088:	2000cb2c 	.word	0x2000cb2c

0803208c <sub_fcinit>:
CLK_UNIT sub_fcinit(void) {
 803208c:	b570      	push	{r4, r5, r6, lr}
    sub_csma_scramble();
 803208e:	f7ff ff91 	bl	8031fb4 <sub_csma_scramble>
    if (dll.comm.csmaca_params & M2_CSMACA_AIND) {
 8032092:	4a0d      	ldr	r2, [pc, #52]	; (80320c8 <sub_fcinit+0x3c>)
 8032094:	232e      	movs	r3, #46	; 0x2e
 8032096:	5cd3      	ldrb	r3, [r2, r3]
 8032098:	06da      	lsls	r2, r3, #27
 803209a:	d412      	bmi.n	80320c2 <sub_fcinit+0x36>
    if (dll.comm.csmaca_params & M2_CSMACA_RAIND) {
 803209c:	071b      	lsls	r3, r3, #28
 803209e:	d402      	bmi.n	80320a6 <sub_fcinit+0x1a>
    return sub_rigd_newslot();
 80320a0:	f7ff ffc0 	bl	8032024 <sub_rigd_newslot>
}
 80320a4:	bd70      	pop	{r4, r5, r6, pc}
        random  = rand_prn16();
 80320a6:	f003 fe39 	bl	8035d1c <rand_prn16>
 80320aa:	0004      	movs	r4, r0
        random %= dll.comm.tc - rm2_txpkt_duration(&txq);
 80320ac:	4b06      	ldr	r3, [pc, #24]	; (80320c8 <sub_fcinit+0x3c>)
 80320ae:	6a1d      	ldr	r5, [r3, #32]
 80320b0:	4806      	ldr	r0, [pc, #24]	; (80320cc <sub_fcinit+0x40>)
 80320b2:	f7ff fb5d 	bl	8031770 <rm2_txpkt_duration>
 80320b6:	1a29      	subs	r1, r5, r0
 80320b8:	0020      	movs	r0, r4
 80320ba:	f7fe f99f 	bl	80303fc <__aeabi_idivmod>
 80320be:	b288      	uxth	r0, r1
        return random;
 80320c0:	e7f0      	b.n	80320a4 <sub_fcinit+0x18>
        return 0;
 80320c2:	2000      	movs	r0, #0
 80320c4:	e7ee      	b.n	80320a4 <sub_fcinit+0x18>
 80320c6:	46c0      	nop			; (mov r8, r8)
 80320c8:	2000c410 	.word	0x2000c410
 80320cc:	2000cb2c 	.word	0x2000cb2c

080320d0 <dll_block_idletasks>:
    sys.task_HSS.event  = 0;
 80320d0:	4b03      	ldr	r3, [pc, #12]	; (80320e0 <dll_block_idletasks+0x10>)
 80320d2:	2200      	movs	r2, #0
 80320d4:	751a      	strb	r2, [r3, #20]
    sys.task_BTS.event  = 0;
 80320d6:	771a      	strb	r2, [r3, #28]
    sys.task_SSS.event  = 0;
 80320d8:	2124      	movs	r1, #36	; 0x24
 80320da:	545a      	strb	r2, [r3, r1]
}
 80320dc:	4770      	bx	lr
 80320de:	46c0      	nop			; (mov r8, r8)
 80320e0:	2000cbdc 	.word	0x2000cbdc

080320e4 <dll_refresh_rts>:
}
 80320e4:	4770      	bx	lr
	...

080320e8 <dll_idle>:
OT_WEAK void dll_idle(void) {
 80320e8:	b570      	push	{r4, r5, r6, lr}
	radio_gag();
 80320ea:	f7ff f8d5 	bl	8031298 <radio_gag>
    radio_sleep();
 80320ee:	f7ff f967 	bl	80313c0 <radio_sleep>
    sys.task_RFA.event  = 0;
 80320f2:	4b0d      	ldr	r3, [pc, #52]	; (8032128 <dll_idle+0x40>)
 80320f4:	2200      	movs	r2, #0
 80320f6:	711a      	strb	r2, [r3, #4]
    scan_evt_ptr        = (ot_u8*)&scan_events[dll.idle_state<<1];
 80320f8:	4a0c      	ldr	r2, [pc, #48]	; (803212c <dll_idle+0x44>)
 80320fa:	7814      	ldrb	r4, [r2, #0]
 80320fc:	0061      	lsls	r1, r4, #1
 80320fe:	480c      	ldr	r0, [pc, #48]	; (8032130 <dll_idle+0x48>)
 8032100:	1845      	adds	r5, r0, r1
    sys.task_HSS.event  = *scan_evt_ptr;
 8032102:	5c41      	ldrb	r1, [r0, r1]
 8032104:	7519      	strb	r1, [r3, #20]
    sys.task_SSS.event  = *(++scan_evt_ptr);
 8032106:	7868      	ldrb	r0, [r5, #1]
 8032108:	2124      	movs	r1, #36	; 0x24
 803210a:	5458      	strb	r0, [r3, r1]
    sys.task_BTS.event  = ((dll.netconf.b_attempts != 0) \
 803210c:	7f53      	ldrb	r3, [r2, #29]
    		            && (dll.idle_state != M2_DLLIDLE_OFF));
 803210e:	2b00      	cmp	r3, #0
 8032110:	d003      	beq.n	803211a <dll_idle+0x32>
 8032112:	2c00      	cmp	r4, #0
 8032114:	d105      	bne.n	8032122 <dll_idle+0x3a>
 8032116:	2200      	movs	r2, #0
 8032118:	e000      	b.n	803211c <dll_idle+0x34>
 803211a:	2200      	movs	r2, #0
    sys.task_BTS.event  = ((dll.netconf.b_attempts != 0) \
 803211c:	4b02      	ldr	r3, [pc, #8]	; (8032128 <dll_idle+0x40>)
 803211e:	771a      	strb	r2, [r3, #28]
}
 8032120:	bd70      	pop	{r4, r5, r6, pc}
    		            && (dll.idle_state != M2_DLLIDLE_OFF));
 8032122:	2201      	movs	r2, #1
 8032124:	e7fa      	b.n	803211c <dll_idle+0x34>
 8032126:	46c0      	nop			; (mov r8, r8)
 8032128:	2000cbdc 	.word	0x2000cbdc
 803212c:	2000c410 	.word	0x2000c410
 8032130:	080370a8 	.word	0x080370a8

08032134 <dll_rfevt_brx>:
OT_WEAK void dll_rfevt_brx(ot_int scode, ot_int fcode) {
 8032134:	b510      	push	{r4, lr}
 8032136:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=100);
 8032138:	4b1b      	ldr	r3, [pc, #108]	; (80321a8 <dll_rfevt_brx+0x74>)
 803213a:	2200      	movs	r2, #0
 803213c:	801a      	strh	r2, [r3, #0]
 803213e:	3264      	adds	r2, #100	; 0x64
 8032140:	805a      	strh	r2, [r3, #2]
    if (fcode != 0) {
 8032142:	2900      	cmp	r1, #0
 8032144:	d01a      	beq.n	803217c <dll_rfevt_brx+0x48>
    	__DEBUG_ERRCODE_EVAL(=101);
 8032146:	3201      	adds	r2, #1
 8032148:	805a      	strh	r2, [r3, #2]
    	if (dll.comm.redundants != 0) {
 803214a:	4a18      	ldr	r2, [pc, #96]	; (80321ac <dll_rfevt_brx+0x78>)
 803214c:	232f      	movs	r3, #47	; 0x2f
 803214e:	5cd3      	ldrb	r3, [r2, r3]
 8032150:	2b00      	cmp	r3, #0
 8032152:	d10f      	bne.n	8032174 <dll_rfevt_brx+0x40>
    session_pop();
 8032154:	f001 f95c 	bl	8033410 <session_pop>
    dll_idle();
 8032158:	f7ff ffc6 	bl	80320e8 <dll_idle>
    DLL_SIG_RFTERMINATE(3, scode);
 803215c:	0021      	movs	r1, r4
 803215e:	2003      	movs	r0, #3
 8032160:	f7fe fef4 	bl	8030f4c <dll_sig_rfterminate>
    sys.task_RFA.event = 0;
 8032164:	4812      	ldr	r0, [pc, #72]	; (80321b0 <dll_rfevt_brx+0x7c>)
 8032166:	2300      	movs	r3, #0
 8032168:	7103      	strb	r3, [r0, #4]
    sys_preempt(&sys.task_RFA, 0);
 803216a:	3004      	adds	r0, #4
 803216c:	2100      	movs	r1, #0
 803216e:	f003 f8e1 	bl	8035334 <sys_preempt>
}
 8032172:	bd10      	pop	{r4, pc}
    		rm2_reenter_rx(&dll_rfevt_brx);   //non-blocking
 8032174:	480f      	ldr	r0, [pc, #60]	; (80321b4 <dll_rfevt_brx+0x80>)
 8032176:	f7ff f969 	bl	803144c <rm2_reenter_rx>
    		return;
 803217a:	e7fa      	b.n	8032172 <dll_rfevt_brx+0x3e>
    if (scode < 0) {
 803217c:	2800      	cmp	r0, #0
 803217e:	db0d      	blt.n	803219c <dll_rfevt_brx+0x68>
    if (rm2_mac_filter()) {
 8032180:	f000 ff88 	bl	8033094 <rm2_mac_filter>
 8032184:	2800      	cmp	r0, #0
 8032186:	d0e5      	beq.n	8032154 <dll_rfevt_brx+0x20>
        __DEBUG_ERRCODE_EVAL(=103);
 8032188:	4b07      	ldr	r3, [pc, #28]	; (80321a8 <dll_rfevt_brx+0x74>)
 803218a:	2200      	movs	r2, #0
 803218c:	801a      	strh	r2, [r3, #0]
 803218e:	3267      	adds	r2, #103	; 0x67
 8032190:	805a      	strh	r2, [r3, #2]
        if (network_parse_bf()) {
 8032192:	f000 ff6b 	bl	803306c <network_parse_bf>
 8032196:	2800      	cmp	r0, #0
 8032198:	d1e0      	bne.n	803215c <dll_rfevt_brx+0x28>
    dll_rfevt_FAILURE:
 803219a:	e7db      	b.n	8032154 <dll_rfevt_brx+0x20>
        __DEBUG_ERRCODE_EVAL(=102);
 803219c:	4b02      	ldr	r3, [pc, #8]	; (80321a8 <dll_rfevt_brx+0x74>)
 803219e:	2266      	movs	r2, #102	; 0x66
 80321a0:	805a      	strh	r2, [r3, #2]
        scode = RM2_ERR_GENERIC;
 80321a2:	2406      	movs	r4, #6
 80321a4:	4264      	negs	r4, r4
    	goto dll_rfevt_FAILURE;
 80321a6:	e7d5      	b.n	8032154 <dll_rfevt_brx+0x20>
 80321a8:	2000cc2c 	.word	0x2000cc2c
 80321ac:	2000c410 	.word	0x2000c410
 80321b0:	2000cbdc 	.word	0x2000cbdc
 80321b4:	08032135 	.word	0x08032135

080321b8 <dll_rfevt_frx>:
OT_WEAK void dll_rfevt_frx(ot_int pcode, ot_int fcode) {
 80321b8:	b570      	push	{r4, r5, r6, lr}
 80321ba:	0005      	movs	r5, r0
 80321bc:	000c      	movs	r4, r1
    m2session*  active  = session_top();
 80321be:	f001 f933 	bl	8033428 <session_top>
 80321c2:	0006      	movs	r6, r0
    __DEBUG_ERRCODE_EVAL(=110);
 80321c4:	4b3a      	ldr	r3, [pc, #232]	; (80322b0 <dll_rfevt_frx+0xf8>)
 80321c6:	2200      	movs	r2, #0
 80321c8:	801a      	strh	r2, [r3, #0]
 80321ca:	326e      	adds	r2, #110	; 0x6e
 80321cc:	805a      	strh	r2, [r3, #2]
    if (pcode < 0) {
 80321ce:	2d00      	cmp	r5, #0
 80321d0:	db1f      	blt.n	8032212 <dll_rfevt_frx+0x5a>
        __DEBUG_ERRCODE_EVAL(=113);
 80321d2:	4b37      	ldr	r3, [pc, #220]	; (80322b0 <dll_rfevt_frx+0xf8>)
 80321d4:	2271      	movs	r2, #113	; 0x71
 80321d6:	805a      	strh	r2, [r3, #2]
    	if (fcode != 0) {
 80321d8:	2c00      	cmp	r4, #0
 80321da:	d03e      	beq.n	803225a <dll_rfevt_frx+0xa2>
    		frx_code = -1;
 80321dc:	2401      	movs	r4, #1
 80321de:	4264      	negs	r4, r4
        if (pcode == 0) {
 80321e0:	2d00      	cmp	r5, #0
 80321e2:	d14d      	bne.n	8032280 <dll_rfevt_frx+0xc8>
            ot_bool rx_isresp = (active->netstate & M2_NETSTATE_RESP);
 80321e4:	79f2      	ldrb	r2, [r6, #7]
 80321e6:	2310      	movs	r3, #16
 80321e8:	4013      	ands	r3, r2
            if (frx_code == 0) {
 80321ea:	2c00      	cmp	r4, #0
 80321ec:	d104      	bne.n	80321f8 <dll_rfevt_frx+0x40>
                sys.task_RFA.reserve = 20;  ///@todo Could have quick evaluator here
 80321ee:	4a31      	ldr	r2, [pc, #196]	; (80322b4 <dll_rfevt_frx+0xfc>)
 80321f0:	2114      	movs	r1, #20
 80321f2:	7191      	strb	r1, [r2, #6]
                sys.task_RFA.event   = 1;   ///Process the packet!!!
 80321f4:	3913      	subs	r1, #19
 80321f6:	7111      	strb	r1, [r2, #4]
            if (rx_isresp) {
 80321f8:	2b00      	cmp	r3, #0
 80321fa:	d004      	beq.n	8032206 <dll_rfevt_frx+0x4e>
                dll.counter     = dll.netconf.hold_limit;
 80321fc:	4a2e      	ldr	r2, [pc, #184]	; (80322b8 <dll_rfevt_frx+0x100>)
 80321fe:	8bd1      	ldrh	r1, [r2, #30]
 8032200:	8051      	strh	r1, [r2, #2]
                dll.idle_state  = M2_DLLIDLE_HOLD;
 8032202:	2102      	movs	r1, #2
 8032204:	7011      	strb	r1, [r2, #0]
            re_init = (frx_code || rx_isresp);
 8032206:	2c00      	cmp	r4, #0
 8032208:	d12e      	bne.n	8032268 <dll_rfevt_frx+0xb0>
 803220a:	2b00      	cmp	r3, #0
 803220c:	d033      	beq.n	8032276 <dll_rfevt_frx+0xbe>
 803220e:	2501      	movs	r5, #1
 8032210:	e02b      	b.n	803226a <dll_rfevt_frx+0xb2>
        __DEBUG_ERRCODE_EVAL(=111);
 8032212:	3201      	adds	r2, #1
 8032214:	805a      	strh	r2, [r3, #2]
        sys.task_RFA.event  = 0;
 8032216:	4b27      	ldr	r3, [pc, #156]	; (80322b4 <dll_rfevt_frx+0xfc>)
 8032218:	2200      	movs	r2, #0
 803221a:	711a      	strb	r2, [r3, #4]
        if (dll.comm.redundants) {
 803221c:	4a26      	ldr	r2, [pc, #152]	; (80322b8 <dll_rfevt_frx+0x100>)
 803221e:	232f      	movs	r3, #47	; 0x2f
 8032220:	5cd3      	ldrb	r3, [r2, r3]
 8032222:	2b00      	cmp	r3, #0
 8032224:	d004      	beq.n	8032230 <dll_rfevt_frx+0x78>
            active->netstate   = (M2_NETSTATE_REQTX | M2_NETSTATE_INIT | M2_NETFLAG_FIRSTRX);
 8032226:	230a      	movs	r3, #10
 8032228:	71c3      	strb	r3, [r0, #7]
    ot_bool     re_init = False;
 803222a:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 803222c:	2400      	movs	r4, #0
 803222e:	e028      	b.n	8032282 <dll_rfevt_frx+0xca>
        else if (((active->netstate & M2_NETSTATE_TMASK) == M2_NETSTATE_RESPRX) \
 8032230:	79c2      	ldrb	r2, [r0, #7]
 8032232:	2370      	movs	r3, #112	; 0x70
 8032234:	4013      	ands	r3, r2
 8032236:	2b30      	cmp	r3, #48	; 0x30
 8032238:	d108      	bne.n	803224c <dll_rfevt_frx+0x94>
               && (active->applet != NULL)) {
 803223a:	6803      	ldr	r3, [r0, #0]
 803223c:	2b00      	cmp	r3, #0
 803223e:	d005      	beq.n	803224c <dll_rfevt_frx+0x94>
            active->netstate  &= ~M2_NETSTATE_TMASK;   // Default to Request-TX
 8032240:	2370      	movs	r3, #112	; 0x70
 8032242:	439a      	bics	r2, r3
 8032244:	71c2      	strb	r2, [r0, #7]
    ot_bool     re_init = False;
 8032246:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 8032248:	2400      	movs	r4, #0
            active->netstate  &= ~M2_NETSTATE_TMASK;   // Default to Request-TX
 803224a:	e01a      	b.n	8032282 <dll_rfevt_frx+0xca>
            session_pop();
 803224c:	f001 f8e0 	bl	8033410 <session_pop>
            dll_idle();
 8032250:	f7ff ff4a 	bl	80320e8 <dll_idle>
    ot_bool     re_init = False;
 8032254:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 8032256:	2400      	movs	r4, #0
 8032258:	e013      	b.n	8032282 <dll_rfevt_frx+0xca>
        else if (rm2_mac_filter() == False) {
 803225a:	f000 ff1b 	bl	8033094 <rm2_mac_filter>
 803225e:	2800      	cmp	r0, #0
 8032260:	d1be      	bne.n	80321e0 <dll_rfevt_frx+0x28>
            frx_code = -4;
 8032262:	2404      	movs	r4, #4
 8032264:	4264      	negs	r4, r4
 8032266:	e7bb      	b.n	80321e0 <dll_rfevt_frx+0x28>
            re_init = (frx_code || rx_isresp);
 8032268:	2501      	movs	r5, #1
            if (re_init) {
 803226a:	2d00      	cmp	r5, #0
 803226c:	d005      	beq.n	803227a <dll_rfevt_frx+0xc2>
                rm2_reenter_rx(&dll_rfevt_frx);
 803226e:	4813      	ldr	r0, [pc, #76]	; (80322bc <dll_rfevt_frx+0x104>)
 8032270:	f7ff f8ec 	bl	803144c <rm2_reenter_rx>
 8032274:	e005      	b.n	8032282 <dll_rfevt_frx+0xca>
            re_init = (frx_code || rx_isresp);
 8032276:	2500      	movs	r5, #0
 8032278:	e7f7      	b.n	803226a <dll_rfevt_frx+0xb2>
                radio_sleep();
 803227a:	f7ff f8a1 	bl	80313c0 <radio_sleep>
 803227e:	e000      	b.n	8032282 <dll_rfevt_frx+0xca>
    ot_bool     re_init = False;
 8032280:	2500      	movs	r5, #0
    DLL_SIG_RFTERMINATE(3, frx_code);
 8032282:	0021      	movs	r1, r4
 8032284:	2003      	movs	r0, #3
 8032286:	f7fe fe61 	bl	8030f4c <dll_sig_rfterminate>
    if (re_init) {
 803228a:	2d00      	cmp	r5, #0
 803228c:	d102      	bne.n	8032294 <dll_rfevt_frx+0xdc>
    if (frx_code == 0) {
 803228e:	2c00      	cmp	r4, #0
 8032290:	d009      	beq.n	80322a6 <dll_rfevt_frx+0xee>
}
 8032292:	bd70      	pop	{r4, r5, r6, pc}
        __DEBUG_ERRCODE_EVAL(=114);
 8032294:	4b06      	ldr	r3, [pc, #24]	; (80322b0 <dll_rfevt_frx+0xf8>)
 8032296:	2200      	movs	r2, #0
 8032298:	801a      	strh	r2, [r3, #0]
 803229a:	3272      	adds	r2, #114	; 0x72
 803229c:	805a      	strh	r2, [r3, #2]
        DLL_SIG_RFINIT(3);
 803229e:	2003      	movs	r0, #3
 80322a0:	f7fe fe46 	bl	8030f30 <dll_sig_rfinit>
 80322a4:	e7f3      	b.n	803228e <dll_rfevt_frx+0xd6>
        sys_preempt(&sys.task_RFA, 0);
 80322a6:	2100      	movs	r1, #0
 80322a8:	4805      	ldr	r0, [pc, #20]	; (80322c0 <dll_rfevt_frx+0x108>)
 80322aa:	f003 f843 	bl	8035334 <sys_preempt>
}
 80322ae:	e7f0      	b.n	8032292 <dll_rfevt_frx+0xda>
 80322b0:	2000cc2c 	.word	0x2000cc2c
 80322b4:	2000cbdc 	.word	0x2000cbdc
 80322b8:	2000c410 	.word	0x2000c410
 80322bc:	080321b9 	.word	0x080321b9
 80322c0:	2000cbe0 	.word	0x2000cbe0

080322c4 <dll_rfevt_txcsma>:
OT_WEAK void dll_rfevt_txcsma(ot_int pcode, ot_int tcode) {
 80322c4:	b510      	push	{r4, lr}
 80322c6:	0003      	movs	r3, r0
    __DEBUG_ERRCODE_EVAL(=120);
 80322c8:	4a25      	ldr	r2, [pc, #148]	; (8032360 <dll_rfevt_txcsma+0x9c>)
 80322ca:	2000      	movs	r0, #0
 80322cc:	8010      	strh	r0, [r2, #0]
 80322ce:	3078      	adds	r0, #120	; 0x78
 80322d0:	8050      	strh	r0, [r2, #2]
    if (pcode == 0) {
 80322d2:	2b00      	cmp	r3, #0
 80322d4:	d121      	bne.n	803231a <dll_rfevt_txcsma+0x56>
        __DEBUG_ERRCODE_EVAL(=121);
 80322d6:	0013      	movs	r3, r2
 80322d8:	2279      	movs	r2, #121	; 0x79
 80322da:	805a      	strh	r2, [r3, #2]
        sys.task_RFA.latency    = 0;
 80322dc:	4b21      	ldr	r3, [pc, #132]	; (8032364 <dll_rfevt_txcsma+0xa0>)
 80322de:	2200      	movs	r2, #0
 80322e0:	71da      	strb	r2, [r3, #7]
        sys.task_RFA.event      = 5;
 80322e2:	3205      	adds	r2, #5
 80322e4:	711a      	strb	r2, [r3, #4]
        radio.evtdone   = (tcode & 1) ? &dll_rfevt_btx : &dll_rfevt_ftx;
 80322e6:	b28b      	uxth	r3, r1
 80322e8:	07ca      	lsls	r2, r1, #31
 80322ea:	d50f      	bpl.n	803230c <dll_rfevt_txcsma+0x48>
 80322ec:	491e      	ldr	r1, [pc, #120]	; (8032368 <dll_rfevt_txcsma+0xa4>)
 80322ee:	4a1f      	ldr	r2, [pc, #124]	; (803236c <dll_rfevt_txcsma+0xa8>)
 80322f0:	6091      	str	r1, [r2, #8]
        event_ticks     = (tcode & 2) ? dll.counter+20 : (ot_uint)(rm2_txpkt_duration(&txq));
 80322f2:	079b      	lsls	r3, r3, #30
 80322f4:	d50c      	bpl.n	8032310 <dll_rfevt_txcsma+0x4c>
 80322f6:	4b1e      	ldr	r3, [pc, #120]	; (8032370 <dll_rfevt_txcsma+0xac>)
 80322f8:	885c      	ldrh	r4, [r3, #2]
 80322fa:	3414      	adds	r4, #20
 80322fc:	b2a4      	uxth	r4, r4
        radio_idle();
 80322fe:	f7ff f867 	bl	80313d0 <radio_idle>
    sys_preempt(&sys.task_RFA, event_ticks);
 8032302:	0021      	movs	r1, r4
 8032304:	481b      	ldr	r0, [pc, #108]	; (8032374 <dll_rfevt_txcsma+0xb0>)
 8032306:	f003 f815 	bl	8035334 <sys_preempt>
}
 803230a:	bd10      	pop	{r4, pc}
        radio.evtdone   = (tcode & 1) ? &dll_rfevt_btx : &dll_rfevt_ftx;
 803230c:	491a      	ldr	r1, [pc, #104]	; (8032378 <dll_rfevt_txcsma+0xb4>)
 803230e:	e7ee      	b.n	80322ee <dll_rfevt_txcsma+0x2a>
        event_ticks     = (tcode & 2) ? dll.counter+20 : (ot_uint)(rm2_txpkt_duration(&txq));
 8032310:	481a      	ldr	r0, [pc, #104]	; (803237c <dll_rfevt_txcsma+0xb8>)
 8032312:	f7ff fa2d 	bl	8031770 <rm2_txpkt_duration>
 8032316:	0004      	movs	r4, r0
 8032318:	e7f1      	b.n	80322fe <dll_rfevt_txcsma+0x3a>
    else if (pcode > 0) {
 803231a:	2b00      	cmp	r3, #0
 803231c:	dc0f      	bgt.n	803233e <dll_rfevt_txcsma+0x7a>
        __DEBUG_ERRCODE_EVAL(=123);
 803231e:	4a10      	ldr	r2, [pc, #64]	; (8032360 <dll_rfevt_txcsma+0x9c>)
 8032320:	217b      	movs	r1, #123	; 0x7b
 8032322:	8051      	strh	r1, [r2, #2]
        DLL_SIG_RFTERMINATE(sys.task_RFA.event, pcode);
 8032324:	4c0f      	ldr	r4, [pc, #60]	; (8032364 <dll_rfevt_txcsma+0xa0>)
 8032326:	7920      	ldrb	r0, [r4, #4]
 8032328:	0019      	movs	r1, r3
 803232a:	f7fe fe0f 	bl	8030f4c <dll_sig_rfterminate>
        session_pop();
 803232e:	f001 f86f 	bl	8033410 <session_pop>
        dll_idle();
 8032332:	f7ff fed9 	bl	80320e8 <dll_idle>
        sys.task_RFA.event  = 0;
 8032336:	2300      	movs	r3, #0
 8032338:	7123      	strb	r3, [r4, #4]
        event_ticks         = 0;
 803233a:	2400      	movs	r4, #0
 803233c:	e7e1      	b.n	8032302 <dll_rfevt_txcsma+0x3e>
        __DEBUG_ERRCODE_EVAL(=122);
 803233e:	4b08      	ldr	r3, [pc, #32]	; (8032360 <dll_rfevt_txcsma+0x9c>)
 8032340:	227a      	movs	r2, #122	; 0x7a
 8032342:	805a      	strh	r2, [r3, #2]
        nextcsma = (ot_uint)sub_fcloop();
 8032344:	f7ff fe80 	bl	8032048 <sub_fcloop>
 8032348:	0004      	movs	r4, r0
        if (nextcsma < 2) 
 803234a:	2801      	cmp	r0, #1
 803234c:	d905      	bls.n	803235a <dll_rfevt_txcsma+0x96>
            radio_sleep();
 803234e:	f7ff f837 	bl	80313c0 <radio_sleep>
        radio_set_mactimer( nextcsma );
 8032352:	0020      	movs	r0, r4
 8032354:	f7fe fe82 	bl	803105c <radio_set_mactimer>
        return;
 8032358:	e7d7      	b.n	803230a <dll_rfevt_txcsma+0x46>
            radio_idle();
 803235a:	f7ff f839 	bl	80313d0 <radio_idle>
 803235e:	e7f8      	b.n	8032352 <dll_rfevt_txcsma+0x8e>
 8032360:	2000cc2c 	.word	0x2000cc2c
 8032364:	2000cbdc 	.word	0x2000cbdc
 8032368:	08032759 	.word	0x08032759
 803236c:	2000c488 	.word	0x2000c488
 8032370:	2000c410 	.word	0x2000c410
 8032374:	2000cbe0 	.word	0x2000cbe0
 8032378:	08032381 	.word	0x08032381
 803237c:	2000cb2c 	.word	0x2000cb2c

08032380 <dll_rfevt_ftx>:
OT_WEAK void dll_rfevt_ftx(ot_int pcode, ot_int scratch) {
 8032380:	b570      	push	{r4, r5, r6, lr}
 8032382:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=140);
 8032384:	4b21      	ldr	r3, [pc, #132]	; (803240c <dll_rfevt_ftx+0x8c>)
 8032386:	2200      	movs	r2, #0
 8032388:	801a      	strh	r2, [r3, #0]
 803238a:	328c      	adds	r2, #140	; 0x8c
 803238c:	805a      	strh	r2, [r3, #2]
    if (pcode == 1) {
 803238e:	2801      	cmp	r0, #1
 8032390:	d100      	bne.n	8032394 <dll_rfevt_ftx+0x14>
}
 8032392:	bd70      	pop	{r4, r5, r6, pc}
        __DEBUG_ERRCODE_EVAL(=141);
 8032394:	3201      	adds	r2, #1
 8032396:	805a      	strh	r2, [r3, #2]
        active = session_top();
 8032398:	f001 f846 	bl	8033428 <session_top>
        scratch = ((active->netstate & M2_NETSTATE_RESPTX) \
 803239c:	79c3      	ldrb	r3, [r0, #7]
        		|| (dll.comm.rx_timeout <= 0));
 803239e:	06db      	lsls	r3, r3, #27
 80323a0:	d407      	bmi.n	80323b2 <dll_rfevt_ftx+0x32>
 80323a2:	4b1b      	ldr	r3, [pc, #108]	; (8032410 <dll_rfevt_ftx+0x90>)
 80323a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80323a6:	2b00      	cmp	r3, #0
 80323a8:	dd01      	ble.n	80323ae <dll_rfevt_ftx+0x2e>
 80323aa:	2200      	movs	r2, #0
 80323ac:	e002      	b.n	80323b4 <dll_rfevt_ftx+0x34>
 80323ae:	2201      	movs	r2, #1
 80323b0:	e000      	b.n	80323b4 <dll_rfevt_ftx+0x34>
 80323b2:	2201      	movs	r2, #1
        scratch = ((active->netstate & M2_NETSTATE_RESPTX) \
 80323b4:	b212      	sxth	r2, r2
        dll.comm.redundants--;
 80323b6:	4d16      	ldr	r5, [pc, #88]	; (8032410 <dll_rfevt_ftx+0x90>)
 80323b8:	212f      	movs	r1, #47	; 0x2f
 80323ba:	5c6b      	ldrb	r3, [r5, r1]
 80323bc:	3b01      	subs	r3, #1
 80323be:	b2db      	uxtb	r3, r3
 80323c0:	546b      	strb	r3, [r5, r1]
        if ((dll.comm.redundants != 0) && scratch) {
 80323c2:	2b00      	cmp	r3, #0
 80323c4:	d001      	beq.n	80323ca <dll_rfevt_ftx+0x4a>
 80323c6:	2a00      	cmp	r2, #0
 80323c8:	d114      	bne.n	80323f4 <dll_rfevt_ftx+0x74>
        if (scratch || pcode) {
 80323ca:	4322      	orrs	r2, r4
 80323cc:	d119      	bne.n	8032402 <dll_rfevt_ftx+0x82>
            active->netstate  &= ~M2_NETSTATE_TMASK;
 80323ce:	79c3      	ldrb	r3, [r0, #7]
 80323d0:	2270      	movs	r2, #112	; 0x70
 80323d2:	4393      	bics	r3, r2
 80323d4:	71c3      	strb	r3, [r0, #7]
            active->netstate  |= M2_NETSTATE_RESPRX;
 80323d6:	2230      	movs	r2, #48	; 0x30
 80323d8:	4313      	orrs	r3, r2
 80323da:	71c3      	strb	r3, [r0, #7]
        DLL_SIG_RFTERMINATE(sys.task_RFA.event, pcode);
 80323dc:	4d0d      	ldr	r5, [pc, #52]	; (8032414 <dll_rfevt_ftx+0x94>)
 80323de:	7928      	ldrb	r0, [r5, #4]
 80323e0:	0021      	movs	r1, r4
 80323e2:	f7fe fdb3 	bl	8030f4c <dll_sig_rfterminate>
        sys.task_RFA.event = 0;
 80323e6:	2300      	movs	r3, #0
 80323e8:	712b      	strb	r3, [r5, #4]
        sys_preempt(&sys.task_RFA, 0);
 80323ea:	1d28      	adds	r0, r5, #4
 80323ec:	2100      	movs	r1, #0
 80323ee:	f002 ffa1 	bl	8035334 <sys_preempt>
 80323f2:	e7ce      	b.n	8032392 <dll_rfevt_ftx+0x12>
            dll.comm.csmaca_params = (M2_CSMACA_NOCSMA | M2_CSMACA_MACCA);
 80323f4:	232e      	movs	r3, #46	; 0x2e
 80323f6:	310d      	adds	r1, #13
 80323f8:	54e9      	strb	r1, [r5, r3]
            rm2_resend( (ot_sig2)&dll_rfevt_txcsma );
 80323fa:	4807      	ldr	r0, [pc, #28]	; (8032418 <dll_rfevt_ftx+0x98>)
 80323fc:	f7fe fece 	bl	803119c <rm2_resend>
            return;
 8032400:	e7c7      	b.n	8032392 <dll_rfevt_ftx+0x12>
            session_pop();
 8032402:	f001 f805 	bl	8033410 <session_pop>
            dll_idle();
 8032406:	f7ff fe6f 	bl	80320e8 <dll_idle>
 803240a:	e7e7      	b.n	80323dc <dll_rfevt_ftx+0x5c>
 803240c:	2000cc2c 	.word	0x2000cc2c
 8032410:	2000c410 	.word	0x2000c410
 8032414:	2000cbdc 	.word	0x2000cbdc
 8032418:	080322c5 	.word	0x080322c5

0803241c <dll_unblock>:
	sys.task_RFA.latency = _REQRX_LATENCY;
 803241c:	4b01      	ldr	r3, [pc, #4]	; (8032424 <dll_unblock+0x8>)
 803241e:	2228      	movs	r2, #40	; 0x28
 8032420:	71da      	strb	r2, [r3, #7]
}
 8032422:	4770      	bx	lr
 8032424:	2000cbdc 	.word	0x2000cbdc

08032428 <dll_clock>:
OT_WEAK void dll_clock(ot_uint clocks) {
 8032428:	b570      	push	{r4, r5, r6, lr}
 803242a:	0004      	movs	r4, r0
    if (sys.task_RFA.event != 0) {
 803242c:	4b0b      	ldr	r3, [pc, #44]	; (803245c <dll_clock+0x34>)
 803242e:	791b      	ldrb	r3, [r3, #4]
 8032430:	2b00      	cmp	r3, #0
 8032432:	d004      	beq.n	803243e <dll_clock+0x16>
    	dll.comm.rx_timeout -= CLK2TI(clocks);
 8032434:	4b0a      	ldr	r3, [pc, #40]	; (8032460 <dll_clock+0x38>)
 8032436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8032438:	1a14      	subs	r4, r2, r0
 803243a:	629c      	str	r4, [r3, #40]	; 0x28
}
 803243c:	bd70      	pop	{r4, r5, r6, pc}
    else if (session_notempty()) {
 803243e:	f001 f827 	bl	8033490 <session_notempty>
 8032442:	2800      	cmp	r0, #0
 8032444:	d0fa      	beq.n	803243c <dll_clock+0x14>
        sys.task_RFA.event      = 2;
 8032446:	4d05      	ldr	r5, [pc, #20]	; (803245c <dll_clock+0x34>)
 8032448:	2302      	movs	r3, #2
 803244a:	712b      	strb	r3, [r5, #4]
        sys.task_RFA.nextevent  = clocks + TI2CLK(session_getnext());
 803244c:	f000 ff3e 	bl	80332cc <session_getnext>
 8032450:	1820      	adds	r0, r4, r0
 8032452:	60a8      	str	r0, [r5, #8]
        dll_block_idletasks();
 8032454:	f7ff fe3c 	bl	80320d0 <dll_block_idletasks>
}
 8032458:	e7f0      	b.n	803243c <dll_clock+0x14>
 803245a:	46c0      	nop			; (mov r8, r8)
 803245c:	2000cbdc 	.word	0x2000cbdc
 8032460:	2000c410 	.word	0x2000c410

08032464 <dll_processing>:
void dll_processing(void) {
 8032464:	b570      	push	{r4, r5, r6, lr}
    sys.task_RFA.event  = 0;                // Only run processing once
 8032466:	2500      	movs	r5, #0
 8032468:	4b13      	ldr	r3, [pc, #76]	; (80324b8 <dll_processing+0x54>)
 803246a:	711d      	strb	r5, [r3, #4]
    active              = session_top();
 803246c:	f000 ffdc 	bl	8033428 <session_top>
 8032470:	0004      	movs	r4, r0
    active->counter     = 0;
 8032472:	8085      	strh	r5, [r0, #4]
    proc_score          = network_route_ff(active);
 8032474:	f000 fcca 	bl	8032e0c <network_route_ff>
    if (proc_score >= 0) {
 8032478:	2800      	cmp	r0, #0
 803247a:	db19      	blt.n	80324b0 <dll_processing+0x4c>
        sys.task_HSS.cursor = 0;
 803247c:	4b0e      	ldr	r3, [pc, #56]	; (80324b8 <dll_processing+0x54>)
 803247e:	2200      	movs	r2, #0
 8032480:	755a      	strb	r2, [r3, #21]
        dll.counter         = dll.netconf.hold_limit;
 8032482:	4b0e      	ldr	r3, [pc, #56]	; (80324bc <dll_processing+0x58>)
 8032484:	8bda      	ldrh	r2, [r3, #30]
 8032486:	805a      	strh	r2, [r3, #2]
        dll.idle_state      = M2_DLLIDLE_HOLD;
 8032488:	2202      	movs	r2, #2
 803248a:	701a      	strb	r2, [r3, #0]
        if (active->flags & M2_FLAG_LISTEN) {
 803248c:	230b      	movs	r3, #11
 803248e:	56e3      	ldrsb	r3, [r4, r3]
 8032490:	2b00      	cmp	r3, #0
 8032492:	db07      	blt.n	80324a4 <dll_processing+0x40>
    if (active->netstate & M2_NETSTATE_SCRAP) {
 8032494:	79e3      	ldrb	r3, [r4, #7]
 8032496:	075b      	lsls	r3, r3, #29
 8032498:	d503      	bpl.n	80324a2 <dll_processing+0x3e>
        session_pop();
 803249a:	f000 ffb9 	bl	8033410 <session_pop>
        dll_idle();
 803249e:	f7ff fe23 	bl	80320e8 <dll_idle>
}
 80324a2:	bd70      	pop	{r4, r5, r6, pc}
            session_continue(active->applet, M2_NETSTATE_REQRX, 0);
 80324a4:	2200      	movs	r2, #0
 80324a6:	2120      	movs	r1, #32
 80324a8:	6820      	ldr	r0, [r4, #0]
 80324aa:	f000 ffc3 	bl	8033434 <session_continue>
 80324ae:	e7f1      	b.n	8032494 <dll_processing+0x30>
    else if ((active->netstate & M2_NETSTATE_RESP) == 0) {
 80324b0:	79e3      	ldrb	r3, [r4, #7]
 80324b2:	06db      	lsls	r3, r3, #27
 80324b4:	d4ee      	bmi.n	8032494 <dll_processing+0x30>
 80324b6:	e7f0      	b.n	803249a <dll_processing+0x36>
 80324b8:	2000cbdc 	.word	0x2000cbdc
 80324bc:	2000c410 	.word	0x2000c410

080324c0 <dll_systask_sleepscan>:
OT_WEAK void dll_systask_sleepscan(ot_task task) {
 80324c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80324c2:	46c6      	mov	lr, r8
 80324c4:	b500      	push	{lr}
 80324c6:	0004      	movs	r4, r0
    if (task->event == 0) {
 80324c8:	7800      	ldrb	r0, [r0, #0]
 80324ca:	2800      	cmp	r0, #0
 80324cc:	d102      	bne.n	80324d4 <dll_systask_sleepscan+0x14>
}
 80324ce:	bc80      	pop	{r7}
 80324d0:	46b8      	mov	r8, r7
 80324d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fp = ISF_open_su( task->event );
 80324d4:	f002 fd51 	bl	8034f7a <ISF_open_su>
 80324d8:	4680      	mov	r8, r0
    scratch.ushort  = PLATFORM_ENDIAN16( vl_read(fp, task->cursor) );
 80324da:	7861      	ldrb	r1, [r4, #1]
 80324dc:	f002 fc93 	bl	8034e06 <vl_read>
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80324e0:	ba47      	rev16	r7, r0
 80324e2:	b2b8      	uxth	r0, r7
    s_type			= (scratch.ubyte[UPPER] & 0x80);
 80324e4:	043f      	lsls	r7, r7, #16
 80324e6:	0e3f      	lsrs	r7, r7, #24
    sys_task_setnext(task, (ot_u32)otutils_calc_longtimeout(scratch.ushort));
 80324e8:	f002 fa4c 	bl	8034984 <otutils_calc_longtimeout>
 80324ec:	0001      	movs	r1, r0
 80324ee:	0020      	movs	r0, r4
 80324f0:	f002 feb4 	bl	803525c <sys_task_setnext>
    task->cursor   += 2;
 80324f4:	7861      	ldrb	r1, [r4, #1]
 80324f6:	3102      	adds	r1, #2
 80324f8:	b2c9      	uxtb	r1, r1
 80324fa:	7061      	strb	r1, [r4, #1]
    scratch.ushort  = vl_read(fp, task->cursor);
 80324fc:	b289      	uxth	r1, r1
 80324fe:	4640      	mov	r0, r8
 8032500:	f002 fc81 	bl	8034e06 <vl_read>
    s_channel       = scratch.ubyte[0];
 8032504:	b2c6      	uxtb	r6, r0
    s_code          = scratch.ubyte[1];
 8032506:	0400      	lsls	r0, r0, #16
 8032508:	0e05      	lsrs	r5, r0, #24
    task->cursor   += 2;
 803250a:	7863      	ldrb	r3, [r4, #1]
 803250c:	3302      	adds	r3, #2
 803250e:	b2db      	uxtb	r3, r3
 8032510:	7063      	strb	r3, [r4, #1]
    task->cursor    = (task->cursor >= fp->length) ? 0 : task->cursor;
 8032512:	b299      	uxth	r1, r3
 8032514:	4642      	mov	r2, r8
 8032516:	8912      	ldrh	r2, [r2, #8]
 8032518:	4291      	cmp	r1, r2
 803251a:	d300      	bcc.n	803251e <dll_systask_sleepscan+0x5e>
 803251c:	2300      	movs	r3, #0
 803251e:	7063      	strb	r3, [r4, #1]
    vl_close(fp);
 8032520:	4640      	mov	r0, r8
 8032522:	f002 fcf3 	bl	8034f0c <vl_close>
    	s_type          = (s_type >> 1) | (s_code & 0x80);
 8032526:	237f      	movs	r3, #127	; 0x7f
 8032528:	002a      	movs	r2, r5
 803252a:	439a      	bics	r2, r3
 803252c:	b253      	sxtb	r3, r2
 803252e:	0878      	lsrs	r0, r7, #1
 8032530:	2740      	movs	r7, #64	; 0x40
 8032532:	4007      	ands	r7, r0
 8032534:	433b      	orrs	r3, r7
 8032536:	b2db      	uxtb	r3, r3
    	netstate        = s_type | (M2_NETSTATE_REQRX | M2_NETSTATE_INIT);
 8032538:	2228      	movs	r2, #40	; 0x28
 803253a:	4313      	orrs	r3, r2
 803253c:	b2db      	uxtb	r3, r3
		s_new           = session_new(&dll_scan_applet, 0, s_channel, netstate);
 803253e:	0032      	movs	r2, r6
 8032540:	2100      	movs	r1, #0
 8032542:	4802      	ldr	r0, [pc, #8]	; (803254c <dll_systask_sleepscan+0x8c>)
 8032544:	f000 feca 	bl	80332dc <session_new>
		s_new->extra    = s_code;
 8032548:	7205      	strb	r5, [r0, #8]
 803254a:	e7c0      	b.n	80324ce <dll_systask_sleepscan+0xe>
 803254c:	08032841 	.word	0x08032841

08032550 <dll_systask_beacon>:
OT_WEAK void dll_systask_beacon(ot_task task) {
 8032550:	b570      	push	{r4, r5, r6, lr}
 8032552:	0004      	movs	r4, r0
    if ((task->event == 0) || (dll.netconf.b_attempts == 0)) {
 8032554:	7803      	ldrb	r3, [r0, #0]
 8032556:	2b00      	cmp	r3, #0
 8032558:	d03c      	beq.n	80325d4 <dll_systask_beacon+0x84>
 803255a:	4b23      	ldr	r3, [pc, #140]	; (80325e8 <dll_systask_beacon+0x98>)
 803255c:	7f5b      	ldrb	r3, [r3, #29]
 803255e:	2b00      	cmp	r3, #0
 8032560:	d038      	beq.n	80325d4 <dll_systask_beacon+0x84>
    if (dll.netconf.dd_flags == 0) {
 8032562:	4b21      	ldr	r3, [pc, #132]	; (80325e8 <dll_systask_beacon+0x98>)
 8032564:	7f1b      	ldrb	r3, [r3, #28]
 8032566:	2b00      	cmp	r3, #0
 8032568:	d11f      	bne.n	80325aa <dll_systask_beacon+0x5a>
        fp = ISF_open_su( ISF_ID(beacon_transmit_sequence) );
 803256a:	2006      	movs	r0, #6
 803256c:	f002 fd05 	bl	8034f7a <ISF_open_su>
 8032570:	1e05      	subs	r5, r0, #0
        if (fp == NULL) {
 8032572:	d036      	beq.n	80325e2 <dll_systask_beacon+0x92>
        if (fp->length == 0)    {
 8032574:	8903      	ldrh	r3, [r0, #8]
 8032576:	2b00      	cmp	r3, #0
 8032578:	d02f      	beq.n	80325da <dll_systask_beacon+0x8a>
        scratch     = fp->start;
 803257a:	8846      	ldrh	r6, [r0, #2]
        fp->start  += task->cursor;
 803257c:	7863      	ldrb	r3, [r4, #1]
 803257e:	199b      	adds	r3, r3, r6
 8032580:	8043      	strh	r3, [r0, #2]
        task->cursor += 8;
 8032582:	7863      	ldrb	r3, [r4, #1]
 8032584:	3308      	adds	r3, #8
 8032586:	b2db      	uxtb	r3, r3
 8032588:	7063      	strb	r3, [r4, #1]
        if (task->cursor >= fp->length) {
 803258a:	b29b      	uxth	r3, r3
 803258c:	8902      	ldrh	r2, [r0, #8]
 803258e:	4293      	cmp	r3, r2
 8032590:	d301      	bcc.n	8032596 <dll_systask_beacon+0x46>
        	task->cursor = 0;
 8032592:	2300      	movs	r3, #0
 8032594:	7063      	strb	r3, [r4, #1]
        vl_load(fp, 8, dll.netconf.btemp);
 8032596:	4a14      	ldr	r2, [pc, #80]	; (80325e8 <dll_systask_beacon+0x98>)
 8032598:	3206      	adds	r2, #6
 803259a:	2108      	movs	r1, #8
 803259c:	0028      	movs	r0, r5
 803259e:	f002 fc54 	bl	8034e4a <vl_load>
        fp->start = scratch;
 80325a2:	806e      	strh	r6, [r5, #2]
        vl_close(fp);
 80325a4:	0028      	movs	r0, r5
 80325a6:	f002 fcb1 	bl	8034f0c <vl_close>
		b_session           = session_new(  &dll_beacon_applet, 0, dll.netconf.btemp[2], b_flags);
 80325aa:	4d0f      	ldr	r5, [pc, #60]	; (80325e8 <dll_systask_beacon+0x98>)
 80325ac:	7a2a      	ldrb	r2, [r5, #8]
 80325ae:	230a      	movs	r3, #10
 80325b0:	2100      	movs	r1, #0
 80325b2:	480e      	ldr	r0, [pc, #56]	; (80325ec <dll_systask_beacon+0x9c>)
 80325b4:	f000 fe92 	bl	80332dc <session_new>
		b_session->subnet   = dll.netconf.b_subnet;
 80325b8:	7e6b      	ldrb	r3, [r5, #25]
 80325ba:	7283      	strb	r3, [r0, #10]
		b_session->extra    = dll.netconf.btemp[3];
 80325bc:	7a6b      	ldrb	r3, [r5, #9]
 80325be:	7203      	strb	r3, [r0, #8]
    nextbeacon = otutils_calc_longtimeout( PLATFORM_ENDIAN16(*(ot_u16*)&dll.netconf.btemp[0]) );
 80325c0:	88e8      	ldrh	r0, [r5, #6]
 80325c2:	ba40      	rev16	r0, r0
 80325c4:	b280      	uxth	r0, r0
 80325c6:	f002 f9dd 	bl	8034984 <otutils_calc_longtimeout>
 80325ca:	b281      	uxth	r1, r0
    sys_task_setnext(task, (ot_u32)nextbeacon);
 80325cc:	0020      	movs	r0, r4
 80325ce:	f002 fe45 	bl	803525c <sys_task_setnext>
}
 80325d2:	bd70      	pop	{r4, r5, r6, pc}
        dll_idle();
 80325d4:	f7ff fd88 	bl	80320e8 <dll_idle>
        return;
 80325d8:	e7fb      	b.n	80325d2 <dll_systask_beacon+0x82>
            vl_close(fp);
 80325da:	f002 fc97 	bl	8034f0c <vl_close>
    nextbeacon = 10;
 80325de:	210a      	movs	r1, #10
            goto dll_systask_beacon_END;
 80325e0:	e7f4      	b.n	80325cc <dll_systask_beacon+0x7c>
    nextbeacon = 10;
 80325e2:	210a      	movs	r1, #10
 80325e4:	e7f2      	b.n	80325cc <dll_systask_beacon+0x7c>
 80325e6:	46c0      	nop			; (mov r8, r8)
 80325e8:	2000c410 	.word	0x2000c410
 80325ec:	08032871 	.word	0x08032871

080325f0 <dll_init_rx>:
OT_WEAK void dll_init_rx(m2session* active) {
 80325f0:	b570      	push	{r4, r5, r6, lr}
 80325f2:	0004      	movs	r4, r0
    sys.task_RFA.event      = 3;
 80325f4:	4b13      	ldr	r3, [pc, #76]	; (8032644 <dll_init_rx+0x54>)
 80325f6:	2203      	movs	r2, #3
 80325f8:	711a      	strb	r2, [r3, #4]
    sys.task_RFA.latency    = (active->netstate & M2_NETSTATE_RESP) ? \
 80325fa:	79c3      	ldrb	r3, [r0, #7]
 80325fc:	06db      	lsls	r3, r3, #27
 80325fe:	d51c      	bpl.n	803263a <dll_init_rx+0x4a>
 8032600:	3a01      	subs	r2, #1
 8032602:	4b10      	ldr	r3, [pc, #64]	; (8032644 <dll_init_rx+0x54>)
 8032604:	71da      	strb	r2, [r3, #7]
    min_timeout = rm2_rxtimeout_floor(active->channel);
 8032606:	79a0      	ldrb	r0, [r4, #6]
 8032608:	f7ff f87a 	bl	8031700 <rm2_rxtimeout_floor>
    if (dll.comm.rx_timeout < min_timeout) {
 803260c:	4b0e      	ldr	r3, [pc, #56]	; (8032648 <dll_init_rx+0x58>)
 803260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032610:	4283      	cmp	r3, r0
 8032612:	da01      	bge.n	8032618 <dll_init_rx+0x28>
        dll.comm.rx_timeout = min_timeout;
 8032614:	4b0c      	ldr	r3, [pc, #48]	; (8032648 <dll_init_rx+0x58>)
 8032616:	6298      	str	r0, [r3, #40]	; 0x28
	sys_task_setnext(&sys.task[TASK_radio], (ot_u32)dll.comm.rx_timeout);
 8032618:	4b0b      	ldr	r3, [pc, #44]	; (8032648 <dll_init_rx+0x58>)
 803261a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 803261c:	4d0b      	ldr	r5, [pc, #44]	; (803264c <dll_init_rx+0x5c>)
 803261e:	0028      	movs	r0, r5
 8032620:	f002 fe1c 	bl	803525c <sys_task_setnext>
    DLL_SIG_RFINIT(sys.task_RFA.event);
 8032624:	7828      	ldrb	r0, [r5, #0]
 8032626:	f7fe fc83 	bl	8030f30 <dll_sig_rfinit>
    callback = (active->netstate & M2_NETFLAG_BG) ? &dll_rfevt_brx : &dll_rfevt_frx;
 803262a:	79e1      	ldrb	r1, [r4, #7]
 803262c:	064b      	lsls	r3, r1, #25
 803262e:	d506      	bpl.n	803263e <dll_init_rx+0x4e>
 8032630:	4a07      	ldr	r2, [pc, #28]	; (8032650 <dll_init_rx+0x60>)
    rm2_rxinit(active->channel, active->netstate, callback);
 8032632:	79a0      	ldrb	r0, [r4, #6]
 8032634:	f7fe fe54 	bl	80312e0 <rm2_rxinit>
}
 8032638:	bd70      	pop	{r4, r5, r6, pc}
    sys.task_RFA.latency    = (active->netstate & M2_NETSTATE_RESP) ? \
 803263a:	2228      	movs	r2, #40	; 0x28
 803263c:	e7e1      	b.n	8032602 <dll_init_rx+0x12>
    callback = (active->netstate & M2_NETFLAG_BG) ? &dll_rfevt_brx : &dll_rfevt_frx;
 803263e:	4a05      	ldr	r2, [pc, #20]	; (8032654 <dll_init_rx+0x64>)
 8032640:	e7f7      	b.n	8032632 <dll_init_rx+0x42>
 8032642:	46c0      	nop			; (mov r8, r8)
 8032644:	2000cbdc 	.word	0x2000cbdc
 8032648:	2000c410 	.word	0x2000c410
 803264c:	2000cbe0 	.word	0x2000cbe0
 8032650:	08032135 	.word	0x08032135
 8032654:	080321b9 	.word	0x080321b9

08032658 <dll_init_tx>:
OT_WEAK void dll_init_tx(m2session* active) {
 8032658:	b570      	push	{r4, r5, r6, lr}
 803265a:	0005      	movs	r5, r0
    sys_task_setnext(&sys.task[TASK_radio], (ot_u32)dll.comm.tc);
 803265c:	4e0f      	ldr	r6, [pc, #60]	; (803269c <dll_init_tx+0x44>)
 803265e:	4c10      	ldr	r4, [pc, #64]	; (80326a0 <dll_init_tx+0x48>)
 8032660:	6a31      	ldr	r1, [r6, #32]
 8032662:	0020      	movs	r0, r4
 8032664:	f002 fdfa 	bl	803525c <sys_task_setnext>
    dll.comm.tca            = sub_fcinit();
 8032668:	f7ff fd10 	bl	803208c <sub_fcinit>
 803266c:	6270      	str	r0, [r6, #36]	; 0x24
    sys.task_RFA.latency    = 1;
 803266e:	2301      	movs	r3, #1
 8032670:	70e3      	strb	r3, [r4, #3]
    sys.task_RFA.event      = 4;
 8032672:	3303      	adds	r3, #3
 8032674:	7023      	strb	r3, [r4, #0]
    DLL_SIG_RFINIT(sys.task_RFA.event);
 8032676:	2004      	movs	r0, #4
 8032678:	f7fe fc5a 	bl	8030f30 <dll_sig_rfinit>
    if (active->netstate & M2_NETFLAG_BG) {
 803267c:	79eb      	ldrb	r3, [r5, #7]
 803267e:	065a      	lsls	r2, r3, #25
 8032680:	d502      	bpl.n	8032688 <dll_init_tx+0x30>
    	if (active->netstate & M2_NETFLAG_STREAM) {
 8032682:	b25b      	sxtb	r3, r3
 8032684:	2b00      	cmp	r3, #0
 8032686:	db04      	blt.n	8032692 <dll_init_tx+0x3a>
    rm2_txinit(active->netstate, &dll_rfevt_txcsma);
 8032688:	79e8      	ldrb	r0, [r5, #7]
 803268a:	4906      	ldr	r1, [pc, #24]	; (80326a4 <dll_init_tx+0x4c>)
 803268c:	f7fe fd60 	bl	8031150 <rm2_txinit>
}
 8032690:	bd70      	pop	{r4, r5, r6, pc}
    		m2advp_open(session_follower());
 8032692:	f000 ff19 	bl	80334c8 <session_follower>
 8032696:	f000 fc81 	bl	8032f9c <m2advp_open>
 803269a:	e7f5      	b.n	8032688 <dll_init_tx+0x30>
 803269c:	2000c410 	.word	0x2000c410
 80326a0:	2000cbe0 	.word	0x2000cbe0
 80326a4:	080322c5 	.word	0x080322c5

080326a8 <dll_activate>:
OT_WEAK void dll_activate(void) {
 80326a8:	b510      	push	{r4, lr}
    s_active            = session_top();
 80326aa:	f000 febd 	bl	8033428 <session_top>
 80326ae:	0004      	movs	r4, r0
    s_applet            = (s_active->applet == NULL) ? \
 80326b0:	6803      	ldr	r3, [r0, #0]
                            &dll_response_applet : s_active->applet;
 80326b2:	2b00      	cmp	r3, #0
 80326b4:	d00c      	beq.n	80326d0 <dll_activate+0x28>
    s_active->applet    = NULL;
 80326b6:	2200      	movs	r2, #0
 80326b8:	6022      	str	r2, [r4, #0]
    s_applet(s_active);
 80326ba:	0020      	movs	r0, r4
 80326bc:	4798      	blx	r3
    if (s_active->netstate & M2_NETSTATE_SCRAP) {
 80326be:	79e3      	ldrb	r3, [r4, #7]
 80326c0:	075a      	lsls	r2, r3, #29
 80326c2:	d407      	bmi.n	80326d4 <dll_activate+0x2c>
    else if (s_active->netstate & M2_NETSTATE_RX) {
 80326c4:	069b      	lsls	r3, r3, #26
 80326c6:	d50a      	bpl.n	80326de <dll_activate+0x36>
        dll_init_rx(s_active);
 80326c8:	0020      	movs	r0, r4
 80326ca:	f7ff ff91 	bl	80325f0 <dll_init_rx>
}
 80326ce:	bd10      	pop	{r4, pc}
                            &dll_response_applet : s_active->applet;
 80326d0:	4b05      	ldr	r3, [pc, #20]	; (80326e8 <dll_activate+0x40>)
 80326d2:	e7f0      	b.n	80326b6 <dll_activate+0xe>
        session_pop();
 80326d4:	f000 fe9c 	bl	8033410 <session_pop>
        dll_idle();
 80326d8:	f7ff fd06 	bl	80320e8 <dll_idle>
 80326dc:	e7f7      	b.n	80326ce <dll_activate+0x26>
        dll_init_tx(s_active);
 80326de:	0020      	movs	r0, r4
 80326e0:	f7ff ffba 	bl	8032658 <dll_init_tx>
}
 80326e4:	e7f3      	b.n	80326ce <dll_activate+0x26>
 80326e6:	46c0      	nop			; (mov r8, r8)
 80326e8:	08031f69 	.word	0x08031f69

080326ec <dll_scan_timeout>:
OT_WEAK void dll_scan_timeout(void) {
 80326ec:	b510      	push	{r4, lr}
    if ((radio.state != RADIO_DataRX) || (dll.comm.csmaca_params & M2_CSMACA_A2P)) {    ///@todo change to LISTEN
 80326ee:	4b0a      	ldr	r3, [pc, #40]	; (8032718 <dll_scan_timeout+0x2c>)
 80326f0:	781b      	ldrb	r3, [r3, #0]
 80326f2:	2b05      	cmp	r3, #5
 80326f4:	d104      	bne.n	8032700 <dll_scan_timeout+0x14>
 80326f6:	4a09      	ldr	r2, [pc, #36]	; (803271c <dll_scan_timeout+0x30>)
 80326f8:	3329      	adds	r3, #41	; 0x29
 80326fa:	5cd3      	ldrb	r3, [r2, r3]
 80326fc:	065b      	lsls	r3, r3, #25
 80326fe:	d502      	bpl.n	8032706 <dll_scan_timeout+0x1a>
        rm2_rxtimeout_isr();
 8032700:	f7fe fe4c 	bl	803139c <rm2_rxtimeout_isr>
}
 8032704:	bd10      	pop	{r4, pc}
        sys.task[TASK_radio].event = 5;
 8032706:	4806      	ldr	r0, [pc, #24]	; (8032720 <dll_scan_timeout+0x34>)
 8032708:	2305      	movs	r3, #5
 803270a:	7103      	strb	r3, [r0, #4]
        sys_task_setnext(&sys.task[TASK_radio], 128);
 803270c:	3004      	adds	r0, #4
 803270e:	2180      	movs	r1, #128	; 0x80
 8032710:	f002 fda4 	bl	803525c <sys_task_setnext>
}
 8032714:	e7f6      	b.n	8032704 <dll_scan_timeout+0x18>
 8032716:	46c0      	nop			; (mov r8, r8)
 8032718:	2000c488 	.word	0x2000c488
 803271c:	2000c410 	.word	0x2000c410
 8032720:	2000cbdc 	.word	0x2000cbdc

08032724 <dll_m2advp_refresh>:
OT_WEAK void dll_m2advp_refresh(void) {
 8032724:	b570      	push	{r4, r5, r6, lr}
    countdown = rm2_flood_getcounter();
 8032726:	f7fe fcfa 	bl	803111e <rm2_flood_getcounter>
 803272a:	0004      	movs	r4, r0
    if (countdown < rm2_bgpkt_duration()) {
 803272c:	f7fe fff4 	bl	8031718 <rm2_bgpkt_duration>
 8032730:	4284      	cmp	r4, r0
 8032732:	da0b      	bge.n	803274c <dll_m2advp_refresh+0x28>
        dll.counter = (countdown < 0) ? 0 : countdown;
 8032734:	1c23      	adds	r3, r4, #0
 8032736:	0422      	lsls	r2, r4, #16
 8032738:	d406      	bmi.n	8032748 <dll_m2advp_refresh+0x24>
 803273a:	4a06      	ldr	r2, [pc, #24]	; (8032754 <dll_m2advp_refresh+0x30>)
 803273c:	8053      	strh	r3, [r2, #2]
        m2advp_close();
 803273e:	f000 fc6b 	bl	8033018 <m2advp_close>
        rm2_flood_txstop();
 8032742:	f7fe fcf3 	bl	803112c <rm2_flood_txstop>
}
 8032746:	bd70      	pop	{r4, r5, r6, pc}
        dll.counter = (countdown < 0) ? 0 : countdown;
 8032748:	2300      	movs	r3, #0
 803274a:	e7f6      	b.n	803273a <dll_m2advp_refresh+0x16>
        m2advp_update(countdown);
 803274c:	b2a0      	uxth	r0, r4
 803274e:	f000 fc51 	bl	8032ff4 <m2advp_update>
}
 8032752:	e7f8      	b.n	8032746 <dll_m2advp_refresh+0x22>
 8032754:	2000c410 	.word	0x2000c410

08032758 <dll_rfevt_btx>:
OT_WEAK void dll_rfevt_btx(ot_int flcode, ot_int scratch) {
 8032758:	b570      	push	{r4, r5, r6, lr}
 803275a:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=130);
 803275c:	4b1f      	ldr	r3, [pc, #124]	; (80327dc <dll_rfevt_btx+0x84>)
 803275e:	2200      	movs	r2, #0
 8032760:	801a      	strh	r2, [r3, #0]
 8032762:	3282      	adds	r2, #130	; 0x82
 8032764:	805a      	strh	r2, [r3, #2]
    switch (flcode) {
 8032766:	2802      	cmp	r0, #2
 8032768:	d01b      	beq.n	80327a2 <dll_rfevt_btx+0x4a>
 803276a:	2803      	cmp	r0, #3
 803276c:	d01f      	beq.n	80327ae <dll_rfevt_btx+0x56>
 803276e:	2800      	cmp	r0, #0
 8032770:	d016      	beq.n	80327a0 <dll_rfevt_btx+0x48>
            __DEBUG_ERRCODE_EVAL(=133);
 8032772:	4b1a      	ldr	r3, [pc, #104]	; (80327dc <dll_rfevt_btx+0x84>)
 8032774:	2285      	movs	r2, #133	; 0x85
 8032776:	805a      	strh	r2, [r3, #2]
            dll_idle();
 8032778:	f7ff fcb6 	bl	80320e8 <dll_idle>
            dirty_adv_check = (session_netstate() & M2_NETFLAG_STREAM);
 803277c:	f000 febe 	bl	80334fc <session_netstate>
 8032780:	0005      	movs	r5, r0
            session_pop();// pop the BG session
 8032782:	f000 fe45 	bl	8033410 <session_pop>
            if (dirty_adv_check) {
 8032786:	062b      	lsls	r3, r5, #24
 8032788:	d424      	bmi.n	80327d4 <dll_rfevt_btx+0x7c>
    DLL_SIG_RFTERMINATE(sys.task_RFA.event, flcode);
 803278a:	4d15      	ldr	r5, [pc, #84]	; (80327e0 <dll_rfevt_btx+0x88>)
 803278c:	7928      	ldrb	r0, [r5, #4]
 803278e:	0021      	movs	r1, r4
 8032790:	f7fe fbdc 	bl	8030f4c <dll_sig_rfterminate>
    sys.task_RFA.event = 0;
 8032794:	2300      	movs	r3, #0
 8032796:	712b      	strb	r3, [r5, #4]
    sys_preempt(&sys.task_RFA, 0);
 8032798:	1d28      	adds	r0, r5, #4
 803279a:	2100      	movs	r1, #0
 803279c:	f002 fdca 	bl	8035334 <sys_preempt>
}
 80327a0:	bd70      	pop	{r4, r5, r6, pc}
            __DEBUG_ERRCODE_EVAL(=131);
 80327a2:	4b0e      	ldr	r3, [pc, #56]	; (80327dc <dll_rfevt_btx+0x84>)
 80327a4:	2283      	movs	r2, #131	; 0x83
 80327a6:	805a      	strh	r2, [r3, #2]
            dll_m2advp_refresh();
 80327a8:	f7ff ffbc 	bl	8032724 <dll_m2advp_refresh>
        } return; // skip termination section
 80327ac:	e7f8      	b.n	80327a0 <dll_rfevt_btx+0x48>
            __DEBUG_ERRCODE_EVAL(=132);
 80327ae:	4b0b      	ldr	r3, [pc, #44]	; (80327dc <dll_rfevt_btx+0x84>)
 80327b0:	2284      	movs	r2, #132	; 0x84
 80327b2:	805a      	strh	r2, [r3, #2]
            follower                = session_follower();
 80327b4:	f000 fe88 	bl	80334c8 <session_follower>
            follower->counter       = dll.counter;
 80327b8:	4b0a      	ldr	r3, [pc, #40]	; (80327e4 <dll_rfevt_btx+0x8c>)
 80327ba:	885a      	ldrh	r2, [r3, #2]
 80327bc:	8082      	strh	r2, [r0, #4]
            sys.task_RFA.event      = 0;
 80327be:	4a08      	ldr	r2, [pc, #32]	; (80327e0 <dll_rfevt_btx+0x88>)
 80327c0:	2100      	movs	r1, #0
 80327c2:	7111      	strb	r1, [r2, #4]
            dll.comm.tc             = 2;    //TI2CLK(2);
 80327c4:	2202      	movs	r2, #2
 80327c6:	621a      	str	r2, [r3, #32]
            dll.comm.csmaca_params  = (M2_CSMACA_NOCSMA | M2_CSMACA_MACCA);
 80327c8:	322c      	adds	r2, #44	; 0x2c
 80327ca:	313c      	adds	r1, #60	; 0x3c
 80327cc:	5499      	strb	r1, [r3, r2]
            session_pop();
 80327ce:	f000 fe1f 	bl	8033410 <session_pop>
        } break;
 80327d2:	e7da      	b.n	803278a <dll_rfevt_btx+0x32>
                session_scrap();
 80327d4:	f000 fe08 	bl	80333e8 <session_scrap>
 80327d8:	e7d7      	b.n	803278a <dll_rfevt_btx+0x32>
 80327da:	46c0      	nop			; (mov r8, r8)
 80327dc:	2000cc2c 	.word	0x2000cc2c
 80327e0:	2000cbdc 	.word	0x2000cbdc
 80327e4:	2000c410 	.word	0x2000c410

080327e8 <dll_set_defaults>:
OT_WEAK void dll_set_defaults(m2session* s_active) {
 80327e8:	b510      	push	{r4, lr}
 80327ea:	0004      	movs	r4, r0
    ot_u16 follower         = session_follower_wait();
 80327ec:	f000 fe78 	bl	80334e0 <session_follower_wait>
    dll.comm.tc             = follower >> 3;
 80327f0:	08c2      	lsrs	r2, r0, #3
 80327f2:	b292      	uxth	r2, r2
 80327f4:	4b0f      	ldr	r3, [pc, #60]	; (8032834 <dll_set_defaults+0x4c>)
 80327f6:	621a      	str	r2, [r3, #32]
    dll.comm.rx_timeout     = follower;
 80327f8:	6298      	str	r0, [r3, #40]	; 0x28
    dll.comm.csmaca_params  = M2_CSMACA_MACCA;
 80327fa:	222e      	movs	r2, #46	; 0x2e
 80327fc:	2138      	movs	r1, #56	; 0x38
 80327fe:	5499      	strb	r1, [r3, r2]
    dll.comm.redundants     = ((s_active->netstate & M2_NETSTATE_RX) == 0);
 8032800:	79e2      	ldrb	r2, [r4, #7]
 8032802:	0952      	lsrs	r2, r2, #5
 8032804:	2001      	movs	r0, #1
 8032806:	2101      	movs	r1, #1
 8032808:	404a      	eors	r2, r1
 803280a:	2101      	movs	r1, #1
 803280c:	400a      	ands	r2, r1
 803280e:	312e      	adds	r1, #46	; 0x2e
 8032810:	545a      	strb	r2, [r3, r1]
    dll.comm.tx_channels    = 1;
 8032812:	2230      	movs	r2, #48	; 0x30
 8032814:	5498      	strb	r0, [r3, r2]
    dll.comm.rx_channels    = 1;
 8032816:	3201      	adds	r2, #1
 8032818:	5498      	strb	r0, [r3, r2]
    dll.comm.tx_chanlist    = &dll.comm.scratch[0];
 803281a:	001a      	movs	r2, r3
 803281c:	322c      	adds	r2, #44	; 0x2c
 803281e:	635a      	str	r2, [r3, #52]	; 0x34
    dll.comm.rx_chanlist    = &dll.comm.scratch[1];
 8032820:	001a      	movs	r2, r3
 8032822:	322d      	adds	r2, #45	; 0x2d
 8032824:	639a      	str	r2, [r3, #56]	; 0x38
    dll.comm.scratch[0]     = s_active->channel;
 8032826:	79a2      	ldrb	r2, [r4, #6]
 8032828:	3903      	subs	r1, #3
 803282a:	545a      	strb	r2, [r3, r1]
    dll.comm.scratch[1]     = s_active->channel;
 803282c:	3101      	adds	r1, #1
 803282e:	545a      	strb	r2, [r3, r1]
}
 8032830:	bd10      	pop	{r4, pc}
 8032832:	46c0      	nop			; (mov r8, r8)
 8032834:	2000c410 	.word	0x2000c410

08032838 <dll_default_applet>:
OT_WEAK void dll_default_applet(m2session* active) {
 8032838:	b510      	push	{r4, lr}
    dll_set_defaults(active);
 803283a:	f7ff ffd5 	bl	80327e8 <dll_set_defaults>
}
 803283e:	bd10      	pop	{r4, pc}

08032840 <dll_scan_applet>:
OT_WEAK void dll_scan_applet(m2session* active) {
 8032840:	b510      	push	{r4, lr}
 8032842:	0004      	movs	r4, r0
    dll_set_defaults(active);
 8032844:	f7ff ffd0 	bl	80327e8 <dll_set_defaults>
    scan_code       = active->extra;
 8032848:	7a20      	ldrb	r0, [r4, #8]
    active->extra   = 0;
 803284a:	2300      	movs	r3, #0
 803284c:	7223      	strb	r3, [r4, #8]
    timeout         = otutils_calc_timeout(scan_code);
 803284e:	f002 f8a4 	bl	803499a <otutils_calc_timeout>
    if (timeout > 65535) {
 8032852:	2380      	movs	r3, #128	; 0x80
 8032854:	025b      	lsls	r3, r3, #9
 8032856:	4298      	cmp	r0, r3
 8032858:	db00      	blt.n	803285c <dll_scan_applet+0x1c>
        timeout = 65535;
 803285a:	4803      	ldr	r0, [pc, #12]	; (8032868 <dll_scan_applet+0x28>)
    dll.comm.rx_timeout = (ot_u16)timeout;
 803285c:	0400      	lsls	r0, r0, #16
 803285e:	0c00      	lsrs	r0, r0, #16
 8032860:	4b02      	ldr	r3, [pc, #8]	; (803286c <dll_scan_applet+0x2c>)
 8032862:	6298      	str	r0, [r3, #40]	; 0x28
}
 8032864:	bd10      	pop	{r4, pc}
 8032866:	46c0      	nop			; (mov r8, r8)
 8032868:	0000ffff 	.word	0x0000ffff
 803286c:	2000c410 	.word	0x2000c410

08032870 <dll_beacon_applet>:
OT_WEAK void dll_beacon_applet(m2session* active) {
 8032870:	b570      	push	{r4, r5, r6, lr}
 8032872:	b086      	sub	sp, #24
 8032874:	0004      	movs	r4, r0
    b_params        = active->extra;
 8032876:	7a05      	ldrb	r5, [r0, #8]
    active->extra   = 0;
 8032878:	2300      	movs	r3, #0
 803287a:	7203      	strb	r3, [r0, #8]
    dll_set_defaults(active);
 803287c:	f7ff ffb4 	bl	80327e8 <dll_set_defaults>
    dll.comm.tc             = M2_PARAM_BEACON_TCA;  //TI2CLK(M2_PARAM_BEACON_TCA);
 8032880:	4b41      	ldr	r3, [pc, #260]	; (8032988 <dll_beacon_applet+0x118>)
 8032882:	220c      	movs	r2, #12
 8032884:	621a      	str	r2, [r3, #32]
    dll.comm.rx_timeout     = (b_params & 0x02) ? 0 : rm2_default_tgd(active->channel);
 8032886:	07ab      	lsls	r3, r5, #30
 8032888:	d54a      	bpl.n	8032920 <dll_beacon_applet+0xb0>
 803288a:	2000      	movs	r0, #0
 803288c:	4b3e      	ldr	r3, [pc, #248]	; (8032988 <dll_beacon_applet+0x118>)
 803288e:	6298      	str	r0, [r3, #40]	; 0x28
    dll.comm.csmaca_params |= (b_params & 0x04) | M2_CSMACA_NA2P | M2_CSMACA_MACCA;
 8032890:	202e      	movs	r0, #46	; 0x2e
 8032892:	2104      	movs	r1, #4
 8032894:	4029      	ands	r1, r5
 8032896:	5c1a      	ldrb	r2, [r3, r0]
 8032898:	430a      	orrs	r2, r1
 803289a:	2138      	movs	r1, #56	; 0x38
 803289c:	430a      	orrs	r2, r1
 803289e:	541a      	strb	r2, [r3, r0]
    dll.comm.redundants     = dll.netconf.b_attempts;
 80328a0:	7f59      	ldrb	r1, [r3, #29]
 80328a2:	222f      	movs	r2, #47	; 0x2f
 80328a4:	5499      	strb	r1, [r3, r2]
    if (dll.netconf.btemp[0] & 0x80) {
 80328a6:	799b      	ldrb	r3, [r3, #6]
 80328a8:	b25b      	sxtb	r3, r3
 80328aa:	2b00      	cmp	r3, #0
 80328ac:	db3c      	blt.n	8032928 <dll_beacon_applet+0xb8>
		m2np_header(active, M2RT_BROADCAST, M2FI_FRDIALOG);
 80328ae:	2200      	movs	r2, #0
 80328b0:	2101      	movs	r1, #1
 80328b2:	0020      	movs	r0, r4
 80328b4:	f000 f9ce 	bl	8032c54 <m2np_header>
		cmd_ext     = (b_params & 0x06);                            // Normal extension bits
 80328b8:	2606      	movs	r6, #6
 80328ba:	402e      	ands	r6, r5
		cmd_ext    |= (dll.netconf.btemp[4] == 0) << 6;             // Announcement No-File bit
 80328bc:	4b32      	ldr	r3, [pc, #200]	; (8032988 <dll_beacon_applet+0x118>)
 80328be:	7a9b      	ldrb	r3, [r3, #10]
 80328c0:	2b00      	cmp	r3, #0
 80328c2:	d158      	bne.n	8032976 <dll_beacon_applet+0x106>
 80328c4:	3340      	adds	r3, #64	; 0x40
 80328c6:	431e      	orrs	r6, r3
		cmd_code    = 0x20 | (b_params & 1) | ((cmd_ext!=0) << 7);
 80328c8:	2401      	movs	r4, #1
 80328ca:	402c      	ands	r4, r5
 80328cc:	2320      	movs	r3, #32
 80328ce:	431c      	orrs	r4, r3
 80328d0:	b264      	sxtb	r4, r4
 80328d2:	2e00      	cmp	r6, #0
 80328d4:	d051      	beq.n	803297a <dll_beacon_applet+0x10a>
 80328d6:	2380      	movs	r3, #128	; 0x80
 80328d8:	425b      	negs	r3, r3
 80328da:	431c      	orrs	r4, r3
 80328dc:	b2e4      	uxtb	r4, r4
		q_writebyte(&txq, cmd_code);
 80328de:	0021      	movs	r1, r4
 80328e0:	482a      	ldr	r0, [pc, #168]	; (803298c <dll_beacon_applet+0x11c>)
 80328e2:	f001 ffb6 	bl	8034852 <q_writebyte>
		if (cmd_code) {
 80328e6:	2c00      	cmp	r4, #0
 80328e8:	d149      	bne.n	803297e <dll_beacon_applet+0x10e>
		q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
 80328ea:	4c27      	ldr	r4, [pc, #156]	; (8032988 <dll_beacon_applet+0x118>)
 80328ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80328ee:	b2d9      	uxtb	r1, r3
 80328f0:	4826      	ldr	r0, [pc, #152]	; (803298c <dll_beacon_applet+0x11c>)
 80328f2:	f001 ffae 	bl	8034852 <q_writebyte>
		if (dll.netconf.btemp[4] != 0) {
 80328f6:	7aa3      	ldrb	r3, [r4, #10]
 80328f8:	2b00      	cmp	r3, #0
 80328fa:	d00d      	beq.n	8032918 <dll_beacon_applet+0xa8>
			q_init(&beacon_queue, &dll.netconf.btemp[4], 4);
 80328fc:	4922      	ldr	r1, [pc, #136]	; (8032988 <dll_beacon_applet+0x118>)
 80328fe:	2204      	movs	r2, #4
 8032900:	310a      	adds	r1, #10
 8032902:	a801      	add	r0, sp, #4
 8032904:	f001 ff86 	bl	8034814 <q_init>
			if (m2qp_isf_call((b_params & 1), &beacon_queue, AUTH_GUEST) < 0) {
 8032908:	2001      	movs	r0, #1
 803290a:	4028      	ands	r0, r5
 803290c:	4a20      	ldr	r2, [pc, #128]	; (8032990 <dll_beacon_applet+0x120>)
 803290e:	a901      	add	r1, sp, #4
 8032910:	f001 f942 	bl	8033b98 <m2qp_isf_call>
 8032914:	2800      	cmp	r0, #0
 8032916:	db29      	blt.n	803296c <dll_beacon_applet+0xfc>
		m2np_footer();
 8032918:	f000 fa6c 	bl	8032df4 <m2np_footer>
}
 803291c:	b006      	add	sp, #24
 803291e:	bd70      	pop	{r4, r5, r6, pc}
    dll.comm.rx_timeout     = (b_params & 0x02) ? 0 : rm2_default_tgd(active->channel);
 8032920:	79a0      	ldrb	r0, [r4, #6]
 8032922:	f7fe fef3 	bl	803170c <rm2_default_tgd>
 8032926:	e7b1      	b.n	803288c <dll_beacon_applet+0x1c>
    	ot_memset(beacon_tgram, 0, 8);
 8032928:	3a27      	subs	r2, #39	; 0x27
 803292a:	2100      	movs	r1, #0
 803292c:	a801      	add	r0, sp, #4
 803292e:	f003 f9cf 	bl	8035cd0 <ot_memset>
    	active->netstate |= M2_NETFLAG_BG;
 8032932:	79e3      	ldrb	r3, [r4, #7]
 8032934:	2240      	movs	r2, #64	; 0x40
 8032936:	4313      	orrs	r3, r2
 8032938:	71e3      	strb	r3, [r4, #7]
    	fp = vl_open(VL_ISF_BLOCKID, dll.netconf.btemp[5], VL_ACCESS_R, AUTH_GUEST);
 803293a:	4b13      	ldr	r3, [pc, #76]	; (8032988 <dll_beacon_applet+0x118>)
 803293c:	7ad9      	ldrb	r1, [r3, #11]
 803293e:	4b14      	ldr	r3, [pc, #80]	; (8032990 <dll_beacon_applet+0x120>)
 8032940:	2224      	movs	r2, #36	; 0x24
 8032942:	2003      	movs	r0, #3
 8032944:	f002 fa24 	bl	8034d90 <vl_open>
 8032948:	1e04      	subs	r4, r0, #0
    	if (fp != NULL) {
 803294a:	d007      	beq.n	803295c <dll_beacon_applet+0xec>
    		vl_load(fp, dll.netconf.btemp[4], beacon_tgram);
 803294c:	4b0e      	ldr	r3, [pc, #56]	; (8032988 <dll_beacon_applet+0x118>)
 803294e:	7a99      	ldrb	r1, [r3, #10]
 8032950:	aa01      	add	r2, sp, #4
 8032952:	f002 fa7a 	bl	8034e4a <vl_load>
    		vl_close(fp);
 8032956:	0020      	movs	r0, r4
 8032958:	f002 fad8 	bl	8034f0c <vl_close>
    	if (otapi_new_telegram(token, dll.netconf.btemp[5], beacon_tgram) == 0) {
 803295c:	4b0a      	ldr	r3, [pc, #40]	; (8032988 <dll_beacon_applet+0x118>)
 803295e:	7ad9      	ldrb	r1, [r3, #11]
 8032960:	aa01      	add	r2, sp, #4
 8032962:	480c      	ldr	r0, [pc, #48]	; (8032994 <dll_beacon_applet+0x124>)
 8032964:	f7ff f944 	bl	8031bf0 <otapi_new_telegram>
 8032968:	2800      	cmp	r0, #0
 803296a:	d1d7      	bne.n	803291c <dll_beacon_applet+0xac>
	session_pop();
 803296c:	f000 fd50 	bl	8033410 <session_pop>
	dll_idle();
 8032970:	f7ff fbba 	bl	80320e8 <dll_idle>
	return;
 8032974:	e7d2      	b.n	803291c <dll_beacon_applet+0xac>
		cmd_ext    |= (dll.netconf.btemp[4] == 0) << 6;             // Announcement No-File bit
 8032976:	2300      	movs	r3, #0
 8032978:	e7a5      	b.n	80328c6 <dll_beacon_applet+0x56>
		cmd_code    = 0x20 | (b_params & 1) | ((cmd_ext!=0) << 7);
 803297a:	2300      	movs	r3, #0
 803297c:	e7ad      	b.n	80328da <dll_beacon_applet+0x6a>
			q_writebyte(&txq, cmd_ext);
 803297e:	0031      	movs	r1, r6
 8032980:	4802      	ldr	r0, [pc, #8]	; (803298c <dll_beacon_applet+0x11c>)
 8032982:	f001 ff66 	bl	8034852 <q_writebyte>
 8032986:	e7b0      	b.n	80328ea <dll_beacon_applet+0x7a>
 8032988:	2000c410 	.word	0x2000c410
 803298c:	2000cb2c 	.word	0x2000cb2c
 8032990:	08037144 	.word	0x08037144
 8032994:	01020304 	.word	0x01020304

08032998 <sub_default_idle>:
}
 8032998:	2001      	movs	r0, #1
 803299a:	4770      	bx	lr

0803299c <sub_dll_flush>:
void sub_dll_flush(void) {
 803299c:	b510      	push	{r4, lr}
	if (radio.state != RADIO_Idle) {
 803299e:	4b0f      	ldr	r3, [pc, #60]	; (80329dc <sub_dll_flush+0x40>)
 80329a0:	781b      	ldrb	r3, [r3, #0]
 80329a2:	2b00      	cmp	r3, #0
 80329a4:	d116      	bne.n	80329d4 <sub_dll_flush+0x38>
    rm2_mac_configure();
 80329a6:	f7fe fbb9 	bl	803111c <rm2_mac_configure>
    task = &sys.task_HSS;
 80329aa:	4b0d      	ldr	r3, [pc, #52]	; (80329e0 <sub_dll_flush+0x44>)
        task->cursor   = 0;
 80329ac:	2200      	movs	r2, #0
 80329ae:	705a      	strb	r2, [r3, #1]
        task->reserve  = 1;
 80329b0:	2101      	movs	r1, #1
 80329b2:	7099      	strb	r1, [r3, #2]
        task->latency  = 255;
 80329b4:	31fe      	adds	r1, #254	; 0xfe
 80329b6:	70d9      	strb	r1, [r3, #3]
        task->nextevent= 0;
 80329b8:	605a      	str	r2, [r3, #4]
        task++;
 80329ba:	3308      	adds	r3, #8
	} while (task < &sys.task[SSS_INDEX+1]);
 80329bc:	4a09      	ldr	r2, [pc, #36]	; (80329e4 <sub_dll_flush+0x48>)
 80329be:	4293      	cmp	r3, r2
 80329c0:	d3f4      	bcc.n	80329ac <sub_dll_flush+0x10>
    session_init();
 80329c2:	f000 fc7b 	bl	80332bc <session_init>
    dll.idle_state  = sub_default_idle();
 80329c6:	f7ff ffe7 	bl	8032998 <sub_default_idle>
 80329ca:	4b07      	ldr	r3, [pc, #28]	; (80329e8 <sub_dll_flush+0x4c>)
 80329cc:	7018      	strb	r0, [r3, #0]
    dll_idle();
 80329ce:	f7ff fb8b 	bl	80320e8 <dll_idle>
}
 80329d2:	bd10      	pop	{r4, pc}
		rm2_kill();
 80329d4:	f7fe fd04 	bl	80313e0 <rm2_kill>
 80329d8:	e7e5      	b.n	80329a6 <sub_dll_flush+0xa>
 80329da:	46c0      	nop			; (mov r8, r8)
 80329dc:	2000c488 	.word	0x2000c488
 80329e0:	2000cbf0 	.word	0x2000cbf0
 80329e4:	2000cc08 	.word	0x2000cc08
 80329e8:	2000c410 	.word	0x2000c410

080329ec <dll_refresh>:
OT_WEAK void dll_refresh(void) {
 80329ec:	b570      	push	{r4, r5, r6, lr}
    fp = ISF_open_su(0);
 80329ee:	2000      	movs	r0, #0
 80329f0:	f002 fac3 	bl	8034f7a <ISF_open_su>
 80329f4:	0005      	movs	r5, r0
    vl_load(fp, 10, dll.netconf.vid);
 80329f6:	4c0f      	ldr	r4, [pc, #60]	; (8032a34 <dll_refresh+0x48>)
 80329f8:	0022      	movs	r2, r4
 80329fa:	3216      	adds	r2, #22
 80329fc:	210a      	movs	r1, #10
 80329fe:	f002 fa24 	bl	8034e4a <vl_load>
    dll.netconf.dd_flags    = 0;
 8032a02:	2300      	movs	r3, #0
 8032a04:	7723      	strb	r3, [r4, #28]
    dll.netconf.hold_limit  = PLATFORM_ENDIAN16(dll.netconf.hold_limit);
 8032a06:	8be3      	ldrh	r3, [r4, #30]
 8032a08:	ba5b      	rev16	r3, r3
 8032a0a:	83e3      	strh	r3, [r4, #30]
    vl_close(fp);
 8032a0c:	0028      	movs	r0, r5
 8032a0e:	f002 fa7d 	bl	8034f0c <vl_close>
    fp = ISF_open_su(1);
 8032a12:	2001      	movs	r0, #1
 8032a14:	f002 fab1 	bl	8034f7a <ISF_open_su>
 8032a18:	0005      	movs	r5, r0
    vl_load(fp, 8, dll.netconf.uid);
 8032a1a:	0022      	movs	r2, r4
 8032a1c:	320e      	adds	r2, #14
 8032a1e:	2108      	movs	r1, #8
 8032a20:	f002 fa13 	bl	8034e4a <vl_load>
    vl_close(fp);
 8032a24:	0028      	movs	r0, r5
 8032a26:	f002 fa71 	bl	8034f0c <vl_close>
    dll_refresh_rts();
 8032a2a:	f7ff fb5b 	bl	80320e4 <dll_refresh_rts>
    sub_dll_flush();
 8032a2e:	f7ff ffb5 	bl	803299c <sub_dll_flush>
}
 8032a32:	bd70      	pop	{r4, r5, r6, pc}
 8032a34:	2000c410 	.word	0x2000c410

08032a38 <dll_init>:
OT_WEAK void dll_init(void) {
 8032a38:	b510      	push	{r4, lr}
    radio_init();
 8032a3a:	f7fe faf9 	bl	8031030 <radio_init>
    network_init();
 8032a3e:	f000 f8f1 	bl	8032c24 <network_init>
    m2qp_init();
 8032a42:	f000 fdf5 	bl	8033630 <m2qp_init>
    auth_init();
 8032a46:	f001 fdd2 	bl	80345ee <auth_init>
    dll_refresh();
 8032a4a:	f7ff ffcf 	bl	80329ec <dll_refresh>
}
 8032a4e:	bd10      	pop	{r4, pc}

08032a50 <dll_systask_rf>:
OT_WEAK void dll_systask_rf(ot_task task) {
 8032a50:	b510      	push	{r4, lr}
 8032a52:	0004      	movs	r4, r0
        switch (sys.task_RFA.event) {
 8032a54:	4b10      	ldr	r3, [pc, #64]	; (8032a98 <dll_systask_rf+0x48>)
 8032a56:	791b      	ldrb	r3, [r3, #4]
 8032a58:	2b06      	cmp	r3, #6
 8032a5a:	d804      	bhi.n	8032a66 <dll_systask_rf+0x16>
 8032a5c:	d80b      	bhi.n	8032a76 <dll_systask_rf+0x26>
 8032a5e:	009b      	lsls	r3, r3, #2
 8032a60:	4a0e      	ldr	r2, [pc, #56]	; (8032a9c <dll_systask_rf+0x4c>)
 8032a62:	58d3      	ldr	r3, [r2, r3]
 8032a64:	469f      	mov	pc, r3
 8032a66:	2bff      	cmp	r3, #255	; 0xff
 8032a68:	d105      	bne.n	8032a76 <dll_systask_rf+0x26>
            case 255: task->cursor = radio_getpwrcode(); break;
 8032a6a:	f7fe fe07 	bl	803167c <radio_getpwrcode>
 8032a6e:	7060      	strb	r0, [r4, #1]
}
 8032a70:	e001      	b.n	8032a76 <dll_systask_rf+0x26>
            case 0: dll_refresh();          break;
 8032a72:	f7ff ffbb 	bl	80329ec <dll_refresh>
}
 8032a76:	bd10      	pop	{r4, pc}
            case 1: dll_processing();       break;
 8032a78:	f7ff fcf4 	bl	8032464 <dll_processing>
 8032a7c:	e7fb      	b.n	8032a76 <dll_systask_rf+0x26>
            case 2: dll_activate();         break;
 8032a7e:	f7ff fe13 	bl	80326a8 <dll_activate>
 8032a82:	e7f8      	b.n	8032a76 <dll_systask_rf+0x26>
            case 3: dll_scan_timeout();    break;
 8032a84:	f7ff fe32 	bl	80326ec <dll_scan_timeout>
 8032a88:	e7f5      	b.n	8032a76 <dll_systask_rf+0x26>
            case 5: rm2_kill();             break;
 8032a8a:	f7fe fca9 	bl	80313e0 <rm2_kill>
 8032a8e:	e7f2      	b.n	8032a76 <dll_systask_rf+0x26>
            case 6: rm2_decode_s2();        break;
 8032a90:	f7fe fb5c 	bl	803114c <rm2_decode_s2>
 8032a94:	e7ef      	b.n	8032a76 <dll_systask_rf+0x26>
 8032a96:	46c0      	nop			; (mov r8, r8)
 8032a98:	2000cbdc 	.word	0x2000cbdc
 8032a9c:	0803708c 	.word	0x0803708c

08032aa0 <dll_systask_holdscan>:
OT_WEAK void dll_systask_holdscan(ot_task task) {
 8032aa0:	b510      	push	{r4, lr}
    if (task->event == 0) return;
 8032aa2:	7803      	ldrb	r3, [r0, #0]
 8032aa4:	2b00      	cmp	r3, #0
 8032aa6:	d00e      	beq.n	8032ac6 <dll_systask_holdscan+0x26>
    if (dll.counter != 0) {
 8032aa8:	4b0c      	ldr	r3, [pc, #48]	; (8032adc <dll_systask_holdscan+0x3c>)
 8032aaa:	885b      	ldrh	r3, [r3, #2]
 8032aac:	2b00      	cmp	r3, #0
 8032aae:	d10b      	bne.n	8032ac8 <dll_systask_holdscan+0x28>
        dll.idle_state      = sub_default_idle();
 8032ab0:	f7ff ff72 	bl	8032998 <sub_default_idle>
 8032ab4:	4b09      	ldr	r3, [pc, #36]	; (8032adc <dll_systask_holdscan+0x3c>)
 8032ab6:	7018      	strb	r0, [r3, #0]
        sys.task_HSS.event  = 0;
 8032ab8:	4b09      	ldr	r3, [pc, #36]	; (8032ae0 <dll_systask_holdscan+0x40>)
 8032aba:	2200      	movs	r2, #0
 8032abc:	751a      	strb	r2, [r3, #20]
        sys.task_HSS.cursor = 0;
 8032abe:	755a      	strb	r2, [r3, #21]
        sys.task_SSS.event  = 5;
 8032ac0:	3224      	adds	r2, #36	; 0x24
 8032ac2:	2105      	movs	r1, #5
 8032ac4:	5499      	strb	r1, [r3, r2]
}
 8032ac6:	bd10      	pop	{r4, pc}
        dll.counter -= (sys.task_HSS.cursor == 0);
 8032ac8:	4a05      	ldr	r2, [pc, #20]	; (8032ae0 <dll_systask_holdscan+0x40>)
 8032aca:	7d52      	ldrb	r2, [r2, #21]
 8032acc:	4251      	negs	r1, r2
 8032ace:	414a      	adcs	r2, r1
 8032ad0:	1a9b      	subs	r3, r3, r2
 8032ad2:	4a02      	ldr	r2, [pc, #8]	; (8032adc <dll_systask_holdscan+0x3c>)
 8032ad4:	8053      	strh	r3, [r2, #2]
        dll_systask_sleepscan(task);
 8032ad6:	f7ff fcf3 	bl	80324c0 <dll_systask_sleepscan>
 8032ada:	e7f4      	b.n	8032ac6 <dll_systask_holdscan+0x26>
 8032adc:	2000c410 	.word	0x2000c410
 8032ae0:	2000cbdc 	.word	0x2000cbdc

08032ae4 <crc0B_table>:
    0x11, 0x1A, 0x07, 0x0C, 0x16, 0x1D, 0x00, 0x0B,
    0x03, 0x08, 0x15, 0x1E, 0x04, 0x0F, 0x12, 0x19,
    0x0D, 0x06, 0x1B, 0x10, 0x0A, 0x01, 0x1C, 0x17
};

ot_u8 crc0B_table(ot_u8* data) {
 8032ae4:	b510      	push	{r4, lr}
    ot_u8 a = (data[0] >> 3);
 8032ae6:	7801      	ldrb	r1, [r0, #0]
 8032ae8:	08cc      	lsrs	r4, r1, #3
    ot_u8 b = ((data[1] >> 6) | (data[0] << 2)) & 0x1f;
 8032aea:	7842      	ldrb	r2, [r0, #1]
 8032aec:	0089      	lsls	r1, r1, #2
 8032aee:	0993      	lsrs	r3, r2, #6
 8032af0:	430b      	orrs	r3, r1
 8032af2:	221f      	movs	r2, #31
 8032af4:	4013      	ands	r3, r2
    return crc0B_5t5[ crc0B_0t5[a] ^ b ];
 8032af6:	4a03      	ldr	r2, [pc, #12]	; (8032b04 <crc0B_table+0x20>)
 8032af8:	5d12      	ldrb	r2, [r2, r4]
 8032afa:	4053      	eors	r3, r2
 8032afc:	4a02      	ldr	r2, [pc, #8]	; (8032b08 <crc0B_table+0x24>)
 8032afe:	5cd0      	ldrb	r0, [r2, r3]
}
 8032b00:	bd10      	pop	{r4, pc}
 8032b02:	46c0      	nop			; (mov r8, r8)
 8032b04:	2000c108 	.word	0x2000c108
 8032b08:	2000c128 	.word	0x2000c128

08032b0c <em2_add_crc5>:

void em2_add_crc5() {
 8032b0c:	b510      	push	{r4, lr}
    txq.front[1] &= ~0x1f;
 8032b0e:	4a07      	ldr	r2, [pc, #28]	; (8032b2c <em2_add_crc5+0x20>)
 8032b10:	68d1      	ldr	r1, [r2, #12]
 8032b12:	784b      	ldrb	r3, [r1, #1]
 8032b14:	201f      	movs	r0, #31
 8032b16:	4383      	bics	r3, r0
 8032b18:	704b      	strb	r3, [r1, #1]
    txq.front[1] |= crc0B_table(txq.front);
 8032b1a:	68d4      	ldr	r4, [r2, #12]
 8032b1c:	0020      	movs	r0, r4
 8032b1e:	f7ff ffe1 	bl	8032ae4 <crc0B_table>
 8032b22:	7863      	ldrb	r3, [r4, #1]
 8032b24:	4318      	orrs	r0, r3
 8032b26:	7060      	strb	r0, [r4, #1]
}
 8032b28:	bd10      	pop	{r4, pc}
 8032b2a:	46c0      	nop			; (mov r8, r8)
 8032b2c:	2000cb2c 	.word	0x2000cb2c

08032b30 <em2_check_crc5>:

ot_u8 em2_check_crc5() {
 8032b30:	b510      	push	{r4, lr}
    ot_u8 crc5_val;
    crc5_val = crc0B_table(rxq.front);
 8032b32:	4b05      	ldr	r3, [pc, #20]	; (8032b48 <em2_check_crc5+0x18>)
 8032b34:	68dc      	ldr	r4, [r3, #12]
 8032b36:	0020      	movs	r0, r4
 8032b38:	f7ff ffd4 	bl	8032ae4 <crc0B_table>
    return ((rxq.front[1] & 0x1f) - crc5_val);
 8032b3c:	7862      	ldrb	r2, [r4, #1]
 8032b3e:	231f      	movs	r3, #31
 8032b40:	4013      	ands	r3, r2
 8032b42:	1a18      	subs	r0, r3, r0
 8032b44:	b2c0      	uxtb	r0, r0
}
 8032b46:	bd10      	pop	{r4, pc}
 8032b48:	2000cb18 	.word	0x2000cb18

08032b4c <sub_apply_subnet_flags>:
#include <m2/dll.h>
#include <m2/m2task.h>
#include <m2/session.h>


void sub_apply_subnet_flags(session_tmpl* s_tmpl) {
 8032b4c:	b510      	push	{r4, lr}
    // Apply custom-masked subnet and flags to session (typically unused)
    s_tmpl->subnet  = (dll.netconf.subnet & ~s_tmpl->subnetmask) | \
 8032b4e:	490a      	ldr	r1, [pc, #40]	; (8032b78 <sub_apply_subnet_flags+0x2c>)
 8032b50:	2318      	movs	r3, #24
 8032b52:	56cb      	ldrsb	r3, [r1, r3]
 8032b54:	78c4      	ldrb	r4, [r0, #3]
 8032b56:	43a3      	bics	r3, r4
 8032b58:	b25b      	sxtb	r3, r3
                                        (s_tmpl->subnet & s_tmpl->subnetmask);
 8032b5a:	7882      	ldrb	r2, [r0, #2]
    s_tmpl->subnet  = (dll.netconf.subnet & ~s_tmpl->subnetmask) | \
 8032b5c:	4022      	ands	r2, r4
 8032b5e:	4313      	orrs	r3, r2
 8032b60:	7083      	strb	r3, [r0, #2]
    s_tmpl->flags   = (dll.netconf.dd_flags & ~s_tmpl->flagmask) | \
 8032b62:	231c      	movs	r3, #28
 8032b64:	56cb      	ldrsb	r3, [r1, r3]
 8032b66:	7941      	ldrb	r1, [r0, #5]
 8032b68:	438b      	bics	r3, r1
 8032b6a:	b25b      	sxtb	r3, r3
                                        (s_tmpl->flags & s_tmpl->flagmask);
 8032b6c:	7902      	ldrb	r2, [r0, #4]
    s_tmpl->flags   = (dll.netconf.dd_flags & ~s_tmpl->flagmask) | \
 8032b6e:	400a      	ands	r2, r1
 8032b70:	4313      	orrs	r3, r2
 8032b72:	7103      	strb	r3, [r0, #4]
}
 8032b74:	bd10      	pop	{r4, pc}
 8032b76:	46c0      	nop			; (mov r8, r8)
 8032b78:	2000c410 	.word	0x2000c410

08032b7c <sub_newtask>:


m2session* sub_newtask(session_tmpl* s_tmpl, ot_app applet, ot_u16 offset) {
 8032b7c:	b570      	push	{r4, r5, r6, lr}
 8032b7e:	0004      	movs	r4, r0
 8032b80:	000d      	movs	r5, r1
 8032b82:	0016      	movs	r6, r2
    m2session* next;
    
    /// Make sure there is a free session... it is easiest this way
    if (session_numfree() < 1) {
 8032b84:	f000 fc76 	bl	8033474 <session_numfree>
 8032b88:	2800      	cmp	r0, #0
 8032b8a:	dd0f      	ble.n	8032bac <sub_newtask+0x30>
        return NULL;
    }
    
    /// Create new session (session always begins with req tx)
    next = session_new(applet, offset, s_tmpl->channel, (M2_NETSTATE_INIT | M2_NETSTATE_REQTX));
 8032b8c:	7862      	ldrb	r2, [r4, #1]
 8032b8e:	2308      	movs	r3, #8
 8032b90:	0031      	movs	r1, r6
 8032b92:	0028      	movs	r0, r5
 8032b94:	f000 fba2 	bl	80332dc <session_new>
 8032b98:	0005      	movs	r5, r0
    sub_apply_subnet_flags(s_tmpl);
 8032b9a:	0020      	movs	r0, r4
 8032b9c:	f7ff ffd6 	bl	8032b4c <sub_apply_subnet_flags>
    next->subnet    = s_tmpl->subnet;
 8032ba0:	78a3      	ldrb	r3, [r4, #2]
 8032ba2:	72ab      	strb	r3, [r5, #10]
    next->flags     = s_tmpl->flags;
 8032ba4:	7923      	ldrb	r3, [r4, #4]
 8032ba6:	72eb      	strb	r3, [r5, #11]

    return next;
}
 8032ba8:	0028      	movs	r0, r5
 8032baa:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 8032bac:	2500      	movs	r5, #0
 8032bae:	e7fb      	b.n	8032ba8 <sub_newtask+0x2c>

08032bb0 <m2task_immediate>:



m2session* m2task_immediate(session_tmpl* s_tmpl, ot_app applet) {
 8032bb0:	b510      	push	{r4, lr}
/// This call doesn't actually cause the session to occur immediately,
/// but it will happen immediately following any sessions happenning 
/// at this very moment.
    return sub_newtask(s_tmpl, applet, 0);
 8032bb2:	2200      	movs	r2, #0
 8032bb4:	f7ff ffe2 	bl	8032b7c <sub_newtask>
}
 8032bb8:	bd10      	pop	{r4, pc}
	...

08032bbc <m2task_advertise>:





m2session* m2task_advertise(advert_tmpl* adv_tmpl, session_tmpl* s_tmpl, ot_app applet) {
 8032bbc:	b570      	push	{r4, r5, r6, lr}
 8032bbe:	0005      	movs	r5, r0
 8032bc0:	000c      	movs	r4, r1
 8032bc2:	0016      	movs	r6, r2
/// creates two sessions: one for the flood and one for the request.
#   define _FLOOD_NETSTATE  (M2_NETFLAG_BG | M2_NETFLAG_STREAM | M2_NETSTATE_INIT | M2_NETSTATE_REQTX)
    m2session* next;
    
    /// Make sure there are at least two free sessions
    if (session_numfree() < 2) {
 8032bc4:	f000 fc56 	bl	8033474 <session_numfree>
 8032bc8:	2801      	cmp	r0, #1
 8032bca:	dd1b      	ble.n	8032c04 <m2task_advertise+0x48>
        return NULL;
    }

    /// Apply session flags
    sub_apply_subnet_flags(s_tmpl);
 8032bcc:	0020      	movs	r0, r4
 8032bce:	f7ff ffbd 	bl	8032b4c <sub_apply_subnet_flags>
    
    /// Only add the flood if the user isn't an idiot (or an algorithm of some sort)
    if (adv_tmpl->duration != 0) {
 8032bd2:	88ab      	ldrh	r3, [r5, #4]
 8032bd4:	2b00      	cmp	r3, #0
 8032bd6:	d10a      	bne.n	8032bee <m2task_advertise+0x32>
        next        = session_new(&dll_default_applet, 0, adv_tmpl->channel, _FLOOD_NETSTATE);
        next->subnet= s_tmpl->subnet;
        next->flags = s_tmpl->flags;
    }
    
    next        = session_new(applet, adv_tmpl->duration, s_tmpl->channel, M2_NETSTATE_REQTX);
 8032bd8:	7862      	ldrb	r2, [r4, #1]
 8032bda:	88a9      	ldrh	r1, [r5, #4]
 8032bdc:	2300      	movs	r3, #0
 8032bde:	0030      	movs	r0, r6
 8032be0:	f000 fb7c 	bl	80332dc <session_new>
    next->subnet= s_tmpl->subnet;
 8032be4:	78a3      	ldrb	r3, [r4, #2]
 8032be6:	7283      	strb	r3, [r0, #10]
    next->flags = s_tmpl->flags;
 8032be8:	7923      	ldrb	r3, [r4, #4]
 8032bea:	72c3      	strb	r3, [r0, #11]
    
    return next;
    
#   undef _FLOOD_NETSTATE
}
 8032bec:	bd70      	pop	{r4, r5, r6, pc}
        next        = session_new(&dll_default_applet, 0, adv_tmpl->channel, _FLOOD_NETSTATE);
 8032bee:	78ea      	ldrb	r2, [r5, #3]
 8032bf0:	23c8      	movs	r3, #200	; 0xc8
 8032bf2:	2100      	movs	r1, #0
 8032bf4:	4804      	ldr	r0, [pc, #16]	; (8032c08 <m2task_advertise+0x4c>)
 8032bf6:	f000 fb71 	bl	80332dc <session_new>
        next->subnet= s_tmpl->subnet;
 8032bfa:	78a3      	ldrb	r3, [r4, #2]
 8032bfc:	7283      	strb	r3, [r0, #10]
        next->flags = s_tmpl->flags;
 8032bfe:	7923      	ldrb	r3, [r4, #4]
 8032c00:	72c3      	strb	r3, [r0, #11]
 8032c02:	e7e9      	b.n	8032bd8 <m2task_advertise+0x1c>
        return NULL;
 8032c04:	2000      	movs	r0, #0
 8032c06:	e7f1      	b.n	8032bec <m2task_advertise+0x30>
 8032c08:	08032839 	.word	0x08032839

08032c0c <m2task_telegram>:




m2session* m2task_telegram(session_tmpl* s_tmpl, ot_app applet) {
 8032c0c:	b510      	push	{r4, lr}
 8032c0e:	0004      	movs	r4, r0
/// This is an experimental function
    m2session* next;
    next 			= sub_newtask(s_tmpl, applet, 0);
 8032c10:	2200      	movs	r2, #0
 8032c12:	f7ff ffb3 	bl	8032b7c <sub_newtask>
    next->netstate |= M2_NETFLAG_BG;
 8032c16:	79c3      	ldrb	r3, [r0, #7]
 8032c18:	2240      	movs	r2, #64	; 0x40
 8032c1a:	4313      	orrs	r3, r2
 8032c1c:	71c3      	strb	r3, [r0, #7]
    next->flags     = s_tmpl->flags;
 8032c1e:	7923      	ldrb	r3, [r4, #4]
 8032c20:	72c3      	strb	r3, [r0, #11]

    return next;
}
 8032c22:	bd10      	pop	{r4, pc}

08032c24 <network_init>:
#   endif

    // Hop code should be explicitly set when producing an anycast or unicast 
    // transmission.  OTAPI will do this for you.
    //m2np.rt.hop_code  = 0;
}
 8032c24:	4770      	bx	lr
	...

08032c28 <m2np_put_deviceid>:
}




void m2np_put_deviceid(ot_bool use_vid) {
 8032c28:	b510      	push	{r4, lr}
    if (use_vid) q_writeshort_be(&txq, *(ot_u16*)dll.netconf.vid);
 8032c2a:	2800      	cmp	r0, #0
 8032c2c:	d005      	beq.n	8032c3a <m2np_put_deviceid+0x12>
 8032c2e:	4b06      	ldr	r3, [pc, #24]	; (8032c48 <m2np_put_deviceid+0x20>)
 8032c30:	8ad9      	ldrh	r1, [r3, #22]
 8032c32:	4806      	ldr	r0, [pc, #24]	; (8032c4c <m2np_put_deviceid+0x24>)
 8032c34:	f001 fe1c 	bl	8034870 <q_writeshort_be>
    else         q_writestring(&txq, dll.netconf.uid, 8);
}
 8032c38:	bd10      	pop	{r4, pc}
    else         q_writestring(&txq, dll.netconf.uid, 8);
 8032c3a:	2208      	movs	r2, #8
 8032c3c:	4904      	ldr	r1, [pc, #16]	; (8032c50 <m2np_put_deviceid+0x28>)
 8032c3e:	4803      	ldr	r0, [pc, #12]	; (8032c4c <m2np_put_deviceid+0x24>)
 8032c40:	f001 fe65 	bl	803490e <q_writestring>
}
 8032c44:	e7f8      	b.n	8032c38 <m2np_put_deviceid+0x10>
 8032c46:	46c0      	nop			; (mov r8, r8)
 8032c48:	2000c410 	.word	0x2000c410
 8032c4c:	2000cb2c 	.word	0x2000cb2c
 8032c50:	2000c41e 	.word	0x2000c41e

08032c54 <m2np_header>:
void m2np_header(m2session* active, ot_u8 addressing, ot_u8 nack) {
 8032c54:	b570      	push	{r4, r5, r6, lr}
 8032c56:	0004      	movs	r4, r0
 8032c58:	000e      	movs	r6, r1
    q_empty(&txq);
 8032c5a:	4d2f      	ldr	r5, [pc, #188]	; (8032d18 <m2np_header+0xc4>)
 8032c5c:	0028      	movs	r0, r5
 8032c5e:	f001 fdd0 	bl	8034802 <q_empty>
        active->flags  &= ~M2_FLAG_RSCODE;
 8032c62:	7ae3      	ldrb	r3, [r4, #11]
 8032c64:	2208      	movs	r2, #8
 8032c66:	4393      	bics	r3, r2
 8032c68:	72e3      	strb	r3, [r4, #11]
        txq.back        = txq.getcursor + maxframe;
 8032c6a:	686b      	ldr	r3, [r5, #4]
 8032c6c:	33fe      	adds	r3, #254	; 0xfe
 8032c6e:	612b      	str	r3, [r5, #16]
    q_writeshort(&txq, (ot_u16)((active->flags & M2_FLAG_RSCODE) << 3) );
 8032c70:	7ae3      	ldrb	r3, [r4, #11]
 8032c72:	00db      	lsls	r3, r3, #3
 8032c74:	2140      	movs	r1, #64	; 0x40
 8032c76:	4019      	ands	r1, r3
 8032c78:	0028      	movs	r0, r5
 8032c7a:	f001 fdef 	bl	803485c <q_writeshort>
    q_writeshort(&txq, (ot_u16)active->subnet);
 8032c7e:	7aa1      	ldrb	r1, [r4, #10]
 8032c80:	0028      	movs	r0, r5
 8032c82:	f001 fdeb 	bl	803485c <q_writeshort>
    active->flags &= M2_FLAG_ROUTE;
 8032c86:	7ae1      	ldrb	r1, [r4, #11]
 8032c88:	2304      	movs	r3, #4
 8032c8a:	400b      	ands	r3, r1
 8032c8c:	72e3      	strb	r3, [r4, #11]
    if (active->netstate & M2_NETSTATE_RESP) {
 8032c8e:	79e2      	ldrb	r2, [r4, #7]
 8032c90:	06d1      	lsls	r1, r2, #27
 8032c92:	d527      	bpl.n	8032ce4 <m2np_header+0x90>
        vid_valid   = (*(ot_u16*)dll.netconf.vid != 0) | (active->flags & 1);
 8032c94:	4b21      	ldr	r3, [pc, #132]	; (8032d1c <m2np_header+0xc8>)
 8032c96:	8ad9      	ldrh	r1, [r3, #22]
 8032c98:	1e4b      	subs	r3, r1, #1
 8032c9a:	4199      	sbcs	r1, r3
        addressing |= vid_valid << 4;                           // Use Source VID if valid
 8032c9c:	0109      	lsls	r1, r1, #4
 8032c9e:	2302      	movs	r3, #2
 8032ca0:	4319      	orrs	r1, r3
 8032ca2:	b249      	sxtb	r1, r1
    m2np.header.fr_info     = addressing;
 8032ca4:	4b1e      	ldr	r3, [pc, #120]	; (8032d20 <m2np_header+0xcc>)
 8032ca6:	7719      	strb	r1, [r3, #28]
    m2np.header.fr_info    |= ((active->extra & 0x0F) != 0) << 3;   //M2FI_EXT
 8032ca8:	b249      	sxtb	r1, r1
 8032caa:	7a23      	ldrb	r3, [r4, #8]
 8032cac:	071b      	lsls	r3, r3, #28
 8032cae:	d023      	beq.n	8032cf8 <m2np_header+0xa4>
 8032cb0:	2308      	movs	r3, #8
 8032cb2:	4319      	orrs	r1, r3
 8032cb4:	b2c9      	uxtb	r1, r1
 8032cb6:	4d1a      	ldr	r5, [pc, #104]	; (8032d20 <m2np_header+0xcc>)
 8032cb8:	7729      	strb	r1, [r5, #28]
    q_writebyte(&txq, m2np.header.fr_info);
 8032cba:	4817      	ldr	r0, [pc, #92]	; (8032d18 <m2np_header+0xc4>)
 8032cbc:	f001 fdc9 	bl	8034852 <q_writebyte>
    if (m2np.header.fr_info & M2FI_EXT) {
 8032cc0:	7f2b      	ldrb	r3, [r5, #28]
 8032cc2:	071b      	lsls	r3, r3, #28
 8032cc4:	d41a      	bmi.n	8032cfc <m2np_header+0xa8>
    q_writebyte(&txq, active->dialog_id);
 8032cc6:	7a61      	ldrb	r1, [r4, #9]
 8032cc8:	4813      	ldr	r0, [pc, #76]	; (8032d18 <m2np_header+0xc4>)
 8032cca:	f001 fdc2 	bl	8034852 <q_writebyte>
    m2np_put_deviceid( (ot_bool)(m2np.header.fr_info & M2FI_VID) );
 8032cce:	4c14      	ldr	r4, [pc, #80]	; (8032d20 <m2np_header+0xcc>)
 8032cd0:	7f23      	ldrb	r3, [r4, #28]
 8032cd2:	091b      	lsrs	r3, r3, #4
 8032cd4:	2001      	movs	r0, #1
 8032cd6:	4018      	ands	r0, r3
 8032cd8:	f7ff ffa6 	bl	8032c28 <m2np_put_deviceid>
    if (m2np.header.fr_info & M2FI_UCAST) {
 8032cdc:	7f23      	ldrb	r3, [r4, #28]
 8032cde:	079b      	lsls	r3, r3, #30
 8032ce0:	d411      	bmi.n	8032d06 <m2np_header+0xb2>
}
 8032ce2:	bd70      	pop	{r4, r5, r6, pc}
        active->flags      |= addressing;
 8032ce4:	4333      	orrs	r3, r6
 8032ce6:	72e3      	strb	r3, [r4, #11]
        active->netstate   |= (addressing & M2FI_UCAST);    // M2_NETFLAG_FIRSTRX == M2FI_UCAST
 8032ce8:	2102      	movs	r1, #2
 8032cea:	400e      	ands	r6, r1
 8032cec:	4316      	orrs	r6, r2
 8032cee:	71e6      	strb	r6, [r4, #7]
        addressing          = active->flags & ~M2_FLAG_RSCODE;
 8032cf0:	2208      	movs	r2, #8
 8032cf2:	4393      	bics	r3, r2
 8032cf4:	0019      	movs	r1, r3
 8032cf6:	e7d5      	b.n	8032ca4 <m2np_header+0x50>
    m2np.header.fr_info    |= ((active->extra & 0x0F) != 0) << 3;   //M2FI_EXT
 8032cf8:	2300      	movs	r3, #0
 8032cfa:	e7da      	b.n	8032cb2 <m2np_header+0x5e>
        q_writebyte(&txq, active->extra);
 8032cfc:	7a21      	ldrb	r1, [r4, #8]
 8032cfe:	4806      	ldr	r0, [pc, #24]	; (8032d18 <m2np_header+0xc4>)
 8032d00:	f001 fda7 	bl	8034852 <q_writebyte>
 8032d04:	e7df      	b.n	8032cc6 <m2np_header+0x72>
        ot_u8* tmp_id       = m2np.rt.dlog.value;
 8032d06:	4b06      	ldr	r3, [pc, #24]	; (8032d20 <m2np_header+0xcc>)
 8032d08:	6899      	ldr	r1, [r3, #8]
        m2np.rt.dlog.value  = txq.putcursor;
 8032d0a:	4803      	ldr	r0, [pc, #12]	; (8032d18 <m2np_header+0xc4>)
 8032d0c:	6882      	ldr	r2, [r0, #8]
 8032d0e:	609a      	str	r2, [r3, #8]
        q_writestring(&txq, tmp_id, m2np.rt.dlog.length);
 8032d10:	791a      	ldrb	r2, [r3, #4]
 8032d12:	f001 fdfc 	bl	803490e <q_writestring>
}
 8032d16:	e7e4      	b.n	8032ce2 <m2np_header+0x8e>
 8032d18:	2000cb2c 	.word	0x2000cb2c
 8032d1c:	2000c410 	.word	0x2000c410
 8032d20:	2000c460 	.word	0x2000c460

08032d24 <m2np_idcmp>:



ot_bool m2np_idcmp(ot_int length, ot_u8* id) {
 8032d24:	b530      	push	{r4, r5, lr}
    ot_u8* stored_id;
    ot_u8  check;
    
    // Don't match on vid == 0, that is reserved as unassigned value
    if ((length == 2) && (*(ot_u16*)dll.netconf.vid == 0)) {
 8032d26:	2802      	cmp	r0, #2
 8032d28:	d00d      	beq.n	8032d46 <m2np_idcmp+0x22>
        return False;
    }
    
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 8032d2a:	2808      	cmp	r0, #8
 8032d2c:	d011      	beq.n	8032d52 <m2np_idcmp+0x2e>
 8032d2e:	4a2d      	ldr	r2, [pc, #180]	; (8032de4 <m2np_idcmp+0xc0>)
    length      = 8 - length;
 8032d30:	2308      	movs	r3, #8
 8032d32:	1a18      	subs	r0, r3, r0
    check       = 0;
    
    switch (length & 7) {
 8032d34:	2407      	movs	r4, #7
 8032d36:	0003      	movs	r3, r0
 8032d38:	4023      	ands	r3, r4
 8032d3a:	2b07      	cmp	r3, #7
 8032d3c:	d850      	bhi.n	8032de0 <m2np_idcmp+0xbc>
 8032d3e:	009b      	lsls	r3, r3, #2
 8032d40:	4829      	ldr	r0, [pc, #164]	; (8032de8 <m2np_idcmp+0xc4>)
 8032d42:	58c3      	ldr	r3, [r0, r3]
 8032d44:	469f      	mov	pc, r3
    if ((length == 2) && (*(ot_u16*)dll.netconf.vid == 0)) {
 8032d46:	4b29      	ldr	r3, [pc, #164]	; (8032dec <m2np_idcmp+0xc8>)
 8032d48:	8adb      	ldrh	r3, [r3, #22]
 8032d4a:	2b00      	cmp	r3, #0
 8032d4c:	d1ed      	bne.n	8032d2a <m2np_idcmp+0x6>
        return False;
 8032d4e:	2000      	movs	r0, #0
 8032d50:	e033      	b.n	8032dba <m2np_idcmp+0x96>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 8032d52:	4a27      	ldr	r2, [pc, #156]	; (8032df0 <m2np_idcmp+0xcc>)
 8032d54:	e7ec      	b.n	8032d30 <m2np_idcmp+0xc>
        case 0: check |= *stored_id++ ^ *id++; 
 8032d56:	7813      	ldrb	r3, [r2, #0]
 8032d58:	7808      	ldrb	r0, [r1, #0]
 8032d5a:	4043      	eors	r3, r0
 8032d5c:	3201      	adds	r2, #1
 8032d5e:	3101      	adds	r1, #1
 8032d60:	e000      	b.n	8032d64 <m2np_idcmp+0x40>
    switch (length & 7) {
 8032d62:	2300      	movs	r3, #0
        case 1: check |= *stored_id++ ^ *id++; 
 8032d64:	7810      	ldrb	r0, [r2, #0]
 8032d66:	780c      	ldrb	r4, [r1, #0]
 8032d68:	4060      	eors	r0, r4
 8032d6a:	4303      	orrs	r3, r0
 8032d6c:	3201      	adds	r2, #1
 8032d6e:	3101      	adds	r1, #1
        case 2: check |= *stored_id++ ^ *id++; 
 8032d70:	1c55      	adds	r5, r2, #1
 8032d72:	7810      	ldrb	r0, [r2, #0]
 8032d74:	1c4c      	adds	r4, r1, #1
 8032d76:	780a      	ldrb	r2, [r1, #0]
 8032d78:	4050      	eors	r0, r2
 8032d7a:	4318      	orrs	r0, r3
        case 3: check |= *stored_id++ ^ *id++; 
 8032d7c:	1c6a      	adds	r2, r5, #1
 8032d7e:	782b      	ldrb	r3, [r5, #0]
 8032d80:	1c61      	adds	r1, r4, #1
 8032d82:	7824      	ldrb	r4, [r4, #0]
 8032d84:	4063      	eors	r3, r4
 8032d86:	4318      	orrs	r0, r3
        case 4: check |= *stored_id++ ^ *id++; 
 8032d88:	1c55      	adds	r5, r2, #1
 8032d8a:	7813      	ldrb	r3, [r2, #0]
 8032d8c:	1c4c      	adds	r4, r1, #1
 8032d8e:	780a      	ldrb	r2, [r1, #0]
 8032d90:	4053      	eors	r3, r2
 8032d92:	4303      	orrs	r3, r0
        case 5: check |= *stored_id++ ^ *id++; 
 8032d94:	1c6a      	adds	r2, r5, #1
 8032d96:	7828      	ldrb	r0, [r5, #0]
 8032d98:	1c61      	adds	r1, r4, #1
 8032d9a:	7824      	ldrb	r4, [r4, #0]
 8032d9c:	4060      	eors	r0, r4
 8032d9e:	4303      	orrs	r3, r0
        case 6: check |= *stored_id++ ^ *id++; 
 8032da0:	1c54      	adds	r4, r2, #1
 8032da2:	7810      	ldrb	r0, [r2, #0]
 8032da4:	1c4a      	adds	r2, r1, #1
 8032da6:	7809      	ldrb	r1, [r1, #0]
 8032da8:	4048      	eors	r0, r1
 8032daa:	4318      	orrs	r0, r3
        case 7: check |= *stored_id ^ *id;
 8032dac:	7823      	ldrb	r3, [r4, #0]
 8032dae:	7812      	ldrb	r2, [r2, #0]
 8032db0:	4053      	eors	r3, r2
 8032db2:	4318      	orrs	r0, r3
                break;
    }
    
    return (ot_bool)(check == 0);
 8032db4:	4243      	negs	r3, r0
 8032db6:	4158      	adcs	r0, r3
 8032db8:	b2c0      	uxtb	r0, r0
}
 8032dba:	bd30      	pop	{r4, r5, pc}
    switch (length & 7) {
 8032dbc:	2300      	movs	r3, #0
 8032dbe:	e7d7      	b.n	8032d70 <m2np_idcmp+0x4c>
 8032dc0:	0015      	movs	r5, r2
 8032dc2:	000c      	movs	r4, r1
 8032dc4:	2000      	movs	r0, #0
 8032dc6:	e7d9      	b.n	8032d7c <m2np_idcmp+0x58>
 8032dc8:	2000      	movs	r0, #0
 8032dca:	e7dd      	b.n	8032d88 <m2np_idcmp+0x64>
 8032dcc:	0015      	movs	r5, r2
 8032dce:	000c      	movs	r4, r1
 8032dd0:	2300      	movs	r3, #0
 8032dd2:	e7df      	b.n	8032d94 <m2np_idcmp+0x70>
 8032dd4:	2300      	movs	r3, #0
 8032dd6:	e7e3      	b.n	8032da0 <m2np_idcmp+0x7c>
 8032dd8:	0014      	movs	r4, r2
 8032dda:	000a      	movs	r2, r1
 8032ddc:	2000      	movs	r0, #0
 8032dde:	e7e5      	b.n	8032dac <m2np_idcmp+0x88>
 8032de0:	2000      	movs	r0, #0
 8032de2:	e7e7      	b.n	8032db4 <m2np_idcmp+0x90>
 8032de4:	2000c426 	.word	0x2000c426
 8032de8:	080370b0 	.word	0x080370b0
 8032dec:	2000c410 	.word	0x2000c410
 8032df0:	2000c41e 	.word	0x2000c41e

08032df4 <m2np_footer>:
#endif



#ifndef EXTF_m2np_footer
OT_WEAK void m2np_footer() {
 8032df4:	b510      	push	{r4, lr}

    /// RS and CRC will be appended during encoding, and their extra length
    /// will be added to the frame length field.  -1 is because the length
    /// byte is not included in the length field.
    m2np_footer_END:
    txq.getcursor[0] = q_span(&txq) - 1;
 8032df6:	4c04      	ldr	r4, [pc, #16]	; (8032e08 <m2np_footer+0x14>)
 8032df8:	0020      	movs	r0, r4
 8032dfa:	f001 fce1 	bl	80347c0 <q_span>
 8032dfe:	6863      	ldr	r3, [r4, #4]
 8032e00:	3801      	subs	r0, #1
 8032e02:	7018      	strb	r0, [r3, #0]
}
 8032e04:	bd10      	pop	{r4, pc}
 8032e06:	46c0      	nop			; (mov r8, r8)
 8032e08:	2000cb2c 	.word	0x2000cb2c

08032e0c <network_route_ff>:
ot_int network_route_ff(m2session* active) {
 8032e0c:	b570      	push	{r4, r5, r6, lr}
 8032e0e:	0004      	movs	r4, r0
    active->flags       = (rxq.front[1] & M2LC_RSCODE) >> 3;
 8032e10:	4a49      	ldr	r2, [pc, #292]	; (8032f38 <network_route_ff+0x12c>)
 8032e12:	68d3      	ldr	r3, [r2, #12]
 8032e14:	785b      	ldrb	r3, [r3, #1]
 8032e16:	10db      	asrs	r3, r3, #3
 8032e18:	2508      	movs	r5, #8
 8032e1a:	402b      	ands	r3, r5
 8032e1c:	72c3      	strb	r3, [r0, #11]
    rxq.getcursor       = &rxq.front[4];
 8032e1e:	68d1      	ldr	r1, [r2, #12]
 8032e20:	1d0b      	adds	r3, r1, #4
 8032e22:	6053      	str	r3, [r2, #4]
    m2np.header.fr_info = *rxq.getcursor++;
 8032e24:	1d48      	adds	r0, r1, #5
 8032e26:	6050      	str	r0, [r2, #4]
 8032e28:	790b      	ldrb	r3, [r1, #4]
 8032e2a:	4a44      	ldr	r2, [pc, #272]	; (8032f3c <network_route_ff+0x130>)
 8032e2c:	7713      	strb	r3, [r2, #28]
    active->flags      |= (m2np.header.fr_info & ~M2_FLAG_RSCODE);     
 8032e2e:	b25b      	sxtb	r3, r3
 8032e30:	2608      	movs	r6, #8
 8032e32:	43b3      	bics	r3, r6
 8032e34:	7ae6      	ldrb	r6, [r4, #11]
 8032e36:	4333      	orrs	r3, r6
 8032e38:	72e3      	strb	r3, [r4, #11]
    m2np.header.ext_info = 0;
 8032e3a:	2300      	movs	r3, #0
 8032e3c:	7753      	strb	r3, [r2, #29]
    if (m2np.header.fr_info & M2FI_EXT) {
 8032e3e:	7f13      	ldrb	r3, [r2, #28]
 8032e40:	421d      	tst	r5, r3
 8032e42:	d005      	beq.n	8032e50 <network_route_ff+0x44>
        m2np.header.ext_info = *rxq.getcursor++;
 8032e44:	1d88      	adds	r0, r1, #6
 8032e46:	4a3c      	ldr	r2, [pc, #240]	; (8032f38 <network_route_ff+0x12c>)
 8032e48:	6050      	str	r0, [r2, #4]
 8032e4a:	7949      	ldrb	r1, [r1, #5]
 8032e4c:	4a3b      	ldr	r2, [pc, #236]	; (8032f3c <network_route_ff+0x130>)
 8032e4e:	7751      	strb	r1, [r2, #29]
    use_m2np = ((m2np.header.fr_info & M2FI_ADDRMASK) != 0);
 8032e50:	2503      	movs	r5, #3
 8032e52:	401d      	ands	r5, r3
 8032e54:	002b      	movs	r3, r5
 8032e56:	1e5a      	subs	r2, r3, #1
 8032e58:	4193      	sbcs	r3, r2
 8032e5a:	b2db      	uxtb	r3, r3
    if (active->netstate & M2_NETSTATE_CONNECTED) {
 8032e5c:	79e2      	ldrb	r2, [r4, #7]
 8032e5e:	07d1      	lsls	r1, r2, #31
 8032e60:	d432      	bmi.n	8032ec8 <network_route_ff+0xbc>
    else if (use_m2np) {
 8032e62:	2d00      	cmp	r5, #0
 8032e64:	d059      	beq.n	8032f1a <network_route_ff+0x10e>
        active->netstate  |= M2_NETSTATE_CONNECTED;
 8032e66:	2301      	movs	r3, #1
 8032e68:	431a      	orrs	r2, r3
 8032e6a:	71e2      	strb	r2, [r4, #7]
        active->subnet     = rxq.front[3];
 8032e6c:	4832      	ldr	r0, [pc, #200]	; (8032f38 <network_route_ff+0x12c>)
 8032e6e:	68c3      	ldr	r3, [r0, #12]
 8032e70:	78db      	ldrb	r3, [r3, #3]
 8032e72:	72a3      	strb	r3, [r4, #10]
        active->dialog_id  = q_readbyte(&rxq);
 8032e74:	f001 fd1c 	bl	80348b0 <q_readbyte>
 8032e78:	7260      	strb	r0, [r4, #9]
    if (m2np.header.fr_info & M2FI_DLLS) {
 8032e7a:	4b30      	ldr	r3, [pc, #192]	; (8032f3c <network_route_ff+0x130>)
 8032e7c:	7f1a      	ldrb	r2, [r3, #28]
 8032e7e:	0653      	lsls	r3, r2, #25
 8032e80:	d44e      	bmi.n	8032f20 <network_route_ff+0x114>
    if (use_m2np) {
 8032e82:	2d00      	cmp	r5, #0
 8032e84:	d04f      	beq.n	8032f26 <network_route_ff+0x11a>
        m2np.rt.dlog.length = _idlen[ ((m2np.header.fr_info & M2FI_VID) != 0) ];
 8032e86:	0912      	lsrs	r2, r2, #4
 8032e88:	2301      	movs	r3, #1
 8032e8a:	4013      	ands	r3, r2
 8032e8c:	005b      	lsls	r3, r3, #1
 8032e8e:	4a2c      	ldr	r2, [pc, #176]	; (8032f40 <network_route_ff+0x134>)
 8032e90:	5cd1      	ldrb	r1, [r2, r3]
 8032e92:	4d2a      	ldr	r5, [pc, #168]	; (8032f3c <network_route_ff+0x130>)
 8032e94:	7129      	strb	r1, [r5, #4]
        m2np.rt.dlog.value  = q_markbyte(&rxq, m2np.rt.dlog.length);
 8032e96:	b209      	sxth	r1, r1
 8032e98:	4827      	ldr	r0, [pc, #156]	; (8032f38 <network_route_ff+0x12c>)
 8032e9a:	f001 fcd5 	bl	8034848 <q_markbyte>
 8032e9e:	60a8      	str	r0, [r5, #8]
        if ((m2np.header.fr_info & M2_FLAG_CRYPTO) == M2_FLAG_NLS) {
 8032ea0:	7f2a      	ldrb	r2, [r5, #28]
 8032ea2:	2360      	movs	r3, #96	; 0x60
 8032ea4:	4013      	ands	r3, r2
 8032ea6:	2b20      	cmp	r3, #32
 8032ea8:	d040      	beq.n	8032f2c <network_route_ff+0x120>
        if (m2np.header.fr_info & M2FI_UCAST) {
 8032eaa:	0793      	lsls	r3, r2, #30
 8032eac:	d418      	bmi.n	8032ee0 <network_route_ff+0xd4>
        m2np.rt.hop_code = 0;
 8032eae:	4b23      	ldr	r3, [pc, #140]	; (8032f3c <network_route_ff+0x130>)
 8032eb0:	2200      	movs	r2, #0
 8032eb2:	701a      	strb	r2, [r3, #0]
        if (m2np.header.fr_info & M2FI_ROUTE) {
 8032eb4:	7f1b      	ldrb	r3, [r3, #28]
 8032eb6:	075b      	lsls	r3, r3, #29
 8032eb8:	d43b      	bmi.n	8032f32 <network_route_ff+0x126>
            route_val = m2qp_parse_frame(active);
 8032eba:	0020      	movs	r0, r4
 8032ebc:	f000 fe4e 	bl	8033b5c <m2qp_parse_frame>
 8032ec0:	1e04      	subs	r4, r0, #0
    if (route_val >= 0) {
 8032ec2:	da27      	bge.n	8032f14 <network_route_ff+0x108>
}
 8032ec4:	0020      	movs	r0, r4
 8032ec6:	bd70      	pop	{r4, r5, r6, pc}
        active->dialog_id += use_m2np;
 8032ec8:	7a66      	ldrb	r6, [r4, #9]
 8032eca:	199e      	adds	r6, r3, r6
 8032ecc:	b2f6      	uxtb	r6, r6
 8032ece:	7266      	strb	r6, [r4, #9]
        if (active->dialog_id != q_readbyte(&rxq)) {
 8032ed0:	4819      	ldr	r0, [pc, #100]	; (8032f38 <network_route_ff+0x12c>)
 8032ed2:	f001 fced 	bl	80348b0 <q_readbyte>
 8032ed6:	4286      	cmp	r6, r0
 8032ed8:	d0cf      	beq.n	8032e7a <network_route_ff+0x6e>
            return -1;
 8032eda:	2401      	movs	r4, #1
 8032edc:	4264      	negs	r4, r4
 8032ede:	e7f1      	b.n	8032ec4 <network_route_ff+0xb8>
            active->flags      |= (target_len << 4);        //sets M2_FLAG_VID (SRC)
 8032ee0:	2301      	movs	r3, #1
 8032ee2:	401a      	ands	r2, r3
 8032ee4:	0111      	lsls	r1, r2, #4
 8032ee6:	7ae3      	ldrb	r3, [r4, #11]
 8032ee8:	430b      	orrs	r3, r1
 8032eea:	72e3      	strb	r3, [r4, #11]
            active->netstate   |= M2_NETFLAG_FIRSTRX;
 8032eec:	79e3      	ldrb	r3, [r4, #7]
 8032eee:	2102      	movs	r1, #2
 8032ef0:	430b      	orrs	r3, r1
 8032ef2:	71e3      	strb	r3, [r4, #7]
            target_len          = _idlen[ target_len ];
 8032ef4:	0052      	lsls	r2, r2, #1
 8032ef6:	4b12      	ldr	r3, [pc, #72]	; (8032f40 <network_route_ff+0x134>)
 8032ef8:	5ed5      	ldrsh	r5, [r2, r3]
            if (m2np_idcmp(target_len, q_markbyte(&rxq, target_len)) == False) {
 8032efa:	0029      	movs	r1, r5
 8032efc:	480e      	ldr	r0, [pc, #56]	; (8032f38 <network_route_ff+0x12c>)
 8032efe:	f001 fca3 	bl	8034848 <q_markbyte>
 8032f02:	0001      	movs	r1, r0
 8032f04:	0028      	movs	r0, r5
 8032f06:	f7ff ff0d 	bl	8032d24 <m2np_idcmp>
 8032f0a:	2800      	cmp	r0, #0
 8032f0c:	d1cf      	bne.n	8032eae <network_route_ff+0xa2>
                return -1;
 8032f0e:	2401      	movs	r4, #1
 8032f10:	4264      	negs	r4, r4
 8032f12:	e7d7      	b.n	8032ec4 <network_route_ff+0xb8>
        m2np_footer( /* active */);
 8032f14:	f7ff ff6e 	bl	8032df4 <m2np_footer>
 8032f18:	e7d4      	b.n	8032ec4 <network_route_ff+0xb8>
        return -1;  //M2DP cannot be first frame!
 8032f1a:	2401      	movs	r4, #1
 8032f1c:	4264      	negs	r4, r4
 8032f1e:	e7d1      	b.n	8032ec4 <network_route_ff+0xb8>
        return -1;
 8032f20:	2401      	movs	r4, #1
 8032f22:	4264      	negs	r4, r4
 8032f24:	e7ce      	b.n	8032ec4 <network_route_ff+0xb8>
        route_val = -1;     // placeholder until multiframe implemented
 8032f26:	2401      	movs	r4, #1
 8032f28:	4264      	negs	r4, r4
 8032f2a:	e7cb      	b.n	8032ec4 <network_route_ff+0xb8>
            return -1;
 8032f2c:	2401      	movs	r4, #1
 8032f2e:	4264      	negs	r4, r4
 8032f30:	e7c8      	b.n	8032ec4 <network_route_ff+0xb8>
                return -1;
 8032f32:	2401      	movs	r4, #1
 8032f34:	4264      	negs	r4, r4
 8032f36:	e7c5      	b.n	8032ec4 <network_route_ff+0xb8>
 8032f38:	2000cb18 	.word	0x2000cb18
 8032f3c:	2000c460 	.word	0x2000c460
 8032f40:	080370d0 	.word	0x080370d0

08032f44 <m2advp_parse>:
    //ot_u8   txadv_buffer[10];
#endif


#ifndef EXTF_m2advp_parse
OT_WEAK m2session* m2advp_parse(void) {
 8032f44:	b570      	push	{r4, r5, r6, lr}
    ot_int      slop;
    m2session*	s_next;
    ot_u16      pkt_ti;

    // Get the counter-ETA information from the inbound frame
    count.ubyte[UPPER]  = rxq.getcursor[3];
 8032f46:	4b13      	ldr	r3, [pc, #76]	; (8032f94 <m2advp_parse+0x50>)
 8032f48:	685a      	ldr	r2, [r3, #4]
 8032f4a:	78d3      	ldrb	r3, [r2, #3]
    count.ubyte[LOWER]  = rxq.getcursor[4];
 8032f4c:	7914      	ldrb	r4, [r2, #4]
 8032f4e:	021b      	lsls	r3, r3, #8
 8032f50:	431c      	orrs	r4, r3
    count.ushort       &= 0x7FFF;
 8032f52:	0464      	lsls	r4, r4, #17
 8032f54:	0c64      	lsrs	r4, r4, #17

    // stores the bg packet duration of the active channel.  We need this
    // in order to deal with timing skew.
    pkt_ti  = rm2_bgpkt_duration();
 8032f56:	f7fe fbdf 	bl	8031718 <rm2_bgpkt_duration>

    // Account for "slop" due to clock deviation, process latency,
    // and other such things.  Thus the follow-up session is
    // either a second BG scan (if too much slop), or it is FG
    // listening for the request.
    slop = (count.ushort / OT_GPTIM_ERRDIV);
 8032f5a:	2300      	movs	r3, #0
    if (slop <= pkt_ti) {
 8032f5c:	4283      	cmp	r3, r0
 8032f5e:	dd0f      	ble.n	8032f80 <m2advp_parse+0x3c>
        netstate    	= M2_NETSTATE_REQRX;
    }
    else {
    	count.ushort   -= slop;
        scancode        = 0x80;
        netstate        = M2_NETSTATE_REQRX | M2_NETFLAG_BG;
 8032f60:	2660      	movs	r6, #96	; 0x60
        scancode        = 0x80;
 8032f62:	2580      	movs	r5, #128	; 0x80
    }

    // ensure that count value is never negative.
    if (count.sshort < 0) {
 8032f64:	0423      	lsls	r3, r4, #16
 8032f66:	d413      	bmi.n	8032f90 <m2advp_parse+0x4c>
        count.sshort = 0;
    }

    // The next session is written in-place of the current session
    s_next              = session_top();
 8032f68:	f000 fa5e 	bl	8033428 <session_top>
    s_next->applet      = &dll_scan_applet;
 8032f6c:	4b0a      	ldr	r3, [pc, #40]	; (8032f98 <m2advp_parse+0x54>)
 8032f6e:	6003      	str	r3, [r0, #0]
    s_next->counter     = count.ushort;
 8032f70:	8084      	strh	r4, [r0, #4]
    s_next->channel     = rxq.getcursor[2];
 8032f72:	4b08      	ldr	r3, [pc, #32]	; (8032f94 <m2advp_parse+0x50>)
 8032f74:	685b      	ldr	r3, [r3, #4]
 8032f76:	789b      	ldrb	r3, [r3, #2]
 8032f78:	7183      	strb	r3, [r0, #6]
    s_next->netstate    = netstate;
 8032f7a:	71c6      	strb	r6, [r0, #7]
    s_next->extra       = scancode;
 8032f7c:	7205      	strb	r5, [r0, #8]

    return s_next;
}
 8032f7e:	bd70      	pop	{r4, r5, r6, pc}
    	count.ushort   -= pkt_ti;
 8032f80:	1a24      	subs	r4, r4, r0
    	scancode        = otutils_encode_timeout(pkt_ti<<1);
 8032f82:	0040      	lsls	r0, r0, #1
 8032f84:	b280      	uxth	r0, r0
 8032f86:	f001 fd14 	bl	80349b2 <otutils_encode_timeout>
 8032f8a:	0005      	movs	r5, r0
        netstate    	= M2_NETSTATE_REQRX;
 8032f8c:	2620      	movs	r6, #32
 8032f8e:	e7e9      	b.n	8032f64 <m2advp_parse+0x20>
        count.sshort = 0;
 8032f90:	2400      	movs	r4, #0
 8032f92:	e7e9      	b.n	8032f68 <m2advp_parse+0x24>
 8032f94:	2000cb18 	.word	0x2000cb18
 8032f98:	08032841 	.word	0x08032841

08032f9c <m2advp_open>:
#endif



#ifndef EXTF_m2advp_open
OT_WEAK void m2advp_open(m2session* follower) {
 8032f9c:	b570      	push	{r4, r5, r6, lr}
 8032f9e:	0005      	movs	r5, r0
    q_empty(&txq);
 8032fa0:	4c12      	ldr	r4, [pc, #72]	; (8032fec <m2advp_open+0x50>)
 8032fa2:	0020      	movs	r0, r4
 8032fa4:	f001 fc2d 	bl	8034802 <q_empty>
    txq.getcursor += 2;     //Bypass unused length and Link CTL bytes
 8032fa8:	6863      	ldr	r3, [r4, #4]
 8032faa:	3302      	adds	r3, #2
 8032fac:	6063      	str	r3, [r4, #4]
    
    q_writebyte(&txq, (BG_FRAMESIZE-1));    //Dummy Length value (not actually sent)
 8032fae:	2105      	movs	r1, #5
 8032fb0:	0020      	movs	r0, r4
 8032fb2:	f001 fc4e 	bl	8034852 <q_writebyte>
    q_writebyte(&txq, 0);                   //Dummy Link-Control (not actually sent)
 8032fb6:	2100      	movs	r1, #0
 8032fb8:	0020      	movs	r0, r4
 8032fba:	f001 fc4a 	bl	8034852 <q_writebyte>
    q_writebyte(&txq, 0);                   //Dummy TX-EIRP (updated by RF driver)
 8032fbe:	2100      	movs	r1, #0
 8032fc0:	0020      	movs	r0, r4
 8032fc2:	f001 fc46 	bl	8034852 <q_writebyte>
    
    // This byte is two nibbles: Subnet specifier and AdvP ID (F)
    q_writebyte(&txq, (follower->subnet | 0x0F));
 8032fc6:	7aa9      	ldrb	r1, [r5, #10]
 8032fc8:	230f      	movs	r3, #15
 8032fca:	4319      	orrs	r1, r3
 8032fcc:	b2c9      	uxtb	r1, r1
 8032fce:	0020      	movs	r0, r4
 8032fd0:	f001 fc3f 	bl	8034852 <q_writebyte>
    
    // Follower session channel
    q_writebyte(&txq, follower->channel);
 8032fd4:	79a9      	ldrb	r1, [r5, #6]
 8032fd6:	0020      	movs	r0, r4
 8032fd8:	f001 fc3b 	bl	8034852 <q_writebyte>
    
    // Follower wait time is set to dll counter
    dll.counter = follower->counter;
 8032fdc:	88a9      	ldrh	r1, [r5, #4]
 8032fde:	4b04      	ldr	r3, [pc, #16]	; (8032ff0 <m2advp_open+0x54>)
 8032fe0:	8059      	strh	r1, [r3, #2]
    q_writeshort(&txq, follower->counter);
 8032fe2:	0020      	movs	r0, r4
 8032fe4:	f001 fc3a 	bl	803485c <q_writeshort>
}
 8032fe8:	bd70      	pop	{r4, r5, r6, pc}
 8032fea:	46c0      	nop			; (mov r8, r8)
 8032fec:	2000cb2c 	.word	0x2000cb2c
 8032ff0:	2000c410 	.word	0x2000c410

08032ff4 <m2advp_update>:
#ifndef EXTF_m2advp_update
OT_WEAK void m2advp_update(ot_u16 countdown) {
///@note In this function we manually reset the txq cursors to the places
///      they need to be for the encoder.  The encoder implementation may or
///      may not do this automatically, but it is safer to be redundant.
    txq.getcursor       = &txq.front[2];                //No length, link-CTL bytes in BG Frame
 8032ff4:	4b07      	ldr	r3, [pc, #28]	; (8033014 <m2advp_update+0x20>)
 8032ff6:	68da      	ldr	r2, [r3, #12]
 8032ff8:	1c91      	adds	r1, r2, #2
 8032ffa:	6059      	str	r1, [r3, #4]
    txq.putcursor       = txq.getcursor;
 8032ffc:	6099      	str	r1, [r3, #8]
    txq.putcursor      += 3;                            //Skip EIRP, Subnet, Channel bytes
 8032ffe:	1d51      	adds	r1, r2, #5
 8033000:	6099      	str	r1, [r3, #8]
    *txq.putcursor++    = ((ot_u8*)&countdown)[UPPER];  //Countdown (upper 8 bits)
 8033002:	1d91      	adds	r1, r2, #6
 8033004:	6099      	str	r1, [r3, #8]
 8033006:	0a01      	lsrs	r1, r0, #8
 8033008:	7151      	strb	r1, [r2, #5]
    *txq.putcursor++    = ((ot_u8*)&countdown)[LOWER];  //Countdown (lower 8 bits)
 803300a:	689a      	ldr	r2, [r3, #8]
 803300c:	1c51      	adds	r1, r2, #1
 803300e:	6099      	str	r1, [r3, #8]
 8033010:	7010      	strb	r0, [r2, #0]
}
 8033012:	4770      	bx	lr
 8033014:	2000cb2c 	.word	0x2000cb2c

08033018 <m2advp_close>:
#endif


#ifndef EXTF_m2advp_close
OT_WEAK void m2advp_close() {
}
 8033018:	4770      	bx	lr
	...

0803301c <m2tgram_parse>:

///@todo This is patchwork code, just to deliver basic functionality with
/// with existing buffer structure and M2QP impl.
extern alp_tmpl m2alp;

m2session* m2tgram_parse(void) {
 803301c:	b510      	push	{r4, lr}
/// Telegram format is made into an ALP frame and sent to telegram forwarder
/// ALP (ID = ???)
/// @todo ID currently set to 16, but subject to change

	// Shift 14 byte telegram by four bytes to make room for ALP header
	for (ot_int i=13; i>=0; i--) {
 803301e:	230d      	movs	r3, #13
 8033020:	e006      	b.n	8033030 <m2tgram_parse+0x14>
		rxq.getcursor[i+4] = rxq.getcursor[i];
 8033022:	4a0f      	ldr	r2, [pc, #60]	; (8033060 <m2tgram_parse+0x44>)
 8033024:	6852      	ldr	r2, [r2, #4]
 8033026:	1d19      	adds	r1, r3, #4
 8033028:	5cd0      	ldrb	r0, [r2, r3]
 803302a:	5450      	strb	r0, [r2, r1]
	for (ot_int i=13; i>=0; i--) {
 803302c:	3b01      	subs	r3, #1
 803302e:	b21b      	sxth	r3, r3
 8033030:	2b00      	cmp	r3, #0
 8033032:	daf6      	bge.n	8033022 <m2tgram_parse+0x6>
	}

	// Putcursor re-oriented to include only ALP header and telegram payload
	rxq.putcursor    = rxq.getcursor + 4 + 14;
 8033034:	4b0a      	ldr	r3, [pc, #40]	; (8033060 <m2tgram_parse+0x44>)
 8033036:	685a      	ldr	r2, [r3, #4]
 8033038:	0011      	movs	r1, r2
 803303a:	3112      	adds	r1, #18
 803303c:	6099      	str	r1, [r3, #8]

	// Put ALP header
	rxq.getcursor[0] = 0xD0;
 803303e:	21d0      	movs	r1, #208	; 0xd0
 8033040:	7011      	strb	r1, [r2, #0]
	rxq.getcursor[1] = 14;
 8033042:	220e      	movs	r2, #14
 8033044:	6859      	ldr	r1, [r3, #4]
 8033046:	704a      	strb	r2, [r1, #1]
	rxq.getcursor[2] = 16;
 8033048:	3202      	adds	r2, #2
 803304a:	6859      	ldr	r1, [r3, #4]
 803304c:	708a      	strb	r2, [r1, #2]
	rxq.getcursor[3] = 0;
 803304e:	685b      	ldr	r3, [r3, #4]
 8033050:	2200      	movs	r2, #0
 8033052:	70da      	strb	r2, [r3, #3]

	alp_parse_message(&m2alp, AUTH_GUEST);
 8033054:	4903      	ldr	r1, [pc, #12]	; (8033064 <m2tgram_parse+0x48>)
 8033056:	4804      	ldr	r0, [pc, #16]	; (8033068 <m2tgram_parse+0x4c>)
 8033058:	f001 f9ff 	bl	803445a <alp_parse_message>

	return NULL;
}
 803305c:	2000      	movs	r0, #0
 803305e:	bd10      	pop	{r4, pc}
 8033060:	2000cb18 	.word	0x2000cb18
 8033064:	08037144 	.word	0x08037144
 8033068:	2000c4c8 	.word	0x2000c4c8

0803306c <network_parse_bf>:
OT_WEAK m2session* network_parse_bf(void) {
 803306c:	b510      	push	{r4, lr}
	    switch (rxq.getcursor[1] & 15) {
 803306e:	4b08      	ldr	r3, [pc, #32]	; (8033090 <network_parse_bf+0x24>)
 8033070:	685b      	ldr	r3, [r3, #4]
 8033072:	785a      	ldrb	r2, [r3, #1]
 8033074:	230f      	movs	r3, #15
 8033076:	4013      	ands	r3, r2
 8033078:	2b01      	cmp	r3, #1
 803307a:	d004      	beq.n	8033086 <network_parse_bf+0x1a>
 803307c:	2b0f      	cmp	r3, #15
 803307e:	d105      	bne.n	803308c <network_parse_bf+0x20>
	    case 15:    s_next = m2advp_parse();        break;
 8033080:	f7ff ff60 	bl	8032f44 <m2advp_parse>
 8033084:	e003      	b.n	803308e <network_parse_bf+0x22>
	    case 1:     s_next = m2tgram_parse();       break;
 8033086:	f7ff ffc9 	bl	803301c <m2tgram_parse>
 803308a:	e000      	b.n	803308e <network_parse_bf+0x22>
	    switch (rxq.getcursor[1] & 15) {
 803308c:	2000      	movs	r0, #0
	}
 803308e:	bd10      	pop	{r4, pc}
 8033090:	2000cb18 	.word	0x2000cb18

08033094 <rm2_mac_filter>:




#ifndef EXTF_rm2_mac_filter
OT_WEAK ot_bool rm2_mac_filter() {
 8033094:	b530      	push	{r4, r5, lr}

    // TX EIRP encoded value    = (dBm + 40) * 2
    // TX EIRP dBm              = ((encoded value) / 2) - 40
    // Link Loss                = TX EIRP dBm - Detected RX dBm
    // Link Quality Filter      = (Link Loss <= Link Loss Limit)
    ot_u8 qualifier = (ot_u8)(radio.last_linkloss <= ((ot_int)phymac[0].link_qual)<<1);
 8033096:	4b12      	ldr	r3, [pc, #72]	; (80330e0 <rm2_mac_filter+0x4c>)
 8033098:	2206      	movs	r2, #6
 803309a:	5e9a      	ldrsh	r2, [r3, r2]
 803309c:	4b11      	ldr	r3, [pc, #68]	; (80330e4 <rm2_mac_filter+0x50>)
 803309e:	795b      	ldrb	r3, [r3, #5]
 80330a0:	005b      	lsls	r3, r3, #1
 80330a2:	0fd0      	lsrs	r0, r2, #31
 80330a4:	2100      	movs	r1, #0
 80330a6:	4293      	cmp	r3, r2
 80330a8:	4148      	adcs	r0, r1
 80330aa:	b2c0      	uxtb	r0, r0
    {   ot_u8 fr_subnet, dsm, specifier, mask;
        fr_subnet   = rxq.front[3];
 80330ac:	4b0e      	ldr	r3, [pc, #56]	; (80330e8 <rm2_mac_filter+0x54>)
 80330ae:	68db      	ldr	r3, [r3, #12]
 80330b0:	78da      	ldrb	r2, [r3, #3]
        dsm         = dll.netconf.subnet & 0x0F;
 80330b2:	4b0e      	ldr	r3, [pc, #56]	; (80330ec <rm2_mac_filter+0x58>)
 80330b4:	7e1b      	ldrb	r3, [r3, #24]
 80330b6:	240f      	movs	r4, #15
 80330b8:	310f      	adds	r1, #15
 80330ba:	4019      	ands	r1, r3
        mask        = fr_subnet & dsm;
 80330bc:	000d      	movs	r5, r1
 80330be:	4015      	ands	r5, r2
        specifier   = (fr_subnet ^ dll.netconf.subnet) & 0xF0;
 80330c0:	4053      	eors	r3, r2
 80330c2:	43a3      	bics	r3, r4
        fr_subnet  &= 0xF0;
 80330c4:	43a2      	bics	r2, r4
        qualifier  &= (ot_bool)(((fr_subnet == 0xF0) || (specifier == 0)) && (mask == dsm));
 80330c6:	2af0      	cmp	r2, #240	; 0xf0
 80330c8:	d001      	beq.n	80330ce <rm2_mac_filter+0x3a>
 80330ca:	2b00      	cmp	r3, #0
 80330cc:	d104      	bne.n	80330d8 <rm2_mac_filter+0x44>
 80330ce:	42a9      	cmp	r1, r5
 80330d0:	d004      	beq.n	80330dc <rm2_mac_filter+0x48>
 80330d2:	2300      	movs	r3, #0
    }
    return qualifier;
 80330d4:	4018      	ands	r0, r3
}
 80330d6:	bd30      	pop	{r4, r5, pc}
        qualifier  &= (ot_bool)(((fr_subnet == 0xF0) || (specifier == 0)) && (mask == dsm));
 80330d8:	2300      	movs	r3, #0
 80330da:	e7fb      	b.n	80330d4 <rm2_mac_filter+0x40>
 80330dc:	2301      	movs	r3, #1
 80330de:	e7f9      	b.n	80330d4 <rm2_mac_filter+0x40>
 80330e0:	2000c488 	.word	0x2000c488
 80330e4:	2000c480 	.word	0x2000c480
 80330e8:	2000cb18 	.word	0x2000cb18
 80330ec:	2000c410 	.word	0x2000c410

080330f0 <rm2_channel_refresh>:
#endif


#ifndef EXTF_rm2_channel_refresh
OT_WEAK void rm2_channel_refresh(void) {
    radio.flags |= RADIO_FLAG_REFRESH;
 80330f0:	4a02      	ldr	r2, [pc, #8]	; (80330fc <rm2_channel_refresh+0xc>)
 80330f2:	7853      	ldrb	r3, [r2, #1]
 80330f4:	2101      	movs	r1, #1
 80330f6:	430b      	orrs	r3, r1
 80330f8:	7053      	strb	r3, [r2, #1]
}
 80330fa:	4770      	bx	lr
 80330fc:	2000c488 	.word	0x2000c488

08033100 <rm2_channel_lookup>:
}
#endif


#ifndef EXTF_rm2_channel_lookup
OT_WEAK ot_bool rm2_channel_lookup(ot_u8 chan_id, vlFILE* fp) {
 8033100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8033102:	46ce      	mov	lr, r9
 8033104:	4647      	mov	r7, r8
 8033106:	b580      	push	{r7, lr}
 8033108:	b083      	sub	sp, #12
 803310a:	0006      	movs	r6, r0
 803310c:	000d      	movs	r5, r1
    ot_u8       spectrum_id;
    ot_int      i;
    volatile ot_uni16    scratch;

    // Strip the FEC & Spread bits
    spectrum_id = chan_id & 0x3F;
 803310e:	273f      	movs	r7, #63	; 0x3f
 8033110:	4007      	ands	r7, r0

    /// Populate the phymac flags: these are not frequently used
    /// @todo I might want to do this in radio_init() instead
    scratch.ushort  = vl_read(fp, 2);
 8033112:	2102      	movs	r1, #2
 8033114:	0028      	movs	r0, r5
 8033116:	f001 fe76 	bl	8034e06 <vl_read>
 803311a:	ab01      	add	r3, sp, #4
 803311c:	8018      	strh	r0, [r3, #0]
    phymac[0].flags = scratch.ubyte[0];
 803311e:	781a      	ldrb	r2, [r3, #0]
 8033120:	4b2d      	ldr	r3, [pc, #180]	; (80331d8 <rm2_channel_lookup+0xd8>)
 8033122:	701a      	strb	r2, [r3, #0]

    /// Look through the channel list to find the one with matching spectrum id.
    /// The channel list is not necessarily sorted.
    /// @todo might do this with vl_get() in the future
    for (i=6; i<fp->length; i+=6) {
 8033124:	2406      	movs	r4, #6
 8033126:	e001      	b.n	803312c <rm2_channel_lookup+0x2c>
 8033128:	3406      	adds	r4, #6
 803312a:	b224      	sxth	r4, r4
 803312c:	892a      	ldrh	r2, [r5, #8]
 803312e:	4294      	cmp	r4, r2
 8033130:	da50      	bge.n	80331d4 <rm2_channel_lookup+0xd4>
        scratch.ushort = vl_read(fp, i);
 8033132:	b2a4      	uxth	r4, r4
 8033134:	0021      	movs	r1, r4
 8033136:	0028      	movs	r0, r5
 8033138:	f001 fe65 	bl	8034e06 <vl_read>
 803313c:	ab01      	add	r3, sp, #4
 803313e:	8018      	strh	r0, [r3, #0]

        if ((spectrum_id == scratch.ubyte[0]) \
 8033140:	781b      	ldrb	r3, [r3, #0]
 8033142:	b2db      	uxtb	r3, r3
 8033144:	42bb      	cmp	r3, r7
 8033146:	d006      	beq.n	8033156 <rm2_channel_lookup+0x56>
        || ((spectrum_id & 0xF0) == scratch.ubyte[0])) {
 8033148:	ab01      	add	r3, sp, #4
 803314a:	781a      	ldrb	r2, [r3, #0]
 803314c:	b2d2      	uxtb	r2, r2
 803314e:	2330      	movs	r3, #48	; 0x30
 8033150:	4033      	ands	r3, r6
 8033152:	429a      	cmp	r2, r3
 8033154:	d1e8      	bne.n	8033128 <rm2_channel_lookup+0x28>
            ot_u8 old_chan_id   = phymac[0].channel;
 8033156:	4f20      	ldr	r7, [pc, #128]	; (80331d8 <rm2_channel_lookup+0xd8>)
 8033158:	78bb      	ldrb	r3, [r7, #2]
 803315a:	4699      	mov	r9, r3
            ot_u8 old_tx_eirp   = (phymac[0].tx_eirp & 0x7f);
 803315c:	793b      	ldrb	r3, [r7, #4]
 803315e:	227f      	movs	r2, #127	; 0x7f
 8033160:	401a      	ands	r2, r3
 8033162:	4690      	mov	r8, r2

            phymac[0].tg        = rm2_default_tgd(chan_id);
 8033164:	0030      	movs	r0, r6
 8033166:	f7fe fad1 	bl	803170c <rm2_default_tgd>
 803316a:	7078      	strb	r0, [r7, #1]
            phymac[0].channel   = chan_id;
 803316c:	70be      	strb	r6, [r7, #2]
          //phymac[0].autoscale = scratch.ubyte[1];

            scratch.ushort      = vl_read(fp, i+2);
 803316e:	1ca1      	adds	r1, r4, #2
 8033170:	b289      	uxth	r1, r1
 8033172:	0028      	movs	r0, r5
 8033174:	f001 fe47 	bl	8034e06 <vl_read>
 8033178:	ae01      	add	r6, sp, #4
 803317a:	8030      	strh	r0, [r6, #0]
            phymac[0].tx_eirp   = scratch.ubyte[0] & 0x80;
 803317c:	7833      	ldrb	r3, [r6, #0]
 803317e:	227f      	movs	r2, #127	; 0x7f
 8033180:	4393      	bics	r3, r2
 8033182:	713b      	strb	r3, [r7, #4]
            phymac[0].tx_eirp  |= rm2_clip_txeirp(scratch.ubyte[0]);
 8033184:	7830      	ldrb	r0, [r6, #0]
 8033186:	b2c0      	uxtb	r0, r0
 8033188:	f7fd ff76 	bl	8031078 <rm2_clip_txeirp>
 803318c:	793b      	ldrb	r3, [r7, #4]
 803318e:	4318      	orrs	r0, r3
 8033190:	7138      	strb	r0, [r7, #4]
            phymac[0].link_qual = scratch.ubyte[1];
 8033192:	7873      	ldrb	r3, [r6, #1]
 8033194:	717b      	strb	r3, [r7, #5]

            ///@todo Try this: *(ot_u16*)&phymac[0].cs_thr = vl_read(fp, i+4);  
            ///it will need some rearrangement in phymac struct
            /// Convert thresholds from DASH7 numeric encoding to native encoding
            scratch.ushort      = vl_read(fp, i+4);
 8033196:	1d21      	adds	r1, r4, #4
 8033198:	b289      	uxth	r1, r1
 803319a:	0028      	movs	r0, r5
 803319c:	f001 fe33 	bl	8034e06 <vl_read>
 80331a0:	8030      	strh	r0, [r6, #0]
            //phymac[0].cs_thr    = __THR(scratch.ubyte[0]);
            //phymac[0].cca_thr   = scratch.ubyte[1];
            //phymac[0].cs_thr    = rm2_calc_rssithr(phymac[0].cs_thr);
            //phymac[0].cca_thr   = rm2_calc_rssithr(phymac[0].cca_thr);
            radio.threshold.raw = scratch.ubyte[0];
 80331a2:	7830      	ldrb	r0, [r6, #0]
 80331a4:	b2c0      	uxtb	r0, r0
 80331a6:	4b0d      	ldr	r3, [pc, #52]	; (80331dc <rm2_channel_lookup+0xdc>)
 80331a8:	70d8      	strb	r0, [r3, #3]
            phymac[0].cs_thr    = rm2_calc_rssithr( (ot_u8)(radio.threshold.raw + radio.threshold.offset) );
 80331aa:	789b      	ldrb	r3, [r3, #2]
 80331ac:	18c0      	adds	r0, r0, r3
 80331ae:	b2c0      	uxtb	r0, r0
 80331b0:	f7fd ff68 	bl	8031084 <rm2_calc_rssithr>
 80331b4:	71b8      	strb	r0, [r7, #6]
            phymac[0].cca_thr   = rm2_calc_rssithr( scratch.ubyte[1] );
 80331b6:	7870      	ldrb	r0, [r6, #1]
 80331b8:	b2c0      	uxtb	r0, r0
 80331ba:	f7fd ff63 	bl	8031084 <rm2_calc_rssithr>
 80331be:	71f8      	strb	r0, [r7, #7]
            
            rm2_enter_channel(old_chan_id, old_tx_eirp);
 80331c0:	4641      	mov	r1, r8
 80331c2:	4648      	mov	r0, r9
 80331c4:	f7fd ff7c 	bl	80310c0 <rm2_enter_channel>
            return True;
 80331c8:	2001      	movs	r0, #1
        }
    }
    return False;
}
 80331ca:	b003      	add	sp, #12
 80331cc:	bcc0      	pop	{r6, r7}
 80331ce:	46b9      	mov	r9, r7
 80331d0:	46b0      	mov	r8, r6
 80331d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return False;
 80331d4:	2000      	movs	r0, #0
 80331d6:	e7f8      	b.n	80331ca <rm2_channel_lookup+0xca>
 80331d8:	2000c480 	.word	0x2000c480
 80331dc:	2000c488 	.word	0x2000c488

080331e0 <rm2_init>:
OT_WEAK void rm2_init(void) {
 80331e0:	b510      	push	{r4, lr}
    radio.state     = RADIO_Idle;
 80331e2:	4b0d      	ldr	r3, [pc, #52]	; (8033218 <rm2_init+0x38>)
 80331e4:	2200      	movs	r2, #0
 80331e6:	701a      	strb	r2, [r3, #0]
    radio.flags     = RADIO_FLAG_REFRESH;
 80331e8:	2101      	movs	r1, #1
 80331ea:	7059      	strb	r1, [r3, #1]
    radio.evtdone   = &otutils_sig2_null;
 80331ec:	490b      	ldr	r1, [pc, #44]	; (803321c <rm2_init+0x3c>)
 80331ee:	6099      	str	r1, [r3, #8]
    radio.threshold.offset  = 0;
 80331f0:	709a      	strb	r2, [r3, #2]
    radio.threshold.raw     = 0;
 80331f2:	70da      	strb	r2, [r3, #3]
    phymac[0].channel   = 0xF0;
 80331f4:	4b0a      	ldr	r3, [pc, #40]	; (8033220 <rm2_init+0x40>)
 80331f6:	32f0      	adds	r2, #240	; 0xf0
 80331f8:	709a      	strb	r2, [r3, #2]
    phymac[0].tx_eirp   = 0x7F;
 80331fa:	3a71      	subs	r2, #113	; 0x71
 80331fc:	711a      	strb	r2, [r3, #4]
    fp                  = ISF_open_su( ISF_ID(channel_configuration) );
 80331fe:	2002      	movs	r0, #2
 8033200:	f001 febb 	bl	8034f7a <ISF_open_su>
 8033204:	0004      	movs	r4, r0
    rm2_channel_lookup(0x18, fp);
 8033206:	0001      	movs	r1, r0
 8033208:	2018      	movs	r0, #24
 803320a:	f7ff ff79 	bl	8033100 <rm2_channel_lookup>
    vl_close(fp);
 803320e:	0020      	movs	r0, r4
 8033210:	f001 fe7c 	bl	8034f0c <vl_close>
}
 8033214:	bd10      	pop	{r4, pc}
 8033216:	46c0      	nop			; (mov r8, r8)
 8033218:	2000c488 	.word	0x2000c488
 803321c:	08034983 	.word	0x08034983
 8033220:	2000c480 	.word	0x2000c480

08033224 <rm2_test_channel>:
OT_WEAK ot_bool rm2_test_channel(ot_u8 channel) {
 8033224:	b570      	push	{r4, r5, r6, lr}
 8033226:	0005      	movs	r5, r0
    test = rm2_channel_fastcheck(channel);
 8033228:	f7fd ff30 	bl	803108c <rm2_channel_fastcheck>
 803322c:	1e04      	subs	r4, r0, #0
    if (test == False) {
 803322e:	d001      	beq.n	8033234 <rm2_test_channel+0x10>
}
 8033230:	0020      	movs	r0, r4
 8033232:	bd70      	pop	{r4, r5, r6, pc}
        fp      = ISF_open_su( ISF_ID(channel_configuration) );
 8033234:	2002      	movs	r0, #2
 8033236:	f001 fea0 	bl	8034f7a <ISF_open_su>
 803323a:	0006      	movs	r6, r0
        test    = rm2_channel_lookup(channel, fp);
 803323c:	0001      	movs	r1, r0
 803323e:	0028      	movs	r0, r5
 8033240:	f7ff ff5e 	bl	8033100 <rm2_channel_lookup>
 8033244:	0004      	movs	r4, r0
        vl_close(fp);
 8033246:	0030      	movs	r0, r6
 8033248:	f001 fe60 	bl	8034f0c <vl_close>
 803324c:	e7f0      	b.n	8033230 <rm2_test_channel+0xc>
	...

08033250 <rm2_test_chanlist>:
OT_WEAK ot_bool rm2_test_chanlist() {
 8033250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fp = ISF_open_su( ISF_ID(channel_configuration) );
 8033252:	2002      	movs	r0, #2
 8033254:	f001 fe91 	bl	8034f7a <ISF_open_su>
 8033258:	0007      	movs	r7, r0
    for (i=0, test=False; i<dll.comm.tx_channels; i++) {
 803325a:	2500      	movs	r5, #0
 803325c:	e001      	b.n	8033262 <rm2_test_chanlist+0x12>
 803325e:	3501      	adds	r5, #1
 8033260:	b22d      	sxth	r5, r5
 8033262:	4a0d      	ldr	r2, [pc, #52]	; (8033298 <rm2_test_chanlist+0x48>)
 8033264:	2330      	movs	r3, #48	; 0x30
 8033266:	5cd3      	ldrb	r3, [r2, r3]
 8033268:	429d      	cmp	r5, r3
 803326a:	da0e      	bge.n	803328a <rm2_test_chanlist+0x3a>
        next_channel = dll.comm.tx_chanlist[i];
 803326c:	4b0a      	ldr	r3, [pc, #40]	; (8033298 <rm2_test_chanlist+0x48>)
 803326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033270:	5d5e      	ldrb	r6, [r3, r5]
        if (rm2_channel_fastcheck(next_channel)) {
 8033272:	0030      	movs	r0, r6
 8033274:	f7fd ff0a 	bl	803108c <rm2_channel_fastcheck>
 8033278:	1e04      	subs	r4, r0, #0
 803327a:	d107      	bne.n	803328c <rm2_test_chanlist+0x3c>
        if (rm2_channel_lookup(next_channel, fp)) {
 803327c:	0039      	movs	r1, r7
 803327e:	0030      	movs	r0, r6
 8033280:	f7ff ff3e 	bl	8033100 <rm2_channel_lookup>
 8033284:	1e04      	subs	r4, r0, #0
 8033286:	d0ea      	beq.n	803325e <rm2_test_chanlist+0xe>
 8033288:	e000      	b.n	803328c <rm2_test_chanlist+0x3c>
    for (i=0, test=False; i<dll.comm.tx_channels; i++) {
 803328a:	2400      	movs	r4, #0
    vl_close(fp);
 803328c:	0038      	movs	r0, r7
 803328e:	f001 fe3d 	bl	8034f0c <vl_close>
}
 8033292:	0020      	movs	r0, r4
 8033294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8033296:	46c0      	nop			; (mov r8, r8)
 8033298:	2000c410 	.word	0x2000c410

0803329c <session_applet_null>:

session_struct session;



void session_applet_null(m2session* a) { }
 803329c:	4770      	bx	lr

0803329e <sub_store_session>:



static m2session* sub_store_session(m2session* store, ot_app applet, ot_u16 wait, ot_u8 netstate, ot_u8 channel) {
 803329e:	b510      	push	{r4, lr}
 80332a0:	0004      	movs	r4, r0
 80332a2:	a802      	add	r0, sp, #8
 80332a4:	7800      	ldrb	r0, [r0, #0]
/// Attach session to location specified
    store->applet       = applet;
 80332a6:	6021      	str	r1, [r4, #0]
    store->counter      = wait;
 80332a8:	80a2      	strh	r2, [r4, #4]
    store->channel      = channel;
 80332aa:	71a0      	strb	r0, [r4, #6]
    store->netstate     = netstate;
 80332ac:	71e3      	strb	r3, [r4, #7]
    store->extra        = 0;
 80332ae:	2300      	movs	r3, #0
 80332b0:	7223      	strb	r3, [r4, #8]
    store->dialog_id    = rand_prn8();
 80332b2:	f002 fd43 	bl	8035d3c <rand_prn8>
 80332b6:	7260      	strb	r0, [r4, #9]
    return store;
}
 80332b8:	0020      	movs	r0, r4
 80332ba:	bd10      	pop	{r4, pc}

080332bc <session_init>:



#ifndef EXTF_session_init
void session_init() {
    session.top = &session.heap[_END];
 80332bc:	4b02      	ldr	r3, [pc, #8]	; (80332c8 <session_init+0xc>)
 80332be:	001a      	movs	r2, r3
 80332c0:	3234      	adds	r2, #52	; 0x34
 80332c2:	601a      	str	r2, [r3, #0]
}
 80332c4:	4770      	bx	lr
 80332c6:	46c0      	nop			; (mov r8, r8)
 80332c8:	2000c494 	.word	0x2000c494

080332cc <session_getnext>:
#ifndef EXTF_session_getnext
OT_WEAK ot_uint session_getnext() {
/// Not idiot proof.  Do not call this unless you have already checked
/// session_notempty().
    ot_uint wait;
    wait                    = session.top->counter;
 80332cc:	4b02      	ldr	r3, [pc, #8]	; (80332d8 <session_getnext+0xc>)
 80332ce:	681b      	ldr	r3, [r3, #0]
 80332d0:	8898      	ldrh	r0, [r3, #4]
    session.top->counter    = 0;
 80332d2:	2200      	movs	r2, #0
 80332d4:	809a      	strh	r2, [r3, #4]
    return wait;
}
 80332d6:	4770      	bx	lr
 80332d8:	2000c494 	.word	0x2000c494

080332dc <session_new>:
#endif



#ifndef EXTF_session_new
OT_WEAK m2session* session_new(ot_app applet, ot_u16 wait, ot_u8 channel, ot_u8 netstate) {
 80332dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80332de:	46c6      	mov	lr, r8
 80332e0:	b500      	push	{lr}
 80332e2:	b082      	sub	sp, #8
 80332e4:	4680      	mov	r8, r0
 80332e6:	000e      	movs	r6, r1
 80332e8:	0015      	movs	r5, r2
 80332ea:	001f      	movs	r7, r3
    ot_u8* src;
    ot_uint length;

    // Always reserve an extra session for extension.
    // i.e. There must be two or more free sessions to do session_new()
    if (session.top <= &session.heap[_2ND] ) {
 80332ec:	4b0f      	ldr	r3, [pc, #60]	; (803332c <session_new+0x50>)
 80332ee:	6819      	ldr	r1, [r3, #0]
 80332f0:	3310      	adds	r3, #16
 80332f2:	4299      	cmp	r1, r3
 80332f4:	d917      	bls.n	8033326 <session_new+0x4a>
        return NULL;
    }

    // We're adding a new session to the bottom of the heap/stack/queue...
    src         = (ot_u8*)session.top;
    session.top--;
 80332f6:	0008      	movs	r0, r1
 80332f8:	380c      	subs	r0, #12
 80332fa:	4c0c      	ldr	r4, [pc, #48]	; (803332c <session_new+0x50>)
 80332fc:	6020      	str	r0, [r4, #0]
    length      = (ot_uint)((ot_u8*)&session.heap[_END] - src);
 80332fe:	3434      	adds	r4, #52	; 0x34
 8033300:	1a64      	subs	r4, r4, r1
 8033302:	b2a2      	uxth	r2, r4

    // Only do the copy if the size is not zero
    if (length != 0) {
 8033304:	2a00      	cmp	r2, #0
 8033306:	d10b      	bne.n	8033320 <session_new+0x44>
        memcpy( (ot_u8*)session.top, src, length);
    }

    return sub_store_session(&session.heap[_LAST], applet, wait, netstate, channel);
 8033308:	4808      	ldr	r0, [pc, #32]	; (803332c <session_new+0x50>)
 803330a:	9500      	str	r5, [sp, #0]
 803330c:	003b      	movs	r3, r7
 803330e:	0032      	movs	r2, r6
 8033310:	4641      	mov	r1, r8
 8033312:	3028      	adds	r0, #40	; 0x28
 8033314:	f7ff ffc3 	bl	803329e <sub_store_session>
}
 8033318:	b002      	add	sp, #8
 803331a:	bc80      	pop	{r7}
 803331c:	46b8      	mov	r8, r7
 803331e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy( (ot_u8*)session.top, src, length);
 8033320:	f002 fcc8 	bl	8035cb4 <ot_memcpy>
 8033324:	e7f0      	b.n	8033308 <session_new+0x2c>
        return NULL;
 8033326:	2000      	movs	r0, #0
 8033328:	e7f6      	b.n	8033318 <session_new+0x3c>
 803332a:	46c0      	nop			; (mov r8, r8)
 803332c:	2000c494 	.word	0x2000c494

08033330 <session_extend>:
#endif



#ifndef EXTF_session_extend
OT_WEAK m2session* session_extend(ot_app applet, ot_u16 wait, ot_u8 channel, ot_u8 netstate) {
 8033330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8033332:	46ce      	mov	lr, r9
 8033334:	4647      	mov	r7, r8
 8033336:	b580      	push	{r7, lr}
 8033338:	b083      	sub	sp, #12
 803333a:	4681      	mov	r9, r0
 803333c:	000f      	movs	r7, r1
 803333e:	4690      	mov	r8, r2
 8033340:	001e      	movs	r6, r3
    m2session* extend;

    // If not one free session, there's no room!
    if (session.top <= &session.heap[_1ST]) {
 8033342:	4b13      	ldr	r3, [pc, #76]	; (8033390 <session_extend+0x60>)
 8033344:	cb02      	ldmia	r3!, {r1}
 8033346:	4299      	cmp	r1, r3
 8033348:	d91f      	bls.n	803338a <session_extend+0x5a>
        return NULL;
    }

    // We're adding a new session...
    session.top--;
 803334a:	0008      	movs	r0, r1
 803334c:	380c      	subs	r0, #12
 803334e:	4b10      	ldr	r3, [pc, #64]	; (8033390 <session_extend+0x60>)
 8033350:	6018      	str	r0, [r3, #0]
    // If the new session is on the last spot, it means the heap is actually
    // empty, so no movement is necessary.  If heap is not empty and not full
    // (we know this by condition above and condition below), go through the
    // session heap to see where to put this extended session, and move all
    // higher data one spot up.
    if (extend < &session.heap[_LAST]) {
 8033352:	3328      	adds	r3, #40	; 0x28
 8033354:	4298      	cmp	r0, r3
 8033356:	d20d      	bcs.n	8033374 <session_extend+0x44>
    extend = session.top;
 8033358:	0004      	movs	r4, r0
        do {
            // Increment session, noting that first increment simply counters
            // "session.top--" above.
            extend++;
 803335a:	340c      	adds	r4, #12

            // Inspect following session. If it is INIT, then we extend the
            // session sequence below this point.  Else, following session is
            // still part of the current session sequence, so keep looking.
            if (extend[1].netstate & M2_NETSTATE_INIT) {
 803335c:	7ce5      	ldrb	r5, [r4, #19]
 803335e:	072b      	lsls	r3, r5, #28
 8033360:	d403      	bmi.n	803336a <session_extend+0x3a>
                break;
            }

            // The above "if (session.top <= &session.heap[_1ST])" make it OK
            // if we are at the 1st place in the session heap
        } while (extend < &session.heap[_LAST]);
 8033362:	4d0b      	ldr	r5, [pc, #44]	; (8033390 <session_extend+0x60>)
 8033364:	3528      	adds	r5, #40	; 0x28
 8033366:	42ac      	cmp	r4, r5
 8033368:	d3f7      	bcc.n	803335a <session_extend+0x2a>

        // Shift the stack down one notch, from top to extension point.
        memcpy( (ot_u8*)session.top,
                (ot_u8*)&session.top[1],
                (ot_uint)((ot_u8*)extend - (ot_u8*)session.top) );
 803336a:	1a22      	subs	r2, r4, r0
        memcpy( (ot_u8*)session.top,
 803336c:	b292      	uxth	r2, r2
 803336e:	f002 fca1 	bl	8035cb4 <ot_memcpy>
            extend++;
 8033372:	0020      	movs	r0, r4
    }

    return sub_store_session(extend, applet, wait, channel, netstate);
 8033374:	9600      	str	r6, [sp, #0]
 8033376:	4643      	mov	r3, r8
 8033378:	003a      	movs	r2, r7
 803337a:	4649      	mov	r1, r9
 803337c:	f7ff ff8f 	bl	803329e <sub_store_session>
}
 8033380:	b003      	add	sp, #12
 8033382:	bcc0      	pop	{r6, r7}
 8033384:	46b9      	mov	r9, r7
 8033386:	46b0      	mov	r8, r6
 8033388:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NULL;
 803338a:	2000      	movs	r0, #0
 803338c:	e7f8      	b.n	8033380 <session_extend+0x50>
 803338e:	46c0      	nop			; (mov r8, r8)
 8033390:	2000c494 	.word	0x2000c494

08033394 <session_app_purge>:
OT_WEAK void session_app_purge(ot_app applet) {
///@todo At present the purge leaves the session-session timing delays intact.
///      Need to determine what the right approach is: either set delays to 0
///      or leave as programmed.
    m2session* next;
    next = session.top;
 8033394:	4b08      	ldr	r3, [pc, #32]	; (80333b8 <session_app_purge+0x24>)
 8033396:	681b      	ldr	r3, [r3, #0]

    while (next < &session.heap[_END]) {
 8033398:	e000      	b.n	803339c <session_app_purge+0x8>
        if (next->applet == applet) {
            next->applet    = &session_applet_null;
            next->netstate  = M2_NETSTATE_SCRAP;
        }
        next++;
 803339a:	330c      	adds	r3, #12
    while (next < &session.heap[_END]) {
 803339c:	4a06      	ldr	r2, [pc, #24]	; (80333b8 <session_app_purge+0x24>)
 803339e:	3234      	adds	r2, #52	; 0x34
 80333a0:	4293      	cmp	r3, r2
 80333a2:	d207      	bcs.n	80333b4 <session_app_purge+0x20>
        if (next->applet == applet) {
 80333a4:	681a      	ldr	r2, [r3, #0]
 80333a6:	4282      	cmp	r2, r0
 80333a8:	d1f7      	bne.n	803339a <session_app_purge+0x6>
            next->applet    = &session_applet_null;
 80333aa:	4a04      	ldr	r2, [pc, #16]	; (80333bc <session_app_purge+0x28>)
 80333ac:	601a      	str	r2, [r3, #0]
            next->netstate  = M2_NETSTATE_SCRAP;
 80333ae:	2204      	movs	r2, #4
 80333b0:	71da      	strb	r2, [r3, #7]
 80333b2:	e7f2      	b.n	803339a <session_app_purge+0x6>
    }
}
 80333b4:	4770      	bx	lr
 80333b6:	46c0      	nop			; (mov r8, r8)
 80333b8:	2000c494 	.word	0x2000c494
 80333bc:	0803329d 	.word	0x0803329d

080333c0 <session_app_isloaded>:


#ifndef EXTF_session_app_isloaded
OT_WEAK ot_bool session_app_isloaded(ot_app applet) {
    m2session* next;
    next = session.top;
 80333c0:	4b08      	ldr	r3, [pc, #32]	; (80333e4 <session_app_isloaded+0x24>)
 80333c2:	681b      	ldr	r3, [r3, #0]

    while ((next->applet != applet) && (next < &session.heap[_END])) {
 80333c4:	e000      	b.n	80333c8 <session_app_isloaded+0x8>
        next++;
 80333c6:	330c      	adds	r3, #12
    while ((next->applet != applet) && (next < &session.heap[_END])) {
 80333c8:	681a      	ldr	r2, [r3, #0]
 80333ca:	4282      	cmp	r2, r0
 80333cc:	d003      	beq.n	80333d6 <session_app_isloaded+0x16>
 80333ce:	4a05      	ldr	r2, [pc, #20]	; (80333e4 <session_app_isloaded+0x24>)
 80333d0:	3234      	adds	r2, #52	; 0x34
 80333d2:	4293      	cmp	r3, r2
 80333d4:	d3f7      	bcc.n	80333c6 <session_app_isloaded+0x6>
    }
    return (ot_bool)(next < &session.heap[_END]);
 80333d6:	4803      	ldr	r0, [pc, #12]	; (80333e4 <session_app_isloaded+0x24>)
 80333d8:	3034      	adds	r0, #52	; 0x34
 80333da:	4283      	cmp	r3, r0
 80333dc:	4180      	sbcs	r0, r0
 80333de:	4240      	negs	r0, r0
}
 80333e0:	4770      	bx	lr
 80333e2:	46c0      	nop			; (mov r8, r8)
 80333e4:	2000c494 	.word	0x2000c494

080333e8 <session_scrap>:
}
#endif


#ifndef EXTF_session_scrap
OT_WEAK void session_scrap(void) {
 80333e8:	b510      	push	{r4, lr}
    if (session.top != &session.heap[_END]) {
 80333ea:	4b08      	ldr	r3, [pc, #32]	; (803340c <session_scrap+0x24>)
 80333ec:	6818      	ldr	r0, [r3, #0]
 80333ee:	3334      	adds	r3, #52	; 0x34
 80333f0:	4298      	cmp	r0, r3
 80333f2:	d009      	beq.n	8033408 <session_scrap+0x20>
        m2session* old_top;
        old_top = session.top++;
 80333f4:	0003      	movs	r3, r0
 80333f6:	330c      	adds	r3, #12
 80333f8:	4a04      	ldr	r2, [pc, #16]	; (803340c <session_scrap+0x24>)
 80333fa:	6013      	str	r3, [r2, #0]

        if (old_top->applet != NULL) {
 80333fc:	6803      	ldr	r3, [r0, #0]
 80333fe:	2b00      	cmp	r3, #0
 8033400:	d002      	beq.n	8033408 <session_scrap+0x20>
            old_top->netstate = M2_NETSTATE_SCRAP;
 8033402:	2204      	movs	r2, #4
 8033404:	71c2      	strb	r2, [r0, #7]
            old_top->applet(old_top);
 8033406:	4798      	blx	r3
        }
    }
}
 8033408:	bd10      	pop	{r4, pc}
 803340a:	46c0      	nop			; (mov r8, r8)
 803340c:	2000c494 	.word	0x2000c494

08033410 <session_pop>:
#ifndef EXTF_session_pop
OT_WEAK void session_pop() {
/// session.top++ will pop a session, but this routine includes protection
/// against less-than-perfect API usage by assuring that session.top is
/// only incremented when in bounds.
    if (session.top != &session.heap[_END])
 8033410:	4b04      	ldr	r3, [pc, #16]	; (8033424 <session_pop+0x14>)
 8033412:	681a      	ldr	r2, [r3, #0]
 8033414:	3334      	adds	r3, #52	; 0x34
 8033416:	429a      	cmp	r2, r3
 8033418:	d002      	beq.n	8033420 <session_pop+0x10>
        session.top++;
 803341a:	320c      	adds	r2, #12
 803341c:	4b01      	ldr	r3, [pc, #4]	; (8033424 <session_pop+0x14>)
 803341e:	601a      	str	r2, [r3, #0]
}
 8033420:	4770      	bx	lr
 8033422:	46c0      	nop			; (mov r8, r8)
 8033424:	2000c494 	.word	0x2000c494

08033428 <session_top>:
#endif


#ifndef EXTF_session_top
OT_WEAK m2session* session_top() {
    return session.top;
 8033428:	4b01      	ldr	r3, [pc, #4]	; (8033430 <session_top+0x8>)
 803342a:	6818      	ldr	r0, [r3, #0]
}
 803342c:	4770      	bx	lr
 803342e:	46c0      	nop			; (mov r8, r8)
 8033430:	2000c494 	.word	0x2000c494

08033434 <session_continue>:
OT_WEAK m2session* session_continue(ot_app applet, ot_u8 next_state, ot_uint wait) {
 8033434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8033436:	0006      	movs	r6, r0
 8033438:	000c      	movs	r4, r1
 803343a:	0017      	movs	r7, r2
    active      = session_top();
 803343c:	f7ff fff4 	bl	8033428 <session_top>
 8033440:	0005      	movs	r5, r0
    netstate    = (active->netstate & 0x0F) | M2_NETSTATE_CONNECTED | next_state;
 8033442:	79c1      	ldrb	r1, [r0, #7]
 8033444:	230e      	movs	r3, #14
 8033446:	400b      	ands	r3, r1
 8033448:	431c      	orrs	r4, r3
 803344a:	2301      	movs	r3, #1
 803344c:	4323      	orrs	r3, r4
 803344e:	b2db      	uxtb	r3, r3
    next = session_extend(applet, /*dll.comm.tc +*/ wait, active->channel, netstate);
 8033450:	7982      	ldrb	r2, [r0, #6]
 8033452:	0039      	movs	r1, r7
 8033454:	0030      	movs	r0, r6
 8033456:	f7ff ff6b 	bl	8033330 <session_extend>
    if (next) {
 803345a:	2800      	cmp	r0, #0
 803345c:	d009      	beq.n	8033472 <session_continue+0x3e>
        next->extra     = active->extra;
 803345e:	7a2b      	ldrb	r3, [r5, #8]
 8033460:	7203      	strb	r3, [r0, #8]
        next->dialog_id = active->dialog_id++;
 8033462:	7a6b      	ldrb	r3, [r5, #9]
 8033464:	1c5a      	adds	r2, r3, #1
 8033466:	726a      	strb	r2, [r5, #9]
 8033468:	7243      	strb	r3, [r0, #9]
        next->subnet    = active->subnet;
 803346a:	7aab      	ldrb	r3, [r5, #10]
 803346c:	7283      	strb	r3, [r0, #10]
        next->flags     = active->flags;
 803346e:	7aeb      	ldrb	r3, [r5, #11]
 8033470:	72c3      	strb	r3, [r0, #11]
}
 8033472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08033474 <session_numfree>:
#endif


#ifndef EXTF_session_numfree
OT_WEAK ot_int session_numfree() {
 8033474:	b510      	push	{r4, lr}
    ot_uint block;
    block   = (ot_uint)((ot_u8*)session.top - (ot_u8*)&session.heap[_1ST]);
 8033476:	4b05      	ldr	r3, [pc, #20]	; (803348c <session_numfree+0x18>)
 8033478:	cb01      	ldmia	r3!, {r0}
 803347a:	1ac0      	subs	r0, r0, r3
 803347c:	b280      	uxth	r0, r0
    block  /= sizeof(m2session);
 803347e:	210c      	movs	r1, #12
 8033480:	f7fc fe4c 	bl	803011c <__udivsi3>
 8033484:	b280      	uxth	r0, r0
    block  -= 1;            //because we always keep one free for extensions
 8033486:	3801      	subs	r0, #1

    return (ot_int)block;
 8033488:	b200      	sxth	r0, r0
}
 803348a:	bd10      	pop	{r4, pc}
 803348c:	2000c494 	.word	0x2000c494

08033490 <session_notempty>:
#endif


#ifndef EXTF_session_notempty
OT_WEAK ot_bool session_notempty() {
    return (session.top < &session.heap[_END]);
 8033490:	4b03      	ldr	r3, [pc, #12]	; (80334a0 <session_notempty+0x10>)
 8033492:	6818      	ldr	r0, [r3, #0]
 8033494:	3334      	adds	r3, #52	; 0x34
 8033496:	4298      	cmp	r0, r3
 8033498:	4180      	sbcs	r0, r0
 803349a:	4240      	negs	r0, r0
}
 803349c:	4770      	bx	lr
 803349e:	46c0      	nop			; (mov r8, r8)
 80334a0:	2000c494 	.word	0x2000c494

080334a4 <session_flush>:
OT_WEAK void session_flush() {
 80334a4:	b510      	push	{r4, lr}
    while (session_notempty()) {
 80334a6:	e002      	b.n	80334ae <session_flush+0xa>
        session.top++;      //session_pop();
 80334a8:	330c      	adds	r3, #12
 80334aa:	4a06      	ldr	r2, [pc, #24]	; (80334c4 <session_flush+0x20>)
 80334ac:	6013      	str	r3, [r2, #0]
    while (session_notempty()) {
 80334ae:	f7ff ffef 	bl	8033490 <session_notempty>
 80334b2:	2800      	cmp	r0, #0
 80334b4:	d004      	beq.n	80334c0 <session_flush+0x1c>
        if (session.top->netstate & M2_NETSTATE_INIT) {
 80334b6:	4b03      	ldr	r3, [pc, #12]	; (80334c4 <session_flush+0x20>)
 80334b8:	681b      	ldr	r3, [r3, #0]
 80334ba:	79da      	ldrb	r2, [r3, #7]
 80334bc:	0712      	lsls	r2, r2, #28
 80334be:	d5f3      	bpl.n	80334a8 <session_flush+0x4>
}
 80334c0:	bd10      	pop	{r4, pc}
 80334c2:	46c0      	nop			; (mov r8, r8)
 80334c4:	2000c494 	.word	0x2000c494

080334c8 <session_follower>:



#ifndef EXTF_session_follower
OT_WEAK m2session* session_follower() {
    if (session.top < &session.heap[_LAST]) {
 80334c8:	4b04      	ldr	r3, [pc, #16]	; (80334dc <session_follower+0x14>)
 80334ca:	6818      	ldr	r0, [r3, #0]
 80334cc:	3328      	adds	r3, #40	; 0x28
 80334ce:	4298      	cmp	r0, r3
 80334d0:	d201      	bcs.n	80334d6 <session_follower+0xe>
        return &session.top[1];
 80334d2:	300c      	adds	r0, #12
    }
    return NULL;
}
 80334d4:	4770      	bx	lr
    return NULL;
 80334d6:	2000      	movs	r0, #0
 80334d8:	e7fc      	b.n	80334d4 <session_follower+0xc>
 80334da:	46c0      	nop			; (mov r8, r8)
 80334dc:	2000c494 	.word	0x2000c494

080334e0 <session_follower_wait>:
#endif


#ifndef EXTF_session_follower_wait
OT_WEAK ot_u16 session_follower_wait() {
    if (session.top < &session.heap[_LAST]) {
 80334e0:	4b04      	ldr	r3, [pc, #16]	; (80334f4 <session_follower_wait+0x14>)
 80334e2:	681a      	ldr	r2, [r3, #0]
 80334e4:	3328      	adds	r3, #40	; 0x28
 80334e6:	429a      	cmp	r2, r3
 80334e8:	d301      	bcc.n	80334ee <session_follower_wait+0xe>
        return session.top[1].counter;
    }
    return 65535;
 80334ea:	4803      	ldr	r0, [pc, #12]	; (80334f8 <session_follower_wait+0x18>)
}
 80334ec:	4770      	bx	lr
        return session.top[1].counter;
 80334ee:	8a10      	ldrh	r0, [r2, #16]
 80334f0:	e7fc      	b.n	80334ec <session_follower_wait+0xc>
 80334f2:	46c0      	nop			; (mov r8, r8)
 80334f4:	2000c494 	.word	0x2000c494
 80334f8:	0000ffff 	.word	0x0000ffff

080334fc <session_netstate>:



#ifndef EXTF_session_netstate
OT_WEAK ot_u8 session_netstate() {
    return session.top->netstate;
 80334fc:	4b01      	ldr	r3, [pc, #4]	; (8033504 <session_netstate+0x8>)
 80334fe:	681b      	ldr	r3, [r3, #0]
 8033500:	79d8      	ldrb	r0, [r3, #7]
}
 8033502:	4770      	bx	lr
 8033504:	2000c494 	.word	0x2000c494

08033508 <sub_opgroup_scinit>:



void sub_opgroup_scinit(void) {
/// This is an SCTP command.  RFU
}
 8033508:	4770      	bx	lr

0803350a <sub_opgroup_sctransport>:



void sub_opgroup_sctransport(void) {
/// This is an SCTP command.  RFU
}
 803350a:	4770      	bx	lr

0803350c <sub_load_charcorrelation>:
/** Protocol File Loading Subroutines <BR>
  * ========================================================================<BR>
  * - Used as the load_function() argument to sub_load_isf()
  */

ot_int sub_load_charcorrelation(ot_int* cursor, ot_u8 data_byte) {
 803350c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ot_int c;
    ot_u8* local_buf;

    /// The datastream is buffered in an unused part of the data-queue.
    /// The LOCAL_U8() macro behaves similar to array nomenclature
    local_buf = &LOCAL_U8(0);
 803350e:	4b1c      	ldr	r3, [pc, #112]	; (8033580 <sub_load_charcorrelation+0x74>)
 8033510:	68de      	ldr	r6, [r3, #12]
 8033512:	881b      	ldrh	r3, [r3, #0]
 8033514:	3b10      	subs	r3, #16
 8033516:	18f6      	adds	r6, r6, r3
    local_buf[*cursor] = data_byte;
 8033518:	2200      	movs	r2, #0
 803351a:	5e83      	ldrsh	r3, [r0, r2]
 803351c:	54f1      	strb	r1, [r6, r3]

    /// If the datastream is *not* fully pre-buffered, return to the caller.
    /// If the datastream is fully pre-buffered, then proceed to correlation.
    if ( *cursor < (m2qp.qtmpl.length-1) ) {
 803351e:	2300      	movs	r3, #0
 8033520:	5ec2      	ldrsh	r2, [r0, r3]
 8033522:	4b18      	ldr	r3, [pc, #96]	; (8033584 <sub_load_charcorrelation+0x78>)
 8033524:	7a5b      	ldrb	r3, [r3, #9]
 8033526:	3b01      	subs	r3, #1
 8033528:	429a      	cmp	r2, r3
 803352a:	db02      	blt.n	8033532 <sub_load_charcorrelation+0x26>
    /// Equality Correlation with data shifting of the buffer after each
    /// comparison operation.  The value c is the comparison score.  It is a
    /// bipolar accumulator, so a non-equality alters the score by -1 and an
    /// equality by +1.  It is implemented as c += (0 or 2) - 1
    else {
        for (i=0, c=0; i<m2qp.qtmpl.length; i++) {
 803352c:	2700      	movs	r7, #0
 803352e:	2300      	movs	r3, #0
 8033530:	e00c      	b.n	803354c <sub_load_charcorrelation+0x40>
        (*cursor)++;
 8033532:	3201      	adds	r2, #1
 8033534:	8002      	strh	r2, [r0, #0]
        return 0;
 8033536:	2000      	movs	r0, #0
 8033538:	e021      	b.n	803357e <sub_load_charcorrelation+0x72>
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 803353a:	2200      	movs	r2, #0
 803353c:	19d2      	adds	r2, r2, r7
 803353e:	b292      	uxth	r2, r2
                   (m2qp.qtmpl.value[i] & m2qp.qtmpl.mask[i]) ) << 1;
            c -= 1;
 8033540:	3a01      	subs	r2, #1
 8033542:	b217      	sxth	r7, r2

            local_buf[i-1] = local_buf[i];
 8033544:	3901      	subs	r1, #1
 8033546:	5474      	strb	r4, [r6, r1]
        for (i=0, c=0; i<m2qp.qtmpl.length; i++) {
 8033548:	3301      	adds	r3, #1
 803354a:	b21b      	sxth	r3, r3
 803354c:	4a0d      	ldr	r2, [pc, #52]	; (8033584 <sub_load_charcorrelation+0x78>)
 803354e:	7a52      	ldrb	r2, [r2, #9]
 8033550:	4293      	cmp	r3, r2
 8033552:	da0b      	bge.n	803356c <sub_load_charcorrelation+0x60>
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 8033554:	0019      	movs	r1, r3
 8033556:	5cf4      	ldrb	r4, [r6, r3]
                   (m2qp.qtmpl.value[i] & m2qp.qtmpl.mask[i]) ) << 1;
 8033558:	4d0a      	ldr	r5, [pc, #40]	; (8033584 <sub_load_charcorrelation+0x78>)
 803355a:	692a      	ldr	r2, [r5, #16]
 803355c:	5cd0      	ldrb	r0, [r2, r3]
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 803355e:	68ea      	ldr	r2, [r5, #12]
 8033560:	5cd2      	ldrb	r2, [r2, r3]
 8033562:	4060      	eors	r0, r4
 8033564:	4210      	tst	r0, r2
 8033566:	d1e8      	bne.n	803353a <sub_load_charcorrelation+0x2e>
 8033568:	2202      	movs	r2, #2
 803356a:	e7e7      	b.n	803353c <sub_load_charcorrelation+0x30>

    /// One parameter of the correlation query is a correlation threshold.  It
    /// occupies the lower 5 bits of the query code.  It is an integer value.
    /// Scores higher than the threshold are passing scores.  The query score
    /// indicates the number of hits the query made on the file data.
    return (c >= (ot_int)(m2qp.qtmpl.code & 0x1F));
 803356c:	4b05      	ldr	r3, [pc, #20]	; (8033584 <sub_load_charcorrelation+0x78>)
 803356e:	7a1a      	ldrb	r2, [r3, #8]
 8033570:	231f      	movs	r3, #31
 8033572:	4013      	ands	r3, r2
 8033574:	17f8      	asrs	r0, r7, #31
 8033576:	2200      	movs	r2, #0
 8033578:	429f      	cmp	r7, r3
 803357a:	4150      	adcs	r0, r2
 803357c:	b200      	sxth	r0, r0
}
 803357e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8033580:	2000cb2c 	.word	0x2000cb2c
 8033584:	2000c4dc 	.word	0x2000c4dc

08033588 <sub_load_comparison>:


ot_int sub_load_comparison(ot_int* cursor, ot_u8 data_byte) {
 8033588:	b530      	push	{r4, r5, lr}
/// Just loads comparison data, from the file system, into the local buffer.
/// Comparison is limited to16 bytes per the Mode 2 Spec.
    LOCAL_U8(*cursor) = data_byte;
 803358a:	4b07      	ldr	r3, [pc, #28]	; (80335a8 <sub_load_comparison+0x20>)
 803358c:	68da      	ldr	r2, [r3, #12]
 803358e:	881b      	ldrh	r3, [r3, #0]
 8033590:	3b10      	subs	r3, #16
 8033592:	2500      	movs	r5, #0
 8033594:	5f44      	ldrsh	r4, [r0, r5]
 8033596:	191b      	adds	r3, r3, r4
 8033598:	54d1      	strb	r1, [r2, r3]
    (*cursor)++;
 803359a:	2200      	movs	r2, #0
 803359c:	5e83      	ldrsh	r3, [r0, r2]
 803359e:	3301      	adds	r3, #1
 80335a0:	8003      	strh	r3, [r0, #0]
    return 0;
}
 80335a2:	2000      	movs	r0, #0
 80335a4:	bd30      	pop	{r4, r5, pc}
 80335a6:	46c0      	nop			; (mov r8, r8)
 80335a8:	2000cb2c 	.word	0x2000cb2c

080335ac <sub_load_return>:


ot_int sub_load_return(ot_int* cursor, ot_u8 data_byte) {
 80335ac:	b510      	push	{r4, lr}
 80335ae:	0004      	movs	r4, r0
/// Just loads file data into the TX queue.
    q_writebyte(&txq, data_byte);
 80335b0:	4804      	ldr	r0, [pc, #16]	; (80335c4 <sub_load_return+0x18>)
 80335b2:	f001 f94e 	bl	8034852 <q_writebyte>
    (*cursor)++;
 80335b6:	2200      	movs	r2, #0
 80335b8:	5ea3      	ldrsh	r3, [r4, r2]
 80335ba:	3301      	adds	r3, #1
 80335bc:	8023      	strh	r3, [r4, #0]
    return 0;
}
 80335be:	2000      	movs	r0, #0
 80335c0:	bd10      	pop	{r4, pc}
 80335c2:	46c0      	nop			; (mov r8, r8)
 80335c4:	2000cb2c 	.word	0x2000cb2c

080335c8 <m2qp_sig_isf>:
OT_WEAK ot_bool m2qp_sig_isf(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 80335c8:	2000      	movs	r0, #0
 80335ca:	4770      	bx	lr

080335cc <sub_opgroup_globalisf>:
void sub_opgroup_globalisf(void) {
 80335cc:	b510      	push	{r4, lr}
    M2QP_CB_ISF();
 80335ce:	4b05      	ldr	r3, [pc, #20]	; (80335e4 <sub_opgroup_globalisf+0x18>)
 80335d0:	781b      	ldrb	r3, [r3, #0]
 80335d2:	210f      	movs	r1, #15
 80335d4:	4019      	ands	r1, r3
 80335d6:	2070      	movs	r0, #112	; 0x70
 80335d8:	4018      	ands	r0, r3
 80335da:	4a03      	ldr	r2, [pc, #12]	; (80335e8 <sub_opgroup_globalisf+0x1c>)
 80335dc:	f7ff fff4 	bl	80335c8 <m2qp_sig_isf>
}
 80335e0:	bd10      	pop	{r4, pc}
 80335e2:	46c0      	nop			; (mov r8, r8)
 80335e4:	2000c4dc 	.word	0x2000c4dc
 80335e8:	2000c464 	.word	0x2000c464

080335ec <sub_opgroup_udp>:
void sub_opgroup_udp(void) {
 80335ec:	b510      	push	{r4, lr}
    rxq.putcursor = rxq.back;
 80335ee:	4b0a      	ldr	r3, [pc, #40]	; (8033618 <sub_opgroup_udp+0x2c>)
 80335f0:	691a      	ldr	r2, [r3, #16]
 80335f2:	609a      	str	r2, [r3, #8]
    status  = alp_parse_message(&m2alp, &m2np.rt.dlog);
 80335f4:	4909      	ldr	r1, [pc, #36]	; (803361c <sub_opgroup_udp+0x30>)
 80335f6:	480a      	ldr	r0, [pc, #40]	; (8033620 <sub_opgroup_udp+0x34>)
 80335f8:	f000 ff2f 	bl	803445a <alp_parse_message>
    if (status == MSG_Null) {
 80335fc:	2800      	cmp	r0, #0
 80335fe:	d000      	beq.n	8033602 <sub_opgroup_udp+0x16>
}
 8033600:	bd10      	pop	{r4, pc}
        M2QP_CB_ISF();
 8033602:	4b08      	ldr	r3, [pc, #32]	; (8033624 <sub_opgroup_udp+0x38>)
 8033604:	781b      	ldrb	r3, [r3, #0]
 8033606:	210f      	movs	r1, #15
 8033608:	4019      	ands	r1, r3
 803360a:	3070      	adds	r0, #112	; 0x70
 803360c:	4018      	ands	r0, r3
 803360e:	4a03      	ldr	r2, [pc, #12]	; (803361c <sub_opgroup_udp+0x30>)
 8033610:	f7ff ffda 	bl	80335c8 <m2qp_sig_isf>
}
 8033614:	e7f4      	b.n	8033600 <sub_opgroup_udp+0x14>
 8033616:	46c0      	nop			; (mov r8, r8)
 8033618:	2000cb18 	.word	0x2000cb18
 803361c:	2000c464 	.word	0x2000c464
 8033620:	2000c4c8 	.word	0x2000c4c8
 8033624:	2000c4dc 	.word	0x2000c4dc

08033628 <m2qp_sig_ctl>:
OT_WEAK ot_bool m2qp_sig_ctl(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 8033628:	2000      	movs	r0, #0
 803362a:	4770      	bx	lr

0803362c <m2qp_sig_a2p>:
OT_WEAK ot_bool m2qp_sig_a2p(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 803362c:	2000      	movs	r0, #0
 803362e:	4770      	bx	lr

08033630 <m2qp_init>:
OT_WEAK void m2qp_init() {
 8033630:	b510      	push	{r4, lr}
    m2qp.cmd.code = 0x1F;
 8033632:	4b04      	ldr	r3, [pc, #16]	; (8033644 <m2qp_init+0x14>)
 8033634:	221f      	movs	r2, #31
 8033636:	701a      	strb	r2, [r3, #0]
    alp_init(&m2alp, &rxq, &txq);
 8033638:	4a03      	ldr	r2, [pc, #12]	; (8033648 <m2qp_init+0x18>)
 803363a:	4904      	ldr	r1, [pc, #16]	; (803364c <m2qp_init+0x1c>)
 803363c:	4804      	ldr	r0, [pc, #16]	; (8033650 <m2qp_init+0x20>)
 803363e:	f000 ff05 	bl	803444c <alp_init>
}
 8033642:	bd10      	pop	{r4, pc}
 8033644:	2000c4dc 	.word	0x2000c4dc
 8033648:	2000cb2c 	.word	0x2000cb2c
 803364c:	2000cb18 	.word	0x2000cb18
 8033650:	2000c4c8 	.word	0x2000c4c8

08033654 <sub_parse_response>:
ot_int sub_parse_response(m2session* active) {
 8033654:	b570      	push	{r4, r5, r6, lr}
    req_cmdcode     = m2qp.cmd.code;
 8033656:	4d17      	ldr	r5, [pc, #92]	; (80336b4 <sub_parse_response+0x60>)
 8033658:	782c      	ldrb	r4, [r5, #0]
    m2qp.cmd.code   = q_readbyte(&rxq);
 803365a:	4817      	ldr	r0, [pc, #92]	; (80336b8 <sub_parse_response+0x64>)
 803365c:	f001 f928 	bl	80348b0 <q_readbyte>
 8033660:	7028      	strb	r0, [r5, #0]
    if (((req_cmdcode ^ m2qp.cmd.code) & 0x0F) == 0) {
 8033662:	4060      	eors	r0, r4
 8033664:	0703      	lsls	r3, r0, #28
 8033666:	d10a      	bne.n	803367e <sub_parse_response+0x2a>
        if (((req_cmdcode & 0x60) == M2TT_REQ_M_INIT) && (q_writespace(&txq) > 48)) {
 8033668:	2360      	movs	r3, #96	; 0x60
 803366a:	4023      	ands	r3, r4
 803366c:	2b40      	cmp	r3, #64	; 0x40
 803366e:	d009      	beq.n	8033684 <sub_parse_response+0x30>
            opgroup_proc[((req_cmdcode>>1) & 7)]();
 8033670:	0864      	lsrs	r4, r4, #1
 8033672:	2307      	movs	r3, #7
 8033674:	401c      	ands	r4, r3
 8033676:	00a4      	lsls	r4, r4, #2
 8033678:	4b10      	ldr	r3, [pc, #64]	; (80336bc <sub_parse_response+0x68>)
 803367a:	58e3      	ldr	r3, [r4, r3]
 803367c:	4798      	blx	r3
    return -1; //(ot_int)test - 1;
 803367e:	2001      	movs	r0, #1
}
 8033680:	4240      	negs	r0, r0
 8033682:	bd70      	pop	{r4, r5, r6, pc}
        if (((req_cmdcode & 0x60) == M2TT_REQ_M_INIT) && (q_writespace(&txq) > 48)) {
 8033684:	480e      	ldr	r0, [pc, #56]	; (80336c0 <sub_parse_response+0x6c>)
 8033686:	f001 f8a0 	bl	80347ca <q_writespace>
 803368a:	2830      	cmp	r0, #48	; 0x30
 803368c:	ddf0      	ble.n	8033670 <sub_parse_response+0x1c>
            txq.getcursor[0]++;
 803368e:	480c      	ldr	r0, [pc, #48]	; (80336c0 <sub_parse_response+0x6c>)
 8033690:	6842      	ldr	r2, [r0, #4]
 8033692:	7813      	ldrb	r3, [r2, #0]
 8033694:	3301      	adds	r3, #1
 8033696:	7013      	strb	r3, [r2, #0]
            q_writestring(&txq, m2np.rt.dlog.value, m2np.rt.dlog.length);
 8033698:	4d0a      	ldr	r5, [pc, #40]	; (80336c4 <sub_parse_response+0x70>)
 803369a:	792a      	ldrb	r2, [r5, #4]
 803369c:	68a9      	ldr	r1, [r5, #8]
 803369e:	f001 f936 	bl	803490e <q_writestring>
            test = (ot_u8)M2QP_CB_A2P();
 80336a2:	1d2a      	adds	r2, r5, #4
 80336a4:	2100      	movs	r1, #0
 80336a6:	2000      	movs	r0, #0
 80336a8:	f7ff ffc0 	bl	803362c <m2qp_sig_a2p>
        if (test) {
 80336ac:	2800      	cmp	r0, #0
 80336ae:	d0e6      	beq.n	803367e <sub_parse_response+0x2a>
 80336b0:	e7de      	b.n	8033670 <sub_parse_response+0x1c>
 80336b2:	46c0      	nop			; (mov r8, r8)
 80336b4:	2000c4dc 	.word	0x2000c4dc
 80336b8:	2000cb18 	.word	0x2000cb18
 80336bc:	080370e4 	.word	0x080370e4
 80336c0:	2000cb2c 	.word	0x2000cb2c
 80336c4:	2000c460 	.word	0x2000c460

080336c8 <sub_parse_control>:
ot_int sub_parse_control(m2session* active) {
 80336c8:	b570      	push	{r4, r5, r6, lr}
    code    = q_readbyte(&rxq);
 80336ca:	4d07      	ldr	r5, [pc, #28]	; (80336e8 <sub_parse_control+0x20>)
 80336cc:	0028      	movs	r0, r5
 80336ce:	f001 f8ef 	bl	80348b0 <q_readbyte>
 80336d2:	0004      	movs	r4, r0
    subcode = q_readbyte(&rxq);
 80336d4:	0028      	movs	r0, r5
 80336d6:	f001 f8eb 	bl	80348b0 <q_readbyte>
 80336da:	0001      	movs	r1, r0
    return (ot_int)M2QP_CB_ERROR(code, subcode);
 80336dc:	4a03      	ldr	r2, [pc, #12]	; (80336ec <sub_parse_control+0x24>)
 80336de:	0020      	movs	r0, r4
 80336e0:	f7ff ffa2 	bl	8033628 <m2qp_sig_ctl>
 80336e4:	b200      	sxth	r0, r0
}
 80336e6:	bd70      	pop	{r4, r5, r6, pc}
 80336e8:	2000cb18 	.word	0x2000cb18
 80336ec:	2000c464 	.word	0x2000c464

080336f0 <sub_renack>:
void sub_renack(ot_int nack) {
 80336f0:	b510      	push	{r4, lr}
    txq.getcursor[-1]  |= 0x10;     //M2QP Nack Bit
 80336f2:	4a08      	ldr	r2, [pc, #32]	; (8033714 <sub_renack+0x24>)
 80336f4:	6853      	ldr	r3, [r2, #4]
 80336f6:	3b01      	subs	r3, #1
 80336f8:	7819      	ldrb	r1, [r3, #0]
 80336fa:	2410      	movs	r4, #16
 80336fc:	4321      	orrs	r1, r4
 80336fe:	7019      	strb	r1, [r3, #0]
    txq.front[3]       |= 1;        //DLL Nack Bit ///@todo wrap into DLL layer
 8033700:	68d1      	ldr	r1, [r2, #12]
 8033702:	78cb      	ldrb	r3, [r1, #3]
 8033704:	2401      	movs	r4, #1
 8033706:	4323      	orrs	r3, r4
 8033708:	70cb      	strb	r3, [r1, #3]
    q_writebyte(&txq, (ot_u8)nack);
 803370a:	b2c1      	uxtb	r1, r0
 803370c:	0010      	movs	r0, r2
 803370e:	f001 f8a0 	bl	8034852 <q_writebyte>
}
 8033712:	bd10      	pop	{r4, pc}
 8033714:	2000cb2c 	.word	0x2000cb2c

08033718 <sub_opgroup_rfu>:
void sub_opgroup_rfu(void) {
 8033718:	b510      	push	{r4, lr}
    sub_renack(1);
 803371a:	2001      	movs	r0, #1
 803371c:	f7ff ffe8 	bl	80336f0 <sub_renack>
}
 8033720:	bd10      	pop	{r4, pc}
	...

08033724 <sub_load_query>:
void sub_load_query(void) {
 8033724:	b570      	push	{r4, r5, r6, lr}
    m2qp.qtmpl.length = q_readbyte(&rxq);
 8033726:	4d0f      	ldr	r5, [pc, #60]	; (8033764 <sub_load_query+0x40>)
 8033728:	0028      	movs	r0, r5
 803372a:	f001 f8c1 	bl	80348b0 <q_readbyte>
 803372e:	4c0e      	ldr	r4, [pc, #56]	; (8033768 <sub_load_query+0x44>)
 8033730:	7260      	strb	r0, [r4, #9]
    m2qp.qtmpl.code   = q_readbyte(&rxq);
 8033732:	0028      	movs	r0, r5
 8033734:	f001 f8bc 	bl	80348b0 <q_readbyte>
 8033738:	7220      	strb	r0, [r4, #8]
    if ((m2qp.qtmpl.code & M2QC_MASKED) != 0) {
 803373a:	b240      	sxtb	r0, r0
 803373c:	2800      	cmp	r0, #0
 803373e:	db09      	blt.n	8033754 <sub_load_query+0x30>
        m2qp.qtmpl.mask = (ot_u8*)fixed_mask;
 8033740:	4b09      	ldr	r3, [pc, #36]	; (8033768 <sub_load_query+0x44>)
 8033742:	4a0a      	ldr	r2, [pc, #40]	; (803376c <sub_load_query+0x48>)
 8033744:	60da      	str	r2, [r3, #12]
    m2qp.qtmpl.value  = q_markbyte(&rxq, m2qp.qtmpl.length);
 8033746:	4c08      	ldr	r4, [pc, #32]	; (8033768 <sub_load_query+0x44>)
 8033748:	7a61      	ldrb	r1, [r4, #9]
 803374a:	4806      	ldr	r0, [pc, #24]	; (8033764 <sub_load_query+0x40>)
 803374c:	f001 f87c 	bl	8034848 <q_markbyte>
 8033750:	6120      	str	r0, [r4, #16]
}
 8033752:	bd70      	pop	{r4, r5, r6, pc}
        m2qp.qtmpl.mask = q_markbyte(&rxq, m2qp.qtmpl.length);
 8033754:	4c04      	ldr	r4, [pc, #16]	; (8033768 <sub_load_query+0x44>)
 8033756:	7a61      	ldrb	r1, [r4, #9]
 8033758:	4802      	ldr	r0, [pc, #8]	; (8033764 <sub_load_query+0x40>)
 803375a:	f001 f875 	bl	8034848 <q_markbyte>
 803375e:	60e0      	str	r0, [r4, #12]
 8033760:	e7f1      	b.n	8033746 <sub_load_query+0x22>
 8033762:	46c0      	nop			; (mov r8, r8)
 8033764:	2000cb18 	.word	0x2000cb18
 8033768:	2000c4dc 	.word	0x2000c4dc
 803376c:	080370d4 	.word	0x080370d4

08033770 <m2qp_load_isf>:
                                id_tmpl*    user_id ) {
 8033770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8033772:	46de      	mov	lr, fp
 8033774:	4657      	mov	r7, sl
 8033776:	464e      	mov	r6, r9
 8033778:	4645      	mov	r5, r8
 803377a:	b5e0      	push	{r5, r6, r7, lr}
 803377c:	b085      	sub	sp, #20
 803377e:	0005      	movs	r5, r0
 8033780:	9000      	str	r0, [sp, #0]
 8033782:	0008      	movs	r0, r1
 8033784:	0014      	movs	r4, r2
 8033786:	4699      	mov	r9, r3
 8033788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 803378a:	469a      	mov	sl, r3
    ot_int  j       = 0;
 803378c:	ab02      	add	r3, sp, #8
 803378e:	2200      	movs	r2, #0
 8033790:	805a      	strh	r2, [r3, #2]
    if (is_series) {
 8033792:	2d00      	cmp	r5, #0
 8033794:	d108      	bne.n	80337a8 <m2qp_load_isf+0x38>
        scratch.ubyte[0]    = isf_id;
 8033796:	ab03      	add	r3, sp, #12
 8033798:	7019      	strb	r1, [r3, #0]
        n_files             = 1;
 803379a:	2301      	movs	r3, #1
 803379c:	469b      	mov	fp, r3
    vlFILE* fp_s    = NULL;
 803379e:	2300      	movs	r3, #0
 80337a0:	9301      	str	r3, [sp, #4]
    ot_int  output  = 0;
 80337a2:	2500      	movs	r5, #0
    for (i=0; i<n_files; i++) {
 80337a4:	2700      	movs	r7, #0
 80337a6:	e01f      	b.n	80337e8 <m2qp_load_isf+0x78>
        fp_s = ISS_open( isf_id, VL_ACCESS_R, user_id );
 80337a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80337aa:	2124      	movs	r1, #36	; 0x24
 80337ac:	f001 fbed 	bl	8034f8a <ISS_open>
 80337b0:	9001      	str	r0, [sp, #4]
        if (fp_s == NULL) {
 80337b2:	2800      	cmp	r0, #0
 80337b4:	d100      	bne.n	80337b8 <m2qp_load_isf+0x48>
 80337b6:	e06e      	b.n	8033896 <m2qp_load_isf+0x126>
        n_files = fp_s->length;
 80337b8:	2208      	movs	r2, #8
 80337ba:	5e83      	ldrsh	r3, [r0, r2]
 80337bc:	469b      	mov	fp, r3
 80337be:	e7f0      	b.n	80337a2 <m2qp_load_isf+0x32>
        fp_f = ISF_open( scratch.ubyte[align], VL_ACCESS_R, user_id );
 80337c0:	ab03      	add	r3, sp, #12
 80337c2:	5d98      	ldrb	r0, [r3, r6]
 80337c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80337c6:	2124      	movs	r1, #36	; 0x24
 80337c8:	f001 fbe7 	bl	8034f9a <ISF_open>
 80337cc:	1e06      	subs	r6, r0, #0
        if (fp_f == NULL) {
 80337ce:	d01b      	beq.n	8033808 <m2qp_load_isf+0x98>
        offset -= fp_f->length;
 80337d0:	8903      	ldrh	r3, [r0, #8]
 80337d2:	1ae3      	subs	r3, r4, r3
 80337d4:	b21a      	sxth	r2, r3
 80337d6:	4690      	mov	r8, r2
        if (offset < 0) {
 80337d8:	041b      	lsls	r3, r3, #16
 80337da:	d41a      	bmi.n	8033812 <m2qp_load_isf+0xa2>
        vl_close(fp_f);
 80337dc:	0030      	movs	r0, r6
 80337de:	f001 fb95 	bl	8034f0c <vl_close>
    for (i=0; i<n_files; i++) {
 80337e2:	3701      	adds	r7, #1
 80337e4:	b23f      	sxth	r7, r7
 80337e6:	4644      	mov	r4, r8
 80337e8:	455f      	cmp	r7, fp
 80337ea:	da49      	bge.n	8033880 <m2qp_load_isf+0x110>
        ot_u8 align = (i & 1);
 80337ec:	2601      	movs	r6, #1
 80337ee:	403e      	ands	r6, r7
        if ((is_series) && (align == 0)) {
 80337f0:	9b00      	ldr	r3, [sp, #0]
 80337f2:	2b00      	cmp	r3, #0
 80337f4:	d0e4      	beq.n	80337c0 <m2qp_load_isf+0x50>
 80337f6:	2e00      	cmp	r6, #0
 80337f8:	d1e2      	bne.n	80337c0 <m2qp_load_isf+0x50>
            scratch.ushort = vl_read(fp_s, i);
 80337fa:	b2b9      	uxth	r1, r7
 80337fc:	9801      	ldr	r0, [sp, #4]
 80337fe:	f001 fb02 	bl	8034e06 <vl_read>
 8033802:	ab03      	add	r3, sp, #12
 8033804:	8018      	strh	r0, [r3, #0]
 8033806:	e7db      	b.n	80337c0 <m2qp_load_isf+0x50>
            vl_close(fp_s);
 8033808:	9801      	ldr	r0, [sp, #4]
 803380a:	f001 fb7f 	bl	8034f0c <vl_close>
            return -32768;
 803380e:	4d23      	ldr	r5, [pc, #140]	; (803389c <m2qp_load_isf+0x12c>)
 8033810:	e039      	b.n	8033886 <m2qp_load_isf+0x116>
 8033812:	46b8      	mov	r8, r7
 8033814:	464b      	mov	r3, r9
 8033816:	46a9      	mov	r9, r5
 8033818:	4657      	mov	r7, sl
 803381a:	001d      	movs	r5, r3
 803381c:	e00a      	b.n	8033834 <m2qp_load_isf+0xc4>
                output += load_function( &j, ldata.ubyte[align] );
 803381e:	ab02      	add	r3, sp, #8
 8033820:	4652      	mov	r2, sl
 8033822:	5c99      	ldrb	r1, [r3, r2]
 8033824:	1c98      	adds	r0, r3, #2
 8033826:	47b8      	blx	r7
 8033828:	b280      	uxth	r0, r0
 803382a:	4448      	add	r0, r9
 803382c:	b203      	sxth	r3, r0
 803382e:	4699      	mov	r9, r3
                offset++;
 8033830:	3401      	adds	r4, #1
 8033832:	b224      	sxth	r4, r4
            while ( (j < window_bytes) && (offset < fp_f->length) ) {
 8033834:	ab02      	add	r3, sp, #8
 8033836:	3302      	adds	r3, #2
 8033838:	2200      	movs	r2, #0
 803383a:	5e9b      	ldrsh	r3, [r3, r2]
 803383c:	42ab      	cmp	r3, r5
 803383e:	da17      	bge.n	8033870 <m2qp_load_isf+0x100>
 8033840:	8933      	ldrh	r3, [r6, #8]
 8033842:	429c      	cmp	r4, r3
 8033844:	da0c      	bge.n	8033860 <m2qp_load_isf+0xf0>
                align = offset & 1;
 8033846:	2301      	movs	r3, #1
 8033848:	0022      	movs	r2, r4
 803384a:	401a      	ands	r2, r3
 803384c:	4692      	mov	sl, r2
                if (align == 0) {
 803384e:	421c      	tst	r4, r3
 8033850:	d1e5      	bne.n	803381e <m2qp_load_isf+0xae>
                    ldata.ushort = vl_read(fp_f, offset);
 8033852:	b2a1      	uxth	r1, r4
 8033854:	0030      	movs	r0, r6
 8033856:	f001 fad6 	bl	8034e06 <vl_read>
 803385a:	ab02      	add	r3, sp, #8
 803385c:	8018      	strh	r0, [r3, #0]
 803385e:	e7de      	b.n	803381e <m2qp_load_isf+0xae>
            offset = 0;
 8033860:	002b      	movs	r3, r5
 8033862:	464d      	mov	r5, r9
 8033864:	46ba      	mov	sl, r7
 8033866:	4647      	mov	r7, r8
 8033868:	4699      	mov	r9, r3
 803386a:	2300      	movs	r3, #0
 803386c:	4698      	mov	r8, r3
 803386e:	e7b5      	b.n	80337dc <m2qp_load_isf+0x6c>
 8033870:	002b      	movs	r3, r5
 8033872:	464d      	mov	r5, r9
 8033874:	46ba      	mov	sl, r7
 8033876:	4647      	mov	r7, r8
 8033878:	4699      	mov	r9, r3
 803387a:	2300      	movs	r3, #0
 803387c:	4698      	mov	r8, r3
 803387e:	e7ad      	b.n	80337dc <m2qp_load_isf+0x6c>
    vl_close(fp_s);
 8033880:	9801      	ldr	r0, [sp, #4]
 8033882:	f001 fb43 	bl	8034f0c <vl_close>
}
 8033886:	0028      	movs	r0, r5
 8033888:	b005      	add	sp, #20
 803388a:	bcf0      	pop	{r4, r5, r6, r7}
 803388c:	46bb      	mov	fp, r7
 803388e:	46b2      	mov	sl, r6
 8033890:	46a9      	mov	r9, r5
 8033892:	46a0      	mov	r8, r4
 8033894:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -32768;
 8033896:	4d01      	ldr	r5, [pc, #4]	; (803389c <m2qp_load_isf+0x12c>)
 8033898:	e7f5      	b.n	8033886 <m2qp_load_isf+0x116>
 803389a:	46c0      	nop			; (mov r8, r8)
 803389c:	ffff8000 	.word	0xffff8000

080338a0 <m2qp_isf_comp>:
OT_WEAK ot_int m2qp_isf_comp(ot_u8 is_series, id_tmpl* user_id) {
 80338a0:	b570      	push	{r4, r5, r6, lr}
 80338a2:	b082      	sub	sp, #8
 80338a4:	0004      	movs	r4, r0
 80338a6:	000d      	movs	r5, r1
        m2qp.qtmpl.length   = (m2qp.qtmpl.code) ? m2qp.qtmpl.length : 0;
 80338a8:	4b3b      	ldr	r3, [pc, #236]	; (8033998 <m2qp_isf_comp+0xf8>)
 80338aa:	7a1b      	ldrb	r3, [r3, #8]
 80338ac:	2b00      	cmp	r3, #0
 80338ae:	d002      	beq.n	80338b6 <m2qp_isf_comp+0x16>
 80338b0:	4a39      	ldr	r2, [pc, #228]	; (8033998 <m2qp_isf_comp+0xf8>)
 80338b2:	7a51      	ldrb	r1, [r2, #9]
 80338b4:	e000      	b.n	80338b8 <m2qp_isf_comp+0x18>
 80338b6:	0019      	movs	r1, r3
 80338b8:	4a37      	ldr	r2, [pc, #220]	; (8033998 <m2qp_isf_comp+0xf8>)
 80338ba:	7251      	strb	r1, [r2, #9]
                               &sub_load_charcorrelation : &sub_load_comparison;
 80338bc:	065b      	lsls	r3, r3, #25
 80338be:	d522      	bpl.n	8033906 <m2qp_isf_comp+0x66>
 80338c0:	4e36      	ldr	r6, [pc, #216]	; (803399c <m2qp_isf_comp+0xfc>)
        m2qp.qdata.comp_id  = q_readbyte(&rxq);
 80338c2:	4837      	ldr	r0, [pc, #220]	; (80339a0 <m2qp_isf_comp+0x100>)
 80338c4:	f000 fff4 	bl	80348b0 <q_readbyte>
 80338c8:	4b33      	ldr	r3, [pc, #204]	; (8033998 <m2qp_isf_comp+0xf8>)
 80338ca:	7098      	strb	r0, [r3, #2]
        if (is_series)  m2qp.qdata.comp_offset  = q_readshort(&rxq);
 80338cc:	2c00      	cmp	r4, #0
 80338ce:	d01c      	beq.n	803390a <m2qp_isf_comp+0x6a>
 80338d0:	4833      	ldr	r0, [pc, #204]	; (80339a0 <m2qp_isf_comp+0x100>)
 80338d2:	f000 fff2 	bl	80348ba <q_readshort>
 80338d6:	4b30      	ldr	r3, [pc, #192]	; (8033998 <m2qp_isf_comp+0xf8>)
 80338d8:	8098      	strh	r0, [r3, #4]
                                m2qp.qtmpl.length, load_function, user_id );
 80338da:	492f      	ldr	r1, [pc, #188]	; (8033998 <m2qp_isf_comp+0xf8>)
        score   = m2qp_load_isf(is_series, m2qp.qdata.comp_id, m2qp.qdata.comp_offset,
 80338dc:	7a4b      	ldrb	r3, [r1, #9]
 80338de:	2004      	movs	r0, #4
 80338e0:	5e0a      	ldrsh	r2, [r1, r0]
 80338e2:	7889      	ldrb	r1, [r1, #2]
 80338e4:	9501      	str	r5, [sp, #4]
 80338e6:	9600      	str	r6, [sp, #0]
 80338e8:	0020      	movs	r0, r4
 80338ea:	f7ff ff41 	bl	8033770 <m2qp_load_isf>
 80338ee:	1e03      	subs	r3, r0, #0
    if (score < 0) {
 80338f0:	db07      	blt.n	8033902 <m2qp_isf_comp+0x62>
    else if (m2qp.qtmpl.code & M2QC_COR_SEARCH) {
 80338f2:	4a29      	ldr	r2, [pc, #164]	; (8033998 <m2qp_isf_comp+0xf8>)
 80338f4:	7a16      	ldrb	r6, [r2, #8]
 80338f6:	0672      	lsls	r2, r6, #25
 80338f8:	d50d      	bpl.n	8033916 <m2qp_isf_comp+0x76>
        score -= (score == 0);
 80338fa:	4258      	negs	r0, r3
 80338fc:	4158      	adcs	r0, r3
 80338fe:	1a18      	subs	r0, r3, r0
 8033900:	b200      	sxth	r0, r0
}
 8033902:	b002      	add	sp, #8
 8033904:	bd70      	pop	{r4, r5, r6, pc}
                               &sub_load_charcorrelation : &sub_load_comparison;
 8033906:	4e27      	ldr	r6, [pc, #156]	; (80339a4 <m2qp_isf_comp+0x104>)
 8033908:	e7db      	b.n	80338c2 <m2qp_isf_comp+0x22>
        else            m2qp.qdata.comp_offset  = q_readbyte(&rxq);
 803390a:	4825      	ldr	r0, [pc, #148]	; (80339a0 <m2qp_isf_comp+0x100>)
 803390c:	f000 ffd0 	bl	80348b0 <q_readbyte>
 8033910:	4b21      	ldr	r3, [pc, #132]	; (8033998 <m2qp_isf_comp+0xf8>)
 8033912:	8098      	strh	r0, [r3, #4]
 8033914:	e7e1      	b.n	80338da <m2qp_isf_comp+0x3a>
    else if (m2qp.qtmpl.code & M2QC_ALU) {
 8033916:	06b3      	lsls	r3, r6, #26
 8033918:	d5f3      	bpl.n	8033902 <m2qp_isf_comp+0x62>
        for (i=0; i<m2qp.qtmpl.length; i++) {
 803391a:	2300      	movs	r3, #0
 803391c:	4a1e      	ldr	r2, [pc, #120]	; (8033998 <m2qp_isf_comp+0xf8>)
 803391e:	7a52      	ldrb	r2, [r2, #9]
 8033920:	4293      	cmp	r3, r2
 8033922:	da30      	bge.n	8033986 <m2qp_isf_comp+0xe6>
            ot_u8* local_buf = &LOCAL_U8(0);
 8033924:	4a20      	ldr	r2, [pc, #128]	; (80339a8 <m2qp_isf_comp+0x108>)
 8033926:	68d0      	ldr	r0, [r2, #12]
 8033928:	8814      	ldrh	r4, [r2, #0]
 803392a:	3c10      	subs	r4, #16
            j = m2qp.qtmpl.mask[i] & m2qp.qtmpl.value[i];
 803392c:	4a1a      	ldr	r2, [pc, #104]	; (8033998 <m2qp_isf_comp+0xf8>)
 803392e:	68d1      	ldr	r1, [r2, #12]
 8033930:	5ccd      	ldrb	r5, [r1, r3]
 8033932:	6912      	ldr	r2, [r2, #16]
 8033934:	5cd1      	ldrb	r1, [r2, r3]
 8033936:	4029      	ands	r1, r5
            k = m2qp.qtmpl.mask[i] & local_buf[i];
 8033938:	1900      	adds	r0, r0, r4
 803393a:	5cc2      	ldrb	r2, [r0, r3]
 803393c:	402a      	ands	r2, r5
            if (j != k) {
 803393e:	4291      	cmp	r1, r2
 8033940:	d102      	bne.n	8033948 <m2qp_isf_comp+0xa8>
        for (i=0; i<m2qp.qtmpl.length; i++) {
 8033942:	3301      	adds	r3, #1
 8033944:	b21b      	sxth	r3, r3
 8033946:	e7e9      	b.n	803391c <m2qp_isf_comp+0x7c>
                switch (m2qp.qtmpl.code & 0x1F) {
 8033948:	231f      	movs	r3, #31
 803394a:	401e      	ands	r6, r3
 803394c:	2e03      	cmp	r6, #3
 803394e:	d808      	bhi.n	8033962 <m2qp_isf_comp+0xc2>
 8033950:	2e02      	cmp	r6, #2
 8033952:	d20e      	bcs.n	8033972 <m2qp_isf_comp+0xd2>
 8033954:	2e00      	cmp	r6, #0
 8033956:	d002      	beq.n	803395e <m2qp_isf_comp+0xbe>
                    case 1: return -1;                  // ==
 8033958:	2001      	movs	r0, #1
 803395a:	4240      	negs	r0, r0
 803395c:	e7d1      	b.n	8033902 <m2qp_isf_comp+0x62>
                switch (m2qp.qtmpl.code & 0x1F) {
 803395e:	2000      	movs	r0, #0
 8033960:	e7cf      	b.n	8033902 <m2qp_isf_comp+0x62>
 8033962:	3e04      	subs	r6, #4
 8033964:	b2f6      	uxtb	r6, r6
 8033966:	2e01      	cmp	r6, #1
 8033968:	d812      	bhi.n	8033990 <m2qp_isf_comp+0xf0>
                    case 5: return (j > k) - 1;         // >, >=
 803396a:	4291      	cmp	r1, r2
 803396c:	dd08      	ble.n	8033980 <m2qp_isf_comp+0xe0>
 803396e:	2000      	movs	r0, #0
 8033970:	e7c7      	b.n	8033902 <m2qp_isf_comp+0x62>
                    case 3: return (j < k) - 1;         // <, <=
 8033972:	4291      	cmp	r1, r2
 8033974:	da01      	bge.n	803397a <m2qp_isf_comp+0xda>
 8033976:	2000      	movs	r0, #0
 8033978:	e7c3      	b.n	8033902 <m2qp_isf_comp+0x62>
 803397a:	2001      	movs	r0, #1
 803397c:	4240      	negs	r0, r0
 803397e:	e7c0      	b.n	8033902 <m2qp_isf_comp+0x62>
                    case 5: return (j > k) - 1;         // >, >=
 8033980:	2001      	movs	r0, #1
 8033982:	4240      	negs	r0, r0
 8033984:	e7bd      	b.n	8033902 <m2qp_isf_comp+0x62>
        return ((ot_int)m2qp.qtmpl.code & 1) - 1;
 8033986:	2001      	movs	r0, #1
 8033988:	4006      	ands	r6, r0
 803398a:	3e01      	subs	r6, #1
 803398c:	b230      	sxth	r0, r6
 803398e:	e7b8      	b.n	8033902 <m2qp_isf_comp+0x62>
                    default: return -1;
 8033990:	2001      	movs	r0, #1
 8033992:	4240      	negs	r0, r0
 8033994:	e7b5      	b.n	8033902 <m2qp_isf_comp+0x62>
 8033996:	46c0      	nop			; (mov r8, r8)
 8033998:	2000c4dc 	.word	0x2000c4dc
 803399c:	0803350d 	.word	0x0803350d
 80339a0:	2000cb18 	.word	0x2000cb18
 80339a4:	08033589 	.word	0x08033589
 80339a8:	2000cb2c 	.word	0x2000cb2c

080339ac <sub_process_query>:
ot_int sub_process_query(m2session* active) {
 80339ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80339ae:	0004      	movs	r4, r0
    ot_u8 cmd_type = m2qp.cmd.code & 0x70;
 80339b0:	4b26      	ldr	r3, [pc, #152]	; (8033a4c <sub_process_query+0xa0>)
 80339b2:	781e      	ldrb	r6, [r3, #0]
 80339b4:	2370      	movs	r3, #112	; 0x70
 80339b6:	4033      	ands	r3, r6
    if (cmd_type > M2TT_REQ_M_INIT) {     ///@todo future update code
 80339b8:	2b40      	cmp	r3, #64	; 0x40
 80339ba:	d915      	bls.n	80339e8 <sub_process_query+0x3c>
        ot_int  number_of_acks  = (ot_int)q_readbyte(&rxq);
 80339bc:	4824      	ldr	r0, [pc, #144]	; (8033a50 <sub_process_query+0xa4>)
 80339be:	f000 ff77 	bl	80348b0 <q_readbyte>
 80339c2:	b205      	sxth	r5, r0
            id_test = m2np_idcmp(m2np.rt.dlog.length, q_markbyte(&rxq, m2np.rt.dlog.length));
 80339c4:	4b23      	ldr	r3, [pc, #140]	; (8033a54 <sub_process_query+0xa8>)
 80339c6:	791f      	ldrb	r7, [r3, #4]
 80339c8:	0039      	movs	r1, r7
 80339ca:	4821      	ldr	r0, [pc, #132]	; (8033a50 <sub_process_query+0xa4>)
 80339cc:	f000 ff3c 	bl	8034848 <q_markbyte>
 80339d0:	0001      	movs	r1, r0
 80339d2:	0038      	movs	r0, r7
 80339d4:	f7ff f9a6 	bl	8032d24 <m2np_idcmp>
            number_of_acks--;
 80339d8:	1e6b      	subs	r3, r5, #1
 80339da:	b21d      	sxth	r5, r3
        while ((number_of_acks >= 0) && (id_test == False));
 80339dc:	041b      	lsls	r3, r3, #16
 80339de:	d401      	bmi.n	80339e4 <sub_process_query+0x38>
 80339e0:	2800      	cmp	r0, #0
 80339e2:	d0ef      	beq.n	80339c4 <sub_process_query+0x18>
        if (number_of_acks != 0) {
 80339e4:	2d00      	cmp	r5, #0
 80339e6:	d129      	bne.n	8033a3c <sub_process_query+0x90>
    sub_load_query();
 80339e8:	f7ff fe9c 	bl	8033724 <sub_load_query>
    if (cmd_type & M2TT_REQ_M) {  ///@todo future update code
 80339ec:	0673      	lsls	r3, r6, #25
 80339ee:	d51d      	bpl.n	8033a2c <sub_process_query+0x80>
        local_ptr       = rxq.getcursor;
 80339f0:	4e17      	ldr	r6, [pc, #92]	; (8033a50 <sub_process_query+0xa4>)
 80339f2:	6877      	ldr	r7, [r6, #4]
        query_size      = q_readbyte(&rxq);                 //token
 80339f4:	0030      	movs	r0, r6
 80339f6:	f000 ff5b 	bl	80348b0 <q_readbyte>
 80339fa:	0005      	movs	r5, r0
        query_size    <<= ((q_readbyte(&rxq) & 0x80) != 0);  //mask
 80339fc:	0030      	movs	r0, r6
 80339fe:	f000 ff57 	bl	80348b0 <q_readbyte>
 8033a02:	b240      	sxtb	r0, r0
 8033a04:	0fc0      	lsrs	r0, r0, #31
 8033a06:	4085      	lsls	r5, r0
 8033a08:	b22d      	sxth	r5, r5
        rxq.getcursor  += query_size;
 8033a0a:	6873      	ldr	r3, [r6, #4]
 8033a0c:	469c      	mov	ip, r3
 8033a0e:	4465      	add	r5, ip
 8033a10:	6075      	str	r5, [r6, #4]
        if (m2qp_isf_comp((m2qp.cmd.code & 1), &m2np.rt.dlog) < 0) {
 8033a12:	4b0e      	ldr	r3, [pc, #56]	; (8033a4c <sub_process_query+0xa0>)
 8033a14:	781b      	ldrb	r3, [r3, #0]
 8033a16:	2001      	movs	r0, #1
 8033a18:	4018      	ands	r0, r3
 8033a1a:	490f      	ldr	r1, [pc, #60]	; (8033a58 <sub_process_query+0xac>)
 8033a1c:	f7ff ff40 	bl	80338a0 <m2qp_isf_comp>
 8033a20:	2800      	cmp	r0, #0
 8033a22:	db0b      	blt.n	8033a3c <sub_process_query+0x90>
        rxq.getcursor   = local_ptr;
 8033a24:	4b0a      	ldr	r3, [pc, #40]	; (8033a50 <sub_process_query+0xa4>)
 8033a26:	605f      	str	r7, [r3, #4]
        sub_load_query();
 8033a28:	f7ff fe7c 	bl	8033724 <sub_load_query>
    return m2qp_isf_comp((m2qp.cmd.code & 1), &m2np.rt.dlog);
 8033a2c:	4b07      	ldr	r3, [pc, #28]	; (8033a4c <sub_process_query+0xa0>)
 8033a2e:	781b      	ldrb	r3, [r3, #0]
 8033a30:	2001      	movs	r0, #1
 8033a32:	4018      	ands	r0, r3
 8033a34:	4908      	ldr	r1, [pc, #32]	; (8033a58 <sub_process_query+0xac>)
 8033a36:	f7ff ff33 	bl	80338a0 <m2qp_isf_comp>
}
 8033a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    active->flags &= ~M2FI_LISTEN;
 8033a3c:	7ae2      	ldrb	r2, [r4, #11]
 8033a3e:	237f      	movs	r3, #127	; 0x7f
 8033a40:	4013      	ands	r3, r2
 8033a42:	72e3      	strb	r3, [r4, #11]
    return -1;
 8033a44:	2001      	movs	r0, #1
 8033a46:	4240      	negs	r0, r0
 8033a48:	e7f7      	b.n	8033a3a <sub_process_query+0x8e>
 8033a4a:	46c0      	nop			; (mov r8, r8)
 8033a4c:	2000c4dc 	.word	0x2000c4dc
 8033a50:	2000cb18 	.word	0x2000cb18
 8033a54:	2000c460 	.word	0x2000c460
 8033a58:	2000c464 	.word	0x2000c464

08033a5c <sub_parse_request>:
ot_int sub_parse_request(m2session* active) {
 8033a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8033a5e:	0004      	movs	r4, r0
    active->netstate      &= ~M2_NETSTATE_TMASK;
 8033a60:	79c3      	ldrb	r3, [r0, #7]
 8033a62:	2270      	movs	r2, #112	; 0x70
 8033a64:	4393      	bics	r3, r2
 8033a66:	71c3      	strb	r3, [r0, #7]
    m2qp.cmd.code           = q_readbyte(&rxq);
 8033a68:	4837      	ldr	r0, [pc, #220]	; (8033b48 <sub_parse_request+0xec>)
 8033a6a:	f000 ff21 	bl	80348b0 <q_readbyte>
 8033a6e:	4b37      	ldr	r3, [pc, #220]	; (8033b4c <sub_parse_request+0xf0>)
 8033a70:	7018      	strb	r0, [r3, #0]
    m2qp.cmd.ext            = (m2qp.cmd.code & 0x80) ? q_readbyte(&rxq) : 0;
 8033a72:	b240      	sxtb	r0, r0
 8033a74:	2800      	cmp	r0, #0
 8033a76:	db33      	blt.n	8033ae0 <sub_parse_request+0x84>
 8033a78:	2300      	movs	r3, #0
 8033a7a:	4a34      	ldr	r2, [pc, #208]	; (8033b4c <sub_parse_request+0xf0>)
 8033a7c:	7053      	strb	r3, [r2, #1]
    dll.comm.redundants     = 1;
 8033a7e:	4e34      	ldr	r6, [pc, #208]	; (8033b50 <sub_parse_request+0xf4>)
 8033a80:	212f      	movs	r1, #47	; 0x2f
 8033a82:	2001      	movs	r0, #1
 8033a84:	5470      	strb	r0, [r6, r1]
    dll.comm.csmaca_params  = m2qp.cmd.ext & (M2_CSMACA_CAMASK | M2_CSMACA_NOCSMA);
 8033a86:	303b      	adds	r0, #59	; 0x3b
 8033a88:	4003      	ands	r3, r0
 8033a8a:	3901      	subs	r1, #1
 8033a8c:	5473      	strb	r3, [r6, r1]
    dll.comm.csmaca_params |= m2qp.cmd.code & M2_CSMACA_ARBMASK;
 8033a8e:	7815      	ldrb	r5, [r2, #0]
 8033a90:	7812      	ldrb	r2, [r2, #0]
 8033a92:	b252      	sxtb	r2, r2
 8033a94:	3004      	adds	r0, #4
 8033a96:	4010      	ands	r0, r2
 8033a98:	4318      	orrs	r0, r3
 8033a9a:	5470      	strb	r0, [r6, r1]
    cmd_opcode              = m2qp.cmd.code & M2OP_MASK;
 8033a9c:	230f      	movs	r3, #15
 8033a9e:	401d      	ands	r5, r3
    {   ot_u8 timeout_code  = q_readbyte(&rxq);
 8033aa0:	4829      	ldr	r0, [pc, #164]	; (8033b48 <sub_parse_request+0xec>)
 8033aa2:	f000 ff05 	bl	80348b0 <q_readbyte>
 8033aa6:	0007      	movs	r7, r0
        dll.comm.rx_timeout = otutils_calc_timeout(timeout_code);   // original contention period
 8033aa8:	f000 ff77 	bl	803499a <otutils_calc_timeout>
 8033aac:	62b0      	str	r0, [r6, #40]	; 0x28
        dll.comm.tc         = dll.comm.rx_timeout;                  // contention period counter
 8033aae:	6230      	str	r0, [r6, #32]
        if (timeout_code & 0x80) {
 8033ab0:	063b      	lsls	r3, r7, #24
 8033ab2:	d41a      	bmi.n	8033aea <sub_parse_request+0x8e>
            dll.comm.tx_channels    = 1;
 8033ab4:	4b26      	ldr	r3, [pc, #152]	; (8033b50 <sub_parse_request+0xf4>)
 8033ab6:	2230      	movs	r2, #48	; 0x30
 8033ab8:	2101      	movs	r1, #1
 8033aba:	5499      	strb	r1, [r3, r2]
            dll.comm.tx_chanlist    = &dll.comm.scratch[0];
 8033abc:	001a      	movs	r2, r3
 8033abe:	322c      	adds	r2, #44	; 0x2c
 8033ac0:	635a      	str	r2, [r3, #52]	; 0x34
            dll.comm.scratch[0]     = active->channel;
 8033ac2:	79a1      	ldrb	r1, [r4, #6]
 8033ac4:	222c      	movs	r2, #44	; 0x2c
 8033ac6:	5499      	strb	r1, [r3, r2]
    if ((m2qp.cmd.code & 0x70) > M2TT_REQ_UB) {
 8033ac8:	4b20      	ldr	r3, [pc, #128]	; (8033b4c <sub_parse_request+0xf0>)
 8033aca:	781a      	ldrb	r2, [r3, #0]
 8033acc:	2370      	movs	r3, #112	; 0x70
 8033ace:	4013      	ands	r3, r2
 8033ad0:	2b20      	cmp	r3, #32
 8033ad2:	d917      	bls.n	8033b04 <sub_parse_request+0xa8>
        score = sub_process_query(active);
 8033ad4:	0020      	movs	r0, r4
 8033ad6:	f7ff ff69 	bl	80339ac <sub_process_query>
 8033ada:	1e06      	subs	r6, r0, #0
    if (score >= 0) {
 8033adc:	da13      	bge.n	8033b06 <sub_parse_request+0xaa>
 8033ade:	e022      	b.n	8033b26 <sub_parse_request+0xca>
    m2qp.cmd.ext            = (m2qp.cmd.code & 0x80) ? q_readbyte(&rxq) : 0;
 8033ae0:	4819      	ldr	r0, [pc, #100]	; (8033b48 <sub_parse_request+0xec>)
 8033ae2:	f000 fee5 	bl	80348b0 <q_readbyte>
 8033ae6:	0003      	movs	r3, r0
 8033ae8:	e7c7      	b.n	8033a7a <sub_parse_request+0x1e>
            dll.comm.tx_channels    = q_readbyte(&rxq);
 8033aea:	4f17      	ldr	r7, [pc, #92]	; (8033b48 <sub_parse_request+0xec>)
 8033aec:	0038      	movs	r0, r7
 8033aee:	f000 fedf 	bl	80348b0 <q_readbyte>
 8033af2:	4e17      	ldr	r6, [pc, #92]	; (8033b50 <sub_parse_request+0xf4>)
 8033af4:	2330      	movs	r3, #48	; 0x30
 8033af6:	54f0      	strb	r0, [r6, r3]
            dll.comm.tx_chanlist    = q_markbyte(&rxq, dll.comm.tx_channels);
 8033af8:	b201      	sxth	r1, r0
 8033afa:	0038      	movs	r0, r7
 8033afc:	f000 fea4 	bl	8034848 <q_markbyte>
 8033b00:	6370      	str	r0, [r6, #52]	; 0x34
 8033b02:	e7e1      	b.n	8033ac8 <sub_parse_request+0x6c>
    ot_int  score   = 0;
 8033b04:	2600      	movs	r6, #0
        q_empty(&txq); // Flush TX ot_queue
 8033b06:	4813      	ldr	r0, [pc, #76]	; (8033b54 <sub_parse_request+0xf8>)
 8033b08:	f000 fe7b 	bl	8034802 <q_empty>
        if (m2qp.cmd.ext & M2CE_NORESP) {
 8033b0c:	4b0f      	ldr	r3, [pc, #60]	; (8033b4c <sub_parse_request+0xf0>)
 8033b0e:	785b      	ldrb	r3, [r3, #1]
 8033b10:	079b      	lsls	r3, r3, #30
 8033b12:	d50a      	bpl.n	8033b2a <sub_parse_request+0xce>
            active->netstate |= M2_NETSTATE_SCRAP;
 8033b14:	79e3      	ldrb	r3, [r4, #7]
 8033b16:	2204      	movs	r2, #4
 8033b18:	4313      	orrs	r3, r2
 8033b1a:	71e3      	strb	r3, [r4, #7]
        opgroup_proc[((cmd_opcode>>1) & 7)]();
 8033b1c:	086d      	lsrs	r5, r5, #1
 8033b1e:	00ad      	lsls	r5, r5, #2
 8033b20:	4b0d      	ldr	r3, [pc, #52]	; (8033b58 <sub_parse_request+0xfc>)
 8033b22:	58eb      	ldr	r3, [r5, r3]
 8033b24:	4798      	blx	r3
}
 8033b26:	0030      	movs	r0, r6
 8033b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            active->netstate |= M2_NETSTATE_RESPTX;
 8033b2a:	79e3      	ldrb	r3, [r4, #7]
 8033b2c:	2210      	movs	r2, #16
 8033b2e:	4313      	orrs	r3, r2
 8033b30:	71e3      	strb	r3, [r4, #7]
            m2np_header(active, 0, M2FI_FRDIALOG); ///@todo Future Update Code, Can use 0 in addressing for Response
 8033b32:	2200      	movs	r2, #0
 8033b34:	2100      	movs	r1, #0
 8033b36:	0020      	movs	r0, r4
 8033b38:	f7ff f88c 	bl	8032c54 <m2np_header>
            q_writebyte(&txq, (M2TT_RESPONSE | cmd_opcode));            // Write Cmd code byte
 8033b3c:	0029      	movs	r1, r5
 8033b3e:	4805      	ldr	r0, [pc, #20]	; (8033b54 <sub_parse_request+0xf8>)
 8033b40:	f000 fe87 	bl	8034852 <q_writebyte>
 8033b44:	e7ea      	b.n	8033b1c <sub_parse_request+0xc0>
 8033b46:	46c0      	nop			; (mov r8, r8)
 8033b48:	2000cb18 	.word	0x2000cb18
 8033b4c:	2000c4dc 	.word	0x2000c4dc
 8033b50:	2000c410 	.word	0x2000c410
 8033b54:	2000cb2c 	.word	0x2000cb2c
 8033b58:	080370e4 	.word	0x080370e4

08033b5c <m2qp_parse_frame>:
OT_WEAK ot_int m2qp_parse_frame(m2session* active) {
 8033b5c:	b510      	push	{r4, lr}
    ot_u8 cmd_type = (*rxq.getcursor >> 4) & 7;
 8033b5e:	4b0d      	ldr	r3, [pc, #52]	; (8033b94 <m2qp_parse_frame+0x38>)
 8033b60:	685b      	ldr	r3, [r3, #4]
 8033b62:	781b      	ldrb	r3, [r3, #0]
 8033b64:	091b      	lsrs	r3, r3, #4
 8033b66:	2207      	movs	r2, #7
 8033b68:	0011      	movs	r1, r2
 8033b6a:	4019      	ands	r1, r3
    if (cmd_type == 0)  return sub_parse_response(active);
 8033b6c:	421a      	tst	r2, r3
 8033b6e:	d007      	beq.n	8033b80 <m2qp_parse_frame+0x24>
    if (cmd_type == 1)  return sub_parse_control(active);
 8033b70:	2901      	cmp	r1, #1
 8033b72:	d008      	beq.n	8033b86 <m2qp_parse_frame+0x2a>
    if (active->netstate & M2_NETSTATE_RESP) return -1;
 8033b74:	79c3      	ldrb	r3, [r0, #7]
 8033b76:	06db      	lsls	r3, r3, #27
 8033b78:	d408      	bmi.n	8033b8c <m2qp_parse_frame+0x30>
    return sub_parse_request(active);
 8033b7a:	f7ff ff6f 	bl	8033a5c <sub_parse_request>
}
 8033b7e:	bd10      	pop	{r4, pc}
    if (cmd_type == 0)  return sub_parse_response(active);
 8033b80:	f7ff fd68 	bl	8033654 <sub_parse_response>
 8033b84:	e7fb      	b.n	8033b7e <m2qp_parse_frame+0x22>
    if (cmd_type == 1)  return sub_parse_control(active);
 8033b86:	f7ff fd9f 	bl	80336c8 <sub_parse_control>
 8033b8a:	e7f8      	b.n	8033b7e <m2qp_parse_frame+0x22>
    if (active->netstate & M2_NETSTATE_RESP) return -1;
 8033b8c:	2001      	movs	r0, #1
 8033b8e:	4240      	negs	r0, r0
 8033b90:	e7f5      	b.n	8033b7e <m2qp_parse_frame+0x22>
 8033b92:	46c0      	nop			; (mov r8, r8)
 8033b94:	2000cb18 	.word	0x2000cb18

08033b98 <m2qp_isf_call>:
OT_WEAK ot_int m2qp_isf_call( ot_u8 is_series, ot_queue* input_q, id_tmpl* user_id ) {
 8033b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8033b9a:	46de      	mov	lr, fp
 8033b9c:	4657      	mov	r7, sl
 8033b9e:	464e      	mov	r6, r9
 8033ba0:	4645      	mov	r5, r8
 8033ba2:	b5e0      	push	{r5, r6, r7, lr}
 8033ba4:	b089      	sub	sp, #36	; 0x24
 8033ba6:	0004      	movs	r4, r0
 8033ba8:	9004      	str	r0, [sp, #16]
 8033baa:	000d      	movs	r5, r1
 8033bac:	0017      	movs	r7, r2
    max_bytes   = (ot_int)q_readbyte(input_q);
 8033bae:	0008      	movs	r0, r1
 8033bb0:	f000 fe7e 	bl	80348b0 <q_readbyte>
 8033bb4:	b203      	sxth	r3, r0
 8033bb6:	9303      	str	r3, [sp, #12]
    isf_id      = q_readbyte(input_q);
 8033bb8:	0028      	movs	r0, r5
 8033bba:	f000 fe79 	bl	80348b0 <q_readbyte>
 8033bbe:	4682      	mov	sl, r0
    q_writebyte(&txq, isf_id);
 8033bc0:	0001      	movs	r1, r0
 8033bc2:	4853      	ldr	r0, [pc, #332]	; (8033d10 <m2qp_isf_call+0x178>)
 8033bc4:	f000 fe45 	bl	8034852 <q_writebyte>
    if (is_series) {
 8033bc8:	2c00      	cmp	r4, #0
 8033bca:	d100      	bne.n	8033bce <m2qp_isf_call+0x36>
 8033bcc:	e07c      	b.n	8033cc8 <m2qp_isf_call+0x130>
        fp_s = ISS_open( isf_id, VL_ACCESS_R, user_id );
 8033bce:	003a      	movs	r2, r7
 8033bd0:	2124      	movs	r1, #36	; 0x24
 8033bd2:	4650      	mov	r0, sl
 8033bd4:	f001 f9d9 	bl	8034f8a <ISS_open>
 8033bd8:	4680      	mov	r8, r0
        if (fp_s == NULL) {
 8033bda:	2800      	cmp	r0, #0
 8033bdc:	d100      	bne.n	8033be0 <m2qp_isf_call+0x48>
 8033bde:	e090      	b.n	8033d02 <m2qp_isf_call+0x16a>
        offset = q_readshort(input_q);
 8033be0:	0028      	movs	r0, r5
 8033be2:	f000 fe6a 	bl	80348ba <q_readshort>
 8033be6:	0005      	movs	r5, r0
 8033be8:	b203      	sxth	r3, r0
 8033bea:	469b      	mov	fp, r3
        q_writebyte( &txq, (ot_u8)fp_s->length );
 8033bec:	4643      	mov	r3, r8
 8033bee:	7a19      	ldrb	r1, [r3, #8]
 8033bf0:	4c47      	ldr	r4, [pc, #284]	; (8033d10 <m2qp_isf_call+0x178>)
 8033bf2:	0020      	movs	r0, r4
 8033bf4:	f000 fe2d 	bl	8034852 <q_writebyte>
        q_writeshort(&txq, offset );
 8033bf8:	0029      	movs	r1, r5
 8033bfa:	0020      	movs	r0, r4
 8033bfc:	f000 fe2e 	bl	803485c <q_writeshort>
        clength_ptr     = txq.putcursor;
 8033c00:	68a3      	ldr	r3, [r4, #8]
 8033c02:	9305      	str	r3, [sp, #20]
        txq.putcursor  += 2;
 8033c04:	3302      	adds	r3, #2
 8033c06:	60a3      	str	r3, [r4, #8]
        for (i=0; i<fp_s->length; i++) {
 8033c08:	2300      	movs	r3, #0
    ot_int  total_length = 0;
 8033c0a:	2600      	movs	r6, #0
 8033c0c:	003a      	movs	r2, r7
 8033c0e:	4647      	mov	r7, r8
 8033c10:	4690      	mov	r8, r2
        for (i=0; i<fp_s->length; i++) {
 8033c12:	e00b      	b.n	8033c2c <m2qp_isf_call+0x94>
                scratch.ushort = vl_read(fp_s, i);
 8033c14:	0029      	movs	r1, r5
 8033c16:	0038      	movs	r0, r7
 8033c18:	f001 f8f5 	bl	8034e06 <vl_read>
 8033c1c:	ab07      	add	r3, sp, #28
 8033c1e:	8018      	strh	r0, [r3, #0]
 8033c20:	e00d      	b.n	8033c3e <m2qp_isf_call+0xa6>
            vl_close(fp_f);
 8033c22:	0020      	movs	r0, r4
 8033c24:	f001 f972 	bl	8034f0c <vl_close>
        for (i=0; i<fp_s->length; i++) {
 8033c28:	3501      	adds	r5, #1
 8033c2a:	b22b      	sxth	r3, r5
 8033c2c:	893a      	ldrh	r2, [r7, #8]
 8033c2e:	4293      	cmp	r3, r2
 8033c30:	da1b      	bge.n	8033c6a <m2qp_isf_call+0xd2>
            if ( (i&1) == 0 ) {
 8033c32:	b29d      	uxth	r5, r3
 8033c34:	2201      	movs	r2, #1
 8033c36:	001c      	movs	r4, r3
 8033c38:	4014      	ands	r4, r2
 8033c3a:	4213      	tst	r3, r2
 8033c3c:	d0ea      	beq.n	8033c14 <m2qp_isf_call+0x7c>
            fp_f = ISF_open(scratch.ubyte[i&1], VL_ACCESS_R, user_id);
 8033c3e:	ab07      	add	r3, sp, #28
 8033c40:	5d18      	ldrb	r0, [r3, r4]
 8033c42:	4642      	mov	r2, r8
 8033c44:	2124      	movs	r1, #36	; 0x24
 8033c46:	f001 f9a8 	bl	8034f9a <ISF_open>
 8033c4a:	1e04      	subs	r4, r0, #0
            if (fp_f != NULL) {
 8033c4c:	d0e9      	beq.n	8033c22 <m2qp_isf_call+0x8a>
                q_writebyte(&txq, GET_B0_U16(fp_f->idmod) );
 8033c4e:	7981      	ldrb	r1, [r0, #6]
 8033c50:	4b2f      	ldr	r3, [pc, #188]	; (8033d10 <m2qp_isf_call+0x178>)
 8033c52:	4699      	mov	r9, r3
 8033c54:	0018      	movs	r0, r3
 8033c56:	f000 fdfc 	bl	8034852 <q_writebyte>
                q_writebyte(&txq, (ot_u8)fp_f->length );
 8033c5a:	7a21      	ldrb	r1, [r4, #8]
 8033c5c:	4648      	mov	r0, r9
 8033c5e:	f000 fdf8 	bl	8034852 <q_writebyte>
                total_length += fp_f->length;
 8033c62:	8923      	ldrh	r3, [r4, #8]
 8033c64:	199e      	adds	r6, r3, r6
 8033c66:	b236      	sxth	r6, r6
 8033c68:	e7db      	b.n	8033c22 <m2qp_isf_call+0x8a>
        vl_close(fp_s);
 8033c6a:	4643      	mov	r3, r8
 8033c6c:	46b8      	mov	r8, r7
 8033c6e:	001f      	movs	r7, r3
 8033c70:	4640      	mov	r0, r8
 8033c72:	f001 f94b 	bl	8034f0c <vl_close>
        scratch.ushort  = total_length;
 8033c76:	b2b3      	uxth	r3, r6
 8033c78:	aa07      	add	r2, sp, #28
 8033c7a:	8013      	strh	r3, [r2, #0]
        clength_ptr[0]  = scratch.ubyte[UPPER];
 8033c7c:	0a1b      	lsrs	r3, r3, #8
 8033c7e:	9a05      	ldr	r2, [sp, #20]
 8033c80:	7013      	strb	r3, [r2, #0]
        clength_ptr[1]  = scratch.ubyte[LOWER];
 8033c82:	7056      	strb	r6, [r2, #1]
    scratch.sshort = (txq.back - txq.putcursor);
 8033c84:	4b22      	ldr	r3, [pc, #136]	; (8033d10 <m2qp_isf_call+0x178>)
 8033c86:	691a      	ldr	r2, [r3, #16]
 8033c88:	689b      	ldr	r3, [r3, #8]
 8033c8a:	1ad2      	subs	r2, r2, r3
 8033c8c:	b212      	sxth	r2, r2
 8033c8e:	ab07      	add	r3, sp, #28
 8033c90:	801a      	strh	r2, [r3, #0]
    if (max_bytes > scratch.sshort) {
 8033c92:	9b03      	ldr	r3, [sp, #12]
 8033c94:	429a      	cmp	r2, r3
 8033c96:	db00      	blt.n	8033c9a <m2qp_isf_call+0x102>
    max_bytes   = (ot_int)q_readbyte(input_q);
 8033c98:	001a      	movs	r2, r3
    scratch.sshort = (total_length - offset);
 8033c9a:	465b      	mov	r3, fp
 8033c9c:	1af3      	subs	r3, r6, r3
 8033c9e:	b21b      	sxth	r3, r3
 8033ca0:	a907      	add	r1, sp, #28
 8033ca2:	800b      	strh	r3, [r1, #0]
    if (max_bytes > scratch.sshort) {
 8033ca4:	4293      	cmp	r3, r2
 8033ca6:	db00      	blt.n	8033caa <m2qp_isf_call+0x112>
 8033ca8:	0013      	movs	r3, r2
    return m2qp_load_isf(is_series, isf_id, offset, max_bytes, &sub_load_return, user_id);
 8033caa:	9701      	str	r7, [sp, #4]
 8033cac:	4a19      	ldr	r2, [pc, #100]	; (8033d14 <m2qp_isf_call+0x17c>)
 8033cae:	9200      	str	r2, [sp, #0]
 8033cb0:	465a      	mov	r2, fp
 8033cb2:	4651      	mov	r1, sl
 8033cb4:	9804      	ldr	r0, [sp, #16]
 8033cb6:	f7ff fd5b 	bl	8033770 <m2qp_load_isf>
}
 8033cba:	b009      	add	sp, #36	; 0x24
 8033cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8033cbe:	46bb      	mov	fp, r7
 8033cc0:	46b2      	mov	sl, r6
 8033cc2:	46a9      	mov	r9, r5
 8033cc4:	46a0      	mov	r8, r4
 8033cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        fp_f = ISF_open( isf_id, VL_ACCESS_R, user_id );
 8033cc8:	003a      	movs	r2, r7
 8033cca:	2124      	movs	r1, #36	; 0x24
 8033ccc:	4650      	mov	r0, sl
 8033cce:	f001 f964 	bl	8034f9a <ISF_open>
 8033cd2:	1e04      	subs	r4, r0, #0
        if (fp_f == NULL) {
 8033cd4:	d018      	beq.n	8033d08 <m2qp_isf_call+0x170>
        offset          = q_readbyte(input_q);
 8033cd6:	0028      	movs	r0, r5
 8033cd8:	f000 fdea 	bl	80348b0 <q_readbyte>
 8033cdc:	0001      	movs	r1, r0
 8033cde:	b203      	sxth	r3, r0
 8033ce0:	469b      	mov	fp, r3
        total_length    = fp_f->length;
 8033ce2:	8925      	ldrh	r5, [r4, #8]
 8033ce4:	2308      	movs	r3, #8
 8033ce6:	5ee6      	ldrsh	r6, [r4, r3]
        q_writebyte(&txq, (ot_u8)offset );
 8033ce8:	4b09      	ldr	r3, [pc, #36]	; (8033d10 <m2qp_isf_call+0x178>)
 8033cea:	4698      	mov	r8, r3
 8033cec:	0018      	movs	r0, r3
 8033cee:	f000 fdb0 	bl	8034852 <q_writebyte>
        q_writebyte(&txq, (ot_u8)total_length );
 8033cf2:	b2e9      	uxtb	r1, r5
 8033cf4:	4640      	mov	r0, r8
 8033cf6:	f000 fdac 	bl	8034852 <q_writebyte>
        vl_close(fp_f);
 8033cfa:	0020      	movs	r0, r4
 8033cfc:	f001 f906 	bl	8034f0c <vl_close>
 8033d00:	e7c0      	b.n	8033c84 <m2qp_isf_call+0xec>
            return -2;
 8033d02:	2002      	movs	r0, #2
 8033d04:	4240      	negs	r0, r0
 8033d06:	e7d8      	b.n	8033cba <m2qp_isf_call+0x122>
            return -2;
 8033d08:	2002      	movs	r0, #2
 8033d0a:	4240      	negs	r0, r0
 8033d0c:	e7d5      	b.n	8033cba <m2qp_isf_call+0x122>
 8033d0e:	46c0      	nop			; (mov r8, r8)
 8033d10:	2000cb2c 	.word	0x2000cb2c
 8033d14:	080335ad 	.word	0x080335ad

08033d18 <sub_opgroup_collection>:
void sub_opgroup_collection(void) {
 8033d18:	b510      	push	{r4, lr}
    if ( (*(ot_u16*)&m2qp.cmd & ((0x0070<<8)|M2CE_NORESP)) == 0 ) {
 8033d1a:	4b0a      	ldr	r3, [pc, #40]	; (8033d44 <sub_opgroup_collection+0x2c>)
 8033d1c:	881a      	ldrh	r2, [r3, #0]
 8033d1e:	4b0a      	ldr	r3, [pc, #40]	; (8033d48 <sub_opgroup_collection+0x30>)
 8033d20:	421a      	tst	r2, r3
 8033d22:	d002      	beq.n	8033d2a <sub_opgroup_collection+0x12>
    sub_opgroup_globalisf();
 8033d24:	f7ff fc52 	bl	80335cc <sub_opgroup_globalisf>
}
 8033d28:	bd10      	pop	{r4, pc}
            nack = m2qp_isf_call((m2qp.cmd.code & 1), &rxq, &m2np.rt.dlog);
 8033d2a:	4b06      	ldr	r3, [pc, #24]	; (8033d44 <sub_opgroup_collection+0x2c>)
 8033d2c:	781b      	ldrb	r3, [r3, #0]
 8033d2e:	2001      	movs	r0, #1
 8033d30:	4018      	ands	r0, r3
 8033d32:	4a06      	ldr	r2, [pc, #24]	; (8033d4c <sub_opgroup_collection+0x34>)
 8033d34:	4906      	ldr	r1, [pc, #24]	; (8033d50 <sub_opgroup_collection+0x38>)
 8033d36:	f7ff ff2f 	bl	8033b98 <m2qp_isf_call>
            if (nack != 0) {
 8033d3a:	2800      	cmp	r0, #0
 8033d3c:	d0f2      	beq.n	8033d24 <sub_opgroup_collection+0xc>
                sub_renack(nack);
 8033d3e:	f7ff fcd7 	bl	80336f0 <sub_renack>
 8033d42:	e7ef      	b.n	8033d24 <sub_opgroup_collection+0xc>
 8033d44:	2000c4dc 	.word	0x2000c4dc
 8033d48:	00007002 	.word	0x00007002
 8033d4c:	2000c464 	.word	0x2000c464
 8033d50:	2000cb18 	.word	0x2000cb18

08033d54 <sub_return>:


// Return functions are not handled by the server (ignore)
static ot_int sub_return(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
    return 0;
}
 8033d54:	2000      	movs	r0, #0
 8033d56:	4770      	bx	lr

08033d58 <sub_qnotfull>:
}



/// This is a form of overwrite protection
static ot_bool sub_qnotfull(ot_u8 write, ot_u8 write_size, ot_queue* q) {
 8033d58:	b570      	push	{r4, r5, r6, lr}
 8033d5a:	0005      	movs	r5, r0
 8033d5c:	000c      	movs	r4, r1
 8033d5e:	0010      	movs	r0, r2
    return (ot_bool)((write_size <= q_writespace(q)) || (write == 0));
 8033d60:	f000 fd33 	bl	80347ca <q_writespace>
 8033d64:	4284      	cmp	r4, r0
 8033d66:	dd03      	ble.n	8033d70 <sub_qnotfull+0x18>
 8033d68:	2d00      	cmp	r5, #0
 8033d6a:	d103      	bne.n	8033d74 <sub_qnotfull+0x1c>
 8033d6c:	2001      	movs	r0, #1
 8033d6e:	e000      	b.n	8033d72 <sub_qnotfull+0x1a>
 8033d70:	2001      	movs	r0, #1

    ///@note impl used prior to q_space()
    //return (ot_bool)(((q->putcursor+write_size) < q->back) || (write == 0));
}
 8033d72:	bd70      	pop	{r4, r5, r6, pc}
    return (ot_bool)((write_size <= q_writespace(q)) || (write == 0));
 8033d74:	2000      	movs	r0, #0
 8033d76:	e7fc      	b.n	8033d72 <sub_qnotfull+0x1a>

08033d78 <sub_filerestore>:




/// Not currently supported, always returns "unrestorable" error
static ot_int sub_filerestore(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 8033d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8033d7a:	0005      	movs	r5, r0
 8033d7c:	0016      	movs	r6, r2
 8033d7e:	ab06      	add	r3, sp, #24
 8033d80:	2400      	movs	r4, #0
 8033d82:	5f1c      	ldrsh	r4, [r3, r4]
    ot_int  data_out    = 0;
 8033d84:	2700      	movs	r7, #0
    //vlBLOCK file_block  = ((cmd_in >> 4) & 0x07);

    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8033d86:	2c00      	cmp	r4, #0
 8033d88:	dd18      	ble.n	8033dbc <sub_filerestore+0x44>
 8033d8a:	68ea      	ldr	r2, [r5, #12]
 8033d8c:	2102      	movs	r1, #2
 8033d8e:	0030      	movs	r0, r6
 8033d90:	f7ff ffe2 	bl	8033d58 <sub_qnotfull>
 8033d94:	2800      	cmp	r0, #0
 8033d96:	d011      	beq.n	8033dbc <sub_filerestore+0x44>
        ot_u8   err_code    = 0x03;
        ot_u8   file_id     = q_readbyte(alp->inq);
 8033d98:	68a8      	ldr	r0, [r5, #8]
 8033d9a:	f000 fd89 	bl	80348b0 <q_readbyte>
        data_in            -= 1;
 8033d9e:	3c01      	subs	r4, #1
 8033da0:	b224      	sxth	r4, r4

        if (respond) {
 8033da2:	2e00      	cmp	r6, #0
 8033da4:	d0ef      	beq.n	8033d86 <sub_filerestore+0xe>
            q_writebyte(alp->outq, file_id);
 8033da6:	0001      	movs	r1, r0
 8033da8:	68e8      	ldr	r0, [r5, #12]
 8033daa:	f000 fd52 	bl	8034852 <q_writebyte>
            q_writebyte(alp->outq, err_code);
 8033dae:	2103      	movs	r1, #3
 8033db0:	68e8      	ldr	r0, [r5, #12]
 8033db2:	f000 fd4e 	bl	8034852 <q_writebyte>
            data_out += 2;
 8033db6:	3702      	adds	r7, #2
 8033db8:	b23f      	sxth	r7, r7
 8033dba:	e7e4      	b.n	8033d86 <sub_filerestore+0xe>
        }
    }

    return data_out;
}
 8033dbc:	0038      	movs	r0, r7
 8033dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08033dc0 <sub_filecreate>:
static ot_int sub_filecreate(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
 8033dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8033dc2:	46de      	mov	lr, fp
 8033dc4:	4657      	mov	r7, sl
 8033dc6:	464e      	mov	r6, r9
 8033dc8:	4645      	mov	r5, r8
 8033dca:	b5e0      	push	{r5, r6, r7, lr}
 8033dcc:	b085      	sub	sp, #20
 8033dce:	0004      	movs	r4, r0
 8033dd0:	468b      	mov	fp, r1
 8033dd2:	4690      	mov	r8, r2
 8033dd4:	aa0e      	add	r2, sp, #56	; 0x38
 8033dd6:	2500      	movs	r5, #0
 8033dd8:	5f55      	ldrsh	r5, [r2, r5]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 8033dda:	091b      	lsrs	r3, r3, #4
 8033ddc:	2207      	movs	r2, #7
 8033dde:	401a      	ands	r2, r3
 8033de0:	4692      	mov	sl, r2
    ot_int  data_out    = 0;
 8033de2:	2300      	movs	r3, #0
 8033de4:	4699      	mov	r9, r3
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8033de6:	e002      	b.n	8033dee <sub_filecreate+0x2e>
        vl_close(fp);
 8033de8:	9803      	ldr	r0, [sp, #12]
 8033dea:	f001 f88f 	bl	8034f0c <vl_close>
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8033dee:	2d00      	cmp	r5, #0
 8033df0:	dd33      	ble.n	8033e5a <sub_filecreate+0x9a>
 8033df2:	68e2      	ldr	r2, [r4, #12]
 8033df4:	2102      	movs	r1, #2
 8033df6:	4640      	mov	r0, r8
 8033df8:	f7ff ffae 	bl	8033d58 <sub_qnotfull>
 8033dfc:	2800      	cmp	r0, #0
 8033dfe:	d02c      	beq.n	8033e5a <sub_filecreate+0x9a>
        vlFILE*     fp = NULL;
 8033e00:	2300      	movs	r3, #0
 8033e02:	9303      	str	r3, [sp, #12]
        data_in            -= 6;
 8033e04:	3d06      	subs	r5, #6
 8033e06:	b22d      	sxth	r5, r5
        id                  = q_readbyte(alp->inq);
 8033e08:	68a0      	ldr	r0, [r4, #8]
 8033e0a:	f000 fd51 	bl	80348b0 <q_readbyte>
 8033e0e:	0006      	movs	r6, r0
        mod                 = q_readbyte(alp->inq);
 8033e10:	68a0      	ldr	r0, [r4, #8]
 8033e12:	f000 fd4d 	bl	80348b0 <q_readbyte>
 8033e16:	0007      	movs	r7, r0
        alp->inq->getcursor+= 2;           
 8033e18:	68a2      	ldr	r2, [r4, #8]
 8033e1a:	6853      	ldr	r3, [r2, #4]
 8033e1c:	3302      	adds	r3, #2
 8033e1e:	6053      	str	r3, [r2, #4]
        alloc               = q_readshort(alp->inq);
 8033e20:	68a0      	ldr	r0, [r4, #8]
 8033e22:	f000 fd4a 	bl	80348ba <q_readshort>
        err_code            = vl_new(&fp, file_block, id, mod, alloc, user_id);
 8033e26:	465b      	mov	r3, fp
 8033e28:	9301      	str	r3, [sp, #4]
 8033e2a:	9000      	str	r0, [sp, #0]
 8033e2c:	003b      	movs	r3, r7
 8033e2e:	0032      	movs	r2, r6
 8033e30:	4651      	mov	r1, sl
 8033e32:	a803      	add	r0, sp, #12
 8033e34:	f000 fe80 	bl	8034b38 <vl_new>
 8033e38:	0007      	movs	r7, r0
        if (respond) {
 8033e3a:	4643      	mov	r3, r8
 8033e3c:	2b00      	cmp	r3, #0
 8033e3e:	d0d3      	beq.n	8033de8 <sub_filecreate+0x28>
            q_writebyte(alp->outq, id);
 8033e40:	0031      	movs	r1, r6
 8033e42:	68e0      	ldr	r0, [r4, #12]
 8033e44:	f000 fd05 	bl	8034852 <q_writebyte>
            q_writebyte(alp->outq, err_code);
 8033e48:	0039      	movs	r1, r7
 8033e4a:	68e0      	ldr	r0, [r4, #12]
 8033e4c:	f000 fd01 	bl	8034852 <q_writebyte>
            data_out += 2;
 8033e50:	464b      	mov	r3, r9
 8033e52:	3302      	adds	r3, #2
 8033e54:	b21b      	sxth	r3, r3
 8033e56:	4699      	mov	r9, r3
 8033e58:	e7c6      	b.n	8033de8 <sub_filecreate+0x28>
}
 8033e5a:	4648      	mov	r0, r9
 8033e5c:	b005      	add	sp, #20
 8033e5e:	bcf0      	pop	{r4, r5, r6, r7}
 8033e60:	46bb      	mov	fp, r7
 8033e62:	46b2      	mov	sl, r6
 8033e64:	46a9      	mov	r9, r5
 8033e66:	46a0      	mov	r8, r4
 8033e68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08033e6a <sub_filedelete>:
static ot_int sub_filedelete( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 8033e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8033e6c:	46de      	mov	lr, fp
 8033e6e:	4657      	mov	r7, sl
 8033e70:	4646      	mov	r6, r8
 8033e72:	b5c0      	push	{r6, r7, lr}
 8033e74:	b082      	sub	sp, #8
 8033e76:	0007      	movs	r7, r0
 8033e78:	468b      	mov	fp, r1
 8033e7a:	0016      	movs	r6, r2
 8033e7c:	aa0a      	add	r2, sp, #40	; 0x28
 8033e7e:	2400      	movs	r4, #0
 8033e80:	5f14      	ldrsh	r4, [r2, r4]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 8033e82:	091b      	lsrs	r3, r3, #4
 8033e84:	2207      	movs	r2, #7
 8033e86:	401a      	ands	r2, r3
 8033e88:	4692      	mov	sl, r2
    ot_int  data_out    = 0;
 8033e8a:	2300      	movs	r3, #0
 8033e8c:	4698      	mov	r8, r3
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8033e8e:	2c00      	cmp	r4, #0
 8033e90:	dd21      	ble.n	8033ed6 <sub_filedelete+0x6c>
 8033e92:	68fa      	ldr	r2, [r7, #12]
 8033e94:	2102      	movs	r1, #2
 8033e96:	0030      	movs	r0, r6
 8033e98:	f7ff ff5e 	bl	8033d58 <sub_qnotfull>
 8033e9c:	2800      	cmp	r0, #0
 8033e9e:	d01a      	beq.n	8033ed6 <sub_filedelete+0x6c>
        data_in--;
 8033ea0:	3c01      	subs	r4, #1
 8033ea2:	b224      	sxth	r4, r4
        file_id     = q_readbyte(alp->inq);
 8033ea4:	68b8      	ldr	r0, [r7, #8]
 8033ea6:	f000 fd03 	bl	80348b0 <q_readbyte>
 8033eaa:	0005      	movs	r5, r0
        err_code    = vl_delete(file_block, file_id, user_id);
 8033eac:	465a      	mov	r2, fp
 8033eae:	0001      	movs	r1, r0
 8033eb0:	4650      	mov	r0, sl
 8033eb2:	f000 fea1 	bl	8034bf8 <vl_delete>
 8033eb6:	9001      	str	r0, [sp, #4]
        if (respond) {
 8033eb8:	2e00      	cmp	r6, #0
 8033eba:	d0e8      	beq.n	8033e8e <sub_filedelete+0x24>
            q_writebyte(alp->outq, file_id);
 8033ebc:	0029      	movs	r1, r5
 8033ebe:	68f8      	ldr	r0, [r7, #12]
 8033ec0:	f000 fcc7 	bl	8034852 <q_writebyte>
            q_writebyte(alp->outq, err_code);
 8033ec4:	9901      	ldr	r1, [sp, #4]
 8033ec6:	68f8      	ldr	r0, [r7, #12]
 8033ec8:	f000 fcc3 	bl	8034852 <q_writebyte>
            data_out += 2;
 8033ecc:	4643      	mov	r3, r8
 8033ece:	3302      	adds	r3, #2
 8033ed0:	b21b      	sxth	r3, r3
 8033ed2:	4698      	mov	r8, r3
 8033ed4:	e7db      	b.n	8033e8e <sub_filedelete+0x24>
}
 8033ed6:	4640      	mov	r0, r8
 8033ed8:	b002      	add	sp, #8
 8033eda:	bce0      	pop	{r5, r6, r7}
 8033edc:	46bb      	mov	fp, r7
 8033ede:	46b2      	mov	sl, r6
 8033ee0:	46a8      	mov	r8, r5
 8033ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08033ee4 <sub_fileheaders>:
static ot_int sub_fileheaders( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 8033ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8033ee6:	46d6      	mov	lr, sl
 8033ee8:	464f      	mov	r7, r9
 8033eea:	4646      	mov	r6, r8
 8033eec:	b5c0      	push	{r6, r7, lr}
 8033eee:	b084      	sub	sp, #16
 8033ef0:	0005      	movs	r5, r0
 8033ef2:	0016      	movs	r6, r2
 8033ef4:	aa0c      	add	r2, sp, #48	; 0x30
 8033ef6:	2400      	movs	r4, #0
 8033ef8:	5f14      	ldrsh	r4, [r2, r4]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 8033efa:	091b      	lsrs	r3, r3, #4
 8033efc:	2207      	movs	r2, #7
 8033efe:	401a      	ands	r2, r3
 8033f00:	4691      	mov	r9, r2
    if (respond) {
 8033f02:	2e00      	cmp	r6, #0
 8033f04:	d108      	bne.n	8033f18 <sub_fileheaders+0x34>
    ot_int  data_out    = 0;
 8033f06:	2300      	movs	r3, #0
 8033f08:	4698      	mov	r8, r3
}
 8033f0a:	4640      	mov	r0, r8
 8033f0c:	b004      	add	sp, #16
 8033f0e:	bce0      	pop	{r5, r6, r7}
 8033f10:	46ba      	mov	sl, r7
 8033f12:	46b1      	mov	r9, r6
 8033f14:	46a8      	mov	r8, r5
 8033f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ot_int  data_out    = 0;
 8033f18:	2300      	movs	r3, #0
 8033f1a:	4698      	mov	r8, r3
        while ((data_in > 0) && sub_qnotfull(respond, 6, alp->outq)) {
 8033f1c:	2c00      	cmp	r4, #0
 8033f1e:	ddf4      	ble.n	8033f0a <sub_fileheaders+0x26>
 8033f20:	68ea      	ldr	r2, [r5, #12]
 8033f22:	2106      	movs	r1, #6
 8033f24:	0030      	movs	r0, r6
 8033f26:	f7ff ff17 	bl	8033d58 <sub_qnotfull>
 8033f2a:	2800      	cmp	r0, #0
 8033f2c:	d0ed      	beq.n	8033f0a <sub_fileheaders+0x26>
            data_in--;  // one for the file id
 8033f2e:	3c01      	subs	r4, #1
 8033f30:	b224      	sxth	r4, r4
            allow_output = (ot_bool)(vl_getheader_vaddr(&header, file_block, \
 8033f32:	68a8      	ldr	r0, [r5, #8]
 8033f34:	f000 fcbc 	bl	80348b0 <q_readbyte>
 8033f38:	0002      	movs	r2, r0
 8033f3a:	2300      	movs	r3, #0
 8033f3c:	9300      	str	r3, [sp, #0]
 8033f3e:	3324      	adds	r3, #36	; 0x24
 8033f40:	4649      	mov	r1, r9
 8033f42:	200e      	movs	r0, #14
 8033f44:	4468      	add	r0, sp
 8033f46:	f000 feaf 	bl	8034ca8 <vl_getheader_vaddr>
            if (allow_output) {
 8033f4a:	2800      	cmp	r0, #0
 8033f4c:	d1e6      	bne.n	8033f1c <sub_fileheaders+0x38>
                q_writeshort_be(alp->outq, vworm_read(header + 4)); // id & mod
 8033f4e:	68eb      	ldr	r3, [r5, #12]
 8033f50:	469a      	mov	sl, r3
 8033f52:	270e      	movs	r7, #14
 8033f54:	446f      	add	r7, sp
 8033f56:	8838      	ldrh	r0, [r7, #0]
 8033f58:	3004      	adds	r0, #4
 8033f5a:	b280      	uxth	r0, r0
 8033f5c:	f002 fa5e 	bl	803641c <vworm_read>
 8033f60:	0001      	movs	r1, r0
 8033f62:	4650      	mov	r0, sl
 8033f64:	f000 fc84 	bl	8034870 <q_writeshort_be>
                q_writeshort(alp->outq, vworm_read(header + 0)); // length
 8033f68:	68eb      	ldr	r3, [r5, #12]
 8033f6a:	469a      	mov	sl, r3
 8033f6c:	8838      	ldrh	r0, [r7, #0]
 8033f6e:	f002 fa55 	bl	803641c <vworm_read>
 8033f72:	0001      	movs	r1, r0
 8033f74:	4650      	mov	r0, sl
 8033f76:	f000 fc71 	bl	803485c <q_writeshort>
                q_writeshort(alp->outq, vworm_read(header + 2)); // alloc
 8033f7a:	68eb      	ldr	r3, [r5, #12]
 8033f7c:	469a      	mov	sl, r3
 8033f7e:	8838      	ldrh	r0, [r7, #0]
 8033f80:	3002      	adds	r0, #2
 8033f82:	b280      	uxth	r0, r0
 8033f84:	f002 fa4a 	bl	803641c <vworm_read>
 8033f88:	0001      	movs	r1, r0
 8033f8a:	4650      	mov	r0, sl
 8033f8c:	f000 fc66 	bl	803485c <q_writeshort>
                data_out += 6;
 8033f90:	4643      	mov	r3, r8
 8033f92:	3306      	adds	r3, #6
 8033f94:	b21b      	sxth	r3, r3
 8033f96:	4698      	mov	r8, r3
 8033f98:	e7c0      	b.n	8033f1c <sub_fileheaders+0x38>
	...

08033f9c <sub_filedata>:
static ot_int sub_filedata(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
 8033f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8033f9e:	46de      	mov	lr, fp
 8033fa0:	4657      	mov	r7, sl
 8033fa2:	464e      	mov	r6, r9
 8033fa4:	4645      	mov	r5, r8
 8033fa6:	b5e0      	push	{r5, r6, r7, lr}
 8033fa8:	b093      	sub	sp, #76	; 0x4c
 8033faa:	900c      	str	r0, [sp, #48]	; 0x30
 8033fac:	9108      	str	r1, [sp, #32]
 8033fae:	9209      	str	r2, [sp, #36]	; 0x24
 8033fb0:	aa1c      	add	r2, sp, #112	; 0x70
 8033fb2:	2100      	movs	r1, #0
 8033fb4:	5e52      	ldrsh	r2, [r2, r1]
 8033fb6:	4692      	mov	sl, r2
    ot_bool inc_header  = (ot_bool)((cmd_in & 0x0F) == 0x0C);
 8033fb8:	220f      	movs	r2, #15
 8033fba:	401a      	ands	r2, r3
 8033fbc:	920b      	str	r2, [sp, #44]	; 0x2c
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 8033fbe:	091a      	lsrs	r2, r3, #4
 8033fc0:	2107      	movs	r1, #7
 8033fc2:	4011      	ands	r1, r2
 8033fc4:	9107      	str	r1, [sp, #28]
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 8033fc6:	079a      	lsls	r2, r3, #30
 8033fc8:	d511      	bpl.n	8033fee <sub_filedata+0x52>
 8033fca:	2212      	movs	r2, #18
 8033fcc:	4691      	mov	r9, r2
    ot_u8   insert_mode = (cmd_in & 0x01);
 8033fce:	2201      	movs	r2, #1
 8033fd0:	401a      	ands	r2, r3
 8033fd2:	920d      	str	r2, [sp, #52]	; 0x34
    ot_queue*  inq      = alp->inq;
 8033fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8033fd6:	689f      	ldr	r7, [r3, #8]
    ot_queue*  outq     = alp->outq;
 8033fd8:	68db      	ldr	r3, [r3, #12]
 8033fda:	4698      	mov	r8, r3
    ot_qcur outq_marker = alp->outq->putcursor;
 8033fdc:	689b      	ldr	r3, [r3, #8]
 8033fde:	930f      	str	r3, [sp, #60]	; 0x3c
    vlFILE* fp          = NULL;
 8033fe0:	2300      	movs	r3, #0
 8033fe2:	469b      	mov	fp, r3
    ot_int  data_out    = 0;
 8033fe4:	930a      	str	r3, [sp, #40]	; 0x28
 8033fe6:	4655      	mov	r5, sl
 8033fe8:	46ca      	mov	sl, r9
 8033fea:	46c1      	mov	r9, r8
    while (data_in > 0) {
 8033fec:	e02c      	b.n	8034048 <sub_filedata+0xac>
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 8033fee:	2224      	movs	r2, #36	; 0x24
 8033ff0:	4691      	mov	r9, r2
 8033ff2:	e7ec      	b.n	8033fce <sub_filedata+0x32>
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 8033ff4:	4ba1      	ldr	r3, [pc, #644]	; (803427c <sub_filedata+0x2e0>)
 8033ff6:	9303      	str	r3, [sp, #12]
        err_code    = vl_getheader_vaddr(&header, file_block, file_id, file_mod, user_id);
 8033ff8:	9b08      	ldr	r3, [sp, #32]
 8033ffa:	9300      	str	r3, [sp, #0]
 8033ffc:	4653      	mov	r3, sl
 8033ffe:	9a04      	ldr	r2, [sp, #16]
 8034000:	9907      	ldr	r1, [sp, #28]
 8034002:	200e      	movs	r0, #14
 8034004:	ae0e      	add	r6, sp, #56	; 0x38
 8034006:	46b4      	mov	ip, r6
 8034008:	4460      	add	r0, ip
 803400a:	f000 fe4d 	bl	8034ca8 <vl_getheader_vaddr>
 803400e:	0006      	movs	r6, r0
        file_mod    = ((file_mod & VL_ACCESS_W) != 0);
 8034010:	2312      	movs	r3, #18
 8034012:	4652      	mov	r2, sl
 8034014:	401a      	ands	r2, r3
 8034016:	9205      	str	r2, [sp, #20]
 8034018:	0013      	movs	r3, r2
 803401a:	1e5a      	subs	r2, r3, #1
 803401c:	4193      	sbcs	r3, r2
 803401e:	b2d9      	uxtb	r1, r3
 8034020:	468a      	mov	sl, r1
        if (err_code != 0) {
 8034022:	2800      	cmp	r0, #0
 8034024:	d029      	beq.n	803407a <sub_filedata+0xde>
            app_err = vl_close(fp);
 8034026:	4658      	mov	r0, fp
 8034028:	f000 ff70 	bl	8034f0c <vl_close>
            if ((app_err != 0) && (err_code == 0)) {
 803402c:	2800      	cmp	r0, #0
 803402e:	d002      	beq.n	8034036 <sub_filedata+0x9a>
 8034030:	2e00      	cmp	r6, #0
 8034032:	d100      	bne.n	8034036 <sub_filedata+0x9a>
                err_code = 0x09;    
 8034034:	3609      	adds	r6, #9
        if (respond) {
 8034036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8034038:	2b00      	cmp	r3, #0
 803403a:	d000      	beq.n	803403e <sub_filedata+0xa2>
 803403c:	e0f5      	b.n	803422a <sub_filedata+0x28e>
        data_in -= 5;       // 5 bytes input header
 803403e:	3d05      	subs	r5, #5
 8034040:	b2ad      	uxth	r5, r5
        data_in -= span;    // Bypass data payload
 8034042:	4643      	mov	r3, r8
 8034044:	1aed      	subs	r5, r5, r3
 8034046:	b22d      	sxth	r5, r5
    while (data_in > 0) {
 8034048:	2d00      	cmp	r5, #0
 803404a:	dc00      	bgt.n	803404e <sub_filedata+0xb2>
 803404c:	e0d9      	b.n	8034202 <sub_filedata+0x266>
        file_id     = q_readbyte(inq);
 803404e:	0038      	movs	r0, r7
 8034050:	f000 fc2e 	bl	80348b0 <q_readbyte>
 8034054:	9004      	str	r0, [sp, #16]
        offset      = q_readshort(inq);
 8034056:	0038      	movs	r0, r7
 8034058:	f000 fc2f 	bl	80348ba <q_readshort>
 803405c:	0006      	movs	r6, r0
 803405e:	9006      	str	r0, [sp, #24]
 8034060:	0004      	movs	r4, r0
        span        = q_readshort(inq);
 8034062:	0038      	movs	r0, r7
 8034064:	f000 fc29 	bl	80348ba <q_readshort>
 8034068:	4680      	mov	r8, r0
        lim_check   = (ot_long)offset + (ot_long)span;
 803406a:	1832      	adds	r2, r6, r0
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 803406c:	2380      	movs	r3, #128	; 0x80
 803406e:	025b      	lsls	r3, r3, #9
 8034070:	429a      	cmp	r2, r3
 8034072:	dabf      	bge.n	8033ff4 <sub_filedata+0x58>
 8034074:	b293      	uxth	r3, r2
 8034076:	9303      	str	r3, [sp, #12]
 8034078:	e7be      	b.n	8033ff8 <sub_filedata+0x5c>
        fp = vl_open_file(header);
 803407a:	210e      	movs	r1, #14
 803407c:	ab0e      	add	r3, sp, #56	; 0x38
 803407e:	469c      	mov	ip, r3
 8034080:	4461      	add	r1, ip
 8034082:	8808      	ldrh	r0, [r1, #0]
 8034084:	f000 fe44 	bl	8034d10 <vl_open_file>
 8034088:	4683      	mov	fp, r0
        if (fp == NULL) {
 803408a:	2800      	cmp	r0, #0
 803408c:	d100      	bne.n	8034090 <sub_filedata+0xf4>
 803408e:	e0ca      	b.n	8034226 <sub_filedata+0x28a>
        if (file_mod) {
 8034090:	9b05      	ldr	r3, [sp, #20]
 8034092:	2b00      	cmp	r3, #0
 8034094:	d039      	beq.n	803410a <sub_filedata+0x16e>
            if (offset >= fp->alloc) {
 8034096:	8883      	ldrh	r3, [r0, #4]
 8034098:	9306      	str	r3, [sp, #24]
 803409a:	42a3      	cmp	r3, r4
 803409c:	d801      	bhi.n	80340a2 <sub_filedata+0x106>
                err_code = 0x07;
 803409e:	2607      	movs	r6, #7
 80340a0:	e7c1      	b.n	8034026 <sub_filedata+0x8a>
            if (limit > fp->alloc) {
 80340a2:	9a03      	ldr	r2, [sp, #12]
 80340a4:	4293      	cmp	r3, r2
 80340a6:	d324      	bcc.n	80340f2 <sub_filedata+0x156>
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 80340a8:	9206      	str	r2, [sp, #24]
            if (insert_mode == 0) {
 80340aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80340ac:	2b00      	cmp	r3, #0
 80340ae:	d122      	bne.n	80340f6 <sub_filedata+0x15a>
                fp->length = 0;
 80340b0:	465a      	mov	r2, fp
 80340b2:	8113      	strh	r3, [r2, #8]
 80340b4:	003b      	movs	r3, r7
 80340b6:	4647      	mov	r7, r8
 80340b8:	46b0      	mov	r8, r6
 80340ba:	001e      	movs	r6, r3
            for (; offset<limit; offset+=2, span-=2, data_in-=2) {
 80340bc:	9b06      	ldr	r3, [sp, #24]
 80340be:	429c      	cmp	r4, r3
 80340c0:	d21e      	bcs.n	8034100 <sub_filedata+0x164>
                if (inq->getcursor >= inq->back) {
 80340c2:	6873      	ldr	r3, [r6, #4]
 80340c4:	6932      	ldr	r2, [r6, #16]
 80340c6:	4293      	cmp	r3, r2
 80340c8:	d300      	bcc.n	80340cc <sub_filedata+0x130>
 80340ca:	e097      	b.n	80341fc <sub_filedata+0x260>
                err_code |= vl_write(fp, offset, q_readshort_be(inq));
 80340cc:	0030      	movs	r0, r6
 80340ce:	f000 fbfe 	bl	80348ce <q_readshort_be>
 80340d2:	0002      	movs	r2, r0
 80340d4:	0021      	movs	r1, r4
 80340d6:	4658      	mov	r0, fp
 80340d8:	f000 fe9c 	bl	8034e14 <vl_write>
 80340dc:	4643      	mov	r3, r8
 80340de:	4303      	orrs	r3, r0
 80340e0:	b2db      	uxtb	r3, r3
 80340e2:	4698      	mov	r8, r3
            for (; offset<limit; offset+=2, span-=2, data_in-=2) {
 80340e4:	3402      	adds	r4, #2
 80340e6:	b2a4      	uxth	r4, r4
 80340e8:	3f02      	subs	r7, #2
 80340ea:	b2bf      	uxth	r7, r7
 80340ec:	3d02      	subs	r5, #2
 80340ee:	b22d      	sxth	r5, r5
 80340f0:	e7e4      	b.n	80340bc <sub_filedata+0x120>
                err_code    = 0x08;
 80340f2:	2608      	movs	r6, #8
 80340f4:	e7d9      	b.n	80340aa <sub_filedata+0x10e>
 80340f6:	003b      	movs	r3, r7
 80340f8:	4647      	mov	r7, r8
 80340fa:	46b0      	mov	r8, r6
 80340fc:	001e      	movs	r6, r3
 80340fe:	e7dd      	b.n	80340bc <sub_filedata+0x120>
 8034100:	0033      	movs	r3, r6
 8034102:	4646      	mov	r6, r8
 8034104:	46b8      	mov	r8, r7
 8034106:	001f      	movs	r7, r3
 8034108:	e78d      	b.n	8034026 <sub_filedata+0x8a>
            ot_u8 overhead = 5 << (inc_header != 0);
 803410a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 803410c:	2b0c      	cmp	r3, #12
 803410e:	d029      	beq.n	8034164 <sub_filedata+0x1c8>
 8034110:	2305      	movs	r3, #5
 8034112:	930e      	str	r3, [sp, #56]	; 0x38
            if (overhead >= q_writespace(outq)) {
 8034114:	4648      	mov	r0, r9
 8034116:	f000 fb58 	bl	80347ca <q_writespace>
 803411a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 803411c:	4283      	cmp	r3, r0
 803411e:	da6d      	bge.n	80341fc <sub_filedata+0x260>
            data_out += overhead;
 8034120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8034122:	4694      	mov	ip, r2
 8034124:	4463      	add	r3, ip
 8034126:	b21b      	sxth	r3, r3
 8034128:	930a      	str	r3, [sp, #40]	; 0x28
            if (inc_header) {
 803412a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 803412c:	2b0c      	cmp	r3, #12
 803412e:	d01c      	beq.n	803416a <sub_filedata+0x1ce>
                q_writebyte(outq, (vworm_read(header+4) & 0x00ff) );
 8034130:	230e      	movs	r3, #14
 8034132:	aa0e      	add	r2, sp, #56	; 0x38
 8034134:	4694      	mov	ip, r2
 8034136:	4463      	add	r3, ip
 8034138:	8818      	ldrh	r0, [r3, #0]
 803413a:	3004      	adds	r0, #4
 803413c:	b280      	uxth	r0, r0
 803413e:	f002 f96d 	bl	803641c <vworm_read>
 8034142:	b2c1      	uxtb	r1, r0
 8034144:	4648      	mov	r0, r9
 8034146:	f000 fb84 	bl	8034852 <q_writebyte>
            if (offset >= fp->length) {
 803414a:	465b      	mov	r3, fp
 803414c:	891b      	ldrh	r3, [r3, #8]
 803414e:	42a3      	cmp	r3, r4
 8034150:	d928      	bls.n	80341a4 <sub_filedata+0x208>
            else if (limit > fp->length) {
 8034152:	9a03      	ldr	r2, [sp, #12]
 8034154:	4293      	cmp	r3, r2
 8034156:	d228      	bcs.n	80341aa <sub_filedata+0x20e>
                span    = fp->length - offset;
 8034158:	9a06      	ldr	r2, [sp, #24]
 803415a:	1a9a      	subs	r2, r3, r2
 803415c:	b292      	uxth	r2, r2
 803415e:	4690      	mov	r8, r2
                limit   = fp->length;
 8034160:	9303      	str	r3, [sp, #12]
 8034162:	e022      	b.n	80341aa <sub_filedata+0x20e>
            ot_u8 overhead = 5 << (inc_header != 0);
 8034164:	3b02      	subs	r3, #2
 8034166:	930e      	str	r3, [sp, #56]	; 0x38
 8034168:	e7d4      	b.n	8034114 <sub_filedata+0x178>
                q_writeshort_be(outq, vworm_read(header + 4));
 803416a:	ab0e      	add	r3, sp, #56	; 0x38
 803416c:	89d8      	ldrh	r0, [r3, #14]
 803416e:	3004      	adds	r0, #4
 8034170:	b280      	uxth	r0, r0
 8034172:	f002 f953 	bl	803641c <vworm_read>
 8034176:	0001      	movs	r1, r0
 8034178:	4648      	mov	r0, r9
 803417a:	f000 fb79 	bl	8034870 <q_writeshort_be>
                q_writeshort(outq, vworm_read(header + 0));    // length
 803417e:	ab0e      	add	r3, sp, #56	; 0x38
 8034180:	89d8      	ldrh	r0, [r3, #14]
 8034182:	f002 f94b 	bl	803641c <vworm_read>
 8034186:	0001      	movs	r1, r0
 8034188:	4648      	mov	r0, r9
 803418a:	f000 fb67 	bl	803485c <q_writeshort>
                q_writeshort(outq, vworm_read(header + 2));    // alloc
 803418e:	ab0e      	add	r3, sp, #56	; 0x38
 8034190:	89d8      	ldrh	r0, [r3, #14]
 8034192:	3002      	adds	r0, #2
 8034194:	b280      	uxth	r0, r0
 8034196:	f002 f941 	bl	803641c <vworm_read>
 803419a:	0001      	movs	r1, r0
 803419c:	4648      	mov	r0, r9
 803419e:	f000 fb5d 	bl	803485c <q_writeshort>
 80341a2:	e7d2      	b.n	803414a <sub_filedata+0x1ae>
                limit   = 0;
 80341a4:	2300      	movs	r3, #0
 80341a6:	9303      	str	r3, [sp, #12]
                span    = 0;
 80341a8:	4698      	mov	r8, r3
            q_writeshort(outq, offset);
 80341aa:	9906      	ldr	r1, [sp, #24]
 80341ac:	4648      	mov	r0, r9
 80341ae:	f000 fb55 	bl	803485c <q_writeshort>
            q_writeshort(outq, span);
 80341b2:	4641      	mov	r1, r8
 80341b4:	4648      	mov	r0, r9
 80341b6:	f000 fb51 	bl	803485c <q_writeshort>
            for (; offset<limit; offset+=2, span-=2, data_out+=2) {
 80341ba:	4653      	mov	r3, sl
 80341bc:	9306      	str	r3, [sp, #24]
 80341be:	464b      	mov	r3, r9
 80341c0:	46b9      	mov	r9, r7
 80341c2:	46aa      	mov	sl, r5
 80341c4:	4645      	mov	r5, r8
 80341c6:	46b0      	mov	r8, r6
 80341c8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80341ca:	001f      	movs	r7, r3
 80341cc:	e00d      	b.n	80341ea <sub_filedata+0x24e>
                q_writeshort_be(outq, vl_read(fp, offset));
 80341ce:	0021      	movs	r1, r4
 80341d0:	4658      	mov	r0, fp
 80341d2:	f000 fe18 	bl	8034e06 <vl_read>
 80341d6:	0001      	movs	r1, r0
 80341d8:	0038      	movs	r0, r7
 80341da:	f000 fb49 	bl	8034870 <q_writeshort_be>
            for (; offset<limit; offset+=2, span-=2, data_out+=2) {
 80341de:	3402      	adds	r4, #2
 80341e0:	b2a4      	uxth	r4, r4
 80341e2:	3d02      	subs	r5, #2
 80341e4:	b2ad      	uxth	r5, r5
 80341e6:	3602      	adds	r6, #2
 80341e8:	b236      	sxth	r6, r6
 80341ea:	9b03      	ldr	r3, [sp, #12]
 80341ec:	429c      	cmp	r4, r3
 80341ee:	d210      	bcs.n	8034212 <sub_filedata+0x276>
                if (2 >= q_writespace(outq)) {
 80341f0:	0038      	movs	r0, r7
 80341f2:	f000 faea 	bl	80347ca <q_writespace>
 80341f6:	2802      	cmp	r0, #2
 80341f8:	dce9      	bgt.n	80341ce <sub_filedata+0x232>
 80341fa:	960a      	str	r6, [sp, #40]	; 0x28
    vl_close(fp);
 80341fc:	4658      	mov	r0, fp
 80341fe:	f000 fe85 	bl	8034f0c <vl_close>
}
 8034202:	980a      	ldr	r0, [sp, #40]	; 0x28
 8034204:	b013      	add	sp, #76	; 0x4c
 8034206:	bcf0      	pop	{r4, r5, r6, r7}
 8034208:	46bb      	mov	fp, r7
 803420a:	46b2      	mov	sl, r6
 803420c:	46a9      	mov	r9, r5
 803420e:	46a0      	mov	r8, r4
 8034210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8034212:	003a      	movs	r2, r7
 8034214:	464f      	mov	r7, r9
 8034216:	960a      	str	r6, [sp, #40]	; 0x28
 8034218:	4646      	mov	r6, r8
 803421a:	46a8      	mov	r8, r5
 803421c:	4655      	mov	r5, sl
 803421e:	9b06      	ldr	r3, [sp, #24]
 8034220:	469a      	mov	sl, r3
 8034222:	4691      	mov	r9, r2
 8034224:	e6ff      	b.n	8034026 <sub_filedata+0x8a>
            err_code = 0xFF;
 8034226:	26ff      	movs	r6, #255	; 0xff
 8034228:	e6fd      	b.n	8034026 <sub_filedata+0x8a>
            if (2 >= q_writespace(outq)) {
 803422a:	4648      	mov	r0, r9
 803422c:	f000 facd 	bl	80347ca <q_writespace>
 8034230:	2802      	cmp	r0, #2
 8034232:	dde3      	ble.n	80341fc <sub_filedata+0x260>
            if (file_mod | err_code) {
 8034234:	4653      	mov	r3, sl
 8034236:	4333      	orrs	r3, r6
 8034238:	b2db      	uxtb	r3, r3
 803423a:	2b00      	cmp	r3, #0
 803423c:	d100      	bne.n	8034240 <sub_filedata+0x2a4>
 803423e:	e6fe      	b.n	803403e <sub_filedata+0xa2>
                if (file_mod == 0) {
 8034240:	9b05      	ldr	r3, [sp, #20]
 8034242:	2b00      	cmp	r3, #0
 8034244:	d108      	bne.n	8034258 <sub_filedata+0x2bc>
                    outq->putcursor     = outq_marker;
 8034246:	464b      	mov	r3, r9
 8034248:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 803424a:	609a      	str	r2, [r3, #8]
                    alp->OUTREC(CMD)   |= 0x0F;
 803424c:	990c      	ldr	r1, [sp, #48]	; 0x30
 803424e:	794b      	ldrb	r3, [r1, #5]
 8034250:	220f      	movs	r2, #15
 8034252:	4313      	orrs	r3, r2
 8034254:	714b      	strb	r3, [r1, #5]
                    data_in             = 0;
 8034256:	2500      	movs	r5, #0
                q_writebyte(outq, file_id);
 8034258:	9904      	ldr	r1, [sp, #16]
 803425a:	4648      	mov	r0, r9
 803425c:	f000 faf9 	bl	8034852 <q_writebyte>
                q_writebyte(outq, err_code);
 8034260:	0031      	movs	r1, r6
 8034262:	4648      	mov	r0, r9
 8034264:	f000 faf5 	bl	8034852 <q_writebyte>
                q_markbyte(inq, span);         // go past any leftover input data
 8034268:	4643      	mov	r3, r8
 803426a:	b219      	sxth	r1, r3
 803426c:	0038      	movs	r0, r7
 803426e:	f000 faeb 	bl	8034848 <q_markbyte>
                data_out += 2;
 8034272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8034274:	3302      	adds	r3, #2
 8034276:	b21b      	sxth	r3, r3
 8034278:	930a      	str	r3, [sp, #40]	; 0x28
 803427a:	e6e0      	b.n	803403e <sub_filedata+0xa2>
 803427c:	0000ffff 	.word	0x0000ffff

08034280 <sub_fileperms>:
static ot_int sub_fileperms( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 8034280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8034282:	46de      	mov	lr, fp
 8034284:	4657      	mov	r7, sl
 8034286:	464e      	mov	r6, r9
 8034288:	4645      	mov	r5, r8
 803428a:	b5e0      	push	{r5, r6, r7, lr}
 803428c:	b087      	sub	sp, #28
 803428e:	0007      	movs	r7, r0
 8034290:	4689      	mov	r9, r1
 8034292:	4690      	mov	r8, r2
 8034294:	aa10      	add	r2, sp, #64	; 0x40
 8034296:	2400      	movs	r4, #0
 8034298:	5f14      	ldrsh	r4, [r2, r4]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 803429a:	091a      	lsrs	r2, r3, #4
 803429c:	2107      	movs	r1, #7
 803429e:	4011      	ands	r1, r2
 80342a0:	468b      	mov	fp, r1
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 80342a2:	079b      	lsls	r3, r3, #30
 80342a4:	d453      	bmi.n	803434e <sub_fileperms+0xce>
 80342a6:	2624      	movs	r6, #36	; 0x24
 80342a8:	2300      	movs	r3, #0
 80342aa:	469a      	mov	sl, r3
 80342ac:	e00d      	b.n	80342ca <sub_fileperms+0x4a>
            data_in--;  // two for the new mod
 80342ae:	3b02      	subs	r3, #2
 80342b0:	b21c      	sxth	r4, r3
            file_mod = vl_chmod(file_block, file_id, q_readbyte(alp->inq), user_id);
 80342b2:	68b8      	ldr	r0, [r7, #8]
 80342b4:	f000 fafc 	bl	80348b0 <q_readbyte>
 80342b8:	0002      	movs	r2, r0
 80342ba:	464b      	mov	r3, r9
 80342bc:	9903      	ldr	r1, [sp, #12]
 80342be:	4658      	mov	r0, fp
 80342c0:	f000 fd7f 	bl	8034dc2 <vl_chmod>
 80342c4:	0006      	movs	r6, r0
        if (allow_write) {
 80342c6:	2d00      	cmp	r5, #0
 80342c8:	d134      	bne.n	8034334 <sub_fileperms+0xb4>
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 80342ca:	2c00      	cmp	r4, #0
 80342cc:	dd41      	ble.n	8034352 <sub_fileperms+0xd2>
 80342ce:	68fa      	ldr	r2, [r7, #12]
 80342d0:	2102      	movs	r1, #2
 80342d2:	4640      	mov	r0, r8
 80342d4:	f7ff fd40 	bl	8033d58 <sub_qnotfull>
 80342d8:	2800      	cmp	r0, #0
 80342da:	d03a      	beq.n	8034352 <sub_fileperms+0xd2>
        ot_u8   file_id         = q_readbyte(alp->inq);
 80342dc:	68b8      	ldr	r0, [r7, #8]
 80342de:	f000 fae7 	bl	80348b0 <q_readbyte>
 80342e2:	9003      	str	r0, [sp, #12]
        ot_bool allow_write     = respond;
 80342e4:	4645      	mov	r5, r8
 80342e6:	1e6b      	subs	r3, r5, #1
 80342e8:	419d      	sbcs	r5, r3
 80342ea:	b2ed      	uxtb	r5, r5
        data_in--;  // one for the file id
 80342ec:	b2a3      	uxth	r3, r4
 80342ee:	1e5c      	subs	r4, r3, #1
 80342f0:	b224      	sxth	r4, r4
        if (file_mod == VL_ACCESS_W ) {
 80342f2:	2e12      	cmp	r6, #18
 80342f4:	d0db      	beq.n	80342ae <sub_fileperms+0x2e>
        else if (allow_write) {
 80342f6:	4643      	mov	r3, r8
 80342f8:	2b00      	cmp	r3, #0
 80342fa:	d0e4      	beq.n	80342c6 <sub_fileperms+0x46>
            allow_write = (ot_bool)(vl_getheader_vaddr(&header, file_block, file_id, \
 80342fc:	2300      	movs	r3, #0
 80342fe:	9300      	str	r3, [sp, #0]
 8034300:	3324      	adds	r3, #36	; 0x24
 8034302:	9a03      	ldr	r2, [sp, #12]
 8034304:	4659      	mov	r1, fp
 8034306:	200e      	movs	r0, #14
 8034308:	ad02      	add	r5, sp, #8
 803430a:	46ac      	mov	ip, r5
 803430c:	4460      	add	r0, ip
 803430e:	f000 fccb 	bl	8034ca8 <vl_getheader_vaddr>
 8034312:	4245      	negs	r5, r0
 8034314:	4145      	adcs	r5, r0
 8034316:	b2ed      	uxtb	r5, r5
            if (allow_write) {
 8034318:	2800      	cmp	r0, #0
 803431a:	d1d4      	bne.n	80342c6 <sub_fileperms+0x46>
                file_idmod  = vworm_read(header + 4);   //shortcut to idmod, hack-ish but fast
 803431c:	230e      	movs	r3, #14
 803431e:	aa02      	add	r2, sp, #8
 8034320:	4694      	mov	ip, r2
 8034322:	4463      	add	r3, ip
 8034324:	8818      	ldrh	r0, [r3, #0]
 8034326:	3004      	adds	r0, #4
 8034328:	b280      	uxth	r0, r0
 803432a:	f002 f877 	bl	803641c <vworm_read>
                file_mod    = file_idmod >> 8;          ///@todo this might be endian dependent
 803432e:	0a00      	lsrs	r0, r0, #8
 8034330:	b2c6      	uxtb	r6, r0
 8034332:	e7c8      	b.n	80342c6 <sub_fileperms+0x46>
            q_writebyte(alp->outq, file_id);
 8034334:	9903      	ldr	r1, [sp, #12]
 8034336:	68f8      	ldr	r0, [r7, #12]
 8034338:	f000 fa8b 	bl	8034852 <q_writebyte>
            q_writebyte(alp->outq, file_mod);
 803433c:	0031      	movs	r1, r6
 803433e:	68f8      	ldr	r0, [r7, #12]
 8034340:	f000 fa87 	bl	8034852 <q_writebyte>
            data_out += 2;
 8034344:	4653      	mov	r3, sl
 8034346:	3302      	adds	r3, #2
 8034348:	b21b      	sxth	r3, r3
 803434a:	469a      	mov	sl, r3
 803434c:	e7bd      	b.n	80342ca <sub_fileperms+0x4a>
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 803434e:	2612      	movs	r6, #18
 8034350:	e7aa      	b.n	80342a8 <sub_fileperms+0x28>
}
 8034352:	4650      	mov	r0, sl
 8034354:	b007      	add	sp, #28
 8034356:	bcf0      	pop	{r4, r5, r6, r7}
 8034358:	46bb      	mov	fp, r7
 803435a:	46b2      	mov	sl, r6
 803435c:	46a9      	mov	r9, r5
 803435e:	46a0      	mov	r8, r4
 8034360:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08034364 <alp_proc_filedata>:
OT_WEAK ot_bool alp_proc_filedata(alp_tmpl* alp, const id_tmpl* user_id) {
 8034364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8034366:	46c6      	mov	lr, r8
 8034368:	b500      	push	{lr}
 803436a:	b082      	sub	sp, #8
 803436c:	0004      	movs	r4, r0
 803436e:	4688      	mov	r8, r1
    ot_int  data_in     = INREC(alp, PLEN);     //alp->INREC(PLEN);
 8034370:	2103      	movs	r1, #3
 8034372:	4249      	negs	r1, r1
 8034374:	6880      	ldr	r0, [r0, #8]
 8034376:	f000 fa1b 	bl	80347b0 <q_getcursor_val>
 803437a:	b207      	sxth	r7, r0
    ot_u8   cmd_in      = INREC(alp, CMD);      //alp->INREC(CMD);
 803437c:	2101      	movs	r1, #1
 803437e:	4249      	negs	r1, r1
 8034380:	68a0      	ldr	r0, [r4, #8]
 8034382:	f000 fa15 	bl	80347b0 <q_getcursor_val>
 8034386:	0005      	movs	r5, r0
    alp->OUTREC(PLEN) = cmd_fn[cmd_in & 0x0F](alp, user_id, (cmd_in & 0x80), cmd_in, data_in);
 8034388:	230f      	movs	r3, #15
 803438a:	4003      	ands	r3, r0
 803438c:	009b      	lsls	r3, r3, #2
 803438e:	4a13      	ldr	r2, [pc, #76]	; (80343dc <alp_proc_filedata+0x78>)
 8034390:	589e      	ldr	r6, [r3, r2]
 8034392:	237f      	movs	r3, #127	; 0x7f
 8034394:	0002      	movs	r2, r0
 8034396:	439a      	bics	r2, r3
 8034398:	b2d2      	uxtb	r2, r2
 803439a:	9700      	str	r7, [sp, #0]
 803439c:	0003      	movs	r3, r0
 803439e:	4641      	mov	r1, r8
 80343a0:	0020      	movs	r0, r4
 80343a2:	47b0      	blx	r6
 80343a4:	b2c0      	uxtb	r0, r0
 80343a6:	70e0      	strb	r0, [r4, #3]
    if (cmd_in & 0x80) {
 80343a8:	062b      	lsls	r3, r5, #24
 80343aa:	d408      	bmi.n	80343be <alp_proc_filedata+0x5a>
        alp->outq->putcursor   -= alp->OUTREC(PLEN);
 80343ac:	68e3      	ldr	r3, [r4, #12]
 80343ae:	689a      	ldr	r2, [r3, #8]
 80343b0:	1a10      	subs	r0, r2, r0
 80343b2:	6098      	str	r0, [r3, #8]
}
 80343b4:	2001      	movs	r0, #1
 80343b6:	b002      	add	sp, #8
 80343b8:	bc80      	pop	{r7}
 80343ba:	46b8      	mov	r8, r7
 80343bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        alp->OUTREC(CMD)  ^= 0x80;
 80343be:	7962      	ldrb	r2, [r4, #5]
 80343c0:	2380      	movs	r3, #128	; 0x80
 80343c2:	425b      	negs	r3, r3
 80343c4:	4053      	eors	r3, r2
 80343c6:	b2db      	uxtb	r3, r3
 80343c8:	7163      	strb	r3, [r4, #5]
        alp->OUTREC(CMD)  |= (cmd_in & 0x02) ? 0x0F : 0x01;
 80343ca:	b25b      	sxtb	r3, r3
 80343cc:	07aa      	lsls	r2, r5, #30
 80343ce:	d503      	bpl.n	80343d8 <alp_proc_filedata+0x74>
 80343d0:	220f      	movs	r2, #15
 80343d2:	4313      	orrs	r3, r2
 80343d4:	7163      	strb	r3, [r4, #5]
 80343d6:	e7ed      	b.n	80343b4 <alp_proc_filedata+0x50>
 80343d8:	2201      	movs	r2, #1
 80343da:	e7fa      	b.n	80343d2 <alp_proc_filedata+0x6e>
 80343dc:	08037104 	.word	0x08037104

080343e0 <alp_proc_logger>:
#include <otlib/auth.h>
#include <otlib/queue.h>

///@todo replace INREC calls with direct access from input

OT_WEAK ot_bool alp_proc_logger(alp_tmpl* alp, const id_tmpl* user_id) {
 80343e0:	b510      	push	{r4, lr}
 80343e2:	0004      	movs	r4, r0
 80343e4:	0008      	movs	r0, r1
/// Logger ALP is like ECHO.  The input is copied to the output.

    // Only root can log directly (this is an important security firewall)
    if (auth_isroot(user_id)) {
 80343e6:	f000 f903 	bl	80345f0 <auth_isroot>
 80343ea:	2800      	cmp	r0, #0
 80343ec:	d101      	bne.n	80343f2 <alp_proc_logger+0x12>
        if (alp->inq != alp->outq) {
            q_movedata(alp->outq, alp->inq, alp->OUTREC(PLEN));
        }
    }
    return True;
}
 80343ee:	2001      	movs	r0, #1
 80343f0:	bd10      	pop	{r4, pc}
        alp->OUTREC(FLAGS)  = q_readbyte(alp->inq);
 80343f2:	68a0      	ldr	r0, [r4, #8]
 80343f4:	f000 fa5c 	bl	80348b0 <q_readbyte>
 80343f8:	70a0      	strb	r0, [r4, #2]
        alp->OUTREC(PLEN)   = q_readbyte(alp->inq);
 80343fa:	68a0      	ldr	r0, [r4, #8]
 80343fc:	f000 fa58 	bl	80348b0 <q_readbyte>
 8034400:	70e0      	strb	r0, [r4, #3]
        alp->inq->getcursor+= 2;
 8034402:	68a2      	ldr	r2, [r4, #8]
 8034404:	6853      	ldr	r3, [r2, #4]
 8034406:	3302      	adds	r3, #2
 8034408:	6053      	str	r3, [r2, #4]
        if (alp->inq != alp->outq) {
 803440a:	68a1      	ldr	r1, [r4, #8]
 803440c:	68e0      	ldr	r0, [r4, #12]
 803440e:	4281      	cmp	r1, r0
 8034410:	d0ed      	beq.n	80343ee <alp_proc_logger+0xe>
            q_movedata(alp->outq, alp->inq, alp->OUTREC(PLEN));
 8034412:	78e2      	ldrb	r2, [r4, #3]
 8034414:	f000 fa92 	bl	803493c <q_movedata>
 8034418:	e7e9      	b.n	80343ee <alp_proc_logger+0xe>

0803441a <sub_get_headerlen>:
    hdr_len    -= (tnf == 6);               // Add Type len, Remove ID len & 2 byte ID
    return hdr_len;
#else
    return 4;
#endif
}
 803441a:	2004      	movs	r0, #4
 803441c:	4770      	bx	lr

0803441e <sub_insert_header>:



void sub_insert_header(alp_tmpl* alp, ot_qcur hdr_position, ot_u8 hdr_len) {
 803441e:	b570      	push	{r4, r5, r6, lr}
 8034420:	0004      	movs	r4, r0
/// <LI> Add hdr_len to the queue length (cursors are already in place). </LI>
/// <LI> If using NDEF (hdr_len != 4), output header processing is ugly. </LI>
/// <LI> Pure ALP (hdr_len == 4) output header processing is universal. </LI>
/// <LI> Finally, always clear MB because now the first record is done. </LI>
    ot_qcur savedput = alp->outq->putcursor + hdr_len;
 8034422:	68c3      	ldr	r3, [r0, #12]
 8034424:	6898      	ldr	r0, [r3, #8]
 8034426:	1885      	adds	r5, r0, r2
    
    ///@todo make sure this works, might need to have qcur be signed
    if (hdr_position != NULL) {
 8034428:	2900      	cmp	r1, #0
 803442a:	d000      	beq.n	803442e <sub_insert_header+0x10>
        alp->outq->putcursor = hdr_position;
 803442c:	6099      	str	r1, [r3, #8]
    }
    else
#   else
    {
        //q_writelong_be(alp->outq, alp->OUTREC(FLAGS));
        ot_memcpy(alp->outq->putcursor, &(alp->OUTREC(FLAGS)), 4);
 803442e:	68e3      	ldr	r3, [r4, #12]
 8034430:	6898      	ldr	r0, [r3, #8]
 8034432:	1ca1      	adds	r1, r4, #2
 8034434:	2204      	movs	r2, #4
 8034436:	f001 fc3d 	bl	8035cb4 <ot_memcpy>
    }
#   endif

    alp->outq->putcursor = savedput;
 803443a:	68e3      	ldr	r3, [r4, #12]
 803443c:	609d      	str	r5, [r3, #8]
    alp->OUTREC(FLAGS)  &= ~ALP_FLAG_MB;
 803443e:	78a2      	ldrb	r2, [r4, #2]
 8034440:	237f      	movs	r3, #127	; 0x7f
 8034442:	4013      	ands	r3, r2
 8034444:	70a3      	strb	r3, [r4, #2]
}
 8034446:	bd70      	pop	{r4, r5, r6, pc}

08034448 <alp_proc_null>:
 * The Null Processor is implemented here.  The rest of the processors are
 * implemented in separate C files, named alp_...c
 */
OT_WEAK ot_bool alp_proc_null(alp_tmpl* a0, const id_tmpl* a1) {
    return True;   // Atomic, with no payload data
}
 8034448:	2001      	movs	r0, #1
 803444a:	4770      	bx	lr

0803444c <alp_init>:
 * ========================================================================<BR>
 */

#ifndef EXTF_alp_init
void alp_init(alp_tmpl* alp, ot_queue* inq, ot_queue* outq) {
    alp->purge_id       = 1;
 803444c:	2301      	movs	r3, #1
 803444e:	8003      	strh	r3, [r0, #0]
    alp->OUTREC(FLAGS)  = (ALP_FLAG_MB | ALP_FLAG_ME | ALP_FLAG_SR);   ///@todo this will need to be removed soon
 8034450:	33cf      	adds	r3, #207	; 0xcf
 8034452:	7083      	strb	r3, [r0, #2]
    alp->inq            = inq;
 8034454:	6081      	str	r1, [r0, #8]
    alp->outq           = outq;
 8034456:	60c2      	str	r2, [r0, #12]
}
 8034458:	4770      	bx	lr

0803445a <alp_parse_message>:
///@todo To be completed when transformation of ALP is complete
}



ALP_status alp_parse_message(alp_tmpl* alp, const id_tmpl* user_id) {
 803445a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803445c:	0004      	movs	r4, r0
 803445e:	000f      	movs	r7, r1
    //ot_u8       hdr_len;
    ot_int      proc_output;
    //ot_int      bytes;

    /// Lock the ot_queues while ALP is parsing/processing
    q_lock(alp->inq);
 8034460:	6880      	ldr	r0, [r0, #8]
 8034462:	f000 f9c0 	bl	80347e6 <q_lock>
    q_lock(alp->outq);
 8034466:	68e0      	ldr	r0, [r4, #12]
 8034468:	f000 f9bd 	bl	80347e6 <q_lock>
 803446c:	e029      	b.n	80344c2 <alp_parse_message+0x68>
    alp_parse_message_LOOP:

    /// Safety check: make sure both queues have room remaining for the
    /// most minimal type of message, an empty message
    if ((q_readspace(alp->inq) < 4) || (q_writespace(alp->outq) < 4)) {
        exit_code = MSG_Null;
 803446e:	2000      	movs	r0, #0
    
    exit_code = MSG_End;

    alp_parse_message_END:
    return exit_code;
}
 8034470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        alp->OUTREC(FLAGS)  = q_getcursor_val(alp->inq, 0);
 8034472:	2100      	movs	r1, #0
 8034474:	68a0      	ldr	r0, [r4, #8]
 8034476:	f000 f99b 	bl	80347b0 <q_getcursor_val>
 803447a:	70a0      	strb	r0, [r4, #2]
        alp->OUTREC(PLEN)   = 0;
 803447c:	2300      	movs	r3, #0
 803447e:	70e3      	strb	r3, [r4, #3]
        alp->OUTREC(ID)     = q_getcursor_val(alp->inq, 2);
 8034480:	2102      	movs	r1, #2
 8034482:	68a0      	ldr	r0, [r4, #8]
 8034484:	f000 f994 	bl	80347b0 <q_getcursor_val>
 8034488:	7120      	strb	r0, [r4, #4]
        alp->OUTREC(CMD)    = q_getcursor_val(alp->inq, 3);
 803448a:	2103      	movs	r1, #3
 803448c:	68a0      	ldr	r0, [r4, #8]
 803448e:	f000 f98f 	bl	80347b0 <q_getcursor_val>
 8034492:	7160      	strb	r0, [r4, #5]
 8034494:	e022      	b.n	80344dc <alp_parse_message+0x82>
        memcpy(hdr_position, &alp->OUTREC(FLAGS), 4);
 8034496:	1ca1      	adds	r1, r4, #2
 8034498:	2204      	movs	r2, #4
 803449a:	0030      	movs	r0, r6
 803449c:	f001 fc0a 	bl	8035cb4 <ot_memcpy>
        alp->OUTREC(FLAGS)  &= ~ALP_FLAG_MB;
 80344a0:	78a2      	ldrb	r2, [r4, #2]
 80344a2:	237f      	movs	r3, #127	; 0x7f
 80344a4:	4013      	ands	r3, r2
 80344a6:	70a3      	strb	r3, [r4, #2]
        nextrecord = input_position + input_position[1] + 4;
 80344a8:	786b      	ldrb	r3, [r5, #1]
 80344aa:	3304      	adds	r3, #4
 80344ac:	18eb      	adds	r3, r5, r3
        if (nextrecord == alp->inq->putcursor) {
 80344ae:	68a2      	ldr	r2, [r4, #8]
 80344b0:	6891      	ldr	r1, [r2, #8]
 80344b2:	4299      	cmp	r1, r3
 80344b4:	d028      	beq.n	8034508 <alp_parse_message+0xae>
            alp->inq->getcursor = nextrecord;
 80344b6:	6053      	str	r3, [r2, #4]
            if (alp->inq->putcursor > alp->inq->getcursor) {
 80344b8:	68a3      	ldr	r3, [r4, #8]
 80344ba:	689a      	ldr	r2, [r3, #8]
 80344bc:	685b      	ldr	r3, [r3, #4]
 80344be:	429a      	cmp	r2, r3
 80344c0:	d925      	bls.n	803450e <alp_parse_message+0xb4>
    if ((q_readspace(alp->inq) < 4) || (q_writespace(alp->outq) < 4)) {
 80344c2:	68a0      	ldr	r0, [r4, #8]
 80344c4:	f000 f986 	bl	80347d4 <q_readspace>
 80344c8:	2803      	cmp	r0, #3
 80344ca:	ddd0      	ble.n	803446e <alp_parse_message+0x14>
 80344cc:	68e0      	ldr	r0, [r4, #12]
 80344ce:	f000 f97c 	bl	80347ca <q_writespace>
 80344d2:	2803      	cmp	r0, #3
 80344d4:	ddcb      	ble.n	803446e <alp_parse_message+0x14>
    if (alp->OUTREC(FLAGS) & ALP_FLAG_ME) {
 80344d6:	78a3      	ldrb	r3, [r4, #2]
 80344d8:	065b      	lsls	r3, r3, #25
 80344da:	d4ca      	bmi.n	8034472 <alp_parse_message+0x18>
    input_position          = alp->inq->getcursor;
 80344dc:	68a3      	ldr	r3, [r4, #8]
 80344de:	685d      	ldr	r5, [r3, #4]
    alp->inq->getcursor    += 4;
 80344e0:	1d2a      	adds	r2, r5, #4
 80344e2:	605a      	str	r2, [r3, #4]
    hdr_position            = alp->outq->putcursor;
 80344e4:	68e3      	ldr	r3, [r4, #12]
 80344e6:	689e      	ldr	r6, [r3, #8]
    alp->outq->putcursor   += 4;
 80344e8:	1d32      	adds	r2, r6, #4
 80344ea:	609a      	str	r2, [r3, #8]
    proc_output = alp_proc(alp, user_id);
 80344ec:	0039      	movs	r1, r7
 80344ee:	0020      	movs	r0, r4
 80344f0:	f7fb ff8a 	bl	8030408 <alp_proc>
    if (alp->OUTREC(PLEN) == 0) {
 80344f4:	78e3      	ldrb	r3, [r4, #3]
 80344f6:	2b00      	cmp	r3, #0
 80344f8:	d1cd      	bne.n	8034496 <alp_parse_message+0x3c>
        alp->outq->putcursor   = hdr_position;
 80344fa:	68e3      	ldr	r3, [r4, #12]
 80344fc:	609e      	str	r6, [r3, #8]
        alp->OUTREC(FLAGS)    &= ~NDEF_CF;
 80344fe:	78a3      	ldrb	r3, [r4, #2]
 8034500:	2220      	movs	r2, #32
 8034502:	4393      	bics	r3, r2
 8034504:	70a3      	strb	r3, [r4, #2]
 8034506:	e7cf      	b.n	80344a8 <alp_parse_message+0x4e>
            alp->inq->putcursor = input_position;
 8034508:	6095      	str	r5, [r2, #8]
            alp->inq->getcursor = input_position;
 803450a:	68a3      	ldr	r3, [r4, #8]
 803450c:	605d      	str	r5, [r3, #4]
    q_unlock(alp->inq);
 803450e:	68a0      	ldr	r0, [r4, #8]
 8034510:	f000 f974 	bl	80347fc <q_unlock>
    q_unlock(alp->outq);
 8034514:	68e0      	ldr	r0, [r4, #12]
 8034516:	f000 f971 	bl	80347fc <q_unlock>
    exit_code = MSG_End;
 803451a:	2006      	movs	r0, #6
 803451c:	e7a8      	b.n	8034470 <alp_parse_message+0x16>

0803451e <alp_new_record>:
  */

/// @note This function is used by the logger (logger.c), but nowhere
/// else.  The ability to create a new output record/message is required, but
/// the method of doing it may likely get re-architected.
OT_WEAK void alp_new_record(alp_tmpl* alp, ot_u8 flags, ot_u8 payload_limit, ot_int payload_remaining) {
 803451e:	b510      	push	{r4, lr}
 8034520:	0004      	movs	r4, r0
    // Clear control flags (begin, end, chunk)
	// Chunk and End will be intelligently set in this function, but Begin must
	// be set by the caller, AFTER this function.
	alp->OUTREC(FLAGS) |= flags;
 8034522:	7880      	ldrb	r0, [r0, #2]
 8034524:	4301      	orrs	r1, r0
 8034526:	70a1      	strb	r1, [r4, #2]
	alp->OUTREC(FLAGS) |= NDEF_SR;
 8034528:	2010      	movs	r0, #16
 803452a:	4301      	orrs	r1, r0
 803452c:	b2c9      	uxtb	r1, r1
 803452e:	70a1      	strb	r1, [r4, #2]
#   if (OT_FEATURE(NDEF))
	alp->OUTREC(FLAGS) &= ~(ALP_FLAG_ME | ALP_FLAG_CF | NDEF_IL);
#   else
    alp->OUTREC(FLAGS) &= (ALP_FLAG_MB | NDEF_SR);
 8034530:	206f      	movs	r0, #111	; 0x6f
 8034532:	4381      	bics	r1, r0
 8034534:	70a1      	strb	r1, [r4, #2]
#   endif

	// Automatically set Chunk or End.
	// "payload_remaining" is re-purposed to contain the number of bytes loaded
	// Chunk Flag is ignored by pure-ALP
	if (payload_remaining > payload_limit) {
 8034536:	4293      	cmp	r3, r2
 8034538:	dd0c      	ble.n	8034554 <alp_new_record+0x36>
		payload_remaining   = payload_limit;
 803453a:	b213      	sxth	r3, r2
	}
	else {
		alp->OUTREC(FLAGS)  |= ALP_FLAG_ME;
	}

	alp->OUTREC(PLEN) = (ot_u8)payload_remaining;
 803453c:	70e3      	strb	r3, [r4, #3]
	sub_insert_header(alp, NULL, sub_get_headerlen(alp->OUTREC(FLAGS)&7));
 803453e:	78a3      	ldrb	r3, [r4, #2]
 8034540:	2007      	movs	r0, #7
 8034542:	4018      	ands	r0, r3
 8034544:	f7ff ff69 	bl	803441a <sub_get_headerlen>
 8034548:	0002      	movs	r2, r0
 803454a:	2100      	movs	r1, #0
 803454c:	0020      	movs	r0, r4
 803454e:	f7ff ff66 	bl	803441e <sub_insert_header>
}
 8034552:	bd10      	pop	{r4, pc}
		alp->OUTREC(FLAGS)  |= ALP_FLAG_ME;
 8034554:	2240      	movs	r2, #64	; 0x40
 8034556:	4311      	orrs	r1, r2
 8034558:	70a1      	strb	r1, [r4, #2]
 803455a:	e7ef      	b.n	803453c <alp_new_record+0x1e>

0803455c <alp_breakdown_query_tmpl>:





OT_WEAK void alp_breakdown_query_tmpl(ot_queue* in_q, void* data_type) {
 803455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803455e:	0006      	movs	r6, r0
 8034560:	000d      	movs	r5, r1
    ot_u8   query_length;
    ot_u8   query_code;
    ot_u8*  query_mask;
    
    query_code      = q_readbyte(in_q);
 8034562:	f000 f9a5 	bl	80348b0 <q_readbyte>
 8034566:	0007      	movs	r7, r0
    query_length    = q_readbyte(in_q);
 8034568:	0030      	movs	r0, r6
 803456a:	f000 f9a1 	bl	80348b0 <q_readbyte>
 803456e:	0004      	movs	r4, r0
    query_mask      = NULL;
    
    if (query_code & 0x80) {
 8034570:	063b      	lsls	r3, r7, #24
 8034572:	d409      	bmi.n	8034588 <alp_breakdown_query_tmpl+0x2c>
    query_mask      = NULL;
 8034574:	2000      	movs	r0, #0
        query_mask  = q_markbyte(in_q, query_length);
    }
    
    ((query_tmpl*)data_type)->code      = query_code;
 8034576:	702f      	strb	r7, [r5, #0]
    ((query_tmpl*)data_type)->length    = query_length;
 8034578:	706c      	strb	r4, [r5, #1]
    ((query_tmpl*)data_type)->mask      = query_mask;
 803457a:	6068      	str	r0, [r5, #4]
    ((query_tmpl*)data_type)->value     = q_markbyte(in_q, query_length);
 803457c:	b221      	sxth	r1, r4
 803457e:	0030      	movs	r0, r6
 8034580:	f000 f962 	bl	8034848 <q_markbyte>
 8034584:	60a8      	str	r0, [r5, #8]
}
 8034586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        query_mask  = q_markbyte(in_q, query_length);
 8034588:	b201      	sxth	r1, r0
 803458a:	0030      	movs	r0, r6
 803458c:	f000 f95c 	bl	8034848 <q_markbyte>
 8034590:	e7f1      	b.n	8034576 <alp_breakdown_query_tmpl+0x1a>

08034592 <alp_breakdown_udp_tmpl>:





OT_WEAK void alp_breakdown_udp_tmpl(ot_queue* in_q, void* data_type) {
 8034592:	b570      	push	{r4, r5, r6, lr}
 8034594:	0005      	movs	r5, r0
 8034596:	000c      	movs	r4, r1
    ot_int udp_data_length;
    udp_data_length                       = q_readshort(in_q);
 8034598:	f000 f98f 	bl	80348ba <q_readshort>
 803459c:	b206      	sxth	r6, r0
    ((udp_tmpl*)data_type)->data_length   = udp_data_length;
 803459e:	8020      	strh	r0, [r4, #0]
    ((udp_tmpl*)data_type)->dst_port      = q_readbyte(in_q);
 80345a0:	0028      	movs	r0, r5
 80345a2:	f000 f985 	bl	80348b0 <q_readbyte>
 80345a6:	70a0      	strb	r0, [r4, #2]
    ((udp_tmpl*)data_type)->src_port      = q_readbyte(in_q);
 80345a8:	0028      	movs	r0, r5
 80345aa:	f000 f981 	bl	80348b0 <q_readbyte>
 80345ae:	70e0      	strb	r0, [r4, #3]
    ((udp_tmpl*)data_type)->data          = q_markbyte(in_q, udp_data_length);
 80345b0:	0031      	movs	r1, r6
 80345b2:	0028      	movs	r0, r5
 80345b4:	f000 f948 	bl	8034848 <q_markbyte>
 80345b8:	6060      	str	r0, [r4, #4]
}
 80345ba:	bd70      	pop	{r4, r5, r6, pc}

080345bc <alp_breakdown_isfcomp_tmpl>:





OT_WEAK void alp_breakdown_isfcomp_tmpl(ot_queue* in_q, void* data_type) {
 80345bc:	b570      	push	{r4, r5, r6, lr}
 80345be:	0005      	movs	r5, r0
 80345c0:	000c      	movs	r4, r1
    ((isfcomp_tmpl*)data_type)->is_series   = q_readbyte(in_q);
 80345c2:	f000 f975 	bl	80348b0 <q_readbyte>
 80345c6:	7020      	strb	r0, [r4, #0]
    ((isfcomp_tmpl*)data_type)->isf_id      = q_readbyte(in_q);
 80345c8:	0028      	movs	r0, r5
 80345ca:	f000 f971 	bl	80348b0 <q_readbyte>
 80345ce:	7060      	strb	r0, [r4, #1]
    ((isfcomp_tmpl*)data_type)->offset      = q_readshort(in_q);
 80345d0:	0028      	movs	r0, r5
 80345d2:	f000 f972 	bl	80348ba <q_readshort>
 80345d6:	8060      	strh	r0, [r4, #2]
}
 80345d8:	bd70      	pop	{r4, r5, r6, pc}

080345da <alp_breakdown_isfcall_tmpl>:





OT_WEAK void alp_breakdown_isfcall_tmpl(ot_queue* in_q, void* data_type) {
 80345da:	b570      	push	{r4, r5, r6, lr}
 80345dc:	0005      	movs	r5, r0
 80345de:	000c      	movs	r4, r1
    alp_breakdown_isfcomp_tmpl(in_q, data_type);
 80345e0:	f7ff ffec 	bl	80345bc <alp_breakdown_isfcomp_tmpl>
    ((isfcall_tmpl*)data_type)->max_return  = q_readshort(in_q);
 80345e4:	0028      	movs	r0, r5
 80345e6:	f000 f968 	bl	80348ba <q_readshort>
 80345ea:	80a0      	strh	r0, [r4, #4]
}
 80345ec:	bd70      	pop	{r4, r5, r6, pc}

080345ee <auth_init>:
#endif

#if (_SEC_NLS)
    ///@todo
#endif
}
 80345ee:	4770      	bx	lr

080345f0 <auth_isroot>:
#if (_SEC_ANY)
    return sub_ismask(user_id, b00000000);
#else
    return False;
#endif
}
 80345f0:	2000      	movs	r0, #0
 80345f2:	4770      	bx	lr

080345f4 <auth_check>:

    return 0;

#else
    // Try guest access
    return (0x07 & req_mod & rw_mod);
 80345f4:	4001      	ands	r1, r0
 80345f6:	2007      	movs	r0, #7
 80345f8:	4008      	ands	r0, r1
#endif
}
 80345fa:	4770      	bx	lr

080345fc <buffers_init>:
#endif



#ifndef EXTF_buffers_init
void buffers_init() {
 80345fc:	b570      	push	{r4, r5, r6, lr}
#   if (OT_FEATURE(SERVER) == ENABLED)
    q_init(&rxq,    otbuf,              TXRX_SIZE);
 80345fe:	2580      	movs	r5, #128	; 0x80
 8034600:	006d      	lsls	r5, r5, #1
 8034602:	4c0d      	ldr	r4, [pc, #52]	; (8034638 <buffers_init+0x3c>)
 8034604:	002a      	movs	r2, r5
 8034606:	0021      	movs	r1, r4
 8034608:	480c      	ldr	r0, [pc, #48]	; (803463c <buffers_init+0x40>)
 803460a:	f000 f903 	bl	8034814 <q_init>
    q_init(&txq,    otbuf+TXRX_SIZE,    TXRX_SIZE);    
 803460e:	1961      	adds	r1, r4, r5
 8034610:	002a      	movs	r2, r5
 8034612:	480b      	ldr	r0, [pc, #44]	; (8034640 <buffers_init+0x44>)
 8034614:	f000 f8fe 	bl	8034814 <q_init>
#   endif
#   if (ALP_ENABLED)
    q_init(&otmpin,     otbuf+(TXRX_SIZE*2),            ALP_SIZE );
 8034618:	3501      	adds	r5, #1
 803461a:	35ff      	adds	r5, #255	; 0xff
 803461c:	1961      	adds	r1, r4, r5
 803461e:	002a      	movs	r2, r5
 8034620:	4808      	ldr	r0, [pc, #32]	; (8034644 <buffers_init+0x48>)
 8034622:	f000 f8f7 	bl	8034814 <q_init>
    q_init(&otmpout,    otbuf+(TXRX_SIZE*2)+ALP_SIZE,   ALP_SIZE );
 8034626:	2380      	movs	r3, #128	; 0x80
 8034628:	00db      	lsls	r3, r3, #3
 803462a:	18e1      	adds	r1, r4, r3
 803462c:	002a      	movs	r2, r5
 803462e:	4806      	ldr	r0, [pc, #24]	; (8034648 <buffers_init+0x4c>)
 8034630:	f000 f8f0 	bl	8034814 <q_init>
#   endif
}
 8034634:	bd70      	pop	{r4, r5, r6, pc}
 8034636:	46c0      	nop			; (mov r8, r8)
 8034638:	2000c4f0 	.word	0x2000c4f0
 803463c:	2000cb18 	.word	0x2000cb18
 8034640:	2000cb2c 	.word	0x2000cb2c
 8034644:	2000caf0 	.word	0x2000caf0
 8034648:	2000cb04 	.word	0x2000cb04

0803464c <crc_init_stream>:

//crc_struct crc;


void crc_init_stream(crcstream_t* stream, ot_bool writeout, ot_int size, ot_u8* data) {
    stream->writeout    = writeout;
 803464c:	7181      	strb	r1, [r0, #6]
    stream->cursor      = data;
 803464e:	6003      	str	r3, [r0, #0]
    stream->count       = size;
 8034650:	8082      	strh	r2, [r0, #4]
    stream->val         = crc16drv_init();
 8034652:	2301      	movs	r3, #1
 8034654:	425b      	negs	r3, r3
 8034656:	8103      	strh	r3, [r0, #8]
}
 8034658:	4770      	bx	lr
	...

0803465c <crc16drv_init>:

#ifndef EXTF_crc16drv_init
OT_INLINE ot_u16 crc16drv_init() {
    //crc16_dr = 0xFFFF;
    return 0xFFFF;
}
 803465c:	4800      	ldr	r0, [pc, #0]	; (8034660 <crc16drv_init+0x4>)
 803465e:	4770      	bx	lr
 8034660:	0000ffff 	.word	0x0000ffff

08034664 <crc16drv_block_manual>:
#endif


#ifndef EXTF_crc16drv_block_manual
OT_WEAK ot_u16 crc16drv_block_manual(ot_u8* block_addr, ot_int block_size, ot_u16 init) {
 8034664:	b510      	push	{r4, lr}
 8034666:	0004      	movs	r4, r0
 8034668:	0010      	movs	r0, r2
/// One nice thing about the software-only CRC16 method is that it doesn't
/// require any sort of interrupt blocking.  In practice, interrupt blocking
/// by CRC isn't much of an issue, but if you are getting weird CRC errors
/// when using streams, try comparing against this software implemetation.

    while (--block_size >= 0) {
 803466a:	e009      	b.n	8034680 <crc16drv_block_manual+0x1c>
        ot_u8 index = ((ot_u8*)&init)[UPPER] ^ *block_addr++;       //((crc_val>>8) & 0xff) ^ *block_addr++;
 803466c:	0a03      	lsrs	r3, r0, #8
 803466e:	7822      	ldrb	r2, [r4, #0]
 8034670:	4053      	eors	r3, r2
        init        = (init<<8) ^ crc16_table[index];
 8034672:	0200      	lsls	r0, r0, #8
 8034674:	005b      	lsls	r3, r3, #1
 8034676:	4a05      	ldr	r2, [pc, #20]	; (803468c <crc16drv_block_manual+0x28>)
 8034678:	5e9a      	ldrsh	r2, [r3, r2]
 803467a:	4050      	eors	r0, r2
 803467c:	b280      	uxth	r0, r0
        ot_u8 index = ((ot_u8*)&init)[UPPER] ^ *block_addr++;       //((crc_val>>8) & 0xff) ^ *block_addr++;
 803467e:	3401      	adds	r4, #1
    while (--block_size >= 0) {
 8034680:	1e4b      	subs	r3, r1, #1
 8034682:	b219      	sxth	r1, r3
 8034684:	041b      	lsls	r3, r3, #16
 8034686:	d5f1      	bpl.n	803466c <crc16drv_block_manual+0x8>
    }
    return init;
}
 8034688:	bd10      	pop	{r4, pc}
 803468a:	46c0      	nop			; (mov r8, r8)
 803468c:	0803714c 	.word	0x0803714c

08034690 <crc_calc_nstream>:
void crc_calc_nstream(crcstream_t* stream, ot_u16 n) {
 8034690:	b510      	push	{r4, lr}
 8034692:	0004      	movs	r4, r0
    if (stream->count > 0) {
 8034694:	2204      	movs	r2, #4
 8034696:	5e83      	ldrsh	r3, [r0, r2]
 8034698:	2b00      	cmp	r3, #0
 803469a:	dd0c      	ble.n	80346b6 <crc_calc_nstream+0x26>
        if (n > stream->count) {
 803469c:	4299      	cmp	r1, r3
 803469e:	dd00      	ble.n	80346a2 <crc_calc_nstream+0x12>
            n = stream->count;
 80346a0:	b299      	uxth	r1, r3
        stream->count  -= n;
 80346a2:	1a5b      	subs	r3, r3, r1
 80346a4:	80a3      	strh	r3, [r4, #4]
        data            = stream->cursor;
 80346a6:	6820      	ldr	r0, [r4, #0]
        stream->cursor += n;
 80346a8:	1843      	adds	r3, r0, r1
 80346aa:	6023      	str	r3, [r4, #0]
        stream->val     = crc16drv_block_manual(data, n, stream->val);
 80346ac:	8922      	ldrh	r2, [r4, #8]
 80346ae:	b209      	sxth	r1, r1
 80346b0:	f7ff ffd8 	bl	8034664 <crc16drv_block_manual>
 80346b4:	8120      	strh	r0, [r4, #8]
    if ((stream->count == 0) && (stream->writeout)) {
 80346b6:	2204      	movs	r2, #4
 80346b8:	5ea3      	ldrsh	r3, [r4, r2]
 80346ba:	2b00      	cmp	r3, #0
 80346bc:	d10f      	bne.n	80346de <crc_calc_nstream+0x4e>
 80346be:	79a3      	ldrb	r3, [r4, #6]
 80346c0:	2b00      	cmp	r3, #0
 80346c2:	d00c      	beq.n	80346de <crc_calc_nstream+0x4e>
        stream->writeout    = False;
 80346c4:	2300      	movs	r3, #0
 80346c6:	71a3      	strb	r3, [r4, #6]
        *stream->cursor++   = (ot_u8)(stream->val >> 8);
 80346c8:	8923      	ldrh	r3, [r4, #8]
 80346ca:	6822      	ldr	r2, [r4, #0]
 80346cc:	1c51      	adds	r1, r2, #1
 80346ce:	6021      	str	r1, [r4, #0]
 80346d0:	0a1b      	lsrs	r3, r3, #8
 80346d2:	7013      	strb	r3, [r2, #0]
        *stream->cursor++   = (ot_u8)(stream->val);
 80346d4:	6823      	ldr	r3, [r4, #0]
 80346d6:	1c5a      	adds	r2, r3, #1
 80346d8:	6022      	str	r2, [r4, #0]
 80346da:	7a22      	ldrb	r2, [r4, #8]
 80346dc:	701a      	strb	r2, [r3, #0]
}
 80346de:	bd10      	pop	{r4, pc}

080346e0 <logger_header>:
#include <otsys/mpipe.h>

#include <string.h>


ot_bool logger_header(ot_u8 id_subcode, ot_int payload_length) {
 80346e0:	b510      	push	{r4, lr}
/// logger_header creates the ALP/NDEF header needed by MPipe.  It is used
/// by all logging functions.  If there is not enough space in the MPipe queue
/// to hold the log data, it will return False, and nothing will be added to
/// the MPipe queue.

    mpipe.alp.outrec.id     = 4;                //Logger ID
 80346e2:	4b0a      	ldr	r3, [pc, #40]	; (803470c <logger_header+0x2c>)
 80346e4:	2204      	movs	r2, #4
 80346e6:	721a      	strb	r2, [r3, #8]
    mpipe.alp.outrec.cmd    = id_subcode;       //Format Type
 80346e8:	7258      	strb	r0, [r3, #9]

    if ((mpipe.alp.outq->putcursor+payload_length) < mpipe.alp.outq->back) {
 80346ea:	691a      	ldr	r2, [r3, #16]
 80346ec:	6893      	ldr	r3, [r2, #8]
 80346ee:	185b      	adds	r3, r3, r1
 80346f0:	6912      	ldr	r2, [r2, #16]
 80346f2:	4293      	cmp	r3, r2
 80346f4:	d301      	bcc.n	80346fa <logger_header+0x1a>
        alp_new_record(&mpipe.alp, (ALP_FLAG_MB+5), 255, payload_length);
        return True;
    }
    //mpipe_kill();
    return False;
 80346f6:	2000      	movs	r0, #0
}
 80346f8:	bd10      	pop	{r4, pc}
        alp_new_record(&mpipe.alp, (ALP_FLAG_MB+5), 255, payload_length);
 80346fa:	000b      	movs	r3, r1
 80346fc:	22ff      	movs	r2, #255	; 0xff
 80346fe:	2185      	movs	r1, #133	; 0x85
 8034700:	4803      	ldr	r0, [pc, #12]	; (8034710 <logger_header+0x30>)
 8034702:	f7ff ff0c 	bl	803451e <alp_new_record>
        return True;
 8034706:	2001      	movs	r0, #1
 8034708:	e7f6      	b.n	80346f8 <logger_header+0x18>
 803470a:	46c0      	nop			; (mov r8, r8)
 803470c:	2000cbc4 	.word	0x2000cbc4
 8034710:	2000cbc8 	.word	0x2000cbc8

08034714 <sub_logmsg>:
}
#endif



void sub_logmsg(ot_int label_len, ot_int data_len, ot_u8* label, ot_u8* data) {
 8034714:	b570      	push	{r4, r5, r6, lr}
 8034716:	000d      	movs	r5, r1
 8034718:	0011      	movs	r1, r2
 803471a:	001c      	movs	r4, r3
	q_writestring(mpipe.alp.outq, label, label_len);
 803471c:	4e07      	ldr	r6, [pc, #28]	; (803473c <sub_logmsg+0x28>)
 803471e:	0002      	movs	r2, r0
 8034720:	6930      	ldr	r0, [r6, #16]
 8034722:	f000 f8f4 	bl	803490e <q_writestring>
    q_writebyte(mpipe.alp.outq, 0);
 8034726:	2100      	movs	r1, #0
 8034728:	6930      	ldr	r0, [r6, #16]
 803472a:	f000 f892 	bl	8034852 <q_writebyte>
    q_writestring(mpipe.alp.outq, data, data_len);
 803472e:	6930      	ldr	r0, [r6, #16]
 8034730:	002a      	movs	r2, r5
 8034732:	0021      	movs	r1, r4
 8034734:	f000 f8eb 	bl	803490e <q_writestring>
}
 8034738:	bd70      	pop	{r4, r5, r6, pc}
 803473a:	46c0      	nop			; (mov r8, r8)
 803473c:	2000cbc4 	.word	0x2000cbc4

08034740 <logger_msg>:
#endif



#ifndef EXTF_logger_msg
void logger_msg(logmsg_type logcmd, ot_int label_len, ot_int data_len, ot_u8* label, ot_u8* data) {
 8034740:	b5e0      	push	{r5, r6, r7, lr}
 8034742:	000e      	movs	r6, r1
 8034744:	0017      	movs	r7, r2
 8034746:	001d      	movs	r5, r3
/// Log a "Message" if it fits in the MPipe output queue.  A "Message" is a
/// text label, plus a space, plus a data payload.  The client should know how
/// to read-back Message data.  Check here for more information about messages:
/// http://www.indigresso.com/wiki/doku.php?id=opentag:otlib:logger

    ot_int payload_length = label_len + 1 + data_len;
 8034748:	1889      	adds	r1, r1, r2
 803474a:	3101      	adds	r1, #1
 803474c:	b209      	sxth	r1, r1
    //q_empty(mpipe.alp.outq);

    if (logger_header(logcmd, payload_length)) {
 803474e:	f7ff ffc7 	bl	80346e0 <logger_header>
 8034752:	2800      	cmp	r0, #0
 8034754:	d100      	bne.n	8034758 <logger_msg+0x18>
    	sub_logmsg(label_len, data_len, label, data);
    	mpipe_txschedule(0); //mpipe_send();
    }
}
 8034756:	bde0      	pop	{r5, r6, r7, pc}
    	sub_logmsg(label_len, data_len, label, data);
 8034758:	9b04      	ldr	r3, [sp, #16]
 803475a:	002a      	movs	r2, r5
 803475c:	0039      	movs	r1, r7
 803475e:	0030      	movs	r0, r6
 8034760:	f7ff ffd8 	bl	8034714 <sub_logmsg>
    	mpipe_txschedule(0); //mpipe_send();
 8034764:	2000      	movs	r0, #0
 8034766:	f000 fc75 	bl	8035054 <mpipe_txschedule>
}
 803476a:	e7f4      	b.n	8034756 <logger_msg+0x16>

0803476c <logger_direct>:
#endif



#ifndef EXTF_logger_direct
void logger_direct() {
 803476c:	b510      	push	{r4, lr}
/// Use this if you have already created a valid MPipe ALP/NDEF frame in the
/// MPipe output queue and all you want to do is log it.
    mpipe.alp.outq->getcursor[1] = q_span(mpipe.alp.outq) - 4;
 803476e:	4c06      	ldr	r4, [pc, #24]	; (8034788 <logger_direct+0x1c>)
 8034770:	6920      	ldr	r0, [r4, #16]
 8034772:	f000 f825 	bl	80347c0 <q_span>
 8034776:	6923      	ldr	r3, [r4, #16]
 8034778:	685b      	ldr	r3, [r3, #4]
 803477a:	3804      	subs	r0, #4
 803477c:	7058      	strb	r0, [r3, #1]
    mpipe_txschedule(0); //mpipe_send();
 803477e:	2000      	movs	r0, #0
 8034780:	f000 fc68 	bl	8035054 <mpipe_txschedule>
}
 8034784:	bd10      	pop	{r4, pc}
 8034786:	46c0      	nop			; (mov r8, r8)
 8034788:	2000cbc4 	.word	0x2000cbc4

0803478c <logger_code>:
#endif



#ifndef EXTF_logger_code
void logger_code(ot_int label_len, ot_u8* label, ot_u16 code) {
 803478c:	b570      	push	{r4, r5, r6, lr}
 803478e:	b084      	sub	sp, #16
 8034790:	0004      	movs	r4, r0
 8034792:	000d      	movs	r5, r1
 8034794:	260e      	movs	r6, #14
 8034796:	446e      	add	r6, sp
 8034798:	8032      	strh	r2, [r6, #0]
/// Emergency logging: Used for kernel panics or other such things.
    mpipedrv_kill();
 803479a:	f001 fb9d 	bl	8035ed8 <mpipedrv_kill>

    //code = PLATFORM_ENDIAN16(code);
    logger_msg(MSG_raw, label_len, 2, label, (ot_u8*)&code);
 803479e:	9600      	str	r6, [sp, #0]
 80347a0:	002b      	movs	r3, r5
 80347a2:	2202      	movs	r2, #2
 80347a4:	0021      	movs	r1, r4
 80347a6:	2004      	movs	r0, #4
 80347a8:	f7ff ffca 	bl	8034740 <logger_msg>
}
 80347ac:	b004      	add	sp, #16
 80347ae:	bd70      	pop	{r4, r5, r6, pc}

080347b0 <q_getcursor_val>:
  * ==================
  */

#ifndef EXTF_q_intrinsics
OT_INLINE ot_u8 q_getcursor_val(ot_queue* q, ot_int offset) {
    return q->getcursor[offset];
 80347b0:	6843      	ldr	r3, [r0, #4]
 80347b2:	5c58      	ldrb	r0, [r3, r1]
}
 80347b4:	4770      	bx	lr

080347b6 <q_length>:
  * ====================
  */

#ifndef EXTF_q_length
ot_int q_length(ot_queue* q) {
    return (q->putcursor - q->front);
 80347b6:	6883      	ldr	r3, [r0, #8]
 80347b8:	68c0      	ldr	r0, [r0, #12]
 80347ba:	1a18      	subs	r0, r3, r0
 80347bc:	b200      	sxth	r0, r0
}
 80347be:	4770      	bx	lr

080347c0 <q_span>:
#endif


#ifndef EXTF_q_span
ot_int q_span(ot_queue* q) {
    return (q->putcursor - q->getcursor);
 80347c0:	6883      	ldr	r3, [r0, #8]
 80347c2:	6840      	ldr	r0, [r0, #4]
 80347c4:	1a18      	subs	r0, r3, r0
 80347c6:	b200      	sxth	r0, r0
}
 80347c8:	4770      	bx	lr

080347ca <q_writespace>:
#endif


#ifndef EXTF_q_writespace
ot_int q_writespace(ot_queue* q) {
    return (q->back - q->putcursor);
 80347ca:	6903      	ldr	r3, [r0, #16]
 80347cc:	6880      	ldr	r0, [r0, #8]
 80347ce:	1a18      	subs	r0, r3, r0
 80347d0:	b200      	sxth	r0, r0
}
 80347d2:	4770      	bx	lr

080347d4 <q_readspace>:
#endif


#ifndef EXTF_q_readspace
ot_int q_readspace(ot_queue* q) {
    return (q->back - q->getcursor);
 80347d4:	6903      	ldr	r3, [r0, #16]
 80347d6:	6840      	ldr	r0, [r0, #4]
 80347d8:	1a18      	subs	r0, r3, r0
 80347da:	b200      	sxth	r0, r0
}
 80347dc:	4770      	bx	lr

080347de <q_blocktime>:
  * ==================================
  */

#ifndef EXTF_q_blocktime
OT_INLINE ot_uint q_blocktime(ot_queue* q) {
    return q->options.ushort;
 80347de:	8840      	ldrh	r0, [r0, #2]
}
 80347e0:	4770      	bx	lr

080347e2 <q_blockwrite>:
#endif

#ifndef EXTF_q_blockwrite
OT_INLINE void q_blockwrite(ot_queue* q, ot_uint blocktime) {
    q->options.ushort = blocktime;
 80347e2:	8041      	strh	r1, [r0, #2]
}
 80347e4:	4770      	bx	lr

080347e6 <q_lock>:
#endif

#ifndef EXTF_q_lock
void q_lock(ot_queue* q) {
 80347e6:	b510      	push	{r4, lr}
 80347e8:	0004      	movs	r4, r0
    while (q->options.ushort != 0) {
 80347ea:	e001      	b.n	80347f0 <q_lock+0xa>
        //    otthread_set_tmask( &(q->tmask), thandle );
        //    otthread_wait();
        //    otthread_clear_tmask( &(q->tmask), thandle );
        //}
        //else 
        {   delay_ti(q->options.ushort);
 80347ec:	f001 fa06 	bl	8035bfc <delay_ti>
    while (q->options.ushort != 0) {
 80347f0:	8860      	ldrh	r0, [r4, #2]
 80347f2:	2800      	cmp	r0, #0
 80347f4:	d1fa      	bne.n	80347ec <q_lock+0x6>
        }
    }
    q->options.ushort = 1;
 80347f6:	2301      	movs	r3, #1
 80347f8:	8063      	strh	r3, [r4, #2]
}
 80347fa:	bd10      	pop	{r4, pc}

080347fc <q_unlock>:
#endif

#ifndef EXTF_q_unlock
void q_unlock(ot_queue* q) {
    // otthread_release_any( &(q->tmask) );
    q->options.ushort = 0;
 80347fc:	2300      	movs	r3, #0
 80347fe:	8043      	strh	r3, [r0, #2]
}
 8034800:	4770      	bx	lr

08034802 <q_empty>:



#ifndef EXTF_q_empty
void q_empty(ot_queue* q) {
    q->options.ushort   = 0;
 8034802:	2300      	movs	r3, #0
 8034804:	8043      	strh	r3, [r0, #2]
    q->back             = q->front + q->alloc;
 8034806:	68c3      	ldr	r3, [r0, #12]
 8034808:	8802      	ldrh	r2, [r0, #0]
 803480a:	189a      	adds	r2, r3, r2
 803480c:	6102      	str	r2, [r0, #16]
    q->putcursor        = q->front;
 803480e:	6083      	str	r3, [r0, #8]
    q->getcursor        = q->front;
 8034810:	6043      	str	r3, [r0, #4]
}
 8034812:	4770      	bx	lr

08034814 <q_init>:
void q_init(ot_queue* q, void* buffer, ot_u16 alloc) {
 8034814:	b510      	push	{r4, lr}
    q->alloc    = alloc;
 8034816:	8002      	strh	r2, [r0, #0]
    q->front    = buffer;
 8034818:	60c1      	str	r1, [r0, #12]
    q->back     = buffer+alloc;
 803481a:	1889      	adds	r1, r1, r2
 803481c:	6101      	str	r1, [r0, #16]
    q_empty(q);
 803481e:	f7ff fff0 	bl	8034802 <q_empty>
}
 8034822:	bd10      	pop	{r4, pc}

08034824 <q_rewind>:
#endif


#ifndef EXTF_q_rewind
void q_rewind(ot_queue* q) {
 8034824:	b510      	push	{r4, lr}
 8034826:	0003      	movs	r3, r0
    ot_int dist = q->getcursor - q->front;
 8034828:	6841      	ldr	r1, [r0, #4]
 803482a:	68c0      	ldr	r0, [r0, #12]
 803482c:	1a0a      	subs	r2, r1, r0
 803482e:	b212      	sxth	r2, r2
    
    if (dist > 0) {
 8034830:	2a00      	cmp	r2, #0
 8034832:	dc00      	bgt.n	8034836 <q_rewind+0x12>
        q->putcursor   -= dist;
        q->getcursor    = q->front;
        
        memcpy(q->front, get, put-get);
    }
}
 8034834:	bd10      	pop	{r4, pc}
        ot_u8* put      = q->putcursor;
 8034836:	689c      	ldr	r4, [r3, #8]
        q->putcursor   -= dist;
 8034838:	1aa2      	subs	r2, r4, r2
 803483a:	609a      	str	r2, [r3, #8]
        q->getcursor    = q->front;
 803483c:	6058      	str	r0, [r3, #4]
        memcpy(q->front, get, put-get);
 803483e:	1a62      	subs	r2, r4, r1
 8034840:	b292      	uxth	r2, r2
 8034842:	f001 fa37 	bl	8035cb4 <ot_memcpy>
}
 8034846:	e7f5      	b.n	8034834 <q_rewind+0x10>

08034848 <q_markbyte>:
}
#endif


#ifndef EXTF_q_markbyte
ot_qcur q_markbyte(ot_queue* q, ot_int shift) {
 8034848:	0003      	movs	r3, r0
    ot_qcur output;
    output          = q->getcursor;
 803484a:	6840      	ldr	r0, [r0, #4]
    q->getcursor   += shift;
 803484c:	1841      	adds	r1, r0, r1
 803484e:	6059      	str	r1, [r3, #4]
    return output;
}
 8034850:	4770      	bx	lr

08034852 <q_writebyte>:
#endif


#ifndef EXTF_q_writebyte
void q_writebyte(ot_queue* q, ot_u8 byte_in) {
    *q->putcursor++ = byte_in;
 8034852:	6883      	ldr	r3, [r0, #8]
 8034854:	1c5a      	adds	r2, r3, #1
 8034856:	6082      	str	r2, [r0, #8]
 8034858:	7019      	strb	r1, [r3, #0]
}
 803485a:	4770      	bx	lr

0803485c <q_writeshort>:
#   if defined(__UNALIGNED_ACCESS__)
        *(ot_u16*)q->putcursor  = PLATFORM_ENDIAN16(short_in);
        q->putcursor           += 2;
#   else
        ot_u8* data     = (ot_u8*)&short_in;
        *q->putcursor++ = data[UPPER];
 803485c:	6883      	ldr	r3, [r0, #8]
 803485e:	1c5a      	adds	r2, r3, #1
 8034860:	6082      	str	r2, [r0, #8]
 8034862:	0a0a      	lsrs	r2, r1, #8
 8034864:	701a      	strb	r2, [r3, #0]
        *q->putcursor++ = data[LOWER];
 8034866:	6883      	ldr	r3, [r0, #8]
 8034868:	1c5a      	adds	r2, r3, #1
 803486a:	6082      	str	r2, [r0, #8]
 803486c:	7019      	strb	r1, [r3, #0]
#   endif
}
 803486e:	4770      	bx	lr

08034870 <q_writeshort_be>:
#   elif defined(__UNALIGNED_ACCESS__)
        *(ot_u16*)q->putcursor = short_in;
        q->putcursor          += 4;
#   else
        ot_u8* data     = (ot_u8*)&short_in;
        *q->putcursor++ = data[0];
 8034870:	6883      	ldr	r3, [r0, #8]
 8034872:	1c5a      	adds	r2, r3, #1
 8034874:	6082      	str	r2, [r0, #8]
 8034876:	7019      	strb	r1, [r3, #0]
        *q->putcursor++ = data[1];
 8034878:	6883      	ldr	r3, [r0, #8]
 803487a:	1c5a      	adds	r2, r3, #1
 803487c:	6082      	str	r2, [r0, #8]
 803487e:	0a09      	lsrs	r1, r1, #8
 8034880:	7019      	strb	r1, [r3, #0]
#   endif
}
 8034882:	4770      	bx	lr

08034884 <q_writelong>:
        *(ot_u32*)q->putcursor = PLATFORM_ENDIAN32(long_in);
        q->putcursor          += 4;
#   else
        ot_u8* data;
        data = (ot_u8*)&long_in;
        *q->putcursor++ = data[_B3];
 8034884:	6883      	ldr	r3, [r0, #8]
 8034886:	1c5a      	adds	r2, r3, #1
 8034888:	6082      	str	r2, [r0, #8]
 803488a:	0e0a      	lsrs	r2, r1, #24
 803488c:	701a      	strb	r2, [r3, #0]
        *q->putcursor++ = data[_B2];
 803488e:	6882      	ldr	r2, [r0, #8]
 8034890:	1c53      	adds	r3, r2, #1
 8034892:	6083      	str	r3, [r0, #8]
 8034894:	020b      	lsls	r3, r1, #8
 8034896:	0e1b      	lsrs	r3, r3, #24
 8034898:	7013      	strb	r3, [r2, #0]
        *q->putcursor++ = data[_B1];
 803489a:	6882      	ldr	r2, [r0, #8]
 803489c:	1c53      	adds	r3, r2, #1
 803489e:	6083      	str	r3, [r0, #8]
 80348a0:	040b      	lsls	r3, r1, #16
 80348a2:	0e1b      	lsrs	r3, r3, #24
 80348a4:	7013      	strb	r3, [r2, #0]
        *q->putcursor++ = data[_B0];
 80348a6:	6883      	ldr	r3, [r0, #8]
 80348a8:	1c5a      	adds	r2, r3, #1
 80348aa:	6082      	str	r2, [r0, #8]
 80348ac:	7019      	strb	r1, [r3, #0]
#   endif
}
 80348ae:	4770      	bx	lr

080348b0 <q_readbyte>:
#endif


#ifndef EXTF_q_readbyte
ot_u8 q_readbyte(ot_queue* q) {
    return *q->getcursor++;
 80348b0:	6843      	ldr	r3, [r0, #4]
 80348b2:	1c5a      	adds	r2, r3, #1
 80348b4:	6042      	str	r2, [r0, #4]
 80348b6:	7818      	ldrb	r0, [r3, #0]
}
 80348b8:	4770      	bx	lr

080348ba <q_readshort>:
        ot_u16 data     = *(ot_u16*)q->getcursor;
        q->getcursor   += 2;
        return PLATFORM_ENDIAN16(data);
#   else
        ot_uni16 data;
        data.ubyte[UPPER] = *q->getcursor++;
 80348ba:	6841      	ldr	r1, [r0, #4]
 80348bc:	1c4a      	adds	r2, r1, #1
 80348be:	6042      	str	r2, [r0, #4]
 80348c0:	780b      	ldrb	r3, [r1, #0]
        data.ubyte[LOWER] = *q->getcursor++;
 80348c2:	1c8a      	adds	r2, r1, #2
 80348c4:	6042      	str	r2, [r0, #4]
 80348c6:	784a      	ldrb	r2, [r1, #1]
 80348c8:	0218      	lsls	r0, r3, #8
        return data.ushort;
 80348ca:	4310      	orrs	r0, r2
#   endif
}
 80348cc:	4770      	bx	lr

080348ce <q_readshort_be>:
        ot_u16 data     = *(ot_u16*)q->getcursor;
        q->getcursor   += 2
        return data;
#   else
        ot_uni16 data;
        data.ubyte[0]   = *q->getcursor++;
 80348ce:	6841      	ldr	r1, [r0, #4]
 80348d0:	1c4b      	adds	r3, r1, #1
 80348d2:	6043      	str	r3, [r0, #4]
 80348d4:	780a      	ldrb	r2, [r1, #0]
        data.ubyte[1]   = *q->getcursor++;
 80348d6:	1c8b      	adds	r3, r1, #2
 80348d8:	6043      	str	r3, [r0, #4]
 80348da:	7848      	ldrb	r0, [r1, #1]
 80348dc:	0200      	lsls	r0, r0, #8
        return data.ushort;
 80348de:	4310      	orrs	r0, r2
#   endif
}
 80348e0:	4770      	bx	lr

080348e2 <q_readlong>:
#endif


#ifndef EXTF_q_readlong
ot_u32 q_readlong(ot_queue* q)  {
 80348e2:	b530      	push	{r4, r5, lr}
 80348e4:	0002      	movs	r2, r0
        ot_u32 data     = *(ot_u32*)q->getcursor;
        q->getcursor   += 4;
        return PLATFORM_ENDIAN32(data);
#   else
        ot_uni32 data;
        data.ubyte[_B3]  = *q->getcursor++;
 80348e6:	6840      	ldr	r0, [r0, #4]
 80348e8:	1c41      	adds	r1, r0, #1
 80348ea:	6051      	str	r1, [r2, #4]
 80348ec:	7803      	ldrb	r3, [r0, #0]
        data.ubyte[_B2]  = *q->getcursor++;
 80348ee:	1c84      	adds	r4, r0, #2
 80348f0:	6054      	str	r4, [r2, #4]
 80348f2:	7845      	ldrb	r5, [r0, #1]
 80348f4:	042d      	lsls	r5, r5, #16
 80348f6:	0618      	lsls	r0, r3, #24
        data.ubyte[_B1]  = *q->getcursor++;
 80348f8:	1c8b      	adds	r3, r1, #2
 80348fa:	6053      	str	r3, [r2, #4]
 80348fc:	7849      	ldrb	r1, [r1, #1]
 80348fe:	0209      	lsls	r1, r1, #8
 8034900:	4328      	orrs	r0, r5
        data.ubyte[_B0]  = *q->getcursor++;
 8034902:	1ca3      	adds	r3, r4, #2
 8034904:	6053      	str	r3, [r2, #4]
 8034906:	7863      	ldrb	r3, [r4, #1]
 8034908:	4308      	orrs	r0, r1
 803490a:	4318      	orrs	r0, r3
        return data.ulong;
#   endif
}
 803490c:	bd30      	pop	{r4, r5, pc}

0803490e <q_writestring>:
}
#endif


#ifndef EXTF_q_writestring
ot_int q_writestring(ot_queue* q, ot_u8* string, ot_int length) {
 803490e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034910:	0005      	movs	r5, r0
 8034912:	000e      	movs	r6, r1
 8034914:	1e17      	subs	r7, r2, #0
    ot_int limit;
    
    if (length <= 0) {
 8034916:	dd0f      	ble.n	8034938 <q_writestring+0x2a>
        return 0;
    }
    
    limit = q_writespace(q);
 8034918:	f7ff ff57 	bl	80347ca <q_writespace>
 803491c:	0004      	movs	r4, r0
    if (limit < length) {
 803491e:	4287      	cmp	r7, r0
 8034920:	dc00      	bgt.n	8034924 <q_writestring+0x16>
 8034922:	003c      	movs	r4, r7
        length = limit;
    } 

    ot_memcpy(q->putcursor, string, length);
 8034924:	b2a2      	uxth	r2, r4
 8034926:	0031      	movs	r1, r6
 8034928:	68a8      	ldr	r0, [r5, #8]
 803492a:	f001 f9c3 	bl	8035cb4 <ot_memcpy>
    q->putcursor += length;
 803492e:	68ab      	ldr	r3, [r5, #8]
 8034930:	191b      	adds	r3, r3, r4
 8034932:	60ab      	str	r3, [r5, #8]
    
    return length;
}
 8034934:	0020      	movs	r0, r4
 8034936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8034938:	2400      	movs	r4, #0
 803493a:	e7fb      	b.n	8034934 <q_writestring+0x26>

0803493c <q_movedata>:
#endif



#ifndef EXTF_q_movedata
ot_int q_movedata(ot_queue* qdst, ot_queue* qsrc, ot_int length) {
 803493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803493e:	0007      	movs	r7, r0
 8034940:	000e      	movs	r6, r1
 8034942:	1e14      	subs	r4, r2, #0
    ot_int writespace, readspace, limit;
    ot_u8* dst;
    ot_u8* src;

    if (length <= 0) {
 8034944:	dd1b      	ble.n	803497e <q_movedata+0x42>
        return 0;
    }
    
    writespace  = q_writespace(qdst);
 8034946:	f7ff ff40 	bl	80347ca <q_writespace>
 803494a:	0005      	movs	r5, r0
    readspace   = q_readspace(qsrc);
 803494c:	0030      	movs	r0, r6
 803494e:	f7ff ff41 	bl	80347d4 <q_readspace>
    limit       = (writespace < readspace) ? writespace : readspace;
 8034952:	1c2a      	adds	r2, r5, #0
 8034954:	4285      	cmp	r5, r0
 8034956:	dd00      	ble.n	803495a <q_movedata+0x1e>
 8034958:	1c02      	adds	r2, r0, #0
 803495a:	b213      	sxth	r3, r2
    if (limit < length) {
 803495c:	429c      	cmp	r4, r3
 803495e:	dd02      	ble.n	8034966 <q_movedata+0x2a>
        return length - limit;
 8034960:	1aa4      	subs	r4, r4, r2
 8034962:	b220      	sxth	r0, r4
    qdst->putcursor    += length;
    qsrc->getcursor    += length;
    ot_memcpy(dst, src, length);
    
    return length;
}
 8034964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dst                 = qdst->putcursor;
 8034966:	68b8      	ldr	r0, [r7, #8]
    src                 = qsrc->getcursor;
 8034968:	6871      	ldr	r1, [r6, #4]
    qdst->putcursor    += length;
 803496a:	1903      	adds	r3, r0, r4
 803496c:	60bb      	str	r3, [r7, #8]
    qsrc->getcursor    += length;
 803496e:	6873      	ldr	r3, [r6, #4]
 8034970:	191b      	adds	r3, r3, r4
 8034972:	6073      	str	r3, [r6, #4]
    ot_memcpy(dst, src, length);
 8034974:	b2a2      	uxth	r2, r4
 8034976:	f001 f99d 	bl	8035cb4 <ot_memcpy>
    return length;
 803497a:	0020      	movs	r0, r4
 803497c:	e7f2      	b.n	8034964 <q_movedata+0x28>
        return 0;
 803497e:	2000      	movs	r0, #0
 8034980:	e7f0      	b.n	8034964 <q_movedata+0x28>

08034982 <otutils_sig2_null>:


// Null Signals
void otutils_null(void)                     { }
void otutils_sig_null(ot_int a)             { }
void otutils_sig2_null(ot_int a, ot_int b)  { }
 8034982:	4770      	bx	lr

08034984 <otutils_calc_longtimeout>:

#ifndef EXTF_otutils_calc_longtimeout
ot_ulong otutils_calc_longtimeout(ot_u16 timeout_code) {
	ot_uint 	shift;
	ot_ulong    timeout;
	shift       = (timeout_code >> 8) & 0x001C;
 8034984:	0a03      	lsrs	r3, r0, #8
 8034986:	221c      	movs	r2, #28
 8034988:	401a      	ands	r2, r3
	timeout     = (timeout_code & 0x3FF);
 803498a:	0580      	lsls	r0, r0, #22
 803498c:	0d80      	lsrs	r0, r0, #22
	timeout    += (shift != 0);
 803498e:	0013      	movs	r3, r2
 8034990:	1e59      	subs	r1, r3, #1
 8034992:	418b      	sbcs	r3, r1
 8034994:	1818      	adds	r0, r3, r0
	timeout    *= (1 << shift);
 8034996:	4090      	lsls	r0, r2
	return timeout;
}
 8034998:	4770      	bx	lr

0803499a <otutils_calc_timeout>:
	return (exp << 10) + (ot_u8)timeout_ticks;
}
#endif

#ifndef EXTF_otutils_calc_timeout
ot_ulong otutils_calc_timeout(ot_u8 timeout_code) {
 803499a:	0002      	movs	r2, r0
	ot_uint		shift;
	ot_ulong    timeout;
	shift       = (timeout_code >> 3) & 0x000E;
 803499c:	08c3      	lsrs	r3, r0, #3
 803499e:	200e      	movs	r0, #14
 80349a0:	0001      	movs	r1, r0
 80349a2:	4019      	ands	r1, r3
	timeout     = (timeout_code & 0x0E);
 80349a4:	4002      	ands	r2, r0
	timeout    += (shift != 0);
 80349a6:	0008      	movs	r0, r1
 80349a8:	1e43      	subs	r3, r0, #1
 80349aa:	4198      	sbcs	r0, r3
 80349ac:	1880      	adds	r0, r0, r2
	timeout    *= (1 << shift);
 80349ae:	4088      	lsls	r0, r1
	return timeout;
}
 80349b0:	4770      	bx	lr

080349b2 <otutils_encode_timeout>:

#ifndef EXTF_otutils_encode_timeout
ot_u8 otutils_encode_timeout(ot_u16 timeout_ticks) {
	ot_uint exp;

	if (timeout_ticks < 0x10) {
 80349b2:	280f      	cmp	r0, #15
 80349b4:	d902      	bls.n	80349bc <otutils_encode_timeout+0xa>
		return (ot_u8)timeout_ticks;
	}

	exp 			= 1;
	timeout_ticks >>= 2;
 80349b6:	0882      	lsrs	r2, r0, #2
	exp 			= 1;
 80349b8:	2301      	movs	r3, #1

	while (timeout_ticks > 0x10) {
 80349ba:	e004      	b.n	80349c6 <otutils_encode_timeout+0x14>
		return (ot_u8)timeout_ticks;
 80349bc:	b2c0      	uxtb	r0, r0
 80349be:	e00a      	b.n	80349d6 <otutils_encode_timeout+0x24>
		exp += 2;
 80349c0:	3302      	adds	r3, #2
 80349c2:	b29b      	uxth	r3, r3
		timeout_ticks >>= 4;
 80349c4:	0912      	lsrs	r2, r2, #4
	while (timeout_ticks > 0x10) {
 80349c6:	2a10      	cmp	r2, #16
 80349c8:	d8fa      	bhi.n	80349c0 <otutils_encode_timeout+0xe>
	}
	timeout_ticks--;
 80349ca:	3a01      	subs	r2, #1

	return (exp << 4) + (ot_u8)timeout_ticks;
 80349cc:	0118      	lsls	r0, r3, #4
 80349ce:	b2c0      	uxtb	r0, r0
 80349d0:	b2d2      	uxtb	r2, r2
 80349d2:	1880      	adds	r0, r0, r2
 80349d4:	b2c0      	uxtb	r0, r0
}
 80349d6:	4770      	bx	lr

080349d8 <sub_gfb_new>:
                        GFB_Header_START_USER,
                        GFB_NUM_USER_FILES   );
#else
    return NULL;
#endif
}
 80349d8:	2000      	movs	r0, #0
 80349da:	4770      	bx	lr

080349dc <sub_iss_new>:
                        ISS_Header_START_USER,
                        ISS_NUM_USER_CODES   );
#else
    return NULL;
#endif
}
 80349dc:	2000      	movs	r0, #0
 80349de:	4770      	bx	lr

080349e0 <sub_isf_new>:
                        ISF_Header_START_USER,
                        ISF_NUM_USER_FILES );
#else
    return NULL;
#endif
}
 80349e0:	2000      	movs	r0, #0
 80349e2:	4770      	bx	lr

080349e4 <sub_gfb_delete_check>:
#if ((OT_FEATURE(VLNEW) == ENABLED) && ((GFB_HEAP_BYTES > 0) && (GFB_NUM_USER_FILES > 0)))
    return ( id > GFB_NUM_STOCK_FILES );
#else
    return 0;
#endif
}
 80349e4:	2000      	movs	r0, #0
 80349e6:	4770      	bx	lr

080349e8 <sub_iss_delete_check>:
#if ((OT_FEATURE(VLNEW) == ENABLED) && (ISS_NUM_USER_CODES > 0))
    return ( id >= ISS_ID_extended_service);
#else
    return 0;
#endif
}
 80349e8:	2000      	movs	r0, #0
 80349ea:	4770      	bx	lr

080349ec <sub_isf_delete_check>:
    return ((id >= (ISF_NUM_M1_FILES+ISF_NUM_M2_FILES)) && \
            (id < (256-ISF_NUM_EXT_FILES)) );
#else
    return 0;
#endif
}
 80349ec:	2000      	movs	r0, #0
 80349ee:	4770      	bx	lr

080349f0 <sub_new_fp>:

static vlFILE* sub_new_fp() {
#if (OT_PARAM(VLFPS) < 8)
    ot_int fd;

    for (fd=0; fd<OT_PARAM(VLFPS); fd++) {
 80349f0:	2300      	movs	r3, #0
 80349f2:	e001      	b.n	80349f8 <sub_new_fp+0x8>
 80349f4:	3301      	adds	r3, #1
 80349f6:	b21b      	sxth	r3, r3
 80349f8:	2b02      	cmp	r3, #2
 80349fa:	dc0a      	bgt.n	8034a12 <sub_new_fp+0x22>
        if (vlfile[fd].read == NULL)
 80349fc:	009a      	lsls	r2, r3, #2
 80349fe:	18d2      	adds	r2, r2, r3
 8034a00:	0091      	lsls	r1, r2, #2
 8034a02:	4a05      	ldr	r2, [pc, #20]	; (8034a18 <sub_new_fp+0x28>)
 8034a04:	1852      	adds	r2, r2, r1
 8034a06:	68d2      	ldr	r2, [r2, #12]
 8034a08:	2a00      	cmp	r2, #0
 8034a0a:	d1f3      	bne.n	80349f4 <sub_new_fp+0x4>
            return &vlfile[fd];
 8034a0c:	4802      	ldr	r0, [pc, #8]	; (8034a18 <sub_new_fp+0x28>)
 8034a0e:	1840      	adds	r0, r0, r1
 8034a10:	e000      	b.n	8034a14 <sub_new_fp+0x24>
    }
#else
        ///@todo do a binary search
#endif

    return NULL;
 8034a12:	2000      	movs	r0, #0
}
 8034a14:	4770      	bx	lr
 8034a16:	46c0      	nop			; (mov r8, r8)
 8034a18:	2000cb68 	.word	0x2000cb68

08034a1c <sub_write_header>:
        header += 2;
    }
}


static void sub_write_header(vaddr header, ot_u16* data, ot_uint length ) {
 8034a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034a1e:	0007      	movs	r7, r0
 8034a20:	000d      	movs	r5, r1
 8034a22:	0016      	movs	r6, r2
    ot_int i;

    for (i=0; i<length; i+=2, data++) {
 8034a24:	2300      	movs	r3, #0
 8034a26:	e008      	b.n	8034a3a <sub_write_header+0x1e>
        vworm_write( (header+i), *data);
 8034a28:	b29c      	uxth	r4, r3
 8034a2a:	8829      	ldrh	r1, [r5, #0]
 8034a2c:	19e0      	adds	r0, r4, r7
 8034a2e:	b280      	uxth	r0, r0
 8034a30:	f001 fcfc 	bl	803642c <vworm_write>
    for (i=0; i<length; i+=2, data++) {
 8034a34:	3402      	adds	r4, #2
 8034a36:	b223      	sxth	r3, r4
 8034a38:	3502      	adds	r5, #2
 8034a3a:	42b3      	cmp	r3, r6
 8034a3c:	dbf4      	blt.n	8034a28 <sub_write_header+0xc>
    }
}
 8034a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08034a40 <sub_header_search>:
static vaddr sub_header_search(vaddr header, ot_u8 search_id, ot_int num_headers) {
 8034a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034a42:	0005      	movs	r5, r0
 8034a44:	000f      	movs	r7, r1
 8034a46:	0016      	movs	r6, r2
    for (; num_headers > 0; num_headers--) {
 8034a48:	e003      	b.n	8034a52 <sub_header_search+0x12>
        header += OCTETS_IN_vl_header_t;
 8034a4a:	3510      	adds	r5, #16
 8034a4c:	b2ad      	uxth	r5, r5
    for (; num_headers > 0; num_headers--) {
 8034a4e:	3e01      	subs	r6, #1
 8034a50:	b236      	sxth	r6, r6
 8034a52:	2e00      	cmp	r6, #0
 8034a54:	dd12      	ble.n	8034a7c <sub_header_search+0x3c>
        ot_u16 base     = vworm_read(header + 6);
 8034a56:	1da8      	adds	r0, r5, #6
 8034a58:	b280      	uxth	r0, r0
 8034a5a:	f001 fcdf 	bl	803641c <vworm_read>
 8034a5e:	0004      	movs	r4, r0
        idmod.ushort    = vworm_read(header + 4);
 8034a60:	1d28      	adds	r0, r5, #4
 8034a62:	b280      	uxth	r0, r0
 8034a64:	f001 fcda 	bl	803641c <vworm_read>
        if ( base != 0 && base != 0xFFFF) {
 8034a68:	3c01      	subs	r4, #1
 8034a6a:	b2a4      	uxth	r4, r4
 8034a6c:	4b04      	ldr	r3, [pc, #16]	; (8034a80 <sub_header_search+0x40>)
 8034a6e:	429c      	cmp	r4, r3
 8034a70:	d8eb      	bhi.n	8034a4a <sub_header_search+0xa>
            if (idmod.ubyte[0] == search_id)
 8034a72:	b2c0      	uxtb	r0, r0
 8034a74:	4287      	cmp	r7, r0
 8034a76:	d1e8      	bne.n	8034a4a <sub_header_search+0xa>
                return header;
 8034a78:	0028      	movs	r0, r5
 8034a7a:	e000      	b.n	8034a7e <sub_header_search+0x3e>
    return NULL_vaddr;
 8034a7c:	4801      	ldr	r0, [pc, #4]	; (8034a84 <sub_header_search+0x44>)
}
 8034a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8034a80:	0000fffd 	.word	0x0000fffd
 8034a84:	0000ffff 	.word	0x0000ffff

08034a88 <sub_isf_search>:
static vaddr sub_isf_search(ot_u8 id) {
 8034a88:	b510      	push	{r4, lr}
    if ( (id >= ISF_NUM_STOCK_FILES) && (id < (256-ISF_NUM_EXT_FILES)) ) {
 8034a8a:	0003      	movs	r3, r0
 8034a8c:	3b19      	subs	r3, #25
 8034a8e:	b2db      	uxtb	r3, r3
 8034a90:	2be5      	cmp	r3, #229	; 0xe5
 8034a92:	d905      	bls.n	8034aa0 <sub_isf_search+0x18>
    if (id > (255-ISF_NUM_EXT_FILES)) {
 8034a94:	28ff      	cmp	r0, #255	; 0xff
 8034a96:	d00a      	beq.n	8034aae <sub_isf_search+0x26>
    return (OCTETS_IN_vl_header_t * id) + ISF_Header_START;
 8034a98:	300e      	adds	r0, #14
 8034a9a:	0100      	lsls	r0, r0, #4
 8034a9c:	b280      	uxth	r0, r0
}
 8034a9e:	bd10      	pop	{r4, pc}
        return sub_header_search(ISF_Header_START_USER, id, ISF_NUM_USER_FILES);
 8034aa0:	239c      	movs	r3, #156	; 0x9c
 8034aa2:	2200      	movs	r2, #0
 8034aa4:	0001      	movs	r1, r0
 8034aa6:	0098      	lsls	r0, r3, #2
 8034aa8:	f7ff ffca 	bl	8034a40 <sub_header_search>
 8034aac:	e7f7      	b.n	8034a9e <sub_isf_search+0x16>
        id = (ot_u8)((ot_int)ISF_NUM_STOCK_FILES + (255-id));
 8034aae:	2118      	movs	r1, #24
 8034ab0:	1a08      	subs	r0, r1, r0
 8034ab2:	b2c0      	uxtb	r0, r0
 8034ab4:	e7f0      	b.n	8034a98 <sub_isf_search+0x10>

08034ab6 <sub_iss_search>:
static vaddr sub_iss_search(ot_u8 id) {
 8034ab6:	b510      	push	{r4, lr}
 8034ab8:	0001      	movs	r1, r0
    return sub_header_search( ISS_Header_START, id, ISS_NUM_FILES );
 8034aba:	220c      	movs	r2, #12
 8034abc:	2020      	movs	r0, #32
 8034abe:	f7ff ffbf 	bl	8034a40 <sub_header_search>
}
 8034ac2:	bd10      	pop	{r4, pc}

08034ac4 <sub_gfb_search>:
static vaddr sub_gfb_search(ot_u8 id) {
 8034ac4:	b510      	push	{r4, lr}
 8034ac6:	0001      	movs	r1, r0
    return sub_header_search( GFB_Header_START, id, GFB_NUM_USER_FILES );
 8034ac8:	2200      	movs	r2, #0
 8034aca:	2020      	movs	r0, #32
 8034acc:	f7ff ffb8 	bl	8034a40 <sub_header_search>
}
 8034ad0:	bd10      	pop	{r4, pc}
	...

08034ad4 <sub_action>:
static ot_u8 sub_action(vlFILE* fp) {
 8034ad4:	b510      	push	{r4, lr}
 8034ad6:	0004      	movs	r4, r0
    select = vworm_read(fp->header+10) >> 8;        ///@todo this is little endian only
 8034ad8:	8800      	ldrh	r0, [r0, #0]
 8034ada:	300a      	adds	r0, #10
 8034adc:	b280      	uxth	r0, r0
 8034ade:	f001 fc9d 	bl	803641c <vworm_read>
 8034ae2:	0a03      	lsrs	r3, r0, #8
 8034ae4:	b29b      	uxth	r3, r3
    if (select < OT_PARAM(VLACTIONS)) {
 8034ae6:	2b07      	cmp	r3, #7
 8034ae8:	d806      	bhi.n	8034af8 <sub_action+0x24>
        retval = vlaction[select](fp);
 8034aea:	009b      	lsls	r3, r3, #2
 8034aec:	4a03      	ldr	r2, [pc, #12]	; (8034afc <sub_action+0x28>)
 8034aee:	589b      	ldr	r3, [r3, r2]
 8034af0:	0020      	movs	r0, r4
 8034af2:	4798      	blx	r3
 8034af4:	b2c0      	uxtb	r0, r0
}
 8034af6:	bd10      	pop	{r4, pc}
    ot_u8 retval = 0;
 8034af8:	2000      	movs	r0, #0
 8034afa:	e7fc      	b.n	8034af6 <sub_action+0x22>
 8034afc:	2000cb40 	.word	0x2000cb40

08034b00 <sub_delete_file>:
static void sub_delete_file(vaddr del_header) {
 8034b00:	b570      	push	{r4, r5, r6, lr}
 8034b02:	0004      	movs	r4, r0
    header_alloc    = (ot_u16)vworm_read(del_header+2);
 8034b04:	1c85      	adds	r5, r0, #2
 8034b06:	b2ad      	uxth	r5, r5
 8034b08:	0028      	movs	r0, r5
 8034b0a:	f001 fc87 	bl	803641c <vworm_read>
 8034b0e:	0006      	movs	r6, r0
    header_base     = (vaddr)vworm_read(del_header+6);
 8034b10:	3406      	adds	r4, #6
 8034b12:	b2a4      	uxth	r4, r4
 8034b14:	0020      	movs	r0, r4
 8034b16:	f001 fc81 	bl	803641c <vworm_read>
    vworm_wipeblock(header_base, header_alloc);
 8034b1a:	0031      	movs	r1, r6
 8034b1c:	f001 fc92 	bl	8036444 <vworm_wipeblock>
    vworm_mark((del_header+2), 0);                //alloc
 8034b20:	2100      	movs	r1, #0
 8034b22:	0028      	movs	r0, r5
 8034b24:	f001 fc8a 	bl	803643c <vworm_mark>
    vworm_mark((del_header+6), NULL_vaddr);       //base
 8034b28:	4902      	ldr	r1, [pc, #8]	; (8034b34 <sub_delete_file+0x34>)
 8034b2a:	0020      	movs	r0, r4
 8034b2c:	f001 fc86 	bl	803643c <vworm_mark>
}
 8034b30:	bd70      	pop	{r4, r5, r6, pc}
 8034b32:	46c0      	nop			; (mov r8, r8)
 8034b34:	0000ffff 	.word	0x0000ffff

08034b38 <vl_new>:
OT_WEAK ot_u8 vl_new(vlFILE** fp_new, vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, ot_uint max_length, const id_tmpl* user_id) {
 8034b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8034b3a:	46c6      	mov	lr, r8
 8034b3c:	b500      	push	{lr}
 8034b3e:	b082      	sub	sp, #8
 8034b40:	0005      	movs	r5, r0
 8034b42:	000c      	movs	r4, r1
 8034b44:	0017      	movs	r7, r2
 8034b46:	9301      	str	r3, [sp, #4]
 8034b48:	ab08      	add	r3, sp, #32
 8034b4a:	881b      	ldrh	r3, [r3, #0]
 8034b4c:	4698      	mov	r8, r3
    if (user_id != NULL) {
 8034b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8034b50:	2b00      	cmp	r3, #0
 8034b52:	d006      	beq.n	8034b62 <vl_new+0x2a>
        if ( auth_check(VL_ACCESS_USER, VL_ACCESS_W, user_id) == 0 ) {
 8034b54:	001a      	movs	r2, r3
 8034b56:	2112      	movs	r1, #18
 8034b58:	2038      	movs	r0, #56	; 0x38
 8034b5a:	f7ff fd4b 	bl	80345f4 <auth_check>
 8034b5e:	2800      	cmp	r0, #0
 8034b60:	d034      	beq.n	8034bcc <vl_new+0x94>
    block_id--;
 8034b62:	3c01      	subs	r4, #1
 8034b64:	b2e4      	uxtb	r4, r4
    switch (block_id) {
 8034b66:	2c01      	cmp	r4, #1
 8034b68:	d02a      	beq.n	8034bc0 <vl_new+0x88>
 8034b6a:	2c02      	cmp	r4, #2
 8034b6c:	d02b      	beq.n	8034bc6 <vl_new+0x8e>
 8034b6e:	2c00      	cmp	r4, #0
 8034b70:	d004      	beq.n	8034b7c <vl_new+0x44>
 8034b72:	20ff      	movs	r0, #255	; 0xff
}
 8034b74:	b002      	add	sp, #8
 8034b76:	bc80      	pop	{r7}
 8034b78:	46b8      	mov	r8, r7
 8034b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (block_id) {
 8034b7c:	4e16      	ldr	r6, [pc, #88]	; (8034bd8 <vl_new+0xa0>)
 8034b7e:	4b17      	ldr	r3, [pc, #92]	; (8034bdc <vl_new+0xa4>)
    header = search_fn(data_id);
 8034b80:	0038      	movs	r0, r7
 8034b82:	4798      	blx	r3
    if (header != NULL_vaddr) {
 8034b84:	4b16      	ldr	r3, [pc, #88]	; (8034be0 <vl_new+0xa8>)
 8034b86:	4298      	cmp	r0, r3
 8034b88:	d122      	bne.n	8034bd0 <vl_new+0x98>
    *fp_new = new_fn(data_id, mod, max_length);
 8034b8a:	4643      	mov	r3, r8
 8034b8c:	b2da      	uxtb	r2, r3
 8034b8e:	9901      	ldr	r1, [sp, #4]
 8034b90:	0038      	movs	r0, r7
 8034b92:	47b0      	blx	r6
 8034b94:	6028      	str	r0, [r5, #0]
    if (*fp_new == NULL) {
 8034b96:	2800      	cmp	r0, #0
 8034b98:	d01c      	beq.n	8034bd4 <vl_new+0x9c>
        block[block_id].files  += 1;
 8034b9a:	4b12      	ldr	r3, [pc, #72]	; (8034be4 <vl_new+0xac>)
 8034b9c:	0062      	lsls	r2, r4, #1
 8034b9e:	1912      	adds	r2, r2, r4
 8034ba0:	0052      	lsls	r2, r2, #1
 8034ba2:	1d9c      	adds	r4, r3, #6
 8034ba4:	18a4      	adds	r4, r4, r2
 8034ba6:	7921      	ldrb	r1, [r4, #4]
 8034ba8:	7963      	ldrb	r3, [r4, #5]
 8034baa:	021b      	lsls	r3, r3, #8
 8034bac:	430b      	orrs	r3, r1
 8034bae:	3301      	adds	r3, #1
 8034bb0:	b29a      	uxth	r2, r3
 8034bb2:	21ff      	movs	r1, #255	; 0xff
 8034bb4:	400b      	ands	r3, r1
 8034bb6:	7123      	strb	r3, [r4, #4]
 8034bb8:	0a12      	lsrs	r2, r2, #8
 8034bba:	7162      	strb	r2, [r4, #5]
    return 0;
 8034bbc:	2000      	movs	r0, #0
 8034bbe:	e7d9      	b.n	8034b74 <vl_new+0x3c>
                new_fn      = &sub_iss_new;
 8034bc0:	4e09      	ldr	r6, [pc, #36]	; (8034be8 <vl_new+0xb0>)
        case 1: search_fn   = &sub_iss_search;
 8034bc2:	4b0a      	ldr	r3, [pc, #40]	; (8034bec <vl_new+0xb4>)
 8034bc4:	e7dc      	b.n	8034b80 <vl_new+0x48>
                new_fn      = &sub_isf_new;
 8034bc6:	4e0a      	ldr	r6, [pc, #40]	; (8034bf0 <vl_new+0xb8>)
        case 2: search_fn   = &sub_isf_search;
 8034bc8:	4b0a      	ldr	r3, [pc, #40]	; (8034bf4 <vl_new+0xbc>)
 8034bca:	e7d9      	b.n	8034b80 <vl_new+0x48>
            return 0x04;
 8034bcc:	2004      	movs	r0, #4
 8034bce:	e7d1      	b.n	8034b74 <vl_new+0x3c>
        return 0x02;
 8034bd0:	2002      	movs	r0, #2
 8034bd2:	e7cf      	b.n	8034b74 <vl_new+0x3c>
        return 0x06;
 8034bd4:	2006      	movs	r0, #6
 8034bd6:	e7cd      	b.n	8034b74 <vl_new+0x3c>
 8034bd8:	080349d9 	.word	0x080349d9
 8034bdc:	08034ac5 	.word	0x08034ac5
 8034be0:	0000ffff 	.word	0x0000ffff
 8034be4:	2000cba4 	.word	0x2000cba4
 8034be8:	080349dd 	.word	0x080349dd
 8034bec:	08034ab7 	.word	0x08034ab7
 8034bf0:	080349e1 	.word	0x080349e1
 8034bf4:	08034a89 	.word	0x08034a89

08034bf8 <vl_delete>:
OT_WEAK ot_u8 vl_delete(vlBLOCK block_id, ot_u8 data_id, const id_tmpl* user_id) {
 8034bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034bfa:	000d      	movs	r5, r1
 8034bfc:	0016      	movs	r6, r2
    block_id--;
 8034bfe:	3801      	subs	r0, #1
 8034c00:	b2c4      	uxtb	r4, r0
    switch (block_id) {
 8034c02:	2c01      	cmp	r4, #1
 8034c04:	d035      	beq.n	8034c72 <vl_delete+0x7a>
 8034c06:	2c02      	cmp	r4, #2
 8034c08:	d036      	beq.n	8034c78 <vl_delete+0x80>
 8034c0a:	2c00      	cmp	r4, #0
 8034c0c:	d001      	beq.n	8034c12 <vl_delete+0x1a>
 8034c0e:	20ff      	movs	r0, #255	; 0xff
}
 8034c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (block_id) {
 8034c12:	4b1d      	ldr	r3, [pc, #116]	; (8034c88 <vl_delete+0x90>)
 8034c14:	4f1d      	ldr	r7, [pc, #116]	; (8034c8c <vl_delete+0x94>)
    if (check_fn(data_id) != 0) {
 8034c16:	0028      	movs	r0, r5
 8034c18:	4798      	blx	r3
 8034c1a:	2800      	cmp	r0, #0
 8034c1c:	d02f      	beq.n	8034c7e <vl_delete+0x86>
        header = search_fn(data_id);
 8034c1e:	0028      	movs	r0, r5
 8034c20:	47b8      	blx	r7
 8034c22:	0005      	movs	r5, r0
    if (header == NULL_vaddr) {
 8034c24:	4b1a      	ldr	r3, [pc, #104]	; (8034c90 <vl_delete+0x98>)
 8034c26:	4298      	cmp	r0, r3
 8034c28:	d029      	beq.n	8034c7e <vl_delete+0x86>
    if (user_id != NULL) {
 8034c2a:	2e00      	cmp	r6, #0
 8034c2c:	d00b      	beq.n	8034c46 <vl_delete+0x4e>
        filemod.ushort = vworm_read(header + 4);
 8034c2e:	3004      	adds	r0, #4
 8034c30:	b280      	uxth	r0, r0
 8034c32:	f001 fbf3 	bl	803641c <vworm_read>
        if ( auth_check(filemod.ubyte[1], VL_ACCESS_RW, user_id) == 0 ) {
 8034c36:	0400      	lsls	r0, r0, #16
 8034c38:	0e00      	lsrs	r0, r0, #24
 8034c3a:	0032      	movs	r2, r6
 8034c3c:	2136      	movs	r1, #54	; 0x36
 8034c3e:	f7ff fcd9 	bl	80345f4 <auth_check>
 8034c42:	2800      	cmp	r0, #0
 8034c44:	d01d      	beq.n	8034c82 <vl_delete+0x8a>
    sub_delete_file(header);
 8034c46:	0028      	movs	r0, r5
 8034c48:	f7ff ff5a 	bl	8034b00 <sub_delete_file>
        block[block_id].files  -= 1;
 8034c4c:	4b11      	ldr	r3, [pc, #68]	; (8034c94 <vl_delete+0x9c>)
 8034c4e:	0060      	lsls	r0, r4, #1
 8034c50:	1900      	adds	r0, r0, r4
 8034c52:	0040      	lsls	r0, r0, #1
 8034c54:	1d9c      	adds	r4, r3, #6
 8034c56:	1824      	adds	r4, r4, r0
 8034c58:	7921      	ldrb	r1, [r4, #4]
 8034c5a:	7963      	ldrb	r3, [r4, #5]
 8034c5c:	021b      	lsls	r3, r3, #8
 8034c5e:	430b      	orrs	r3, r1
 8034c60:	3b01      	subs	r3, #1
 8034c62:	b29a      	uxth	r2, r3
 8034c64:	21ff      	movs	r1, #255	; 0xff
 8034c66:	400b      	ands	r3, r1
 8034c68:	7123      	strb	r3, [r4, #4]
 8034c6a:	0a12      	lsrs	r2, r2, #8
 8034c6c:	7162      	strb	r2, [r4, #5]
    return 0;
 8034c6e:	2000      	movs	r0, #0
 8034c70:	e7ce      	b.n	8034c10 <vl_delete+0x18>
        case 1: check_fn    = &sub_iss_delete_check;
 8034c72:	4b09      	ldr	r3, [pc, #36]	; (8034c98 <vl_delete+0xa0>)
                search_fn   = &sub_iss_search;
 8034c74:	4f09      	ldr	r7, [pc, #36]	; (8034c9c <vl_delete+0xa4>)
 8034c76:	e7ce      	b.n	8034c16 <vl_delete+0x1e>
        case 2: check_fn    = &sub_isf_delete_check;
 8034c78:	4b09      	ldr	r3, [pc, #36]	; (8034ca0 <vl_delete+0xa8>)
                search_fn   = &sub_isf_search;
 8034c7a:	4f0a      	ldr	r7, [pc, #40]	; (8034ca4 <vl_delete+0xac>)
 8034c7c:	e7cb      	b.n	8034c16 <vl_delete+0x1e>
        return 0x01;
 8034c7e:	2001      	movs	r0, #1
 8034c80:	e7c6      	b.n	8034c10 <vl_delete+0x18>
            return 0x04;
 8034c82:	3004      	adds	r0, #4
 8034c84:	e7c4      	b.n	8034c10 <vl_delete+0x18>
 8034c86:	46c0      	nop			; (mov r8, r8)
 8034c88:	080349e5 	.word	0x080349e5
 8034c8c:	08034ac5 	.word	0x08034ac5
 8034c90:	0000ffff 	.word	0x0000ffff
 8034c94:	2000cba4 	.word	0x2000cba4
 8034c98:	080349e9 	.word	0x080349e9
 8034c9c:	08034ab7 	.word	0x08034ab7
 8034ca0:	080349ed 	.word	0x080349ed
 8034ca4:	08034a89 	.word	0x08034a89

08034ca8 <vl_getheader_vaddr>:
OT_WEAK ot_u8 vl_getheader_vaddr(vaddr* header, vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 8034ca8:	b570      	push	{r4, r5, r6, lr}
 8034caa:	0004      	movs	r4, r0
 8034cac:	0010      	movs	r0, r2
 8034cae:	001d      	movs	r5, r3
    switch (block_id) {
 8034cb0:	2902      	cmp	r1, #2
 8034cb2:	d01d      	beq.n	8034cf0 <vl_getheader_vaddr+0x48>
 8034cb4:	2903      	cmp	r1, #3
 8034cb6:	d01f      	beq.n	8034cf8 <vl_getheader_vaddr+0x50>
 8034cb8:	2901      	cmp	r1, #1
 8034cba:	d001      	beq.n	8034cc0 <vl_getheader_vaddr+0x18>
 8034cbc:	20ff      	movs	r0, #255	; 0xff
}
 8034cbe:	bd70      	pop	{r4, r5, r6, pc}
        case VL_GFB_BLOCKID:    *header = sub_gfb_search(data_id);      break;
 8034cc0:	f7ff ff00 	bl	8034ac4 <sub_gfb_search>
 8034cc4:	8020      	strh	r0, [r4, #0]
    if (*header == NULL_vaddr) {
 8034cc6:	8820      	ldrh	r0, [r4, #0]
 8034cc8:	4b10      	ldr	r3, [pc, #64]	; (8034d0c <vl_getheader_vaddr+0x64>)
 8034cca:	4298      	cmp	r0, r3
 8034ccc:	d01a      	beq.n	8034d04 <vl_getheader_vaddr+0x5c>
    if (user_id != NULL) {
 8034cce:	9b04      	ldr	r3, [sp, #16]
 8034cd0:	2b00      	cmp	r3, #0
 8034cd2:	d019      	beq.n	8034d08 <vl_getheader_vaddr+0x60>
        filemod.ushort = vworm_read(*header + 4);
 8034cd4:	3004      	adds	r0, #4
 8034cd6:	b280      	uxth	r0, r0
 8034cd8:	f001 fba0 	bl	803641c <vworm_read>
        if ( auth_check(filemod.ubyte[1], mod, user_id) == 0 ) {
 8034cdc:	0400      	lsls	r0, r0, #16
 8034cde:	0e00      	lsrs	r0, r0, #24
 8034ce0:	9a04      	ldr	r2, [sp, #16]
 8034ce2:	0029      	movs	r1, r5
 8034ce4:	f7ff fc86 	bl	80345f4 <auth_check>
 8034ce8:	2800      	cmp	r0, #0
 8034cea:	d009      	beq.n	8034d00 <vl_getheader_vaddr+0x58>
    return 0;
 8034cec:	2000      	movs	r0, #0
 8034cee:	e7e6      	b.n	8034cbe <vl_getheader_vaddr+0x16>
        case VL_ISS_BLOCKID:    *header = sub_iss_search(data_id);     break;
 8034cf0:	f7ff fee1 	bl	8034ab6 <sub_iss_search>
 8034cf4:	8020      	strh	r0, [r4, #0]
 8034cf6:	e7e6      	b.n	8034cc6 <vl_getheader_vaddr+0x1e>
        case VL_ISF_BLOCKID:    *header = sub_isf_search(data_id);      break;
 8034cf8:	f7ff fec6 	bl	8034a88 <sub_isf_search>
 8034cfc:	8020      	strh	r0, [r4, #0]
 8034cfe:	e7e2      	b.n	8034cc6 <vl_getheader_vaddr+0x1e>
            return 0x04;
 8034d00:	3004      	adds	r0, #4
 8034d02:	e7dc      	b.n	8034cbe <vl_getheader_vaddr+0x16>
        return 0x01;
 8034d04:	2001      	movs	r0, #1
 8034d06:	e7da      	b.n	8034cbe <vl_getheader_vaddr+0x16>
    return 0;
 8034d08:	2000      	movs	r0, #0
 8034d0a:	e7d8      	b.n	8034cbe <vl_getheader_vaddr+0x16>
 8034d0c:	0000ffff 	.word	0x0000ffff

08034d10 <vl_open_file>:
OT_WEAK vlFILE* vl_open_file(vaddr header) {
 8034d10:	b570      	push	{r4, r5, r6, lr}
 8034d12:	0005      	movs	r5, r0
    fp = sub_new_fp();
 8034d14:	f7ff fe6c 	bl	80349f0 <sub_new_fp>
 8034d18:	1e04      	subs	r4, r0, #0
    if (fp != NULL) {
 8034d1a:	d01e      	beq.n	8034d5a <vl_open_file+0x4a>
        fp->header  = header;
 8034d1c:	8005      	strh	r5, [r0, #0]
        fp->alloc   = vworm_read(header + 2);               //alloc
 8034d1e:	1ca8      	adds	r0, r5, #2
 8034d20:	b280      	uxth	r0, r0
 8034d22:	f001 fb7b 	bl	803641c <vworm_read>
 8034d26:	80a0      	strh	r0, [r4, #4]
        fp->idmod   = vworm_read(header + 4);
 8034d28:	1d28      	adds	r0, r5, #4
 8034d2a:	b280      	uxth	r0, r0
 8034d2c:	f001 fb76 	bl	803641c <vworm_read>
 8034d30:	80e0      	strh	r0, [r4, #6]
        fp->start   = vworm_read(header + 8);               //mirror base addr
 8034d32:	0028      	movs	r0, r5
 8034d34:	3008      	adds	r0, #8
 8034d36:	b280      	uxth	r0, r0
 8034d38:	f001 fb70 	bl	803641c <vworm_read>
 8034d3c:	8060      	strh	r0, [r4, #2]
        fp->flags   = VL_FLAG_OPENED;
 8034d3e:	2301      	movs	r3, #1
 8034d40:	8163      	strh	r3, [r4, #10]
        if (fp->start != NULL_vaddr) {
 8034d42:	4b0e      	ldr	r3, [pc, #56]	; (8034d7c <vl_open_file+0x6c>)
 8034d44:	4298      	cmp	r0, r3
 8034d46:	d00a      	beq.n	8034d5e <vl_open_file+0x4e>
            fp->start  += 2;
 8034d48:	1c83      	adds	r3, r0, #2
 8034d4a:	8063      	strh	r3, [r4, #2]
            fp->write   = &vsram_mark;
 8034d4c:	4b0c      	ldr	r3, [pc, #48]	; (8034d80 <vl_open_file+0x70>)
 8034d4e:	6123      	str	r3, [r4, #16]
            fp->read    = &vsram_read;
 8034d50:	4b0c      	ldr	r3, [pc, #48]	; (8034d84 <vl_open_file+0x74>)
 8034d52:	60e3      	str	r3, [r4, #12]
            fp->length  = vsram_read(mlen);
 8034d54:	f001 fb78 	bl	8036448 <vsram_read>
 8034d58:	8120      	strh	r0, [r4, #8]
}
 8034d5a:	0020      	movs	r0, r4
 8034d5c:	bd70      	pop	{r4, r5, r6, pc}
            fp->write   = &vworm_write;
 8034d5e:	4b0a      	ldr	r3, [pc, #40]	; (8034d88 <vl_open_file+0x78>)
 8034d60:	6123      	str	r3, [r4, #16]
            fp->read    = &vworm_read;
 8034d62:	4b0a      	ldr	r3, [pc, #40]	; (8034d8c <vl_open_file+0x7c>)
 8034d64:	60e3      	str	r3, [r4, #12]
            fp->length  = vworm_read(header + 0);           //length
 8034d66:	0028      	movs	r0, r5
 8034d68:	f001 fb58 	bl	803641c <vworm_read>
 8034d6c:	8120      	strh	r0, [r4, #8]
            fp->start   = vworm_read(header + 6);           //vworm base addr
 8034d6e:	3506      	adds	r5, #6
 8034d70:	b2a8      	uxth	r0, r5
 8034d72:	f001 fb53 	bl	803641c <vworm_read>
 8034d76:	8060      	strh	r0, [r4, #2]
    return fp;
 8034d78:	e7ef      	b.n	8034d5a <vl_open_file+0x4a>
 8034d7a:	46c0      	nop			; (mov r8, r8)
 8034d7c:	0000ffff 	.word	0x0000ffff
 8034d80:	08036451 	.word	0x08036451
 8034d84:	08036449 	.word	0x08036449
 8034d88:	0803642d 	.word	0x0803642d
 8034d8c:	0803641d 	.word	0x0803641d

08034d90 <vl_open>:
OT_WEAK vlFILE* vl_open(vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 8034d90:	b530      	push	{r4, r5, lr}
 8034d92:	b085      	sub	sp, #20
 8034d94:	0004      	movs	r4, r0
    vaddr header = NULL_vaddr;
 8034d96:	200e      	movs	r0, #14
 8034d98:	4468      	add	r0, sp
 8034d9a:	2501      	movs	r5, #1
 8034d9c:	426d      	negs	r5, r5
 8034d9e:	8005      	strh	r5, [r0, #0]
    if (vl_getheader_vaddr(&header, block_id, data_id, mod, user_id) == 0) {
 8034da0:	9300      	str	r3, [sp, #0]
 8034da2:	0013      	movs	r3, r2
 8034da4:	000a      	movs	r2, r1
 8034da6:	0021      	movs	r1, r4
 8034da8:	f7ff ff7e 	bl	8034ca8 <vl_getheader_vaddr>
 8034dac:	2800      	cmp	r0, #0
 8034dae:	d002      	beq.n	8034db6 <vl_open+0x26>
    return NULL;
 8034db0:	2000      	movs	r0, #0
}
 8034db2:	b005      	add	sp, #20
 8034db4:	bd30      	pop	{r4, r5, pc}
        return vl_open_file(header);
 8034db6:	230e      	movs	r3, #14
 8034db8:	446b      	add	r3, sp
 8034dba:	8818      	ldrh	r0, [r3, #0]
 8034dbc:	f7ff ffa8 	bl	8034d10 <vl_open_file>
 8034dc0:	e7f7      	b.n	8034db2 <vl_open+0x22>

08034dc2 <vl_chmod>:
OT_WEAK ot_u8 vl_chmod(vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 8034dc2:	b570      	push	{r4, r5, r6, lr}
 8034dc4:	b084      	sub	sp, #16
 8034dc6:	0004      	movs	r4, r0
 8034dc8:	000d      	movs	r5, r1
 8034dca:	0016      	movs	r6, r2
    vaddr header = NULL_vaddr;
 8034dcc:	200e      	movs	r0, #14
 8034dce:	4468      	add	r0, sp
 8034dd0:	2201      	movs	r2, #1
 8034dd2:	4252      	negs	r2, r2
 8034dd4:	8002      	strh	r2, [r0, #0]
    output = vl_getheader_vaddr(&header, block_id, data_id, VL_ACCESS_RW, user_id);
 8034dd6:	9300      	str	r3, [sp, #0]
 8034dd8:	2336      	movs	r3, #54	; 0x36
 8034dda:	000a      	movs	r2, r1
 8034ddc:	0021      	movs	r1, r4
 8034dde:	f7ff ff63 	bl	8034ca8 <vl_getheader_vaddr>
 8034de2:	1e04      	subs	r4, r0, #0
    if (output == 0) {
 8034de4:	d002      	beq.n	8034dec <vl_chmod+0x2a>
}
 8034de6:	0020      	movs	r0, r4
 8034de8:	b004      	add	sp, #16
 8034dea:	bd70      	pop	{r4, r5, r6, pc}
        idmod.ubyte[0]  = data_id;
 8034dec:	466b      	mov	r3, sp
 8034dee:	731d      	strb	r5, [r3, #12]
        idmod.ubyte[1]  = mod;
 8034df0:	735e      	strb	r6, [r3, #13]
        sub_write_header((header+4), &idmod.ushort, 2);
 8034df2:	230e      	movs	r3, #14
 8034df4:	446b      	add	r3, sp
 8034df6:	8818      	ldrh	r0, [r3, #0]
 8034df8:	3004      	adds	r0, #4
 8034dfa:	b280      	uxth	r0, r0
 8034dfc:	2202      	movs	r2, #2
 8034dfe:	a903      	add	r1, sp, #12
 8034e00:	f7ff fe0c 	bl	8034a1c <sub_write_header>
 8034e04:	e7ef      	b.n	8034de6 <vl_chmod+0x24>

08034e06 <vl_read>:
OT_WEAK ot_u16 vl_read( vlFILE* fp, ot_uint offset ) {
 8034e06:	b510      	push	{r4, lr}
    return fp->read( (ot_uint)(offset+fp->start) );
 8034e08:	68c2      	ldr	r2, [r0, #12]
 8034e0a:	8840      	ldrh	r0, [r0, #2]
 8034e0c:	1840      	adds	r0, r0, r1
 8034e0e:	b280      	uxth	r0, r0
 8034e10:	4790      	blx	r2
}
 8034e12:	bd10      	pop	{r4, pc}

08034e14 <vl_write>:
OT_WEAK ot_u8 vl_write( vlFILE* fp, ot_uint offset, ot_u16 data ) {
 8034e14:	b510      	push	{r4, lr}
 8034e16:	000b      	movs	r3, r1
 8034e18:	0011      	movs	r1, r2
    if (offset >= fp->alloc) {
 8034e1a:	8884      	ldrh	r4, [r0, #4]
 8034e1c:	429c      	cmp	r4, r3
 8034e1e:	d912      	bls.n	8034e46 <vl_write+0x32>
    if (offset >= fp->length) {
 8034e20:	8902      	ldrh	r2, [r0, #8]
 8034e22:	429a      	cmp	r2, r3
 8034e24:	d805      	bhi.n	8034e32 <vl_write+0x1e>
        fp->length  = offset+2;
 8034e26:	1c9a      	adds	r2, r3, #2
 8034e28:	8102      	strh	r2, [r0, #8]
        fp->flags  |= VL_FLAG_RESIZED;
 8034e2a:	8942      	ldrh	r2, [r0, #10]
 8034e2c:	2404      	movs	r4, #4
 8034e2e:	4322      	orrs	r2, r4
 8034e30:	8142      	strh	r2, [r0, #10]
    fp->flags |= VL_FLAG_MODDED;
 8034e32:	8944      	ldrh	r4, [r0, #10]
 8034e34:	2202      	movs	r2, #2
 8034e36:	4314      	orrs	r4, r2
 8034e38:	8144      	strh	r4, [r0, #10]
    return fp->write( (offset+fp->start), data);
 8034e3a:	6902      	ldr	r2, [r0, #16]
 8034e3c:	8840      	ldrh	r0, [r0, #2]
 8034e3e:	18c0      	adds	r0, r0, r3
 8034e40:	b280      	uxth	r0, r0
 8034e42:	4790      	blx	r2
}
 8034e44:	bd10      	pop	{r4, pc}
        return 255;
 8034e46:	20ff      	movs	r0, #255	; 0xff
 8034e48:	e7fc      	b.n	8034e44 <vl_write+0x30>

08034e4a <vl_load>:
OT_WEAK ot_uint vl_load( vlFILE* fp, ot_uint length, ot_u8* data ) {
 8034e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8034e4c:	46c6      	mov	lr, r8
 8034e4e:	b500      	push	{lr}
 8034e50:	b082      	sub	sp, #8
 8034e52:	4680      	mov	r8, r0
 8034e54:	0015      	movs	r5, r2
    if (length > fp->length) {
 8034e56:	8906      	ldrh	r6, [r0, #8]
 8034e58:	428e      	cmp	r6, r1
 8034e5a:	d300      	bcc.n	8034e5e <vl_load+0x14>
 8034e5c:	000e      	movs	r6, r1
    cursor      = fp->start;        // guaranteed to be 16 bit aligned
 8034e5e:	4643      	mov	r3, r8
 8034e60:	885c      	ldrh	r4, [r3, #2]
    length      = cursor+length;
 8034e62:	1936      	adds	r6, r6, r4
 8034e64:	b2b6      	uxth	r6, r6
    for (; cursor<length; cursor++) {
 8034e66:	e005      	b.n	8034e74 <vl_load+0x2a>
        *data++ = scratch.ubyte[align];
 8034e68:	ab01      	add	r3, sp, #4
 8034e6a:	5ddb      	ldrb	r3, [r3, r7]
 8034e6c:	702b      	strb	r3, [r5, #0]
    for (; cursor<length; cursor++) {
 8034e6e:	3401      	adds	r4, #1
 8034e70:	b2a4      	uxth	r4, r4
        *data++ = scratch.ubyte[align];
 8034e72:	3501      	adds	r5, #1
    for (; cursor<length; cursor++) {
 8034e74:	42b4      	cmp	r4, r6
 8034e76:	d20b      	bcs.n	8034e90 <vl_load+0x46>
        ot_u8 align = (cursor & 1);
 8034e78:	2301      	movs	r3, #1
 8034e7a:	0027      	movs	r7, r4
 8034e7c:	401f      	ands	r7, r3
        if (align == 0) {
 8034e7e:	421c      	tst	r4, r3
 8034e80:	d1f2      	bne.n	8034e68 <vl_load+0x1e>
            scratch.ushort = fp->read(cursor);
 8034e82:	0020      	movs	r0, r4
 8034e84:	4643      	mov	r3, r8
 8034e86:	68db      	ldr	r3, [r3, #12]
 8034e88:	4798      	blx	r3
 8034e8a:	ab01      	add	r3, sp, #4
 8034e8c:	8018      	strh	r0, [r3, #0]
 8034e8e:	e7eb      	b.n	8034e68 <vl_load+0x1e>
    return (length - fp->start);
 8034e90:	4643      	mov	r3, r8
 8034e92:	8858      	ldrh	r0, [r3, #2]
 8034e94:	1a30      	subs	r0, r6, r0
 8034e96:	b280      	uxth	r0, r0
}
 8034e98:	b002      	add	sp, #8
 8034e9a:	bc80      	pop	{r7}
 8034e9c:	46b8      	mov	r8, r7
 8034e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08034ea0 <vl_store>:
OT_WEAK ot_u8 vl_store( vlFILE* fp, ot_uint length, const ot_u8* data ) {
 8034ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034ea2:	46ce      	mov	lr, r9
 8034ea4:	4647      	mov	r7, r8
 8034ea6:	b580      	push	{r7, lr}
 8034ea8:	0007      	movs	r7, r0
    if (length > fp->alloc) {
 8034eaa:	8886      	ldrh	r6, [r0, #4]
 8034eac:	428e      	cmp	r6, r1
 8034eae:	d300      	bcc.n	8034eb2 <vl_store+0x12>
 8034eb0:	000e      	movs	r6, r1
    fp->flags  |= (length != fp->length) ? (VL_FLAG_RESIZED|VL_FLAG_MODDED) : VL_FLAG_MODDED;
 8034eb2:	210a      	movs	r1, #10
 8034eb4:	5e7b      	ldrsh	r3, [r7, r1]
 8034eb6:	8939      	ldrh	r1, [r7, #8]
 8034eb8:	42b1      	cmp	r1, r6
 8034eba:	d008      	beq.n	8034ece <vl_store+0x2e>
 8034ebc:	2106      	movs	r1, #6
 8034ebe:	430b      	orrs	r3, r1
 8034ec0:	817b      	strh	r3, [r7, #10]
    fp->length  = length;
 8034ec2:	813e      	strh	r6, [r7, #8]
    cursor      = fp->start;
 8034ec4:	887c      	ldrh	r4, [r7, #2]
    length      = cursor+length;
 8034ec6:	1936      	adds	r6, r6, r4
 8034ec8:	b2b6      	uxth	r6, r6
    for (test=0; cursor<length; cursor+=2) {
 8034eca:	2500      	movs	r5, #0
 8034ecc:	e017      	b.n	8034efe <vl_store+0x5e>
    fp->flags  |= (length != fp->length) ? (VL_FLAG_RESIZED|VL_FLAG_MODDED) : VL_FLAG_MODDED;
 8034ece:	2102      	movs	r1, #2
 8034ed0:	e7f5      	b.n	8034ebe <vl_store+0x1e>
        scratch.ubyte[0]    = *data++;
 8034ed2:	7810      	ldrb	r0, [r2, #0]
 8034ed4:	23ff      	movs	r3, #255	; 0xff
 8034ed6:	4649      	mov	r1, r9
 8034ed8:	4399      	bics	r1, r3
 8034eda:	4308      	orrs	r0, r1
        scratch.ubyte[1]    = *data++;
 8034edc:	1c93      	adds	r3, r2, #2
 8034ede:	4698      	mov	r8, r3
 8034ee0:	7853      	ldrb	r3, [r2, #1]
 8034ee2:	021b      	lsls	r3, r3, #8
 8034ee4:	21ff      	movs	r1, #255	; 0xff
 8034ee6:	4001      	ands	r1, r0
 8034ee8:	4319      	orrs	r1, r3
 8034eea:	4689      	mov	r9, r1
        test               |= fp->write(cursor, scratch.ushort);
 8034eec:	b289      	uxth	r1, r1
 8034eee:	0020      	movs	r0, r4
 8034ef0:	693b      	ldr	r3, [r7, #16]
 8034ef2:	4798      	blx	r3
 8034ef4:	4305      	orrs	r5, r0
 8034ef6:	b2ed      	uxtb	r5, r5
    for (test=0; cursor<length; cursor+=2) {
 8034ef8:	3402      	adds	r4, #2
 8034efa:	b2a4      	uxth	r4, r4
        scratch.ubyte[1]    = *data++;
 8034efc:	4642      	mov	r2, r8
    for (test=0; cursor<length; cursor+=2) {
 8034efe:	42b4      	cmp	r4, r6
 8034f00:	d3e7      	bcc.n	8034ed2 <vl_store+0x32>
}
 8034f02:	0028      	movs	r0, r5
 8034f04:	bcc0      	pop	{r6, r7}
 8034f06:	46b9      	mov	r9, r7
 8034f08:	46b0      	mov	r8, r6
 8034f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08034f0c <vl_close>:
OT_WEAK ot_u8 vl_close( vlFILE* fp ) {
 8034f0c:	b510      	push	{r4, lr}
 8034f0e:	b082      	sub	sp, #8
 8034f10:	1e04      	subs	r4, r0, #0
    if (FP_ISVALID(fp)) {
 8034f12:	d030      	beq.n	8034f76 <vl_close+0x6a>
        if (vworm_read(fp->header+0) != fp->length) {
 8034f14:	8800      	ldrh	r0, [r0, #0]
 8034f16:	f001 fa81 	bl	803641c <vworm_read>
 8034f1a:	8923      	ldrh	r3, [r4, #8]
 8034f1c:	4298      	cmp	r0, r3
 8034f1e:	d117      	bne.n	8034f50 <vl_close+0x44>
        epoch_s = time_get_utc();
 8034f20:	f000 fa60 	bl	80353e4 <time_get_utc>
 8034f24:	9001      	str	r0, [sp, #4]
        if (fp->flags & VL_FLAG_MODDED) {
 8034f26:	8963      	ldrh	r3, [r4, #10]
 8034f28:	079b      	lsls	r3, r3, #30
 8034f2a:	d418      	bmi.n	8034f5e <vl_close+0x52>
            action.ushort       = vworm_read(fp->header+10);    ///@todo make offset constant instead of 10
 8034f2c:	8820      	ldrh	r0, [r4, #0]
 8034f2e:	300a      	adds	r0, #10
 8034f30:	b280      	uxth	r0, r0
 8034f32:	f001 fa73 	bl	803641c <vworm_read>
 8034f36:	0002      	movs	r2, r0
            action.ubyte[0]    &= (ot_u8)fp->flags;
 8034f38:	7aa3      	ldrb	r3, [r4, #10]
 8034f3a:	4018      	ands	r0, r3
            if (action.ubyte[0] != 0) {
 8034f3c:	421a      	tst	r2, r3
 8034f3e:	d116      	bne.n	8034f6e <vl_close+0x62>
        fp->start   = 0;
 8034f40:	2300      	movs	r3, #0
 8034f42:	8063      	strh	r3, [r4, #2]
        fp->length  = 0;
 8034f44:	8123      	strh	r3, [r4, #8]
        fp->flags   = 0;
 8034f46:	8163      	strh	r3, [r4, #10]
        fp->read    = NULL;
 8034f48:	60e3      	str	r3, [r4, #12]
        fp->write   = NULL;
 8034f4a:	6123      	str	r3, [r4, #16]
}
 8034f4c:	b002      	add	sp, #8
 8034f4e:	bd10      	pop	{r4, pc}
            sub_write_header( (fp->header+0), &(fp->length), 2);
 8034f50:	0021      	movs	r1, r4
 8034f52:	3108      	adds	r1, #8
 8034f54:	8820      	ldrh	r0, [r4, #0]
 8034f56:	2202      	movs	r2, #2
 8034f58:	f7ff fd60 	bl	8034a1c <sub_write_header>
 8034f5c:	e7e0      	b.n	8034f20 <vl_close+0x14>
            sub_write_header( (fp->header+12), (ot_u16*)&epoch_s, 4);    ///@todo make offset constant instead of 12
 8034f5e:	8820      	ldrh	r0, [r4, #0]
 8034f60:	300c      	adds	r0, #12
 8034f62:	b280      	uxth	r0, r0
 8034f64:	2204      	movs	r2, #4
 8034f66:	a901      	add	r1, sp, #4
 8034f68:	f7ff fd58 	bl	8034a1c <sub_write_header>
 8034f6c:	e7de      	b.n	8034f2c <vl_close+0x20>
                retval = sub_action(fp);
 8034f6e:	0020      	movs	r0, r4
 8034f70:	f7ff fdb0 	bl	8034ad4 <sub_action>
 8034f74:	e7e4      	b.n	8034f40 <vl_close+0x34>
        retval = 255;
 8034f76:	20ff      	movs	r0, #255	; 0xff
 8034f78:	e7e8      	b.n	8034f4c <vl_close+0x40>

08034f7a <ISF_open_su>:
OT_WEAK vlFILE* ISF_open_su( ot_u8 id ) {
 8034f7a:	b510      	push	{r4, lr}
 8034f7c:	0001      	movs	r1, r0
    return vl_open(VL_ISF_BLOCKID, id, VL_ACCESS_SU, NULL);
 8034f7e:	2300      	movs	r3, #0
 8034f80:	223f      	movs	r2, #63	; 0x3f
 8034f82:	2003      	movs	r0, #3
 8034f84:	f7ff ff04 	bl	8034d90 <vl_open>
}
 8034f88:	bd10      	pop	{r4, pc}

08034f8a <ISS_open>:
OT_WEAK vlFILE* ISS_open( ot_u8 id, ot_u8 mod, const id_tmpl* user_id ) {
 8034f8a:	b510      	push	{r4, lr}
 8034f8c:	0013      	movs	r3, r2
    return vl_open(VL_ISS_BLOCKID, id, mod, user_id);
 8034f8e:	000a      	movs	r2, r1
 8034f90:	0001      	movs	r1, r0
 8034f92:	2002      	movs	r0, #2
 8034f94:	f7ff fefc 	bl	8034d90 <vl_open>
}
 8034f98:	bd10      	pop	{r4, pc}

08034f9a <ISF_open>:
OT_WEAK vlFILE* ISF_open( ot_u8 id, ot_u8 mod, const id_tmpl* user_id ) {
 8034f9a:	b510      	push	{r4, lr}
 8034f9c:	0013      	movs	r3, r2
    return vl_open(VL_ISF_BLOCKID, id, mod, user_id);
 8034f9e:	000a      	movs	r2, r1
 8034fa0:	0001      	movs	r1, r0
 8034fa2:	2003      	movs	r0, #3
 8034fa4:	f7ff fef4 	bl	8034d90 <vl_open>
}
 8034fa8:	bd10      	pop	{r4, pc}

08034faa <ISF_loadmirror>:
}
 8034faa:	2000      	movs	r0, #0
 8034fac:	4770      	bx	lr
	...

08034fb0 <vl_init>:
OT_WEAK ot_u8 vl_init(void) {
 8034fb0:	b510      	push	{r4, lr}
    memset(vlaction, 0, sizeof(vlaction));
 8034fb2:	2220      	movs	r2, #32
 8034fb4:	2100      	movs	r1, #0
 8034fb6:	480f      	ldr	r0, [pc, #60]	; (8034ff4 <vl_init+0x44>)
 8034fb8:	f000 fe8a 	bl	8035cd0 <ot_memset>
    memset(vlaction_users, 0, sizeof(vlaction_users));
 8034fbc:	2208      	movs	r2, #8
 8034fbe:	2100      	movs	r1, #0
 8034fc0:	480d      	ldr	r0, [pc, #52]	; (8034ff8 <vl_init+0x48>)
 8034fc2:	f000 fe85 	bl	8035cd0 <ot_memset>
    memset(vlfile, 0, sizeof(vlfile));
 8034fc6:	223c      	movs	r2, #60	; 0x3c
 8034fc8:	2100      	movs	r1, #0
 8034fca:	480c      	ldr	r0, [pc, #48]	; (8034ffc <vl_init+0x4c>)
 8034fcc:	f000 fe80 	bl	8035cd0 <ot_memset>
    for (i=0; i<OT_PARAM(VLFPS); i++) {
 8034fd0:	2300      	movs	r3, #0
 8034fd2:	e008      	b.n	8034fe6 <vl_init+0x36>
        vlfile[i].header   = NULL_vaddr;
 8034fd4:	009a      	lsls	r2, r3, #2
 8034fd6:	18d2      	adds	r2, r2, r3
 8034fd8:	0091      	lsls	r1, r2, #2
 8034fda:	4a08      	ldr	r2, [pc, #32]	; (8034ffc <vl_init+0x4c>)
 8034fdc:	2001      	movs	r0, #1
 8034fde:	4240      	negs	r0, r0
 8034fe0:	5288      	strh	r0, [r1, r2]
    for (i=0; i<OT_PARAM(VLFPS); i++) {
 8034fe2:	3301      	adds	r3, #1
 8034fe4:	b21b      	sxth	r3, r3
 8034fe6:	2b02      	cmp	r3, #2
 8034fe8:	ddf4      	ble.n	8034fd4 <vl_init+0x24>
    ISF_loadmirror();
 8034fea:	f7ff ffde 	bl	8034faa <ISF_loadmirror>
}
 8034fee:	2000      	movs	r0, #0
 8034ff0:	bd10      	pop	{r4, pc}
 8034ff2:	46c0      	nop			; (mov r8, r8)
 8034ff4:	2000cb40 	.word	0x2000cb40
 8034ff8:	2000cb60 	.word	0x2000cb60
 8034ffc:	2000cb68 	.word	0x2000cb68

08035000 <mpipe_open>:
    return mpipe.state;
}
#endif


void mpipe_open() {
 8035000:	b510      	push	{r4, lr}
	sys.task_MPA.event = 0;
 8035002:	4b04      	ldr	r3, [pc, #16]	; (8035014 <mpipe_open+0x14>)
 8035004:	2200      	movs	r2, #0
 8035006:	731a      	strb	r2, [r3, #12]
	mpipedrv_rx(False, MPIPE_High );
 8035008:	2101      	movs	r1, #1
 803500a:	2000      	movs	r0, #0
 803500c:	f001 f82e 	bl	803606c <mpipedrv_rx>
}
 8035010:	bd10      	pop	{r4, pc}
 8035012:	46c0      	nop			; (mov r8, r8)
 8035014:	2000cbdc 	.word	0x2000cbdc

08035018 <mpipe_connect>:
void mpipe_connect(void* port_id) {
 8035018:	b510      	push	{r4, lr}
    sys.task_MPA.latency    = mpipedrv_init(port_id, MPIPE_default);
 803501a:	2101      	movs	r1, #1
 803501c:	4249      	negs	r1, r1
 803501e:	f000 fed1 	bl	8035dc4 <mpipedrv_init>
 8035022:	4b02      	ldr	r3, [pc, #8]	; (803502c <mpipe_connect+0x14>)
 8035024:	73d8      	strb	r0, [r3, #15]
    mpipe_open();
 8035026:	f7ff ffeb 	bl	8035000 <mpipe_open>
}
 803502a:	bd10      	pop	{r4, pc}
 803502c:	2000cbdc 	.word	0x2000cbdc

08035030 <sub_mpipe_setidle>:
    //mpipedrv_kill();
}


void sub_mpipe_setidle(ot_task task) {
    task->event     = 0;
 8035030:	2300      	movs	r3, #0
 8035032:	7003      	strb	r3, [r0, #0]
    task->reserve   = 1;
 8035034:	3301      	adds	r3, #1
 8035036:	7083      	strb	r3, [r0, #2]
}
 8035038:	4770      	bx	lr
	...

0803503c <sub_mpipe_actuate>:

void sub_mpipe_actuate(ot_u8 new_event, ot_u8 new_reserve, ot_uint new_nextevent) {
 803503c:	b510      	push	{r4, lr}
/// Kernel should be pre-empted in order to cancel the currently scheduled
/// task for MPipe and replace it with this one (if any task is scheduled).
    sys.task_MPA.event      = new_event;
 803503e:	4b04      	ldr	r3, [pc, #16]	; (8035050 <sub_mpipe_actuate+0x14>)
 8035040:	7318      	strb	r0, [r3, #12]
    sys.task_MPA.reserve    = new_reserve;
 8035042:	7399      	strb	r1, [r3, #14]
    sys_preempt(&sys.task_MPA, new_nextevent);
 8035044:	330c      	adds	r3, #12
 8035046:	0018      	movs	r0, r3
 8035048:	0011      	movs	r1, r2
 803504a:	f000 f973 	bl	8035334 <sys_preempt>
}
 803504e:	bd10      	pop	{r4, pc}
 8035050:	2000cbdc 	.word	0x2000cbdc

08035054 <mpipe_txschedule>:


void mpipe_txschedule(ot_int wait) {
 8035054:	b510      	push	{r4, lr}
    if (sys.task_MPA.event == 0) {
 8035056:	4b05      	ldr	r3, [pc, #20]	; (803506c <mpipe_txschedule+0x18>)
 8035058:	7b1b      	ldrb	r3, [r3, #12]
 803505a:	2b00      	cmp	r3, #0
 803505c:	d000      	beq.n	8035060 <mpipe_txschedule+0xc>
        sub_mpipe_actuate(2, 1, wait);
    }
}
 803505e:	bd10      	pop	{r4, pc}
        sub_mpipe_actuate(2, 1, wait);
 8035060:	b282      	uxth	r2, r0
 8035062:	2101      	movs	r1, #1
 8035064:	2002      	movs	r0, #2
 8035066:	f7ff ffe9 	bl	803503c <sub_mpipe_actuate>
}
 803506a:	e7f8      	b.n	803505e <mpipe_txschedule+0xa>
 803506c:	2000cbdc 	.word	0x2000cbdc

08035070 <mpipe_send>:
        sub_mpipe_actuate(5, 1, wait);
    }
}


void mpipe_send() {
 8035070:	b510      	push	{r4, lr}
///@note A session stack could be implemented for MPipe Task.  For now, Sending (TX)
/// will just fall-through if mpipe is occupied
    mpipe_txschedule(0);
 8035072:	2000      	movs	r0, #0
 8035074:	f7ff ffee 	bl	8035054 <mpipe_txschedule>
}
 8035078:	bd10      	pop	{r4, pc}

0803507a <mpipeevt_txdone>:


void mpipeevt_txdone(ot_int code) {
 803507a:	b510      	push	{r4, lr}
/// It will only call it after it is done will all queued TX jobs, not after
/// each packet.
/// If code == 0, everything went well in the driver.  If code != 0, TX went
/// wrong, and must be killed.
///
    sub_mpipe_actuate(3+(code==0), 1, 0);
 803507c:	2800      	cmp	r0, #0
 803507e:	d105      	bne.n	803508c <mpipeevt_txdone+0x12>
 8035080:	3004      	adds	r0, #4
 8035082:	2200      	movs	r2, #0
 8035084:	2101      	movs	r1, #1
 8035086:	f7ff ffd9 	bl	803503c <sub_mpipe_actuate>
}
 803508a:	bd10      	pop	{r4, pc}
    sub_mpipe_actuate(3+(code==0), 1, 0);
 803508c:	2003      	movs	r0, #3
 803508e:	e7f8      	b.n	8035082 <mpipeevt_txdone+0x8>

08035090 <mpipeevt_rxdetect>:
void mpipeevt_rxinit(ot_int code) {
    sub_mpipe_actuate(5, 1, code);
}


void mpipeevt_rxdetect(ot_int code) {
 8035090:	b510      	push	{r4, lr}
    sub_mpipe_actuate(3, 1, (ot_uint)code); ///@note come back to this
 8035092:	b282      	uxth	r2, r0
 8035094:	2101      	movs	r1, #1
 8035096:	2003      	movs	r0, #3
 8035098:	f7ff ffd0 	bl	803503c <sub_mpipe_actuate>
}
 803509c:	bd10      	pop	{r4, pc}

0803509e <mpipeevt_rxdone>:


void mpipeevt_rxdone(ot_int code) {
 803509e:	b510      	push	{r4, lr}
/// @note "32" in the array is given as the maximum time for protocol parsing.  
/// It might need to be more dynamic, depending on protocol and length of packet.
/// In the future, there might be a "guess runtime" function in ALP that 
/// inspects these things.
    if (code == 0) {
 80350a0:	2800      	cmp	r0, #0
 80350a2:	d000      	beq.n	80350a6 <mpipeevt_rxdone+0x8>
        sub_mpipe_actuate(1, 32, 0);
    }
}
 80350a4:	bd10      	pop	{r4, pc}
        sub_mpipe_actuate(1, 32, 0);
 80350a6:	2200      	movs	r2, #0
 80350a8:	2120      	movs	r1, #32
 80350aa:	3001      	adds	r0, #1
 80350ac:	f7ff ffc6 	bl	803503c <sub_mpipe_actuate>
}
 80350b0:	e7f8      	b.n	80350a4 <mpipeevt_rxdone+0x6>
	...

080350b4 <mpipe_systask>:



void mpipe_systask(ot_task task) {
 80350b4:	b570      	push	{r4, r5, r6, lr}
 80350b6:	0004      	movs	r4, r0
    switch (sys.task_MPA.event) {
 80350b8:	4b24      	ldr	r3, [pc, #144]	; (803514c <mpipe_systask+0x98>)
 80350ba:	7b1b      	ldrb	r3, [r3, #12]
 80350bc:	2b05      	cmp	r3, #5
 80350be:	d841      	bhi.n	8035144 <mpipe_systask+0x90>
 80350c0:	009b      	lsls	r3, r3, #2
 80350c2:	4a23      	ldr	r2, [pc, #140]	; (8035150 <mpipe_systask+0x9c>)
 80350c4:	58d3      	ldr	r3, [r2, r3]
 80350c6:	469f      	mov	pc, r3
        //Task destructor & initializer: close mpipe
        ///@todo fix mpipe_connect(NULL), it needs to have dynamic input from config
        case 0: sys_taskinit_macro(task, mpipedrv_kill(), mpipe_connect(NULL)); 
 80350c8:	f000 ff06 	bl	8035ed8 <mpipedrv_kill>
 80350cc:	7863      	ldrb	r3, [r4, #1]
 80350ce:	2b00      	cmp	r3, #0
 80350d0:	d01f      	beq.n	8035112 <mpipe_systask+0x5e>
 80350d2:	2000      	movs	r0, #0
 80350d4:	f7ff ffa0 	bl	8035018 <mpipe_connect>
 80350d8:	2300      	movs	r3, #0
 80350da:	7063      	strb	r3, [r4, #1]
 80350dc:	e019      	b.n	8035112 <mpipe_systask+0x5e>
                break;

        /// RX packet successful
        /// ALP must manage the protocol/packet data and call TX when/if it has
        /// a response ready.  Driver is always in passive-RX if not TX'ing.
        case 1: alp_parse_message(&mpipe.alp, NULL);
 80350de:	4d1d      	ldr	r5, [pc, #116]	; (8035154 <mpipe_systask+0xa0>)
 80350e0:	1d28      	adds	r0, r5, #4
 80350e2:	2100      	movs	r1, #0
 80350e4:	f7ff f9b9 	bl	803445a <alp_parse_message>
        
                ///@todo this is a hack.  ALP must be migrated to app queues, 
                ///      it's too much of a headache the old way.
                q_empty(mpipe.alp.inq);
 80350e8:	68e8      	ldr	r0, [r5, #12]
 80350ea:	f7ff fb8a 	bl	8034802 <q_empty>
                
                /// If there's data to send, we need to send it.
                /// Do that by falling through if output queue has greater than zero span.
                if (q_span(mpipe.alp.outq) <= 0) {
 80350ee:	6928      	ldr	r0, [r5, #16]
 80350f0:	f7ff fb66 	bl	80347c0 <q_span>
 80350f4:	2800      	cmp	r0, #0
 80350f6:	dd0d      	ble.n	8035114 <mpipe_systask+0x60>
                    sub_mpipe_setidle(task);
                    break;
                }
                mpipe_send();
 80350f8:	f7ff ffba 	bl	8035070 <mpipe_send>
                
        // Initialize TX: mpipe_send is used.
        case 2: //mpipe_send();
                mpipedrv_unblock();
 80350fc:	f000 fee0 	bl	8035ec0 <mpipedrv_unblock>
                sub_mpipe_actuate(3, 1, (ot_uint)mpipedrv_tx(False, MPIPE_High));
 8035100:	2101      	movs	r1, #1
 8035102:	2000      	movs	r0, #0
 8035104:	f000 ff66 	bl	8035fd4 <mpipedrv_tx>
 8035108:	b282      	uxth	r2, r0
 803510a:	2101      	movs	r1, #1
 803510c:	2003      	movs	r0, #3
 803510e:	f7ff ff95 	bl	803503c <sub_mpipe_actuate>
        				
        // Return the power-code state of the driver, 0-3
        default: task->cursor = mpipedrv_getpwrcode();
                break;
    }
}
 8035112:	bd70      	pop	{r4, r5, r6, pc}
                    sub_mpipe_setidle(task);
 8035114:	0020      	movs	r0, r4
 8035116:	f7ff ff8b 	bl	8035030 <sub_mpipe_setidle>
                    break;
 803511a:	e7fa      	b.n	8035112 <mpipe_systask+0x5e>
        case 3: mpipedrv_kill();
 803511c:	f000 fedc 	bl	8035ed8 <mpipedrv_kill>
                q_rewind(mpipe.alp.outq);
 8035120:	4b0c      	ldr	r3, [pc, #48]	; (8035154 <mpipe_systask+0xa0>)
 8035122:	6918      	ldr	r0, [r3, #16]
 8035124:	f7ff fb7e 	bl	8034824 <q_rewind>
                mpipe_open();
 8035128:	f7ff ff6a 	bl	8035000 <mpipe_open>
                break;
 803512c:	e7f1      	b.n	8035112 <mpipe_systask+0x5e>
        case 4: q_rewind(mpipe.alp.outq);
 803512e:	4b09      	ldr	r3, [pc, #36]	; (8035154 <mpipe_systask+0xa0>)
 8035130:	6918      	ldr	r0, [r3, #16]
 8035132:	f7ff fb77 	bl	8034824 <q_rewind>
                sub_mpipe_setidle(task);
 8035136:	0020      	movs	r0, r4
 8035138:	f7ff ff7a 	bl	8035030 <sub_mpipe_setidle>
                break;    
 803513c:	e7e9      	b.n	8035112 <mpipe_systask+0x5e>
        case 5: mpipe_open();
 803513e:	f7ff ff5f 	bl	8035000 <mpipe_open>
        		break;
 8035142:	e7e6      	b.n	8035112 <mpipe_systask+0x5e>
        default: task->cursor = mpipedrv_getpwrcode();
 8035144:	f000 feae 	bl	8035ea4 <mpipedrv_getpwrcode>
 8035148:	7060      	strb	r0, [r4, #1]
}
 803514a:	e7e2      	b.n	8035112 <mpipe_systask+0x5e>
 803514c:	2000cbdc 	.word	0x2000cbdc
 8035150:	0803734c 	.word	0x0803734c
 8035154:	2000cbc4 	.word	0x2000cbc4

08035158 <sub_init_task>:
#endif
};



ot_u8 sub_init_task(Task_Index i, ot_u8 is_restart) {
 8035158:	b570      	push	{r4, r5, r6, lr}
 803515a:	0003      	movs	r3, r0
    ot_u8 task_event;
    task_event          = sys.task[i].event;
 803515c:	00c2      	lsls	r2, r0, #3
 803515e:	4c07      	ldr	r4, [pc, #28]	; (803517c <sub_init_task+0x24>)
 8035160:	18a4      	adds	r4, r4, r2
 8035162:	1d20      	adds	r0, r4, #4
 8035164:	7926      	ldrb	r6, [r4, #4]
    sys.task[i].event   = 0;
 8035166:	2500      	movs	r5, #0
 8035168:	7125      	strb	r5, [r4, #4]
    sys.task[i].cursor  = is_restart;
 803516a:	7161      	strb	r1, [r4, #5]
    TASK_INDEXED_CALL(i);
 803516c:	009b      	lsls	r3, r3, #2
 803516e:	4a04      	ldr	r2, [pc, #16]	; (8035180 <sub_init_task+0x28>)
 8035170:	589b      	ldr	r3, [r3, r2]
 8035172:	4798      	blx	r3
    sys.task[i].cursor  = 0;
 8035174:	7165      	strb	r5, [r4, #5]
    return task_event;
}
 8035176:	0030      	movs	r0, r6
 8035178:	bd70      	pop	{r4, r5, r6, pc}
 803517a:	46c0      	nop			; (mov r8, r8)
 803517c:	2000cbdc 	.word	0x2000cbdc
 8035180:	08037364 	.word	0x08037364

08035184 <sys_init>:
/** System Core Functions
  * ============================================================================
  */

#ifndef EXTF_sys_init
OT_WEAK void sys_init() {
 8035184:	b510      	push	{r4, lr}
#   endif

    /// Set default values in system tasks.  At a minimum, this is doing a
    /// memset on the task struct to 0.  If dynamic task callbacks are enabled,
    /// also set theses callbacks to the default values.
    memset((ot_u8*)sys.task, 0, sizeof(task_marker)*SYS_TASKS);
 8035186:	4c0a      	ldr	r4, [pc, #40]	; (80351b0 <sys_init+0x2c>)
 8035188:	1d20      	adds	r0, r4, #4
 803518a:	2230      	movs	r2, #48	; 0x30
 803518c:	2100      	movs	r1, #0
 803518e:	f000 fd9f 	bl	8035cd0 <ot_memset>
            sys_task->call  = default_call;
        }
    }
#   endif

    sys.active = TASK_MAX;
 8035192:	2300      	movs	r3, #0
 8035194:	7023      	strb	r3, [r4, #0]
//#   endif

    /// Initialize DLL, which also initializes the rest of the protocol stack.
    /// In some HW, the radio must be initialized before MPipe.
#   if (OT_FEATURE(M2))
        dll_init();
 8035196:	f7fd fc4f 	bl	8032a38 <dll_init>
//        mpipe_connect(NULL);
//#   endif
        
    ///@todo change these manual calls into normal task calls using event=0,
    ///      which is the initialization/kill state.
    i = TASK_terminus;
 803519a:	2406      	movs	r4, #6
    while (i > 1) {
 803519c:	e005      	b.n	80351aa <sys_init+0x26>
        sub_init_task(--i, 1);
 803519e:	1e60      	subs	r0, r4, #1
 80351a0:	b204      	sxth	r4, r0
 80351a2:	b240      	sxtb	r0, r0
 80351a4:	2101      	movs	r1, #1
 80351a6:	f7ff ffd7 	bl	8035158 <sub_init_task>
    while (i > 1) {
 80351aa:	2c01      	cmp	r4, #1
 80351ac:	dcf7      	bgt.n	803519e <sys_init+0x1a>
    }
}
 80351ae:	bd10      	pop	{r4, pc}
 80351b0:	2000cbdc 	.word	0x2000cbdc

080351b4 <sys_panic>:
#endif



#ifndef EXTF_sys_panic
OT_WEAK void sys_panic(ot_u8 err_code) {
 80351b4:	b510      	push	{r4, lr}
 80351b6:	0004      	movs	r4, r0
/// Go to OFF state
#   if (OT_FEATURE(M2))
        dll.idle_state = 0;
 80351b8:	4b06      	ldr	r3, [pc, #24]	; (80351d4 <sys_panic+0x20>)
 80351ba:	2200      	movs	r2, #0
 80351bc:	701a      	strb	r2, [r3, #0]
        session_flush();
 80351be:	f7fe f971 	bl	80334a4 <session_flush>
        dll_idle();
 80351c2:	f7fc ff91 	bl	80320e8 <dll_idle>
#   endif

    systim_disable();
 80351c6:	f000 f9ed 	bl	80355a4 <systim_disable>

#   if defined(EXTF_sys_sig_panic)
        sys_sig_panic(err_code);
 80351ca:	b220      	sxth	r0, r4
 80351cc:	f7fb fec8 	bl	8030f60 <sys_sig_panic>
#   elif (OT_FEATURE(SYSKERN_CALLBACKS) == ENABLED)
        sys.panic(err_code);
#   endif
}
 80351d0:	bd10      	pop	{r4, pc}
 80351d2:	46c0      	nop			; (mov r8, r8)
 80351d4:	2000c410 	.word	0x2000c410

080351d8 <sys_powerdown>:
#endif



#ifndef EXTF_sys_powerdown
OT_WEAK void sys_powerdown() {
 80351d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80351da:	46ce      	mov	lr, r9
 80351dc:	4647      	mov	r7, r8
 80351de:	b580      	push	{r7, lr}
    ot_uint code = 3;
    ot_int i;

    ///@todo This call-model is kludgey, but for now it is OK in practice.
    ///      Better to have a second status call for exotasks.
    for (i=0; i<_NUM_EXOTASKS; i++) {
 80351e0:	2400      	movs	r4, #0
    ot_uint code = 3;
 80351e2:	2703      	movs	r7, #3
    for (i=0; i<_NUM_EXOTASKS; i++) {
 80351e4:	e008      	b.n	80351f8 <sys_powerdown+0x20>
        if (sys.task[i].cursor < code) {
            code = sys.task[i].cursor;
        }
        
        // Reset event and cursor to previous values
        sys.task[i].event   = task_event;
 80351e6:	00f6      	lsls	r6, r6, #3
 80351e8:	4b13      	ldr	r3, [pc, #76]	; (8035238 <sys_powerdown+0x60>)
 80351ea:	199b      	adds	r3, r3, r6
 80351ec:	464a      	mov	r2, r9
 80351ee:	711a      	strb	r2, [r3, #4]
        sys.task[i].cursor  = task_cursor;
 80351f0:	4642      	mov	r2, r8
 80351f2:	715a      	strb	r2, [r3, #5]
    for (i=0; i<_NUM_EXOTASKS; i++) {
 80351f4:	3401      	adds	r4, #1
 80351f6:	b224      	sxth	r4, r4
 80351f8:	2c01      	cmp	r4, #1
 80351fa:	dc13      	bgt.n	8035224 <sys_powerdown+0x4c>
        ot_u8 task_event    = sys.task[i].event;
 80351fc:	0026      	movs	r6, r4
 80351fe:	00e3      	lsls	r3, r4, #3
 8035200:	4d0d      	ldr	r5, [pc, #52]	; (8035238 <sys_powerdown+0x60>)
 8035202:	18ed      	adds	r5, r5, r3
 8035204:	1d28      	adds	r0, r5, #4
 8035206:	792b      	ldrb	r3, [r5, #4]
 8035208:	4699      	mov	r9, r3
        ot_u8 task_cursor   = sys.task[i].cursor;
 803520a:	796b      	ldrb	r3, [r5, #5]
 803520c:	4698      	mov	r8, r3
        sys.task[i].event   = 255;
 803520e:	23ff      	movs	r3, #255	; 0xff
 8035210:	712b      	strb	r3, [r5, #4]
        TASK_INDEXED_CALL(i);
 8035212:	00a3      	lsls	r3, r4, #2
 8035214:	4a09      	ldr	r2, [pc, #36]	; (803523c <sys_powerdown+0x64>)
 8035216:	589b      	ldr	r3, [r3, r2]
 8035218:	4798      	blx	r3
        if (sys.task[i].cursor < code) {
 803521a:	796b      	ldrb	r3, [r5, #5]
 803521c:	42bb      	cmp	r3, r7
 803521e:	d2e2      	bcs.n	80351e6 <sys_powerdown+0xe>
            code = sys.task[i].cursor;
 8035220:	001f      	movs	r7, r3
 8035222:	e7e0      	b.n	80351e6 <sys_powerdown+0xe>
    }

    // Shut down the clocker: a task isn't running during powerdown
    systim_stop_clocker();
 8035224:	f000 f9a6 	bl	8035574 <systim_stop_clocker>

#   if defined(EXTF_sys_sig_powerdown)
        sys_sig_powerdown(code);
 8035228:	b238      	sxth	r0, r7
 803522a:	f001 f893 	bl	8036354 <sys_sig_powerdown>
#   elif (OT_FEATURE(SYSKERN_CALLBACKS))
        sys.powerdown(code);
#   else
#       error "powerdown applet (sys_sig_powerdown) is not available."
#   endif
}
 803522e:	bcc0      	pop	{r6, r7}
 8035230:	46b9      	mov	r9, r7
 8035232:	46b0      	mov	r8, r6
 8035234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8035236:	46c0      	nop			; (mov r8, r8)
 8035238:	2000cbdc 	.word	0x2000cbdc
 803523c:	08037364 	.word	0x08037364

08035240 <sys_task_setevent>:




void sys_task_setevent(ot_task task, ot_u8 event) {
    task->event = event;
 8035240:	7001      	strb	r1, [r0, #0]
}
 8035242:	4770      	bx	lr

08035244 <sys_task_setreserve>:
void sys_task_setcursor(ot_task task, ot_u8 cursor) {
    task->cursor = cursor;
}

void sys_task_setreserve(ot_task task, ot_u8 reserve) {
    task->reserve = reserve;
 8035244:	7081      	strb	r1, [r0, #2]
}
 8035246:	4770      	bx	lr

08035248 <sys_task_setlatency>:

void sys_task_setlatency(ot_task task, ot_u8 latency) {
    task->latency = latency;
 8035248:	70c1      	strb	r1, [r0, #3]
}
 803524a:	4770      	bx	lr

0803524c <sys_task_setnext_clocks>:

void sys_task_setnext(ot_task task, ot_u32 nextevent_ti) {
    sys_task_setnext_clocks(task, (ot_long)TI2CLK(nextevent_ti));
}

void sys_task_setnext_clocks(ot_task task, ot_long nextevent_clocks) {
 803524c:	b570      	push	{r4, r5, r6, lr}
 803524e:	0004      	movs	r4, r0
 8035250:	000d      	movs	r5, r1
    task->nextevent = nextevent_clocks + (ot_long)systim_get();
 8035252:	f000 f991 	bl	8035578 <systim_get>
 8035256:	1940      	adds	r0, r0, r5
 8035258:	6060      	str	r0, [r4, #4]
}
 803525a:	bd70      	pop	{r4, r5, r6, pc}

0803525c <sys_task_setnext>:
void sys_task_setnext(ot_task task, ot_u32 nextevent_ti) {
 803525c:	b510      	push	{r4, lr}
    sys_task_setnext_clocks(task, (ot_long)TI2CLK(nextevent_ti));
 803525e:	f7ff fff5 	bl	803524c <sys_task_setnext_clocks>
}
 8035262:	bd10      	pop	{r4, pc}

08035264 <sys_event_manager>:
  * The Event Manager is multiplexed in order to work with dynamic task calls
  * or static task calls.  Some platforms work better with dynamic, and some
  * better with static.
  */
#ifndef EXTF_sys_event_manager
OT_WEAK ot_uint sys_event_manager() {
 8035264:	b570      	push	{r4, r5, r6, lr}
    Task_Index  i;
#   endif

    /// 1. Get the elapsed time since the scheduler last run.  We also update
    ///    the time, which does nothing unless time is enabled.
    elapsed = systim_get();
 8035266:	f000 f987 	bl	8035578 <systim_get>
 803526a:	b285      	uxth	r5, r0
    time_add(elapsed); 
 803526c:	0400      	lsls	r0, r0, #16
 803526e:	0c04      	lsrs	r4, r0, #16
 8035270:	0020      	movs	r0, r4
 8035272:	f000 f8c7 	bl	8035404 <time_add>
    systim_flush();
 8035276:	f000 f98b 	bl	8035590 <systim_flush>
    ///      nearest task (nextevent), which loads into timer on exit </LI>
    /// <LI> If a pending task is selected, loop through higher priority
    ///      tasks than the one selected to find if they need to block the
    ///      invocation of the pending task. </LI>
#   if (OT_FEATURE(M2))
    dll_clock(elapsed);
 803527a:	0028      	movs	r0, r5
 803527c:	f7fd f8d4 	bl	8032428 <dll_clock>

    nextevent   = OT_GPTIM_LIMIT;
    task_i      = &sys.task[TASK_terminus];
    select      = TASK_MAX; //TASK_terminus;
#   if (OT_FEATURE(SYSTASK_CALLBACKS) != ENABLED)
    i           = TASK_terminus;
 8035280:	2106      	movs	r1, #6
    select      = TASK_MAX; //TASK_terminus;
 8035282:	2600      	movs	r6, #0
    task_i      = &sys.task[TASK_terminus];
 8035284:	4b1d      	ldr	r3, [pc, #116]	; (80352fc <sys_event_manager+0x98>)
 8035286:	3334      	adds	r3, #52	; 0x34
    nextevent   = OT_GPTIM_LIMIT;
 8035288:	25f0      	movs	r5, #240	; 0xf0
 803528a:	026d      	lsls	r5, r5, #9
#   endif

    // Select the highest priority task that is active and pending
    // Note that nextevent is always clocked, allowing task blocking without
    // losing synchronization.
    while (task_i != &sys.task[0]) {
 803528c:	e001      	b.n	8035292 <sys_event_manager+0x2e>
            if (task_i->nextevent <= nextevent) {
#               if (OT_PARAM_SYSTHREADS != 0)
                nextnext  = nextevent;
#               endif
                nextevent = task_i->nextevent;
                select    = TASK_SELECT(task_i, i);
 803528e:	000e      	movs	r6, r1
                nextevent = task_i->nextevent;
 8035290:	0015      	movs	r5, r2
    while (task_i != &sys.task[0]) {
 8035292:	4a1a      	ldr	r2, [pc, #104]	; (80352fc <sys_event_manager+0x98>)
 8035294:	3204      	adds	r2, #4
 8035296:	4293      	cmp	r3, r2
 8035298:	d011      	beq.n	80352be <sys_event_manager+0x5a>
        TASK_DECREMENT(task_i, i);
 803529a:	3b08      	subs	r3, #8
 803529c:	3901      	subs	r1, #1
 803529e:	b249      	sxtb	r1, r1
        task_i->nextevent -= elapsed;
 80352a0:	685a      	ldr	r2, [r3, #4]
 80352a2:	1b12      	subs	r2, r2, r4
 80352a4:	605a      	str	r2, [r3, #4]
        if (task_i->event != 0) {
 80352a6:	7818      	ldrb	r0, [r3, #0]
 80352a8:	2800      	cmp	r0, #0
 80352aa:	d0f2      	beq.n	8035292 <sys_event_manager+0x2e>
            if (task_i->nextevent <= nextevent) {
 80352ac:	42aa      	cmp	r2, r5
 80352ae:	ddee      	ble.n	803528e <sys_event_manager+0x2a>
            }
            // Sometime nextevent can be negative, due to a long-waiting task.
            // higher priority tasks will always take precedent.
            else if (task_i->nextevent <= 0) {
 80352b0:	2a00      	cmp	r2, #0
 80352b2:	dcee      	bgt.n	8035292 <sys_event_manager+0x2e>
                select = TASK_SELECT(task_i, i);
 80352b4:	000e      	movs	r6, r1
 80352b6:	e7ec      	b.n	8035292 <sys_event_manager+0x2e>
                nextevent   = task_i->nextevent;
                select      = TASK_SELECT(task_i, i);
                break;
            }
        }
        TASK_INCREMENT(task_i, i);
 80352b8:	3308      	adds	r3, #8
 80352ba:	3101      	adds	r1, #1
 80352bc:	b249      	sxtb	r1, r1
    while (task_i < TASK(select)) {
 80352be:	0034      	movs	r4, r6
 80352c0:	00f0      	lsls	r0, r6, #3
 80352c2:	4a0e      	ldr	r2, [pc, #56]	; (80352fc <sys_event_manager+0x98>)
 80352c4:	1812      	adds	r2, r2, r0
 80352c6:	3204      	adds	r2, #4
 80352c8:	429a      	cmp	r2, r3
 80352ca:	d90e      	bls.n	80352ea <sys_event_manager+0x86>
        if (task_i->event != 0) {
 80352cc:	781a      	ldrb	r2, [r3, #0]
 80352ce:	2a00      	cmp	r2, #0
 80352d0:	d0f2      	beq.n	80352b8 <sys_event_manager+0x54>
            if ((task_i->latency < TASK(select)->reserve) || \
 80352d2:	78d8      	ldrb	r0, [r3, #3]
 80352d4:	00e2      	lsls	r2, r4, #3
 80352d6:	4c09      	ldr	r4, [pc, #36]	; (80352fc <sys_event_manager+0x98>)
 80352d8:	18a4      	adds	r4, r4, r2
 80352da:	79a2      	ldrb	r2, [r4, #6]
 80352dc:	4290      	cmp	r0, r2
 80352de:	d302      	bcc.n	80352e6 <sys_event_manager+0x82>
 80352e0:	6858      	ldr	r0, [r3, #4]
 80352e2:	4290      	cmp	r0, r2
 80352e4:	dae8      	bge.n	80352b8 <sys_event_manager+0x54>
                nextevent   = task_i->nextevent;
 80352e6:	685d      	ldr	r5, [r3, #4]
                select      = TASK_SELECT(task_i, i);
 80352e8:	000e      	movs	r6, r1
    }

    /// 3. Set the active task callback to the selected
    sys.active = select;
 80352ea:	4b04      	ldr	r3, [pc, #16]	; (80352fc <sys_event_manager+0x98>)
 80352ec:	701e      	strb	r6, [r3, #0]

    /// 4. The event manager is done here.  systim_schedule() will
    ///    make sure that the task hasn't been pended during the scheduler
    ///    runtime.
    return systim_schedule(nextevent, systim_get());
 80352ee:	f000 f943 	bl	8035578 <systim_get>
 80352f2:	0001      	movs	r1, r0
 80352f4:	0028      	movs	r0, r5
 80352f6:	f000 f95f 	bl	80355b8 <systim_schedule>
//
//        }
//        platform_set_ktim(interval);
//        return retval;
//    }
}
 80352fa:	bd70      	pop	{r4, r5, r6, pc}
 80352fc:	2000cbdc 	.word	0x2000cbdc

08035300 <sys_run_task>:
#endif



#ifndef EXTF_sys_run_task
OT_INLINE void sys_run_task() {
 8035300:	b510      	push	{r4, lr}
    }
#   endif

    ///@todo integrate any necessary systim suppression into the
    ///      task clocker feature
    systim_disable();
 8035302:	f000 f94f 	bl	80355a4 <systim_disable>
    systim_start_clocker();
 8035306:	f000 f92b 	bl	8035560 <systim_start_clocker>
    
    sys_run_task_CALL:
    if (TASK(sys.active)->event != 0) {
 803530a:	4b08      	ldr	r3, [pc, #32]	; (803532c <sys_run_task+0x2c>)
 803530c:	2000      	movs	r0, #0
 803530e:	5618      	ldrsb	r0, [r3, r0]
 8035310:	00c2      	lsls	r2, r0, #3
 8035312:	189b      	adds	r3, r3, r2
 8035314:	791b      	ldrb	r3, [r3, #4]
 8035316:	2b00      	cmp	r3, #0
 8035318:	d007      	beq.n	803532a <sys_run_task+0x2a>
        TASK_CALL(sys.active);
 803531a:	0082      	lsls	r2, r0, #2
 803531c:	4b04      	ldr	r3, [pc, #16]	; (8035330 <sys_run_task+0x30>)
 803531e:	58d2      	ldr	r2, [r2, r3]
 8035320:	00c0      	lsls	r0, r0, #3
 8035322:	4b02      	ldr	r3, [pc, #8]	; (803532c <sys_run_task+0x2c>)
 8035324:	1818      	adds	r0, r3, r0
 8035326:	3004      	adds	r0, #4
 8035328:	4790      	blx	r2
    }
}
 803532a:	bd10      	pop	{r4, pc}
 803532c:	2000cbdc 	.word	0x2000cbdc
 8035330:	08037364 	.word	0x08037364

08035334 <sys_preempt>:





OT_WEAK void sys_preempt(ot_task task, ot_uint nextevent_ti) {
 8035334:	b510      	push	{r4, lr}
/// Pre-empting will "pend" the timer.  In device terms, this is implemented
/// by manually setting the timer interrupt flag.  If a task is running while
/// this function is called (typical usage), first the task will finish and then
/// the scheduler will run anyway.
    sys_task_setnext(task, (ot_u32)nextevent_ti);
 8035336:	f7ff ff91 	bl	803525c <sys_task_setnext>
    platform_ot_preempt();
 803533a:	f000 fc25 	bl	8035b88 <platform_ot_preempt>
}
 803533e:	bd10      	pop	{r4, pc}

08035340 <time_load_now>:
/** Driver functions
  * The following functions are sometimes implemented in the platform driver.
  * They do the low-level work for the system time module.
  */
#ifndef EXTF_time_load_now
OT_WEAK void time_load_now(ot_time* now) {
 8035340:	b510      	push	{r4, lr}
 8035342:	0004      	movs	r4, r0
    ot_u32 clocks;
    ot_u32 scratch;
    *now        = time_sys;
 8035344:	4b08      	ldr	r3, [pc, #32]	; (8035368 <time_load_now+0x28>)
 8035346:	0002      	movs	r2, r0
 8035348:	cb03      	ldmia	r3!, {r0, r1}
 803534a:	c203      	stmia	r2!, {r0, r1}
    clocks      = systim_get();
 803534c:	f000 f914 	bl	8035578 <systim_get>
    scratch     = clocks + now->clocks;
 8035350:	6863      	ldr	r3, [r4, #4]
 8035352:	181b      	adds	r3, r3, r0
    now->upper += (scratch < clocks);       ///@note changed this
 8035354:	4283      	cmp	r3, r0
 8035356:	4180      	sbcs	r0, r0
 8035358:	4240      	negs	r0, r0
 803535a:	6822      	ldr	r2, [r4, #0]
 803535c:	4694      	mov	ip, r2
 803535e:	4460      	add	r0, ip
 8035360:	6020      	str	r0, [r4, #0]
    now->clocks = scratch;
 8035362:	6063      	str	r3, [r4, #4]
}
 8035364:	bd10      	pop	{r4, pc}
 8035366:	46c0      	nop			; (mov r8, r8)
 8035368:	2000cc18 	.word	0x2000cc18

0803536c <time_set>:
}
#endif


#ifndef EXTF_time_set
OT_WEAK void time_set(ot_time set_time) {
 803536c:	b510      	push	{r4, lr}
 803536e:	b084      	sub	sp, #16
 8035370:	466c      	mov	r4, sp
 8035372:	9000      	str	r0, [sp, #0]
 8035374:	6061      	str	r1, [r4, #4]
    ot_time delta;
    time_load_now(&delta);
 8035376:	a802      	add	r0, sp, #8
 8035378:	f7ff ffe2 	bl	8035340 <time_load_now>
    
    /// 1. Set time_sys to new value.
    time_sys = set_time;
 803537c:	4a0e      	ldr	r2, [pc, #56]	; (80353b8 <time_set+0x4c>)
 803537e:	0013      	movs	r3, r2
 8035380:	cc03      	ldmia	r4!, {r0, r1}
 8035382:	c303      	stmia	r3!, {r0, r1}
    
    /// 2. determine delta between previous time and new time
    delta.upper     = (time_sys.upper - delta.upper) + (time_sys.clocks < delta.clocks);
 8035384:	6813      	ldr	r3, [r2, #0]
 8035386:	9902      	ldr	r1, [sp, #8]
 8035388:	1a5b      	subs	r3, r3, r1
 803538a:	6852      	ldr	r2, [r2, #4]
 803538c:	9903      	ldr	r1, [sp, #12]
 803538e:	428a      	cmp	r2, r1
 8035390:	4180      	sbcs	r0, r0
 8035392:	4240      	negs	r0, r0
 8035394:	181b      	adds	r3, r3, r0
 8035396:	9302      	str	r3, [sp, #8]
    delta.clocks    = (time_sys.clocks - delta.clocks);
 8035398:	1a51      	subs	r1, r2, r1
 803539a:	9103      	str	r1, [sp, #12]
    
    /// 3. Apply Delta to time_start
    ///    This is necessary to maintain relative uptime figure
    time_start.clocks   += delta.clocks;
 803539c:	4807      	ldr	r0, [pc, #28]	; (80353bc <time_set+0x50>)
 803539e:	6842      	ldr	r2, [r0, #4]
 80353a0:	188a      	adds	r2, r1, r2
 80353a2:	6042      	str	r2, [r0, #4]
    time_start.upper    += delta.upper + (time_start.clocks < delta.clocks);
 80353a4:	428a      	cmp	r2, r1
 80353a6:	4192      	sbcs	r2, r2
 80353a8:	4252      	negs	r2, r2
 80353aa:	189b      	adds	r3, r3, r2
 80353ac:	6802      	ldr	r2, [r0, #0]
 80353ae:	4694      	mov	ip, r2
 80353b0:	4463      	add	r3, ip
 80353b2:	6003      	str	r3, [r0, #0]
}
 80353b4:	b004      	add	sp, #16
 80353b6:	bd10      	pop	{r4, pc}
 80353b8:	2000cc18 	.word	0x2000cc18
 80353bc:	2000cc10 	.word	0x2000cc10

080353c0 <time_set_utcprecise>:
#endif



#ifndef EXTF_time_set_utcprecise
OT_WEAK void time_set_utcprecise(ot_u32 utc, ot_u32 subseconds) {
 80353c0:	b500      	push	{lr}
 80353c2:	b083      	sub	sp, #12
 80353c4:	0003      	movs	r3, r0
	ot_time set_time;
    set_time.upper   = (utc >> _UPPER_SHIFT);
 80353c6:	0d80      	lsrs	r0, r0, #22
 80353c8:	9000      	str	r0, [sp, #0]
    set_time.clocks  = (utc << _LOWER_SHIFT);
 80353ca:	029b      	lsls	r3, r3, #10
 80353cc:	9301      	str	r3, [sp, #4]
    set_time.clocks |= subseconds;
 80353ce:	4319      	orrs	r1, r3
 80353d0:	9101      	str	r1, [sp, #4]
    
    time_set(set_time);
 80353d2:	f7ff ffcb 	bl	803536c <time_set>
}
 80353d6:	b003      	add	sp, #12
 80353d8:	bd00      	pop	{pc}

080353da <time_set_utc>:
#endif


#ifndef EXTF_time_set_utc
OT_WEAK void time_set_utc(ot_u32 utc) {
 80353da:	b510      	push	{r4, lr}
    time_set_utcprecise(utc, 0);
 80353dc:	2100      	movs	r1, #0
 80353de:	f7ff ffef 	bl	80353c0 <time_set_utcprecise>
}
 80353e2:	bd10      	pop	{r4, pc}

080353e4 <time_get_utc>:
    *get_time = time_sys;
}
#endif

#ifndef EXTF_time_get_utc
OT_WEAK ot_u32 time_get_utc(void) {
 80353e4:	b500      	push	{lr}
 80353e6:	b085      	sub	sp, #20
    ot_time now;
    time_load_now(&now);
 80353e8:	a802      	add	r0, sp, #8
 80353ea:	f7ff ffa9 	bl	8035340 <time_load_now>
    now.upper  <<= _UPPER_SHIFT;
 80353ee:	9b02      	ldr	r3, [sp, #8]
 80353f0:	0598      	lsls	r0, r3, #22
 80353f2:	9002      	str	r0, [sp, #8]
    now.clocks >>= _LOWER_SHIFT;
 80353f4:	9b03      	ldr	r3, [sp, #12]
 80353f6:	9301      	str	r3, [sp, #4]
 80353f8:	0a9b      	lsrs	r3, r3, #10
 80353fa:	9303      	str	r3, [sp, #12]
    return (now.upper | now.clocks);
 80353fc:	4318      	orrs	r0, r3
}
 80353fe:	b005      	add	sp, #20
 8035400:	bd00      	pop	{pc}
	...

08035404 <time_add>:


#ifndef EXTF_time_add
OT_WEAK void time_add(ot_u32 clocks) {
    ot_u32 scratch;
    scratch         = clocks + time_sys.clocks;
 8035404:	4b05      	ldr	r3, [pc, #20]	; (803541c <time_add+0x18>)
 8035406:	685a      	ldr	r2, [r3, #4]
 8035408:	1812      	adds	r2, r2, r0
    time_sys.upper  += (scratch < clocks);
 803540a:	4282      	cmp	r2, r0
 803540c:	4180      	sbcs	r0, r0
 803540e:	4240      	negs	r0, r0
 8035410:	6819      	ldr	r1, [r3, #0]
 8035412:	468c      	mov	ip, r1
 8035414:	4460      	add	r0, ip
 8035416:	6018      	str	r0, [r3, #0]
    time_sys.clocks  = scratch;
 8035418:	605a      	str	r2, [r3, #4]
}
 803541a:	4770      	bx	lr
 803541c:	2000cc18 	.word	0x2000cc18

08035420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8035420:	480d      	ldr	r0, [pc, #52]	; (8035458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8035422:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8035424:	e000      	b.n	8035428 <Reset_Handler+0x8>
 8035426:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8035428:	480c      	ldr	r0, [pc, #48]	; (803545c <LoopForever+0x6>)
  ldr r1, =_edata
 803542a:	490d      	ldr	r1, [pc, #52]	; (8035460 <LoopForever+0xa>)
  ldr r2, =_sidata
 803542c:	4a0d      	ldr	r2, [pc, #52]	; (8035464 <LoopForever+0xe>)
  movs r3, #0
 803542e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8035430:	e002      	b.n	8035438 <LoopCopyDataInit>

08035432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8035432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8035434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8035436:	3304      	adds	r3, #4

08035438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8035438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 803543a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 803543c:	d3f9      	bcc.n	8035432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 803543e:	4a0a      	ldr	r2, [pc, #40]	; (8035468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8035440:	4c0a      	ldr	r4, [pc, #40]	; (803546c <LoopForever+0x16>)
  movs r3, #0
 8035442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8035444:	e001      	b.n	803544a <LoopFillZerobss>

08035446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8035446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8035448:	3204      	adds	r2, #4

0803544a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 803544a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 803544c:	d3fb      	bcc.n	8035446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 803544e:	f001 f803 	bl	8036458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8035452:	f7fb fd2f 	bl	8030eb4 <main>

08035456 <LoopForever>:

LoopForever:
    b LoopForever
 8035456:	e7fe      	b.n	8035456 <LoopForever>
  ldr   r0, =_estack
 8035458:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 803545c:	2000c000 	.word	0x2000c000
  ldr r1, =_edata
 8035460:	2000c1ac 	.word	0x2000c1ac
  ldr r2, =_sidata
 8035464:	0803744c 	.word	0x0803744c
  ldr r2, =_sbss
 8035468:	2000c1ac 	.word	0x2000c1ac
  ldr r4, =_ebss
 803546c:	2000e0fc 	.word	0x2000e0fc

08035470 <ADC_COMP_DAC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8035470:	e7fe      	b.n	8035470 <ADC_COMP_DAC_IRQHandler>
	...

08035474 <NMI_Handler>:
}



/// The NMI is triggerable by software.  It is used to manage runtime errors.
void NMI_Handler(void) {
 8035474:	b510      	push	{r4, lr}
    ot_int code;

#   ifdef __DEBUG__
    __BKPT(0);
 8035476:	be00      	bkpt	0x0000
#   endif

    code                = platform.error_code;
 8035478:	4b04      	ldr	r3, [pc, #16]	; (803548c <NMI_Handler+0x18>)
 803547a:	2202      	movs	r2, #2
 803547c:	5e98      	ldrsh	r0, [r3, r2]
    platform.error_code = 0;
 803547e:	2200      	movs	r2, #0
 8035480:	805a      	strh	r2, [r3, #2]
    sys_panic(code);
 8035482:	b2c0      	uxtb	r0, r0
 8035484:	f7ff fe96 	bl	80351b4 <sys_panic>
}
 8035488:	bd10      	pop	{r4, pc}
 803548a:	46c0      	nop			; (mov r8, r8)
 803548c:	2000cc2c 	.word	0x2000cc2c

08035490 <HardFault_Handler>:
void HardFault_Handler(void) {
/// If you have traced the code here, most likely the problem is stack overrun.
/// You need to allocate a bigger stack for SSTACK or your thread, or fix some
/// other serious problem (possibly interrupt storm)
#if defined(__DEBUG__)
    __BKPT(1);
 8035490:	be01      	bkpt	0x0001
    /// @note Backup RAM *MUST* be enabled (normally done in RTC/GPTIM init)
    /// @todo Finish this implementation, it is not tested yet
    sub_save_error(1);
    
#endif
}
 8035492:	4770      	bx	lr

08035494 <platform_isr_rtcwakeup>:
}




void platform_isr_rtcwakeup(void) {
 8035494:	b510      	push	{r4, lr}
/// This ISR is normally used as a watchdog for the kernel scheduler.
/// however, can be used for other purposes as well (generally on startup
/// before the kernel gets fully started).  So the watchdog code (restarting
/// the kernel) will only get called if the kernel is actually running in Idle.

    if (systim.flags & GPTIM_FLAG_SLEEP) {
 8035496:	4b04      	ldr	r3, [pc, #16]	; (80354a8 <platform_isr_rtcwakeup+0x14>)
 8035498:	881b      	ldrh	r3, [r3, #0]
 803549a:	07db      	lsls	r3, r3, #31
 803549c:	d400      	bmi.n	80354a0 <platform_isr_rtcwakeup+0xc>
        ///@todo log a glitch
        platform_init_OT();
    }
}
 803549e:	bd10      	pop	{r4, pc}
        platform_init_OT();
 80354a0:	f000 f9c0 	bl	8035824 <platform_init_OT>
}
 80354a4:	e7fb      	b.n	803549e <platform_isr_rtcwakeup+0xa>
 80354a6:	46c0      	nop			; (mov r8, r8)
 80354a8:	2000cc20 	.word	0x2000cc20

080354ac <systim_stop_ticker>:
#endif

#ifndef EXTF_systim_stop_ticker
void systim_stop_ticker() {
///@todo implement ticker via rtc wakeup timer
}
 80354ac:	4770      	bx	lr
	...

080354b0 <platform_isr_rtcalarm>:
  * <LI> platform_isr_tim10() </LI>
  * @todo use rtc wakeup timer instead of tim10
  */


void platform_isr_rtcalarm() {
 80354b0:	b510      	push	{r4, lr}

    // Clocker gets started on wakeup from stop, that's enough
    //systim_start_clocker();

    /// Get the RTC IRQs and clear them in HW
    irqs        = RTC->MISR;
 80354b2:	4b09      	ldr	r3, [pc, #36]	; (80354d8 <platform_isr_rtcalarm+0x28>)
 80354b4:	6d5c      	ldr	r4, [r3, #84]	; 0x54
    RTC->SCR    = irqs;
 80354b6:	65dc      	str	r4, [r3, #92]	; 0x5c

    /// ALARM B event: Radio MAC alarm, only if not in radio HW
    if (irqs & RTC_MISR_ALRBMF) {
 80354b8:	07a3      	lsls	r3, r4, #30
 80354ba:	d405      	bmi.n	80354c8 <platform_isr_rtcalarm+0x18>
    }

    /// ALARM A event: Task is pending
    /// Setting systim.flags to 0 will cause the tasking loop to exit sleep on
    /// exit from this interrupt.
    if (irqs & RTC_MISR_ALRAMF) {
 80354bc:	07e3      	lsls	r3, r4, #31
 80354be:	d502      	bpl.n	80354c6 <platform_isr_rtcalarm+0x16>
        //RTC->CR &= ~RTC_CR_ALRAE;
        systim.flags = 0;
 80354c0:	4b06      	ldr	r3, [pc, #24]	; (80354dc <platform_isr_rtcalarm+0x2c>)
 80354c2:	2200      	movs	r2, #0
 80354c4:	801a      	strh	r2, [r3, #0]
    }
}
 80354c6:	bd10      	pop	{r4, pc}
        RTC->CR &= ~RTC_CR_ALRBE;
 80354c8:	4a03      	ldr	r2, [pc, #12]	; (80354d8 <platform_isr_rtcalarm+0x28>)
 80354ca:	6993      	ldr	r3, [r2, #24]
 80354cc:	4904      	ldr	r1, [pc, #16]	; (80354e0 <platform_isr_rtcalarm+0x30>)
 80354ce:	400b      	ands	r3, r1
 80354d0:	6193      	str	r3, [r2, #24]
            radio_mac_isr();
 80354d2:	f7fc f8af 	bl	8031634 <radio_mac_isr>
 80354d6:	e7f1      	b.n	80354bc <platform_isr_rtcalarm+0xc>
 80354d8:	40002800 	.word	0x40002800
 80354dc:	2000cc20 	.word	0x2000cc20
 80354e0:	fffffdff 	.word	0xfffffdff

080354e4 <systim_init>:
    // These are here in case we need to option the settings in the future
#   define _IE_WAKEUP   0   //RTC_CR_WUTIE
#   define _A_PRESCALER (32 - (1 << OT_GPTIM_OVERSAMPLE))

    /// Activate the clocks and system features to turn-on RTC
    PWR->CR1           |= PWR_CR1_DBP;
 80354e4:	4a19      	ldr	r2, [pc, #100]	; (803554c <systim_init+0x68>)
 80354e6:	6811      	ldr	r1, [r2, #0]
 80354e8:	2380      	movs	r3, #128	; 0x80
 80354ea:	005b      	lsls	r3, r3, #1
 80354ec:	430b      	orrs	r3, r1
 80354ee:	6013      	str	r3, [r2, #0]
    RCC->C2APB1ENR1    |= RCC_C2APB1ENR1_RTCAPBEN;
 80354f0:	21b0      	movs	r1, #176	; 0xb0
 80354f2:	05c9      	lsls	r1, r1, #23
 80354f4:	22ac      	movs	r2, #172	; 0xac
 80354f6:	0052      	lsls	r2, r2, #1
 80354f8:	5888      	ldr	r0, [r1, r2]
 80354fa:	2380      	movs	r3, #128	; 0x80
 80354fc:	00db      	lsls	r3, r3, #3
 80354fe:	4303      	orrs	r3, r0
 8035500:	508b      	str	r3, [r1, r2]
    /// Initialize the RTC itself
    /// - unlock it
    /// - disable all control features
    /// - Set ICSR to use binary counter feature
    /// - Enter Initialization Mode, and wait for it to come.
    RTC->WPR    = 0xCA;
 8035502:	4b13      	ldr	r3, [pc, #76]	; (8035550 <systim_init+0x6c>)
 8035504:	3a8e      	subs	r2, #142	; 0x8e
 8035506:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR    = 0x53;
 8035508:	3a77      	subs	r2, #119	; 0x77
 803550a:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->CR     = 0;
 803550c:	2200      	movs	r2, #0
 803550e:	619a      	str	r2, [r3, #24]
    RTC->ICSR   = (b01 << 8)
 8035510:	3281      	adds	r2, #129	; 0x81
 8035512:	32ff      	adds	r2, #255	; 0xff
 8035514:	60da      	str	r2, [r3, #12]
                | RTC_ICSR_INIT;
    while ((RTC->ICSR & RTC_ICSR_INITF) == 0);
 8035516:	4b0e      	ldr	r3, [pc, #56]	; (8035550 <systim_init+0x6c>)
 8035518:	68db      	ldr	r3, [r3, #12]
 803551a:	065b      	lsls	r3, r3, #25
 803551c:	d5fb      	bpl.n	8035516 <systim_init+0x32>

    /// RTC is being used as a binary counter.
    /// Set Alarm A and Alarm B to use all 32 bits
    RTC->ALRMASSR   = (32 << 24);
 803551e:	4b0c      	ldr	r3, [pc, #48]	; (8035550 <systim_init+0x6c>)
 8035520:	2280      	movs	r2, #128	; 0x80
 8035522:	0592      	lsls	r2, r2, #22
 8035524:	645a      	str	r2, [r3, #68]	; 0x44
    RTC->ALRMBSSR   = (32 << 24);
 8035526:	64da      	str	r2, [r3, #76]	; 0x4c

    /// Prescaler is dependent on the oversample power
    /// For oversample = 5 (typical), prescaler is 0
    RTC->PRER       = (_A_PRESCALER << 16) | 0;
 8035528:	2200      	movs	r2, #0
 803552a:	611a      	str	r2, [r3, #16]

    ///@todo Calibration could be here
    RTC->CALR       = RTC_CALR_LPCAL;
 803552c:	2180      	movs	r1, #128	; 0x80
 803552e:	0149      	lsls	r1, r1, #5
 8035530:	6299      	str	r1, [r3, #40]	; 0x28
    /// - Direct Register Access enabled (Bypass shadow regs)
    /// - Enable Wakeup interrupt by default (but Wakeup timer off)
    /// - Enable Alarm-A/B interrupts by default
    /// - Clear all the ISR flags in SCR
    /// - Set RTC to use Binary Counter mode in ICSR
    RTC->WUTR   = 0x0000FFFF;
 8035532:	4908      	ldr	r1, [pc, #32]	; (8035554 <systim_init+0x70>)
 8035534:	6159      	str	r1, [r3, #20]
    RTC->CR     = /* 0 */ RTC_CR_BYPSHAD
 8035536:	4908      	ldr	r1, [pc, #32]	; (8035558 <systim_init+0x74>)
 8035538:	6199      	str	r1, [r3, #24]
                | _IE_WAKEUP
                | RTC_CR_ALRAIE
                | RTC_CR_ALRBIE
                | b100;
    RTC->SCR    = 0x7F;
 803553a:	217f      	movs	r1, #127	; 0x7f
 803553c:	65d9      	str	r1, [r3, #92]	; 0x5c
    RTC->ICSR   = (b01 << 8);
 803553e:	3181      	adds	r1, #129	; 0x81
 8035540:	60d9      	str	r1, [r3, #12]

    ///@todo re-lock RTC?
    //RTC->WPR    = 0;

    /// 3. Clear local static variables
    systim.clk_stamp    = 0;
 8035542:	4b06      	ldr	r3, [pc, #24]	; (803555c <systim_init+0x78>)
 8035544:	609a      	str	r2, [r3, #8]
    systim.k_stamp      = 0;
 8035546:	605a      	str	r2, [r3, #4]
    systim.flags        = 0;
 8035548:	801a      	strh	r2, [r3, #0]

}
 803554a:	4770      	bx	lr
 803554c:	58000400 	.word	0x58000400
 8035550:	40002800 	.word	0x40002800
 8035554:	0000ffff 	.word	0x0000ffff
 8035558:	00003024 	.word	0x00003024
 803555c:	2000cc20 	.word	0x2000cc20

08035560 <systim_start_clocker>:
}

inline void systim_restart_clocker() {
/// This is a special version of systim_start_clocker(), which for some
/// platforms must have slight differences to systim_start_clocker().
    systim.clk_stamp = RTC->SSR;
 8035560:	4b02      	ldr	r3, [pc, #8]	; (803556c <systim_start_clocker+0xc>)
 8035562:	689a      	ldr	r2, [r3, #8]
 8035564:	4b02      	ldr	r3, [pc, #8]	; (8035570 <systim_start_clocker+0x10>)
 8035566:	609a      	str	r2, [r3, #8]
}
 8035568:	4770      	bx	lr
 803556a:	46c0      	nop			; (mov r8, r8)
 803556c:	40002800 	.word	0x40002800
 8035570:	2000cc20 	.word	0x2000cc20

08035574 <systim_stop_clocker>:
    return (ot_u16)(systim.clk_stamp - RTC->SSR);
}

inline void systim_stop_clocker() {
/// Clocker always runs in this implementation
}
 8035574:	4770      	bx	lr
	...

08035578 <systim_get>:


ot_u32 systim_get() {
    ot_u32 clocks;
    //RTC->CR        &= ~RTC_CR_ALRAE;
    clocks      = systim.k_stamp - RTC->SSR;
 8035578:	4b03      	ldr	r3, [pc, #12]	; (8035588 <systim_get+0x10>)
 803557a:	6858      	ldr	r0, [r3, #4]
 803557c:	4b03      	ldr	r3, [pc, #12]	; (803558c <systim_get+0x14>)
 803557e:	689b      	ldr	r3, [r3, #8]
 8035580:	1ac0      	subs	r0, r0, r3
    clocks    >>= OT_GPTIM_OVERSAMPLE;
 8035582:	0940      	lsrs	r0, r0, #5
    return clocks;
}
 8035584:	4770      	bx	lr
 8035586:	46c0      	nop			; (mov r8, r8)
 8035588:	2000cc20 	.word	0x2000cc20
 803558c:	40002800 	.word	0x40002800

08035590 <systim_flush>:
    clocks    >>= OT_GPTIM_OVERSAMPLE;
    return (ot_u16)clocks;
}

void systim_flush() {
    uint32_t rtc_ssr = RTC->SSR;
 8035590:	4b02      	ldr	r3, [pc, #8]	; (803559c <systim_flush+0xc>)
 8035592:	689a      	ldr	r2, [r3, #8]
    systim.clk_stamp = rtc_ssr;
 8035594:	4b02      	ldr	r3, [pc, #8]	; (80355a0 <systim_flush+0x10>)
 8035596:	609a      	str	r2, [r3, #8]
    systim.k_stamp   = rtc_ssr;
 8035598:	605a      	str	r2, [r3, #4]
}
 803559a:	4770      	bx	lr
 803559c:	40002800 	.word	0x40002800
 80355a0:	2000cc20 	.word	0x2000cc20

080355a4 <systim_disable>:
inline void systim_enable() {
    RTC->CR |= RTC_CR_ALRAIE;
}

inline void systim_disable() {
    RTC->CR &= ~RTC_CR_ALRAIE;
 80355a4:	4a02      	ldr	r2, [pc, #8]	; (80355b0 <systim_disable+0xc>)
 80355a6:	6993      	ldr	r3, [r2, #24]
 80355a8:	4902      	ldr	r1, [pc, #8]	; (80355b4 <systim_disable+0x10>)
 80355aa:	400b      	ands	r3, r1
 80355ac:	6193      	str	r3, [r2, #24]
}
 80355ae:	4770      	bx	lr
 80355b0:	40002800 	.word	0x40002800
 80355b4:	ffffefff 	.word	0xffffefff

080355b8 <systim_schedule>:

//void systim_pend() {
// Not supported on STM32WL ... not used in the kernel anyway
//}

ot_u16 systim_schedule(ot_u32 nextevent, ot_u32 overhead) {
 80355b8:	b530      	push	{r4, r5, lr}
/// This should only be called from the scheduler.

    /// Subtracting the overhead of the scheduler runtime yields the true time
    /// to schedule the nextevent.
    ///@todo could this just be done against clk_stamp?
    nextevent = (ot_long)nextevent - (ot_long)overhead;
 80355ba:	1a40      	subs	r0, r0, r1

    /// If the task to be scheduled is already due return 0.
    /// This will ignore the sleep process and go straight to the task.
    if ((ot_long)nextevent <= 0) {
 80355bc:	2800      	cmp	r0, #0
 80355be:	dd14      	ble.n	80355ea <systim_schedule+0x32>

    /// Program the scheduled time into the timer, in ticks.
    /// Oversampling is done at the driver level, versus shifting which is done
    /// at the kernel level.  Oversampling can help timers without synchronized
    /// updates whereas shifting can improve scheduling precision.
    systim.flags    = GPTIM_FLAG_SLEEP;
 80355c0:	490c      	ldr	r1, [pc, #48]	; (80355f4 <systim_schedule+0x3c>)
 80355c2:	2401      	movs	r4, #1
 80355c4:	800c      	strh	r4, [r1, #0]
    systim.k_stamp  = RTC->SSR;
 80355c6:	4b0c      	ldr	r3, [pc, #48]	; (80355f8 <systim_schedule+0x40>)
 80355c8:	689a      	ldr	r2, [r3, #8]
 80355ca:	604a      	str	r2, [r1, #4]
    RTC->CR        &= ~RTC_CR_ALRAE;
 80355cc:	6999      	ldr	r1, [r3, #24]
 80355ce:	4d0b      	ldr	r5, [pc, #44]	; (80355fc <systim_schedule+0x44>)
 80355d0:	4029      	ands	r1, r5
 80355d2:	6199      	str	r1, [r3, #24]
    RTC->SCR        = RTC_SCR_CALRAF;
 80355d4:	65dc      	str	r4, [r3, #92]	; 0x5c
    RTC->ALRABINR   = systim.k_stamp - (ot_u32)(nextevent << OT_GPTIM_OVERSAMPLE);
 80355d6:	0141      	lsls	r1, r0, #5
 80355d8:	1a52      	subs	r2, r2, r1
 80355da:	671a      	str	r2, [r3, #112]	; 0x70
    RTC->CR        |= RTC_CR_ALRAE;
 80355dc:	6999      	ldr	r1, [r3, #24]
 80355de:	2280      	movs	r2, #128	; 0x80
 80355e0:	0052      	lsls	r2, r2, #1
 80355e2:	430a      	orrs	r2, r1
 80355e4:	619a      	str	r2, [r3, #24]

    return (ot_u16)nextevent;
 80355e6:	b280      	uxth	r0, r0
}
 80355e8:	bd30      	pop	{r4, r5, pc}
        systim.flags = 0;
 80355ea:	4b02      	ldr	r3, [pc, #8]	; (80355f4 <systim_schedule+0x3c>)
 80355ec:	2200      	movs	r2, #0
 80355ee:	801a      	strh	r2, [r3, #0]
        return 0;
 80355f0:	2000      	movs	r0, #0
 80355f2:	e7f9      	b.n	80355e8 <systim_schedule+0x30>
 80355f4:	2000cc20 	.word	0x2000cc20
 80355f8:	40002800 	.word	0x40002800
 80355fc:	fffffeff 	.word	0xfffffeff

08035600 <systim_set_insertion>:
// void platform_set_ktim(ot_u16 value) {
//}



void systim_set_insertion(ot_u16 value) {
 8035600:	b510      	push	{r4, lr}
/// systim2 is often used for RF MAC timing.  RTC ALARMB is the implementation.
/// One caveat of the STM32WL is that it CANNOT send a SWIER to the RTC ISR(s)
/// the way other STM32s can.
///@note An EXTI line is commandeered to handle the value==0 case.

    if (value != 0) {
 8035602:	2800      	cmp	r0, #0
 8035604:	d00f      	beq.n	8035626 <systim_set_insertion+0x26>
        ot_u32 rtc_ssr;
        rtc_ssr         = RTC->SSR;
 8035606:	4b0a      	ldr	r3, [pc, #40]	; (8035630 <systim_set_insertion+0x30>)
 8035608:	689a      	ldr	r2, [r3, #8]
        RTC->CR        &= ~RTC_CR_ALRBE;
 803560a:	6999      	ldr	r1, [r3, #24]
 803560c:	4c09      	ldr	r4, [pc, #36]	; (8035634 <systim_set_insertion+0x34>)
 803560e:	4021      	ands	r1, r4
 8035610:	6199      	str	r1, [r3, #24]
        RTC->SCR        = RTC_SCR_CALRBF;
 8035612:	2102      	movs	r1, #2
 8035614:	65d9      	str	r1, [r3, #92]	; 0x5c
        RTC->ALRABINR   = rtc_ssr - (ot_u32)value;
 8035616:	1a10      	subs	r0, r2, r0
 8035618:	6718      	str	r0, [r3, #112]	; 0x70
        RTC->CR        |= RTC_CR_ALRBE;
 803561a:	6999      	ldr	r1, [r3, #24]
 803561c:	2280      	movs	r2, #128	; 0x80
 803561e:	0092      	lsls	r2, r2, #2
 8035620:	430a      	orrs	r2, r1
 8035622:	619a      	str	r2, [r3, #24]
    }
    else {
        BOARD_SWEXTI1_SET();
    }

}
 8035624:	bd10      	pop	{r4, pc}
        BOARD_SWEXTI1_SET();
 8035626:	4b04      	ldr	r3, [pc, #16]	; (8035638 <systim_set_insertion+0x38>)
 8035628:	2280      	movs	r2, #128	; 0x80
 803562a:	0212      	lsls	r2, r2, #8
 803562c:	609a      	str	r2, [r3, #8]
}
 803562e:	e7f9      	b.n	8035624 <systim_set_insertion+0x24>
 8035630:	40002800 	.word	0x40002800
 8035634:	fffffdff 	.word	0xfffffdff
 8035638:	58000800 	.word	0x58000800

0803563c <systim_enable_insertion>:

void systim_enable_insertion() {
    RTC->CR |= RTC_CR_ALRBE;
 803563c:	4a03      	ldr	r2, [pc, #12]	; (803564c <systim_enable_insertion+0x10>)
 803563e:	6991      	ldr	r1, [r2, #24]
 8035640:	2380      	movs	r3, #128	; 0x80
 8035642:	009b      	lsls	r3, r3, #2
 8035644:	430b      	orrs	r3, r1
 8035646:	6193      	str	r3, [r2, #24]
}
 8035648:	4770      	bx	lr
 803564a:	46c0      	nop			; (mov r8, r8)
 803564c:	40002800 	.word	0x40002800

08035650 <systim_disable_insertion>:

void systim_disable_insertion() {
    RTC->CR &= ~RTC_CR_ALRBE;
 8035650:	4a02      	ldr	r2, [pc, #8]	; (803565c <systim_disable_insertion+0xc>)
 8035652:	6993      	ldr	r3, [r2, #24]
 8035654:	4902      	ldr	r1, [pc, #8]	; (8035660 <systim_disable_insertion+0x10>)
 8035656:	400b      	ands	r3, r1
 8035658:	6193      	str	r3, [r2, #24]
}
 803565a:	4770      	bx	lr
 803565c:	40002800 	.word	0x40002800
 8035660:	fffffdff 	.word	0xfffffdff

08035664 <systim_chronstamp>:




ot_u32 systim_chronstamp(ot_u32* timestamp) {
 8035664:	1e03      	subs	r3, r0, #0
    ot_u32 timer_cnt;

    timer_cnt = RTC->SSR;
 8035666:	4a03      	ldr	r2, [pc, #12]	; (8035674 <systim_chronstamp+0x10>)
 8035668:	6890      	ldr	r0, [r2, #8]
    if (timestamp != NULL) {
 803566a:	d001      	beq.n	8035670 <systim_chronstamp+0xc>
        timer_cnt = *timestamp - timer_cnt;
 803566c:	681b      	ldr	r3, [r3, #0]
 803566e:	1a18      	subs	r0, r3, r0
    }

    return timer_cnt;
}
 8035670:	4770      	bx	lr
 8035672:	46c0      	nop			; (mov r8, r8)
 8035674:	40002800 	.word	0x40002800

08035678 <RTC_LSECSS_IRQHandler>:
#define _RTC_WKUP   (defined(__ISR_RTC_WKUP) && !defined(__N_ISR_RTC_WKUP))
#define _LSECSS     (defined(__ISR_LSECSS) && !defined(__N_ISR_LSECSS))

#if (_TAMPER || _RTC_STAMP || _RTC_SSRU || _RTC_ALARM || _RTC_WKUP || LSECSS)

void RTC_LSECSS_IRQHandler(void) {
 8035678:	b510      	push	{r4, lr}
    // The RTC->MISR pins must be cleared in the platform_isr_...() functions.
    // EXTI17   RTC Alarm
    // EXTI18   RTC SSRU
    // EXTI19   TAMPER, RTC TIMESTAMP, LSE_CSS
    // EXTI20   RTC Wakeup
    rtc_misr = RTC->MISR;
 803567a:	4b06      	ldr	r3, [pc, #24]	; (8035694 <RTC_LSECSS_IRQHandler+0x1c>)
 803567c:	6d5c      	ldr	r4, [r3, #84]	; 0x54
        platform_isr_lsecss();
    }
#   endif

#   if _RTC_ALARM
    if (rtc_misr & (RTC_MISR_ALRAMF | RTC_MISR_ALRBMF)) {
 803567e:	07a3      	lsls	r3, r4, #30
 8035680:	d102      	bne.n	8035688 <RTC_LSECSS_IRQHandler+0x10>
        platform_isr_rtcalarm();
    }
#   endif

#   if _RTC_WKUP
    if (rtc_misr & RTC_MISR_WUTMF) {
 8035682:	0763      	lsls	r3, r4, #29
 8035684:	d403      	bmi.n	803568e <RTC_LSECSS_IRQHandler+0x16>
        platform_isr_rtcwakeup();
    }
#   endif

    __ISR_EXIT_HOOK();
}
 8035686:	bd10      	pop	{r4, pc}
        platform_isr_rtcalarm();
 8035688:	f7ff ff12 	bl	80354b0 <platform_isr_rtcalarm>
 803568c:	e7f9      	b.n	8035682 <RTC_LSECSS_IRQHandler+0xa>
        platform_isr_rtcwakeup();
 803568e:	f7ff ff01 	bl	8035494 <platform_isr_rtcwakeup>
}
 8035692:	e7f8      	b.n	8035686 <RTC_LSECSS_IRQHandler+0xe>
 8035694:	40002800 	.word	0x40002800

08035698 <DMA2_DMAMUX1_OVR_IRQHandler>:
#define _DMAMUX1_OVR2   (defined(__ISR_DMAMUX1_OVR2) && !defined(__N_ISR_DMAMUX1_OVR2))
#define _DMAMUX1_OVR3   (defined(__ISR_DMAMUX1_OVR3) && !defined(__N_ISR_DMAMUX1_OVR3))

#if ( _DMA8 || _DMA9 || _DMA10 || _DMA11 || _DMA12 || _DMA13 || _DMA14 \
    ||_DMAMUX1_OVR0 || _DMAMUX1_OVR1 || _DMAMUX1_OVR2 || _DMAMUX1_OVR3)
void DMA2_DMAMUX1_OVR_IRQHandler(void) {
 8035698:	b510      	push	{r4, lr}
    chan_x = DMA2_Channel6->CCR;
    if ((chan_x & 1) && (chan_x & 0x000E) && (DMA2->ISR & (1<<20)))
        platform_isr_dma2ch6();
#   endif
#   if (_DMA14)
    chan_x = DMA2_Channel7->CCR;
 803569a:	4b07      	ldr	r3, [pc, #28]	; (80356b8 <DMA2_DMAMUX1_OVR_IRQHandler+0x20>)
 803569c:	681b      	ldr	r3, [r3, #0]
    if ((chan_x & 1) && (chan_x & 0x000E) && (DMA2->ISR & (1<<24)))
 803569e:	07da      	lsls	r2, r3, #31
 80356a0:	d506      	bpl.n	80356b0 <DMA2_DMAMUX1_OVR_IRQHandler+0x18>
 80356a2:	220e      	movs	r2, #14
 80356a4:	421a      	tst	r2, r3
 80356a6:	d003      	beq.n	80356b0 <DMA2_DMAMUX1_OVR_IRQHandler+0x18>
 80356a8:	4b04      	ldr	r3, [pc, #16]	; (80356bc <DMA2_DMAMUX1_OVR_IRQHandler+0x24>)
 80356aa:	681b      	ldr	r3, [r3, #0]
 80356ac:	01db      	lsls	r3, r3, #7
 80356ae:	d400      	bmi.n	80356b2 <DMA2_DMAMUX1_OVR_IRQHandler+0x1a>
    if ((chan_x & DMAMUX_OIE) && (DMAMUX->ISR & (1<<3))
        platform_isr_dmamux_ovr3();
#   endif

    __ISR_EXIT_HOOK();
}
 80356b0:	bd10      	pop	{r4, pc}
        platform_isr_dma2ch7();
 80356b2:	f000 fe4b 	bl	803634c <platform_isr_dma2ch7>
}
 80356b6:	e7fb      	b.n	80356b0 <DMA2_DMAMUX1_OVR_IRQHandler+0x18>
 80356b8:	40020480 	.word	0x40020480
 80356bc:	40020400 	.word	0x40020400

080356c0 <USART2_IRQHandler>:
    __ISR_EXIT_HOOK();
}
#endif

#if defined(__ISR_USART2) && !defined(__N_ISR_USART2)
void USART2_IRQHandler(void) {
 80356c0:	b510      	push	{r4, lr}
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    //EXTI->PR1 = (1<<27);
    platform_isr_usart2();
 80356c2:	f000 fcdf 	bl	8036084 <platform_isr_usart2>
    __ISR_EXIT_HOOK();
}
 80356c6:	bd10      	pop	{r4, pc}

080356c8 <SUBGHZ_Radio_IRQHandler>:


#define _RFIRQ      (defined(__ISR_RFIRQ) && !defined(__N_ISR_RFIRQ))
#define _RFBUSY     (defined(__ISR_RFBUSY) && !defined(__N_ISR_RFBUSY))
#if (_RFIRQ || _RFBUSY)
void SUBGHZ_Radio_IRQHandler(void) {
 80356c8:	b510      	push	{r4, lr}
        EXTI->PR2 = (1<<(45-32));
        platform_isr_rfbusy();
    }
#   endif
#   if _RFIRQ
    platform_isr_rfirq();
 80356ca:	f7fc f973 	bl	80319b4 <platform_isr_rfirq>
#   endif

    __ISR_EXIT_HOOK();
}
 80356ce:	bd10      	pop	{r4, pc}

080356d0 <sub_xsi_trim>:

    // Enable TIM16 with:
    // - LSE as measurement input capture 1
    // - No prescaler
    // - Immediate Reload
    RCC->APB2ENR   |= RCC_APB2ENR_TIM16EN;
 80356d0:	23b0      	movs	r3, #176	; 0xb0
 80356d2:	05db      	lsls	r3, r3, #23
 80356d4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80356d6:	2280      	movs	r2, #128	; 0x80
 80356d8:	0292      	lsls	r2, r2, #10
 80356da:	4311      	orrs	r1, r2
 80356dc:	6619      	str	r1, [r3, #96]	; 0x60
	RCC->APB2RSTR  |= RCC_APB2RSTR_TIM16RST;
 80356de:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80356e0:	430a      	orrs	r2, r1
 80356e2:	641a      	str	r2, [r3, #64]	; 0x40
	RCC->APB2RSTR  &= ~RCC_APB2RSTR_TIM16RST;
 80356e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80356e6:	4910      	ldr	r1, [pc, #64]	; (8035728 <sub_xsi_trim+0x58>)
 80356e8:	400a      	ands	r2, r1
 80356ea:	641a      	str	r2, [r3, #64]	; 0x40

	TIM16->ARR      = 65535;
 80356ec:	4b0f      	ldr	r3, [pc, #60]	; (803572c <sub_xsi_trim+0x5c>)
 80356ee:	4a10      	ldr	r2, [pc, #64]	; (8035730 <sub_xsi_trim+0x60>)
 80356f0:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM16->CCMR1    = 1;                    // Set Input to line-1
 80356f2:	2201      	movs	r2, #1
 80356f4:	619a      	str	r2, [r3, #24]
    TIM16->CCER     = TIM_CCER_CC1E;        // Enable Input Capture
 80356f6:	621a      	str	r2, [r3, #32]
    TIM16->OR1      = b10;                  // LSE
 80356f8:	2102      	movs	r1, #2
 80356fa:	6519      	str	r1, [r3, #80]	; 0x50
    TIM16->CR1      = TIM_CR1_CEN;
 80356fc:	601a      	str	r2, [r3, #0]

    // Wait for rising edge 1, then count SYSCLK pulses until rising edge 2
    ///@todo WFE?
    while (edge == 0) {
        ot_u16 flag;
        do { flag = TIM16->SR; } while (flag == 0); //wait for edge
 80356fe:	4b0b      	ldr	r3, [pc, #44]	; (803572c <sub_xsi_trim+0x5c>)
 8035700:	691b      	ldr	r3, [r3, #16]
 8035702:	b29a      	uxth	r2, r3
 8035704:	2a00      	cmp	r2, #0
 8035706:	d0fa      	beq.n	80356fe <sub_xsi_trim+0x2e>

        if ((flag & TIM_SR_CC1IF) == 0) {           // something is wrong, revert to last
 8035708:	079b      	lsls	r3, r3, #30
 803570a:	d502      	bpl.n	8035712 <sub_xsi_trim+0x42>
            rc = 0;
            break;
        }
        if (edge == 0) {                         // First Edge, must wait for 2nd
            xsi_dev = TIM16->CCR1;
 803570c:	4b07      	ldr	r3, [pc, #28]	; (803572c <sub_xsi_trim+0x5c>)
 803570e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    while (edge == 0) {
 8035710:	e7f5      	b.n	80356fe <sub_xsi_trim+0x2e>
            rc      = (int)(target - xsi_dev);
        }
    }
    
    // Turn-off TIM16
    TIM16->CR1      = 0;
 8035712:	4b06      	ldr	r3, [pc, #24]	; (803572c <sub_xsi_trim+0x5c>)
 8035714:	2200      	movs	r2, #0
 8035716:	601a      	str	r2, [r3, #0]
    RCC->APB2ENR   &= ~RCC_APB2ENR_TIM16EN;
 8035718:	22b0      	movs	r2, #176	; 0xb0
 803571a:	05d2      	lsls	r2, r2, #23
 803571c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 803571e:	4902      	ldr	r1, [pc, #8]	; (8035728 <sub_xsi_trim+0x58>)
 8035720:	400b      	ands	r3, r1
 8035722:	6613      	str	r3, [r2, #96]	; 0x60
    

    

#   undef _TARGET
}
 8035724:	2000      	movs	r0, #0
 8035726:	4770      	bx	lr
 8035728:	fffdffff 	.word	0xfffdffff
 803572c:	40014400 	.word	0x40014400
 8035730:	0000ffff 	.word	0x0000ffff

08035734 <sub_voltage_config>:
    scratch     = PWR->CR1 & ~(ot_u32)(PWR_CR1_VOS_Msk);
 8035734:	4a05      	ldr	r2, [pc, #20]	; (803574c <sub_voltage_config+0x18>)
 8035736:	6813      	ldr	r3, [r2, #0]
 8035738:	b29b      	uxth	r3, r3
 803573a:	4905      	ldr	r1, [pc, #20]	; (8035750 <sub_voltage_config+0x1c>)
 803573c:	400b      	ands	r3, r1
    scratch    |= pwr_cr_vos_x;
 803573e:	4303      	orrs	r3, r0
    PWR->CR1    = scratch;
 8035740:	6013      	str	r3, [r2, #0]
    while((PWR->SR2 & PWR_SR2_VOSF) != 0) { }
 8035742:	4b02      	ldr	r3, [pc, #8]	; (803574c <sub_voltage_config+0x18>)
 8035744:	695b      	ldr	r3, [r3, #20]
 8035746:	055b      	lsls	r3, r3, #21
 8035748:	d4fb      	bmi.n	8035742 <sub_voltage_config+0xe>
}
 803574a:	4770      	bx	lr
 803574c:	58000400 	.word	0x58000400
 8035750:	fffff9ff 	.word	0xfffff9ff

08035754 <sub_osc_startup>:
    if ((RCC->CR & RCC_CR_MSIRDY) == 0) {
 8035754:	23b0      	movs	r3, #176	; 0xb0
 8035756:	05db      	lsls	r3, r3, #23
 8035758:	681b      	ldr	r3, [r3, #0]
 803575a:	079b      	lsls	r3, r3, #30
 803575c:	d410      	bmi.n	8035780 <sub_osc_startup+0x2c>
        RCC->CR |= RCC_CR_MSION;
 803575e:	22b0      	movs	r2, #176	; 0xb0
 8035760:	05d2      	lsls	r2, r2, #23
 8035762:	6813      	ldr	r3, [r2, #0]
 8035764:	2101      	movs	r1, #1
 8035766:	430b      	orrs	r3, r1
 8035768:	6013      	str	r3, [r2, #0]
    ot_u16  wdog = counter;
 803576a:	0003      	movs	r3, r0
        while ( ((RCC->CR & RCC_CR_MSIRDY) == 0) && (--wdog) );
 803576c:	22b0      	movs	r2, #176	; 0xb0
 803576e:	05d2      	lsls	r2, r2, #23
 8035770:	6812      	ldr	r2, [r2, #0]
 8035772:	0792      	lsls	r2, r2, #30
 8035774:	d405      	bmi.n	8035782 <sub_osc_startup+0x2e>
 8035776:	3b01      	subs	r3, #1
 8035778:	b29b      	uxth	r3, r3
 803577a:	2b00      	cmp	r3, #0
 803577c:	d1f6      	bne.n	803576c <sub_osc_startup+0x18>
 803577e:	e000      	b.n	8035782 <sub_osc_startup+0x2e>
    ot_u16  wdog = counter;
 8035780:	0003      	movs	r3, r0
    if (wdog == 0) {
 8035782:	2b00      	cmp	r3, #0
 8035784:	d021      	beq.n	80357ca <sub_osc_startup+0x76>
    rcc_reg = RCC->CR;
 8035786:	23b0      	movs	r3, #176	; 0xb0
 8035788:	05db      	lsls	r3, r3, #23
 803578a:	681a      	ldr	r2, [r3, #0]
    if ((rcc_reg & 0x000000F8) != 0b10111000) {
 803578c:	23f8      	movs	r3, #248	; 0xf8
 803578e:	4013      	ands	r3, r2
 8035790:	2bb8      	cmp	r3, #184	; 0xb8
 8035792:	d006      	beq.n	80357a2 <sub_osc_startup+0x4e>
        rcc_reg = (rcc_reg & 0x000000F8) | 0b10111000;
 8035794:	2340      	movs	r3, #64	; 0x40
 8035796:	4013      	ands	r3, r2
 8035798:	22b8      	movs	r2, #184	; 0xb8
 803579a:	4313      	orrs	r3, r2
        RCC->CR = rcc_reg;
 803579c:	22b0      	movs	r2, #176	; 0xb0
 803579e:	05d2      	lsls	r2, r2, #23
 80357a0:	6013      	str	r3, [r2, #0]
    rcc_reg = RCC->CFGR;
 80357a2:	23b0      	movs	r3, #176	; 0xb0
 80357a4:	05db      	lsls	r3, r3, #23
 80357a6:	689b      	ldr	r3, [r3, #8]
    if ((rcc_reg & 0x0000000F) != 0b0000) {
 80357a8:	071a      	lsls	r2, r3, #28
 80357aa:	d00e      	beq.n	80357ca <sub_osc_startup+0x76>
        rcc_reg &= ~0x00000003;
 80357ac:	2203      	movs	r2, #3
 80357ae:	4393      	bics	r3, r2
        RCC->CFGR = rcc_reg;
 80357b0:	22b0      	movs	r2, #176	; 0xb0
 80357b2:	05d2      	lsls	r2, r2, #23
 80357b4:	6093      	str	r3, [r2, #8]
        while ( ((RCC->CFGR & 0x0000000C) != 0) && (--wdog) );
 80357b6:	23b0      	movs	r3, #176	; 0xb0
 80357b8:	05db      	lsls	r3, r3, #23
 80357ba:	689b      	ldr	r3, [r3, #8]
 80357bc:	220c      	movs	r2, #12
 80357be:	421a      	tst	r2, r3
 80357c0:	d003      	beq.n	80357ca <sub_osc_startup+0x76>
 80357c2:	3801      	subs	r0, #1
 80357c4:	b280      	uxth	r0, r0
 80357c6:	2800      	cmp	r0, #0
 80357c8:	d1f5      	bne.n	80357b6 <sub_osc_startup+0x62>
}
 80357ca:	4770      	bx	lr

080357cc <platform_ext_msitrim>:
}
#endif


#ifndef EXTF_platform_ext_msitrim
void platform_ext_msitrim() {
 80357cc:	b510      	push	{r4, lr}
///@todo unclear from manual if the MSITRIM value is 8bit signed twos-compliment or
///      a 7bit value with a signing bit in the MSB.
    uint32_t    rcc_icsr;
    int8_t      msitrim;
    int         trim = sub_xsi_trim(48000000);  ///@todo replace 48 MHz with MACRO
 80357ce:	480c      	ldr	r0, [pc, #48]	; (8035800 <platform_ext_msitrim+0x34>)
 80357d0:	f7ff ff7e 	bl	80356d0 <sub_xsi_trim>
    
    /// If trimming is already perfect, do nothing.
    /// MSITRIM center value is 0.
    /// Make sure trim value is between -128 to 127.
    if (trim != 0) {
 80357d4:	2800      	cmp	r0, #0
 80357d6:	d010      	beq.n	80357fa <platform_ext_msitrim+0x2e>
        if (trim < -128) {
 80357d8:	0003      	movs	r3, r0
 80357da:	3380      	adds	r3, #128	; 0x80
 80357dc:	db03      	blt.n	80357e6 <platform_ext_msitrim+0x1a>
            msitrim = -128;
        }
        else if (trim > 127) {
 80357de:	287f      	cmp	r0, #127	; 0x7f
 80357e0:	dc0c      	bgt.n	80357fc <platform_ext_msitrim+0x30>
            msitrim = 127;
        }
        else {
            msitrim = (int8_t)trim;
 80357e2:	b243      	sxtb	r3, r0
 80357e4:	e001      	b.n	80357ea <platform_ext_msitrim+0x1e>
            msitrim = -128;
 80357e6:	2380      	movs	r3, #128	; 0x80
 80357e8:	425b      	negs	r3, r3
        }
        
        rcc_icsr    = RCC->ICSCR;
 80357ea:	21b0      	movs	r1, #176	; 0xb0
 80357ec:	05c9      	lsls	r1, r1, #23
 80357ee:	6848      	ldr	r0, [r1, #4]
        rcc_icsr   &= ~(255 << 8);
 80357f0:	4a04      	ldr	r2, [pc, #16]	; (8035804 <platform_ext_msitrim+0x38>)
 80357f2:	4002      	ands	r2, r0
        rcc_icsr   |= ((uint32_t)msitrim << 8);
 80357f4:	0218      	lsls	r0, r3, #8
 80357f6:	4310      	orrs	r0, r2
        RCC->ICSCR  = rcc_icsr;
 80357f8:	6048      	str	r0, [r1, #4]
    }
}
 80357fa:	bd10      	pop	{r4, pc}
            msitrim = 127;
 80357fc:	237f      	movs	r3, #127	; 0x7f
 80357fe:	e7f4      	b.n	80357ea <platform_ext_msitrim+0x1e>
 8035800:	02dc6c00 	.word	0x02dc6c00
 8035804:	ffff00ff 	.word	0xffff00ff

08035808 <platform_get_clockhz>:
/** Clock Hz retrieval function
  * ========================================================================<BR>
  */
ot_ulong platform_get_clockhz(ot_uint clock_index) {
#   if defined(__DEBUG__)
    if (clock_index > 2) {
 8035808:	2802      	cmp	r0, #2
 803580a:	d900      	bls.n	803580e <platform_get_clockhz+0x6>
        while(1);   //trap in debugging
 803580c:	e7fe      	b.n	803580c <platform_get_clockhz+0x4>
    }
#   endif
    return (clock_index > 2) ? 0 : platform_ext.clock_hz[clock_index];
 803580e:	0080      	lsls	r0, r0, #2
 8035810:	4b01      	ldr	r3, [pc, #4]	; (8035818 <platform_get_clockhz+0x10>)
 8035812:	1818      	adds	r0, r3, r0
 8035814:	6840      	ldr	r0, [r0, #4]
}
 8035816:	4770      	bx	lr
 8035818:	2000cc30 	.word	0x2000cc30

0803581c <platform_disable_interrupts>:
  __ASM volatile ("cpsid i" : : : "memory");
 803581c:	b672      	cpsid	i
  */

#ifndef EXTF_platform_disable_interrupts
OT_INLINE void platform_disable_interrupts(void) {
    __disable_irq();    // CMSIS intrinsic
}
 803581e:	4770      	bx	lr

08035820 <platform_enable_interrupts>:
  __ASM volatile ("cpsie i" : : : "memory");
 8035820:	b662      	cpsie	i


#ifndef EXTF_platform_enable_interrupts
OT_INLINE void platform_enable_interrupts(void) {
    __enable_irq();     // CMSIS intrinsic
}
 8035822:	4770      	bx	lr

08035824 <platform_init_OT>:
#endif



#ifndef EXTF_platform_init_OT
void platform_init_OT() {
 8035824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8035826:	b083      	sub	sp, #12
    /// 1. Initialize Data sources required by basically all OT features
    ///    - Buffers module allocates the data queues, used by all I/O
    ///    - Veelite module allocates and prepares the filesystem
    buffers_init();
 8035828:	f7fe fee8 	bl	80345fc <buffers_init>
    vl_init();
 803582c:	f7ff fbc0 	bl	8034fb0 <vl_init>

    /// 2. Initialize the System Time.  If the build does not support time,
    ///    then this will do nothing.
    time_set_utc(364489200);
 8035830:	4834      	ldr	r0, [pc, #208]	; (8035904 <platform_init_OT+0xe0>)
 8035832:	f7ff fdd2 	bl	80353da <time_set_utc>

    /// 3. Look for errors, report them, and make sure to clear the error RAM.
    /// @note This is a decent place to put a breakpoint when debugging.
    if (TAMP->BKP2R != 0) {
 8035836:	4a34      	ldr	r2, [pc, #208]	; (8035908 <platform_init_OT+0xe4>)
 8035838:	2384      	movs	r3, #132	; 0x84
 803583a:	005b      	lsls	r3, r3, #1
 803583c:	58d3      	ldr	r3, [r2, r3]
 803583e:	2b00      	cmp	r3, #0
 8035840:	d10c      	bne.n	803585c <platform_init_OT+0x38>
        } uid;
        ot_u16* hwid;
        ot_int  i;

        // 96 bits with ASCII
        uid.word[1] = *((ot_u32*)(0x1FFF7584));
 8035842:	4b32      	ldr	r3, [pc, #200]	; (803590c <platform_init_OT+0xe8>)
 8035844:	681b      	ldr	r3, [r3, #0]
 8035846:	9301      	str	r3, [sp, #4]
        uid.word[0] = *((ot_u32*)(0x1FFF7580));
 8035848:	4b31      	ldr	r3, [pc, #196]	; (8035910 <platform_init_OT+0xec>)
 803584a:	681b      	ldr	r3, [r3, #0]
 803584c:	9300      	str	r3, [sp, #0]
        
        ///@todo compression of the ID.  There are many gaps in the ID
        fpid    = ISF_open_su(ISF_ID(device_features));
 803584e:	2001      	movs	r0, #1
 8035850:	f7ff fb93 	bl	8034f7a <ISF_open_su>
 8035854:	0005      	movs	r5, r0
        hwid    = &(uid.halfw[0]);
        for (i=0; i<8; i+=2) {
 8035856:	2100      	movs	r1, #0
        hwid    = &(uid.halfw[0]);
 8035858:	466b      	mov	r3, sp
        for (i=0; i<8; i+=2) {
 803585a:	e04a      	b.n	80358f2 <platform_init_OT+0xce>
        error.ulong     = TAMP->BKP2R;
 803585c:	2384      	movs	r3, #132	; 0x84
 803585e:	005b      	lsls	r3, r3, #1
 8035860:	58d4      	ldr	r4, [r2, r3]
        TAMP->BKP2R     = 0;
 8035862:	2100      	movs	r1, #0
 8035864:	50d1      	str	r1, [r2, r3]
        fp              = ISF_open_su(ISF_ID(hardware_fault_status));
 8035866:	2016      	movs	r0, #22
 8035868:	f7ff fb87 	bl	8034f7a <ISF_open_su>
 803586c:	0006      	movs	r6, r0
        resets.ushort   = vl_read(fp, 0);
 803586e:	2100      	movs	r1, #0
 8035870:	f7ff fac9 	bl	8034e06 <vl_read>
 8035874:	0005      	movs	r5, r0
        faults.ushort   = vl_read(fp, 2);
 8035876:	2102      	movs	r1, #2
 8035878:	0030      	movs	r0, r6
 803587a:	f7ff fac4 	bl	8034e06 <vl_read>
        resets.ubyte[0]+= (error.ushort[LOWER] != 0);
 803587e:	b2a1      	uxth	r1, r4
 8035880:	000b      	movs	r3, r1
 8035882:	1e5a      	subs	r2, r3, #1
 8035884:	4193      	sbcs	r3, r2
 8035886:	195b      	adds	r3, r3, r5
 8035888:	b2db      	uxtb	r3, r3
 803588a:	22ff      	movs	r2, #255	; 0xff
 803588c:	002f      	movs	r7, r5
 803588e:	4397      	bics	r7, r2
 8035890:	431f      	orrs	r7, r3
        resets.ubyte[1]+= (error.ushort[UPPER] != 0);
 8035892:	0c22      	lsrs	r2, r4, #16
 8035894:	1e53      	subs	r3, r2, #1
 8035896:	419a      	sbcs	r2, r3
 8035898:	042d      	lsls	r5, r5, #16
 803589a:	0e2d      	lsrs	r5, r5, #24
 803589c:	1952      	adds	r2, r2, r5
 803589e:	b2d2      	uxtb	r2, r2
 80358a0:	0212      	lsls	r2, r2, #8
 80358a2:	23ff      	movs	r3, #255	; 0xff
 80358a4:	403b      	ands	r3, r7
 80358a6:	431a      	orrs	r2, r3
        faults.ubyte[1]+= (error.ushort[LOWER] == 11) << 1; //Memory Fault
 80358a8:	0403      	lsls	r3, r0, #16
 80358aa:	0e1b      	lsrs	r3, r3, #24
 80358ac:	290b      	cmp	r1, #11
 80358ae:	d014      	beq.n	80358da <platform_init_OT+0xb6>
 80358b0:	2400      	movs	r4, #0
 80358b2:	18e4      	adds	r4, r4, r3
 80358b4:	b2e4      	uxtb	r4, r4
 80358b6:	0223      	lsls	r3, r4, #8
 80358b8:	24ff      	movs	r4, #255	; 0xff
 80358ba:	4004      	ands	r4, r0
 80358bc:	431c      	orrs	r4, r3
        vl_write(fp, 0, resets.ushort);
 80358be:	b292      	uxth	r2, r2
 80358c0:	2100      	movs	r1, #0
 80358c2:	0030      	movs	r0, r6
 80358c4:	f7ff faa6 	bl	8034e14 <vl_write>
        vl_write(fp, 2, faults.ushort);
 80358c8:	b2a2      	uxth	r2, r4
 80358ca:	2102      	movs	r1, #2
 80358cc:	0030      	movs	r0, r6
 80358ce:	f7ff faa1 	bl	8034e14 <vl_write>
        vl_close(fp);
 80358d2:	0030      	movs	r0, r6
 80358d4:	f7ff fb1a 	bl	8034f0c <vl_close>
 80358d8:	e7b3      	b.n	8035842 <platform_init_OT+0x1e>
        faults.ubyte[1]+= (error.ushort[LOWER] == 11) << 1; //Memory Fault
 80358da:	2402      	movs	r4, #2
 80358dc:	e7e9      	b.n	80358b2 <platform_init_OT+0x8e>
            vl_write(fpid, i, *hwid++);
 80358de:	b28c      	uxth	r4, r1
 80358e0:	1c9e      	adds	r6, r3, #2
 80358e2:	881a      	ldrh	r2, [r3, #0]
 80358e4:	0021      	movs	r1, r4
 80358e6:	0028      	movs	r0, r5
 80358e8:	f7ff fa94 	bl	8034e14 <vl_write>
        for (i=0; i<8; i+=2) {
 80358ec:	3402      	adds	r4, #2
 80358ee:	b221      	sxth	r1, r4
            vl_write(fpid, i, *hwid++);
 80358f0:	0033      	movs	r3, r6
        for (i=0; i<8; i+=2) {
 80358f2:	2907      	cmp	r1, #7
 80358f4:	ddf3      	ble.n	80358de <platform_init_OT+0xba>
        }
        vl_close(fpid);
 80358f6:	0028      	movs	r0, r5
 80358f8:	f7ff fb08 	bl	8034f0c <vl_close>
#   endif
    
    /// 5. Initialize the System (Kernel & more).  The System initializer must
    ///    initialize all modules that are built onto the kernel.  These include
    ///    the DLL and MPipe.
    sys_init();
 80358fc:	f7ff fc42 	bl	8035184 <sys_init>
}
 8035900:	b003      	add	sp, #12
 8035902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8035904:	15b9a9f0 	.word	0x15b9a9f0
 8035908:	4000b000 	.word	0x4000b000
 803590c:	1fff7584 	.word	0x1fff7584
 8035910:	1fff7580 	.word	0x1fff7580

08035914 <platform_init_busclk>:
#endif



#ifndef EXTF_platform_init_busclk
void platform_init_busclk() {
 8035914:	b510      	push	{r4, lr}
/// This function should be called during initialization and restart, right at
/// the top of platform_poweron().

    // The system clock must be MSI @ 48MHz
    sub_osc_startup(300);
 8035916:	2096      	movs	r0, #150	; 0x96
 8035918:	0040      	lsls	r0, r0, #1
 803591a:	f7ff ff1b 	bl	8035754 <sub_osc_startup>
    sub_setclocks(SPEED_Std);
    
    
    FLASH->ACR = (FLASH_ACR_DCEN | FLASH_ACR_ICEN);
 803591e:	4b09      	ldr	r3, [pc, #36]	; (8035944 <platform_init_busclk+0x30>)
 8035920:	22c0      	movs	r2, #192	; 0xc0
 8035922:	00d2      	lsls	r2, r2, #3
 8035924:	601a      	str	r2, [r3, #0]
    ///    <LI> If HSE, switch to it.</LI>
#   elif BOARD_FEATURE(FULLSPEED) && (_FULLOSC_CLOCKBIT != 1)
        platform_full_speed();
    
    {   ot_u32 rcc_ccipr;
        rcc_ccipr   = RCC->CCIPR & 0x0FFFFFFF;
 8035926:	20b0      	movs	r0, #176	; 0xb0
 8035928:	05c0      	lsls	r0, r0, #23
 803592a:	2188      	movs	r1, #136	; 0x88
 803592c:	5843      	ldr	r3, [r0, r1]
 803592e:	011b      	lsls	r3, r3, #4
 8035930:	091b      	lsrs	r3, r3, #4
        RCC->CCIPR  = rcc_ccipr
                    | (b11 << RCC_CCIPR_RNGSEL_Pos)             /* MSI for RNG */
                    | (b11 << RCC_CCIPR_ADCSEL_Pos);            /* MSI for ADC */
 8035932:	22f0      	movs	r2, #240	; 0xf0
 8035934:	0612      	lsls	r2, r2, #24
 8035936:	4313      	orrs	r3, r2
        RCC->CCIPR  = rcc_ccipr
 8035938:	5043      	str	r3, [r0, r1]
    /// X. Vector Table Relocation in Internal SRAM or FLASH.
#   ifdef VECT_TAB_SRAM
#       error "Silly rabbit! SRAM is for DATA!"
        SCB->VTOR   = SRAM_BASE;
#   else
        SCB->VTOR   = FLASH_BASE;
 803593a:	4b03      	ldr	r3, [pc, #12]	; (8035948 <platform_init_busclk+0x34>)
 803593c:	2280      	movs	r2, #128	; 0x80
 803593e:	0512      	lsls	r2, r2, #20
 8035940:	609a      	str	r2, [r3, #8]
#   endif
}
 8035942:	bd10      	pop	{r4, pc}
 8035944:	58004000 	.word	0x58004000
 8035948:	e000ed00 	.word	0xe000ed00

0803594c <platform_init_periphclk>:
/// OpenTag likes having a 32768Hz clock for timing purposes.
/// LPTIM1, 2, and the RTC are all driven by the LF clock.

    
    
    PWR->CR1 |= PWR_CR1_DBP;
 803594c:	4a0d      	ldr	r2, [pc, #52]	; (8035984 <platform_init_periphclk+0x38>)
 803594e:	6811      	ldr	r1, [r2, #0]
 8035950:	2380      	movs	r3, #128	; 0x80
 8035952:	005b      	lsls	r3, r3, #1
 8035954:	430b      	orrs	r3, r1
 8035956:	6013      	str	r3, [r2, #0]
    //RCC->BDCR |= RCC_BDCR_RTCRST;
    
#   if BOARD_FEATURE(LFXTAL)
        RCC->CSR    = RCC_CSR_RMVF;
 8035958:	23b0      	movs	r3, #176	; 0xb0
 803595a:	05db      	lsls	r3, r3, #23
 803595c:	2294      	movs	r2, #148	; 0x94
 803595e:	2180      	movs	r1, #128	; 0x80
 8035960:	0409      	lsls	r1, r1, #16
 8035962:	5099      	str	r1, [r3, r2]
        RCC->BDCR  = (1<<RCC_BDCR_LSCOSEL_Pos) \
 8035964:	3a04      	subs	r2, #4
 8035966:	4908      	ldr	r1, [pc, #32]	; (8035988 <platform_init_periphclk+0x3c>)
 8035968:	5099      	str	r1, [r3, r2]
                    | (b01<<RCC_BDCR_RTCSEL_Pos) \
                    | RCC_BDCR_LSECSSD \
                    | (b00<<RCC_BDCR_LSEDRV_Pos) \
                    | RCC_BDCR_LSEON;
                
        while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0);
 803596a:	22b0      	movs	r2, #176	; 0xb0
 803596c:	05d2      	lsls	r2, r2, #23
 803596e:	2390      	movs	r3, #144	; 0x90
 8035970:	58d3      	ldr	r3, [r2, r3]
 8035972:	079b      	lsls	r3, r3, #30
 8035974:	d5f9      	bpl.n	803596a <platform_init_periphclk+0x1e>
    
        RCC->BDCR |= RCC_BDCR_LSCOEN | RCC_BDCR_RTCEN | RCC_BDCR_LSECSSON;   
 8035976:	0011      	movs	r1, r2
 8035978:	2290      	movs	r2, #144	; 0x90
 803597a:	5888      	ldr	r0, [r1, r2]
 803597c:	4b03      	ldr	r3, [pc, #12]	; (803598c <platform_init_periphclk+0x40>)
 803597e:	4303      	orrs	r3, r0
 8035980:	508b      	str	r3, [r1, r2]
    
        RCC->BDCR  = (0<<RCC_BDCR_LSCOSEL_Pos) | RCC_BDCR_LSCOEN \
                    | (b10<<RCC_BDCR_RTCSEL_Pos) | RCC_BDCR_RTCEN;
#   endif

}
 8035982:	4770      	bx	lr
 8035984:	58000400 	.word	0x58000400
 8035988:	02000141 	.word	0x02000141
 803598c:	01008020 	.word	0x01008020

08035990 <platform_init_interruptor>:
  * ========================================================================<BR>
  */

///@todo requires additional porting to STM32WL EXTI system.
#ifndef EXTF_platform_init_interruptor
void platform_init_interruptor() {
 8035990:	b530      	push	{r4, r5, lr}
    SYSCFG->EXTICR[0]   = (0 << 0) \
 8035992:	4b22      	ldr	r3, [pc, #136]	; (8035a1c <platform_init_interruptor+0x8c>)
 8035994:	2200      	movs	r2, #0
 8035996:	609a      	str	r2, [r3, #8]
    SYSCFG->EXTICR[1]   = (0 << 0) \
 8035998:	2180      	movs	r1, #128	; 0x80
 803599a:	0089      	lsls	r1, r1, #2
 803599c:	60d9      	str	r1, [r3, #12]
    SYSCFG->EXTICR[2]   = (0 << 0) \
 803599e:	611a      	str	r2, [r3, #16]
    SYSCFG->EXTICR[3]   = (0 << 0) \
 80359a0:	615a      	str	r2, [r3, #20]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80359a2:	4a1f      	ldr	r2, [pc, #124]	; (8035a20 <platform_init_interruptor+0x90>)
 80359a4:	69d3      	ldr	r3, [r2, #28]
 80359a6:	021b      	lsls	r3, r3, #8
 80359a8:	0a1b      	lsrs	r3, r3, #8
 80359aa:	61d3      	str	r3, [r2, #28]
 80359ac:	6a13      	ldr	r3, [r2, #32]
 80359ae:	4c1d      	ldr	r4, [pc, #116]	; (8035a24 <platform_init_interruptor+0x94>)
 80359b0:	4023      	ands	r3, r4
 80359b2:	20c0      	movs	r0, #192	; 0xc0
 80359b4:	0400      	lsls	r0, r0, #16
 80359b6:	4303      	orrs	r3, r0
 80359b8:	6213      	str	r3, [r2, #32]
    // Line 39: HSEM1 (for CPU2)
    // Line 41: CPU1-SEV (for CPU2)
    // Line 44: Radio IRQs
    // Line 45: Radio Busy

    EXTI->PR1       = (1<<20);
 80359ba:	4b1b      	ldr	r3, [pc, #108]	; (8035a28 <platform_init_interruptor+0x98>)
 80359bc:	2280      	movs	r2, #128	; 0x80
 80359be:	0352      	lsls	r2, r2, #13
 80359c0:	60da      	str	r2, [r3, #12]
    EXTI->IMR1     |= (1<<20);
 80359c2:	2580      	movs	r5, #128	; 0x80
 80359c4:	5959      	ldr	r1, [r3, r5]
 80359c6:	4311      	orrs	r1, r2
 80359c8:	5159      	str	r1, [r3, r5]
    EXTI->RTSR1    |= (1<<20);
 80359ca:	6819      	ldr	r1, [r3, #0]
 80359cc:	430a      	orrs	r2, r1
 80359ce:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80359d0:	4b16      	ldr	r3, [pc, #88]	; (8035a2c <platform_init_interruptor+0x9c>)
 80359d2:	25c0      	movs	r5, #192	; 0xc0
 80359d4:	00ad      	lsls	r5, r5, #2
 80359d6:	5959      	ldr	r1, [r3, r5]
 80359d8:	4021      	ands	r1, r4
 80359da:	2280      	movs	r2, #128	; 0x80
 80359dc:	03d2      	lsls	r2, r2, #15
 80359de:	430a      	orrs	r2, r1
 80359e0:	515a      	str	r2, [r3, r5]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80359e2:	2204      	movs	r2, #4
 80359e4:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80359e6:	22c1      	movs	r2, #193	; 0xc1
 80359e8:	0092      	lsls	r2, r2, #2
 80359ea:	5899      	ldr	r1, [r3, r2]
 80359ec:	25ff      	movs	r5, #255	; 0xff
 80359ee:	43a9      	bics	r1, r5
 80359f0:	3d3f      	subs	r5, #63	; 0x3f
 80359f2:	4329      	orrs	r1, r5
 80359f4:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80359f6:	2110      	movs	r1, #16
 80359f8:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80359fa:	5899      	ldr	r1, [r3, r2]
 80359fc:	4d0c      	ldr	r5, [pc, #48]	; (8035a30 <platform_init_interruptor+0xa0>)
 80359fe:	400d      	ands	r5, r1
 8035a00:	21c0      	movs	r1, #192	; 0xc0
 8035a02:	0209      	lsls	r1, r1, #8
 8035a04:	4329      	orrs	r1, r5
 8035a06:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8035a08:	2120      	movs	r1, #32
 8035a0a:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8035a0c:	5899      	ldr	r1, [r3, r2]
 8035a0e:	400c      	ands	r4, r1
 8035a10:	4320      	orrs	r0, r4
 8035a12:	5098      	str	r0, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8035a14:	2240      	movs	r2, #64	; 0x40
 8035a16:	601a      	str	r2, [r3, #0]
    ///    but ADC is frequently used, so it is enabled by default
#   if defined(__USE_ADC1)
    NVIC_SetPriority(ADC1_COMP_IRQn, _HIPRI_GROUP);
    NVIC_EnableIRQ(ADC1_COMP_IRQn);
#   endif
}
 8035a18:	bd30      	pop	{r4, r5, pc}
 8035a1a:	46c0      	nop			; (mov r8, r8)
 8035a1c:	40010000 	.word	0x40010000
 8035a20:	e000ed00 	.word	0xe000ed00
 8035a24:	ff00ffff 	.word	0xff00ffff
 8035a28:	58000800 	.word	0x58000800
 8035a2c:	e000e100 	.word	0xe000e100
 8035a30:	ffff00ff 	.word	0xffff00ff

08035a34 <platform_poweron>:
void platform_poweron() {
 8035a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8035a36:	f3ef 8308 	mrs	r3, MSP
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8035a3a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8035a3e:	2302      	movs	r3, #2
 8035a40:	f383 8814 	msr	CONTROL, r3
    __set_MSP( (ot_u32)&platform_ext.sstack[(OT_PARAM_SSTACK_ALLOC/4)-1] );
 8035a44:	4e38      	ldr	r6, [pc, #224]	; (8035b28 <platform_poweron+0xf4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8035a46:	f386 8808 	msr	MSP, r6
    RCC->C2AHB1ENR      = RCC_C2AHB1ENR_CRCEN
 8035a4a:	25b0      	movs	r5, #176	; 0xb0
 8035a4c:	05ed      	lsls	r5, r5, #23
 8035a4e:	3347      	adds	r3, #71	; 0x47
 8035a50:	33ff      	adds	r3, #255	; 0xff
 8035a52:	4a36      	ldr	r2, [pc, #216]	; (8035b2c <platform_poweron+0xf8>)
 8035a54:	50ea      	str	r2, [r5, r3]
    RCC->C2AHB1SMENR    = RCC_C2AHB1SMENR_CRCSMEN
 8035a56:	3320      	adds	r3, #32
 8035a58:	4a35      	ldr	r2, [pc, #212]	; (8035b30 <platform_poweron+0xfc>)
 8035a5a:	50ea      	str	r2, [r5, r3]
    PWR->C2CR1 = 4;
 8035a5c:	4c35      	ldr	r4, [pc, #212]	; (8035b34 <platform_poweron+0x100>)
 8035a5e:	2704      	movs	r7, #4
 8035a60:	3be8      	subs	r3, #232	; 0xe8
 8035a62:	50e7      	str	r7, [r4, r3]
    sub_voltage_config(POWER_1V2);
 8035a64:	2080      	movs	r0, #128	; 0x80
 8035a66:	0080      	lsls	r0, r0, #2
 8035a68:	f7ff fe64 	bl	8035734 <sub_voltage_config>
    PWR->CR1    = (PWR->CR1
 8035a6c:	6823      	ldr	r3, [r4, #0]
                |  PWR_CR1_FPDS
 8035a6e:	4a32      	ldr	r2, [pc, #200]	; (8035b38 <platform_poweron+0x104>)
 8035a70:	4013      	ands	r3, r2
                |  2;   // Force Stop2 on CPU1
 8035a72:	2222      	movs	r2, #34	; 0x22
 8035a74:	4313      	orrs	r3, r2
    PWR->CR1    = (PWR->CR1
 8035a76:	6023      	str	r3, [r4, #0]
    PWR->CR3    = PWR->CR3
 8035a78:	68a2      	ldr	r2, [r4, #8]
                | PWR_CR3_RRS;
 8035a7a:	23c0      	movs	r3, #192	; 0xc0
 8035a7c:	00db      	lsls	r3, r3, #3
 8035a7e:	4313      	orrs	r3, r2
    PWR->CR3    = PWR->CR3
 8035a80:	60a3      	str	r3, [r4, #8]
    PWR->CR4    = PWR->CR4
 8035a82:	68e3      	ldr	r3, [r4, #12]
                & ~PWR_CR4_WRFBUSYP;
 8035a84:	4a2d      	ldr	r2, [pc, #180]	; (8035b3c <platform_poweron+0x108>)
 8035a86:	4013      	ands	r3, r2
    PWR->CR4    = PWR->CR4
 8035a88:	60e3      	str	r3, [r4, #12]
    PWR->CR5    = 0 /* PWR_CR5_SMPSEN*/
 8035a8a:	2100      	movs	r1, #0
 8035a8c:	61e1      	str	r1, [r4, #28]
        PWR->CR2    = 0 /* PWR_CR2_PVME3 */
 8035a8e:	230b      	movs	r3, #11
 8035a90:	6063      	str	r3, [r4, #4]
        PWR->C2CR3  = PWR_C2CR3_EWRFIRQ
 8035a92:	3379      	adds	r3, #121	; 0x79
 8035a94:	22a4      	movs	r2, #164	; 0xa4
 8035a96:	0192      	lsls	r2, r2, #6
 8035a98:	50e2      	str	r2, [r4, r3]
    PWR->SECCFGR    = PWR_SECCFGR_C2EWILA;
 8035a9a:	3308      	adds	r3, #8
 8035a9c:	2280      	movs	r2, #128	; 0x80
 8035a9e:	0212      	lsls	r2, r2, #8
 8035aa0:	50e2      	str	r2, [r4, r3]
    RCC->C2AHB2ENR      = (_GPIOCLK_SU);
 8035aa2:	22a6      	movs	r2, #166	; 0xa6
 8035aa4:	0052      	lsls	r2, r2, #1
 8035aa6:	3b05      	subs	r3, #5
 8035aa8:	50ab      	str	r3, [r5, r2]
    RCC->C2AHB3ENR      = (_FLASHCLK_N | _IPCCCLK_N | _HSEMCLK_N | _RNGCLK_N);
 8035aaa:	20a8      	movs	r0, #168	; 0xa8
 8035aac:	0040      	lsls	r0, r0, #1
 8035aae:	2487      	movs	r4, #135	; 0x87
 8035ab0:	04a4      	lsls	r4, r4, #18
 8035ab2:	502c      	str	r4, [r5, r0]
    RCC->C2AHB3SMENR    = (0x03800000 | _RNGCLK_LP | _AESCLK_LP | _PKACLK_LP);
 8035ab4:	3020      	adds	r0, #32
 8035ab6:	4c22      	ldr	r4, [pc, #136]	; (8035b40 <platform_poweron+0x10c>)
 8035ab8:	502c      	str	r4, [r5, r0]
    RCC->C2AHB2ENR  = _GPIOCLK_SU;
 8035aba:	50ab      	str	r3, [r5, r2]
	GPIOA->BSRR     = BOARD_UART_TXPIN;
 8035abc:	2390      	movs	r3, #144	; 0x90
 8035abe:	05db      	lsls	r3, r3, #23
 8035ac0:	619f      	str	r7, [r3, #24]
    GPIOA->MODER    = (GPIO_MODER_INPUT  << (0*2)) \
 8035ac2:	4820      	ldr	r0, [pc, #128]	; (8035b44 <platform_poweron+0x110>)
 8035ac4:	6018      	str	r0, [r3, #0]
    GPIOA->OSPEEDR  = (GPIO_OSPEEDR_10MHz << (2*2)) \
 8035ac6:	4820      	ldr	r0, [pc, #128]	; (8035b48 <platform_poweron+0x114>)
 8035ac8:	6098      	str	r0, [r3, #8]
    GPIOA->OTYPER   = 0; //(1 << (2)) | (1 << (9));
 8035aca:	6059      	str	r1, [r3, #4]
    GPIOA->PUPDR    = (1 << (3*2)) \
 8035acc:	491f      	ldr	r1, [pc, #124]	; (8035b4c <platform_poweron+0x118>)
 8035ace:	60d9      	str	r1, [r3, #12]
    GPIOA->AFR[0]   = (7 << (BOARD_UART_TXPINNUM*4)) \
 8035ad0:	21ee      	movs	r1, #238	; 0xee
 8035ad2:	01c9      	lsls	r1, r1, #7
 8035ad4:	6219      	str	r1, [r3, #32]
    GPIOB->MODER    = (GPIO_MODER_IN        << (0*2)) \
 8035ad6:	4b1e      	ldr	r3, [pc, #120]	; (8035b50 <platform_poweron+0x11c>)
 8035ad8:	491e      	ldr	r1, [pc, #120]	; (8035b54 <platform_poweron+0x120>)
 8035ada:	6019      	str	r1, [r3, #0]
    GPIOB->PUPDR    = (1 << (0*2)) \
 8035adc:	2106      	movs	r1, #6
 8035ade:	31ff      	adds	r1, #255	; 0xff
 8035ae0:	60d9      	str	r1, [r3, #12]
    GPIOB->OSPEEDR  = (GPIO_OSPEEDR_10MHz << (0*2)) \
 8035ae2:	491d      	ldr	r1, [pc, #116]	; (8035b58 <platform_poweron+0x124>)
 8035ae4:	6099      	str	r1, [r3, #8]
    GPIOC->BSRR     = (1 << 4) | 0;
 8035ae6:	4b1d      	ldr	r3, [pc, #116]	; (8035b5c <platform_poweron+0x128>)
 8035ae8:	2110      	movs	r1, #16
 8035aea:	6199      	str	r1, [r3, #24]
    GPIOC->MODER    = (GPIO_MODER_OUT    << (0*2)) \
 8035aec:	491c      	ldr	r1, [pc, #112]	; (8035b60 <platform_poweron+0x12c>)
 8035aee:	6019      	str	r1, [r3, #0]
    GPIOC->PUPDR    = (1 << (6*2)) \
 8035af0:	491c      	ldr	r1, [pc, #112]	; (8035b64 <platform_poweron+0x130>)
 8035af2:	60d9      	str	r1, [r3, #12]
    GPIOC->OSPEEDR  = (GPIO_OSPEEDR_10MHz << (3*2)) \
 8035af4:	21a8      	movs	r1, #168	; 0xa8
 8035af6:	0109      	lsls	r1, r1, #4
 8035af8:	6099      	str	r1, [r3, #8]
    RCC->C2AHB2ENR  = _GPIOCLK_N;
 8035afa:	2307      	movs	r3, #7
 8035afc:	50ab      	str	r3, [r5, r2]
    platform_init_periphclk();
 8035afe:	f7ff ff25 	bl	803594c <platform_init_periphclk>
    platform_init_busclk();
 8035b02:	f7ff ff07 	bl	8035914 <platform_init_busclk>
    platform_ext_msitrim();
 8035b06:	f7ff fe61 	bl	80357cc <platform_ext_msitrim>
    platform_init_interruptor();
 8035b0a:	f7ff ff41 	bl	8035990 <platform_init_interruptor>
    systim_init(NULL);
 8035b0e:	2000      	movs	r0, #0
 8035b10:	f7ff fce8 	bl	80354e4 <systim_init>
    vworm_init();
 8035b14:	f000 fc74 	bl	8036400 <vworm_init>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8035b18:	f3ef 8309 	mrs	r3, PSP
    platform_ext.task_exit = (void*)__get_PSP();
 8035b1c:	4a12      	ldr	r2, [pc, #72]	; (8035b68 <platform_poweron+0x134>)
 8035b1e:	4694      	mov	ip, r2
 8035b20:	4466      	add	r6, ip
 8035b22:	6033      	str	r3, [r6, #0]
}
 8035b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8035b26:	46c0      	nop			; (mov r8, r8)
 8035b28:	2000d040 	.word	0x2000d040
 8035b2c:	00001006 	.word	0x00001006
 8035b30:	00001007 	.word	0x00001007
 8035b34:	58000400 	.word	0x58000400
 8035b38:	ffffbfd0 	.word	0xffffbfd0
 8035b3c:	fffff7ff 	.word	0xfffff7ff
 8035b40:	03830000 	.word	0x03830000
 8035b44:	abffff20 	.word	0xabffff20
 8035b48:	3c0000a0 	.word	0x3c0000a0
 8035b4c:	24000040 	.word	0x24000040
 8035b50:	48000400 	.word	0x48000400
 8035b54:	7d7fffbc 	.word	0x7d7fffbc
 8035b58:	000a02ca 	.word	0x000a02ca
 8035b5c:	48000800 	.word	0x48000800
 8035b60:	90000555 	.word	0x90000555
 8035b64:	08001000 	.word	0x08001000
 8035b68:	fffffbf0 	.word	0xfffffbf0

08035b6c <SVC_Handler>:


/** KERNEL INTERRUPTS
  * =================
  */
void SVC_Handler(void) {
 8035b6c:	b510      	push	{r4, lr}
/// At present, the only protected system call is the call to the scheduler.
/// (sys_event_manager()).  Future system calls might make-use of the SVC
/// vectoring, however.
    sys_event_manager();
 8035b6e:	f7ff fb79 	bl	8035264 <sys_event_manager>
       default: //sys_notify();
                break;  //goto SVC_Handler_eventmgr;
    }

#endif
}
 8035b72:	bd10      	pop	{r4, pc}

08035b74 <PendSV_Handler>:
void PendSV_Handler(void) {
/// PendSV ISR is issued if and only if some task or event is asynchronously
/// pre-empting the kernel.  It is invoked __only__ through platform_ot_preempt().

    // There is an erratum that PendSV bit is not adequately cleared in HW
    __CLR_PENDSV();
 8035b74:	4a03      	ldr	r2, [pc, #12]	; (8035b84 <PendSV_Handler+0x10>)
 8035b76:	6851      	ldr	r1, [r2, #4]
 8035b78:	2380      	movs	r3, #128	; 0x80
 8035b7a:	051b      	lsls	r3, r3, #20
 8035b7c:	430b      	orrs	r3, r1
 8035b7e:	6053      	str	r3, [r2, #4]

    // SVC(0) runs the scheduler runtime in protected context
    __SEND_SVC(0);
 8035b80:	df00      	svc	0
}
 8035b82:	4770      	bx	lr
 8035b84:	e000ed00 	.word	0xe000ed00

08035b88 <platform_ot_preempt>:
/// Run the kernel scheduler by using system call.  If running a kernel task,
/// do not run the scheduler (we check this by inspecting the KTIM interrupt
/// enabler bit), as the ktask will run to completion and do the call in its
/// own context (platform_ot_run()).

    if (platform_ext.task_exit == NULL)
 8035b88:	4b05      	ldr	r3, [pc, #20]	; (8035ba0 <platform_ot_preempt+0x18>)
 8035b8a:	681b      	ldr	r3, [r3, #0]
 8035b8c:	2b00      	cmp	r3, #0
 8035b8e:	d000      	beq.n	8035b92 <platform_ot_preempt+0xa>
        __SET_PENDSV();
}
 8035b90:	4770      	bx	lr
        __SET_PENDSV();
 8035b92:	4a04      	ldr	r2, [pc, #16]	; (8035ba4 <platform_ot_preempt+0x1c>)
 8035b94:	6851      	ldr	r1, [r2, #4]
 8035b96:	2380      	movs	r3, #128	; 0x80
 8035b98:	055b      	lsls	r3, r3, #21
 8035b9a:	430b      	orrs	r3, r1
 8035b9c:	6053      	str	r3, [r2, #4]
}
 8035b9e:	e7f7      	b.n	8035b90 <platform_ot_preempt+0x8>
 8035ba0:	2000cc30 	.word	0x2000cc30
 8035ba4:	e000ed00 	.word	0xe000ed00

08035ba8 <platform_ot_run>:
#endif



#ifndef EXTF_platform_ot_run
OT_INLINE void platform_ot_run() {
 8035ba8:	b510      	push	{r4, lr}

    /// 1. Run the Scheduler.  The scheduler will issue a PendSV if there is a
    /// threaded task, in which case the P-stack will get changed to that
    /// thread, and the code after this call will not run until all threads are
    /// dormant.
    platform_enable_interrupts();
 8035baa:	f7ff fe39 	bl	8035820 <platform_enable_interrupts>
    __SEND_SVC(0);
 8035bae:	df00      	svc	0

    /// 2. When the PC is here, it means that a kernel task has been scheduled
    ///    or that no task is scheduled.  If no task is scheduled, then it is
    ///    time to go to sleep.  sys_powerdown() MUST re-enable interrupts
    ///    immediately before issuing WFI instruction.
    while (systim.flags & GPTIM_FLAG_SLEEP) {
 8035bb0:	e004      	b.n	8035bbc <platform_ot_run+0x14>
        platform_disable_interrupts();
 8035bb2:	f7ff fe33 	bl	803581c <platform_disable_interrupts>
        //systim_enable();                // LPTIM must be always running
        sys_powerdown();
 8035bb6:	f7ff fb0f 	bl	80351d8 <sys_powerdown>
        
        // At this point, system has just woke-up from sleep.  
        // The wakeup ISR must clear GPTIM_FLAG_SLEEP if task scheduling is to continue
        __NOP();
 8035bba:	46c0      	nop			; (mov r8, r8)
    while (systim.flags & GPTIM_FLAG_SLEEP) {
 8035bbc:	4b0c      	ldr	r3, [pc, #48]	; (8035bf0 <platform_ot_run+0x48>)
 8035bbe:	881b      	ldrh	r3, [r3, #0]
 8035bc0:	07db      	lsls	r3, r3, #31
 8035bc2:	d4f6      	bmi.n	8035bb2 <platform_ot_run+0xa>
    }
    
    /// 3. Stop the backup timer, which is used as a kernel watchdog.
    platform_disable_interrupts();
 8035bc4:	f7ff fe2a 	bl	803581c <platform_disable_interrupts>
    systim_stop_ticker();
 8035bc8:	f7ff fc70 	bl	80354ac <systim_stop_ticker>
 8035bcc:	f3ef 8309 	mrs	r3, PSP
    ///    onto this position.  If the task is killed during its runtime, this
    ///    data will be used to reset the P-stack and PC.
    ///@note this code only works with GCC-based compilers.  The && operator
    /// ahead of the label is a label-reference, and it is a GCC feature.
    {   register ot_u32 return_from_task;
        platform_ext.task_exit  = (void*)__get_PSP();
 8035bd0:	4c08      	ldr	r4, [pc, #32]	; (8035bf4 <platform_ot_run+0x4c>)
 8035bd2:	6023      	str	r3, [r4, #0]
        return_from_task        = (ot_u32)&&RETURN_FROM_TASK;
 8035bd4:	4b08      	ldr	r3, [pc, #32]	; (8035bf8 <platform_ot_run+0x50>)
        asm volatile ("PUSH {%0}" : : "r"(return_from_task) );
 8035bd6:	b408      	push	{r3}
    }

    /// 5. Run the Tasking Engine.  It will call the ktask or switch to the
    /// thread, as needed based on what is scheduled.
    platform_enable_interrupts();
 8035bd8:	f7ff fe22 	bl	8035820 <platform_enable_interrupts>
    sys_run_task();
 8035bdc:	f7ff fb90 	bl	8035300 <sys_run_task>

    /// 6. In any condition, retract the stack to a known, stable condition.
    /// If the task/thread exited cleanly, this changes nothing.  If killed,
    /// this will flush the stack.
    RETURN_FROM_TASK:
    platform_disable_interrupts();
 8035be0:	f7ff fe1c 	bl	803581c <platform_disable_interrupts>
    __set_PSP( (ot_u32)platform_ext.task_exit );
 8035be4:	6823      	ldr	r3, [r4, #0]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8035be6:	f383 8809 	msr	PSP, r3
    platform_ext.task_exit = NULL;
 8035bea:	2300      	movs	r3, #0
 8035bec:	6023      	str	r3, [r4, #0]
}
 8035bee:	bd10      	pop	{r4, pc}
 8035bf0:	2000cc20 	.word	0x2000cc20
 8035bf4:	2000cc30 	.word	0x2000cc30
 8035bf8:	08035be0 	.word	0x08035be0

08035bfc <delay_ti>:
#ifndef EXTF_delay_ti
void delay_ti(ot_u16 n) {
///@todo get WFE working on STM32L
    delay_ms(n);
    //sub_timed_wfe(n, 31);
}
 8035bfc:	4770      	bx	lr
	...

08035c00 <delay_us>:


#ifndef EXTF_delay_us
void delay_us(ot_u16 n) {
    ot_long c;
    c   = (platform_ext.clock_hz[0]>>10);   // Set cycles per ms
 8035c00:	4b04      	ldr	r3, [pc, #16]	; (8035c14 <delay_us+0x14>)
 8035c02:	685b      	ldr	r3, [r3, #4]
 8035c04:	0a9b      	lsrs	r3, r3, #10
    c  *= n;                                // Multiply by number of us
 8035c06:	4343      	muls	r3, r0
    c >>= 10;                               // Divide into cycles per us
 8035c08:	129b      	asrs	r3, r3, #10
    do {
        c -= 7;                         // 7 cycles per loop (measured)
 8035c0a:	3b07      	subs	r3, #7
    } while (c > 0);
 8035c0c:	2b00      	cmp	r3, #0
 8035c0e:	dcfc      	bgt.n	8035c0a <delay_us+0xa>
}
 8035c10:	4770      	bx	lr
 8035c12:	46c0      	nop			; (mov r8, r8)
 8035c14:	2000cc30 	.word	0x2000cc30

08035c18 <sub_memcpy_dma>:
#       define MEMCPY_DMA_INT  (1 << ((MEMCPY_DMA_CHAN_ID-8)*4))
#   else
#       define MEMCPY_DMA_INT  (1 << ((MEMCPY_DMA_CHAN_ID-1)*4))
#endif

void sub_memcpy_dma(ot_u8* dest, ot_u8* src, ot_uint length) {
 8035c18:	b570      	push	{r4, r5, r6, lr}
 8035c1a:	0004      	movs	r4, r0
 8035c1c:	000e      	movs	r6, r1
 8035c1e:	0015      	movs	r5, r2
/// Use 8, 16, or 32 bit chunks based on detected alignment
    static const ot_u16 ccr[4]      = { 0x4AD1, 0x40D1, 0x45D1, 0x40D1 };
    static const ot_u16 len_div[4]  = { 2, 0, 1, 0 };
    ot_int align;

    platform_disable_interrupts();
 8035c20:	f7ff fdfc 	bl	803581c <platform_disable_interrupts>

    MEMCPY_DMACHAN->CCR     = 0;
 8035c24:	480f      	ldr	r0, [pc, #60]	; (8035c64 <sub_memcpy_dma+0x4c>)
 8035c26:	2300      	movs	r3, #0
 8035c28:	6003      	str	r3, [r0, #0]
    MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;
 8035c2a:	4b0f      	ldr	r3, [pc, #60]	; (8035c68 <sub_memcpy_dma+0x50>)
 8035c2c:	2280      	movs	r2, #128	; 0x80
 8035c2e:	0152      	lsls	r2, r2, #5
 8035c30:	605a      	str	r2, [r3, #4]
    MEMCPY_DMACHAN->CPAR    = (ot_u32)dest;
 8035c32:	6084      	str	r4, [r0, #8]
    MEMCPY_DMACHAN->CMAR    = (ot_u32)src;
 8035c34:	60c6      	str	r6, [r0, #12]
    align                   = ((ot_u32)dest | (ot_u32)src | (ot_u32)length) & 3;
 8035c36:	4334      	orrs	r4, r6
 8035c38:	b2a3      	uxth	r3, r4
 8035c3a:	432b      	orrs	r3, r5
 8035c3c:	b21b      	sxth	r3, r3
 8035c3e:	2203      	movs	r2, #3
 8035c40:	4013      	ands	r3, r2
    length                >>= len_div[align];
 8035c42:	005b      	lsls	r3, r3, #1
 8035c44:	4a09      	ldr	r2, [pc, #36]	; (8035c6c <sub_memcpy_dma+0x54>)
 8035c46:	5a9a      	ldrh	r2, [r3, r2]
 8035c48:	4115      	asrs	r5, r2
    MEMCPY_DMACHAN->CNDTR   = length;
 8035c4a:	042d      	lsls	r5, r5, #16
 8035c4c:	0c2d      	lsrs	r5, r5, #16
 8035c4e:	6045      	str	r5, [r0, #4]
    MEMCPY_DMACHAN->CCR     = ccr[align];
 8035c50:	4a07      	ldr	r2, [pc, #28]	; (8035c70 <sub_memcpy_dma+0x58>)
 8035c52:	5a9b      	ldrh	r3, [r3, r2]
 8035c54:	6003      	str	r3, [r0, #0]
    while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 8035c56:	4b04      	ldr	r3, [pc, #16]	; (8035c68 <sub_memcpy_dma+0x50>)
 8035c58:	681b      	ldr	r3, [r3, #0]
 8035c5a:	04db      	lsls	r3, r3, #19
 8035c5c:	d5fb      	bpl.n	8035c56 <sub_memcpy_dma+0x3e>

    platform_enable_interrupts();
 8035c5e:	f7ff fddf 	bl	8035820 <platform_enable_interrupts>
}
 8035c62:	bd70      	pop	{r4, r5, r6, pc}
 8035c64:	40020444 	.word	0x40020444
 8035c68:	40020400 	.word	0x40020400
 8035c6c:	08037384 	.word	0x08037384
 8035c70:	0803737c 	.word	0x0803737c

08035c74 <sub_memcpy4_dma>:

    platform_enable_interrupts();
}


void sub_memcpy4_dma(ot_u32* dest, ot_u32* src, ot_uint length) {
 8035c74:	b570      	push	{r4, r5, r6, lr}
 8035c76:	0006      	movs	r6, r0
 8035c78:	000d      	movs	r5, r1
 8035c7a:	0014      	movs	r4, r2
/// 32 bit chunks based on detected alignment
    platform_disable_interrupts();
 8035c7c:	f7ff fdce 	bl	803581c <platform_disable_interrupts>

    MEMCPY_DMACHAN->CCR     = 0;
 8035c80:	4b09      	ldr	r3, [pc, #36]	; (8035ca8 <sub_memcpy4_dma+0x34>)
 8035c82:	2200      	movs	r2, #0
 8035c84:	601a      	str	r2, [r3, #0]
    MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;
 8035c86:	4a09      	ldr	r2, [pc, #36]	; (8035cac <sub_memcpy4_dma+0x38>)
 8035c88:	2180      	movs	r1, #128	; 0x80
 8035c8a:	0149      	lsls	r1, r1, #5
 8035c8c:	6051      	str	r1, [r2, #4]
    MEMCPY_DMACHAN->CPAR    = (ot_u32)dest;
 8035c8e:	609e      	str	r6, [r3, #8]
    MEMCPY_DMACHAN->CMAR    = (ot_u32)src;
 8035c90:	60dd      	str	r5, [r3, #12]
    MEMCPY_DMACHAN->CNDTR   = length;
 8035c92:	605c      	str	r4, [r3, #4]
    MEMCPY_DMACHAN->CCR     = 0x4AD1;
 8035c94:	4a06      	ldr	r2, [pc, #24]	; (8035cb0 <sub_memcpy4_dma+0x3c>)
 8035c96:	601a      	str	r2, [r3, #0]
    while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 8035c98:	4b04      	ldr	r3, [pc, #16]	; (8035cac <sub_memcpy4_dma+0x38>)
 8035c9a:	681b      	ldr	r3, [r3, #0]
 8035c9c:	04db      	lsls	r3, r3, #19
 8035c9e:	d5fb      	bpl.n	8035c98 <sub_memcpy4_dma+0x24>

    platform_enable_interrupts();
 8035ca0:	f7ff fdbe 	bl	8035820 <platform_enable_interrupts>
}
 8035ca4:	bd70      	pop	{r4, r5, r6, pc}
 8035ca6:	46c0      	nop			; (mov r8, r8)
 8035ca8:	40020444 	.word	0x40020444
 8035cac:	40020400 	.word	0x40020400
 8035cb0:	00004ad1 	.word	0x00004ad1

08035cb4 <ot_memcpy>:
#endif  //MCU_CONFIG(MEMCPYDMA)




void ot_memcpy(ot_u8* dst, ot_u8* src, ot_uint length) {
 8035cb4:	b510      	push	{r4, lr}
    if (length != 0) {
 8035cb6:	2a00      	cmp	r2, #0
 8035cb8:	d100      	bne.n	8035cbc <ot_memcpy+0x8>
        sub_memcpy_dma(dst, src, length);
#       else
        DUFF_DEVICE_8(*dst++, *src++, length);
#       endif
    }
}
 8035cba:	bd10      	pop	{r4, pc}
        sub_memcpy_dma(dst, src, length);
 8035cbc:	f7ff ffac 	bl	8035c18 <sub_memcpy_dma>
}
 8035cc0:	e7fb      	b.n	8035cba <ot_memcpy+0x6>

08035cc2 <ot_memcpy_4>:
        ot_memcpy((ot_u8*)dst, (ot_u8*)src, length<<1);
#       endif
    }
}

void ot_memcpy_4(ot_u32* dst, ot_u32* src, ot_uint length) {
 8035cc2:	b510      	push	{r4, lr}
    if (length != 0) {
 8035cc4:	2a00      	cmp	r2, #0
 8035cc6:	d100      	bne.n	8035cca <ot_memcpy_4+0x8>
        sub_memcpy4_dma( dst, src, length);
#       else
        ot_memcpy((ot_u8*)dst, (ot_u8*)src, length<<2);
#       endif
    }
}
 8035cc8:	bd10      	pop	{r4, pc}
        sub_memcpy4_dma( dst, src, length);
 8035cca:	f7ff ffd3 	bl	8035c74 <sub_memcpy4_dma>
}
 8035cce:	e7fb      	b.n	8035cc8 <ot_memcpy_4+0x6>

08035cd0 <ot_memset>:


void ot_memset(ot_u8* dst, ot_u8 value, ot_uint length) {
 8035cd0:	b530      	push	{r4, r5, lr}
 8035cd2:	b083      	sub	sp, #12
 8035cd4:	0005      	movs	r5, r0
 8035cd6:	1e14      	subs	r4, r2, #0
 8035cd8:	466b      	mov	r3, sp
 8035cda:	71d9      	strb	r1, [r3, #7]
    if (length != 0) {
 8035cdc:	d101      	bne.n	8035ce2 <ot_memset+0x12>
#       else
        DUFF_DEVICE_8(*dst++, value, length);
#       endif
        platform_enable_interrupts();
    }
}
 8035cde:	b003      	add	sp, #12
 8035ce0:	bd30      	pop	{r4, r5, pc}
        platform_disable_interrupts();
 8035ce2:	f7ff fd9b 	bl	803581c <platform_disable_interrupts>
        MEMCPY_DMACHAN->CCR     = 0;
 8035ce6:	4b0a      	ldr	r3, [pc, #40]	; (8035d10 <ot_memset+0x40>)
 8035ce8:	2200      	movs	r2, #0
 8035cea:	601a      	str	r2, [r3, #0]
        MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;       ///@todo see if this can be globalized
 8035cec:	4a09      	ldr	r2, [pc, #36]	; (8035d14 <ot_memset+0x44>)
 8035cee:	2180      	movs	r1, #128	; 0x80
 8035cf0:	0149      	lsls	r1, r1, #5
 8035cf2:	6051      	str	r1, [r2, #4]
        MEMCPY_DMACHAN->CPAR    = (ot_u32)dst;
 8035cf4:	609d      	str	r5, [r3, #8]
        MEMCPY_DMACHAN->CMAR    = (ot_u32)&value;
 8035cf6:	466a      	mov	r2, sp
 8035cf8:	3207      	adds	r2, #7
 8035cfa:	60da      	str	r2, [r3, #12]
        MEMCPY_DMACHAN->CNDTR   = length;
 8035cfc:	605c      	str	r4, [r3, #4]
        MEMCPY_DMACHAN->CCR     = DMA_CCR_DIR      | DMA_CCR_PINC     | \
 8035cfe:	4a06      	ldr	r2, [pc, #24]	; (8035d18 <ot_memset+0x48>)
 8035d00:	601a      	str	r2, [r3, #0]
        while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 8035d02:	4b04      	ldr	r3, [pc, #16]	; (8035d14 <ot_memset+0x44>)
 8035d04:	681b      	ldr	r3, [r3, #0]
 8035d06:	04db      	lsls	r3, r3, #19
 8035d08:	d5fb      	bpl.n	8035d02 <ot_memset+0x32>
        platform_enable_interrupts();
 8035d0a:	f7ff fd89 	bl	8035820 <platform_enable_interrupts>
}
 8035d0e:	e7e6      	b.n	8035cde <ot_memset+0xe>
 8035d10:	40020444 	.word	0x40020444
 8035d14:	40020400 	.word	0x40020400
 8035d18:	00004051 	.word	0x00004051

08035d1c <rand_prn16>:
    return (ot_u8)rand_prn16();
}



ot_u16 rand_prn16() {
 8035d1c:	b510      	push	{r4, lr}
    static ot_u16 _prn_freg;
    _prn_freg ^= LPTIM1->CNT;
 8035d1e:	4b05      	ldr	r3, [pc, #20]	; (8035d34 <rand_prn16+0x18>)
 8035d20:	69db      	ldr	r3, [r3, #28]
 8035d22:	4805      	ldr	r0, [pc, #20]	; (8035d38 <rand_prn16+0x1c>)
 8035d24:	8802      	ldrh	r2, [r0, #0]
 8035d26:	405a      	eors	r2, r3
 8035d28:	b292      	uxth	r2, r2
 8035d2a:	8002      	strh	r2, [r0, #0]
    return crc16drv_block_manual( (ot_u8*)&_prn_freg, 2, _prn_freg );
 8035d2c:	2102      	movs	r1, #2
 8035d2e:	f7fe fc99 	bl	8034664 <crc16drv_block_manual>
}
 8035d32:	bd10      	pop	{r4, pc}
 8035d34:	40007c00 	.word	0x40007c00
 8035d38:	2000d044 	.word	0x2000d044

08035d3c <rand_prn8>:
ot_u8 rand_prn8() {
 8035d3c:	b510      	push	{r4, lr}
    return (ot_u8)rand_prn16();
 8035d3e:	f7ff ffed 	bl	8035d1c <rand_prn16>
 8035d42:	b2c0      	uxtb	r0, r0
}
 8035d44:	bd10      	pop	{r4, pc}

08035d46 <sub_mpipe_open>:


void sub_mpipe_open() {
    ot_u32 scratch;
    __SYS_CLKON();
    __UART_CLKON();
 8035d46:	21b0      	movs	r1, #176	; 0xb0
 8035d48:	05c9      	lsls	r1, r1, #23
 8035d4a:	22ac      	movs	r2, #172	; 0xac
 8035d4c:	0052      	lsls	r2, r2, #1
 8035d4e:	5888      	ldr	r0, [r1, r2]
 8035d50:	2380      	movs	r3, #128	; 0x80
 8035d52:	029b      	lsls	r3, r3, #10
 8035d54:	4303      	orrs	r3, r0
 8035d56:	508b      	str	r3, [r1, r2]

    scratch                 = BOARD_UART_PORT->MODER;
 8035d58:	2290      	movs	r2, #144	; 0x90
 8035d5a:	05d2      	lsls	r2, r2, #23
 8035d5c:	6813      	ldr	r3, [r2, #0]
    scratch                &= ~((3 << (BOARD_UART_TXPINNUM*2)) | (3 << (BOARD_UART_RXPINNUM*2)));
 8035d5e:	21f0      	movs	r1, #240	; 0xf0
 8035d60:	438b      	bics	r3, r1
    scratch                |= (2 << (BOARD_UART_TXPINNUM*2)) | (2 << (BOARD_UART_RXPINNUM*2));
 8035d62:	3950      	subs	r1, #80	; 0x50
 8035d64:	430b      	orrs	r3, r1
    BOARD_UART_PORT->MODER  = scratch;
 8035d66:	6013      	str	r3, [r2, #0]
}
 8035d68:	4770      	bx	lr
	...

08035d6c <sub_mpipe_close>:

void sub_mpipe_close() {
    ot_u32 scratch          = BOARD_UART_PORT->MODER;
 8035d6c:	2290      	movs	r2, #144	; 0x90
 8035d6e:	05d2      	lsls	r2, r2, #23
 8035d70:	6813      	ldr	r3, [r2, #0]
    scratch                &= ~((3 << (BOARD_UART_TXPINNUM*2)) | (3 << (BOARD_UART_RXPINNUM*2)));
 8035d72:	21f0      	movs	r1, #240	; 0xf0
 8035d74:	438b      	bics	r3, r1
    scratch                |= (1 << (BOARD_UART_TXPINNUM*2)) | (0 << (BOARD_UART_RXPINNUM*2));
 8035d76:	39e0      	subs	r1, #224	; 0xe0
 8035d78:	430b      	orrs	r3, r1
    BOARD_UART_PORT->MODER  = scratch;
 8035d7a:	6013      	str	r3, [r2, #0]

    __DMA_ALL_CLOSE();
 8035d7c:	4a0b      	ldr	r2, [pc, #44]	; (8035dac <sub_mpipe_close+0x40>)
 8035d7e:	2300      	movs	r3, #0
 8035d80:	6013      	str	r3, [r2, #0]
 8035d82:	6013      	str	r3, [r2, #0]
    __DMA_ALL_CLEAR();
 8035d84:	4a0a      	ldr	r2, [pc, #40]	; (8035db0 <sub_mpipe_close+0x44>)
 8035d86:	21f0      	movs	r1, #240	; 0xf0
 8035d88:	0509      	lsls	r1, r1, #20
 8035d8a:	6051      	str	r1, [r2, #4]
    __DMA_CLKOFF();
    __UART_CLOSE();
 8035d8c:	4a09      	ldr	r2, [pc, #36]	; (8035db4 <sub_mpipe_close+0x48>)
 8035d8e:	6013      	str	r3, [r2, #0]
    __UART_CLEAR();
 8035d90:	4b09      	ldr	r3, [pc, #36]	; (8035db8 <sub_mpipe_close+0x4c>)
 8035d92:	6213      	str	r3, [r2, #32]
    __UART_CLKOFF();
 8035d94:	21b0      	movs	r1, #176	; 0xb0
 8035d96:	05c9      	lsls	r1, r1, #23
 8035d98:	22ac      	movs	r2, #172	; 0xac
 8035d9a:	0052      	lsls	r2, r2, #1
 8035d9c:	588b      	ldr	r3, [r1, r2]
 8035d9e:	4807      	ldr	r0, [pc, #28]	; (8035dbc <sub_mpipe_close+0x50>)
 8035da0:	4003      	ands	r3, r0
 8035da2:	508b      	str	r3, [r1, r2]

    //__DISMISS_FULL_SPEED();
    __CLR_MPIPE();
 8035da4:	4b06      	ldr	r3, [pc, #24]	; (8035dc0 <sub_mpipe_close+0x54>)
 8035da6:	3a59      	subs	r2, #89	; 0x59
 8035da8:	701a      	strb	r2, [r3, #0]
}
 8035daa:	4770      	bx	lr
 8035dac:	40020480 	.word	0x40020480
 8035db0:	40020400 	.word	0x40020400
 8035db4:	40004400 	.word	0x40004400
 8035db8:	00123bff 	.word	0x00123bff
 8035dbc:	fffdffff 	.word	0xfffdffff
 8035dc0:	2000cbc4 	.word	0x2000cbc4

08035dc4 <mpipedrv_init>:
}
#endif


#ifndef EXTF_mpipedrv_init
ot_int mpipedrv_init(void* port_id, mpipe_speed baud_rate) {
 8035dc4:	b570      	push	{r4, r5, r6, lr}
/// 1. "port_id" is unused in this impl, and it may be NULL
/// 2. Prepare the HW, which in this case is a UART
/// 3. Set default speed, which in this case is 115200 bps

    /// Basic setup for MPIPE-UART, with preset bps and sync detection
    mpipe.state     = MPIPE_Null;
 8035dc6:	4b2b      	ldr	r3, [pc, #172]	; (8035e74 <mpipedrv_init+0xb0>)
 8035dc8:	22ff      	movs	r2, #255	; 0xff
 8035dca:	701a      	strb	r2, [r3, #0]
    uart.baudrate   = (baud_rate == MPIPE_default) ? _DEF_MPIPEBAUD : baud_rate;
 8035dcc:	1c4b      	adds	r3, r1, #1
 8035dce:	d04f      	beq.n	8035e70 <mpipedrv_init+0xac>
 8035dd0:	4c29      	ldr	r4, [pc, #164]	; (8035e78 <mpipedrv_init+0xb4>)
 8035dd2:	7021      	strb	r1, [r4, #0]

    /// UART Setup (RX & TX setup takes place at time of startup)
    __UART_CLKON();
 8035dd4:	26b0      	movs	r6, #176	; 0xb0
 8035dd6:	05f6      	lsls	r6, r6, #23
 8035dd8:	25ac      	movs	r5, #172	; 0xac
 8035dda:	006d      	lsls	r5, r5, #1
 8035ddc:	5972      	ldr	r2, [r6, r5]
 8035dde:	2380      	movs	r3, #128	; 0x80
 8035de0:	029b      	lsls	r3, r3, #10
 8035de2:	4313      	orrs	r3, r2
 8035de4:	5173      	str	r3, [r6, r5]
    MPIPE_UART->BRR = __UART_CLKHZ() / _brtable[uart.baudrate];
 8035de6:	2001      	movs	r0, #1
 8035de8:	f7ff fd0e 	bl	8035808 <platform_get_clockhz>
 8035dec:	2300      	movs	r3, #0
 8035dee:	56e3      	ldrsb	r3, [r4, r3]
 8035df0:	009b      	lsls	r3, r3, #2
 8035df2:	4a22      	ldr	r2, [pc, #136]	; (8035e7c <mpipedrv_init+0xb8>)
 8035df4:	5899      	ldr	r1, [r3, r2]
 8035df6:	f7fa f991 	bl	803011c <__udivsi3>
 8035dfa:	4b21      	ldr	r3, [pc, #132]	; (8035e80 <mpipedrv_init+0xbc>)
 8035dfc:	60d8      	str	r0, [r3, #12]
    MPIPE_UART->CR3 = USART_CR3_DMAR | USART_CR3_DMAT;
 8035dfe:	22c0      	movs	r2, #192	; 0xc0
 8035e00:	609a      	str	r2, [r3, #8]
    MPIPE_UART->CR2 = 0;
 8035e02:	2200      	movs	r2, #0
 8035e04:	605a      	str	r2, [r3, #4]
    MPIPE_UART->CR1 = 0;
 8035e06:	601a      	str	r2, [r3, #0]
    __UART_CLKOFF();
 8035e08:	5973      	ldr	r3, [r6, r5]
 8035e0a:	4a1e      	ldr	r2, [pc, #120]	; (8035e84 <mpipedrv_init+0xc0>)
 8035e0c:	4013      	ands	r3, r2
 8035e0e:	5173      	str	r3, [r6, r5]

    /// Setup DMAMUX:
    /// - RX and TX DMAs can be same channel (MPIPE is half duplex)
    /// - RX and TX DMAs can also be on separate channels.
    _MUXRX->CCR = MPIPE_DMA_RXREQ_ID;
 8035e10:	4b1d      	ldr	r3, [pc, #116]	; (8035e88 <mpipedrv_init+0xc4>)
 8035e12:	2213      	movs	r2, #19
 8035e14:	601a      	str	r2, [r3, #0]
    _MUXTX->CCR = MPIPE_DMA_TXREQ_ID;
 8035e16:	3201      	adds	r2, #1
 8035e18:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8035e1a:	4b1c      	ldr	r3, [pc, #112]	; (8035e8c <mpipedrv_init+0xc8>)
 8035e1c:	20c2      	movs	r0, #194	; 0xc2
 8035e1e:	0080      	lsls	r0, r0, #2
 8035e20:	581a      	ldr	r2, [r3, r0]
 8035e22:	491b      	ldr	r1, [pc, #108]	; (8035e90 <mpipedrv_init+0xcc>)
 8035e24:	4011      	ands	r1, r2
 8035e26:	2280      	movs	r2, #128	; 0x80
 8035e28:	03d2      	lsls	r2, r2, #15
 8035e2a:	430a      	orrs	r2, r1
 8035e2c:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8035e2e:	2280      	movs	r2, #128	; 0x80
 8035e30:	00d2      	lsls	r2, r2, #3
 8035e32:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8035e34:	21c7      	movs	r1, #199	; 0xc7
 8035e36:	0089      	lsls	r1, r1, #2
 8035e38:	585a      	ldr	r2, [r3, r1]
 8035e3a:	20ff      	movs	r0, #255	; 0xff
 8035e3c:	4382      	bics	r2, r0
 8035e3e:	38bf      	subs	r0, #191	; 0xbf
 8035e40:	4302      	orrs	r2, r0
 8035e42:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8035e44:	2280      	movs	r2, #128	; 0x80
 8035e46:	0552      	lsls	r2, r2, #21
 8035e48:	601a      	str	r2, [r3, #0]
    /// must be in core_main.c, due to the way EXTIs are shared on STM32.
    NVIC_SetPriority(_UART_IRQ, _IRQGROUP);
    NVIC_EnableIRQ(_UART_IRQ);
    
#   if (BOARD_FEATURE(MPIPE_BREAK))
        EXTI->PR1   = MPIPE_UART_RXPIN;
 8035e4a:	4b12      	ldr	r3, [pc, #72]	; (8035e94 <mpipedrv_init+0xd0>)
 8035e4c:	2108      	movs	r1, #8
 8035e4e:	60d9      	str	r1, [r3, #12]
        EXTI->RTSR1|= MPIPE_UART_RXPIN;
 8035e50:	681a      	ldr	r2, [r3, #0]
 8035e52:	430a      	orrs	r2, r1
 8035e54:	601a      	str	r2, [r3, #0]
#   endif

    /// Configure MPipe Queues
    /// @todo this will need to be adjusted in the final version
    alp_init(&mpipe.alp, &otmpin, &otmpout);
 8035e56:	4a10      	ldr	r2, [pc, #64]	; (8035e98 <mpipedrv_init+0xd4>)
 8035e58:	4910      	ldr	r1, [pc, #64]	; (8035e9c <mpipedrv_init+0xd8>)
 8035e5a:	4811      	ldr	r0, [pc, #68]	; (8035ea0 <mpipedrv_init+0xdc>)
 8035e5c:	f7fe faf6 	bl	803444c <alp_init>
    
    /// Initial values for Ring Buffer
    memset(&uart.tlist, 0, sizeof(uart_rb_t));
 8035e60:	0020      	movs	r0, r4
 8035e62:	305c      	adds	r0, #92	; 0x5c
 8035e64:	2244      	movs	r2, #68	; 0x44
 8035e66:	2100      	movs	r1, #0
 8035e68:	f7ff ff32 	bl	8035cd0 <ot_memset>
    
    return 255;
}
 8035e6c:	20ff      	movs	r0, #255	; 0xff
 8035e6e:	bd70      	pop	{r4, r5, r6, pc}
    uart.baudrate   = (baud_rate == MPIPE_default) ? _DEF_MPIPEBAUD : baud_rate;
 8035e70:	3104      	adds	r1, #4
 8035e72:	e7ad      	b.n	8035dd0 <mpipedrv_init+0xc>
 8035e74:	2000cbc4 	.word	0x2000cbc4
 8035e78:	2000d048 	.word	0x2000d048
 8035e7c:	0803738c 	.word	0x0803738c
 8035e80:	40004400 	.word	0x40004400
 8035e84:	fffdffff 	.word	0xfffdffff
 8035e88:	40020834 	.word	0x40020834
 8035e8c:	e000e100 	.word	0xe000e100
 8035e90:	ff00ffff 	.word	0xff00ffff
 8035e94:	58000800 	.word	0x58000800
 8035e98:	2000cb04 	.word	0x2000cb04
 8035e9c:	2000caf0 	.word	0x2000caf0
 8035ea0:	2000cbc8 	.word	0x2000cbc8

08035ea4 <mpipedrv_getpwrcode>:


#ifndef EXTF_mpipedrv_getpwrcode
ot_u8 mpipedrv_getpwrcode() {
/// Power code: 0-3.  For this MPipe impl it's always 1 or 2
    return 1 + (mpipe.state < 0);
 8035ea4:	4b04      	ldr	r3, [pc, #16]	; (8035eb8 <mpipedrv_getpwrcode+0x14>)
 8035ea6:	781b      	ldrb	r3, [r3, #0]
 8035ea8:	b25b      	sxtb	r3, r3
 8035eaa:	2b00      	cmp	r3, #0
 8035eac:	db01      	blt.n	8035eb2 <mpipedrv_getpwrcode+0xe>
 8035eae:	2001      	movs	r0, #1
}
 8035eb0:	4770      	bx	lr
    return 1 + (mpipe.state < 0);
 8035eb2:	2002      	movs	r0, #2
 8035eb4:	e7fc      	b.n	8035eb0 <mpipedrv_getpwrcode+0xc>
 8035eb6:	46c0      	nop			; (mov r8, r8)
 8035eb8:	2000cbc4 	.word	0x2000cbc4

08035ebc <mpipedrv_standby>:
#endif


#ifndef EXTF_mpipedrv_standby
void mpipedrv_standby() {
}
 8035ebc:	4770      	bx	lr
	...

08035ec0 <mpipedrv_unblock>:


#ifndef EXTF_mpipedrv_unblock
///@todo Check if this function gets used, and how.
void mpipedrv_unblock() {
    if (mpipe.state == MPIPE_Null) {
 8035ec0:	4b04      	ldr	r3, [pc, #16]	; (8035ed4 <mpipedrv_unblock+0x14>)
 8035ec2:	781b      	ldrb	r3, [r3, #0]
 8035ec4:	b25b      	sxtb	r3, r3
 8035ec6:	3301      	adds	r3, #1
 8035ec8:	d000      	beq.n	8035ecc <mpipedrv_unblock+0xc>
        mpipe.state = MPIPE_Idle;
    }
}
 8035eca:	4770      	bx	lr
        mpipe.state = MPIPE_Idle;
 8035ecc:	4b01      	ldr	r3, [pc, #4]	; (8035ed4 <mpipedrv_unblock+0x14>)
 8035ece:	2200      	movs	r2, #0
 8035ed0:	701a      	strb	r2, [r3, #0]
}
 8035ed2:	e7fa      	b.n	8035eca <mpipedrv_unblock+0xa>
 8035ed4:	2000cbc4 	.word	0x2000cbc4

08035ed8 <mpipedrv_kill>:
#endif


#ifndef EXTF_mpipedrv_kill
void mpipedrv_kill() {
 8035ed8:	b510      	push	{r4, lr}
    // Close down the peripheral
    sub_mpipe_close();
 8035eda:	f7ff ff47 	bl	8035d6c <sub_mpipe_close>

    // Clear the TX queue
    ///@note I just commented-out this on 20 Sept
	//q_empty(mpipe.alp.outq);
}
 8035ede:	bd10      	pop	{r4, pc}

08035ee0 <sub_txopen>:
#endif




void sub_txopen() {
 8035ee0:	b570      	push	{r4, r5, r6, lr}
    uart_element_t*  txpayload;
    
    txpayload           = &uart.tlist.rb[uart.tlist.i];
 8035ee2:	4c1f      	ldr	r4, [pc, #124]	; (8035f60 <sub_txopen+0x80>)
 8035ee4:	239e      	movs	r3, #158	; 0x9e
 8035ee6:	5ce5      	ldrb	r5, [r4, r3]

    /// Build Header
    uart.header.syncFF  = 0xff;
 8035ee8:	3361      	adds	r3, #97	; 0x61
 8035eea:	7423      	strb	r3, [r4, #16]
    uart.header.sync55  = 0x55;
 8035eec:	3baa      	subs	r3, #170	; 0xaa
 8035eee:	7463      	strb	r3, [r4, #17]
    
    // Always include CRC on TX
    uart.header.plen    = PLATFORM_ENDIAN16(txpayload->length);
 8035ef0:	350b      	adds	r5, #11
 8035ef2:	00ed      	lsls	r5, r5, #3
 8035ef4:	1965      	adds	r5, r4, r5
 8035ef6:	892b      	ldrh	r3, [r5, #8]
  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8035ef8:	ba5b      	rev16	r3, r3
 8035efa:	82a3      	strh	r3, [r4, #20]
    uart.header.ctl     = 0;
 8035efc:	2600      	movs	r6, #0
 8035efe:	75e6      	strb	r6, [r4, #23]
    uart.header.seq    += 1;
 8035f00:	7da3      	ldrb	r3, [r4, #22]
 8035f02:	3301      	adds	r3, #1
 8035f04:	75a3      	strb	r3, [r4, #22]
    
    uart.header.crc16   = crc16drv_block_manual((ot_u8*)&uart.header.plen, 4, 0xFFFF);
 8035f06:	0020      	movs	r0, r4
 8035f08:	3014      	adds	r0, #20
 8035f0a:	4a16      	ldr	r2, [pc, #88]	; (8035f64 <sub_txopen+0x84>)
 8035f0c:	2104      	movs	r1, #4
 8035f0e:	f7fe fba9 	bl	8034664 <crc16drv_block_manual>
 8035f12:	0002      	movs	r2, r0
 8035f14:	8260      	strh	r0, [r4, #18]
    uart.header.crc16   = crc16drv_block_manual(txpayload->front, txpayload->length, uart.header.crc16);
 8035f16:	2308      	movs	r3, #8
 8035f18:	5ee9      	ldrsh	r1, [r5, r3]
 8035f1a:	6868      	ldr	r0, [r5, #4]
 8035f1c:	f7fe fba2 	bl	8034664 <crc16drv_block_manual>
 8035f20:	8260      	strh	r0, [r4, #18]
 8035f22:	ba40      	rev16	r0, r0
    uart.header.crc16   = PLATFORM_ENDIAN16(uart.header.crc16);
 8035f24:	8260      	strh	r0, [r4, #18]

    sub_mpipe_close();
 8035f26:	f7ff ff21 	bl	8035d6c <sub_mpipe_close>
    sub_mpipe_open();
 8035f2a:	f7ff ff0c 	bl	8035d46 <sub_mpipe_open>
    mpipe.state = MPIPE_Tx_Wait;
 8035f2e:	4b0e      	ldr	r3, [pc, #56]	; (8035f68 <sub_txopen+0x88>)
 8035f30:	2205      	movs	r2, #5
 8035f32:	701a      	strb	r2, [r3, #0]
    __UART_TXOPEN();
 8035f34:	4b0d      	ldr	r3, [pc, #52]	; (8035f6c <sub_txopen+0x8c>)
 8035f36:	601e      	str	r6, [r3, #0]
 8035f38:	4a0d      	ldr	r2, [pc, #52]	; (8035f70 <sub_txopen+0x90>)
 8035f3a:	621a      	str	r2, [r3, #32]
 8035f3c:	2209      	movs	r2, #9
 8035f3e:	601a      	str	r2, [r3, #0]
    __DMA_TXOPEN(&uart.header.syncFF, 8);
 8035f40:	4b0c      	ldr	r3, [pc, #48]	; (8035f74 <sub_txopen+0x94>)
 8035f42:	601e      	str	r6, [r3, #0]
 8035f44:	4a0c      	ldr	r2, [pc, #48]	; (8035f78 <sub_txopen+0x98>)
 8035f46:	609a      	str	r2, [r3, #8]
 8035f48:	3410      	adds	r4, #16
 8035f4a:	60dc      	str	r4, [r3, #12]
 8035f4c:	2208      	movs	r2, #8
 8035f4e:	605a      	str	r2, [r3, #4]
 8035f50:	4a0a      	ldr	r2, [pc, #40]	; (8035f7c <sub_txopen+0x9c>)
 8035f52:	21f0      	movs	r1, #240	; 0xf0
 8035f54:	0509      	lsls	r1, r1, #20
 8035f56:	6051      	str	r1, [r2, #4]
 8035f58:	4a09      	ldr	r2, [pc, #36]	; (8035f80 <sub_txopen+0xa0>)
 8035f5a:	601a      	str	r2, [r3, #0]
}
 8035f5c:	bd70      	pop	{r4, r5, r6, pc}
 8035f5e:	46c0      	nop			; (mov r8, r8)
 8035f60:	2000d048 	.word	0x2000d048
 8035f64:	0000ffff 	.word	0x0000ffff
 8035f68:	2000cbc4 	.word	0x2000cbc4
 8035f6c:	40004400 	.word	0x40004400
 8035f70:	00123bff 	.word	0x00123bff
 8035f74:	40020480 	.word	0x40020480
 8035f78:	40004428 	.word	0x40004428
 8035f7c:	40020400 	.word	0x40020400
 8035f80:	00002093 	.word	0x00002093

08035f84 <sub_txcont>:


void sub_txcont() {
    uart_element_t* txpayload;
    txpayload           = &uart.tlist.rb[uart.tlist.i];
 8035f84:	4a0c      	ldr	r2, [pc, #48]	; (8035fb8 <sub_txcont+0x34>)
 8035f86:	239e      	movs	r3, #158	; 0x9e
 8035f88:	5cd1      	ldrb	r1, [r2, r3]
    _DMATX->CCR         = 0;
 8035f8a:	4b0c      	ldr	r3, [pc, #48]	; (8035fbc <sub_txcont+0x38>)
 8035f8c:	2000      	movs	r0, #0
 8035f8e:	6018      	str	r0, [r3, #0]
    _SET_CPAR(_DMATX, (uint32_t)&(MPIPE_UART->TDR));
 8035f90:	480b      	ldr	r0, [pc, #44]	; (8035fc0 <sub_txcont+0x3c>)
 8035f92:	6098      	str	r0, [r3, #8]
    _DMATX->CMAR        = (uint32_t)txpayload->front;   
 8035f94:	310b      	adds	r1, #11
 8035f96:	00c9      	lsls	r1, r1, #3
 8035f98:	1852      	adds	r2, r2, r1
 8035f9a:	6851      	ldr	r1, [r2, #4]
 8035f9c:	60d9      	str	r1, [r3, #12]
    _DMATX->CNDTR       = txpayload->length + MPIPE_DMAFLUFF;
 8035f9e:	8912      	ldrh	r2, [r2, #8]
 8035fa0:	605a      	str	r2, [r3, #4]
    DMA1->IFCR          = (_DMARX_IFG | _DMATX_IFG);
 8035fa2:	4a08      	ldr	r2, [pc, #32]	; (8035fc4 <sub_txcont+0x40>)
 8035fa4:	21f0      	movs	r1, #240	; 0xf0
 8035fa6:	0509      	lsls	r1, r1, #20
 8035fa8:	6051      	str	r1, [r2, #4]
    __UART_CLEAR();
 8035faa:	4a07      	ldr	r2, [pc, #28]	; (8035fc8 <sub_txcont+0x44>)
 8035fac:	4907      	ldr	r1, [pc, #28]	; (8035fcc <sub_txcont+0x48>)
 8035fae:	6211      	str	r1, [r2, #32]
    _DMATX->CCR         = (DMA_CCR_DIR | DMA_CCR_MINC | (2<<DMA_CCR_PL_Pos) | DMA_CCR_TCIE | DMA_CCR_EN);
 8035fb0:	4a07      	ldr	r2, [pc, #28]	; (8035fd0 <sub_txcont+0x4c>)
 8035fb2:	601a      	str	r2, [r3, #0]
}
 8035fb4:	4770      	bx	lr
 8035fb6:	46c0      	nop			; (mov r8, r8)
 8035fb8:	2000d048 	.word	0x2000d048
 8035fbc:	40020480 	.word	0x40020480
 8035fc0:	40004428 	.word	0x40004428
 8035fc4:	40020000 	.word	0x40020000
 8035fc8:	40004400 	.word	0x40004400
 8035fcc:	00123bff 	.word	0x00123bff
 8035fd0:	00002093 	.word	0x00002093

08035fd4 <mpipedrv_tx>:


#ifndef EXTF_mpipedrv_tx
ot_int mpipedrv_tx(ot_bool blocking, mpipe_priority data_priority) {
 8035fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8035fd6:	b083      	sub	sp, #12
 8035fd8:	0005      	movs	r5, r0
        goto mpipedrv_tx_GO;
    }
    ///@todo In this space, swap to the standard mpipe queue
#   endif

    holdtime = q_blocktime(mpipe.alp.outq);
 8035fda:	4b22      	ldr	r3, [pc, #136]	; (8036064 <mpipedrv_tx+0x90>)
 8035fdc:	6918      	ldr	r0, [r3, #16]
 8035fde:	f7fe fbfe 	bl	80347de <q_blocktime>
 8035fe2:	1e06      	subs	r6, r0, #0
    if (holdtime != 0) {
 8035fe4:	d003      	beq.n	8035fee <mpipedrv_tx+0x1a>
        return -holdtime;
 8035fe6:	4240      	negs	r0, r0
 8035fe8:	b200      	sxth	r0, r0
    /// Purpose here is to continue blocking the queue until the
    /// most recently added packet (last packet) is sent.
    q_blockwrite(mpipe.alp.outq, blocking ? holdtime : 0);
    
    return holdtime;
}
 8035fea:	b003      	add	sp, #12
 8035fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    holdtime                    = __MPIPE_TIMEOUT(q_length(mpipe.alp.outq));
 8035fee:	4f1d      	ldr	r7, [pc, #116]	; (8036064 <mpipedrv_tx+0x90>)
 8035ff0:	6938      	ldr	r0, [r7, #16]
 8035ff2:	f7fe fbe0 	bl	80347b6 <q_length>
 8035ff6:	3008      	adds	r0, #8
 8035ff8:	10c0      	asrs	r0, r0, #3
 8035ffa:	b280      	uxth	r0, r0
 8035ffc:	3001      	adds	r0, #1
 8035ffe:	b283      	uxth	r3, r0
 8036000:	9301      	str	r3, [sp, #4]
    uart.tlist.size            += 1;
 8036002:	4a19      	ldr	r2, [pc, #100]	; (8036068 <mpipedrv_tx+0x94>)
 8036004:	219d      	movs	r1, #157	; 0x9d
 8036006:	5c53      	ldrb	r3, [r2, r1]
 8036008:	3301      	adds	r3, #1
 803600a:	5453      	strb	r3, [r2, r1]
    uart.tlist.j                = (uart.tlist.j + 1) & (UART_RB_MAX-1);
 803600c:	3102      	adds	r1, #2
 803600e:	5c53      	ldrb	r3, [r2, r1]
 8036010:	3301      	adds	r3, #1
 8036012:	2007      	movs	r0, #7
 8036014:	4003      	ands	r3, r0
 8036016:	5453      	strb	r3, [r2, r1]
    txpayload->front            = mpipe.alp.outq->getcursor;
 8036018:	6938      	ldr	r0, [r7, #16]
 803601a:	330b      	adds	r3, #11
 803601c:	00dc      	lsls	r4, r3, #3
 803601e:	1914      	adds	r4, r2, r4
 8036020:	6843      	ldr	r3, [r0, #4]
 8036022:	6063      	str	r3, [r4, #4]
    txpayload->length           = q_span(mpipe.alp.outq);
 8036024:	f7fe fbcc 	bl	80347c0 <q_span>
 8036028:	8120      	strh	r0, [r4, #8]
    mpipe.alp.outq->getcursor   = mpipe.alp.outq->putcursor;
 803602a:	693b      	ldr	r3, [r7, #16]
 803602c:	689a      	ldr	r2, [r3, #8]
 803602e:	605a      	str	r2, [r3, #4]
    if (mpipe.state == MPIPE_Idle) {
 8036030:	783b      	ldrb	r3, [r7, #0]
 8036032:	2b00      	cmp	r3, #0
 8036034:	d00b      	beq.n	803604e <mpipedrv_tx+0x7a>
    q_blockwrite(mpipe.alp.outq, blocking ? holdtime : 0);
 8036036:	4b0b      	ldr	r3, [pc, #44]	; (8036064 <mpipedrv_tx+0x90>)
 8036038:	6918      	ldr	r0, [r3, #16]
 803603a:	2d00      	cmp	r5, #0
 803603c:	d000      	beq.n	8036040 <mpipedrv_tx+0x6c>
 803603e:	9e01      	ldr	r6, [sp, #4]
 8036040:	0031      	movs	r1, r6
 8036042:	f7fe fbce 	bl	80347e2 <q_blockwrite>
    return holdtime;
 8036046:	466b      	mov	r3, sp
 8036048:	2004      	movs	r0, #4
 803604a:	5e18      	ldrsh	r0, [r3, r0]
 803604c:	e7cd      	b.n	8035fea <mpipedrv_tx+0x16>
        uart.tlist.i = (uart.tlist.i + 1) & (UART_RB_MAX-1);
 803604e:	4906      	ldr	r1, [pc, #24]	; (8036068 <mpipedrv_tx+0x94>)
 8036050:	229e      	movs	r2, #158	; 0x9e
 8036052:	5c8b      	ldrb	r3, [r1, r2]
 8036054:	3301      	adds	r3, #1
 8036056:	2007      	movs	r0, #7
 8036058:	4003      	ands	r3, r0
 803605a:	548b      	strb	r3, [r1, r2]
        sub_txopen();
 803605c:	f7ff ff40 	bl	8035ee0 <sub_txopen>
 8036060:	e7e9      	b.n	8036036 <mpipedrv_tx+0x62>
 8036062:	46c0      	nop			; (mov r8, r8)
 8036064:	2000cbc4 	.word	0x2000cbc4
 8036068:	2000d048 	.word	0x2000d048

0803606c <mpipedrv_rx>:




#ifndef EXTF_mpipedrv_rx
void mpipedrv_rx(ot_bool blocking, mpipe_priority data_priority) {
 803606c:	b510      	push	{r4, lr}
#if (BOARD_FEATURE(MPIPE_BREAK))
    /// Wait for Line Sync.  Sync interrupt will call sub_rx()
    sub_mpipe_close();
 803606e:	f7ff fe7d 	bl	8035d6c <sub_mpipe_close>
    EXTI->IMR1 |= MPIPE_UART_RXPIN;
 8036072:	4903      	ldr	r1, [pc, #12]	; (8036080 <mpipedrv_rx+0x14>)
 8036074:	2280      	movs	r2, #128	; 0x80
 8036076:	588b      	ldr	r3, [r1, r2]
 8036078:	2008      	movs	r0, #8
 803607a:	4303      	orrs	r3, r0
 803607c:	508b      	str	r3, [r1, r2]
    mpipe_rxsync_isr();
#endif

    //MPIPE_UART->CR1   = (USART_CR1_UE | USART_CR1_RE);
    //__DMA_RXOPEN(&uart.rxbuffer[0], uart.rxbuffer[0]+2);   //
}
 803607e:	bd10      	pop	{r4, pc}
 8036080:	58000800 	.word	0x58000800

08036084 <platform_isr_usart2>:
void __UART_ISR(void) {
 8036084:	b510      	push	{r4, lr}
    uart_isr = MPIPE_UART->ISR;
 8036086:	4b23      	ldr	r3, [pc, #140]	; (8036114 <platform_isr_usart2+0x90>)
 8036088:	69da      	ldr	r2, [r3, #28]
    __UART_CLEAR();
 803608a:	4923      	ldr	r1, [pc, #140]	; (8036118 <platform_isr_usart2+0x94>)
 803608c:	6219      	str	r1, [r3, #32]
    if (uart_isr & USART_ISR_RXNE_RXFNE) {
 803608e:	0693      	lsls	r3, r2, #26
 8036090:	d524      	bpl.n	80360dc <platform_isr_usart2+0x58>
        uart.rxbuffer[0] = MPIPE_UART->RDR;
 8036092:	4b20      	ldr	r3, [pc, #128]	; (8036114 <platform_isr_usart2+0x90>)
 8036094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036096:	b2db      	uxtb	r3, r3
 8036098:	4a20      	ldr	r2, [pc, #128]	; (803611c <platform_isr_usart2+0x98>)
 803609a:	7613      	strb	r3, [r2, #24]
        mpipe.state     += (uart.rxbuffer[0] == 0x55);  // Progress to MPIPE_RxHeader
 803609c:	4a20      	ldr	r2, [pc, #128]	; (8036120 <platform_isr_usart2+0x9c>)
 803609e:	7811      	ldrb	r1, [r2, #0]
 80360a0:	b249      	sxtb	r1, r1
 80360a2:	3b55      	subs	r3, #85	; 0x55
 80360a4:	4258      	negs	r0, r3
 80360a6:	4143      	adcs	r3, r0
 80360a8:	185b      	adds	r3, r3, r1
 80360aa:	b25b      	sxtb	r3, r3
 80360ac:	7013      	strb	r3, [r2, #0]
        if (mpipe.state > MPIPE_Idle) {
 80360ae:	7813      	ldrb	r3, [r2, #0]
 80360b0:	b25b      	sxtb	r3, r3
 80360b2:	2b00      	cmp	r3, #0
 80360b4:	dd11      	ble.n	80360da <platform_isr_usart2+0x56>
            MPIPE_UART->CR1 = (USART_CR1_UE | USART_CR1_RE);
 80360b6:	4b17      	ldr	r3, [pc, #92]	; (8036114 <platform_isr_usart2+0x90>)
 80360b8:	2205      	movs	r2, #5
 80360ba:	601a      	str	r2, [r3, #0]
            __DMA_RXOPEN(_HEADER_RXPTR, MPIPE_HEADERBYTES-_HEADER_RXOFFSET);
 80360bc:	4b19      	ldr	r3, [pc, #100]	; (8036124 <platform_isr_usart2+0xa0>)
 80360be:	2200      	movs	r2, #0
 80360c0:	601a      	str	r2, [r3, #0]
 80360c2:	4a19      	ldr	r2, [pc, #100]	; (8036128 <platform_isr_usart2+0xa4>)
 80360c4:	609a      	str	r2, [r3, #8]
 80360c6:	4a19      	ldr	r2, [pc, #100]	; (803612c <platform_isr_usart2+0xa8>)
 80360c8:	60da      	str	r2, [r3, #12]
 80360ca:	2207      	movs	r2, #7
 80360cc:	605a      	str	r2, [r3, #4]
 80360ce:	4a18      	ldr	r2, [pc, #96]	; (8036130 <platform_isr_usart2+0xac>)
 80360d0:	21f0      	movs	r1, #240	; 0xf0
 80360d2:	0509      	lsls	r1, r1, #20
 80360d4:	6051      	str	r1, [r2, #4]
 80360d6:	4a17      	ldr	r2, [pc, #92]	; (8036134 <platform_isr_usart2+0xb0>)
 80360d8:	601a      	str	r2, [r3, #0]
}
 80360da:	bd10      	pop	{r4, pc}
    else if (uart_isr & USART_ISR_TC) {
 80360dc:	0653      	lsls	r3, r2, #25
 80360de:	d5fc      	bpl.n	80360da <platform_isr_usart2+0x56>
        if (--uart.tlist.size != 0) {
 80360e0:	490e      	ldr	r1, [pc, #56]	; (803611c <platform_isr_usart2+0x98>)
 80360e2:	229d      	movs	r2, #157	; 0x9d
 80360e4:	5c8b      	ldrb	r3, [r1, r2]
 80360e6:	3b01      	subs	r3, #1
 80360e8:	b2db      	uxtb	r3, r3
 80360ea:	548b      	strb	r3, [r1, r2]
 80360ec:	2b00      	cmp	r3, #0
 80360ee:	d008      	beq.n	8036102 <platform_isr_usart2+0x7e>
            uart.tlist.i = (uart.tlist.i + 1) & (UART_RB_MAX-1);
 80360f0:	3201      	adds	r2, #1
 80360f2:	5c8b      	ldrb	r3, [r1, r2]
 80360f4:	3301      	adds	r3, #1
 80360f6:	2007      	movs	r0, #7
 80360f8:	4003      	ands	r3, r0
 80360fa:	548b      	strb	r3, [r1, r2]
            sub_txopen();
 80360fc:	f7ff fef0 	bl	8035ee0 <sub_txopen>
 8036100:	e7eb      	b.n	80360da <platform_isr_usart2+0x56>
            mpipedrv_rx(False, 0);
 8036102:	2100      	movs	r1, #0
 8036104:	2000      	movs	r0, #0
 8036106:	f7ff ffb1 	bl	803606c <mpipedrv_rx>
            mpipeevt_txdone(0);
 803610a:	2000      	movs	r0, #0
 803610c:	f7fe ffb5 	bl	803507a <mpipeevt_txdone>
}
 8036110:	e7e3      	b.n	80360da <platform_isr_usart2+0x56>
 8036112:	46c0      	nop			; (mov r8, r8)
 8036114:	40004400 	.word	0x40004400
 8036118:	00123bff 	.word	0x00123bff
 803611c:	2000d048 	.word	0x2000d048
 8036120:	2000cbc4 	.word	0x2000cbc4
 8036124:	40020480 	.word	0x40020480
 8036128:	40004424 	.word	0x40004424
 803612c:	2000d059 	.word	0x2000d059
 8036130:	40020400 	.word	0x40020400
 8036134:	00002083 	.word	0x00002083

08036138 <mpipedrv_isr>:




#ifndef EXTF_mpipedrv_isr
void mpipedrv_isr() {
 8036138:	b570      	push	{r4, r5, r6, lr}
 803613a:	2400      	movs	r4, #0
///      Acks.  In this case, a complete TX process also requires RX'ing an
///      Ack, and a complete RX process requires TX'ing an Ack. </LI>
    //ot_bool tx_process = False;
    ot_int  error_code = -1;

    __DMA_ALL_CLOSE();
 803613c:	4b7a      	ldr	r3, [pc, #488]	; (8036328 <mpipedrv_isr+0x1f0>)
 803613e:	601c      	str	r4, [r3, #0]
 8036140:	601c      	str	r4, [r3, #0]
    __DMA_ALL_CLEAR();
 8036142:	4b7a      	ldr	r3, [pc, #488]	; (803632c <mpipedrv_isr+0x1f4>)
 8036144:	22f0      	movs	r2, #240	; 0xf0
 8036146:	0512      	lsls	r2, r2, #20
 8036148:	605a      	str	r2, [r3, #4]

    switch (mpipe.state) {
 803614a:	4b79      	ldr	r3, [pc, #484]	; (8036330 <mpipedrv_isr+0x1f8>)
 803614c:	781a      	ldrb	r2, [r3, #0]
 803614e:	b253      	sxtb	r3, r2
 8036150:	2a05      	cmp	r2, #5
 8036152:	d100      	bne.n	8036156 <mpipedrv_isr+0x1e>
 8036154:	e0e1      	b.n	803631a <mpipedrv_isr+0x1e2>
 8036156:	2b05      	cmp	r3, #5
 8036158:	dd00      	ble.n	803615c <mpipedrv_isr+0x24>
 803615a:	e067      	b.n	803622c <mpipedrv_isr+0xf4>
 803615c:	2b01      	cmp	r3, #1
 803615e:	dd53      	ble.n	8036208 <mpipedrv_isr+0xd0>
 8036160:	2b02      	cmp	r3, #2
 8036162:	d160      	bne.n	8036226 <mpipedrv_isr+0xee>
            ///@todo as above, might want to revise implementation eventually
            ///      to do the protocol logic in the Mpipe task.  Framing logic
            ///      still should be in ISR.

            // If there are more frames after this one, refresh DMA buffering
            if (uart.crc.count > MPIPE_BUFFER_SIZE) {
 8036164:	4b73      	ldr	r3, [pc, #460]	; (8036334 <mpipedrv_isr+0x1fc>)
 8036166:	2208      	movs	r2, #8
 8036168:	5e9b      	ldrsh	r3, [r3, r2]
 803616a:	2b40      	cmp	r3, #64	; 0x40
 803616c:	dd16      	ble.n	803619c <mpipedrv_isr+0x64>
                nextframe = uart.crc.count - uart.rxframelen;
 803616e:	b29c      	uxth	r4, r3
 8036170:	4a70      	ldr	r2, [pc, #448]	; (8036334 <mpipedrv_isr+0x1fc>)
 8036172:	2358      	movs	r3, #88	; 0x58
 8036174:	5ad3      	ldrh	r3, [r2, r3]
 8036176:	1ae4      	subs	r4, r4, r3
 8036178:	b2a4      	uxth	r4, r4
                if (nextframe > MPIPE_BUFFER_SIZE) {
 803617a:	2c40      	cmp	r4, #64	; 0x40
 803617c:	d900      	bls.n	8036180 <mpipedrv_isr+0x48>
                    nextframe = MPIPE_BUFFER_SIZE;
 803617e:	2440      	movs	r4, #64	; 0x40
                }
                __DMA_RXOPEN(&uart.rxbuffer, nextframe);
 8036180:	4b69      	ldr	r3, [pc, #420]	; (8036328 <mpipedrv_isr+0x1f0>)
 8036182:	2200      	movs	r2, #0
 8036184:	601a      	str	r2, [r3, #0]
 8036186:	4a6c      	ldr	r2, [pc, #432]	; (8036338 <mpipedrv_isr+0x200>)
 8036188:	609a      	str	r2, [r3, #8]
 803618a:	4a6c      	ldr	r2, [pc, #432]	; (803633c <mpipedrv_isr+0x204>)
 803618c:	60da      	str	r2, [r3, #12]
 803618e:	605c      	str	r4, [r3, #4]
 8036190:	4a66      	ldr	r2, [pc, #408]	; (803632c <mpipedrv_isr+0x1f4>)
 8036192:	21f0      	movs	r1, #240	; 0xf0
 8036194:	0509      	lsls	r1, r1, #20
 8036196:	6051      	str	r1, [r2, #4]
 8036198:	4a69      	ldr	r2, [pc, #420]	; (8036340 <mpipedrv_isr+0x208>)
 803619a:	601a      	str	r2, [r3, #0]
            }
            
            // Write the last frame data received to the app/alp queue.
            q_writestring(mpipe.alp.inq, uart.rxbuffer, uart.rxframelen);
 803619c:	4d65      	ldr	r5, [pc, #404]	; (8036334 <mpipedrv_isr+0x1fc>)
 803619e:	2358      	movs	r3, #88	; 0x58
 80361a0:	5eea      	ldrsh	r2, [r5, r3]
 80361a2:	0029      	movs	r1, r5
 80361a4:	3118      	adds	r1, #24
 80361a6:	4b62      	ldr	r3, [pc, #392]	; (8036330 <mpipedrv_isr+0x1f8>)
 80361a8:	68d8      	ldr	r0, [r3, #12]
 80361aa:	f7fe fbb0 	bl	803490e <q_writestring>
            
            // Do CRC if required, else manually adjust crc.count
            if ((uart.header.ctl & MPIPE_CTL_NOCRC) == 0) {
 80361ae:	7deb      	ldrb	r3, [r5, #23]
 80361b0:	07db      	lsls	r3, r3, #31
 80361b2:	d400      	bmi.n	80361b6 <mpipedrv_isr+0x7e>
 80361b4:	e0a8      	b.n	8036308 <mpipedrv_isr+0x1d0>
                crc_calc_nstream(&uart.crc, uart.rxframelen);
            }
            else {
                uart.crc.count -= uart.rxframelen;
 80361b6:	4b5f      	ldr	r3, [pc, #380]	; (8036334 <mpipedrv_isr+0x1fc>)
 80361b8:	2258      	movs	r2, #88	; 0x58
 80361ba:	5a99      	ldrh	r1, [r3, r2]
 80361bc:	891a      	ldrh	r2, [r3, #8]
 80361be:	1a52      	subs	r2, r2, r1
 80361c0:	811a      	strh	r2, [r3, #8]
            }
            
            // Framelen now becomes length of the frame underway
            uart.rxframelen = nextframe;
 80361c2:	4d5c      	ldr	r5, [pc, #368]	; (8036334 <mpipedrv_isr+0x1fc>)
 80361c4:	2358      	movs	r3, #88	; 0x58
 80361c6:	52ec      	strh	r4, [r5, r3]
            
            // Update the hold time on the main queue.  This is not required,
            // and it is a bit of a hack, but it is nice to do
            q_blockwrite(mpipe.alp.inq, __MPIPE_TIMEOUT(uart.crc.count));
 80361c8:	2308      	movs	r3, #8
 80361ca:	5ee9      	ldrsh	r1, [r5, r3]
 80361cc:	3108      	adds	r1, #8
 80361ce:	10c9      	asrs	r1, r1, #3
 80361d0:	3101      	adds	r1, #1
 80361d2:	b289      	uxth	r1, r1
 80361d4:	4b56      	ldr	r3, [pc, #344]	; (8036330 <mpipedrv_isr+0x1f8>)
 80361d6:	68d8      	ldr	r0, [r3, #12]
 80361d8:	f7fe fb03 	bl	80347e2 <q_blockwrite>
            
            // Payload is not done being received.
            // Exit the ISR and wait for next DMA interrupt
            if (uart.crc.count > 0) {
 80361dc:	2208      	movs	r2, #8
 80361de:	5eab      	ldrsh	r3, [r5, r2]
 80361e0:	2b00      	cmp	r3, #0
 80361e2:	dc1f      	bgt.n	8036224 <mpipedrv_isr+0xec>
                return;
            }
            
            // Packet is done being received: check CRC and, if invalid,
            // retract the rx queue putcursor
            if (PLATFORM_ENDIAN16(uart.crc.val) == uart.header.crc16) {
 80361e4:	4a53      	ldr	r2, [pc, #332]	; (8036334 <mpipedrv_isr+0x1fc>)
 80361e6:	8993      	ldrh	r3, [r2, #12]
 80361e8:	ba5b      	rev16	r3, r3
 80361ea:	8a52      	ldrh	r2, [r2, #18]
 80361ec:	429a      	cmp	r2, r3
 80361ee:	d100      	bne.n	80361f2 <mpipedrv_isr+0xba>
 80361f0:	e091      	b.n	8036316 <mpipedrv_isr+0x1de>
                error_code = 0;   
            }
            else {
                mpipe.alp.inq->putcursor -= uart.rxplen;
 80361f2:	4b4f      	ldr	r3, [pc, #316]	; (8036330 <mpipedrv_isr+0x1f8>)
 80361f4:	68da      	ldr	r2, [r3, #12]
 80361f6:	494f      	ldr	r1, [pc, #316]	; (8036334 <mpipedrv_isr+0x1fc>)
 80361f8:	235a      	movs	r3, #90	; 0x5a
 80361fa:	5acb      	ldrh	r3, [r1, r3]
 80361fc:	6891      	ldr	r1, [r2, #8]
 80361fe:	1acb      	subs	r3, r1, r3
 8036200:	6093      	str	r3, [r2, #8]
                error_code = -2;
 8036202:	2402      	movs	r4, #2
 8036204:	4264      	negs	r4, r4
 8036206:	e002      	b.n	803620e <mpipedrv_isr+0xd6>
    switch (mpipe.state) {
 8036208:	2b00      	cmp	r3, #0
 803620a:	da1a      	bge.n	8036242 <mpipedrv_isr+0x10a>
 803620c:	3c01      	subs	r4, #1

    // The RX process is complete, including and ACKing.
    // - Close MPipe and call rxdone event handler from MPipe Task
    // - If RX CRC matters, then make sure to compute it.
    mpipedrv_isr_RXSIG:
    mpipedrv_rx(False, 0);
 803620e:	2100      	movs	r1, #0
 8036210:	2000      	movs	r0, #0
 8036212:	f7ff ff2b 	bl	803606c <mpipedrv_rx>

    q_unlock(mpipe.alp.inq);
 8036216:	4b46      	ldr	r3, [pc, #280]	; (8036330 <mpipedrv_isr+0x1f8>)
 8036218:	68d8      	ldr	r0, [r3, #12]
 803621a:	f7fe faef 	bl	80347fc <q_unlock>
    mpipeevt_rxdone(error_code);
 803621e:	0020      	movs	r0, r4
 8036220:	f7fe ff3d 	bl	803509e <mpipeevt_rxdone>
}
 8036224:	bd70      	pop	{r4, r5, r6, pc}
    switch (mpipe.state) {
 8036226:	2401      	movs	r4, #1
 8036228:	4264      	negs	r4, r4
 803622a:	e7f0      	b.n	803620e <mpipedrv_isr+0xd6>
 803622c:	2b06      	cmp	r3, #6
 803622e:	d105      	bne.n	803623c <mpipedrv_isr+0x104>
            __UART_CLEAR();
 8036230:	4b44      	ldr	r3, [pc, #272]	; (8036344 <mpipedrv_isr+0x20c>)
 8036232:	4a45      	ldr	r2, [pc, #276]	; (8036348 <mpipedrv_isr+0x210>)
 8036234:	621a      	str	r2, [r3, #32]
            MPIPE_UART->CR1 = (USART_CR1_UE | USART_CR1_TE | USART_CR1_TCIE);
 8036236:	2249      	movs	r2, #73	; 0x49
 8036238:	601a      	str	r2, [r3, #0]
            return; 
 803623a:	e7f3      	b.n	8036224 <mpipedrv_isr+0xec>
    switch (mpipe.state) {
 803623c:	2401      	movs	r4, #1
 803623e:	4264      	negs	r4, r4
 8036240:	e7e5      	b.n	803620e <mpipedrv_isr+0xd6>
            uart.rxplen = PLATFORM_ENDIAN16(uart.header.plen);
 8036242:	4a3c      	ldr	r2, [pc, #240]	; (8036334 <mpipedrv_isr+0x1fc>)
 8036244:	8a93      	ldrh	r3, [r2, #20]
 8036246:	ba5b      	rev16	r3, r3
 8036248:	b29b      	uxth	r3, r3
 803624a:	215a      	movs	r1, #90	; 0x5a
 803624c:	5253      	strh	r3, [r2, r1]
            if (uart.rxplen == 0)                           error_code = -1;
 803624e:	2b00      	cmp	r3, #0
 8036250:	d102      	bne.n	8036258 <mpipedrv_isr+0x120>
 8036252:	2401      	movs	r4, #1
 8036254:	4264      	negs	r4, r4
 8036256:	e7da      	b.n	803620e <mpipedrv_isr+0xd6>
            else if (q_blocktime(mpipe.alp.inq))            error_code = -11;
 8036258:	4b35      	ldr	r3, [pc, #212]	; (8036330 <mpipedrv_isr+0x1f8>)
 803625a:	68d8      	ldr	r0, [r3, #12]
 803625c:	f7fe fabf 	bl	80347de <q_blocktime>
 8036260:	2800      	cmp	r0, #0
 8036262:	d002      	beq.n	803626a <mpipedrv_isr+0x132>
 8036264:	240b      	movs	r4, #11
 8036266:	4264      	negs	r4, r4
 8036268:	e7d1      	b.n	803620e <mpipedrv_isr+0xd6>
            else if (q_writespace(mpipe.alp.inq) < uart.rxplen)  error_code = -7;
 803626a:	4b31      	ldr	r3, [pc, #196]	; (8036330 <mpipedrv_isr+0x1f8>)
 803626c:	68d8      	ldr	r0, [r3, #12]
 803626e:	f7fe faac 	bl	80347ca <q_writespace>
 8036272:	4a30      	ldr	r2, [pc, #192]	; (8036334 <mpipedrv_isr+0x1fc>)
 8036274:	235a      	movs	r3, #90	; 0x5a
 8036276:	5ad4      	ldrh	r4, [r2, r3]
 8036278:	42a0      	cmp	r0, r4
 803627a:	da02      	bge.n	8036282 <mpipedrv_isr+0x14a>
 803627c:	2407      	movs	r4, #7
 803627e:	4264      	negs	r4, r4
        } goto mpipedrv_isr_RXSIG;  // handle error
 8036280:	e7c5      	b.n	803620e <mpipedrv_isr+0xd6>
                blockticks = __MPIPE_TIMEOUT(uart.rxplen);
 8036282:	3408      	adds	r4, #8
 8036284:	08e4      	lsrs	r4, r4, #3
 8036286:	3401      	adds	r4, #1
                q_blockwrite(mpipe.alp.inq, blockticks);
 8036288:	4b29      	ldr	r3, [pc, #164]	; (8036330 <mpipedrv_isr+0x1f8>)
 803628a:	68d8      	ldr	r0, [r3, #12]
 803628c:	0021      	movs	r1, r4
 803628e:	f7fe faa8 	bl	80347e2 <q_blockwrite>
                uart.rxframelen = (uart.rxplen <= MPIPE_BUFFER_SIZE) ?
 8036292:	4a28      	ldr	r2, [pc, #160]	; (8036334 <mpipedrv_isr+0x1fc>)
 8036294:	235a      	movs	r3, #90	; 0x5a
 8036296:	5ad3      	ldrh	r3, [r2, r3]
                                    uart.rxplen : MPIPE_BUFFER_SIZE;
 8036298:	1c19      	adds	r1, r3, #0
 803629a:	2b40      	cmp	r3, #64	; 0x40
 803629c:	d900      	bls.n	80362a0 <mpipedrv_isr+0x168>
 803629e:	2140      	movs	r1, #64	; 0x40
                uart.rxframelen = (uart.rxplen <= MPIPE_BUFFER_SIZE) ?
 80362a0:	4d24      	ldr	r5, [pc, #144]	; (8036334 <mpipedrv_isr+0x1fc>)
 80362a2:	2258      	movs	r2, #88	; 0x58
 80362a4:	52a9      	strh	r1, [r5, r2]
                __DMA_RXOPEN(uart.rxbuffer, uart.rxframelen);
 80362a6:	4b20      	ldr	r3, [pc, #128]	; (8036328 <mpipedrv_isr+0x1f0>)
 80362a8:	2100      	movs	r1, #0
 80362aa:	6019      	str	r1, [r3, #0]
 80362ac:	4922      	ldr	r1, [pc, #136]	; (8036338 <mpipedrv_isr+0x200>)
 80362ae:	6099      	str	r1, [r3, #8]
 80362b0:	0029      	movs	r1, r5
 80362b2:	3118      	adds	r1, #24
 80362b4:	60d9      	str	r1, [r3, #12]
 80362b6:	5aaa      	ldrh	r2, [r5, r2]
 80362b8:	605a      	str	r2, [r3, #4]
 80362ba:	4a1c      	ldr	r2, [pc, #112]	; (803632c <mpipedrv_isr+0x1f4>)
 80362bc:	21f0      	movs	r1, #240	; 0xf0
 80362be:	0509      	lsls	r1, r1, #20
 80362c0:	6051      	str	r1, [r2, #4]
 80362c2:	4a1f      	ldr	r2, [pc, #124]	; (8036340 <mpipedrv_isr+0x208>)
 80362c4:	601a      	str	r2, [r3, #0]
                mpipeevt_rxdetect(blockticks);
 80362c6:	b220      	sxth	r0, r4
 80362c8:	f7fe fee2 	bl	8035090 <mpipeevt_rxdetect>
                mpipe.state = MPIPE_RxPayload;
 80362cc:	4b18      	ldr	r3, [pc, #96]	; (8036330 <mpipedrv_isr+0x1f8>)
 80362ce:	2202      	movs	r2, #2
 80362d0:	701a      	strb	r2, [r3, #0]
                uart.crc.count  = uart.rxplen;
 80362d2:	235a      	movs	r3, #90	; 0x5a
 80362d4:	5eeb      	ldrsh	r3, [r5, r3]
 80362d6:	812b      	strh	r3, [r5, #8]
                uart.crc.val    = crc16drv_init();
 80362d8:	f7fe f9c0 	bl	803465c <crc16drv_init>
 80362dc:	81a8      	strh	r0, [r5, #12]
                if ((uart.header.ctl & MPIPE_CTL_NOCRC) == 0) {
 80362de:	7deb      	ldrb	r3, [r5, #23]
 80362e0:	07db      	lsls	r3, r3, #31
 80362e2:	d49f      	bmi.n	8036224 <mpipedrv_isr+0xec>
                    uart.crc.writeout   = False;
 80362e4:	4c13      	ldr	r4, [pc, #76]	; (8036334 <mpipedrv_isr+0x1fc>)
 80362e6:	2300      	movs	r3, #0
 80362e8:	72a3      	strb	r3, [r4, #10]
                    uart.crc.cursor     = (ot_u8*)&uart.header.plen;
 80362ea:	0023      	movs	r3, r4
 80362ec:	3314      	adds	r3, #20
 80362ee:	6063      	str	r3, [r4, #4]
                    uart.crc.count     += 4;
 80362f0:	8923      	ldrh	r3, [r4, #8]
 80362f2:	3304      	adds	r3, #4
 80362f4:	8123      	strh	r3, [r4, #8]
                    crc_calc_nstream(&uart.crc, 4);
 80362f6:	1d20      	adds	r0, r4, #4
 80362f8:	2104      	movs	r1, #4
 80362fa:	f7fe f9c9 	bl	8034690 <crc_calc_nstream>
                    uart.crc.cursor     = mpipe.alp.inq->putcursor;
 80362fe:	4b0c      	ldr	r3, [pc, #48]	; (8036330 <mpipedrv_isr+0x1f8>)
 8036300:	68db      	ldr	r3, [r3, #12]
 8036302:	689b      	ldr	r3, [r3, #8]
 8036304:	6063      	str	r3, [r4, #4]
                return;             // Wait for next DMA RX interrupt
 8036306:	e78d      	b.n	8036224 <mpipedrv_isr+0xec>
                crc_calc_nstream(&uart.crc, uart.rxframelen);
 8036308:	480a      	ldr	r0, [pc, #40]	; (8036334 <mpipedrv_isr+0x1fc>)
 803630a:	2358      	movs	r3, #88	; 0x58
 803630c:	5ac1      	ldrh	r1, [r0, r3]
 803630e:	3004      	adds	r0, #4
 8036310:	f7fe f9be 	bl	8034690 <crc_calc_nstream>
 8036314:	e755      	b.n	80361c2 <mpipedrv_isr+0x8a>
                error_code = 0;   
 8036316:	2400      	movs	r4, #0
        } goto mpipedrv_isr_RXSIG;
 8036318:	e779      	b.n	803620e <mpipedrv_isr+0xd6>
            mpipe.state = MPIPE_Tx_Done;
 803631a:	4b05      	ldr	r3, [pc, #20]	; (8036330 <mpipedrv_isr+0x1f8>)
 803631c:	2206      	movs	r2, #6
 803631e:	701a      	strb	r2, [r3, #0]
            sub_txcont();
 8036320:	f7ff fe30 	bl	8035f84 <sub_txcont>
            return;
 8036324:	e77e      	b.n	8036224 <mpipedrv_isr+0xec>
 8036326:	46c0      	nop			; (mov r8, r8)
 8036328:	40020480 	.word	0x40020480
 803632c:	40020400 	.word	0x40020400
 8036330:	2000cbc4 	.word	0x2000cbc4
 8036334:	2000d048 	.word	0x2000d048
 8036338:	40004424 	.word	0x40004424
 803633c:	2000d060 	.word	0x2000d060
 8036340:	00002083 	.word	0x00002083
 8036344:	40004400 	.word	0x40004400
 8036348:	00123bff 	.word	0x00123bff

0803634c <platform_isr_dma2ch7>:
void __DMARX_ISR(void) {
 803634c:	b510      	push	{r4, lr}
    mpipedrv_isr();
 803634e:	f7ff fef3 	bl	8036138 <mpipedrv_isr>
}
 8036352:	bd10      	pop	{r4, pc}

08036354 <sys_sig_powerdown>:
    SCB->SCR    = scbscr_save;
}


//#ifdef EXTF_sys_sig_powerdown
void sys_sig_powerdown(ot_int code) {
 8036354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8036356:	46d6      	mov	lr, sl
 8036358:	464f      	mov	r7, r9
 803635a:	4646      	mov	r6, r8
 803635c:	b5c0      	push	{r6, r7, lr}
    // - FWU option (L0, L1) is superfluous unless ULP is set
    // - In STM32L1 implementations we must kill the chrono timer before STOP.
    // - In all STM32L impls, we must clear EXTI's before stop.  In very rare cases,
    //   an EXTI might be missed, but there is nothing that can be done about this.
#   if _USE_STOP
    if (code & 2) {
 803635e:	0783      	lsls	r3, r0, #30
 8036360:	d535      	bpl.n	80363ce <sys_sig_powerdown+0x7a>
    rcc_ahb2enr_saved   = RCC->C2AHB2ENR;
 8036362:	27b0      	movs	r7, #176	; 0xb0
 8036364:	05ff      	lsls	r7, r7, #23
 8036366:	26a6      	movs	r6, #166	; 0xa6
 8036368:	0076      	lsls	r6, r6, #1
 803636a:	59bb      	ldr	r3, [r7, r6]
 803636c:	4698      	mov	r8, r3
    RCC->C2AHB2ENR      = rcc_flags[code&1];
 803636e:	2301      	movs	r3, #1
 8036370:	4018      	ands	r0, r3
 8036372:	0080      	lsls	r0, r0, #2
 8036374:	4b1d      	ldr	r3, [pc, #116]	; (80363ec <sys_sig_powerdown+0x98>)
 8036376:	58c3      	ldr	r3, [r0, r3]
 8036378:	51bb      	str	r3, [r7, r6]
    SysTick->CTRL = 0;
 803637a:	2300      	movs	r3, #0
 803637c:	4a1c      	ldr	r2, [pc, #112]	; (80363f0 <sys_sig_powerdown+0x9c>)
 803637e:	6013      	str	r3, [r2, #0]
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8036380:	4a1c      	ldr	r2, [pc, #112]	; (80363f4 <sys_sig_powerdown+0xa0>)
 8036382:	4691      	mov	r9, r2
 8036384:	6912      	ldr	r2, [r2, #16]
 8036386:	2104      	movs	r1, #4
 8036388:	468a      	mov	sl, r1
 803638a:	430a      	orrs	r2, r1
 803638c:	4649      	mov	r1, r9
 803638e:	610a      	str	r2, [r1, #16]
    PWR->C2CR1 = PWR_C2CR1_FPDS | 2;
 8036390:	4c19      	ldr	r4, [pc, #100]	; (80363f8 <sys_sig_powerdown+0xa4>)
 8036392:	2580      	movs	r5, #128	; 0x80
 8036394:	2222      	movs	r2, #34	; 0x22
 8036396:	5162      	str	r2, [r4, r5]
    PWR->CR3 |= PWR_CR3_ULPEN;
 8036398:	68a2      	ldr	r2, [r4, #8]
 803639a:	432a      	orrs	r2, r5
 803639c:	60a2      	str	r2, [r4, #8]
    EXTI->PR1   = 0;
 803639e:	4a17      	ldr	r2, [pc, #92]	; (80363fc <sys_sig_powerdown+0xa8>)
 80363a0:	60d3      	str	r3, [r2, #12]
    EXTI->PR2   = 0;
 80363a2:	62d3      	str	r3, [r2, #44]	; 0x2c
    platform_enable_interrupts();
 80363a4:	f7ff fa3c 	bl	8035820 <platform_enable_interrupts>
    __WFI();
 80363a8:	bf30      	wfi
    PWR->C2CR1      = 2;
 80363aa:	2302      	movs	r3, #2
 80363ac:	5163      	str	r3, [r4, r5]
    SCB->SCR       &= ~((ot_u32)SCB_SCR_SLEEPDEEP_Msk);
 80363ae:	464b      	mov	r3, r9
 80363b0:	691b      	ldr	r3, [r3, #16]
 80363b2:	4652      	mov	r2, sl
 80363b4:	4393      	bics	r3, r2
 80363b6:	464a      	mov	r2, r9
 80363b8:	6113      	str	r3, [r2, #16]
    PWR->CR3       &= ~PWR_CR3_ULPEN;
 80363ba:	68a3      	ldr	r3, [r4, #8]
 80363bc:	43ab      	bics	r3, r5
 80363be:	60a3      	str	r3, [r4, #8]
    RCC->C2AHB2ENR  = rcc_ahb2enr_saved;
 80363c0:	4643      	mov	r3, r8
 80363c2:	51bb      	str	r3, [r7, r6]
        PWR->CR3    &= ~PWR_CR3_ULPEN;
        platform_enable_interrupts();
        __WFI();
    }

}
 80363c4:	bce0      	pop	{r5, r6, r7}
 80363c6:	46ba      	mov	sl, r7
 80363c8:	46b1      	mov	r9, r6
 80363ca:	46a8      	mov	r8, r5
 80363cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SCB->SCR   &= ~((ot_u32)SCB_SCR_SLEEPDEEP_Msk);
 80363ce:	4a09      	ldr	r2, [pc, #36]	; (80363f4 <sys_sig_powerdown+0xa0>)
 80363d0:	6913      	ldr	r3, [r2, #16]
 80363d2:	2104      	movs	r1, #4
 80363d4:	438b      	bics	r3, r1
 80363d6:	6113      	str	r3, [r2, #16]
        PWR->CR3    &= ~PWR_CR3_ULPEN;
 80363d8:	4a07      	ldr	r2, [pc, #28]	; (80363f8 <sys_sig_powerdown+0xa4>)
 80363da:	6893      	ldr	r3, [r2, #8]
 80363dc:	317c      	adds	r1, #124	; 0x7c
 80363de:	438b      	bics	r3, r1
 80363e0:	6093      	str	r3, [r2, #8]
        platform_enable_interrupts();
 80363e2:	f7ff fa1d 	bl	8035820 <platform_enable_interrupts>
        __WFI();
 80363e6:	bf30      	wfi
}
 80363e8:	e7ec      	b.n	80363c4 <sys_sig_powerdown+0x70>
 80363ea:	46c0      	nop			; (mov r8, r8)
 80363ec:	080373a4 	.word	0x080373a4
 80363f0:	e000e010 	.word	0xe000e010
 80363f4:	e000ed00 	.word	0xe000ed00
 80363f8:	58000400 	.word	0x58000400
 80363fc:	58000800 	.word	0x58000800

08036400 <vworm_init>:
}
#endif


#ifndef EXTF_vworm_init
ot_u8 vworm_init() {
 8036400:	b510      	push	{r4, lr}
    ot_memcpy_4(fsram, (ot_u32*)FLASH_FS_ADDR, sizeof(fsram)/4);
 8036402:	2280      	movs	r2, #128	; 0x80
 8036404:	00d2      	lsls	r2, r2, #3
 8036406:	4903      	ldr	r1, [pc, #12]	; (8036414 <vworm_init+0x14>)
 8036408:	4803      	ldr	r0, [pc, #12]	; (8036418 <vworm_init+0x18>)
 803640a:	f7ff fc5a 	bl	8035cc2 <ot_memcpy_4>
    return 0;
}
 803640e:	2000      	movs	r0, #0
 8036410:	bd10      	pop	{r4, pc}
 8036412:	46c0      	nop			; (mov r8, r8)
 8036414:	0803f000 	.word	0x0803f000
 8036418:	2000d0e8 	.word	0x2000d0e8

0803641c <vworm_read>:

#ifndef EXTF_vworm_read
ot_u16 vworm_read(vaddr addr) {
    ot_u16* data;
    addr   -= VWORM_BASE_VADDR;
    addr   &= ~1;
 803641c:	2301      	movs	r3, #1
 803641e:	4398      	bics	r0, r3
    data    = (ot_u16*)((ot_u8*)fsram + addr);
    return *data;
 8036420:	4b01      	ldr	r3, [pc, #4]	; (8036428 <vworm_read+0xc>)
 8036422:	5a18      	ldrh	r0, [r3, r0]
}
 8036424:	4770      	bx	lr
 8036426:	46c0      	nop			; (mov r8, r8)
 8036428:	2000d0e8 	.word	0x2000d0e8

0803642c <vworm_write>:

#ifndef EXTF_vworm_write
ot_u8 vworm_write(vaddr addr, ot_u16 data) {
    ot_u16* aptr;
    addr   -= VWORM_BASE_VADDR;
    addr   &= ~1;
 803642c:	2301      	movs	r3, #1
 803642e:	4398      	bics	r0, r3
    aptr    = (ot_u16*)((ot_u8*)fsram + addr);
    *aptr   = data;
 8036430:	4b01      	ldr	r3, [pc, #4]	; (8036438 <vworm_write+0xc>)
 8036432:	5219      	strh	r1, [r3, r0]
    return 0;
}
 8036434:	2000      	movs	r0, #0
 8036436:	4770      	bx	lr
 8036438:	2000d0e8 	.word	0x2000d0e8

0803643c <vworm_mark>:
#endif
    


#ifndef EXTF_vworm_mark
ot_u8 vworm_mark(vaddr addr, ot_u16 value) {
 803643c:	b510      	push	{r4, lr}
    return vworm_write(addr, value);
 803643e:	f7ff fff5 	bl	803642c <vworm_write>
}
 8036442:	bd10      	pop	{r4, pc}

08036444 <vworm_wipeblock>:
#endif

#ifndef EXTF_vworm_wipeblock
ot_u8 vworm_wipeblock(vaddr addr, ot_uint wipe_span) {
    return 0;
}
 8036444:	2000      	movs	r0, #0
 8036446:	4770      	bx	lr

08036448 <vsram_read>:
  * ========================================================================<BR>
  * SRAM version of Veelite doesn't utilize VSRAM
  */

#ifndef EXTF_vsram_read
ot_u16 vsram_read(vaddr addr) {
 8036448:	b510      	push	{r4, lr}
    return vworm_read(addr);
 803644a:	f7ff ffe7 	bl	803641c <vworm_read>
}
 803644e:	bd10      	pop	{r4, pc}

08036450 <vsram_mark>:
#endif

#ifndef EXTF_vsram_mark
ot_u8 vsram_mark(vaddr addr, ot_u16 value) {
 8036450:	b510      	push	{r4, lr}
    return vworm_mark(addr, value);
 8036452:	f7ff fff3 	bl	803643c <vworm_mark>
}
 8036456:	bd10      	pop	{r4, pc}

08036458 <__libc_init_array>:
 8036458:	b570      	push	{r4, r5, r6, lr}
 803645a:	2600      	movs	r6, #0
 803645c:	4d0c      	ldr	r5, [pc, #48]	; (8036490 <__libc_init_array+0x38>)
 803645e:	4c0d      	ldr	r4, [pc, #52]	; (8036494 <__libc_init_array+0x3c>)
 8036460:	1b64      	subs	r4, r4, r5
 8036462:	10a4      	asrs	r4, r4, #2
 8036464:	42a6      	cmp	r6, r4
 8036466:	d109      	bne.n	803647c <__libc_init_array+0x24>
 8036468:	2600      	movs	r6, #0
 803646a:	f000 fc91 	bl	8036d90 <_init>
 803646e:	4d0a      	ldr	r5, [pc, #40]	; (8036498 <__libc_init_array+0x40>)
 8036470:	4c0a      	ldr	r4, [pc, #40]	; (803649c <__libc_init_array+0x44>)
 8036472:	1b64      	subs	r4, r4, r5
 8036474:	10a4      	asrs	r4, r4, #2
 8036476:	42a6      	cmp	r6, r4
 8036478:	d105      	bne.n	8036486 <__libc_init_array+0x2e>
 803647a:	bd70      	pop	{r4, r5, r6, pc}
 803647c:	00b3      	lsls	r3, r6, #2
 803647e:	58eb      	ldr	r3, [r5, r3]
 8036480:	4798      	blx	r3
 8036482:	3601      	adds	r6, #1
 8036484:	e7ee      	b.n	8036464 <__libc_init_array+0xc>
 8036486:	00b3      	lsls	r3, r6, #2
 8036488:	58eb      	ldr	r3, [r5, r3]
 803648a:	4798      	blx	r3
 803648c:	3601      	adds	r6, #1
 803648e:	e7f2      	b.n	8036476 <__libc_init_array+0x1e>
 8036490:	08037444 	.word	0x08037444
 8036494:	08037444 	.word	0x08037444
 8036498:	08037444 	.word	0x08037444
 803649c:	08037448 	.word	0x08037448

080364a0 <memcpy>:
 80364a0:	2300      	movs	r3, #0
 80364a2:	b510      	push	{r4, lr}
 80364a4:	429a      	cmp	r2, r3
 80364a6:	d100      	bne.n	80364aa <memcpy+0xa>
 80364a8:	bd10      	pop	{r4, pc}
 80364aa:	5ccc      	ldrb	r4, [r1, r3]
 80364ac:	54c4      	strb	r4, [r0, r3]
 80364ae:	3301      	adds	r3, #1
 80364b0:	e7f8      	b.n	80364a4 <memcpy+0x4>

080364b2 <_printf_common>:
 80364b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80364b4:	0015      	movs	r5, r2
 80364b6:	9301      	str	r3, [sp, #4]
 80364b8:	688a      	ldr	r2, [r1, #8]
 80364ba:	690b      	ldr	r3, [r1, #16]
 80364bc:	000c      	movs	r4, r1
 80364be:	9000      	str	r0, [sp, #0]
 80364c0:	4293      	cmp	r3, r2
 80364c2:	da00      	bge.n	80364c6 <_printf_common+0x14>
 80364c4:	0013      	movs	r3, r2
 80364c6:	0022      	movs	r2, r4
 80364c8:	602b      	str	r3, [r5, #0]
 80364ca:	3243      	adds	r2, #67	; 0x43
 80364cc:	7812      	ldrb	r2, [r2, #0]
 80364ce:	2a00      	cmp	r2, #0
 80364d0:	d001      	beq.n	80364d6 <_printf_common+0x24>
 80364d2:	3301      	adds	r3, #1
 80364d4:	602b      	str	r3, [r5, #0]
 80364d6:	6823      	ldr	r3, [r4, #0]
 80364d8:	069b      	lsls	r3, r3, #26
 80364da:	d502      	bpl.n	80364e2 <_printf_common+0x30>
 80364dc:	682b      	ldr	r3, [r5, #0]
 80364de:	3302      	adds	r3, #2
 80364e0:	602b      	str	r3, [r5, #0]
 80364e2:	6822      	ldr	r2, [r4, #0]
 80364e4:	2306      	movs	r3, #6
 80364e6:	0017      	movs	r7, r2
 80364e8:	401f      	ands	r7, r3
 80364ea:	421a      	tst	r2, r3
 80364ec:	d027      	beq.n	803653e <_printf_common+0x8c>
 80364ee:	0023      	movs	r3, r4
 80364f0:	3343      	adds	r3, #67	; 0x43
 80364f2:	781b      	ldrb	r3, [r3, #0]
 80364f4:	1e5a      	subs	r2, r3, #1
 80364f6:	4193      	sbcs	r3, r2
 80364f8:	6822      	ldr	r2, [r4, #0]
 80364fa:	0692      	lsls	r2, r2, #26
 80364fc:	d430      	bmi.n	8036560 <_printf_common+0xae>
 80364fe:	0022      	movs	r2, r4
 8036500:	9901      	ldr	r1, [sp, #4]
 8036502:	9800      	ldr	r0, [sp, #0]
 8036504:	9e08      	ldr	r6, [sp, #32]
 8036506:	3243      	adds	r2, #67	; 0x43
 8036508:	47b0      	blx	r6
 803650a:	1c43      	adds	r3, r0, #1
 803650c:	d025      	beq.n	803655a <_printf_common+0xa8>
 803650e:	2306      	movs	r3, #6
 8036510:	6820      	ldr	r0, [r4, #0]
 8036512:	682a      	ldr	r2, [r5, #0]
 8036514:	68e1      	ldr	r1, [r4, #12]
 8036516:	2500      	movs	r5, #0
 8036518:	4003      	ands	r3, r0
 803651a:	2b04      	cmp	r3, #4
 803651c:	d103      	bne.n	8036526 <_printf_common+0x74>
 803651e:	1a8d      	subs	r5, r1, r2
 8036520:	43eb      	mvns	r3, r5
 8036522:	17db      	asrs	r3, r3, #31
 8036524:	401d      	ands	r5, r3
 8036526:	68a3      	ldr	r3, [r4, #8]
 8036528:	6922      	ldr	r2, [r4, #16]
 803652a:	4293      	cmp	r3, r2
 803652c:	dd01      	ble.n	8036532 <_printf_common+0x80>
 803652e:	1a9b      	subs	r3, r3, r2
 8036530:	18ed      	adds	r5, r5, r3
 8036532:	2700      	movs	r7, #0
 8036534:	42bd      	cmp	r5, r7
 8036536:	d120      	bne.n	803657a <_printf_common+0xc8>
 8036538:	2000      	movs	r0, #0
 803653a:	e010      	b.n	803655e <_printf_common+0xac>
 803653c:	3701      	adds	r7, #1
 803653e:	68e3      	ldr	r3, [r4, #12]
 8036540:	682a      	ldr	r2, [r5, #0]
 8036542:	1a9b      	subs	r3, r3, r2
 8036544:	42bb      	cmp	r3, r7
 8036546:	ddd2      	ble.n	80364ee <_printf_common+0x3c>
 8036548:	0022      	movs	r2, r4
 803654a:	2301      	movs	r3, #1
 803654c:	9901      	ldr	r1, [sp, #4]
 803654e:	9800      	ldr	r0, [sp, #0]
 8036550:	9e08      	ldr	r6, [sp, #32]
 8036552:	3219      	adds	r2, #25
 8036554:	47b0      	blx	r6
 8036556:	1c43      	adds	r3, r0, #1
 8036558:	d1f0      	bne.n	803653c <_printf_common+0x8a>
 803655a:	2001      	movs	r0, #1
 803655c:	4240      	negs	r0, r0
 803655e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8036560:	2030      	movs	r0, #48	; 0x30
 8036562:	18e1      	adds	r1, r4, r3
 8036564:	3143      	adds	r1, #67	; 0x43
 8036566:	7008      	strb	r0, [r1, #0]
 8036568:	0021      	movs	r1, r4
 803656a:	1c5a      	adds	r2, r3, #1
 803656c:	3145      	adds	r1, #69	; 0x45
 803656e:	7809      	ldrb	r1, [r1, #0]
 8036570:	18a2      	adds	r2, r4, r2
 8036572:	3243      	adds	r2, #67	; 0x43
 8036574:	3302      	adds	r3, #2
 8036576:	7011      	strb	r1, [r2, #0]
 8036578:	e7c1      	b.n	80364fe <_printf_common+0x4c>
 803657a:	0022      	movs	r2, r4
 803657c:	2301      	movs	r3, #1
 803657e:	9901      	ldr	r1, [sp, #4]
 8036580:	9800      	ldr	r0, [sp, #0]
 8036582:	9e08      	ldr	r6, [sp, #32]
 8036584:	321a      	adds	r2, #26
 8036586:	47b0      	blx	r6
 8036588:	1c43      	adds	r3, r0, #1
 803658a:	d0e6      	beq.n	803655a <_printf_common+0xa8>
 803658c:	3701      	adds	r7, #1
 803658e:	e7d1      	b.n	8036534 <_printf_common+0x82>

08036590 <_printf_i>:
 8036590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8036592:	b08b      	sub	sp, #44	; 0x2c
 8036594:	9206      	str	r2, [sp, #24]
 8036596:	000a      	movs	r2, r1
 8036598:	3243      	adds	r2, #67	; 0x43
 803659a:	9307      	str	r3, [sp, #28]
 803659c:	9005      	str	r0, [sp, #20]
 803659e:	9204      	str	r2, [sp, #16]
 80365a0:	7e0a      	ldrb	r2, [r1, #24]
 80365a2:	000c      	movs	r4, r1
 80365a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80365a6:	2a78      	cmp	r2, #120	; 0x78
 80365a8:	d807      	bhi.n	80365ba <_printf_i+0x2a>
 80365aa:	2a62      	cmp	r2, #98	; 0x62
 80365ac:	d809      	bhi.n	80365c2 <_printf_i+0x32>
 80365ae:	2a00      	cmp	r2, #0
 80365b0:	d100      	bne.n	80365b4 <_printf_i+0x24>
 80365b2:	e0c1      	b.n	8036738 <_printf_i+0x1a8>
 80365b4:	2a58      	cmp	r2, #88	; 0x58
 80365b6:	d100      	bne.n	80365ba <_printf_i+0x2a>
 80365b8:	e08c      	b.n	80366d4 <_printf_i+0x144>
 80365ba:	0026      	movs	r6, r4
 80365bc:	3642      	adds	r6, #66	; 0x42
 80365be:	7032      	strb	r2, [r6, #0]
 80365c0:	e022      	b.n	8036608 <_printf_i+0x78>
 80365c2:	0010      	movs	r0, r2
 80365c4:	3863      	subs	r0, #99	; 0x63
 80365c6:	2815      	cmp	r0, #21
 80365c8:	d8f7      	bhi.n	80365ba <_printf_i+0x2a>
 80365ca:	f7f9 fd9d 	bl	8030108 <__gnu_thumb1_case_shi>
 80365ce:	0016      	.short	0x0016
 80365d0:	fff6001f 	.word	0xfff6001f
 80365d4:	fff6fff6 	.word	0xfff6fff6
 80365d8:	001ffff6 	.word	0x001ffff6
 80365dc:	fff6fff6 	.word	0xfff6fff6
 80365e0:	fff6fff6 	.word	0xfff6fff6
 80365e4:	003600a8 	.word	0x003600a8
 80365e8:	fff6009a 	.word	0xfff6009a
 80365ec:	00b9fff6 	.word	0x00b9fff6
 80365f0:	0036fff6 	.word	0x0036fff6
 80365f4:	fff6fff6 	.word	0xfff6fff6
 80365f8:	009e      	.short	0x009e
 80365fa:	0026      	movs	r6, r4
 80365fc:	681a      	ldr	r2, [r3, #0]
 80365fe:	3642      	adds	r6, #66	; 0x42
 8036600:	1d11      	adds	r1, r2, #4
 8036602:	6019      	str	r1, [r3, #0]
 8036604:	6813      	ldr	r3, [r2, #0]
 8036606:	7033      	strb	r3, [r6, #0]
 8036608:	2301      	movs	r3, #1
 803660a:	e0a7      	b.n	803675c <_printf_i+0x1cc>
 803660c:	6808      	ldr	r0, [r1, #0]
 803660e:	6819      	ldr	r1, [r3, #0]
 8036610:	1d0a      	adds	r2, r1, #4
 8036612:	0605      	lsls	r5, r0, #24
 8036614:	d50b      	bpl.n	803662e <_printf_i+0x9e>
 8036616:	680d      	ldr	r5, [r1, #0]
 8036618:	601a      	str	r2, [r3, #0]
 803661a:	2d00      	cmp	r5, #0
 803661c:	da03      	bge.n	8036626 <_printf_i+0x96>
 803661e:	232d      	movs	r3, #45	; 0x2d
 8036620:	9a04      	ldr	r2, [sp, #16]
 8036622:	426d      	negs	r5, r5
 8036624:	7013      	strb	r3, [r2, #0]
 8036626:	4b61      	ldr	r3, [pc, #388]	; (80367ac <_printf_i+0x21c>)
 8036628:	270a      	movs	r7, #10
 803662a:	9303      	str	r3, [sp, #12]
 803662c:	e01b      	b.n	8036666 <_printf_i+0xd6>
 803662e:	680d      	ldr	r5, [r1, #0]
 8036630:	601a      	str	r2, [r3, #0]
 8036632:	0641      	lsls	r1, r0, #25
 8036634:	d5f1      	bpl.n	803661a <_printf_i+0x8a>
 8036636:	b22d      	sxth	r5, r5
 8036638:	e7ef      	b.n	803661a <_printf_i+0x8a>
 803663a:	680d      	ldr	r5, [r1, #0]
 803663c:	6819      	ldr	r1, [r3, #0]
 803663e:	1d08      	adds	r0, r1, #4
 8036640:	6018      	str	r0, [r3, #0]
 8036642:	062e      	lsls	r6, r5, #24
 8036644:	d501      	bpl.n	803664a <_printf_i+0xba>
 8036646:	680d      	ldr	r5, [r1, #0]
 8036648:	e003      	b.n	8036652 <_printf_i+0xc2>
 803664a:	066d      	lsls	r5, r5, #25
 803664c:	d5fb      	bpl.n	8036646 <_printf_i+0xb6>
 803664e:	680d      	ldr	r5, [r1, #0]
 8036650:	b2ad      	uxth	r5, r5
 8036652:	4b56      	ldr	r3, [pc, #344]	; (80367ac <_printf_i+0x21c>)
 8036654:	2708      	movs	r7, #8
 8036656:	9303      	str	r3, [sp, #12]
 8036658:	2a6f      	cmp	r2, #111	; 0x6f
 803665a:	d000      	beq.n	803665e <_printf_i+0xce>
 803665c:	3702      	adds	r7, #2
 803665e:	0023      	movs	r3, r4
 8036660:	2200      	movs	r2, #0
 8036662:	3343      	adds	r3, #67	; 0x43
 8036664:	701a      	strb	r2, [r3, #0]
 8036666:	6863      	ldr	r3, [r4, #4]
 8036668:	60a3      	str	r3, [r4, #8]
 803666a:	2b00      	cmp	r3, #0
 803666c:	db03      	blt.n	8036676 <_printf_i+0xe6>
 803666e:	2204      	movs	r2, #4
 8036670:	6821      	ldr	r1, [r4, #0]
 8036672:	4391      	bics	r1, r2
 8036674:	6021      	str	r1, [r4, #0]
 8036676:	2d00      	cmp	r5, #0
 8036678:	d102      	bne.n	8036680 <_printf_i+0xf0>
 803667a:	9e04      	ldr	r6, [sp, #16]
 803667c:	2b00      	cmp	r3, #0
 803667e:	d00c      	beq.n	803669a <_printf_i+0x10a>
 8036680:	9e04      	ldr	r6, [sp, #16]
 8036682:	0028      	movs	r0, r5
 8036684:	0039      	movs	r1, r7
 8036686:	f7f9 fdcf 	bl	8030228 <__aeabi_uidivmod>
 803668a:	9b03      	ldr	r3, [sp, #12]
 803668c:	3e01      	subs	r6, #1
 803668e:	5c5b      	ldrb	r3, [r3, r1]
 8036690:	7033      	strb	r3, [r6, #0]
 8036692:	002b      	movs	r3, r5
 8036694:	0005      	movs	r5, r0
 8036696:	429f      	cmp	r7, r3
 8036698:	d9f3      	bls.n	8036682 <_printf_i+0xf2>
 803669a:	2f08      	cmp	r7, #8
 803669c:	d109      	bne.n	80366b2 <_printf_i+0x122>
 803669e:	6823      	ldr	r3, [r4, #0]
 80366a0:	07db      	lsls	r3, r3, #31
 80366a2:	d506      	bpl.n	80366b2 <_printf_i+0x122>
 80366a4:	6863      	ldr	r3, [r4, #4]
 80366a6:	6922      	ldr	r2, [r4, #16]
 80366a8:	4293      	cmp	r3, r2
 80366aa:	dc02      	bgt.n	80366b2 <_printf_i+0x122>
 80366ac:	2330      	movs	r3, #48	; 0x30
 80366ae:	3e01      	subs	r6, #1
 80366b0:	7033      	strb	r3, [r6, #0]
 80366b2:	9b04      	ldr	r3, [sp, #16]
 80366b4:	1b9b      	subs	r3, r3, r6
 80366b6:	6123      	str	r3, [r4, #16]
 80366b8:	9b07      	ldr	r3, [sp, #28]
 80366ba:	0021      	movs	r1, r4
 80366bc:	9300      	str	r3, [sp, #0]
 80366be:	9805      	ldr	r0, [sp, #20]
 80366c0:	9b06      	ldr	r3, [sp, #24]
 80366c2:	aa09      	add	r2, sp, #36	; 0x24
 80366c4:	f7ff fef5 	bl	80364b2 <_printf_common>
 80366c8:	1c43      	adds	r3, r0, #1
 80366ca:	d14c      	bne.n	8036766 <_printf_i+0x1d6>
 80366cc:	2001      	movs	r0, #1
 80366ce:	4240      	negs	r0, r0
 80366d0:	b00b      	add	sp, #44	; 0x2c
 80366d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80366d4:	3145      	adds	r1, #69	; 0x45
 80366d6:	700a      	strb	r2, [r1, #0]
 80366d8:	4a34      	ldr	r2, [pc, #208]	; (80367ac <_printf_i+0x21c>)
 80366da:	9203      	str	r2, [sp, #12]
 80366dc:	681a      	ldr	r2, [r3, #0]
 80366de:	6821      	ldr	r1, [r4, #0]
 80366e0:	ca20      	ldmia	r2!, {r5}
 80366e2:	601a      	str	r2, [r3, #0]
 80366e4:	0608      	lsls	r0, r1, #24
 80366e6:	d516      	bpl.n	8036716 <_printf_i+0x186>
 80366e8:	07cb      	lsls	r3, r1, #31
 80366ea:	d502      	bpl.n	80366f2 <_printf_i+0x162>
 80366ec:	2320      	movs	r3, #32
 80366ee:	4319      	orrs	r1, r3
 80366f0:	6021      	str	r1, [r4, #0]
 80366f2:	2710      	movs	r7, #16
 80366f4:	2d00      	cmp	r5, #0
 80366f6:	d1b2      	bne.n	803665e <_printf_i+0xce>
 80366f8:	2320      	movs	r3, #32
 80366fa:	6822      	ldr	r2, [r4, #0]
 80366fc:	439a      	bics	r2, r3
 80366fe:	6022      	str	r2, [r4, #0]
 8036700:	e7ad      	b.n	803665e <_printf_i+0xce>
 8036702:	2220      	movs	r2, #32
 8036704:	6809      	ldr	r1, [r1, #0]
 8036706:	430a      	orrs	r2, r1
 8036708:	6022      	str	r2, [r4, #0]
 803670a:	0022      	movs	r2, r4
 803670c:	2178      	movs	r1, #120	; 0x78
 803670e:	3245      	adds	r2, #69	; 0x45
 8036710:	7011      	strb	r1, [r2, #0]
 8036712:	4a27      	ldr	r2, [pc, #156]	; (80367b0 <_printf_i+0x220>)
 8036714:	e7e1      	b.n	80366da <_printf_i+0x14a>
 8036716:	0648      	lsls	r0, r1, #25
 8036718:	d5e6      	bpl.n	80366e8 <_printf_i+0x158>
 803671a:	b2ad      	uxth	r5, r5
 803671c:	e7e4      	b.n	80366e8 <_printf_i+0x158>
 803671e:	681a      	ldr	r2, [r3, #0]
 8036720:	680d      	ldr	r5, [r1, #0]
 8036722:	1d10      	adds	r0, r2, #4
 8036724:	6949      	ldr	r1, [r1, #20]
 8036726:	6018      	str	r0, [r3, #0]
 8036728:	6813      	ldr	r3, [r2, #0]
 803672a:	062e      	lsls	r6, r5, #24
 803672c:	d501      	bpl.n	8036732 <_printf_i+0x1a2>
 803672e:	6019      	str	r1, [r3, #0]
 8036730:	e002      	b.n	8036738 <_printf_i+0x1a8>
 8036732:	066d      	lsls	r5, r5, #25
 8036734:	d5fb      	bpl.n	803672e <_printf_i+0x19e>
 8036736:	8019      	strh	r1, [r3, #0]
 8036738:	2300      	movs	r3, #0
 803673a:	9e04      	ldr	r6, [sp, #16]
 803673c:	6123      	str	r3, [r4, #16]
 803673e:	e7bb      	b.n	80366b8 <_printf_i+0x128>
 8036740:	681a      	ldr	r2, [r3, #0]
 8036742:	1d11      	adds	r1, r2, #4
 8036744:	6019      	str	r1, [r3, #0]
 8036746:	6816      	ldr	r6, [r2, #0]
 8036748:	2100      	movs	r1, #0
 803674a:	0030      	movs	r0, r6
 803674c:	6862      	ldr	r2, [r4, #4]
 803674e:	f000 f853 	bl	80367f8 <memchr>
 8036752:	2800      	cmp	r0, #0
 8036754:	d001      	beq.n	803675a <_printf_i+0x1ca>
 8036756:	1b80      	subs	r0, r0, r6
 8036758:	6060      	str	r0, [r4, #4]
 803675a:	6863      	ldr	r3, [r4, #4]
 803675c:	6123      	str	r3, [r4, #16]
 803675e:	2300      	movs	r3, #0
 8036760:	9a04      	ldr	r2, [sp, #16]
 8036762:	7013      	strb	r3, [r2, #0]
 8036764:	e7a8      	b.n	80366b8 <_printf_i+0x128>
 8036766:	6923      	ldr	r3, [r4, #16]
 8036768:	0032      	movs	r2, r6
 803676a:	9906      	ldr	r1, [sp, #24]
 803676c:	9805      	ldr	r0, [sp, #20]
 803676e:	9d07      	ldr	r5, [sp, #28]
 8036770:	47a8      	blx	r5
 8036772:	1c43      	adds	r3, r0, #1
 8036774:	d0aa      	beq.n	80366cc <_printf_i+0x13c>
 8036776:	6823      	ldr	r3, [r4, #0]
 8036778:	079b      	lsls	r3, r3, #30
 803677a:	d415      	bmi.n	80367a8 <_printf_i+0x218>
 803677c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803677e:	68e0      	ldr	r0, [r4, #12]
 8036780:	4298      	cmp	r0, r3
 8036782:	daa5      	bge.n	80366d0 <_printf_i+0x140>
 8036784:	0018      	movs	r0, r3
 8036786:	e7a3      	b.n	80366d0 <_printf_i+0x140>
 8036788:	0022      	movs	r2, r4
 803678a:	2301      	movs	r3, #1
 803678c:	9906      	ldr	r1, [sp, #24]
 803678e:	9805      	ldr	r0, [sp, #20]
 8036790:	9e07      	ldr	r6, [sp, #28]
 8036792:	3219      	adds	r2, #25
 8036794:	47b0      	blx	r6
 8036796:	1c43      	adds	r3, r0, #1
 8036798:	d098      	beq.n	80366cc <_printf_i+0x13c>
 803679a:	3501      	adds	r5, #1
 803679c:	68e3      	ldr	r3, [r4, #12]
 803679e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80367a0:	1a9b      	subs	r3, r3, r2
 80367a2:	42ab      	cmp	r3, r5
 80367a4:	dcf0      	bgt.n	8036788 <_printf_i+0x1f8>
 80367a6:	e7e9      	b.n	803677c <_printf_i+0x1ec>
 80367a8:	2500      	movs	r5, #0
 80367aa:	e7f7      	b.n	803679c <_printf_i+0x20c>
 80367ac:	080373ac 	.word	0x080373ac
 80367b0:	080373bd 	.word	0x080373bd

080367b4 <siprintf>:
 80367b4:	b40e      	push	{r1, r2, r3}
 80367b6:	b500      	push	{lr}
 80367b8:	490b      	ldr	r1, [pc, #44]	; (80367e8 <siprintf+0x34>)
 80367ba:	b09c      	sub	sp, #112	; 0x70
 80367bc:	ab1d      	add	r3, sp, #116	; 0x74
 80367be:	9002      	str	r0, [sp, #8]
 80367c0:	9006      	str	r0, [sp, #24]
 80367c2:	9107      	str	r1, [sp, #28]
 80367c4:	9104      	str	r1, [sp, #16]
 80367c6:	4809      	ldr	r0, [pc, #36]	; (80367ec <siprintf+0x38>)
 80367c8:	4909      	ldr	r1, [pc, #36]	; (80367f0 <siprintf+0x3c>)
 80367ca:	cb04      	ldmia	r3!, {r2}
 80367cc:	9105      	str	r1, [sp, #20]
 80367ce:	6800      	ldr	r0, [r0, #0]
 80367d0:	a902      	add	r1, sp, #8
 80367d2:	9301      	str	r3, [sp, #4]
 80367d4:	f000 f9a2 	bl	8036b1c <_svfiprintf_r>
 80367d8:	2300      	movs	r3, #0
 80367da:	9a02      	ldr	r2, [sp, #8]
 80367dc:	7013      	strb	r3, [r2, #0]
 80367de:	b01c      	add	sp, #112	; 0x70
 80367e0:	bc08      	pop	{r3}
 80367e2:	b003      	add	sp, #12
 80367e4:	4718      	bx	r3
 80367e6:	46c0      	nop			; (mov r8, r8)
 80367e8:	7fffffff 	.word	0x7fffffff
 80367ec:	2000c148 	.word	0x2000c148
 80367f0:	ffff0208 	.word	0xffff0208

080367f4 <__retarget_lock_acquire_recursive>:
 80367f4:	4770      	bx	lr

080367f6 <__retarget_lock_release_recursive>:
 80367f6:	4770      	bx	lr

080367f8 <memchr>:
 80367f8:	b2c9      	uxtb	r1, r1
 80367fa:	1882      	adds	r2, r0, r2
 80367fc:	4290      	cmp	r0, r2
 80367fe:	d101      	bne.n	8036804 <memchr+0xc>
 8036800:	2000      	movs	r0, #0
 8036802:	4770      	bx	lr
 8036804:	7803      	ldrb	r3, [r0, #0]
 8036806:	428b      	cmp	r3, r1
 8036808:	d0fb      	beq.n	8036802 <memchr+0xa>
 803680a:	3001      	adds	r0, #1
 803680c:	e7f6      	b.n	80367fc <memchr+0x4>

0803680e <memmove>:
 803680e:	b510      	push	{r4, lr}
 8036810:	4288      	cmp	r0, r1
 8036812:	d902      	bls.n	803681a <memmove+0xc>
 8036814:	188b      	adds	r3, r1, r2
 8036816:	4298      	cmp	r0, r3
 8036818:	d303      	bcc.n	8036822 <memmove+0x14>
 803681a:	2300      	movs	r3, #0
 803681c:	e007      	b.n	803682e <memmove+0x20>
 803681e:	5c8b      	ldrb	r3, [r1, r2]
 8036820:	5483      	strb	r3, [r0, r2]
 8036822:	3a01      	subs	r2, #1
 8036824:	d2fb      	bcs.n	803681e <memmove+0x10>
 8036826:	bd10      	pop	{r4, pc}
 8036828:	5ccc      	ldrb	r4, [r1, r3]
 803682a:	54c4      	strb	r4, [r0, r3]
 803682c:	3301      	adds	r3, #1
 803682e:	429a      	cmp	r2, r3
 8036830:	d1fa      	bne.n	8036828 <memmove+0x1a>
 8036832:	e7f8      	b.n	8036826 <memmove+0x18>

08036834 <_free_r>:
 8036834:	b570      	push	{r4, r5, r6, lr}
 8036836:	0005      	movs	r5, r0
 8036838:	2900      	cmp	r1, #0
 803683a:	d010      	beq.n	803685e <_free_r+0x2a>
 803683c:	1f0c      	subs	r4, r1, #4
 803683e:	6823      	ldr	r3, [r4, #0]
 8036840:	2b00      	cmp	r3, #0
 8036842:	da00      	bge.n	8036846 <_free_r+0x12>
 8036844:	18e4      	adds	r4, r4, r3
 8036846:	0028      	movs	r0, r5
 8036848:	f000 fa7a 	bl	8036d40 <__malloc_lock>
 803684c:	4a1d      	ldr	r2, [pc, #116]	; (80368c4 <_free_r+0x90>)
 803684e:	6813      	ldr	r3, [r2, #0]
 8036850:	2b00      	cmp	r3, #0
 8036852:	d105      	bne.n	8036860 <_free_r+0x2c>
 8036854:	6063      	str	r3, [r4, #4]
 8036856:	6014      	str	r4, [r2, #0]
 8036858:	0028      	movs	r0, r5
 803685a:	f000 fa79 	bl	8036d50 <__malloc_unlock>
 803685e:	bd70      	pop	{r4, r5, r6, pc}
 8036860:	42a3      	cmp	r3, r4
 8036862:	d908      	bls.n	8036876 <_free_r+0x42>
 8036864:	6821      	ldr	r1, [r4, #0]
 8036866:	1860      	adds	r0, r4, r1
 8036868:	4283      	cmp	r3, r0
 803686a:	d1f3      	bne.n	8036854 <_free_r+0x20>
 803686c:	6818      	ldr	r0, [r3, #0]
 803686e:	685b      	ldr	r3, [r3, #4]
 8036870:	1841      	adds	r1, r0, r1
 8036872:	6021      	str	r1, [r4, #0]
 8036874:	e7ee      	b.n	8036854 <_free_r+0x20>
 8036876:	001a      	movs	r2, r3
 8036878:	685b      	ldr	r3, [r3, #4]
 803687a:	2b00      	cmp	r3, #0
 803687c:	d001      	beq.n	8036882 <_free_r+0x4e>
 803687e:	42a3      	cmp	r3, r4
 8036880:	d9f9      	bls.n	8036876 <_free_r+0x42>
 8036882:	6811      	ldr	r1, [r2, #0]
 8036884:	1850      	adds	r0, r2, r1
 8036886:	42a0      	cmp	r0, r4
 8036888:	d10b      	bne.n	80368a2 <_free_r+0x6e>
 803688a:	6820      	ldr	r0, [r4, #0]
 803688c:	1809      	adds	r1, r1, r0
 803688e:	1850      	adds	r0, r2, r1
 8036890:	6011      	str	r1, [r2, #0]
 8036892:	4283      	cmp	r3, r0
 8036894:	d1e0      	bne.n	8036858 <_free_r+0x24>
 8036896:	6818      	ldr	r0, [r3, #0]
 8036898:	685b      	ldr	r3, [r3, #4]
 803689a:	1841      	adds	r1, r0, r1
 803689c:	6011      	str	r1, [r2, #0]
 803689e:	6053      	str	r3, [r2, #4]
 80368a0:	e7da      	b.n	8036858 <_free_r+0x24>
 80368a2:	42a0      	cmp	r0, r4
 80368a4:	d902      	bls.n	80368ac <_free_r+0x78>
 80368a6:	230c      	movs	r3, #12
 80368a8:	602b      	str	r3, [r5, #0]
 80368aa:	e7d5      	b.n	8036858 <_free_r+0x24>
 80368ac:	6821      	ldr	r1, [r4, #0]
 80368ae:	1860      	adds	r0, r4, r1
 80368b0:	4283      	cmp	r3, r0
 80368b2:	d103      	bne.n	80368bc <_free_r+0x88>
 80368b4:	6818      	ldr	r0, [r3, #0]
 80368b6:	685b      	ldr	r3, [r3, #4]
 80368b8:	1841      	adds	r1, r0, r1
 80368ba:	6021      	str	r1, [r4, #0]
 80368bc:	6063      	str	r3, [r4, #4]
 80368be:	6054      	str	r4, [r2, #4]
 80368c0:	e7ca      	b.n	8036858 <_free_r+0x24>
 80368c2:	46c0      	nop			; (mov r8, r8)
 80368c4:	2000e0ec 	.word	0x2000e0ec

080368c8 <sbrk_aligned>:
 80368c8:	b570      	push	{r4, r5, r6, lr}
 80368ca:	4e0f      	ldr	r6, [pc, #60]	; (8036908 <sbrk_aligned+0x40>)
 80368cc:	000d      	movs	r5, r1
 80368ce:	6831      	ldr	r1, [r6, #0]
 80368d0:	0004      	movs	r4, r0
 80368d2:	2900      	cmp	r1, #0
 80368d4:	d102      	bne.n	80368dc <sbrk_aligned+0x14>
 80368d6:	f000 fa21 	bl	8036d1c <_sbrk_r>
 80368da:	6030      	str	r0, [r6, #0]
 80368dc:	0029      	movs	r1, r5
 80368de:	0020      	movs	r0, r4
 80368e0:	f000 fa1c 	bl	8036d1c <_sbrk_r>
 80368e4:	1c43      	adds	r3, r0, #1
 80368e6:	d00a      	beq.n	80368fe <sbrk_aligned+0x36>
 80368e8:	2303      	movs	r3, #3
 80368ea:	1cc5      	adds	r5, r0, #3
 80368ec:	439d      	bics	r5, r3
 80368ee:	42a8      	cmp	r0, r5
 80368f0:	d007      	beq.n	8036902 <sbrk_aligned+0x3a>
 80368f2:	1a29      	subs	r1, r5, r0
 80368f4:	0020      	movs	r0, r4
 80368f6:	f000 fa11 	bl	8036d1c <_sbrk_r>
 80368fa:	1c43      	adds	r3, r0, #1
 80368fc:	d101      	bne.n	8036902 <sbrk_aligned+0x3a>
 80368fe:	2501      	movs	r5, #1
 8036900:	426d      	negs	r5, r5
 8036902:	0028      	movs	r0, r5
 8036904:	bd70      	pop	{r4, r5, r6, pc}
 8036906:	46c0      	nop			; (mov r8, r8)
 8036908:	2000e0f0 	.word	0x2000e0f0

0803690c <_malloc_r>:
 803690c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803690e:	2203      	movs	r2, #3
 8036910:	1ccb      	adds	r3, r1, #3
 8036912:	4393      	bics	r3, r2
 8036914:	3308      	adds	r3, #8
 8036916:	0006      	movs	r6, r0
 8036918:	001f      	movs	r7, r3
 803691a:	2b0c      	cmp	r3, #12
 803691c:	d232      	bcs.n	8036984 <_malloc_r+0x78>
 803691e:	270c      	movs	r7, #12
 8036920:	42b9      	cmp	r1, r7
 8036922:	d831      	bhi.n	8036988 <_malloc_r+0x7c>
 8036924:	0030      	movs	r0, r6
 8036926:	f000 fa0b 	bl	8036d40 <__malloc_lock>
 803692a:	4d32      	ldr	r5, [pc, #200]	; (80369f4 <_malloc_r+0xe8>)
 803692c:	682b      	ldr	r3, [r5, #0]
 803692e:	001c      	movs	r4, r3
 8036930:	2c00      	cmp	r4, #0
 8036932:	d12e      	bne.n	8036992 <_malloc_r+0x86>
 8036934:	0039      	movs	r1, r7
 8036936:	0030      	movs	r0, r6
 8036938:	f7ff ffc6 	bl	80368c8 <sbrk_aligned>
 803693c:	0004      	movs	r4, r0
 803693e:	1c43      	adds	r3, r0, #1
 8036940:	d11e      	bne.n	8036980 <_malloc_r+0x74>
 8036942:	682c      	ldr	r4, [r5, #0]
 8036944:	0025      	movs	r5, r4
 8036946:	2d00      	cmp	r5, #0
 8036948:	d14a      	bne.n	80369e0 <_malloc_r+0xd4>
 803694a:	6823      	ldr	r3, [r4, #0]
 803694c:	0029      	movs	r1, r5
 803694e:	18e3      	adds	r3, r4, r3
 8036950:	0030      	movs	r0, r6
 8036952:	9301      	str	r3, [sp, #4]
 8036954:	f000 f9e2 	bl	8036d1c <_sbrk_r>
 8036958:	9b01      	ldr	r3, [sp, #4]
 803695a:	4283      	cmp	r3, r0
 803695c:	d143      	bne.n	80369e6 <_malloc_r+0xda>
 803695e:	6823      	ldr	r3, [r4, #0]
 8036960:	3703      	adds	r7, #3
 8036962:	1aff      	subs	r7, r7, r3
 8036964:	2303      	movs	r3, #3
 8036966:	439f      	bics	r7, r3
 8036968:	3708      	adds	r7, #8
 803696a:	2f0c      	cmp	r7, #12
 803696c:	d200      	bcs.n	8036970 <_malloc_r+0x64>
 803696e:	270c      	movs	r7, #12
 8036970:	0039      	movs	r1, r7
 8036972:	0030      	movs	r0, r6
 8036974:	f7ff ffa8 	bl	80368c8 <sbrk_aligned>
 8036978:	1c43      	adds	r3, r0, #1
 803697a:	d034      	beq.n	80369e6 <_malloc_r+0xda>
 803697c:	6823      	ldr	r3, [r4, #0]
 803697e:	19df      	adds	r7, r3, r7
 8036980:	6027      	str	r7, [r4, #0]
 8036982:	e013      	b.n	80369ac <_malloc_r+0xa0>
 8036984:	2b00      	cmp	r3, #0
 8036986:	dacb      	bge.n	8036920 <_malloc_r+0x14>
 8036988:	230c      	movs	r3, #12
 803698a:	2500      	movs	r5, #0
 803698c:	6033      	str	r3, [r6, #0]
 803698e:	0028      	movs	r0, r5
 8036990:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8036992:	6822      	ldr	r2, [r4, #0]
 8036994:	1bd1      	subs	r1, r2, r7
 8036996:	d420      	bmi.n	80369da <_malloc_r+0xce>
 8036998:	290b      	cmp	r1, #11
 803699a:	d917      	bls.n	80369cc <_malloc_r+0xc0>
 803699c:	19e2      	adds	r2, r4, r7
 803699e:	6027      	str	r7, [r4, #0]
 80369a0:	42a3      	cmp	r3, r4
 80369a2:	d111      	bne.n	80369c8 <_malloc_r+0xbc>
 80369a4:	602a      	str	r2, [r5, #0]
 80369a6:	6863      	ldr	r3, [r4, #4]
 80369a8:	6011      	str	r1, [r2, #0]
 80369aa:	6053      	str	r3, [r2, #4]
 80369ac:	0030      	movs	r0, r6
 80369ae:	0025      	movs	r5, r4
 80369b0:	f000 f9ce 	bl	8036d50 <__malloc_unlock>
 80369b4:	2207      	movs	r2, #7
 80369b6:	350b      	adds	r5, #11
 80369b8:	1d23      	adds	r3, r4, #4
 80369ba:	4395      	bics	r5, r2
 80369bc:	1aea      	subs	r2, r5, r3
 80369be:	429d      	cmp	r5, r3
 80369c0:	d0e5      	beq.n	803698e <_malloc_r+0x82>
 80369c2:	1b5b      	subs	r3, r3, r5
 80369c4:	50a3      	str	r3, [r4, r2]
 80369c6:	e7e2      	b.n	803698e <_malloc_r+0x82>
 80369c8:	605a      	str	r2, [r3, #4]
 80369ca:	e7ec      	b.n	80369a6 <_malloc_r+0x9a>
 80369cc:	6862      	ldr	r2, [r4, #4]
 80369ce:	42a3      	cmp	r3, r4
 80369d0:	d101      	bne.n	80369d6 <_malloc_r+0xca>
 80369d2:	602a      	str	r2, [r5, #0]
 80369d4:	e7ea      	b.n	80369ac <_malloc_r+0xa0>
 80369d6:	605a      	str	r2, [r3, #4]
 80369d8:	e7e8      	b.n	80369ac <_malloc_r+0xa0>
 80369da:	0023      	movs	r3, r4
 80369dc:	6864      	ldr	r4, [r4, #4]
 80369de:	e7a7      	b.n	8036930 <_malloc_r+0x24>
 80369e0:	002c      	movs	r4, r5
 80369e2:	686d      	ldr	r5, [r5, #4]
 80369e4:	e7af      	b.n	8036946 <_malloc_r+0x3a>
 80369e6:	230c      	movs	r3, #12
 80369e8:	0030      	movs	r0, r6
 80369ea:	6033      	str	r3, [r6, #0]
 80369ec:	f000 f9b0 	bl	8036d50 <__malloc_unlock>
 80369f0:	e7cd      	b.n	803698e <_malloc_r+0x82>
 80369f2:	46c0      	nop			; (mov r8, r8)
 80369f4:	2000e0ec 	.word	0x2000e0ec

080369f8 <_realloc_r>:
 80369f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80369fa:	0007      	movs	r7, r0
 80369fc:	000e      	movs	r6, r1
 80369fe:	0014      	movs	r4, r2
 8036a00:	2900      	cmp	r1, #0
 8036a02:	d105      	bne.n	8036a10 <_realloc_r+0x18>
 8036a04:	0011      	movs	r1, r2
 8036a06:	f7ff ff81 	bl	803690c <_malloc_r>
 8036a0a:	0005      	movs	r5, r0
 8036a0c:	0028      	movs	r0, r5
 8036a0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8036a10:	2a00      	cmp	r2, #0
 8036a12:	d103      	bne.n	8036a1c <_realloc_r+0x24>
 8036a14:	f7ff ff0e 	bl	8036834 <_free_r>
 8036a18:	0025      	movs	r5, r4
 8036a1a:	e7f7      	b.n	8036a0c <_realloc_r+0x14>
 8036a1c:	f000 f9a0 	bl	8036d60 <_malloc_usable_size_r>
 8036a20:	9001      	str	r0, [sp, #4]
 8036a22:	4284      	cmp	r4, r0
 8036a24:	d803      	bhi.n	8036a2e <_realloc_r+0x36>
 8036a26:	0035      	movs	r5, r6
 8036a28:	0843      	lsrs	r3, r0, #1
 8036a2a:	42a3      	cmp	r3, r4
 8036a2c:	d3ee      	bcc.n	8036a0c <_realloc_r+0x14>
 8036a2e:	0021      	movs	r1, r4
 8036a30:	0038      	movs	r0, r7
 8036a32:	f7ff ff6b 	bl	803690c <_malloc_r>
 8036a36:	1e05      	subs	r5, r0, #0
 8036a38:	d0e8      	beq.n	8036a0c <_realloc_r+0x14>
 8036a3a:	9b01      	ldr	r3, [sp, #4]
 8036a3c:	0022      	movs	r2, r4
 8036a3e:	429c      	cmp	r4, r3
 8036a40:	d900      	bls.n	8036a44 <_realloc_r+0x4c>
 8036a42:	001a      	movs	r2, r3
 8036a44:	0031      	movs	r1, r6
 8036a46:	0028      	movs	r0, r5
 8036a48:	f7ff fd2a 	bl	80364a0 <memcpy>
 8036a4c:	0031      	movs	r1, r6
 8036a4e:	0038      	movs	r0, r7
 8036a50:	f7ff fef0 	bl	8036834 <_free_r>
 8036a54:	e7da      	b.n	8036a0c <_realloc_r+0x14>
	...

08036a58 <__ssputs_r>:
 8036a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8036a5a:	688e      	ldr	r6, [r1, #8]
 8036a5c:	b085      	sub	sp, #20
 8036a5e:	0007      	movs	r7, r0
 8036a60:	000c      	movs	r4, r1
 8036a62:	9203      	str	r2, [sp, #12]
 8036a64:	9301      	str	r3, [sp, #4]
 8036a66:	429e      	cmp	r6, r3
 8036a68:	d83c      	bhi.n	8036ae4 <__ssputs_r+0x8c>
 8036a6a:	2390      	movs	r3, #144	; 0x90
 8036a6c:	898a      	ldrh	r2, [r1, #12]
 8036a6e:	00db      	lsls	r3, r3, #3
 8036a70:	421a      	tst	r2, r3
 8036a72:	d034      	beq.n	8036ade <__ssputs_r+0x86>
 8036a74:	6909      	ldr	r1, [r1, #16]
 8036a76:	6823      	ldr	r3, [r4, #0]
 8036a78:	6960      	ldr	r0, [r4, #20]
 8036a7a:	1a5b      	subs	r3, r3, r1
 8036a7c:	9302      	str	r3, [sp, #8]
 8036a7e:	2303      	movs	r3, #3
 8036a80:	4343      	muls	r3, r0
 8036a82:	0fdd      	lsrs	r5, r3, #31
 8036a84:	18ed      	adds	r5, r5, r3
 8036a86:	9b01      	ldr	r3, [sp, #4]
 8036a88:	9802      	ldr	r0, [sp, #8]
 8036a8a:	3301      	adds	r3, #1
 8036a8c:	181b      	adds	r3, r3, r0
 8036a8e:	106d      	asrs	r5, r5, #1
 8036a90:	42ab      	cmp	r3, r5
 8036a92:	d900      	bls.n	8036a96 <__ssputs_r+0x3e>
 8036a94:	001d      	movs	r5, r3
 8036a96:	0553      	lsls	r3, r2, #21
 8036a98:	d532      	bpl.n	8036b00 <__ssputs_r+0xa8>
 8036a9a:	0029      	movs	r1, r5
 8036a9c:	0038      	movs	r0, r7
 8036a9e:	f7ff ff35 	bl	803690c <_malloc_r>
 8036aa2:	1e06      	subs	r6, r0, #0
 8036aa4:	d109      	bne.n	8036aba <__ssputs_r+0x62>
 8036aa6:	230c      	movs	r3, #12
 8036aa8:	603b      	str	r3, [r7, #0]
 8036aaa:	2340      	movs	r3, #64	; 0x40
 8036aac:	2001      	movs	r0, #1
 8036aae:	89a2      	ldrh	r2, [r4, #12]
 8036ab0:	4240      	negs	r0, r0
 8036ab2:	4313      	orrs	r3, r2
 8036ab4:	81a3      	strh	r3, [r4, #12]
 8036ab6:	b005      	add	sp, #20
 8036ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8036aba:	9a02      	ldr	r2, [sp, #8]
 8036abc:	6921      	ldr	r1, [r4, #16]
 8036abe:	f7ff fcef 	bl	80364a0 <memcpy>
 8036ac2:	89a3      	ldrh	r3, [r4, #12]
 8036ac4:	4a14      	ldr	r2, [pc, #80]	; (8036b18 <__ssputs_r+0xc0>)
 8036ac6:	401a      	ands	r2, r3
 8036ac8:	2380      	movs	r3, #128	; 0x80
 8036aca:	4313      	orrs	r3, r2
 8036acc:	81a3      	strh	r3, [r4, #12]
 8036ace:	9b02      	ldr	r3, [sp, #8]
 8036ad0:	6126      	str	r6, [r4, #16]
 8036ad2:	18f6      	adds	r6, r6, r3
 8036ad4:	6026      	str	r6, [r4, #0]
 8036ad6:	6165      	str	r5, [r4, #20]
 8036ad8:	9e01      	ldr	r6, [sp, #4]
 8036ada:	1aed      	subs	r5, r5, r3
 8036adc:	60a5      	str	r5, [r4, #8]
 8036ade:	9b01      	ldr	r3, [sp, #4]
 8036ae0:	429e      	cmp	r6, r3
 8036ae2:	d900      	bls.n	8036ae6 <__ssputs_r+0x8e>
 8036ae4:	9e01      	ldr	r6, [sp, #4]
 8036ae6:	0032      	movs	r2, r6
 8036ae8:	9903      	ldr	r1, [sp, #12]
 8036aea:	6820      	ldr	r0, [r4, #0]
 8036aec:	f7ff fe8f 	bl	803680e <memmove>
 8036af0:	68a3      	ldr	r3, [r4, #8]
 8036af2:	2000      	movs	r0, #0
 8036af4:	1b9b      	subs	r3, r3, r6
 8036af6:	60a3      	str	r3, [r4, #8]
 8036af8:	6823      	ldr	r3, [r4, #0]
 8036afa:	199e      	adds	r6, r3, r6
 8036afc:	6026      	str	r6, [r4, #0]
 8036afe:	e7da      	b.n	8036ab6 <__ssputs_r+0x5e>
 8036b00:	002a      	movs	r2, r5
 8036b02:	0038      	movs	r0, r7
 8036b04:	f7ff ff78 	bl	80369f8 <_realloc_r>
 8036b08:	1e06      	subs	r6, r0, #0
 8036b0a:	d1e0      	bne.n	8036ace <__ssputs_r+0x76>
 8036b0c:	0038      	movs	r0, r7
 8036b0e:	6921      	ldr	r1, [r4, #16]
 8036b10:	f7ff fe90 	bl	8036834 <_free_r>
 8036b14:	e7c7      	b.n	8036aa6 <__ssputs_r+0x4e>
 8036b16:	46c0      	nop			; (mov r8, r8)
 8036b18:	fffffb7f 	.word	0xfffffb7f

08036b1c <_svfiprintf_r>:
 8036b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8036b1e:	b0a1      	sub	sp, #132	; 0x84
 8036b20:	9003      	str	r0, [sp, #12]
 8036b22:	001d      	movs	r5, r3
 8036b24:	898b      	ldrh	r3, [r1, #12]
 8036b26:	000f      	movs	r7, r1
 8036b28:	0016      	movs	r6, r2
 8036b2a:	061b      	lsls	r3, r3, #24
 8036b2c:	d511      	bpl.n	8036b52 <_svfiprintf_r+0x36>
 8036b2e:	690b      	ldr	r3, [r1, #16]
 8036b30:	2b00      	cmp	r3, #0
 8036b32:	d10e      	bne.n	8036b52 <_svfiprintf_r+0x36>
 8036b34:	2140      	movs	r1, #64	; 0x40
 8036b36:	f7ff fee9 	bl	803690c <_malloc_r>
 8036b3a:	6038      	str	r0, [r7, #0]
 8036b3c:	6138      	str	r0, [r7, #16]
 8036b3e:	2800      	cmp	r0, #0
 8036b40:	d105      	bne.n	8036b4e <_svfiprintf_r+0x32>
 8036b42:	230c      	movs	r3, #12
 8036b44:	9a03      	ldr	r2, [sp, #12]
 8036b46:	3801      	subs	r0, #1
 8036b48:	6013      	str	r3, [r2, #0]
 8036b4a:	b021      	add	sp, #132	; 0x84
 8036b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8036b4e:	2340      	movs	r3, #64	; 0x40
 8036b50:	617b      	str	r3, [r7, #20]
 8036b52:	2300      	movs	r3, #0
 8036b54:	ac08      	add	r4, sp, #32
 8036b56:	6163      	str	r3, [r4, #20]
 8036b58:	3320      	adds	r3, #32
 8036b5a:	7663      	strb	r3, [r4, #25]
 8036b5c:	3310      	adds	r3, #16
 8036b5e:	76a3      	strb	r3, [r4, #26]
 8036b60:	9507      	str	r5, [sp, #28]
 8036b62:	0035      	movs	r5, r6
 8036b64:	782b      	ldrb	r3, [r5, #0]
 8036b66:	2b00      	cmp	r3, #0
 8036b68:	d001      	beq.n	8036b6e <_svfiprintf_r+0x52>
 8036b6a:	2b25      	cmp	r3, #37	; 0x25
 8036b6c:	d147      	bne.n	8036bfe <_svfiprintf_r+0xe2>
 8036b6e:	1bab      	subs	r3, r5, r6
 8036b70:	9305      	str	r3, [sp, #20]
 8036b72:	42b5      	cmp	r5, r6
 8036b74:	d00c      	beq.n	8036b90 <_svfiprintf_r+0x74>
 8036b76:	0032      	movs	r2, r6
 8036b78:	0039      	movs	r1, r7
 8036b7a:	9803      	ldr	r0, [sp, #12]
 8036b7c:	f7ff ff6c 	bl	8036a58 <__ssputs_r>
 8036b80:	1c43      	adds	r3, r0, #1
 8036b82:	d100      	bne.n	8036b86 <_svfiprintf_r+0x6a>
 8036b84:	e0ae      	b.n	8036ce4 <_svfiprintf_r+0x1c8>
 8036b86:	6962      	ldr	r2, [r4, #20]
 8036b88:	9b05      	ldr	r3, [sp, #20]
 8036b8a:	4694      	mov	ip, r2
 8036b8c:	4463      	add	r3, ip
 8036b8e:	6163      	str	r3, [r4, #20]
 8036b90:	782b      	ldrb	r3, [r5, #0]
 8036b92:	2b00      	cmp	r3, #0
 8036b94:	d100      	bne.n	8036b98 <_svfiprintf_r+0x7c>
 8036b96:	e0a5      	b.n	8036ce4 <_svfiprintf_r+0x1c8>
 8036b98:	2201      	movs	r2, #1
 8036b9a:	2300      	movs	r3, #0
 8036b9c:	4252      	negs	r2, r2
 8036b9e:	6062      	str	r2, [r4, #4]
 8036ba0:	a904      	add	r1, sp, #16
 8036ba2:	3254      	adds	r2, #84	; 0x54
 8036ba4:	1852      	adds	r2, r2, r1
 8036ba6:	1c6e      	adds	r6, r5, #1
 8036ba8:	6023      	str	r3, [r4, #0]
 8036baa:	60e3      	str	r3, [r4, #12]
 8036bac:	60a3      	str	r3, [r4, #8]
 8036bae:	7013      	strb	r3, [r2, #0]
 8036bb0:	65a3      	str	r3, [r4, #88]	; 0x58
 8036bb2:	2205      	movs	r2, #5
 8036bb4:	7831      	ldrb	r1, [r6, #0]
 8036bb6:	4854      	ldr	r0, [pc, #336]	; (8036d08 <_svfiprintf_r+0x1ec>)
 8036bb8:	f7ff fe1e 	bl	80367f8 <memchr>
 8036bbc:	1c75      	adds	r5, r6, #1
 8036bbe:	2800      	cmp	r0, #0
 8036bc0:	d11f      	bne.n	8036c02 <_svfiprintf_r+0xe6>
 8036bc2:	6822      	ldr	r2, [r4, #0]
 8036bc4:	06d3      	lsls	r3, r2, #27
 8036bc6:	d504      	bpl.n	8036bd2 <_svfiprintf_r+0xb6>
 8036bc8:	2353      	movs	r3, #83	; 0x53
 8036bca:	a904      	add	r1, sp, #16
 8036bcc:	185b      	adds	r3, r3, r1
 8036bce:	2120      	movs	r1, #32
 8036bd0:	7019      	strb	r1, [r3, #0]
 8036bd2:	0713      	lsls	r3, r2, #28
 8036bd4:	d504      	bpl.n	8036be0 <_svfiprintf_r+0xc4>
 8036bd6:	2353      	movs	r3, #83	; 0x53
 8036bd8:	a904      	add	r1, sp, #16
 8036bda:	185b      	adds	r3, r3, r1
 8036bdc:	212b      	movs	r1, #43	; 0x2b
 8036bde:	7019      	strb	r1, [r3, #0]
 8036be0:	7833      	ldrb	r3, [r6, #0]
 8036be2:	2b2a      	cmp	r3, #42	; 0x2a
 8036be4:	d016      	beq.n	8036c14 <_svfiprintf_r+0xf8>
 8036be6:	0035      	movs	r5, r6
 8036be8:	2100      	movs	r1, #0
 8036bea:	200a      	movs	r0, #10
 8036bec:	68e3      	ldr	r3, [r4, #12]
 8036bee:	782a      	ldrb	r2, [r5, #0]
 8036bf0:	1c6e      	adds	r6, r5, #1
 8036bf2:	3a30      	subs	r2, #48	; 0x30
 8036bf4:	2a09      	cmp	r2, #9
 8036bf6:	d94e      	bls.n	8036c96 <_svfiprintf_r+0x17a>
 8036bf8:	2900      	cmp	r1, #0
 8036bfa:	d111      	bne.n	8036c20 <_svfiprintf_r+0x104>
 8036bfc:	e017      	b.n	8036c2e <_svfiprintf_r+0x112>
 8036bfe:	3501      	adds	r5, #1
 8036c00:	e7b0      	b.n	8036b64 <_svfiprintf_r+0x48>
 8036c02:	4b41      	ldr	r3, [pc, #260]	; (8036d08 <_svfiprintf_r+0x1ec>)
 8036c04:	6822      	ldr	r2, [r4, #0]
 8036c06:	1ac0      	subs	r0, r0, r3
 8036c08:	2301      	movs	r3, #1
 8036c0a:	4083      	lsls	r3, r0
 8036c0c:	4313      	orrs	r3, r2
 8036c0e:	002e      	movs	r6, r5
 8036c10:	6023      	str	r3, [r4, #0]
 8036c12:	e7ce      	b.n	8036bb2 <_svfiprintf_r+0x96>
 8036c14:	9b07      	ldr	r3, [sp, #28]
 8036c16:	1d19      	adds	r1, r3, #4
 8036c18:	681b      	ldr	r3, [r3, #0]
 8036c1a:	9107      	str	r1, [sp, #28]
 8036c1c:	2b00      	cmp	r3, #0
 8036c1e:	db01      	blt.n	8036c24 <_svfiprintf_r+0x108>
 8036c20:	930b      	str	r3, [sp, #44]	; 0x2c
 8036c22:	e004      	b.n	8036c2e <_svfiprintf_r+0x112>
 8036c24:	425b      	negs	r3, r3
 8036c26:	60e3      	str	r3, [r4, #12]
 8036c28:	2302      	movs	r3, #2
 8036c2a:	4313      	orrs	r3, r2
 8036c2c:	6023      	str	r3, [r4, #0]
 8036c2e:	782b      	ldrb	r3, [r5, #0]
 8036c30:	2b2e      	cmp	r3, #46	; 0x2e
 8036c32:	d10a      	bne.n	8036c4a <_svfiprintf_r+0x12e>
 8036c34:	786b      	ldrb	r3, [r5, #1]
 8036c36:	2b2a      	cmp	r3, #42	; 0x2a
 8036c38:	d135      	bne.n	8036ca6 <_svfiprintf_r+0x18a>
 8036c3a:	9b07      	ldr	r3, [sp, #28]
 8036c3c:	3502      	adds	r5, #2
 8036c3e:	1d1a      	adds	r2, r3, #4
 8036c40:	681b      	ldr	r3, [r3, #0]
 8036c42:	9207      	str	r2, [sp, #28]
 8036c44:	2b00      	cmp	r3, #0
 8036c46:	db2b      	blt.n	8036ca0 <_svfiprintf_r+0x184>
 8036c48:	9309      	str	r3, [sp, #36]	; 0x24
 8036c4a:	4e30      	ldr	r6, [pc, #192]	; (8036d0c <_svfiprintf_r+0x1f0>)
 8036c4c:	2203      	movs	r2, #3
 8036c4e:	0030      	movs	r0, r6
 8036c50:	7829      	ldrb	r1, [r5, #0]
 8036c52:	f7ff fdd1 	bl	80367f8 <memchr>
 8036c56:	2800      	cmp	r0, #0
 8036c58:	d006      	beq.n	8036c68 <_svfiprintf_r+0x14c>
 8036c5a:	2340      	movs	r3, #64	; 0x40
 8036c5c:	1b80      	subs	r0, r0, r6
 8036c5e:	4083      	lsls	r3, r0
 8036c60:	6822      	ldr	r2, [r4, #0]
 8036c62:	3501      	adds	r5, #1
 8036c64:	4313      	orrs	r3, r2
 8036c66:	6023      	str	r3, [r4, #0]
 8036c68:	7829      	ldrb	r1, [r5, #0]
 8036c6a:	2206      	movs	r2, #6
 8036c6c:	4828      	ldr	r0, [pc, #160]	; (8036d10 <_svfiprintf_r+0x1f4>)
 8036c6e:	1c6e      	adds	r6, r5, #1
 8036c70:	7621      	strb	r1, [r4, #24]
 8036c72:	f7ff fdc1 	bl	80367f8 <memchr>
 8036c76:	2800      	cmp	r0, #0
 8036c78:	d03c      	beq.n	8036cf4 <_svfiprintf_r+0x1d8>
 8036c7a:	4b26      	ldr	r3, [pc, #152]	; (8036d14 <_svfiprintf_r+0x1f8>)
 8036c7c:	2b00      	cmp	r3, #0
 8036c7e:	d125      	bne.n	8036ccc <_svfiprintf_r+0x1b0>
 8036c80:	2207      	movs	r2, #7
 8036c82:	9b07      	ldr	r3, [sp, #28]
 8036c84:	3307      	adds	r3, #7
 8036c86:	4393      	bics	r3, r2
 8036c88:	3308      	adds	r3, #8
 8036c8a:	9307      	str	r3, [sp, #28]
 8036c8c:	6963      	ldr	r3, [r4, #20]
 8036c8e:	9a04      	ldr	r2, [sp, #16]
 8036c90:	189b      	adds	r3, r3, r2
 8036c92:	6163      	str	r3, [r4, #20]
 8036c94:	e765      	b.n	8036b62 <_svfiprintf_r+0x46>
 8036c96:	4343      	muls	r3, r0
 8036c98:	0035      	movs	r5, r6
 8036c9a:	2101      	movs	r1, #1
 8036c9c:	189b      	adds	r3, r3, r2
 8036c9e:	e7a6      	b.n	8036bee <_svfiprintf_r+0xd2>
 8036ca0:	2301      	movs	r3, #1
 8036ca2:	425b      	negs	r3, r3
 8036ca4:	e7d0      	b.n	8036c48 <_svfiprintf_r+0x12c>
 8036ca6:	2300      	movs	r3, #0
 8036ca8:	200a      	movs	r0, #10
 8036caa:	001a      	movs	r2, r3
 8036cac:	3501      	adds	r5, #1
 8036cae:	6063      	str	r3, [r4, #4]
 8036cb0:	7829      	ldrb	r1, [r5, #0]
 8036cb2:	1c6e      	adds	r6, r5, #1
 8036cb4:	3930      	subs	r1, #48	; 0x30
 8036cb6:	2909      	cmp	r1, #9
 8036cb8:	d903      	bls.n	8036cc2 <_svfiprintf_r+0x1a6>
 8036cba:	2b00      	cmp	r3, #0
 8036cbc:	d0c5      	beq.n	8036c4a <_svfiprintf_r+0x12e>
 8036cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8036cc0:	e7c3      	b.n	8036c4a <_svfiprintf_r+0x12e>
 8036cc2:	4342      	muls	r2, r0
 8036cc4:	0035      	movs	r5, r6
 8036cc6:	2301      	movs	r3, #1
 8036cc8:	1852      	adds	r2, r2, r1
 8036cca:	e7f1      	b.n	8036cb0 <_svfiprintf_r+0x194>
 8036ccc:	ab07      	add	r3, sp, #28
 8036cce:	9300      	str	r3, [sp, #0]
 8036cd0:	003a      	movs	r2, r7
 8036cd2:	0021      	movs	r1, r4
 8036cd4:	4b10      	ldr	r3, [pc, #64]	; (8036d18 <_svfiprintf_r+0x1fc>)
 8036cd6:	9803      	ldr	r0, [sp, #12]
 8036cd8:	e000      	b.n	8036cdc <_svfiprintf_r+0x1c0>
 8036cda:	bf00      	nop
 8036cdc:	9004      	str	r0, [sp, #16]
 8036cde:	9b04      	ldr	r3, [sp, #16]
 8036ce0:	3301      	adds	r3, #1
 8036ce2:	d1d3      	bne.n	8036c8c <_svfiprintf_r+0x170>
 8036ce4:	89bb      	ldrh	r3, [r7, #12]
 8036ce6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8036ce8:	065b      	lsls	r3, r3, #25
 8036cea:	d400      	bmi.n	8036cee <_svfiprintf_r+0x1d2>
 8036cec:	e72d      	b.n	8036b4a <_svfiprintf_r+0x2e>
 8036cee:	2001      	movs	r0, #1
 8036cf0:	4240      	negs	r0, r0
 8036cf2:	e72a      	b.n	8036b4a <_svfiprintf_r+0x2e>
 8036cf4:	ab07      	add	r3, sp, #28
 8036cf6:	9300      	str	r3, [sp, #0]
 8036cf8:	003a      	movs	r2, r7
 8036cfa:	0021      	movs	r1, r4
 8036cfc:	4b06      	ldr	r3, [pc, #24]	; (8036d18 <_svfiprintf_r+0x1fc>)
 8036cfe:	9803      	ldr	r0, [sp, #12]
 8036d00:	f7ff fc46 	bl	8036590 <_printf_i>
 8036d04:	e7ea      	b.n	8036cdc <_svfiprintf_r+0x1c0>
 8036d06:	46c0      	nop			; (mov r8, r8)
 8036d08:	08037430 	.word	0x08037430
 8036d0c:	08037436 	.word	0x08037436
 8036d10:	0803743a 	.word	0x0803743a
 8036d14:	00000000 	.word	0x00000000
 8036d18:	08036a59 	.word	0x08036a59

08036d1c <_sbrk_r>:
 8036d1c:	2300      	movs	r3, #0
 8036d1e:	b570      	push	{r4, r5, r6, lr}
 8036d20:	4d06      	ldr	r5, [pc, #24]	; (8036d3c <_sbrk_r+0x20>)
 8036d22:	0004      	movs	r4, r0
 8036d24:	0008      	movs	r0, r1
 8036d26:	602b      	str	r3, [r5, #0]
 8036d28:	f000 f822 	bl	8036d70 <_sbrk>
 8036d2c:	1c43      	adds	r3, r0, #1
 8036d2e:	d103      	bne.n	8036d38 <_sbrk_r+0x1c>
 8036d30:	682b      	ldr	r3, [r5, #0]
 8036d32:	2b00      	cmp	r3, #0
 8036d34:	d000      	beq.n	8036d38 <_sbrk_r+0x1c>
 8036d36:	6023      	str	r3, [r4, #0]
 8036d38:	bd70      	pop	{r4, r5, r6, pc}
 8036d3a:	46c0      	nop			; (mov r8, r8)
 8036d3c:	2000e0f4 	.word	0x2000e0f4

08036d40 <__malloc_lock>:
 8036d40:	b510      	push	{r4, lr}
 8036d42:	4802      	ldr	r0, [pc, #8]	; (8036d4c <__malloc_lock+0xc>)
 8036d44:	f7ff fd56 	bl	80367f4 <__retarget_lock_acquire_recursive>
 8036d48:	bd10      	pop	{r4, pc}
 8036d4a:	46c0      	nop			; (mov r8, r8)
 8036d4c:	2000e0e8 	.word	0x2000e0e8

08036d50 <__malloc_unlock>:
 8036d50:	b510      	push	{r4, lr}
 8036d52:	4802      	ldr	r0, [pc, #8]	; (8036d5c <__malloc_unlock+0xc>)
 8036d54:	f7ff fd4f 	bl	80367f6 <__retarget_lock_release_recursive>
 8036d58:	bd10      	pop	{r4, pc}
 8036d5a:	46c0      	nop			; (mov r8, r8)
 8036d5c:	2000e0e8 	.word	0x2000e0e8

08036d60 <_malloc_usable_size_r>:
 8036d60:	1f0b      	subs	r3, r1, #4
 8036d62:	681b      	ldr	r3, [r3, #0]
 8036d64:	1f18      	subs	r0, r3, #4
 8036d66:	2b00      	cmp	r3, #0
 8036d68:	da01      	bge.n	8036d6e <_malloc_usable_size_r+0xe>
 8036d6a:	580b      	ldr	r3, [r1, r0]
 8036d6c:	18c0      	adds	r0, r0, r3
 8036d6e:	4770      	bx	lr

08036d70 <_sbrk>:
 8036d70:	4a05      	ldr	r2, [pc, #20]	; (8036d88 <_sbrk+0x18>)
 8036d72:	0003      	movs	r3, r0
 8036d74:	6811      	ldr	r1, [r2, #0]
 8036d76:	2900      	cmp	r1, #0
 8036d78:	d101      	bne.n	8036d7e <_sbrk+0xe>
 8036d7a:	4904      	ldr	r1, [pc, #16]	; (8036d8c <_sbrk+0x1c>)
 8036d7c:	6011      	str	r1, [r2, #0]
 8036d7e:	6810      	ldr	r0, [r2, #0]
 8036d80:	18c3      	adds	r3, r0, r3
 8036d82:	6013      	str	r3, [r2, #0]
 8036d84:	4770      	bx	lr
 8036d86:	46c0      	nop			; (mov r8, r8)
 8036d88:	2000e0f8 	.word	0x2000e0f8
 8036d8c:	2000e100 	.word	0x2000e100

08036d90 <_init>:
 8036d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8036d92:	46c0      	nop			; (mov r8, r8)
 8036d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8036d96:	bc08      	pop	{r3}
 8036d98:	469e      	mov	lr, r3
 8036d9a:	4770      	bx	lr

08036d9c <_fini>:
 8036d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8036d9e:	46c0      	nop			; (mov r8, r8)
 8036da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8036da2:	bc08      	pop	{r3}
 8036da4:	469e      	mov	lr, r3
 8036da6:	4770      	bx	lr
