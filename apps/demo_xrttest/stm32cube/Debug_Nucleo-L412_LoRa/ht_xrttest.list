
ht_xrttest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flash_start  00000000  00000000  00000000  0002f5fc  2**0
                  CONTENTS
  2 .crp_patch    00000000  00000000  00000000  0002f5fc  2**0
                  CONTENTS
  3 .text         00009fec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .ARM.extab    00000000  0800a17c  0800a17c  0002f5fc  2**0
                  CONTENTS
  5 .ARM          00000000  0800a17c  0800a17c  0002f5fc  2**0
                  CONTENTS
  6 .flashpatch   00000000  00000000  00000000  0002f5fc  2**0
                  CONTENTS
  7 .endflash     00000000  00000000  00000000  0002f5fc  2**0
                  CONTENTS
  8 .config       00000000  1fff7800  1fff7800  0002f5fc  2**0
                  CONTENTS
  9 .optionbytes  00000000  1fff7800  1fff7800  0002f5fc  2**0
                  CONTENTS
 10 .config2      00000000  00000000  00000000  0002f5fc  2**0
                  CONTENTS
 11 .optionbytes2 00000000  00000000  00000000  0002f5fc  2**0
                  CONTENTS
 12 .otp          00000000  1fff7000  1fff7000  0002f5fc  2**0
                  CONTENTS
 13 .vl_ov        00000280  0801f000  0801f000  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .vl_isfs      00000000  0801f360  0801f360  0002f5fc  2**0
                  CONTENTS
 15 .vl_isf       000001fc  0801f400  0801f400  0002f400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .vl_sram      00000000  10000000  10000000  0002f5fc  2**0
                  CONTENTS
 17 .data         000001b8  20000000  0800a17c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .bss          00003100  200001b8  0800a334  000201b8  2**2
                  ALLOC
 19 ._usrstack    00000400  200032b8  0800d434  000201b8  2**0
                  ALLOC
 20 .ARM.attributes 00000030  00000000  00000000  0002f5fc  2**0
                  CONTENTS, READONLY
 21 .debug_info   0002bfc8  00000000  00000000  0002f62c  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 0000767d  00000000  00000000  0005b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00010ea1  00000000  00000000  00062c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_aranges 00001ba0  00000000  00000000  00073b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 00002918  00000000  00000000  000756b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_line   00016b9a  00000000  00000000  00077fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_str    00006f05  00000000  00000000  0008eb6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .comment      0000007b  00000000  00000000  00095a6f  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000050f8  00000000  00000000  00095aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 30 .stab         000000cc  00000000  00000000  0009abe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 31 .stabstr      000001b9  00000000  00000000  0009acb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b8 	.word	0x200001b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a15c 	.word	0x0800a15c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001bc 	.word	0x200001bc
 80001cc:	0800a15c 	.word	0x0800a15c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <xrt_applet_fec>:

/** Communication Task Applets  <BR>
  * ========================================================================<BR>
  */

void xrt_applet_fec(m2session* active) {
 8000270:	b500      	push	{lr}
 8000272:	b083      	sub	sp, #12
/// This is a page operation, which gets buried directly onto the queue
	ot_u8 	payload[7];
	ot_u32  dev_token = ((ot_u32*)UID_BASE)[0];
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <xrt_applet_fec+0x44>)
 8000276:	6818      	ldr	r0, [r3, #0]

	payload[0]	= 0;
 8000278:	2300      	movs	r3, #0
 800027a:	f88d 3000 	strb.w	r3, [sp]
	payload[1]	= 0x81;
 800027e:	2281      	movs	r2, #129	; 0x81
 8000280:	f88d 2001 	strb.w	r2, [sp, #1]
	payload[2]	= 0;
 8000284:	f88d 3002 	strb.w	r3, [sp, #2]
	payload[3]	= (ot_u8)setup.page_count;
 8000288:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <xrt_applet_fec+0x48>)
 800028a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800028e:	f88d 2003 	strb.w	r2, [sp, #3]
	payload[4]	= 0;
 8000292:	f88d 3004 	strb.w	r3, [sp, #4]
	payload[5]	= 0;
 8000296:	f88d 3005 	strb.w	r3, [sp, #5]
	payload[6]	= 0;
 800029a:	f88d 3006 	strb.w	r3, [sp, #6]

    otapi_new_telegram(dev_token, 2, payload);
 800029e:	466a      	mov	r2, sp
 80002a0:	2102      	movs	r1, #2
 80002a2:	f003 f877 	bl	8003394 <otapi_new_telegram>
    otapi_start_dialog(1024);
 80002a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80002aa:	f003 f8dd 	bl	8003468 <otapi_start_dialog>
}
 80002ae:	b003      	add	sp, #12
 80002b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80002b4:	1fff7590 	.word	0x1fff7590
 80002b8:	20000000 	.word	0x20000000

080002bc <alp_ext_proc>:
ot_bool alp_ext_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 80002bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002be:	4604      	mov	r4, r0
    ot_u8 flags      	= INREC(alp, FLAGS);
 80002c0:	f06f 0103 	mvn.w	r1, #3
 80002c4:	6880      	ldr	r0, [r0, #8]
 80002c6:	f005 fd8d 	bl	8005de4 <q_getcursor_val>
    ot_u8 payload_len 	= INREC(alp, PLEN);
 80002ca:	f06f 0102 	mvn.w	r1, #2
 80002ce:	68a0      	ldr	r0, [r4, #8]
 80002d0:	f005 fd88 	bl	8005de4 <q_getcursor_val>
    ot_u8 alp_id      	= INREC(alp, ID);
 80002d4:	f06f 0101 	mvn.w	r1, #1
 80002d8:	68a0      	ldr	r0, [r4, #8]
 80002da:	f005 fd83 	bl	8005de4 <q_getcursor_val>
 80002de:	4605      	mov	r5, r0
    ot_u8 alp_cmd     	= INREC(alp, CMD);
 80002e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80002e4:	68a0      	ldr	r0, [r4, #8]
 80002e6:	f005 fd7d 	bl	8005de4 <q_getcursor_val>
    switch (alp_id) {
 80002ea:	2d10      	cmp	r5, #16
 80002ec:	d155      	bne.n	800039a <alp_ext_proc+0xde>
		radio_snr_t* snrdata = radio_getlinkinfo();
 80002ee:	f001 fb6d 	bl	80019cc <radio_getlinkinfo>
 80002f2:	4606      	mov	r6, r0
		setup.page_received = True;
 80002f4:	4d37      	ldr	r5, [pc, #220]	; (80003d4 <alp_ext_proc+0x118>)
 80002f6:	2301      	movs	r3, #1
 80002f8:	706b      	strb	r3, [r5, #1]
		tx_eirp	= q_readbyte(alp->inq);
 80002fa:	68a0      	ldr	r0, [r4, #8]
 80002fc:	f005 fdf4 	bl	8005ee8 <q_readbyte>
		subnet  = q_readbyte(alp->inq);
 8000300:	68a0      	ldr	r0, [r4, #8]
 8000302:	f005 fdf1 	bl	8005ee8 <q_readbyte>
		token   = q_readlong(alp->inq);
 8000306:	68a0      	ldr	r0, [r4, #8]
 8000308:	f005 fe17 	bl	8005f3a <q_readlong>
 800030c:	4607      	mov	r7, r0
		ptype   = q_readbyte(alp->inq);
 800030e:	68a0      	ldr	r0, [r4, #8]
 8000310:	f005 fdea 	bl	8005ee8 <q_readbyte>
		dtype.ubyte[UPPER] 	= q_readbyte(alp->inq);
 8000314:	68a0      	ldr	r0, [r4, #8]
 8000316:	f005 fde7 	bl	8005ee8 <q_readbyte>
		dtype.ubyte[LOWER] 	= q_readbyte(alp->inq);
 800031a:	68a0      	ldr	r0, [r4, #8]
 800031c:	f005 fde4 	bl	8005ee8 <q_readbyte>
		pcnt.ubyte[UPPER] 	= q_readbyte(alp->inq);
 8000320:	68a0      	ldr	r0, [r4, #8]
 8000322:	f005 fde1 	bl	8005ee8 <q_readbyte>
		pcnt.ubyte[LOWER] 	= q_readbyte(alp->inq);
 8000326:	68a0      	ldr	r0, [r4, #8]
 8000328:	f005 fdde 	bl	8005ee8 <q_readbyte>
		if (setup.is_gateway) {
 800032c:	782b      	ldrb	r3, [r5, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d04d      	beq.n	80003ce <alp_ext_proc+0x112>
			logger_header(DATA_json, 0);
 8000332:	2100      	movs	r1, #0
 8000334:	2002      	movs	r0, #2
 8000336:	f005 fced 	bl	8005d14 <logger_header>
			mpipe.alp.outq->putcursor += sprintf(mpipe.alp.outq->putcursor, "{\"tgtest\":{");
 800033a:	4c27      	ldr	r4, [pc, #156]	; (80003d8 <alp_ext_proc+0x11c>)
 800033c:	6923      	ldr	r3, [r4, #16]
 800033e:	689d      	ldr	r5, [r3, #8]
 8000340:	4b26      	ldr	r3, [pc, #152]	; (80003dc <alp_ext_proc+0x120>)
 8000342:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000344:	6028      	str	r0, [r5, #0]
 8000346:	6069      	str	r1, [r5, #4]
 8000348:	60aa      	str	r2, [r5, #8]
 800034a:	6922      	ldr	r2, [r4, #16]
 800034c:	6893      	ldr	r3, [r2, #8]
 800034e:	330b      	adds	r3, #11
 8000350:	6093      	str	r3, [r2, #8]
			mpipe.alp.outq->putcursor += sprintf(mpipe.alp.outq->putcursor, "\"token\":\"%08X\", ", token);
 8000352:	6923      	ldr	r3, [r4, #16]
 8000354:	463a      	mov	r2, r7
 8000356:	4922      	ldr	r1, [pc, #136]	; (80003e0 <alp_ext_proc+0x124>)
 8000358:	6898      	ldr	r0, [r3, #8]
 800035a:	f008 f805 	bl	8008368 <siprintf>
 800035e:	6922      	ldr	r2, [r4, #16]
 8000360:	6893      	ldr	r3, [r2, #8]
 8000362:	3314      	adds	r3, #20
 8000364:	6093      	str	r3, [r2, #8]
			mpipe.alp.outq->putcursor += sprintf(mpipe.alp.outq->putcursor, "\"rssi\":%i, ", radio.last_rssi);
 8000366:	6923      	ldr	r3, [r4, #16]
 8000368:	4a1e      	ldr	r2, [pc, #120]	; (80003e4 <alp_ext_proc+0x128>)
 800036a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800036e:	491e      	ldr	r1, [pc, #120]	; (80003e8 <alp_ext_proc+0x12c>)
 8000370:	6898      	ldr	r0, [r3, #8]
 8000372:	f007 fff9 	bl	8008368 <siprintf>
 8000376:	6922      	ldr	r2, [r4, #16]
 8000378:	6893      	ldr	r3, [r2, #8]
 800037a:	4418      	add	r0, r3
 800037c:	6090      	str	r0, [r2, #8]
			mpipe.alp.outq->putcursor += sprintf(mpipe.alp.outq->putcursor, "\"mean-snr\":%i}}", snrdata->mean_snr);
 800037e:	6923      	ldr	r3, [r4, #16]
 8000380:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 8000384:	4919      	ldr	r1, [pc, #100]	; (80003ec <alp_ext_proc+0x130>)
 8000386:	6898      	ldr	r0, [r3, #8]
 8000388:	f007 ffee 	bl	8008368 <siprintf>
 800038c:	6922      	ldr	r2, [r4, #16]
 800038e:	6893      	ldr	r3, [r2, #8]
 8000390:	4418      	add	r0, r3
 8000392:	6090      	str	r0, [r2, #8]
			logger_direct();
 8000394:	f005 fd04 	bl	8005da0 <logger_direct>
	} break;
 8000398:	e019      	b.n	80003ce <alp_ext_proc+0x112>
        logger_header(MSG_raw, 0);
 800039a:	2100      	movs	r1, #0
 800039c:	2004      	movs	r0, #4
 800039e:	f005 fcb9 	bl	8005d14 <logger_header>
        q_writestring(mpipe.alp.outq, (ot_u8*)"ALP", 4);
 80003a2:	4e0d      	ldr	r6, [pc, #52]	; (80003d8 <alp_ext_proc+0x11c>)
 80003a4:	2204      	movs	r2, #4
 80003a6:	4912      	ldr	r1, [pc, #72]	; (80003f0 <alp_ext_proc+0x134>)
 80003a8:	6930      	ldr	r0, [r6, #16]
 80003aa:	f005 fde1 	bl	8005f70 <q_writestring>
        len = q_span(alp->inq);
 80003ae:	68a0      	ldr	r0, [r4, #8]
 80003b0:	f005 fd20 	bl	8005df4 <q_span>
 80003b4:	4605      	mov	r5, r0
        q_writestring(mpipe.alp.outq, q_markbyte(alp->inq, len), len);
 80003b6:	6936      	ldr	r6, [r6, #16]
 80003b8:	4601      	mov	r1, r0
 80003ba:	68a0      	ldr	r0, [r4, #8]
 80003bc:	f005 fd5d 	bl	8005e7a <q_markbyte>
 80003c0:	462a      	mov	r2, r5
 80003c2:	4601      	mov	r1, r0
 80003c4:	4630      	mov	r0, r6
 80003c6:	f005 fdd3 	bl	8005f70 <q_writestring>
        logger_direct();
 80003ca:	f005 fce9 	bl	8005da0 <logger_direct>
}
 80003ce:	2001      	movs	r0, #1
 80003d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000000 	.word	0x20000000
 80003d8:	20002d9c 	.word	0x20002d9c
 80003dc:	08009fd8 	.word	0x08009fd8
 80003e0:	08009fe4 	.word	0x08009fe4
 80003e4:	200026c4 	.word	0x200026c4
 80003e8:	08009ff8 	.word	0x08009ff8
 80003ec:	0800a004 	.word	0x0800a004
 80003f0:	0800a014 	.word	0x0800a014

080003f4 <xrt_invoke>:
  * Then, the kernel will call the DLL session task as soon as necessary
  * resources are available to run that task (by default DLL task is top
  * priority, so it should get called right away).
  */

void xrt_invoke(ot_u8 state) {
 80003f4:	b510      	push	{r4, lr}
    sys_task_setevent(XRTTEST_TASK, state);
 80003f6:	4c09      	ldr	r4, [pc, #36]	; (800041c <xrt_invoke+0x28>)
 80003f8:	4601      	mov	r1, r0
 80003fa:	4620      	mov	r0, r4
 80003fc:	f006 fa16 	bl	800682c <sys_task_setevent>
    sys_task_setreserve(XRTTEST_TASK, 1);
 8000400:	2101      	movs	r1, #1
 8000402:	4620      	mov	r0, r4
 8000404:	f006 fa14 	bl	8006830 <sys_task_setreserve>
    sys_task_setlatency(XRTTEST_TASK, 255);
 8000408:	21ff      	movs	r1, #255	; 0xff
 800040a:	4620      	mov	r0, r4
 800040c:	f006 fa12 	bl	8006834 <sys_task_setlatency>
    sys_preempt(XRTTEST_TASK, 0);
 8000410:	2100      	movs	r1, #0
 8000412:	4620      	mov	r0, r4
 8000414:	f006 fa84 	bl	8006920 <sys_preempt>
}
 8000418:	bd10      	pop	{r4, pc}
 800041a:	bf00      	nop
 800041c:	20002de0 	.word	0x20002de0

08000420 <app_set_txpwr>:


/** Function for modulating power <BR>
  * ==================================================================<BR>
  */
void app_set_txpwr(ot_int dBm) {
 8000420:	b538      	push	{r3, r4, r5, lr}
 8000422:	4604      	mov	r4, r0
    vlFILE* fp;
    ot_uni16 pwr_flt;

    fp = ISF_open_su(0x02);
 8000424:	2002      	movs	r0, #2
 8000426:	f006 f8ab 	bl	8006580 <ISF_open_su>
    if (fp != NULL) {
 800042a:	b340      	cbz	r0, 800047e <app_set_txpwr+0x5e>
 800042c:	4605      	mov	r5, r0
        ot_uint offset;

        // Replace existing power levels for each of three channel groups
        // with new power spec.
        offset              = 6+2;
        pwr_flt.ushort      = vl_read(fp, offset);
 800042e:	2108      	movs	r1, #8
 8000430:	f005 ffef 	bl	8006412 <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 8000434:	3428      	adds	r4, #40	; 0x28
 8000436:	0064      	lsls	r4, r4, #1
 8000438:	b2e4      	uxtb	r4, r4
 800043a:	f364 0007 	bfi	r0, r4, #0, #8
        vl_write(fp, offset, pwr_flt.ushort);
 800043e:	b282      	uxth	r2, r0
 8000440:	2108      	movs	r1, #8
 8000442:	4628      	mov	r0, r5
 8000444:	f005 ffec 	bl	8006420 <vl_write>

        offset              = 6+6+2;
        pwr_flt.ushort      = vl_read(fp, offset);
 8000448:	210e      	movs	r1, #14
 800044a:	4628      	mov	r0, r5
 800044c:	f005 ffe1 	bl	8006412 <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 8000450:	f364 0007 	bfi	r0, r4, #0, #8
        vl_write(fp, offset, pwr_flt.ushort);
 8000454:	b282      	uxth	r2, r0
 8000456:	210e      	movs	r1, #14
 8000458:	4628      	mov	r0, r5
 800045a:	f005 ffe1 	bl	8006420 <vl_write>

        offset              = 6+6+6+2;
        pwr_flt.ushort      = vl_read(fp, offset);
 800045e:	2114      	movs	r1, #20
 8000460:	4628      	mov	r0, r5
 8000462:	f005 ffd6 	bl	8006412 <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 8000466:	f364 0007 	bfi	r0, r4, #0, #8
        vl_write(fp, offset, pwr_flt.ushort);
 800046a:	b282      	uxth	r2, r0
 800046c:	2114      	movs	r1, #20
 800046e:	4628      	mov	r0, r5
 8000470:	f005 ffd6 	bl	8006420 <vl_write>

        vl_close(fp);
 8000474:	4628      	mov	r0, r5
 8000476:	f006 f84b 	bl	8006510 <vl_close>
        // This block of code resets the channel status, forcing the
        // radio module to update the channel information.
        // It's a hack, but this whole app is a hack.
        //phymac[0].channel   = 0xF0;
        //phymac[0].tx_eirp   = 0x7F;
        rm2_channel_refresh();
 800047a:	f004 f9f5 	bl	8004868 <rm2_channel_refresh>
    }

}
 800047e:	bd38      	pop	{r3, r4, r5, pc}

08000480 <setup_init>:
  * any of the kernel & system features are initialized.  It's a good
  * place to put features that control which drivers or apps get 
  * activated.
  */
  
void setup_init() {
 8000480:	b510      	push	{r4, lr}
    
    // Set it up as gateway by default (switch open, if there is a switch at all)
#   if defined(__FORCE_GATEWAY)
    setup.is_gateway = 1;
#   elif !defined(OT_SWITCH1_ISR)
    setup.is_gateway = 0;
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <setup_init+0x38>)
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
#   endif
    
    /// Blink the board LEDs to show that it is starting up.
    {   ot_u8 i;

        i=4;
 8000488:	2404      	movs	r4, #4
        while (i != 0) {
 800048a:	e00c      	b.n	80004a6 <setup_init+0x26>
#	endif

	static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
	static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
	static inline void BOARD_led1_toggle(void)  { OT_TRIG1_TOG(); }
	static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <setup_init+0x3c>)
 800048e:	2220      	movs	r2, #32
 8000490:	619a      	str	r2, [r3, #24]
            if (i&1)    BOARD_led1_on();
            else        BOARD_led2_on();

            delay_ti(60);
 8000492:	203c      	movs	r0, #60	; 0x3c
 8000494:	f007 f842 	bl	800751c <delay_ti>
	static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <setup_init+0x3c>)
 800049a:	2220      	movs	r2, #32
 800049c:	629a      	str	r2, [r3, #40]	; 0x28
	static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 800049e:	2210      	movs	r2, #16
 80004a0:	629a      	str	r2, [r3, #40]	; 0x28
            BOARD_led2_off();
            BOARD_led1_off();
            i--;
 80004a2:	3c01      	subs	r4, #1
 80004a4:	b2e4      	uxtb	r4, r4
        while (i != 0) {
 80004a6:	b134      	cbz	r4, 80004b6 <setup_init+0x36>
            if (i&1)    BOARD_led1_on();
 80004a8:	f014 0f01 	tst.w	r4, #1
 80004ac:	d0ee      	beq.n	800048c <setup_init+0xc>
	static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
 80004ae:	4b03      	ldr	r3, [pc, #12]	; (80004bc <setup_init+0x3c>)
 80004b0:	2210      	movs	r2, #16
 80004b2:	619a      	str	r2, [r3, #24]
 80004b4:	e7ed      	b.n	8000492 <setup_init+0x12>
    // Setup Button for interrupt
#	ifdef OT_SWITCH1_PIN
    EXTI->RTSR |= OT_SWITCH1_PIN;
    EXTI->IMR  |= OT_SWITCH1_PIN;
#	endif
}
 80004b6:	bd10      	pop	{r4, pc}
 80004b8:	20000000 	.word	0x20000000
 80004bc:	48000400 	.word	0x48000400

080004c0 <setup_beacons>:





ot_int setup_beacons(ot_u16 interval, ot_u8 channel) {
 80004c0:	b530      	push	{r4, r5, lr}
 80004c2:	b083      	sub	sp, #12
 80004c4:	4603      	mov	r3, r0
 80004c6:	460c      	mov	r4, r1
	ot_u8 beacon_list[8] = {0x00, 0x00, TG_CHANNEL, 0x02, 0x20, 0x00, 0x00, 0x08};
 80004c8:	4a1a      	ldr	r2, [pc, #104]	; (8000534 <setup_beacons+0x74>)
 80004ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ce:	aa02      	add	r2, sp, #8
 80004d0:	e902 0003 	stmdb	r2, {r0, r1}
    vlFILE* fp;
    ot_int 	output = -1;

    if (interval == 0) {
 80004d4:	b98b      	cbnz	r3, 80004fa <setup_beacons+0x3a>
    	fp = ISF_open_su(0);
 80004d6:	2000      	movs	r0, #0
 80004d8:	f006 f852 	bl	8006580 <ISF_open_su>
		if (fp != NULL) {
 80004dc:	4605      	mov	r5, r0
 80004de:	b318      	cbz	r0, 8000528 <setup_beacons+0x68>
			output = vl_write(fp, 6, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2106      	movs	r1, #6
 80004e4:	f005 ff9c 	bl	8006420 <vl_write>
 80004e8:	b204      	sxth	r4, r0
			vl_close(fp);
 80004ea:	4628      	mov	r0, r5
 80004ec:	f006 f810 	bl	8006510 <vl_close>
			dll_refresh();
 80004f0:	f003 fe32 	bl	8004158 <dll_refresh>
			dll_refresh();
		}
    }

    return output;
}
 80004f4:	4620      	mov	r0, r4
 80004f6:	b003      	add	sp, #12
 80004f8:	bd30      	pop	{r4, r5, pc}
    	beacon_list[2] = channel;
 80004fa:	f88d 4002 	strb.w	r4, [sp, #2]
    	beacon_list[6] = (ot_u8)(interval >> 8);
 80004fe:	0a1a      	lsrs	r2, r3, #8
 8000500:	f88d 2006 	strb.w	r2, [sp, #6]
    	beacon_list[7] = (ot_u8)(interval);
 8000504:	f88d 3007 	strb.w	r3, [sp, #7]
    	fp = ISF_open_su(6);
 8000508:	2006      	movs	r0, #6
 800050a:	f006 f839 	bl	8006580 <ISF_open_su>
		if (fp != NULL) {
 800050e:	4605      	mov	r5, r0
 8000510:	b168      	cbz	r0, 800052e <setup_beacons+0x6e>
			output = vl_store(fp, 8, beacon_list);
 8000512:	466a      	mov	r2, sp
 8000514:	2108      	movs	r1, #8
 8000516:	f005 ffc7 	bl	80064a8 <vl_store>
 800051a:	b204      	sxth	r4, r0
			vl_close(fp);
 800051c:	4628      	mov	r0, r5
 800051e:	f005 fff7 	bl	8006510 <vl_close>
			dll_refresh();
 8000522:	f003 fe19 	bl	8004158 <dll_refresh>
 8000526:	e7e5      	b.n	80004f4 <setup_beacons+0x34>
    ot_int 	output = -1;
 8000528:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800052c:	e7e2      	b.n	80004f4 <setup_beacons+0x34>
 800052e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000532:	e7df      	b.n	80004f4 <setup_beacons+0x34>
 8000534:	08009030 	.word	0x08009030

08000538 <setup_listen>:


void setup_listen(bool is_gateway, ot_u8 channel) {
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	4606      	mov	r6, r0
 800053e:	460d      	mov	r5, r1
	ot_u8 sleep_gateway[4] = { SPLIT_TIME16(2,0,0), TG_CHANNEL, 0x50 };
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <setup_listen+0x3c>)
 8000542:	689a      	ldr	r2, [r3, #8]
 8000544:	9201      	str	r2, [sp, #4]
	ot_u8 sleep_endpoint[4]= { SPLIT_TIME16(0,2,3), TG_CHANNEL, 0x80 };
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	9300      	str	r3, [sp, #0]
    vlFILE* fp;
    ot_u8* data;

    fp = ISF_open_su(5);
 800054a:	2005      	movs	r0, #5
 800054c:	f006 f818 	bl	8006580 <ISF_open_su>
    if (fp != NULL) {
 8000550:	b160      	cbz	r0, 800056c <setup_listen+0x34>
 8000552:	4604      	mov	r4, r0
        data = is_gateway ? (ot_u8*)sleep_gateway : (ot_u8*)sleep_endpoint;
 8000554:	b166      	cbz	r6, 8000570 <setup_listen+0x38>
 8000556:	aa01      	add	r2, sp, #4
        data[2] = channel;
 8000558:	7095      	strb	r5, [r2, #2]
        vl_store(fp, 4, data);
 800055a:	2104      	movs	r1, #4
 800055c:	4620      	mov	r0, r4
 800055e:	f005 ffa3 	bl	80064a8 <vl_store>
        vl_close(fp);
 8000562:	4620      	mov	r0, r4
 8000564:	f005 ffd4 	bl	8006510 <vl_close>
        dll_refresh();
 8000568:	f003 fdf6 	bl	8004158 <dll_refresh>
    }
}
 800056c:	b002      	add	sp, #8
 800056e:	bd70      	pop	{r4, r5, r6, pc}
        data = is_gateway ? (ot_u8*)sleep_gateway : (ot_u8*)sleep_endpoint;
 8000570:	466a      	mov	r2, sp
 8000572:	e7f1      	b.n	8000558 <setup_listen+0x20>
 8000574:	08009030 	.word	0x08009030

08000578 <xrttest_systask>:
void xrttest_systask(void* arg) {
 8000578:	b510      	push	{r4, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	4604      	mov	r4, r0
    switch (task->event) {
 800057e:	7803      	ldrb	r3, [r0, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d034      	beq.n	80005ee <xrttest_systask+0x76>
 8000584:	b123      	cbz	r3, 8000590 <xrttest_systask+0x18>
 8000586:	2b02      	cmp	r3, #2
 8000588:	d023      	beq.n	80005d2 <xrttest_systask+0x5a>
        task->event = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	7003      	strb	r3, [r0, #0]
}
 800058e:	e043      	b.n	8000618 <xrttest_systask+0xa0>
    	setup.page_count = __PAGE_NUMBURST__;
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <xrttest_systask+0xa8>)
 8000592:	2201      	movs	r2, #1
 8000594:	809a      	strh	r2, [r3, #4]
    	setup.page_received = False;
 8000596:	2200      	movs	r2, #0
 8000598:	705a      	strb	r2, [r3, #1]
    	setup.page_type = 0;
 800059a:	805a      	strh	r2, [r3, #2]
    	break;
 800059c:	e03c      	b.n	8000618 <xrttest_systask+0xa0>
#       define OT_TRIG4_ON()    OT_TRIG4_PORT->BRR   = OT_TRIG4_PIN;
#       define OT_TRIG4_OFF()   OT_TRIG4_PORT->BSRR  = OT_TRIG4_PIN;
#       define OT_TRIG4_TOG()   OT_TRIG4_PORT->ODR  ^= OT_TRIG4_PIN;
#   endif
	static inline void BOARD_led4_on(void)      { OT_TRIG4_ON(); }
	static inline void BOARD_led4_off(void)     { OT_TRIG4_OFF(); }
 800059e:	4b21      	ldr	r3, [pc, #132]	; (8000624 <xrttest_systask+0xac>)
 80005a0:	2208      	movs	r2, #8
 80005a2:	629a      	str	r2, [r3, #40]	; 0x28
 80005a4:	e02e      	b.n	8000604 <xrttest_systask+0x8c>
				s_tmpl.channel 	= (TG_CHANNEL);
 80005a6:	2389      	movs	r3, #137	; 0x89
 80005a8:	f88d 3001 	strb.w	r3, [sp, #1]
			s_tmpl.flagmask     = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f88d 3005 	strb.w	r3, [sp, #5]
			s_tmpl.subnetmask   = 0;
 80005b2:	f88d 3003 	strb.w	r3, [sp, #3]
			m2task_telegram(&s_tmpl, applet);
 80005b6:	491c      	ldr	r1, [pc, #112]	; (8000628 <xrttest_systask+0xb0>)
 80005b8:	4668      	mov	r0, sp
 80005ba:	f003 fedd 	bl	8004378 <m2task_telegram>
			setup.page_type 	= (setup.page_type == 0);
 80005be:	4a18      	ldr	r2, [pc, #96]	; (8000620 <xrttest_systask+0xa8>)
 80005c0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80005c4:	fab3 f383 	clz	r3, r3
 80005c8:	095b      	lsrs	r3, r3, #5
 80005ca:	8053      	strh	r3, [r2, #2]
			nextevent_ti = __PAGE_PERIOD_TI__;
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	e01d      	b.n	800060e <xrttest_systask+0x96>
    	if (setup.is_gateway) {
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <xrttest_systask+0xa8>)
 80005d4:	7818      	ldrb	r0, [r3, #0]
 80005d6:	b150      	cbz	r0, 80005ee <xrttest_systask+0x76>
    		ot_u8 chan = (setup.page_count == 0) ? (0x80|TG_CHANNEL) : ((~0x80)&TG_CHANNEL);
 80005d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005dc:	b9f3      	cbnz	r3, 800061c <xrttest_systask+0xa4>
 80005de:	2189      	movs	r1, #137	; 0x89
    		setup.page_count = (setup.page_count == 0);
 80005e0:	fab3 f383 	clz	r3, r3
 80005e4:	095b      	lsrs	r3, r3, #5
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <xrttest_systask+0xa8>)
 80005e8:	8093      	strh	r3, [r2, #4]
    		setup_listen(setup.is_gateway, chan);
 80005ea:	f7ff ffa5 	bl	8000538 <setup_listen>
    	if (setup.is_gateway) {
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <xrttest_systask+0xa8>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0d7      	beq.n	80005a6 <xrttest_systask+0x2e>
    		if (setup.page_received) {
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <xrttest_systask+0xa8>)
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0cf      	beq.n	800059e <xrttest_systask+0x26>
	static inline void BOARD_led4_on(void)      { OT_TRIG4_ON(); }
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <xrttest_systask+0xac>)
 8000600:	2208      	movs	r2, #8
 8000602:	619a      	str	r2, [r3, #24]
    		setup.page_received	= False;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <xrttest_systask+0xa8>)
 8000606:	2200      	movs	r2, #0
 8000608:	705a      	strb	r2, [r3, #1]
    		nextevent_ti		= __PAGE_PERIOD_TI__*3;
 800060a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    	task->event = 1;
 800060e:	2301      	movs	r3, #1
 8000610:	7023      	strb	r3, [r4, #0]
    	sys_task_setnext(task, nextevent_ti);
 8000612:	4620      	mov	r0, r4
 8000614:	f006 f918 	bl	8006848 <sys_task_setnext>
}
 8000618:	b002      	add	sp, #8
 800061a:	bd10      	pop	{r4, pc}
    		ot_u8 chan = (setup.page_count == 0) ? (0x80|TG_CHANNEL) : ((~0x80)&TG_CHANNEL);
 800061c:	2109      	movs	r1, #9
 800061e:	e7df      	b.n	80005e0 <xrttest_systask+0x68>
 8000620:	20000000 	.word	0x20000000
 8000624:	48000400 	.word	0x48000400
 8000628:	08000271 	.word	0x08000271

0800062c <main>:
	return (ot_int)crcreg;
}
#endif


void main(void) {
 800062c:	b510      	push	{r4, lr}
 800062e:	b082      	sub	sp, #8
    ///1. Standard Power-on routine (Clocks, Timers, IRQ's, etc)
    ///2. Standard OpenTag Init (most stuff actually will not be used)
    platform_poweron();
 8000630:	f006 fdbe 	bl	80071b0 <platform_poweron>
    platform_init_OT();
 8000634:	f006 fc90 	bl	8006f58 <platform_init_OT>

    // 3. Preparing this application (local functions)
    setup_init();
 8000638:	f7ff ff22 	bl	8000480 <setup_init>
    app_set_txpwr((ot_int)(__DBM_DEFAULT));
 800063c:	2014      	movs	r0, #20
 800063e:	f7ff feef 	bl	8000420 <app_set_txpwr>
    setup_listen(setup.is_gateway, TG_CHANNEL);
 8000642:	4c15      	ldr	r4, [pc, #84]	; (8000698 <main+0x6c>)
 8000644:	2189      	movs	r1, #137	; 0x89
 8000646:	7820      	ldrb	r0, [r4, #0]
 8000648:	f7ff ff76 	bl	8000538 <setup_listen>
    setup_beacons(0, TG_CHANNEL);
 800064c:	2189      	movs	r1, #137	; 0x89
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff ff36 	bl	80004c0 <setup_beacons>

    if (setup.is_gateway) {
 8000654:	7823      	ldrb	r3, [r4, #0]
 8000656:	b9db      	cbnz	r3, 8000690 <main+0x64>
    	asapi_init_srv();
    }

    xrt_invoke(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff fecb 	bl	80003f4 <xrt_invoke>
    
    ///4. Set the app name (PageTest) as a cookie in the User-ID.
    ///   This is used for query filtering
    {   static const ot_u8 appstr[] = "APP=PageTest";
        vlFILE* fp;
        fp = ISF_open_su(ISF_ID(user_id));
 800065e:	2011      	movs	r0, #17
 8000660:	f005 ff8e 	bl	8006580 <ISF_open_su>
        if (fp != NULL) {
 8000664:	4604      	mov	r4, r0
 8000666:	b118      	cbz	r0, 8000670 <main+0x44>
            vl_store(fp, sizeof(appstr), appstr);
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <main+0x70>)
 800066a:	210d      	movs	r1, #13
 800066c:	f005 ff1c 	bl	80064a8 <vl_store>
        }
        vl_close(fp);
 8000670:	4620      	mov	r0, r4
 8000672:	f005 ff4d 	bl	8006510 <vl_close>
    ///5a. The device will wait (and block anything else) until you connect
    ///    it to a valid console app.
    ///5b. Load a message to show that main startup has passed
#   if (OT_FEATURE(MPIPE))
    //if (setup.is_gateway) {
        mpipedrv_standby();
 8000676:	f007 f8cb 	bl	8007810 <mpipedrv_standby>
        logger_msg(MSG_utf8, 6, 27, (ot_u8*)"SYS_ON", (ot_u8*)"System on and Mpipe active\n");
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <main+0x74>)
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <main+0x78>)
 8000680:	221b      	movs	r2, #27
 8000682:	2106      	movs	r1, #6
 8000684:	2005      	movs	r0, #5
 8000686:	f005 fb75 	bl	8005d74 <logger_msg>
    ///<LI> You could put code before or after platform_ot_run, which will
    ///     run before or after the (task + kernel).  If you do, keep the code
    ///     very short or else you are risking timing glitches.</LI>
    ///<LI> To run any significant amount of user code, use tasks. </LI>
    while(1) {
        platform_ot_run();
 800068a:	f006 fe2d 	bl	80072e8 <platform_ot_run>
 800068e:	e7fc      	b.n	800068a <main+0x5e>
    	asapi_init_srv();
 8000690:	f000 f8f2 	bl	8000878 <asapi_init_srv>
 8000694:	e7e0      	b.n	8000658 <main+0x2c>
 8000696:	bf00      	nop
 8000698:	20000000 	.word	0x20000000
 800069c:	08009040 	.word	0x08009040
 80006a0:	0800a020 	.word	0x0800a020
 80006a4:	0800a018 	.word	0x0800a018

080006a8 <dll_sig_rfinit>:
/// 2 = Session invocation (rfinit() not called here)
/// 3 = RX initialization (!)
/// 4 = TX CSMA init (!)
/// 5 = TX watchdog (rfinit() not called here)

    if (pcode == 3) BOARD_led2_on();    // Orange (preferred) / Yellow / Red lamp
 80006a8:	2803      	cmp	r0, #3
 80006aa:	d003      	beq.n	80006b4 <dll_sig_rfinit+0xc>
	static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <dll_sig_rfinit+0x14>)
 80006ae:	2210      	movs	r2, #16
 80006b0:	619a      	str	r2, [r3, #24]
    else            BOARD_led1_on();    // Green lamp
}
 80006b2:	4770      	bx	lr
	static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 80006b4:	4b01      	ldr	r3, [pc, #4]	; (80006bc <dll_sig_rfinit+0x14>)
 80006b6:	2220      	movs	r2, #32
 80006b8:	619a      	str	r2, [r3, #24]
 80006ba:	4770      	bx	lr
 80006bc:	48000400 	.word	0x48000400

080006c0 <dll_sig_rfterminate>:
	static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 80006c0:	4b02      	ldr	r3, [pc, #8]	; (80006cc <dll_sig_rfterminate+0xc>)
 80006c2:	2220      	movs	r2, #32
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
	static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 80006c6:	2210      	movs	r2, #16
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef EXTF_dll_sig_rfterminate
void dll_sig_rfterminate(ot_int pcode, ot_int scode) {
    BOARD_led2_off();   //Orange LED off
    BOARD_led1_off();   //Green LED off
}
 80006ca:	4770      	bx	lr
 80006cc:	48000400 	.word	0x48000400

080006d0 <sys_sig_panic>:
#include <otsys/syskern.h>
#include <otlib/logger.h>


#ifdef EXTF_sys_sig_panic
void sys_sig_panic(ot_int code) {
 80006d0:	b508      	push	{r3, lr}
#   if (OT_FEATURE(MPIPE))
    logger_code(3, (ot_u8*)"WTF", (ot_u16)code);
 80006d2:	b282      	uxth	r2, r0
 80006d4:	4902      	ldr	r1, [pc, #8]	; (80006e0 <sys_sig_panic+0x10>)
 80006d6:	2003      	movs	r0, #3
 80006d8:	f005 fb72 	bl	8005dc0 <logger_code>
#   endif
}
 80006dc:	bd08      	pop	{r3, pc}
 80006de:	bf00      	nop
 80006e0:	0800a03c 	.word	0x0800a03c

080006e4 <sys_sig_powerdown>:
    SCB->SCR    = scbscr_save;
}


//#ifdef EXTF_sys_sig_powerdown
void sys_sig_powerdown(ot_int code) {
 80006e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // - FWU option (L0, L1) is superfluous unless ULP is set
    // - In STM32L1 implementations we must kill the chrono timer before STOP.
    // - In all STM32L impls, we must clear EXTI's before stop.  In very rare cases,
    //   an EXTI might be missed, but there is nothing that can be done about this.
#   if _USE_STOP
    if (code & 2) {
 80006e6:	f010 0f02 	tst.w	r0, #2
 80006ea:	d108      	bne.n	80006fe <sys_sig_powerdown+0x1a>
        BOARD_STOP(code);
    }   
    else 
#   endif
    {   // Normal Sleeping mode (not deep sleep)
        SCB->SCR   &= ~((ot_u32)SCB_SCR_SLEEPDEEP_Msk);
 80006ec:	4a19      	ldr	r2, [pc, #100]	; (8000754 <sys_sig_powerdown+0x70>)
 80006ee:	6913      	ldr	r3, [r2, #16]
 80006f0:	f023 0304 	bic.w	r3, r3, #4
 80006f4:	6113      	str	r3, [r2, #16]
#       if defined(__STM32L4xx__)
        // Nothing do to here for L4
#       else
        PWR->CR    &= ~(PWR_CR_PDDS | PWR_CR_LPSDSR | PWR_CR_FWU | PWR_CR_ULP);
#       endif
        platform_enable_interrupts();
 80006f6:	f006 fc2d 	bl	8006f54 <platform_enable_interrupts>
        __WFI();
 80006fa:	bf30      	wfi
    }

}
 80006fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rcc_ahb2enr_saved   = RCC->AHB2ENR;
 80006fe:	4e16      	ldr	r6, [pc, #88]	; (8000758 <sys_sig_powerdown+0x74>)
 8000700:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
    RCC->AHB2ENR        = rcc_flags[code&1];
 8000702:	f000 0001 	and.w	r0, r0, #1
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <sys_sig_powerdown+0x78>)
 8000708:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800070c:	64f3      	str	r3, [r6, #76]	; 0x4c
    SysTick->CTRL   = 0;
 800070e:	2200      	movs	r2, #0
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <sys_sig_powerdown+0x7c>)
 8000712:	601a      	str	r2, [r3, #0]
    SCB->SCR   |= SCB_SCR_SLEEPDEEP_Msk;
 8000714:	4c0f      	ldr	r4, [pc, #60]	; (8000754 <sys_sig_powerdown+0x70>)
 8000716:	6923      	ldr	r3, [r4, #16]
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6123      	str	r3, [r4, #16]
        pwr_cr1     = PWR->CR1;
 800071e:	4d11      	ldr	r5, [pc, #68]	; (8000764 <sys_sig_powerdown+0x80>)
 8000720:	682b      	ldr	r3, [r5, #0]
 8000722:	b29b      	uxth	r3, r3
        pwr_cr1    &= ~(PWR_CR1_LPR | PWR_CR1_DBP | 7);
 8000724:	f423 4382 	bic.w	r3, r3, #16640	; 0x4100
 8000728:	f023 0307 	bic.w	r3, r3, #7
        pwr_cr1    |= 2;
 800072c:	f043 0302 	orr.w	r3, r3, #2
        PWR->CR1    = pwr_cr1;
 8000730:	602b      	str	r3, [r5, #0]
    EXTI->PR1   = 0;
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <sys_sig_powerdown+0x84>)
 8000734:	615a      	str	r2, [r3, #20]
    EXTI->PR2   = 0;
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
    platform_enable_interrupts();
 8000738:	f006 fc0c 	bl	8006f54 <platform_enable_interrupts>
    __WFI();
 800073c:	bf30      	wfi
    PWR->CR1       |= PWR_CR1_DBP;
 800073e:	682b      	ldr	r3, [r5, #0]
 8000740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000744:	602b      	str	r3, [r5, #0]
    SCB->SCR       &= ~((ot_u32)SCB_SCR_SLEEPDEEP_Msk);
 8000746:	6923      	ldr	r3, [r4, #16]
 8000748:	f023 0304 	bic.w	r3, r3, #4
 800074c:	6123      	str	r3, [r4, #16]
    RCC->AHB2ENR    = rcc_ahb2enr_saved;
 800074e:	64f7      	str	r7, [r6, #76]	; 0x4c
 8000750:	e7d4      	b.n	80006fc <sys_sig_powerdown+0x18>
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	40021000 	.word	0x40021000
 800075c:	08009050 	.word	0x08009050
 8000760:	e000e010 	.word	0xe000e010
 8000764:	40007000 	.word	0x40007000
 8000768:	40010400 	.word	0x40010400

0800076c <alp_proc>:




#ifdef EXTF_alp_proc
ot_bool alp_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 800076c:	b538      	push	{r3, r4, r5, lr}
 800076e:	4604      	mov	r4, r0
 8000770:	460d      	mov	r5, r1
    };

    ot_u8 alp_handle;

    // Always flush payload length of output before any data is written
    alp->outrec.plength = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	70c3      	strb	r3, [r0, #3]

    /// <LI> IDs in range 0-to-ALP_FUNCTIONS are standardized, or psuedo-standardized </LI>
    /// <LI> IDs in range 128-to-(128+ALP_API) are mapped OTAPI functions </LI>
    /// <LI> IDs outside this range get pushed to ALP_EXT </LI>
    //alp_handle = alp->inq->getcursor[2];
    alp_handle = INREC(alp, ID);
 8000776:	f06f 0101 	mvn.w	r1, #1
 800077a:	6880      	ldr	r0, [r0, #8]
 800077c:	f005 fb32 	bl	8005de4 <q_getcursor_val>

    //ASAPI section
    if (alp_handle > 7) {
 8000780:	2807      	cmp	r0, #7
 8000782:	d900      	bls.n	8000786 <alp_proc+0x1a>
        alp_handle = 8;
 8000784:	2008      	movs	r0, #8
    }
    alp_handle = (ot_u8)proc[alp_handle](alp, user_id);
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <alp_proc+0x30>)
 8000788:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800078c:	4629      	mov	r1, r5
 800078e:	4620      	mov	r0, r4
 8000790:	4798      	blx	r3
    /// If the output bookmark is non-Null, there is output chunking.  Else,
    /// the output message is complete (ended)
    ///@todo Bookmarked has been refactored, and is not currently supported... sort it.
    //alp->OUTREC(_FLAGS)   &= ~ALP_FLAG_ME;
    //alp->OUTREC(_FLAGS)   |= (alp->BOOKMARK_OUT) ? ALP_FLAG_CF : ALP_FLAG_ME;
    alp->OUTREC(FLAGS)   |= ALP_FLAG_ME;   //Temporary fix
 8000792:	78a3      	ldrb	r3, [r4, #2]
 8000794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000798:	70a3      	strb	r3, [r4, #2]

    // Return True (atomic) or False (non-atomic)
    return (ot_bool)alp_handle;
}
 800079a:	bd38      	pop	{r3, r4, r5, pc}
 800079c:	08009058 	.word	0x08009058

080007a0 <sub_release_record>:
    }
}


static void sub_release_record(ot_queue* appq) {
    appq->front    += appq->front[1] + 4;
 80007a0:	68c3      	ldr	r3, [r0, #12]
 80007a2:	785a      	ldrb	r2, [r3, #1]
 80007a4:	3204      	adds	r2, #4
 80007a6:	4413      	add	r3, r2
 80007a8:	60c3      	str	r3, [r0, #12]
    appq->getcursor = appq->front;
 80007aa:	6043      	str	r3, [r0, #4]
}
 80007ac:	4770      	bx	lr
	...

080007b0 <sub_q_purge>:
static void sub_q_purge(ot_queue* q) {
 80007b0:	b508      	push	{r3, lr}
    if (q_length(q) <= 0) {
 80007b2:	f005 fb1a 	bl	8005dea <q_length>
 80007b6:	2800      	cmp	r0, #0
 80007b8:	dd00      	ble.n	80007bc <sub_q_purge+0xc>
}
 80007ba:	bd08      	pop	{r3, pc}
        q_init(&srv.q, srv_buffer, 256);
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <sub_q_purge+0x20>)
 80007be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c2:	4601      	mov	r1, r0
 80007c4:	f500 7084 	add.w	r0, r0, #264	; 0x108
 80007c8:	f005 fb3e 	bl	8005e48 <q_init>
}
 80007cc:	e7f5      	b.n	80007ba <sub_q_purge+0xa>
 80007ce:	bf00      	nop
 80007d0:	200001d4 	.word	0x200001d4

080007d4 <sub_retrieve_record>:


static ot_u8* sub_retrieve_record(alp_record* apprec, ot_queue* appq) {
 80007d4:	b510      	push	{r4, lr}
 80007d6:	460c      	mov	r4, r1
    memcpy((ot_u8*)&apprec->flags, appq->getcursor, 4);
 80007d8:	2204      	movs	r2, #4
 80007da:	6849      	ldr	r1, [r1, #4]
 80007dc:	f006 fef8 	bl	80075d0 <ot_memcpy>
    appq->getcursor    += 4;
 80007e0:	6863      	ldr	r3, [r4, #4]
 80007e2:	3304      	adds	r3, #4
 80007e4:	6063      	str	r3, [r4, #4]
    return appq->front;
}
 80007e6:	68e0      	ldr	r0, [r4, #12]
 80007e8:	bd10      	pop	{r4, pc}

080007ea <sub_check_more_records>:

static ot_u8 sub_check_more_records(ot_queue* appq) {
 80007ea:	b508      	push	{r3, lr}
    return (q_span(appq) > 0);
 80007ec:	f005 fb02 	bl	8005df4 <q_span>
}
 80007f0:	2800      	cmp	r0, #0
 80007f2:	bfd4      	ite	le
 80007f4:	2000      	movle	r0, #0
 80007f6:	2001      	movgt	r0, #1
 80007f8:	bd08      	pop	{r3, pc}
	...

080007fc <sub_test_stream>:
ot_int sub_test_stream(ot_u8* msg, ot_u8 cmd, ot_u8 ext) {
 80007fc:	b430      	push	{r4, r5}
 80007fe:	b082      	sub	sp, #8
    test_len    = base_std[cmd&31];
 8000800:	f001 031f 	and.w	r3, r1, #31
 8000804:	4c1b      	ldr	r4, [pc, #108]	; (8000874 <sub_test_stream+0x78>)
 8000806:	5ce5      	ldrb	r5, [r4, r3]
    test_len   += ext_std[(ext>>5) & 3];
 8000808:	f3c2 1341 	ubfx	r3, r2, #5, #2
 800080c:	441c      	add	r4, r3
 800080e:	f894 4020 	ldrb.w	r4, [r4, #32]
 8000812:	442c      	add	r4, r5
    msg_curs    = msg + test_len;
 8000814:	1903      	adds	r3, r0, r4
    if (cmd & ASAPI_CMD_DLLS) {
 8000816:	f011 0f04 	tst.w	r1, #4
 800081a:	d003      	beq.n	8000824 <sub_test_stream+0x28>
        test_len    = 2 + ((msg_curs[0] == 0) << 4);
 800081c:	5d04      	ldrb	r4, [r0, r4]
 800081e:	b9bc      	cbnz	r4, 8000850 <sub_test_stream+0x54>
 8000820:	2412      	movs	r4, #18
        msg_curs   += test_len;  
 8000822:	4423      	add	r3, r4
    if (cmd & ASAPI_CMD_ANYCAST) {
 8000824:	f011 0f02 	tst.w	r1, #2
 8000828:	d11d      	bne.n	8000866 <sub_test_stream+0x6a>
    if (ext & ASAPI_EXT_UDP) {
 800082a:	f012 0f20 	tst.w	r2, #32
 800082e:	d00a      	beq.n	8000846 <sub_test_stream+0x4a>
        ((ot_u8*)&test_len)[UPPER]  = msg_curs[0];
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	f88d 2007 	strb.w	r2, [sp, #7]
        ((ot_u8*)&test_len)[LOWER]  = msg_curs[1];
 8000836:	785a      	ldrb	r2, [r3, #1]
 8000838:	f88d 2006 	strb.w	r2, [sp, #6]
        test_len                   += ASAPI_UDP_SIZE;
 800083c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000840:	3204      	adds	r2, #4
        msg_curs                   += test_len;
 8000842:	fa13 f382 	uxtah	r3, r3, r2
    return (ot_int)(msg_curs - msg);
 8000846:	1a18      	subs	r0, r3, r0
}
 8000848:	b200      	sxth	r0, r0
 800084a:	b002      	add	sp, #8
 800084c:	bc30      	pop	{r4, r5}
 800084e:	4770      	bx	lr
        test_len    = 2 + ((msg_curs[0] == 0) << 4);
 8000850:	2402      	movs	r4, #2
 8000852:	e7e6      	b.n	8000822 <sub_test_stream+0x26>
        test_len    = (msg_curs[0] & 0x80) ? msg_curs[1]<<1 : msg_curs[1];
 8000854:	785c      	ldrb	r4, [r3, #1]
 8000856:	0064      	lsls	r4, r4, #1
        test_len   += 2;
 8000858:	3402      	adds	r4, #2
        msg_curs   += test_len;
 800085a:	4423      	add	r3, r4
 800085c:	f001 040b 	and.w	r4, r1, #11
            cmd = 0;
 8000860:	2100      	movs	r1, #0
        if ((cmd & (ASAPI_CMD_MULTICAST+ASAPI_CMD_INIT)) == (ASAPI_CMD_MULTICAST+ASAPI_CMD_INIT)) {
 8000862:	2c0b      	cmp	r4, #11
 8000864:	d1e1      	bne.n	800082a <sub_test_stream+0x2e>
        test_len    = (msg_curs[0] & 0x80) ? msg_curs[1]<<1 : msg_curs[1];
 8000866:	f993 4000 	ldrsb.w	r4, [r3]
 800086a:	2c00      	cmp	r4, #0
 800086c:	dbf2      	blt.n	8000854 <sub_test_stream+0x58>
 800086e:	785c      	ldrb	r4, [r3, #1]
 8000870:	e7f2      	b.n	8000858 <sub_test_stream+0x5c>
 8000872:	bf00      	nop
 8000874:	0800907c 	.word	0x0800907c

08000878 <asapi_init_srv>:
void asapi_init_srv() {
 8000878:	b508      	push	{r3, lr}
    srv.alp         = NULL;
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <asapi_init_srv+0x1c>)
 800087c:	2300      	movs	r3, #0
 800087e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
    q_init(&srv.q, srv_buffer, 256);
 8000882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000886:	4601      	mov	r1, r0
 8000888:	f500 7084 	add.w	r0, r0, #264	; 0x108
 800088c:	f005 fadc 	bl	8005e48 <q_init>
}
 8000890:	bd08      	pop	{r3, pc}
 8000892:	bf00      	nop
 8000894:	200001d4 	.word	0x200001d4

08000898 <sub_stop_srv>:
static void sub_stop_srv() {
 8000898:	b508      	push	{r3, lr}
    session_app_purge(&asapi_applet);
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <sub_stop_srv+0x10>)
 800089c:	f004 f938 	bl	8004b10 <session_app_purge>
    asapi_init_srv();
 80008a0:	f7ff ffea 	bl	8000878 <asapi_init_srv>
}
 80008a4:	bd08      	pop	{r3, pc}
 80008a6:	bf00      	nop
 80008a8:	08000989 	.word	0x08000989

080008ac <sub_start_session>:





static ot_int sub_start_session(alp_tmpl* alp) {
 80008ac:	b530      	push	{r4, r5, lr}
 80008ae:	b087      	sub	sp, #28
    alp_record      rec;
    advert_tmpl     adv;

    /// 1. Start with a blank session creation template.  It will get updated
    ///    later, either in the advertising setup or the applet itself.
    memset((ot_u8*)&s_tmpl, 0, sizeof(session_tmpl));
 80008b0:	2206      	movs	r2, #6
 80008b2:	2100      	movs	r1, #0
 80008b4:	a804      	add	r0, sp, #16
 80008b6:	f006 fe97 	bl	80075e8 <ot_memset>
    ///      advertising request that follows.
    
    /// 2. The first record must be an initialization record.  Advertising can
    ///    be used with init.type_code = 1.  With init.type_code = 0, no 
    ///    advertising is performed, simply a following request is processed.
    sub_retrieve_record(&rec, &srv.q);
 80008ba:	4930      	ldr	r1, [pc, #192]	; (800097c <sub_start_session+0xd0>)
 80008bc:	a803      	add	r0, sp, #12
 80008be:	f7ff ff89 	bl	80007d4 <sub_retrieve_record>
    if ((rec.cmd & ASAPI_CMD_INIT) == 0) {
 80008c2:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80008c6:	f012 0f08 	tst.w	r2, #8
 80008ca:	d04f      	beq.n	800096c <sub_start_session+0xc0>
    }
    
    /// 3. If the message contains INIT, there are no further templates in the
    ///    message (by design).  Load the INIT template and then release this
    ///    ASAPI record.
    srv.q.getcursor+= (rec.cmd & ASAPI_CMD_EXT) ? 3 : 2;    //Ext byte & transid
 80008cc:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <sub_start_session+0xd4>)
 80008ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80008d2:	f012 0f20 	tst.w	r2, #32
 80008d6:	d03f      	beq.n	8000958 <sub_start_session+0xac>
 80008d8:	2203      	movs	r2, #3
 80008da:	4c29      	ldr	r4, [pc, #164]	; (8000980 <sub_start_session+0xd4>)
 80008dc:	4413      	add	r3, r2
 80008de:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    type_code       = q_readbyte(&srv.q);
 80008e2:	f504 7484 	add.w	r4, r4, #264	; 0x108
 80008e6:	4620      	mov	r0, r4
 80008e8:	f005 fafe 	bl	8005ee8 <q_readbyte>
 80008ec:	4605      	mov	r5, r0
    s_tmpl.flags    = q_readbyte(&srv.q);       // link_flags byte
 80008ee:	4620      	mov	r0, r4
 80008f0:	f005 fafa 	bl	8005ee8 <q_readbyte>
 80008f4:	f88d 0014 	strb.w	r0, [sp, #20]
    s_tmpl.flagmask = (1<<3) | (1<<4);          // RS coding flag & VID flag    ///@todo VID usage might need extra attention
 80008f8:	2318      	movs	r3, #24
 80008fa:	f88d 3015 	strb.w	r3, [sp, #21]
    adv.duty_off    = q_readbyte(&srv.q);
 80008fe:	4620      	mov	r0, r4
 8000900:	f005 faf2 	bl	8005ee8 <q_readbyte>
 8000904:	f88d 0004 	strb.w	r0, [sp, #4]
    adv.duty_on     = q_readbyte(&srv.q);
 8000908:	4620      	mov	r0, r4
 800090a:	f005 faed 	bl	8005ee8 <q_readbyte>
 800090e:	f88d 0005 	strb.w	r0, [sp, #5]
    adv.subnet      = q_readbyte(&srv.q);
 8000912:	4620      	mov	r0, r4
 8000914:	f005 fae8 	bl	8005ee8 <q_readbyte>
 8000918:	f88d 0006 	strb.w	r0, [sp, #6]
    adv.channel     = q_readbyte(&srv.q);
 800091c:	4620      	mov	r0, r4
 800091e:	f005 fae3 	bl	8005ee8 <q_readbyte>
 8000922:	f88d 0007 	strb.w	r0, [sp, #7]
    s_tmpl.channel  = adv.channel;
 8000926:	f88d 0011 	strb.w	r0, [sp, #17]
    adv.duration    = q_readshort(&srv.q);
 800092a:	4620      	mov	r0, r4
 800092c:	f005 fae1 	bl	8005ef2 <q_readshort>
 8000930:	f8ad 0008 	strh.w	r0, [sp, #8]
    sub_release_record(&srv.q);                 // We are done with init record
 8000934:	4620      	mov	r0, r4
 8000936:	f7ff ff33 	bl	80007a0 <sub_release_record>
    ///    should be performed.
    ///    <LI> 0: no explicity connection initialization, just a "naked 
    ///             request" that is specified in the next record. </LI>
    ///    <LI> 1: Standard advertising followed by request in next record</LI>
    ///    <LI> 255: Strobing, no follow-on request required. </LI>
    if (type_code > 1) {
 800093a:	2d01      	cmp	r5, #1
 800093c:	d81a      	bhi.n	8000974 <sub_start_session+0xc8>
        hb_run_strobe(adv.channel, s_tmpl.flags, adv.subnet, adv.duration, adv.duty_on);
#       endif
        //srv.inprogress = False;
        return -1;
    }
    else if (sub_check_more_records(&srv.q) == 0) {
 800093e:	4620      	mov	r0, r4
 8000940:	f7ff ff53 	bl	80007ea <sub_check_more_records>
 8000944:	b190      	cbz	r0, 800096c <sub_start_session+0xc0>
        goto sub_start_session_SESSION_ERR;
    }
    else if (type_code == 0) {  
 8000946:	b94d      	cbnz	r5, 800095c <sub_start_session+0xb0>
        // Naked Request
        ///@todo this doesn't seem to work
        active = m2task_immediate(&s_tmpl, &asapi_applet);
 8000948:	490e      	ldr	r1, [pc, #56]	; (8000984 <sub_start_session+0xd8>)
 800094a:	a804      	add	r0, sp, #16
 800094c:	f003 fce6 	bl	800431c <m2task_immediate>
        active = m2task_advertise(&adv, &s_tmpl, &asapi_applet);
    }
    
    /// 5. Report error if the session stack was too full to initialize the new
    ///    session.
    if (active == NULL) {
 8000950:	b150      	cbz	r0, 8000968 <sub_start_session+0xbc>
    }
    
    ///@note removing this flag, replaced with session_app_isloaded() calls, which
    ///      are direct checks to the underlying session stack, adding reliability.
    //srv.inprogress  = True;
    return 0;
 8000952:	2000      	movs	r0, #0
    
    sub_start_session_SESSION_ERR:
    sub_stop_srv();
    return ASAPI_ERR_NOSESSION;
}
 8000954:	b007      	add	sp, #28
 8000956:	bd30      	pop	{r4, r5, pc}
    srv.q.getcursor+= (rec.cmd & ASAPI_CMD_EXT) ? 3 : 2;    //Ext byte & transid
 8000958:	2202      	movs	r2, #2
 800095a:	e7be      	b.n	80008da <sub_start_session+0x2e>
        active = m2task_advertise(&adv, &s_tmpl, &asapi_applet);
 800095c:	4a09      	ldr	r2, [pc, #36]	; (8000984 <sub_start_session+0xd8>)
 800095e:	a904      	add	r1, sp, #16
 8000960:	a801      	add	r0, sp, #4
 8000962:	f003 fce1 	bl	8004328 <m2task_advertise>
 8000966:	e7f3      	b.n	8000950 <sub_start_session+0xa4>
        return ASAPI_ERR_STACKFULL;
 8000968:	2009      	movs	r0, #9
 800096a:	e7f3      	b.n	8000954 <sub_start_session+0xa8>
    sub_stop_srv();
 800096c:	f7ff ff94 	bl	8000898 <sub_stop_srv>
    return ASAPI_ERR_NOSESSION;
 8000970:	200b      	movs	r0, #11
 8000972:	e7ef      	b.n	8000954 <sub_start_session+0xa8>
        return -1;
 8000974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000978:	e7ec      	b.n	8000954 <sub_start_session+0xa8>
 800097a:	bf00      	nop
 800097c:	200002dc 	.word	0x200002dc
 8000980:	200001d4 	.word	0x200001d4
 8000984:	08000989 	.word	0x08000989

08000988 <asapi_applet>:

///@todo make sure that hold periods start getting clocked immedately after
/// valid REQUEST is processed.  This way, the delay period shall be front- 
/// chained from the point following the request transmission.

void asapi_applet(m2session* active) {
 8000988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800098c:	b08e      	sub	sp, #56	; 0x38
 800098e:	4604      	mov	r4, r0
    ot_u8           scratch;

    /// 1. Preliminary operations
    ///@note check to session_app_isloaded() is redundant, because asapi_applet()
    ///      is only called from the session stack.
    if ((srv.alp == NULL) /*|| (session_app_isloaded(&asapi_applet) == False) */ ) {
 8000990:	4bca      	ldr	r3, [pc, #808]	; (8000cbc <asapi_applet+0x334>)
 8000992:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000996:	b12b      	cbz	r3, 80009a4 <asapi_applet+0x1c>

    /// 2. Move to the next record that matches this ID.  If it returns False,
    ///    there are no more records of this type, so ASAPI is no longer in
    ///    in progress.
    ///    Else, store the command and move past the header
    if (sub_check_more_records(&srv.q) == 0) {
 8000998:	48c9      	ldr	r0, [pc, #804]	; (8000cc0 <asapi_applet+0x338>)
 800099a:	f7ff ff26 	bl	80007ea <sub_check_more_records>
 800099e:	b930      	cbnz	r0, 80009ae <asapi_applet+0x26>
        sub_stop_srv();
 80009a0:	f7ff ff7a 	bl	8000898 <sub_stop_srv>
    return;

    /// 9. the server is closed, yet this applet was invoked.  Scrap it,
    ///    which will cause no communication to occur.
    asapi_applet_CLOSED:
    active->netstate = M2_NETSTATE_SCRAP;
 80009a4:	2304      	movs	r3, #4
 80009a6:	71e3      	strb	r3, [r4, #7]
}
 80009a8:	b00e      	add	sp, #56	; 0x38
 80009aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sub_retrieve_record(&rec, &srv.q);
 80009ae:	49c4      	ldr	r1, [pc, #784]	; (8000cc0 <asapi_applet+0x338>)
 80009b0:	a808      	add	r0, sp, #32
 80009b2:	f7ff ff0f 	bl	80007d4 <sub_retrieve_record>
    if (active->netstate & M2_NETSTATE_SCRAP) {
 80009b6:	79e3      	ldrb	r3, [r4, #7]
 80009b8:	f013 0f04 	tst.w	r3, #4
 80009bc:	f040 80de 	bne.w	8000b7c <asapi_applet+0x1f4>
    srv.q.getcursor    += ASAPI_TRANSID_SIZE;
 80009c0:	4abe      	ldr	r2, [pc, #760]	; (8000cbc <asapi_applet+0x334>)
 80009c2:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 80009c6:	3302      	adds	r3, #2
 80009c8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    ext                 = (rec.cmd & ASAPI_CMD_EXT) ? q_readbyte(&srv.q) : 0;
 80009cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80009d0:	f013 0f20 	tst.w	r3, #32
 80009d4:	d110      	bne.n	80009f8 <asapi_applet+0x70>
 80009d6:	2600      	movs	r6, #0
    if (rec.cmd & ASAPI_CMD_INIT) {
 80009d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80009dc:	f013 0f08 	tst.w	r3, #8
 80009e0:	d038      	beq.n	8000a54 <asapi_applet+0xcc>
        if (q_readbyte(&srv.q) != 1) { 
 80009e2:	48b7      	ldr	r0, [pc, #732]	; (8000cc0 <asapi_applet+0x338>)
 80009e4:	f005 fa80 	bl	8005ee8 <q_readbyte>
 80009e8:	2801      	cmp	r0, #1
 80009ea:	d00b      	beq.n	8000a04 <asapi_applet+0x7c>
            active->netstate = M2_NETSTATE_SCRAP;
 80009ec:	2304      	movs	r3, #4
 80009ee:	71e3      	strb	r3, [r4, #7]
        sub_release_record(&srv.q);
 80009f0:	48b3      	ldr	r0, [pc, #716]	; (8000cc0 <asapi_applet+0x338>)
 80009f2:	f7ff fed5 	bl	80007a0 <sub_release_record>
        return;
 80009f6:	e7d7      	b.n	80009a8 <asapi_applet+0x20>
    ext                 = (rec.cmd & ASAPI_CMD_EXT) ? q_readbyte(&srv.q) : 0;
 80009f8:	f502 7084 	add.w	r0, r2, #264	; 0x108
 80009fc:	f005 fa74 	bl	8005ee8 <q_readbyte>
 8000a00:	4606      	mov	r6, r0
 8000a02:	e7e9      	b.n	80009d8 <asapi_applet+0x50>
            active->netstate    = (M2_NETFLAG_BG | M2_NETFLAG_STREAM | M2_NETSTATE_REQTX | M2_NETSTATE_INIT);
 8000a04:	23c8      	movs	r3, #200	; 0xc8
 8000a06:	71e3      	strb	r3, [r4, #7]
            active->flags      |= (3<<3) & q_readbyte(&srv.q);      // lc flags
 8000a08:	4eac      	ldr	r6, [pc, #688]	; (8000cbc <asapi_applet+0x334>)
 8000a0a:	f506 7584 	add.w	r5, r6, #264	; 0x108
 8000a0e:	4628      	mov	r0, r5
 8000a10:	f005 fa6a 	bl	8005ee8 <q_readbyte>
 8000a14:	f000 0018 	and.w	r0, r0, #24
 8000a18:	7ae3      	ldrb	r3, [r4, #11]
 8000a1a:	4318      	orrs	r0, r3
 8000a1c:	72e0      	strb	r0, [r4, #11]
            srv.q.getcursor    += 2;                                // go past duty-cycle flags (not supported)
 8000a1e:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
 8000a22:	3302      	adds	r3, #2
 8000a24:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
            active->subnet      = q_readbyte(&srv.q);
 8000a28:	4628      	mov	r0, r5
 8000a2a:	f005 fa5d 	bl	8005ee8 <q_readbyte>
 8000a2e:	72a0      	strb	r0, [r4, #10]
            active->channel     = q_readbyte(&srv.q);
 8000a30:	4628      	mov	r0, r5
 8000a32:	f005 fa59 	bl	8005ee8 <q_readbyte>
 8000a36:	71a0      	strb	r0, [r4, #6]
            adv_duration        = q_readshort(&srv.q);
 8000a38:	4628      	mov	r0, r5
 8000a3a:	f005 fa5a 	bl	8005ef2 <q_readshort>
 8000a3e:	4605      	mov	r5, r0
            dll_set_defaults(active);
 8000a40:	4620      	mov	r0, r4
 8000a42:	f003 fa8b 	bl	8003f5c <dll_set_defaults>
            active = session_extend(&asapi_applet, adv_duration, active->channel, M2_NETSTATE_REQTX);
 8000a46:	2300      	movs	r3, #0
 8000a48:	79a2      	ldrb	r2, [r4, #6]
 8000a4a:	4629      	mov	r1, r5
 8000a4c:	489d      	ldr	r0, [pc, #628]	; (8000cc4 <asapi_applet+0x33c>)
 8000a4e:	f004 f82d 	bl	8004aac <session_extend>
 8000a52:	e7cd      	b.n	80009f0 <asapi_applet+0x68>
    active->subnet  = q_readbyte(&srv.q);
 8000a54:	4f99      	ldr	r7, [pc, #612]	; (8000cbc <asapi_applet+0x334>)
 8000a56:	f507 7584 	add.w	r5, r7, #264	; 0x108
 8000a5a:	4628      	mov	r0, r5
 8000a5c:	f005 fa44 	bl	8005ee8 <q_readbyte>
 8000a60:	72a0      	strb	r0, [r4, #10]
    active->channel = q_readbyte(&srv.q);   // req channel
 8000a62:	4628      	mov	r0, r5
 8000a64:	f005 fa40 	bl	8005ee8 <q_readbyte>
 8000a68:	71a0      	strb	r0, [r4, #6]
    dialog.chanlist = srv.q.getcursor;
 8000a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a6e:	930d      	str	r3, [sp, #52]	; 0x34
    scratch         = q_readbyte(&srv.q);   // resp channel
 8000a70:	4628      	mov	r0, r5
 8000a72:	f005 fa39 	bl	8005ee8 <q_readbyte>
    dialog.channels = (scratch != active->channel);
 8000a76:	79a3      	ldrb	r3, [r4, #6]
 8000a78:	1a18      	subs	r0, r3, r0
 8000a7a:	bf18      	it	ne
 8000a7c:	2001      	movne	r0, #1
 8000a7e:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
    dialog.timeout  = q_readbyte(&srv.q);   // timeout code
 8000a82:	4628      	mov	r0, r5
 8000a84:	f005 fa30 	bl	8005ee8 <q_readbyte>
 8000a88:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    next_wait       = q_readshort(&srv.q);
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	f005 fa30 	bl	8005ef2 <q_readshort>
    active->flags  |= (next_wait == 0) << 7;          // M2_FLAG_LISTEN
 8000a92:	f994 300b 	ldrsb.w	r3, [r4, #11]
 8000a96:	4680      	mov	r8, r0
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	f040 8083 	bne.w	8000ba4 <asapi_applet+0x21c>
 8000a9e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	72e3      	strb	r3, [r4, #11]
    if (rec.cmd & ASAPI_CMD_DLLS) {
 8000aa8:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 8000aac:	f012 0f04 	tst.w	r2, #4
 8000ab0:	d17a      	bne.n	8000ba8 <asapi_applet+0x220>
        addressing   = (rec.cmd & ASAPI_CMD_ADDRMASK);
 8000ab2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
        if (addressing == ASAPI_CMD_UNICAST) {
 8000ab6:	f013 0f03 	tst.w	r3, #3
 8000aba:	f000 8085 	beq.w	8000bc8 <asapi_applet+0x240>
            addressing          = ADDR_broadcast;
 8000abe:	2001      	movs	r0, #1
        routing.hop_code    = 0;    //override hop code value
 8000ac0:	a90e      	add	r1, sp, #56	; 0x38
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f801 3d38 	strb.w	r3, [r1, #-56]!
        otapi_open_request((ADDR_Type)addressing, &routing);
 8000ac8:	f002 fca4 	bl	8003414 <otapi_open_request>
    if (rec.cmd & ASAPI_CMD_FILECOMP) {
 8000acc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8000ad0:	f013 0f02 	tst.w	r3, #2
 8000ad4:	f040 8094 	bne.w	8000c00 <asapi_applet+0x278>
    scratch = 0;
 8000ad8:	2700      	movs	r7, #0
    if (ext & ASAPI_EXT_FILECALL) {
 8000ada:	f016 0540 	ands.w	r5, r6, #64	; 0x40
 8000ade:	f040 809c 	bne.w	8000c1a <asapi_applet+0x292>
    else if (ext & ASAPI_EXT_UDP) {
 8000ae2:	f016 0f20 	tst.w	r6, #32
 8000ae6:	d001      	beq.n	8000aec <asapi_applet+0x164>
        scratch |= (1<<4);
 8000ae8:	f047 0710 	orr.w	r7, r7, #16
        cmd.type        = m2tt_lut[(rec.cmd & ASAPI_CMD_ADDRMASK)];
 8000aec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	4a74      	ldr	r2, [pc, #464]	; (8000cc8 <asapi_applet+0x340>)
 8000af6:	4413      	add	r3, r2
 8000af8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000afc:	f88d 3000 	strb.w	r3, [sp]
        cmd.opcode      = opcode_lut[scratch];
 8000b00:	4417      	add	r7, r2
 8000b02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b06:	f88d 3001 	strb.w	r3, [sp, #1]
        cmd.extension   = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f88d 3002 	strb.w	r3, [sp, #2]
        otapi_put_command_tmpl(&local_status, &cmd);
 8000b10:	4669      	mov	r1, sp
 8000b12:	f10d 001e 	add.w	r0, sp, #30
 8000b16:	f002 fcaf 	bl	8003478 <otapi_put_command_tmpl>
        otapi_put_dialog_tmpl(&status, &dialog);
 8000b1a:	a90c      	add	r1, sp, #48	; 0x30
 8000b1c:	f10d 001f 	add.w	r0, sp, #31
 8000b20:	f002 fcea 	bl	80034f8 <otapi_put_dialog_tmpl>
        status &= local_status;
 8000b24:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8000b28:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	f88d 301f 	strb.w	r3, [sp, #31]
    if ((rec.cmd & ASAPI_CMD_ADDRMASK) == ASAPI_CMD_MULTICAST) {
 8000b32:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d079      	beq.n	8000c32 <asapi_applet+0x2aa>
    if (rec.cmd & ASAPI_CMD_LQUERY) {
 8000b3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8000b42:	f013 0f02 	tst.w	r3, #2
 8000b46:	f040 8085 	bne.w	8000c54 <asapi_applet+0x2cc>
    if (rec.cmd & ASAPI_CMD_FILECOMP) {
 8000b4a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8000b4e:	f013 0f02 	tst.w	r3, #2
 8000b52:	f040 8090 	bne.w	8000c76 <asapi_applet+0x2ee>
    if (ext & ASAPI_EXT_FILECALL) {
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	f040 809a 	bne.w	8000c90 <asapi_applet+0x308>
    else if (ext & ASAPI_EXT_UDP) {
 8000b5c:	f016 0f20 	tst.w	r6, #32
 8000b60:	f040 809c 	bne.w	8000c9c <asapi_applet+0x314>
    status &= local_status;
 8000b64:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8000b68:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	f88d 301f 	strb.w	r3, [sp, #31]
    if (status == 0) {
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f040 809c 	bne.w	8000cb0 <asapi_applet+0x328>
        active->netstate = M2_NETSTATE_SCRAP;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	71e3      	strb	r3, [r4, #7]
    sub_release_record(&srv.q);
 8000b7c:	4850      	ldr	r0, [pc, #320]	; (8000cc0 <asapi_applet+0x338>)
 8000b7e:	f7ff fe0f 	bl	80007a0 <sub_release_record>
    if (active->netstate & M2_NETSTATE_SCRAP) {
 8000b82:	79e3      	ldrb	r3, [r4, #7]
 8000b84:	f013 0f04 	tst.w	r3, #4
 8000b88:	f040 8095 	bne.w	8000cb6 <asapi_applet+0x32e>
    else if (rec.cmd & ASAPI_CMD_HOLDOPEN) {
 8000b8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8000b90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000b94:	f43f af08 	beq.w	80009a8 <asapi_applet+0x20>
        session_continue(active->applet, M2_NETSTATE_REQTX, next_wait);
 8000b98:	4642      	mov	r2, r8
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	6820      	ldr	r0, [r4, #0]
 8000b9e:	f004 f805 	bl	8004bac <session_continue>
 8000ba2:	e701      	b.n	80009a8 <asapi_applet+0x20>
    active->flags  |= (next_wait == 0) << 7;          // M2_FLAG_LISTEN
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e77c      	b.n	8000aa2 <asapi_applet+0x11a>
        active->flags  |= M2_FLAG_DLLS;
 8000ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bac:	72e3      	strb	r3, [r4, #11]
        active->extra   = q_readbyte(&srv.q);           // Key-Index to use for encryption
 8000bae:	4f44      	ldr	r7, [pc, #272]	; (8000cc0 <asapi_applet+0x338>)
 8000bb0:	4638      	mov	r0, r7
 8000bb2:	f005 f999 	bl	8005ee8 <q_readbyte>
 8000bb6:	7220      	strb	r0, [r4, #8]
        active->extra  |= (q_readbyte(&srv.q) << 7);    // User=1, Root=0
 8000bb8:	4638      	mov	r0, r7
 8000bba:	f005 f995 	bl	8005ee8 <q_readbyte>
 8000bbe:	7a23      	ldrb	r3, [r4, #8]
 8000bc0:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8000bc4:	7220      	strb	r0, [r4, #8]
 8000bc6:	e774      	b.n	8000ab2 <asapi_applet+0x12a>
            routing.hop_code    = q_readbyte(&srv.q);
 8000bc8:	4f3d      	ldr	r7, [pc, #244]	; (8000cc0 <asapi_applet+0x338>)
 8000bca:	4638      	mov	r0, r7
 8000bcc:	f005 f98c 	bl	8005ee8 <q_readbyte>
 8000bd0:	f88d 0000 	strb.w	r0, [sp]
            routing.hop_ext     = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f88d 3001 	strb.w	r3, [sp, #1]
            routing.dlog.length = q_readbyte(&srv.q);
 8000bda:	4638      	mov	r0, r7
 8000bdc:	f005 f984 	bl	8005ee8 <q_readbyte>
 8000be0:	4601      	mov	r1, r0
 8000be2:	f88d 0004 	strb.w	r0, [sp, #4]
            routing.dlog.value  = q_markbyte(&srv.q, routing.dlog.length);
 8000be6:	4638      	mov	r0, r7
 8000be8:	f005 f947 	bl	8005e7a <q_markbyte>
 8000bec:	9002      	str	r0, [sp, #8]
            addressing         |= (routing.dlog.length == 2);   // Unicast with VID Target (3)
 8000bee:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000bf2:	2802      	cmp	r0, #2
 8000bf4:	bf14      	ite	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	2001      	moveq	r0, #1
 8000bfa:	f040 0002 	orr.w	r0, r0, #2
 8000bfe:	e75f      	b.n	8000ac0 <asapi_applet+0x138>
        alp_breakdown_isfcomp_tmpl(&srv.q, (void*)&comp);
 8000c00:	a90b      	add	r1, sp, #44	; 0x2c
 8000c02:	482f      	ldr	r0, [pc, #188]	; (8000cc0 <asapi_applet+0x338>)
 8000c04:	f004 ffe7 	bl	8005bd6 <alp_breakdown_isfcomp_tmpl>
        scratch  = (2 | (comp.is_series & 1) << 2);
 8000c08:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8000c0c:	00bf      	lsls	r7, r7, #2
 8000c0e:	f007 0704 	and.w	r7, r7, #4
 8000c12:	b27f      	sxtb	r7, r7
 8000c14:	f047 0702 	orr.w	r7, r7, #2
 8000c18:	e75f      	b.n	8000ada <asapi_applet+0x152>
        alp_breakdown_isfcall_tmpl(&srv.q, (void*)&call);
 8000c1a:	a909      	add	r1, sp, #36	; 0x24
 8000c1c:	4828      	ldr	r0, [pc, #160]	; (8000cc0 <asapi_applet+0x338>)
 8000c1e:	f004 ffe9 	bl	8005bf4 <alp_breakdown_isfcall_tmpl>
        scratch |= (2 | (call.is_series & 1));
 8000c22:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	431f      	orrs	r7, r3
 8000c2c:	f047 0702 	orr.w	r7, r7, #2
 8000c30:	e75c      	b.n	8000aec <asapi_applet+0x164>
        alp_breakdown_query_tmpl(&srv.q, (void*)&query);
 8000c32:	4669      	mov	r1, sp
 8000c34:	4822      	ldr	r0, [pc, #136]	; (8000cc0 <asapi_applet+0x338>)
 8000c36:	f004 ff9d 	bl	8005b74 <alp_breakdown_query_tmpl>
        otapi_put_query_tmpl(&local_status, &query);
 8000c3a:	4669      	mov	r1, sp
 8000c3c:	f10d 001e 	add.w	r0, sp, #30
 8000c40:	f002 fc96 	bl	8003570 <otapi_put_query_tmpl>
        status &= local_status;
 8000c44:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8000c48:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	f88d 301f 	strb.w	r3, [sp, #31]
 8000c52:	e774      	b.n	8000b3e <asapi_applet+0x1b6>
        alp_breakdown_query_tmpl(&srv.q, (void*)&query);
 8000c54:	4669      	mov	r1, sp
 8000c56:	481a      	ldr	r0, [pc, #104]	; (8000cc0 <asapi_applet+0x338>)
 8000c58:	f004 ff8c 	bl	8005b74 <alp_breakdown_query_tmpl>
        otapi_put_query_tmpl(&local_status, &query);
 8000c5c:	4669      	mov	r1, sp
 8000c5e:	f10d 001e 	add.w	r0, sp, #30
 8000c62:	f002 fc85 	bl	8003570 <otapi_put_query_tmpl>
        status &= local_status;
 8000c66:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8000c6a:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	f88d 301f 	strb.w	r3, [sp, #31]
 8000c74:	e769      	b.n	8000b4a <asapi_applet+0x1c2>
        otapi_put_isf_comp(&local_status, &comp);
 8000c76:	a90b      	add	r1, sp, #44	; 0x2c
 8000c78:	f10d 001e 	add.w	r0, sp, #30
 8000c7c:	f002 fcb8 	bl	80035f0 <otapi_put_isf_comp>
        status &= local_status;
 8000c80:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8000c84:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	f88d 301f 	strb.w	r3, [sp, #31]
 8000c8e:	e762      	b.n	8000b56 <asapi_applet+0x1ce>
        otapi_put_isf_call(&local_status, &call);
 8000c90:	a909      	add	r1, sp, #36	; 0x24
 8000c92:	f10d 001e 	add.w	r0, sp, #30
 8000c96:	f002 fcc3 	bl	8003620 <otapi_put_isf_call>
 8000c9a:	e763      	b.n	8000b64 <asapi_applet+0x1dc>
        alp_breakdown_udp_tmpl(&srv.q, (void*)&udp);
 8000c9c:	4669      	mov	r1, sp
 8000c9e:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <asapi_applet+0x338>)
 8000ca0:	f004 ff84 	bl	8005bac <alp_breakdown_udp_tmpl>
        otapi_put_udp_tmpl(&local_status, &udp);
 8000ca4:	4669      	mov	r1, sp
 8000ca6:	f10d 001e 	add.w	r0, sp, #30
 8000caa:	f002 fcd7 	bl	800365c <otapi_put_udp_tmpl>
 8000cae:	e759      	b.n	8000b64 <asapi_applet+0x1dc>
        otapi_close_request();
 8000cb0:	f002 fbd0 	bl	8003454 <otapi_close_request>
 8000cb4:	e762      	b.n	8000b7c <asapi_applet+0x1f4>
        sub_stop_srv();
 8000cb6:	f7ff fdef 	bl	8000898 <sub_stop_srv>
 8000cba:	e675      	b.n	80009a8 <asapi_applet+0x20>
 8000cbc:	200001d4 	.word	0x200001d4
 8000cc0:	200002dc 	.word	0x200002dc
 8000cc4:	08000989 	.word	0x08000989
 8000cc8:	0800907c 	.word	0x0800907c

08000ccc <asapi_open_srv>:
    if (srv.alp == NULL) {
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <asapi_open_srv+0x14>)
 8000cce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000cd2:	b103      	cbz	r3, 8000cd6 <asapi_open_srv+0xa>
}
 8000cd4:	4770      	bx	lr
        srv.alp         = alp;
 8000cd6:	4b02      	ldr	r3, [pc, #8]	; (8000ce0 <asapi_open_srv+0x14>)
 8000cd8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
}
 8000cdc:	e7fa      	b.n	8000cd4 <asapi_open_srv+0x8>
 8000cde:	bf00      	nop
 8000ce0:	200001d4 	.word	0x200001d4

08000ce4 <asapi_proc>:
ot_bool asapi_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 8000ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce8:	4604      	mov	r4, r0
    if (srv.alp != alp) {
 8000cea:	4b47      	ldr	r3, [pc, #284]	; (8000e08 <asapi_proc+0x124>)
 8000cec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000cf0:	4283      	cmp	r3, r0
 8000cf2:	d009      	beq.n	8000d08 <asapi_proc+0x24>
        if (srv.alp == NULL) {
 8000cf4:	b133      	cbz	r3, 8000d04 <asapi_proc+0x20>
            errcode = ASAPI_ERR_SERVERBUSY;
 8000cf6:	2501      	movs	r5, #1
    if (inrec_cmd & ASAPI_CMD_RESPONSE) {
 8000cf8:	f016 0f80 	tst.w	r6, #128	; 0x80
 8000cfc:	d169      	bne.n	8000dd2 <asapi_proc+0xee>
}
 8000cfe:	2001      	movs	r0, #1
 8000d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            asapi_open_srv(alp);
 8000d04:	f7ff ffe2 	bl	8000ccc <asapi_open_srv>
    inrec_plen  = INREC(alp, PLEN);
 8000d08:	f06f 0102 	mvn.w	r1, #2
 8000d0c:	68a0      	ldr	r0, [r4, #8]
 8000d0e:	f005 f869 	bl	8005de4 <q_getcursor_val>
 8000d12:	4680      	mov	r8, r0
    inrec_cmd   = INREC(alp, CMD);
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d18:	68a0      	ldr	r0, [r4, #8]
 8000d1a:	f005 f863 	bl	8005de4 <q_getcursor_val>
 8000d1e:	4606      	mov	r6, r0
    if (inrec_cmd & ASAPI_CMD_STATUS) {
 8000d20:	f010 0f10 	tst.w	r0, #16
 8000d24:	d00a      	beq.n	8000d3c <asapi_proc+0x58>
        if (inrec_cmd & ASAPI_CMD_INIT) {  // KILL
 8000d26:	f010 0f08 	tst.w	r0, #8
 8000d2a:	d101      	bne.n	8000d30 <asapi_proc+0x4c>
        errcode = ASAPI_ERR_FLUSH;
 8000d2c:	25ff      	movs	r5, #255	; 0xff
 8000d2e:	e7e3      	b.n	8000cf8 <asapi_proc+0x14>
            dll_refresh();
 8000d30:	f003 fa12 	bl	8004158 <dll_refresh>
            sub_stop_srv();
 8000d34:	f7ff fdb0 	bl	8000898 <sub_stop_srv>
        errcode = ASAPI_ERR_FLUSH;
 8000d38:	25ff      	movs	r5, #255	; 0xff
 8000d3a:	e7dd      	b.n	8000cf8 <asapi_proc+0x14>
    payload             = &alp->inq->getcursor[0];
 8000d3c:	68a3      	ldr	r3, [r4, #8]
 8000d3e:	6858      	ldr	r0, [r3, #4]
    tid.ubyte[UPPER]    = payload[0];
 8000d40:	7803      	ldrb	r3, [r0, #0]
 8000d42:	f04f 0700 	mov.w	r7, #0
 8000d46:	f363 270f 	bfi	r7, r3, #8, #8
    tid.ubyte[LOWER]    = payload[1];
 8000d4a:	7843      	ldrb	r3, [r0, #1]
 8000d4c:	f363 0707 	bfi	r7, r3, #0, #8
    ext_value           = (inrec_cmd & ASAPI_CMD_EXT) ? payload[2] : 0;
 8000d50:	f016 0f20 	tst.w	r6, #32
 8000d54:	d015      	beq.n	8000d82 <asapi_proc+0x9e>
 8000d56:	7882      	ldrb	r2, [r0, #2]
    len_check           = sub_test_stream(payload, inrec_cmd, ext_value);
 8000d58:	4631      	mov	r1, r6
 8000d5a:	f7ff fd4f 	bl	80007fc <sub_test_stream>
    len_check          -= (ot_int)inrec_plen;
 8000d5e:	fa1f f888 	uxth.w	r8, r8
 8000d62:	eba0 0008 	sub.w	r0, r0, r8
 8000d66:	b200      	sxth	r0, r0
    len_check           = (len_check < 0) - (len_check > 0);
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	bfd4      	ite	le
 8000d6c:	2500      	movle	r5, #0
 8000d6e:	2501      	movgt	r5, #1
 8000d70:	ebc5 75d0 	rsb	r5, r5, r0, lsr #31
 8000d74:	b2ad      	uxth	r5, r5
 8000d76:	b22b      	sxth	r3, r5
    if (len_check) {
 8000d78:	b12b      	cbz	r3, 8000d86 <asapi_proc+0xa2>
        errcode = ASAPI_ERR_BADDATA + len_check;
 8000d7a:	b2ed      	uxtb	r5, r5
 8000d7c:	3506      	adds	r5, #6
 8000d7e:	b2ed      	uxtb	r5, r5
        goto asapi_proc_END;
 8000d80:	e7ba      	b.n	8000cf8 <asapi_proc+0x14>
    ext_value           = (inrec_cmd & ASAPI_CMD_EXT) ? payload[2] : 0;
 8000d82:	2200      	movs	r2, #0
 8000d84:	e7e8      	b.n	8000d58 <asapi_proc+0x74>
    sub_q_purge(&srv.q);
 8000d86:	4d21      	ldr	r5, [pc, #132]	; (8000e0c <asapi_proc+0x128>)
 8000d88:	4628      	mov	r0, r5
 8000d8a:	f7ff fd11 	bl	80007b0 <sub_q_purge>
    len_check = 4 + inrec_plen;
 8000d8e:	f108 0804 	add.w	r8, r8, #4
 8000d92:	fa0f f888 	sxth.w	r8, r8
    if (q_writespace(&srv.q) < len_check) {
 8000d96:	4628      	mov	r0, r5
 8000d98:	f005 f831 	bl	8005dfe <q_writespace>
 8000d9c:	4540      	cmp	r0, r8
 8000d9e:	da01      	bge.n	8000da4 <asapi_proc+0xc0>
        errcode = ASAPI_ERR_STACKFULL;
 8000da0:	2509      	movs	r5, #9
 8000da2:	e7a9      	b.n	8000cf8 <asapi_proc+0x14>
    q_writestring(&srv.q, &alp->inq->getcursor[-4], len_check);
 8000da4:	68a3      	ldr	r3, [r4, #8]
 8000da6:	6859      	ldr	r1, [r3, #4]
 8000da8:	4642      	mov	r2, r8
 8000daa:	3904      	subs	r1, #4
 8000dac:	4628      	mov	r0, r5
 8000dae:	f005 f8df 	bl	8005f70 <q_writestring>
    if ((inrec_cmd & ASAPI_CMD_HOLDOPEN) == 0) {
 8000db2:	f016 0f40 	tst.w	r6, #64	; 0x40
 8000db6:	d001      	beq.n	8000dbc <asapi_proc+0xd8>
    ot_u8       errcode     = 0;
 8000db8:	2500      	movs	r5, #0
 8000dba:	e79d      	b.n	8000cf8 <asapi_proc+0x14>
        if (session_app_isloaded(&asapi_applet) == False) {
 8000dbc:	4814      	ldr	r0, [pc, #80]	; (8000e10 <asapi_proc+0x12c>)
 8000dbe:	f003 febd 	bl	8004b3c <session_app_isloaded>
 8000dc2:	b108      	cbz	r0, 8000dc8 <asapi_proc+0xe4>
    ot_u8       errcode     = 0;
 8000dc4:	2500      	movs	r5, #0
 8000dc6:	e797      	b.n	8000cf8 <asapi_proc+0x14>
            errcode = sub_start_session(alp);
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f7ff fd6f 	bl	80008ac <sub_start_session>
 8000dce:	b2c5      	uxtb	r5, r0
 8000dd0:	e792      	b.n	8000cf8 <asapi_proc+0x14>
        alp->OUTREC(CMD) |= ASAPI_CMD_STATUS;
 8000dd2:	7963      	ldrb	r3, [r4, #5]
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	7163      	strb	r3, [r4, #5]
        alp->OUTREC(PLEN) = 6;
 8000dda:	2306      	movs	r3, #6
 8000ddc:	70e3      	strb	r3, [r4, #3]
        q_writeshort(alp->outq, tid.ushort);                // Write transaction ID
 8000dde:	b2b9      	uxth	r1, r7
 8000de0:	68e0      	ldr	r0, [r4, #12]
 8000de2:	f005 f854 	bl	8005e8e <q_writeshort>
        q_writebyte(alp->outq, 0);                          // RFU byte
 8000de6:	2100      	movs	r1, #0
 8000de8:	68e0      	ldr	r0, [r4, #12]
 8000dea:	f005 f84b 	bl	8005e84 <q_writebyte>
        q_writebyte(alp->outq, errcode);                    // Write Error code
 8000dee:	4629      	mov	r1, r5
 8000df0:	68e0      	ldr	r0, [r4, #12]
 8000df2:	f005 f847 	bl	8005e84 <q_writebyte>
        q_writeshort(alp->outq, q_writespace(&srv.q));      // Space remaining in ALP queue
 8000df6:	68e4      	ldr	r4, [r4, #12]
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <asapi_proc+0x128>)
 8000dfa:	f005 f800 	bl	8005dfe <q_writespace>
 8000dfe:	b281      	uxth	r1, r0
 8000e00:	4620      	mov	r0, r4
 8000e02:	f005 f844 	bl	8005e8e <q_writeshort>
 8000e06:	e77a      	b.n	8000cfe <asapi_proc+0x1a>
 8000e08:	200001d4 	.word	0x200001d4
 8000e0c:	200002dc 	.word	0x200002dc
 8000e10:	08000989 	.word	0x08000989

08000e14 <sx127x_get_bandplan>:




ot_u8* sx127x_get_bandplan(ot_u8 region_code) {
    if (region_code > 2) {
 8000e14:	2802      	cmp	r0, #2
 8000e16:	d900      	bls.n	8000e1a <sx127x_get_bandplan+0x6>
        region_code = 0;
 8000e18:	2000      	movs	r0, #0
    }
    return (ot_u8*)&bandplan_lut[region_code];
}
 8000e1a:	4b02      	ldr	r3, [pc, #8]	; (8000e24 <sx127x_get_bandplan+0x10>)
 8000e1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <sx127x_get_chanregs>:


ot_u8* sx127x_get_chanregs(ot_u8 region_code, ot_u8 chan_ordinal) {
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	460c      	mov	r4, r1
    ot_u8* bandplan = sx127x_get_bandplan(region_code);
 8000e2c:	f7ff fff2 	bl	8000e14 <sx127x_get_bandplan>
    ot_u8* chanregs = &bandplan[chan_ordinal * FREQ_SIZE];
    return chanregs;
}
 8000e30:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8000e34:	bd10      	pop	{r4, pc}

08000e36 <sx127x_configure_chan>:


void sx127x_configure_chan(ot_u8 region_code, ot_u8 chan_ordinal) {
 8000e36:	b508      	push	{r3, lr}
    ot_u8* chanregs = sx127x_get_chanregs(region_code, chan_ordinal);
 8000e38:	f7ff fff6 	bl	8000e28 <sx127x_get_chanregs>
    sx127x_spibus_io(4, 0, chanregs);
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2004      	movs	r0, #4
 8000e42:	f006 fad5 	bl	80073f0 <sx127x_spibus_io>
}
 8000e46:	bd08      	pop	{r3, pc}

08000e48 <sx127x_get_bw>:


ot_u8 sx127x_get_bw(ot_u8 region_code) {
    if (region_code > 2) {
 8000e48:	2802      	cmp	r0, #2
 8000e4a:	d900      	bls.n	8000e4e <sx127x_get_bw+0x6>
        region_code = 0;
 8000e4c:	2000      	movs	r0, #0
    }
    return bandwidth_lut[region_code];
}
 8000e4e:	4b01      	ldr	r3, [pc, #4]	; (8000e54 <sx127x_get_bw+0xc>)
 8000e50:	5c18      	ldrb	r0, [r3, r0]
 8000e52:	4770      	bx	lr
 8000e54:	080090c4 	.word	0x080090c4

08000e58 <sx127x_symbol_miti>:

///@todo this
ot_u16 sx127x_symbol_miti(ot_u8 region_code, ot_u8 rate_code) {
    const ot_u16* mitipersym;

    if (region_code > 2) {
 8000e58:	2802      	cmp	r0, #2
 8000e5a:	d900      	bls.n	8000e5e <sx127x_symbol_miti+0x6>
        region_code = 0;
 8000e5c:	2000      	movs	r0, #0
    }
    if (rate_code > 3) {
 8000e5e:	2903      	cmp	r1, #3
 8000e60:	d900      	bls.n	8000e64 <sx127x_symbol_miti+0xc>
        rate_code = 0;
 8000e62:	2100      	movs	r1, #0
    }

    mitipersym = mitipersym_lut[region_code];
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <sx127x_symbol_miti+0x1c>)
 8000e66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000e6a:	6843      	ldr	r3, [r0, #4]

    return mitipersym[rate_code];
}
 8000e6c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	080090c4 	.word	0x080090c4

08000e78 <sx127x_int_off>:
  * <LI> sx127x_int_clearall() </LI>
  * <LI> sx127x_int_force() </LI>
  * <LI> sx127x_int_turnon() </LI>
  * <LI> sx127x_int_turnoff() </LI>
  */
OT_WEAK void sx127x_int_off() {
 8000e78:	b508      	push	{r3, lr}
    sx127x_int_config(0);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f006 fb30 	bl	80074e0 <sx127x_int_config>
}
 8000e80:	bd08      	pop	{r3, pc}
	...

08000e84 <sx127x_int_listen>:
inline void sx127x_iocfg_tx()  {
    sx127x_int_clearall();
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_TX);
}

inline void sx127x_int_listen() {
 8000e84:	b508      	push	{r3, lr}
    sx127x.imode = MODE_Listen;
 8000e86:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <sx127x_int_listen+0x10>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_LISTEN);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f006 fb27 	bl	80074e0 <sx127x_int_config>
}
 8000e92:	bd08      	pop	{r3, pc}
 8000e94:	20002210 	.word	0x20002210

08000e98 <sx127x_int_rxdata>:

inline void sx127x_int_rxdata() {
 8000e98:	b508      	push	{r3, lr}
    sx127x.imode = MODE_RXData;
 8000e9a:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <sx127x_int_rxdata+0x10>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_RXDATA);
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f006 fb1d 	bl	80074e0 <sx127x_int_config>
}
 8000ea6:	bd08      	pop	{r3, pc}
 8000ea8:	20002210 	.word	0x20002210

08000eac <sx127x_int_rxend>:

inline void sx127x_int_rxend() {
 8000eac:	b508      	push	{r3, lr}
    sx127x.imode = MODE_RXData;
 8000eae:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <sx127x_int_rxend+0x10>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_RXEND);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f006 fb13 	bl	80074e0 <sx127x_int_config>
}
 8000eba:	bd08      	pop	{r3, pc}
 8000ebc:	20002210 	.word	0x20002210

08000ec0 <sx127x_int_csma>:

inline void sx127x_int_csma() {
 8000ec0:	b508      	push	{r3, lr}
    sx127x.imode = MODE_CSMA;
 8000ec2:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <sx127x_int_csma+0x10>)
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_CSMA);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f006 fb09 	bl	80074e0 <sx127x_int_config>
}
 8000ece:	bd08      	pop	{r3, pc}
 8000ed0:	20002210 	.word	0x20002210

08000ed4 <sx127x_int_txdata>:

inline void sx127x_int_txdata() {
 8000ed4:	b508      	push	{r3, lr}
    sx127x.imode = MODE_TXData;
 8000ed6:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <sx127x_int_txdata+0x10>)
 8000ed8:	2206      	movs	r2, #6
 8000eda:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_TXDONE);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f006 faff 	bl	80074e0 <sx127x_int_config>
}
 8000ee2:	bd08      	pop	{r3, pc}
 8000ee4:	20002210 	.word	0x20002210

08000ee8 <sx127x_irq0_isr>:


void sx127x_irq0_isr() {   sx127x_virtual_isr(sx127x.imode);     }
 8000ee8:	b508      	push	{r3, lr}
 8000eea:	4b02      	ldr	r3, [pc, #8]	; (8000ef4 <sx127x_irq0_isr+0xc>)
 8000eec:	7818      	ldrb	r0, [r3, #0]
 8000eee:	f000 fd21 	bl	8001934 <sx127x_virtual_isr>
 8000ef2:	bd08      	pop	{r3, pc}
 8000ef4:	20002210 	.word	0x20002210

08000ef8 <sx127x_irq1_isr>:
void sx127x_irq1_isr() {   sx127x_virtual_isr(sx127x.imode + 1); }
 8000ef8:	b508      	push	{r3, lr}
 8000efa:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <sx127x_irq1_isr+0x10>)
 8000efc:	7818      	ldrb	r0, [r3, #0]
 8000efe:	3001      	adds	r0, #1
 8000f00:	b2c0      	uxtb	r0, r0
 8000f02:	f000 fd17 	bl	8001934 <sx127x_virtual_isr>
 8000f06:	bd08      	pop	{r3, pc}
 8000f08:	20002210 	.word	0x20002210

08000f0c <sx127x_irq3_isr>:
void sx127x_irq2_isr() {   sx127x_virtual_isr(sx127x.imode + 2); }
void sx127x_irq3_isr() {   sx127x_virtual_isr(sx127x.imode + 3); }
 8000f0c:	b508      	push	{r3, lr}
 8000f0e:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <sx127x_irq3_isr+0x10>)
 8000f10:	7818      	ldrb	r0, [r3, #0]
 8000f12:	3003      	adds	r0, #3
 8000f14:	b2c0      	uxtb	r0, r0
 8000f16:	f000 fd0d 	bl	8001934 <sx127x_virtual_isr>
 8000f1a:	bd08      	pop	{r3, pc}
 8000f1c:	20002210 	.word	0x20002210

08000f20 <sx127x_check_cadpin>:
//            return;
//        }
//    }
}
*/
ot_bool sx127x_check_cadpin() {
 8000f20:	b508      	push	{r3, lr}
    return (ot_bool)(sx127x_cadpin_ishigh() != 0);
 8000f22:	f006 fa0e 	bl	8007342 <sx127x_cadpin_ishigh>
}
 8000f26:	3000      	adds	r0, #0
 8000f28:	bf18      	it	ne
 8000f2a:	2001      	movne	r0, #1
 8000f2c:	bd08      	pop	{r3, pc}
	...

08000f30 <sx127x_read>:
            } while (old_mode != new_mode);
        }
    }
}

ot_u8 sx127x_read(ot_u8 addr) {
 8000f30:	b500      	push	{lr}
 8000f32:	b083      	sub	sp, #12
 8000f34:	aa02      	add	r2, sp, #8
 8000f36:	f802 0d01 	strb.w	r0, [r2, #-1]!
    sx127x_spibus_io(1, 1, &addr);
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	f006 fa57 	bl	80073f0 <sx127x_spibus_io>
    return sx127x.busrx[0];
}
 8000f42:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <sx127x_read+0x1c>)
 8000f44:	78d8      	ldrb	r0, [r3, #3]
 8000f46:	b003      	add	sp, #12
 8000f48:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f4c:	20002210 	.word	0x20002210

08000f50 <sx127x_mode>:
ot_u8 sx127x_mode() {
 8000f50:	b508      	push	{r3, lr}
    return sx127x_read(RFREG_LR_OPMODE) & _OPMODE;
 8000f52:	2001      	movs	r0, #1
 8000f54:	f7ff ffec 	bl	8000f30 <sx127x_read>
}
 8000f58:	f000 0007 	and.w	r0, r0, #7
 8000f5c:	bd08      	pop	{r3, pc}
	...

08000f60 <sx127x_burstread>:

void sx127x_burstread(ot_u8 start_addr, ot_u8 length, ot_u8* data) {
 8000f60:	b530      	push	{r4, r5, lr}
 8000f62:	b083      	sub	sp, #12
 8000f64:	460d      	mov	r5, r1
 8000f66:	4614      	mov	r4, r2
 8000f68:	aa02      	add	r2, sp, #8
 8000f6a:	f802 0d01 	strb.w	r0, [r2, #-1]!
    sx127x_spibus_io(1, length, &start_addr);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f006 fa3e 	bl	80073f0 <sx127x_spibus_io>
    memcpy(data, sx127x.busrx, length);
 8000f74:	462a      	mov	r2, r5
 8000f76:	4903      	ldr	r1, [pc, #12]	; (8000f84 <sx127x_burstread+0x24>)
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f006 fb29 	bl	80075d0 <ot_memcpy>
}
 8000f7e:	b003      	add	sp, #12
 8000f80:	bd30      	pop	{r4, r5, pc}
 8000f82:	bf00      	nop
 8000f84:	20002213 	.word	0x20002213

08000f88 <sx127x_write>:

void sx127x_write(ot_u8 addr, ot_u8 data) {
 8000f88:	b500      	push	{lr}
 8000f8a:	b083      	sub	sp, #12
    ot_u8 cmd[2];
    cmd[0]  = 0x80 | addr;
 8000f8c:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8000f90:	f88d 0004 	strb.w	r0, [sp, #4]
    cmd[1]  = data;
 8000f94:	f88d 1005 	strb.w	r1, [sp, #5]
    sx127x_spibus_io(2, 0, cmd);
 8000f98:	aa01      	add	r2, sp, #4
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f006 fa27 	bl	80073f0 <sx127x_spibus_io>
}
 8000fa2:	b003      	add	sp, #12
 8000fa4:	f85d fb04 	ldr.w	pc, [sp], #4

08000fa8 <sx127x_iocfg_cad>:
inline void sx127x_iocfg_cad()  {
 8000fa8:	b508      	push	{r3, lr}
    sx127x_int_clearall();
 8000faa:	f006 faa5 	bl	80074f8 <sx127x_int_clearall>
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_CAD);
 8000fae:	21a1      	movs	r1, #161	; 0xa1
 8000fb0:	2040      	movs	r0, #64	; 0x40
 8000fb2:	f7ff ffe9 	bl	8000f88 <sx127x_write>
}
 8000fb6:	bd08      	pop	{r3, pc}

08000fb8 <sx127x_iocfg_rx>:
inline void sx127x_iocfg_rx()  {
 8000fb8:	b508      	push	{r3, lr}
    sx127x_int_clearall();
 8000fba:	f006 fa9d 	bl	80074f8 <sx127x_int_clearall>
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_RX);
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	2040      	movs	r0, #64	; 0x40
 8000fc2:	f7ff ffe1 	bl	8000f88 <sx127x_write>
}
 8000fc6:	bd08      	pop	{r3, pc}

08000fc8 <sx127x_iocfg_tx>:
inline void sx127x_iocfg_tx()  {
 8000fc8:	b508      	push	{r3, lr}
    sx127x_int_clearall();
 8000fca:	f006 fa95 	bl	80074f8 <sx127x_int_clearall>
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_TX);
 8000fce:	2140      	movs	r1, #64	; 0x40
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	f7ff ffd9 	bl	8000f88 <sx127x_write>
}
 8000fd6:	bd08      	pop	{r3, pc}

08000fd8 <sx127x_load_defaults>:
void sx127x_load_defaults() {
 8000fd8:	b510      	push	{r4, lr}
    cursor = (ot_u8*)defaults;
 8000fda:	4c05      	ldr	r4, [pc, #20]	; (8000ff0 <sx127x_load_defaults+0x18>)
    while (*cursor != 0) {
 8000fdc:	e003      	b.n	8000fe6 <sx127x_load_defaults+0xe>
        sx127x_write(cursor[0], cursor[1]);
 8000fde:	7861      	ldrb	r1, [r4, #1]
 8000fe0:	f7ff ffd2 	bl	8000f88 <sx127x_write>
        cursor += 2;
 8000fe4:	3402      	adds	r4, #2
    while (*cursor != 0) {
 8000fe6:	7820      	ldrb	r0, [r4, #0]
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d1f8      	bne.n	8000fde <sx127x_load_defaults+0x6>
}
 8000fec:	bd10      	pop	{r4, pc}
 8000fee:	bf00      	nop
 8000ff0:	080091a8 	.word	0x080091a8

08000ff4 <sx127x_strobe>:
void sx127x_strobe(ot_u8 new_mode, ot_bool blocking) {
 8000ff4:	b538      	push	{r3, r4, r5, lr}
 8000ff6:	4605      	mov	r5, r0
    if (!blocking) {
 8000ff8:	b1d1      	cbz	r1, 8001030 <sx127x_strobe+0x3c>
        ot_u8 old_mode = sx127x_mode();
 8000ffa:	f7ff ffa9 	bl	8000f50 <sx127x_mode>
 8000ffe:	4604      	mov	r4, r0
        if (old_mode != new_mode) {
 8001000:	42a8      	cmp	r0, r5
 8001002:	d01a      	beq.n	800103a <sx127x_strobe+0x46>
            sx127x_write(RFREG_LR_OPMODE, _LORAMODE|new_mode);
 8001004:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff ffbd 	bl	8000f88 <sx127x_write>
            wdog = wdog_amount[(new_mode<<1) + (old_mode!=0)];
 800100e:	3400      	adds	r4, #0
 8001010:	bf18      	it	ne
 8001012:	2401      	movne	r4, #1
 8001014:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <sx127x_strobe+0x5c>)
 800101a:	441c      	add	r4, r3
 800101c:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
                if (--wdog == 0) {
 8001020:	3c01      	subs	r4, #1
 8001022:	b2a4      	uxth	r4, r4
 8001024:	b154      	cbz	r4, 800103c <sx127x_strobe+0x48>
                old_mode = sx127x_mode();
 8001026:	f7ff ff93 	bl	8000f50 <sx127x_mode>
            } while (old_mode != new_mode);
 800102a:	4285      	cmp	r5, r0
 800102c:	d1f8      	bne.n	8001020 <sx127x_strobe+0x2c>
 800102e:	e004      	b.n	800103a <sx127x_strobe+0x46>
        sx127x_write(RFREG_LR_OPMODE, _LORAMODE|new_mode);
 8001030:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff ffa7 	bl	8000f88 <sx127x_write>
}
 800103a:	bd38      	pop	{r3, r4, r5, pc}
                    sx127x_reset();
 800103c:	f006 f989 	bl	8007352 <sx127x_reset>
                    delay_us(400);
 8001040:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001044:	f006 fa6e 	bl	8007524 <delay_us>
                    dll_init();
 8001048:	f003 f8ac 	bl	80041a4 <dll_init>
                    return;
 800104c:	e7f5      	b.n	800103a <sx127x_strobe+0x46>
 800104e:	bf00      	nop
 8001050:	080091a0 	.word	0x080091a0

08001054 <sx127x_burstwrite>:

void sx127x_burstwrite(ot_u8 start_addr, ot_u8 length, ot_u8* cmd_data) {
 8001054:	b538      	push	{r3, r4, r5, lr}
 8001056:	4614      	mov	r4, r2
    ot_u8 save;
    cmd_data--;
    save        = *cmd_data;
 8001058:	f812 5c01 	ldrb.w	r5, [r2, #-1]
    *cmd_data   = 0x80 | start_addr;
 800105c:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8001060:	f802 0c01 	strb.w	r0, [r2, #-1]
    sx127x_spibus_io(1+length, 0, cmd_data);
 8001064:	1c48      	adds	r0, r1, #1
 8001066:	3a01      	subs	r2, #1
 8001068:	2100      	movs	r1, #0
 800106a:	b2c0      	uxtb	r0, r0
 800106c:	f006 f9c0 	bl	80073f0 <sx127x_spibus_io>
    *cmd_data   = save;
 8001070:	f804 5c01 	strb.w	r5, [r4, #-1]
}
 8001074:	bd38      	pop	{r3, r4, r5, pc}
	...

08001078 <sx127x_start_counter>:
  * internal timers of the SX127x, we instead use the more reliable interval
  * timer feature of OpenTag.
  */
static ot_u32 macstamp;

void sx127x_start_counter() {
 8001078:	b508      	push	{r3, lr}
    macstamp = systim_chronstamp(NULL);
 800107a:	2000      	movs	r0, #0
 800107c:	f005 fe42 	bl	8006d04 <systim_chronstamp>
 8001080:	4b01      	ldr	r3, [pc, #4]	; (8001088 <sx127x_start_counter+0x10>)
 8001082:	6018      	str	r0, [r3, #0]
}
 8001084:	bd08      	pop	{r3, pc}
 8001086:	bf00      	nop
 8001088:	200002f0 	.word	0x200002f0

0800108c <sx127x_stop_counter>:

void sx127x_stop_counter() {
}
 800108c:	4770      	bx	lr
	...

08001090 <sx127x_get_counter>:

ot_u16 sx127x_get_counter() {
 8001090:	b510      	push	{r4, lr}
    ot_u16 value;
    value = dll.counter - (ot_u16)systim_chronstamp(&macstamp);
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <sx127x_get_counter+0x14>)
 8001094:	885c      	ldrh	r4, [r3, #2]
 8001096:	4804      	ldr	r0, [pc, #16]	; (80010a8 <sx127x_get_counter+0x18>)
 8001098:	f005 fe34 	bl	8006d04 <systim_chronstamp>
 800109c:	b280      	uxth	r0, r0
 800109e:	1a20      	subs	r0, r4, r0
    return value;
}
 80010a0:	b280      	uxth	r0, r0
 80010a2:	bd10      	pop	{r4, pc}
 80010a4:	20002654 	.word	0x20002654
 80010a8:	200002f0 	.word	0x200002f0

080010ac <sx127x_calc_rssi>:
            rssi += -157;
#       endif
#   endif
            
    return rssi;
}
 80010ac:	387d      	subs	r0, #125	; 0x7d
 80010ae:	4770      	bx	lr

080010b0 <sx127x_calc_rssithr>:
#   if defined(__SX1272__) || defined(__SX1273__)
    // SX1272/3 uses -125 as baseline, DASH7 -140
    // Clip baseline at 0
    ///@todo SATURATION INSTRUCTION: 0 minimum
    rssi_thr = (ot_int)input - (140-125);
    if (rssi_thr < 0)
 80010b0:	380f      	subs	r0, #15
 80010b2:	d401      	bmi.n	80010b8 <sx127x_calc_rssithr+0x8>
        rssi_thr = (157 - 140) + input;
#   endif
#   endif
        
    return (ot_u8)rssi_thr;
}
 80010b4:	b2c0      	uxtb	r0, r0
 80010b6:	4770      	bx	lr
        rssi_thr = 0;
 80010b8:	2000      	movs	r0, #0
 80010ba:	e7fb      	b.n	80010b4 <sx127x_calc_rssithr+0x4>

080010bc <sx127x_clip_txeirp>:
#   define _MIN_DBM_EIRP (((2*2) - RF_HDB_ATTEN) + 80)
#else
#   define _MAX_DBM_EIRP (((14*2) - RF_HDB_ATTEN) + 80)
#   define _MIN_DBM_EIRP (((-1*2) - RF_HDB_ATTEN) + 80)
#endif
    if (input_eirp > _MAX_DBM_EIRP) {
 80010bc:	2866      	cmp	r0, #102	; 0x66
 80010be:	d802      	bhi.n	80010c6 <sx127x_clip_txeirp+0xa>
        input_eirp = _MAX_DBM_EIRP;
    }
    else if (input_eirp < _MIN_DBM_EIRP) {
 80010c0:	2847      	cmp	r0, #71	; 0x47
 80010c2:	d902      	bls.n	80010ca <sx127x_clip_txeirp+0xe>
 80010c4:	4770      	bx	lr
        input_eirp = _MAX_DBM_EIRP;
 80010c6:	2066      	movs	r0, #102	; 0x66
 80010c8:	4770      	bx	lr
        input_eirp = _MIN_DBM_EIRP;
 80010ca:	2048      	movs	r0, #72	; 0x48
    
    return input_eirp;
    
#   undef _MAX_DBM_EIRP
#   undef _MIN_DBM_EIRP
}
 80010cc:	4770      	bx	lr

080010ce <sx127x_set_txpwr>:


void sx127x_set_txpwr(ot_u8 pwr_code) {
 80010ce:	b508      	push	{r3, lr}
/// i.e. eirp_code=0 => -40 dBm, eirp_code=80 => 0 dBm, etc
    ot_int dBm;
    ot_u8 padac;
    
    // get dBm
    dBm = (((ot_int)pwr_code + RF_HDB_ATTEN) >> 1) - 40;
 80010d0:	1d81      	adds	r1, r0, #6
 80010d2:	0849      	lsrs	r1, r1, #1
    dBm = dBm - 2;
    pwr_code = (1<<7) | (ot_u8)dBm & 0x0F;

#   else 
    // Convert to SX1272/3 units (PA Boost off)
    dBm = dBm + 1;
 80010d4:	3927      	subs	r1, #39	; 0x27
#	error "Unsupported LoRa device"

#endif

    // Write new PA Table to device
    sx127x_write(RFREG_LR_PACONFIG, pwr_code);
 80010d6:	f001 010f 	and.w	r1, r1, #15
 80010da:	2009      	movs	r0, #9
 80010dc:	f7ff ff54 	bl	8000f88 <sx127x_write>
}
 80010e0:	bd08      	pop	{r3, pc}
	...

080010e4 <sub_initcad>:
    ///@todo why is this commented-out?  Does it matter?
    //dll_offset_rxtimeout();
    rm2_reenter_rx(radio.evtdone);
}

void sub_initcad(void) {
 80010e4:	b508      	push	{r3, lr}
    // Set I/O for CAD detect
    sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);  
 80010e6:	21ff      	movs	r1, #255	; 0xff
 80010e8:	2012      	movs	r0, #18
 80010ea:	f7ff ff4d 	bl	8000f88 <sx127x_write>
    sx127x_iocfg_cad();
 80010ee:	f7ff ff5b 	bl	8000fa8 <sx127x_iocfg_cad>
    sx127x_int_listen();
 80010f2:	f7ff fec7 	bl	8000e84 <sx127x_int_listen>
    
    radio.state = RADIO_Listening;
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <sub_initcad+0x28>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
    /// time for CAD->RSSI is dependent on SF and BW
    /// - SF7:500kHZ = 320us
    /// - SF7:125kHZ = 1280us
    //radio_set_mactimer(?);
    
    sx127x_antsw_rx();
 80010fc:	f006 f9ef 	bl	80074de <sx127x_antsw_rx>
    sx127x_strobe(_OPMODE_CAD, False);  //non-blocking call
 8001100:	2100      	movs	r1, #0
 8001102:	2007      	movs	r0, #7
 8001104:	f7ff ff76 	bl	8000ff4 <sx127x_strobe>
}
 8001108:	bd08      	pop	{r3, pc}
 800110a:	bf00      	nop
 800110c:	200026c4 	.word	0x200026c4

08001110 <radio_init>:
OT_WEAK void radio_init(void) {
 8001110:	b508      	push	{r3, lr}
    rfctl.flags     = 0;
 8001112:	2200      	movs	r2, #0
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <radio_init+0x20>)
 8001116:	705a      	strb	r2, [r3, #1]
    radio.state     = RADIO_Idle;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <radio_init+0x24>)
 800111a:	701a      	strb	r2, [r3, #0]
    radio.evtdone   = &otutils_sig2_null;
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <radio_init+0x28>)
 800111e:	609a      	str	r2, [r3, #8]
    sx127x_init_bus();
 8001120:	f006 f930 	bl	8007384 <sx127x_init_bus>
    sx127x_load_defaults();
 8001124:	f7ff ff58 	bl	8000fd8 <sx127x_load_defaults>
    rm2_init();
 8001128:	f003 fc18 	bl	800495c <rm2_init>
}
 800112c:	bd08      	pop	{r3, pc}
 800112e:	bf00      	nop
 8001130:	20002650 	.word	0x20002650
 8001134:	200026c4 	.word	0x200026c4
 8001138:	08005fe3 	.word	0x08005fe3

0800113c <radio_set_mactimer>:
OT_WEAK void radio_set_mactimer(ot_u16 clocks) {
 800113c:	b510      	push	{r4, lr}
 800113e:	4604      	mov	r4, r0
    systim_enable_insertion();
 8001140:	f005 fdbe 	bl	8006cc0 <systim_enable_insertion>
    systim_set_insertion(clocks);
 8001144:	4620      	mov	r0, r4
 8001146:	f005 fda7 	bl	8006c98 <systim_set_insertion>
}
 800114a:	bd10      	pop	{r4, pc}

0800114c <radio_activate_queue>:
    q->options.ubyte[UPPER]    += 1;
 800114c:	78c3      	ldrb	r3, [r0, #3]
 800114e:	3301      	adds	r3, #1
 8001150:	70c3      	strb	r3, [r0, #3]
    q->options.ubyte[LOWER]     = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	7083      	strb	r3, [r0, #2]
}
 8001156:	4770      	bx	lr

08001158 <rm2_clip_txeirp>:
OT_INLINE ot_u8 rm2_clip_txeirp(ot_u8 m2_txeirp) {
 8001158:	b508      	push	{r3, lr}
    return sx127x_clip_txeirp(m2_txeirp & 0x7f);
 800115a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800115e:	f7ff ffad 	bl	80010bc <sx127x_clip_txeirp>
}
 8001162:	bd08      	pop	{r3, pc}

08001164 <rm2_calc_rssithr>:
OT_INLINE ot_u8 rm2_calc_rssithr(ot_u8 m2_rssithr) {
 8001164:	b508      	push	{r3, lr}
    return sx127x_calc_rssithr(m2_rssithr);
 8001166:	f7ff ffa3 	bl	80010b0 <sx127x_calc_rssithr>
}
 800116a:	bd08      	pop	{r3, pc}

0800116c <sub_modemconfig2_baseval>:
}
 800116c:	4b01      	ldr	r3, [pc, #4]	; (8001174 <sub_modemconfig2_baseval+0x8>)
 800116e:	5c18      	ldrb	r0, [r3, r0]
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	080091f0 	.word	0x080091f0

08001178 <rm2_channel_fastcheck>:
    if (radio.flags & RADIO_FLAG_REFRESH) {
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <rm2_channel_fastcheck+0x2c>)
 800117a:	785b      	ldrb	r3, [r3, #1]
 800117c:	f013 0f01 	tst.w	r3, #1
 8001180:	d106      	bne.n	8001190 <rm2_channel_fastcheck+0x18>
    if ((chan_id == 0) || (chan_id == phymac[0].channel)) {
 8001182:	b168      	cbz	r0, 80011a0 <rm2_channel_fastcheck+0x28>
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <rm2_channel_fastcheck+0x30>)
 8001186:	789b      	ldrb	r3, [r3, #2]
 8001188:	4283      	cmp	r3, r0
 800118a:	d007      	beq.n	800119c <rm2_channel_fastcheck+0x24>
    return False;
 800118c:	2000      	movs	r0, #0
}
 800118e:	4770      	bx	lr
        radio.flags ^= RADIO_FLAG_REFRESH;
 8001190:	f083 0301 	eor.w	r3, r3, #1
 8001194:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <rm2_channel_fastcheck+0x2c>)
 8001196:	7053      	strb	r3, [r2, #1]
        return False;
 8001198:	2000      	movs	r0, #0
 800119a:	4770      	bx	lr
        return True;
 800119c:	2001      	movs	r0, #1
 800119e:	4770      	bx	lr
 80011a0:	2001      	movs	r0, #1
 80011a2:	4770      	bx	lr
 80011a4:	200026c4 	.word	0x200026c4
 80011a8:	200026d0 	.word	0x200026d0

080011ac <rm2_enter_channel>:
OT_WEAK void rm2_enter_channel(ot_u8 old_chan_id, ot_u8 old_tx_eirp) {
 80011ac:	b538      	push	{r3, r4, r5, lr}
 80011ae:	4604      	mov	r4, r0
    if (old_tx_eirp != phymac[0].tx_eirp) {
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <rm2_enter_channel+0x58>)
 80011b2:	7918      	ldrb	r0, [r3, #4]
 80011b4:	4288      	cmp	r0, r1
 80011b6:	d109      	bne.n	80011cc <rm2_enter_channel+0x20>
    old_chan_id ^= phymac[0].channel;
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <rm2_enter_channel+0x58>)
 80011ba:	789b      	ldrb	r3, [r3, #2]
 80011bc:	405c      	eors	r4, r3
    if (old_chan_id & 0xF0) {
 80011be:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 80011c2:	d106      	bne.n	80011d2 <rm2_enter_channel+0x26>
    if (old_chan_id & 0x0F) {
 80011c4:	f014 0f0f 	tst.w	r4, #15
 80011c8:	d111      	bne.n	80011ee <rm2_enter_channel+0x42>
}
 80011ca:	bd38      	pop	{r3, r4, r5, pc}
        sx127x_set_txpwr( phymac[0].tx_eirp );
 80011cc:	f7ff ff7f 	bl	80010ce <sx127x_set_txpwr>
 80011d0:	e7f2      	b.n	80011b8 <rm2_enter_channel+0xc>
        const ot_u8* detect_regs = detection[phymac[0].channel>>4];
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <rm2_enter_channel+0x5c>)
 80011d6:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        sx127x_write(RFREG_LR_DETECTOPTIMIZE, detect_regs[0]);
 80011da:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 80011de:	2031      	movs	r0, #49	; 0x31
 80011e0:	f7ff fed2 	bl	8000f88 <sx127x_write>
        sx127x_write(RFREG_LR_DETECTIONTHRESHOLD, detect_regs[1]);
 80011e4:	7869      	ldrb	r1, [r5, #1]
 80011e6:	2037      	movs	r0, #55	; 0x37
 80011e8:	f7ff fece 	bl	8000f88 <sx127x_write>
 80011ec:	e7ea      	b.n	80011c4 <rm2_enter_channel+0x18>
        sx127x_configure_chan(phymac[0].flags, (phymac[0].channel & 0x0F)-1);
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <rm2_enter_channel+0x58>)
 80011f0:	7899      	ldrb	r1, [r3, #2]
 80011f2:	f001 010f 	and.w	r1, r1, #15
 80011f6:	3901      	subs	r1, #1
 80011f8:	b2c9      	uxtb	r1, r1
 80011fa:	7818      	ldrb	r0, [r3, #0]
 80011fc:	f7ff fe1b 	bl	8000e36 <sx127x_configure_chan>
}
 8001200:	e7e3      	b.n	80011ca <rm2_enter_channel+0x1e>
 8001202:	bf00      	nop
 8001204:	200026d0 	.word	0x200026d0
 8001208:	080091f4 	.word	0x080091f4

0800120c <rm2_mac_configure>:
}
 800120c:	4770      	bx	lr
	...

08001210 <rm2_calc_link>:
OT_WEAK void rm2_calc_link(void) {
 8001210:	b510      	push	{r4, lr}
	prssi_code			= sx127x_read(RFREG_LR_PKTRSSIVALUE);
 8001212:	201a      	movs	r0, #26
 8001214:	f7ff fe8c 	bl	8000f30 <sx127x_read>
 8001218:	4604      	mov	r4, r0
	psnr_code           = sx127x_read(RFREG_LR_PKTSNRVALUE);
 800121a:	2019      	movs	r0, #25
 800121c:	f7ff fe88 	bl	8000f30 <sx127x_read>
 8001220:	b241      	sxtb	r1, r0
	loralink.mean_snr   = (ot_s16)psnr_code;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <rm2_calc_link+0x38>)
 8001224:	8099      	strh	r1, [r3, #4]
    radio.last_rssi     = sx127x_calc_rssi(prssi_code, psnr_code);
 8001226:	4620      	mov	r0, r4
 8001228:	f7ff ff40 	bl	80010ac <sx127x_calc_rssi>
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <rm2_calc_link+0x3c>)
 800122e:	8090      	strh	r0, [r2, #4]
    radio.last_linkloss = (ot_int)(rxq.front[2] & 0x7F) - 80 - RF_HDB_RXATTEN;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <rm2_calc_link+0x40>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	789b      	ldrb	r3, [r3, #2]
 8001236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800123a:	3b56      	subs	r3, #86	; 0x56
    radio.last_linkloss = (radio.last_linkloss - radio.last_rssi*2) >> 1;
 800123c:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 8001240:	1040      	asrs	r0, r0, #1
 8001242:	80d0      	strh	r0, [r2, #6]
}
 8001244:	bd10      	pop	{r4, pc}
 8001246:	bf00      	nop
 8001248:	20002648 	.word	0x20002648
 800124c:	200026c4 	.word	0x200026c4
 8001250:	20002d60 	.word	0x20002d60

08001254 <rm2_flood_getcounter>:
OT_WEAK ot_int rm2_flood_getcounter(void) {
 8001254:	b508      	push	{r3, lr}
    offset_count    = (ot_int)sx127x_get_counter();
 8001256:	f7ff ff1b 	bl	8001090 <sx127x_get_counter>
    offset_count   -= 7; //rm2_scale_codec(phymac[0].channel, 29);
 800125a:	3807      	subs	r0, #7
}
 800125c:	b200      	sxth	r0, r0
 800125e:	bd08      	pop	{r3, pc}

08001260 <rm2_flood_txstop>:
OT_WEAK void rm2_flood_txstop(void) {
 8001260:	b508      	push	{r3, lr}
    rfctl.state = RADIO_STATE_TXDONE;
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <rm2_flood_txstop+0x14>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
    sx127x_stop_counter();
 8001268:	f7ff ff10 	bl	800108c <sx127x_stop_counter>
    sx127x_int_txdata();
 800126c:	f7ff fe32 	bl	8000ed4 <sx127x_int_txdata>
}
 8001270:	bd08      	pop	{r3, pc}
 8001272:	bf00      	nop
 8001274:	20002650 	.word	0x20002650

08001278 <rm2_flood_txstart>:
OT_WEAK void rm2_flood_txstart(void) {
 8001278:	b508      	push	{r3, lr}
    sx127x_start_counter();
 800127a:	f7ff fefd 	bl	8001078 <sx127x_start_counter>
}
 800127e:	bd08      	pop	{r3, pc}

08001280 <rm2_rxsync_isr>:
}
#endif


#ifndef EXTF_rm2_rxsync_isr
OT_WEAK void rm2_rxsync_isr(void) {
 8001280:	b508      	push	{r3, lr}
/// - Multiframe packets are not possible in LoRa, so FRAME-CONT bit always 0
/// - LoRa packet reception is done with a manually-timed buffer interval,
///   via the mactimer.  LoRa's built-in packet engine is too dogmatic to be
///   useful for advanced applications (like this one)

    __DEBUG_ERRCODE_EVAL(=210); 
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <rm2_rxsync_isr+0x30>)
 8001284:	2200      	movs	r2, #0
 8001286:	801a      	strh	r2, [r3, #0]
 8001288:	22d2      	movs	r2, #210	; 0xd2
 800128a:	805a      	strh	r2, [r3, #2]
    
    radio.state = RADIO_DataRX;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <rm2_rxsync_isr+0x34>)
 800128e:	2205      	movs	r2, #5
 8001290:	701a      	strb	r2, [r3, #0]
    dll_block();
 8001292:	f002 fc7b 	bl	8003b8c <dll_block>

    // Manual download timing.
    // Either wait for the end of the packet (iter_ti=0: unencoded BG and PG frames)
    // or setup a timer interrupt.
    if (rfctl.iter_ti != 0) {
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <rm2_rxsync_isr+0x38>)
 8001298:	78d8      	ldrb	r0, [r3, #3]
 800129a:	b930      	cbnz	r0, 80012aa <rm2_rxsync_isr+0x2a>
    	radio_set_mactimer(rfctl.iter_ti);
    }
    sx127x_int_rxend();
 800129c:	f7ff fe06 	bl	8000eac <sx127x_int_rxend>

    em2_decode_newpacket();
 80012a0:	f000 fd1e 	bl	8001ce0 <em2_decode_newpacket>
    em2_decode_newframe();
 80012a4:	f000 fd1e 	bl	8001ce4 <em2_decode_newframe>

}
 80012a8:	bd08      	pop	{r3, pc}
    	radio_set_mactimer(rfctl.iter_ti);
 80012aa:	f7ff ff47 	bl	800113c <radio_set_mactimer>
 80012ae:	e7f5      	b.n	800129c <rm2_rxsync_isr+0x1c>
 80012b0:	20002dfc 	.word	0x20002dfc
 80012b4:	200026c4 	.word	0x200026c4
 80012b8:	20002650 	.word	0x20002650

080012bc <rm2_txinit>:
/** Radio TX Functions  <BR>
  * ========================================================================<BR>
  */

#ifndef EXTF_rm2_txinit
OT_WEAK void rm2_txinit(ot_u8 psettings, ot_sig2 callback) {
 80012bc:	b510      	push	{r4, lr}
            RADIO_FLAG_PG,
            RADIO_FLAG_CONT,
            (RADIO_FLAG_BG | RADIO_FLAG_CONT)
    };

    rfctl.flags    &= ~(RADIO_FLAG_BG | RADIO_FLAG_PG | RADIO_FLAG_CONT);
 80012be:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <rm2_txinit+0x38>)
 80012c0:	7853      	ldrb	r3, [r2, #1]
 80012c2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    //rfctl.flags    |= (psettings & (M2_NETFLAG_BG | M2_NETFLAG_STREAM)) >> 6;

    ///@todo temporary method until PG mode refined
    rfctl.flags |= flag_lut[(psettings & (M2_NETFLAG_STREAM | M2_NETFLAG_BG)) >> 6];
 80012c6:	4c0c      	ldr	r4, [pc, #48]	; (80012f8 <rm2_txinit+0x3c>)
 80012c8:	eb04 1090 	add.w	r0, r4, r0, lsr #6
 80012cc:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80012d0:	4303      	orrs	r3, r0
 80012d2:	7053      	strb	r3, [r2, #1]

    radio.evtdone   = callback;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <rm2_txinit+0x40>)
 80012d6:	6099      	str	r1, [r3, #8]
    radio.state     = RADIO_Csma;
 80012d8:	2102      	movs	r1, #2
 80012da:	7019      	strb	r1, [r3, #0]
    rfctl.state     = RADIO_STATE_TXINIT;
 80012dc:	2308      	movs	r3, #8
 80012de:	7013      	strb	r3, [r2, #0]

    /// If 0, it's a retransmission, no re-encoding necessary
    /// This value is revised later.
    txq.options.ubyte[UPPER] = 0;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <rm2_txinit+0x44>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	70da      	strb	r2, [r3, #3]

    /// CSMA-CA interrupt based and fully pre-emptive.  This is
    /// possible using CC1 on the GPTIM to clock the intervals.
    radio_set_mactimer( (ot_uint)dll.comm.tca << 3 );
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <rm2_txinit+0x48>)
 80012e8:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 80012ea:	00c0      	lsls	r0, r0, #3
 80012ec:	b280      	uxth	r0, r0
 80012ee:	f7ff ff25 	bl	800113c <radio_set_mactimer>
}
 80012f2:	bd10      	pop	{r4, pc}
 80012f4:	20002650 	.word	0x20002650
 80012f8:	080091f0 	.word	0x080091f0
 80012fc:	200026c4 	.word	0x200026c4
 8001300:	20002d74 	.word	0x20002d74
 8001304:	20002654 	.word	0x20002654

08001308 <rm2_resend>:
#endif



#ifndef EXTF_rm2_resend
OT_WEAK void rm2_resend(ot_sig2 callback) {
 8001308:	b508      	push	{r3, lr}
    radio.evtdone               = callback;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <rm2_resend+0x20>)
 800130c:	6098      	str	r0, [r3, #8]
    radio.state                 = RADIO_Csma;
 800130e:	2202      	movs	r2, #2
 8001310:	701a      	strb	r2, [r3, #0]
    rfctl.state                 = RADIO_STATE_TXINIT;
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <rm2_resend+0x24>)
 8001314:	2208      	movs	r2, #8
 8001316:	701a      	strb	r2, [r3, #0]
    txq.options.ubyte[UPPER]    = 255;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <rm2_resend+0x28>)
 800131a:	22ff      	movs	r2, #255	; 0xff
 800131c:	70da      	strb	r2, [r3, #3]
    radio_set_mactimer(0);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff ff0c 	bl	800113c <radio_set_mactimer>
}
 8001324:	bd08      	pop	{r3, pc}
 8001326:	bf00      	nop
 8001328:	200026c4 	.word	0x200026c4
 800132c:	20002650 	.word	0x20002650
 8001330:	20002d74 	.word	0x20002d74

08001334 <sub_cca_isfail>:
    sx127x_antsw_rx();
    sx127x_strobe(_OPMODE_CAD, False);  //non-blocking call
    radio.state = RADIO_Csma;
}

ot_bool sub_cca_isfail(void) {
 8001334:	b510      	push	{r4, lr}
    ot_bool test;
    test = sx127x_check_cadpin();
 8001336:	f7ff fdf3 	bl	8000f20 <sx127x_check_cadpin>
    if (test) {
 800133a:	4604      	mov	r4, r0
 800133c:	b908      	cbnz	r0, 8001342 <sub_cca_isfail+0xe>
        
        // This calls CSMA loop
        radio.evtdone(1, 0);
    }
    return test;
}
 800133e:	4620      	mov	r0, r4
 8001340:	bd10      	pop	{r4, pc}
        sx127x_int_off();
 8001342:	f7ff fd99 	bl	8000e78 <sx127x_int_off>
        rfctl.state = RADIO_STATE_TXCAD1;
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <sub_cca_isfail+0x24>)
 8001348:	2210      	movs	r2, #16
 800134a:	701a      	strb	r2, [r3, #0]
        radio.evtdone(1, 0);
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <sub_cca_isfail+0x28>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2100      	movs	r1, #0
 8001352:	2001      	movs	r0, #1
 8001354:	4798      	blx	r3
 8001356:	e7f2      	b.n	800133e <sub_cca_isfail+0xa>
 8001358:	20002650 	.word	0x20002650
 800135c:	200026c4 	.word	0x200026c4

08001360 <sx127xdrv_buffer_config>:

void sx127xdrv_null(ot_int arg1, ot_int arg2) { }


#ifndef EXTF_sx127xdrv_buffer_config
OT_WEAK void sx127xdrv_buffer_config(MODE_enum mode, ot_u16 param) {
 8001360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001362:	460f      	mov	r7, r1
        (0 | _CODINGRATE_4_5 | _IMPLICITHEADER_ON | _RXPAYLOADCRC_OFF | _LOWDATARATEOPTIMIZE_OFF),
        (0 | _CODINGRATE_4_4 | _IMPLICITHEADER_ON | _RXPAYLOADCRC_OFF | _LOWDATARATEOPTIMIZE_OFF)
    };

    ///@todo Param manipulation must take into account the variable coding rate
    usefec  = (phymac[0].channel >> 7);
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <sx127xdrv_buffer_config+0x4c>)
 8001366:	789c      	ldrb	r4, [r3, #2]
 8001368:	09e4      	lsrs	r4, r4, #7
    offset  = (ot_u8)mode + usefec;
 800136a:	4420      	add	r0, r4
 800136c:	b2c6      	uxtb	r6, r0
    mdmcfg1 = sx127x_get_bw(phymac[0].flags) | mdmcfg1_lut[usefec];
 800136e:	7818      	ldrb	r0, [r3, #0]
 8001370:	f7ff fd6a 	bl	8000e48 <sx127x_get_bw>
 8001374:	4d0e      	ldr	r5, [pc, #56]	; (80013b0 <sx127xdrv_buffer_config+0x50>)
 8001376:	442c      	add	r4, r5
 8001378:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800137c:	4301      	orrs	r1, r0

    sx127x_write(RFREG_LR_MODEMCONFIG1, mdmcfg1);
 800137e:	b2c9      	uxtb	r1, r1
 8001380:	201d      	movs	r0, #29
 8001382:	f7ff fe01 	bl	8000f88 <sx127x_write>
    sx127x_write(RFREG_LR_PREAMBLELSB, preamblelen[offset]);
 8001386:	4435      	add	r5, r6
 8001388:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800138c:	2021      	movs	r0, #33	; 0x21
 800138e:	f7ff fdfb 	bl	8000f88 <sx127x_write>
    sx127x_write(RFREG_LR_SYNCWORD, syncword[offset]);
 8001392:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
 8001396:	2039      	movs	r0, #57	; 0x39
 8001398:	f7ff fdf6 	bl	8000f88 <sx127x_write>

    if (param == 0) {
 800139c:	b90f      	cbnz	r7, 80013a2 <sx127xdrv_buffer_config+0x42>
        param = deflength[offset];
 800139e:	f895 703c 	ldrb.w	r7, [r5, #60]	; 0x3c
    }
    sx127x_write(RFREG_LR_PAYLOADLENGTH, param);
 80013a2:	b2f9      	uxtb	r1, r7
 80013a4:	2022      	movs	r0, #34	; 0x22
 80013a6:	f7ff fdef 	bl	8000f88 <sx127x_write>
}
 80013aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013ac:	200026d0 	.word	0x200026d0
 80013b0:	080091f0 	.word	0x080091f0

080013b4 <radio_gag>:
   radio_sleep();
}
#endif

#ifndef EXTF_radio_gag
OT_WEAK void radio_gag(void) {
 80013b4:	b508      	push	{r3, lr}
    sx127x_int_off();                       // Disable pin interrutps on MCU
 80013b6:	f7ff fd5f 	bl	8000e78 <sx127x_int_off>
    sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);  // Clear Register IRQ Flags on SX127x
 80013ba:	21ff      	movs	r1, #255	; 0xff
 80013bc:	2012      	movs	r0, #18
 80013be:	f7ff fde3 	bl	8000f88 <sx127x_write>
}
 80013c2:	bd08      	pop	{r3, pc}

080013c4 <radio_finish>:
OT_WEAK void radio_finish(ot_int main_err, ot_int frame_err) {
 80013c4:	b538      	push	{r3, r4, r5, lr}
 80013c6:	4604      	mov	r4, r0
 80013c8:	460d      	mov	r5, r1
    radio_gag();                            // redundant, but here for robustness
 80013ca:	f7ff fff3 	bl	80013b4 <radio_gag>
    dll_unblock();                          // also redundant and here for robustness
 80013ce:	f002 fbe3 	bl	8003b98 <dll_unblock>
    rfctl.state     = 0;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <radio_finish+0x2c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
    rfctl.flags    &= (RADIO_FLAG_XOON);    //clear all other flags
 80013d8:	785a      	ldrb	r2, [r3, #1]
 80013da:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80013de:	705a      	strb	r2, [r3, #1]
    callback        = radio.evtdone;
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <radio_finish+0x30>)
 80013e2:	689a      	ldr	r2, [r3, #8]
    radio.evtdone   = &otutils_sig2_null;
 80013e4:	4904      	ldr	r1, [pc, #16]	; (80013f8 <radio_finish+0x34>)
 80013e6:	6099      	str	r1, [r3, #8]
    callback(main_err, frame_err);
 80013e8:	4629      	mov	r1, r5
 80013ea:	4620      	mov	r0, r4
 80013ec:	4790      	blx	r2
}
 80013ee:	bd38      	pop	{r3, r4, r5, pc}
 80013f0:	20002650 	.word	0x20002650
 80013f4:	200026c4 	.word	0x200026c4
 80013f8:	08005fe3 	.word	0x08005fe3

080013fc <sub_hwtimeout_isr>:
void sub_hwtimeout_isr(void) {
 80013fc:	b508      	push	{r3, lr}
    if (rfctl.flags & RADIO_FLAG_BG) {
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <sub_hwtimeout_isr+0x38>)
 8001400:	785b      	ldrb	r3, [r3, #1]
 8001402:	f013 0f01 	tst.w	r3, #1
 8001406:	d005      	beq.n	8001414 <sub_hwtimeout_isr+0x18>
        if (--rfctl.tries <= 0) {
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <sub_hwtimeout_isr+0x38>)
 800140a:	7893      	ldrb	r3, [r2, #2]
 800140c:	3b01      	subs	r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	7093      	strb	r3, [r2, #2]
 8001412:	b143      	cbz	r3, 8001426 <sub_hwtimeout_isr+0x2a>
    sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);
 8001414:	21ff      	movs	r1, #255	; 0xff
 8001416:	2012      	movs	r0, #18
 8001418:	f7ff fdb6 	bl	8000f88 <sx127x_write>
    sx127x_strobe(_OPMODE_RXSINGLE, False);
 800141c:	2100      	movs	r1, #0
 800141e:	2006      	movs	r0, #6
 8001420:	f7ff fde8 	bl	8000ff4 <sx127x_strobe>
}
 8001424:	bd08      	pop	{r3, pc}
            radio_finish(RM2_ERR_TIMEOUT, 1 /*radio.link.sqi*/);
 8001426:	2101      	movs	r1, #1
 8001428:	f06f 0003 	mvn.w	r0, #3
 800142c:	f7ff ffca 	bl	80013c4 <radio_finish>
            return;
 8001430:	e7f8      	b.n	8001424 <sub_hwtimeout_isr+0x28>
 8001432:	bf00      	nop
 8001434:	20002650 	.word	0x20002650

08001438 <rm2_rxinit>:
OT_WEAK void rm2_rxinit(ot_u8 channel, ot_u8 psettings, ot_sig2 callback) {
 8001438:	b570      	push	{r4, r5, r6, lr}
 800143a:	4604      	mov	r4, r0
    __DEBUG_ERRCODE_EVAL(=200);
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <rm2_rxinit+0xac>)
 800143e:	2000      	movs	r0, #0
 8001440:	8018      	strh	r0, [r3, #0]
 8001442:	20c8      	movs	r0, #200	; 0xc8
 8001444:	8058      	strh	r0, [r3, #2]
    radio.evtdone   = callback;
 8001446:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <rm2_rxinit+0xb0>)
 8001448:	609a      	str	r2, [r3, #8]
    rfctl.flags    &= ~(RADIO_FLAG_CONT | RADIO_FLAG_BG | RADIO_FLAG_PG);
 800144a:	4a28      	ldr	r2, [pc, #160]	; (80014ec <rm2_rxinit+0xb4>)
 800144c:	7853      	ldrb	r3, [r2, #1]
 800144e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001452:	7053      	strb	r3, [r2, #1]
    rfctl.tries 	= 1;
 8001454:	2001      	movs	r0, #1
 8001456:	7090      	strb	r0, [r2, #2]
    if (psettings & (M2_NETFLAG_BG)) {
 8001458:	f011 0f40 	tst.w	r1, #64	; 0x40
 800145c:	d01b      	beq.n	8001496 <rm2_rxinit+0x5e>
        if ((psettings & M2_NETFLAG_STREAM) == 0) {
 800145e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001462:	d105      	bne.n	8001470 <rm2_rxinit+0x38>
            rfctl.flags |= RADIO_FLAG_PG;
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	7053      	strb	r3, [r2, #1]
        	sub_init = &sub_initrx;
 800146a:	4e21      	ldr	r6, [pc, #132]	; (80014f0 <rm2_rxinit+0xb8>)
        	initvals = (ot_u8*)pginit;
 800146c:	4d21      	ldr	r5, [pc, #132]	; (80014f4 <rm2_rxinit+0xbc>)
 800146e:	e014      	b.n	800149a <rm2_rxinit+0x62>
        else if (psettings & M2_NETSTATE_INIT) {
 8001470:	f011 0f08 	tst.w	r1, #8
 8001474:	d008      	beq.n	8001488 <rm2_rxinit+0x50>
            rfctl.flags |= RADIO_FLAG_BG;
 8001476:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <rm2_rxinit+0xb4>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	7053      	strb	r3, [r2, #1]
            rfctl.tries = 3;
 800147e:	2303      	movs	r3, #3
 8001480:	7093      	strb	r3, [r2, #2]
		    sub_init 	= &sub_initcad;
 8001482:	4e1d      	ldr	r6, [pc, #116]	; (80014f8 <rm2_rxinit+0xc0>)
		    initvals 	= (ot_u8*)bg1init;
 8001484:	4d1d      	ldr	r5, [pc, #116]	; (80014fc <rm2_rxinit+0xc4>)
 8001486:	e008      	b.n	800149a <rm2_rxinit+0x62>
		    rfctl.flags |= RADIO_FLAG_BG;
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	4a17      	ldr	r2, [pc, #92]	; (80014ec <rm2_rxinit+0xb4>)
 800148e:	7053      	strb	r3, [r2, #1]
            sub_init = &sub_initrx;
 8001490:	4e17      	ldr	r6, [pc, #92]	; (80014f0 <rm2_rxinit+0xb8>)
            initvals = (ot_u8*)bg2init;
 8001492:	4d1b      	ldr	r5, [pc, #108]	; (8001500 <rm2_rxinit+0xc8>)
 8001494:	e001      	b.n	800149a <rm2_rxinit+0x62>
        sub_init    = &sub_initrx;
 8001496:	4e16      	ldr	r6, [pc, #88]	; (80014f0 <rm2_rxinit+0xb8>)
        initvals    = (ot_u8*)fginit;
 8001498:	4d1a      	ldr	r5, [pc, #104]	; (8001504 <rm2_rxinit+0xcc>)
    if (rm2_test_channel(channel) == False) {
 800149a:	4620      	mov	r0, r4
 800149c:	f003 fa80 	bl	80049a0 <rm2_test_channel>
 80014a0:	b1d0      	cbz	r0, 80014d8 <rm2_rxinit+0xa0>
    sx127xdrv_buffer_config(initvals[0], 0);
 80014a2:	2100      	movs	r1, #0
 80014a4:	7828      	ldrb	r0, [r5, #0]
 80014a6:	f7ff ff5b 	bl	8001360 <sx127xdrv_buffer_config>
    channel			= (channel>>4) & 3;
 80014aa:	f3c4 1001 	ubfx	r0, r4, #4, #2
    rfctl.iter_ti	= iterinit[channel];
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <rm2_rxinit+0xd0>)
 80014b0:	4403      	add	r3, r0
 80014b2:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <rm2_rxinit+0xb4>)
 80014b8:	70da      	strb	r2, [r3, #3]
    initvals[3]    |= sub_modemconfig2_baseval(channel);
 80014ba:	f7ff fe57 	bl	800116c <sub_modemconfig2_baseval>
 80014be:	78e9      	ldrb	r1, [r5, #3]
 80014c0:	4301      	orrs	r1, r0
 80014c2:	b2c9      	uxtb	r1, r1
 80014c4:	70e9      	strb	r1, [r5, #3]
    sx127x_write(RFREG_LR_MODEMCONFIG2, initvals[3]);
 80014c6:	201e      	movs	r0, #30
 80014c8:	f7ff fd5e 	bl	8000f88 <sx127x_write>
    sx127x_write(RFREG_LR_SYMBTIMEOUTLSB, initvals[4]);
 80014cc:	7929      	ldrb	r1, [r5, #4]
 80014ce:	201f      	movs	r0, #31
 80014d0:	f7ff fd5a 	bl	8000f88 <sx127x_write>
    sub_init();
 80014d4:	47b0      	blx	r6
}
 80014d6:	bd70      	pop	{r4, r5, r6, pc}
        radio_finish(RM2_ERR_BADCHANNEL, 0);
 80014d8:	2100      	movs	r1, #0
 80014da:	f06f 0002 	mvn.w	r0, #2
 80014de:	f7ff ff71 	bl	80013c4 <radio_finish>
        return;
 80014e2:	e7f8      	b.n	80014d6 <rm2_rxinit+0x9e>
 80014e4:	20002dfc 	.word	0x20002dfc
 80014e8:	200026c4 	.word	0x200026c4
 80014ec:	20002650 	.word	0x20002650
 80014f0:	0800174d 	.word	0x0800174d
 80014f4:	08009244 	.word	0x08009244
 80014f8:	080010e5 	.word	0x080010e5
 80014fc:	08009234 	.word	0x08009234
 8001500:	0800924c 	.word	0x0800924c
 8001504:	0800923c 	.word	0x0800923c
 8001508:	080091f0 	.word	0x080091f0

0800150c <rm2_decode_s2>:
void rm2_decode_s2(void) {
 800150c:	b510      	push	{r4, lr}
        llrbits = lorallr_getblock(&lorallr, rxq.getcursor);
 800150e:	4c22      	ldr	r4, [pc, #136]	; (8001598 <rm2_decode_s2+0x8c>)
 8001510:	6861      	ldr	r1, [r4, #4]
 8001512:	4822      	ldr	r0, [pc, #136]	; (800159c <rm2_decode_s2+0x90>)
 8001514:	f001 feb3 	bl	800327e <lorallr_getblock>
        blockcrc = hsc_decode(&hsc, rxq.putcursor, llrbits);
 8001518:	4602      	mov	r2, r0
 800151a:	68a1      	ldr	r1, [r4, #8]
 800151c:	4820      	ldr	r0, [pc, #128]	; (80015a0 <rm2_decode_s2+0x94>)
 800151e:	f000 fe77 	bl	8002210 <hsc_decode>
        if (blockcrc != 0) {
 8001522:	bb30      	cbnz	r0, 8001572 <rm2_decode_s2+0x66>
        lorallr_popblock(&lorallr);
 8001524:	481d      	ldr	r0, [pc, #116]	; (800159c <rm2_decode_s2+0x90>)
 8001526:	f001 fef0 	bl	800330a <lorallr_popblock>
        rxq.putcursor += hsc.infobytes;
 800152a:	481d      	ldr	r0, [pc, #116]	; (80015a0 <rm2_decode_s2+0x94>)
 800152c:	88c2      	ldrh	r2, [r0, #6]
 800152e:	4c1a      	ldr	r4, [pc, #104]	; (8001598 <rm2_decode_s2+0x8c>)
 8001530:	68a3      	ldr	r3, [r4, #8]
 8001532:	4413      	add	r3, r2
 8001534:	60a3      	str	r3, [r4, #8]
        hsc_init(&hsc, (hscrate_t)(rxq.front[1] & 7));
 8001536:	68e3      	ldr	r3, [r4, #12]
 8001538:	7859      	ldrb	r1, [r3, #1]
 800153a:	f001 0107 	and.w	r1, r1, #7
 800153e:	f000 fd19 	bl	8001f74 <hsc_init>
        rxq.getcursor      += 16;
 8001542:	6863      	ldr	r3, [r4, #4]
 8001544:	3310      	adds	r3, #16
 8001546:	6063      	str	r3, [r4, #4]
        unprocessed_bytes   = em2.bytes - (rxq.getcursor - (rxq.front + rxq.options.ushort));
 8001548:	4a16      	ldr	r2, [pc, #88]	; (80015a4 <rm2_decode_s2+0x98>)
 800154a:	8852      	ldrh	r2, [r2, #2]
 800154c:	68e1      	ldr	r1, [r4, #12]
 800154e:	8860      	ldrh	r0, [r4, #2]
 8001550:	4401      	add	r1, r0
 8001552:	1a5b      	subs	r3, r3, r1
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b21b      	sxth	r3, r3
    } while (unprocessed_bytes >= 16);
 8001558:	2b0f      	cmp	r3, #15
 800155a:	dcd8      	bgt.n	800150e <rm2_decode_s2+0x2>
    if (rfctl.state == RADIO_STATE_RXDONE) {
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <rm2_decode_s2+0x9c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d10c      	bne.n	800157e <rm2_decode_s2+0x72>
        radio_finish(0, em2_decode_endframe());
 8001564:	f000 fca4 	bl	8001eb0 <em2_decode_endframe>
 8001568:	b201      	sxth	r1, r0
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff ff2a 	bl	80013c4 <radio_finish>
        return;
 8001570:	e011      	b.n	8001596 <rm2_decode_s2+0x8a>
            rxq.options.ushort  = 0;
 8001572:	2200      	movs	r2, #0
 8001574:	8062      	strh	r2, [r4, #2]
            em2.state           = -1;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <rm2_decode_s2+0x98>)
 8001578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800157c:	809a      	strh	r2, [r3, #4]
    sys.task_RFA.event      = 5;
 800157e:	490b      	ldr	r1, [pc, #44]	; (80015ac <rm2_decode_s2+0xa0>)
 8001580:	2305      	movs	r3, #5
 8001582:	710b      	strb	r3, [r1, #4]
    sys.task_RFA.nextevent  = (ot_uint)ti_per_block[(phymac[0].channel >> 4) & 3];
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <rm2_decode_s2+0xa4>)
 8001586:	789b      	ldrb	r3, [r3, #2]
 8001588:	f3c3 1201 	ubfx	r2, r3, #4, #2
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <rm2_decode_s2+0xa8>)
 800158e:	4413      	add	r3, r2
 8001590:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001594:	608b      	str	r3, [r1, #8]
}
 8001596:	bd10      	pop	{r4, pc}
 8001598:	20002d60 	.word	0x20002d60
 800159c:	2000223c 	.word	0x2000223c
 80015a0:	20002234 	.word	0x20002234
 80015a4:	20002690 	.word	0x20002690
 80015a8:	20002650 	.word	0x20002650
 80015ac:	20002db4 	.word	0x20002db4
 80015b0:	200026d0 	.word	0x200026d0
 80015b4:	080091f0 	.word	0x080091f0

080015b8 <rm2_rxtimeout_isr>:
OT_WEAK void rm2_rxtimeout_isr(void) {
 80015b8:	b508      	push	{r3, lr}
    __DEBUG_ERRCODE_EVAL(=280);
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <rm2_rxtimeout_isr+0x20>)
 80015bc:	2200      	movs	r2, #0
 80015be:	801a      	strh	r2, [r3, #0]
 80015c0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80015c4:	805a      	strh	r2, [r3, #2]
    radio_gag();
 80015c6:	f7ff fef5 	bl	80013b4 <radio_gag>
    radio_finish(RM2_ERR_TIMEOUT, 1 /*radio.link.sqi*/);
 80015ca:	2101      	movs	r1, #1
 80015cc:	f06f 0003 	mvn.w	r0, #3
 80015d0:	f7ff fef8 	bl	80013c4 <radio_finish>
}
 80015d4:	bd08      	pop	{r3, pc}
 80015d6:	bf00      	nop
 80015d8:	20002dfc 	.word	0x20002dfc

080015dc <rm2_rxend_isr>:
OT_WEAK void rm2_rxend_isr(void) {
 80015dc:	b508      	push	{r3, lr}
    __DEBUG_ERRCODE_EVAL(=230);
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <rm2_rxend_isr+0x38>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]
 80015e4:	22e6      	movs	r2, #230	; 0xe6
 80015e6:	805a      	strh	r2, [r3, #2]
    systim_disable_insertion();					// Here for safety purposes
 80015e8:	f005 fb72 	bl	8006cd0 <systim_disable_insertion>
    radio_gag();                                // No more Radio interrupts!
 80015ec:	f7ff fee2 	bl	80013b4 <radio_gag>
    rm2_calc_link();                            // Calculate relative link info
 80015f0:	f7ff fe0e 	bl	8001210 <rm2_calc_link>
    rfctl.state = RADIO_STATE_RXDONE;           // Make sure in DONE State, for decoding
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <rm2_rxend_isr+0x3c>)
 80015f6:	2202      	movs	r2, #2
 80015f8:	701a      	strb	r2, [r3, #0]
    em2_decode_data();                          // decode any leftover data
 80015fa:	f000 fbd9 	bl	8001db0 <em2_decode_data>
    if (sys.task_RFA.event != 6) {
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <rm2_rxend_isr+0x40>)
 8001600:	791b      	ldrb	r3, [r3, #4]
 8001602:	2b06      	cmp	r3, #6
 8001604:	d005      	beq.n	8001612 <rm2_rxend_isr+0x36>
        ot_u16 integrity = em2_decode_endframe();
 8001606:	f000 fc53 	bl	8001eb0 <em2_decode_endframe>
        radio_finish(0, integrity);
 800160a:	b201      	sxth	r1, r0
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fed9 	bl	80013c4 <radio_finish>
}
 8001612:	bd08      	pop	{r3, pc}
 8001614:	20002dfc 	.word	0x20002dfc
 8001618:	20002650 	.word	0x20002650
 800161c:	20002db4 	.word	0x20002db4

08001620 <radio_sleep>:
    }
}
#endif

#ifndef EXTF_radio_sleep
OT_WEAK void radio_sleep(void) {
 8001620:	b508      	push	{r3, lr}
    sx127x_antsw_off();
 8001622:	f005 ff59 	bl	80074d8 <sx127x_antsw_off>
    sx127x_strobe(_OPMODE_SLEEP, True);
 8001626:	2101      	movs	r1, #1
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff fce3 	bl	8000ff4 <sx127x_strobe>
//        radio.state  = RADIO_Idle;
//        rfctl.flags &= ~RADIO_FLAG_PWRMASK;
//        sx127x_strobe(_OPMODE_SLEEP);
//        sx127x_waitfor_sleep();
//    }
}
 800162e:	bd08      	pop	{r3, pc}

08001630 <radio_idle>:
#endif

#ifndef EXTF_radio_idle
OT_WEAK void radio_idle(void) {
 8001630:	b508      	push	{r3, lr}
    sx127x_antsw_on();                    ///@todo see if this matters
 8001632:	f005 ff52 	bl	80074da <sx127x_antsw_on>
    sx127x_strobe(_OPMODE_STANDBY, True);
 8001636:	2101      	movs	r1, #1
 8001638:	4608      	mov	r0, r1
 800163a:	f7ff fcdb 	bl	8000ff4 <sx127x_strobe>
//    if (!test) {
//        radio.state  = RADIO_Idle;
//        rfctl.flags |= RADIO_FLAG_XOON;
//        sx127xdrv_force_standby();
//    }
}
 800163e:	bd08      	pop	{r3, pc}

08001640 <rm2_kill>:
OT_WEAK void rm2_kill(void) {
 8001640:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=290);
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <rm2_kill+0x28>)
 8001644:	2400      	movs	r4, #0
 8001646:	801c      	strh	r4, [r3, #0]
 8001648:	f44f 7291 	mov.w	r2, #290	; 0x122
 800164c:	805a      	strh	r2, [r3, #2]
    radio_gag();
 800164e:	f7ff feb1 	bl	80013b4 <radio_gag>
    radio_idle();
 8001652:	f7ff ffed 	bl	8001630 <radio_idle>
    dll_unblock();
 8001656:	f002 fa9f 	bl	8003b98 <dll_unblock>
    radio_finish(RM2_ERR_KILL, 0);
 800165a:	4621      	mov	r1, r4
 800165c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001660:	f7ff feb0 	bl	80013c4 <radio_finish>
}
 8001664:	bd10      	pop	{r4, pc}
 8001666:	bf00      	nop
 8001668:	20002dfc 	.word	0x20002dfc

0800166c <sub_cad_csma>:
void sub_cad_csma(void) {
 800166c:	b508      	push	{r3, lr}
    radio_gag(); 
 800166e:	f7ff fea1 	bl	80013b4 <radio_gag>
    sx127x_iocfg_cad();
 8001672:	f7ff fc99 	bl	8000fa8 <sx127x_iocfg_cad>
    sx127x_int_csma();
 8001676:	f7ff fc23 	bl	8000ec0 <sx127x_int_csma>
    radio_idle();
 800167a:	f7ff ffd9 	bl	8001630 <radio_idle>
    sx127x_antsw_rx();
 800167e:	f005 ff2e 	bl	80074de <sx127x_antsw_rx>
    sx127x_strobe(_OPMODE_CAD, False);  //non-blocking call
 8001682:	2100      	movs	r1, #0
 8001684:	2007      	movs	r0, #7
 8001686:	f7ff fcb5 	bl	8000ff4 <sx127x_strobe>
    radio.state = RADIO_Csma;
 800168a:	4b02      	ldr	r3, [pc, #8]	; (8001694 <sub_cad_csma+0x28>)
 800168c:	2202      	movs	r2, #2
 800168e:	701a      	strb	r2, [r3, #0]
}
 8001690:	bd08      	pop	{r3, pc}
 8001692:	bf00      	nop
 8001694:	200026c4 	.word	0x200026c4

08001698 <rm2_txdata_isr>:
OT_WEAK void rm2_txdata_isr(void) {
 8001698:	b510      	push	{r4, lr}
    if ((rfctl.flags & RADIO_FLAG_BGFLOOD) == RADIO_FLAG_BGFLOOD) {
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <rm2_txdata_isr+0x64>)
 800169c:	785b      	ldrb	r3, [r3, #1]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d10a      	bne.n	80016bc <rm2_txdata_isr+0x24>
        radio.evtdone(RADIO_FLAG_CONT, 0);
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <rm2_txdata_isr+0x68>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2100      	movs	r1, #0
 80016ac:	2002      	movs	r0, #2
 80016ae:	4798      	blx	r3
        if ((rfctl.state & RADIO_STATE_TXMASK) == RADIO_STATE_TXDATA) {
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <rm2_txdata_isr+0x64>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016b8:	2b38      	cmp	r3, #56	; 0x38
 80016ba:	d00b      	beq.n	80016d4 <rm2_txdata_isr+0x3c>
    radio_gag();
 80016bc:	f7ff fe7a 	bl	80013b4 <radio_gag>
    radio_idle();
 80016c0:	f7ff ffb6 	bl	8001630 <radio_idle>
    radio_finish((rfctl.flags & (RADIO_FLAG_PG | RADIO_FLAG_BG | RADIO_FLAG_CONT)), 0);
 80016c4:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <rm2_txdata_isr+0x64>)
 80016c6:	7858      	ldrb	r0, [r3, #1]
 80016c8:	2100      	movs	r1, #0
 80016ca:	f000 0007 	and.w	r0, r0, #7
 80016ce:	f7ff fe79 	bl	80013c4 <radio_finish>
}
 80016d2:	bd10      	pop	{r4, pc}
            bgcrc8_put(&txq.front[2]);
 80016d4:	4c0b      	ldr	r4, [pc, #44]	; (8001704 <rm2_txdata_isr+0x6c>)
 80016d6:	68e0      	ldr	r0, [r4, #12]
 80016d8:	3002      	adds	r0, #2
 80016da:	f001 fe54 	bl	8003386 <bgcrc8_put>
            sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);
 80016de:	21ff      	movs	r1, #255	; 0xff
 80016e0:	2012      	movs	r0, #18
 80016e2:	f7ff fc51 	bl	8000f88 <sx127x_write>
            sx127x_burstwrite(RFREG_LR_FIFO, 6, &txq.front[2]);
 80016e6:	68e2      	ldr	r2, [r4, #12]
 80016e8:	3202      	adds	r2, #2
 80016ea:	2106      	movs	r1, #6
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fcb1 	bl	8001054 <sx127x_burstwrite>
            sx127x_strobe(_OPMODE_TX, False);   //non-blocking call
 80016f2:	2100      	movs	r1, #0
 80016f4:	2003      	movs	r0, #3
 80016f6:	f7ff fc7d 	bl	8000ff4 <sx127x_strobe>
            return;
 80016fa:	e7ea      	b.n	80016d2 <rm2_txdata_isr+0x3a>
 80016fc:	20002650 	.word	0x20002650
 8001700:	200026c4 	.word	0x200026c4
 8001704:	20002d74 	.word	0x20002d74

08001708 <radio_flush_rx>:
/// Unused in SX127x
}
#endif

#ifndef EXTF_radio_flush_rx
OT_WEAK void radio_flush_rx(void) {
 8001708:	b508      	push	{r3, lr}
    sx127x_write(RFREG_LR_FIFOADDRPTR, 0);
 800170a:	2100      	movs	r1, #0
 800170c:	200d      	movs	r0, #13
 800170e:	f7ff fc3b 	bl	8000f88 <sx127x_write>
}
 8001712:	bd08      	pop	{r3, pc}

08001714 <rm2_reenter_rx>:
OT_WEAK void rm2_reenter_rx(ot_sig2 callback) {
 8001714:	b538      	push	{r3, r4, r5, lr}
    radio.evtdone   = callback;
 8001716:	4c0b      	ldr	r4, [pc, #44]	; (8001744 <rm2_reenter_rx+0x30>)
 8001718:	60a0      	str	r0, [r4, #8]
    rfctl.state     = RADIO_STATE_RXAUTO;
 800171a:	2500      	movs	r5, #0
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <rm2_reenter_rx+0x34>)
 800171e:	701d      	strb	r5, [r3, #0]
    radio_gag();                            
 8001720:	f7ff fe48 	bl	80013b4 <radio_gag>
    radio_flush_rx();
 8001724:	f7ff fff0 	bl	8001708 <radio_flush_rx>
    sx127x_antsw_rx();
 8001728:	f005 fed9 	bl	80074de <sx127x_antsw_rx>
    sx127x_strobe(_OPMODE_RXSINGLE, False);  //sx127x_strobe(opmode, False);   //non-blocking call
 800172c:	4629      	mov	r1, r5
 800172e:	2006      	movs	r0, #6
 8001730:	f7ff fc60 	bl	8000ff4 <sx127x_strobe>
    sx127x_int_rxdata();
 8001734:	f7ff fbb0 	bl	8000e98 <sx127x_int_rxdata>
    radio.state = RADIO_Listening;
 8001738:	2301      	movs	r3, #1
 800173a:	7023      	strb	r3, [r4, #0]
    dll_unblock();
 800173c:	f002 fa2c 	bl	8003b98 <dll_unblock>
}
 8001740:	bd38      	pop	{r3, r4, r5, pc}
 8001742:	bf00      	nop
 8001744:	200026c4 	.word	0x200026c4
 8001748:	20002650 	.word	0x20002650

0800174c <sub_initrx>:
void sub_initrx(void) {
 800174c:	b508      	push	{r3, lr}
    sx127x_iocfg_rx();
 800174e:	f7ff fc33 	bl	8000fb8 <sx127x_iocfg_rx>
    rm2_reenter_rx(radio.evtdone);
 8001752:	4b02      	ldr	r3, [pc, #8]	; (800175c <sub_initrx+0x10>)
 8001754:	6898      	ldr	r0, [r3, #8]
 8001756:	f7ff ffdd 	bl	8001714 <rm2_reenter_rx>
}
 800175a:	bd08      	pop	{r3, pc}
 800175c:	200026c4 	.word	0x200026c4

08001760 <rm2_rxdata_isr>:
OT_WEAK void rm2_rxdata_isr() {
 8001760:	b510      	push	{r4, lr}
    em2_decode_data();
 8001762:	f000 fb25 	bl	8001db0 <em2_decode_data>
    if (em2.state < 0) {
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <rm2_rxdata_isr+0x78>)
 8001768:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	db04      	blt.n	800177a <rm2_rxdata_isr+0x1a>
    else if ((em2.crc5 == 1) && ((rfctl.flags & 7) == 0)) {
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <rm2_rxdata_isr+0x78>)
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d00d      	beq.n	8001794 <rm2_rxdata_isr+0x34>
}
 8001778:	bd10      	pop	{r4, pc}
        systim_disable_insertion();
 800177a:	f005 faa9 	bl	8006cd0 <systim_disable_insertion>
        radio.state = RADIO_Idle;
 800177e:	4c17      	ldr	r4, [pc, #92]	; (80017dc <rm2_rxdata_isr+0x7c>)
 8001780:	2300      	movs	r3, #0
 8001782:	7023      	strb	r3, [r4, #0]
        radio_gag();
 8001784:	f7ff fe16 	bl	80013b4 <radio_gag>
        radio_idle();
 8001788:	f7ff ff52 	bl	8001630 <radio_idle>
        rm2_reenter_rx(radio.evtdone);
 800178c:	68a0      	ldr	r0, [r4, #8]
 800178e:	f7ff ffc1 	bl	8001714 <rm2_reenter_rx>
 8001792:	e7f1      	b.n	8001778 <rm2_rxdata_isr+0x18>
    else if ((em2.crc5 == 1) && ((rfctl.flags & 7) == 0)) {
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <rm2_rxdata_isr+0x80>)
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	f013 0f07 	tst.w	r3, #7
 800179c:	d1ec      	bne.n	8001778 <rm2_rxdata_isr+0x18>
        if (phymac[0].channel & 0x80) {
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <rm2_rxdata_isr+0x84>)
 80017a0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <rm2_rxdata_isr+0x5e>
            rx_octets = rxq.front[0]+1;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <rm2_rxdata_isr+0x88>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	781c      	ldrb	r4, [r3, #0]
 80017ae:	3401      	adds	r4, #1
            systim_disable_insertion();
 80017b0:	f005 fa8e 	bl	8006cd0 <systim_disable_insertion>
        sx127x_write(RFREG_LR_PAYLOADLENGTH, (ot_u8)rx_octets);
 80017b4:	b2e1      	uxtb	r1, r4
 80017b6:	2022      	movs	r0, #34	; 0x22
 80017b8:	f7ff fbe6 	bl	8000f88 <sx127x_write>
}
 80017bc:	e7dc      	b.n	8001778 <rm2_rxdata_isr+0x18>
            rx_octets   = (ot_uint)hsc_octetsinframe((hscrate_t)(rxq.front[1]&7), rxq.front[0]-7);
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <rm2_rxdata_isr+0x88>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	7858      	ldrb	r0, [r3, #1]
 80017c4:	7819      	ldrb	r1, [r3, #0]
 80017c6:	3907      	subs	r1, #7
 80017c8:	b2c9      	uxtb	r1, r1
 80017ca:	f000 0007 	and.w	r0, r0, #7
 80017ce:	f000 fbc3 	bl	8001f58 <hsc_octetsinframe>
            rx_octets  += 16;
 80017d2:	3010      	adds	r0, #16
 80017d4:	b284      	uxth	r4, r0
 80017d6:	e7ed      	b.n	80017b4 <rm2_rxdata_isr+0x54>
 80017d8:	20002690 	.word	0x20002690
 80017dc:	200026c4 	.word	0x200026c4
 80017e0:	20002650 	.word	0x20002650
 80017e4:	200026d0 	.word	0x200026d0
 80017e8:	20002d60 	.word	0x20002d60

080017ec <radio_flush_tx>:
#endif

#ifndef EXTF_radio_flush_tx
OT_WEAK void radio_flush_tx(void) {
 80017ec:	b508      	push	{r3, lr}
    sx127x_write(RFREG_LR_FIFOADDRPTR, 0);
 80017ee:	2100      	movs	r1, #0
 80017f0:	200d      	movs	r0, #13
 80017f2:	f7ff fbc9 	bl	8000f88 <sx127x_write>
}
 80017f6:	bd08      	pop	{r3, pc}

080017f8 <rm2_txcsma_isr>:
OT_WEAK void rm2_txcsma_isr(void) {
 80017f8:	b510      	push	{r4, lr}
    switch ( (rfctl.state >> RADIO_STATE_TXSHIFT) & (RADIO_STATE_TXMASK >> RADIO_STATE_TXSHIFT) ) {
 80017fa:	4b48      	ldr	r3, [pc, #288]	; (800191c <rm2_txcsma_isr+0x124>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8001802:	3b01      	subs	r3, #1
 8001804:	2b05      	cmp	r3, #5
 8001806:	d876      	bhi.n	80018f6 <rm2_txcsma_isr+0xfe>
 8001808:	e8df f003 	tbb	[pc, r3]
 800180c:	42352f03 	.word	0x42352f03
 8001810:	4b48      	.short	0x4b48
            if (rm2_test_chanlist() == False) {
 8001812:	f003 f8db 	bl	80049cc <rm2_test_chanlist>
 8001816:	b930      	cbnz	r0, 8001826 <rm2_txcsma_isr+0x2e>
                radio.evtdone(RM2_ERR_BADCHANNEL, 0);
 8001818:	4b41      	ldr	r3, [pc, #260]	; (8001920 <rm2_txcsma_isr+0x128>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2100      	movs	r1, #0
 800181e:	f06f 0002 	mvn.w	r0, #2
 8001822:	4798      	blx	r3
                break;
 8001824:	e067      	b.n	80018f6 <rm2_txcsma_isr+0xfe>
            mdmconfig2 = sub_modemconfig2_baseval((phymac[0].channel>>4) & 3);
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <rm2_txcsma_isr+0x12c>)
 8001828:	7898      	ldrb	r0, [r3, #2]
 800182a:	f3c0 1001 	ubfx	r0, r0, #4, #2
 800182e:	f7ff fc9d 	bl	800116c <sub_modemconfig2_baseval>
            sx127x_write(RFREG_LR_MODEMCONFIG2, mdmconfig2);
 8001832:	4601      	mov	r1, r0
 8001834:	201e      	movs	r0, #30
 8001836:	f7ff fba7 	bl	8000f88 <sx127x_write>
            radio_activate_queue(&txq);
 800183a:	483b      	ldr	r0, [pc, #236]	; (8001928 <rm2_txcsma_isr+0x130>)
 800183c:	f7ff fc86 	bl	800114c <radio_activate_queue>
            em2_encode_newpacket();
 8001840:	f000 f95c 	bl	8001afc <em2_encode_newpacket>
            em2_encode_newframe();
 8001844:	f000 f95c 	bl	8001b00 <em2_encode_newframe>
            type = mode_lut[rfctl.flags & 7];
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <rm2_txcsma_isr+0x124>)
 800184a:	785b      	ldrb	r3, [r3, #1]
 800184c:	f003 0207 	and.w	r2, r3, #7
 8001850:	4b36      	ldr	r3, [pc, #216]	; (800192c <rm2_txcsma_isr+0x134>)
 8001852:	4413      	add	r3, r2
            sx127xdrv_buffer_config(type, em2.bytes);
 8001854:	4a36      	ldr	r2, [pc, #216]	; (8001930 <rm2_txcsma_isr+0x138>)
 8001856:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800185a:	b289      	uxth	r1, r1
 800185c:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
 8001860:	f7ff fd7e 	bl	8001360 <sx127xdrv_buffer_config>
            sx127x_int_off();
 8001864:	f7ff fb08 	bl	8000e78 <sx127x_int_off>
                goto rm2_txcsma_START;
 8001868:	e01b      	b.n	80018a2 <rm2_txcsma_isr+0xaa>
            rfctl.state = RADIO_STATE_TXCCA1;
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <rm2_txcsma_isr+0x124>)
 800186c:	2218      	movs	r2, #24
 800186e:	701a      	strb	r2, [r3, #0]
            sub_cad_csma();
 8001870:	f7ff fefc 	bl	800166c <sub_cad_csma>
            break;
 8001874:	e03f      	b.n	80018f6 <rm2_txcsma_isr+0xfe>
            if (sub_cca_isfail() == False) {
 8001876:	f7ff fd5d 	bl	8001334 <sub_cca_isfail>
 800187a:	2800      	cmp	r0, #0
 800187c:	d13b      	bne.n	80018f6 <rm2_txcsma_isr+0xfe>
                radio_sleep();
 800187e:	f7ff fecf 	bl	8001620 <radio_sleep>
                rfctl.state = RADIO_STATE_TXCAD2;
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <rm2_txcsma_isr+0x124>)
 8001884:	2220      	movs	r2, #32
 8001886:	701a      	strb	r2, [r3, #0]
                radio_set_mactimer(0 /*phymac[0].tg */);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fc57 	bl	800113c <radio_set_mactimer>
 800188e:	e032      	b.n	80018f6 <rm2_txcsma_isr+0xfe>
            rfctl.state = RADIO_STATE_TXCCA2;
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <rm2_txcsma_isr+0x124>)
 8001892:	2228      	movs	r2, #40	; 0x28
 8001894:	701a      	strb	r2, [r3, #0]
            sub_cad_csma();
 8001896:	f7ff fee9 	bl	800166c <sub_cad_csma>
            break;
 800189a:	e02c      	b.n	80018f6 <rm2_txcsma_isr+0xfe>
            if (sub_cca_isfail()) {
 800189c:	f7ff fd4a 	bl	8001334 <sub_cca_isfail>
 80018a0:	bb48      	cbnz	r0, 80018f6 <rm2_txcsma_isr+0xfe>
            rfctl.state = RADIO_STATE_TXSTART;
 80018a2:	4c1e      	ldr	r4, [pc, #120]	; (800191c <rm2_txcsma_isr+0x124>)
 80018a4:	2330      	movs	r3, #48	; 0x30
 80018a6:	7023      	strb	r3, [r4, #0]
            radio.evtdone(0, (rfctl.flags & (RADIO_FLAG_PG | RADIO_FLAG_CONT | RADIO_FLAG_BG)));
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <rm2_txcsma_isr+0x128>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	7861      	ldrb	r1, [r4, #1]
 80018ae:	f001 0107 	and.w	r1, r1, #7
 80018b2:	2000      	movs	r0, #0
 80018b4:	4798      	blx	r3
            radio_gag();
 80018b6:	f7ff fd7d 	bl	80013b4 <radio_gag>
            txq.front[2] = phymac[0].tx_eirp;
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <rm2_txcsma_isr+0x130>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	4a19      	ldr	r2, [pc, #100]	; (8001924 <rm2_txcsma_isr+0x12c>)
 80018c0:	7912      	ldrb	r2, [r2, #4]
 80018c2:	709a      	strb	r2, [r3, #2]
            if (rfctl.flags & RADIO_FLAG_BG) {
 80018c4:	7863      	ldrb	r3, [r4, #1]
 80018c6:	f013 0f01 	tst.w	r3, #1
 80018ca:	d115      	bne.n	80018f8 <rm2_txcsma_isr+0x100>
            radio_flush_tx();
 80018cc:	f7ff ff8e 	bl	80017ec <radio_flush_tx>
            em2_encode_data();
 80018d0:	f000 f9a8 	bl	8001c24 <em2_encode_data>
            radio.state = RADIO_DataTX;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <rm2_txcsma_isr+0x128>)
 80018d6:	2206      	movs	r2, #6
 80018d8:	701a      	strb	r2, [r3, #0]
            rfctl.state = RADIO_STATE_TXDATA;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <rm2_txcsma_isr+0x124>)
 80018dc:	2238      	movs	r2, #56	; 0x38
 80018de:	701a      	strb	r2, [r3, #0]
            sx127x_iocfg_tx();
 80018e0:	f7ff fb72 	bl	8000fc8 <sx127x_iocfg_tx>
            sx127x_antsw_tx((ot_bool)BOARD_FEATURE(RF_PABOOST));
 80018e4:	2000      	movs	r0, #0
 80018e6:	f005 fdf9 	bl	80074dc <sx127x_antsw_tx>
            sx127x_int_txdata();
 80018ea:	f7ff faf3 	bl	8000ed4 <sx127x_int_txdata>
            sx127x_strobe(_OPMODE_TX, False);   //non-blocking call
 80018ee:	2100      	movs	r1, #0
 80018f0:	2003      	movs	r0, #3
 80018f2:	f7ff fb7f 	bl	8000ff4 <sx127x_strobe>
}
 80018f6:	bd10      	pop	{r4, pc}
                radio_idle();
 80018f8:	f7ff fe9a 	bl	8001630 <radio_idle>
                if (rfctl.flags & RADIO_FLAG_CONT) {
 80018fc:	7863      	ldrb	r3, [r4, #1]
 80018fe:	f013 0f02 	tst.w	r3, #2
 8001902:	d108      	bne.n	8001916 <rm2_txcsma_isr+0x11e>
                radio.evtdone((rfctl.flags & RADIO_FLAG_CONT), 0);
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <rm2_txcsma_isr+0x128>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <rm2_txcsma_isr+0x124>)
 800190a:	7850      	ldrb	r0, [r2, #1]
 800190c:	2100      	movs	r1, #0
 800190e:	f000 0002 	and.w	r0, r0, #2
 8001912:	4798      	blx	r3
 8001914:	e7da      	b.n	80018cc <rm2_txcsma_isr+0xd4>
                    rm2_flood_txstart();
 8001916:	f7ff fcaf 	bl	8001278 <rm2_flood_txstart>
 800191a:	e7f3      	b.n	8001904 <rm2_txcsma_isr+0x10c>
 800191c:	20002650 	.word	0x20002650
 8001920:	200026c4 	.word	0x200026c4
 8001924:	200026d0 	.word	0x200026d0
 8001928:	20002d74 	.word	0x20002d74
 800192c:	080091f0 	.word	0x080091f0
 8001930:	20002690 	.word	0x20002690

08001934 <sx127x_virtual_isr>:
void sx127x_virtual_isr(ot_u8 code) {
 8001934:	b508      	push	{r3, lr}
    switch (code) {
 8001936:	2806      	cmp	r0, #6
 8001938:	d823      	bhi.n	8001982 <sx127x_virtual_isr+0x4e>
 800193a:	e8df f000 	tbb	[pc, r0]
 800193e:	1304      	.short	0x1304
 8001940:	1c192216 	.word	0x1c192216
 8001944:	1f          	.byte	0x1f
 8001945:	00          	.byte	0x00
            ot_uint test = sx127x_check_cadpin();
 8001946:	f7ff faeb 	bl	8000f20 <sx127x_check_cadpin>
            if (test) {
 800194a:	b140      	cbz	r0, 800195e <sx127x_virtual_isr+0x2a>
                radio_gag();
 800194c:	f7ff fd32 	bl	80013b4 <radio_gag>
                sx127x_strobe(_OPMODE_STANDBY, True);
 8001950:	2101      	movs	r1, #1
 8001952:	4608      	mov	r0, r1
 8001954:	f7ff fb4e 	bl	8000ff4 <sx127x_strobe>
                sub_initrx();
 8001958:	f7ff fef8 	bl	800174c <sub_initrx>
 800195c:	e004      	b.n	8001968 <sx127x_virtual_isr+0x34>
                rm2_kill();
 800195e:	f7ff fe6f 	bl	8001640 <rm2_kill>
 8001962:	e001      	b.n	8001968 <sx127x_virtual_isr+0x34>
        case RFIV_RXDONE:       rm2_rxend_isr();        break;
 8001964:	f7ff fe3a 	bl	80015dc <rm2_rxend_isr>
}
 8001968:	bd08      	pop	{r3, pc}
        case RFIV_RXTIMEOUT:    sub_hwtimeout_isr();    break; 
 800196a:	f7ff fd47 	bl	80013fc <sub_hwtimeout_isr>
 800196e:	e7fb      	b.n	8001968 <sx127x_virtual_isr+0x34>
        case RFIV_RXHEADER:     rm2_rxsync_isr();       break;
 8001970:	f7ff fc86 	bl	8001280 <rm2_rxsync_isr>
 8001974:	e7f8      	b.n	8001968 <sx127x_virtual_isr+0x34>
        case RFIV_CCA:          rm2_txcsma_isr();       break;
 8001976:	f7ff ff3f 	bl	80017f8 <rm2_txcsma_isr>
 800197a:	e7f5      	b.n	8001968 <sx127x_virtual_isr+0x34>
        case RFIV_TXDONE:       rm2_txdata_isr();       break;
 800197c:	f7ff fe8c 	bl	8001698 <rm2_txdata_isr>
 8001980:	e7f2      	b.n	8001968 <sx127x_virtual_isr+0x34>
        default:                rm2_kill();             break;
 8001982:	f7ff fe5d 	bl	8001640 <rm2_kill>
}
 8001986:	e7ef      	b.n	8001968 <sx127x_virtual_isr+0x34>

08001988 <radio_mac_isr>:
OT_WEAK void radio_mac_isr(void) {
 8001988:	b508      	push	{r3, lr}
	if (radio.state == RADIO_DataRX) {
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <radio_mac_isr+0x3c>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b05      	cmp	r3, #5
 8001990:	d00a      	beq.n	80019a8 <radio_mac_isr+0x20>
	systim_disable_insertion();
 8001992:	f005 f99d 	bl	8006cd0 <systim_disable_insertion>
    if (radio.state == RADIO_Csma) {
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <radio_mac_isr+0x3c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d007      	beq.n	80019ae <radio_mac_isr+0x26>
    if (radio.state == RADIO_Listening) {
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d008      	beq.n	80019b4 <radio_mac_isr+0x2c>
	rm2_kill();
 80019a2:	f7ff fe4d 	bl	8001640 <rm2_kill>
}
 80019a6:	bd08      	pop	{r3, pc}
		rm2_rxdata_isr();
 80019a8:	f7ff feda 	bl	8001760 <rm2_rxdata_isr>
		return;
 80019ac:	e7fb      	b.n	80019a6 <radio_mac_isr+0x1e>
    	rm2_txcsma_isr();
 80019ae:	f7ff ff23 	bl	80017f8 <rm2_txcsma_isr>
    	return;
 80019b2:	e7f8      	b.n	80019a6 <radio_mac_isr+0x1e>
    	chan_rssi = sx127x_read(RFREG_LR_RSSIVALUE);
 80019b4:	201b      	movs	r0, #27
 80019b6:	f7ff fabb 	bl	8000f30 <sx127x_read>
    	if (chan_rssi >= phymac[0].cs_thr) {
 80019ba:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <radio_mac_isr+0x40>)
 80019bc:	799b      	ldrb	r3, [r3, #6]
 80019be:	4283      	cmp	r3, r0
 80019c0:	d8ef      	bhi.n	80019a2 <radio_mac_isr+0x1a>
 80019c2:	e7f0      	b.n	80019a6 <radio_mac_isr+0x1e>
 80019c4:	200026c4 	.word	0x200026c4
 80019c8:	200026d0 	.word	0x200026d0

080019cc <radio_getlinkinfo>:
#   if (M2_FEATURE_HSCODE)
    return &loralink;
#   else
    return NULL;
#   endif
}
 80019cc:	4800      	ldr	r0, [pc, #0]	; (80019d0 <radio_getlinkinfo+0x4>)
 80019ce:	4770      	bx	lr
 80019d0:	20002648 	.word	0x20002648

080019d4 <radio_getpwrcode>:
#endif

#ifndef EXTF_radio_getpwrcode
OT_WEAK ot_u8 radio_getpwrcode(void) {
 80019d4:	b508      	push	{r3, lr}
/// Power code: 0-3.  sx127x_getbasepwr() typically returns 3 on most platforms
    return sx127x_getbasepwr() - (radio.state > RADIO_Idle);
 80019d6:	f005 fcba 	bl	800734e <sx127x_getbasepwr>
 80019da:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <radio_getpwrcode+0x14>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	bf18      	it	ne
 80019e2:	3801      	subne	r0, #1
}
 80019e4:	b2c0      	uxtb	r0, r0
 80019e6:	bd08      	pop	{r3, pc}
 80019e8:	200026c4 	.word	0x200026c4

080019ec <sub_bytes_to_symbols_sf5>:
  */

typedef ot_uint (*converter_fn)(ot_int, ot_int);

static ot_uint sub_bytes_to_symbols_sf5(ot_int pkt_bytes, ot_int codesize) {
    return 8 + ( ((8*pkt_bytes - 12 + 19) / 20) * codesize );
 80019ec:	00c0      	lsls	r0, r0, #3
 80019ee:	3007      	adds	r0, #7
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <sub_bytes_to_symbols_sf5+0x1c>)
 80019f2:	fb83 2300 	smull	r2, r3, r3, r0
 80019f6:	17c0      	asrs	r0, r0, #31
 80019f8:	ebc0 00e3 	rsb	r0, r0, r3, asr #3
 80019fc:	fb10 f001 	smulbb	r0, r0, r1
 8001a00:	3008      	adds	r0, #8
}
 8001a02:	b280      	uxth	r0, r0
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	66666667 	.word	0x66666667

08001a0c <sub_bytes_to_symbols_sf7>:
static ot_uint sub_bytes_to_symbols_sf7(ot_int pkt_bytes, ot_int codesize) {
    return 8 + ( ((8*pkt_bytes - 20 + 27) / 28) * codesize );
 8001a0c:	00c0      	lsls	r0, r0, #3
 8001a0e:	3007      	adds	r0, #7
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <sub_bytes_to_symbols_sf7+0x1c>)
 8001a12:	fb83 2300 	smull	r2, r3, r3, r0
 8001a16:	4403      	add	r3, r0
 8001a18:	17c0      	asrs	r0, r0, #31
 8001a1a:	ebc0 1023 	rsb	r0, r0, r3, asr #4
 8001a1e:	fb10 f001 	smulbb	r0, r0, r1
 8001a22:	3008      	adds	r0, #8
}
 8001a24:	b280      	uxth	r0, r0
 8001a26:	4770      	bx	lr
 8001a28:	92492493 	.word	0x92492493

08001a2c <sub_bytes_to_symbols_sf9>:
static ot_uint sub_bytes_to_symbols_sf9(ot_int pkt_bytes, ot_int codesize) {
    return 8 + ( ((8*pkt_bytes - 28 + 35) / 36) * codesize );
 8001a2c:	00c0      	lsls	r0, r0, #3
 8001a2e:	3007      	adds	r0, #7
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <sub_bytes_to_symbols_sf9+0x1c>)
 8001a32:	fb83 2300 	smull	r2, r3, r3, r0
 8001a36:	17c0      	asrs	r0, r0, #31
 8001a38:	ebc0 00e3 	rsb	r0, r0, r3, asr #3
 8001a3c:	fb10 f001 	smulbb	r0, r0, r1
 8001a40:	3008      	adds	r0, #8
}
 8001a42:	b280      	uxth	r0, r0
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	38e38e39 	.word	0x38e38e39

08001a4c <sub_bytes_to_symbols_sf11>:
static ot_uint sub_bytes_to_symbols_sf11(ot_int pkt_bytes, ot_int codesize) {
    return 8 + ( ((8*pkt_bytes - 36 + 43) / 44) * codesize );
 8001a4c:	00c0      	lsls	r0, r0, #3
 8001a4e:	3007      	adds	r0, #7
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <sub_bytes_to_symbols_sf11+0x1c>)
 8001a52:	fb83 2300 	smull	r2, r3, r3, r0
 8001a56:	17c0      	asrs	r0, r0, #31
 8001a58:	ebc0 00e3 	rsb	r0, r0, r3, asr #3
 8001a5c:	fb10 f001 	smulbb	r0, r0, r1
 8001a60:	3008      	adds	r0, #8
}
 8001a62:	b280      	uxth	r0, r0
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	2e8ba2e9 	.word	0x2e8ba2e9

08001a6c <sub_symbols_to_ti>:



static ot_uint sub_symbols_to_ti(ot_int symbols, ot_uint miti_per_sym) {
    ot_ulong miti;
    miti    = symbols * miti_per_sym;
 8001a6c:	fb01 f000 	mul.w	r0, r1, r0
    miti   += 1023;
 8001a70:	f200 30ff 	addw	r0, r0, #1023	; 0x3ff
    return (ot_uint)(miti >> 10);
}
 8001a74:	f3c0 208f 	ubfx	r0, r0, #10, #16
 8001a78:	4770      	bx	lr
	...

08001a7c <rm2_rxtimeout_floor>:
                0, // 1100: FEC, extra coding, PAGE         (presently unspecified)
                0, // 1101: FEC, extra coding, SF9          (presently unspecified)
                0, // 1110: FEC, extra coding, SF7          (presently unspecified)
                0, // 1111: FEC, extra coding, SF5          (presently unspecified)
        };
    return (ot_uint)bgpkt_ti_lut[ (chan_id>>4) & 0x0F ];
 8001a7c:	0900      	lsrs	r0, r0, #4
}
 8001a7e:	4b01      	ldr	r3, [pc, #4]	; (8001a84 <rm2_rxtimeout_floor+0x8>)
 8001a80:	5c18      	ldrb	r0, [r3, r0]
 8001a82:	4770      	bx	lr
 8001a84:	08009264 	.word	0x08009264

08001a88 <rm2_default_tgd>:
            0, // 1101: FEC, extra coding, SF9          (presently unspecified)
            0, // 1110: FEC, extra coding, SF7          (presently unspecified)
            0, // 1111: FEC, extra coding, SF5          (presently unspecified)
    };
    
    return (ot_uint)tgdti_lut[ (chan_id>>4) & 0x0F ];
 8001a88:	4b02      	ldr	r3, [pc, #8]	; (8001a94 <rm2_default_tgd+0xc>)
 8001a8a:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
 8001a8e:	7c00      	ldrb	r0, [r0, #16]
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	08009264 	.word	0x08009264

08001a98 <rm2_bgpkt_duration>:
ot_uint rm2_pkt_duration(ot_queue* pkt_q) {
    return rm2_scale_codec( phymac[0].channel, (ot_uint)pkt_q->front[0]+2 );
}


ot_uint rm2_bgpkt_duration() {
 8001a98:	b508      	push	{r3, lr}
    return rm2_rxtimeout_floor(phymac[0].channel);
 8001a9a:	4b02      	ldr	r3, [pc, #8]	; (8001aa4 <rm2_bgpkt_duration+0xc>)
 8001a9c:	7898      	ldrb	r0, [r3, #2]
 8001a9e:	f7ff ffed 	bl	8001a7c <rm2_rxtimeout_floor>
}
 8001aa2:	bd08      	pop	{r3, pc}
 8001aa4:	200026d0 	.word	0x200026d0

08001aa8 <rm2_scale_codec>:


///@todo this entire function might be done in a direct lookup table, even if in blocks.
ot_uint rm2_scale_codec(ot_u8 channel_code, ot_uint buf_bytes) {
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aaa:	460f      	mov	r7, r1
    };

    ot_int codesize;
    ot_uint miti_per_sym;

    channel_code    = (channel_code >> 4) & 3;
 8001aac:	f3c0 1501 	ubfx	r5, r0, #4, #2
    codesize        = (channel_code & 0x80) ? 4 : 5;
 8001ab0:	2405      	movs	r4, #5
    miti_per_sym    = sx127x_symbol_miti(phymac[0].flags, channel_code);
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <rm2_scale_codec+0x34>)
 8001ab6:	7818      	ldrb	r0, [r3, #0]
 8001ab8:	f7ff f9ce 	bl	8000e58 <sx127x_symbol_miti>
 8001abc:	4606      	mov	r6, r0
    buf_bytes       = converter[channel_code](buf_bytes, codesize);
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <rm2_scale_codec+0x38>)
 8001ac0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8001ac4:	6a0b      	ldr	r3, [r1, #32]
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	b238      	sxth	r0, r7
 8001aca:	4798      	blx	r3
    
    // + Also add Preamble & Sync Overhead
    // + Also add 4 or 5 symbols because LoRa TX-END is late-arriving by one symbol group
    buf_bytes  += RF_PARAM_PKT_OVERHEAD + codesize;
 8001acc:	4420      	add	r0, r4
 8001ace:	b280      	uxth	r0, r0
 8001ad0:	300f      	adds	r0, #15
    
    return sub_symbols_to_ti(buf_bytes, miti_per_sym);
 8001ad2:	4631      	mov	r1, r6
 8001ad4:	b200      	sxth	r0, r0
 8001ad6:	f7ff ffc9 	bl	8001a6c <sub_symbols_to_ti>
}
 8001ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001adc:	200026d0 	.word	0x200026d0
 8001ae0:	08009264 	.word	0x08009264

08001ae4 <rm2_pkt_duration>:
ot_uint rm2_pkt_duration(ot_queue* pkt_q) {
 8001ae4:	b508      	push	{r3, lr}
    return rm2_scale_codec( phymac[0].channel, (ot_uint)pkt_q->front[0]+2 );
 8001ae6:	68c3      	ldr	r3, [r0, #12]
 8001ae8:	7819      	ldrb	r1, [r3, #0]
 8001aea:	3102      	adds	r1, #2
 8001aec:	4b02      	ldr	r3, [pc, #8]	; (8001af8 <rm2_pkt_duration+0x14>)
 8001aee:	7898      	ldrb	r0, [r3, #2]
 8001af0:	f7ff ffda 	bl	8001aa8 <rm2_scale_codec>
}
 8001af4:	bd08      	pop	{r3, pc}
 8001af6:	bf00      	nop
 8001af8:	200026d0 	.word	0x200026d0

08001afc <em2_encode_newpacket>:
  * has these optimized encode and decode functions.
  *
  */

void em2_encode_newpacket() {
}
 8001afc:	4770      	bx	lr
	...

08001b00 <em2_encode_newframe>:
        {0, 2},             // b111 : PG/BG encoded (impossible)
        };
#   endif
    ///@todo this retransmission case is broken since state was reassigned to bit counter
    /// Case where this is a retransmission.  Don't re-encode.
    if (txq.options.ubyte[UPPER] == 0) {
 8001b00:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <em2_encode_newframe+0x108>)
 8001b02:	78db      	ldrb	r3, [r3, #3]
 8001b04:	b923      	cbnz	r3, 8001b10 <em2_encode_newframe+0x10>
        em2.bytes = em2.state;
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <em2_encode_newframe+0x10c>)
 8001b08:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001b0c:	805a      	strh	r2, [r3, #2]
 8001b0e:	4770      	bx	lr
void em2_encode_newframe() {
 8001b10:	b570      	push	{r4, r5, r6, lr}
    /// Case where this is not a retransmission.  Encode.
    else {
        ot_u8 selector;
        ot_uint bytes_to_crc;

        selector = (rfctl.flags & 5) | ((phymac[0].channel >> 6) & 2);
 8001b12:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <em2_encode_newframe+0x110>)
 8001b14:	f993 4001 	ldrsb.w	r4, [r3, #1]
 8001b18:	f004 0305 	and.w	r3, r4, #5
 8001b1c:	4a3d      	ldr	r2, [pc, #244]	; (8001c14 <em2_encode_newframe+0x114>)
 8001b1e:	7894      	ldrb	r4, [r2, #2]
 8001b20:	09a4      	lsrs	r4, r4, #6
 8001b22:	f004 0402 	and.w	r4, r4, #2
 8001b26:	431c      	orrs	r4, r3
        ///@todo need to clean up this section for correct offsets
        ///@note txq.front[1] normally contains three things.
        /// 1. Listen bit   -- for multiframing, not supported on LoRa
        /// 2. RS Code bit  -- not supported in this impl
        /// 3. CRC5         -- used only with unencoded FG frames
        txq.options.ubyte[LOWER]= frparams[selector][0];
 8001b28:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001b2c:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <em2_encode_newframe+0x118>)
 8001b2e:	4413      	add	r3, r2
 8001b30:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 8001b34:	4e34      	ldr	r6, [pc, #208]	; (8001c08 <em2_encode_newframe+0x108>)
 8001b36:	70b5      	strb	r5, [r6, #2]
        txq.getcursor           = txq.front + frparams[selector][1];
 8001b38:	68f2      	ldr	r2, [r6, #12]
 8001b3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b3e:	441a      	add	r2, r3
 8001b40:	6072      	str	r2, [r6, #4]
        bytes_to_crc            = q_span(&txq);
 8001b42:	4630      	mov	r0, r6
 8001b44:	f004 f956 	bl	8005df4 <q_span>
        txq.front[0]            = bytes_to_crc + frparams[selector][0];
 8001b48:	68f3      	ldr	r3, [r6, #12]
 8001b4a:	182a      	adds	r2, r5, r0
 8001b4c:	701a      	strb	r2, [r3, #0]
        txq.front[1]            = 0;
 8001b4e:	68f3      	ldr	r3, [r6, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	705a      	strb	r2, [r3, #1]
        txq.putcursor          += (frparams[selector][0] + 1);
 8001b54:	1c6a      	adds	r2, r5, #1
 8001b56:	68b3      	ldr	r3, [r6, #8]
 8001b58:	4413      	add	r3, r2
 8001b5a:	60b3      	str	r3, [r6, #8]
        em2.bytes               = bytes_to_crc + (frparams[selector][0] + 1);
 8001b5c:	fa15 f580 	uxtah	r5, r5, r0
 8001b60:	3501      	adds	r5, #1
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <em2_encode_newframe+0x10c>)
 8001b64:	805d      	strh	r5, [r3, #2]

        ///@todo maybe this could be put at the end of the function?
        if ((selector & 1) == 0) {
 8001b66:	f014 0501 	ands.w	r5, r4, #1
 8001b6a:	d01e      	beq.n	8001baa <em2_encode_newframe+0xaa>
            crc_init_stream(&em2.crc, True, bytes_to_crc, txq.getcursor);
        }

        /// Frame CRC for PG and FG frames
        /// Header CRC for unencoded FG frames
        if (selector == 0) {
 8001b6c:	b324      	cbz	r4, 8001bb8 <em2_encode_newframe+0xb8>

#       if (M2_FEATURE(HSCODE))
        ///@todo This implementation doesn't yet support dynamic rates in TX
        /// HSCode supports dynamic rates in FG frames.
        /// The first block is always RATE48 (BG), or RATE64 (PG, FG).
		else if (selector & 2) {
 8001b6e:	f014 0f02 	tst.w	r4, #2
 8001b72:	d015      	beq.n	8001ba0 <em2_encode_newframe+0xa0>
		    if (selector & 1) {
 8001b74:	b31d      	cbz	r5, 8001bbe <em2_encode_newframe+0xbe>
		        txq.front[1]= frparams[selector][2];
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <em2_encode_newframe+0x108>)
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <em2_encode_newframe+0x118>)
 8001b80:	440b      	add	r3, r1
 8001b82:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b86:	7053      	strb	r3, [r2, #1]
		        em2.bytes   = 16;
 8001b88:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <em2_encode_newframe+0x10c>)
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	805a      	strh	r2, [r3, #2]

		        em2.bytes   = 16;
		        em2.bytes  += hsc_octetsinframe(txq.front[1], q_span(&txq)-8);
		    }

		    hsc_init(&hsc, frparams[selector][2]);
 8001b8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <em2_encode_newframe+0x118>)
 8001b94:	441c      	add	r4, r3
 8001b96:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 8001b9a:	4820      	ldr	r0, [pc, #128]	; (8001c1c <em2_encode_newframe+0x11c>)
 8001b9c:	f000 f9ea 	bl	8001f74 <hsc_init>
		}
#       endif

		/// Save amount of encoded bytes for this frame (last frame) in state
		em2.state = em2.bytes;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <em2_encode_newframe+0x10c>)
 8001ba2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001ba6:	809a      	strh	r2, [r3, #4]
    }
}
 8001ba8:	bd70      	pop	{r4, r5, r6, pc}
            crc_init_stream(&em2.crc, True, bytes_to_crc, txq.getcursor);
 8001baa:	6873      	ldr	r3, [r6, #4]
 8001bac:	4602      	mov	r2, r0
 8001bae:	2101      	movs	r1, #1
 8001bb0:	481b      	ldr	r0, [pc, #108]	; (8001c20 <em2_encode_newframe+0x120>)
 8001bb2:	f004 f857 	bl	8005c64 <crc_init_stream>
 8001bb6:	e7d9      	b.n	8001b6c <em2_encode_newframe+0x6c>
            em2_add_crc5();
 8001bb8:	f002 fb5a 	bl	8004270 <em2_add_crc5>
 8001bbc:	e7f0      	b.n	8001ba0 <em2_encode_newframe+0xa0>
		    else if (selector & 4) {
 8001bbe:	f014 0f04 	tst.w	r4, #4
 8001bc2:	d00c      	beq.n	8001bde <em2_encode_newframe+0xde>
		        txq.front[1]= frparams[selector][2];
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <em2_encode_newframe+0x108>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <em2_encode_newframe+0x118>)
 8001bce:	440b      	add	r3, r1
 8001bd0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001bd4:	7053      	strb	r3, [r2, #1]
		        em2.bytes   = 32;
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <em2_encode_newframe+0x10c>)
 8001bd8:	2220      	movs	r2, #32
 8001bda:	805a      	strh	r2, [r3, #2]
 8001bdc:	e7d7      	b.n	8001b8e <em2_encode_newframe+0x8e>
		        txq.front[1]= RATE64;
 8001bde:	480a      	ldr	r0, [pc, #40]	; (8001c08 <em2_encode_newframe+0x108>)
 8001be0:	68c3      	ldr	r3, [r0, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	705a      	strb	r2, [r3, #1]
		        em2.bytes   = 16;
 8001be6:	4d09      	ldr	r5, [pc, #36]	; (8001c0c <em2_encode_newframe+0x10c>)
 8001be8:	2310      	movs	r3, #16
 8001bea:	806b      	strh	r3, [r5, #2]
		        em2.bytes  += hsc_octetsinframe(txq.front[1], q_span(&txq)-8);
 8001bec:	68c3      	ldr	r3, [r0, #12]
 8001bee:	785e      	ldrb	r6, [r3, #1]
 8001bf0:	f004 f900 	bl	8005df4 <q_span>
 8001bf4:	f1a0 0108 	sub.w	r1, r0, #8
 8001bf8:	b2c9      	uxtb	r1, r1
 8001bfa:	4630      	mov	r0, r6
 8001bfc:	f000 f9ac 	bl	8001f58 <hsc_octetsinframe>
 8001c00:	886b      	ldrh	r3, [r5, #2]
 8001c02:	4418      	add	r0, r3
 8001c04:	8068      	strh	r0, [r5, #2]
 8001c06:	e7c2      	b.n	8001b8e <em2_encode_newframe+0x8e>
 8001c08:	20002d74 	.word	0x20002d74
 8001c0c:	20002690 	.word	0x20002690
 8001c10:	20002650 	.word	0x20002650
 8001c14:	200026d0 	.word	0x200026d0
 8001c18:	08009264 	.word	0x08009264
 8001c1c:	20002234 	.word	0x20002234
 8001c20:	20002698 	.word	0x20002698

08001c24 <em2_encode_data>:


void em2_encode_data(void) {
/// Only encode if this if not a retransmission
    if (txq.options.ubyte[UPPER] != 0) {
 8001c24:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <em2_encode_data+0xa8>)
 8001c26:	78db      	ldrb	r3, [r3, #3]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d04e      	beq.n	8001cca <em2_encode_data+0xa6>
void em2_encode_data(void) {
 8001c2c:	b570      	push	{r4, r5, r6, lr}

        /// Do CRC of the long frame (FG/PG) or the short frame (BG)
        if (txq.options.ubyte[LOWER] != 0) {
 8001c2e:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <em2_encode_data+0xa8>)
 8001c30:	789b      	ldrb	r3, [r3, #2]
 8001c32:	b163      	cbz	r3, 8001c4e <em2_encode_data+0x2a>
            crc_calc_nstream(&em2.crc, em2.crc.count);
 8001c34:	4826      	ldr	r0, [pc, #152]	; (8001cd0 <em2_encode_data+0xac>)
 8001c36:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8001c3a:	b289      	uxth	r1, r1
 8001c3c:	3008      	adds	r0, #8
 8001c3e:	f004 f837 	bl	8005cb0 <crc_calc_nstream>
        else {
            bgcrc8_put(txq.getcursor);
        }

#       if (M2_FEATURE(HSCODE))
        if (phymac[0].channel & 0x80) {
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <em2_encode_data+0xb0>)
 8001c44:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	da38      	bge.n	8001cbe <em2_encode_data+0x9a>
 8001c4c:	e021      	b.n	8001c92 <em2_encode_data+0x6e>
            bgcrc8_put(txq.getcursor);
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <em2_encode_data+0xa8>)
 8001c50:	6858      	ldr	r0, [r3, #4]
 8001c52:	f001 fb98 	bl	8003386 <bgcrc8_put>
 8001c56:	e7f4      	b.n	8001c42 <em2_encode_data+0x1e>
            while (em2.bytes > 0) {
                hsc_encode(&hsc, hsc_iobuf, q_markbyte(&txq, hsc.infobytes));
 8001c58:	4c1f      	ldr	r4, [pc, #124]	; (8001cd8 <em2_encode_data+0xb4>)
 8001c5a:	4e1c      	ldr	r6, [pc, #112]	; (8001ccc <em2_encode_data+0xa8>)
 8001c5c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8001c60:	4630      	mov	r0, r6
 8001c62:	f004 f90a 	bl	8005e7a <q_markbyte>
 8001c66:	4d1d      	ldr	r5, [pc, #116]	; (8001cdc <em2_encode_data+0xb8>)
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f000 f99f 	bl	8001fb0 <hsc_encode>
                hsc_init(&hsc, txq.front[1]&7);
 8001c72:	68f3      	ldr	r3, [r6, #12]
 8001c74:	7859      	ldrb	r1, [r3, #1]
 8001c76:	f001 0107 	and.w	r1, r1, #7
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f000 f97a 	bl	8001f74 <hsc_init>
                sx127x_burstwrite(RFREG_LR_FIFO, 16, hsc_iobuf);
 8001c80:	462a      	mov	r2, r5
 8001c82:	2110      	movs	r1, #16
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7ff f9e5 	bl	8001054 <sx127x_burstwrite>
                em2.bytes -= 16;
 8001c8a:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <em2_encode_data+0xac>)
 8001c8c:	8853      	ldrh	r3, [r2, #2]
 8001c8e:	3b10      	subs	r3, #16
 8001c90:	8053      	strh	r3, [r2, #2]
            while (em2.bytes > 0) {
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <em2_encode_data+0xac>)
 8001c94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	dcdd      	bgt.n	8001c58 <em2_encode_data+0x34>
 8001c9c:	e014      	b.n	8001cc8 <em2_encode_data+0xa4>
        }
        else
#       endif
        {   ///@todo fix spibus_io function to have an internal buffer and such a loop as below.
            while (em2.bytes > 0) {
                ot_int fill = (em2.bytes > 32) ? 32 : em2.bytes;
 8001c9e:	461c      	mov	r4, r3
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	bfa8      	it	ge
 8001ca4:	2420      	movge	r4, #32
                em2.bytes  -= fill;
 8001ca6:	1b1b      	subs	r3, r3, r4
 8001ca8:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <em2_encode_data+0xac>)
 8001caa:	8053      	strh	r3, [r2, #2]
                sx127x_burstwrite(RFREG_LR_FIFO, fill, q_markbyte(&txq, fill));
 8001cac:	4621      	mov	r1, r4
 8001cae:	4807      	ldr	r0, [pc, #28]	; (8001ccc <em2_encode_data+0xa8>)
 8001cb0:	f004 f8e3 	bl	8005e7a <q_markbyte>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	b2e1      	uxtb	r1, r4
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff f9cb 	bl	8001054 <sx127x_burstwrite>
            while (em2.bytes > 0) {
 8001cbe:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <em2_encode_data+0xac>)
 8001cc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	dcea      	bgt.n	8001c9e <em2_encode_data+0x7a>
            }
        }
    }
}
 8001cc8:	bd70      	pop	{r4, r5, r6, pc}
 8001cca:	4770      	bx	lr
 8001ccc:	20002d74 	.word	0x20002d74
 8001cd0:	20002690 	.word	0x20002690
 8001cd4:	200026d0 	.word	0x200026d0
 8001cd8:	20002234 	.word	0x20002234
 8001cdc:	200002f4 	.word	0x200002f4

08001ce0 <em2_decode_newpacket>:


void em2_decode_newpacket() {
/// Lora cannot support multiframe packets, so there is no difference between
/// packet and frame
}
 8001ce0:	4770      	bx	lr
	...

08001ce4 <em2_decode_newframe>:

void em2_decode_newframe() {
 8001ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce6:	b083      	sub	sp, #12
            5, // b101 : PG/BG (impossible)
            17, // b110 : PG, encoded
            17  // b111 : PG/BG encoded (impossible)
    };
    uint8_t selector;
    lorasf_t chansf = (phymac[0].channel >> 4) & 3;
 8001ce8:	4e2a      	ldr	r6, [pc, #168]	; (8001d94 <em2_decode_newframe+0xb0>)
 8001cea:	78b2      	ldrb	r2, [r6, #2]
 8001cec:	f3c2 1501 	ubfx	r5, r2, #4, #2
#   ifdef __DECODER_DEBUG__
    hits_sv = 0;
#   endif

    /// 1. Prepare the RX Queue to receive a new frame.
    q_empty(&rxq);
 8001cf0:	4829      	ldr	r0, [pc, #164]	; (8001d98 <em2_decode_newframe+0xb4>)
 8001cf2:	f004 f8a0 	bl	8005e36 <q_empty>

    /// The selector value is
    selector = (rfctl.flags & 5) | ((phymac[0].channel >> 6) & 2);
 8001cf6:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <em2_decode_newframe+0xb8>)
 8001cf8:	f993 4001 	ldrsb.w	r4, [r3, #1]
 8001cfc:	f004 0305 	and.w	r3, r4, #5
 8001d00:	78b4      	ldrb	r4, [r6, #2]
 8001d02:	09a4      	lsrs	r4, r4, #6
 8001d04:	f004 0402 	and.w	r4, r4, #2
 8001d08:	431c      	orrs	r4, r3
    /// provide seed information for the LLR interpolator.  Also, we need to provide
    /// default decoding setup -- lower 3 bits of front[1] are used for variable
    /// rate information.  The first frame is always RATE64, unless it's a BG frame
    /// in which case it's RATE48.
#   if (M2_FEATURE(HSCODE))
    if (selector & 2) {
 8001d0a:	f014 0f02 	tst.w	r4, #2
 8001d0e:	d124      	bne.n	8001d5a <em2_decode_newframe+0x76>
    	rxq.front[1] = rate; // initial encoding rate
    }
    else
#   endif
    {
        rxq.front[1] = 0;
 8001d10:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <em2_decode_newframe+0xb4>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	705a      	strb	r2, [r3, #1]
    }

    rxq.front[0]    = initial_bytes[selector];
 8001d18:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <em2_decode_newframe+0xb4>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <em2_decode_newframe+0xbc>)
 8001d1e:	1911      	adds	r1, r2, r4
 8001d20:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
 8001d24:	7019      	strb	r1, [r3, #0]
    em2.bytes       = 0;
 8001d26:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <em2_decode_newframe+0xc0>)
 8001d28:	2100      	movs	r1, #0
 8001d2a:	8059      	strh	r1, [r3, #2]
    em2.state       = 0;
 8001d2c:	8099      	strh	r1, [r3, #4]
    em2.lctl        = bits_per_lorablock[chansf];
 8001d2e:	442a      	add	r2, r5
 8001d30:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8001d34:	701a      	strb	r2, [r3, #0]
    em2.crc5        = 0;
 8001d36:	7059      	strb	r1, [r3, #1]

    /// BG and PG frames are fixed-length, and they are shoehorned into the
    /// generic header structure via a special operation, here.
    if (selector & (RADIO_FLAG_BG | RADIO_FLAG_PG)) {
 8001d38:	f014 0f05 	tst.w	r4, #5
 8001d3c:	d00b      	beq.n	8001d56 <em2_decode_newframe+0x72>
        rxq.front[1]       |= 0x20;
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <em2_decode_newframe+0xb4>)
 8001d40:	68d9      	ldr	r1, [r3, #12]
 8001d42:	784a      	ldrb	r2, [r1, #1]
 8001d44:	f042 0220 	orr.w	r2, r2, #32
 8001d48:	704a      	strb	r2, [r1, #1]
        rxq.options.ushort  = 2;
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	805a      	strh	r2, [r3, #2]
        rxq.putcursor       = &rxq.front[2];
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	3202      	adds	r2, #2
 8001d52:	609a      	str	r2, [r3, #8]
        rxq.getcursor       = &rxq.front[2];
 8001d54:	605a      	str	r2, [r3, #4]
    }
}
 8001d56:	b003      	add	sp, #12
 8001d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ot_u8 rssi_nb   = sx127x_read(RFREG_LR_RSSIVALUE);
 8001d5a:	201b      	movs	r0, #27
 8001d5c:	f7ff f8e8 	bl	8000f30 <sx127x_read>
 8001d60:	4607      	mov	r7, r0
        ot_u8 rssi_wb   = sx127x_read(RFREG_LR_RSSIWIDEBAND);
 8001d62:	202c      	movs	r0, #44	; 0x2c
 8001d64:	f7ff f8e4 	bl	8000f30 <sx127x_read>
    	hscrate_t rate  = (selector & RADIO_FLAG_BG) ? RATE48 : RATE64;
 8001d68:	f014 0f01 	tst.w	r4, #1
 8001d6c:	d00f      	beq.n	8001d8e <em2_decode_newframe+0xaa>
 8001d6e:	2606      	movs	r6, #6
    	lorallr_init(&lorallr, rate, chansf, rssi_nb, rssi_wb);
 8001d70:	9000      	str	r0, [sp, #0]
 8001d72:	463b      	mov	r3, r7
 8001d74:	462a      	mov	r2, r5
 8001d76:	4631      	mov	r1, r6
 8001d78:	480b      	ldr	r0, [pc, #44]	; (8001da8 <em2_decode_newframe+0xc4>)
 8001d7a:	f001 fa25 	bl	80031c8 <lorallr_init>
    	hsc_init(&hsc, rate);
 8001d7e:	4631      	mov	r1, r6
 8001d80:	480a      	ldr	r0, [pc, #40]	; (8001dac <em2_decode_newframe+0xc8>)
 8001d82:	f000 f8f7 	bl	8001f74 <hsc_init>
    	rxq.front[1] = rate; // initial encoding rate
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <em2_decode_newframe+0xb4>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	705e      	strb	r6, [r3, #1]
 8001d8c:	e7c4      	b.n	8001d18 <em2_decode_newframe+0x34>
    	hscrate_t rate  = (selector & RADIO_FLAG_BG) ? RATE48 : RATE64;
 8001d8e:	2600      	movs	r6, #0
 8001d90:	e7ee      	b.n	8001d70 <em2_decode_newframe+0x8c>
 8001d92:	bf00      	nop
 8001d94:	200026d0 	.word	0x200026d0
 8001d98:	20002d60 	.word	0x20002d60
 8001d9c:	20002650 	.word	0x20002650
 8001da0:	08009264 	.word	0x08009264
 8001da4:	20002690 	.word	0x20002690
 8001da8:	2000223c 	.word	0x2000223c
 8001dac:	20002234 	.word	0x20002234

08001db0 <em2_decode_data>:




void em2_decode_data(void) {
 8001db0:	b538      	push	{r3, r4, r5, lr}
    int newbytes;
    int grab;
    ot_u8* data;

    /// Live encoder needs to track the predicted bit position over the air
    em2.state += em2.lctl;
 8001db2:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <em2_decode_data+0xec>)
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	8899      	ldrh	r1, [r3, #4]
 8001db8:	440a      	add	r2, r1
 8001dba:	809a      	strh	r2, [r3, #4]

    /// 1. When using HSCODE FEC, we need to take the RSSI and SNR values and log them.
    ///    It's important to do this as close to the time of reception as possible.
#	if (M2_FEATURE(HSCODE))
    if (phymac[0].channel & 0x80) {
 8001dbc:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <em2_decode_data+0xf0>)
 8001dbe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db12      	blt.n	8001dec <em2_decode_data+0x3c>
#   endif

    /// 2. Just download whatever fresh data is in the LoRa radio and put it
    ///    on the rx queue.  After data is on the rx queue, it will be reprocessed
    ///    if it needs to be.  The implementation here has a 32 byte SPI buffer.
    rxbytes     = sx127x_read(RFREG_LR_FIFORXBYTEADDR);
 8001dc6:	2025      	movs	r0, #37	; 0x25
 8001dc8:	f7ff f8b2 	bl	8000f30 <sx127x_read>
 8001dcc:	4604      	mov	r4, r0
    rxptr       = sx127x_read(RFREG_LR_FIFOADDRPTR);
 8001dce:	200d      	movs	r0, #13
 8001dd0:	f7ff f8ae 	bl	8000f30 <sx127x_read>
    newbytes    = (int)rxbytes - (int)rxptr;
 8001dd4:	1a24      	subs	r4, r4, r0
    tim_sv[hits_sv] = LPTIM1->CNT;
    bits_sv[hits_sv] = em2.state;
    hits_sv++;
#   endif

    if (newbytes <= 0) {
 8001dd6:	2c00      	cmp	r4, #0
 8001dd8:	dd3c      	ble.n	8001e54 <em2_decode_data+0xa4>
    }

    // rxbyte-addr is at the last loaded byte, not ahead of the last loaded byte,
    // so need to increment newbytes.
    //newbytes++;
    data = rxq.front + rxq.options.ushort + em2.bytes;
 8001dda:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <em2_decode_data+0xf4>)
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	885b      	ldrh	r3, [r3, #2]
 8001de0:	492e      	ldr	r1, [pc, #184]	; (8001e9c <em2_decode_data+0xec>)
 8001de2:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8001de6:	440b      	add	r3, r1
 8001de8:	441a      	add	r2, r3
	while (newbytes > 0) {
 8001dea:	e01d      	b.n	8001e28 <em2_decode_data+0x78>
        ot_u8 rssi_wb  = sx127x_read(RFREG_LR_RSSIWIDEBAND);
 8001dec:	202c      	movs	r0, #44	; 0x2c
 8001dee:	f7ff f89f 	bl	8000f30 <sx127x_read>
 8001df2:	4604      	mov	r4, r0
        ot_u8 rssi_nb  = sx127x_read(RFREG_LR_RSSIVALUE);
 8001df4:	201b      	movs	r0, #27
 8001df6:	f7ff f89b 	bl	8000f30 <sx127x_read>
        lorallr_pushsample(&lorallr, rssi_nb, rssi_wb, em2.lctl);
 8001dfa:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <em2_decode_data+0xec>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4622      	mov	r2, r4
 8001e00:	4601      	mov	r1, r0
 8001e02:	4829      	ldr	r0, [pc, #164]	; (8001ea8 <em2_decode_data+0xf8>)
 8001e04:	f001 fa08 	bl	8003218 <lorallr_pushsample>
 8001e08:	e7dd      	b.n	8001dc6 <em2_decode_data+0x16>
	    ot_u8* loadptr;
		grab        = (newbytes > 32) ? 32 : newbytes;
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	2c20      	cmp	r4, #32
 8001e0e:	bfa8      	it	ge
 8001e10:	2120      	movge	r1, #32
		newbytes   -= grab;
 8001e12:	1a64      	subs	r4, r4, r1
		em2.bytes  += grab;
 8001e14:	4821      	ldr	r0, [pc, #132]	; (8001e9c <em2_decode_data+0xec>)
 8001e16:	8843      	ldrh	r3, [r0, #2]
 8001e18:	440b      	add	r3, r1
 8001e1a:	8043      	strh	r3, [r0, #2]
		loadptr     = data;
		data       += grab;
 8001e1c:	1855      	adds	r5, r2, r1
		sx127x_burstread(RFREG_LR_FIFO, grab, loadptr);
 8001e1e:	b2c9      	uxtb	r1, r1
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff f89d 	bl	8000f60 <sx127x_burstread>
		data       += grab;
 8001e26:	462a      	mov	r2, r5
	while (newbytes > 0) {
 8001e28:	2c00      	cmp	r4, #0
 8001e2a:	dcee      	bgt.n	8001e0a <em2_decode_data+0x5a>
    /// 3. Raw data is in the queue.  If frame is unencoded, nothing more to do.
    ///    Encoded frames, on the other hand, require a substantial amount of
    ///    processing.  Decoding is block-based and occurs when a block is
    ///    available in the queue.  Blocks are 16 bytes.
#   if (M2_FEATURE(HSCODE))
	if (phymac[0].channel & 0x80) {
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <em2_decode_data+0xf0>)
 8001e2e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db0f      	blt.n	8001e56 <em2_decode_data+0xa6>
		}
	}
	else
#   endif
	{
	    rxq.putcursor   = rxq.getcursor + em2.bytes;
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <em2_decode_data+0xf4>)
 8001e38:	6859      	ldr	r1, [r3, #4]
 8001e3a:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <em2_decode_data+0xec>)
 8001e3c:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8001e40:	4401      	add	r1, r0
 8001e42:	6099      	str	r1, [r3, #8]
	    em2.crc5       += (em2.bytes >= 2);
 8001e44:	7853      	ldrb	r3, [r2, #1]
 8001e46:	2801      	cmp	r0, #1
 8001e48:	bfc8      	it	gt
 8001e4a:	3301      	addgt	r3, #1
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	7053      	strb	r3, [r2, #1]
	    if (em2.crc5 == 1) {
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d01a      	beq.n	8001e8a <em2_decode_data+0xda>
	        if (em2_check_crc5() != 0) {
	            em2.state = -1;
	        }
	    }
	}
}
 8001e54:	bd38      	pop	{r3, r4, r5, pc}
		blcursor    = rxq.getcursor - (rxq.front + rxq.options.ushort);
 8001e56:	4913      	ldr	r1, [pc, #76]	; (8001ea4 <em2_decode_data+0xf4>)
 8001e58:	684b      	ldr	r3, [r1, #4]
 8001e5a:	68ca      	ldr	r2, [r1, #12]
 8001e5c:	8849      	ldrh	r1, [r1, #2]
 8001e5e:	440a      	add	r2, r1
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	b21b      	sxth	r3, r3
		em2.crc5   += (em2.bytes >= 16);
 8001e64:	490d      	ldr	r1, [pc, #52]	; (8001e9c <em2_decode_data+0xec>)
 8001e66:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8001e6a:	7848      	ldrb	r0, [r1, #1]
 8001e6c:	2a0f      	cmp	r2, #15
 8001e6e:	bfc8      	it	gt
 8001e70:	3001      	addgt	r0, #1
 8001e72:	7048      	strb	r0, [r1, #1]
		if ((em2.bytes-blcursor) >= 16) {
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b0f      	cmp	r3, #15
 8001e78:	ddec      	ble.n	8001e54 <em2_decode_data+0xa4>
		    sys.task_RFA.event = 6;
 8001e7a:	480c      	ldr	r0, [pc, #48]	; (8001eac <em2_decode_data+0xfc>)
 8001e7c:	2306      	movs	r3, #6
 8001e7e:	f800 3f04 	strb.w	r3, [r0, #4]!
		    sys_preempt(&sys.task_RFA, 0);
 8001e82:	2100      	movs	r1, #0
 8001e84:	f004 fd4c 	bl	8006920 <sys_preempt>
 8001e88:	e7e4      	b.n	8001e54 <em2_decode_data+0xa4>
	        if (em2_check_crc5() != 0) {
 8001e8a:	f002 fa03 	bl	8004294 <em2_check_crc5>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d0e0      	beq.n	8001e54 <em2_decode_data+0xa4>
	            em2.state = -1;
 8001e92:	4b02      	ldr	r3, [pc, #8]	; (8001e9c <em2_decode_data+0xec>)
 8001e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e98:	809a      	strh	r2, [r3, #4]
 8001e9a:	e7db      	b.n	8001e54 <em2_decode_data+0xa4>
 8001e9c:	20002690 	.word	0x20002690
 8001ea0:	200026d0 	.word	0x200026d0
 8001ea4:	20002d60 	.word	0x20002d60
 8001ea8:	2000223c 	.word	0x2000223c
 8001eac:	20002db4 	.word	0x20002db4

08001eb0 <em2_decode_endframe>:
/// Perform block-code error correction if available, strip blockcoding if its
/// there (after processing), and strip CRC
    ot_u16 crc_invalid;

    /// Decoder state errors (state < 1)
    if (em2.state < 1) {
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <em2_decode_endframe+0x84>)
 8001eb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	dd37      	ble.n	8001f2a <em2_decode_endframe+0x7a>
ot_u16 em2_decode_endframe() {
 8001eba:	b510      	push	{r4, lr}
        crc_invalid = 1;
    }
    else {
        /// In FEC mode, need to clean-up rxq after successful packet received
#       if (M2_FEATURE(HSCODE))
        if (phymac[0].channel & 0x80) {
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <em2_decode_endframe+0x88>)
 8001ebe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db15      	blt.n	8001ef2 <em2_decode_endframe+0x42>
#       endif
        {
        }

        /// BG Frame has CRC8
        if (rfctl.flags & RADIO_FLAG_BG) {
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <em2_decode_endframe+0x8c>)
 8001ec8:	785b      	ldrb	r3, [r3, #1]
 8001eca:	f013 0f01 	tst.w	r3, #1
 8001ece:	d01a      	beq.n	8001f06 <em2_decode_endframe+0x56>
            crc_invalid = bgcrc8_check(rxq.getcursor);
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <em2_decode_endframe+0x90>)
 8001ed2:	6858      	ldr	r0, [r3, #4]
 8001ed4:	f001 fa50 	bl	8003378 <bgcrc8_check>
 8001ed8:	b280      	uxth	r0, r0
            /// PG, FG frames have CRC16
            crc_invalid     = crc_block(&em2.crc, False, q_span(&rxq), rxq.getcursor);
            rxq.front[0]   -= 2;
            rxq.putcursor  -= 2;
        }
        rxq.back = rxq.putcursor;
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <em2_decode_endframe+0x90>)
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	611a      	str	r2, [r3, #16]

        ///@note marker that shows packet is successfully read into driver.
        rxq.front[1] |= 0x20;
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	7853      	ldrb	r3, [r2, #1]
 8001ee4:	f043 0320 	orr.w	r3, r3, #32
 8001ee8:	7053      	strb	r3, [r2, #1]
//        errs   += ((diffbits & 0x01) != 0);
//        loralink.max_ebn0 += errs;
//    }
//#   endif

    rxq.options.ushort = 0;
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <em2_decode_endframe+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	805a      	strh	r2, [r3, #2]
    return crc_invalid;
}
 8001ef0:	bd10      	pop	{r4, pc}
            rxq.getcursor   = rxq.front + rxq.options.ushort;
 8001ef2:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <em2_decode_endframe+0x90>)
 8001ef4:	68d3      	ldr	r3, [r2, #12]
 8001ef6:	8851      	ldrh	r1, [r2, #2]
 8001ef8:	4419      	add	r1, r3
 8001efa:	6051      	str	r1, [r2, #4]
            rxq.putcursor   = rxq.front + rxq.front[0] + 1;
 8001efc:	7819      	ldrb	r1, [r3, #0]
 8001efe:	3101      	adds	r1, #1
 8001f00:	440b      	add	r3, r1
 8001f02:	6093      	str	r3, [r2, #8]
 8001f04:	e7df      	b.n	8001ec6 <em2_decode_endframe+0x16>
            crc_invalid     = crc_block(&em2.crc, False, q_span(&rxq), rxq.getcursor);
 8001f06:	4c0e      	ldr	r4, [pc, #56]	; (8001f40 <em2_decode_endframe+0x90>)
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f003 ff73 	bl	8005df4 <q_span>
 8001f0e:	6863      	ldr	r3, [r4, #4]
 8001f10:	4602      	mov	r2, r0
 8001f12:	2100      	movs	r1, #0
 8001f14:	480b      	ldr	r0, [pc, #44]	; (8001f44 <em2_decode_endframe+0x94>)
 8001f16:	f003 fef1 	bl	8005cfc <crc_block>
            rxq.front[0]   -= 2;
 8001f1a:	68e2      	ldr	r2, [r4, #12]
 8001f1c:	7813      	ldrb	r3, [r2, #0]
 8001f1e:	3b02      	subs	r3, #2
 8001f20:	7013      	strb	r3, [r2, #0]
            rxq.putcursor  -= 2;
 8001f22:	68a3      	ldr	r3, [r4, #8]
 8001f24:	3b02      	subs	r3, #2
 8001f26:	60a3      	str	r3, [r4, #8]
 8001f28:	e7d7      	b.n	8001eda <em2_decode_endframe+0x2a>
        crc_invalid = 1;
 8001f2a:	2001      	movs	r0, #1
    rxq.options.ushort = 0;
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <em2_decode_endframe+0x90>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	805a      	strh	r2, [r3, #2]
}
 8001f32:	4770      	bx	lr
 8001f34:	20002690 	.word	0x20002690
 8001f38:	200026d0 	.word	0x200026d0
 8001f3c:	20002650 	.word	0x20002650
 8001f40:	20002d60 	.word	0x20002d60
 8001f44:	20002698 	.word	0x20002698

08001f48 <hsc_bytesperblock>:

uint8_t hsc_bytesperblock(hscrate_t rate) {
	static const uint8_t infobits_select[8] = {
	        8, 9, 10, 11, 12, 13, 6, 6
	};
	return infobits_select[rate];
 8001f48:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <hsc_bytesperblock+0xc>)
 8001f4a:	4418      	add	r0, r3
}
 8001f4c:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	080092b8 	.word	0x080092b8

08001f58 <hsc_octetsinframe>:
	return infobits_select[rate];
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <hsc_octetsinframe+0x18>)
 8001f5a:	4418      	add	r0, r3
uint16_t hsc_octetsinframe(hscrate_t rate, uint8_t databytes) {
	uint16_t foctets;
	uint16_t block;

	block	= (uint16_t)hsc_bytesperblock(rate);
	foctets = ((uint16_t)databytes + (block-1)) / block;
 8001f5c:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
 8001f60:	1e53      	subs	r3, r2, #1
 8001f62:	1858      	adds	r0, r3, r1
 8001f64:	fb90 f0f2 	sdiv	r0, r0, r2

	return (foctets << 4);
 8001f68:	0100      	lsls	r0, r0, #4
 8001f6a:	b280      	uxth	r0, r0
}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	080092b8 	.word	0x080092b8

08001f74 <hsc_init>:



void hsc_init(hsc_t* h, hscrate_t rate) {
 8001f74:	b508      	push	{r3, lr}
    static const uint8_t* const fbit_select[8] = {
        fbit64, fbit72, fbit80, fbit88, fbit96, fbit104, fbit48, fbit48
    };

    assert(h);
 8001f76:	b160      	cbz	r0, 8001f92 <hsc_init+0x1e>
    
    h->fbit        = fbit_select[rate];
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <hsc_init+0x2c>)
	return infobits_select[rate];
 8001f7a:	185a      	adds	r2, r3, r1
    h->fbit        = fbit_select[rate];
 8001f7c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    h->infobytes   = hsc_bytesperblock(rate);
 8001f80:	f892 3100 	ldrb.w	r3, [r2, #256]	; 0x100
 8001f84:	80c3      	strh	r3, [r0, #6]
    h->fbit        = fbit_select[rate];
 8001f86:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
 8001f8a:	6002      	str	r2, [r0, #0]
    h->infobits    = h->infobytes << 3;
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	8083      	strh	r3, [r0, #4]
}
 8001f90:	bd08      	pop	{r3, pc}
    assert(h);
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <hsc_init+0x30>)
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <hsc_init+0x34>)
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <hsc_init+0x38>)
 8001f98:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001f9c:	f005 fec0 	bl	8007d20 <__assert_func>
 8001fa0:	080092b8 	.word	0x080092b8
 8001fa4:	0800a040 	.word	0x0800a040
 8001fa8:	080093c0 	.word	0x080093c0
 8001fac:	0800a044 	.word	0x0800a044

08001fb0 <hsc_encode>:
}




void hsc_encode(hsc_t* h, void* output, const uint8_t* input) {
 8001fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb4:	460c      	mov	r4, r1
    int i;
    int j;
    uint8_t x[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8001fb6:	2500      	movs	r5, #0
void hsc_encode(hsc_t* h, void* output, const uint8_t* input) {
 8001fb8:	b087      	sub	sp, #28
 8001fba:	4606      	mov	r6, r0
    /// Zero output, and copy input to output
    ((uint32_t*)output)[0]  = 0;
    ((uint32_t*)output)[1]  = 0;
    ((uint32_t*)output)[2]  = 0;
    ((uint32_t*)output)[3]  = 0;
    memcpy(output, input, h->infobytes);
 8001fbc:	4611      	mov	r1, r2
    ((uint32_t*)output)[1]  = 0;
 8001fbe:	e9c4 5500 	strd	r5, r5, [r4]
    memcpy(output, input, h->infobytes);
 8001fc2:	88c2      	ldrh	r2, [r0, #6]
    uint8_t x[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8001fc4:	9502      	str	r5, [sp, #8]
    memcpy(output, input, h->infobytes);
 8001fc6:	4620      	mov	r0, r4
    ((uint32_t*)output)[3]  = 0;
 8001fc8:	e9c4 5502 	strd	r5, r5, [r4, #8]
    uint8_t x[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8001fcc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8001fd0:	9505      	str	r5, [sp, #20]
    memcpy(output, input, h->infobytes);
 8001fd2:	f005 fafd 	bl	80075d0 <ot_memcpy>
    
    /// "y" variable is linked to output and only relevant for typing purposes.
    /// Copy input to the output, and add CRC
    y               = output;
    y[h->infobytes] = crccalc(y, h->infobytes);
 8001fd6:	f8b6 c006 	ldrh.w	ip, [r6, #6]
 8001fda:	eb04 000c 	add.w	r0, r4, ip
    while (--len >= 0) {
 8001fde:	f1bc 0f00 	cmp.w	ip, #0
 8001fe2:	f000 810c 	beq.w	80021fe <hsc_encode+0x24e>
 8001fe6:	4f87      	ldr	r7, [pc, #540]	; (8002204 <hsc_encode+0x254>)
    uint8_t reg = 0;
 8001fe8:	462b      	mov	r3, r5
    while (--len >= 0) {
 8001fea:	4622      	mov	r2, r4
        reg = CRCTABLE[reg ^ *block++];
 8001fec:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001ff0:	404b      	eors	r3, r1
    while (--len >= 0) {
 8001ff2:	4290      	cmp	r0, r2
        reg = CRCTABLE[reg ^ *block++];
 8001ff4:	5cfb      	ldrb	r3, [r7, r3]
    while (--len >= 0) {
 8001ff6:	d1f9      	bne.n	8001fec <hsc_encode+0x3c>
    y[h->infobytes] = crccalc(y, h->infobytes);
 8001ff8:	f804 300c 	strb.w	r3, [r4, ip]
 8001ffc:	4d82      	ldr	r5, [pc, #520]	; (8002208 <hsc_encode+0x258>)
 8001ffe:	f8b6 c004 	ldrh.w	ip, [r6, #4]

    /// Polarization Stage 1: rate dependent
    ///@todo there is a bit relocation instruction on cortex M4 that can be used
    ///      to optimize this loop.  Basically, relocate a bit from y[i>>3] to
    ///      position from rseqbyte[i][1] in x[rseqbyte[i][0]]
    for (i=0; i<h->infobits+CRCBITS; i++) {
 8002002:	2700      	movs	r7, #0
 8002004:	f10c 0c07 	add.w	ip, ip, #7
 8002008:	462e      	mov	r6, r5
 800200a:	463a      	mov	r2, r7
 800200c:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8002010:	e005      	b.n	800201e <hsc_encode+0x6e>
 8002012:	f816 1f02 	ldrb.w	r1, [r6, #2]!
 8002016:	ab06      	add	r3, sp, #24
 8002018:	4419      	add	r1, r3
 800201a:	f811 7c10 	ldrb.w	r7, [r1, #-16]
        uint8_t a = (y[i>>3] >> (7-(i&7))) & 1;
        x[rseqbyte[i][0]] |= a << rseqbyte[i][1];
 800201e:	f896 e001 	ldrb.w	lr, [r6, #1]
        uint8_t a = (y[i>>3] >> (7-(i&7))) & 1;
 8002022:	10d3      	asrs	r3, r2, #3
 8002024:	43d0      	mvns	r0, r2
 8002026:	5ce3      	ldrb	r3, [r4, r3]
 8002028:	f000 0007 	and.w	r0, r0, #7
 800202c:	4103      	asrs	r3, r0
        x[rseqbyte[i][0]] |= a << rseqbyte[i][1];
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	fa03 f30e 	lsl.w	r3, r3, lr
    for (i=0; i<h->infobits+CRCBITS; i++) {
 8002036:	3201      	adds	r2, #1
        x[rseqbyte[i][0]] |= a << rseqbyte[i][1];
 8002038:	433b      	orrs	r3, r7
    for (i=0; i<h->infobits+CRCBITS; i++) {
 800203a:	4562      	cmp	r2, ip
        x[rseqbyte[i][0]] |= a << rseqbyte[i][1];
 800203c:	f801 3c10 	strb.w	r3, [r1, #-16]
    for (i=0; i<h->infobits+CRCBITS; i++) {
 8002040:	d1e7      	bne.n	8002012 <hsc_encode+0x62>
    /// Polarization Stage 2: rate independent
    // Iteration 0: 1 bit XOR (todo: word optimize this)
    // X = [1][0]
    // Y = [1][0^1]
    for (i=0; i<BLOCKLENGTH/32; i++) {
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 8002042:	e9dd 7102 	ldrd	r7, r1, [sp, #8]
 8002046:	e9dd 0604 	ldrd	r0, r6, [sp, #16]
 800204a:	007b      	lsls	r3, r7, #1
 800204c:	ea4f 0b41 	mov.w	fp, r1, lsl #1
 8002050:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 8002054:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8002058:	f00b 3baa 	and.w	fp, fp, #2863311530	; 0xaaaaaaaa
 800205c:	f00a 3aaa 	and.w	sl, sl, #2863311530	; 0xaaaaaaaa
 8002060:	f009 39aa 	and.w	r9, r9, #2863311530	; 0xaaaaaaaa
 8002064:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
        ((uint32_t*)x)[i] ^= a;
 8002068:	407b      	eors	r3, r7
 800206a:	ea8b 0101 	eor.w	r1, fp, r1
 800206e:	ea8a 0000 	eor.w	r0, sl, r0
 8002072:	ea89 0606 	eor.w	r6, r9, r6
    }
    // Iteration 1: 2 bit XOR
    // X = [1][0]
    // Y = [1^3][0^2]
    for (i=0; i<BLOCKLENGTH/32; i++) {
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 8002076:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800207a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 800207e:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 8002082:	00b7      	lsls	r7, r6, #2
 8002084:	f008 38cc 	and.w	r8, r8, #3435973836	; 0xcccccccc
 8002088:	f00e 3ecc 	and.w	lr, lr, #3435973836	; 0xcccccccc
 800208c:	f00c 3ccc 	and.w	ip, ip, #3435973836	; 0xcccccccc
 8002090:	f007 37cc 	and.w	r7, r7, #3435973836	; 0xcccccccc
        ((uint32_t*)x)[i] ^= a;
 8002094:	ea88 0303 	eor.w	r3, r8, r3
 8002098:	ea8e 0b01 	eor.w	fp, lr, r1
 800209c:	ea8c 0a00 	eor.w	sl, ip, r0
 80020a0:	ea87 0906 	eor.w	r9, r7, r6
    }
    // Iteration 2: 4 bit XOR
    // X = [3][2][1][0]
    // Y = [3^7][2^6][1^5][0^4]
    for (i=0; i<BLOCKLENGTH/32; i++) {
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 80020a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020a8:	ea4f 110b 	mov.w	r1, fp, lsl #4
 80020ac:	ea4f 100a 	mov.w	r0, sl, lsl #4
 80020b0:	ea4f 1609 	mov.w	r6, r9, lsl #4
 80020b4:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0
 80020b8:	f000 30f0 	and.w	r0, r0, #4042322160	; 0xf0f0f0f0
 80020bc:	f006 36f0 	and.w	r6, r6, #4042322160	; 0xf0f0f0f0
 80020c0:	f008 38f0 	and.w	r8, r8, #4042322160	; 0xf0f0f0f0
        ((uint32_t*)x)[i] ^= a;
 80020c4:	ea88 0803 	eor.w	r8, r8, r3
 80020c8:	ea81 0e0b 	eor.w	lr, r1, fp
 80020cc:	ea80 0c0a 	eor.w	ip, r0, sl
 80020d0:	ea86 0709 	eor.w	r7, r6, r9
    }
    // Iteration 3: 8 bit XOR
    // X = [7][6][5][4][3][2][1][0]
    // Y = [7^15][6^14][5^13][4^12][3^11][2^10][1^9][0^8]
    for (i=0; i<BLOCKLENGTH/32; i++) {
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80020d4:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80020d8:	ea4f 211e 	mov.w	r1, lr, lsr #8
 80020dc:	ea4f 201c 	mov.w	r0, ip, lsr #8
 80020e0:	0a3e      	lsrs	r6, r7, #8
 80020e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80020e6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80020ea:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80020ee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
        ((uint32_t*)x)[i] ^= a;
 80020f2:	ea83 0308 	eor.w	r3, r3, r8
 80020f6:	ea81 010e 	eor.w	r1, r1, lr
 80020fa:	ea80 000c 	eor.w	r0, r0, ip
 80020fe:	407e      	eors	r6, r7
    // Iteration 4: 16 bit XOR
    // X = [15]...[0]
    // Y = [15^31][0^16]
    for (i=0; i<BLOCKLENGTH/32; i++) {
        uint32_t a = (((uint32_t*)x)[i] & 0xFFFF0000) >> 16;
        ((uint32_t*)x)[i] ^= a;
 8002100:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8002104:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 8002108:	ea83 4313 	eor.w	r3, r3, r3, lsr #16
 800210c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
    }
    // Iteration 5: 32 bit XOR
    // X = [31]...[0]
    // Y = [31^63][0^32]
    ((uint32_t*)x)[0] ^= ((uint32_t*)x)[1];
 8002110:	404b      	eors	r3, r1
    ((uint32_t*)x)[2] ^= ((uint32_t*)x)[3];
 8002112:	4070      	eors	r0, r6
    // Iteration 6: 64 bit XOR
    // X = [63]...[0]
    // Y = [63^127][0^64]
    ((uint32_t*)x)[0] ^= ((uint32_t*)x)[2];
 8002114:	4043      	eors	r3, r0
    ((uint32_t*)x)[1] ^= ((uint32_t*)x)[3];
 8002116:	4071      	eors	r1, r6
 8002118:	3c01      	subs	r4, #1
    ((uint32_t*)x)[0] ^= ((uint32_t*)x)[2];
 800211a:	e9cd 4301 	strd	r4, r3, [sp, #4]
    ((uint32_t*)x)[1] ^= ((uint32_t*)x)[3];
 800211e:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8002122:	4a3a      	ldr	r2, [pc, #232]	; (800220c <hsc_encode+0x25c>)
        ((uint32_t*)x)[i] ^= a;
 8002124:	9605      	str	r6, [sp, #20]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002126:	f892 800e 	ldrb.w	r8, [r2, #14]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 800212a:	7893      	ldrb	r3, [r2, #2]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 800212c:	f892 b000 	ldrb.w	fp, [r2]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002130:	f892 c004 	ldrb.w	ip, [r2, #4]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 8002134:	7991      	ldrb	r1, [r2, #6]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 8002136:	7a16      	ldrb	r6, [r2, #8]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002138:	f892 e00f 	ldrb.w	lr, [r2, #15]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 800213c:	f892 a003 	ldrb.w	sl, [r2, #3]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 8002140:	7a90      	ldrb	r0, [r2, #10]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 8002142:	f892 9001 	ldrb.w	r9, [r2, #1]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002146:	7957      	ldrb	r7, [r2, #5]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002148:	ac06      	add	r4, sp, #24
 800214a:	44a0      	add	r8, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 800214c:	4423      	add	r3, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 800214e:	f818 8c10 	ldrb.w	r8, [r8, #-16]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002152:	f813 3c10 	ldrb.w	r3, [r3, #-16]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 8002156:	44a3      	add	fp, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002158:	44a4      	add	ip, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 800215a:	4421      	add	r1, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 800215c:	f81c cc10 	ldrb.w	ip, [ip, #-16]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 8002160:	f81b bc10 	ldrb.w	fp, [fp, #-16]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 8002164:	f811 1c10 	ldrb.w	r1, [r1, #-16]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002168:	fa48 fe0e 	asr.w	lr, r8, lr
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 800216c:	4426      	add	r6, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 800216e:	f892 800c 	ldrb.w	r8, [r2, #12]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 8002172:	f816 6c10 	ldrb.w	r6, [r6, #-16]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002176:	fa43 f30a 	asr.w	r3, r3, sl
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 800217a:	4420      	add	r0, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 800217c:	f892 a007 	ldrb.w	sl, [r2, #7]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 8002180:	f810 0c10 	ldrb.w	r0, [r0, #-16]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 8002184:	fa4b fb09 	asr.w	fp, fp, r9
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002188:	fa4c f707 	asr.w	r7, ip, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 800218c:	f892 9009 	ldrb.w	r9, [r2, #9]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 8002190:	f892 c00b 	ldrb.w	ip, [r2, #11]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002194:	f00e 0e01 	and.w	lr, lr, #1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002198:	019b      	lsls	r3, r3, #6
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 800219a:	44a0      	add	r8, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 800219c:	ea4e 1ecb 	orr.w	lr, lr, fp, lsl #7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 80021a0:	017f      	lsls	r7, r7, #5
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 80021a2:	fa41 fa0a 	asr.w	sl, r1, sl
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80021aa:	ea4e 0303 	orr.w	r3, lr, r3
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 80021ae:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 80021b2:	f007 0e20 	and.w	lr, r7, #32
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 80021b6:	fa46 f609 	asr.w	r6, r6, r9
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 80021ba:	7b57      	ldrb	r7, [r2, #13]
 80021bc:	f818 1c10 	ldrb.w	r1, [r8, #-16]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80021c0:	ea43 030e 	orr.w	r3, r3, lr
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 80021c4:	f00a 0a10 	and.w	sl, sl, #16
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 80021c8:	00f6      	lsls	r6, r6, #3
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 80021ca:	fa40 f00c 	asr.w	r0, r0, ip
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80021ce:	ea43 030a 	orr.w	r3, r3, sl
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 80021d2:	f006 0608 	and.w	r6, r6, #8
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 80021d6:	0080      	lsls	r0, r0, #2
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 80021d8:	4139      	asrs	r1, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80021da:	4333      	orrs	r3, r6
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 80021dc:	f000 0004 	and.w	r0, r0, #4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 80021e0:	0049      	lsls	r1, r1, #1
 80021e2:	f001 0102 	and.w	r1, r1, #2
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80021e6:	4303      	orrs	r3, r0
 80021e8:	430b      	orrs	r3, r1
 80021ea:	9901      	ldr	r1, [sp, #4]
 80021ec:	3210      	adds	r2, #16
 80021ee:	f801 3f01 	strb.w	r3, [r1, #1]!
    for (i=0, j=0; i<BLOCKLENGTH; j++) {
 80021f2:	4295      	cmp	r5, r2
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80021f4:	9101      	str	r1, [sp, #4]
    for (i=0, j=0; i<BLOCKLENGTH; j++) {
 80021f6:	d196      	bne.n	8002126 <hsc_encode+0x176>
    }

    /// The encoding is written to "output" via "y"
}
 80021f8:	b007      	add	sp, #28
 80021fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t reg = 0;
 80021fe:	4663      	mov	r3, ip
 8002200:	e6fa      	b.n	8001ff8 <hsc_encode+0x48>
 8002202:	bf00      	nop
 8002204:	080092b8 	.word	0x080092b8
 8002208:	080094ec 	.word	0x080094ec
 800220c:	080093ec 	.word	0x080093ec

08002210 <hsc_decode>:



uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 8002210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t crcreg;
    int i;
    int num_paths;
    
    /// Zero intermediate buffers
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 8002214:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8002430 <hsc_decode+0x220>
uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 8002218:	b095      	sub	sp, #84	; 0x54
 800221a:	9005      	str	r0, [sp, #20]
 800221c:	910f      	str	r1, [sp, #60]	; 0x3c
 800221e:	9206      	str	r2, [sp, #24]
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 8002220:	f109 001c 	add.w	r0, r9, #28
 8002224:	2207      	movs	r2, #7
 8002226:	2100      	movs	r1, #0
 8002228:	f005 fa04 	bl	8007634 <ot_memset_4>
    ot_memset_4(PRIBIT(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 800222c:	4648      	mov	r0, r9
 800222e:	2207      	movs	r2, #7
 8002230:	2100      	movs	r1, #0
 8002232:	f005 f9ff 	bl	8007634 <ot_memset_4>
    ot_memset_4(PM(h), 0, LISTSIZE/4);
 8002236:	2201      	movs	r2, #1
 8002238:	f109 0038 	add.w	r0, r9, #56	; 0x38
 800223c:	2100      	movs	r1, #0
 800223e:	f005 f9f9 	bl	8007634 <ot_memset_4>

        }
        else {
            // calculate llr of each fork path
            int min_lmd = minlambda_lut[phi];
            int max_lmd = maxlambda_lut[phi];
 8002242:	4a76      	ldr	r2, [pc, #472]	; (800241c <hsc_decode+0x20c>)
 8002244:	4b76      	ldr	r3, [pc, #472]	; (8002420 <hsc_decode+0x210>)
 8002246:	9303      	str	r3, [sp, #12]
 8002248:	f202 4254 	addw	r2, r2, #1108	; 0x454
    PRIORITY(h)[0] = 0;
 800224c:	2300      	movs	r3, #0
            int max_lmd = maxlambda_lut[phi];
 800224e:	9208      	str	r2, [sp, #32]
    num_paths = 1;
 8002250:	2201      	movs	r2, #1
    PRIORITY(h)[0] = 0;
 8002252:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
    num_paths = 1;
 8002256:	4693      	mov	fp, r2
 8002258:	469a      	mov	sl, r3
        int lmd0        = lambda_lut[phi];
 800225a:	9b03      	ldr	r3, [sp, #12]
 800225c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8002260:	9303      	str	r3, [sp, #12]
        int next_pt     = (1 << lmd0);
 8002262:	f04f 0c01 	mov.w	ip, #1
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8002266:	2302      	movs	r3, #2
        int next_pt     = (1 << lmd0);
 8002268:	fa0c fc0e 	lsl.w	ip, ip, lr
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 800226c:	fa03 f30e 	lsl.w	r3, r3, lr
        bool use_gfunc  = (bool)(phi & next_pt);
 8002270:	ea1c 0f0a 	tst.w	ip, sl
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8002274:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
        bool use_gfunc  = (bool)(phi & next_pt);
 8002278:	bf14      	ite	ne
 800227a:	2501      	movne	r5, #1
 800227c:	2500      	moveq	r5, #0
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 800227e:	2a00      	cmp	r2, #0
 8002280:	f340 80bc 	ble.w	80023fc <hsc_decode+0x1ec>
 8002284:	4e67      	ldr	r6, [pc, #412]	; (8002424 <hsc_decode+0x214>)
 8002286:	f8cd a004 	str.w	sl, [sp, #4]
 800228a:	00d0      	lsls	r0, r2, #3
 800228c:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8002290:	9e06      	ldr	r6, [sp, #24]
 8002292:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 8002296:	4431      	add	r1, r6
 8002298:	4e63      	ldr	r6, [pc, #396]	; (8002428 <hsc_decode+0x218>)
 800229a:	4430      	add	r0, r6
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 800229c:	4e5f      	ldr	r6, [pc, #380]	; (800241c <hsc_decode+0x20c>)
 800229e:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
 80022a2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80022a6:	9402      	str	r4, [sp, #8]
 80022a8:	46aa      	mov	sl, r5
 80022aa:	0054      	lsls	r4, r2, #1
 80022ac:	e026      	b.n	80022fc <hsc_decode+0xec>
    llr_t a_inv = -llr_layer_a;
 80022ae:	426f      	negs	r7, r5
    if (llr_layer_a < llr_layer_b) {
 80022b0:	42b5      	cmp	r5, r6
    llr_t a_inv = -llr_layer_a;
 80022b2:	9700      	str	r7, [sp, #0]
    llr_t b_inv = -llr_layer_b;
 80022b4:	f1c6 0800 	rsb	r8, r6, #0
    if (llr_layer_a < llr_layer_b) {
 80022b8:	db7f      	blt.n	80023ba <hsc_decode+0x1aa>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 80022ba:	42be      	cmp	r6, r7
 80022bc:	bfb8      	it	lt
 80022be:	463e      	movlt	r6, r7
				for (int l=0; l<num_paths; l++) {
 80022c0:	f1bb 0f01 	cmp.w	fp, #1
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80022c4:	f843 6c10 	str.w	r6, [r3, #-16]
				for (int l=0; l<num_paths; l++) {
 80022c8:	d00c      	beq.n	80022e4 <hsc_decode+0xd4>
 80022ca:	f1bb 0f02 	cmp.w	fp, #2
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80022ce:	f843 6c0c 	str.w	r6, [r3, #-12]
				for (int l=0; l<num_paths; l++) {
 80022d2:	d007      	beq.n	80022e4 <hsc_decode+0xd4>
 80022d4:	f1bb 0f03 	cmp.w	fp, #3
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80022d8:	f843 6c08 	str.w	r6, [r3, #-8]
				for (int l=0; l<num_paths; l++) {
 80022dc:	d002      	beq.n	80022e4 <hsc_decode+0xd4>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 80022de:	46b0      	mov	r8, r6
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80022e0:	f843 8c04 	str.w	r8, [r3, #-4]
            if (beta == next_pt) {
 80022e4:	4594      	cmp	ip, r2
 80022e6:	d04b      	beq.n	8002380 <hsc_decode+0x170>
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 80022e8:	3a01      	subs	r2, #1
 80022ea:	f1a4 0402 	sub.w	r4, r4, #2
 80022ee:	f1a3 0310 	sub.w	r3, r3, #16
 80022f2:	f1a0 0008 	sub.w	r0, r0, #8
 80022f6:	f1a1 0108 	sub.w	r1, r1, #8
 80022fa:	d07d      	beq.n	80023f8 <hsc_decode+0x1e8>
			if (beta_x2 >= BLOCKLENGTH) {
 80022fc:	2c7f      	cmp	r4, #127	; 0x7f
 80022fe:	f340 8525 	ble.w	8002d4c <hsc_decode+0xb3c>
				llr_t llr1  = llrinput[beta_e+1];
 8002302:	e9d1 5600 	ldrd	r5, r6, [r1]
					if (use_gfunc) {
 8002306:	f1ba 0f00 	cmp.w	sl, #0
 800230a:	d0d0      	beq.n	80022ae <hsc_decode+0x9e>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800230c:	f819 702e 	ldrb.w	r7, [r9, lr, lsl #2]
    if (bit_layer) {
 8002310:	5dc7      	ldrb	r7, [r0, r7]
 8002312:	2f00      	cmp	r7, #0
 8002314:	d14f      	bne.n	80023b6 <hsc_decode+0x1a6>
				llr_t llr0  = llrinput[beta_e];
 8002316:	462f      	mov	r7, r5
    return (llr_layer_b + llr_layer_a);
 8002318:	4437      	add	r7, r6
				for (int l=0; l<num_paths; l++) {
 800231a:	f1bb 0f01 	cmp.w	fp, #1
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800231e:	f843 7c10 	str.w	r7, [r3, #-16]
				for (int l=0; l<num_paths; l++) {
 8002322:	d0df      	beq.n	80022e4 <hsc_decode+0xd4>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002324:	ea4f 078e 	mov.w	r7, lr, lsl #2
 8002328:	eb09 0807 	add.w	r8, r9, r7
 800232c:	f898 8001 	ldrb.w	r8, [r8, #1]
    if (bit_layer) {
 8002330:	f810 8008 	ldrb.w	r8, [r0, r8]
 8002334:	f1b8 0f00 	cmp.w	r8, #0
 8002338:	f040 8263 	bne.w	8002802 <hsc_decode+0x5f2>
				llr_t llr0  = llrinput[beta_e];
 800233c:	46a8      	mov	r8, r5
    return (llr_layer_b + llr_layer_a);
 800233e:	44b0      	add	r8, r6
				for (int l=0; l<num_paths; l++) {
 8002340:	f1bb 0f02 	cmp.w	fp, #2
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002344:	f843 8c0c 	str.w	r8, [r3, #-12]
				for (int l=0; l<num_paths; l++) {
 8002348:	d0cc      	beq.n	80022e4 <hsc_decode+0xd4>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800234a:	eb09 0807 	add.w	r8, r9, r7
 800234e:	f898 8002 	ldrb.w	r8, [r8, #2]
    if (bit_layer) {
 8002352:	f810 8008 	ldrb.w	r8, [r0, r8]
 8002356:	f1b8 0f00 	cmp.w	r8, #0
 800235a:	f040 8255 	bne.w	8002808 <hsc_decode+0x5f8>
				llr_t llr0  = llrinput[beta_e];
 800235e:	46a8      	mov	r8, r5
    return (llr_layer_b + llr_layer_a);
 8002360:	44b0      	add	r8, r6
				for (int l=0; l<num_paths; l++) {
 8002362:	f1bb 0f03 	cmp.w	fp, #3
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002366:	f843 8c08 	str.w	r8, [r3, #-8]
				for (int l=0; l<num_paths; l++) {
 800236a:	d0bb      	beq.n	80022e4 <hsc_decode+0xd4>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800236c:	444f      	add	r7, r9
 800236e:	78ff      	ldrb	r7, [r7, #3]
    if (bit_layer) {
 8002370:	5dc7      	ldrb	r7, [r0, r7]
 8002372:	b107      	cbz	r7, 8002376 <hsc_decode+0x166>
        llr_layer_a = -llr_layer_a;
 8002374:	426d      	negs	r5, r5
    return (llr_layer_b + llr_layer_a);
 8002376:	4435      	add	r5, r6
            if (beta == next_pt) {
 8002378:	4594      	cmp	ip, r2
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800237a:	f843 5c04 	str.w	r5, [r3, #-4]
            if (beta == next_pt) {
 800237e:	d1b3      	bne.n	80022e8 <hsc_decode+0xd8>
                use_gfunc   = phi & next_pt;
 8002380:	9d01      	ldr	r5, [sp, #4]
                next_pt   >>= 1;
 8002382:	ea4f 0c6c 	mov.w	ip, ip, asr #1
                use_gfunc   = phi & next_pt;
 8002386:	ea15 0f0c 	tst.w	r5, ip
 800238a:	bf14      	ite	ne
 800238c:	f04f 0a01 	movne.w	sl, #1
 8002390:	f04f 0a00 	moveq.w	sl, #0
                if (--lmd0 >= 0) {
 8002394:	f1be 0e01 	subs.w	lr, lr, #1
 8002398:	d4a6      	bmi.n	80022e8 <hsc_decode+0xd8>
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 800239a:	9e02      	ldr	r6, [sp, #8]
 800239c:	4d23      	ldr	r5, [pc, #140]	; (800242c <hsc_decode+0x21c>)
 800239e:	f8d6 73b4 	ldr.w	r7, [r6, #948]	; 0x3b4
 80023a2:	f855 502e 	ldr.w	r5, [r5, lr, lsl #2]
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 80023a6:	f8d6 63c4 	ldr.w	r6, [r6, #964]	; 0x3c4
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 80023aa:	403d      	ands	r5, r7
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 80023ac:	432e      	orrs	r6, r5
 80023ae:	4d1f      	ldr	r5, [pc, #124]	; (800242c <hsc_decode+0x21c>)
 80023b0:	f845 602e 	str.w	r6, [r5, lr, lsl #2]
 80023b4:	e798      	b.n	80022e8 <hsc_decode+0xd8>
        llr_layer_a = -llr_layer_a;
 80023b6:	426f      	negs	r7, r5
 80023b8:	e7ae      	b.n	8002318 <hsc_decode+0x108>
    llr_t b_inv = -llr_layer_b;
 80023ba:	42be      	cmp	r6, r7
 80023bc:	bfcc      	ite	gt
 80023be:	462f      	movgt	r7, r5
 80023c0:	4647      	movle	r7, r8
				for (int l=0; l<num_paths; l++) {
 80023c2:	f1bb 0f01 	cmp.w	fp, #1
    llr_t b_inv = -llr_layer_b;
 80023c6:	f843 7c10 	str.w	r7, [r3, #-16]
				for (int l=0; l<num_paths; l++) {
 80023ca:	d08b      	beq.n	80022e4 <hsc_decode+0xd4>
    llr_t b_inv = -llr_layer_b;
 80023cc:	9f00      	ldr	r7, [sp, #0]
 80023ce:	42be      	cmp	r6, r7
 80023d0:	bfcc      	ite	gt
 80023d2:	462f      	movgt	r7, r5
 80023d4:	4647      	movle	r7, r8
				for (int l=0; l<num_paths; l++) {
 80023d6:	f1bb 0f02 	cmp.w	fp, #2
    llr_t b_inv = -llr_layer_b;
 80023da:	f843 7c0c 	str.w	r7, [r3, #-12]
				for (int l=0; l<num_paths; l++) {
 80023de:	d081      	beq.n	80022e4 <hsc_decode+0xd4>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 80023e0:	9f00      	ldr	r7, [sp, #0]
 80023e2:	42be      	cmp	r6, r7
 80023e4:	f340 8213 	ble.w	800280e <hsc_decode+0x5fe>
				for (int l=0; l<num_paths; l++) {
 80023e8:	f1bb 0f03 	cmp.w	fp, #3
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80023ec:	f843 5c08 	str.w	r5, [r3, #-8]
				for (int l=0; l<num_paths; l++) {
 80023f0:	f43f af78 	beq.w	80022e4 <hsc_decode+0xd4>
 80023f4:	46a8      	mov	r8, r5
 80023f6:	e773      	b.n	80022e0 <hsc_decode+0xd0>
 80023f8:	f8dd a004 	ldr.w	sl, [sp, #4]
        if (h->fbit[phi]) {
 80023fc:	9b05      	ldr	r3, [sp, #20]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f813 300a 	ldrb.w	r3, [r3, sl]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 8287 	beq.w	8002918 <hsc_decode+0x708>
            switch (num_paths-1) {
 800240a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800240e:	2b03      	cmp	r3, #3
 8002410:	d834      	bhi.n	800247c <hsc_decode+0x26c>
 8002412:	e8df f003 	tbb	[pc, r3]
 8002416:	212a      	.short	0x212a
 8002418:	0f18      	.short	0x0f18
 800241a:	bf00      	nop
 800241c:	080092b8 	.word	0x080092b8
 8002420:	080095eb 	.word	0x080095eb
 8002424:	20000350 	.word	0x20000350
 8002428:	20000b50 	.word	0x20000b50
 800242c:	20000320 	.word	0x20000320
 8002430:	20000304 	.word	0x20000304
                case 3: if (LLR(h)[1][3] < 0) { PM(h)[3] -= LLR(h)[1][3]; }
 8002434:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 8002438:	2b00      	cmp	r3, #0
 800243a:	da04      	bge.n	8002446 <hsc_decode+0x236>
 800243c:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
                case 2: if (LLR(h)[1][2] < 0) { PM(h)[2] -= LLR(h)[1][2]; }
 8002446:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800244a:	2b00      	cmp	r3, #0
 800244c:	da04      	bge.n	8002458 <hsc_decode+0x248>
 800244e:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
                case 1: if (LLR(h)[1][1] < 0) { PM(h)[1] -= LLR(h)[1][1]; }
 8002458:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 800245c:	2b00      	cmp	r3, #0
 800245e:	da04      	bge.n	800246a <hsc_decode+0x25a>
 8002460:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
                case 0: if (LLR(h)[1][0] < 0) { PM(h)[0] -= LLR(h)[1][0]; }
 800246a:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 800246e:	2b00      	cmp	r3, #0
 8002470:	da04      	bge.n	800247c <hsc_decode+0x26c>
 8002472:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 800247c:	f00a 0501 	and.w	r5, sl, #1
 8002480:	1cab      	adds	r3, r5, #2
 8002482:	eb09 0383 	add.w	r3, r9, r3, lsl #2
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 8002486:	4a49      	ldr	r2, [pc, #292]	; (80025ac <hsc_decode+0x39c>)
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 8002488:	2100      	movs	r1, #0
 800248a:	f8c3 184c 	str.w	r1, [r3, #2124]	; 0x84c
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 800248e:	4b48      	ldr	r3, [pc, #288]	; (80025b0 <hsc_decode+0x3a0>)
 8002490:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
            }
        }


        // update bit tree
        if ((phi & 1) == 0) {
 8002494:	2d00      	cmp	r5, #0
 8002496:	f040 81c1 	bne.w	800281c <hsc_decode+0x60c>
#           if WORDIFY && (LISTSIZE==4)
            *(uint32_t*)PRIBIT(h)[0] = 0x03020100;
 800249a:	4b45      	ldr	r3, [pc, #276]	; (80025b0 <hsc_decode+0x3a0>)
 800249c:	f8c9 3000 	str.w	r3, [r9]
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 80024a0:	f10a 0a01 	add.w	sl, sl, #1
 80024a4:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
 80024a8:	f47f aed7 	bne.w	800225a <hsc_decode+0x4a>
 80024ac:	f8df e108 	ldr.w	lr, [pc, #264]	; 80025b8 <hsc_decode+0x3a8>
    *(uint32_t*)&indexOut[0] = 0x03020100;
 80024b0:	4a3f      	ldr	r2, [pc, #252]	; (80025b0 <hsc_decode+0x3a0>)
    *(uint32_t*)&indexOut[4] = 0x07060504;
 80024b2:	4b40      	ldr	r3, [pc, #256]	; (80025b4 <hsc_decode+0x3a4>)
    *(uint32_t*)&indexOut[0] = 0x03020100;
 80024b4:	f8c9 2e74 	str.w	r2, [r9, #3700]	; 0xe74
 80024b8:	eb0b 080e 	add.w	r8, fp, lr
    *(uint32_t*)&indexOut[4] = 0x07060504;
 80024bc:	f8c9 3e78 	str.w	r3, [r9, #3704]	; 0xe78
 80024c0:	465e      	mov	r6, fp
 80024c2:	46da      	mov	sl, fp
        gap    -= (gap > 1);
 80024c4:	2e01      	cmp	r6, #1
 80024c6:	bfc8      	it	gt
 80024c8:	3e01      	subgt	r6, #1
        sorted  = (gap == 1);
 80024ca:	f1a6 0c01 	sub.w	ip, r6, #1
 80024ce:	fabc fc8c 	clz	ip, ip
        for (i=0, j=gap; j<length; i++, j++) {
 80024d2:	45b2      	cmp	sl, r6
        sorted  = (gap == 1);
 80024d4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
        for (i=0, j=gap; j<length; i++, j++) {
 80024d8:	dd17      	ble.n	800250a <hsc_decode+0x2fa>
 80024da:	1e72      	subs	r2, r6, #1
 80024dc:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <hsc_decode+0x3a8>)
 80024de:	4472      	add	r2, lr
 80024e0:	eba8 0706 	sub.w	r7, r8, r6
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 80024e4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80024e8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80024ec:	eb09 0581 	add.w	r5, r9, r1, lsl #2
 80024f0:	eb09 0480 	add.w	r4, r9, r0, lsl #2
 80024f4:	6bad      	ldr	r5, [r5, #56]	; 0x38
 80024f6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80024f8:	42a5      	cmp	r5, r4
 80024fa:	dd04      	ble.n	8002506 <hsc_decode+0x2f6>
                indexOut[i] = indexOut[j];
 80024fc:	f803 0c01 	strb.w	r0, [r3, #-1]
                sorted      = false;
 8002500:	f04f 0c00 	mov.w	ip, #0
                indexOut[j] = k;
 8002504:	7011      	strb	r1, [r2, #0]
        for (i=0, j=gap; j<length; i++, j++) {
 8002506:	429f      	cmp	r7, r3
 8002508:	d1ec      	bne.n	80024e4 <hsc_decode+0x2d4>
    } while (!sorted);
 800250a:	f1bc 0f00 	cmp.w	ip, #0
 800250e:	d0d9      	beq.n	80024c4 <hsc_decode+0x2b4>
 8002510:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <hsc_decode+0x3a8>)
 8002512:	9311      	str	r3, [sp, #68]	; 0x44
 8002514:	465a      	mov	r2, fp
 8002516:	4472      	add	r2, lr
 8002518:	f46f 6bc5 	mvn.w	fp, #1576	; 0x628
 800251c:	9213      	str	r2, [sp, #76]	; 0x4c
 800251e:	449b      	add	fp, r3
    /// CRC Path Check process
    /// The BITMEM buffer is reused here.  It is not needed anymore.
    ///@note DECMSG(h) replaced with BITMEM(h)
    crcreg = 0;
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
        int lp = INDEX(h)[correct_path];
 8002520:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002522:	4926      	ldr	r1, [pc, #152]	; (80025bc <hsc_decode+0x3ac>)
 8002524:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002528:	9211      	str	r2, [sp, #68]	; 0x44
 800252a:	461a      	mov	r2, r3
        int phi;

        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
            DECMSG(h)[phi]    = MAP(h)[phi][lp] >> 7;
 800252c:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <hsc_decode+0x3b0>)
 800252e:	1acb      	subs	r3, r1, r3
 8002530:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8002534:	4413      	add	r3, r2
 8002536:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 800253a:	09da      	lsrs	r2, r3, #7
 800253c:	f801 2901 	strb.w	r2, [r1], #-1
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 8002540:	458b      	cmp	fp, r1
            lp                  = MAP(h)[phi][lp] & 0x7F;
 8002542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 8002546:	d1f1      	bne.n	800252c <hsc_decode+0x31c>
        }
        
        /// Bytewise CRC compute.
        /// Requires loading the bit data into a byte buffer.
        /// On success, the successful bytewise decoding is in the output[]
        for (i=0, phi=0; phi<h->infobits; i++) {
 8002548:	9b05      	ldr	r3, [sp, #20]
 800254a:	889b      	ldrh	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8618 	beq.w	8003182 <hsc_decode+0xf72>
 8002552:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <hsc_decode+0x3b4>)
 8002554:	9312      	str	r3, [sp, #72]	; 0x48
 8002556:	f1c3 0308 	rsb	r3, r3, #8
 800255a:	217a      	movs	r1, #122	; 0x7a
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	f04f 0a6f 	mov.w	sl, #111	; 0x6f
 8002562:	9310      	str	r3, [sp, #64]	; 0x40
 8002564:	235f      	movs	r3, #95	; 0x5f
 8002566:	2079      	movs	r0, #121	; 0x79
 8002568:	2475      	movs	r4, #117	; 0x75
 800256a:	256e      	movs	r5, #110	; 0x6e
 800256c:	2673      	movs	r6, #115	; 0x73
 800256e:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 8002572:	e9cd 3a02 	strd	r3, sl, [sp, #8]
 8002576:	2776      	movs	r7, #118	; 0x76
 8002578:	f04f 0a00 	mov.w	sl, #0
 800257c:	468e      	mov	lr, r1
 800257e:	2177      	movs	r1, #119	; 0x77
 8002580:	e9cd 560d 	strd	r5, r6, [sp, #52]	; 0x34
 8002584:	900a      	str	r0, [sp, #40]	; 0x28
 8002586:	e9cd 4707 	strd	r4, r7, [sp, #28]
 800258a:	4690      	mov	r8, r2
 800258c:	4684      	mov	ip, r0
 800258e:	9404      	str	r4, [sp, #16]
 8002590:	9500      	str	r5, [sp, #0]
 8002592:	9609      	str	r6, [sp, #36]	; 0x24
 8002594:	f8cd a004 	str.w	sl, [sp, #4]
 8002598:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800259a:	9106      	str	r1, [sp, #24]
 800259c:	267f      	movs	r6, #127	; 0x7f
 800259e:	257e      	movs	r5, #126	; 0x7e
 80025a0:	247d      	movs	r4, #125	; 0x7d
 80025a2:	207b      	movs	r0, #123	; 0x7b
 80025a4:	f04f 0a73 	mov.w	sl, #115	; 0x73
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <hsc_decode+0x3b4>)
 80025aa:	e033      	b.n	8002614 <hsc_decode+0x404>
 80025ac:	20000f50 	.word	0x20000f50
 80025b0:	03020100 	.word	0x03020100
 80025b4:	07060504 	.word	0x07060504
 80025b8:	20001178 	.word	0x20001178
 80025bc:	20000bcf 	.word	0x20000bcf
 80025c0:	20000b50 	.word	0x20000b50
 80025c4:	0800982c 	.word	0x0800982c
 80025c8:	7d19      	ldrb	r1, [r3, #20]
 80025ca:	9104      	str	r1, [sp, #16]
 80025cc:	9907      	ldr	r1, [sp, #28]
 80025ce:	7d58      	ldrb	r0, [r3, #21]
 80025d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80025d2:	f893 8010 	ldrb.w	r8, [r3, #16]
 80025d6:	f893 e011 	ldrb.w	lr, [r3, #17]
 80025da:	9106      	str	r1, [sp, #24]
 80025dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80025de:	9000      	str	r0, [sp, #0]
 80025e0:	9502      	str	r5, [sp, #8]
 80025e2:	9101      	str	r1, [sp, #4]
 80025e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80025e6:	9904      	ldr	r1, [sp, #16]
 80025e8:	9503      	str	r5, [sp, #12]
 80025ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80025ec:	9107      	str	r1, [sp, #28]
 80025ee:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	f893 c012 	ldrb.w	ip, [r3, #18]
 80025f8:	7cdf      	ldrb	r7, [r3, #19]
 80025fa:	f893 a016 	ldrb.w	sl, [r3, #22]
 80025fe:	910d      	str	r1, [sp, #52]	; 0x34
 8002600:	e9cd e80b 	strd	lr, r8, [sp, #44]	; 0x2c
 8002604:	9906      	ldr	r1, [sp, #24]
 8002606:	9808      	ldr	r0, [sp, #32]
 8002608:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800260c:	9708      	str	r7, [sp, #32]
 800260e:	3308      	adds	r3, #8
 8002610:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
 8002614:	444e      	add	r6, r9
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 8002616:	444d      	add	r5, r9
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
 8002618:	f896 684c 	ldrb.w	r6, [r6, #2124]	; 0x84c
 800261c:	01f6      	lsls	r6, r6, #7
 800261e:	b2f6      	uxtb	r6, r6
 8002620:	7016      	strb	r6, [r2, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 8002622:	f895 584c 	ldrb.w	r5, [r5, #2124]	; 0x84c
 8002626:	ea46 1585 	orr.w	r5, r6, r5, lsl #6
 800262a:	b26d      	sxtb	r5, r5
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 800262c:	444c      	add	r4, r9
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 800262e:	7015      	strb	r5, [r2, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 8002630:	f894 484c 	ldrb.w	r4, [r4, #2124]	; 0x84c
 8002634:	ea45 1444 	orr.w	r4, r5, r4, lsl #5
 8002638:	b264      	sxtb	r4, r4
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 800263a:	4448      	add	r0, r9
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 800263c:	7014      	strb	r4, [r2, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 800263e:	f890 084c 	ldrb.w	r0, [r0, #2124]	; 0x84c
 8002642:	9d00      	ldr	r5, [sp, #0]
 8002644:	ea44 1000 	orr.w	r0, r4, r0, lsl #4
 8002648:	b240      	sxtb	r0, r0
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 800264a:	4449      	add	r1, r9
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 800264c:	7010      	strb	r0, [r2, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 800264e:	f891 184c 	ldrb.w	r1, [r1, #2124]	; 0x84c
 8002652:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 8002656:	9803      	ldr	r0, [sp, #12]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 8002658:	b249      	sxtb	r1, r1
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 800265a:	4448      	add	r0, r9
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 800265c:	7011      	strb	r1, [r2, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 800265e:	f890 084c 	ldrb.w	r0, [r0, #2124]	; 0x84c
 8002662:	ea41 0180 	orr.w	r1, r1, r0, lsl #2
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 8002666:	9802      	ldr	r0, [sp, #8]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 8002668:	b249      	sxtb	r1, r1
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 800266a:	4448      	add	r0, r9
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 800266c:	7011      	strb	r1, [r2, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 800266e:	f890 084c 	ldrb.w	r0, [r0, #2124]	; 0x84c
 8002672:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
 8002676:	b240      	sxtb	r0, r0
 8002678:	7010      	strb	r0, [r2, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 800267a:	79dc      	ldrb	r4, [r3, #7]
        for (i=0, phi=0; phi<h->infobits; i++) {
 800267c:	9910      	ldr	r1, [sp, #64]	; 0x40
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 800267e:	444c      	add	r4, r9
        for (i=0, phi=0; phi<h->infobits; i++) {
 8002680:	4419      	add	r1, r3
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 8002682:	f894 484c 	ldrb.w	r4, [r4, #2124]	; 0x84c
 8002686:	4320      	orrs	r0, r4
 8002688:	f802 0b01 	strb.w	r0, [r2], #1
        for (i=0, phi=0; phi<h->infobits; i++) {
 800268c:	9805      	ldr	r0, [sp, #20]
 800268e:	9c01      	ldr	r4, [sp, #4]
 8002690:	8880      	ldrh	r0, [r0, #4]
 8002692:	3401      	adds	r4, #1
 8002694:	4288      	cmp	r0, r1
 8002696:	4656      	mov	r6, sl
 8002698:	9409      	str	r4, [sp, #36]	; 0x24
 800269a:	dc95      	bgt.n	80025c8 <hsc_decode+0x3b8>
        reg = CRCTABLE[reg ^ *block++];
 800269c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800269e:	4a9a      	ldr	r2, [pc, #616]	; (8002908 <hsc_decode+0x6f8>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	f8dd a004 	ldr.w	sl, [sp, #4]
 80026a6:	9c04      	ldr	r4, [sp, #16]
 80026a8:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 80026aa:	f1ba 0f00 	cmp.w	sl, #0
 80026ae:	f000 842a 	beq.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 80026b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80026b4:	7852      	ldrb	r2, [r2, #1]
 80026b6:	4053      	eors	r3, r2
 80026b8:	4a93      	ldr	r2, [pc, #588]	; (8002908 <hsc_decode+0x6f8>)
    while (--len >= 0) {
 80026ba:	f1ba 0f01 	cmp.w	sl, #1
        reg = CRCTABLE[reg ^ *block++];
 80026be:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 80026c0:	f000 8421 	beq.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 80026c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80026c6:	7892      	ldrb	r2, [r2, #2]
 80026c8:	4053      	eors	r3, r2
 80026ca:	4a8f      	ldr	r2, [pc, #572]	; (8002908 <hsc_decode+0x6f8>)
    while (--len >= 0) {
 80026cc:	f1ba 0f02 	cmp.w	sl, #2
        reg = CRCTABLE[reg ^ *block++];
 80026d0:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 80026d2:	f000 8418 	beq.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 80026d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80026d8:	78d2      	ldrb	r2, [r2, #3]
 80026da:	4053      	eors	r3, r2
 80026dc:	4a8a      	ldr	r2, [pc, #552]	; (8002908 <hsc_decode+0x6f8>)
    while (--len >= 0) {
 80026de:	f1ba 0f03 	cmp.w	sl, #3
        reg = CRCTABLE[reg ^ *block++];
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 80026e4:	f000 840f 	beq.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 80026e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80026ea:	7912      	ldrb	r2, [r2, #4]
 80026ec:	4053      	eors	r3, r2
 80026ee:	4a86      	ldr	r2, [pc, #536]	; (8002908 <hsc_decode+0x6f8>)
    while (--len >= 0) {
 80026f0:	f1ba 0f04 	cmp.w	sl, #4
        reg = CRCTABLE[reg ^ *block++];
 80026f4:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 80026f6:	f000 8406 	beq.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 80026fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80026fc:	7952      	ldrb	r2, [r2, #5]
 80026fe:	4053      	eors	r3, r2
 8002700:	4a81      	ldr	r2, [pc, #516]	; (8002908 <hsc_decode+0x6f8>)
    while (--len >= 0) {
 8002702:	f1ba 0f05 	cmp.w	sl, #5
        reg = CRCTABLE[reg ^ *block++];
 8002706:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 8002708:	f000 83fd 	beq.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 800270c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800270e:	7992      	ldrb	r2, [r2, #6]
 8002710:	4053      	eors	r3, r2
 8002712:	4a7d      	ldr	r2, [pc, #500]	; (8002908 <hsc_decode+0x6f8>)
    while (--len >= 0) {
 8002714:	f1ba 0f06 	cmp.w	sl, #6
        reg = CRCTABLE[reg ^ *block++];
 8002718:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 800271a:	f000 83f4 	beq.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 800271e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002720:	79d2      	ldrb	r2, [r2, #7]
 8002722:	4053      	eors	r3, r2
 8002724:	4a78      	ldr	r2, [pc, #480]	; (8002908 <hsc_decode+0x6f8>)
    while (--len >= 0) {
 8002726:	f1ba 0f07 	cmp.w	sl, #7
        reg = CRCTABLE[reg ^ *block++];
 800272a:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 800272c:	f000 83eb 	beq.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 8002730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002732:	7a12      	ldrb	r2, [r2, #8]
 8002734:	4053      	eors	r3, r2
 8002736:	4a74      	ldr	r2, [pc, #464]	; (8002908 <hsc_decode+0x6f8>)
    while (--len >= 0) {
 8002738:	f1ba 0f08 	cmp.w	sl, #8
        reg = CRCTABLE[reg ^ *block++];
 800273c:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 800273e:	f000 83e2 	beq.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 8002742:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002744:	7a52      	ldrb	r2, [r2, #9]
 8002746:	4053      	eors	r3, r2
 8002748:	4a6f      	ldr	r2, [pc, #444]	; (8002908 <hsc_decode+0x6f8>)
    while (--len >= 0) {
 800274a:	f1ba 0f09 	cmp.w	sl, #9
        reg = CRCTABLE[reg ^ *block++];
 800274e:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 8002750:	f000 83d9 	beq.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 8002754:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002756:	7a92      	ldrb	r2, [r2, #10]
 8002758:	4053      	eors	r3, r2
 800275a:	4a6b      	ldr	r2, [pc, #428]	; (8002908 <hsc_decode+0x6f8>)
    while (--len >= 0) {
 800275c:	f1ba 0f0a 	cmp.w	sl, #10
        reg = CRCTABLE[reg ^ *block++];
 8002760:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 8002762:	f000 83d0 	beq.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 8002766:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002768:	7ad2      	ldrb	r2, [r2, #11]
 800276a:	4053      	eors	r3, r2
 800276c:	4a66      	ldr	r2, [pc, #408]	; (8002908 <hsc_decode+0x6f8>)
    while (--len >= 0) {
 800276e:	f1ba 0f0b 	cmp.w	sl, #11
        reg = CRCTABLE[reg ^ *block++];
 8002772:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 8002774:	f000 83c7 	beq.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 8002778:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800277a:	7b12      	ldrb	r2, [r2, #12]
 800277c:	4053      	eors	r3, r2
 800277e:	4a62      	ldr	r2, [pc, #392]	; (8002908 <hsc_decode+0x6f8>)
    while (--len >= 0) {
 8002780:	f1ba 0f0c 	cmp.w	sl, #12
        reg = CRCTABLE[reg ^ *block++];
 8002784:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 8002786:	f000 83be 	beq.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 800278a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800278c:	7b52      	ldrb	r2, [r2, #13]
 800278e:	4053      	eors	r3, r2
 8002790:	4a5d      	ldr	r2, [pc, #372]	; (8002908 <hsc_decode+0x6f8>)
    while (--len >= 0) {
 8002792:	f1ba 0f0e 	cmp.w	sl, #14
        reg = CRCTABLE[reg ^ *block++];
 8002796:	5cd3      	ldrb	r3, [r2, r3]
    while (--len >= 0) {
 8002798:	f040 83b5 	bne.w	8002f06 <hsc_decode+0xcf6>
        reg = CRCTABLE[reg ^ *block++];
 800279c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800279e:	7b92      	ldrb	r2, [r2, #14]
 80027a0:	4053      	eors	r3, r2
 80027a2:	4a59      	ldr	r2, [pc, #356]	; (8002908 <hsc_decode+0x6f8>)
 80027a4:	56d3      	ldrsb	r3, [r2, r3]
        }
            
        crcreg  = crccalc(output, i);
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 80027a6:	44ce      	add	lr, r9
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 80027a8:	44c8      	add	r8, r9
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 80027aa:	f89e 284c 	ldrb.w	r2, [lr, #2124]	; 0x84c
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 80027ae:	f898 184c 	ldrb.w	r1, [r8, #2124]	; 0x84c
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 80027b2:	44cc      	add	ip, r9
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 80027b4:	0192      	lsls	r2, r2, #6
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 80027b6:	444f      	add	r7, r9
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 80027b8:	ea82 12c1 	eor.w	r2, r2, r1, lsl #7
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 80027bc:	f89c 084c 	ldrb.w	r0, [ip, #2124]	; 0x84c
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 80027c0:	f897 184c 	ldrb.w	r1, [r7, #2124]	; 0x84c
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 80027c4:	444c      	add	r4, r9
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 80027c6:	4053      	eors	r3, r2
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 80027c8:	444d      	add	r5, r9
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 80027ca:	ea83 1340 	eor.w	r3, r3, r0, lsl #5
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 80027ce:	f894 284c 	ldrb.w	r2, [r4, #2124]	; 0x84c
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 80027d2:	f895 084c 	ldrb.w	r0, [r5, #2124]	; 0x84c
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 80027d6:	444e      	add	r6, r9
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 80027d8:	ea83 1301 	eor.w	r3, r3, r1, lsl #4
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 80027dc:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 80027e0:	f896 284c 	ldrb.w	r2, [r6, #2124]	; 0x84c
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 80027e4:	ea83 0380 	eor.w	r3, r3, r0, lsl #2
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 80027e8:	ea83 0342 	eor.w	r3, r3, r2, lsl #1
        if (crcreg == 0) {
 80027ec:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
 80027f0:	d004      	beq.n	80027fc <hsc_decode+0x5ec>
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 80027f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80027f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80027f6:	4293      	cmp	r3, r2
 80027f8:	f47f ae92 	bne.w	8002520 <hsc_decode+0x310>
    }
    /// CRC Path Check Process Over

    /// Decoded Bytewise data stored in output[].
    return crcreg;
}
 80027fc:	b015      	add	sp, #84	; 0x54
 80027fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        llr_layer_a = -llr_layer_a;
 8002802:	f1c5 0800 	rsb	r8, r5, #0
 8002806:	e59a      	b.n	800233e <hsc_decode+0x12e>
 8002808:	f1c5 0800 	rsb	r8, r5, #0
 800280c:	e5a8      	b.n	8002360 <hsc_decode+0x150>
				for (int l=0; l<num_paths; l++) {
 800280e:	f1bb 0f03 	cmp.w	fp, #3
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8002812:	f843 8c08 	str.w	r8, [r3, #-8]
				for (int l=0; l<num_paths; l++) {
 8002816:	f47f ad63 	bne.w	80022e0 <hsc_decode+0xd0>
 800281a:	e563      	b.n	80022e4 <hsc_decode+0xd4>
            beta_laststage  = eminlambda_lut[phi];
 800281c:	4b3b      	ldr	r3, [pc, #236]	; (800290c <hsc_decode+0x6fc>)
 800281e:	f813 300a 	ldrb.w	r3, [r3, sl]
 8002822:	9301      	str	r3, [sp, #4]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	2b02      	cmp	r3, #2
 8002828:	9302      	str	r3, [sp, #8]
 800282a:	f340 836a 	ble.w	8002f02 <hsc_decode+0xcf2>
 800282e:	f1bb 0f01 	cmp.w	fp, #1
 8002832:	f000 8329 	beq.w	8002e88 <hsc_decode+0xc78>
 8002836:	f1bb 0f02 	cmp.w	fp, #2
 800283a:	f000 8372 	beq.w	8002f22 <hsc_decode+0xd12>
 800283e:	f1bb 0f03 	cmp.w	fp, #3
 8002842:	f04f 0402 	mov.w	r4, #2
            lmd0            = 0;
 8002846:	f04f 0800 	mov.w	r8, #0
 800284a:	f000 8426 	beq.w	800309a <hsc_decode+0xe8a>
 800284e:	4b30      	ldr	r3, [pc, #192]	; (8002910 <hsc_decode+0x700>)
            next_pt         = 2;
 8002850:	9404      	str	r4, [sp, #16]
 8002852:	f8cd 8000 	str.w	r8, [sp]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002856:	f04f 0e06 	mov.w	lr, #6
 800285a:	f8cd b01c 	str.w	fp, [sp, #28]
                int incval  = (beta < beta_laststage);
 800285e:	9a01      	ldr	r2, [sp, #4]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002860:	f819 1028 	ldrb.w	r1, [r9, r8, lsl #2]
 8002864:	9d00      	ldr	r5, [sp, #0]
 8002866:	7b1e      	ldrb	r6, [r3, #12]
 8002868:	eb09 0084 	add.w	r0, r9, r4, lsl #2
                int incval  = (beta < beta_laststage);
 800286c:	42a2      	cmp	r2, r4
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800286e:	4401      	add	r1, r0
                int incval  = (beta < beta_laststage);
 8002870:	bfd4      	ite	le
 8002872:	2200      	movle	r2, #0
 8002874:	2201      	movgt	r2, #1
                int bit0_i  = (beta*2) + incval;
 8002876:	ea4f 0c44 	mov.w	ip, r4, lsl #1
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800287a:	f891 784c 	ldrb.w	r7, [r1, #2124]	; 0x84c
 800287e:	444d      	add	r5, r9
                int bit0_i  = (beta*2) + incval;
 8002880:	eb0c 0102 	add.w	r1, ip, r2
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002884:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002888:	4077      	eors	r7, r6
                int bit1_i  = ((beta+1)*2) + incval;
 800288a:	4472      	add	r2, lr
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800288c:	786e      	ldrb	r6, [r5, #1]
 800288e:	f881 784c 	strb.w	r7, [r1, #2124]	; 0x84c
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002892:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002896:	7b1f      	ldrb	r7, [r3, #12]
 8002898:	f882 784c 	strb.w	r7, [r2, #2124]	; 0x84c
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800289c:	4406      	add	r6, r0
 800289e:	f893 b00d 	ldrb.w	fp, [r3, #13]
 80028a2:	f896 784c 	ldrb.w	r7, [r6, #2124]	; 0x84c
 80028a6:	78ae      	ldrb	r6, [r5, #2]
 80028a8:	78ed      	ldrb	r5, [r5, #3]
 80028aa:	ea87 070b 	eor.w	r7, r7, fp
 80028ae:	f881 784d 	strb.w	r7, [r1, #2125]	; 0x84d
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80028b2:	7b5f      	ldrb	r7, [r3, #13]
 80028b4:	f882 784d 	strb.w	r7, [r2, #2125]	; 0x84d
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80028b8:	4406      	add	r6, r0
 80028ba:	7b9f      	ldrb	r7, [r3, #14]
 80028bc:	f896 684c 	ldrb.w	r6, [r6, #2124]	; 0x84c
 80028c0:	407e      	eors	r6, r7
 80028c2:	f881 684e 	strb.w	r6, [r1, #2126]	; 0x84e
 80028c6:	4428      	add	r0, r5
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80028c8:	7b9d      	ldrb	r5, [r3, #14]
 80028ca:	f882 584e 	strb.w	r5, [r2, #2126]	; 0x84e
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80028ce:	f890 084c 	ldrb.w	r0, [r0, #2124]	; 0x84c
 80028d2:	7bdd      	ldrb	r5, [r3, #15]
 80028d4:	4068      	eors	r0, r5
 80028d6:	f881 084f 	strb.w	r0, [r1, #2127]	; 0x84f
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80028da:	7bd9      	ldrb	r1, [r3, #15]
 80028dc:	f882 184f 	strb.w	r1, [r2, #2127]	; 0x84f
                if (beta == next_pt) {
 80028e0:	9a04      	ldr	r2, [sp, #16]
 80028e2:	4294      	cmp	r4, r2
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80028e4:	f104 0402 	add.w	r4, r4, #2
                if (beta == next_pt) {
 80028e8:	f000 8217 	beq.w	8002d1a <hsc_decode+0xb0a>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80028ec:	9a02      	ldr	r2, [sp, #8]
 80028ee:	42a2      	cmp	r2, r4
 80028f0:	f10e 0e04 	add.w	lr, lr, #4
 80028f4:	f103 0308 	add.w	r3, r3, #8
 80028f8:	dcb1      	bgt.n	800285e <hsc_decode+0x64e>
 80028fa:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80028fe:	9b00      	ldr	r3, [sp, #0]
 8002900:	444b      	add	r3, r9
            *(uint32_t*)PRIBIT(h)[lmd0] = 0x03020100;
 8002902:	4a04      	ldr	r2, [pc, #16]	; (8002914 <hsc_decode+0x704>)
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e5cb      	b.n	80024a0 <hsc_decode+0x290>
 8002908:	080092b8 	.word	0x080092b8
 800290c:	080097ac 	.word	0x080097ac
 8002910:	20000b50 	.word	0x20000b50
 8002914:	03020100 	.word	0x03020100
            int min_lmd = minlambda_lut[phi];
 8002918:	4ad4      	ldr	r2, [pc, #848]	; (8002c6c <hsc_decode+0xa5c>)
                if (LLR(h)[1][l] < 0) {
 800291a:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
            int min_lmd = minlambda_lut[phi];
 800291e:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8002922:	9201      	str	r2, [sp, #4]
            int max_lmd = maxlambda_lut[phi];
 8002924:	9a08      	ldr	r2, [sp, #32]
                if (LLR(h)[1][l] < 0) {
 8002926:	2b00      	cmp	r3, #0
            int max_lmd = maxlambda_lut[phi];
 8002928:	f81a 2002 	ldrb.w	r2, [sl, r2]
 800292c:	9200      	str	r2, [sp, #0]
 800292e:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
                if (LLR(h)[1][l] < 0) {
 8002932:	f2c0 8287 	blt.w	8002e44 <hsc_decode+0xc34>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8002936:	4413      	add	r3, r2
 8002938:	f8c9 3e50 	str.w	r3, [r9, #3664]	; 0xe50
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 800293c:	f8c9 2e4c 	str.w	r2, [r9, #3660]	; 0xe4c
            for (int l=0; l<num_paths; l++) {
 8002940:	f1bb 0f01 	cmp.w	fp, #1
 8002944:	d029      	beq.n	800299a <hsc_decode+0x78a>
                if (LLR(h)[1][l] < 0) {
 8002946:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 800294a:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
 800294e:	2b00      	cmp	r3, #0
 8002950:	f2c0 828e 	blt.w	8002e70 <hsc_decode+0xc60>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8002954:	4413      	add	r3, r2
 8002956:	f8c9 3e58 	str.w	r3, [r9, #3672]	; 0xe58
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 800295a:	f8c9 2e54 	str.w	r2, [r9, #3668]	; 0xe54
            for (int l=0; l<num_paths; l++) {
 800295e:	f1bb 0f02 	cmp.w	fp, #2
 8002962:	d01a      	beq.n	800299a <hsc_decode+0x78a>
                if (LLR(h)[1][l] < 0) {
 8002964:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8002968:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	f2c0 8285 	blt.w	8002e7c <hsc_decode+0xc6c>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8002972:	4413      	add	r3, r2
 8002974:	f8c9 3e60 	str.w	r3, [r9, #3680]	; 0xe60
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8002978:	f8c9 2e5c 	str.w	r2, [r9, #3676]	; 0xe5c
            for (int l=0; l<num_paths; l++) {
 800297c:	f1bb 0f03 	cmp.w	fp, #3
 8002980:	d00b      	beq.n	800299a <hsc_decode+0x78a>
                if (LLR(h)[1][l] < 0) {
 8002982:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 8002986:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 800298a:	2b00      	cmp	r3, #0
 800298c:	f2c0 82bd 	blt.w	8002f0a <hsc_decode+0xcfa>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8002990:	4413      	add	r3, r2
 8002992:	f8c9 3e68 	str.w	r3, [r9, #3688]	; 0xe68
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8002996:	f8c9 2e64 	str.w	r2, [r9, #3684]	; 0xe64
    *(uint32_t*)&indexOut[0] = 0x03020100;
 800299a:	4bb5      	ldr	r3, [pc, #724]	; (8002c70 <hsc_decode+0xa60>)
 800299c:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 8002c74 <hsc_decode+0xa64>
 80029a0:	f8c9 3e6c 	str.w	r3, [r9, #3692]	; 0xe6c
            num_paths = num_paths * 2;
 80029a4:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
    *(uint32_t*)&indexOut[4] = 0x07060504;
 80029a8:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 80029ac:	f8c9 3e70 	str.w	r3, [r9, #3696]	; 0xe70
            num_paths = num_paths * 2;
 80029b0:	465e      	mov	r6, fp
 80029b2:	eb0b 080e 	add.w	r8, fp, lr
        gap    -= (gap > 1);
 80029b6:	2e01      	cmp	r6, #1
 80029b8:	bfc8      	it	gt
 80029ba:	3e01      	subgt	r6, #1
        sorted  = (gap == 1);
 80029bc:	f1a6 0c01 	sub.w	ip, r6, #1
 80029c0:	fabc fc8c 	clz	ip, ip
        for (i=0, j=gap; j<length; i++, j++) {
 80029c4:	45b3      	cmp	fp, r6
        sorted  = (gap == 1);
 80029c6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
        for (i=0, j=gap; j<length; i++, j++) {
 80029ca:	ddf4      	ble.n	80029b6 <hsc_decode+0x7a6>
 80029cc:	1e72      	subs	r2, r6, #1
 80029ce:	4ba9      	ldr	r3, [pc, #676]	; (8002c74 <hsc_decode+0xa64>)
 80029d0:	4472      	add	r2, lr
 80029d2:	eba8 0706 	sub.w	r7, r8, r6
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 80029d6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80029da:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80029de:	eb09 0581 	add.w	r5, r9, r1, lsl #2
 80029e2:	eb09 0480 	add.w	r4, r9, r0, lsl #2
 80029e6:	f8d5 5e4c 	ldr.w	r5, [r5, #3660]	; 0xe4c
 80029ea:	f8d4 4e4c 	ldr.w	r4, [r4, #3660]	; 0xe4c
 80029ee:	42a5      	cmp	r5, r4
 80029f0:	dd04      	ble.n	80029fc <hsc_decode+0x7ec>
                indexOut[i] = indexOut[j];
 80029f2:	f803 0c01 	strb.w	r0, [r3, #-1]
                sorted      = false;
 80029f6:	f04f 0c00 	mov.w	ip, #0
                indexOut[j] = k;
 80029fa:	7011      	strb	r1, [r2, #0]
        for (i=0, j=gap; j<length; i++, j++) {
 80029fc:	429f      	cmp	r7, r3
 80029fe:	d1ea      	bne.n	80029d6 <hsc_decode+0x7c6>
 8002a00:	f899 4e6c 	ldrb.w	r4, [r9, #3692]	; 0xe6c
    } while (!sorted);
 8002a04:	f1bc 0f00 	cmp.w	ip, #0
 8002a08:	d0d5      	beq.n	80029b6 <hsc_decode+0x7a6>
            if (num_paths > LISTSIZE) {
 8002a0a:	f1bb 0f04 	cmp.w	fp, #4
 8002a0e:	f300 8195 	bgt.w	8002d3c <hsc_decode+0xb2c>
 8002a12:	f1ab 0102 	sub.w	r1, fp, #2
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8002a16:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
       k = idx_a[i] >> 1;
 8002a1a:	f899 0e6d 	ldrb.w	r0, [r9, #3693]	; 0xe6d
 8002a1e:	0866      	lsrs	r6, r4, #1
           chk2       |= (1<<k);
 8002a20:	2501      	movs	r5, #1
           pri[p_i--]  = k;
 8002a22:	444b      	add	r3, r9
           chk2       |= (1<<k);
 8002a24:	fa05 f706 	lsl.w	r7, r5, r6
           idx_b[k]    = idx_a[i];
 8002a28:	eb09 0c06 	add.w	ip, r9, r6
       k = idx_a[i] >> 1;
 8002a2c:	fa20 f205 	lsr.w	r2, r0, r5
           pri[p_i--]  = k;
 8002a30:	f883 6048 	strb.w	r6, [r3, #72]	; 0x48
       if ((chk2 & (1<<k)) == 0) {
 8002a34:	b2fb      	uxtb	r3, r7
       k = idx_a[i] >> 1;
 8002a36:	b2d6      	uxtb	r6, r2
           idx_b[k]    = idx_a[i];
 8002a38:	f88c 4e74 	strb.w	r4, [ip, #3700]	; 0xe74
       if ((chk2 & (1<<k)) == 0) {
 8002a3c:	fa43 f406 	asr.w	r4, r3, r6
 8002a40:	07e4      	lsls	r4, r4, #31
 8002a42:	f100 8180 	bmi.w	8002d46 <hsc_decode+0xb36>
           pri[p_i--]  = k;
 8002a46:	4449      	add	r1, r9
           chk2       |= (1<<k);
 8002a48:	fa05 f306 	lsl.w	r3, r5, r6
           idx_b[k]    = idx_a[i];
 8002a4c:	eb09 0406 	add.w	r4, r9, r6
           chk2       |= (1<<k);
 8002a50:	433b      	orrs	r3, r7
           pri[p_i--]  = k;
 8002a52:	f881 6048 	strb.w	r6, [r1, #72]	; 0x48
           idx_b[k]    = idx_a[i];
 8002a56:	f884 0e74 	strb.w	r0, [r4, #3700]	; 0xe74
           chk2       |= (1<<k);
 8002a5a:	b2db      	uxtb	r3, r3
           pri[p_i--]  = k;
 8002a5c:	462c      	mov	r4, r5
 8002a5e:	f1ab 0103 	sub.w	r1, fp, #3
 8002a62:	2707      	movs	r7, #7
           chk1       |= (1<<i);
 8002a64:	2503      	movs	r5, #3
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8002a66:	f1bb 0f02 	cmp.w	fp, #2
 8002a6a:	d023      	beq.n	8002ab4 <hsc_decode+0x8a4>
       k = idx_a[i] >> 1;
 8002a6c:	f899 6e6e 	ldrb.w	r6, [r9, #3694]	; 0xe6e
 8002a70:	0874      	lsrs	r4, r6, #1
       if ((chk2 & (1<<k)) == 0) {
 8002a72:	fa43 fc04 	asr.w	ip, r3, r4
 8002a76:	f01c 0f01 	tst.w	ip, #1
 8002a7a:	d10d      	bne.n	8002a98 <hsc_decode+0x888>
           chk2       |= (1<<k);
 8002a7c:	2501      	movs	r5, #1
 8002a7e:	40a5      	lsls	r5, r4
           pri[p_i--]  = k;
 8002a80:	eb09 0c01 	add.w	ip, r9, r1
           idx_b[k]    = idx_a[i];
 8002a84:	eb09 0e04 	add.w	lr, r9, r4
           chk2       |= (1<<k);
 8002a88:	432b      	orrs	r3, r5
 8002a8a:	b2db      	uxtb	r3, r3
           chk1       |= (1<<i);
 8002a8c:	463d      	mov	r5, r7
           idx_b[k]    = idx_a[i];
 8002a8e:	f88e 6e74 	strb.w	r6, [lr, #3700]	; 0xe74
           pri[p_i--]  = k;
 8002a92:	f88c 4048 	strb.w	r4, [ip, #72]	; 0x48
 8002a96:	3901      	subs	r1, #1
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8002a98:	f1bb 0f04 	cmp.w	fp, #4
 8002a9c:	f040 8357 	bne.w	800314e <hsc_decode+0xf3e>
       k = idx_a[i] >> 1;
 8002aa0:	f899 7e6f 	ldrb.w	r7, [r9, #3695]	; 0xe6f
 8002aa4:	087e      	lsrs	r6, r7, #1
       if ((chk2 & (1<<k)) == 0) {
 8002aa6:	fa43 f406 	asr.w	r4, r3, r6
 8002aaa:	07e4      	lsls	r4, r4, #31
 8002aac:	f140 81d0 	bpl.w	8002e50 <hsc_decode+0xc40>
 8002ab0:	f3c5 0447 	ubfx	r4, r5, #1, #8
    switch ((chk1>>1) & 7) {
 8002ab4:	2c06      	cmp	r4, #6
 8002ab6:	f200 82e9 	bhi.w	800308c <hsc_decode+0xe7c>
 8002aba:	e8df f014 	tbh	[pc, r4, lsl #1]
 8002abe:	027e      	.short	0x027e
 8002ac0:	00fe0113 	.word	0x00fe0113
 8002ac4:	00eb00f9 	.word	0x00eb00f9
 8002ac8:	000700eb 	.word	0x000700eb
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8002acc:	4a6a      	ldr	r2, [pc, #424]	; (8002c78 <hsc_decode+0xa68>)
 8002ace:	4413      	add	r3, r2
 8002ad0:	0842      	lsrs	r2, r0, #1
 8002ad2:	f893 34e4 	ldrb.w	r3, [r3, #1252]	; 0x4e4
                pri[0]          = j0[chk2];
 8002ad6:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8002ada:	444b      	add	r3, r9
 8002adc:	f883 0e74 	strb.w	r0, [r3, #3700]	; 0xe74
                    switch (max_lmd-min_lmd) {
 8002ae0:	e9dd 1300 	ldrd	r1, r3, [sp]
 8002ae4:	4e65      	ldr	r6, [pc, #404]	; (8002c7c <hsc_decode+0xa6c>)
 8002ae6:	f899 e048 	ldrb.w	lr, [r9, #72]	; 0x48
 8002aea:	1acb      	subs	r3, r1, r3
 8002aec:	f00a 0501 	and.w	r5, sl, #1
 8002af0:	9301      	str	r3, [sp, #4]
                        case 6: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002af2:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8002af6:	1caf      	adds	r7, r5, #2
 8002af8:	1c74      	adds	r4, r6, #1
 8002afa:	9304      	str	r3, [sp, #16]
 8002afc:	445e      	add	r6, fp
 8002afe:	1e4b      	subs	r3, r1, #1
 8002b00:	9307      	str	r3, [sp, #28]
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002b02:	9502      	str	r5, [sp, #8]
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002b04:	eb09 0787 	add.w	r7, r9, r7, lsl #2
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002b08:	eb09 0c8a 	add.w	ip, r9, sl, lsl #2
 8002b0c:	4673      	mov	r3, lr
 8002b0e:	9600      	str	r6, [sp, #0]
 8002b10:	460d      	mov	r5, r1
                int lr  = INDEX(h)[l] >> 1;
 8002b12:	b2d2      	uxtb	r2, r2
                if (l != lr) {
 8002b14:	4293      	cmp	r3, r2
 8002b16:	f000 8081 	beq.w	8002c1c <hsc_decode+0xa0c>
                    switch (max_lmd-min_lmd) {
 8002b1a:	9901      	ldr	r1, [sp, #4]
 8002b1c:	2906      	cmp	r1, #6
 8002b1e:	d841      	bhi.n	8002ba4 <hsc_decode+0x994>
 8002b20:	e8df f001 	tbb	[pc, r1]
 8002b24:	9c9ea2a0 	.word	0x9c9ea2a0
 8002b28:	049a      	.short	0x049a
 8002b2a:	ae          	.byte	0xae
 8002b2b:	00          	.byte	0x00
            int max_lmd = maxlambda_lut[phi];
 8002b2c:	4629      	mov	r1, r5
                        case 5: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b2e:	eb09 0e81 	add.w	lr, r9, r1, lsl #2
 8002b32:	eb0e 0802 	add.w	r8, lr, r2
 8002b36:	449e      	add	lr, r3
 8002b38:	f898 801c 	ldrb.w	r8, [r8, #28]
 8002b3c:	f88e 801c 	strb.w	r8, [lr, #28]
 8002b40:	3901      	subs	r1, #1
                        case 4: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b42:	eb09 0e81 	add.w	lr, r9, r1, lsl #2
 8002b46:	eb0e 0802 	add.w	r8, lr, r2
 8002b4a:	449e      	add	lr, r3
 8002b4c:	f898 801c 	ldrb.w	r8, [r8, #28]
 8002b50:	f88e 801c 	strb.w	r8, [lr, #28]
 8002b54:	3901      	subs	r1, #1
                        case 3: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b56:	eb09 0e81 	add.w	lr, r9, r1, lsl #2
 8002b5a:	eb0e 0802 	add.w	r8, lr, r2
 8002b5e:	449e      	add	lr, r3
 8002b60:	f898 801c 	ldrb.w	r8, [r8, #28]
 8002b64:	f88e 801c 	strb.w	r8, [lr, #28]
 8002b68:	3901      	subs	r1, #1
                        case 2: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b6a:	eb09 0e81 	add.w	lr, r9, r1, lsl #2
 8002b6e:	eb0e 0802 	add.w	r8, lr, r2
 8002b72:	449e      	add	lr, r3
 8002b74:	f898 801c 	ldrb.w	r8, [r8, #28]
 8002b78:	f88e 801c 	strb.w	r8, [lr, #28]
 8002b7c:	3901      	subs	r1, #1
                        case 1: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b7e:	eb09 0e81 	add.w	lr, r9, r1, lsl #2
 8002b82:	eb0e 0802 	add.w	r8, lr, r2
 8002b86:	449e      	add	lr, r3
 8002b88:	f898 801c 	ldrb.w	r8, [r8, #28]
 8002b8c:	f88e 801c 	strb.w	r8, [lr, #28]
 8002b90:	3901      	subs	r1, #1
                        case 0: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];
 8002b92:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002b96:	eb01 0e02 	add.w	lr, r1, r2
 8002b9a:	4419      	add	r1, r3
 8002b9c:	f89e e01c 	ldrb.w	lr, [lr, #28]
 8002ba0:	f881 e01c 	strb.w	lr, [r1, #28]
                    switch (max_lmd) {
 8002ba4:	2d06      	cmp	r5, #6
 8002ba6:	d839      	bhi.n	8002c1c <hsc_decode+0xa0c>
 8002ba8:	e8df f005 	tbb	[pc, r5]
 8002bac:	1c242c34 	.word	0x1c242c34
 8002bb0:	0c14      	.short	0x0c14
 8002bb2:	04          	.byte	0x04
 8002bb3:	00          	.byte	0x00
                        case 6: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002bb4:	eb09 0e02 	add.w	lr, r9, r2
 8002bb8:	eb09 0103 	add.w	r1, r9, r3
 8002bbc:	f89e e018 	ldrb.w	lr, [lr, #24]
 8002bc0:	f881 e018 	strb.w	lr, [r1, #24]
                        case 5: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002bc4:	eb09 0e02 	add.w	lr, r9, r2
 8002bc8:	eb09 0103 	add.w	r1, r9, r3
 8002bcc:	f89e e014 	ldrb.w	lr, [lr, #20]
 8002bd0:	f881 e014 	strb.w	lr, [r1, #20]
                        case 4: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002bd4:	eb09 0e02 	add.w	lr, r9, r2
 8002bd8:	eb09 0103 	add.w	r1, r9, r3
 8002bdc:	f89e e010 	ldrb.w	lr, [lr, #16]
 8002be0:	f881 e010 	strb.w	lr, [r1, #16]
                        case 3: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002be4:	eb09 0e02 	add.w	lr, r9, r2
 8002be8:	eb09 0103 	add.w	r1, r9, r3
 8002bec:	f89e e00c 	ldrb.w	lr, [lr, #12]
 8002bf0:	f881 e00c 	strb.w	lr, [r1, #12]
                        case 2: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002bf4:	eb09 0e02 	add.w	lr, r9, r2
 8002bf8:	eb09 0103 	add.w	r1, r9, r3
 8002bfc:	f89e e008 	ldrb.w	lr, [lr, #8]
 8002c00:	f881 e008 	strb.w	lr, [r1, #8]
                        case 1: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002c04:	eb09 0e02 	add.w	lr, r9, r2
 8002c08:	eb09 0103 	add.w	r1, r9, r3
 8002c0c:	f89e e004 	ldrb.w	lr, [lr, #4]
 8002c10:	f881 e004 	strb.w	lr, [r1, #4]
                        case 0: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];
 8002c14:	f819 1002 	ldrb.w	r1, [r9, r2]
 8002c18:	f809 1003 	strb.w	r1, [r9, r3]
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002c1c:	eb0c 0103 	add.w	r1, ip, r3
 8002c20:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8002c24:	f881 2c4c 	strb.w	r2, [r1, #3148]	; 0xc4c
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8002c28:	eb09 0283 	add.w	r2, r9, r3, lsl #2
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002c2c:	443b      	add	r3, r7
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8002c2e:	eb09 0e80 	add.w	lr, r9, r0, lsl #2
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002c32:	f000 0001 	and.w	r0, r0, #1
 8002c36:	f883 084c 	strb.w	r0, [r3, #2124]	; 0x84c
            for (int ll=0; ll<num_paths; ll++) {
 8002c3a:	9b00      	ldr	r3, [sp, #0]
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8002c3c:	f8de ee4c 	ldr.w	lr, [lr, #3660]	; 0xe4c
 8002c40:	f8c2 e038 	str.w	lr, [r2, #56]	; 0x38
            for (int ll=0; ll<num_paths; ll++) {
 8002c44:	42a3      	cmp	r3, r4
 8002c46:	d065      	beq.n	8002d14 <hsc_decode+0xb04>
 8002c48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002c4c:	eb09 0203 	add.w	r2, r9, r3
 8002c50:	f892 0e74 	ldrb.w	r0, [r2, #3700]	; 0xe74
 8002c54:	0842      	lsrs	r2, r0, #1
 8002c56:	e75c      	b.n	8002b12 <hsc_decode+0x902>
            int max_lmd = maxlambda_lut[phi];
 8002c58:	4629      	mov	r1, r5
 8002c5a:	e772      	b.n	8002b42 <hsc_decode+0x932>
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	e77a      	b.n	8002b56 <hsc_decode+0x946>
 8002c60:	4629      	mov	r1, r5
 8002c62:	e782      	b.n	8002b6a <hsc_decode+0x95a>
 8002c64:	4629      	mov	r1, r5
 8002c66:	e794      	b.n	8002b92 <hsc_decode+0x982>
 8002c68:	4629      	mov	r1, r5
 8002c6a:	e788      	b.n	8002b7e <hsc_decode+0x96e>
 8002c6c:	0800968c 	.word	0x0800968c
 8002c70:	03020100 	.word	0x03020100
 8002c74:	20001170 	.word	0x20001170
 8002c78:	080092b8 	.word	0x080092b8
 8002c7c:	2000034c 	.word	0x2000034c
                        case 6: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002c80:	9904      	ldr	r1, [sp, #16]
 8002c82:	eb01 0e02 	add.w	lr, r1, r2
 8002c86:	4419      	add	r1, r3
 8002c88:	f89e e01c 	ldrb.w	lr, [lr, #28]
 8002c8c:	f881 e01c 	strb.w	lr, [r1, #28]
 8002c90:	9907      	ldr	r1, [sp, #28]
 8002c92:	e74c      	b.n	8002b2e <hsc_decode+0x91e>
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8002c94:	4acc      	ldr	r2, [pc, #816]	; (8002fc8 <hsc_decode+0xdb8>)
 8002c96:	4413      	add	r3, r2
 8002c98:	f899 2e6e 	ldrb.w	r2, [r9, #3694]	; 0xe6e
 8002c9c:	f893 34e4 	ldrb.w	r3, [r3, #1252]	; 0x4e4
                pri[0]          = j0[chk2];
 8002ca0:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8002ca4:	444b      	add	r3, r9
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	f883 2e74 	strb.w	r2, [r3, #3700]	; 0xe74
 8002cac:	0852      	lsrs	r2, r2, #1
 8002cae:	e717      	b.n	8002ae0 <hsc_decode+0x8d0>
        case 3: idx_b[j0[chk2]] = idx_a[3]; 
 8002cb0:	4ac5      	ldr	r2, [pc, #788]	; (8002fc8 <hsc_decode+0xdb8>)
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f899 2e6f 	ldrb.w	r2, [r9, #3695]	; 0xe6f
 8002cb8:	e7f0      	b.n	8002c9c <hsc_decode+0xa8c>
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8002cba:	4ac3      	ldr	r2, [pc, #780]	; (8002fc8 <hsc_decode+0xdb8>)
                idx_b[j0[chk2]] = idx_a[3]; 
 8002cbc:	f899 1e6f 	ldrb.w	r1, [r9, #3695]	; 0xe6f
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f893 24d4 	ldrb.w	r2, [r3, #1236]	; 0x4d4
                idx_b[j0[chk2]] = idx_a[3]; 
 8002cc6:	f893 34e4 	ldrb.w	r3, [r3, #1252]	; 0x4e4
                pri[1]          = j1[chk2];
 8002cca:	f889 2049 	strb.w	r2, [r9, #73]	; 0x49
                pri[0]          = j0[chk2];
 8002cce:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8002cd2:	444a      	add	r2, r9
                idx_b[j0[chk2]] = idx_a[3]; 
 8002cd4:	444b      	add	r3, r9
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8002cd6:	f882 0e74 	strb.w	r0, [r2, #3700]	; 0xe74
 8002cda:	4608      	mov	r0, r1
                idx_b[j0[chk2]] = idx_a[3]; 
 8002cdc:	f883 1e74 	strb.w	r1, [r3, #3700]	; 0xe74
 8002ce0:	084a      	lsrs	r2, r1, #1
 8002ce2:	e6fd      	b.n	8002ae0 <hsc_decode+0x8d0>
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002ce4:	4ab8      	ldr	r2, [pc, #736]	; (8002fc8 <hsc_decode+0xdb8>)
 8002ce6:	f899 0e6e 	ldrb.w	r0, [r9, #3694]	; 0xe6e
 8002cea:	4413      	add	r3, r2
 8002cec:	f893 24d4 	ldrb.w	r2, [r3, #1236]	; 0x4d4
                idx_b[j0[chk2]] = idx_a[3]; 
 8002cf0:	f893 14e4 	ldrb.w	r1, [r3, #1252]	; 0x4e4
                pri[1]          = j1[chk2];
 8002cf4:	f889 2049 	strb.w	r2, [r9, #73]	; 0x49
                idx_b[j0[chk2]] = idx_a[3]; 
 8002cf8:	f899 3e6f 	ldrb.w	r3, [r9, #3695]	; 0xe6f
                pri[0]          = j0[chk2];
 8002cfc:	f889 1048 	strb.w	r1, [r9, #72]	; 0x48
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002d00:	444a      	add	r2, r9
                idx_b[j0[chk2]] = idx_a[3]; 
 8002d02:	eb09 0401 	add.w	r4, r9, r1
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002d06:	f882 0e74 	strb.w	r0, [r2, #3700]	; 0xe74
 8002d0a:	4618      	mov	r0, r3
                idx_b[j0[chk2]] = idx_a[3]; 
 8002d0c:	f884 3e74 	strb.w	r3, [r4, #3700]	; 0xe74
 8002d10:	085a      	lsrs	r2, r3, #1
 8002d12:	e6e5      	b.n	8002ae0 <hsc_decode+0x8d0>
 8002d14:	9d02      	ldr	r5, [sp, #8]
 8002d16:	f7ff bbbd 	b.w	8002494 <hsc_decode+0x284>
                    next_pt = (next_pt << 1) + 2;
 8002d1a:	f10c 0202 	add.w	r2, ip, #2
 8002d1e:	9204      	str	r2, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002d20:	9a02      	ldr	r2, [sp, #8]
 8002d22:	4294      	cmp	r4, r2
                    lmd0++;
 8002d24:	f108 0801 	add.w	r8, r8, #1
 8002d28:	f10e 0e04 	add.w	lr, lr, #4
 8002d2c:	f103 0308 	add.w	r3, r3, #8
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002d30:	f280 80f1 	bge.w	8002f16 <hsc_decode+0xd06>
 8002d34:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8002d38:	9200      	str	r2, [sp, #0]
 8002d3a:	e590      	b.n	800285e <hsc_decode+0x64e>
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	2102      	movs	r1, #2
                num_paths = LISTSIZE;
 8002d40:	f04f 0b04 	mov.w	fp, #4
 8002d44:	e669      	b.n	8002a1a <hsc_decode+0x80a>
           chk2       |= (1<<k);
 8002d46:	2400      	movs	r4, #0
 8002d48:	2705      	movs	r7, #5
 8002d4a:	e68c      	b.n	8002a66 <hsc_decode+0x856>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002d4c:	ea4f 078e 	mov.w	r7, lr, lsl #2
 8002d50:	eb09 0607 	add.w	r6, r9, r7
 8002d54:	1c65      	adds	r5, r4, #1
 8002d56:	f896 801c 	ldrb.w	r8, [r6, #28]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002d5a:	00ad      	lsls	r5, r5, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002d5c:	00a6      	lsls	r6, r4, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002d5e:	9500      	str	r5, [sp, #0]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002d60:	9604      	str	r6, [sp, #16]
 8002d62:	eb06 0508 	add.w	r5, r6, r8
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002d66:	9e00      	ldr	r6, [sp, #0]
 8002d68:	4446      	add	r6, r8
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002d6a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002d6e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002d72:	6ced      	ldr	r5, [r5, #76]	; 0x4c
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002d74:	f8d6 804c 	ldr.w	r8, [r6, #76]	; 0x4c
					if (use_gfunc) {
 8002d78:	f1ba 0f00 	cmp.w	sl, #0
 8002d7c:	f040 812a 	bne.w	8002fd4 <hsc_decode+0xdc4>
    if (llr_layer_a < llr_layer_b) {
 8002d80:	4545      	cmp	r5, r8
    llr_t a_inv = -llr_layer_a;
 8002d82:	f1c5 0600 	rsb	r6, r5, #0
    if (llr_layer_a < llr_layer_b) {
 8002d86:	f280 81e7 	bge.w	8003158 <hsc_decode+0xf48>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002d8a:	45b0      	cmp	r8, r6
 8002d8c:	dc01      	bgt.n	8002d92 <hsc_decode+0xb82>
    llr_t b_inv = -llr_layer_b;
 8002d8e:	f1c8 0500 	rsb	r5, r8, #0
				for (int l=0; l<num_paths; l++) {
 8002d92:	f1bb 0f01 	cmp.w	fp, #1
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8002d96:	f843 5c10 	str.w	r5, [r3, #-16]
				for (int l=0; l<num_paths; l++) {
 8002d9a:	f43f aaa3 	beq.w	80022e4 <hsc_decode+0xd4>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002d9e:	eb09 0507 	add.w	r5, r9, r7
 8002da2:	9e04      	ldr	r6, [sp, #16]
 8002da4:	7f6d      	ldrb	r5, [r5, #29]
 8002da6:	eb06 0805 	add.w	r8, r6, r5
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002daa:	9e00      	ldr	r6, [sp, #0]
 8002dac:	4435      	add	r5, r6
 8002dae:	eb09 0585 	add.w	r5, r9, r5, lsl #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002db2:	eb09 0688 	add.w	r6, r9, r8, lsl #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002db6:	6ced      	ldr	r5, [r5, #76]	; 0x4c
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002db8:	f8d6 804c 	ldr.w	r8, [r6, #76]	; 0x4c
    if (llr_layer_a < llr_layer_b) {
 8002dbc:	45a8      	cmp	r8, r5
    llr_t a_inv = -llr_layer_a;
 8002dbe:	f1c8 0600 	rsb	r6, r8, #0
    if (llr_layer_a < llr_layer_b) {
 8002dc2:	f280 81ce 	bge.w	8003162 <hsc_decode+0xf52>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002dc6:	42b5      	cmp	r5, r6
 8002dc8:	dc01      	bgt.n	8002dce <hsc_decode+0xbbe>
    llr_t b_inv = -llr_layer_b;
 8002dca:	f1c5 0800 	rsb	r8, r5, #0
				for (int l=0; l<num_paths; l++) {
 8002dce:	f1bb 0f02 	cmp.w	fp, #2
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8002dd2:	f843 8c0c 	str.w	r8, [r3, #-12]
				for (int l=0; l<num_paths; l++) {
 8002dd6:	f43f aa85 	beq.w	80022e4 <hsc_decode+0xd4>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002dda:	eb09 0507 	add.w	r5, r9, r7
 8002dde:	9e04      	ldr	r6, [sp, #16]
 8002de0:	7fad      	ldrb	r5, [r5, #30]
 8002de2:	eb06 0805 	add.w	r8, r6, r5
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002de6:	9e00      	ldr	r6, [sp, #0]
 8002de8:	4435      	add	r5, r6
 8002dea:	eb09 0585 	add.w	r5, r9, r5, lsl #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002dee:	eb09 0688 	add.w	r6, r9, r8, lsl #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002df2:	6ced      	ldr	r5, [r5, #76]	; 0x4c
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002df4:	f8d6 804c 	ldr.w	r8, [r6, #76]	; 0x4c
    if (llr_layer_a < llr_layer_b) {
 8002df8:	4545      	cmp	r5, r8
    llr_t a_inv = -llr_layer_a;
 8002dfa:	f1c8 0600 	rsb	r6, r8, #0
    if (llr_layer_a < llr_layer_b) {
 8002dfe:	f340 81b5 	ble.w	800316c <hsc_decode+0xf5c>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002e02:	42b5      	cmp	r5, r6
 8002e04:	dc01      	bgt.n	8002e0a <hsc_decode+0xbfa>
    llr_t b_inv = -llr_layer_b;
 8002e06:	f1c5 0800 	rsb	r8, r5, #0
				for (int l=0; l<num_paths; l++) {
 8002e0a:	f1bb 0f03 	cmp.w	fp, #3
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8002e0e:	f843 8c08 	str.w	r8, [r3, #-8]
				for (int l=0; l<num_paths; l++) {
 8002e12:	f43f aa67 	beq.w	80022e4 <hsc_decode+0xd4>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e16:	444f      	add	r7, r9
 8002e18:	9d04      	ldr	r5, [sp, #16]
 8002e1a:	7ffe      	ldrb	r6, [r7, #31]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e1c:	9f00      	ldr	r7, [sp, #0]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e1e:	4435      	add	r5, r6
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e20:	4437      	add	r7, r6
 8002e22:	eb09 0687 	add.w	r6, r9, r7, lsl #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e26:	eb09 0585 	add.w	r5, r9, r5, lsl #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e2a:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e2c:	6ced      	ldr	r5, [r5, #76]	; 0x4c
    if (llr_layer_a < llr_layer_b) {
 8002e2e:	42ae      	cmp	r6, r5
    llr_t a_inv = -llr_layer_a;
 8002e30:	f1c5 0700 	rsb	r7, r5, #0
    if (llr_layer_a < llr_layer_b) {
 8002e34:	f340 819f 	ble.w	8003176 <hsc_decode+0xf66>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002e38:	42be      	cmp	r6, r7
 8002e3a:	f73f aa9d 	bgt.w	8002378 <hsc_decode+0x168>
    llr_t b_inv = -llr_layer_b;
 8002e3e:	4275      	negs	r5, r6
 8002e40:	f7ff ba9a 	b.w	8002378 <hsc_decode+0x168>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f8c9 3e4c 	str.w	r3, [r9, #3660]	; 0xe4c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8002e4a:	f8c9 2e50 	str.w	r2, [r9, #3664]	; 0xe50
 8002e4e:	e577      	b.n	8002940 <hsc_decode+0x730>
           chk2       |= (1<<k);
 8002e50:	2401      	movs	r4, #1
 8002e52:	40e5      	lsrs	r5, r4
           pri[p_i--]  = k;
 8002e54:	4449      	add	r1, r9
           chk2       |= (1<<k);
 8002e56:	40b4      	lsls	r4, r6
           idx_b[k]    = idx_a[i];
 8002e58:	eb09 0c06 	add.w	ip, r9, r6
           chk2       |= (1<<k);
 8002e5c:	4323      	orrs	r3, r4
 8002e5e:	f045 0504 	orr.w	r5, r5, #4
 8002e62:	b2ec      	uxtb	r4, r5
           pri[p_i--]  = k;
 8002e64:	f881 6048 	strb.w	r6, [r1, #72]	; 0x48
           chk2       |= (1<<k);
 8002e68:	b2db      	uxtb	r3, r3
           idx_b[k]    = idx_a[i];
 8002e6a:	f88c 7e74 	strb.w	r7, [ip, #3700]	; 0xe74
 8002e6e:	e621      	b.n	8002ab4 <hsc_decode+0x8a4>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f8c9 3e54 	str.w	r3, [r9, #3668]	; 0xe54
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8002e76:	f8c9 2e58 	str.w	r2, [r9, #3672]	; 0xe58
 8002e7a:	e570      	b.n	800295e <hsc_decode+0x74e>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f8c9 3e5c 	str.w	r3, [r9, #3676]	; 0xe5c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8002e82:	f8c9 2e60 	str.w	r2, [r9, #3680]	; 0xe60
 8002e86:	e579      	b.n	800297c <hsc_decode+0x76c>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002e88:	2302      	movs	r3, #2
            next_pt         = 2;
 8002e8a:	461f      	mov	r7, r3
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002e8c:	2006      	movs	r0, #6
            lmd0            = 0;
 8002e8e:	f04f 0800 	mov.w	r8, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002e92:	494e      	ldr	r1, [pc, #312]	; (8002fcc <hsc_decode+0xdbc>)
 8002e94:	f819 2028 	ldrb.w	r2, [r9, r8, lsl #2]
 8002e98:	f811 6010 	ldrb.w	r6, [r1, r0, lsl #1]
 8002e9c:	eb09 0183 	add.w	r1, r9, r3, lsl #2
 8002ea0:	4411      	add	r1, r2
                int incval  = (beta < beta_laststage);
 8002ea2:	9a01      	ldr	r2, [sp, #4]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002ea4:	f891 484c 	ldrb.w	r4, [r1, #2124]	; 0x84c
                int incval  = (beta < beta_laststage);
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	bfd4      	ite	le
 8002eac:	2200      	movle	r2, #0
 8002eae:	2201      	movgt	r2, #1
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002eb0:	005d      	lsls	r5, r3, #1
 8002eb2:	18a9      	adds	r1, r5, r2
 8002eb4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8002eb8:	4074      	eors	r4, r6
 8002eba:	f881 484c 	strb.w	r4, [r1, #2124]	; 0x84c
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002ebe:	4402      	add	r2, r0
 8002ec0:	4942      	ldr	r1, [pc, #264]	; (8002fcc <hsc_decode+0xdbc>)
 8002ec2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002ec6:	f811 1010 	ldrb.w	r1, [r1, r0, lsl #1]
 8002eca:	f882 184c 	strb.w	r1, [r2, #2124]	; 0x84c
                if (beta == next_pt) {
 8002ece:	429f      	cmp	r7, r3
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002ed0:	f103 0302 	add.w	r3, r3, #2
                if (beta == next_pt) {
 8002ed4:	d008      	beq.n	8002ee8 <hsc_decode+0xcd8>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002ed6:	9a02      	ldr	r2, [sp, #8]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	f100 0004 	add.w	r0, r0, #4
 8002ede:	dcd8      	bgt.n	8002e92 <hsc_decode+0xc82>
 8002ee0:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	e50b      	b.n	8002900 <hsc_decode+0x6f0>
 8002ee8:	9a02      	ldr	r2, [sp, #8]
 8002eea:	4293      	cmp	r3, r2
                    next_pt = (next_pt << 1) + 2;
 8002eec:	f105 0702 	add.w	r7, r5, #2
                    lmd0++;
 8002ef0:	f108 0801 	add.w	r8, r8, #1
 8002ef4:	f100 0004 	add.w	r0, r0, #4
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002ef8:	dbcb      	blt.n	8002e92 <hsc_decode+0xc82>
 8002efa:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	e4fe      	b.n	8002900 <hsc_decode+0x6f0>
 8002f02:	4b33      	ldr	r3, [pc, #204]	; (8002fd0 <hsc_decode+0xdc0>)
 8002f04:	e4fd      	b.n	8002902 <hsc_decode+0x6f2>
 8002f06:	b25b      	sxtb	r3, r3
 8002f08:	e44d      	b.n	80027a6 <hsc_decode+0x596>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f8c9 3e64 	str.w	r3, [r9, #3684]	; 0xe64
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8002f10:	f8c9 2e68 	str.w	r2, [r9, #3688]	; 0xe68
 8002f14:	e541      	b.n	800299a <hsc_decode+0x78a>
 8002f16:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8002f1a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	e4ee      	b.n	8002900 <hsc_decode+0x6f0>
            lmd0            = 0;
 8002f22:	f04f 0800 	mov.w	r8, #0
 8002f26:	4c29      	ldr	r4, [pc, #164]	; (8002fcc <hsc_decode+0xdbc>)
 8002f28:	f8cd 8000 	str.w	r8, [sp]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002f2c:	4658      	mov	r0, fp
            next_pt         = 2;
 8002f2e:	46de      	mov	lr, fp
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002f30:	2606      	movs	r6, #6
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002f32:	f819 2028 	ldrb.w	r2, [r9, r8, lsl #2]
 8002f36:	7b27      	ldrb	r7, [r4, #12]
                int incval  = (beta < beta_laststage);
 8002f38:	9b01      	ldr	r3, [sp, #4]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002f3a:	eb09 0180 	add.w	r1, r9, r0, lsl #2
 8002f3e:	440a      	add	r2, r1
                int incval  = (beta < beta_laststage);
 8002f40:	4283      	cmp	r3, r0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002f42:	f892 c84c 	ldrb.w	ip, [r2, #2124]	; 0x84c
 8002f46:	ea8c 0c07 	eor.w	ip, ip, r7
 8002f4a:	9f00      	ldr	r7, [sp, #0]
                int incval  = (beta < beta_laststage);
 8002f4c:	bfd4      	ite	le
 8002f4e:	2300      	movle	r3, #0
 8002f50:	2301      	movgt	r3, #1
                int bit0_i  = (beta*2) + incval;
 8002f52:	0045      	lsls	r5, r0, #1
 8002f54:	18ea      	adds	r2, r5, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002f56:	444f      	add	r7, r9
 8002f58:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002f5c:	787f      	ldrb	r7, [r7, #1]
 8002f5e:	f882 c84c 	strb.w	ip, [r2, #2124]	; 0x84c
                int bit1_i  = ((beta+1)*2) + incval;
 8002f62:	4433      	add	r3, r6
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002f64:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8002f68:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8002f6c:	f883 c84c 	strb.w	ip, [r3, #2124]	; 0x84c
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002f70:	4439      	add	r1, r7
 8002f72:	7b67      	ldrb	r7, [r4, #13]
 8002f74:	f891 184c 	ldrb.w	r1, [r1, #2124]	; 0x84c
 8002f78:	4079      	eors	r1, r7
 8002f7a:	f882 184d 	strb.w	r1, [r2, #2125]	; 0x84d
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002f7e:	7b62      	ldrb	r2, [r4, #13]
 8002f80:	f883 284d 	strb.w	r2, [r3, #2125]	; 0x84d
                if (beta == next_pt) {
 8002f84:	4570      	cmp	r0, lr
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002f86:	f100 0002 	add.w	r0, r0, #2
                if (beta == next_pt) {
 8002f8a:	d007      	beq.n	8002f9c <hsc_decode+0xd8c>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002f8c:	9b02      	ldr	r3, [sp, #8]
 8002f8e:	4283      	cmp	r3, r0
 8002f90:	f106 0604 	add.w	r6, r6, #4
 8002f94:	f104 0408 	add.w	r4, r4, #8
 8002f98:	dccb      	bgt.n	8002f32 <hsc_decode+0xd22>
 8002f9a:	e4b0      	b.n	80028fe <hsc_decode+0x6ee>
 8002f9c:	9b02      	ldr	r3, [sp, #8]
                    lmd0++;
 8002f9e:	f108 0801 	add.w	r8, r8, #1
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002fa2:	4298      	cmp	r0, r3
 8002fa4:	ea4f 0388 	mov.w	r3, r8, lsl #2
                    next_pt = (next_pt << 1) + 2;
 8002fa8:	f105 0e02 	add.w	lr, r5, #2
 8002fac:	f106 0604 	add.w	r6, r6, #4
 8002fb0:	f104 0408 	add.w	r4, r4, #8
 8002fb4:	9300      	str	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002fb6:	dbbc      	blt.n	8002f32 <hsc_decode+0xd22>
 8002fb8:	e4a2      	b.n	8002900 <hsc_decode+0x6f0>
                pri[0]      = 1;
 8002fba:	2301      	movs	r3, #1
        case 0: idx_b[1]    = idx_a[1]; 
 8002fbc:	f889 0e75 	strb.w	r0, [r9, #3701]	; 0xe75
                pri[0]      = 1;
 8002fc0:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
 8002fc4:	e58c      	b.n	8002ae0 <hsc_decode+0x8d0>
 8002fc6:	bf00      	nop
 8002fc8:	080092b8 	.word	0x080092b8
 8002fcc:	20000b50 	.word	0x20000b50
 8002fd0:	20000304 	.word	0x20000304
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002fd4:	f819 602e 	ldrb.w	r6, [r9, lr, lsl #2]
    if (bit_layer) {
 8002fd8:	5d86      	ldrb	r6, [r0, r6]
 8002fda:	b106      	cbz	r6, 8002fde <hsc_decode+0xdce>
        llr_layer_a = -llr_layer_a;
 8002fdc:	426d      	negs	r5, r5
    return (llr_layer_b + llr_layer_a);
 8002fde:	4445      	add	r5, r8
				for (int l=0; l<num_paths; l++) {
 8002fe0:	f1bb 0f01 	cmp.w	fp, #1
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002fe4:	f843 5c10 	str.w	r5, [r3, #-16]
				for (int l=0; l<num_paths; l++) {
 8002fe8:	f43f a97c 	beq.w	80022e4 <hsc_decode+0xd4>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002fec:	eb09 0607 	add.w	r6, r9, r7
 8002ff0:	7f75      	ldrb	r5, [r6, #29]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002ff2:	7876      	ldrb	r6, [r6, #1]
 8002ff4:	9607      	str	r6, [sp, #28]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002ff6:	9e04      	ldr	r6, [sp, #16]
 8002ff8:	eb06 0805 	add.w	r8, r6, r5
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002ffc:	9e00      	ldr	r6, [sp, #0]
 8002ffe:	4435      	add	r5, r6
    if (bit_layer) {
 8003000:	9e07      	ldr	r6, [sp, #28]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003002:	eb09 0888 	add.w	r8, r9, r8, lsl #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003006:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    if (bit_layer) {
 800300a:	5d86      	ldrb	r6, [r0, r6]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800300c:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003010:	6ced      	ldr	r5, [r5, #76]	; 0x4c
    if (bit_layer) {
 8003012:	b10e      	cbz	r6, 8003018 <hsc_decode+0xe08>
        llr_layer_a = -llr_layer_a;
 8003014:	f1c8 0800 	rsb	r8, r8, #0
    return (llr_layer_b + llr_layer_a);
 8003018:	4445      	add	r5, r8
				for (int l=0; l<num_paths; l++) {
 800301a:	f1bb 0f02 	cmp.w	fp, #2
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800301e:	f843 5c0c 	str.w	r5, [r3, #-12]
				for (int l=0; l<num_paths; l++) {
 8003022:	f43f a95f 	beq.w	80022e4 <hsc_decode+0xd4>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003026:	eb09 0607 	add.w	r6, r9, r7
 800302a:	7fb5      	ldrb	r5, [r6, #30]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800302c:	78b6      	ldrb	r6, [r6, #2]
 800302e:	9607      	str	r6, [sp, #28]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003030:	9e04      	ldr	r6, [sp, #16]
 8003032:	eb06 0805 	add.w	r8, r6, r5
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003036:	9e00      	ldr	r6, [sp, #0]
 8003038:	4435      	add	r5, r6
    if (bit_layer) {
 800303a:	9e07      	ldr	r6, [sp, #28]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800303c:	eb09 0888 	add.w	r8, r9, r8, lsl #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003040:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    if (bit_layer) {
 8003044:	5d86      	ldrb	r6, [r0, r6]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003046:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800304a:	6ced      	ldr	r5, [r5, #76]	; 0x4c
    if (bit_layer) {
 800304c:	b10e      	cbz	r6, 8003052 <hsc_decode+0xe42>
        llr_layer_a = -llr_layer_a;
 800304e:	f1c8 0800 	rsb	r8, r8, #0
    return (llr_layer_b + llr_layer_a);
 8003052:	4445      	add	r5, r8
				for (int l=0; l<num_paths; l++) {
 8003054:	f1bb 0f03 	cmp.w	fp, #3
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003058:	f843 5c08 	str.w	r5, [r3, #-8]
				for (int l=0; l<num_paths; l++) {
 800305c:	f43f a942 	beq.w	80022e4 <hsc_decode+0xd4>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003060:	444f      	add	r7, r9
 8003062:	9e04      	ldr	r6, [sp, #16]
 8003064:	7ffd      	ldrb	r5, [r7, #31]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003066:	78ff      	ldrb	r7, [r7, #3]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003068:	442e      	add	r6, r5
 800306a:	46b0      	mov	r8, r6
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800306c:	9e00      	ldr	r6, [sp, #0]
    if (bit_layer) {
 800306e:	5dc7      	ldrb	r7, [r0, r7]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003070:	442e      	add	r6, r5
 8003072:	4635      	mov	r5, r6
 8003074:	eb09 0585 	add.w	r5, r9, r5, lsl #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003078:	eb09 0688 	add.w	r6, r9, r8, lsl #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800307c:	6ced      	ldr	r5, [r5, #76]	; 0x4c
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800307e:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
    if (bit_layer) {
 8003080:	2f00      	cmp	r7, #0
 8003082:	f43f a978 	beq.w	8002376 <hsc_decode+0x166>
        llr_layer_a = -llr_layer_a;
 8003086:	4276      	negs	r6, r6
 8003088:	f7ff b975 	b.w	8002376 <hsc_decode+0x166>
 800308c:	f899 3048 	ldrb.w	r3, [r9, #72]	; 0x48
 8003090:	444b      	add	r3, r9
 8003092:	f893 0e74 	ldrb.w	r0, [r3, #3700]	; 0xe74
 8003096:	0842      	lsrs	r2, r0, #1
 8003098:	e522      	b.n	8002ae0 <hsc_decode+0x8d0>
 800309a:	4940      	ldr	r1, [pc, #256]	; (800319c <hsc_decode+0xf8c>)
            next_pt         = 2;
 800309c:	9404      	str	r4, [sp, #16]
 800309e:	f8cd 8000 	str.w	r8, [sp]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80030a2:	f04f 0e06 	mov.w	lr, #6
                int incval  = (beta < beta_laststage);
 80030a6:	9b01      	ldr	r3, [sp, #4]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80030a8:	f819 0028 	ldrb.w	r0, [r9, r8, lsl #2]
 80030ac:	9e00      	ldr	r6, [sp, #0]
 80030ae:	7b0a      	ldrb	r2, [r1, #12]
 80030b0:	eb09 0584 	add.w	r5, r9, r4, lsl #2
                int incval  = (beta < beta_laststage);
 80030b4:	42a3      	cmp	r3, r4
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80030b6:	4428      	add	r0, r5
                int incval  = (beta < beta_laststage);
 80030b8:	bfd4      	ite	le
 80030ba:	2300      	movle	r3, #0
 80030bc:	2301      	movgt	r3, #1
                int bit0_i  = (beta*2) + incval;
 80030be:	0067      	lsls	r7, r4, #1
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80030c0:	f890 c84c 	ldrb.w	ip, [r0, #2124]	; 0x84c
 80030c4:	444e      	add	r6, r9
                int bit0_i  = (beta*2) + incval;
 80030c6:	18f8      	adds	r0, r7, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80030c8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80030cc:	ea8c 0c02 	eor.w	ip, ip, r2
                int bit1_i  = ((beta+1)*2) + incval;
 80030d0:	4473      	add	r3, lr
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80030d2:	7872      	ldrb	r2, [r6, #1]
 80030d4:	f880 c84c 	strb.w	ip, [r0, #2124]	; 0x84c
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80030d8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80030dc:	f891 c00c 	ldrb.w	ip, [r1, #12]
 80030e0:	f883 c84c 	strb.w	ip, [r3, #2124]	; 0x84c
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80030e4:	442a      	add	r2, r5
 80030e6:	f891 c00d 	ldrb.w	ip, [r1, #13]
 80030ea:	f892 284c 	ldrb.w	r2, [r2, #2124]	; 0x84c
 80030ee:	78b6      	ldrb	r6, [r6, #2]
 80030f0:	ea82 020c 	eor.w	r2, r2, ip
 80030f4:	f880 284d 	strb.w	r2, [r0, #2125]	; 0x84d
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80030f8:	7b4a      	ldrb	r2, [r1, #13]
 80030fa:	f883 284d 	strb.w	r2, [r3, #2125]	; 0x84d
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80030fe:	4435      	add	r5, r6
 8003100:	f895 284c 	ldrb.w	r2, [r5, #2124]	; 0x84c
 8003104:	7b8d      	ldrb	r5, [r1, #14]
 8003106:	406a      	eors	r2, r5
 8003108:	f880 284e 	strb.w	r2, [r0, #2126]	; 0x84e
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800310c:	7b8a      	ldrb	r2, [r1, #14]
 800310e:	f883 284e 	strb.w	r2, [r3, #2126]	; 0x84e
                if (beta == next_pt) {
 8003112:	9b04      	ldr	r3, [sp, #16]
 8003114:	429c      	cmp	r4, r3
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003116:	f104 0402 	add.w	r4, r4, #2
                if (beta == next_pt) {
 800311a:	d008      	beq.n	800312e <hsc_decode+0xf1e>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800311c:	9b02      	ldr	r3, [sp, #8]
 800311e:	42a3      	cmp	r3, r4
 8003120:	f10e 0e04 	add.w	lr, lr, #4
 8003124:	f101 0108 	add.w	r1, r1, #8
 8003128:	dcbd      	bgt.n	80030a6 <hsc_decode+0xe96>
 800312a:	f7ff bbe8 	b.w	80028fe <hsc_decode+0x6ee>
                    next_pt = (next_pt << 1) + 2;
 800312e:	1cbb      	adds	r3, r7, #2
 8003130:	9304      	str	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003132:	9b02      	ldr	r3, [sp, #8]
                    lmd0++;
 8003134:	f108 0801 	add.w	r8, r8, #1
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003138:	42a3      	cmp	r3, r4
 800313a:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800313e:	f10e 0e04 	add.w	lr, lr, #4
 8003142:	f101 0108 	add.w	r1, r1, #8
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	dcad      	bgt.n	80030a6 <hsc_decode+0xe96>
 800314a:	f7ff bbd9 	b.w	8002900 <hsc_decode+0x6f0>
 800314e:	f3c5 0447 	ubfx	r4, r5, #1, #8
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8003152:	f04f 0b03 	mov.w	fp, #3
 8003156:	e4ad      	b.n	8002ab4 <hsc_decode+0x8a4>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 8003158:	45b0      	cmp	r8, r6
 800315a:	4645      	mov	r5, r8
 800315c:	bfb8      	it	lt
 800315e:	4635      	movlt	r5, r6
 8003160:	e617      	b.n	8002d92 <hsc_decode+0xb82>
 8003162:	42b5      	cmp	r5, r6
 8003164:	bfb8      	it	lt
 8003166:	4635      	movlt	r5, r6
 8003168:	46a8      	mov	r8, r5
 800316a:	e630      	b.n	8002dce <hsc_decode+0xbbe>
 800316c:	42b5      	cmp	r5, r6
 800316e:	bfb8      	it	lt
 8003170:	4635      	movlt	r5, r6
 8003172:	46a8      	mov	r8, r5
 8003174:	e649      	b.n	8002e0a <hsc_decode+0xbfa>
 8003176:	42be      	cmp	r6, r7
 8003178:	4635      	mov	r5, r6
 800317a:	bfb8      	it	lt
 800317c:	463d      	movlt	r5, r7
 800317e:	f7ff b8fb 	b.w	8002378 <hsc_decode+0x168>
        for (i=0, phi=0; phi<h->infobits; i++) {
 8003182:	265f      	movs	r6, #95	; 0x5f
 8003184:	256f      	movs	r5, #111	; 0x6f
 8003186:	2477      	movs	r4, #119	; 0x77
 8003188:	277b      	movs	r7, #123	; 0x7b
 800318a:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800318e:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8003192:	f04f 087f 	mov.w	r8, #127	; 0x7f
 8003196:	f7ff bb06 	b.w	80027a6 <hsc_decode+0x596>
 800319a:	bf00      	nop
 800319c:	20000b50 	.word	0x20000b50

080031a0 <sub_calc_llrindex>:
    else if (index < 0)     index = 0;
    else                    index >>= 8;

#   elif (LLRMODEL == LLRMODEL_NBRSSI)
    index = (int)lora_nrssi - 40;
    if (index < 0)          index = 0;
 80031a0:	3928      	subs	r1, #40	; 0x28
 80031a2:	d404      	bmi.n	80031ae <sub_calc_llrindex+0xe>
    else if (index >= 31)   index = 31;
 80031a4:	291e      	cmp	r1, #30
 80031a6:	dd00      	ble.n	80031aa <sub_calc_llrindex+0xa>
 80031a8:	211f      	movs	r1, #31

#   endif

    return (uint8_t)index;
}
 80031aa:	b2c8      	uxtb	r0, r1
 80031ac:	4770      	bx	lr
    if (index < 0)          index = 0;
 80031ae:	2100      	movs	r1, #0
 80031b0:	e7fb      	b.n	80031aa <sub_calc_llrindex+0xa>
	...

080031b4 <sub_scale_llrmag>:
#   if (LLRMODEL == LLRMODEL_SPOTSNR)
    llrmag = llrvsnr[index];
#   elif (LLRMODEL == LLRMODEL_WBRSSI)
    llrmag = (int32_t)llrvebn0_0dB2[index];
#   elif (LLRMODEL == LLRMODEL_NBRSSI)
    llrmag = (int32_t)llrvrssi[index];
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <sub_scale_llrmag+0x10>)
 80031b6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
#   endif

    llrmag *= bytesperblock;
 80031ba:	fb11 f000 	smulbb	r0, r1, r0
    llrmag>>= 3;
    return llrmag;
}
 80031be:	f3c0 00cc 	ubfx	r0, r0, #3, #13
 80031c2:	4770      	bx	lr
 80031c4:	08009c8c 	.word	0x08009c8c

080031c8 <lorallr_init>:



void lorallr_init(lorallr_t* obj, hscrate_t coderate, lorasf_t lora_sf, uint8_t lora_nrssi, uint8_t lora_wrssi) {
 80031c8:	b570      	push	{r4, r5, r6, lr}
 80031ca:	4604      	mov	r4, r0
 80031cc:	461e      	mov	r6, r3
    ///@note no input checking
    obj->buffer_bits    = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8a0 3404 	strh.w	r3, [r0, #1028]	; 0x404
    obj->bufput         = obj->buf;
 80031d4:	f8c4 0400 	str.w	r0, [r4, #1024]	; 0x400
    obj->llr_offset     = llroffset[lora_sf];
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <lorallr_init+0x4c>)
 80031da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80031de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80031e0:	f880 3406 	strb.w	r3, [r0, #1030]	; 0x406
    obj->bytesperblock  = hsc_bytesperblock(coderate);
 80031e4:	4608      	mov	r0, r1
 80031e6:	f7fe feaf 	bl	8001f48 <hsc_bytesperblock>
 80031ea:	4605      	mov	r5, r0
 80031ec:	f884 0407 	strb.w	r0, [r4, #1031]	; 0x407

    obj->last_nrssi     = lora_nrssi;
 80031f0:	f884 6408 	strb.w	r6, [r4, #1032]	; 0x408

#   if (LLRMODEL != LLRMODEL_FIXEDVAL)
    obj->last_index     = sub_calc_llrindex(obj->llr_offset, lora_nrssi, lora_wrssi);
 80031f4:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80031f8:	4631      	mov	r1, r6
 80031fa:	f894 0406 	ldrb.w	r0, [r4, #1030]	; 0x406
 80031fe:	f7ff ffcf 	bl	80031a0 <sub_calc_llrindex>
 8003202:	f884 0409 	strb.w	r0, [r4, #1033]	; 0x409
#   else
    obj->last_index     = 0;
#   endif

    obj->last_llr = sub_scale_llrmag(obj->last_index, obj->bytesperblock);
 8003206:	4629      	mov	r1, r5
 8003208:	f7ff ffd4 	bl	80031b4 <sub_scale_llrmag>
 800320c:	f8a4 040a 	strh.w	r0, [r4, #1034]	; 0x40a
}
 8003210:	bd70      	pop	{r4, r5, r6, pc}
 8003212:	bf00      	nop
 8003214:	08009c8c 	.word	0x08009c8c

08003218 <lorallr_pushsample>:

///@note pushsample is not threadsafe when used with popblock (it is threadsafe with getblock, though).
///      Since pushsample is generally used in an ISR, if popblock is not used within the same ISR
///      call (i.e. it's in a thread/task), popblock must be protected with interrupt halting or a
///      mutex (if mutex exists).
void lorallr_pushsample(lorallr_t* obj, uint8_t lora_nrssi, uint8_t lora_wrssi, int16_t new_bits) {
 8003218:	b538      	push	{r3, r4, r5, lr}
    uint16_t next_mag;
    uint8_t index;

    /// Exit if no new information, or if too much
    if (new_bits <= 0) {
 800321a:	1e1c      	subs	r4, r3, #0
 800321c:	dd2e      	ble.n	800327c <lorallr_pushsample+0x64>
 800321e:	4605      	mov	r5, r0
        return;
    }
    obj->buffer_bits += new_bits;
 8003220:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8003224:	4423      	add	r3, r4
 8003226:	b29b      	uxth	r3, r3
 8003228:	f8a0 3404 	strh.w	r3, [r0, #1028]	; 0x404
    if (obj->buffer_bits > 256) {
 800322c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003230:	d824      	bhi.n	800327c <lorallr_pushsample+0x64>
#   if (LLRMODEL == LLRMODEL_FIXEDVAL)
    index = 0;
#   else
    /// The rssi can have sharp deviations (sometimes).  If it's more than 6 dB more or less than last
    /// value, clip it.
    if (lora_nrssi > (obj->last_nrssi + 6)) {
 8003232:	f890 3408 	ldrb.w	r3, [r0, #1032]	; 0x408
 8003236:	1d98      	adds	r0, r3, #6
 8003238:	4281      	cmp	r1, r0
 800323a:	dd12      	ble.n	8003262 <lorallr_pushsample+0x4a>
        lora_nrssi = obj->last_nrssi + 6;
 800323c:	b2c1      	uxtb	r1, r0
    else if (lora_nrssi < (obj->last_nrssi - 6)) {
        lora_nrssi = obj->last_nrssi - 6;
    }

    /// Get the next index value, and average it with the last value.
    index   = sub_calc_llrindex(obj->llr_offset, lora_nrssi, lora_wrssi);
 800323e:	f895 0406 	ldrb.w	r0, [r5, #1030]	; 0x406
 8003242:	f7ff ffad 	bl	80031a0 <sub_calc_llrindex>
    index   = (obj->last_index + index) >> 1;
 8003246:	f895 3409 	ldrb.w	r3, [r5, #1033]	; 0x409
 800324a:	4418      	add	r0, r3
#   endif

    next_mag = sub_scale_llrmag(index, obj->bytesperblock);
 800324c:	f895 1407 	ldrb.w	r1, [r5, #1031]	; 0x407
 8003250:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8003254:	f7ff ffae 	bl	80031b4 <sub_scale_llrmag>

    ///@note this last-llr might go away
    obj->last_llr = next_mag;
 8003258:	f8a5 040a 	strh.w	r0, [r5, #1034]	; 0x40a

    // Variant that just averages across the block
    {   register llr_t* bit = obj->bufput;
 800325c:	f8d5 3400 	ldr.w	r3, [r5, #1024]	; 0x400
        register llr_t mag  = next_mag;
        while (--new_bits >= 0) {
 8003260:	e006      	b.n	8003270 <lorallr_pushsample+0x58>
    else if (lora_nrssi < (obj->last_nrssi - 6)) {
 8003262:	1f98      	subs	r0, r3, #6
 8003264:	4281      	cmp	r1, r0
 8003266:	daea      	bge.n	800323e <lorallr_pushsample+0x26>
        lora_nrssi = obj->last_nrssi - 6;
 8003268:	b2c1      	uxtb	r1, r0
 800326a:	e7e8      	b.n	800323e <lorallr_pushsample+0x26>
            *bit++  = mag;
 800326c:	6018      	str	r0, [r3, #0]
 800326e:	3304      	adds	r3, #4
        while (--new_bits >= 0) {
 8003270:	3c01      	subs	r4, #1
 8003272:	b224      	sxth	r4, r4
 8003274:	2c00      	cmp	r4, #0
 8003276:	daf9      	bge.n	800326c <lorallr_pushsample+0x54>
        }
        obj->bufput = bit;
 8003278:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
    }
}
 800327c:	bd38      	pop	{r3, r4, r5, pc}

0800327e <lorallr_getblock>:


llr_t* lorallr_getblock(lorallr_t* obj, const uint8_t* blockbytes) {
 800327e:	b410      	push	{r4}
//            return NULL;
//        }
//    }

    ///@todo this could be done with multiplication and/or SIMD on Cortex M4
    end     = &blockbytes[16];
 8003280:	f101 0410 	add.w	r4, r1, #16
    bitptr  = obj->buf;
 8003284:	4603      	mov	r3, r0
    while (blockbytes < end) {
 8003286:	e005      	b.n	8003294 <lorallr_getblock+0x16>
        if (*blockbytes & 0x80) *bitptr = 0 - *bitptr;
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4252      	negs	r2, r2
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e007      	b.n	80032a0 <lorallr_getblock+0x22>
        if (*blockbytes & 0x04) *bitptr = 0 - *bitptr;
        bitptr++;
        if (*blockbytes & 0x02) *bitptr = 0 - *bitptr;
        bitptr++;
        if (*blockbytes & 0x01) *bitptr = 0 - *bitptr;
        bitptr++;
 8003290:	3320      	adds	r3, #32
        blockbytes++;
 8003292:	3101      	adds	r1, #1
    while (blockbytes < end) {
 8003294:	42a1      	cmp	r1, r4
 8003296:	d235      	bcs.n	8003304 <lorallr_getblock+0x86>
        if (*blockbytes & 0x80) *bitptr = 0 - *bitptr;
 8003298:	f991 2000 	ldrsb.w	r2, [r1]
 800329c:	2a00      	cmp	r2, #0
 800329e:	dbf3      	blt.n	8003288 <lorallr_getblock+0xa>
        if (*blockbytes & 0x40) *bitptr = 0 - *bitptr;
 80032a0:	780a      	ldrb	r2, [r1, #0]
 80032a2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80032a6:	d002      	beq.n	80032ae <lorallr_getblock+0x30>
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	4252      	negs	r2, r2
 80032ac:	605a      	str	r2, [r3, #4]
        if (*blockbytes & 0x20) *bitptr = 0 - *bitptr;
 80032ae:	780a      	ldrb	r2, [r1, #0]
 80032b0:	f012 0f20 	tst.w	r2, #32
 80032b4:	d002      	beq.n	80032bc <lorallr_getblock+0x3e>
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	4252      	negs	r2, r2
 80032ba:	609a      	str	r2, [r3, #8]
        if (*blockbytes & 0x10) *bitptr = 0 - *bitptr;
 80032bc:	780a      	ldrb	r2, [r1, #0]
 80032be:	f012 0f10 	tst.w	r2, #16
 80032c2:	d002      	beq.n	80032ca <lorallr_getblock+0x4c>
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	4252      	negs	r2, r2
 80032c8:	60da      	str	r2, [r3, #12]
        if (*blockbytes & 0x08) *bitptr = 0 - *bitptr;
 80032ca:	780a      	ldrb	r2, [r1, #0]
 80032cc:	f012 0f08 	tst.w	r2, #8
 80032d0:	d002      	beq.n	80032d8 <lorallr_getblock+0x5a>
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	4252      	negs	r2, r2
 80032d6:	611a      	str	r2, [r3, #16]
        if (*blockbytes & 0x04) *bitptr = 0 - *bitptr;
 80032d8:	780a      	ldrb	r2, [r1, #0]
 80032da:	f012 0f04 	tst.w	r2, #4
 80032de:	d002      	beq.n	80032e6 <lorallr_getblock+0x68>
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	4252      	negs	r2, r2
 80032e4:	615a      	str	r2, [r3, #20]
        if (*blockbytes & 0x02) *bitptr = 0 - *bitptr;
 80032e6:	780a      	ldrb	r2, [r1, #0]
 80032e8:	f012 0f02 	tst.w	r2, #2
 80032ec:	d002      	beq.n	80032f4 <lorallr_getblock+0x76>
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	4252      	negs	r2, r2
 80032f2:	619a      	str	r2, [r3, #24]
        if (*blockbytes & 0x01) *bitptr = 0 - *bitptr;
 80032f4:	780a      	ldrb	r2, [r1, #0]
 80032f6:	f012 0f01 	tst.w	r2, #1
 80032fa:	d0c9      	beq.n	8003290 <lorallr_getblock+0x12>
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	4252      	negs	r2, r2
 8003300:	61da      	str	r2, [r3, #28]
 8003302:	e7c5      	b.n	8003290 <lorallr_getblock+0x12>
    }

    return obj->buf;
}
 8003304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003308:	4770      	bx	lr

0800330a <lorallr_popblock>:


void lorallr_popblock(lorallr_t* obj) {
    ot_int cpy_units;

    cpy_units = ((void*)obj->bufput - (void*)&obj->buf[128]) / 4;
 800330a:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 800330e:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8003312:	1a52      	subs	r2, r2, r1
 8003314:	d414      	bmi.n	8003340 <lorallr_popblock+0x36>
 8003316:	1092      	asrs	r2, r2, #2
 8003318:	b213      	sxth	r3, r2
    if (cpy_units > 0) {
 800331a:	2b00      	cmp	r3, #0
 800331c:	dd12      	ble.n	8003344 <lorallr_popblock+0x3a>
void lorallr_popblock(lorallr_t* obj) {
 800331e:	b510      	push	{r4, lr}
 8003320:	4604      	mov	r4, r0
        ot_memcpy_4(obj->buf, &obj->buf[128], cpy_units);
 8003322:	b292      	uxth	r2, r2
 8003324:	f004 f95a 	bl	80075dc <ot_memcpy_4>
        obj->bufput        -= 128;
 8003328:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800332c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003330:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
        obj->buffer_bits   -= 128;
 8003334:	f8b4 3404 	ldrh.w	r3, [r4, #1028]	; 0x404
 8003338:	3b80      	subs	r3, #128	; 0x80
 800333a:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
    }
}
 800333e:	bd10      	pop	{r4, pc}
    cpy_units = ((void*)obj->bufput - (void*)&obj->buf[128]) / 4;
 8003340:	3203      	adds	r2, #3
 8003342:	e7e8      	b.n	8003316 <lorallr_popblock+0xc>
 8003344:	4770      	bx	lr
	...

08003348 <bgcrc8_block>:



ot_u8 bgcrc8_block(ot_u8* block_addr) {
    ot_int  cnt = 5;
    ot_u8   reg = 0xFF;
 8003348:	22ff      	movs	r2, #255	; 0xff
    ot_int  cnt = 5;
 800334a:	2305      	movs	r3, #5
    
    while (--cnt >= 0) {
 800334c:	3b01      	subs	r3, #1
 800334e:	b21b      	sxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	db0d      	blt.n	8003370 <bgcrc8_block+0x28>
ot_u8 bgcrc8_block(ot_u8* block_addr) {
 8003354:	b410      	push	{r4}
        reg = *block_addr ^ crc8tab[reg];
 8003356:	f810 1b01 	ldrb.w	r1, [r0], #1
 800335a:	4c06      	ldr	r4, [pc, #24]	; (8003374 <bgcrc8_block+0x2c>)
 800335c:	5ca2      	ldrb	r2, [r4, r2]
 800335e:	404a      	eors	r2, r1
    while (--cnt >= 0) {
 8003360:	3b01      	subs	r3, #1
 8003362:	b21b      	sxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	daf6      	bge.n	8003356 <bgcrc8_block+0xe>
        block_addr++;
    }
    return reg;
}
 8003368:	4610      	mov	r0, r2
 800336a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	4610      	mov	r0, r2
 8003372:	4770      	bx	lr
 8003374:	20000014 	.word	0x20000014

08003378 <bgcrc8_check>:

ot_u8 bgcrc8_check(ot_u8* block_addr) {
 8003378:	b510      	push	{r4, lr}
    return (block_addr[5] ^ bgcrc8_block(block_addr));
 800337a:	7944      	ldrb	r4, [r0, #5]
 800337c:	f7ff ffe4 	bl	8003348 <bgcrc8_block>
 8003380:	4060      	eors	r0, r4
}
 8003382:	b2c0      	uxtb	r0, r0
 8003384:	bd10      	pop	{r4, pc}

08003386 <bgcrc8_put>:

void bgcrc8_put(ot_u8* block_addr) {
 8003386:	b510      	push	{r4, lr}
 8003388:	4604      	mov	r4, r0
    block_addr[5] = bgcrc8_block(block_addr);
 800338a:	f7ff ffdd 	bl	8003348 <bgcrc8_block>
 800338e:	7160      	strb	r0, [r4, #5]
}
 8003390:	bd10      	pop	{r4, pc}
	...

08003394 <otapi_new_telegram>:
#endif
}


///@todo this function is experimental, and it is subject to change
ot_u16 otapi_new_telegram(ot_u32 token, ot_u8 data_id, const ot_u8* data) {
 8003394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003398:	4680      	mov	r8, r0
 800339a:	460f      	mov	r7, r1
 800339c:	4616      	mov	r6, r2
///         +---------+--------+-------+-------+---------+--------+
/// </PRE>
// ========================================================================
/// Set the header if the session is valid.  Also conditionally write the header
/// depending on the address type (a parameter).
    if (session_notempty()) {
 800339e:	f001 fc35 	bl	8004c0c <session_notempty>
 80033a2:	b910      	cbnz	r0, 80033aa <otapi_new_telegram+0x16>
        q_writebyte(&txq, data_id);
        q_writestring(&txq, data, 7);

        return 1;
    }
    return 0;
 80033a4:	2000      	movs	r0, #0
}
 80033a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        s_active = session_top();
 80033aa:	f001 fbf9 	bl	8004ba0 <session_top>
 80033ae:	4681      	mov	r9, r0
        dll_set_defaults(s_active);
 80033b0:	f000 fdd4 	bl	8003f5c <dll_set_defaults>
        dll.comm.rx_timeout = 0;
 80033b4:	2500      	movs	r5, #0
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <otapi_new_telegram+0x78>)
 80033b8:	629d      	str	r5, [r3, #40]	; 0x28
        q_empty(&txq);
 80033ba:	4c15      	ldr	r4, [pc, #84]	; (8003410 <otapi_new_telegram+0x7c>)
 80033bc:	4620      	mov	r0, r4
 80033be:	f002 fd3a 	bl	8005e36 <q_empty>
        txq.getcursor += 2;         // Bypass unused length and Link CTL bytes
 80033c2:	6863      	ldr	r3, [r4, #4]
 80033c4:	3302      	adds	r3, #2
 80033c6:	6063      	str	r3, [r4, #4]
        q_writebyte(&txq, 14);      // Dummy Length value (not actually sent)
 80033c8:	210e      	movs	r1, #14
 80033ca:	4620      	mov	r0, r4
 80033cc:	f002 fd5a 	bl	8005e84 <q_writebyte>
        q_writebyte(&txq, 0);       // Dummy Link-Control (not actually sent)
 80033d0:	4629      	mov	r1, r5
 80033d2:	4620      	mov	r0, r4
 80033d4:	f002 fd56 	bl	8005e84 <q_writebyte>
        q_writebyte(&txq, 0);                           // Dummy TX-EIRP (updated by RF driver)
 80033d8:	4629      	mov	r1, r5
 80033da:	4620      	mov	r0, r4
 80033dc:	f002 fd52 	bl	8005e84 <q_writebyte>
        q_writebyte(&txq, (s_active->subnet | 0x01));   // This byte is two nibbles: Subnet specifier and Page ID (1)
 80033e0:	f899 100a 	ldrb.w	r1, [r9, #10]
 80033e4:	f041 0101 	orr.w	r1, r1, #1
 80033e8:	4620      	mov	r0, r4
 80033ea:	f002 fd4b 	bl	8005e84 <q_writebyte>
        q_writelong(&txq, token);                       // Application Token (32 bits)
 80033ee:	4641      	mov	r1, r8
 80033f0:	4620      	mov	r0, r4
 80033f2:	f002 fd62 	bl	8005eba <q_writelong>
        q_writebyte(&txq, data_id);
 80033f6:	4639      	mov	r1, r7
 80033f8:	4620      	mov	r0, r4
 80033fa:	f002 fd43 	bl	8005e84 <q_writebyte>
        q_writestring(&txq, data, 7);
 80033fe:	2207      	movs	r2, #7
 8003400:	4631      	mov	r1, r6
 8003402:	4620      	mov	r0, r4
 8003404:	f002 fdb4 	bl	8005f70 <q_writestring>
        return 1;
 8003408:	2001      	movs	r0, #1
 800340a:	e7cc      	b.n	80033a6 <otapi_new_telegram+0x12>
 800340c:	20002654 	.word	0x20002654
 8003410:	20002d74 	.word	0x20002d74

08003414 <otapi_open_request>:



ot_u16 otapi_open_request(addr_type addr, routing_tmpl* routing) {
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	4604      	mov	r4, r0
 8003418:	460d      	mov	r5, r1
/// Set the header if the session is valid.  Also conditionally write the header
/// depending on the address type (a parameter).  
    if (session_notempty()) {
 800341a:	f001 fbf7 	bl	8004c0c <session_notempty>
 800341e:	b908      	cbnz	r0, 8003424 <otapi_open_request+0x10>

        // Load the header
        m2np_header(s_active, (ot_u8)addr, M2FI_FRDIALOG);
        return 1;
    }
    return 0;
 8003420:	2000      	movs	r0, #0
}
 8003422:	bd70      	pop	{r4, r5, r6, pc}
        s_active = session_top();
 8003424:	f001 fbbc 	bl	8004ba0 <session_top>
 8003428:	4606      	mov	r6, r0
        dll_set_defaults(s_active);
 800342a:	f000 fd97 	bl	8003f5c <dll_set_defaults>
        if (addr & M2FI_UCAST) {
 800342e:	f014 0f02 	tst.w	r4, #2
 8003432:	d106      	bne.n	8003442 <otapi_open_request+0x2e>
        m2np_header(s_active, (ot_u8)addr, M2FI_FRDIALOG);
 8003434:	2200      	movs	r2, #0
 8003436:	4621      	mov	r1, r4
 8003438:	4630      	mov	r0, r6
 800343a:	f000 ffbf 	bl	80043bc <m2np_header>
        return 1;
 800343e:	2001      	movs	r0, #1
 8003440:	e7ef      	b.n	8003422 <otapi_open_request+0xe>
            ot_memcpy((ot_u8*)&m2np.rt, (ot_u8*)routing, sizeof(routing_tmpl));
 8003442:	221c      	movs	r2, #28
 8003444:	4629      	mov	r1, r5
 8003446:	4802      	ldr	r0, [pc, #8]	; (8003450 <otapi_open_request+0x3c>)
 8003448:	f004 f8c2 	bl	80075d0 <ot_memcpy>
 800344c:	e7f2      	b.n	8003434 <otapi_open_request+0x20>
 800344e:	bf00      	nop
 8003450:	200026a4 	.word	0x200026a4

08003454 <otapi_close_request>:


ot_u16 otapi_close_request() {
 8003454:	b508      	push	{r3, lr}
/// Set the footer if the session is valid
    if (session_notempty()) {
 8003456:	f001 fbd9 	bl	8004c0c <session_notempty>
 800345a:	b908      	cbnz	r0, 8003460 <otapi_close_request+0xc>
        m2np_footer( /* session_top() */ );
        return 1;
    }
    return 0;
 800345c:	2000      	movs	r0, #0
}
 800345e:	bd08      	pop	{r3, pc}
        m2np_footer( /* session_top() */ );
 8003460:	f001 f87e 	bl	8004560 <m2np_footer>
        return 1;
 8003464:	2001      	movs	r0, #1
 8003466:	e7fa      	b.n	800345e <otapi_close_request+0xa>

08003468 <otapi_start_dialog>:
//    if (radio.state != RADIO_Idle) {
//    	rm2_kill();
//    }
//#   endif

    if (timeout != 0) {
 8003468:	b108      	cbz	r0, 800346e <otapi_start_dialog+0x6>
        dll.comm.tc = TI2CLK(timeout);
 800346a:	4a02      	ldr	r2, [pc, #8]	; (8003474 <otapi_start_dialog+0xc>)
 800346c:	6210      	str	r0, [r2, #32]
//    sys.task_RFA.event = 0;
//    sys_preempt(&sys.task_RFA, 0);
//#   endif
    
    return 1;
}
 800346e:	2001      	movs	r0, #1
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20002654 	.word	0x20002654

08003478 <otapi_put_command_tmpl>:




#ifndef EXTF_otapi_put_command_tmpl
ot_u16 otapi_put_command_tmpl(ot_u8* status, command_tmpl* command) {    
 8003478:	b538      	push	{r3, r4, r5, lr}
    /// Check Opcodes to make sure this one is supported
    /// @todo base this on app_config.h settings.  Currently this is rudimentary
    ///       and hard-coded.  It just filters out Datastream and non-existing codes
    if (command->opcode > 15) {
 800347a:	784b      	ldrb	r3, [r1, #1]
 800347c:	2b0f      	cmp	r3, #15
 800347e:	d823      	bhi.n	80034c8 <otapi_put_command_tmpl+0x50>
        // command extension, not present at the moment
        *status = 0;
        return 0;
    }
    
    dll.comm.csmaca_params |= command->type & M2_CSMACA_A2P;
 8003480:	f991 3000 	ldrsb.w	r3, [r1]
 8003484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003488:	4a18      	ldr	r2, [pc, #96]	; (80034ec <otapi_put_command_tmpl+0x74>)
 800348a:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
 800348e:	4323      	orrs	r3, r4
 8003490:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    m2qp.cmd.code           = command->type | command->opcode;
 8003494:	780b      	ldrb	r3, [r1, #0]
 8003496:	784a      	ldrb	r2, [r1, #1]
 8003498:	4313      	orrs	r3, r2
    m2qp.cmd.code          |= (command->extension != 0) << 7;
 800349a:	b25b      	sxtb	r3, r3
 800349c:	788a      	ldrb	r2, [r1, #2]
 800349e:	b1ba      	cbz	r2, 80034d0 <otapi_put_command_tmpl+0x58>
 80034a0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80034a4:	4605      	mov	r5, r0
 80034a6:	4319      	orrs	r1, r3
 80034a8:	b2c9      	uxtb	r1, r1
 80034aa:	4c11      	ldr	r4, [pc, #68]	; (80034f0 <otapi_put_command_tmpl+0x78>)
 80034ac:	7021      	strb	r1, [r4, #0]
    m2qp.cmd.ext            = command->extension;
 80034ae:	7062      	strb	r2, [r4, #1]
    q_writebyte(&txq, m2qp.cmd.code);
 80034b0:	4810      	ldr	r0, [pc, #64]	; (80034f4 <otapi_put_command_tmpl+0x7c>)
 80034b2:	f002 fce7 	bl	8005e84 <q_writebyte>
    
    if (m2qp.cmd.ext != 0) {
 80034b6:	7861      	ldrb	r1, [r4, #1]
 80034b8:	b961      	cbnz	r1, 80034d4 <otapi_put_command_tmpl+0x5c>
        if (m2qp.cmd.ext & 2) {
            dll.comm.rx_timeout = 0;
        }
    }
    
    *status = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	702b      	strb	r3, [r5, #0]
    return q_length(&txq);
 80034be:	480d      	ldr	r0, [pc, #52]	; (80034f4 <otapi_put_command_tmpl+0x7c>)
 80034c0:	f002 fc93 	bl	8005dea <q_length>
 80034c4:	b280      	uxth	r0, r0
}
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
        *status = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	7003      	strb	r3, [r0, #0]
        return 0;
 80034cc:	4618      	mov	r0, r3
 80034ce:	e7fa      	b.n	80034c6 <otapi_put_command_tmpl+0x4e>
    m2qp.cmd.code          |= (command->extension != 0) << 7;
 80034d0:	2100      	movs	r1, #0
 80034d2:	e7e7      	b.n	80034a4 <otapi_put_command_tmpl+0x2c>
        q_writebyte(&txq, m2qp.cmd.ext);
 80034d4:	4807      	ldr	r0, [pc, #28]	; (80034f4 <otapi_put_command_tmpl+0x7c>)
 80034d6:	f002 fcd5 	bl	8005e84 <q_writebyte>
        if (m2qp.cmd.ext & 2) {
 80034da:	7863      	ldrb	r3, [r4, #1]
 80034dc:	f013 0f02 	tst.w	r3, #2
 80034e0:	d0eb      	beq.n	80034ba <otapi_put_command_tmpl+0x42>
            dll.comm.rx_timeout = 0;
 80034e2:	4b02      	ldr	r3, [pc, #8]	; (80034ec <otapi_put_command_tmpl+0x74>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
 80034e8:	e7e7      	b.n	80034ba <otapi_put_command_tmpl+0x42>
 80034ea:	bf00      	nop
 80034ec:	20002654 	.word	0x20002654
 80034f0:	2000270c 	.word	0x2000270c
 80034f4:	20002d74 	.word	0x20002d74

080034f8 <otapi_put_dialog_tmpl>:
#endif


#ifndef EXTF_otapi_put_dialog_tmpl
ot_u16 otapi_put_dialog_tmpl(ot_u8* status, dialog_tmpl* dialog) {
 80034f8:	b538      	push	{r3, r4, r5, lr}
 80034fa:	4605      	mov	r5, r0
    if (dialog == NULL) {
 80034fc:	b1f1      	cbz	r1, 800353c <otapi_put_dialog_tmpl+0x44>
 80034fe:	460c      	mov	r4, r1
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
        q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
    }
    else {
        // Place dialog with timeout
        dll.comm.rx_timeout = otutils_calc_timeout(dialog->timeout);
 8003500:	7808      	ldrb	r0, [r1, #0]
 8003502:	f002 fd7a 	bl	8005ffa <otutils_calc_timeout>
 8003506:	4b17      	ldr	r3, [pc, #92]	; (8003564 <otapi_put_dialog_tmpl+0x6c>)
 8003508:	6298      	str	r0, [r3, #40]	; 0x28
        dialog->timeout    |= (dialog->channels != 0) << 7;     // 0 or 0x80
 800350a:	f994 1000 	ldrsb.w	r1, [r4]
 800350e:	7863      	ldrb	r3, [r4, #1]
 8003510:	b333      	cbz	r3, 8003560 <otapi_put_dialog_tmpl+0x68>
 8003512:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8003516:	4319      	orrs	r1, r3
 8003518:	b2c9      	uxtb	r1, r1
 800351a:	7021      	strb	r1, [r4, #0]
        q_writebyte(&txq, dialog->timeout);
 800351c:	4812      	ldr	r0, [pc, #72]	; (8003568 <otapi_put_dialog_tmpl+0x70>)
 800351e:	f002 fcb1 	bl	8005e84 <q_writebyte>
    
        // Write response list
        if (dialog->channels != 0) {
 8003522:	7863      	ldrb	r3, [r4, #1]
 8003524:	b1ab      	cbz	r3, 8003552 <otapi_put_dialog_tmpl+0x5a>
            dll.comm.rx_channels = dialog->channels;
 8003526:	4a0f      	ldr	r2, [pc, #60]	; (8003564 <otapi_put_dialog_tmpl+0x6c>)
 8003528:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            dll.comm.rx_chanlist = dialog->chanlist;
 800352c:	6863      	ldr	r3, [r4, #4]
 800352e:	6393      	str	r3, [r2, #56]	; 0x38
            q_writestring(&txq, dialog->chanlist, dialog->channels);
 8003530:	7862      	ldrb	r2, [r4, #1]
 8003532:	6861      	ldr	r1, [r4, #4]
 8003534:	480c      	ldr	r0, [pc, #48]	; (8003568 <otapi_put_dialog_tmpl+0x70>)
 8003536:	f002 fd1b 	bl	8005f70 <q_writestring>
 800353a:	e00a      	b.n	8003552 <otapi_put_dialog_tmpl+0x5a>
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <otapi_put_dialog_tmpl+0x74>)
 800353e:	785b      	ldrb	r3, [r3, #1]
 8003540:	f013 0f02 	tst.w	r3, #2
 8003544:	d100      	bne.n	8003548 <otapi_put_dialog_tmpl+0x50>
 8003546:	210f      	movs	r1, #15
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <otapi_put_dialog_tmpl+0x6c>)
 800354a:	6299      	str	r1, [r3, #40]	; 0x28
        q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
 800354c:	4806      	ldr	r0, [pc, #24]	; (8003568 <otapi_put_dialog_tmpl+0x70>)
 800354e:	f002 fc99 	bl	8005e84 <q_writebyte>
        }
    }

    *status = 1;
 8003552:	2301      	movs	r3, #1
 8003554:	702b      	strb	r3, [r5, #0]
    return q_length(&txq);
 8003556:	4804      	ldr	r0, [pc, #16]	; (8003568 <otapi_put_dialog_tmpl+0x70>)
 8003558:	f002 fc47 	bl	8005dea <q_length>
}
 800355c:	b280      	uxth	r0, r0
 800355e:	bd38      	pop	{r3, r4, r5, pc}
        dialog->timeout    |= (dialog->channels != 0) << 7;     // 0 or 0x80
 8003560:	2300      	movs	r3, #0
 8003562:	e7d8      	b.n	8003516 <otapi_put_dialog_tmpl+0x1e>
 8003564:	20002654 	.word	0x20002654
 8003568:	20002d74 	.word	0x20002d74
 800356c:	2000270c 	.word	0x2000270c

08003570 <otapi_put_query_tmpl>:

#ifndef EXTF_otapi_put_query_tmpl
ot_u16 otapi_put_query_tmpl(ot_u8* status, query_tmpl* query) {
    /// Test for Anycast and Multicast addressing (query needs one of these)    

    if ((m2qp.cmd.code & M2TT_MASK) > M2TT_REQ_UB) {
 8003570:	4b16      	ldr	r3, [pc, #88]	; (80035cc <otapi_put_query_tmpl+0x5c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003578:	2b20      	cmp	r3, #32
 800357a:	d803      	bhi.n	8003584 <otapi_put_query_tmpl+0x14>
        q_writestring(&txq, query->value, query->length);
    
        *status = 1;
        return q_length(&txq);
    }
    *status = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	7003      	strb	r3, [r0, #0]
    return 0;
 8003580:	4618      	mov	r0, r3
}
 8003582:	4770      	bx	lr
ot_u16 otapi_put_query_tmpl(ot_u8* status, query_tmpl* query) {
 8003584:	b570      	push	{r4, r5, r6, lr}
 8003586:	460c      	mov	r4, r1
 8003588:	4605      	mov	r5, r0
        q_writebyte(&txq, query->length);
 800358a:	4e11      	ldr	r6, [pc, #68]	; (80035d0 <otapi_put_query_tmpl+0x60>)
 800358c:	7849      	ldrb	r1, [r1, #1]
 800358e:	4630      	mov	r0, r6
 8003590:	f002 fc78 	bl	8005e84 <q_writebyte>
        q_writebyte(&txq, query->code);
 8003594:	7821      	ldrb	r1, [r4, #0]
 8003596:	4630      	mov	r0, r6
 8003598:	f002 fc74 	bl	8005e84 <q_writebyte>
        if (query->code & 0x80) {
 800359c:	f994 3000 	ldrsb.w	r3, [r4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	db0c      	blt.n	80035be <otapi_put_query_tmpl+0x4e>
        q_writestring(&txq, query->value, query->length);
 80035a4:	4e0a      	ldr	r6, [pc, #40]	; (80035d0 <otapi_put_query_tmpl+0x60>)
 80035a6:	7862      	ldrb	r2, [r4, #1]
 80035a8:	68a1      	ldr	r1, [r4, #8]
 80035aa:	4630      	mov	r0, r6
 80035ac:	f002 fce0 	bl	8005f70 <q_writestring>
        *status = 1;
 80035b0:	2301      	movs	r3, #1
 80035b2:	702b      	strb	r3, [r5, #0]
        return q_length(&txq);
 80035b4:	4630      	mov	r0, r6
 80035b6:	f002 fc18 	bl	8005dea <q_length>
 80035ba:	b280      	uxth	r0, r0
}
 80035bc:	bd70      	pop	{r4, r5, r6, pc}
            q_writestring(&txq, query->mask, query->length);
 80035be:	7862      	ldrb	r2, [r4, #1]
 80035c0:	6861      	ldr	r1, [r4, #4]
 80035c2:	4630      	mov	r0, r6
 80035c4:	f002 fcd4 	bl	8005f70 <q_writestring>
 80035c8:	e7ec      	b.n	80035a4 <otapi_put_query_tmpl+0x34>
 80035ca:	bf00      	nop
 80035cc:	2000270c 	.word	0x2000270c
 80035d0:	20002d74 	.word	0x20002d74

080035d4 <sub_put_isf_offset>:
}
#endif


#ifndef EXTF_otapi_put_isf_offset
void sub_put_isf_offset(ot_u8 is_series, ot_u16 offset) {
 80035d4:	b508      	push	{r3, lr}
    if (is_series) {
 80035d6:	b920      	cbnz	r0, 80035e2 <sub_put_isf_offset+0xe>
        q_writeshort(&txq, offset);
    }
    else {
        q_writebyte(&txq, (ot_u8)offset);
 80035d8:	b2c9      	uxtb	r1, r1
 80035da:	4804      	ldr	r0, [pc, #16]	; (80035ec <sub_put_isf_offset+0x18>)
 80035dc:	f002 fc52 	bl	8005e84 <q_writebyte>
    }
}
 80035e0:	bd08      	pop	{r3, pc}
        q_writeshort(&txq, offset);
 80035e2:	4802      	ldr	r0, [pc, #8]	; (80035ec <sub_put_isf_offset+0x18>)
 80035e4:	f002 fc53 	bl	8005e8e <q_writeshort>
 80035e8:	e7fa      	b.n	80035e0 <sub_put_isf_offset+0xc>
 80035ea:	bf00      	nop
 80035ec:	20002d74 	.word	0x20002d74

080035f0 <otapi_put_isf_comp>:
#endif


#ifndef EXTF_otapi_put_isf_comp
ot_u16 otapi_put_isf_comp(ot_u8* status, isfcomp_tmpl* isfcomp) {
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	4606      	mov	r6, r0
 80035f4:	460c      	mov	r4, r1
    q_writebyte(&txq, isfcomp->isf_id);
 80035f6:	4d09      	ldr	r5, [pc, #36]	; (800361c <otapi_put_isf_comp+0x2c>)
 80035f8:	7849      	ldrb	r1, [r1, #1]
 80035fa:	4628      	mov	r0, r5
 80035fc:	f002 fc42 	bl	8005e84 <q_writebyte>
    sub_put_isf_offset(isfcomp->is_series, isfcomp->offset);
 8003600:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8003604:	b289      	uxth	r1, r1
 8003606:	7820      	ldrb	r0, [r4, #0]
 8003608:	f7ff ffe4 	bl	80035d4 <sub_put_isf_offset>
    
    *status = 1;
 800360c:	2301      	movs	r3, #1
 800360e:	7033      	strb	r3, [r6, #0]
    return q_length(&txq);
 8003610:	4628      	mov	r0, r5
 8003612:	f002 fbea 	bl	8005dea <q_length>
}
 8003616:	b280      	uxth	r0, r0
 8003618:	bd70      	pop	{r4, r5, r6, pc}
 800361a:	bf00      	nop
 800361c:	20002d74 	.word	0x20002d74

08003620 <otapi_put_isf_call>:
#endif


#ifndef EXTF_otapi_put_isf_call
ot_u16 otapi_put_isf_call(ot_u8* status, isfcall_tmpl* isfcall) {
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	4606      	mov	r6, r0
 8003624:	460c      	mov	r4, r1
    q_writebyte(&txq, isfcall->max_return);
 8003626:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800362a:	4d0b      	ldr	r5, [pc, #44]	; (8003658 <otapi_put_isf_call+0x38>)
 800362c:	b2c9      	uxtb	r1, r1
 800362e:	4628      	mov	r0, r5
 8003630:	f002 fc28 	bl	8005e84 <q_writebyte>
    q_writebyte(&txq, isfcall->isf_id);
 8003634:	7861      	ldrb	r1, [r4, #1]
 8003636:	4628      	mov	r0, r5
 8003638:	f002 fc24 	bl	8005e84 <q_writebyte>
    sub_put_isf_offset(isfcall->is_series, isfcall->offset);
 800363c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8003640:	b289      	uxth	r1, r1
 8003642:	7820      	ldrb	r0, [r4, #0]
 8003644:	f7ff ffc6 	bl	80035d4 <sub_put_isf_offset>
    
    *status = 1;
 8003648:	2301      	movs	r3, #1
 800364a:	7033      	strb	r3, [r6, #0]
    return q_length(&txq);
 800364c:	4628      	mov	r0, r5
 800364e:	f002 fbcc 	bl	8005dea <q_length>
}
 8003652:	b280      	uxth	r0, r0
 8003654:	bd70      	pop	{r4, r5, r6, pc}
 8003656:	bf00      	nop
 8003658:	20002d74 	.word	0x20002d74

0800365c <otapi_put_udp_tmpl>:
}
#endif


#ifndef EXTF_otapi_put_udp_tmpl
ot_u16 otapi_put_udp_tmpl(ot_u8* status, udp_tmpl* udp) {
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	4607      	mov	r7, r0
 8003660:	460d      	mov	r5, r1
    ot_u16 space;
    vlFILE* fp = NULL;
    
    space = q_writespace(&txq);
 8003662:	4823      	ldr	r0, [pc, #140]	; (80036f0 <otapi_put_udp_tmpl+0x94>)
 8003664:	f002 fbcb 	bl	8005dfe <q_writespace>
 8003668:	b284      	uxth	r4, r0
    ///      detect boundaries across the packet rather than simply across the
    ///      frame.  It will probably require a network-layer function to 
    ///      determine the overhead when supplied payload length.
#   else
        
        if (udp->data == NULL) {
 800366a:	686b      	ldr	r3, [r5, #4]
 800366c:	b17b      	cbz	r3, 800368e <otapi_put_udp_tmpl+0x32>
    vlFILE* fp = NULL;
 800366e:	2600      	movs	r6, #0
        	///@todo add a user to UDP type for access control
        	fp              = ISF_open(udp->src_port, VL_ACCESS_R, AUTH_GUEST );
        	udp->data_length= (fp != NULL) ? fp->length : 0;
        }
        
        space -= 4;
 8003670:	3c04      	subs	r4, #4
 8003672:	b2a4      	uxth	r4, r4
        if (space < udp->data_length) {
 8003674:	882b      	ldrh	r3, [r5, #0]
 8003676:	42a3      	cmp	r3, r4
 8003678:	d915      	bls.n	80036a6 <otapi_put_udp_tmpl+0x4a>
            *status = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	703b      	strb	r3, [r7, #0]
            else {
            	q_writestring(&txq, udp->data, udp->data_length);
            }
        }
        
        vl_close(fp);
 800367e:	4630      	mov	r0, r6
 8003680:	f002 ff46 	bl	8006510 <vl_close>
#   endif

    return q_length(&txq);
 8003684:	481a      	ldr	r0, [pc, #104]	; (80036f0 <otapi_put_udp_tmpl+0x94>)
 8003686:	f002 fbb0 	bl	8005dea <q_length>
}
 800368a:	b280      	uxth	r0, r0
 800368c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	fp              = ISF_open(udp->src_port, VL_ACCESS_R, AUTH_GUEST );
 800368e:	4a19      	ldr	r2, [pc, #100]	; (80036f4 <otapi_put_udp_tmpl+0x98>)
 8003690:	2124      	movs	r1, #36	; 0x24
 8003692:	78e8      	ldrb	r0, [r5, #3]
 8003694:	f002 ff84 	bl	80065a0 <ISF_open>
        	udp->data_length= (fp != NULL) ? fp->length : 0;
 8003698:	4606      	mov	r6, r0
 800369a:	b110      	cbz	r0, 80036a2 <otapi_put_udp_tmpl+0x46>
 800369c:	8903      	ldrh	r3, [r0, #8]
 800369e:	802b      	strh	r3, [r5, #0]
 80036a0:	e7e6      	b.n	8003670 <otapi_put_udp_tmpl+0x14>
 80036a2:	2300      	movs	r3, #0
 80036a4:	e7fb      	b.n	800369e <otapi_put_udp_tmpl+0x42>
            *status = 1;
 80036a6:	2301      	movs	r3, #1
 80036a8:	703b      	strb	r3, [r7, #0]
            q_writebyte(&txq, (ALP_FLAG_MB | ALP_FLAG_ME));
 80036aa:	4c11      	ldr	r4, [pc, #68]	; (80036f0 <otapi_put_udp_tmpl+0x94>)
 80036ac:	21c0      	movs	r1, #192	; 0xc0
 80036ae:	4620      	mov	r0, r4
 80036b0:	f002 fbe8 	bl	8005e84 <q_writebyte>
            q_writebyte(&txq, (ot_u8)udp->data_length);
 80036b4:	7829      	ldrb	r1, [r5, #0]
 80036b6:	4620      	mov	r0, r4
 80036b8:	f002 fbe4 	bl	8005e84 <q_writebyte>
            q_writebyte(&txq, udp->dst_port);
 80036bc:	78a9      	ldrb	r1, [r5, #2]
 80036be:	4620      	mov	r0, r4
 80036c0:	f002 fbe0 	bl	8005e84 <q_writebyte>
            q_writebyte(&txq, udp->src_port);
 80036c4:	78e9      	ldrb	r1, [r5, #3]
 80036c6:	4620      	mov	r0, r4
 80036c8:	f002 fbdc 	bl	8005e84 <q_writebyte>
            if (udp->data == NULL) {
 80036cc:	6869      	ldr	r1, [r5, #4]
 80036ce:	b129      	cbz	r1, 80036dc <otapi_put_udp_tmpl+0x80>
            	q_writestring(&txq, udp->data, udp->data_length);
 80036d0:	f9b5 2000 	ldrsh.w	r2, [r5]
 80036d4:	4806      	ldr	r0, [pc, #24]	; (80036f0 <otapi_put_udp_tmpl+0x94>)
 80036d6:	f002 fc4b 	bl	8005f70 <q_writestring>
 80036da:	e7d0      	b.n	800367e <otapi_put_udp_tmpl+0x22>
                txq.putcursor += vl_load(fp, udp->data_length, txq.putcursor);
 80036dc:	68a2      	ldr	r2, [r4, #8]
 80036de:	8829      	ldrh	r1, [r5, #0]
 80036e0:	4630      	mov	r0, r6
 80036e2:	f002 feb8 	bl	8006456 <vl_load>
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	4418      	add	r0, r3
 80036ea:	60a0      	str	r0, [r4, #8]
 80036ec:	e7c7      	b.n	800367e <otapi_put_udp_tmpl+0x22>
 80036ee:	bf00      	nop
 80036f0:	20002d74 	.word	0x20002d74
 80036f4:	20002744 	.word	0x20002744

080036f8 <dll_response_applet>:
OT_WEAK void dll_response_applet(m2session* active) {
/// If this is a response transmission of a session with "Listen" active, it
/// means the contention period (Tc) is followed immediately with a subsequent
/// request.  We must not overlap that request with the tail-end of our own
/// response.  Therefore, we subtract from Tc the duration of this response.
    if (active->flags & M2_FLAG_LISTEN) {
 80036f8:	f990 300b 	ldrsb.w	r3, [r0, #11]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	db00      	blt.n	8003702 <dll_response_applet+0xa>
 8003700:	4770      	bx	lr
OT_WEAK void dll_response_applet(m2session* active) {
 8003702:	b510      	push	{r4, lr}
        ot_u8 substate = active->netstate & M2_NETSTATE_TMASK;
 8003704:	79c3      	ldrb	r3, [r0, #7]
 8003706:	f003 0370 	and.w	r3, r3, #112	; 0x70

        if (substate == M2_NETSTATE_RESPTX) {
 800370a:	2b10      	cmp	r3, #16
 800370c:	d002      	beq.n	8003714 <dll_response_applet+0x1c>
            dll.comm.tc -= rm2_pkt_duration(&txq);  //TI2CLK(rm2_pkt_duration(&txq));
        }
        else if (substate == M2_NETSTATE_REQRX) {
 800370e:	2b20      	cmp	r3, #32
 8003710:	d008      	beq.n	8003724 <dll_response_applet+0x2c>
            sys.task_HSS.cursor     = 0;
            sys.task_HSS.nextevent  = TI2CLK(dll.comm.rx_timeout);
            dll.comm.rx_timeout     = rm2_default_tgd(active->channel);
        }
    }
}
 8003712:	bd10      	pop	{r4, pc}
            dll.comm.tc -= rm2_pkt_duration(&txq);  //TI2CLK(rm2_pkt_duration(&txq));
 8003714:	4809      	ldr	r0, [pc, #36]	; (800373c <dll_response_applet+0x44>)
 8003716:	f7fe f9e5 	bl	8001ae4 <rm2_pkt_duration>
 800371a:	4a09      	ldr	r2, [pc, #36]	; (8003740 <dll_response_applet+0x48>)
 800371c:	6a13      	ldr	r3, [r2, #32]
 800371e:	1a18      	subs	r0, r3, r0
 8003720:	6210      	str	r0, [r2, #32]
 8003722:	e7f6      	b.n	8003712 <dll_response_applet+0x1a>
            sys.task_HSS.cursor     = 0;
 8003724:	4b07      	ldr	r3, [pc, #28]	; (8003744 <dll_response_applet+0x4c>)
 8003726:	2200      	movs	r2, #0
 8003728:	755a      	strb	r2, [r3, #21]
            sys.task_HSS.nextevent  = TI2CLK(dll.comm.rx_timeout);
 800372a:	4c05      	ldr	r4, [pc, #20]	; (8003740 <dll_response_applet+0x48>)
 800372c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800372e:	619a      	str	r2, [r3, #24]
            dll.comm.rx_timeout     = rm2_default_tgd(active->channel);
 8003730:	7980      	ldrb	r0, [r0, #6]
 8003732:	f7fe f9a9 	bl	8001a88 <rm2_default_tgd>
 8003736:	62a0      	str	r0, [r4, #40]	; 0x28
}
 8003738:	e7eb      	b.n	8003712 <dll_response_applet+0x1a>
 800373a:	bf00      	nop
 800373c:	20002d74 	.word	0x20002d74
 8003740:	20002654 	.word	0x20002654
 8003744:	20002db4 	.word	0x20002db4

08003748 <sub_csma_scramble>:





void sub_csma_scramble(void) {
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/// Sort of optional: Go through the channel list and scramble the channel
/// entries randomly in order to improve band utilization, as multiple devices
/// will scramble the list differently.
    ot_u8 txchans = dll.comm.tx_channels - 1;
 800374a:	4b18      	ldr	r3, [pc, #96]	; (80037ac <sub_csma_scramble+0x64>)
 800374c:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
 8003750:	3c01      	subs	r4, #1

    if (txchans) {
 8003752:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003756:	d100      	bne.n	800375a <sub_csma_scramble+0x12>

            rot.ushort     &= ~0x0101;   //Shift each byte right 1 bit
            rot.ushort    >>= 1;
        }
    }
}
 8003758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rot.ushort = rand_prn16();
 800375a:	f003 ff73 	bl	8007644 <rand_prn16>
        for (i=0; i<txchans; i++) {
 800375e:	2300      	movs	r3, #0
 8003760:	e020      	b.n	80037a4 <sub_csma_scramble+0x5c>
            j = i + ((rot.ubyte[0] & 1) != 0);
 8003762:	f000 0201 	and.w	r2, r0, #1
 8003766:	441a      	add	r2, r3
 8003768:	b2d2      	uxtb	r2, r2
            k = txchans * ((rot.ubyte[1] & 1) != 0);
 800376a:	f3c0 2100 	ubfx	r1, r0, #8, #1
 800376e:	fb11 f104 	smulbb	r1, r1, r4
 8003772:	b2c9      	uxtb	r1, r1
            scratch                 = dll.comm.tx_chanlist[i];
 8003774:	4d0d      	ldr	r5, [pc, #52]	; (80037ac <sub_csma_scramble+0x64>)
 8003776:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8003778:	5cf7      	ldrb	r7, [r6, r3]
            dll.comm.tx_chanlist[i] = dll.comm.tx_chanlist[k];
 800377a:	f816 c001 	ldrb.w	ip, [r6, r1]
 800377e:	f806 c003 	strb.w	ip, [r6, r3]
            dll.comm.tx_chanlist[k] = scratch;
 8003782:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8003784:	5477      	strb	r7, [r6, r1]
            scratch                 = dll.comm.tx_chanlist[i];
 8003786:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8003788:	5cce      	ldrb	r6, [r1, r3]
            dll.comm.tx_chanlist[i] = dll.comm.tx_chanlist[j];
 800378a:	5c8f      	ldrb	r7, [r1, r2]
 800378c:	54cf      	strb	r7, [r1, r3]
            dll.comm.tx_chanlist[j] = scratch;
 800378e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8003790:	548e      	strb	r6, [r1, r2]
            rot.ushort     &= ~0x0101;   //Shift each byte right 1 bit
 8003792:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8003796:	f020 0001 	bic.w	r0, r0, #1
 800379a:	b280      	uxth	r0, r0
            rot.ushort    >>= 1;
 800379c:	f3c0 004f 	ubfx	r0, r0, #1, #16
        for (i=0; i<txchans; i++) {
 80037a0:	3301      	adds	r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	42a3      	cmp	r3, r4
 80037a6:	d3dc      	bcc.n	8003762 <sub_csma_scramble+0x1a>
 80037a8:	e7d6      	b.n	8003758 <sub_csma_scramble+0x10>
 80037aa:	bf00      	nop
 80037ac:	20002654 	.word	0x20002654

080037b0 <sub_rigd_newslot>:
    }
}



CLK_UNIT sub_rigd_newslot(void) {
 80037b0:	b508      	push	{r3, lr}
/// halve tc from previous value and offset a random within that duration
    dll.comm.tc >>= 1;
 80037b2:	4a08      	ldr	r2, [pc, #32]	; (80037d4 <sub_rigd_newslot+0x24>)
 80037b4:	6a13      	ldr	r3, [r2, #32]
 80037b6:	105b      	asrs	r3, r3, #1
 80037b8:	6213      	str	r3, [r2, #32]
    if (dll.comm.tc == 0)
 80037ba:	b90b      	cbnz	r3, 80037c0 <sub_rigd_newslot+0x10>
        return 0;
 80037bc:	2000      	movs	r0, #0
    
    //return (TI2CLK(rand_prn16()) % (CLK_UNIT)dll.comm.tc);
    return (rand_prn16() % (CLK_UNIT)dll.comm.tc);
}
 80037be:	bd08      	pop	{r3, pc}
    return (rand_prn16() % (CLK_UNIT)dll.comm.tc);
 80037c0:	f003 ff40 	bl	8007644 <rand_prn16>
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <sub_rigd_newslot+0x24>)
 80037c6:	8c1a      	ldrh	r2, [r3, #32]
 80037c8:	fbb0 f3f2 	udiv	r3, r0, r2
 80037cc:	fb02 0013 	mls	r0, r2, r3, r0
 80037d0:	b280      	uxth	r0, r0
 80037d2:	e7f4      	b.n	80037be <sub_rigd_newslot+0xe>
 80037d4:	20002654 	.word	0x20002654

080037d8 <sub_fcloop>:
    if (dll.comm.csmaca_params & 0x20) {    //NO CA
 80037d8:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <sub_fcloop+0x3c>)
 80037da:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80037de:	f013 0f20 	tst.w	r3, #32
 80037e2:	d10d      	bne.n	8003800 <sub_fcloop+0x28>
CLK_UNIT sub_fcloop(void) {
 80037e4:	b510      	push	{r4, lr}
    if (dll.comm.csmaca_params & 0x18) {    //RAIND, AIND
 80037e6:	f013 0f18 	tst.w	r3, #24
 80037ea:	d10c      	bne.n	8003806 <sub_fcloop+0x2e>
        wait    = (dll.comm.tc - dll.comm.tca);
 80037ec:	4b09      	ldr	r3, [pc, #36]	; (8003814 <sub_fcloop+0x3c>)
 80037ee:	6a1c      	ldr	r4, [r3, #32]
 80037f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80037f2:	1a24      	subs	r4, r4, r0
        wait   += sub_rigd_newslot();
 80037f4:	f7ff ffdc 	bl	80037b0 <sub_rigd_newslot>
        return (wait < 0) ? 0 : (CLK_UNIT)wait;
 80037f8:	1900      	adds	r0, r0, r4
 80037fa:	d408      	bmi.n	800380e <sub_fcloop+0x36>
 80037fc:	b280      	uxth	r0, r0
 80037fe:	e005      	b.n	800380c <sub_fcloop+0x34>
        return phymac[0].tg; //TI2CLK(phymac[0].tg);
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <sub_fcloop+0x40>)
 8003802:	7858      	ldrb	r0, [r3, #1]
}
 8003804:	4770      	bx	lr
        return rm2_pkt_duration(&txq); //TI2CLK(rm2_pkt_duration(&txq));
 8003806:	4805      	ldr	r0, [pc, #20]	; (800381c <sub_fcloop+0x44>)
 8003808:	f7fe f96c 	bl	8001ae4 <rm2_pkt_duration>
}
 800380c:	bd10      	pop	{r4, pc}
        return (wait < 0) ? 0 : (CLK_UNIT)wait;
 800380e:	2000      	movs	r0, #0
 8003810:	e7fc      	b.n	800380c <sub_fcloop+0x34>
 8003812:	bf00      	nop
 8003814:	20002654 	.word	0x20002654
 8003818:	200026d0 	.word	0x200026d0
 800381c:	20002d74 	.word	0x20002d74

08003820 <sub_fcinit>:
CLK_UNIT sub_fcinit(void) {
 8003820:	b538      	push	{r3, r4, r5, lr}
    sub_csma_scramble();
 8003822:	f7ff ff91 	bl	8003748 <sub_csma_scramble>
    if (dll.comm.csmaca_params & M2_CSMACA_AIND) {
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <sub_fcinit+0x40>)
 8003828:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800382c:	f013 0f10 	tst.w	r3, #16
 8003830:	d114      	bne.n	800385c <sub_fcinit+0x3c>
    if (dll.comm.csmaca_params & M2_CSMACA_RAIND) {
 8003832:	f013 0f08 	tst.w	r3, #8
 8003836:	d102      	bne.n	800383e <sub_fcinit+0x1e>
    return sub_rigd_newslot();
 8003838:	f7ff ffba 	bl	80037b0 <sub_rigd_newslot>
 800383c:	e00f      	b.n	800385e <sub_fcinit+0x3e>
        random  = rand_prn16();
 800383e:	f003 ff01 	bl	8007644 <rand_prn16>
 8003842:	4605      	mov	r5, r0
        random %= dll.comm.tc - rm2_pkt_duration(&txq);
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <sub_fcinit+0x40>)
 8003846:	6a1c      	ldr	r4, [r3, #32]
 8003848:	4806      	ldr	r0, [pc, #24]	; (8003864 <sub_fcinit+0x44>)
 800384a:	f7fe f94b 	bl	8001ae4 <rm2_pkt_duration>
 800384e:	1a24      	subs	r4, r4, r0
 8003850:	fb95 f0f4 	sdiv	r0, r5, r4
 8003854:	fb04 5010 	mls	r0, r4, r0, r5
 8003858:	b280      	uxth	r0, r0
        return random;
 800385a:	e000      	b.n	800385e <sub_fcinit+0x3e>
        return 0;
 800385c:	2000      	movs	r0, #0
}
 800385e:	bd38      	pop	{r3, r4, r5, pc}
 8003860:	20002654 	.word	0x20002654
 8003864:	20002d74 	.word	0x20002d74

08003868 <dll_block_idletasks>:
    sys.task_HSS.event  = 0;
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <dll_block_idletasks+0x10>)
 800386a:	2200      	movs	r2, #0
 800386c:	751a      	strb	r2, [r3, #20]
    sys.task_BTS.event  = 0;
 800386e:	771a      	strb	r2, [r3, #28]
    sys.task_SSS.event  = 0;
 8003870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20002db4 	.word	0x20002db4

0800387c <dll_refresh_rts>:
}
 800387c:	4770      	bx	lr
	...

08003880 <dll_idle>:
OT_WEAK void dll_idle(void) {
 8003880:	b510      	push	{r4, lr}
	radio_gag();
 8003882:	f7fd fd97 	bl	80013b4 <radio_gag>
    radio_sleep();
 8003886:	f7fd fecb 	bl	8001620 <radio_sleep>
    sys.task_RFA.event  = 0;
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <dll_idle+0x38>)
 800388c:	2200      	movs	r2, #0
 800388e:	711a      	strb	r2, [r3, #4]
    scan_evt_ptr        = (ot_u8*)&scan_events[dll.idle_state<<1];
 8003890:	490a      	ldr	r1, [pc, #40]	; (80038bc <dll_idle+0x3c>)
 8003892:	780a      	ldrb	r2, [r1, #0]
 8003894:	480a      	ldr	r0, [pc, #40]	; (80038c0 <dll_idle+0x40>)
 8003896:	eb00 0442 	add.w	r4, r0, r2, lsl #1
    sys.task_HSS.event  = *scan_evt_ptr;
 800389a:	f810 0012 	ldrb.w	r0, [r0, r2, lsl #1]
 800389e:	7518      	strb	r0, [r3, #20]
    sys.task_SSS.event  = *(++scan_evt_ptr);
 80038a0:	7860      	ldrb	r0, [r4, #1]
 80038a2:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
    sys.task_BTS.event  = ((dll.netconf.b_attempts != 0) \
 80038a6:	7f4b      	ldrb	r3, [r1, #29]
    		            && (dll.idle_state != M2_DLLIDLE_OFF));
 80038a8:	b113      	cbz	r3, 80038b0 <dll_idle+0x30>
 80038aa:	b112      	cbz	r2, 80038b2 <dll_idle+0x32>
 80038ac:	2201      	movs	r2, #1
 80038ae:	e000      	b.n	80038b2 <dll_idle+0x32>
 80038b0:	2200      	movs	r2, #0
    sys.task_BTS.event  = ((dll.netconf.b_attempts != 0) \
 80038b2:	4b01      	ldr	r3, [pc, #4]	; (80038b8 <dll_idle+0x38>)
 80038b4:	771a      	strb	r2, [r3, #28]
}
 80038b6:	bd10      	pop	{r4, pc}
 80038b8:	20002db4 	.word	0x20002db4
 80038bc:	20002654 	.word	0x20002654
 80038c0:	08009cdc 	.word	0x08009cdc

080038c4 <dll_rfevt_brx>:
OT_WEAK void dll_rfevt_brx(ot_int scode, ot_int fcode) {
 80038c4:	b510      	push	{r4, lr}
 80038c6:	4604      	mov	r4, r0
    __DEBUG_ERRCODE_EVAL(=100);
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <dll_rfevt_brx+0x70>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	801a      	strh	r2, [r3, #0]
 80038ce:	2264      	movs	r2, #100	; 0x64
 80038d0:	805a      	strh	r2, [r3, #2]
    if (fcode != 0) {
 80038d2:	b1c1      	cbz	r1, 8003906 <dll_rfevt_brx+0x42>
    	__DEBUG_ERRCODE_EVAL(=101);
 80038d4:	2265      	movs	r2, #101	; 0x65
 80038d6:	805a      	strh	r2, [r3, #2]
    	if (dll.comm.redundants != 0) {
 80038d8:	4b17      	ldr	r3, [pc, #92]	; (8003938 <dll_rfevt_brx+0x74>)
 80038da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80038de:	b973      	cbnz	r3, 80038fe <dll_rfevt_brx+0x3a>
    session_pop();
 80038e0:	f001 f952 	bl	8004b88 <session_pop>
    dll_idle();
 80038e4:	f7ff ffcc 	bl	8003880 <dll_idle>
    DLL_SIG_RFTERMINATE(3, scode);
 80038e8:	4621      	mov	r1, r4
 80038ea:	2003      	movs	r0, #3
 80038ec:	f7fc fee8 	bl	80006c0 <dll_sig_rfterminate>
    sys.task_RFA.event = 0;
 80038f0:	2100      	movs	r1, #0
 80038f2:	4812      	ldr	r0, [pc, #72]	; (800393c <dll_rfevt_brx+0x78>)
 80038f4:	f800 1f04 	strb.w	r1, [r0, #4]!
    sys_preempt(&sys.task_RFA, 0);
 80038f8:	f003 f812 	bl	8006920 <sys_preempt>
}
 80038fc:	bd10      	pop	{r4, pc}
    		rm2_reenter_rx(&dll_rfevt_brx);   //non-blocking
 80038fe:	4810      	ldr	r0, [pc, #64]	; (8003940 <dll_rfevt_brx+0x7c>)
 8003900:	f7fd ff08 	bl	8001714 <rm2_reenter_rx>
    		return;
 8003904:	e7fa      	b.n	80038fc <dll_rfevt_brx+0x38>
    if (scode < 0) {
 8003906:	2800      	cmp	r0, #0
 8003908:	da05      	bge.n	8003916 <dll_rfevt_brx+0x52>
        __DEBUG_ERRCODE_EVAL(=102);
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <dll_rfevt_brx+0x70>)
 800390c:	2266      	movs	r2, #102	; 0x66
 800390e:	805a      	strh	r2, [r3, #2]
        scode = RM2_ERR_GENERIC;
 8003910:	f06f 0405 	mvn.w	r4, #5
    	goto dll_rfevt_FAILURE;
 8003914:	e7e4      	b.n	80038e0 <dll_rfevt_brx+0x1c>
    if (rm2_mac_filter()) {
 8003916:	f000 ff77 	bl	8004808 <rm2_mac_filter>
 800391a:	2800      	cmp	r0, #0
 800391c:	d0e0      	beq.n	80038e0 <dll_rfevt_brx+0x1c>
        __DEBUG_ERRCODE_EVAL(=103);
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <dll_rfevt_brx+0x70>)
 8003920:	2200      	movs	r2, #0
 8003922:	801a      	strh	r2, [r3, #0]
 8003924:	2267      	movs	r2, #103	; 0x67
 8003926:	805a      	strh	r2, [r3, #2]
        if (network_parse_bf()) {
 8003928:	f000 ff5a 	bl	80047e0 <network_parse_bf>
 800392c:	2800      	cmp	r0, #0
 800392e:	d1db      	bne.n	80038e8 <dll_rfevt_brx+0x24>
    dll_rfevt_FAILURE:
 8003930:	e7d6      	b.n	80038e0 <dll_rfevt_brx+0x1c>
 8003932:	bf00      	nop
 8003934:	20002dfc 	.word	0x20002dfc
 8003938:	20002654 	.word	0x20002654
 800393c:	20002db4 	.word	0x20002db4
 8003940:	080038c5 	.word	0x080038c5

08003944 <dll_rfevt_frx>:
OT_WEAK void dll_rfevt_frx(ot_int pcode, ot_int fcode) {
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	4605      	mov	r5, r0
 8003948:	460c      	mov	r4, r1
    m2session*  active  = session_top();
 800394a:	f001 f929 	bl	8004ba0 <session_top>
 800394e:	4606      	mov	r6, r0
    __DEBUG_ERRCODE_EVAL(=110);
 8003950:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <dll_rfevt_frx+0xe4>)
 8003952:	2200      	movs	r2, #0
 8003954:	801a      	strh	r2, [r3, #0]
    if (pcode < 0) {
 8003956:	4295      	cmp	r5, r2
 8003958:	db1b      	blt.n	8003992 <dll_rfevt_frx+0x4e>
        __DEBUG_ERRCODE_EVAL(=113);
 800395a:	4b33      	ldr	r3, [pc, #204]	; (8003a28 <dll_rfevt_frx+0xe4>)
 800395c:	2271      	movs	r2, #113	; 0x71
 800395e:	805a      	strh	r2, [r3, #2]
    	if (fcode != 0) {
 8003960:	2c00      	cmp	r4, #0
 8003962:	d038      	beq.n	80039d6 <dll_rfevt_frx+0x92>
    		frx_code = -1;
 8003964:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        if (pcode == 0) {
 8003968:	2d00      	cmp	r5, #0
 800396a:	d147      	bne.n	80039fc <dll_rfevt_frx+0xb8>
            ot_bool rx_isresp = (active->netstate & M2_NETSTATE_RESP);
 800396c:	79f3      	ldrb	r3, [r6, #7]
 800396e:	f003 0310 	and.w	r3, r3, #16
            if (frx_code == 0) {
 8003972:	b924      	cbnz	r4, 800397e <dll_rfevt_frx+0x3a>
                sys.task_RFA.reserve = 20;  ///@todo Could have quick evaluator here
 8003974:	4a2d      	ldr	r2, [pc, #180]	; (8003a2c <dll_rfevt_frx+0xe8>)
 8003976:	2114      	movs	r1, #20
 8003978:	7191      	strb	r1, [r2, #6]
                sys.task_RFA.event   = 1;   ///Process the packet!!!
 800397a:	2101      	movs	r1, #1
 800397c:	7111      	strb	r1, [r2, #4]
            if (rx_isresp) {
 800397e:	b123      	cbz	r3, 800398a <dll_rfevt_frx+0x46>
                dll.counter     = dll.netconf.hold_limit;
 8003980:	4a2b      	ldr	r2, [pc, #172]	; (8003a30 <dll_rfevt_frx+0xec>)
 8003982:	8bd1      	ldrh	r1, [r2, #30]
 8003984:	8051      	strh	r1, [r2, #2]
                dll.idle_state  = M2_DLLIDLE_HOLD;
 8003986:	2102      	movs	r1, #2
 8003988:	7011      	strb	r1, [r2, #0]
            re_init = (frx_code || rx_isresp);
 800398a:	bb5c      	cbnz	r4, 80039e4 <dll_rfevt_frx+0xa0>
 800398c:	b38b      	cbz	r3, 80039f2 <dll_rfevt_frx+0xae>
 800398e:	2301      	movs	r3, #1
 8003990:	e029      	b.n	80039e6 <dll_rfevt_frx+0xa2>
        __DEBUG_ERRCODE_EVAL(=111);
 8003992:	226f      	movs	r2, #111	; 0x6f
 8003994:	805a      	strh	r2, [r3, #2]
        sys.task_RFA.event  = 0;
 8003996:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <dll_rfevt_frx+0xe8>)
 8003998:	2200      	movs	r2, #0
 800399a:	711a      	strb	r2, [r3, #4]
        if (dll.comm.redundants) {
 800399c:	4b24      	ldr	r3, [pc, #144]	; (8003a30 <dll_rfevt_frx+0xec>)
 800399e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80039a2:	b123      	cbz	r3, 80039ae <dll_rfevt_frx+0x6a>
            active->netstate   = (M2_NETSTATE_REQTX | M2_NETSTATE_INIT | M2_NETFLAG_FIRSTRX);
 80039a4:	230a      	movs	r3, #10
 80039a6:	71c3      	strb	r3, [r0, #7]
    ot_bool     re_init = False;
 80039a8:	4615      	mov	r5, r2
    ot_int      frx_code= 0;
 80039aa:	4614      	mov	r4, r2
 80039ac:	e027      	b.n	80039fe <dll_rfevt_frx+0xba>
        else if (((active->netstate & M2_NETSTATE_TMASK) == M2_NETSTATE_RESPRX) \
 80039ae:	79c3      	ldrb	r3, [r0, #7]
 80039b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039b4:	2a30      	cmp	r2, #48	; 0x30
 80039b6:	d107      	bne.n	80039c8 <dll_rfevt_frx+0x84>
               && (active->applet != NULL)) {
 80039b8:	6802      	ldr	r2, [r0, #0]
 80039ba:	b12a      	cbz	r2, 80039c8 <dll_rfevt_frx+0x84>
            active->netstate  &= ~M2_NETSTATE_TMASK;   // Default to Request-TX
 80039bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c0:	71c3      	strb	r3, [r0, #7]
    ot_bool     re_init = False;
 80039c2:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 80039c4:	462c      	mov	r4, r5
            active->netstate  &= ~M2_NETSTATE_TMASK;   // Default to Request-TX
 80039c6:	e01a      	b.n	80039fe <dll_rfevt_frx+0xba>
            session_pop();
 80039c8:	f001 f8de 	bl	8004b88 <session_pop>
            dll_idle();
 80039cc:	f7ff ff58 	bl	8003880 <dll_idle>
    ot_bool     re_init = False;
 80039d0:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 80039d2:	462c      	mov	r4, r5
 80039d4:	e013      	b.n	80039fe <dll_rfevt_frx+0xba>
        else if (rm2_mac_filter() == False) {
 80039d6:	f000 ff17 	bl	8004808 <rm2_mac_filter>
 80039da:	2800      	cmp	r0, #0
 80039dc:	d1c4      	bne.n	8003968 <dll_rfevt_frx+0x24>
            frx_code = -4;
 80039de:	f06f 0403 	mvn.w	r4, #3
 80039e2:	e7c1      	b.n	8003968 <dll_rfevt_frx+0x24>
            re_init = (frx_code || rx_isresp);
 80039e4:	2301      	movs	r3, #1
            if (re_init) {
 80039e6:	461d      	mov	r5, r3
 80039e8:	b12b      	cbz	r3, 80039f6 <dll_rfevt_frx+0xb2>
                rm2_reenter_rx(&dll_rfevt_frx);
 80039ea:	4812      	ldr	r0, [pc, #72]	; (8003a34 <dll_rfevt_frx+0xf0>)
 80039ec:	f7fd fe92 	bl	8001714 <rm2_reenter_rx>
 80039f0:	e005      	b.n	80039fe <dll_rfevt_frx+0xba>
            re_init = (frx_code || rx_isresp);
 80039f2:	2300      	movs	r3, #0
 80039f4:	e7f7      	b.n	80039e6 <dll_rfevt_frx+0xa2>
                radio_sleep();
 80039f6:	f7fd fe13 	bl	8001620 <radio_sleep>
 80039fa:	e000      	b.n	80039fe <dll_rfevt_frx+0xba>
    ot_bool     re_init = False;
 80039fc:	2500      	movs	r5, #0
    DLL_SIG_RFTERMINATE(3, frx_code);
 80039fe:	4621      	mov	r1, r4
 8003a00:	2003      	movs	r0, #3
 8003a02:	f7fc fe5d 	bl	80006c0 <dll_sig_rfterminate>
    if (re_init) {
 8003a06:	b90d      	cbnz	r5, 8003a0c <dll_rfevt_frx+0xc8>
    if (frx_code == 0) {
 8003a08:	b14c      	cbz	r4, 8003a1e <dll_rfevt_frx+0xda>
}
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
        __DEBUG_ERRCODE_EVAL(=114);
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <dll_rfevt_frx+0xe4>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	801a      	strh	r2, [r3, #0]
 8003a12:	2272      	movs	r2, #114	; 0x72
 8003a14:	805a      	strh	r2, [r3, #2]
        DLL_SIG_RFINIT(3);
 8003a16:	2003      	movs	r0, #3
 8003a18:	f7fc fe46 	bl	80006a8 <dll_sig_rfinit>
 8003a1c:	e7f4      	b.n	8003a08 <dll_rfevt_frx+0xc4>
        sys_preempt(&sys.task_RFA, 0);
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4805      	ldr	r0, [pc, #20]	; (8003a38 <dll_rfevt_frx+0xf4>)
 8003a22:	f002 ff7d 	bl	8006920 <sys_preempt>
}
 8003a26:	e7f0      	b.n	8003a0a <dll_rfevt_frx+0xc6>
 8003a28:	20002dfc 	.word	0x20002dfc
 8003a2c:	20002db4 	.word	0x20002db4
 8003a30:	20002654 	.word	0x20002654
 8003a34:	08003945 	.word	0x08003945
 8003a38:	20002db8 	.word	0x20002db8

08003a3c <dll_rfevt_txcsma>:
OT_WEAK void dll_rfevt_txcsma(ot_int pcode, ot_int tcode) {
 8003a3c:	b538      	push	{r3, r4, r5, lr}
    __DEBUG_ERRCODE_EVAL(=120);
 8003a3e:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <dll_rfevt_txcsma+0x98>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	801a      	strh	r2, [r3, #0]
    if (pcode == 0) {
 8003a44:	bb18      	cbnz	r0, 8003a8e <dll_rfevt_txcsma+0x52>
        __DEBUG_ERRCODE_EVAL(=121);
 8003a46:	4b23      	ldr	r3, [pc, #140]	; (8003ad4 <dll_rfevt_txcsma+0x98>)
 8003a48:	2279      	movs	r2, #121	; 0x79
 8003a4a:	805a      	strh	r2, [r3, #2]
        sys.task_RFA.latency    = 0;
 8003a4c:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <dll_rfevt_txcsma+0x9c>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	71da      	strb	r2, [r3, #7]
        sys.task_RFA.event      = 5;
 8003a52:	2205      	movs	r2, #5
 8003a54:	711a      	strb	r2, [r3, #4]
        radio.evtdone   = (tcode & 1) ? &dll_rfevt_btx : &dll_rfevt_ftx;
 8003a56:	b289      	uxth	r1, r1
 8003a58:	f011 0f01 	tst.w	r1, #1
 8003a5c:	d010      	beq.n	8003a80 <dll_rfevt_txcsma+0x44>
 8003a5e:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <dll_rfevt_txcsma+0xa0>)
 8003a60:	4b1f      	ldr	r3, [pc, #124]	; (8003ae0 <dll_rfevt_txcsma+0xa4>)
 8003a62:	609a      	str	r2, [r3, #8]
        event_ticks     = (tcode & 2) ? dll.counter+20 : (ot_uint)(rm2_pkt_duration(&txq));
 8003a64:	f011 0f02 	tst.w	r1, #2
 8003a68:	d00c      	beq.n	8003a84 <dll_rfevt_txcsma+0x48>
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <dll_rfevt_txcsma+0xa8>)
 8003a6c:	885c      	ldrh	r4, [r3, #2]
 8003a6e:	3414      	adds	r4, #20
 8003a70:	b2a4      	uxth	r4, r4
        radio_idle();
 8003a72:	f7fd fddd 	bl	8001630 <radio_idle>
    sys_preempt(&sys.task_RFA, event_ticks);
 8003a76:	4621      	mov	r1, r4
 8003a78:	481b      	ldr	r0, [pc, #108]	; (8003ae8 <dll_rfevt_txcsma+0xac>)
 8003a7a:	f002 ff51 	bl	8006920 <sys_preempt>
}
 8003a7e:	bd38      	pop	{r3, r4, r5, pc}
        radio.evtdone   = (tcode & 1) ? &dll_rfevt_btx : &dll_rfevt_ftx;
 8003a80:	4a1a      	ldr	r2, [pc, #104]	; (8003aec <dll_rfevt_txcsma+0xb0>)
 8003a82:	e7ed      	b.n	8003a60 <dll_rfevt_txcsma+0x24>
        event_ticks     = (tcode & 2) ? dll.counter+20 : (ot_uint)(rm2_pkt_duration(&txq));
 8003a84:	481a      	ldr	r0, [pc, #104]	; (8003af0 <dll_rfevt_txcsma+0xb4>)
 8003a86:	f7fe f82d 	bl	8001ae4 <rm2_pkt_duration>
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	e7f1      	b.n	8003a72 <dll_rfevt_txcsma+0x36>
    else if (pcode > 0) {
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	dd10      	ble.n	8003ab4 <dll_rfevt_txcsma+0x78>
        __DEBUG_ERRCODE_EVAL(=122);
 8003a92:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <dll_rfevt_txcsma+0x98>)
 8003a94:	227a      	movs	r2, #122	; 0x7a
 8003a96:	805a      	strh	r2, [r3, #2]
        nextcsma = (ot_uint)sub_fcloop();
 8003a98:	f7ff fe9e 	bl	80037d8 <sub_fcloop>
 8003a9c:	4604      	mov	r4, r0
        if (nextcsma < 2) 
 8003a9e:	2801      	cmp	r0, #1
 8003aa0:	d905      	bls.n	8003aae <dll_rfevt_txcsma+0x72>
            radio_sleep();
 8003aa2:	f7fd fdbd 	bl	8001620 <radio_sleep>
        radio_set_mactimer( nextcsma );
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f7fd fb48 	bl	800113c <radio_set_mactimer>
        return;
 8003aac:	e7e7      	b.n	8003a7e <dll_rfevt_txcsma+0x42>
            radio_idle();
 8003aae:	f7fd fdbf 	bl	8001630 <radio_idle>
 8003ab2:	e7f8      	b.n	8003aa6 <dll_rfevt_txcsma+0x6a>
        __DEBUG_ERRCODE_EVAL(=123);
 8003ab4:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <dll_rfevt_txcsma+0x98>)
 8003ab6:	217b      	movs	r1, #123	; 0x7b
 8003ab8:	8051      	strh	r1, [r2, #2]
        DLL_SIG_RFTERMINATE(sys.task_RFA.event, pcode);
 8003aba:	4d07      	ldr	r5, [pc, #28]	; (8003ad8 <dll_rfevt_txcsma+0x9c>)
 8003abc:	4601      	mov	r1, r0
 8003abe:	7928      	ldrb	r0, [r5, #4]
 8003ac0:	f7fc fdfe 	bl	80006c0 <dll_sig_rfterminate>
        session_pop();
 8003ac4:	f001 f860 	bl	8004b88 <session_pop>
        dll_idle();
 8003ac8:	f7ff feda 	bl	8003880 <dll_idle>
        sys.task_RFA.event  = 0;
 8003acc:	2400      	movs	r4, #0
 8003ace:	712c      	strb	r4, [r5, #4]
 8003ad0:	e7d1      	b.n	8003a76 <dll_rfevt_txcsma+0x3a>
 8003ad2:	bf00      	nop
 8003ad4:	20002dfc 	.word	0x20002dfc
 8003ad8:	20002db4 	.word	0x20002db4
 8003adc:	08003ed1 	.word	0x08003ed1
 8003ae0:	200026c4 	.word	0x200026c4
 8003ae4:	20002654 	.word	0x20002654
 8003ae8:	20002db8 	.word	0x20002db8
 8003aec:	08003af5 	.word	0x08003af5
 8003af0:	20002d74 	.word	0x20002d74

08003af4 <dll_rfevt_ftx>:
OT_WEAK void dll_rfevt_ftx(ot_int pcode, ot_int scratch) {
 8003af4:	b538      	push	{r3, r4, r5, lr}
    __DEBUG_ERRCODE_EVAL(=140);
 8003af6:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <dll_rfevt_ftx+0x88>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	801a      	strh	r2, [r3, #0]
 8003afc:	228c      	movs	r2, #140	; 0x8c
 8003afe:	805a      	strh	r2, [r3, #2]
    if (pcode == 1) {
 8003b00:	2801      	cmp	r0, #1
 8003b02:	d02c      	beq.n	8003b5e <dll_rfevt_ftx+0x6a>
 8003b04:	4605      	mov	r5, r0
        __DEBUG_ERRCODE_EVAL(=141);
 8003b06:	228d      	movs	r2, #141	; 0x8d
 8003b08:	805a      	strh	r2, [r3, #2]
        active = session_top();
 8003b0a:	f001 f849 	bl	8004ba0 <session_top>
        scratch = ((active->netstate & M2_NETSTATE_RESPTX) \
 8003b0e:	79c3      	ldrb	r3, [r0, #7]
        		|| (dll.comm.rx_timeout <= 0));
 8003b10:	f013 0f10 	tst.w	r3, #16
 8003b14:	d107      	bne.n	8003b26 <dll_rfevt_ftx+0x32>
 8003b16:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <dll_rfevt_ftx+0x8c>)
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	dd01      	ble.n	8003b22 <dll_rfevt_ftx+0x2e>
 8003b1e:	2200      	movs	r2, #0
 8003b20:	e002      	b.n	8003b28 <dll_rfevt_ftx+0x34>
 8003b22:	2201      	movs	r2, #1
 8003b24:	e000      	b.n	8003b28 <dll_rfevt_ftx+0x34>
 8003b26:	2201      	movs	r2, #1
        scratch = ((active->netstate & M2_NETSTATE_RESPTX) \
 8003b28:	b212      	sxth	r2, r2
        dll.comm.redundants--;
 8003b2a:	4915      	ldr	r1, [pc, #84]	; (8003b80 <dll_rfevt_ftx+0x8c>)
 8003b2c:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
        if ((dll.comm.redundants != 0) && scratch) {
 8003b38:	b103      	cbz	r3, 8003b3c <dll_rfevt_ftx+0x48>
 8003b3a:	b98a      	cbnz	r2, 8003b60 <dll_rfevt_ftx+0x6c>
        if (scratch || pcode) {
 8003b3c:	b902      	cbnz	r2, 8003b40 <dll_rfevt_ftx+0x4c>
 8003b3e:	b1b5      	cbz	r5, 8003b6e <dll_rfevt_ftx+0x7a>
            session_pop();
 8003b40:	f001 f822 	bl	8004b88 <session_pop>
            dll_idle();
 8003b44:	f7ff fe9c 	bl	8003880 <dll_idle>
        DLL_SIG_RFTERMINATE(sys.task_RFA.event, pcode);
 8003b48:	4c0e      	ldr	r4, [pc, #56]	; (8003b84 <dll_rfevt_ftx+0x90>)
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	7920      	ldrb	r0, [r4, #4]
 8003b4e:	f7fc fdb7 	bl	80006c0 <dll_sig_rfterminate>
        sys.task_RFA.event = 0;
 8003b52:	2100      	movs	r1, #0
 8003b54:	4620      	mov	r0, r4
 8003b56:	f800 1f04 	strb.w	r1, [r0, #4]!
        sys_preempt(&sys.task_RFA, 0);
 8003b5a:	f002 fee1 	bl	8006920 <sys_preempt>
}
 8003b5e:	bd38      	pop	{r3, r4, r5, pc}
            dll.comm.csmaca_params = (M2_CSMACA_NOCSMA | M2_CSMACA_MACCA);
 8003b60:	223c      	movs	r2, #60	; 0x3c
 8003b62:	f881 202e 	strb.w	r2, [r1, #46]	; 0x2e
            rm2_resend( (ot_sig2)&dll_rfevt_txcsma );
 8003b66:	4808      	ldr	r0, [pc, #32]	; (8003b88 <dll_rfevt_ftx+0x94>)
 8003b68:	f7fd fbce 	bl	8001308 <rm2_resend>
            return;
 8003b6c:	e7f7      	b.n	8003b5e <dll_rfevt_ftx+0x6a>
            active->netstate  &= ~M2_NETSTATE_TMASK;
 8003b6e:	79c3      	ldrb	r3, [r0, #7]
 8003b70:	f003 038f 	and.w	r3, r3, #143	; 0x8f
            active->netstate  |= M2_NETSTATE_RESPRX;
 8003b74:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003b78:	71c3      	strb	r3, [r0, #7]
 8003b7a:	e7e5      	b.n	8003b48 <dll_rfevt_ftx+0x54>
 8003b7c:	20002dfc 	.word	0x20002dfc
 8003b80:	20002654 	.word	0x20002654
 8003b84:	20002db4 	.word	0x20002db4
 8003b88:	08003a3d 	.word	0x08003a3d

08003b8c <dll_block>:
	sys.task_RFA.latency = 0;
 8003b8c:	4b01      	ldr	r3, [pc, #4]	; (8003b94 <dll_block+0x8>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	71da      	strb	r2, [r3, #7]
}
 8003b92:	4770      	bx	lr
 8003b94:	20002db4 	.word	0x20002db4

08003b98 <dll_unblock>:
	sys.task_RFA.latency = _REQRX_LATENCY;
 8003b98:	4b01      	ldr	r3, [pc, #4]	; (8003ba0 <dll_unblock+0x8>)
 8003b9a:	2228      	movs	r2, #40	; 0x28
 8003b9c:	71da      	strb	r2, [r3, #7]
}
 8003b9e:	4770      	bx	lr
 8003ba0:	20002db4 	.word	0x20002db4

08003ba4 <dll_clock>:
OT_WEAK void dll_clock(ot_uint clocks) {
 8003ba4:	b538      	push	{r3, r4, r5, lr}
    if (sys.task_RFA.event != 0) {
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <dll_clock+0x30>)
 8003ba8:	791b      	ldrb	r3, [r3, #4]
 8003baa:	b123      	cbz	r3, 8003bb6 <dll_clock+0x12>
    	dll.comm.rx_timeout -= CLK2TI(clocks);
 8003bac:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <dll_clock+0x34>)
 8003bae:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003bb0:	1a18      	subs	r0, r3, r0
 8003bb2:	6290      	str	r0, [r2, #40]	; 0x28
}
 8003bb4:	bd38      	pop	{r3, r4, r5, pc}
 8003bb6:	4604      	mov	r4, r0
    else if (session_notempty()) {
 8003bb8:	f001 f828 	bl	8004c0c <session_notempty>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d0f9      	beq.n	8003bb4 <dll_clock+0x10>
        sys.task_RFA.event      = 2;
 8003bc0:	4d04      	ldr	r5, [pc, #16]	; (8003bd4 <dll_clock+0x30>)
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	712b      	strb	r3, [r5, #4]
        sys.task_RFA.nextevent  = clocks + TI2CLK(session_getnext());
 8003bc6:	f000 ff3f 	bl	8004a48 <session_getnext>
 8003bca:	4420      	add	r0, r4
 8003bcc:	60a8      	str	r0, [r5, #8]
        dll_block_idletasks();
 8003bce:	f7ff fe4b 	bl	8003868 <dll_block_idletasks>
}
 8003bd2:	e7ef      	b.n	8003bb4 <dll_clock+0x10>
 8003bd4:	20002db4 	.word	0x20002db4
 8003bd8:	20002654 	.word	0x20002654

08003bdc <dll_processing>:
void dll_processing(void) {
 8003bdc:	b538      	push	{r3, r4, r5, lr}
    sys.task_RFA.event  = 0;                // Only run processing once
 8003bde:	2500      	movs	r5, #0
 8003be0:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <dll_processing+0x58>)
 8003be2:	711d      	strb	r5, [r3, #4]
    active              = session_top();
 8003be4:	f000 ffdc 	bl	8004ba0 <session_top>
 8003be8:	4604      	mov	r4, r0
    active->counter     = 0;
 8003bea:	8085      	strh	r5, [r0, #4]
    proc_score          = network_route_ff(active);
 8003bec:	f000 fcc4 	bl	8004578 <network_route_ff>
    if (proc_score >= 0) {
 8003bf0:	42a8      	cmp	r0, r5
 8003bf2:	db19      	blt.n	8003c28 <dll_processing+0x4c>
        sys.task_HSS.cursor = 0;
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <dll_processing+0x58>)
 8003bf6:	755d      	strb	r5, [r3, #21]
        dll.counter         = dll.netconf.hold_limit;
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <dll_processing+0x5c>)
 8003bfa:	8bda      	ldrh	r2, [r3, #30]
 8003bfc:	805a      	strh	r2, [r3, #2]
        dll.idle_state      = M2_DLLIDLE_HOLD;
 8003bfe:	2202      	movs	r2, #2
 8003c00:	701a      	strb	r2, [r3, #0]
        if (active->flags & M2_FLAG_LISTEN) {
 8003c02:	f994 300b 	ldrsb.w	r3, [r4, #11]
 8003c06:	42ab      	cmp	r3, r5
 8003c08:	db08      	blt.n	8003c1c <dll_processing+0x40>
    if (active->netstate & M2_NETSTATE_SCRAP) {
 8003c0a:	79e3      	ldrb	r3, [r4, #7]
 8003c0c:	f013 0f04 	tst.w	r3, #4
 8003c10:	d003      	beq.n	8003c1a <dll_processing+0x3e>
        session_pop();
 8003c12:	f000 ffb9 	bl	8004b88 <session_pop>
        dll_idle();
 8003c16:	f7ff fe33 	bl	8003880 <dll_idle>
}
 8003c1a:	bd38      	pop	{r3, r4, r5, pc}
            session_continue(active->applet, M2_NETSTATE_REQRX, 0);
 8003c1c:	462a      	mov	r2, r5
 8003c1e:	2120      	movs	r1, #32
 8003c20:	6820      	ldr	r0, [r4, #0]
 8003c22:	f000 ffc3 	bl	8004bac <session_continue>
 8003c26:	e7f0      	b.n	8003c0a <dll_processing+0x2e>
    else if ((active->netstate & M2_NETSTATE_RESP) == 0) {
 8003c28:	79e3      	ldrb	r3, [r4, #7]
 8003c2a:	f013 0f10 	tst.w	r3, #16
 8003c2e:	d0f0      	beq.n	8003c12 <dll_processing+0x36>
 8003c30:	e7eb      	b.n	8003c0a <dll_processing+0x2e>
 8003c32:	bf00      	nop
 8003c34:	20002db4 	.word	0x20002db4
 8003c38:	20002654 	.word	0x20002654

08003c3c <dll_systask_sleepscan>:
    if (task->event == 0) {
 8003c3c:	7803      	ldrb	r3, [r0, #0]
 8003c3e:	b903      	cbnz	r3, 8003c42 <dll_systask_sleepscan+0x6>
 8003c40:	4770      	bx	lr
OT_WEAK void dll_systask_sleepscan(ot_task task) {
 8003c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c46:	4604      	mov	r4, r0
    fp = ISF_open_su( task->event );
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f002 fc99 	bl	8006580 <ISF_open_su>
 8003c4e:	4680      	mov	r8, r0
    scratch.ushort  = PLATFORM_ENDIAN16( vl_read(fp, task->cursor) );
 8003c50:	7861      	ldrb	r1, [r4, #1]
 8003c52:	f002 fbde 	bl	8006412 <vl_read>
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8003c56:	ba40      	rev16	r0, r0
 8003c58:	b280      	uxth	r0, r0
 8003c5a:	0a07      	lsrs	r7, r0, #8
    sys_task_setnext(task, (ot_u32)otutils_calc_longtimeout(scratch.ushort));
 8003c5c:	f002 f9c2 	bl	8005fe4 <otutils_calc_longtimeout>
 8003c60:	4601      	mov	r1, r0
 8003c62:	4620      	mov	r0, r4
 8003c64:	f002 fdf0 	bl	8006848 <sys_task_setnext>
    task->cursor   += 2;
 8003c68:	7861      	ldrb	r1, [r4, #1]
 8003c6a:	3102      	adds	r1, #2
 8003c6c:	b2c9      	uxtb	r1, r1
 8003c6e:	7061      	strb	r1, [r4, #1]
    scratch.ushort  = vl_read(fp, task->cursor);
 8003c70:	4640      	mov	r0, r8
 8003c72:	f002 fbce 	bl	8006412 <vl_read>
 8003c76:	b2c6      	uxtb	r6, r0
 8003c78:	f3c0 2507 	ubfx	r5, r0, #8, #8
    task->cursor   += 2;
 8003c7c:	7863      	ldrb	r3, [r4, #1]
 8003c7e:	3302      	adds	r3, #2
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	7063      	strb	r3, [r4, #1]
    task->cursor    = (task->cursor >= fp->length) ? 0 : task->cursor;
 8003c84:	b299      	uxth	r1, r3
 8003c86:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8003c8a:	4291      	cmp	r1, r2
 8003c8c:	d215      	bcs.n	8003cba <dll_systask_sleepscan+0x7e>
 8003c8e:	7063      	strb	r3, [r4, #1]
    vl_close(fp);
 8003c90:	4640      	mov	r0, r8
 8003c92:	f002 fc3d 	bl	8006510 <vl_close>
    	s_type          = (s_type >> 1) | (s_code & 0x80);
 8003c96:	f025 037f 	bic.w	r3, r5, #127	; 0x7f
 8003c9a:	b25b      	sxtb	r3, r3
 8003c9c:	087f      	lsrs	r7, r7, #1
 8003c9e:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8003ca2:	433b      	orrs	r3, r7
 8003ca4:	b2db      	uxtb	r3, r3
		s_new           = session_new(&dll_scan_applet, 0, s_channel, netstate);
 8003ca6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003caa:	4632      	mov	r2, r6
 8003cac:	2100      	movs	r1, #0
 8003cae:	4804      	ldr	r0, [pc, #16]	; (8003cc0 <dll_systask_sleepscan+0x84>)
 8003cb0:	f000 fed2 	bl	8004a58 <session_new>
		s_new->extra    = s_code;
 8003cb4:	7205      	strb	r5, [r0, #8]
}
 8003cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    task->cursor    = (task->cursor >= fp->length) ? 0 : task->cursor;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e7e7      	b.n	8003c8e <dll_systask_sleepscan+0x52>
 8003cbe:	bf00      	nop
 8003cc0:	08003fb5 	.word	0x08003fb5

08003cc4 <dll_systask_beacon>:
OT_WEAK void dll_systask_beacon(ot_task task) {
 8003cc4:	b570      	push	{r4, r5, r6, lr}
    if ((task->event == 0) || (dll.netconf.b_attempts == 0)) {
 8003cc6:	7803      	ldrb	r3, [r0, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d03c      	beq.n	8003d46 <dll_systask_beacon+0x82>
 8003ccc:	4604      	mov	r4, r0
 8003cce:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <dll_systask_beacon+0x94>)
 8003cd0:	7f5b      	ldrb	r3, [r3, #29]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d037      	beq.n	8003d46 <dll_systask_beacon+0x82>
    if (dll.netconf.dd_flags == 0) {
 8003cd6:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <dll_systask_beacon+0x94>)
 8003cd8:	7f1b      	ldrb	r3, [r3, #28]
 8003cda:	b9fb      	cbnz	r3, 8003d1c <dll_systask_beacon+0x58>
        fp = ISF_open_su( ISF_ID(beacon_transmit_sequence) );
 8003cdc:	2006      	movs	r0, #6
 8003cde:	f002 fc4f 	bl	8006580 <ISF_open_su>
        if (fp == NULL) {
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d035      	beq.n	8003d54 <dll_systask_beacon+0x90>
        if (fp->length == 0)    {
 8003ce8:	8903      	ldrh	r3, [r0, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d02e      	beq.n	8003d4c <dll_systask_beacon+0x88>
        scratch     = fp->start;
 8003cee:	8846      	ldrh	r6, [r0, #2]
        fp->start  += task->cursor;
 8003cf0:	7863      	ldrb	r3, [r4, #1]
 8003cf2:	4433      	add	r3, r6
 8003cf4:	8043      	strh	r3, [r0, #2]
        task->cursor += 8;
 8003cf6:	7863      	ldrb	r3, [r4, #1]
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	7063      	strb	r3, [r4, #1]
        if (task->cursor >= fp->length) {
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	8902      	ldrh	r2, [r0, #8]
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d301      	bcc.n	8003d0a <dll_systask_beacon+0x46>
        	task->cursor = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	7063      	strb	r3, [r4, #1]
        vl_load(fp, 8, dll.netconf.btemp);
 8003d0a:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <dll_systask_beacon+0x98>)
 8003d0c:	2108      	movs	r1, #8
 8003d0e:	4628      	mov	r0, r5
 8003d10:	f002 fba1 	bl	8006456 <vl_load>
        fp->start = scratch;
 8003d14:	806e      	strh	r6, [r5, #2]
        vl_close(fp);
 8003d16:	4628      	mov	r0, r5
 8003d18:	f002 fbfa 	bl	8006510 <vl_close>
		b_session           = session_new(  &dll_beacon_applet, 0, dll.netconf.btemp[2], b_flags);
 8003d1c:	4d0e      	ldr	r5, [pc, #56]	; (8003d58 <dll_systask_beacon+0x94>)
 8003d1e:	230a      	movs	r3, #10
 8003d20:	7a2a      	ldrb	r2, [r5, #8]
 8003d22:	2100      	movs	r1, #0
 8003d24:	480e      	ldr	r0, [pc, #56]	; (8003d60 <dll_systask_beacon+0x9c>)
 8003d26:	f000 fe97 	bl	8004a58 <session_new>
		b_session->subnet   = dll.netconf.b_subnet;
 8003d2a:	7e6b      	ldrb	r3, [r5, #25]
 8003d2c:	7283      	strb	r3, [r0, #10]
		b_session->extra    = dll.netconf.btemp[3];
 8003d2e:	7a6b      	ldrb	r3, [r5, #9]
 8003d30:	7203      	strb	r3, [r0, #8]
    nextbeacon = otutils_calc_longtimeout( PLATFORM_ENDIAN16(*(ot_u16*)&dll.netconf.btemp[0]) );
 8003d32:	88e8      	ldrh	r0, [r5, #6]
 8003d34:	ba40      	rev16	r0, r0
 8003d36:	b280      	uxth	r0, r0
 8003d38:	f002 f954 	bl	8005fe4 <otutils_calc_longtimeout>
 8003d3c:	b281      	uxth	r1, r0
    sys_task_setnext(task, (ot_u32)nextbeacon);
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f002 fd82 	bl	8006848 <sys_task_setnext>
 8003d44:	e001      	b.n	8003d4a <dll_systask_beacon+0x86>
        dll_idle();
 8003d46:	f7ff fd9b 	bl	8003880 <dll_idle>
}
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
            vl_close(fp);
 8003d4c:	f002 fbe0 	bl	8006510 <vl_close>
    nextbeacon = 10;
 8003d50:	210a      	movs	r1, #10
            goto dll_systask_beacon_END;
 8003d52:	e7f4      	b.n	8003d3e <dll_systask_beacon+0x7a>
    nextbeacon = 10;
 8003d54:	210a      	movs	r1, #10
 8003d56:	e7f2      	b.n	8003d3e <dll_systask_beacon+0x7a>
 8003d58:	20002654 	.word	0x20002654
 8003d5c:	2000265a 	.word	0x2000265a
 8003d60:	08003fdd 	.word	0x08003fdd

08003d64 <dll_init_rx>:
OT_WEAK void dll_init_rx(m2session* active) {
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	4604      	mov	r4, r0
    sys.task_RFA.event      = 3;
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <dll_init_rx+0x58>)
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	711a      	strb	r2, [r3, #4]
    sys.task_RFA.latency    = (active->netstate & M2_NETSTATE_RESP) ? \
 8003d6e:	79c3      	ldrb	r3, [r0, #7]
 8003d70:	f013 0f10 	tst.w	r3, #16
 8003d74:	d01d      	beq.n	8003db2 <dll_init_rx+0x4e>
 8003d76:	2202      	movs	r2, #2
 8003d78:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <dll_init_rx+0x58>)
 8003d7a:	71da      	strb	r2, [r3, #7]
    min_timeout = rm2_rxtimeout_floor(active->channel);
 8003d7c:	79a0      	ldrb	r0, [r4, #6]
 8003d7e:	f7fd fe7d 	bl	8001a7c <rm2_rxtimeout_floor>
    if (dll.comm.rx_timeout < min_timeout) {
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <dll_init_rx+0x5c>)
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	4283      	cmp	r3, r0
 8003d88:	da01      	bge.n	8003d8e <dll_init_rx+0x2a>
        dll.comm.rx_timeout = min_timeout;
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <dll_init_rx+0x5c>)
 8003d8c:	6298      	str	r0, [r3, #40]	; 0x28
	sys_task_setnext(&sys.task[TASK_radio], (ot_u32)dll.comm.rx_timeout);
 8003d8e:	4d0d      	ldr	r5, [pc, #52]	; (8003dc4 <dll_init_rx+0x60>)
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <dll_init_rx+0x5c>)
 8003d92:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d94:	4628      	mov	r0, r5
 8003d96:	f002 fd57 	bl	8006848 <sys_task_setnext>
    DLL_SIG_RFINIT(sys.task_RFA.event);
 8003d9a:	7828      	ldrb	r0, [r5, #0]
 8003d9c:	f7fc fc84 	bl	80006a8 <dll_sig_rfinit>
    callback = (active->netstate & M2_NETFLAG_BG) ? &dll_rfevt_brx : &dll_rfevt_frx;
 8003da0:	79e1      	ldrb	r1, [r4, #7]
 8003da2:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003da6:	d106      	bne.n	8003db6 <dll_init_rx+0x52>
 8003da8:	4a07      	ldr	r2, [pc, #28]	; (8003dc8 <dll_init_rx+0x64>)
    rm2_rxinit(active->channel, active->netstate, callback);
 8003daa:	79a0      	ldrb	r0, [r4, #6]
 8003dac:	f7fd fb44 	bl	8001438 <rm2_rxinit>
}
 8003db0:	bd38      	pop	{r3, r4, r5, pc}
    sys.task_RFA.latency    = (active->netstate & M2_NETSTATE_RESP) ? \
 8003db2:	2228      	movs	r2, #40	; 0x28
 8003db4:	e7e0      	b.n	8003d78 <dll_init_rx+0x14>
    callback = (active->netstate & M2_NETFLAG_BG) ? &dll_rfevt_brx : &dll_rfevt_frx;
 8003db6:	4a05      	ldr	r2, [pc, #20]	; (8003dcc <dll_init_rx+0x68>)
 8003db8:	e7f7      	b.n	8003daa <dll_init_rx+0x46>
 8003dba:	bf00      	nop
 8003dbc:	20002db4 	.word	0x20002db4
 8003dc0:	20002654 	.word	0x20002654
 8003dc4:	20002db8 	.word	0x20002db8
 8003dc8:	08003945 	.word	0x08003945
 8003dcc:	080038c5 	.word	0x080038c5

08003dd0 <dll_init_tx>:
OT_WEAK void dll_init_tx(m2session* active) {
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	4605      	mov	r5, r0
    sys_task_setnext(&sys.task[TASK_radio], (ot_u32)dll.comm.tc);
 8003dd4:	4e10      	ldr	r6, [pc, #64]	; (8003e18 <dll_init_tx+0x48>)
 8003dd6:	4c11      	ldr	r4, [pc, #68]	; (8003e1c <dll_init_tx+0x4c>)
 8003dd8:	6a31      	ldr	r1, [r6, #32]
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f002 fd34 	bl	8006848 <sys_task_setnext>
    dll.comm.tca            = sub_fcinit();
 8003de0:	f7ff fd1e 	bl	8003820 <sub_fcinit>
 8003de4:	6270      	str	r0, [r6, #36]	; 0x24
    sys.task_RFA.latency    = 1;
 8003de6:	2301      	movs	r3, #1
 8003de8:	70e3      	strb	r3, [r4, #3]
 8003dea:	3c04      	subs	r4, #4
    sys.task_RFA.event      = 4;
 8003dec:	2004      	movs	r0, #4
 8003dee:	7120      	strb	r0, [r4, #4]
    DLL_SIG_RFINIT(sys.task_RFA.event);
 8003df0:	f7fc fc5a 	bl	80006a8 <dll_sig_rfinit>
    if (active->netstate & M2_NETFLAG_BG) {
 8003df4:	79eb      	ldrb	r3, [r5, #7]
 8003df6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003dfa:	d002      	beq.n	8003e02 <dll_init_tx+0x32>
    	if (active->netstate & M2_NETFLAG_STREAM) {
 8003dfc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003e00:	d104      	bne.n	8003e0c <dll_init_tx+0x3c>
    rm2_txinit(active->netstate, &dll_rfevt_txcsma);
 8003e02:	4907      	ldr	r1, [pc, #28]	; (8003e20 <dll_init_tx+0x50>)
 8003e04:	79e8      	ldrb	r0, [r5, #7]
 8003e06:	f7fd fa59 	bl	80012bc <rm2_txinit>
}
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
    		m2advp_open(session_follower());
 8003e0c:	f000 ff1a 	bl	8004c44 <session_follower>
 8003e10:	f000 fc82 	bl	8004718 <m2advp_open>
 8003e14:	e7f5      	b.n	8003e02 <dll_init_tx+0x32>
 8003e16:	bf00      	nop
 8003e18:	20002654 	.word	0x20002654
 8003e1c:	20002db8 	.word	0x20002db8
 8003e20:	08003a3d 	.word	0x08003a3d

08003e24 <dll_activate>:
OT_WEAK void dll_activate(void) {
 8003e24:	b510      	push	{r4, lr}
    s_active            = session_top();
 8003e26:	f000 febb 	bl	8004ba0 <session_top>
 8003e2a:	4604      	mov	r4, r0
    s_applet            = (s_active->applet == NULL) ? \
 8003e2c:	6803      	ldr	r3, [r0, #0]
                            &dll_response_applet : s_active->applet;
 8003e2e:	b173      	cbz	r3, 8003e4e <dll_activate+0x2a>
    s_active->applet    = NULL;
 8003e30:	2200      	movs	r2, #0
 8003e32:	6022      	str	r2, [r4, #0]
    s_applet(s_active);
 8003e34:	4620      	mov	r0, r4
 8003e36:	4798      	blx	r3
    if (s_active->netstate & M2_NETSTATE_SCRAP) {
 8003e38:	79e3      	ldrb	r3, [r4, #7]
 8003e3a:	f013 0f04 	tst.w	r3, #4
 8003e3e:	d108      	bne.n	8003e52 <dll_activate+0x2e>
    else if (s_active->netstate & M2_NETSTATE_RX) {
 8003e40:	f013 0f20 	tst.w	r3, #32
 8003e44:	d10a      	bne.n	8003e5c <dll_activate+0x38>
        dll_init_tx(s_active);
 8003e46:	4620      	mov	r0, r4
 8003e48:	f7ff ffc2 	bl	8003dd0 <dll_init_tx>
}
 8003e4c:	bd10      	pop	{r4, pc}
                            &dll_response_applet : s_active->applet;
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <dll_activate+0x40>)
 8003e50:	e7ee      	b.n	8003e30 <dll_activate+0xc>
        session_pop();
 8003e52:	f000 fe99 	bl	8004b88 <session_pop>
        dll_idle();
 8003e56:	f7ff fd13 	bl	8003880 <dll_idle>
 8003e5a:	e7f7      	b.n	8003e4c <dll_activate+0x28>
        dll_init_rx(s_active);
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f7ff ff81 	bl	8003d64 <dll_init_rx>
 8003e62:	e7f3      	b.n	8003e4c <dll_activate+0x28>
 8003e64:	080036f9 	.word	0x080036f9

08003e68 <dll_scan_timeout>:
OT_WEAK void dll_scan_timeout(void) {
 8003e68:	b508      	push	{r3, lr}
    if ((radio.state != RADIO_DataRX) || (dll.comm.csmaca_params & M2_CSMACA_A2P)) {    ///@todo change to LISTEN
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <dll_scan_timeout+0x2c>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b05      	cmp	r3, #5
 8003e70:	d105      	bne.n	8003e7e <dll_scan_timeout+0x16>
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <dll_scan_timeout+0x30>)
 8003e74:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003e78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e7c:	d002      	beq.n	8003e84 <dll_scan_timeout+0x1c>
        rm2_rxtimeout_isr();
 8003e7e:	f7fd fb9b 	bl	80015b8 <rm2_rxtimeout_isr>
}
 8003e82:	bd08      	pop	{r3, pc}
        sys.task[TASK_radio].event = 5;
 8003e84:	4805      	ldr	r0, [pc, #20]	; (8003e9c <dll_scan_timeout+0x34>)
 8003e86:	2305      	movs	r3, #5
 8003e88:	f800 3f04 	strb.w	r3, [r0, #4]!
        sys_task_setnext(&sys.task[TASK_radio], 128);
 8003e8c:	2180      	movs	r1, #128	; 0x80
 8003e8e:	f002 fcdb 	bl	8006848 <sys_task_setnext>
}
 8003e92:	e7f6      	b.n	8003e82 <dll_scan_timeout+0x1a>
 8003e94:	200026c4 	.word	0x200026c4
 8003e98:	20002654 	.word	0x20002654
 8003e9c:	20002db4 	.word	0x20002db4

08003ea0 <dll_m2advp_refresh>:
OT_WEAK void dll_m2advp_refresh(void) {
 8003ea0:	b510      	push	{r4, lr}
    countdown = rm2_flood_getcounter();
 8003ea2:	f7fd f9d7 	bl	8001254 <rm2_flood_getcounter>
 8003ea6:	4604      	mov	r4, r0
    if (countdown < rm2_bgpkt_duration()) {
 8003ea8:	f7fd fdf6 	bl	8001a98 <rm2_bgpkt_duration>
 8003eac:	4284      	cmp	r4, r0
 8003eae:	db03      	blt.n	8003eb8 <dll_m2advp_refresh+0x18>
        m2advp_update(countdown);
 8003eb0:	b2a0      	uxth	r0, r4
 8003eb2:	f000 fc5b 	bl	800476c <m2advp_update>
}
 8003eb6:	bd10      	pop	{r4, pc}
        dll.counter = (countdown < 0) ? 0 : countdown;
 8003eb8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <dll_m2advp_refresh+0x2c>)
 8003ebe:	805c      	strh	r4, [r3, #2]
        m2advp_close();
 8003ec0:	f000 fc64 	bl	800478c <m2advp_close>
        rm2_flood_txstop();
 8003ec4:	f7fd f9cc 	bl	8001260 <rm2_flood_txstop>
 8003ec8:	e7f5      	b.n	8003eb6 <dll_m2advp_refresh+0x16>
 8003eca:	bf00      	nop
 8003ecc:	20002654 	.word	0x20002654

08003ed0 <dll_rfevt_btx>:
OT_WEAK void dll_rfevt_btx(ot_int flcode, ot_int scratch) {
 8003ed0:	b538      	push	{r3, r4, r5, lr}
    __DEBUG_ERRCODE_EVAL(=130);
 8003ed2:	4b1f      	ldr	r3, [pc, #124]	; (8003f50 <dll_rfevt_btx+0x80>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	801a      	strh	r2, [r3, #0]
 8003ed8:	2282      	movs	r2, #130	; 0x82
 8003eda:	805a      	strh	r2, [r3, #2]
    switch (flcode) {
 8003edc:	2802      	cmp	r0, #2
 8003ede:	d013      	beq.n	8003f08 <dll_rfevt_btx+0x38>
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	2803      	cmp	r0, #3
 8003ee4:	d016      	beq.n	8003f14 <dll_rfevt_btx+0x44>
 8003ee6:	b390      	cbz	r0, 8003f4e <dll_rfevt_btx+0x7e>
            __DEBUG_ERRCODE_EVAL(=133);
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <dll_rfevt_btx+0x80>)
 8003eea:	2285      	movs	r2, #133	; 0x85
 8003eec:	805a      	strh	r2, [r3, #2]
            dll_idle();
 8003eee:	f7ff fcc7 	bl	8003880 <dll_idle>
            dirty_adv_check = (session_netstate() & M2_NETFLAG_STREAM);
 8003ef2:	f000 febf 	bl	8004c74 <session_netstate>
 8003ef6:	4605      	mov	r5, r0
            session_pop();// pop the BG session
 8003ef8:	f000 fe46 	bl	8004b88 <session_pop>
            if (dirty_adv_check) {
 8003efc:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003f00:	d01a      	beq.n	8003f38 <dll_rfevt_btx+0x68>
                session_scrap();
 8003f02:	f000 fe2f 	bl	8004b64 <session_scrap>
 8003f06:	e017      	b.n	8003f38 <dll_rfevt_btx+0x68>
            __DEBUG_ERRCODE_EVAL(=131);
 8003f08:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <dll_rfevt_btx+0x80>)
 8003f0a:	2283      	movs	r2, #131	; 0x83
 8003f0c:	805a      	strh	r2, [r3, #2]
            dll_m2advp_refresh();
 8003f0e:	f7ff ffc7 	bl	8003ea0 <dll_m2advp_refresh>
        } return; // skip termination section
 8003f12:	e01c      	b.n	8003f4e <dll_rfevt_btx+0x7e>
            __DEBUG_ERRCODE_EVAL(=132);
 8003f14:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <dll_rfevt_btx+0x80>)
 8003f16:	2284      	movs	r2, #132	; 0x84
 8003f18:	805a      	strh	r2, [r3, #2]
            follower                = session_follower();
 8003f1a:	f000 fe93 	bl	8004c44 <session_follower>
            follower->counter       = dll.counter;
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <dll_rfevt_btx+0x84>)
 8003f20:	885a      	ldrh	r2, [r3, #2]
 8003f22:	8082      	strh	r2, [r0, #4]
            sys.task_RFA.event      = 0;
 8003f24:	4a0c      	ldr	r2, [pc, #48]	; (8003f58 <dll_rfevt_btx+0x88>)
 8003f26:	2100      	movs	r1, #0
 8003f28:	7111      	strb	r1, [r2, #4]
            dll.comm.tc             = 2;    //TI2CLK(2);
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	621a      	str	r2, [r3, #32]
            dll.comm.csmaca_params  = (M2_CSMACA_NOCSMA | M2_CSMACA_MACCA);
 8003f2e:	223c      	movs	r2, #60	; 0x3c
 8003f30:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            session_pop();
 8003f34:	f000 fe28 	bl	8004b88 <session_pop>
    DLL_SIG_RFTERMINATE(sys.task_RFA.event, flcode);
 8003f38:	4d07      	ldr	r5, [pc, #28]	; (8003f58 <dll_rfevt_btx+0x88>)
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	7928      	ldrb	r0, [r5, #4]
 8003f3e:	f7fc fbbf 	bl	80006c0 <dll_sig_rfterminate>
    sys.task_RFA.event = 0;
 8003f42:	2100      	movs	r1, #0
 8003f44:	4628      	mov	r0, r5
 8003f46:	f800 1f04 	strb.w	r1, [r0, #4]!
    sys_preempt(&sys.task_RFA, 0);
 8003f4a:	f002 fce9 	bl	8006920 <sys_preempt>
}
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	20002dfc 	.word	0x20002dfc
 8003f54:	20002654 	.word	0x20002654
 8003f58:	20002db4 	.word	0x20002db4

08003f5c <dll_set_defaults>:
OT_WEAK void dll_set_defaults(m2session* s_active) {
 8003f5c:	b510      	push	{r4, lr}
 8003f5e:	4604      	mov	r4, r0
    ot_u16 follower         = session_follower_wait();
 8003f60:	f000 fe7c 	bl	8004c5c <session_follower_wait>
    dll.comm.tc             = follower >> 3;
 8003f64:	f3c0 02cf 	ubfx	r2, r0, #3, #16
 8003f68:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <dll_set_defaults+0x4c>)
 8003f6a:	621a      	str	r2, [r3, #32]
    dll.comm.rx_timeout     = follower;
 8003f6c:	6298      	str	r0, [r3, #40]	; 0x28
    dll.comm.csmaca_params  = M2_CSMACA_MACCA;
 8003f6e:	2238      	movs	r2, #56	; 0x38
 8003f70:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    dll.comm.redundants     = ((s_active->netstate & M2_NETSTATE_RX) == 0);
 8003f74:	79e2      	ldrb	r2, [r4, #7]
 8003f76:	0952      	lsrs	r2, r2, #5
 8003f78:	f082 0201 	eor.w	r2, r2, #1
 8003f7c:	f002 0201 	and.w	r2, r2, #1
 8003f80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    dll.comm.tx_channels    = 1;
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    dll.comm.rx_channels    = 1;
 8003f8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    dll.comm.tx_chanlist    = &dll.comm.scratch[0];
 8003f8e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003f92:	635a      	str	r2, [r3, #52]	; 0x34
    dll.comm.rx_chanlist    = &dll.comm.scratch[1];
 8003f94:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 8003f98:	639a      	str	r2, [r3, #56]	; 0x38
    dll.comm.scratch[0]     = s_active->channel;
 8003f9a:	79a2      	ldrb	r2, [r4, #6]
 8003f9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    dll.comm.scratch[1]     = s_active->channel;
 8003fa0:	79a2      	ldrb	r2, [r4, #6]
 8003fa2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8003fa6:	bd10      	pop	{r4, pc}
 8003fa8:	20002654 	.word	0x20002654

08003fac <dll_default_applet>:
OT_WEAK void dll_default_applet(m2session* active) {
 8003fac:	b508      	push	{r3, lr}
    dll_set_defaults(active);
 8003fae:	f7ff ffd5 	bl	8003f5c <dll_set_defaults>
}
 8003fb2:	bd08      	pop	{r3, pc}

08003fb4 <dll_scan_applet>:
OT_WEAK void dll_scan_applet(m2session* active) {
 8003fb4:	b510      	push	{r4, lr}
 8003fb6:	4604      	mov	r4, r0
    dll_set_defaults(active);
 8003fb8:	f7ff ffd0 	bl	8003f5c <dll_set_defaults>
    scan_code       = active->extra;
 8003fbc:	7a20      	ldrb	r0, [r4, #8]
    active->extra   = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	7223      	strb	r3, [r4, #8]
    timeout         = otutils_calc_timeout(scan_code);
 8003fc2:	f002 f81a 	bl	8005ffa <otutils_calc_timeout>
    if (timeout > 65535) {
 8003fc6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003fca:	db01      	blt.n	8003fd0 <dll_scan_applet+0x1c>
        timeout = 65535;
 8003fcc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    dll.comm.rx_timeout = (ot_u16)timeout;
 8003fd0:	b280      	uxth	r0, r0
 8003fd2:	4b01      	ldr	r3, [pc, #4]	; (8003fd8 <dll_scan_applet+0x24>)
 8003fd4:	6298      	str	r0, [r3, #40]	; 0x28
}
 8003fd6:	bd10      	pop	{r4, pc}
 8003fd8:	20002654 	.word	0x20002654

08003fdc <dll_beacon_applet>:
OT_WEAK void dll_beacon_applet(m2session* active) {
 8003fdc:	b570      	push	{r4, r5, r6, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	4604      	mov	r4, r0
    b_params        = active->extra;
 8003fe2:	7a05      	ldrb	r5, [r0, #8]
    active->extra   = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	7203      	strb	r3, [r0, #8]
    dll_set_defaults(active);
 8003fe8:	f7ff ffb8 	bl	8003f5c <dll_set_defaults>
    dll.comm.tc             = M2_PARAM_BEACON_TCA;  //TI2CLK(M2_PARAM_BEACON_TCA);
 8003fec:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <dll_beacon_applet+0x11c>)
 8003fee:	220c      	movs	r2, #12
 8003ff0:	621a      	str	r2, [r3, #32]
    dll.comm.rx_timeout     = (b_params & 0x02) ? 0 : rm2_default_tgd(active->channel);
 8003ff2:	f015 0f02 	tst.w	r5, #2
 8003ff6:	d04a      	beq.n	800408e <dll_beacon_applet+0xb2>
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	4b3f      	ldr	r3, [pc, #252]	; (80040f8 <dll_beacon_applet+0x11c>)
 8003ffc:	6298      	str	r0, [r3, #40]	; 0x28
    dll.comm.csmaca_params |= (b_params & 0x04) | M2_CSMACA_NA2P | M2_CSMACA_MACCA;
 8003ffe:	f005 0204 	and.w	r2, r5, #4
 8004002:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8004006:	430a      	orrs	r2, r1
 8004008:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800400c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    dll.comm.redundants     = dll.netconf.b_attempts;
 8004010:	7f5a      	ldrb	r2, [r3, #29]
 8004012:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    if (dll.netconf.btemp[0] & 0x80) {
 8004016:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800401a:	2b00      	cmp	r3, #0
 800401c:	db3b      	blt.n	8004096 <dll_beacon_applet+0xba>
		m2np_header(active, M2RT_BROADCAST, M2FI_FRDIALOG);
 800401e:	2200      	movs	r2, #0
 8004020:	2101      	movs	r1, #1
 8004022:	4620      	mov	r0, r4
 8004024:	f000 f9ca 	bl	80043bc <m2np_header>
		cmd_ext     = (b_params & 0x06);                            // Normal extension bits
 8004028:	f005 0606 	and.w	r6, r5, #6
		cmd_ext    |= (dll.netconf.btemp[4] == 0) << 6;             // Announcement No-File bit
 800402c:	4b32      	ldr	r3, [pc, #200]	; (80040f8 <dll_beacon_applet+0x11c>)
 800402e:	7a9b      	ldrb	r3, [r3, #10]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d157      	bne.n	80040e4 <dll_beacon_applet+0x108>
 8004034:	2340      	movs	r3, #64	; 0x40
		cmd_code    = 0x20 | (b_params & 1) | ((cmd_ext!=0) << 7);
 8004036:	f005 0401 	and.w	r4, r5, #1
 800403a:	f044 0420 	orr.w	r4, r4, #32
 800403e:	b264      	sxtb	r4, r4
 8004040:	431e      	orrs	r6, r3
 8004042:	d051      	beq.n	80040e8 <dll_beacon_applet+0x10c>
 8004044:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004048:	431c      	orrs	r4, r3
 800404a:	b2e4      	uxtb	r4, r4
		q_writebyte(&txq, cmd_code);
 800404c:	4621      	mov	r1, r4
 800404e:	482b      	ldr	r0, [pc, #172]	; (80040fc <dll_beacon_applet+0x120>)
 8004050:	f001 ff18 	bl	8005e84 <q_writebyte>
		if (cmd_code) {
 8004054:	2c00      	cmp	r4, #0
 8004056:	d149      	bne.n	80040ec <dll_beacon_applet+0x110>
		q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
 8004058:	4c27      	ldr	r4, [pc, #156]	; (80040f8 <dll_beacon_applet+0x11c>)
 800405a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800405e:	4827      	ldr	r0, [pc, #156]	; (80040fc <dll_beacon_applet+0x120>)
 8004060:	f001 ff10 	bl	8005e84 <q_writebyte>
		if (dll.netconf.btemp[4] != 0) {
 8004064:	7aa3      	ldrb	r3, [r4, #10]
 8004066:	b173      	cbz	r3, 8004086 <dll_beacon_applet+0xaa>
			q_init(&beacon_queue, &dll.netconf.btemp[4], 4);
 8004068:	2204      	movs	r2, #4
 800406a:	f104 010a 	add.w	r1, r4, #10
 800406e:	eb0d 0002 	add.w	r0, sp, r2
 8004072:	f001 fee9 	bl	8005e48 <q_init>
			if (m2qp_isf_call((b_params & 1), &beacon_queue, AUTH_GUEST) < 0) {
 8004076:	4a22      	ldr	r2, [pc, #136]	; (8004100 <dll_beacon_applet+0x124>)
 8004078:	a901      	add	r1, sp, #4
 800407a:	f005 0001 	and.w	r0, r5, #1
 800407e:	f001 f91b 	bl	80052b8 <m2qp_isf_call>
 8004082:	2800      	cmp	r0, #0
 8004084:	db29      	blt.n	80040da <dll_beacon_applet+0xfe>
		m2np_footer();
 8004086:	f000 fa6b 	bl	8004560 <m2np_footer>
}
 800408a:	b006      	add	sp, #24
 800408c:	bd70      	pop	{r4, r5, r6, pc}
    dll.comm.rx_timeout     = (b_params & 0x02) ? 0 : rm2_default_tgd(active->channel);
 800408e:	79a0      	ldrb	r0, [r4, #6]
 8004090:	f7fd fcfa 	bl	8001a88 <rm2_default_tgd>
 8004094:	e7b1      	b.n	8003ffa <dll_beacon_applet+0x1e>
    	ot_memset(beacon_tgram, 0, 8);
 8004096:	2208      	movs	r2, #8
 8004098:	2100      	movs	r1, #0
 800409a:	a801      	add	r0, sp, #4
 800409c:	f003 faa4 	bl	80075e8 <ot_memset>
    	active->netstate |= M2_NETFLAG_BG;
 80040a0:	79e3      	ldrb	r3, [r4, #7]
 80040a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a6:	71e3      	strb	r3, [r4, #7]
    	fp = vl_open(VL_ISF_BLOCKID, dll.netconf.btemp[5], VL_ACCESS_R, AUTH_GUEST);
 80040a8:	4b15      	ldr	r3, [pc, #84]	; (8004100 <dll_beacon_applet+0x124>)
 80040aa:	2224      	movs	r2, #36	; 0x24
 80040ac:	4912      	ldr	r1, [pc, #72]	; (80040f8 <dll_beacon_applet+0x11c>)
 80040ae:	7ac9      	ldrb	r1, [r1, #11]
 80040b0:	2003      	movs	r0, #3
 80040b2:	f002 f975 	bl	80063a0 <vl_open>
    	if (fp != NULL) {
 80040b6:	4604      	mov	r4, r0
 80040b8:	b138      	cbz	r0, 80040ca <dll_beacon_applet+0xee>
    		vl_load(fp, dll.netconf.btemp[4], beacon_tgram);
 80040ba:	aa01      	add	r2, sp, #4
 80040bc:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <dll_beacon_applet+0x11c>)
 80040be:	7a99      	ldrb	r1, [r3, #10]
 80040c0:	f002 f9c9 	bl	8006456 <vl_load>
    		vl_close(fp);
 80040c4:	4620      	mov	r0, r4
 80040c6:	f002 fa23 	bl	8006510 <vl_close>
    	if (otapi_new_telegram(token, dll.netconf.btemp[5], beacon_tgram) == 0) {
 80040ca:	aa01      	add	r2, sp, #4
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <dll_beacon_applet+0x11c>)
 80040ce:	7ad9      	ldrb	r1, [r3, #11]
 80040d0:	480c      	ldr	r0, [pc, #48]	; (8004104 <dll_beacon_applet+0x128>)
 80040d2:	f7ff f95f 	bl	8003394 <otapi_new_telegram>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d1d7      	bne.n	800408a <dll_beacon_applet+0xae>
	session_pop();
 80040da:	f000 fd55 	bl	8004b88 <session_pop>
	dll_idle();
 80040de:	f7ff fbcf 	bl	8003880 <dll_idle>
	return;
 80040e2:	e7d2      	b.n	800408a <dll_beacon_applet+0xae>
		cmd_ext    |= (dll.netconf.btemp[4] == 0) << 6;             // Announcement No-File bit
 80040e4:	2300      	movs	r3, #0
 80040e6:	e7a6      	b.n	8004036 <dll_beacon_applet+0x5a>
		cmd_code    = 0x20 | (b_params & 1) | ((cmd_ext!=0) << 7);
 80040e8:	2300      	movs	r3, #0
 80040ea:	e7ad      	b.n	8004048 <dll_beacon_applet+0x6c>
			q_writebyte(&txq, cmd_ext);
 80040ec:	4631      	mov	r1, r6
 80040ee:	4803      	ldr	r0, [pc, #12]	; (80040fc <dll_beacon_applet+0x120>)
 80040f0:	f001 fec8 	bl	8005e84 <q_writebyte>
 80040f4:	e7b0      	b.n	8004058 <dll_beacon_applet+0x7c>
 80040f6:	bf00      	nop
 80040f8:	20002654 	.word	0x20002654
 80040fc:	20002d74 	.word	0x20002d74
 8004100:	20002744 	.word	0x20002744
 8004104:	01020304 	.word	0x01020304

08004108 <sub_default_idle>:
}
 8004108:	2001      	movs	r0, #1
 800410a:	4770      	bx	lr

0800410c <sub_dll_flush>:
void sub_dll_flush(void) {
 800410c:	b508      	push	{r3, lr}
	if (radio.state != RADIO_Idle) {
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <sub_dll_flush+0x3c>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	b9b3      	cbnz	r3, 8004142 <sub_dll_flush+0x36>
    rm2_mac_configure();
 8004114:	f7fd f87a 	bl	800120c <rm2_mac_configure>
    task = &sys.task_HSS;
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <sub_dll_flush+0x40>)
        task->cursor   = 0;
 800411a:	2200      	movs	r2, #0
 800411c:	705a      	strb	r2, [r3, #1]
        task->reserve  = 1;
 800411e:	2101      	movs	r1, #1
 8004120:	7099      	strb	r1, [r3, #2]
        task->latency  = 255;
 8004122:	21ff      	movs	r1, #255	; 0xff
 8004124:	70d9      	strb	r1, [r3, #3]
        task->nextevent= 0;
 8004126:	605a      	str	r2, [r3, #4]
        task++;
 8004128:	3308      	adds	r3, #8
	} while (task < &sys.task[SSS_INDEX+1]);
 800412a:	4a09      	ldr	r2, [pc, #36]	; (8004150 <sub_dll_flush+0x44>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d3f4      	bcc.n	800411a <sub_dll_flush+0xe>
    session_init();
 8004130:	f000 fc82 	bl	8004a38 <session_init>
    dll.idle_state  = sub_default_idle();
 8004134:	f7ff ffe8 	bl	8004108 <sub_default_idle>
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <sub_dll_flush+0x48>)
 800413a:	7018      	strb	r0, [r3, #0]
    dll_idle();
 800413c:	f7ff fba0 	bl	8003880 <dll_idle>
}
 8004140:	bd08      	pop	{r3, pc}
		rm2_kill();
 8004142:	f7fd fa7d 	bl	8001640 <rm2_kill>
 8004146:	e7e5      	b.n	8004114 <sub_dll_flush+0x8>
 8004148:	200026c4 	.word	0x200026c4
 800414c:	20002dc8 	.word	0x20002dc8
 8004150:	20002de0 	.word	0x20002de0
 8004154:	20002654 	.word	0x20002654

08004158 <dll_refresh>:
OT_WEAK void dll_refresh(void) {
 8004158:	b538      	push	{r3, r4, r5, lr}
    fp = ISF_open_su(0);
 800415a:	2000      	movs	r0, #0
 800415c:	f002 fa10 	bl	8006580 <ISF_open_su>
 8004160:	4605      	mov	r5, r0
    vl_load(fp, 10, dll.netconf.vid);
 8004162:	4c0f      	ldr	r4, [pc, #60]	; (80041a0 <dll_refresh+0x48>)
 8004164:	4622      	mov	r2, r4
 8004166:	210a      	movs	r1, #10
 8004168:	f002 f975 	bl	8006456 <vl_load>
    dll.netconf.dd_flags    = 0;
 800416c:	3c16      	subs	r4, #22
 800416e:	2300      	movs	r3, #0
 8004170:	7723      	strb	r3, [r4, #28]
    dll.netconf.hold_limit  = PLATFORM_ENDIAN16(dll.netconf.hold_limit);
 8004172:	8be3      	ldrh	r3, [r4, #30]
 8004174:	ba5b      	rev16	r3, r3
 8004176:	83e3      	strh	r3, [r4, #30]
    vl_close(fp);
 8004178:	4628      	mov	r0, r5
 800417a:	f002 f9c9 	bl	8006510 <vl_close>
    fp = ISF_open_su(1);
 800417e:	2001      	movs	r0, #1
 8004180:	f002 f9fe 	bl	8006580 <ISF_open_su>
 8004184:	4605      	mov	r5, r0
    vl_load(fp, 8, dll.netconf.uid);
 8004186:	f104 020e 	add.w	r2, r4, #14
 800418a:	2108      	movs	r1, #8
 800418c:	f002 f963 	bl	8006456 <vl_load>
    vl_close(fp);
 8004190:	4628      	mov	r0, r5
 8004192:	f002 f9bd 	bl	8006510 <vl_close>
    dll_refresh_rts();
 8004196:	f7ff fb71 	bl	800387c <dll_refresh_rts>
    sub_dll_flush();
 800419a:	f7ff ffb7 	bl	800410c <sub_dll_flush>
}
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	2000266a 	.word	0x2000266a

080041a4 <dll_init>:
OT_WEAK void dll_init(void) {
 80041a4:	b508      	push	{r3, lr}
    radio_init();
 80041a6:	f7fc ffb3 	bl	8001110 <radio_init>
    network_init();
 80041aa:	f000 f8f1 	bl	8004390 <network_init>
    m2qp_init();
 80041ae:	f000 fdfb 	bl	8004da8 <m2qp_init>
    auth_init();
 80041b2:	f001 fd29 	bl	8005c08 <auth_init>
    dll_refresh();
 80041b6:	f7ff ffcf 	bl	8004158 <dll_refresh>
}
 80041ba:	bd08      	pop	{r3, pc}

080041bc <dll_systask_rf>:
OT_WEAK void dll_systask_rf(ot_task task) {
 80041bc:	b510      	push	{r4, lr}
        switch (sys.task_RFA.event) {
 80041be:	4b12      	ldr	r3, [pc, #72]	; (8004208 <dll_systask_rf+0x4c>)
 80041c0:	791b      	ldrb	r3, [r3, #4]
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d016      	beq.n	80041f4 <dll_systask_rf+0x38>
 80041c6:	4604      	mov	r4, r0
 80041c8:	d805      	bhi.n	80041d6 <dll_systask_rf+0x1a>
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d00c      	beq.n	80041e8 <dll_systask_rf+0x2c>
 80041ce:	d80e      	bhi.n	80041ee <dll_systask_rf+0x32>
            case 0: dll_refresh();          break;
 80041d0:	f7ff ffc2 	bl	8004158 <dll_refresh>
}
 80041d4:	bd10      	pop	{r4, pc}
        switch (sys.task_RFA.event) {
 80041d6:	2b06      	cmp	r3, #6
 80041d8:	d012      	beq.n	8004200 <dll_systask_rf+0x44>
 80041da:	d30e      	bcc.n	80041fa <dll_systask_rf+0x3e>
 80041dc:	2bff      	cmp	r3, #255	; 0xff
 80041de:	d1f9      	bne.n	80041d4 <dll_systask_rf+0x18>
            case 255: task->cursor = radio_getpwrcode(); break;
 80041e0:	f7fd fbf8 	bl	80019d4 <radio_getpwrcode>
 80041e4:	7060      	strb	r0, [r4, #1]
}
 80041e6:	e7f5      	b.n	80041d4 <dll_systask_rf+0x18>
            case 1: dll_processing();       break;
 80041e8:	f7ff fcf8 	bl	8003bdc <dll_processing>
 80041ec:	e7f2      	b.n	80041d4 <dll_systask_rf+0x18>
            case 2: dll_activate();         break;
 80041ee:	f7ff fe19 	bl	8003e24 <dll_activate>
 80041f2:	e7ef      	b.n	80041d4 <dll_systask_rf+0x18>
            case 3: dll_scan_timeout();    break;
 80041f4:	f7ff fe38 	bl	8003e68 <dll_scan_timeout>
 80041f8:	e7ec      	b.n	80041d4 <dll_systask_rf+0x18>
            case 5: rm2_kill();             break;
 80041fa:	f7fd fa21 	bl	8001640 <rm2_kill>
 80041fe:	e7e9      	b.n	80041d4 <dll_systask_rf+0x18>
            case 6: rm2_decode_s2();        break;
 8004200:	f7fd f984 	bl	800150c <rm2_decode_s2>
 8004204:	e7e6      	b.n	80041d4 <dll_systask_rf+0x18>
 8004206:	bf00      	nop
 8004208:	20002db4 	.word	0x20002db4

0800420c <dll_systask_holdscan>:
OT_WEAK void dll_systask_holdscan(ot_task task) {
 800420c:	b508      	push	{r3, lr}
    if (task->event == 0) return;
 800420e:	7803      	ldrb	r3, [r0, #0]
 8004210:	b16b      	cbz	r3, 800422e <dll_systask_holdscan+0x22>
    if (dll.counter != 0) {
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <dll_systask_holdscan+0x38>)
 8004214:	885b      	ldrh	r3, [r3, #2]
 8004216:	b95b      	cbnz	r3, 8004230 <dll_systask_holdscan+0x24>
        dll.idle_state      = sub_default_idle();
 8004218:	f7ff ff76 	bl	8004108 <sub_default_idle>
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <dll_systask_holdscan+0x38>)
 800421e:	7018      	strb	r0, [r3, #0]
        sys.task_HSS.event  = 0;
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <dll_systask_holdscan+0x3c>)
 8004222:	2200      	movs	r2, #0
 8004224:	751a      	strb	r2, [r3, #20]
        sys.task_HSS.cursor = 0;
 8004226:	755a      	strb	r2, [r3, #21]
        sys.task_SSS.event  = 5;
 8004228:	2205      	movs	r2, #5
 800422a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800422e:	bd08      	pop	{r3, pc}
        dll.counter -= (sys.task_HSS.cursor == 0);
 8004230:	4a05      	ldr	r2, [pc, #20]	; (8004248 <dll_systask_holdscan+0x3c>)
 8004232:	7d52      	ldrb	r2, [r2, #21]
 8004234:	2a00      	cmp	r2, #0
 8004236:	bf08      	it	eq
 8004238:	3b01      	subeq	r3, #1
 800423a:	4a02      	ldr	r2, [pc, #8]	; (8004244 <dll_systask_holdscan+0x38>)
 800423c:	8053      	strh	r3, [r2, #2]
        dll_systask_sleepscan(task);
 800423e:	f7ff fcfd 	bl	8003c3c <dll_systask_sleepscan>
 8004242:	e7f4      	b.n	800422e <dll_systask_holdscan+0x22>
 8004244:	20002654 	.word	0x20002654
 8004248:	20002db4 	.word	0x20002db4

0800424c <crc0B_table>:
    0x03, 0x08, 0x15, 0x1E, 0x04, 0x0F, 0x12, 0x19,
    0x0D, 0x06, 0x1B, 0x10, 0x0A, 0x01, 0x1C, 0x17
};

ot_u8 crc0B_table(ot_u8* data) {
    ot_u8 a = (data[0] >> 3);
 800424c:	7802      	ldrb	r2, [r0, #0]
 800424e:	08d1      	lsrs	r1, r2, #3
    ot_u8 b = ((data[1] >> 6) | (data[0] << 2)) & 0x1f;
 8004250:	7843      	ldrb	r3, [r0, #1]
 8004252:	099b      	lsrs	r3, r3, #6
 8004254:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8004258:	f003 031f 	and.w	r3, r3, #31
    return crc0B_5t5[ crc0B_0t5[a] ^ b ];
 800425c:	4a03      	ldr	r2, [pc, #12]	; (800426c <crc0B_table+0x20>)
 800425e:	5c51      	ldrb	r1, [r2, r1]
 8004260:	404b      	eors	r3, r1
 8004262:	441a      	add	r2, r3
}
 8004264:	f892 0020 	ldrb.w	r0, [r2, #32]
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000114 	.word	0x20000114

08004270 <em2_add_crc5>:

void em2_add_crc5() {
 8004270:	b510      	push	{r4, lr}
    txq.front[1] &= ~0x1f;
 8004272:	4a07      	ldr	r2, [pc, #28]	; (8004290 <em2_add_crc5+0x20>)
 8004274:	68d1      	ldr	r1, [r2, #12]
 8004276:	784b      	ldrb	r3, [r1, #1]
 8004278:	f023 031f 	bic.w	r3, r3, #31
 800427c:	704b      	strb	r3, [r1, #1]
    txq.front[1] |= crc0B_table(txq.front);
 800427e:	68d4      	ldr	r4, [r2, #12]
 8004280:	4620      	mov	r0, r4
 8004282:	f7ff ffe3 	bl	800424c <crc0B_table>
 8004286:	7863      	ldrb	r3, [r4, #1]
 8004288:	4318      	orrs	r0, r3
 800428a:	7060      	strb	r0, [r4, #1]
}
 800428c:	bd10      	pop	{r4, pc}
 800428e:	bf00      	nop
 8004290:	20002d74 	.word	0x20002d74

08004294 <em2_check_crc5>:

ot_u8 em2_check_crc5() {
 8004294:	b510      	push	{r4, lr}
    ot_u8 crc5_val;
    crc5_val = crc0B_table(rxq.front);
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <em2_check_crc5+0x18>)
 8004298:	68dc      	ldr	r4, [r3, #12]
 800429a:	4620      	mov	r0, r4
 800429c:	f7ff ffd6 	bl	800424c <crc0B_table>
    return ((rxq.front[1] & 0x1f) - crc5_val);
 80042a0:	7863      	ldrb	r3, [r4, #1]
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	1a18      	subs	r0, r3, r0
}
 80042a8:	b2c0      	uxtb	r0, r0
 80042aa:	bd10      	pop	{r4, pc}
 80042ac:	20002d60 	.word	0x20002d60

080042b0 <sub_apply_subnet_flags>:
#include <m2/dll.h>
#include <m2/m2task.h>
#include <m2/session.h>


void sub_apply_subnet_flags(session_tmpl* s_tmpl) {
 80042b0:	b410      	push	{r4}
    // Apply custom-masked subnet and flags to session (typically unused)
    s_tmpl->subnet  = (dll.netconf.subnet & ~s_tmpl->subnetmask) | \
 80042b2:	490c      	ldr	r1, [pc, #48]	; (80042e4 <sub_apply_subnet_flags+0x34>)
 80042b4:	f991 3018 	ldrsb.w	r3, [r1, #24]
 80042b8:	78c2      	ldrb	r2, [r0, #3]
 80042ba:	ea23 0302 	bic.w	r3, r3, r2
 80042be:	b25b      	sxtb	r3, r3
                                        (s_tmpl->subnet & s_tmpl->subnetmask);
 80042c0:	7884      	ldrb	r4, [r0, #2]
    s_tmpl->subnet  = (dll.netconf.subnet & ~s_tmpl->subnetmask) | \
 80042c2:	4022      	ands	r2, r4
 80042c4:	4313      	orrs	r3, r2
 80042c6:	7083      	strb	r3, [r0, #2]
    s_tmpl->flags   = (dll.netconf.dd_flags & ~s_tmpl->flagmask) | \
 80042c8:	f991 301c 	ldrsb.w	r3, [r1, #28]
 80042cc:	7942      	ldrb	r2, [r0, #5]
 80042ce:	ea23 0302 	bic.w	r3, r3, r2
 80042d2:	b25b      	sxtb	r3, r3
                                        (s_tmpl->flags & s_tmpl->flagmask);
 80042d4:	7901      	ldrb	r1, [r0, #4]
    s_tmpl->flags   = (dll.netconf.dd_flags & ~s_tmpl->flagmask) | \
 80042d6:	400a      	ands	r2, r1
 80042d8:	4313      	orrs	r3, r2
 80042da:	7103      	strb	r3, [r0, #4]
}
 80042dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20002654 	.word	0x20002654

080042e8 <sub_newtask>:


m2session* sub_newtask(session_tmpl* s_tmpl, ot_app applet, ot_u16 offset) {
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	4604      	mov	r4, r0
 80042ec:	460d      	mov	r5, r1
 80042ee:	4616      	mov	r6, r2
    m2session* next;
    
    /// Make sure there is a free session... it is easiest this way
    if (session_numfree() < 1) {
 80042f0:	f000 fc7c 	bl	8004bec <session_numfree>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	dd0f      	ble.n	8004318 <sub_newtask+0x30>
        return NULL;
    }
    
    /// Create new session (session always begins with req tx)
    next = session_new(applet, offset, s_tmpl->channel, (M2_NETSTATE_INIT | M2_NETSTATE_REQTX));
 80042f8:	2308      	movs	r3, #8
 80042fa:	7862      	ldrb	r2, [r4, #1]
 80042fc:	4631      	mov	r1, r6
 80042fe:	4628      	mov	r0, r5
 8004300:	f000 fbaa 	bl	8004a58 <session_new>
 8004304:	4605      	mov	r5, r0
    sub_apply_subnet_flags(s_tmpl);
 8004306:	4620      	mov	r0, r4
 8004308:	f7ff ffd2 	bl	80042b0 <sub_apply_subnet_flags>
    next->subnet    = s_tmpl->subnet;
 800430c:	78a3      	ldrb	r3, [r4, #2]
 800430e:	72ab      	strb	r3, [r5, #10]
    next->flags     = s_tmpl->flags;
 8004310:	7923      	ldrb	r3, [r4, #4]
 8004312:	72eb      	strb	r3, [r5, #11]

    return next;
}
 8004314:	4628      	mov	r0, r5
 8004316:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 8004318:	2500      	movs	r5, #0
 800431a:	e7fb      	b.n	8004314 <sub_newtask+0x2c>

0800431c <m2task_immediate>:



m2session* m2task_immediate(session_tmpl* s_tmpl, ot_app applet) {
 800431c:	b508      	push	{r3, lr}
/// This call doesn't actually cause the session to occur immediately,
/// but it will happen immediately following any sessions happenning 
/// at this very moment.
    return sub_newtask(s_tmpl, applet, 0);
 800431e:	2200      	movs	r2, #0
 8004320:	f7ff ffe2 	bl	80042e8 <sub_newtask>
}
 8004324:	bd08      	pop	{r3, pc}
	...

08004328 <m2task_advertise>:





m2session* m2task_advertise(advert_tmpl* adv_tmpl, session_tmpl* s_tmpl, ot_app applet) {
 8004328:	b570      	push	{r4, r5, r6, lr}
 800432a:	4605      	mov	r5, r0
 800432c:	460c      	mov	r4, r1
 800432e:	4616      	mov	r6, r2
/// creates two sessions: one for the flood and one for the request.
#   define _FLOOD_NETSTATE  (M2_NETFLAG_BG | M2_NETFLAG_STREAM | M2_NETSTATE_INIT | M2_NETSTATE_REQTX)
    m2session* next;
    
    /// Make sure there are at least two free sessions
    if (session_numfree() < 2) {
 8004330:	f000 fc5c 	bl	8004bec <session_numfree>
 8004334:	2801      	cmp	r0, #1
 8004336:	dd1a      	ble.n	800436e <m2task_advertise+0x46>
        return NULL;
    }

    /// Apply session flags
    sub_apply_subnet_flags(s_tmpl);
 8004338:	4620      	mov	r0, r4
 800433a:	f7ff ffb9 	bl	80042b0 <sub_apply_subnet_flags>
    
    /// Only add the flood if the user isn't an idiot (or an algorithm of some sort)
    if (adv_tmpl->duration != 0) {
 800433e:	88ab      	ldrh	r3, [r5, #4]
 8004340:	b953      	cbnz	r3, 8004358 <m2task_advertise+0x30>
        next        = session_new(&dll_default_applet, 0, adv_tmpl->channel, _FLOOD_NETSTATE);
        next->subnet= s_tmpl->subnet;
        next->flags = s_tmpl->flags;
    }
    
    next        = session_new(applet, adv_tmpl->duration, s_tmpl->channel, M2_NETSTATE_REQTX);
 8004342:	2300      	movs	r3, #0
 8004344:	7862      	ldrb	r2, [r4, #1]
 8004346:	88a9      	ldrh	r1, [r5, #4]
 8004348:	4630      	mov	r0, r6
 800434a:	f000 fb85 	bl	8004a58 <session_new>
    next->subnet= s_tmpl->subnet;
 800434e:	78a3      	ldrb	r3, [r4, #2]
 8004350:	7283      	strb	r3, [r0, #10]
    next->flags = s_tmpl->flags;
 8004352:	7923      	ldrb	r3, [r4, #4]
 8004354:	72c3      	strb	r3, [r0, #11]
    
    return next;
    
#   undef _FLOOD_NETSTATE
}
 8004356:	bd70      	pop	{r4, r5, r6, pc}
        next        = session_new(&dll_default_applet, 0, adv_tmpl->channel, _FLOOD_NETSTATE);
 8004358:	23c8      	movs	r3, #200	; 0xc8
 800435a:	78ea      	ldrb	r2, [r5, #3]
 800435c:	2100      	movs	r1, #0
 800435e:	4805      	ldr	r0, [pc, #20]	; (8004374 <m2task_advertise+0x4c>)
 8004360:	f000 fb7a 	bl	8004a58 <session_new>
        next->subnet= s_tmpl->subnet;
 8004364:	78a3      	ldrb	r3, [r4, #2]
 8004366:	7283      	strb	r3, [r0, #10]
        next->flags = s_tmpl->flags;
 8004368:	7923      	ldrb	r3, [r4, #4]
 800436a:	72c3      	strb	r3, [r0, #11]
 800436c:	e7e9      	b.n	8004342 <m2task_advertise+0x1a>
        return NULL;
 800436e:	2000      	movs	r0, #0
 8004370:	e7f1      	b.n	8004356 <m2task_advertise+0x2e>
 8004372:	bf00      	nop
 8004374:	08003fad 	.word	0x08003fad

08004378 <m2task_telegram>:




m2session* m2task_telegram(session_tmpl* s_tmpl, ot_app applet) {
 8004378:	b510      	push	{r4, lr}
 800437a:	4604      	mov	r4, r0
/// This is an experimental function
    m2session* next;
    next 			= sub_newtask(s_tmpl, applet, 0);
 800437c:	2200      	movs	r2, #0
 800437e:	f7ff ffb3 	bl	80042e8 <sub_newtask>
    next->netstate |= M2_NETFLAG_BG;
 8004382:	79c2      	ldrb	r2, [r0, #7]
 8004384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004388:	71c2      	strb	r2, [r0, #7]
    next->flags     = s_tmpl->flags;
 800438a:	7922      	ldrb	r2, [r4, #4]
 800438c:	72c2      	strb	r2, [r0, #11]

    return next;
}
 800438e:	bd10      	pop	{r4, pc}

08004390 <network_init>:
#   endif

    // Hop code should be explicitly set when producing an anycast or unicast 
    // transmission.  OTAPI will do this for you.
    //m2np.rt.hop_code  = 0;
}
 8004390:	4770      	bx	lr
	...

08004394 <m2np_put_deviceid>:
}




void m2np_put_deviceid(ot_bool use_vid) {
 8004394:	b508      	push	{r3, lr}
    if (use_vid) q_writeshort_be(&txq, *(ot_u16*)dll.netconf.vid);
 8004396:	b928      	cbnz	r0, 80043a4 <m2np_put_deviceid+0x10>
    else         q_writestring(&txq, dll.netconf.uid, 8);
 8004398:	2208      	movs	r2, #8
 800439a:	4905      	ldr	r1, [pc, #20]	; (80043b0 <m2np_put_deviceid+0x1c>)
 800439c:	4805      	ldr	r0, [pc, #20]	; (80043b4 <m2np_put_deviceid+0x20>)
 800439e:	f001 fde7 	bl	8005f70 <q_writestring>
}
 80043a2:	bd08      	pop	{r3, pc}
    if (use_vid) q_writeshort_be(&txq, *(ot_u16*)dll.netconf.vid);
 80043a4:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <m2np_put_deviceid+0x24>)
 80043a6:	8ad9      	ldrh	r1, [r3, #22]
 80043a8:	4802      	ldr	r0, [pc, #8]	; (80043b4 <m2np_put_deviceid+0x20>)
 80043aa:	f001 fd7b 	bl	8005ea4 <q_writeshort_be>
 80043ae:	e7f8      	b.n	80043a2 <m2np_put_deviceid+0xe>
 80043b0:	20002662 	.word	0x20002662
 80043b4:	20002d74 	.word	0x20002d74
 80043b8:	20002654 	.word	0x20002654

080043bc <m2np_header>:
void m2np_header(m2session* active, ot_u8 addressing, ot_u8 nack) {
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	4604      	mov	r4, r0
 80043c0:	460e      	mov	r6, r1
    q_empty(&txq);
 80043c2:	4d30      	ldr	r5, [pc, #192]	; (8004484 <m2np_header+0xc8>)
 80043c4:	4628      	mov	r0, r5
 80043c6:	f001 fd36 	bl	8005e36 <q_empty>
        active->flags  &= ~M2_FLAG_RSCODE;
 80043ca:	7ae3      	ldrb	r3, [r4, #11]
 80043cc:	f023 0308 	bic.w	r3, r3, #8
 80043d0:	72e3      	strb	r3, [r4, #11]
        txq.back        = txq.getcursor + maxframe;
 80043d2:	686b      	ldr	r3, [r5, #4]
 80043d4:	33fe      	adds	r3, #254	; 0xfe
 80043d6:	612b      	str	r3, [r5, #16]
    q_writeshort(&txq, (ot_u16)((active->flags & M2_FLAG_RSCODE) << 3) );
 80043d8:	7ae1      	ldrb	r1, [r4, #11]
 80043da:	00c9      	lsls	r1, r1, #3
 80043dc:	f001 0140 	and.w	r1, r1, #64	; 0x40
 80043e0:	4628      	mov	r0, r5
 80043e2:	f001 fd54 	bl	8005e8e <q_writeshort>
    q_writeshort(&txq, (ot_u16)active->subnet);
 80043e6:	7aa1      	ldrb	r1, [r4, #10]
 80043e8:	4628      	mov	r0, r5
 80043ea:	f001 fd50 	bl	8005e8e <q_writeshort>
    active->flags &= M2_FLAG_ROUTE;
 80043ee:	7ae1      	ldrb	r1, [r4, #11]
 80043f0:	f001 0104 	and.w	r1, r1, #4
 80043f4:	72e1      	strb	r1, [r4, #11]
    if (active->netstate & M2_NETSTATE_RESP) {
 80043f6:	79e3      	ldrb	r3, [r4, #7]
 80043f8:	f013 0f10 	tst.w	r3, #16
 80043fc:	d029      	beq.n	8004452 <m2np_header+0x96>
        vid_valid   = (*(ot_u16*)dll.netconf.vid != 0) | (active->flags & 1);
 80043fe:	4b22      	ldr	r3, [pc, #136]	; (8004488 <m2np_header+0xcc>)
 8004400:	8ad9      	ldrh	r1, [r3, #22]
 8004402:	3100      	adds	r1, #0
 8004404:	bf18      	it	ne
 8004406:	2101      	movne	r1, #1
        addressing |= vid_valid << 4;                           // Use Source VID if valid
 8004408:	0109      	lsls	r1, r1, #4
        addressing |= (active->flags & M2_FLAG_VID) >> 4;       // Use Target VID if Request source was VID
 800440a:	f041 0102 	orr.w	r1, r1, #2
    m2np.header.fr_info     = addressing;
 800440e:	4b1f      	ldr	r3, [pc, #124]	; (800448c <m2np_header+0xd0>)
 8004410:	7719      	strb	r1, [r3, #28]
    m2np.header.fr_info    |= ((active->extra & 0x0F) != 0) << 3;   //M2FI_EXT
 8004412:	b249      	sxtb	r1, r1
 8004414:	7a23      	ldrb	r3, [r4, #8]
 8004416:	f013 0f0f 	tst.w	r3, #15
 800441a:	d023      	beq.n	8004464 <m2np_header+0xa8>
 800441c:	2308      	movs	r3, #8
 800441e:	4319      	orrs	r1, r3
 8004420:	b2c9      	uxtb	r1, r1
 8004422:	4d1a      	ldr	r5, [pc, #104]	; (800448c <m2np_header+0xd0>)
 8004424:	7729      	strb	r1, [r5, #28]
    q_writebyte(&txq, m2np.header.fr_info);
 8004426:	4817      	ldr	r0, [pc, #92]	; (8004484 <m2np_header+0xc8>)
 8004428:	f001 fd2c 	bl	8005e84 <q_writebyte>
    if (m2np.header.fr_info & M2FI_EXT) {
 800442c:	7f2b      	ldrb	r3, [r5, #28]
 800442e:	f013 0f08 	tst.w	r3, #8
 8004432:	d119      	bne.n	8004468 <m2np_header+0xac>
    q_writebyte(&txq, active->dialog_id);
 8004434:	7a61      	ldrb	r1, [r4, #9]
 8004436:	4813      	ldr	r0, [pc, #76]	; (8004484 <m2np_header+0xc8>)
 8004438:	f001 fd24 	bl	8005e84 <q_writebyte>
    m2np_put_deviceid( (ot_bool)(m2np.header.fr_info & M2FI_VID) );
 800443c:	4c13      	ldr	r4, [pc, #76]	; (800448c <m2np_header+0xd0>)
 800443e:	7f20      	ldrb	r0, [r4, #28]
 8004440:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8004444:	f7ff ffa6 	bl	8004394 <m2np_put_deviceid>
    if (m2np.header.fr_info & M2FI_UCAST) {
 8004448:	7f23      	ldrb	r3, [r4, #28]
 800444a:	f013 0f02 	tst.w	r3, #2
 800444e:	d110      	bne.n	8004472 <m2np_header+0xb6>
}
 8004450:	bd70      	pop	{r4, r5, r6, pc}
        active->flags      |= addressing;
 8004452:	4331      	orrs	r1, r6
 8004454:	72e1      	strb	r1, [r4, #11]
        active->netstate   |= (addressing & M2FI_UCAST);    // M2_NETFLAG_FIRSTRX == M2FI_UCAST
 8004456:	f006 0602 	and.w	r6, r6, #2
 800445a:	431e      	orrs	r6, r3
 800445c:	71e6      	strb	r6, [r4, #7]
        addressing          = active->flags & ~M2_FLAG_RSCODE;
 800445e:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8004462:	e7d4      	b.n	800440e <m2np_header+0x52>
    m2np.header.fr_info    |= ((active->extra & 0x0F) != 0) << 3;   //M2FI_EXT
 8004464:	2300      	movs	r3, #0
 8004466:	e7da      	b.n	800441e <m2np_header+0x62>
        q_writebyte(&txq, active->extra);
 8004468:	7a21      	ldrb	r1, [r4, #8]
 800446a:	4806      	ldr	r0, [pc, #24]	; (8004484 <m2np_header+0xc8>)
 800446c:	f001 fd0a 	bl	8005e84 <q_writebyte>
 8004470:	e7e0      	b.n	8004434 <m2np_header+0x78>
        ot_u8* tmp_id       = m2np.rt.dlog.value;
 8004472:	68a1      	ldr	r1, [r4, #8]
        m2np.rt.dlog.value  = txq.putcursor;
 8004474:	4803      	ldr	r0, [pc, #12]	; (8004484 <m2np_header+0xc8>)
 8004476:	6882      	ldr	r2, [r0, #8]
 8004478:	60a2      	str	r2, [r4, #8]
        q_writestring(&txq, tmp_id, m2np.rt.dlog.length);
 800447a:	7922      	ldrb	r2, [r4, #4]
 800447c:	f001 fd78 	bl	8005f70 <q_writestring>
}
 8004480:	e7e6      	b.n	8004450 <m2np_header+0x94>
 8004482:	bf00      	nop
 8004484:	20002d74 	.word	0x20002d74
 8004488:	20002654 	.word	0x20002654
 800448c:	200026a4 	.word	0x200026a4

08004490 <m2np_idcmp>:
ot_bool m2np_idcmp(ot_int length, ot_u8* id) {
    ot_u8* stored_id;
    ot_u8  check;
    
    // Don't match on vid == 0, that is reserved as unassigned value
    if ((length == 2) && (*(ot_u16*)dll.netconf.vid == 0)) {
 8004490:	2802      	cmp	r0, #2
 8004492:	d00f      	beq.n	80044b4 <m2np_idcmp+0x24>
ot_bool m2np_idcmp(ot_int length, ot_u8* id) {
 8004494:	b430      	push	{r4, r5}
        return False;
    }
    
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 8004496:	2808      	cmp	r0, #8
 8004498:	d012      	beq.n	80044c0 <m2np_idcmp+0x30>
 800449a:	4b2e      	ldr	r3, [pc, #184]	; (8004554 <m2np_idcmp+0xc4>)
    length      = 8 - length;
 800449c:	f1c0 0008 	rsb	r0, r0, #8
    check       = 0;
    
    switch (length & 7) {
 80044a0:	f000 0007 	and.w	r0, r0, #7
 80044a4:	2807      	cmp	r0, #7
 80044a6:	d853      	bhi.n	8004550 <m2np_idcmp+0xc0>
 80044a8:	e8df f000 	tbb	[pc, r0]
 80044ac:	4240120c 	.word	0x4240120c
 80044b0:	4e4c4846 	.word	0x4e4c4846
    if ((length == 2) && (*(ot_u16*)dll.netconf.vid == 0)) {
 80044b4:	4b28      	ldr	r3, [pc, #160]	; (8004558 <m2np_idcmp+0xc8>)
 80044b6:	8adb      	ldrh	r3, [r3, #22]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1eb      	bne.n	8004494 <m2np_idcmp+0x4>
        return False;
 80044bc:	2000      	movs	r0, #0
        case 7: check |= *stored_id ^ *id;
                break;
    }
    
    return (ot_bool)(check == 0);
}
 80044be:	4770      	bx	lr
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 80044c0:	4b26      	ldr	r3, [pc, #152]	; (800455c <m2np_idcmp+0xcc>)
 80044c2:	e7eb      	b.n	800449c <m2np_idcmp+0xc>
        case 0: check |= *stored_id++ ^ *id++; 
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	7808      	ldrb	r0, [r1, #0]
 80044c8:	4042      	eors	r2, r0
 80044ca:	3301      	adds	r3, #1
 80044cc:	3101      	adds	r1, #1
 80044ce:	e000      	b.n	80044d2 <m2np_idcmp+0x42>
    check       = 0;
 80044d0:	2200      	movs	r2, #0
        case 1: check |= *stored_id++ ^ *id++; 
 80044d2:	7818      	ldrb	r0, [r3, #0]
 80044d4:	780c      	ldrb	r4, [r1, #0]
 80044d6:	4060      	eors	r0, r4
 80044d8:	4302      	orrs	r2, r0
 80044da:	3301      	adds	r3, #1
 80044dc:	3101      	adds	r1, #1
        case 2: check |= *stored_id++ ^ *id++; 
 80044de:	1c5d      	adds	r5, r3, #1
 80044e0:	7818      	ldrb	r0, [r3, #0]
 80044e2:	1c4c      	adds	r4, r1, #1
 80044e4:	780b      	ldrb	r3, [r1, #0]
 80044e6:	4058      	eors	r0, r3
 80044e8:	4310      	orrs	r0, r2
        case 3: check |= *stored_id++ ^ *id++; 
 80044ea:	1c6b      	adds	r3, r5, #1
 80044ec:	782a      	ldrb	r2, [r5, #0]
 80044ee:	1c61      	adds	r1, r4, #1
 80044f0:	7824      	ldrb	r4, [r4, #0]
 80044f2:	4062      	eors	r2, r4
 80044f4:	4310      	orrs	r0, r2
        case 4: check |= *stored_id++ ^ *id++; 
 80044f6:	1c5d      	adds	r5, r3, #1
 80044f8:	781a      	ldrb	r2, [r3, #0]
 80044fa:	1c4c      	adds	r4, r1, #1
 80044fc:	780b      	ldrb	r3, [r1, #0]
 80044fe:	405a      	eors	r2, r3
 8004500:	4302      	orrs	r2, r0
        case 5: check |= *stored_id++ ^ *id++; 
 8004502:	1c6b      	adds	r3, r5, #1
 8004504:	7828      	ldrb	r0, [r5, #0]
 8004506:	1c61      	adds	r1, r4, #1
 8004508:	7824      	ldrb	r4, [r4, #0]
 800450a:	4060      	eors	r0, r4
 800450c:	4302      	orrs	r2, r0
        case 6: check |= *stored_id++ ^ *id++; 
 800450e:	1c5d      	adds	r5, r3, #1
 8004510:	7818      	ldrb	r0, [r3, #0]
 8004512:	1c4c      	adds	r4, r1, #1
 8004514:	780b      	ldrb	r3, [r1, #0]
 8004516:	4058      	eors	r0, r3
 8004518:	4310      	orrs	r0, r2
        case 7: check |= *stored_id ^ *id;
 800451a:	782b      	ldrb	r3, [r5, #0]
 800451c:	7822      	ldrb	r2, [r4, #0]
 800451e:	4053      	eors	r3, r2
 8004520:	4318      	orrs	r0, r3
    return (ot_bool)(check == 0);
 8004522:	fab0 f080 	clz	r0, r0
 8004526:	0940      	lsrs	r0, r0, #5
}
 8004528:	bc30      	pop	{r4, r5}
 800452a:	4770      	bx	lr
    check       = 0;
 800452c:	2200      	movs	r2, #0
 800452e:	e7d6      	b.n	80044de <m2np_idcmp+0x4e>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 8004530:	461d      	mov	r5, r3
    switch (length & 7) {
 8004532:	460c      	mov	r4, r1
    check       = 0;
 8004534:	2000      	movs	r0, #0
 8004536:	e7d8      	b.n	80044ea <m2np_idcmp+0x5a>
 8004538:	2000      	movs	r0, #0
 800453a:	e7dc      	b.n	80044f6 <m2np_idcmp+0x66>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 800453c:	461d      	mov	r5, r3
    switch (length & 7) {
 800453e:	460c      	mov	r4, r1
    check       = 0;
 8004540:	2200      	movs	r2, #0
 8004542:	e7de      	b.n	8004502 <m2np_idcmp+0x72>
 8004544:	2200      	movs	r2, #0
 8004546:	e7e2      	b.n	800450e <m2np_idcmp+0x7e>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 8004548:	461d      	mov	r5, r3
    switch (length & 7) {
 800454a:	460c      	mov	r4, r1
    check       = 0;
 800454c:	2000      	movs	r0, #0
 800454e:	e7e4      	b.n	800451a <m2np_idcmp+0x8a>
 8004550:	2000      	movs	r0, #0
 8004552:	e7e6      	b.n	8004522 <m2np_idcmp+0x92>
 8004554:	2000266a 	.word	0x2000266a
 8004558:	20002654 	.word	0x20002654
 800455c:	20002662 	.word	0x20002662

08004560 <m2np_footer>:
#endif



#ifndef EXTF_m2np_footer
OT_WEAK void m2np_footer() {
 8004560:	b510      	push	{r4, lr}

    /// RS and CRC will be appended during encoding, and their extra length
    /// will be added to the frame length field.  -1 is because the length
    /// byte is not included in the length field.
    m2np_footer_END:
    txq.getcursor[0] = q_span(&txq) - 1;
 8004562:	4c04      	ldr	r4, [pc, #16]	; (8004574 <m2np_footer+0x14>)
 8004564:	4620      	mov	r0, r4
 8004566:	f001 fc45 	bl	8005df4 <q_span>
 800456a:	6863      	ldr	r3, [r4, #4]
 800456c:	3801      	subs	r0, #1
 800456e:	7018      	strb	r0, [r3, #0]
}
 8004570:	bd10      	pop	{r4, pc}
 8004572:	bf00      	nop
 8004574:	20002d74 	.word	0x20002d74

08004578 <network_route_ff>:
ot_int network_route_ff(m2session* active) {
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	4605      	mov	r5, r0
    active->flags       = (rxq.front[1] & M2LC_RSCODE) >> 3;
 800457c:	4a4a      	ldr	r2, [pc, #296]	; (80046a8 <network_route_ff+0x130>)
 800457e:	68d3      	ldr	r3, [r2, #12]
 8004580:	785b      	ldrb	r3, [r3, #1]
 8004582:	10db      	asrs	r3, r3, #3
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	72c3      	strb	r3, [r0, #11]
    rxq.getcursor       = &rxq.front[4];
 800458a:	68d1      	ldr	r1, [r2, #12]
    m2np.header.fr_info = *rxq.getcursor++;
 800458c:	1d48      	adds	r0, r1, #5
 800458e:	6050      	str	r0, [r2, #4]
 8004590:	790b      	ldrb	r3, [r1, #4]
 8004592:	4a46      	ldr	r2, [pc, #280]	; (80046ac <network_route_ff+0x134>)
 8004594:	7713      	strb	r3, [r2, #28]
    active->flags      |= (m2np.header.fr_info & ~M2_FLAG_RSCODE);     
 8004596:	b25b      	sxtb	r3, r3
 8004598:	f023 0308 	bic.w	r3, r3, #8
 800459c:	7aec      	ldrb	r4, [r5, #11]
 800459e:	4323      	orrs	r3, r4
 80045a0:	72eb      	strb	r3, [r5, #11]
    m2np.header.ext_info = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	7753      	strb	r3, [r2, #29]
    if (m2np.header.fr_info & M2FI_EXT) {
 80045a6:	7f13      	ldrb	r3, [r2, #28]
 80045a8:	f013 0f08 	tst.w	r3, #8
 80045ac:	d005      	beq.n	80045ba <network_route_ff+0x42>
        m2np.header.ext_info = *rxq.getcursor++;
 80045ae:	1d88      	adds	r0, r1, #6
 80045b0:	4a3d      	ldr	r2, [pc, #244]	; (80046a8 <network_route_ff+0x130>)
 80045b2:	6050      	str	r0, [r2, #4]
 80045b4:	7949      	ldrb	r1, [r1, #5]
 80045b6:	4a3d      	ldr	r2, [pc, #244]	; (80046ac <network_route_ff+0x134>)
 80045b8:	7751      	strb	r1, [r2, #29]
    use_m2np = ((m2np.header.fr_info & M2FI_ADDRMASK) != 0);
 80045ba:	f003 0603 	and.w	r6, r3, #3
 80045be:	f013 0303 	ands.w	r3, r3, #3
 80045c2:	bf18      	it	ne
 80045c4:	2301      	movne	r3, #1
    if (active->netstate & M2_NETSTATE_CONNECTED) {
 80045c6:	79ea      	ldrb	r2, [r5, #7]
 80045c8:	f012 0f01 	tst.w	r2, #1
 80045cc:	d136      	bne.n	800463c <network_route_ff+0xc4>
    else if (use_m2np) {
 80045ce:	2e00      	cmp	r6, #0
 80045d0:	d05a      	beq.n	8004688 <network_route_ff+0x110>
        active->netstate  |= M2_NETSTATE_CONNECTED;
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	71ea      	strb	r2, [r5, #7]
        active->subnet     = rxq.front[3];
 80045d8:	4833      	ldr	r0, [pc, #204]	; (80046a8 <network_route_ff+0x130>)
 80045da:	68c3      	ldr	r3, [r0, #12]
 80045dc:	78db      	ldrb	r3, [r3, #3]
 80045de:	72ab      	strb	r3, [r5, #10]
        active->dialog_id  = q_readbyte(&rxq);
 80045e0:	f001 fc82 	bl	8005ee8 <q_readbyte>
 80045e4:	7268      	strb	r0, [r5, #9]
    if (m2np.header.fr_info & M2FI_DLLS) {
 80045e6:	4b31      	ldr	r3, [pc, #196]	; (80046ac <network_route_ff+0x134>)
 80045e8:	7f1b      	ldrb	r3, [r3, #28]
 80045ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80045ee:	d14e      	bne.n	800468e <network_route_ff+0x116>
    if (use_m2np) {
 80045f0:	2e00      	cmp	r6, #0
 80045f2:	d04f      	beq.n	8004694 <network_route_ff+0x11c>
        m2np.rt.dlog.length = _idlen[ ((m2np.header.fr_info & M2FI_VID) != 0) ];
 80045f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80045f8:	4a2d      	ldr	r2, [pc, #180]	; (80046b0 <network_route_ff+0x138>)
 80045fa:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80045fe:	b2c9      	uxtb	r1, r1
 8004600:	4c2a      	ldr	r4, [pc, #168]	; (80046ac <network_route_ff+0x134>)
 8004602:	7121      	strb	r1, [r4, #4]
        m2np.rt.dlog.value  = q_markbyte(&rxq, m2np.rt.dlog.length);
 8004604:	4828      	ldr	r0, [pc, #160]	; (80046a8 <network_route_ff+0x130>)
 8004606:	f001 fc38 	bl	8005e7a <q_markbyte>
 800460a:	60a0      	str	r0, [r4, #8]
        if ((m2np.header.fr_info & M2_FLAG_CRYPTO) == M2_FLAG_NLS) {
 800460c:	7f23      	ldrb	r3, [r4, #28]
 800460e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004612:	2a20      	cmp	r2, #32
 8004614:	d041      	beq.n	800469a <network_route_ff+0x122>
        if (m2np.header.fr_info & M2FI_UCAST) {
 8004616:	f013 0f02 	tst.w	r3, #2
 800461a:	d11b      	bne.n	8004654 <network_route_ff+0xdc>
        m2np.rt.hop_code = 0;
 800461c:	4b23      	ldr	r3, [pc, #140]	; (80046ac <network_route_ff+0x134>)
 800461e:	2200      	movs	r2, #0
 8004620:	701a      	strb	r2, [r3, #0]
        if (m2np.header.fr_info & M2FI_ROUTE) {
 8004622:	7f1b      	ldrb	r3, [r3, #28]
 8004624:	f013 0f04 	tst.w	r3, #4
 8004628:	d13a      	bne.n	80046a0 <network_route_ff+0x128>
            route_val = m2qp_parse_frame(active);
 800462a:	4628      	mov	r0, r5
 800462c:	f000 fe28 	bl	8005280 <m2qp_parse_frame>
    if (route_val >= 0) {
 8004630:	1e04      	subs	r4, r0, #0
 8004632:	db01      	blt.n	8004638 <network_route_ff+0xc0>
        m2np_footer( /* active */);
 8004634:	f7ff ff94 	bl	8004560 <m2np_footer>
}
 8004638:	4620      	mov	r0, r4
 800463a:	bd70      	pop	{r4, r5, r6, pc}
        active->dialog_id += use_m2np;
 800463c:	7a6c      	ldrb	r4, [r5, #9]
 800463e:	4423      	add	r3, r4
 8004640:	b2dc      	uxtb	r4, r3
 8004642:	726c      	strb	r4, [r5, #9]
        if (active->dialog_id != q_readbyte(&rxq)) {
 8004644:	4818      	ldr	r0, [pc, #96]	; (80046a8 <network_route_ff+0x130>)
 8004646:	f001 fc4f 	bl	8005ee8 <q_readbyte>
 800464a:	4284      	cmp	r4, r0
 800464c:	d0cb      	beq.n	80045e6 <network_route_ff+0x6e>
            return -1;
 800464e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004652:	e7f1      	b.n	8004638 <network_route_ff+0xc0>
            active->flags      |= (target_len << 4);        //sets M2_FLAG_VID (SRC)
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	7aea      	ldrb	r2, [r5, #11]
 800465a:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 800465e:	72ea      	strb	r2, [r5, #11]
            active->netstate   |= M2_NETFLAG_FIRSTRX;
 8004660:	79ea      	ldrb	r2, [r5, #7]
 8004662:	f042 0202 	orr.w	r2, r2, #2
 8004666:	71ea      	strb	r2, [r5, #7]
            target_len          = _idlen[ target_len ];
 8004668:	4a11      	ldr	r2, [pc, #68]	; (80046b0 <network_route_ff+0x138>)
 800466a:	f932 4013 	ldrsh.w	r4, [r2, r3, lsl #1]
            if (m2np_idcmp(target_len, q_markbyte(&rxq, target_len)) == False) {
 800466e:	4621      	mov	r1, r4
 8004670:	480d      	ldr	r0, [pc, #52]	; (80046a8 <network_route_ff+0x130>)
 8004672:	f001 fc02 	bl	8005e7a <q_markbyte>
 8004676:	4601      	mov	r1, r0
 8004678:	4620      	mov	r0, r4
 800467a:	f7ff ff09 	bl	8004490 <m2np_idcmp>
 800467e:	2800      	cmp	r0, #0
 8004680:	d1cc      	bne.n	800461c <network_route_ff+0xa4>
                return -1;
 8004682:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004686:	e7d7      	b.n	8004638 <network_route_ff+0xc0>
        return -1;  //M2DP cannot be first frame!
 8004688:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800468c:	e7d4      	b.n	8004638 <network_route_ff+0xc0>
        return -1;
 800468e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004692:	e7d1      	b.n	8004638 <network_route_ff+0xc0>
        route_val = -1;     // placeholder until multiframe implemented
 8004694:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004698:	e7ce      	b.n	8004638 <network_route_ff+0xc0>
            return -1;
 800469a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800469e:	e7cb      	b.n	8004638 <network_route_ff+0xc0>
                return -1;
 80046a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046a4:	e7c8      	b.n	8004638 <network_route_ff+0xc0>
 80046a6:	bf00      	nop
 80046a8:	20002d60 	.word	0x20002d60
 80046ac:	200026a4 	.word	0x200026a4
 80046b0:	08009ce4 	.word	0x08009ce4

080046b4 <m2advp_parse>:
    //ot_u8   txadv_buffer[10];
#endif


#ifndef EXTF_m2advp_parse
OT_WEAK m2session* m2advp_parse(void) {
 80046b4:	b570      	push	{r4, r5, r6, lr}
    ot_int      slop;
    m2session*	s_next;
    ot_u16      pkt_ti;

    // Get the counter-ETA information from the inbound frame
    count.ubyte[UPPER]  = rxq.getcursor[3];
 80046b6:	4b16      	ldr	r3, [pc, #88]	; (8004710 <m2advp_parse+0x5c>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	78da      	ldrb	r2, [r3, #3]
 80046bc:	f04f 0400 	mov.w	r4, #0
 80046c0:	f362 240f 	bfi	r4, r2, #8, #8
    count.ubyte[LOWER]  = rxq.getcursor[4];
 80046c4:	791b      	ldrb	r3, [r3, #4]
 80046c6:	f363 0407 	bfi	r4, r3, #0, #8
    count.ushort       &= 0x7FFF;
 80046ca:	f3c4 040e 	ubfx	r4, r4, #0, #15

    // stores the bg packet duration of the active channel.  We need this
    // in order to deal with timing skew.
    pkt_ti  = rm2_bgpkt_duration();
 80046ce:	f7fd f9e3 	bl	8001a98 <rm2_bgpkt_duration>

    // Account for "slop" due to clock deviation, process latency,
    // and other such things.  Thus the follow-up session is
    // either a second BG scan (if too much slop), or it is FG
    // listening for the request.
    slop = (count.ushort / OT_GPTIM_ERRDIV);
 80046d2:	2300      	movs	r3, #0
    if (slop <= pkt_ti) {
 80046d4:	4283      	cmp	r3, r0
 80046d6:	dd10      	ble.n	80046fa <m2advp_parse+0x46>
        netstate    	= M2_NETSTATE_REQRX;
    }
    else {
    	count.ushort   -= slop;
        scancode        = 0x80;
        netstate        = M2_NETSTATE_REQRX | M2_NETFLAG_BG;
 80046d8:	2660      	movs	r6, #96	; 0x60
        scancode        = 0x80;
 80046da:	2580      	movs	r5, #128	; 0x80
    }

    // ensure that count value is never negative.
    if (count.sshort < 0) {
 80046dc:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80046e0:	d113      	bne.n	800470a <m2advp_parse+0x56>
        count.sshort = 0;
    }

    // The next session is written in-place of the current session
    s_next              = session_top();
 80046e2:	f000 fa5d 	bl	8004ba0 <session_top>
    s_next->applet      = &dll_scan_applet;
 80046e6:	4a0b      	ldr	r2, [pc, #44]	; (8004714 <m2advp_parse+0x60>)
 80046e8:	6002      	str	r2, [r0, #0]
    s_next->counter     = count.ushort;
 80046ea:	8084      	strh	r4, [r0, #4]
    s_next->channel     = rxq.getcursor[2];
 80046ec:	4a08      	ldr	r2, [pc, #32]	; (8004710 <m2advp_parse+0x5c>)
 80046ee:	6852      	ldr	r2, [r2, #4]
 80046f0:	7892      	ldrb	r2, [r2, #2]
 80046f2:	7182      	strb	r2, [r0, #6]
    s_next->netstate    = netstate;
 80046f4:	71c6      	strb	r6, [r0, #7]
    s_next->extra       = scancode;
 80046f6:	7205      	strb	r5, [r0, #8]

    return s_next;
}
 80046f8:	bd70      	pop	{r4, r5, r6, pc}
    	count.ushort   -= pkt_ti;
 80046fa:	1a24      	subs	r4, r4, r0
    	scancode        = otutils_encode_timeout(pkt_ti<<1);
 80046fc:	0040      	lsls	r0, r0, #1
 80046fe:	b280      	uxth	r0, r0
 8004700:	f001 fc86 	bl	8006010 <otutils_encode_timeout>
 8004704:	4605      	mov	r5, r0
        netstate    	= M2_NETSTATE_REQRX;
 8004706:	2620      	movs	r6, #32
 8004708:	e7e8      	b.n	80046dc <m2advp_parse+0x28>
        count.sshort = 0;
 800470a:	f04f 0400 	mov.w	r4, #0
 800470e:	e7e8      	b.n	80046e2 <m2advp_parse+0x2e>
 8004710:	20002d60 	.word	0x20002d60
 8004714:	08003fb5 	.word	0x08003fb5

08004718 <m2advp_open>:
#endif



#ifndef EXTF_m2advp_open
OT_WEAK void m2advp_open(m2session* follower) {
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	4605      	mov	r5, r0
    q_empty(&txq);
 800471c:	4c11      	ldr	r4, [pc, #68]	; (8004764 <m2advp_open+0x4c>)
 800471e:	4620      	mov	r0, r4
 8004720:	f001 fb89 	bl	8005e36 <q_empty>
    txq.getcursor += 2;     //Bypass unused length and Link CTL bytes
 8004724:	6863      	ldr	r3, [r4, #4]
 8004726:	3302      	adds	r3, #2
 8004728:	6063      	str	r3, [r4, #4]
    
    q_writebyte(&txq, (BG_FRAMESIZE-1));    //Dummy Length value (not actually sent)
 800472a:	2105      	movs	r1, #5
 800472c:	4620      	mov	r0, r4
 800472e:	f001 fba9 	bl	8005e84 <q_writebyte>
    q_writebyte(&txq, 0);                   //Dummy Link-Control (not actually sent)
 8004732:	2100      	movs	r1, #0
 8004734:	4620      	mov	r0, r4
 8004736:	f001 fba5 	bl	8005e84 <q_writebyte>
    q_writebyte(&txq, 0);                   //Dummy TX-EIRP (updated by RF driver)
 800473a:	2100      	movs	r1, #0
 800473c:	4620      	mov	r0, r4
 800473e:	f001 fba1 	bl	8005e84 <q_writebyte>
    
    // This byte is two nibbles: Subnet specifier and AdvP ID (F)
    q_writebyte(&txq, (follower->subnet | 0x0F));
 8004742:	7aa9      	ldrb	r1, [r5, #10]
 8004744:	f041 010f 	orr.w	r1, r1, #15
 8004748:	4620      	mov	r0, r4
 800474a:	f001 fb9b 	bl	8005e84 <q_writebyte>
    
    // Follower session channel
    q_writebyte(&txq, follower->channel);
 800474e:	79a9      	ldrb	r1, [r5, #6]
 8004750:	4620      	mov	r0, r4
 8004752:	f001 fb97 	bl	8005e84 <q_writebyte>
    
    // Follower wait time is set to dll counter
    dll.counter = follower->counter;
 8004756:	88a9      	ldrh	r1, [r5, #4]
 8004758:	4b03      	ldr	r3, [pc, #12]	; (8004768 <m2advp_open+0x50>)
 800475a:	8059      	strh	r1, [r3, #2]
    q_writeshort(&txq, follower->counter);
 800475c:	4620      	mov	r0, r4
 800475e:	f001 fb96 	bl	8005e8e <q_writeshort>
}
 8004762:	bd38      	pop	{r3, r4, r5, pc}
 8004764:	20002d74 	.word	0x20002d74
 8004768:	20002654 	.word	0x20002654

0800476c <m2advp_update>:
#ifndef EXTF_m2advp_update
OT_WEAK void m2advp_update(ot_u16 countdown) {
///@note In this function we manually reset the txq cursors to the places
///      they need to be for the encoder.  The encoder implementation may or
///      may not do this automatically, but it is safer to be redundant.
    txq.getcursor       = &txq.front[2];                //No length, link-CTL bytes in BG Frame
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <m2advp_update+0x1c>)
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	1c91      	adds	r1, r2, #2
 8004772:	6059      	str	r1, [r3, #4]
    txq.putcursor       = txq.getcursor;
    txq.putcursor      += 3;                            //Skip EIRP, Subnet, Channel bytes
    *txq.putcursor++    = ((ot_u8*)&countdown)[UPPER];  //Countdown (upper 8 bits)
 8004774:	1d91      	adds	r1, r2, #6
 8004776:	6099      	str	r1, [r3, #8]
 8004778:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800477c:	7151      	strb	r1, [r2, #5]
    *txq.putcursor++    = ((ot_u8*)&countdown)[LOWER];  //Countdown (lower 8 bits)
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	1c51      	adds	r1, r2, #1
 8004782:	6099      	str	r1, [r3, #8]
 8004784:	7010      	strb	r0, [r2, #0]
}
 8004786:	4770      	bx	lr
 8004788:	20002d74 	.word	0x20002d74

0800478c <m2advp_close>:
#endif


#ifndef EXTF_m2advp_close
OT_WEAK void m2advp_close() {
}
 800478c:	4770      	bx	lr
	...

08004790 <m2tgram_parse>:

///@todo This is patchwork code, just to deliver basic functionality with
/// with existing buffer structure and M2QP impl.
extern alp_tmpl m2alp;

m2session* m2tgram_parse(void) {
 8004790:	b510      	push	{r4, lr}
/// Telegram format is made into an ALP frame and sent to telegram forwarder
/// ALP (ID = ???)
/// @todo ID currently set to 16, but subject to change

	// Shift 14 byte telegram by four bytes to make room for ALP header
	for (ot_int i=13; i>=0; i--) {
 8004792:	230d      	movs	r3, #13
 8004794:	e006      	b.n	80047a4 <m2tgram_parse+0x14>
		rxq.getcursor[i+4] = rxq.getcursor[i];
 8004796:	4a0f      	ldr	r2, [pc, #60]	; (80047d4 <m2tgram_parse+0x44>)
 8004798:	6852      	ldr	r2, [r2, #4]
 800479a:	1d19      	adds	r1, r3, #4
 800479c:	5cd0      	ldrb	r0, [r2, r3]
 800479e:	5450      	strb	r0, [r2, r1]
	for (ot_int i=13; i>=0; i--) {
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b21b      	sxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	daf6      	bge.n	8004796 <m2tgram_parse+0x6>
	}

	// Putcursor re-oriented to include only ALP header and telegram payload
	rxq.putcursor    = rxq.getcursor + 4 + 14;
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <m2tgram_parse+0x44>)
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	f102 0112 	add.w	r1, r2, #18
 80047b0:	6099      	str	r1, [r3, #8]

	// Put ALP header
	rxq.getcursor[0] = 0xD0;
 80047b2:	21d0      	movs	r1, #208	; 0xd0
 80047b4:	7011      	strb	r1, [r2, #0]
	rxq.getcursor[1] = 14;
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	210e      	movs	r1, #14
 80047ba:	7051      	strb	r1, [r2, #1]
	rxq.getcursor[2] = 16;
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	2110      	movs	r1, #16
 80047c0:	7091      	strb	r1, [r2, #2]
	rxq.getcursor[3] = 0;
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2400      	movs	r4, #0
 80047c6:	70dc      	strb	r4, [r3, #3]

	alp_parse_message(&m2alp, AUTH_GUEST);
 80047c8:	4903      	ldr	r1, [pc, #12]	; (80047d8 <m2tgram_parse+0x48>)
 80047ca:	4804      	ldr	r0, [pc, #16]	; (80047dc <m2tgram_parse+0x4c>)
 80047cc:	f001 f951 	bl	8005a72 <alp_parse_message>

	return NULL;
}
 80047d0:	4620      	mov	r0, r4
 80047d2:	bd10      	pop	{r4, pc}
 80047d4:	20002d60 	.word	0x20002d60
 80047d8:	20002744 	.word	0x20002744
 80047dc:	20002720 	.word	0x20002720

080047e0 <network_parse_bf>:
OT_WEAK m2session* network_parse_bf(void) {
 80047e0:	b508      	push	{r3, lr}
	    switch (rxq.getcursor[1] & 15) {
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <network_parse_bf+0x24>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	785b      	ldrb	r3, [r3, #1]
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d004      	beq.n	80047fa <network_parse_bf+0x1a>
 80047f0:	2b0f      	cmp	r3, #15
 80047f2:	d105      	bne.n	8004800 <network_parse_bf+0x20>
	    case 15:    s_next = m2advp_parse();        break;
 80047f4:	f7ff ff5e 	bl	80046b4 <m2advp_parse>
	}
 80047f8:	bd08      	pop	{r3, pc}
	    case 1:     s_next = m2tgram_parse();       break;
 80047fa:	f7ff ffc9 	bl	8004790 <m2tgram_parse>
 80047fe:	e7fb      	b.n	80047f8 <network_parse_bf+0x18>
	    s_next  = NULL;
 8004800:	2000      	movs	r0, #0
	    return s_next;
 8004802:	e7f9      	b.n	80047f8 <network_parse_bf+0x18>
 8004804:	20002d60 	.word	0x20002d60

08004808 <rm2_mac_filter>:




#ifndef EXTF_rm2_mac_filter
OT_WEAK ot_bool rm2_mac_filter() {
 8004808:	b410      	push	{r4}

    // TX EIRP encoded value    = (dBm + 40) * 2
    // TX EIRP dBm              = ((encoded value) / 2) - 40
    // Link Loss                = TX EIRP dBm - Detected RX dBm
    // Link Quality Filter      = (Link Loss <= Link Loss Limit)
    ot_u8 qualifier = (ot_u8)(radio.last_linkloss <= ((ot_int)phymac[0].link_qual)<<1);
 800480a:	4b13      	ldr	r3, [pc, #76]	; (8004858 <rm2_mac_filter+0x50>)
 800480c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004810:	4a12      	ldr	r2, [pc, #72]	; (800485c <rm2_mac_filter+0x54>)
 8004812:	7952      	ldrb	r2, [r2, #5]
 8004814:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8004818:	bfd4      	ite	le
 800481a:	2001      	movle	r0, #1
 800481c:	2000      	movgt	r0, #0
    {   ot_u8 fr_subnet, dsm, specifier, mask;
        fr_subnet   = rxq.front[3];
 800481e:	4b10      	ldr	r3, [pc, #64]	; (8004860 <rm2_mac_filter+0x58>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	78da      	ldrb	r2, [r3, #3]
        dsm         = dll.netconf.subnet & 0x0F;
 8004824:	4b0f      	ldr	r3, [pc, #60]	; (8004864 <rm2_mac_filter+0x5c>)
 8004826:	7e1b      	ldrb	r3, [r3, #24]
 8004828:	f003 010f 	and.w	r1, r3, #15
        mask        = fr_subnet & dsm;
 800482c:	ea02 0401 	and.w	r4, r2, r1
        specifier   = (fr_subnet ^ dll.netconf.subnet) & 0xF0;
 8004830:	4053      	eors	r3, r2
        fr_subnet  &= 0xF0;
 8004832:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        qualifier  &= (ot_bool)(((fr_subnet == 0xF0) || (specifier == 0)) && (mask == dsm));
 8004836:	2af0      	cmp	r2, #240	; 0xf0
 8004838:	d002      	beq.n	8004840 <rm2_mac_filter+0x38>
 800483a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800483e:	b933      	cbnz	r3, 800484e <rm2_mac_filter+0x46>
 8004840:	42a1      	cmp	r1, r4
 8004842:	d006      	beq.n	8004852 <rm2_mac_filter+0x4a>
 8004844:	2300      	movs	r3, #0
    }
    return qualifier;
}
 8004846:	4018      	ands	r0, r3
 8004848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800484c:	4770      	bx	lr
        qualifier  &= (ot_bool)(((fr_subnet == 0xF0) || (specifier == 0)) && (mask == dsm));
 800484e:	2300      	movs	r3, #0
 8004850:	e7f9      	b.n	8004846 <rm2_mac_filter+0x3e>
 8004852:	2301      	movs	r3, #1
 8004854:	e7f7      	b.n	8004846 <rm2_mac_filter+0x3e>
 8004856:	bf00      	nop
 8004858:	200026c4 	.word	0x200026c4
 800485c:	200026d0 	.word	0x200026d0
 8004860:	20002d60 	.word	0x20002d60
 8004864:	20002654 	.word	0x20002654

08004868 <rm2_channel_refresh>:
#endif


#ifndef EXTF_rm2_channel_refresh
OT_WEAK void rm2_channel_refresh(void) {
    radio.flags |= RADIO_FLAG_REFRESH;
 8004868:	4a02      	ldr	r2, [pc, #8]	; (8004874 <rm2_channel_refresh+0xc>)
 800486a:	7853      	ldrb	r3, [r2, #1]
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	7053      	strb	r3, [r2, #1]
}
 8004872:	4770      	bx	lr
 8004874:	200026c4 	.word	0x200026c4

08004878 <rm2_channel_lookup>:
}
#endif


#ifndef EXTF_rm2_channel_lookup
OT_WEAK ot_bool rm2_channel_lookup(ot_u8 chan_id, vlFILE* fp) {
 8004878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800487c:	b083      	sub	sp, #12
 800487e:	4606      	mov	r6, r0
 8004880:	460d      	mov	r5, r1
    ot_u8       spectrum_id;
    ot_int      i;
    volatile ot_uni16    scratch;

    // Strip the FEC & Spread bits
    spectrum_id = chan_id & 0x3F;
 8004882:	f000 073f 	and.w	r7, r0, #63	; 0x3f

    /// Populate the phymac flags: these are not frequently used
    /// @todo I might want to do this in radio_init() instead
    scratch.ushort  = vl_read(fp, 2);
 8004886:	2102      	movs	r1, #2
 8004888:	4628      	mov	r0, r5
 800488a:	f001 fdc2 	bl	8006412 <vl_read>
 800488e:	f8ad 0004 	strh.w	r0, [sp, #4]
    phymac[0].flags = scratch.ubyte[0];
 8004892:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004896:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <rm2_channel_lookup+0xdc>)
 8004898:	701a      	strb	r2, [r3, #0]

    /// Look through the channel list to find the one with matching spectrum id.
    /// The channel list is not necessarily sorted.
    /// @todo might do this with vl_get() in the future
    for (i=6; i<fp->length; i+=6) {
 800489a:	2106      	movs	r1, #6
 800489c:	892b      	ldrh	r3, [r5, #8]
 800489e:	4299      	cmp	r1, r3
 80048a0:	da56      	bge.n	8004950 <rm2_channel_lookup+0xd8>
        scratch.ushort = vl_read(fp, i);
 80048a2:	b28c      	uxth	r4, r1
 80048a4:	4621      	mov	r1, r4
 80048a6:	4628      	mov	r0, r5
 80048a8:	f001 fdb3 	bl	8006412 <vl_read>
 80048ac:	f8ad 0004 	strh.w	r0, [sp, #4]

        if ((spectrum_id == scratch.ubyte[0]) \
 80048b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	42bb      	cmp	r3, r7
 80048b8:	d009      	beq.n	80048ce <rm2_channel_lookup+0x56>
        || ((spectrum_id & 0xF0) == scratch.ubyte[0])) {
 80048ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	f006 0230 	and.w	r2, r6, #48	; 0x30
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d002      	beq.n	80048ce <rm2_channel_lookup+0x56>
    for (i=6; i<fp->length; i+=6) {
 80048c8:	1da1      	adds	r1, r4, #6
 80048ca:	b209      	sxth	r1, r1
 80048cc:	e7e6      	b.n	800489c <rm2_channel_lookup+0x24>
            ot_u8 old_chan_id   = phymac[0].channel;
 80048ce:	4f21      	ldr	r7, [pc, #132]	; (8004954 <rm2_channel_lookup+0xdc>)
 80048d0:	f897 9002 	ldrb.w	r9, [r7, #2]
            ot_u8 old_tx_eirp   = (phymac[0].tx_eirp & 0x7f);
 80048d4:	f897 8004 	ldrb.w	r8, [r7, #4]
 80048d8:	f008 087f 	and.w	r8, r8, #127	; 0x7f

            phymac[0].tg        = rm2_default_tgd(chan_id);
 80048dc:	4630      	mov	r0, r6
 80048de:	f7fd f8d3 	bl	8001a88 <rm2_default_tgd>
 80048e2:	7078      	strb	r0, [r7, #1]
            phymac[0].channel   = chan_id;
 80048e4:	70be      	strb	r6, [r7, #2]
          //phymac[0].autoscale = scratch.ubyte[1];

            scratch.ushort      = vl_read(fp, i+2);
 80048e6:	1ca1      	adds	r1, r4, #2
 80048e8:	b289      	uxth	r1, r1
 80048ea:	4628      	mov	r0, r5
 80048ec:	f001 fd91 	bl	8006412 <vl_read>
 80048f0:	f8ad 0004 	strh.w	r0, [sp, #4]
            phymac[0].tx_eirp   = scratch.ubyte[0] & 0x80;
 80048f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80048f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fc:	713b      	strb	r3, [r7, #4]
            phymac[0].tx_eirp  |= rm2_clip_txeirp(scratch.ubyte[0]);
 80048fe:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004902:	f7fc fc29 	bl	8001158 <rm2_clip_txeirp>
 8004906:	793b      	ldrb	r3, [r7, #4]
 8004908:	4318      	orrs	r0, r3
 800490a:	7138      	strb	r0, [r7, #4]
            phymac[0].link_qual = scratch.ubyte[1];
 800490c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004910:	717b      	strb	r3, [r7, #5]

            ///@todo Try this: *(ot_u16*)&phymac[0].cs_thr = vl_read(fp, i+4);  
            ///it will need some rearrangement in phymac struct
            /// Convert thresholds from DASH7 numeric encoding to native encoding
            scratch.ushort      = vl_read(fp, i+4);
 8004912:	1d21      	adds	r1, r4, #4
 8004914:	b289      	uxth	r1, r1
 8004916:	4628      	mov	r0, r5
 8004918:	f001 fd7b 	bl	8006412 <vl_read>
 800491c:	f8ad 0004 	strh.w	r0, [sp, #4]
            //phymac[0].cs_thr    = __THR(scratch.ubyte[0]);
            //phymac[0].cca_thr   = scratch.ubyte[1];
            //phymac[0].cs_thr    = rm2_calc_rssithr(phymac[0].cs_thr);
            //phymac[0].cca_thr   = rm2_calc_rssithr(phymac[0].cca_thr);
            radio.threshold.raw = scratch.ubyte[0];
 8004920:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004924:	b2c0      	uxtb	r0, r0
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <rm2_channel_lookup+0xe0>)
 8004928:	70d8      	strb	r0, [r3, #3]
            phymac[0].cs_thr    = rm2_calc_rssithr( (ot_u8)(radio.threshold.raw + radio.threshold.offset) );
 800492a:	789b      	ldrb	r3, [r3, #2]
 800492c:	4418      	add	r0, r3
 800492e:	b2c0      	uxtb	r0, r0
 8004930:	f7fc fc18 	bl	8001164 <rm2_calc_rssithr>
 8004934:	71b8      	strb	r0, [r7, #6]
            phymac[0].cca_thr   = rm2_calc_rssithr( scratch.ubyte[1] );
 8004936:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800493a:	f7fc fc13 	bl	8001164 <rm2_calc_rssithr>
 800493e:	71f8      	strb	r0, [r7, #7]
            
            rm2_enter_channel(old_chan_id, old_tx_eirp);
 8004940:	4641      	mov	r1, r8
 8004942:	4648      	mov	r0, r9
 8004944:	f7fc fc32 	bl	80011ac <rm2_enter_channel>
            return True;
 8004948:	2001      	movs	r0, #1
        }
    }
    return False;
}
 800494a:	b003      	add	sp, #12
 800494c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return False;
 8004950:	2000      	movs	r0, #0
 8004952:	e7fa      	b.n	800494a <rm2_channel_lookup+0xd2>
 8004954:	200026d0 	.word	0x200026d0
 8004958:	200026c4 	.word	0x200026c4

0800495c <rm2_init>:
OT_WEAK void rm2_init(void) {
 800495c:	b510      	push	{r4, lr}
    radio.state     = RADIO_Idle;
 800495e:	4b0d      	ldr	r3, [pc, #52]	; (8004994 <rm2_init+0x38>)
 8004960:	2200      	movs	r2, #0
 8004962:	701a      	strb	r2, [r3, #0]
    radio.flags     = RADIO_FLAG_REFRESH;
 8004964:	2101      	movs	r1, #1
 8004966:	7059      	strb	r1, [r3, #1]
    radio.evtdone   = &otutils_sig2_null;
 8004968:	490b      	ldr	r1, [pc, #44]	; (8004998 <rm2_init+0x3c>)
 800496a:	6099      	str	r1, [r3, #8]
    radio.threshold.offset  = 0;
 800496c:	709a      	strb	r2, [r3, #2]
    radio.threshold.raw     = 0;
 800496e:	70da      	strb	r2, [r3, #3]
    phymac[0].channel   = 0xF0;
 8004970:	4b0a      	ldr	r3, [pc, #40]	; (800499c <rm2_init+0x40>)
 8004972:	22f0      	movs	r2, #240	; 0xf0
 8004974:	709a      	strb	r2, [r3, #2]
    phymac[0].tx_eirp   = 0x7F;
 8004976:	227f      	movs	r2, #127	; 0x7f
 8004978:	711a      	strb	r2, [r3, #4]
    fp                  = ISF_open_su( ISF_ID(channel_configuration) );
 800497a:	2002      	movs	r0, #2
 800497c:	f001 fe00 	bl	8006580 <ISF_open_su>
 8004980:	4604      	mov	r4, r0
    rm2_channel_lookup(0x18, fp);
 8004982:	4601      	mov	r1, r0
 8004984:	2018      	movs	r0, #24
 8004986:	f7ff ff77 	bl	8004878 <rm2_channel_lookup>
    vl_close(fp);
 800498a:	4620      	mov	r0, r4
 800498c:	f001 fdc0 	bl	8006510 <vl_close>
}
 8004990:	bd10      	pop	{r4, pc}
 8004992:	bf00      	nop
 8004994:	200026c4 	.word	0x200026c4
 8004998:	08005fe3 	.word	0x08005fe3
 800499c:	200026d0 	.word	0x200026d0

080049a0 <rm2_test_channel>:
OT_WEAK ot_bool rm2_test_channel(ot_u8 channel) {
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	4605      	mov	r5, r0
    test = rm2_channel_fastcheck(channel);
 80049a4:	f7fc fbe8 	bl	8001178 <rm2_channel_fastcheck>
    if (test == False) {
 80049a8:	4604      	mov	r4, r0
 80049aa:	b108      	cbz	r0, 80049b0 <rm2_test_channel+0x10>
}
 80049ac:	4620      	mov	r0, r4
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
        fp      = ISF_open_su( ISF_ID(channel_configuration) );
 80049b0:	2002      	movs	r0, #2
 80049b2:	f001 fde5 	bl	8006580 <ISF_open_su>
 80049b6:	4606      	mov	r6, r0
        test    = rm2_channel_lookup(channel, fp);
 80049b8:	4601      	mov	r1, r0
 80049ba:	4628      	mov	r0, r5
 80049bc:	f7ff ff5c 	bl	8004878 <rm2_channel_lookup>
 80049c0:	4604      	mov	r4, r0
        vl_close(fp);
 80049c2:	4630      	mov	r0, r6
 80049c4:	f001 fda4 	bl	8006510 <vl_close>
 80049c8:	e7f0      	b.n	80049ac <rm2_test_channel+0xc>
	...

080049cc <rm2_test_chanlist>:
OT_WEAK ot_bool rm2_test_chanlist() {
 80049cc:	b570      	push	{r4, r5, r6, lr}
    fp = ISF_open_su( ISF_ID(channel_configuration) );
 80049ce:	2002      	movs	r0, #2
 80049d0:	f001 fdd6 	bl	8006580 <ISF_open_su>
 80049d4:	4606      	mov	r6, r0
    for (i=0, test=False; i<dll.comm.tx_channels; i++) {
 80049d6:	2400      	movs	r4, #0
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <rm2_test_chanlist+0x48>)
 80049da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049de:	429c      	cmp	r4, r3
 80049e0:	da0e      	bge.n	8004a00 <rm2_test_chanlist+0x34>
        next_channel = dll.comm.tx_chanlist[i];
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <rm2_test_chanlist+0x48>)
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	5d1d      	ldrb	r5, [r3, r4]
        if (rm2_channel_fastcheck(next_channel)) {
 80049e8:	4628      	mov	r0, r5
 80049ea:	f7fc fbc5 	bl	8001178 <rm2_channel_fastcheck>
 80049ee:	b968      	cbnz	r0, 8004a0c <rm2_test_chanlist+0x40>
        if (rm2_channel_lookup(next_channel, fp)) {
 80049f0:	4631      	mov	r1, r6
 80049f2:	4628      	mov	r0, r5
 80049f4:	f7ff ff40 	bl	8004878 <rm2_channel_lookup>
 80049f8:	b950      	cbnz	r0, 8004a10 <rm2_test_chanlist+0x44>
    for (i=0, test=False; i<dll.comm.tx_channels; i++) {
 80049fa:	3401      	adds	r4, #1
 80049fc:	b224      	sxth	r4, r4
 80049fe:	e7eb      	b.n	80049d8 <rm2_test_chanlist+0xc>
 8004a00:	2400      	movs	r4, #0
    vl_close(fp);
 8004a02:	4630      	mov	r0, r6
 8004a04:	f001 fd84 	bl	8006510 <vl_close>
}
 8004a08:	4620      	mov	r0, r4
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
        	test = True;
 8004a0c:	2401      	movs	r4, #1
 8004a0e:	e7f8      	b.n	8004a02 <rm2_test_chanlist+0x36>
        	test = True;
 8004a10:	2401      	movs	r4, #1
 8004a12:	e7f6      	b.n	8004a02 <rm2_test_chanlist+0x36>
 8004a14:	20002654 	.word	0x20002654

08004a18 <session_applet_null>:

session_struct session;



void session_applet_null(m2session* a) { }
 8004a18:	4770      	bx	lr

08004a1a <sub_store_session>:



static m2session* sub_store_session(m2session* store, ot_app applet, ot_u16 wait, ot_u8 netstate, ot_u8 channel) {
 8004a1a:	b510      	push	{r4, lr}
 8004a1c:	4604      	mov	r4, r0
/// Attach session to location specified
    store->applet       = applet;
 8004a1e:	6001      	str	r1, [r0, #0]
    store->counter      = wait;
 8004a20:	8082      	strh	r2, [r0, #4]
    store->channel      = channel;
 8004a22:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8004a26:	7182      	strb	r2, [r0, #6]
    store->netstate     = netstate;
 8004a28:	71c3      	strb	r3, [r0, #7]
    store->extra        = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	7203      	strb	r3, [r0, #8]
    store->dialog_id    = rand_prn8();
 8004a2e:	f002 fe19 	bl	8007664 <rand_prn8>
 8004a32:	7260      	strb	r0, [r4, #9]
    return store;
}
 8004a34:	4620      	mov	r0, r4
 8004a36:	bd10      	pop	{r4, pc}

08004a38 <session_init>:



#ifndef EXTF_session_init
void session_init() {
    session.top = &session.heap[_END];
 8004a38:	4b02      	ldr	r3, [pc, #8]	; (8004a44 <session_init+0xc>)
 8004a3a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004a3e:	601a      	str	r2, [r3, #0]
}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	200026d8 	.word	0x200026d8

08004a48 <session_getnext>:
#ifndef EXTF_session_getnext
OT_WEAK ot_uint session_getnext() {
/// Not idiot proof.  Do not call this unless you have already checked
/// session_notempty().
    ot_uint wait;
    wait                    = session.top->counter;
 8004a48:	4b02      	ldr	r3, [pc, #8]	; (8004a54 <session_getnext+0xc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	8898      	ldrh	r0, [r3, #4]
    session.top->counter    = 0;
 8004a4e:	2200      	movs	r2, #0
 8004a50:	809a      	strh	r2, [r3, #4]
    return wait;
}
 8004a52:	4770      	bx	lr
 8004a54:	200026d8 	.word	0x200026d8

08004a58 <session_new>:
#endif



#ifndef EXTF_session_new
OT_WEAK m2session* session_new(ot_app applet, ot_u16 wait, ot_u8 channel, ot_u8 netstate) {
 8004a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a5c:	b083      	sub	sp, #12
    ot_u8* src;
    ot_uint length;

    // Always reserve an extra session for extension.
    // i.e. There must be two or more free sessions to do session_new()
    if (session.top <= &session.heap[_2ND] ) {
 8004a5e:	4c11      	ldr	r4, [pc, #68]	; (8004aa4 <session_new+0x4c>)
 8004a60:	f854 5b10 	ldr.w	r5, [r4], #16
 8004a64:	42a5      	cmp	r5, r4
 8004a66:	d91a      	bls.n	8004a9e <session_new+0x46>
 8004a68:	4698      	mov	r8, r3
 8004a6a:	4691      	mov	r9, r2
 8004a6c:	460f      	mov	r7, r1
 8004a6e:	4606      	mov	r6, r0
        return NULL;
    }

    // We're adding a new session to the bottom of the heap/stack/queue...
    src         = (ot_u8*)session.top;
    session.top--;
 8004a70:	f1a5 000c 	sub.w	r0, r5, #12
 8004a74:	4c0b      	ldr	r4, [pc, #44]	; (8004aa4 <session_new+0x4c>)
 8004a76:	f844 0b34 	str.w	r0, [r4], #52
    length      = (ot_uint)((ot_u8*)&session.heap[_END] - src);
 8004a7a:	1b64      	subs	r4, r4, r5
 8004a7c:	b2a2      	uxth	r2, r4

    // Only do the copy if the size is not zero
    if (length != 0) {
 8004a7e:	b952      	cbnz	r2, 8004a96 <session_new+0x3e>
        memcpy( (ot_u8*)session.top, src, length);
    }

    return sub_store_session(&session.heap[_LAST], applet, wait, netstate, channel);
 8004a80:	f8cd 9000 	str.w	r9, [sp]
 8004a84:	4643      	mov	r3, r8
 8004a86:	463a      	mov	r2, r7
 8004a88:	4631      	mov	r1, r6
 8004a8a:	4807      	ldr	r0, [pc, #28]	; (8004aa8 <session_new+0x50>)
 8004a8c:	f7ff ffc5 	bl	8004a1a <sub_store_session>
}
 8004a90:	b003      	add	sp, #12
 8004a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memcpy( (ot_u8*)session.top, src, length);
 8004a96:	4629      	mov	r1, r5
 8004a98:	f002 fd9a 	bl	80075d0 <ot_memcpy>
 8004a9c:	e7f0      	b.n	8004a80 <session_new+0x28>
        return NULL;
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	e7f6      	b.n	8004a90 <session_new+0x38>
 8004aa2:	bf00      	nop
 8004aa4:	200026d8 	.word	0x200026d8
 8004aa8:	20002700 	.word	0x20002700

08004aac <session_extend>:
#endif



#ifndef EXTF_session_extend
OT_WEAK m2session* session_extend(ot_app applet, ot_u16 wait, ot_u8 channel, ot_u8 netstate) {
 8004aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab0:	b082      	sub	sp, #8
    m2session* extend;

    // If not one free session, there's no room!
    if (session.top <= &session.heap[_1ST]) {
 8004ab2:	4c15      	ldr	r4, [pc, #84]	; (8004b08 <session_extend+0x5c>)
 8004ab4:	f854 6b04 	ldr.w	r6, [r4], #4
 8004ab8:	42a6      	cmp	r6, r4
 8004aba:	d923      	bls.n	8004b04 <session_extend+0x58>
 8004abc:	4699      	mov	r9, r3
 8004abe:	4690      	mov	r8, r2
 8004ac0:	460f      	mov	r7, r1
 8004ac2:	4682      	mov	sl, r0
        return NULL;
    }

    // We're adding a new session...
    session.top--;
 8004ac4:	f1a6 000c 	sub.w	r0, r6, #12
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <session_extend+0x5c>)
 8004aca:	f843 0b28 	str.w	r0, [r3], #40
    // If the new session is on the last spot, it means the heap is actually
    // empty, so no movement is necessary.  If heap is not empty and not full
    // (we know this by condition above and condition below), go through the
    // session heap to see where to put this extended session, and move all
    // higher data one spot up.
    if (extend < &session.heap[_LAST]) {
 8004ace:	4298      	cmp	r0, r3
 8004ad0:	d20e      	bcs.n	8004af0 <session_extend+0x44>
    extend = session.top;
 8004ad2:	4604      	mov	r4, r0
        do {
            // Increment session, noting that first increment simply counters
            // "session.top--" above.
            extend++;
 8004ad4:	340c      	adds	r4, #12

            // Inspect following session. If it is INIT, then we extend the
            // session sequence below this point.  Else, following session is
            // still part of the current session sequence, so keep looking.
            if (extend[1].netstate & M2_NETSTATE_INIT) {
 8004ad6:	7ce5      	ldrb	r5, [r4, #19]
 8004ad8:	f015 0f08 	tst.w	r5, #8
 8004adc:	d102      	bne.n	8004ae4 <session_extend+0x38>
                break;
            }

            // The above "if (session.top <= &session.heap[_1ST])" make it OK
            // if we are at the 1st place in the session heap
        } while (extend < &session.heap[_LAST]);
 8004ade:	4d0b      	ldr	r5, [pc, #44]	; (8004b0c <session_extend+0x60>)
 8004ae0:	42ac      	cmp	r4, r5
 8004ae2:	d3f7      	bcc.n	8004ad4 <session_extend+0x28>

        // Shift the stack down one notch, from top to extension point.
        memcpy( (ot_u8*)session.top,
                (ot_u8*)&session.top[1],
                (ot_uint)((ot_u8*)extend - (ot_u8*)session.top) );
 8004ae4:	1a22      	subs	r2, r4, r0
        memcpy( (ot_u8*)session.top,
 8004ae6:	b292      	uxth	r2, r2
 8004ae8:	4631      	mov	r1, r6
 8004aea:	f002 fd71 	bl	80075d0 <ot_memcpy>
            extend++;
 8004aee:	4620      	mov	r0, r4
    }

    return sub_store_session(extend, applet, wait, channel, netstate);
 8004af0:	f8cd 9000 	str.w	r9, [sp]
 8004af4:	4643      	mov	r3, r8
 8004af6:	463a      	mov	r2, r7
 8004af8:	4651      	mov	r1, sl
 8004afa:	f7ff ff8e 	bl	8004a1a <sub_store_session>
}
 8004afe:	b002      	add	sp, #8
 8004b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return NULL;
 8004b04:	2000      	movs	r0, #0
 8004b06:	e7fa      	b.n	8004afe <session_extend+0x52>
 8004b08:	200026d8 	.word	0x200026d8
 8004b0c:	20002700 	.word	0x20002700

08004b10 <session_app_purge>:
OT_WEAK void session_app_purge(ot_app applet) {
///@todo At present the purge leaves the session-session timing delays intact.
///      Need to determine what the right approach is: either set delays to 0
///      or leave as programmed.
    m2session* next;
    next = session.top;
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <session_app_purge+0x20>)
 8004b12:	681b      	ldr	r3, [r3, #0]

    while (next < &session.heap[_END]) {
 8004b14:	e000      	b.n	8004b18 <session_app_purge+0x8>
        if (next->applet == applet) {
            next->applet    = &session_applet_null;
            next->netstate  = M2_NETSTATE_SCRAP;
        }
        next++;
 8004b16:	330c      	adds	r3, #12
    while (next < &session.heap[_END]) {
 8004b18:	4a06      	ldr	r2, [pc, #24]	; (8004b34 <session_app_purge+0x24>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d207      	bcs.n	8004b2e <session_app_purge+0x1e>
        if (next->applet == applet) {
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4282      	cmp	r2, r0
 8004b22:	d1f8      	bne.n	8004b16 <session_app_purge+0x6>
            next->applet    = &session_applet_null;
 8004b24:	4a04      	ldr	r2, [pc, #16]	; (8004b38 <session_app_purge+0x28>)
 8004b26:	601a      	str	r2, [r3, #0]
            next->netstate  = M2_NETSTATE_SCRAP;
 8004b28:	2204      	movs	r2, #4
 8004b2a:	71da      	strb	r2, [r3, #7]
 8004b2c:	e7f3      	b.n	8004b16 <session_app_purge+0x6>
    }
}
 8004b2e:	4770      	bx	lr
 8004b30:	200026d8 	.word	0x200026d8
 8004b34:	2000270c 	.word	0x2000270c
 8004b38:	08004a19 	.word	0x08004a19

08004b3c <session_app_isloaded>:


#ifndef EXTF_session_app_isloaded
OT_WEAK ot_bool session_app_isloaded(ot_app applet) {
    m2session* next;
    next = session.top;
 8004b3c:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <session_app_isloaded+0x20>)
 8004b3e:	681b      	ldr	r3, [r3, #0]

    while ((next->applet != applet) && (next < &session.heap[_END])) {
 8004b40:	e000      	b.n	8004b44 <session_app_isloaded+0x8>
        next++;
 8004b42:	330c      	adds	r3, #12
    while ((next->applet != applet) && (next < &session.heap[_END])) {
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4282      	cmp	r2, r0
 8004b48:	d002      	beq.n	8004b50 <session_app_isloaded+0x14>
 8004b4a:	4a05      	ldr	r2, [pc, #20]	; (8004b60 <session_app_isloaded+0x24>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d3f8      	bcc.n	8004b42 <session_app_isloaded+0x6>
    }
    return (ot_bool)(next < &session.heap[_END]);
}
 8004b50:	4803      	ldr	r0, [pc, #12]	; (8004b60 <session_app_isloaded+0x24>)
 8004b52:	4283      	cmp	r3, r0
 8004b54:	bf2c      	ite	cs
 8004b56:	2000      	movcs	r0, #0
 8004b58:	2001      	movcc	r0, #1
 8004b5a:	4770      	bx	lr
 8004b5c:	200026d8 	.word	0x200026d8
 8004b60:	2000270c 	.word	0x2000270c

08004b64 <session_scrap>:
}
#endif


#ifndef EXTF_session_scrap
OT_WEAK void session_scrap(void) {
 8004b64:	b508      	push	{r3, lr}
    if (session.top != &session.heap[_END]) {
 8004b66:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <session_scrap+0x20>)
 8004b68:	f853 0b34 	ldr.w	r0, [r3], #52
 8004b6c:	4298      	cmp	r0, r3
 8004b6e:	d008      	beq.n	8004b82 <session_scrap+0x1e>
        m2session* old_top;
        old_top = session.top++;
 8004b70:	f100 030c 	add.w	r3, r0, #12
 8004b74:	4a03      	ldr	r2, [pc, #12]	; (8004b84 <session_scrap+0x20>)
 8004b76:	6013      	str	r3, [r2, #0]

        if (old_top->applet != NULL) {
 8004b78:	6803      	ldr	r3, [r0, #0]
 8004b7a:	b113      	cbz	r3, 8004b82 <session_scrap+0x1e>
            old_top->netstate = M2_NETSTATE_SCRAP;
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	71c2      	strb	r2, [r0, #7]
            old_top->applet(old_top);
 8004b80:	4798      	blx	r3
        }
    }
}
 8004b82:	bd08      	pop	{r3, pc}
 8004b84:	200026d8 	.word	0x200026d8

08004b88 <session_pop>:
#ifndef EXTF_session_pop
OT_WEAK void session_pop() {
/// session.top++ will pop a session, but this routine includes protection
/// against less-than-perfect API usage by assuring that session.top is
/// only incremented when in bounds.
    if (session.top != &session.heap[_END])
 8004b88:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <session_pop+0x14>)
 8004b8a:	f852 3b34 	ldr.w	r3, [r2], #52
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d002      	beq.n	8004b98 <session_pop+0x10>
        session.top++;
 8004b92:	330c      	adds	r3, #12
 8004b94:	4a01      	ldr	r2, [pc, #4]	; (8004b9c <session_pop+0x14>)
 8004b96:	6013      	str	r3, [r2, #0]
}
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	200026d8 	.word	0x200026d8

08004ba0 <session_top>:


#ifndef EXTF_session_top
OT_WEAK m2session* session_top() {
    return session.top;
}
 8004ba0:	4b01      	ldr	r3, [pc, #4]	; (8004ba8 <session_top+0x8>)
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	200026d8 	.word	0x200026d8

08004bac <session_continue>:
OT_WEAK m2session* session_continue(ot_app applet, ot_u8 next_state, ot_uint wait) {
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	4606      	mov	r6, r0
 8004bb0:	460d      	mov	r5, r1
 8004bb2:	4617      	mov	r7, r2
    active      = session_top();
 8004bb4:	f7ff fff4 	bl	8004ba0 <session_top>
 8004bb8:	4604      	mov	r4, r0
    netstate    = (active->netstate & 0x0F) | M2_NETSTATE_CONNECTED | next_state;
 8004bba:	79c3      	ldrb	r3, [r0, #7]
 8004bbc:	f003 030e 	and.w	r3, r3, #14
 8004bc0:	432b      	orrs	r3, r5
    next = session_extend(applet, /*dll.comm.tc +*/ wait, active->channel, netstate);
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	7982      	ldrb	r2, [r0, #6]
 8004bc8:	4639      	mov	r1, r7
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f7ff ff6e 	bl	8004aac <session_extend>
    if (next) {
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	b148      	cbz	r0, 8004be8 <session_continue+0x3c>
        next->extra     = active->extra;
 8004bd4:	7a22      	ldrb	r2, [r4, #8]
 8004bd6:	7202      	strb	r2, [r0, #8]
        next->dialog_id = active->dialog_id++;
 8004bd8:	7a62      	ldrb	r2, [r4, #9]
 8004bda:	1c51      	adds	r1, r2, #1
 8004bdc:	7261      	strb	r1, [r4, #9]
 8004bde:	7242      	strb	r2, [r0, #9]
        next->subnet    = active->subnet;
 8004be0:	7aa2      	ldrb	r2, [r4, #10]
 8004be2:	7282      	strb	r2, [r0, #10]
        next->flags     = active->flags;
 8004be4:	7ae2      	ldrb	r2, [r4, #11]
 8004be6:	72c2      	strb	r2, [r0, #11]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004bec <session_numfree>:


#ifndef EXTF_session_numfree
OT_WEAK ot_int session_numfree() {
    ot_uint block;
    block   = (ot_uint)((ot_u8*)session.top - (ot_u8*)&session.heap[_1ST]);
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <session_numfree+0x18>)
 8004bee:	f853 0b04 	ldr.w	r0, [r3], #4
 8004bf2:	1ac0      	subs	r0, r0, r3
 8004bf4:	b280      	uxth	r0, r0
    block  /= sizeof(m2session);
 8004bf6:	4b04      	ldr	r3, [pc, #16]	; (8004c08 <session_numfree+0x1c>)
 8004bf8:	fba3 3000 	umull	r3, r0, r3, r0
 8004bfc:	08c0      	lsrs	r0, r0, #3
    block  -= 1;            //because we always keep one free for extensions

    return (ot_int)block;
}
 8004bfe:	3801      	subs	r0, #1
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	200026d8 	.word	0x200026d8
 8004c08:	aaaaaaab 	.word	0xaaaaaaab

08004c0c <session_notempty>:
#endif


#ifndef EXTF_session_notempty
OT_WEAK ot_bool session_notempty() {
    return (session.top < &session.heap[_END]);
 8004c0c:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <session_notempty+0x10>)
 8004c0e:	f853 0b34 	ldr.w	r0, [r3], #52
}
 8004c12:	4298      	cmp	r0, r3
 8004c14:	bf2c      	ite	cs
 8004c16:	2000      	movcs	r0, #0
 8004c18:	2001      	movcc	r0, #1
 8004c1a:	4770      	bx	lr
 8004c1c:	200026d8 	.word	0x200026d8

08004c20 <session_flush>:
OT_WEAK void session_flush() {
 8004c20:	b508      	push	{r3, lr}
    while (session_notempty()) {
 8004c22:	f7ff fff3 	bl	8004c0c <session_notempty>
 8004c26:	b148      	cbz	r0, 8004c3c <session_flush+0x1c>
        if (session.top->netstate & M2_NETSTATE_INIT) {
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <session_flush+0x20>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	79da      	ldrb	r2, [r3, #7]
 8004c2e:	f012 0f08 	tst.w	r2, #8
 8004c32:	d103      	bne.n	8004c3c <session_flush+0x1c>
        session.top++;      //session_pop();
 8004c34:	330c      	adds	r3, #12
 8004c36:	4a02      	ldr	r2, [pc, #8]	; (8004c40 <session_flush+0x20>)
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	e7f2      	b.n	8004c22 <session_flush+0x2>
}
 8004c3c:	bd08      	pop	{r3, pc}
 8004c3e:	bf00      	nop
 8004c40:	200026d8 	.word	0x200026d8

08004c44 <session_follower>:



#ifndef EXTF_session_follower
OT_WEAK m2session* session_follower() {
    if (session.top < &session.heap[_LAST]) {
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <session_follower+0x14>)
 8004c46:	f853 0b28 	ldr.w	r0, [r3], #40
 8004c4a:	4298      	cmp	r0, r3
 8004c4c:	d201      	bcs.n	8004c52 <session_follower+0xe>
        return &session.top[1];
 8004c4e:	300c      	adds	r0, #12
 8004c50:	4770      	bx	lr
    }
    return NULL;
 8004c52:	2000      	movs	r0, #0
}
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	200026d8 	.word	0x200026d8

08004c5c <session_follower_wait>:
#endif


#ifndef EXTF_session_follower_wait
OT_WEAK ot_u16 session_follower_wait() {
    if (session.top < &session.heap[_LAST]) {
 8004c5c:	4b04      	ldr	r3, [pc, #16]	; (8004c70 <session_follower_wait+0x14>)
 8004c5e:	f853 2b28 	ldr.w	r2, [r3], #40
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d201      	bcs.n	8004c6a <session_follower_wait+0xe>
        return session.top[1].counter;
 8004c66:	8a10      	ldrh	r0, [r2, #16]
 8004c68:	4770      	bx	lr
    }
    return 65535;
 8004c6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8004c6e:	4770      	bx	lr
 8004c70:	200026d8 	.word	0x200026d8

08004c74 <session_netstate>:



#ifndef EXTF_session_netstate
OT_WEAK ot_u8 session_netstate() {
    return session.top->netstate;
 8004c74:	4b01      	ldr	r3, [pc, #4]	; (8004c7c <session_netstate+0x8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	79d8      	ldrb	r0, [r3, #7]
 8004c7a:	4770      	bx	lr
 8004c7c:	200026d8 	.word	0x200026d8

08004c80 <sub_opgroup_scinit>:



void sub_opgroup_scinit(void) {
/// This is an SCTP command.  RFU
}
 8004c80:	4770      	bx	lr

08004c82 <sub_opgroup_sctransport>:



void sub_opgroup_sctransport(void) {
/// This is an SCTP command.  RFU
}
 8004c82:	4770      	bx	lr

08004c84 <sub_load_charcorrelation>:
/** Protocol File Loading Subroutines <BR>
  * ========================================================================<BR>
  * - Used as the load_function() argument to sub_load_isf()
  */

ot_int sub_load_charcorrelation(ot_int* cursor, ot_u8 data_byte) {
 8004c84:	b470      	push	{r4, r5, r6}
    ot_int c;
    ot_u8* local_buf;

    /// The datastream is buffered in an unused part of the data-queue.
    /// The LOCAL_U8() macro behaves similar to array nomenclature
    local_buf = &LOCAL_U8(0);
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <sub_load_charcorrelation+0x74>)
 8004c88:	68dc      	ldr	r4, [r3, #12]
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	3b10      	subs	r3, #16
 8004c8e:	441c      	add	r4, r3
    local_buf[*cursor] = data_byte;
 8004c90:	f9b0 3000 	ldrsh.w	r3, [r0]
 8004c94:	54e1      	strb	r1, [r4, r3]

    /// If the datastream is *not* fully pre-buffered, return to the caller.
    /// If the datastream is fully pre-buffered, then proceed to correlation.
    if ( *cursor < (m2qp.qtmpl.length-1) ) {
 8004c96:	f9b0 2000 	ldrsh.w	r2, [r0]
 8004c9a:	4b18      	ldr	r3, [pc, #96]	; (8004cfc <sub_load_charcorrelation+0x78>)
 8004c9c:	7a5b      	ldrb	r3, [r3, #9]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	db02      	blt.n	8004caa <sub_load_charcorrelation+0x26>
    /// Equality Correlation with data shifting of the buffer after each
    /// comparison operation.  The value c is the comparison score.  It is a
    /// bipolar accumulator, so a non-equality alters the score by -1 and an
    /// equality by +1.  It is implemented as c += (0 or 2) - 1
    else {
        for (i=0, c=0; i<m2qp.qtmpl.length; i++) {
 8004ca4:	2500      	movs	r5, #0
 8004ca6:	462b      	mov	r3, r5
 8004ca8:	e00c      	b.n	8004cc4 <sub_load_charcorrelation+0x40>
        (*cursor)++;
 8004caa:	3201      	adds	r2, #1
 8004cac:	8002      	strh	r2, [r0, #0]
        return 0;
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e020      	b.n	8004cf4 <sub_load_charcorrelation+0x70>
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	4428      	add	r0, r5
 8004cb6:	b280      	uxth	r0, r0
                   (m2qp.qtmpl.value[i] & m2qp.qtmpl.mask[i]) ) << 1;
            c -= 1;
 8004cb8:	3801      	subs	r0, #1
 8004cba:	b205      	sxth	r5, r0

            local_buf[i-1] = local_buf[i];
 8004cbc:	3a01      	subs	r2, #1
 8004cbe:	54a6      	strb	r6, [r4, r2]
        for (i=0, c=0; i<m2qp.qtmpl.length; i++) {
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	b21b      	sxth	r3, r3
 8004cc4:	4a0d      	ldr	r2, [pc, #52]	; (8004cfc <sub_load_charcorrelation+0x78>)
 8004cc6:	7a52      	ldrb	r2, [r2, #9]
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	da0b      	bge.n	8004ce4 <sub_load_charcorrelation+0x60>
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 8004ccc:	461a      	mov	r2, r3
 8004cce:	5ce6      	ldrb	r6, [r4, r3]
                   (m2qp.qtmpl.value[i] & m2qp.qtmpl.mask[i]) ) << 1;
 8004cd0:	480a      	ldr	r0, [pc, #40]	; (8004cfc <sub_load_charcorrelation+0x78>)
 8004cd2:	6901      	ldr	r1, [r0, #16]
 8004cd4:	5cc9      	ldrb	r1, [r1, r3]
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 8004cd6:	68c0      	ldr	r0, [r0, #12]
 8004cd8:	5cc0      	ldrb	r0, [r0, r3]
 8004cda:	4071      	eors	r1, r6
 8004cdc:	4208      	tst	r0, r1
 8004cde:	d1e8      	bne.n	8004cb2 <sub_load_charcorrelation+0x2e>
 8004ce0:	2002      	movs	r0, #2
 8004ce2:	e7e7      	b.n	8004cb4 <sub_load_charcorrelation+0x30>

    /// One parameter of the correlation query is a correlation threshold.  It
    /// occupies the lower 5 bits of the query code.  It is an integer value.
    /// Scores higher than the threshold are passing scores.  The query score
    /// indicates the number of hits the query made on the file data.
    return (c >= (ot_int)(m2qp.qtmpl.code & 0x1F));
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <sub_load_charcorrelation+0x78>)
 8004ce6:	7a18      	ldrb	r0, [r3, #8]
 8004ce8:	f000 001f 	and.w	r0, r0, #31
 8004cec:	4285      	cmp	r5, r0
 8004cee:	bfb4      	ite	lt
 8004cf0:	2000      	movlt	r0, #0
 8004cf2:	2001      	movge	r0, #1
}
 8004cf4:	bc70      	pop	{r4, r5, r6}
 8004cf6:	4770      	bx	lr
 8004cf8:	20002d74 	.word	0x20002d74
 8004cfc:	2000270c 	.word	0x2000270c

08004d00 <sub_load_comparison>:


ot_int sub_load_comparison(ot_int* cursor, ot_u8 data_byte) {
 8004d00:	b410      	push	{r4}
/// Just loads comparison data, from the file system, into the local buffer.
/// Comparison is limited to16 bytes per the Mode 2 Spec.
    LOCAL_U8(*cursor) = data_byte;
 8004d02:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <sub_load_comparison+0x24>)
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	3b10      	subs	r3, #16
 8004d0a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8004d0e:	4423      	add	r3, r4
 8004d10:	54d1      	strb	r1, [r2, r3]
    (*cursor)++;
 8004d12:	f9b0 3000 	ldrsh.w	r3, [r0]
 8004d16:	3301      	adds	r3, #1
 8004d18:	8003      	strh	r3, [r0, #0]
    return 0;
}
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	20002d74 	.word	0x20002d74

08004d28 <sub_load_return>:


ot_int sub_load_return(ot_int* cursor, ot_u8 data_byte) {
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	4604      	mov	r4, r0
/// Just loads file data into the TX queue.
    q_writebyte(&txq, data_byte);
 8004d2c:	4804      	ldr	r0, [pc, #16]	; (8004d40 <sub_load_return+0x18>)
 8004d2e:	f001 f8a9 	bl	8005e84 <q_writebyte>
    (*cursor)++;
 8004d32:	f9b4 3000 	ldrsh.w	r3, [r4]
 8004d36:	3301      	adds	r3, #1
 8004d38:	8023      	strh	r3, [r4, #0]
    return 0;
}
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	bf00      	nop
 8004d40:	20002d74 	.word	0x20002d74

08004d44 <m2qp_sig_isf>:
OT_WEAK ot_bool m2qp_sig_isf(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 8004d44:	2000      	movs	r0, #0
 8004d46:	4770      	bx	lr

08004d48 <sub_opgroup_globalisf>:
void sub_opgroup_globalisf(void) {
 8004d48:	b508      	push	{r3, lr}
    M2QP_CB_ISF();
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <sub_opgroup_globalisf+0x18>)
 8004d4c:	7818      	ldrb	r0, [r3, #0]
 8004d4e:	4a05      	ldr	r2, [pc, #20]	; (8004d64 <sub_opgroup_globalisf+0x1c>)
 8004d50:	f000 010f 	and.w	r1, r0, #15
 8004d54:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004d58:	f7ff fff4 	bl	8004d44 <m2qp_sig_isf>
}
 8004d5c:	bd08      	pop	{r3, pc}
 8004d5e:	bf00      	nop
 8004d60:	2000270c 	.word	0x2000270c
 8004d64:	200026a8 	.word	0x200026a8

08004d68 <sub_opgroup_udp>:
void sub_opgroup_udp(void) {
 8004d68:	b508      	push	{r3, lr}
    rxq.putcursor = rxq.back;
 8004d6a:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <sub_opgroup_udp+0x28>)
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	609a      	str	r2, [r3, #8]
    status  = alp_parse_message(&m2alp, &m2np.rt.dlog);
 8004d70:	4908      	ldr	r1, [pc, #32]	; (8004d94 <sub_opgroup_udp+0x2c>)
 8004d72:	4809      	ldr	r0, [pc, #36]	; (8004d98 <sub_opgroup_udp+0x30>)
 8004d74:	f000 fe7d 	bl	8005a72 <alp_parse_message>
    if (status == MSG_Null) {
 8004d78:	b100      	cbz	r0, 8004d7c <sub_opgroup_udp+0x14>
}
 8004d7a:	bd08      	pop	{r3, pc}
        M2QP_CB_ISF();
 8004d7c:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <sub_opgroup_udp+0x34>)
 8004d7e:	7818      	ldrb	r0, [r3, #0]
 8004d80:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <sub_opgroup_udp+0x2c>)
 8004d82:	f000 010f 	and.w	r1, r0, #15
 8004d86:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004d8a:	f7ff ffdb 	bl	8004d44 <m2qp_sig_isf>
}
 8004d8e:	e7f4      	b.n	8004d7a <sub_opgroup_udp+0x12>
 8004d90:	20002d60 	.word	0x20002d60
 8004d94:	200026a8 	.word	0x200026a8
 8004d98:	20002720 	.word	0x20002720
 8004d9c:	2000270c 	.word	0x2000270c

08004da0 <m2qp_sig_ctl>:
OT_WEAK ot_bool m2qp_sig_ctl(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 8004da0:	2000      	movs	r0, #0
 8004da2:	4770      	bx	lr

08004da4 <m2qp_sig_a2p>:
OT_WEAK ot_bool m2qp_sig_a2p(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 8004da4:	2000      	movs	r0, #0
 8004da6:	4770      	bx	lr

08004da8 <m2qp_init>:
OT_WEAK void m2qp_init() {
 8004da8:	b508      	push	{r3, lr}
    m2qp.cmd.code = 0x1F;
 8004daa:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <m2qp_init+0x14>)
 8004dac:	221f      	movs	r2, #31
 8004dae:	701a      	strb	r2, [r3, #0]
    alp_init(&m2alp, &rxq, &txq);
 8004db0:	4a03      	ldr	r2, [pc, #12]	; (8004dc0 <m2qp_init+0x18>)
 8004db2:	4904      	ldr	r1, [pc, #16]	; (8004dc4 <m2qp_init+0x1c>)
 8004db4:	4804      	ldr	r0, [pc, #16]	; (8004dc8 <m2qp_init+0x20>)
 8004db6:	f000 fe55 	bl	8005a64 <alp_init>
}
 8004dba:	bd08      	pop	{r3, pc}
 8004dbc:	2000270c 	.word	0x2000270c
 8004dc0:	20002d74 	.word	0x20002d74
 8004dc4:	20002d60 	.word	0x20002d60
 8004dc8:	20002720 	.word	0x20002720

08004dcc <sub_parse_response>:
ot_int sub_parse_response(m2session* active) {
 8004dcc:	b538      	push	{r3, r4, r5, lr}
    req_cmdcode     = m2qp.cmd.code;
 8004dce:	4d17      	ldr	r5, [pc, #92]	; (8004e2c <sub_parse_response+0x60>)
 8004dd0:	782c      	ldrb	r4, [r5, #0]
    m2qp.cmd.code   = q_readbyte(&rxq);
 8004dd2:	4817      	ldr	r0, [pc, #92]	; (8004e30 <sub_parse_response+0x64>)
 8004dd4:	f001 f888 	bl	8005ee8 <q_readbyte>
 8004dd8:	7028      	strb	r0, [r5, #0]
    if (((req_cmdcode ^ m2qp.cmd.code) & 0x0F) == 0) {
 8004dda:	4060      	eors	r0, r4
 8004ddc:	f010 0f0f 	tst.w	r0, #15
 8004de0:	d109      	bne.n	8004df6 <sub_parse_response+0x2a>
        if (((req_cmdcode & 0x60) == M2TT_REQ_M_INIT) && (q_writespace(&txq) > 48)) {
 8004de2:	f004 0360 	and.w	r3, r4, #96	; 0x60
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d008      	beq.n	8004dfc <sub_parse_response+0x30>
            opgroup_proc[((req_cmdcode>>1) & 7)]();
 8004dea:	f3c4 0442 	ubfx	r4, r4, #1, #3
 8004dee:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <sub_parse_response+0x68>)
 8004df0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004df4:	4798      	blx	r3
}
 8004df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
        if (((req_cmdcode & 0x60) == M2TT_REQ_M_INIT) && (q_writespace(&txq) > 48)) {
 8004dfc:	480e      	ldr	r0, [pc, #56]	; (8004e38 <sub_parse_response+0x6c>)
 8004dfe:	f000 fffe 	bl	8005dfe <q_writespace>
 8004e02:	2830      	cmp	r0, #48	; 0x30
 8004e04:	ddf1      	ble.n	8004dea <sub_parse_response+0x1e>
            txq.getcursor[0]++;
 8004e06:	480c      	ldr	r0, [pc, #48]	; (8004e38 <sub_parse_response+0x6c>)
 8004e08:	6842      	ldr	r2, [r0, #4]
 8004e0a:	7813      	ldrb	r3, [r2, #0]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	7013      	strb	r3, [r2, #0]
            q_writestring(&txq, m2np.rt.dlog.value, m2np.rt.dlog.length);
 8004e10:	4d0a      	ldr	r5, [pc, #40]	; (8004e3c <sub_parse_response+0x70>)
 8004e12:	792a      	ldrb	r2, [r5, #4]
 8004e14:	68a9      	ldr	r1, [r5, #8]
 8004e16:	f001 f8ab 	bl	8005f70 <q_writestring>
            test = (ot_u8)M2QP_CB_A2P();
 8004e1a:	1d2a      	adds	r2, r5, #4
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4608      	mov	r0, r1
 8004e20:	f7ff ffc0 	bl	8004da4 <m2qp_sig_a2p>
        if (test) {
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d1e0      	bne.n	8004dea <sub_parse_response+0x1e>
 8004e28:	e7e5      	b.n	8004df6 <sub_parse_response+0x2a>
 8004e2a:	bf00      	nop
 8004e2c:	2000270c 	.word	0x2000270c
 8004e30:	20002d60 	.word	0x20002d60
 8004e34:	08009ce8 	.word	0x08009ce8
 8004e38:	20002d74 	.word	0x20002d74
 8004e3c:	200026a4 	.word	0x200026a4

08004e40 <sub_parse_control>:
ot_int sub_parse_control(m2session* active) {
 8004e40:	b538      	push	{r3, r4, r5, lr}
    code    = q_readbyte(&rxq);
 8004e42:	4c07      	ldr	r4, [pc, #28]	; (8004e60 <sub_parse_control+0x20>)
 8004e44:	4620      	mov	r0, r4
 8004e46:	f001 f84f 	bl	8005ee8 <q_readbyte>
 8004e4a:	4605      	mov	r5, r0
    subcode = q_readbyte(&rxq);
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f001 f84b 	bl	8005ee8 <q_readbyte>
    return (ot_int)M2QP_CB_ERROR(code, subcode);
 8004e52:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <sub_parse_control+0x24>)
 8004e54:	4601      	mov	r1, r0
 8004e56:	4628      	mov	r0, r5
 8004e58:	f7ff ffa2 	bl	8004da0 <m2qp_sig_ctl>
}
 8004e5c:	b200      	sxth	r0, r0
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	20002d60 	.word	0x20002d60
 8004e64:	200026a8 	.word	0x200026a8

08004e68 <sub_renack>:
void sub_renack(ot_int nack) {
 8004e68:	b508      	push	{r3, lr}
    txq.getcursor[-1]  |= 0x10;     //M2QP Nack Bit
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <sub_renack+0x28>)
 8004e6c:	6859      	ldr	r1, [r3, #4]
 8004e6e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8004e72:	f042 0210 	orr.w	r2, r2, #16
 8004e76:	f801 2c01 	strb.w	r2, [r1, #-1]
    txq.front[3]       |= 1;        //DLL Nack Bit ///@todo wrap into DLL layer
 8004e7a:	68d9      	ldr	r1, [r3, #12]
 8004e7c:	78ca      	ldrb	r2, [r1, #3]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	70ca      	strb	r2, [r1, #3]
    q_writebyte(&txq, (ot_u8)nack);
 8004e84:	b2c1      	uxtb	r1, r0
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fffc 	bl	8005e84 <q_writebyte>
}
 8004e8c:	bd08      	pop	{r3, pc}
 8004e8e:	bf00      	nop
 8004e90:	20002d74 	.word	0x20002d74

08004e94 <sub_opgroup_rfu>:
void sub_opgroup_rfu(void) {
 8004e94:	b508      	push	{r3, lr}
    sub_renack(1);
 8004e96:	2001      	movs	r0, #1
 8004e98:	f7ff ffe6 	bl	8004e68 <sub_renack>
}
 8004e9c:	bd08      	pop	{r3, pc}
	...

08004ea0 <sub_load_query>:
void sub_load_query(void) {
 8004ea0:	b538      	push	{r3, r4, r5, lr}
    m2qp.qtmpl.length = q_readbyte(&rxq);
 8004ea2:	4d0e      	ldr	r5, [pc, #56]	; (8004edc <sub_load_query+0x3c>)
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f001 f81f 	bl	8005ee8 <q_readbyte>
 8004eaa:	4c0d      	ldr	r4, [pc, #52]	; (8004ee0 <sub_load_query+0x40>)
 8004eac:	7260      	strb	r0, [r4, #9]
    m2qp.qtmpl.code   = q_readbyte(&rxq);
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f001 f81a 	bl	8005ee8 <q_readbyte>
 8004eb4:	7220      	strb	r0, [r4, #8]
    if ((m2qp.qtmpl.code & M2QC_MASKED) != 0) {
 8004eb6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004eba:	d109      	bne.n	8004ed0 <sub_load_query+0x30>
        m2qp.qtmpl.mask = (ot_u8*)fixed_mask;
 8004ebc:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <sub_load_query+0x40>)
 8004ebe:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <sub_load_query+0x44>)
 8004ec0:	60da      	str	r2, [r3, #12]
    m2qp.qtmpl.value  = q_markbyte(&rxq, m2qp.qtmpl.length);
 8004ec2:	4c07      	ldr	r4, [pc, #28]	; (8004ee0 <sub_load_query+0x40>)
 8004ec4:	7a61      	ldrb	r1, [r4, #9]
 8004ec6:	4805      	ldr	r0, [pc, #20]	; (8004edc <sub_load_query+0x3c>)
 8004ec8:	f000 ffd7 	bl	8005e7a <q_markbyte>
 8004ecc:	6120      	str	r0, [r4, #16]
}
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
        m2qp.qtmpl.mask = q_markbyte(&rxq, m2qp.qtmpl.length);
 8004ed0:	7a61      	ldrb	r1, [r4, #9]
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f000 ffd1 	bl	8005e7a <q_markbyte>
 8004ed8:	60e0      	str	r0, [r4, #12]
 8004eda:	e7f2      	b.n	8004ec2 <sub_load_query+0x22>
 8004edc:	20002d60 	.word	0x20002d60
 8004ee0:	2000270c 	.word	0x2000270c
 8004ee4:	08009d08 	.word	0x08009d08

08004ee8 <m2qp_load_isf>:
                                id_tmpl*    user_id ) {
 8004ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eec:	b085      	sub	sp, #20
 8004eee:	460d      	mov	r5, r1
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	4699      	mov	r9, r3
    ot_int  j       = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f8ad 300a 	strh.w	r3, [sp, #10]
    if (is_series) {
 8004efa:	4682      	mov	sl, r0
 8004efc:	b940      	cbnz	r0, 8004f10 <m2qp_load_isf+0x28>
        scratch.ubyte[0]    = isf_id;
 8004efe:	f88d 100c 	strb.w	r1, [sp, #12]
        n_files             = 1;
 8004f02:	f04f 0b01 	mov.w	fp, #1
    vlFILE* fp_s    = NULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	9301      	str	r3, [sp, #4]
    ot_int  output  = 0;
 8004f0a:	2700      	movs	r7, #0
    for (i=0; i<n_files; i++) {
 8004f0c:	463e      	mov	r6, r7
 8004f0e:	e01f      	b.n	8004f50 <m2qp_load_isf+0x68>
        fp_s = ISS_open( isf_id, VL_ACCESS_R, user_id );
 8004f10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f12:	2124      	movs	r1, #36	; 0x24
 8004f14:	4628      	mov	r0, r5
 8004f16:	f001 fb3b 	bl	8006590 <ISS_open>
        if (fp_s == NULL) {
 8004f1a:	9001      	str	r0, [sp, #4]
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d056      	beq.n	8004fce <m2qp_load_isf+0xe6>
        n_files = fp_s->length;
 8004f20:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8004f24:	e7f1      	b.n	8004f0a <m2qp_load_isf+0x22>
        fp_f = ISF_open( scratch.ubyte[align], VL_ACCESS_R, user_id );
 8004f26:	ab04      	add	r3, sp, #16
 8004f28:	441d      	add	r5, r3
 8004f2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f2c:	2124      	movs	r1, #36	; 0x24
 8004f2e:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 8004f32:	f001 fb35 	bl	80065a0 <ISF_open>
        if (fp_f == NULL) {
 8004f36:	4680      	mov	r8, r0
 8004f38:	b1d0      	cbz	r0, 8004f70 <m2qp_load_isf+0x88>
        offset -= fp_f->length;
 8004f3a:	8905      	ldrh	r5, [r0, #8]
 8004f3c:	1b65      	subs	r5, r4, r5
 8004f3e:	b22d      	sxth	r5, r5
        if (offset < 0) {
 8004f40:	2d00      	cmp	r5, #0
 8004f42:	db2d      	blt.n	8004fa0 <m2qp_load_isf+0xb8>
        vl_close(fp_f);
 8004f44:	4640      	mov	r0, r8
 8004f46:	f001 fae3 	bl	8006510 <vl_close>
    for (i=0; i<n_files; i++) {
 8004f4a:	3601      	adds	r6, #1
 8004f4c:	b236      	sxth	r6, r6
 8004f4e:	462c      	mov	r4, r5
 8004f50:	455e      	cmp	r6, fp
 8004f52:	da35      	bge.n	8004fc0 <m2qp_load_isf+0xd8>
        ot_u8 align = (i & 1);
 8004f54:	f006 0501 	and.w	r5, r6, #1
        if ((is_series) && (align == 0)) {
 8004f58:	f1ba 0f00 	cmp.w	sl, #0
 8004f5c:	d0e3      	beq.n	8004f26 <m2qp_load_isf+0x3e>
 8004f5e:	2d00      	cmp	r5, #0
 8004f60:	d1e1      	bne.n	8004f26 <m2qp_load_isf+0x3e>
            scratch.ushort = vl_read(fp_s, i);
 8004f62:	b2b1      	uxth	r1, r6
 8004f64:	9801      	ldr	r0, [sp, #4]
 8004f66:	f001 fa54 	bl	8006412 <vl_read>
 8004f6a:	f8ad 000c 	strh.w	r0, [sp, #12]
 8004f6e:	e7da      	b.n	8004f26 <m2qp_load_isf+0x3e>
            vl_close(fp_s);
 8004f70:	9801      	ldr	r0, [sp, #4]
 8004f72:	f001 facd 	bl	8006510 <vl_close>
            return -32768;
 8004f76:	4f17      	ldr	r7, [pc, #92]	; (8004fd4 <m2qp_load_isf+0xec>)
 8004f78:	e025      	b.n	8004fc6 <m2qp_load_isf+0xde>
                    ldata.ushort = vl_read(fp_f, offset);
 8004f7a:	b2a1      	uxth	r1, r4
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	f001 fa48 	bl	8006412 <vl_read>
 8004f82:	f8ad 0008 	strh.w	r0, [sp, #8]
                output += load_function( &j, ldata.ubyte[align] );
 8004f86:	ab04      	add	r3, sp, #16
 8004f88:	441d      	add	r5, r3
 8004f8a:	f815 1c08 	ldrb.w	r1, [r5, #-8]
 8004f8e:	f10d 000a 	add.w	r0, sp, #10
 8004f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f94:	4798      	blx	r3
 8004f96:	fa17 f780 	uxtah	r7, r7, r0
 8004f9a:	b23f      	sxth	r7, r7
                offset++;
 8004f9c:	3401      	adds	r4, #1
 8004f9e:	b224      	sxth	r4, r4
            while ( (j < window_bytes) && (offset < fp_f->length) ) {
 8004fa0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8004fa4:	454b      	cmp	r3, r9
 8004fa6:	da09      	bge.n	8004fbc <m2qp_load_isf+0xd4>
 8004fa8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8004fac:	429c      	cmp	r4, r3
 8004fae:	da03      	bge.n	8004fb8 <m2qp_load_isf+0xd0>
                if (align == 0) {
 8004fb0:	f014 0501 	ands.w	r5, r4, #1
 8004fb4:	d1e7      	bne.n	8004f86 <m2qp_load_isf+0x9e>
 8004fb6:	e7e0      	b.n	8004f7a <m2qp_load_isf+0x92>
            offset = 0;
 8004fb8:	2500      	movs	r5, #0
 8004fba:	e7c3      	b.n	8004f44 <m2qp_load_isf+0x5c>
 8004fbc:	2500      	movs	r5, #0
 8004fbe:	e7c1      	b.n	8004f44 <m2qp_load_isf+0x5c>
    vl_close(fp_s);
 8004fc0:	9801      	ldr	r0, [sp, #4]
 8004fc2:	f001 faa5 	bl	8006510 <vl_close>
}
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	b005      	add	sp, #20
 8004fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return -32768;
 8004fce:	4f01      	ldr	r7, [pc, #4]	; (8004fd4 <m2qp_load_isf+0xec>)
 8004fd0:	e7f9      	b.n	8004fc6 <m2qp_load_isf+0xde>
 8004fd2:	bf00      	nop
 8004fd4:	ffff8000 	.word	0xffff8000

08004fd8 <m2qp_isf_comp>:
OT_WEAK ot_int m2qp_isf_comp(ot_u8 is_series, id_tmpl* user_id) {
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	4604      	mov	r4, r0
 8004fde:	460e      	mov	r6, r1
        m2qp.qtmpl.length   = (m2qp.qtmpl.code) ? m2qp.qtmpl.length : 0;
 8004fe0:	4b39      	ldr	r3, [pc, #228]	; (80050c8 <m2qp_isf_comp+0xf0>)
 8004fe2:	7a1b      	ldrb	r3, [r3, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d03e      	beq.n	8005066 <m2qp_isf_comp+0x8e>
 8004fe8:	4a37      	ldr	r2, [pc, #220]	; (80050c8 <m2qp_isf_comp+0xf0>)
 8004fea:	7a51      	ldrb	r1, [r2, #9]
 8004fec:	4a36      	ldr	r2, [pc, #216]	; (80050c8 <m2qp_isf_comp+0xf0>)
 8004fee:	7251      	strb	r1, [r2, #9]
                               &sub_load_charcorrelation : &sub_load_comparison;
 8004ff0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ff4:	d039      	beq.n	800506a <m2qp_isf_comp+0x92>
 8004ff6:	4d35      	ldr	r5, [pc, #212]	; (80050cc <m2qp_isf_comp+0xf4>)
        m2qp.qdata.comp_id  = q_readbyte(&rxq);
 8004ff8:	4835      	ldr	r0, [pc, #212]	; (80050d0 <m2qp_isf_comp+0xf8>)
 8004ffa:	f000 ff75 	bl	8005ee8 <q_readbyte>
 8004ffe:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <m2qp_isf_comp+0xf0>)
 8005000:	7098      	strb	r0, [r3, #2]
        if (is_series)  m2qp.qdata.comp_offset  = q_readshort(&rxq);
 8005002:	2c00      	cmp	r4, #0
 8005004:	d033      	beq.n	800506e <m2qp_isf_comp+0x96>
 8005006:	4832      	ldr	r0, [pc, #200]	; (80050d0 <m2qp_isf_comp+0xf8>)
 8005008:	f000 ff73 	bl	8005ef2 <q_readshort>
 800500c:	4b2e      	ldr	r3, [pc, #184]	; (80050c8 <m2qp_isf_comp+0xf0>)
 800500e:	8098      	strh	r0, [r3, #4]
        score   = m2qp_load_isf(is_series, m2qp.qdata.comp_id, m2qp.qdata.comp_offset,
 8005010:	4b2d      	ldr	r3, [pc, #180]	; (80050c8 <m2qp_isf_comp+0xf0>)
 8005012:	7899      	ldrb	r1, [r3, #2]
 8005014:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005018:	7a5b      	ldrb	r3, [r3, #9]
 800501a:	9601      	str	r6, [sp, #4]
 800501c:	9500      	str	r5, [sp, #0]
 800501e:	4620      	mov	r0, r4
 8005020:	f7ff ff62 	bl	8004ee8 <m2qp_load_isf>
    if (score < 0) {
 8005024:	2800      	cmp	r0, #0
 8005026:	db2c      	blt.n	8005082 <m2qp_isf_comp+0xaa>
    else if (m2qp.qtmpl.code & M2QC_COR_SEARCH) {
 8005028:	4b27      	ldr	r3, [pc, #156]	; (80050c8 <m2qp_isf_comp+0xf0>)
 800502a:	7a1d      	ldrb	r5, [r3, #8]
 800502c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005030:	d123      	bne.n	800507a <m2qp_isf_comp+0xa2>
    else if (m2qp.qtmpl.code & M2QC_ALU) {
 8005032:	f015 0f20 	tst.w	r5, #32
 8005036:	d024      	beq.n	8005082 <m2qp_isf_comp+0xaa>
        for (i=0; i<m2qp.qtmpl.length; i++) {
 8005038:	2300      	movs	r3, #0
 800503a:	4a23      	ldr	r2, [pc, #140]	; (80050c8 <m2qp_isf_comp+0xf0>)
 800503c:	7a52      	ldrb	r2, [r2, #9]
 800503e:	4293      	cmp	r3, r2
 8005040:	da34      	bge.n	80050ac <m2qp_isf_comp+0xd4>
            ot_u8* local_buf = &LOCAL_U8(0);
 8005042:	4a24      	ldr	r2, [pc, #144]	; (80050d4 <m2qp_isf_comp+0xfc>)
 8005044:	68d0      	ldr	r0, [r2, #12]
 8005046:	8814      	ldrh	r4, [r2, #0]
 8005048:	3c10      	subs	r4, #16
            j = m2qp.qtmpl.mask[i] & m2qp.qtmpl.value[i];
 800504a:	491f      	ldr	r1, [pc, #124]	; (80050c8 <m2qp_isf_comp+0xf0>)
 800504c:	68ca      	ldr	r2, [r1, #12]
 800504e:	5cd2      	ldrb	r2, [r2, r3]
 8005050:	6909      	ldr	r1, [r1, #16]
 8005052:	5cc9      	ldrb	r1, [r1, r3]
 8005054:	4011      	ands	r1, r2
            k = m2qp.qtmpl.mask[i] & local_buf[i];
 8005056:	4420      	add	r0, r4
 8005058:	5cc0      	ldrb	r0, [r0, r3]
 800505a:	4002      	ands	r2, r0
            if (j != k) {
 800505c:	4291      	cmp	r1, r2
 800505e:	d112      	bne.n	8005086 <m2qp_isf_comp+0xae>
        for (i=0; i<m2qp.qtmpl.length; i++) {
 8005060:	3301      	adds	r3, #1
 8005062:	b21b      	sxth	r3, r3
 8005064:	e7e9      	b.n	800503a <m2qp_isf_comp+0x62>
        m2qp.qtmpl.length   = (m2qp.qtmpl.code) ? m2qp.qtmpl.length : 0;
 8005066:	4619      	mov	r1, r3
 8005068:	e7c0      	b.n	8004fec <m2qp_isf_comp+0x14>
                               &sub_load_charcorrelation : &sub_load_comparison;
 800506a:	4d1b      	ldr	r5, [pc, #108]	; (80050d8 <m2qp_isf_comp+0x100>)
 800506c:	e7c4      	b.n	8004ff8 <m2qp_isf_comp+0x20>
        else            m2qp.qdata.comp_offset  = q_readbyte(&rxq);
 800506e:	4818      	ldr	r0, [pc, #96]	; (80050d0 <m2qp_isf_comp+0xf8>)
 8005070:	f000 ff3a 	bl	8005ee8 <q_readbyte>
 8005074:	4b14      	ldr	r3, [pc, #80]	; (80050c8 <m2qp_isf_comp+0xf0>)
 8005076:	8098      	strh	r0, [r3, #4]
 8005078:	e7ca      	b.n	8005010 <m2qp_isf_comp+0x38>
        score -= (score == 0);
 800507a:	2800      	cmp	r0, #0
 800507c:	bf08      	it	eq
 800507e:	3801      	subeq	r0, #1
 8005080:	b200      	sxth	r0, r0
}
 8005082:	b002      	add	sp, #8
 8005084:	bd70      	pop	{r4, r5, r6, pc}
                switch (m2qp.qtmpl.code & 0x1F) {
 8005086:	f005 051f 	and.w	r5, r5, #31
 800508a:	2d05      	cmp	r5, #5
 800508c:	d813      	bhi.n	80050b6 <m2qp_isf_comp+0xde>
 800508e:	e8df f005 	tbb	[pc, r5]
 8005092:	1203      	.short	0x1203
 8005094:	09090505 	.word	0x09090505
                    case 0: return 0;                   // !=
 8005098:	2000      	movs	r0, #0
 800509a:	e7f2      	b.n	8005082 <m2qp_isf_comp+0xaa>
                    case 3: return (j < k) - 1;         // <, <=
 800509c:	4291      	cmp	r1, r2
 800509e:	da0d      	bge.n	80050bc <m2qp_isf_comp+0xe4>
 80050a0:	2000      	movs	r0, #0
 80050a2:	e7ee      	b.n	8005082 <m2qp_isf_comp+0xaa>
                    case 5: return (j > k) - 1;         // >, >=
 80050a4:	4291      	cmp	r1, r2
 80050a6:	dd0c      	ble.n	80050c2 <m2qp_isf_comp+0xea>
 80050a8:	2000      	movs	r0, #0
 80050aa:	e7ea      	b.n	8005082 <m2qp_isf_comp+0xaa>
        return ((ot_int)m2qp.qtmpl.code & 1) - 1;
 80050ac:	f005 0001 	and.w	r0, r5, #1
 80050b0:	3801      	subs	r0, #1
 80050b2:	b200      	sxth	r0, r0
 80050b4:	e7e5      	b.n	8005082 <m2qp_isf_comp+0xaa>
                    case 1: return -1;                  // ==
 80050b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050ba:	e7e2      	b.n	8005082 <m2qp_isf_comp+0xaa>
                    case 3: return (j < k) - 1;         // <, <=
 80050bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050c0:	e7df      	b.n	8005082 <m2qp_isf_comp+0xaa>
                    case 5: return (j > k) - 1;         // >, >=
 80050c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050c6:	e7dc      	b.n	8005082 <m2qp_isf_comp+0xaa>
 80050c8:	2000270c 	.word	0x2000270c
 80050cc:	08004c85 	.word	0x08004c85
 80050d0:	20002d60 	.word	0x20002d60
 80050d4:	20002d74 	.word	0x20002d74
 80050d8:	08004d01 	.word	0x08004d01

080050dc <sub_process_query>:
ot_int sub_process_query(m2session* active) {
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	4606      	mov	r6, r0
    ot_u8 cmd_type = m2qp.cmd.code & 0x70;
 80050e0:	4b25      	ldr	r3, [pc, #148]	; (8005178 <sub_process_query+0x9c>)
 80050e2:	781f      	ldrb	r7, [r3, #0]
 80050e4:	f007 0370 	and.w	r3, r7, #112	; 0x70
    if (cmd_type > M2TT_REQ_M_INIT) {     ///@todo future update code
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d914      	bls.n	8005116 <sub_process_query+0x3a>
        ot_int  number_of_acks  = (ot_int)q_readbyte(&rxq);
 80050ec:	4823      	ldr	r0, [pc, #140]	; (800517c <sub_process_query+0xa0>)
 80050ee:	f000 fefb 	bl	8005ee8 <q_readbyte>
 80050f2:	b204      	sxth	r4, r0
            id_test = m2np_idcmp(m2np.rt.dlog.length, q_markbyte(&rxq, m2np.rt.dlog.length));
 80050f4:	4b22      	ldr	r3, [pc, #136]	; (8005180 <sub_process_query+0xa4>)
 80050f6:	791d      	ldrb	r5, [r3, #4]
 80050f8:	4629      	mov	r1, r5
 80050fa:	4820      	ldr	r0, [pc, #128]	; (800517c <sub_process_query+0xa0>)
 80050fc:	f000 febd 	bl	8005e7a <q_markbyte>
 8005100:	4601      	mov	r1, r0
 8005102:	4628      	mov	r0, r5
 8005104:	f7ff f9c4 	bl	8004490 <m2np_idcmp>
            number_of_acks--;
 8005108:	3c01      	subs	r4, #1
 800510a:	b224      	sxth	r4, r4
        while ((number_of_acks >= 0) && (id_test == False));
 800510c:	2c00      	cmp	r4, #0
 800510e:	db01      	blt.n	8005114 <sub_process_query+0x38>
 8005110:	2800      	cmp	r0, #0
 8005112:	d0ef      	beq.n	80050f4 <sub_process_query+0x18>
        if (number_of_acks != 0) {
 8005114:	bb44      	cbnz	r4, 8005168 <sub_process_query+0x8c>
    sub_load_query();
 8005116:	f7ff fec3 	bl	8004ea0 <sub_load_query>
    if (cmd_type & M2TT_REQ_M) {  ///@todo future update code
 800511a:	f017 0f40 	tst.w	r7, #64	; 0x40
 800511e:	d01b      	beq.n	8005158 <sub_process_query+0x7c>
        local_ptr       = rxq.getcursor;
 8005120:	4c16      	ldr	r4, [pc, #88]	; (800517c <sub_process_query+0xa0>)
 8005122:	6867      	ldr	r7, [r4, #4]
        query_size      = q_readbyte(&rxq);                 //token
 8005124:	4620      	mov	r0, r4
 8005126:	f000 fedf 	bl	8005ee8 <q_readbyte>
 800512a:	4605      	mov	r5, r0
        query_size    <<= ((q_readbyte(&rxq) & 0x80) != 0);  //mask
 800512c:	4620      	mov	r0, r4
 800512e:	f000 fedb 	bl	8005ee8 <q_readbyte>
 8005132:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8005136:	4085      	lsls	r5, r0
        rxq.getcursor  += query_size;
 8005138:	6860      	ldr	r0, [r4, #4]
 800513a:	fa00 f585 	sxtah	r5, r0, r5
 800513e:	6065      	str	r5, [r4, #4]
        if (m2qp_isf_comp((m2qp.cmd.code & 1), &m2np.rt.dlog) < 0) {
 8005140:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <sub_process_query+0x9c>)
 8005142:	7818      	ldrb	r0, [r3, #0]
 8005144:	490f      	ldr	r1, [pc, #60]	; (8005184 <sub_process_query+0xa8>)
 8005146:	f000 0001 	and.w	r0, r0, #1
 800514a:	f7ff ff45 	bl	8004fd8 <m2qp_isf_comp>
 800514e:	2800      	cmp	r0, #0
 8005150:	db0a      	blt.n	8005168 <sub_process_query+0x8c>
        rxq.getcursor   = local_ptr;
 8005152:	6067      	str	r7, [r4, #4]
        sub_load_query();
 8005154:	f7ff fea4 	bl	8004ea0 <sub_load_query>
    return m2qp_isf_comp((m2qp.cmd.code & 1), &m2np.rt.dlog);
 8005158:	4b07      	ldr	r3, [pc, #28]	; (8005178 <sub_process_query+0x9c>)
 800515a:	7818      	ldrb	r0, [r3, #0]
 800515c:	4909      	ldr	r1, [pc, #36]	; (8005184 <sub_process_query+0xa8>)
 800515e:	f000 0001 	and.w	r0, r0, #1
 8005162:	f7ff ff39 	bl	8004fd8 <m2qp_isf_comp>
}
 8005166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    active->flags &= ~M2FI_LISTEN;
 8005168:	7af3      	ldrb	r3, [r6, #11]
 800516a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800516e:	72f3      	strb	r3, [r6, #11]
    return -1;
 8005170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005174:	e7f7      	b.n	8005166 <sub_process_query+0x8a>
 8005176:	bf00      	nop
 8005178:	2000270c 	.word	0x2000270c
 800517c:	20002d60 	.word	0x20002d60
 8005180:	200026a4 	.word	0x200026a4
 8005184:	200026a8 	.word	0x200026a8

08005188 <sub_parse_request>:
ot_int sub_parse_request(m2session* active) {
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	4604      	mov	r4, r0
    active->netstate      &= ~M2_NETSTATE_TMASK;
 800518c:	79c3      	ldrb	r3, [r0, #7]
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	71c3      	strb	r3, [r0, #7]
    m2qp.cmd.code           = q_readbyte(&rxq);
 8005194:	4835      	ldr	r0, [pc, #212]	; (800526c <sub_parse_request+0xe4>)
 8005196:	f000 fea7 	bl	8005ee8 <q_readbyte>
 800519a:	4b35      	ldr	r3, [pc, #212]	; (8005270 <sub_parse_request+0xe8>)
 800519c:	7018      	strb	r0, [r3, #0]
    m2qp.cmd.ext            = (m2qp.cmd.code & 0x80) ? q_readbyte(&rxq) : 0;
 800519e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80051a2:	d131      	bne.n	8005208 <sub_parse_request+0x80>
 80051a4:	2000      	movs	r0, #0
 80051a6:	4b32      	ldr	r3, [pc, #200]	; (8005270 <sub_parse_request+0xe8>)
 80051a8:	7058      	strb	r0, [r3, #1]
    dll.comm.redundants     = 1;
 80051aa:	4d32      	ldr	r5, [pc, #200]	; (8005274 <sub_parse_request+0xec>)
 80051ac:	2201      	movs	r2, #1
 80051ae:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
    dll.comm.csmaca_params  = m2qp.cmd.ext & (M2_CSMACA_CAMASK | M2_CSMACA_NOCSMA);
 80051b2:	f000 003c 	and.w	r0, r0, #60	; 0x3c
    dll.comm.csmaca_params |= m2qp.cmd.code & M2_CSMACA_ARBMASK;
 80051b6:	7819      	ldrb	r1, [r3, #0]
 80051b8:	f001 0340 	and.w	r3, r1, #64	; 0x40
 80051bc:	4318      	orrs	r0, r3
 80051be:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    cmd_opcode              = m2qp.cmd.code & M2OP_MASK;
 80051c2:	f001 060f 	and.w	r6, r1, #15
    {   ot_u8 timeout_code  = q_readbyte(&rxq);
 80051c6:	4829      	ldr	r0, [pc, #164]	; (800526c <sub_parse_request+0xe4>)
 80051c8:	f000 fe8e 	bl	8005ee8 <q_readbyte>
 80051cc:	4607      	mov	r7, r0
        dll.comm.rx_timeout = otutils_calc_timeout(timeout_code);   // original contention period
 80051ce:	f000 ff14 	bl	8005ffa <otutils_calc_timeout>
 80051d2:	62a8      	str	r0, [r5, #40]	; 0x28
        dll.comm.tc         = dll.comm.rx_timeout;                  // contention period counter
 80051d4:	6228      	str	r0, [r5, #32]
        if (timeout_code & 0x80) {
 80051d6:	f017 0f80 	tst.w	r7, #128	; 0x80
 80051da:	d119      	bne.n	8005210 <sub_parse_request+0x88>
            dll.comm.tx_channels    = 1;
 80051dc:	4b25      	ldr	r3, [pc, #148]	; (8005274 <sub_parse_request+0xec>)
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            dll.comm.tx_chanlist    = &dll.comm.scratch[0];
 80051e4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80051e8:	635a      	str	r2, [r3, #52]	; 0x34
            dll.comm.scratch[0]     = active->channel;
 80051ea:	79a2      	ldrb	r2, [r4, #6]
 80051ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if ((m2qp.cmd.code & 0x70) > M2TT_REQ_UB) {
 80051f0:	4b1f      	ldr	r3, [pc, #124]	; (8005270 <sub_parse_request+0xe8>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d915      	bls.n	8005228 <sub_parse_request+0xa0>
        score = sub_process_query(active);
 80051fc:	4620      	mov	r0, r4
 80051fe:	f7ff ff6d 	bl	80050dc <sub_process_query>
    if (score >= 0) {
 8005202:	1e05      	subs	r5, r0, #0
 8005204:	da11      	bge.n	800522a <sub_parse_request+0xa2>
 8005206:	e021      	b.n	800524c <sub_parse_request+0xc4>
    m2qp.cmd.ext            = (m2qp.cmd.code & 0x80) ? q_readbyte(&rxq) : 0;
 8005208:	4818      	ldr	r0, [pc, #96]	; (800526c <sub_parse_request+0xe4>)
 800520a:	f000 fe6d 	bl	8005ee8 <q_readbyte>
 800520e:	e7ca      	b.n	80051a6 <sub_parse_request+0x1e>
            dll.comm.tx_channels    = q_readbyte(&rxq);
 8005210:	4f16      	ldr	r7, [pc, #88]	; (800526c <sub_parse_request+0xe4>)
 8005212:	4638      	mov	r0, r7
 8005214:	f000 fe68 	bl	8005ee8 <q_readbyte>
 8005218:	4601      	mov	r1, r0
 800521a:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
            dll.comm.tx_chanlist    = q_markbyte(&rxq, dll.comm.tx_channels);
 800521e:	4638      	mov	r0, r7
 8005220:	f000 fe2b 	bl	8005e7a <q_markbyte>
 8005224:	6368      	str	r0, [r5, #52]	; 0x34
 8005226:	e7e3      	b.n	80051f0 <sub_parse_request+0x68>
    ot_int  score   = 0;
 8005228:	2500      	movs	r5, #0
        q_empty(&txq); // Flush TX ot_queue
 800522a:	4813      	ldr	r0, [pc, #76]	; (8005278 <sub_parse_request+0xf0>)
 800522c:	f000 fe03 	bl	8005e36 <q_empty>
        if (m2qp.cmd.ext & M2CE_NORESP) {
 8005230:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <sub_parse_request+0xe8>)
 8005232:	785b      	ldrb	r3, [r3, #1]
 8005234:	f013 0f02 	tst.w	r3, #2
 8005238:	d00a      	beq.n	8005250 <sub_parse_request+0xc8>
            active->netstate |= M2_NETSTATE_SCRAP;
 800523a:	79e3      	ldrb	r3, [r4, #7]
 800523c:	f043 0304 	orr.w	r3, r3, #4
 8005240:	71e3      	strb	r3, [r4, #7]
        opgroup_proc[((cmd_opcode>>1) & 7)]();
 8005242:	0871      	lsrs	r1, r6, #1
 8005244:	4b0d      	ldr	r3, [pc, #52]	; (800527c <sub_parse_request+0xf4>)
 8005246:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800524a:	4798      	blx	r3
}
 800524c:	4628      	mov	r0, r5
 800524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            active->netstate |= M2_NETSTATE_RESPTX;
 8005250:	79e3      	ldrb	r3, [r4, #7]
 8005252:	f043 0310 	orr.w	r3, r3, #16
 8005256:	71e3      	strb	r3, [r4, #7]
            m2np_header(active, 0, M2FI_FRDIALOG); ///@todo Future Update Code, Can use 0 in addressing for Response
 8005258:	2200      	movs	r2, #0
 800525a:	4611      	mov	r1, r2
 800525c:	4620      	mov	r0, r4
 800525e:	f7ff f8ad 	bl	80043bc <m2np_header>
            q_writebyte(&txq, (M2TT_RESPONSE | cmd_opcode));            // Write Cmd code byte
 8005262:	4631      	mov	r1, r6
 8005264:	4804      	ldr	r0, [pc, #16]	; (8005278 <sub_parse_request+0xf0>)
 8005266:	f000 fe0d 	bl	8005e84 <q_writebyte>
 800526a:	e7ea      	b.n	8005242 <sub_parse_request+0xba>
 800526c:	20002d60 	.word	0x20002d60
 8005270:	2000270c 	.word	0x2000270c
 8005274:	20002654 	.word	0x20002654
 8005278:	20002d74 	.word	0x20002d74
 800527c:	08009ce8 	.word	0x08009ce8

08005280 <m2qp_parse_frame>:
OT_WEAK ot_int m2qp_parse_frame(m2session* active) {
 8005280:	b508      	push	{r3, lr}
    ot_u8 cmd_type = (*rxq.getcursor >> 4) & 7;
 8005282:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <m2qp_parse_frame+0x34>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f3c3 1302 	ubfx	r3, r3, #4, #3
    if (cmd_type == 0)  return sub_parse_response(active);
 800528c:	b143      	cbz	r3, 80052a0 <m2qp_parse_frame+0x20>
    if (cmd_type == 1)  return sub_parse_control(active);
 800528e:	2b01      	cmp	r3, #1
 8005290:	d009      	beq.n	80052a6 <m2qp_parse_frame+0x26>
    if (active->netstate & M2_NETSTATE_RESP) return -1;
 8005292:	79c3      	ldrb	r3, [r0, #7]
 8005294:	f013 0f10 	tst.w	r3, #16
 8005298:	d108      	bne.n	80052ac <m2qp_parse_frame+0x2c>
    return sub_parse_request(active);
 800529a:	f7ff ff75 	bl	8005188 <sub_parse_request>
}
 800529e:	bd08      	pop	{r3, pc}
    if (cmd_type == 0)  return sub_parse_response(active);
 80052a0:	f7ff fd94 	bl	8004dcc <sub_parse_response>
 80052a4:	e7fb      	b.n	800529e <m2qp_parse_frame+0x1e>
    if (cmd_type == 1)  return sub_parse_control(active);
 80052a6:	f7ff fdcb 	bl	8004e40 <sub_parse_control>
 80052aa:	e7f8      	b.n	800529e <m2qp_parse_frame+0x1e>
    if (active->netstate & M2_NETSTATE_RESP) return -1;
 80052ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052b0:	e7f5      	b.n	800529e <m2qp_parse_frame+0x1e>
 80052b2:	bf00      	nop
 80052b4:	20002d60 	.word	0x20002d60

080052b8 <m2qp_isf_call>:
OT_WEAK ot_int m2qp_isf_call( ot_u8 is_series, ot_queue* input_q, id_tmpl* user_id ) {
 80052b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052bc:	b087      	sub	sp, #28
 80052be:	4606      	mov	r6, r0
 80052c0:	9003      	str	r0, [sp, #12]
 80052c2:	460d      	mov	r5, r1
 80052c4:	4617      	mov	r7, r2
    max_bytes   = (ot_int)q_readbyte(input_q);
 80052c6:	4608      	mov	r0, r1
 80052c8:	f000 fe0e 	bl	8005ee8 <q_readbyte>
 80052cc:	fa0f fb80 	sxth.w	fp, r0
    isf_id      = q_readbyte(input_q);
 80052d0:	4628      	mov	r0, r5
 80052d2:	f000 fe09 	bl	8005ee8 <q_readbyte>
 80052d6:	4604      	mov	r4, r0
 80052d8:	9002      	str	r0, [sp, #8]
    q_writebyte(&txq, isf_id);
 80052da:	4601      	mov	r1, r0
 80052dc:	484b      	ldr	r0, [pc, #300]	; (800540c <m2qp_isf_call+0x154>)
 80052de:	f000 fdd1 	bl	8005e84 <q_writebyte>
    if (is_series) {
 80052e2:	2e00      	cmp	r6, #0
 80052e4:	d06d      	beq.n	80053c2 <m2qp_isf_call+0x10a>
        fp_s = ISS_open( isf_id, VL_ACCESS_R, user_id );
 80052e6:	463a      	mov	r2, r7
 80052e8:	2124      	movs	r1, #36	; 0x24
 80052ea:	4620      	mov	r0, r4
 80052ec:	f001 f950 	bl	8006590 <ISS_open>
        if (fp_s == NULL) {
 80052f0:	4680      	mov	r8, r0
 80052f2:	2800      	cmp	r0, #0
 80052f4:	f000 8083 	beq.w	80053fe <m2qp_isf_call+0x146>
        offset = q_readshort(input_q);
 80052f8:	4628      	mov	r0, r5
 80052fa:	f000 fdfa 	bl	8005ef2 <q_readshort>
 80052fe:	4605      	mov	r5, r0
 8005300:	fa0f fa80 	sxth.w	sl, r0
        q_writebyte( &txq, (ot_u8)fp_s->length );
 8005304:	4c41      	ldr	r4, [pc, #260]	; (800540c <m2qp_isf_call+0x154>)
 8005306:	f898 1008 	ldrb.w	r1, [r8, #8]
 800530a:	4620      	mov	r0, r4
 800530c:	f000 fdba 	bl	8005e84 <q_writebyte>
        q_writeshort(&txq, offset );
 8005310:	4629      	mov	r1, r5
 8005312:	4620      	mov	r0, r4
 8005314:	f000 fdbb 	bl	8005e8e <q_writeshort>
        clength_ptr     = txq.putcursor;
 8005318:	f8d4 9008 	ldr.w	r9, [r4, #8]
        txq.putcursor  += 2;
 800531c:	f109 0302 	add.w	r3, r9, #2
 8005320:	60a3      	str	r3, [r4, #8]
        for (i=0; i<fp_s->length; i++) {
 8005322:	2400      	movs	r4, #0
    ot_int  total_length = 0;
 8005324:	4625      	mov	r5, r4
        for (i=0; i<fp_s->length; i++) {
 8005326:	e00b      	b.n	8005340 <m2qp_isf_call+0x88>
                scratch.ushort = vl_read(fp_s, i);
 8005328:	4621      	mov	r1, r4
 800532a:	4640      	mov	r0, r8
 800532c:	f001 f871 	bl	8006412 <vl_read>
 8005330:	f8ad 0014 	strh.w	r0, [sp, #20]
 8005334:	e00c      	b.n	8005350 <m2qp_isf_call+0x98>
            vl_close(fp_f);
 8005336:	4630      	mov	r0, r6
 8005338:	f001 f8ea 	bl	8006510 <vl_close>
        for (i=0; i<fp_s->length; i++) {
 800533c:	3401      	adds	r4, #1
 800533e:	b224      	sxth	r4, r4
 8005340:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8005344:	429c      	cmp	r4, r3
 8005346:	da1a      	bge.n	800537e <m2qp_isf_call+0xc6>
            if ( (i&1) == 0 ) {
 8005348:	b2a4      	uxth	r4, r4
 800534a:	f014 0601 	ands.w	r6, r4, #1
 800534e:	d0eb      	beq.n	8005328 <m2qp_isf_call+0x70>
            fp_f = ISF_open(scratch.ubyte[i&1], VL_ACCESS_R, user_id);
 8005350:	ab06      	add	r3, sp, #24
 8005352:	441e      	add	r6, r3
 8005354:	463a      	mov	r2, r7
 8005356:	2124      	movs	r1, #36	; 0x24
 8005358:	f816 0c04 	ldrb.w	r0, [r6, #-4]
 800535c:	f001 f920 	bl	80065a0 <ISF_open>
            if (fp_f != NULL) {
 8005360:	4606      	mov	r6, r0
 8005362:	2800      	cmp	r0, #0
 8005364:	d0e7      	beq.n	8005336 <m2qp_isf_call+0x7e>
                q_writebyte(&txq, GET_B0_U16(fp_f->idmod) );
 8005366:	7981      	ldrb	r1, [r0, #6]
 8005368:	4828      	ldr	r0, [pc, #160]	; (800540c <m2qp_isf_call+0x154>)
 800536a:	f000 fd8b 	bl	8005e84 <q_writebyte>
                q_writebyte(&txq, (ot_u8)fp_f->length );
 800536e:	7a31      	ldrb	r1, [r6, #8]
 8005370:	4826      	ldr	r0, [pc, #152]	; (800540c <m2qp_isf_call+0x154>)
 8005372:	f000 fd87 	bl	8005e84 <q_writebyte>
                total_length += fp_f->length;
 8005376:	8933      	ldrh	r3, [r6, #8]
 8005378:	441d      	add	r5, r3
 800537a:	b22d      	sxth	r5, r5
 800537c:	e7db      	b.n	8005336 <m2qp_isf_call+0x7e>
        vl_close(fp_s);
 800537e:	4640      	mov	r0, r8
 8005380:	f001 f8c6 	bl	8006510 <vl_close>
        clength_ptr[0]  = scratch.ubyte[UPPER];
 8005384:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8005388:	f889 3000 	strb.w	r3, [r9]
        clength_ptr[1]  = scratch.ubyte[LOWER];
 800538c:	f889 5001 	strb.w	r5, [r9, #1]
    scratch.sshort = (txq.back - txq.putcursor);
 8005390:	4b1e      	ldr	r3, [pc, #120]	; (800540c <m2qp_isf_call+0x154>)
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	1ad2      	subs	r2, r2, r3
 8005398:	b212      	sxth	r2, r2
    if (max_bytes > scratch.sshort) {
 800539a:	455a      	cmp	r2, fp
 800539c:	db00      	blt.n	80053a0 <m2qp_isf_call+0xe8>
    max_bytes   = (ot_int)q_readbyte(input_q);
 800539e:	465a      	mov	r2, fp
    scratch.sshort = (total_length - offset);
 80053a0:	eba5 030a 	sub.w	r3, r5, sl
 80053a4:	b21b      	sxth	r3, r3
    if (max_bytes > scratch.sshort) {
 80053a6:	4293      	cmp	r3, r2
 80053a8:	db00      	blt.n	80053ac <m2qp_isf_call+0xf4>
 80053aa:	4613      	mov	r3, r2
    return m2qp_load_isf(is_series, isf_id, offset, max_bytes, &sub_load_return, user_id);
 80053ac:	9701      	str	r7, [sp, #4]
 80053ae:	4a18      	ldr	r2, [pc, #96]	; (8005410 <m2qp_isf_call+0x158>)
 80053b0:	9200      	str	r2, [sp, #0]
 80053b2:	4652      	mov	r2, sl
 80053b4:	9902      	ldr	r1, [sp, #8]
 80053b6:	9803      	ldr	r0, [sp, #12]
 80053b8:	f7ff fd96 	bl	8004ee8 <m2qp_load_isf>
}
 80053bc:	b007      	add	sp, #28
 80053be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        fp_f = ISF_open( isf_id, VL_ACCESS_R, user_id );
 80053c2:	463a      	mov	r2, r7
 80053c4:	2124      	movs	r1, #36	; 0x24
 80053c6:	9802      	ldr	r0, [sp, #8]
 80053c8:	f001 f8ea 	bl	80065a0 <ISF_open>
        if (fp_f == NULL) {
 80053cc:	4604      	mov	r4, r0
 80053ce:	b1c8      	cbz	r0, 8005404 <m2qp_isf_call+0x14c>
        offset          = q_readbyte(input_q);
 80053d0:	4628      	mov	r0, r5
 80053d2:	f000 fd89 	bl	8005ee8 <q_readbyte>
 80053d6:	4601      	mov	r1, r0
 80053d8:	fa0f fa80 	sxth.w	sl, r0
        total_length    = fp_f->length;
 80053dc:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 80053e0:	fa0f f588 	sxth.w	r5, r8
        q_writebyte(&txq, (ot_u8)offset );
 80053e4:	4e09      	ldr	r6, [pc, #36]	; (800540c <m2qp_isf_call+0x154>)
 80053e6:	4630      	mov	r0, r6
 80053e8:	f000 fd4c 	bl	8005e84 <q_writebyte>
        q_writebyte(&txq, (ot_u8)total_length );
 80053ec:	fa5f f188 	uxtb.w	r1, r8
 80053f0:	4630      	mov	r0, r6
 80053f2:	f000 fd47 	bl	8005e84 <q_writebyte>
        vl_close(fp_f);
 80053f6:	4620      	mov	r0, r4
 80053f8:	f001 f88a 	bl	8006510 <vl_close>
 80053fc:	e7c8      	b.n	8005390 <m2qp_isf_call+0xd8>
            return -2;
 80053fe:	f06f 0001 	mvn.w	r0, #1
 8005402:	e7db      	b.n	80053bc <m2qp_isf_call+0x104>
            return -2;
 8005404:	f06f 0001 	mvn.w	r0, #1
 8005408:	e7d8      	b.n	80053bc <m2qp_isf_call+0x104>
 800540a:	bf00      	nop
 800540c:	20002d74 	.word	0x20002d74
 8005410:	08004d29 	.word	0x08004d29

08005414 <sub_opgroup_collection>:
void sub_opgroup_collection(void) {
 8005414:	b508      	push	{r3, lr}
    if ( (*(ot_u16*)&m2qp.cmd & ((0x0070<<8)|M2CE_NORESP)) == 0 ) {
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <sub_opgroup_collection+0x30>)
 8005418:	881a      	ldrh	r2, [r3, #0]
 800541a:	f247 0302 	movw	r3, #28674	; 0x7002
 800541e:	421a      	tst	r2, r3
 8005420:	d002      	beq.n	8005428 <sub_opgroup_collection+0x14>
    sub_opgroup_globalisf();
 8005422:	f7ff fc91 	bl	8004d48 <sub_opgroup_globalisf>
}
 8005426:	bd08      	pop	{r3, pc}
            nack = m2qp_isf_call((m2qp.cmd.code & 1), &rxq, &m2np.rt.dlog);
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <sub_opgroup_collection+0x30>)
 800542a:	7818      	ldrb	r0, [r3, #0]
 800542c:	4a06      	ldr	r2, [pc, #24]	; (8005448 <sub_opgroup_collection+0x34>)
 800542e:	4907      	ldr	r1, [pc, #28]	; (800544c <sub_opgroup_collection+0x38>)
 8005430:	f000 0001 	and.w	r0, r0, #1
 8005434:	f7ff ff40 	bl	80052b8 <m2qp_isf_call>
            if (nack != 0) {
 8005438:	2800      	cmp	r0, #0
 800543a:	d0f2      	beq.n	8005422 <sub_opgroup_collection+0xe>
                sub_renack(nack);
 800543c:	f7ff fd14 	bl	8004e68 <sub_renack>
 8005440:	e7ef      	b.n	8005422 <sub_opgroup_collection+0xe>
 8005442:	bf00      	nop
 8005444:	2000270c 	.word	0x2000270c
 8005448:	200026a8 	.word	0x200026a8
 800544c:	20002d60 	.word	0x20002d60

08005450 <sub_return>:


// Return functions are not handled by the server (ignore)
static ot_int sub_return(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
    return 0;
}
 8005450:	2000      	movs	r0, #0
 8005452:	4770      	bx	lr

08005454 <sub_qnotfull>:
}



/// This is a form of overwrite protection
static ot_bool sub_qnotfull(ot_u8 write, ot_u8 write_size, ot_queue* q) {
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4605      	mov	r5, r0
 8005458:	460c      	mov	r4, r1
    return (ot_bool)((write_size <= q_writespace(q)) || (write == 0));
 800545a:	4610      	mov	r0, r2
 800545c:	f000 fccf 	bl	8005dfe <q_writespace>
 8005460:	4284      	cmp	r4, r0
 8005462:	dd04      	ble.n	800546e <sub_qnotfull+0x1a>
 8005464:	b10d      	cbz	r5, 800546a <sub_qnotfull+0x16>
 8005466:	2000      	movs	r0, #0
 8005468:	e002      	b.n	8005470 <sub_qnotfull+0x1c>
 800546a:	2001      	movs	r0, #1
 800546c:	e000      	b.n	8005470 <sub_qnotfull+0x1c>
 800546e:	2001      	movs	r0, #1

    ///@note impl used prior to q_space()
    //return (ot_bool)(((q->putcursor+write_size) < q->back) || (write == 0));
}
 8005470:	bd38      	pop	{r3, r4, r5, pc}

08005472 <sub_filerestore>:




/// Not currently supported, always returns "unrestorable" error
static ot_int sub_filerestore(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 8005472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005474:	4605      	mov	r5, r0
 8005476:	4616      	mov	r6, r2
 8005478:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
    ot_int  data_out    = 0;
 800547c:	2700      	movs	r7, #0
    //vlBLOCK file_block  = ((cmd_in >> 4) & 0x07);

    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 800547e:	e009      	b.n	8005494 <sub_filerestore+0x22>
        ot_u8   err_code    = 0x03;
        ot_u8   file_id     = q_readbyte(alp->inq);
        data_in            -= 1;

        if (respond) {
            q_writebyte(alp->outq, file_id);
 8005480:	4601      	mov	r1, r0
 8005482:	68e8      	ldr	r0, [r5, #12]
 8005484:	f000 fcfe 	bl	8005e84 <q_writebyte>
            q_writebyte(alp->outq, err_code);
 8005488:	2103      	movs	r1, #3
 800548a:	68e8      	ldr	r0, [r5, #12]
 800548c:	f000 fcfa 	bl	8005e84 <q_writebyte>
            data_out += 2;
 8005490:	3702      	adds	r7, #2
 8005492:	b23f      	sxth	r7, r7
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8005494:	2c00      	cmp	r4, #0
 8005496:	dd0d      	ble.n	80054b4 <sub_filerestore+0x42>
 8005498:	68ea      	ldr	r2, [r5, #12]
 800549a:	2102      	movs	r1, #2
 800549c:	4630      	mov	r0, r6
 800549e:	f7ff ffd9 	bl	8005454 <sub_qnotfull>
 80054a2:	b138      	cbz	r0, 80054b4 <sub_filerestore+0x42>
        ot_u8   file_id     = q_readbyte(alp->inq);
 80054a4:	68a8      	ldr	r0, [r5, #8]
 80054a6:	f000 fd1f 	bl	8005ee8 <q_readbyte>
        data_in            -= 1;
 80054aa:	3c01      	subs	r4, #1
 80054ac:	b224      	sxth	r4, r4
        if (respond) {
 80054ae:	2e00      	cmp	r6, #0
 80054b0:	d0f0      	beq.n	8005494 <sub_filerestore+0x22>
 80054b2:	e7e5      	b.n	8005480 <sub_filerestore+0xe>
        }
    }

    return data_out;
}
 80054b4:	4638      	mov	r0, r7
 80054b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054b8 <sub_filecreate>:
static ot_int sub_filecreate(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	b087      	sub	sp, #28
 80054be:	4604      	mov	r4, r0
 80054c0:	468b      	mov	fp, r1
 80054c2:	4690      	mov	r8, r2
 80054c4:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 80054c8:	f3c3 1902 	ubfx	r9, r3, #4, #3
    ot_int  data_out    = 0;
 80054cc:	f04f 0a00 	mov.w	sl, #0
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 80054d0:	e00e      	b.n	80054f0 <sub_filecreate+0x38>
            q_writebyte(alp->outq, id);
 80054d2:	4639      	mov	r1, r7
 80054d4:	68e0      	ldr	r0, [r4, #12]
 80054d6:	f000 fcd5 	bl	8005e84 <q_writebyte>
            q_writebyte(alp->outq, err_code);
 80054da:	4631      	mov	r1, r6
 80054dc:	68e0      	ldr	r0, [r4, #12]
 80054de:	f000 fcd1 	bl	8005e84 <q_writebyte>
            data_out += 2;
 80054e2:	f10a 0a02 	add.w	sl, sl, #2
 80054e6:	fa0f fa8a 	sxth.w	sl, sl
        vl_close(fp);
 80054ea:	9805      	ldr	r0, [sp, #20]
 80054ec:	f001 f810 	bl	8006510 <vl_close>
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 80054f0:	2d00      	cmp	r5, #0
 80054f2:	dd28      	ble.n	8005546 <sub_filecreate+0x8e>
 80054f4:	68e2      	ldr	r2, [r4, #12]
 80054f6:	2102      	movs	r1, #2
 80054f8:	4640      	mov	r0, r8
 80054fa:	f7ff ffab 	bl	8005454 <sub_qnotfull>
 80054fe:	b310      	cbz	r0, 8005546 <sub_filecreate+0x8e>
        vlFILE*     fp = NULL;
 8005500:	ae06      	add	r6, sp, #24
 8005502:	2300      	movs	r3, #0
 8005504:	f846 3d04 	str.w	r3, [r6, #-4]!
        data_in            -= 6;
 8005508:	3d06      	subs	r5, #6
 800550a:	b22d      	sxth	r5, r5
        id                  = q_readbyte(alp->inq);
 800550c:	68a0      	ldr	r0, [r4, #8]
 800550e:	f000 fceb 	bl	8005ee8 <q_readbyte>
 8005512:	4607      	mov	r7, r0
        mod                 = q_readbyte(alp->inq);
 8005514:	68a0      	ldr	r0, [r4, #8]
 8005516:	f000 fce7 	bl	8005ee8 <q_readbyte>
 800551a:	9003      	str	r0, [sp, #12]
        alp->inq->getcursor+= 2;           
 800551c:	68a2      	ldr	r2, [r4, #8]
 800551e:	6853      	ldr	r3, [r2, #4]
 8005520:	3302      	adds	r3, #2
 8005522:	6053      	str	r3, [r2, #4]
        alloc               = q_readshort(alp->inq);
 8005524:	68a0      	ldr	r0, [r4, #8]
 8005526:	f000 fce4 	bl	8005ef2 <q_readshort>
        err_code            = vl_new(&fp, file_block, id, mod, alloc, user_id);
 800552a:	f8cd b004 	str.w	fp, [sp, #4]
 800552e:	9000      	str	r0, [sp, #0]
 8005530:	9b03      	ldr	r3, [sp, #12]
 8005532:	463a      	mov	r2, r7
 8005534:	4649      	mov	r1, r9
 8005536:	4630      	mov	r0, r6
 8005538:	f000 fe2a 	bl	8006190 <vl_new>
 800553c:	4606      	mov	r6, r0
        if (respond) {
 800553e:	f1b8 0f00 	cmp.w	r8, #0
 8005542:	d0d2      	beq.n	80054ea <sub_filecreate+0x32>
 8005544:	e7c5      	b.n	80054d2 <sub_filecreate+0x1a>
}
 8005546:	4650      	mov	r0, sl
 8005548:	b007      	add	sp, #28
 800554a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800554e <sub_filedelete>:
static ot_int sub_filedelete( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 800554e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005552:	4606      	mov	r6, r0
 8005554:	468a      	mov	sl, r1
 8005556:	4617      	mov	r7, r2
 8005558:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 800555c:	f3c3 1902 	ubfx	r9, r3, #4, #3
    ot_int  data_out    = 0;
 8005560:	f04f 0800 	mov.w	r8, #0
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8005564:	e00b      	b.n	800557e <sub_filedelete+0x30>
            q_writebyte(alp->outq, file_id);
 8005566:	4629      	mov	r1, r5
 8005568:	68f0      	ldr	r0, [r6, #12]
 800556a:	f000 fc8b 	bl	8005e84 <q_writebyte>
            q_writebyte(alp->outq, err_code);
 800556e:	4659      	mov	r1, fp
 8005570:	68f0      	ldr	r0, [r6, #12]
 8005572:	f000 fc87 	bl	8005e84 <q_writebyte>
            data_out += 2;
 8005576:	f108 0802 	add.w	r8, r8, #2
 800557a:	fa0f f888 	sxth.w	r8, r8
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 800557e:	2c00      	cmp	r4, #0
 8005580:	dd14      	ble.n	80055ac <sub_filedelete+0x5e>
 8005582:	68f2      	ldr	r2, [r6, #12]
 8005584:	2102      	movs	r1, #2
 8005586:	4638      	mov	r0, r7
 8005588:	f7ff ff64 	bl	8005454 <sub_qnotfull>
 800558c:	b170      	cbz	r0, 80055ac <sub_filedelete+0x5e>
        data_in--;
 800558e:	3c01      	subs	r4, #1
 8005590:	b224      	sxth	r4, r4
        file_id     = q_readbyte(alp->inq);
 8005592:	68b0      	ldr	r0, [r6, #8]
 8005594:	f000 fca8 	bl	8005ee8 <q_readbyte>
 8005598:	4605      	mov	r5, r0
        err_code    = vl_delete(file_block, file_id, user_id);
 800559a:	4652      	mov	r2, sl
 800559c:	4601      	mov	r1, r0
 800559e:	4648      	mov	r0, r9
 80055a0:	f000 fe40 	bl	8006224 <vl_delete>
 80055a4:	4683      	mov	fp, r0
        if (respond) {
 80055a6:	2f00      	cmp	r7, #0
 80055a8:	d0e9      	beq.n	800557e <sub_filedelete+0x30>
 80055aa:	e7dc      	b.n	8005566 <sub_filedelete+0x18>
}
 80055ac:	4640      	mov	r0, r8
 80055ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080055b2 <sub_fileheaders>:
static ot_int sub_fileheaders( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 80055b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055b6:	b085      	sub	sp, #20
 80055b8:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	; 0x30
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 80055bc:	f3c3 1802 	ubfx	r8, r3, #4, #3
    if (respond) {
 80055c0:	b11a      	cbz	r2, 80055ca <sub_fileheaders+0x18>
 80055c2:	4617      	mov	r7, r2
 80055c4:	4605      	mov	r5, r0
    ot_int  data_out    = 0;
 80055c6:	2600      	movs	r6, #0
 80055c8:	e028      	b.n	800561c <sub_fileheaders+0x6a>
 80055ca:	2600      	movs	r6, #0
}
 80055cc:	4630      	mov	r0, r6
 80055ce:	b005      	add	sp, #20
 80055d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                q_writeshort_be(alp->outq, vworm_read(header + 4)); // id & mod
 80055d4:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80055d8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80055dc:	3004      	adds	r0, #4
 80055de:	b280      	uxth	r0, r0
 80055e0:	f002 fb7e 	bl	8007ce0 <vworm_read>
 80055e4:	4601      	mov	r1, r0
 80055e6:	4648      	mov	r0, r9
 80055e8:	f000 fc5c 	bl	8005ea4 <q_writeshort_be>
                q_writeshort(alp->outq, vworm_read(header + 0)); // length
 80055ec:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80055f0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80055f4:	f002 fb74 	bl	8007ce0 <vworm_read>
 80055f8:	4601      	mov	r1, r0
 80055fa:	4648      	mov	r0, r9
 80055fc:	f000 fc47 	bl	8005e8e <q_writeshort>
                q_writeshort(alp->outq, vworm_read(header + 2)); // alloc
 8005600:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8005604:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005608:	3002      	adds	r0, #2
 800560a:	b280      	uxth	r0, r0
 800560c:	f002 fb68 	bl	8007ce0 <vworm_read>
 8005610:	4601      	mov	r1, r0
 8005612:	4648      	mov	r0, r9
 8005614:	f000 fc3b 	bl	8005e8e <q_writeshort>
                data_out += 6;
 8005618:	3606      	adds	r6, #6
 800561a:	b236      	sxth	r6, r6
        while ((data_in > 0) && sub_qnotfull(respond, 6, alp->outq)) {
 800561c:	2c00      	cmp	r4, #0
 800561e:	ddd5      	ble.n	80055cc <sub_fileheaders+0x1a>
 8005620:	68ea      	ldr	r2, [r5, #12]
 8005622:	2106      	movs	r1, #6
 8005624:	4638      	mov	r0, r7
 8005626:	f7ff ff15 	bl	8005454 <sub_qnotfull>
 800562a:	2800      	cmp	r0, #0
 800562c:	d0ce      	beq.n	80055cc <sub_fileheaders+0x1a>
            data_in--;  // one for the file id
 800562e:	3c01      	subs	r4, #1
 8005630:	b224      	sxth	r4, r4
            allow_output = (ot_bool)(vl_getheader_vaddr(&header, file_block, \
 8005632:	68a8      	ldr	r0, [r5, #8]
 8005634:	f000 fc58 	bl	8005ee8 <q_readbyte>
 8005638:	2300      	movs	r3, #0
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	2324      	movs	r3, #36	; 0x24
 800563e:	4602      	mov	r2, r0
 8005640:	4641      	mov	r1, r8
 8005642:	f10d 000e 	add.w	r0, sp, #14
 8005646:	f000 fe39 	bl	80062bc <vl_getheader_vaddr>
            if (allow_output) {
 800564a:	2800      	cmp	r0, #0
 800564c:	d1e6      	bne.n	800561c <sub_fileheaders+0x6a>
 800564e:	e7c1      	b.n	80055d4 <sub_fileheaders+0x22>

08005650 <sub_filedata>:
static ot_int sub_filedata(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	b091      	sub	sp, #68	; 0x44
 8005656:	900a      	str	r0, [sp, #40]	; 0x28
 8005658:	9107      	str	r1, [sp, #28]
 800565a:	9208      	str	r2, [sp, #32]
 800565c:	f9bd 5068 	ldrsh.w	r5, [sp, #104]	; 0x68
 8005660:	f003 020f 	and.w	r2, r3, #15
 8005664:	9209      	str	r2, [sp, #36]	; 0x24
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 8005666:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800566a:	9206      	str	r2, [sp, #24]
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 800566c:	f013 0f02 	tst.w	r3, #2
 8005670:	d00f      	beq.n	8005692 <sub_filedata+0x42>
 8005672:	f04f 0912 	mov.w	r9, #18
    ot_u8   insert_mode = (cmd_in & 0x01);
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	930c      	str	r3, [sp, #48]	; 0x30
    ot_queue*  inq      = alp->inq;
 800567c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800567e:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ot_queue*  outq     = alp->outq;
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	9303      	str	r3, [sp, #12]
    ot_qcur outq_marker = alp->outq->putcursor;
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	930d      	str	r3, [sp, #52]	; 0x34
    vlFILE* fp          = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	9302      	str	r3, [sp, #8]
 800568e:	469b      	mov	fp, r3
    while (data_in > 0) {
 8005690:	e0a4      	b.n	80057dc <sub_filedata+0x18c>
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 8005692:	f04f 0924 	mov.w	r9, #36	; 0x24
 8005696:	e7ee      	b.n	8005676 <sub_filedata+0x26>
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 8005698:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800569c:	e0b3      	b.n	8005806 <sub_filedata+0x1b6>
            if (limit > fp->alloc) {
 800569e:	4543      	cmp	r3, r8
 80056a0:	d320      	bcc.n	80056e4 <sub_filedata+0x94>
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 80056a2:	4641      	mov	r1, r8
            if (insert_mode == 0) {
 80056a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056a6:	b9fb      	cbnz	r3, 80056e8 <sub_filedata+0x98>
                fp->length = 0;
 80056a8:	9a02      	ldr	r2, [sp, #8]
 80056aa:	8113      	strh	r3, [r2, #8]
 80056ac:	4688      	mov	r8, r1
            for (; offset<limit; offset+=2, span-=2, data_in-=2) {
 80056ae:	4544      	cmp	r4, r8
 80056b0:	f080 8087 	bcs.w	80057c2 <sub_filedata+0x172>
                if (inq->getcursor >= inq->back) {
 80056b4:	f8da 2004 	ldr.w	r2, [sl, #4]
 80056b8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80056bc:	429a      	cmp	r2, r3
 80056be:	f080 80ef 	bcs.w	80058a0 <sub_filedata+0x250>
                err_code |= vl_write(fp, offset, q_readshort_be(inq));
 80056c2:	4650      	mov	r0, sl
 80056c4:	f000 fc27 	bl	8005f16 <q_readshort_be>
 80056c8:	4602      	mov	r2, r0
 80056ca:	4621      	mov	r1, r4
 80056cc:	9802      	ldr	r0, [sp, #8]
 80056ce:	f000 fea7 	bl	8006420 <vl_write>
 80056d2:	4307      	orrs	r7, r0
 80056d4:	b2ff      	uxtb	r7, r7
            for (; offset<limit; offset+=2, span-=2, data_in-=2) {
 80056d6:	3402      	adds	r4, #2
 80056d8:	b2a4      	uxth	r4, r4
 80056da:	3e02      	subs	r6, #2
 80056dc:	b2b6      	uxth	r6, r6
 80056de:	3d02      	subs	r5, #2
 80056e0:	b22d      	sxth	r5, r5
 80056e2:	e7e4      	b.n	80056ae <sub_filedata+0x5e>
                err_code    = 0x08;
 80056e4:	2708      	movs	r7, #8
 80056e6:	e7dd      	b.n	80056a4 <sub_filedata+0x54>
 80056e8:	4688      	mov	r8, r1
 80056ea:	e7e0      	b.n	80056ae <sub_filedata+0x5e>
            ot_u8 overhead = 5 << (inc_header != 0);
 80056ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ee:	2b0c      	cmp	r3, #12
 80056f0:	d022      	beq.n	8005738 <sub_filedata+0xe8>
 80056f2:	2305      	movs	r3, #5
 80056f4:	930b      	str	r3, [sp, #44]	; 0x2c
            if (overhead >= q_writespace(outq)) {
 80056f6:	9803      	ldr	r0, [sp, #12]
 80056f8:	f000 fb81 	bl	8005dfe <q_writespace>
 80056fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056fe:	4283      	cmp	r3, r0
 8005700:	f280 80d0 	bge.w	80058a4 <sub_filedata+0x254>
            data_out += overhead;
 8005704:	445b      	add	r3, fp
 8005706:	fa0f fb83 	sxth.w	fp, r3
            if (inc_header) {
 800570a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800570c:	2b0c      	cmp	r3, #12
 800570e:	d016      	beq.n	800573e <sub_filedata+0xee>
                q_writebyte(outq, (vworm_read(header+4) & 0x00ff) );
 8005710:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
 8005714:	3004      	adds	r0, #4
 8005716:	b280      	uxth	r0, r0
 8005718:	f002 fae2 	bl	8007ce0 <vworm_read>
 800571c:	b2c1      	uxtb	r1, r0
 800571e:	9803      	ldr	r0, [sp, #12]
 8005720:	f000 fbb0 	bl	8005e84 <q_writebyte>
            if (offset >= fp->length) {
 8005724:	9b02      	ldr	r3, [sp, #8]
 8005726:	891b      	ldrh	r3, [r3, #8]
 8005728:	42a3      	cmp	r3, r4
 800572a:	d925      	bls.n	8005778 <sub_filedata+0x128>
            else if (limit > fp->length) {
 800572c:	4543      	cmp	r3, r8
 800572e:	d226      	bcs.n	800577e <sub_filedata+0x12e>
                span    = fp->length - offset;
 8005730:	1b1e      	subs	r6, r3, r4
 8005732:	b2b6      	uxth	r6, r6
                limit   = fp->length;
 8005734:	4698      	mov	r8, r3
 8005736:	e022      	b.n	800577e <sub_filedata+0x12e>
            ot_u8 overhead = 5 << (inc_header != 0);
 8005738:	230a      	movs	r3, #10
 800573a:	930b      	str	r3, [sp, #44]	; 0x2c
 800573c:	e7db      	b.n	80056f6 <sub_filedata+0xa6>
                q_writeshort_be(outq, vworm_read(header + 4));
 800573e:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
 8005742:	3004      	adds	r0, #4
 8005744:	b280      	uxth	r0, r0
 8005746:	f002 facb 	bl	8007ce0 <vworm_read>
 800574a:	4601      	mov	r1, r0
 800574c:	9803      	ldr	r0, [sp, #12]
 800574e:	f000 fba9 	bl	8005ea4 <q_writeshort_be>
                q_writeshort(outq, vworm_read(header + 0));    // length
 8005752:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
 8005756:	f002 fac3 	bl	8007ce0 <vworm_read>
 800575a:	4601      	mov	r1, r0
 800575c:	9803      	ldr	r0, [sp, #12]
 800575e:	f000 fb96 	bl	8005e8e <q_writeshort>
                q_writeshort(outq, vworm_read(header + 2));    // alloc
 8005762:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
 8005766:	3002      	adds	r0, #2
 8005768:	b280      	uxth	r0, r0
 800576a:	f002 fab9 	bl	8007ce0 <vworm_read>
 800576e:	4601      	mov	r1, r0
 8005770:	9803      	ldr	r0, [sp, #12]
 8005772:	f000 fb8c 	bl	8005e8e <q_writeshort>
 8005776:	e7d5      	b.n	8005724 <sub_filedata+0xd4>
                limit   = 0;
 8005778:	f04f 0800 	mov.w	r8, #0
                span    = 0;
 800577c:	4646      	mov	r6, r8
            q_writeshort(outq, offset);
 800577e:	4621      	mov	r1, r4
 8005780:	9803      	ldr	r0, [sp, #12]
 8005782:	f000 fb84 	bl	8005e8e <q_writeshort>
            q_writeshort(outq, span);
 8005786:	4631      	mov	r1, r6
 8005788:	9803      	ldr	r0, [sp, #12]
 800578a:	f000 fb80 	bl	8005e8e <q_writeshort>
            for (; offset<limit; offset+=2, span-=2, data_out+=2) {
 800578e:	4544      	cmp	r4, r8
 8005790:	d217      	bcs.n	80057c2 <sub_filedata+0x172>
                if (2 >= q_writespace(outq)) {
 8005792:	9803      	ldr	r0, [sp, #12]
 8005794:	f000 fb33 	bl	8005dfe <q_writespace>
 8005798:	2802      	cmp	r0, #2
 800579a:	f340 8085 	ble.w	80058a8 <sub_filedata+0x258>
                q_writeshort_be(outq, vl_read(fp, offset));
 800579e:	4621      	mov	r1, r4
 80057a0:	9802      	ldr	r0, [sp, #8]
 80057a2:	f000 fe36 	bl	8006412 <vl_read>
 80057a6:	4601      	mov	r1, r0
 80057a8:	9803      	ldr	r0, [sp, #12]
 80057aa:	f000 fb7b 	bl	8005ea4 <q_writeshort_be>
            for (; offset<limit; offset+=2, span-=2, data_out+=2) {
 80057ae:	3402      	adds	r4, #2
 80057b0:	b2a4      	uxth	r4, r4
 80057b2:	3e02      	subs	r6, #2
 80057b4:	b2b6      	uxth	r6, r6
 80057b6:	f10b 0b02 	add.w	fp, fp, #2
 80057ba:	fa0f fb8b 	sxth.w	fp, fp
 80057be:	e7e6      	b.n	800578e <sub_filedata+0x13e>
            err_code = 0xFF;
 80057c0:	27ff      	movs	r7, #255	; 0xff
            app_err = vl_close(fp);
 80057c2:	9802      	ldr	r0, [sp, #8]
 80057c4:	f000 fea4 	bl	8006510 <vl_close>
            if ((app_err != 0) && (err_code == 0)) {
 80057c8:	b108      	cbz	r0, 80057ce <sub_filedata+0x17e>
 80057ca:	b907      	cbnz	r7, 80057ce <sub_filedata+0x17e>
                err_code = 0x09;    
 80057cc:	2709      	movs	r7, #9
        if (respond) {
 80057ce:	9b08      	ldr	r3, [sp, #32]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d13e      	bne.n	8005852 <sub_filedata+0x202>
        data_in -= 5;       // 5 bytes input header
 80057d4:	3d05      	subs	r5, #5
 80057d6:	b2ad      	uxth	r5, r5
        data_in -= span;    // Bypass data payload
 80057d8:	1bad      	subs	r5, r5, r6
 80057da:	b22d      	sxth	r5, r5
    while (data_in > 0) {
 80057dc:	2d00      	cmp	r5, #0
 80057de:	dd6d      	ble.n	80058bc <sub_filedata+0x26c>
        file_id     = q_readbyte(inq);
 80057e0:	4650      	mov	r0, sl
 80057e2:	f000 fb81 	bl	8005ee8 <q_readbyte>
 80057e6:	9004      	str	r0, [sp, #16]
        offset      = q_readshort(inq);
 80057e8:	4650      	mov	r0, sl
 80057ea:	f000 fb82 	bl	8005ef2 <q_readshort>
 80057ee:	4604      	mov	r4, r0
        span        = q_readshort(inq);
 80057f0:	4650      	mov	r0, sl
 80057f2:	f000 fb7e 	bl	8005ef2 <q_readshort>
 80057f6:	4606      	mov	r6, r0
        lim_check   = (ot_long)offset + (ot_long)span;
 80057f8:	1823      	adds	r3, r4, r0
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 80057fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fe:	f6bf af4b 	bge.w	8005698 <sub_filedata+0x48>
 8005802:	fa1f f883 	uxth.w	r8, r3
        err_code    = vl_getheader_vaddr(&header, file_block, file_id, file_mod, user_id);
 8005806:	9b07      	ldr	r3, [sp, #28]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	464b      	mov	r3, r9
 800580c:	9a04      	ldr	r2, [sp, #16]
 800580e:	9906      	ldr	r1, [sp, #24]
 8005810:	f10d 003e 	add.w	r0, sp, #62	; 0x3e
 8005814:	f000 fd52 	bl	80062bc <vl_getheader_vaddr>
        file_mod    = ((file_mod & VL_ACCESS_W) != 0);
 8005818:	f019 0312 	ands.w	r3, r9, #18
 800581c:	9305      	str	r3, [sp, #20]
 800581e:	bf14      	ite	ne
 8005820:	f04f 0901 	movne.w	r9, #1
 8005824:	f04f 0900 	moveq.w	r9, #0
        if (err_code != 0) {
 8005828:	4607      	mov	r7, r0
 800582a:	2800      	cmp	r0, #0
 800582c:	d1c9      	bne.n	80057c2 <sub_filedata+0x172>
        fp = vl_open_file(header);
 800582e:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
 8005832:	f000 fd77 	bl	8006324 <vl_open_file>
        if (fp == NULL) {
 8005836:	9002      	str	r0, [sp, #8]
 8005838:	2800      	cmp	r0, #0
 800583a:	d0c1      	beq.n	80057c0 <sub_filedata+0x170>
        if (file_mod) {
 800583c:	9b05      	ldr	r3, [sp, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	f43f af54 	beq.w	80056ec <sub_filedata+0x9c>
            if (offset >= fp->alloc) {
 8005844:	8883      	ldrh	r3, [r0, #4]
 8005846:	4619      	mov	r1, r3
 8005848:	42a3      	cmp	r3, r4
 800584a:	f63f af28 	bhi.w	800569e <sub_filedata+0x4e>
                err_code = 0x07;
 800584e:	2707      	movs	r7, #7
 8005850:	e7b7      	b.n	80057c2 <sub_filedata+0x172>
            if (2 >= q_writespace(outq)) {
 8005852:	9c03      	ldr	r4, [sp, #12]
 8005854:	4620      	mov	r0, r4
 8005856:	f000 fad2 	bl	8005dfe <q_writespace>
 800585a:	2802      	cmp	r0, #2
 800585c:	dd2c      	ble.n	80058b8 <sub_filedata+0x268>
            if (file_mod | err_code) {
 800585e:	ea47 0309 	orr.w	r3, r7, r9
 8005862:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005866:	d0b5      	beq.n	80057d4 <sub_filedata+0x184>
                if (file_mod == 0) {
 8005868:	9b05      	ldr	r3, [sp, #20]
 800586a:	b93b      	cbnz	r3, 800587c <sub_filedata+0x22c>
                    outq->putcursor     = outq_marker;
 800586c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800586e:	60a3      	str	r3, [r4, #8]
                    alp->OUTREC(CMD)   |= 0x0F;
 8005870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005872:	7953      	ldrb	r3, [r2, #5]
 8005874:	f043 030f 	orr.w	r3, r3, #15
 8005878:	7153      	strb	r3, [r2, #5]
                    data_in             = 0;
 800587a:	2500      	movs	r5, #0
                q_writebyte(outq, file_id);
 800587c:	9904      	ldr	r1, [sp, #16]
 800587e:	9c03      	ldr	r4, [sp, #12]
 8005880:	4620      	mov	r0, r4
 8005882:	f000 faff 	bl	8005e84 <q_writebyte>
                q_writebyte(outq, err_code);
 8005886:	4639      	mov	r1, r7
 8005888:	4620      	mov	r0, r4
 800588a:	f000 fafb 	bl	8005e84 <q_writebyte>
                q_markbyte(inq, span);         // go past any leftover input data
 800588e:	b231      	sxth	r1, r6
 8005890:	4650      	mov	r0, sl
 8005892:	f000 faf2 	bl	8005e7a <q_markbyte>
                data_out += 2;
 8005896:	f10b 0b02 	add.w	fp, fp, #2
 800589a:	fa0f fb8b 	sxth.w	fp, fp
 800589e:	e799      	b.n	80057d4 <sub_filedata+0x184>
 80058a0:	465c      	mov	r4, fp
 80058a2:	e002      	b.n	80058aa <sub_filedata+0x25a>
 80058a4:	465c      	mov	r4, fp
 80058a6:	e000      	b.n	80058aa <sub_filedata+0x25a>
 80058a8:	465c      	mov	r4, fp
    vl_close(fp);
 80058aa:	9802      	ldr	r0, [sp, #8]
 80058ac:	f000 fe30 	bl	8006510 <vl_close>
}
 80058b0:	4620      	mov	r0, r4
 80058b2:	b011      	add	sp, #68	; 0x44
 80058b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b8:	465c      	mov	r4, fp
 80058ba:	e7f6      	b.n	80058aa <sub_filedata+0x25a>
 80058bc:	465c      	mov	r4, fp
 80058be:	e7f7      	b.n	80058b0 <sub_filedata+0x260>

080058c0 <sub_fileperms>:
static ot_int sub_fileperms( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 80058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	b087      	sub	sp, #28
 80058c6:	4605      	mov	r5, r0
 80058c8:	9103      	str	r1, [sp, #12]
 80058ca:	4616      	mov	r6, r2
 80058cc:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 80058d0:	f3c3 1b02 	ubfx	fp, r3, #4, #3
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 80058d4:	f013 0f02 	tst.w	r3, #2
 80058d8:	d14d      	bne.n	8005976 <sub_fileperms+0xb6>
 80058da:	f04f 0924 	mov.w	r9, #36	; 0x24
 80058de:	f04f 0a00 	mov.w	sl, #0
 80058e2:	e00c      	b.n	80058fe <sub_fileperms+0x3e>
            data_in--;  // two for the new mod
 80058e4:	1e9c      	subs	r4, r3, #2
 80058e6:	b224      	sxth	r4, r4
            file_mod = vl_chmod(file_block, file_id, q_readbyte(alp->inq), user_id);
 80058e8:	68a8      	ldr	r0, [r5, #8]
 80058ea:	f000 fafd 	bl	8005ee8 <q_readbyte>
 80058ee:	9b03      	ldr	r3, [sp, #12]
 80058f0:	4602      	mov	r2, r0
 80058f2:	4641      	mov	r1, r8
 80058f4:	4658      	mov	r0, fp
 80058f6:	f000 fd6a 	bl	80063ce <vl_chmod>
 80058fa:	4681      	mov	r9, r0
        if (allow_write) {
 80058fc:	bb77      	cbnz	r7, 800595c <sub_fileperms+0x9c>
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 80058fe:	2c00      	cmp	r4, #0
 8005900:	dd3c      	ble.n	800597c <sub_fileperms+0xbc>
 8005902:	68ea      	ldr	r2, [r5, #12]
 8005904:	2102      	movs	r1, #2
 8005906:	4630      	mov	r0, r6
 8005908:	f7ff fda4 	bl	8005454 <sub_qnotfull>
 800590c:	2800      	cmp	r0, #0
 800590e:	d035      	beq.n	800597c <sub_fileperms+0xbc>
        ot_u8   file_id         = q_readbyte(alp->inq);
 8005910:	68a8      	ldr	r0, [r5, #8]
 8005912:	f000 fae9 	bl	8005ee8 <q_readbyte>
 8005916:	4680      	mov	r8, r0
        ot_bool allow_write     = respond;
 8005918:	1c37      	adds	r7, r6, #0
 800591a:	bf18      	it	ne
 800591c:	2701      	movne	r7, #1
        data_in--;  // one for the file id
 800591e:	b2a3      	uxth	r3, r4
 8005920:	1e5c      	subs	r4, r3, #1
 8005922:	b224      	sxth	r4, r4
        if (file_mod == VL_ACCESS_W ) {
 8005924:	f1b9 0f12 	cmp.w	r9, #18
 8005928:	d0dc      	beq.n	80058e4 <sub_fileperms+0x24>
        else if (allow_write) {
 800592a:	2e00      	cmp	r6, #0
 800592c:	d0e6      	beq.n	80058fc <sub_fileperms+0x3c>
            allow_write = (ot_bool)(vl_getheader_vaddr(&header, file_block, file_id, \
 800592e:	2300      	movs	r3, #0
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	2324      	movs	r3, #36	; 0x24
 8005934:	4602      	mov	r2, r0
 8005936:	4659      	mov	r1, fp
 8005938:	f10d 0016 	add.w	r0, sp, #22
 800593c:	f000 fcbe 	bl	80062bc <vl_getheader_vaddr>
 8005940:	2800      	cmp	r0, #0
 8005942:	bf0c      	ite	eq
 8005944:	2701      	moveq	r7, #1
 8005946:	2700      	movne	r7, #0
            if (allow_write) {
 8005948:	d1d8      	bne.n	80058fc <sub_fileperms+0x3c>
                file_idmod  = vworm_read(header + 4);   //shortcut to idmod, hack-ish but fast
 800594a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800594e:	3004      	adds	r0, #4
 8005950:	b280      	uxth	r0, r0
 8005952:	f002 f9c5 	bl	8007ce0 <vworm_read>
                file_mod    = file_idmod >> 8;          ///@todo this might be endian dependent
 8005956:	f3c0 2907 	ubfx	r9, r0, #8, #8
 800595a:	e7cf      	b.n	80058fc <sub_fileperms+0x3c>
            q_writebyte(alp->outq, file_id);
 800595c:	4641      	mov	r1, r8
 800595e:	68e8      	ldr	r0, [r5, #12]
 8005960:	f000 fa90 	bl	8005e84 <q_writebyte>
            q_writebyte(alp->outq, file_mod);
 8005964:	4649      	mov	r1, r9
 8005966:	68e8      	ldr	r0, [r5, #12]
 8005968:	f000 fa8c 	bl	8005e84 <q_writebyte>
            data_out += 2;
 800596c:	f10a 0a02 	add.w	sl, sl, #2
 8005970:	fa0f fa8a 	sxth.w	sl, sl
 8005974:	e7c3      	b.n	80058fe <sub_fileperms+0x3e>
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 8005976:	f04f 0912 	mov.w	r9, #18
 800597a:	e7b0      	b.n	80058de <sub_fileperms+0x1e>
}
 800597c:	4650      	mov	r0, sl
 800597e:	b007      	add	sp, #28
 8005980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005984 <alp_proc_filedata>:
OT_WEAK ot_bool alp_proc_filedata(alp_tmpl* alp, const id_tmpl* user_id) {
 8005984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005988:	b082      	sub	sp, #8
 800598a:	4604      	mov	r4, r0
 800598c:	460f      	mov	r7, r1
    ot_int  data_in     = INREC(alp, PLEN);     //alp->INREC(PLEN);
 800598e:	f06f 0102 	mvn.w	r1, #2
 8005992:	6880      	ldr	r0, [r0, #8]
 8005994:	f000 fa26 	bl	8005de4 <q_getcursor_val>
 8005998:	fa0f f880 	sxth.w	r8, r0
    ot_u8   cmd_in      = INREC(alp, CMD);      //alp->INREC(CMD);
 800599c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059a0:	68a0      	ldr	r0, [r4, #8]
 80059a2:	f000 fa1f 	bl	8005de4 <q_getcursor_val>
 80059a6:	4605      	mov	r5, r0
    alp->OUTREC(PLEN) = cmd_fn[cmd_in & 0x0F](alp, user_id, (cmd_in & 0x80), cmd_in, data_in);
 80059a8:	f000 020f 	and.w	r2, r0, #15
 80059ac:	4b12      	ldr	r3, [pc, #72]	; (80059f8 <alp_proc_filedata+0x74>)
 80059ae:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80059b2:	f8cd 8000 	str.w	r8, [sp]
 80059b6:	4603      	mov	r3, r0
 80059b8:	f000 0280 	and.w	r2, r0, #128	; 0x80
 80059bc:	4639      	mov	r1, r7
 80059be:	4620      	mov	r0, r4
 80059c0:	47b0      	blx	r6
 80059c2:	b2c0      	uxtb	r0, r0
 80059c4:	70e0      	strb	r0, [r4, #3]
    if (cmd_in & 0x80) {
 80059c6:	f015 0f80 	tst.w	r5, #128	; 0x80
 80059ca:	d107      	bne.n	80059dc <alp_proc_filedata+0x58>
        alp->outq->putcursor   -= alp->OUTREC(PLEN);
 80059cc:	68e2      	ldr	r2, [r4, #12]
 80059ce:	6893      	ldr	r3, [r2, #8]
 80059d0:	1a18      	subs	r0, r3, r0
 80059d2:	6090      	str	r0, [r2, #8]
}
 80059d4:	2001      	movs	r0, #1
 80059d6:	b002      	add	sp, #8
 80059d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        alp->OUTREC(CMD)  ^= 0x80;
 80059dc:	7963      	ldrb	r3, [r4, #5]
 80059de:	f083 0380 	eor.w	r3, r3, #128	; 0x80
        alp->OUTREC(CMD)  |= (cmd_in & 0x02) ? 0x0F : 0x01;
 80059e2:	b25b      	sxtb	r3, r3
 80059e4:	f015 0f02 	tst.w	r5, #2
 80059e8:	d103      	bne.n	80059f2 <alp_proc_filedata+0x6e>
 80059ea:	2201      	movs	r2, #1
 80059ec:	4313      	orrs	r3, r2
 80059ee:	7163      	strb	r3, [r4, #5]
 80059f0:	e7f0      	b.n	80059d4 <alp_proc_filedata+0x50>
 80059f2:	220f      	movs	r2, #15
 80059f4:	e7fa      	b.n	80059ec <alp_proc_filedata+0x68>
 80059f6:	bf00      	nop
 80059f8:	08009d18 	.word	0x08009d18

080059fc <alp_proc_logger>:
#include <otlib/auth.h>
#include <otlib/queue.h>

///@todo replace INREC calls with direct access from input

OT_WEAK ot_bool alp_proc_logger(alp_tmpl* alp, const id_tmpl* user_id) {
 80059fc:	b510      	push	{r4, lr}
 80059fe:	4604      	mov	r4, r0
/// Logger ALP is like ECHO.  The input is copied to the output.

    // Only root can log directly (this is an important security firewall)
    if (auth_isroot(user_id)) {
 8005a00:	4608      	mov	r0, r1
 8005a02:	f000 f902 	bl	8005c0a <auth_isroot>
 8005a06:	b908      	cbnz	r0, 8005a0c <alp_proc_logger+0x10>
        if (alp->inq != alp->outq) {
            q_movedata(alp->outq, alp->inq, alp->OUTREC(PLEN));
        }
    }
    return True;
}
 8005a08:	2001      	movs	r0, #1
 8005a0a:	bd10      	pop	{r4, pc}
        alp->OUTREC(FLAGS)  = q_readbyte(alp->inq);
 8005a0c:	68a0      	ldr	r0, [r4, #8]
 8005a0e:	f000 fa6b 	bl	8005ee8 <q_readbyte>
 8005a12:	70a0      	strb	r0, [r4, #2]
        alp->OUTREC(PLEN)   = q_readbyte(alp->inq);
 8005a14:	68a0      	ldr	r0, [r4, #8]
 8005a16:	f000 fa67 	bl	8005ee8 <q_readbyte>
 8005a1a:	70e0      	strb	r0, [r4, #3]
        alp->inq->getcursor+= 2;
 8005a1c:	68a2      	ldr	r2, [r4, #8]
 8005a1e:	6853      	ldr	r3, [r2, #4]
 8005a20:	3302      	adds	r3, #2
 8005a22:	6053      	str	r3, [r2, #4]
        if (alp->inq != alp->outq) {
 8005a24:	68a1      	ldr	r1, [r4, #8]
 8005a26:	68e0      	ldr	r0, [r4, #12]
 8005a28:	4281      	cmp	r1, r0
 8005a2a:	d0ed      	beq.n	8005a08 <alp_proc_logger+0xc>
            q_movedata(alp->outq, alp->inq, alp->OUTREC(PLEN));
 8005a2c:	78e2      	ldrb	r2, [r4, #3]
 8005a2e:	f000 fab6 	bl	8005f9e <q_movedata>
 8005a32:	e7e9      	b.n	8005a08 <alp_proc_logger+0xc>

08005a34 <sub_get_headerlen>:
    hdr_len    -= (tnf == 6);               // Add Type len, Remove ID len & 2 byte ID
    return hdr_len;
#else
    return 4;
#endif
}
 8005a34:	2004      	movs	r0, #4
 8005a36:	4770      	bx	lr

08005a38 <sub_insert_header>:



void sub_insert_header(alp_tmpl* alp, ot_qcur hdr_position, ot_u8 hdr_len) {
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4604      	mov	r4, r0
/// <LI> Add hdr_len to the queue length (cursors are already in place). </LI>
/// <LI> If using NDEF (hdr_len != 4), output header processing is ugly. </LI>
/// <LI> Pure ALP (hdr_len == 4) output header processing is universal. </LI>
/// <LI> Finally, always clear MB because now the first record is done. </LI>
    ot_qcur savedput = alp->outq->putcursor + hdr_len;
 8005a3c:	68c0      	ldr	r0, [r0, #12]
 8005a3e:	6883      	ldr	r3, [r0, #8]
 8005a40:	189d      	adds	r5, r3, r2
    
    ///@todo make sure this works, might need to have qcur be signed
    if (hdr_position != NULL) {
 8005a42:	b101      	cbz	r1, 8005a46 <sub_insert_header+0xe>
        alp->outq->putcursor = hdr_position;
 8005a44:	6081      	str	r1, [r0, #8]
    }
    else
#   else
    {
        //q_writelong_be(alp->outq, alp->OUTREC(FLAGS));
        ot_memcpy(alp->outq->putcursor, &(alp->OUTREC(FLAGS)), 4);
 8005a46:	68e3      	ldr	r3, [r4, #12]
 8005a48:	2204      	movs	r2, #4
 8005a4a:	1ca1      	adds	r1, r4, #2
 8005a4c:	6898      	ldr	r0, [r3, #8]
 8005a4e:	f001 fdbf 	bl	80075d0 <ot_memcpy>
    }
#   endif

    alp->outq->putcursor = savedput;
 8005a52:	68e3      	ldr	r3, [r4, #12]
 8005a54:	609d      	str	r5, [r3, #8]
    alp->OUTREC(FLAGS)  &= ~ALP_FLAG_MB;
 8005a56:	78a3      	ldrb	r3, [r4, #2]
 8005a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5c:	70a3      	strb	r3, [r4, #2]
}
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}

08005a60 <alp_proc_null>:
 * The Null Processor is implemented here.  The rest of the processors are
 * implemented in separate C files, named alp_...c
 */
OT_WEAK ot_bool alp_proc_null(alp_tmpl* a0, const id_tmpl* a1) {
    return True;   // Atomic, with no payload data
}
 8005a60:	2001      	movs	r0, #1
 8005a62:	4770      	bx	lr

08005a64 <alp_init>:
 * ========================================================================<BR>
 */

#ifndef EXTF_alp_init
void alp_init(alp_tmpl* alp, ot_queue* inq, ot_queue* outq) {
    alp->purge_id       = 1;
 8005a64:	2301      	movs	r3, #1
 8005a66:	8003      	strh	r3, [r0, #0]
    alp->OUTREC(FLAGS)  = (ALP_FLAG_MB | ALP_FLAG_ME | ALP_FLAG_SR);   ///@todo this will need to be removed soon
 8005a68:	23d0      	movs	r3, #208	; 0xd0
 8005a6a:	7083      	strb	r3, [r0, #2]
    alp->inq            = inq;
 8005a6c:	6081      	str	r1, [r0, #8]
    alp->outq           = outq;
 8005a6e:	60c2      	str	r2, [r0, #12]
}
 8005a70:	4770      	bx	lr

08005a72 <alp_parse_message>:
///@todo To be completed when transformation of ALP is complete
}



ALP_status alp_parse_message(alp_tmpl* alp, const id_tmpl* user_id) {
 8005a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a74:	4604      	mov	r4, r0
 8005a76:	460e      	mov	r6, r1
    //ot_u8       hdr_len;
    ot_int      proc_output;
    //ot_int      bytes;

    /// Lock the ot_queues while ALP is parsing/processing
    q_lock(alp->inq);
 8005a78:	6880      	ldr	r0, [r0, #8]
 8005a7a:	f000 f9ce 	bl	8005e1a <q_lock>
    q_lock(alp->outq);
 8005a7e:	68e0      	ldr	r0, [r4, #12]
 8005a80:	f000 f9cb 	bl	8005e1a <q_lock>
 8005a84:	e027      	b.n	8005ad6 <alp_parse_message+0x64>
    /// previous message.  If new input record header does not match
    /// OpenTag requirement, bypass it and go to the next.  Else, copy
    /// the input record to the output record.  alp_proc() will adjust
    /// the output payload length and flags, as necessary.
    if (alp->OUTREC(FLAGS) & ALP_FLAG_ME) {
        alp->OUTREC(FLAGS)  = q_getcursor_val(alp->inq, 0);
 8005a86:	2100      	movs	r1, #0
 8005a88:	68a0      	ldr	r0, [r4, #8]
 8005a8a:	f000 f9ab 	bl	8005de4 <q_getcursor_val>
 8005a8e:	70a0      	strb	r0, [r4, #2]
        alp->OUTREC(PLEN)   = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	70e3      	strb	r3, [r4, #3]
        alp->OUTREC(ID)     = q_getcursor_val(alp->inq, 2);
 8005a94:	2102      	movs	r1, #2
 8005a96:	68a0      	ldr	r0, [r4, #8]
 8005a98:	f000 f9a4 	bl	8005de4 <q_getcursor_val>
 8005a9c:	7120      	strb	r0, [r4, #4]
        alp->OUTREC(CMD)    = q_getcursor_val(alp->inq, 3);
 8005a9e:	2103      	movs	r1, #3
 8005aa0:	68a0      	ldr	r0, [r4, #8]
 8005aa2:	f000 f99f 	bl	8005de4 <q_getcursor_val>
 8005aa6:	7160      	strb	r0, [r4, #5]
 8005aa8:	e023      	b.n	8005af2 <alp_parse_message+0x80>
        // Also, remove output chunking flag
        alp->outq->putcursor   = hdr_position;
        alp->OUTREC(FLAGS)    &= ~NDEF_CF;
    }
    else {
        memcpy(hdr_position, &alp->OUTREC(FLAGS), 4);
 8005aaa:	2204      	movs	r2, #4
 8005aac:	1ca1      	adds	r1, r4, #2
 8005aae:	4638      	mov	r0, r7
 8005ab0:	f001 fd8e 	bl	80075d0 <ot_memcpy>
        alp->OUTREC(FLAGS)  &= ~ALP_FLAG_MB;
 8005ab4:	78a3      	ldrb	r3, [r4, #2]
 8005ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aba:	70a3      	strb	r3, [r4, #2]
    }
    
    ///@note Added from old sources to handle batched ALP inputs
    {   ot_u8* nextrecord;
        nextrecord = input_position + input_position[1] + 4;
 8005abc:	786b      	ldrb	r3, [r5, #1]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	442b      	add	r3, r5
        if (nextrecord == alp->inq->putcursor) {
 8005ac2:	68a2      	ldr	r2, [r4, #8]
 8005ac4:	6891      	ldr	r1, [r2, #8]
 8005ac6:	4299      	cmp	r1, r3
 8005ac8:	d029      	beq.n	8005b1e <alp_parse_message+0xac>
            /// The input record, now treated, shall be rewound
            alp->inq->putcursor = input_position;
            alp->inq->getcursor = input_position;
        }
        else {
            alp->inq->getcursor = nextrecord;
 8005aca:	6053      	str	r3, [r2, #4]

            ///@note HACK
            /// should be put into a loop
            if (alp->inq->putcursor > alp->inq->getcursor) {
 8005acc:	68a3      	ldr	r3, [r4, #8]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d926      	bls.n	8005b24 <alp_parse_message+0xb2>
    if ((q_readspace(alp->inq) < 4) || (q_writespace(alp->outq) < 4)) {
 8005ad6:	68a0      	ldr	r0, [r4, #8]
 8005ad8:	f000 f996 	bl	8005e08 <q_readspace>
 8005adc:	2803      	cmp	r0, #3
 8005ade:	dd29      	ble.n	8005b34 <alp_parse_message+0xc2>
 8005ae0:	68e0      	ldr	r0, [r4, #12]
 8005ae2:	f000 f98c 	bl	8005dfe <q_writespace>
 8005ae6:	2803      	cmp	r0, #3
 8005ae8:	dd26      	ble.n	8005b38 <alp_parse_message+0xc6>
    if (alp->OUTREC(FLAGS) & ALP_FLAG_ME) {
 8005aea:	78a3      	ldrb	r3, [r4, #2]
 8005aec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005af0:	d1c9      	bne.n	8005a86 <alp_parse_message+0x14>
    input_position          = alp->inq->getcursor;
 8005af2:	68a3      	ldr	r3, [r4, #8]
 8005af4:	685d      	ldr	r5, [r3, #4]
    alp->inq->getcursor    += 4;
 8005af6:	1d2a      	adds	r2, r5, #4
 8005af8:	605a      	str	r2, [r3, #4]
    hdr_position            = alp->outq->putcursor;
 8005afa:	68e3      	ldr	r3, [r4, #12]
 8005afc:	689f      	ldr	r7, [r3, #8]
    alp->outq->putcursor   += 4;
 8005afe:	1d3a      	adds	r2, r7, #4
 8005b00:	609a      	str	r2, [r3, #8]
    proc_output = alp_proc(alp, user_id);
 8005b02:	4631      	mov	r1, r6
 8005b04:	4620      	mov	r0, r4
 8005b06:	f7fa fe31 	bl	800076c <alp_proc>
    if (alp->OUTREC(PLEN) == 0) {
 8005b0a:	78e3      	ldrb	r3, [r4, #3]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1cc      	bne.n	8005aaa <alp_parse_message+0x38>
        alp->outq->putcursor   = hdr_position;
 8005b10:	68e3      	ldr	r3, [r4, #12]
 8005b12:	609f      	str	r7, [r3, #8]
        alp->OUTREC(FLAGS)    &= ~NDEF_CF;
 8005b14:	78a3      	ldrb	r3, [r4, #2]
 8005b16:	f023 0320 	bic.w	r3, r3, #32
 8005b1a:	70a3      	strb	r3, [r4, #2]
 8005b1c:	e7ce      	b.n	8005abc <alp_parse_message+0x4a>
            alp->inq->putcursor = input_position;
 8005b1e:	6095      	str	r5, [r2, #8]
            alp->inq->getcursor = input_position;
 8005b20:	68a3      	ldr	r3, [r4, #8]
 8005b22:	605d      	str	r5, [r3, #4]
            }
        }
    }
    
    /// Unlock the ot_queues after ALP is parsing/processing
    q_unlock(alp->inq);
 8005b24:	68a0      	ldr	r0, [r4, #8]
 8005b26:	f000 f983 	bl	8005e30 <q_unlock>
    q_unlock(alp->outq);
 8005b2a:	68e0      	ldr	r0, [r4, #12]
 8005b2c:	f000 f980 	bl	8005e30 <q_unlock>
    
    exit_code = MSG_End;
 8005b30:	2006      	movs	r0, #6

    alp_parse_message_END:
    return exit_code;
}
 8005b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        exit_code = MSG_Null;
 8005b34:	2000      	movs	r0, #0
 8005b36:	e7fc      	b.n	8005b32 <alp_parse_message+0xc0>
 8005b38:	2000      	movs	r0, #0
 8005b3a:	e7fa      	b.n	8005b32 <alp_parse_message+0xc0>

08005b3c <alp_new_record>:
  */

/// @note This function is used by the logger (logger.c), but nowhere
/// else.  The ability to create a new output record/message is required, but
/// the method of doing it may likely get re-architected.
OT_WEAK void alp_new_record(alp_tmpl* alp, ot_u8 flags, ot_u8 payload_limit, ot_int payload_remaining) {
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	4604      	mov	r4, r0
    // Clear control flags (begin, end, chunk)
	// Chunk and End will be intelligently set in this function, but Begin must
	// be set by the caller, AFTER this function.
	alp->OUTREC(FLAGS) |= flags;
 8005b40:	7880      	ldrb	r0, [r0, #2]
 8005b42:	4301      	orrs	r1, r0
	alp->OUTREC(FLAGS) |= NDEF_SR;
 8005b44:	f041 0110 	orr.w	r1, r1, #16
#   if (OT_FEATURE(NDEF))
	alp->OUTREC(FLAGS) &= ~(ALP_FLAG_ME | ALP_FLAG_CF | NDEF_IL);
#   else
    alp->OUTREC(FLAGS) &= (ALP_FLAG_MB | NDEF_SR);
 8005b48:	f001 0190 	and.w	r1, r1, #144	; 0x90
 8005b4c:	70a1      	strb	r1, [r4, #2]
#   endif

	// Automatically set Chunk or End.
	// "payload_remaining" is re-purposed to contain the number of bytes loaded
	// Chunk Flag is ignored by pure-ALP
	if (payload_remaining > payload_limit) {
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	dc0e      	bgt.n	8005b70 <alp_new_record+0x34>
#       if (OT_FEATURE(NDEF))
		alp->OUTREC(FLAGS)  |= ALP_FLAG_CF;
#       endif
	}
	else {
		alp->OUTREC(FLAGS)  |= ALP_FLAG_ME;
 8005b52:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005b56:	70a1      	strb	r1, [r4, #2]
	}

	alp->OUTREC(PLEN) = (ot_u8)payload_remaining;
 8005b58:	70e3      	strb	r3, [r4, #3]
	sub_insert_header(alp, NULL, sub_get_headerlen(alp->OUTREC(FLAGS)&7));
 8005b5a:	78a0      	ldrb	r0, [r4, #2]
 8005b5c:	f000 0007 	and.w	r0, r0, #7
 8005b60:	f7ff ff68 	bl	8005a34 <sub_get_headerlen>
 8005b64:	4602      	mov	r2, r0
 8005b66:	2100      	movs	r1, #0
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f7ff ff65 	bl	8005a38 <sub_insert_header>
}
 8005b6e:	bd10      	pop	{r4, pc}
		payload_remaining   = payload_limit;
 8005b70:	b213      	sxth	r3, r2
 8005b72:	e7f1      	b.n	8005b58 <alp_new_record+0x1c>

08005b74 <alp_breakdown_query_tmpl>:





OT_WEAK void alp_breakdown_query_tmpl(ot_queue* in_q, void* data_type) {
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	4605      	mov	r5, r0
 8005b78:	460c      	mov	r4, r1
    ot_u8   query_length;
    ot_u8   query_code;
    ot_u8*  query_mask;
    
    query_code      = q_readbyte(in_q);
 8005b7a:	f000 f9b5 	bl	8005ee8 <q_readbyte>
 8005b7e:	4607      	mov	r7, r0
    query_length    = q_readbyte(in_q);
 8005b80:	4628      	mov	r0, r5
 8005b82:	f000 f9b1 	bl	8005ee8 <q_readbyte>
 8005b86:	4606      	mov	r6, r0
    query_mask      = NULL;
    
    if (query_code & 0x80) {
 8005b88:	f017 0f80 	tst.w	r7, #128	; 0x80
 8005b8c:	d109      	bne.n	8005ba2 <alp_breakdown_query_tmpl+0x2e>
    query_mask      = NULL;
 8005b8e:	2000      	movs	r0, #0
        query_mask  = q_markbyte(in_q, query_length);
    }
    
    ((query_tmpl*)data_type)->code      = query_code;
 8005b90:	7027      	strb	r7, [r4, #0]
    ((query_tmpl*)data_type)->length    = query_length;
 8005b92:	7066      	strb	r6, [r4, #1]
    ((query_tmpl*)data_type)->mask      = query_mask;
 8005b94:	6060      	str	r0, [r4, #4]
    ((query_tmpl*)data_type)->value     = q_markbyte(in_q, query_length);
 8005b96:	b231      	sxth	r1, r6
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f000 f96e 	bl	8005e7a <q_markbyte>
 8005b9e:	60a0      	str	r0, [r4, #8]
}
 8005ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        query_mask  = q_markbyte(in_q, query_length);
 8005ba2:	b201      	sxth	r1, r0
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	f000 f968 	bl	8005e7a <q_markbyte>
 8005baa:	e7f1      	b.n	8005b90 <alp_breakdown_query_tmpl+0x1c>

08005bac <alp_breakdown_udp_tmpl>:





OT_WEAK void alp_breakdown_udp_tmpl(ot_queue* in_q, void* data_type) {
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	4605      	mov	r5, r0
 8005bb0:	460c      	mov	r4, r1
    ot_int udp_data_length;
    udp_data_length                       = q_readshort(in_q);
 8005bb2:	f000 f99e 	bl	8005ef2 <q_readshort>
 8005bb6:	b206      	sxth	r6, r0
    ((udp_tmpl*)data_type)->data_length   = udp_data_length;
 8005bb8:	8020      	strh	r0, [r4, #0]
    ((udp_tmpl*)data_type)->dst_port      = q_readbyte(in_q);
 8005bba:	4628      	mov	r0, r5
 8005bbc:	f000 f994 	bl	8005ee8 <q_readbyte>
 8005bc0:	70a0      	strb	r0, [r4, #2]
    ((udp_tmpl*)data_type)->src_port      = q_readbyte(in_q);
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	f000 f990 	bl	8005ee8 <q_readbyte>
 8005bc8:	70e0      	strb	r0, [r4, #3]
    ((udp_tmpl*)data_type)->data          = q_markbyte(in_q, udp_data_length);
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 f954 	bl	8005e7a <q_markbyte>
 8005bd2:	6060      	str	r0, [r4, #4]
}
 8005bd4:	bd70      	pop	{r4, r5, r6, pc}

08005bd6 <alp_breakdown_isfcomp_tmpl>:





OT_WEAK void alp_breakdown_isfcomp_tmpl(ot_queue* in_q, void* data_type) {
 8005bd6:	b538      	push	{r3, r4, r5, lr}
 8005bd8:	4605      	mov	r5, r0
 8005bda:	460c      	mov	r4, r1
    ((isfcomp_tmpl*)data_type)->is_series   = q_readbyte(in_q);
 8005bdc:	f000 f984 	bl	8005ee8 <q_readbyte>
 8005be0:	7020      	strb	r0, [r4, #0]
    ((isfcomp_tmpl*)data_type)->isf_id      = q_readbyte(in_q);
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 f980 	bl	8005ee8 <q_readbyte>
 8005be8:	7060      	strb	r0, [r4, #1]
    ((isfcomp_tmpl*)data_type)->offset      = q_readshort(in_q);
 8005bea:	4628      	mov	r0, r5
 8005bec:	f000 f981 	bl	8005ef2 <q_readshort>
 8005bf0:	8060      	strh	r0, [r4, #2]
}
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}

08005bf4 <alp_breakdown_isfcall_tmpl>:





OT_WEAK void alp_breakdown_isfcall_tmpl(ot_queue* in_q, void* data_type) {
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4605      	mov	r5, r0
 8005bf8:	460c      	mov	r4, r1
    alp_breakdown_isfcomp_tmpl(in_q, data_type);
 8005bfa:	f7ff ffec 	bl	8005bd6 <alp_breakdown_isfcomp_tmpl>
    ((isfcall_tmpl*)data_type)->max_return  = q_readshort(in_q);
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 f977 	bl	8005ef2 <q_readshort>
 8005c04:	80a0      	strh	r0, [r4, #4]
}
 8005c06:	bd38      	pop	{r3, r4, r5, pc}

08005c08 <auth_init>:
#endif

#if (_SEC_NLS)
    ///@todo
#endif
}
 8005c08:	4770      	bx	lr

08005c0a <auth_isroot>:
#if (_SEC_ANY)
    return sub_ismask(user_id, b00000000);
#else
    return False;
#endif
}
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	4770      	bx	lr

08005c0e <auth_check>:

    return 0;

#else
    // Try guest access
    return (0x07 & req_mod & rw_mod);
 8005c0e:	4008      	ands	r0, r1
#endif
}
 8005c10:	f000 0007 	and.w	r0, r0, #7
 8005c14:	4770      	bx	lr
	...

08005c18 <buffers_init>:
#endif



#ifndef EXTF_buffers_init
void buffers_init() {
 8005c18:	b510      	push	{r4, lr}
#   if (OT_FEATURE(SERVER) == ENABLED)
    q_init(&rxq,    otbuf,              TXRX_SIZE);
 8005c1a:	4c0d      	ldr	r4, [pc, #52]	; (8005c50 <buffers_init+0x38>)
 8005c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c20:	4621      	mov	r1, r4
 8005c22:	480c      	ldr	r0, [pc, #48]	; (8005c54 <buffers_init+0x3c>)
 8005c24:	f000 f910 	bl	8005e48 <q_init>
    q_init(&txq,    otbuf+TXRX_SIZE,    TXRX_SIZE);    
 8005c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c2c:	18a1      	adds	r1, r4, r2
 8005c2e:	480a      	ldr	r0, [pc, #40]	; (8005c58 <buffers_init+0x40>)
 8005c30:	f000 f90a 	bl	8005e48 <q_init>
#   endif
#   if (ALP_ENABLED)
    q_init(&otmpin,     otbuf+(TXRX_SIZE*2),            ALP_SIZE );
 8005c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c38:	18a1      	adds	r1, r4, r2
 8005c3a:	4808      	ldr	r0, [pc, #32]	; (8005c5c <buffers_init+0x44>)
 8005c3c:	f000 f904 	bl	8005e48 <q_init>
    q_init(&otmpout,    otbuf+(TXRX_SIZE*2)+ALP_SIZE,   ALP_SIZE );
 8005c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c44:	f504 6180 	add.w	r1, r4, #1024	; 0x400
 8005c48:	4805      	ldr	r0, [pc, #20]	; (8005c60 <buffers_init+0x48>)
 8005c4a:	f000 f8fd 	bl	8005e48 <q_init>
#   endif
}
 8005c4e:	bd10      	pop	{r4, pc}
 8005c50:	20002760 	.word	0x20002760
 8005c54:	20002d60 	.word	0x20002d60
 8005c58:	20002d74 	.word	0x20002d74
 8005c5c:	20002d88 	.word	0x20002d88
 8005c60:	2000274c 	.word	0x2000274c

08005c64 <crc_init_stream>:

//crc_struct crc;


void crc_init_stream(crcstream_t* stream, ot_bool writeout, ot_int size, ot_u8* data) {
    stream->writeout    = writeout;
 8005c64:	7181      	strb	r1, [r0, #6]
    stream->cursor      = data;
 8005c66:	6003      	str	r3, [r0, #0]
    stream->count       = size;
 8005c68:	8082      	strh	r2, [r0, #4]
    stream->val         = crc16drv_init();
 8005c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c6e:	8103      	strh	r3, [r0, #8]
}
 8005c70:	4770      	bx	lr

08005c72 <crc16drv_init>:

#ifndef EXTF_crc16drv_init
OT_INLINE ot_u16 crc16drv_init() {
    //crc16_dr = 0xFFFF;
    return 0xFFFF;
}
 8005c72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005c76:	4770      	bx	lr

08005c78 <crc16drv_block_manual>:
/// One nice thing about the software-only CRC16 method is that it doesn't
/// require any sort of interrupt blocking.  In practice, interrupt blocking
/// by CRC isn't much of an issue, but if you are getting weird CRC errors
/// when using streams, try comparing against this software implemetation.

    while (--block_size >= 0) {
 8005c78:	3901      	subs	r1, #1
 8005c7a:	b209      	sxth	r1, r1
 8005c7c:	2900      	cmp	r1, #0
 8005c7e:	db12      	blt.n	8005ca6 <crc16drv_block_manual+0x2e>
OT_WEAK ot_u16 crc16drv_block_manual(ot_u8* block_addr, ot_int block_size, ot_u16 init) {
 8005c80:	b410      	push	{r4}
        ot_u8 index = ((ot_u8*)&init)[UPPER] ^ *block_addr++;       //((crc_val>>8) & 0xff) ^ *block_addr++;
 8005c82:	7803      	ldrb	r3, [r0, #0]
 8005c84:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
        init        = (init<<8) ^ crc16_table[index];
 8005c88:	4c08      	ldr	r4, [pc, #32]	; (8005cac <crc16drv_block_manual+0x34>)
 8005c8a:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8005c8e:	ea83 2202 	eor.w	r2, r3, r2, lsl #8
 8005c92:	b292      	uxth	r2, r2
        ot_u8 index = ((ot_u8*)&init)[UPPER] ^ *block_addr++;       //((crc_val>>8) & 0xff) ^ *block_addr++;
 8005c94:	3001      	adds	r0, #1
    while (--block_size >= 0) {
 8005c96:	3901      	subs	r1, #1
 8005c98:	b209      	sxth	r1, r1
 8005c9a:	2900      	cmp	r1, #0
 8005c9c:	daf1      	bge.n	8005c82 <crc16drv_block_manual+0xa>
    }
    return init;
}
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	08009d58 	.word	0x08009d58

08005cb0 <crc_calc_nstream>:
void crc_calc_nstream(crcstream_t* stream, ot_u16 n) {
 8005cb0:	b510      	push	{r4, lr}
 8005cb2:	4604      	mov	r4, r0
    if (stream->count > 0) {
 8005cb4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	dd0c      	ble.n	8005cd6 <crc_calc_nstream+0x26>
        if (n > stream->count) {
 8005cbc:	4299      	cmp	r1, r3
 8005cbe:	dd00      	ble.n	8005cc2 <crc_calc_nstream+0x12>
            n = stream->count;
 8005cc0:	b299      	uxth	r1, r3
        stream->count  -= n;
 8005cc2:	1a5b      	subs	r3, r3, r1
 8005cc4:	80a3      	strh	r3, [r4, #4]
        data            = stream->cursor;
 8005cc6:	6820      	ldr	r0, [r4, #0]
        stream->cursor += n;
 8005cc8:	1843      	adds	r3, r0, r1
 8005cca:	6023      	str	r3, [r4, #0]
        stream->val     = crc16drv_block_manual(data, n, stream->val);
 8005ccc:	8922      	ldrh	r2, [r4, #8]
 8005cce:	b209      	sxth	r1, r1
 8005cd0:	f7ff ffd2 	bl	8005c78 <crc16drv_block_manual>
 8005cd4:	8120      	strh	r0, [r4, #8]
    if ((stream->count == 0) && (stream->writeout)) {
 8005cd6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8005cda:	b973      	cbnz	r3, 8005cfa <crc_calc_nstream+0x4a>
 8005cdc:	79a3      	ldrb	r3, [r4, #6]
 8005cde:	b163      	cbz	r3, 8005cfa <crc_calc_nstream+0x4a>
        stream->writeout    = False;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	71a3      	strb	r3, [r4, #6]
        *stream->cursor++   = (ot_u8)(stream->val >> 8);
 8005ce4:	8923      	ldrh	r3, [r4, #8]
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	1c51      	adds	r1, r2, #1
 8005cea:	6021      	str	r1, [r4, #0]
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	7013      	strb	r3, [r2, #0]
        *stream->cursor++   = (ot_u8)(stream->val);
 8005cf0:	8922      	ldrh	r2, [r4, #8]
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	1c59      	adds	r1, r3, #1
 8005cf6:	6021      	str	r1, [r4, #0]
 8005cf8:	701a      	strb	r2, [r3, #0]
}
 8005cfa:	bd10      	pop	{r4, pc}

08005cfc <crc_block>:
ot_u16 crc_block(crcstream_t* stream, ot_bool writeout, ot_int size, ot_u8* data) {
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4604      	mov	r4, r0
 8005d00:	4615      	mov	r5, r2
    crc_init_stream(stream, writeout, size, data);
 8005d02:	f7ff ffaf 	bl	8005c64 <crc_init_stream>
    crc_calc_nstream(stream, size);
 8005d06:	b2a9      	uxth	r1, r5
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f7ff ffd1 	bl	8005cb0 <crc_calc_nstream>
}
 8005d0e:	8920      	ldrh	r0, [r4, #8]
 8005d10:	bd38      	pop	{r3, r4, r5, pc}
	...

08005d14 <logger_header>:
#include <otsys/mpipe.h>

#include <string.h>


ot_bool logger_header(ot_u8 id_subcode, ot_int payload_length) {
 8005d14:	b508      	push	{r3, lr}
/// logger_header creates the ALP/NDEF header needed by MPipe.  It is used
/// by all logging functions.  If there is not enough space in the MPipe queue
/// to hold the log data, it will return False, and nothing will be added to
/// the MPipe queue.

    mpipe.alp.outrec.id     = 4;                //Logger ID
 8005d16:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <logger_header+0x2c>)
 8005d18:	2304      	movs	r3, #4
 8005d1a:	7213      	strb	r3, [r2, #8]
    mpipe.alp.outrec.cmd    = id_subcode;       //Format Type
 8005d1c:	7250      	strb	r0, [r2, #9]

    if ((mpipe.alp.outq->putcursor+payload_length) < mpipe.alp.outq->back) {
 8005d1e:	6913      	ldr	r3, [r2, #16]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	440a      	add	r2, r1
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d301      	bcc.n	8005d2e <logger_header+0x1a>
        alp_new_record(&mpipe.alp, (ALP_FLAG_MB+5), 255, payload_length);
        return True;
    }
    //mpipe_kill();
    return False;
 8005d2a:	2000      	movs	r0, #0
}
 8005d2c:	bd08      	pop	{r3, pc}
 8005d2e:	460b      	mov	r3, r1
        alp_new_record(&mpipe.alp, (ALP_FLAG_MB+5), 255, payload_length);
 8005d30:	22ff      	movs	r2, #255	; 0xff
 8005d32:	2185      	movs	r1, #133	; 0x85
 8005d34:	4803      	ldr	r0, [pc, #12]	; (8005d44 <logger_header+0x30>)
 8005d36:	f7ff ff01 	bl	8005b3c <alp_new_record>
        return True;
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	e7f6      	b.n	8005d2c <logger_header+0x18>
 8005d3e:	bf00      	nop
 8005d40:	20002d9c 	.word	0x20002d9c
 8005d44:	20002da0 	.word	0x20002da0

08005d48 <sub_logmsg>:
}
#endif



void sub_logmsg(ot_int label_len, ot_int data_len, ot_u8* label, ot_u8* data) {
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	460e      	mov	r6, r1
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	461d      	mov	r5, r3
	q_writestring(mpipe.alp.outq, label, label_len);
 8005d50:	4c07      	ldr	r4, [pc, #28]	; (8005d70 <sub_logmsg+0x28>)
 8005d52:	4602      	mov	r2, r0
 8005d54:	6920      	ldr	r0, [r4, #16]
 8005d56:	f000 f90b 	bl	8005f70 <q_writestring>
    q_writebyte(mpipe.alp.outq, 0);
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	6920      	ldr	r0, [r4, #16]
 8005d5e:	f000 f891 	bl	8005e84 <q_writebyte>
    q_writestring(mpipe.alp.outq, data, data_len);
 8005d62:	4632      	mov	r2, r6
 8005d64:	4629      	mov	r1, r5
 8005d66:	6920      	ldr	r0, [r4, #16]
 8005d68:	f000 f902 	bl	8005f70 <q_writestring>
}
 8005d6c:	bd70      	pop	{r4, r5, r6, pc}
 8005d6e:	bf00      	nop
 8005d70:	20002d9c 	.word	0x20002d9c

08005d74 <logger_msg>:
#endif



#ifndef EXTF_logger_msg
void logger_msg(logmsg_type logcmd, ot_int label_len, ot_int data_len, ot_u8* label, ot_u8* data) {
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	460c      	mov	r4, r1
 8005d78:	4615      	mov	r5, r2
 8005d7a:	461e      	mov	r6, r3
/// Log a "Message" if it fits in the MPipe output queue.  A "Message" is a
/// text label, plus a space, plus a data payload.  The client should know how
/// to read-back Message data.  Check here for more information about messages:
/// http://www.indigresso.com/wiki/doku.php?id=opentag:otlib:logger

    ot_int payload_length = label_len + 1 + data_len;
 8005d7c:	4411      	add	r1, r2
 8005d7e:	3101      	adds	r1, #1
    //q_empty(mpipe.alp.outq);

    if (logger_header(logcmd, payload_length)) {
 8005d80:	b209      	sxth	r1, r1
 8005d82:	f7ff ffc7 	bl	8005d14 <logger_header>
 8005d86:	b900      	cbnz	r0, 8005d8a <logger_msg+0x16>
    	sub_logmsg(label_len, data_len, label, data);
    	mpipe_txschedule(0); //mpipe_send();
    }
}
 8005d88:	bd70      	pop	{r4, r5, r6, pc}
    	sub_logmsg(label_len, data_len, label, data);
 8005d8a:	9b04      	ldr	r3, [sp, #16]
 8005d8c:	4632      	mov	r2, r6
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4620      	mov	r0, r4
 8005d92:	f7ff ffd9 	bl	8005d48 <sub_logmsg>
    	mpipe_txschedule(0); //mpipe_send();
 8005d96:	2000      	movs	r0, #0
 8005d98:	f000 fc5a 	bl	8006650 <mpipe_txschedule>
}
 8005d9c:	e7f4      	b.n	8005d88 <logger_msg+0x14>
	...

08005da0 <logger_direct>:
#endif



#ifndef EXTF_logger_direct
void logger_direct() {
 8005da0:	b510      	push	{r4, lr}
/// Use this if you have already created a valid MPipe ALP/NDEF frame in the
/// MPipe output queue and all you want to do is log it.
    mpipe.alp.outq->getcursor[1] = q_span(mpipe.alp.outq) - 4;
 8005da2:	4c06      	ldr	r4, [pc, #24]	; (8005dbc <logger_direct+0x1c>)
 8005da4:	6920      	ldr	r0, [r4, #16]
 8005da6:	f000 f825 	bl	8005df4 <q_span>
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	3804      	subs	r0, #4
 8005db0:	7058      	strb	r0, [r3, #1]
    mpipe_txschedule(0); //mpipe_send();
 8005db2:	2000      	movs	r0, #0
 8005db4:	f000 fc4c 	bl	8006650 <mpipe_txschedule>
}
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	bf00      	nop
 8005dbc:	20002d9c 	.word	0x20002d9c

08005dc0 <logger_code>:
#endif



#ifndef EXTF_logger_code
void logger_code(ot_int label_len, ot_u8* label, ot_u16 code) {
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	460e      	mov	r6, r1
 8005dc8:	ac04      	add	r4, sp, #16
 8005dca:	f824 2d02 	strh.w	r2, [r4, #-2]!
/// Emergency logging: Used for kernel panics or other such things.
    mpipedrv_kill();
 8005dce:	f001 fd2f 	bl	8007830 <mpipedrv_kill>

    //code = PLATFORM_ENDIAN16(code);
    logger_msg(MSG_raw, label_len, 2, label, (ot_u8*)&code);
 8005dd2:	9400      	str	r4, [sp, #0]
 8005dd4:	4633      	mov	r3, r6
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	4629      	mov	r1, r5
 8005dda:	2004      	movs	r0, #4
 8005ddc:	f7ff ffca 	bl	8005d74 <logger_msg>
}
 8005de0:	b004      	add	sp, #16
 8005de2:	bd70      	pop	{r4, r5, r6, pc}

08005de4 <q_getcursor_val>:
  * ==================
  */

#ifndef EXTF_q_intrinsics
OT_INLINE ot_u8 q_getcursor_val(ot_queue* q, ot_int offset) {
    return q->getcursor[offset];
 8005de4:	6843      	ldr	r3, [r0, #4]
}
 8005de6:	5c58      	ldrb	r0, [r3, r1]
 8005de8:	4770      	bx	lr

08005dea <q_length>:
  * ====================
  */

#ifndef EXTF_q_length
ot_int q_length(ot_queue* q) {
    return (q->putcursor - q->front);
 8005dea:	6883      	ldr	r3, [r0, #8]
 8005dec:	68c0      	ldr	r0, [r0, #12]
 8005dee:	1a18      	subs	r0, r3, r0
}
 8005df0:	b200      	sxth	r0, r0
 8005df2:	4770      	bx	lr

08005df4 <q_span>:
#endif


#ifndef EXTF_q_span
ot_int q_span(ot_queue* q) {
    return (q->putcursor - q->getcursor);
 8005df4:	6883      	ldr	r3, [r0, #8]
 8005df6:	6840      	ldr	r0, [r0, #4]
 8005df8:	1a18      	subs	r0, r3, r0
}
 8005dfa:	b200      	sxth	r0, r0
 8005dfc:	4770      	bx	lr

08005dfe <q_writespace>:
#endif


#ifndef EXTF_q_writespace
ot_int q_writespace(ot_queue* q) {
    return (q->back - q->putcursor);
 8005dfe:	6903      	ldr	r3, [r0, #16]
 8005e00:	6880      	ldr	r0, [r0, #8]
 8005e02:	1a18      	subs	r0, r3, r0
}
 8005e04:	b200      	sxth	r0, r0
 8005e06:	4770      	bx	lr

08005e08 <q_readspace>:
#endif


#ifndef EXTF_q_readspace
ot_int q_readspace(ot_queue* q) {
    return (q->back - q->getcursor);
 8005e08:	6903      	ldr	r3, [r0, #16]
 8005e0a:	6840      	ldr	r0, [r0, #4]
 8005e0c:	1a18      	subs	r0, r3, r0
}
 8005e0e:	b200      	sxth	r0, r0
 8005e10:	4770      	bx	lr

08005e12 <q_blocktime>:
  */

#ifndef EXTF_q_blocktime
OT_INLINE ot_uint q_blocktime(ot_queue* q) {
    return q->options.ushort;
}
 8005e12:	8840      	ldrh	r0, [r0, #2]
 8005e14:	4770      	bx	lr

08005e16 <q_blockwrite>:
#endif

#ifndef EXTF_q_blockwrite
OT_INLINE void q_blockwrite(ot_queue* q, ot_uint blocktime) {
    q->options.ushort = blocktime;
 8005e16:	8041      	strh	r1, [r0, #2]
}
 8005e18:	4770      	bx	lr

08005e1a <q_lock>:
#endif

#ifndef EXTF_q_lock
void q_lock(ot_queue* q) {
 8005e1a:	b510      	push	{r4, lr}
 8005e1c:	4604      	mov	r4, r0
    while (q->options.ushort != 0) {
 8005e1e:	e001      	b.n	8005e24 <q_lock+0xa>
        //    otthread_set_tmask( &(q->tmask), thandle );
        //    otthread_wait();
        //    otthread_clear_tmask( &(q->tmask), thandle );
        //}
        //else 
        {   delay_ti(q->options.ushort);
 8005e20:	f001 fb7c 	bl	800751c <delay_ti>
    while (q->options.ushort != 0) {
 8005e24:	8860      	ldrh	r0, [r4, #2]
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d1fa      	bne.n	8005e20 <q_lock+0x6>
        }
    }
    q->options.ushort = 1;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	8063      	strh	r3, [r4, #2]
}
 8005e2e:	bd10      	pop	{r4, pc}

08005e30 <q_unlock>:
#endif

#ifndef EXTF_q_unlock
void q_unlock(ot_queue* q) {
    // otthread_release_any( &(q->tmask) );
    q->options.ushort = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	8043      	strh	r3, [r0, #2]
}
 8005e34:	4770      	bx	lr

08005e36 <q_empty>:



#ifndef EXTF_q_empty
void q_empty(ot_queue* q) {
    q->options.ushort   = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	8043      	strh	r3, [r0, #2]
    q->back             = q->front + q->alloc;
 8005e3a:	68c3      	ldr	r3, [r0, #12]
 8005e3c:	8802      	ldrh	r2, [r0, #0]
 8005e3e:	441a      	add	r2, r3
 8005e40:	6102      	str	r2, [r0, #16]
    q->putcursor        = q->front;
 8005e42:	6083      	str	r3, [r0, #8]
    q->getcursor        = q->front;
 8005e44:	6043      	str	r3, [r0, #4]
}
 8005e46:	4770      	bx	lr

08005e48 <q_init>:
void q_init(ot_queue* q, void* buffer, ot_u16 alloc) {
 8005e48:	b508      	push	{r3, lr}
    q->alloc    = alloc;
 8005e4a:	8002      	strh	r2, [r0, #0]
    q->front    = buffer;
 8005e4c:	60c1      	str	r1, [r0, #12]
    q->back     = buffer+alloc;
 8005e4e:	4411      	add	r1, r2
 8005e50:	6101      	str	r1, [r0, #16]
    q_empty(q);
 8005e52:	f7ff fff0 	bl	8005e36 <q_empty>
}
 8005e56:	bd08      	pop	{r3, pc}

08005e58 <q_rewind>:
#endif


#ifndef EXTF_q_rewind
void q_rewind(ot_queue* q) {
 8005e58:	b538      	push	{r3, r4, r5, lr}
    ot_int dist = q->getcursor - q->front;
 8005e5a:	6841      	ldr	r1, [r0, #4]
 8005e5c:	68c5      	ldr	r5, [r0, #12]
 8005e5e:	1b4c      	subs	r4, r1, r5
 8005e60:	b224      	sxth	r4, r4
    
    if (dist > 0) {
 8005e62:	2c00      	cmp	r4, #0
 8005e64:	dd08      	ble.n	8005e78 <q_rewind+0x20>
        ot_u8* put      = q->putcursor;
 8005e66:	6882      	ldr	r2, [r0, #8]
        ot_u8* get      = q->getcursor;
        q->putcursor   -= dist;
 8005e68:	1b14      	subs	r4, r2, r4
 8005e6a:	6084      	str	r4, [r0, #8]
        q->getcursor    = q->front;
 8005e6c:	6045      	str	r5, [r0, #4]
        
        memcpy(q->front, get, put-get);
 8005e6e:	1a52      	subs	r2, r2, r1
 8005e70:	b292      	uxth	r2, r2
 8005e72:	4628      	mov	r0, r5
 8005e74:	f001 fbac 	bl	80075d0 <ot_memcpy>
    }
}
 8005e78:	bd38      	pop	{r3, r4, r5, pc}

08005e7a <q_markbyte>:


#ifndef EXTF_q_markbyte
ot_qcur q_markbyte(ot_queue* q, ot_int shift) {
    ot_qcur output;
    output          = q->getcursor;
 8005e7a:	6843      	ldr	r3, [r0, #4]
    q->getcursor   += shift;
 8005e7c:	4419      	add	r1, r3
 8005e7e:	6041      	str	r1, [r0, #4]
    return output;
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	4770      	bx	lr

08005e84 <q_writebyte>:
#endif


#ifndef EXTF_q_writebyte
void q_writebyte(ot_queue* q, ot_u8 byte_in) {
    *q->putcursor++ = byte_in;
 8005e84:	6883      	ldr	r3, [r0, #8]
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	6082      	str	r2, [r0, #8]
 8005e8a:	7019      	strb	r1, [r3, #0]
}
 8005e8c:	4770      	bx	lr

08005e8e <q_writeshort>:
#   if defined(__UNALIGNED_ACCESS__)
        *(ot_u16*)q->putcursor  = PLATFORM_ENDIAN16(short_in);
        q->putcursor           += 2;
#   else
        ot_u8* data     = (ot_u8*)&short_in;
        *q->putcursor++ = data[UPPER];
 8005e8e:	6883      	ldr	r3, [r0, #8]
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	6082      	str	r2, [r0, #8]
 8005e94:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8005e98:	701a      	strb	r2, [r3, #0]
        *q->putcursor++ = data[LOWER];
 8005e9a:	6883      	ldr	r3, [r0, #8]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	6082      	str	r2, [r0, #8]
 8005ea0:	7019      	strb	r1, [r3, #0]
#   endif
}
 8005ea2:	4770      	bx	lr

08005ea4 <q_writeshort_be>:
#   elif defined(__UNALIGNED_ACCESS__)
        *(ot_u16*)q->putcursor = short_in;
        q->putcursor          += 4;
#   else
        ot_u8* data     = (ot_u8*)&short_in;
        *q->putcursor++ = data[0];
 8005ea4:	6883      	ldr	r3, [r0, #8]
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	6082      	str	r2, [r0, #8]
 8005eaa:	7019      	strb	r1, [r3, #0]
        *q->putcursor++ = data[1];
 8005eac:	6883      	ldr	r3, [r0, #8]
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	6082      	str	r2, [r0, #8]
 8005eb2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8005eb6:	7019      	strb	r1, [r3, #0]
#   endif
}
 8005eb8:	4770      	bx	lr

08005eba <q_writelong>:
        *(ot_u32*)q->putcursor = PLATFORM_ENDIAN32(long_in);
        q->putcursor          += 4;
#   else
        ot_u8* data;
        data = (ot_u8*)&long_in;
        *q->putcursor++ = data[_B3];
 8005eba:	6883      	ldr	r3, [r0, #8]
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	6082      	str	r2, [r0, #8]
 8005ec0:	f3c1 6207 	ubfx	r2, r1, #24, #8
 8005ec4:	701a      	strb	r2, [r3, #0]
        *q->putcursor++ = data[_B2];
 8005ec6:	6883      	ldr	r3, [r0, #8]
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	6082      	str	r2, [r0, #8]
 8005ecc:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8005ed0:	701a      	strb	r2, [r3, #0]
        *q->putcursor++ = data[_B1];
 8005ed2:	6883      	ldr	r3, [r0, #8]
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	6082      	str	r2, [r0, #8]
 8005ed8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8005edc:	701a      	strb	r2, [r3, #0]
        *q->putcursor++ = data[_B0];
 8005ede:	6883      	ldr	r3, [r0, #8]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	6082      	str	r2, [r0, #8]
 8005ee4:	7019      	strb	r1, [r3, #0]
#   endif
}
 8005ee6:	4770      	bx	lr

08005ee8 <q_readbyte>:
#endif


#ifndef EXTF_q_readbyte
ot_u8 q_readbyte(ot_queue* q) {
    return *q->getcursor++;
 8005ee8:	6843      	ldr	r3, [r0, #4]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	6042      	str	r2, [r0, #4]
}
 8005eee:	7818      	ldrb	r0, [r3, #0]
 8005ef0:	4770      	bx	lr

08005ef2 <q_readshort>:
#endif



#ifndef EXTF_q_readshort
ot_u16 q_readshort(ot_queue* q) {
 8005ef2:	b410      	push	{r4}
        ot_u16 data     = *(ot_u16*)q->getcursor;
        q->getcursor   += 2;
        return PLATFORM_ENDIAN16(data);
#   else
        ot_uni16 data;
        data.ubyte[UPPER] = *q->getcursor++;
 8005ef4:	6841      	ldr	r1, [r0, #4]
 8005ef6:	1c4b      	adds	r3, r1, #1
 8005ef8:	6043      	str	r3, [r0, #4]
 8005efa:	780c      	ldrb	r4, [r1, #0]
 8005efc:	f04f 0200 	mov.w	r2, #0
 8005f00:	f364 220f 	bfi	r2, r4, #8, #8
        data.ubyte[LOWER] = *q->getcursor++;
 8005f04:	1c8b      	adds	r3, r1, #2
 8005f06:	6043      	str	r3, [r0, #4]
 8005f08:	784b      	ldrb	r3, [r1, #1]
 8005f0a:	f363 0207 	bfi	r2, r3, #0, #8
        return data.ushort;
#   endif
}
 8005f0e:	b290      	uxth	r0, r2
 8005f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <q_readshort_be>:
#endif


#ifndef EXTF_q_readshort_be
ot_u16 q_readshort_be(ot_queue* q) {
 8005f16:	b410      	push	{r4}
        ot_u16 data     = *(ot_u16*)q->getcursor;
        q->getcursor   += 2
        return data;
#   else
        ot_uni16 data;
        data.ubyte[0]   = *q->getcursor++;
 8005f18:	6841      	ldr	r1, [r0, #4]
 8005f1a:	1c4b      	adds	r3, r1, #1
 8005f1c:	6043      	str	r3, [r0, #4]
 8005f1e:	780c      	ldrb	r4, [r1, #0]
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f364 0207 	bfi	r2, r4, #0, #8
        data.ubyte[1]   = *q->getcursor++;
 8005f28:	1c8b      	adds	r3, r1, #2
 8005f2a:	6043      	str	r3, [r0, #4]
 8005f2c:	784b      	ldrb	r3, [r1, #1]
 8005f2e:	f363 220f 	bfi	r2, r3, #8, #8
        return data.ushort;
#   endif
}
 8005f32:	b290      	uxth	r0, r2
 8005f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <q_readlong>:
#endif


#ifndef EXTF_q_readlong
ot_u32 q_readlong(ot_queue* q)  {
 8005f3a:	b410      	push	{r4}
        ot_u32 data     = *(ot_u32*)q->getcursor;
        q->getcursor   += 4;
        return PLATFORM_ENDIAN32(data);
#   else
        ot_uni32 data;
        data.ubyte[_B3]  = *q->getcursor++;
 8005f3c:	6842      	ldr	r2, [r0, #4]
 8005f3e:	1c54      	adds	r4, r2, #1
 8005f40:	6044      	str	r4, [r0, #4]
 8005f42:	7811      	ldrb	r1, [r2, #0]
 8005f44:	2300      	movs	r3, #0
 8005f46:	f361 631f 	bfi	r3, r1, #24, #8
        data.ubyte[_B2]  = *q->getcursor++;
 8005f4a:	1c91      	adds	r1, r2, #2
 8005f4c:	6041      	str	r1, [r0, #4]
 8005f4e:	7852      	ldrb	r2, [r2, #1]
 8005f50:	f362 4317 	bfi	r3, r2, #16, #8
        data.ubyte[_B1]  = *q->getcursor++;
 8005f54:	1ca2      	adds	r2, r4, #2
 8005f56:	6042      	str	r2, [r0, #4]
 8005f58:	7864      	ldrb	r4, [r4, #1]
 8005f5a:	f364 230f 	bfi	r3, r4, #8, #8
        data.ubyte[_B0]  = *q->getcursor++;
 8005f5e:	1c8a      	adds	r2, r1, #2
 8005f60:	6042      	str	r2, [r0, #4]
 8005f62:	784a      	ldrb	r2, [r1, #1]
 8005f64:	f362 0307 	bfi	r3, r2, #0, #8
        return data.ulong;
#   endif
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <q_writestring>:
}
#endif


#ifndef EXTF_q_writestring
ot_int q_writestring(ot_queue* q, ot_u8* string, ot_int length) {
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ot_int limit;
    
    if (length <= 0) {
 8005f72:	1e16      	subs	r6, r2, #0
 8005f74:	dd11      	ble.n	8005f9a <q_writestring+0x2a>
 8005f76:	460f      	mov	r7, r1
 8005f78:	4604      	mov	r4, r0
        return 0;
    }
    
    limit = q_writespace(q);
 8005f7a:	f7ff ff40 	bl	8005dfe <q_writespace>
 8005f7e:	4605      	mov	r5, r0
    if (limit < length) {
 8005f80:	4286      	cmp	r6, r0
 8005f82:	dc00      	bgt.n	8005f86 <q_writestring+0x16>
 8005f84:	4635      	mov	r5, r6
        length = limit;
    } 

    ot_memcpy(q->putcursor, string, length);
 8005f86:	b2aa      	uxth	r2, r5
 8005f88:	4639      	mov	r1, r7
 8005f8a:	68a0      	ldr	r0, [r4, #8]
 8005f8c:	f001 fb20 	bl	80075d0 <ot_memcpy>
    q->putcursor += length;
 8005f90:	68a3      	ldr	r3, [r4, #8]
 8005f92:	442b      	add	r3, r5
 8005f94:	60a3      	str	r3, [r4, #8]
    
    return length;
}
 8005f96:	4628      	mov	r0, r5
 8005f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8005f9a:	2500      	movs	r5, #0
 8005f9c:	e7fb      	b.n	8005f96 <q_writestring+0x26>

08005f9e <q_movedata>:
#endif



#ifndef EXTF_q_movedata
ot_int q_movedata(ot_queue* qdst, ot_queue* qsrc, ot_int length) {
 8005f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ot_int writespace, readspace, limit;
    ot_u8* dst;
    ot_u8* src;

    if (length <= 0) {
 8005fa0:	1e14      	subs	r4, r2, #0
 8005fa2:	dd1c      	ble.n	8005fde <q_movedata+0x40>
 8005fa4:	460e      	mov	r6, r1
 8005fa6:	4607      	mov	r7, r0
        return 0;
    }
    
    writespace  = q_writespace(qdst);
 8005fa8:	f7ff ff29 	bl	8005dfe <q_writespace>
 8005fac:	4605      	mov	r5, r0
    readspace   = q_readspace(qsrc);
 8005fae:	4630      	mov	r0, r6
 8005fb0:	f7ff ff2a 	bl	8005e08 <q_readspace>
    limit       = (writespace < readspace) ? writespace : readspace;
 8005fb4:	4285      	cmp	r5, r0
 8005fb6:	bfa8      	it	ge
 8005fb8:	4605      	movge	r5, r0
 8005fba:	b22a      	sxth	r2, r5
    if (limit < length) {
 8005fbc:	4294      	cmp	r4, r2
 8005fbe:	dd02      	ble.n	8005fc6 <q_movedata+0x28>
        return length - limit;
 8005fc0:	1aa4      	subs	r4, r4, r2
 8005fc2:	b220      	sxth	r0, r4
    qdst->putcursor    += length;
    qsrc->getcursor    += length;
    ot_memcpy(dst, src, length);
    
    return length;
}
 8005fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dst                 = qdst->putcursor;
 8005fc6:	68b8      	ldr	r0, [r7, #8]
    src                 = qsrc->getcursor;
 8005fc8:	6871      	ldr	r1, [r6, #4]
    qdst->putcursor    += length;
 8005fca:	1903      	adds	r3, r0, r4
 8005fcc:	60bb      	str	r3, [r7, #8]
    qsrc->getcursor    += length;
 8005fce:	6873      	ldr	r3, [r6, #4]
 8005fd0:	4423      	add	r3, r4
 8005fd2:	6073      	str	r3, [r6, #4]
    ot_memcpy(dst, src, length);
 8005fd4:	b2a2      	uxth	r2, r4
 8005fd6:	f001 fafb 	bl	80075d0 <ot_memcpy>
    return length;
 8005fda:	4620      	mov	r0, r4
 8005fdc:	e7f2      	b.n	8005fc4 <q_movedata+0x26>
        return 0;
 8005fde:	2000      	movs	r0, #0
 8005fe0:	e7f0      	b.n	8005fc4 <q_movedata+0x26>

08005fe2 <otutils_sig2_null>:


// Null Signals
void otutils_null(void)                     { }
void otutils_sig_null(ot_int a)             { }
void otutils_sig2_null(ot_int a, ot_int b)  { }
 8005fe2:	4770      	bx	lr

08005fe4 <otutils_calc_longtimeout>:

#ifndef EXTF_otutils_calc_longtimeout
ot_ulong otutils_calc_longtimeout(ot_u16 timeout_code) {
	ot_uint 	shift;
	ot_ulong    timeout;
	shift       = (timeout_code >> 8) & 0x001C;
 8005fe4:	0a03      	lsrs	r3, r0, #8
	timeout     = (timeout_code & 0x3FF);
 8005fe6:	f3c0 0009 	ubfx	r0, r0, #0, #10
	timeout    += (shift != 0);
 8005fea:	f013 031c 	ands.w	r3, r3, #28
 8005fee:	bf14      	ite	ne
 8005ff0:	2201      	movne	r2, #1
 8005ff2:	2200      	moveq	r2, #0
 8005ff4:	4410      	add	r0, r2
	timeout    *= (1 << shift);
	return timeout;
}
 8005ff6:	4098      	lsls	r0, r3
 8005ff8:	4770      	bx	lr

08005ffa <otutils_calc_timeout>:

#ifndef EXTF_otutils_calc_timeout
ot_ulong otutils_calc_timeout(ot_u8 timeout_code) {
	ot_uint		shift;
	ot_ulong    timeout;
	shift       = (timeout_code >> 3) & 0x000E;
 8005ffa:	08c3      	lsrs	r3, r0, #3
 8005ffc:	f003 030e 	and.w	r3, r3, #14
 8006000:	b29a      	uxth	r2, r3
	timeout     = (timeout_code & 0x0E);
 8006002:	f000 000e 	and.w	r0, r0, #14
	timeout    += (shift != 0);
 8006006:	2a00      	cmp	r2, #0
 8006008:	bf18      	it	ne
 800600a:	3001      	addne	r0, #1
	timeout    *= (1 << shift);
	return timeout;
}
 800600c:	4098      	lsls	r0, r3
 800600e:	4770      	bx	lr

08006010 <otutils_encode_timeout>:

#ifndef EXTF_otutils_encode_timeout
ot_u8 otutils_encode_timeout(ot_u16 timeout_ticks) {
	ot_uint exp;

	if (timeout_ticks < 0x10) {
 8006010:	280f      	cmp	r0, #15
 8006012:	d902      	bls.n	800601a <otutils_encode_timeout+0xa>
		return (ot_u8)timeout_ticks;
	}

	exp 			= 1;
	timeout_ticks >>= 2;
 8006014:	0880      	lsrs	r0, r0, #2
	exp 			= 1;
 8006016:	2301      	movs	r3, #1

	while (timeout_ticks > 0x10) {
 8006018:	e004      	b.n	8006024 <otutils_encode_timeout+0x14>
		return (ot_u8)timeout_ticks;
 800601a:	b2c0      	uxtb	r0, r0
 800601c:	4770      	bx	lr
		exp += 2;
 800601e:	3302      	adds	r3, #2
 8006020:	b29b      	uxth	r3, r3
		timeout_ticks >>= 4;
 8006022:	0900      	lsrs	r0, r0, #4
	while (timeout_ticks > 0x10) {
 8006024:	2810      	cmp	r0, #16
 8006026:	d8fa      	bhi.n	800601e <otutils_encode_timeout+0xe>
	}
	timeout_ticks--;
 8006028:	3801      	subs	r0, #1

	return (exp << 4) + (ot_u8)timeout_ticks;
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	b2db      	uxtb	r3, r3
 800602e:	fa53 f080 	uxtab	r0, r3, r0
 8006032:	b2c0      	uxtb	r0, r0
}
 8006034:	4770      	bx	lr

08006036 <sub_gfb_new>:
                        GFB_Header_START_USER,
                        GFB_NUM_USER_FILES   );
#else
    return NULL;
#endif
}
 8006036:	2000      	movs	r0, #0
 8006038:	4770      	bx	lr

0800603a <sub_iss_new>:
                        ISS_Header_START_USER,
                        ISS_NUM_USER_CODES   );
#else
    return NULL;
#endif
}
 800603a:	2000      	movs	r0, #0
 800603c:	4770      	bx	lr

0800603e <sub_isf_new>:
                        ISF_Header_START_USER,
                        ISF_NUM_USER_FILES );
#else
    return NULL;
#endif
}
 800603e:	2000      	movs	r0, #0
 8006040:	4770      	bx	lr

08006042 <sub_gfb_delete_check>:
#if ((OT_FEATURE(VLNEW) == ENABLED) && ((GFB_HEAP_BYTES > 0) && (GFB_NUM_USER_FILES > 0)))
    return ( id > GFB_NUM_STOCK_FILES );
#else
    return 0;
#endif
}
 8006042:	2000      	movs	r0, #0
 8006044:	4770      	bx	lr

08006046 <sub_iss_delete_check>:
#if ((OT_FEATURE(VLNEW) == ENABLED) && (ISS_NUM_USER_CODES > 0))
    return ( id >= ISS_ID_extended_service);
#else
    return 0;
#endif
}
 8006046:	2000      	movs	r0, #0
 8006048:	4770      	bx	lr

0800604a <sub_isf_delete_check>:
    return ((id >= (ISF_NUM_M1_FILES+ISF_NUM_M2_FILES)) && \
            (id < (256-ISF_NUM_EXT_FILES)) );
#else
    return 0;
#endif
}
 800604a:	2000      	movs	r0, #0
 800604c:	4770      	bx	lr
	...

08006050 <sub_new_fp>:

static vlFILE* sub_new_fp() {
#if (OT_PARAM(VLFPS) < 8)
    ot_int fd;

    for (fd=0; fd<OT_PARAM(VLFPS); fd++) {
 8006050:	2300      	movs	r3, #0
 8006052:	2b02      	cmp	r3, #2
 8006054:	dc0c      	bgt.n	8006070 <sub_new_fp+0x20>
        if (vlfile[fd].read == NULL)
 8006056:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800605a:	0091      	lsls	r1, r2, #2
 800605c:	4a05      	ldr	r2, [pc, #20]	; (8006074 <sub_new_fp+0x24>)
 800605e:	440a      	add	r2, r1
 8006060:	68d2      	ldr	r2, [r2, #12]
 8006062:	b112      	cbz	r2, 800606a <sub_new_fp+0x1a>
    for (fd=0; fd<OT_PARAM(VLFPS); fd++) {
 8006064:	3301      	adds	r3, #1
 8006066:	b21b      	sxth	r3, r3
 8006068:	e7f3      	b.n	8006052 <sub_new_fp+0x2>
            return &vlfile[fd];
 800606a:	4802      	ldr	r0, [pc, #8]	; (8006074 <sub_new_fp+0x24>)
 800606c:	4408      	add	r0, r1
 800606e:	4770      	bx	lr
    }
#else
        ///@todo do a binary search
#endif

    return NULL;
 8006070:	2000      	movs	r0, #0
}
 8006072:	4770      	bx	lr
 8006074:	2000117c 	.word	0x2000117c

08006078 <sub_write_header>:
        header += 2;
    }
}


static void sub_write_header(vaddr header, ot_u16* data, ot_uint length ) {
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	4607      	mov	r7, r0
 800607c:	460d      	mov	r5, r1
 800607e:	4616      	mov	r6, r2
    ot_int i;

    for (i=0; i<length; i+=2, data++) {
 8006080:	2300      	movs	r3, #0
 8006082:	e008      	b.n	8006096 <sub_write_header+0x1e>
        vworm_write( (header+i), *data);
 8006084:	b29c      	uxth	r4, r3
 8006086:	19e0      	adds	r0, r4, r7
 8006088:	f835 1b02 	ldrh.w	r1, [r5], #2
 800608c:	b280      	uxth	r0, r0
 800608e:	f001 fe2f 	bl	8007cf0 <vworm_write>
    for (i=0; i<length; i+=2, data++) {
 8006092:	1ca3      	adds	r3, r4, #2
 8006094:	b21b      	sxth	r3, r3
 8006096:	42b3      	cmp	r3, r6
 8006098:	dbf4      	blt.n	8006084 <sub_write_header+0xc>
    }
}
 800609a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800609c <sub_header_search>:
static vaddr sub_header_search(vaddr header, ot_u8 search_id, ot_int num_headers) {
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	4604      	mov	r4, r0
 80060a0:	460f      	mov	r7, r1
 80060a2:	4616      	mov	r6, r2
    for (; num_headers > 0; num_headers--) {
 80060a4:	e003      	b.n	80060ae <sub_header_search+0x12>
        header += OCTETS_IN_vl_header_t;
 80060a6:	3410      	adds	r4, #16
 80060a8:	b2a4      	uxth	r4, r4
    for (; num_headers > 0; num_headers--) {
 80060aa:	3e01      	subs	r6, #1
 80060ac:	b236      	sxth	r6, r6
 80060ae:	2e00      	cmp	r6, #0
 80060b0:	dd13      	ble.n	80060da <sub_header_search+0x3e>
        ot_u16 base     = vworm_read(header + 6);
 80060b2:	1da0      	adds	r0, r4, #6
 80060b4:	b280      	uxth	r0, r0
 80060b6:	f001 fe13 	bl	8007ce0 <vworm_read>
 80060ba:	4605      	mov	r5, r0
        idmod.ushort    = vworm_read(header + 4);
 80060bc:	1d20      	adds	r0, r4, #4
 80060be:	b280      	uxth	r0, r0
 80060c0:	f001 fe0e 	bl	8007ce0 <vworm_read>
        if ( base != 0 && base != 0xFFFF) {
 80060c4:	3d01      	subs	r5, #1
 80060c6:	b2ad      	uxth	r5, r5
 80060c8:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80060cc:	429d      	cmp	r5, r3
 80060ce:	d8ea      	bhi.n	80060a6 <sub_header_search+0xa>
            if (idmod.ubyte[0] == search_id)
 80060d0:	b2c0      	uxtb	r0, r0
 80060d2:	4287      	cmp	r7, r0
 80060d4:	d1e7      	bne.n	80060a6 <sub_header_search+0xa>
                return header;
 80060d6:	4620      	mov	r0, r4
 80060d8:	e001      	b.n	80060de <sub_header_search+0x42>
    return NULL_vaddr;
 80060da:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80060de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080060e0 <sub_isf_search>:
static vaddr sub_isf_search(ot_u8 id) {
 80060e0:	b508      	push	{r3, lr}
    if ( (id >= ISF_NUM_STOCK_FILES) && (id < (256-ISF_NUM_EXT_FILES)) ) {
 80060e2:	f1a0 0319 	sub.w	r3, r0, #25
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2be5      	cmp	r3, #229	; 0xe5
 80060ea:	d905      	bls.n	80060f8 <sub_isf_search+0x18>
    if (id > (255-ISF_NUM_EXT_FILES)) {
 80060ec:	28ff      	cmp	r0, #255	; 0xff
 80060ee:	d00a      	beq.n	8006106 <sub_isf_search+0x26>
    return (OCTETS_IN_vl_header_t * id) + ISF_Header_START;
 80060f0:	300e      	adds	r0, #14
 80060f2:	0100      	lsls	r0, r0, #4
 80060f4:	b280      	uxth	r0, r0
}
 80060f6:	bd08      	pop	{r3, pc}
        return sub_header_search(ISF_Header_START_USER, id, ISF_NUM_USER_FILES);
 80060f8:	2200      	movs	r2, #0
 80060fa:	4601      	mov	r1, r0
 80060fc:	f44f 701c 	mov.w	r0, #624	; 0x270
 8006100:	f7ff ffcc 	bl	800609c <sub_header_search>
 8006104:	e7f7      	b.n	80060f6 <sub_isf_search+0x16>
        id = (ot_u8)((ot_int)ISF_NUM_STOCK_FILES + (255-id));
 8006106:	f1c0 0018 	rsb	r0, r0, #24
 800610a:	b2c0      	uxtb	r0, r0
 800610c:	e7f0      	b.n	80060f0 <sub_isf_search+0x10>

0800610e <sub_iss_search>:
static vaddr sub_iss_search(ot_u8 id) {
 800610e:	b508      	push	{r3, lr}
    return sub_header_search( ISS_Header_START, id, ISS_NUM_FILES );
 8006110:	220c      	movs	r2, #12
 8006112:	4601      	mov	r1, r0
 8006114:	2020      	movs	r0, #32
 8006116:	f7ff ffc1 	bl	800609c <sub_header_search>
}
 800611a:	bd08      	pop	{r3, pc}

0800611c <sub_gfb_search>:
static vaddr sub_gfb_search(ot_u8 id) {
 800611c:	b508      	push	{r3, lr}
    return sub_header_search( GFB_Header_START, id, GFB_NUM_USER_FILES );
 800611e:	2200      	movs	r2, #0
 8006120:	4601      	mov	r1, r0
 8006122:	2020      	movs	r0, #32
 8006124:	f7ff ffba 	bl	800609c <sub_header_search>
}
 8006128:	bd08      	pop	{r3, pc}
	...

0800612c <sub_action>:
static ot_u8 sub_action(vlFILE* fp) {
 800612c:	b510      	push	{r4, lr}
 800612e:	4604      	mov	r4, r0
    select = vworm_read(fp->header+10) >> 8;        ///@todo this is little endian only
 8006130:	8800      	ldrh	r0, [r0, #0]
 8006132:	300a      	adds	r0, #10
 8006134:	b280      	uxth	r0, r0
 8006136:	f001 fdd3 	bl	8007ce0 <vworm_read>
 800613a:	f3c0 200f 	ubfx	r0, r0, #8, #16
    if (select < OT_PARAM(VLACTIONS)) {
 800613e:	2807      	cmp	r0, #7
 8006140:	d807      	bhi.n	8006152 <sub_action+0x26>
        retval = vlaction[select](fp);
 8006142:	4b05      	ldr	r3, [pc, #20]	; (8006158 <sub_action+0x2c>)
 8006144:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006148:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800614a:	4620      	mov	r0, r4
 800614c:	4798      	blx	r3
 800614e:	b2c0      	uxtb	r0, r0
}
 8006150:	bd10      	pop	{r4, pc}
    ot_u8 retval = 0;
 8006152:	2000      	movs	r0, #0
 8006154:	e7fc      	b.n	8006150 <sub_action+0x24>
 8006156:	bf00      	nop
 8006158:	2000117c 	.word	0x2000117c

0800615c <sub_delete_file>:
static void sub_delete_file(vaddr del_header) {
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	4604      	mov	r4, r0
    header_alloc    = (ot_u16)vworm_read(del_header+2);
 8006160:	1c85      	adds	r5, r0, #2
 8006162:	b2ad      	uxth	r5, r5
 8006164:	4628      	mov	r0, r5
 8006166:	f001 fdbb 	bl	8007ce0 <vworm_read>
 800616a:	4606      	mov	r6, r0
    header_base     = (vaddr)vworm_read(del_header+6);
 800616c:	3406      	adds	r4, #6
 800616e:	b2a4      	uxth	r4, r4
 8006170:	4620      	mov	r0, r4
 8006172:	f001 fdb5 	bl	8007ce0 <vworm_read>
    vworm_wipeblock(header_base, header_alloc);
 8006176:	4631      	mov	r1, r6
 8006178:	f001 fdc8 	bl	8007d0c <vworm_wipeblock>
    vworm_mark((del_header+2), 0);                //alloc
 800617c:	2100      	movs	r1, #0
 800617e:	4628      	mov	r0, r5
 8006180:	f001 fdc0 	bl	8007d04 <vworm_mark>
    vworm_mark((del_header+6), NULL_vaddr);       //base
 8006184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006188:	4620      	mov	r0, r4
 800618a:	f001 fdbb 	bl	8007d04 <vworm_mark>
}
 800618e:	bd70      	pop	{r4, r5, r6, pc}

08006190 <vl_new>:
OT_WEAK ot_u8 vl_new(vlFILE** fp_new, vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, ot_uint max_length, const id_tmpl* user_id) {
 8006190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006194:	4606      	mov	r6, r0
 8006196:	460c      	mov	r4, r1
 8006198:	4615      	mov	r5, r2
 800619a:	4698      	mov	r8, r3
 800619c:	9a07      	ldr	r2, [sp, #28]
    if (user_id != NULL) {
 800619e:	b122      	cbz	r2, 80061aa <vl_new+0x1a>
        if ( auth_check(VL_ACCESS_USER, VL_ACCESS_W, user_id) == 0 ) {
 80061a0:	2112      	movs	r1, #18
 80061a2:	2038      	movs	r0, #56	; 0x38
 80061a4:	f7ff fd33 	bl	8005c0e <auth_check>
 80061a8:	b340      	cbz	r0, 80061fc <vl_new+0x6c>
    block_id--;
 80061aa:	3c01      	subs	r4, #1
 80061ac:	b2e4      	uxtb	r4, r4
    switch (block_id) {
 80061ae:	2c01      	cmp	r4, #1
 80061b0:	d021      	beq.n	80061f6 <vl_new+0x66>
 80061b2:	b11c      	cbz	r4, 80061bc <vl_new+0x2c>
 80061b4:	2c02      	cmp	r4, #2
 80061b6:	d01b      	beq.n	80061f0 <vl_new+0x60>
       default: return 0xFF;
 80061b8:	20ff      	movs	r0, #255	; 0xff
 80061ba:	e017      	b.n	80061ec <vl_new+0x5c>
                new_fn      = &sub_gfb_new;
 80061bc:	4f12      	ldr	r7, [pc, #72]	; (8006208 <vl_new+0x78>)
        case 0: search_fn   = &sub_gfb_search;
 80061be:	4b13      	ldr	r3, [pc, #76]	; (800620c <vl_new+0x7c>)
    header = search_fn(data_id);
 80061c0:	4628      	mov	r0, r5
 80061c2:	4798      	blx	r3
    if (header != NULL_vaddr) {
 80061c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061c8:	4298      	cmp	r0, r3
 80061ca:	d119      	bne.n	8006200 <vl_new+0x70>
    *fp_new = new_fn(data_id, mod, max_length);
 80061cc:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80061d0:	4641      	mov	r1, r8
 80061d2:	4628      	mov	r0, r5
 80061d4:	47b8      	blx	r7
 80061d6:	6030      	str	r0, [r6, #0]
    if (*fp_new == NULL) {
 80061d8:	b1a0      	cbz	r0, 8006204 <vl_new+0x74>
        block[block_id].files  += 1;
 80061da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80061de:	0062      	lsls	r2, r4, #1
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <vl_new+0x80>)
 80061e2:	4413      	add	r3, r2
 80061e4:	889a      	ldrh	r2, [r3, #4]
 80061e6:	3201      	adds	r2, #1
 80061e8:	809a      	strh	r2, [r3, #4]
    return 0;
 80061ea:	2000      	movs	r0, #0
}
 80061ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                new_fn      = &sub_isf_new;
 80061f0:	4f08      	ldr	r7, [pc, #32]	; (8006214 <vl_new+0x84>)
        case 2: search_fn   = &sub_isf_search;
 80061f2:	4b09      	ldr	r3, [pc, #36]	; (8006218 <vl_new+0x88>)
                break;
 80061f4:	e7e4      	b.n	80061c0 <vl_new+0x30>
                new_fn      = &sub_iss_new;
 80061f6:	4f09      	ldr	r7, [pc, #36]	; (800621c <vl_new+0x8c>)
        case 1: search_fn   = &sub_iss_search;
 80061f8:	4b09      	ldr	r3, [pc, #36]	; (8006220 <vl_new+0x90>)
 80061fa:	e7e1      	b.n	80061c0 <vl_new+0x30>
            return 0x04;
 80061fc:	2004      	movs	r0, #4
 80061fe:	e7f5      	b.n	80061ec <vl_new+0x5c>
        return 0x02;
 8006200:	2002      	movs	r0, #2
 8006202:	e7f3      	b.n	80061ec <vl_new+0x5c>
        return 0x06;
 8006204:	2006      	movs	r0, #6
 8006206:	e7f1      	b.n	80061ec <vl_new+0x5c>
 8006208:	08006037 	.word	0x08006037
 800620c:	0800611d 	.word	0x0800611d
 8006210:	200011de 	.word	0x200011de
 8006214:	0800603f 	.word	0x0800603f
 8006218:	080060e1 	.word	0x080060e1
 800621c:	0800603b 	.word	0x0800603b
 8006220:	0800610f 	.word	0x0800610f

08006224 <vl_delete>:
OT_WEAK ot_u8 vl_delete(vlBLOCK block_id, ot_u8 data_id, const id_tmpl* user_id) {
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    block_id--;
 8006226:	3801      	subs	r0, #1
 8006228:	b2c4      	uxtb	r4, r0
    switch (block_id) {
 800622a:	2c01      	cmp	r4, #1
 800622c:	d02e      	beq.n	800628c <vl_delete+0x68>
 800622e:	b11c      	cbz	r4, 8006238 <vl_delete+0x14>
 8006230:	2c02      	cmp	r4, #2
 8006232:	d028      	beq.n	8006286 <vl_delete+0x62>
       default: return 255;
 8006234:	20ff      	movs	r0, #255	; 0xff
 8006236:	e025      	b.n	8006284 <vl_delete+0x60>
        case 0: check_fn    = &sub_gfb_delete_check;
 8006238:	4b19      	ldr	r3, [pc, #100]	; (80062a0 <vl_delete+0x7c>)
                search_fn   = &sub_gfb_search;
 800623a:	4f1a      	ldr	r7, [pc, #104]	; (80062a4 <vl_delete+0x80>)
 800623c:	4616      	mov	r6, r2
 800623e:	460d      	mov	r5, r1
    if (check_fn(data_id) != 0) {
 8006240:	4608      	mov	r0, r1
 8006242:	4798      	blx	r3
 8006244:	b328      	cbz	r0, 8006292 <vl_delete+0x6e>
        header = search_fn(data_id);
 8006246:	4628      	mov	r0, r5
 8006248:	47b8      	blx	r7
 800624a:	4605      	mov	r5, r0
    if (header == NULL_vaddr) {
 800624c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006250:	4298      	cmp	r0, r3
 8006252:	d020      	beq.n	8006296 <vl_delete+0x72>
    if (user_id != NULL) {
 8006254:	b156      	cbz	r6, 800626c <vl_delete+0x48>
        filemod.ushort = vworm_read(header + 4);
 8006256:	3004      	adds	r0, #4
 8006258:	b280      	uxth	r0, r0
 800625a:	f001 fd41 	bl	8007ce0 <vworm_read>
        if ( auth_check(filemod.ubyte[1], VL_ACCESS_RW, user_id) == 0 ) {
 800625e:	4632      	mov	r2, r6
 8006260:	2136      	movs	r1, #54	; 0x36
 8006262:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8006266:	f7ff fcd2 	bl	8005c0e <auth_check>
 800626a:	b1b0      	cbz	r0, 800629a <vl_delete+0x76>
    sub_delete_file(header);
 800626c:	4628      	mov	r0, r5
 800626e:	f7ff ff75 	bl	800615c <sub_delete_file>
        block[block_id].files  -= 1;
 8006272:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006276:	0062      	lsls	r2, r4, #1
 8006278:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <vl_delete+0x84>)
 800627a:	4413      	add	r3, r2
 800627c:	889a      	ldrh	r2, [r3, #4]
 800627e:	3a01      	subs	r2, #1
 8006280:	809a      	strh	r2, [r3, #4]
    return 0;
 8006282:	2000      	movs	r0, #0
}
 8006284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 2: check_fn    = &sub_isf_delete_check;
 8006286:	4b09      	ldr	r3, [pc, #36]	; (80062ac <vl_delete+0x88>)
                search_fn   = &sub_isf_search;
 8006288:	4f09      	ldr	r7, [pc, #36]	; (80062b0 <vl_delete+0x8c>)
                break;
 800628a:	e7d7      	b.n	800623c <vl_delete+0x18>
        case 1: check_fn    = &sub_iss_delete_check;
 800628c:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <vl_delete+0x90>)
                search_fn   = &sub_iss_search;
 800628e:	4f0a      	ldr	r7, [pc, #40]	; (80062b8 <vl_delete+0x94>)
 8006290:	e7d4      	b.n	800623c <vl_delete+0x18>
        return 0x01;
 8006292:	2001      	movs	r0, #1
 8006294:	e7f6      	b.n	8006284 <vl_delete+0x60>
 8006296:	2001      	movs	r0, #1
 8006298:	e7f4      	b.n	8006284 <vl_delete+0x60>
            return 0x04;
 800629a:	2004      	movs	r0, #4
 800629c:	e7f2      	b.n	8006284 <vl_delete+0x60>
 800629e:	bf00      	nop
 80062a0:	08006043 	.word	0x08006043
 80062a4:	0800611d 	.word	0x0800611d
 80062a8:	200011de 	.word	0x200011de
 80062ac:	0800604b 	.word	0x0800604b
 80062b0:	080060e1 	.word	0x080060e1
 80062b4:	08006047 	.word	0x08006047
 80062b8:	0800610f 	.word	0x0800610f

080062bc <vl_getheader_vaddr>:
OT_WEAK ot_u8 vl_getheader_vaddr(vaddr* header, vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4604      	mov	r4, r0
 80062c0:	461d      	mov	r5, r3
    switch (block_id) {
 80062c2:	2902      	cmp	r1, #2
 80062c4:	d01d      	beq.n	8006302 <vl_getheader_vaddr+0x46>
 80062c6:	2903      	cmp	r1, #3
 80062c8:	d020      	beq.n	800630c <vl_getheader_vaddr+0x50>
 80062ca:	2901      	cmp	r1, #1
 80062cc:	d001      	beq.n	80062d2 <vl_getheader_vaddr+0x16>
        default:                return 255;
 80062ce:	20ff      	movs	r0, #255	; 0xff
}
 80062d0:	bd38      	pop	{r3, r4, r5, pc}
        case VL_GFB_BLOCKID:    *header = sub_gfb_search(data_id);      break;
 80062d2:	4610      	mov	r0, r2
 80062d4:	f7ff ff22 	bl	800611c <sub_gfb_search>
 80062d8:	8020      	strh	r0, [r4, #0]
    if (*header == NULL_vaddr) {
 80062da:	8820      	ldrh	r0, [r4, #0]
 80062dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062e0:	4298      	cmp	r0, r3
 80062e2:	d01a      	beq.n	800631a <vl_getheader_vaddr+0x5e>
    if (user_id != NULL) {
 80062e4:	9b04      	ldr	r3, [sp, #16]
 80062e6:	b1d3      	cbz	r3, 800631e <vl_getheader_vaddr+0x62>
        filemod.ushort = vworm_read(*header + 4);
 80062e8:	3004      	adds	r0, #4
 80062ea:	b280      	uxth	r0, r0
 80062ec:	f001 fcf8 	bl	8007ce0 <vworm_read>
        if ( auth_check(filemod.ubyte[1], mod, user_id) == 0 ) {
 80062f0:	9a04      	ldr	r2, [sp, #16]
 80062f2:	4629      	mov	r1, r5
 80062f4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80062f8:	f7ff fc89 	bl	8005c0e <auth_check>
 80062fc:	b158      	cbz	r0, 8006316 <vl_getheader_vaddr+0x5a>
    return 0;
 80062fe:	2000      	movs	r0, #0
 8006300:	e7e6      	b.n	80062d0 <vl_getheader_vaddr+0x14>
        case VL_ISS_BLOCKID:    *header = sub_iss_search(data_id);     break;
 8006302:	4610      	mov	r0, r2
 8006304:	f7ff ff03 	bl	800610e <sub_iss_search>
 8006308:	8020      	strh	r0, [r4, #0]
 800630a:	e7e6      	b.n	80062da <vl_getheader_vaddr+0x1e>
        case VL_ISF_BLOCKID:    *header = sub_isf_search(data_id);      break;
 800630c:	4610      	mov	r0, r2
 800630e:	f7ff fee7 	bl	80060e0 <sub_isf_search>
 8006312:	8020      	strh	r0, [r4, #0]
 8006314:	e7e1      	b.n	80062da <vl_getheader_vaddr+0x1e>
            return 0x04;
 8006316:	2004      	movs	r0, #4
 8006318:	e7da      	b.n	80062d0 <vl_getheader_vaddr+0x14>
        return 0x01;
 800631a:	2001      	movs	r0, #1
 800631c:	e7d8      	b.n	80062d0 <vl_getheader_vaddr+0x14>
    return 0;
 800631e:	2000      	movs	r0, #0
 8006320:	e7d6      	b.n	80062d0 <vl_getheader_vaddr+0x14>
	...

08006324 <vl_open_file>:
OT_WEAK vlFILE* vl_open_file(vaddr header) {
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4605      	mov	r5, r0
    fp = sub_new_fp();
 8006328:	f7ff fe92 	bl	8006050 <sub_new_fp>
    if (fp != NULL) {
 800632c:	4604      	mov	r4, r0
 800632e:	b1f8      	cbz	r0, 8006370 <vl_open_file+0x4c>
        fp->header  = header;
 8006330:	8005      	strh	r5, [r0, #0]
        fp->alloc   = vworm_read(header + 2);               //alloc
 8006332:	1ca8      	adds	r0, r5, #2
 8006334:	b280      	uxth	r0, r0
 8006336:	f001 fcd3 	bl	8007ce0 <vworm_read>
 800633a:	80a0      	strh	r0, [r4, #4]
        fp->idmod   = vworm_read(header + 4);
 800633c:	1d28      	adds	r0, r5, #4
 800633e:	b280      	uxth	r0, r0
 8006340:	f001 fcce 	bl	8007ce0 <vworm_read>
 8006344:	80e0      	strh	r0, [r4, #6]
        fp->start   = vworm_read(header + 8);               //mirror base addr
 8006346:	f105 0008 	add.w	r0, r5, #8
 800634a:	b280      	uxth	r0, r0
 800634c:	f001 fcc8 	bl	8007ce0 <vworm_read>
 8006350:	8060      	strh	r0, [r4, #2]
        fp->flags   = VL_FLAG_OPENED;
 8006352:	2301      	movs	r3, #1
 8006354:	8163      	strh	r3, [r4, #10]
        if (fp->start != NULL_vaddr) {
 8006356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800635a:	4298      	cmp	r0, r3
 800635c:	d00a      	beq.n	8006374 <vl_open_file+0x50>
            fp->start  += 2;
 800635e:	1c83      	adds	r3, r0, #2
 8006360:	8063      	strh	r3, [r4, #2]
            fp->write   = &vsram_mark;
 8006362:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <vl_open_file+0x6c>)
 8006364:	6123      	str	r3, [r4, #16]
            fp->read    = &vsram_read;
 8006366:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <vl_open_file+0x70>)
 8006368:	60e3      	str	r3, [r4, #12]
            fp->length  = vsram_read(mlen);
 800636a:	f001 fcd1 	bl	8007d10 <vsram_read>
 800636e:	8120      	strh	r0, [r4, #8]
}
 8006370:	4620      	mov	r0, r4
 8006372:	bd38      	pop	{r3, r4, r5, pc}
            fp->write   = &vworm_write;
 8006374:	4b08      	ldr	r3, [pc, #32]	; (8006398 <vl_open_file+0x74>)
 8006376:	6123      	str	r3, [r4, #16]
            fp->read    = &vworm_read;
 8006378:	4b08      	ldr	r3, [pc, #32]	; (800639c <vl_open_file+0x78>)
 800637a:	60e3      	str	r3, [r4, #12]
            fp->length  = vworm_read(header + 0);           //length
 800637c:	4628      	mov	r0, r5
 800637e:	f001 fcaf 	bl	8007ce0 <vworm_read>
 8006382:	8120      	strh	r0, [r4, #8]
            fp->start   = vworm_read(header + 6);           //vworm base addr
 8006384:	1da8      	adds	r0, r5, #6
 8006386:	b280      	uxth	r0, r0
 8006388:	f001 fcaa 	bl	8007ce0 <vworm_read>
 800638c:	8060      	strh	r0, [r4, #2]
    return fp;
 800638e:	e7ef      	b.n	8006370 <vl_open_file+0x4c>
 8006390:	08007d19 	.word	0x08007d19
 8006394:	08007d11 	.word	0x08007d11
 8006398:	08007cf1 	.word	0x08007cf1
 800639c:	08007ce1 	.word	0x08007ce1

080063a0 <vl_open>:
OT_WEAK vlFILE* vl_open(vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 80063a0:	b530      	push	{r4, r5, lr}
 80063a2:	b085      	sub	sp, #20
    vaddr header = NULL_vaddr;
 80063a4:	ac04      	add	r4, sp, #16
 80063a6:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80063aa:	f824 5d02 	strh.w	r5, [r4, #-2]!
    if (vl_getheader_vaddr(&header, block_id, data_id, mod, user_id) == 0) {
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	4613      	mov	r3, r2
 80063b2:	460a      	mov	r2, r1
 80063b4:	4601      	mov	r1, r0
 80063b6:	4620      	mov	r0, r4
 80063b8:	f7ff ff80 	bl	80062bc <vl_getheader_vaddr>
 80063bc:	b928      	cbnz	r0, 80063ca <vl_open+0x2a>
        return vl_open_file(header);
 80063be:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80063c2:	f7ff ffaf 	bl	8006324 <vl_open_file>
}
 80063c6:	b005      	add	sp, #20
 80063c8:	bd30      	pop	{r4, r5, pc}
    return NULL;
 80063ca:	2000      	movs	r0, #0
 80063cc:	e7fb      	b.n	80063c6 <vl_open+0x26>

080063ce <vl_chmod>:
OT_WEAK ot_u8 vl_chmod(vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 80063ce:	b570      	push	{r4, r5, r6, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	460d      	mov	r5, r1
 80063d4:	4616      	mov	r6, r2
    vaddr header = NULL_vaddr;
 80063d6:	ac04      	add	r4, sp, #16
 80063d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063dc:	f824 2d02 	strh.w	r2, [r4, #-2]!
    output = vl_getheader_vaddr(&header, block_id, data_id, VL_ACCESS_RW, user_id);
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	2336      	movs	r3, #54	; 0x36
 80063e4:	460a      	mov	r2, r1
 80063e6:	4601      	mov	r1, r0
 80063e8:	4620      	mov	r0, r4
 80063ea:	f7ff ff67 	bl	80062bc <vl_getheader_vaddr>
    if (output == 0) {
 80063ee:	4604      	mov	r4, r0
 80063f0:	b110      	cbz	r0, 80063f8 <vl_chmod+0x2a>
}
 80063f2:	4620      	mov	r0, r4
 80063f4:	b004      	add	sp, #16
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
        idmod.ubyte[0]  = data_id;
 80063f8:	f88d 500c 	strb.w	r5, [sp, #12]
        idmod.ubyte[1]  = mod;
 80063fc:	f88d 600d 	strb.w	r6, [sp, #13]
        sub_write_header((header+4), &idmod.ushort, 2);
 8006400:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006404:	3004      	adds	r0, #4
 8006406:	2202      	movs	r2, #2
 8006408:	a903      	add	r1, sp, #12
 800640a:	b280      	uxth	r0, r0
 800640c:	f7ff fe34 	bl	8006078 <sub_write_header>
 8006410:	e7ef      	b.n	80063f2 <vl_chmod+0x24>

08006412 <vl_read>:
OT_WEAK ot_u16 vl_read( vlFILE* fp, ot_uint offset ) {
 8006412:	b508      	push	{r3, lr}
    return fp->read( (ot_uint)(offset+fp->start) );
 8006414:	68c3      	ldr	r3, [r0, #12]
 8006416:	8840      	ldrh	r0, [r0, #2]
 8006418:	4408      	add	r0, r1
 800641a:	b280      	uxth	r0, r0
 800641c:	4798      	blx	r3
}
 800641e:	bd08      	pop	{r3, pc}

08006420 <vl_write>:
    if (offset >= fp->alloc) {
 8006420:	8883      	ldrh	r3, [r0, #4]
 8006422:	428b      	cmp	r3, r1
 8006424:	d915      	bls.n	8006452 <vl_write+0x32>
OT_WEAK ot_u8 vl_write( vlFILE* fp, ot_uint offset, ot_u16 data ) {
 8006426:	b510      	push	{r4, lr}
    if (offset >= fp->length) {
 8006428:	8903      	ldrh	r3, [r0, #8]
 800642a:	428b      	cmp	r3, r1
 800642c:	d805      	bhi.n	800643a <vl_write+0x1a>
        fp->length  = offset+2;
 800642e:	1c8b      	adds	r3, r1, #2
 8006430:	8103      	strh	r3, [r0, #8]
        fp->flags  |= VL_FLAG_RESIZED;
 8006432:	8943      	ldrh	r3, [r0, #10]
 8006434:	f043 0304 	orr.w	r3, r3, #4
 8006438:	8143      	strh	r3, [r0, #10]
 800643a:	460b      	mov	r3, r1
    fp->flags |= VL_FLAG_MODDED;
 800643c:	8941      	ldrh	r1, [r0, #10]
 800643e:	f041 0102 	orr.w	r1, r1, #2
 8006442:	8141      	strh	r1, [r0, #10]
    return fp->write( (offset+fp->start), data);
 8006444:	6904      	ldr	r4, [r0, #16]
 8006446:	8840      	ldrh	r0, [r0, #2]
 8006448:	4418      	add	r0, r3
 800644a:	4611      	mov	r1, r2
 800644c:	b280      	uxth	r0, r0
 800644e:	47a0      	blx	r4
}
 8006450:	bd10      	pop	{r4, pc}
        return 255;
 8006452:	20ff      	movs	r0, #255	; 0xff
}
 8006454:	4770      	bx	lr

08006456 <vl_load>:
OT_WEAK ot_uint vl_load( vlFILE* fp, ot_uint length, ot_u8* data ) {
 8006456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	4680      	mov	r8, r0
 800645e:	4616      	mov	r6, r2
    if (length > fp->length) {
 8006460:	8907      	ldrh	r7, [r0, #8]
 8006462:	428f      	cmp	r7, r1
 8006464:	d300      	bcc.n	8006468 <vl_load+0x12>
 8006466:	460f      	mov	r7, r1
    cursor      = fp->start;        // guaranteed to be 16 bit aligned
 8006468:	f8b8 4002 	ldrh.w	r4, [r8, #2]
    length      = cursor+length;
 800646c:	4427      	add	r7, r4
 800646e:	b2bf      	uxth	r7, r7
    for (; cursor<length; cursor++) {
 8006470:	e007      	b.n	8006482 <vl_load+0x2c>
        *data++ = scratch.ubyte[align];
 8006472:	ab02      	add	r3, sp, #8
 8006474:	441d      	add	r5, r3
 8006476:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800647a:	7033      	strb	r3, [r6, #0]
    for (; cursor<length; cursor++) {
 800647c:	3401      	adds	r4, #1
 800647e:	b2a4      	uxth	r4, r4
        *data++ = scratch.ubyte[align];
 8006480:	3601      	adds	r6, #1
    for (; cursor<length; cursor++) {
 8006482:	42bc      	cmp	r4, r7
 8006484:	d209      	bcs.n	800649a <vl_load+0x44>
        if (align == 0) {
 8006486:	f014 0501 	ands.w	r5, r4, #1
 800648a:	d1f2      	bne.n	8006472 <vl_load+0x1c>
            scratch.ushort = fp->read(cursor);
 800648c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006490:	4620      	mov	r0, r4
 8006492:	4798      	blx	r3
 8006494:	f8ad 0004 	strh.w	r0, [sp, #4]
 8006498:	e7eb      	b.n	8006472 <vl_load+0x1c>
    return (length - fp->start);
 800649a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800649e:	1a38      	subs	r0, r7, r0
}
 80064a0:	b280      	uxth	r0, r0
 80064a2:	b002      	add	sp, #8
 80064a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080064a8 <vl_store>:
OT_WEAK ot_u8 vl_store( vlFILE* fp, ot_uint length, const ot_u8* data ) {
 80064a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ac:	4681      	mov	r9, r0
    if (length > fp->alloc) {
 80064ae:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 80064b2:	4588      	cmp	r8, r1
 80064b4:	d300      	bcc.n	80064b8 <vl_store+0x10>
 80064b6:	4688      	mov	r8, r1
    fp->flags  |= (length != fp->length) ? (VL_FLAG_RESIZED|VL_FLAG_MODDED) : VL_FLAG_MODDED;
 80064b8:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 80064bc:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 80064c0:	4541      	cmp	r1, r8
 80064c2:	d00c      	beq.n	80064de <vl_store+0x36>
 80064c4:	2106      	movs	r1, #6
 80064c6:	430b      	orrs	r3, r1
 80064c8:	f8a9 300a 	strh.w	r3, [r9, #10]
    fp->length  = length;
 80064cc:	f8a9 8008 	strh.w	r8, [r9, #8]
    cursor      = fp->start;
 80064d0:	f8b9 4002 	ldrh.w	r4, [r9, #2]
    length      = cursor+length;
 80064d4:	44a0      	add	r8, r4
 80064d6:	fa1f f888 	uxth.w	r8, r8
    for (test=0; cursor<length; cursor+=2) {
 80064da:	2500      	movs	r5, #0
 80064dc:	e013      	b.n	8006506 <vl_store+0x5e>
    fp->flags  |= (length != fp->length) ? (VL_FLAG_RESIZED|VL_FLAG_MODDED) : VL_FLAG_MODDED;
 80064de:	2102      	movs	r1, #2
 80064e0:	e7f1      	b.n	80064c6 <vl_store+0x1e>
        scratch.ubyte[0]    = *data++;
 80064e2:	4616      	mov	r6, r2
 80064e4:	f816 3b02 	ldrb.w	r3, [r6], #2
 80064e8:	f363 0707 	bfi	r7, r3, #0, #8
        scratch.ubyte[1]    = *data++;
 80064ec:	7853      	ldrb	r3, [r2, #1]
 80064ee:	f363 270f 	bfi	r7, r3, #8, #8
        test               |= fp->write(cursor, scratch.ushort);
 80064f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064f6:	b2b9      	uxth	r1, r7
 80064f8:	4620      	mov	r0, r4
 80064fa:	4798      	blx	r3
 80064fc:	4305      	orrs	r5, r0
 80064fe:	b2ed      	uxtb	r5, r5
    for (test=0; cursor<length; cursor+=2) {
 8006500:	3402      	adds	r4, #2
 8006502:	b2a4      	uxth	r4, r4
        scratch.ubyte[1]    = *data++;
 8006504:	4632      	mov	r2, r6
    for (test=0; cursor<length; cursor+=2) {
 8006506:	4544      	cmp	r4, r8
 8006508:	d3eb      	bcc.n	80064e2 <vl_store+0x3a>
}
 800650a:	4628      	mov	r0, r5
 800650c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006510 <vl_close>:
    if (FP_ISVALID(fp)) {
 8006510:	2800      	cmp	r0, #0
 8006512:	d033      	beq.n	800657c <vl_close+0x6c>
OT_WEAK ot_u8 vl_close( vlFILE* fp ) {
 8006514:	b510      	push	{r4, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	4604      	mov	r4, r0
        if (vworm_read(fp->header+0) != fp->length) {
 800651a:	8800      	ldrh	r0, [r0, #0]
 800651c:	f001 fbe0 	bl	8007ce0 <vworm_read>
 8006520:	8923      	ldrh	r3, [r4, #8]
 8006522:	4298      	cmp	r0, r3
 8006524:	d116      	bne.n	8006554 <vl_close+0x44>
        epoch_s = time_get_utc();
 8006526:	f000 fa51 	bl	80069cc <time_get_utc>
 800652a:	9001      	str	r0, [sp, #4]
        if (fp->flags & VL_FLAG_MODDED) {
 800652c:	8963      	ldrh	r3, [r4, #10]
 800652e:	f013 0f02 	tst.w	r3, #2
 8006532:	d116      	bne.n	8006562 <vl_close+0x52>
            action.ushort       = vworm_read(fp->header+10);    ///@todo make offset constant instead of 10
 8006534:	8820      	ldrh	r0, [r4, #0]
 8006536:	300a      	adds	r0, #10
 8006538:	b280      	uxth	r0, r0
 800653a:	f001 fbd1 	bl	8007ce0 <vworm_read>
            action.ubyte[0]    &= (ot_u8)fp->flags;
 800653e:	7aa3      	ldrb	r3, [r4, #10]
            if (action.ubyte[0] != 0) {
 8006540:	4018      	ands	r0, r3
 8006542:	d117      	bne.n	8006574 <vl_close+0x64>
        fp->start   = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	8063      	strh	r3, [r4, #2]
        fp->length  = 0;
 8006548:	8123      	strh	r3, [r4, #8]
        fp->flags   = 0;
 800654a:	8163      	strh	r3, [r4, #10]
        fp->read    = NULL;
 800654c:	60e3      	str	r3, [r4, #12]
        fp->write   = NULL;
 800654e:	6123      	str	r3, [r4, #16]
}
 8006550:	b002      	add	sp, #8
 8006552:	bd10      	pop	{r4, pc}
            sub_write_header( (fp->header+0), &(fp->length), 2);
 8006554:	2202      	movs	r2, #2
 8006556:	f104 0108 	add.w	r1, r4, #8
 800655a:	8820      	ldrh	r0, [r4, #0]
 800655c:	f7ff fd8c 	bl	8006078 <sub_write_header>
 8006560:	e7e1      	b.n	8006526 <vl_close+0x16>
            sub_write_header( (fp->header+12), (ot_u16*)&epoch_s, 4);    ///@todo make offset constant instead of 12
 8006562:	8820      	ldrh	r0, [r4, #0]
 8006564:	300c      	adds	r0, #12
 8006566:	2204      	movs	r2, #4
 8006568:	eb0d 0102 	add.w	r1, sp, r2
 800656c:	b280      	uxth	r0, r0
 800656e:	f7ff fd83 	bl	8006078 <sub_write_header>
 8006572:	e7df      	b.n	8006534 <vl_close+0x24>
                retval = sub_action(fp);
 8006574:	4620      	mov	r0, r4
 8006576:	f7ff fdd9 	bl	800612c <sub_action>
 800657a:	e7e3      	b.n	8006544 <vl_close+0x34>
        retval = 255;
 800657c:	20ff      	movs	r0, #255	; 0xff
}
 800657e:	4770      	bx	lr

08006580 <ISF_open_su>:
OT_WEAK vlFILE* ISF_open_su( ot_u8 id ) {
 8006580:	b508      	push	{r3, lr}
    return vl_open(VL_ISF_BLOCKID, id, VL_ACCESS_SU, NULL);
 8006582:	2300      	movs	r3, #0
 8006584:	223f      	movs	r2, #63	; 0x3f
 8006586:	4601      	mov	r1, r0
 8006588:	2003      	movs	r0, #3
 800658a:	f7ff ff09 	bl	80063a0 <vl_open>
}
 800658e:	bd08      	pop	{r3, pc}

08006590 <ISS_open>:
OT_WEAK vlFILE* ISS_open( ot_u8 id, ot_u8 mod, const id_tmpl* user_id ) {
 8006590:	b508      	push	{r3, lr}
    return vl_open(VL_ISS_BLOCKID, id, mod, user_id);
 8006592:	4613      	mov	r3, r2
 8006594:	460a      	mov	r2, r1
 8006596:	4601      	mov	r1, r0
 8006598:	2002      	movs	r0, #2
 800659a:	f7ff ff01 	bl	80063a0 <vl_open>
}
 800659e:	bd08      	pop	{r3, pc}

080065a0 <ISF_open>:
OT_WEAK vlFILE* ISF_open( ot_u8 id, ot_u8 mod, const id_tmpl* user_id ) {
 80065a0:	b508      	push	{r3, lr}
    return vl_open(VL_ISF_BLOCKID, id, mod, user_id);
 80065a2:	4613      	mov	r3, r2
 80065a4:	460a      	mov	r2, r1
 80065a6:	4601      	mov	r1, r0
 80065a8:	2003      	movs	r0, #3
 80065aa:	f7ff fef9 	bl	80063a0 <vl_open>
}
 80065ae:	bd08      	pop	{r3, pc}

080065b0 <ISF_loadmirror>:
}
 80065b0:	2000      	movs	r0, #0
 80065b2:	4770      	bx	lr

080065b4 <vl_init>:
OT_WEAK ot_u8 vl_init(void) {
 80065b4:	b510      	push	{r4, lr}
    memset(vlaction, 0, sizeof(vlaction));
 80065b6:	4c11      	ldr	r4, [pc, #68]	; (80065fc <vl_init+0x48>)
 80065b8:	2220      	movs	r2, #32
 80065ba:	2100      	movs	r1, #0
 80065bc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80065c0:	f001 f812 	bl	80075e8 <ot_memset>
    memset(vlaction_users, 0, sizeof(vlaction_users));
 80065c4:	2208      	movs	r2, #8
 80065c6:	2100      	movs	r1, #0
 80065c8:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80065cc:	f001 f80c 	bl	80075e8 <ot_memset>
    memset(vlfile, 0, sizeof(vlfile));
 80065d0:	223c      	movs	r2, #60	; 0x3c
 80065d2:	2100      	movs	r1, #0
 80065d4:	4620      	mov	r0, r4
 80065d6:	f001 f807 	bl	80075e8 <ot_memset>
    for (i=0; i<OT_PARAM(VLFPS); i++) {
 80065da:	2300      	movs	r3, #0
 80065dc:	e008      	b.n	80065f0 <vl_init+0x3c>
        vlfile[i].header   = NULL_vaddr;
 80065de:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80065e2:	008a      	lsls	r2, r1, #2
 80065e4:	4905      	ldr	r1, [pc, #20]	; (80065fc <vl_init+0x48>)
 80065e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80065ea:	5288      	strh	r0, [r1, r2]
    for (i=0; i<OT_PARAM(VLFPS); i++) {
 80065ec:	3301      	adds	r3, #1
 80065ee:	b21b      	sxth	r3, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	ddf4      	ble.n	80065de <vl_init+0x2a>
    ISF_loadmirror();
 80065f4:	f7ff ffdc 	bl	80065b0 <ISF_loadmirror>
}
 80065f8:	2000      	movs	r0, #0
 80065fa:	bd10      	pop	{r4, pc}
 80065fc:	2000117c 	.word	0x2000117c

08006600 <mpipe_open>:
    return mpipe.state;
}
#endif


void mpipe_open() {
 8006600:	b508      	push	{r3, lr}
	sys.task_MPA.event = 0;
 8006602:	2000      	movs	r0, #0
 8006604:	4b02      	ldr	r3, [pc, #8]	; (8006610 <mpipe_open+0x10>)
 8006606:	7318      	strb	r0, [r3, #12]
	mpipedrv_rx(False, MPIPE_High );
 8006608:	2101      	movs	r1, #1
 800660a:	f001 f9dd 	bl	80079c8 <mpipedrv_rx>
}
 800660e:	bd08      	pop	{r3, pc}
 8006610:	20002db4 	.word	0x20002db4

08006614 <mpipe_connect>:
void mpipe_connect(void* port_id) {
 8006614:	b508      	push	{r3, lr}
    sys.task_MPA.latency    = mpipedrv_init(port_id, MPIPE_default);
 8006616:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800661a:	f001 f885 	bl	8007728 <mpipedrv_init>
 800661e:	4b02      	ldr	r3, [pc, #8]	; (8006628 <mpipe_connect+0x14>)
 8006620:	73d8      	strb	r0, [r3, #15]
    mpipe_open();
 8006622:	f7ff ffed 	bl	8006600 <mpipe_open>
}
 8006626:	bd08      	pop	{r3, pc}
 8006628:	20002db4 	.word	0x20002db4

0800662c <sub_mpipe_setidle>:
    //mpipedrv_kill();
}


void sub_mpipe_setidle(ot_task task) {
    task->event     = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	7003      	strb	r3, [r0, #0]
    task->reserve   = 1;
 8006630:	2301      	movs	r3, #1
 8006632:	7083      	strb	r3, [r0, #2]
}
 8006634:	4770      	bx	lr
	...

08006638 <sub_mpipe_actuate>:

void sub_mpipe_actuate(ot_u8 new_event, ot_u8 new_reserve, ot_uint new_nextevent) {
 8006638:	b508      	push	{r3, lr}
/// Kernel should be pre-empted in order to cancel the currently scheduled
/// task for MPipe and replace it with this one (if any task is scheduled).
    sys.task_MPA.event      = new_event;
 800663a:	4b04      	ldr	r3, [pc, #16]	; (800664c <sub_mpipe_actuate+0x14>)
 800663c:	7318      	strb	r0, [r3, #12]
    sys.task_MPA.reserve    = new_reserve;
 800663e:	7399      	strb	r1, [r3, #14]
    sys_preempt(&sys.task_MPA, new_nextevent);
 8006640:	4611      	mov	r1, r2
 8006642:	f103 000c 	add.w	r0, r3, #12
 8006646:	f000 f96b 	bl	8006920 <sys_preempt>
}
 800664a:	bd08      	pop	{r3, pc}
 800664c:	20002db4 	.word	0x20002db4

08006650 <mpipe_txschedule>:


void mpipe_txschedule(ot_int wait) {
 8006650:	b508      	push	{r3, lr}
    if (sys.task_MPA.event == 0) {
 8006652:	4b05      	ldr	r3, [pc, #20]	; (8006668 <mpipe_txschedule+0x18>)
 8006654:	7b1b      	ldrb	r3, [r3, #12]
 8006656:	b103      	cbz	r3, 800665a <mpipe_txschedule+0xa>
        sub_mpipe_actuate(2, 1, wait);
    }
}
 8006658:	bd08      	pop	{r3, pc}
        sub_mpipe_actuate(2, 1, wait);
 800665a:	b282      	uxth	r2, r0
 800665c:	2101      	movs	r1, #1
 800665e:	2002      	movs	r0, #2
 8006660:	f7ff ffea 	bl	8006638 <sub_mpipe_actuate>
}
 8006664:	e7f8      	b.n	8006658 <mpipe_txschedule+0x8>
 8006666:	bf00      	nop
 8006668:	20002db4 	.word	0x20002db4

0800666c <mpipe_send>:
        sub_mpipe_actuate(5, 1, wait);
    }
}


void mpipe_send() {
 800666c:	b508      	push	{r3, lr}
///@note A session stack could be implemented for MPipe Task.  For now, Sending (TX)
/// will just fall-through if mpipe is occupied
    mpipe_txschedule(0);
 800666e:	2000      	movs	r0, #0
 8006670:	f7ff ffee 	bl	8006650 <mpipe_txschedule>
}
 8006674:	bd08      	pop	{r3, pc}

08006676 <mpipeevt_txdone>:


void mpipeevt_txdone(ot_int code) {
 8006676:	b508      	push	{r3, lr}
/// It will only call it after it is done will all queued TX jobs, not after
/// each packet.
/// If code == 0, everything went well in the driver.  If code != 0, TX went
/// wrong, and must be killed.
///
    sub_mpipe_actuate(3+(code==0), 1, 0);
 8006678:	b128      	cbz	r0, 8006686 <mpipeevt_txdone+0x10>
 800667a:	2003      	movs	r0, #3
 800667c:	2200      	movs	r2, #0
 800667e:	2101      	movs	r1, #1
 8006680:	f7ff ffda 	bl	8006638 <sub_mpipe_actuate>
}
 8006684:	bd08      	pop	{r3, pc}
    sub_mpipe_actuate(3+(code==0), 1, 0);
 8006686:	2004      	movs	r0, #4
 8006688:	e7f8      	b.n	800667c <mpipeevt_txdone+0x6>

0800668a <mpipeevt_rxdetect>:
void mpipeevt_rxinit(ot_int code) {
    sub_mpipe_actuate(5, 1, code);
}


void mpipeevt_rxdetect(ot_int code) {
 800668a:	b508      	push	{r3, lr}
    sub_mpipe_actuate(3, 1, (ot_uint)code); ///@note come back to this
 800668c:	b282      	uxth	r2, r0
 800668e:	2101      	movs	r1, #1
 8006690:	2003      	movs	r0, #3
 8006692:	f7ff ffd1 	bl	8006638 <sub_mpipe_actuate>
}
 8006696:	bd08      	pop	{r3, pc}

08006698 <mpipeevt_rxdone>:
void mpipeevt_rxdone(ot_int code) {
/// @note "32" in the array is given as the maximum time for protocol parsing.  
/// It might need to be more dynamic, depending on protocol and length of packet.
/// In the future, there might be a "guess runtime" function in ALP that 
/// inspects these things.
    if (code == 0) {
 8006698:	b100      	cbz	r0, 800669c <mpipeevt_rxdone+0x4>
 800669a:	4770      	bx	lr
void mpipeevt_rxdone(ot_int code) {
 800669c:	b508      	push	{r3, lr}
        sub_mpipe_actuate(1, 32, 0);
 800669e:	2200      	movs	r2, #0
 80066a0:	2120      	movs	r1, #32
 80066a2:	2001      	movs	r0, #1
 80066a4:	f7ff ffc8 	bl	8006638 <sub_mpipe_actuate>
    }
}
 80066a8:	bd08      	pop	{r3, pc}
	...

080066ac <mpipe_systask>:



void mpipe_systask(ot_task task) {
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4604      	mov	r4, r0
    switch (sys.task_MPA.event) {
 80066b0:	4b24      	ldr	r3, [pc, #144]	; (8006744 <mpipe_systask+0x98>)
 80066b2:	7b1b      	ldrb	r3, [r3, #12]
 80066b4:	2b05      	cmp	r3, #5
 80066b6:	d841      	bhi.n	800673c <mpipe_systask+0x90>
 80066b8:	e8df f003 	tbb	[pc, r3]
 80066bc:	2c1c0d03 	.word	0x2c1c0d03
 80066c0:	3d35      	.short	0x3d35
        //Task destructor & initializer: close mpipe
        ///@todo fix mpipe_connect(NULL), it needs to have dynamic input from config
        case 0: sys_taskinit_macro(task, mpipedrv_kill(), mpipe_connect(NULL)); 
 80066c2:	f001 f8b5 	bl	8007830 <mpipedrv_kill>
 80066c6:	7863      	ldrb	r3, [r4, #1]
 80066c8:	b1fb      	cbz	r3, 800670a <mpipe_systask+0x5e>
 80066ca:	2000      	movs	r0, #0
 80066cc:	f7ff ffa2 	bl	8006614 <mpipe_connect>
 80066d0:	2300      	movs	r3, #0
 80066d2:	7063      	strb	r3, [r4, #1]
 80066d4:	e019      	b.n	800670a <mpipe_systask+0x5e>
                break;

        /// RX packet successful
        /// ALP must manage the protocol/packet data and call TX when/if it has
        /// a response ready.  Driver is always in passive-RX if not TX'ing.
        case 1: alp_parse_message(&mpipe.alp, NULL);
 80066d6:	4d1c      	ldr	r5, [pc, #112]	; (8006748 <mpipe_systask+0x9c>)
 80066d8:	2100      	movs	r1, #0
 80066da:	4628      	mov	r0, r5
 80066dc:	f7ff f9c9 	bl	8005a72 <alp_parse_message>
        
                ///@todo this is a hack.  ALP must be migrated to app queues, 
                ///      it's too much of a headache the old way.
                q_empty(mpipe.alp.inq);
 80066e0:	68a8      	ldr	r0, [r5, #8]
 80066e2:	f7ff fba8 	bl	8005e36 <q_empty>
                
                /// If there's data to send, we need to send it.
                /// Do that by falling through if output queue has greater than zero span.
                if (q_span(mpipe.alp.outq) <= 0) {
 80066e6:	68e8      	ldr	r0, [r5, #12]
 80066e8:	f7ff fb84 	bl	8005df4 <q_span>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	dd0d      	ble.n	800670c <mpipe_systask+0x60>
                    sub_mpipe_setidle(task);
                    break;
                }
                mpipe_send();
 80066f0:	f7ff ffbc 	bl	800666c <mpipe_send>
                
        // Initialize TX: mpipe_send is used.
        case 2: //mpipe_send();
                mpipedrv_unblock();
 80066f4:	f001 f88e 	bl	8007814 <mpipedrv_unblock>
                sub_mpipe_actuate(3, 1, (ot_uint)mpipedrv_tx(False, MPIPE_High));
 80066f8:	2101      	movs	r1, #1
 80066fa:	2000      	movs	r0, #0
 80066fc:	f001 f91c 	bl	8007938 <mpipedrv_tx>
 8006700:	b282      	uxth	r2, r0
 8006702:	2101      	movs	r1, #1
 8006704:	2003      	movs	r0, #3
 8006706:	f7ff ff97 	bl	8006638 <sub_mpipe_actuate>
        				
        // Return the power-code state of the driver, 0-3
        default: task->cursor = mpipedrv_getpwrcode();
                break;
    }
}
 800670a:	bd38      	pop	{r3, r4, r5, pc}
                    sub_mpipe_setidle(task);
 800670c:	4620      	mov	r0, r4
 800670e:	f7ff ff8d 	bl	800662c <sub_mpipe_setidle>
                    break;
 8006712:	e7fa      	b.n	800670a <mpipe_systask+0x5e>
        case 3: mpipedrv_kill();
 8006714:	f001 f88c 	bl	8007830 <mpipedrv_kill>
                q_rewind(mpipe.alp.outq);
 8006718:	4b0c      	ldr	r3, [pc, #48]	; (800674c <mpipe_systask+0xa0>)
 800671a:	6918      	ldr	r0, [r3, #16]
 800671c:	f7ff fb9c 	bl	8005e58 <q_rewind>
                mpipe_open();
 8006720:	f7ff ff6e 	bl	8006600 <mpipe_open>
                break;
 8006724:	e7f1      	b.n	800670a <mpipe_systask+0x5e>
        case 4: q_rewind(mpipe.alp.outq);
 8006726:	4b09      	ldr	r3, [pc, #36]	; (800674c <mpipe_systask+0xa0>)
 8006728:	6918      	ldr	r0, [r3, #16]
 800672a:	f7ff fb95 	bl	8005e58 <q_rewind>
                sub_mpipe_setidle(task);
 800672e:	4620      	mov	r0, r4
 8006730:	f7ff ff7c 	bl	800662c <sub_mpipe_setidle>
                break;    
 8006734:	e7e9      	b.n	800670a <mpipe_systask+0x5e>
        case 5: mpipe_open();
 8006736:	f7ff ff63 	bl	8006600 <mpipe_open>
        		break;
 800673a:	e7e6      	b.n	800670a <mpipe_systask+0x5e>
        default: task->cursor = mpipedrv_getpwrcode();
 800673c:	f001 f85c 	bl	80077f8 <mpipedrv_getpwrcode>
 8006740:	7060      	strb	r0, [r4, #1]
}
 8006742:	e7e2      	b.n	800670a <mpipe_systask+0x5e>
 8006744:	20002db4 	.word	0x20002db4
 8006748:	20002da0 	.word	0x20002da0
 800674c:	20002d9c 	.word	0x20002d9c

08006750 <sub_init_task>:
#endif
};



ot_u8 sub_init_task(Task_Index i, ot_u8 is_restart) {
 8006750:	b570      	push	{r4, r5, r6, lr}
    ot_u8 task_event;
    task_event          = sys.task[i].event;
 8006752:	4c07      	ldr	r4, [pc, #28]	; (8006770 <sub_init_task+0x20>)
 8006754:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 8006758:	7926      	ldrb	r6, [r4, #4]
    sys.task[i].event   = 0;
 800675a:	2500      	movs	r5, #0
 800675c:	7125      	strb	r5, [r4, #4]
    sys.task[i].cursor  = is_restart;
 800675e:	7161      	strb	r1, [r4, #5]
    TASK_INDEXED_CALL(i);
 8006760:	4b04      	ldr	r3, [pc, #16]	; (8006774 <sub_init_task+0x24>)
 8006762:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006766:	1d20      	adds	r0, r4, #4
 8006768:	4798      	blx	r3
    sys.task[i].cursor  = 0;
 800676a:	7165      	strb	r5, [r4, #5]
    return task_event;
}
 800676c:	4630      	mov	r0, r6
 800676e:	bd70      	pop	{r4, r5, r6, pc}
 8006770:	20002db4 	.word	0x20002db4
 8006774:	08009f58 	.word	0x08009f58

08006778 <sys_init>:
/** System Core Functions
  * ============================================================================
  */

#ifndef EXTF_sys_init
OT_WEAK void sys_init() {
 8006778:	b510      	push	{r4, lr}
#   endif

    /// Set default values in system tasks.  At a minimum, this is doing a
    /// memset on the task struct to 0.  If dynamic task callbacks are enabled,
    /// also set theses callbacks to the default values.
    memset((ot_u8*)sys.task, 0, sizeof(task_marker)*SYS_TASKS);
 800677a:	4c0b      	ldr	r4, [pc, #44]	; (80067a8 <sys_init+0x30>)
 800677c:	2230      	movs	r2, #48	; 0x30
 800677e:	2100      	movs	r1, #0
 8006780:	4620      	mov	r0, r4
 8006782:	f000 ff31 	bl	80075e8 <ot_memset>
            sys_task->call  = default_call;
        }
    }
#   endif

    sys.active = TASK_MAX;
 8006786:	2300      	movs	r3, #0
 8006788:	f804 3c04 	strb.w	r3, [r4, #-4]
//#   endif

    /// Initialize DLL, which also initializes the rest of the protocol stack.
    /// In some HW, the radio must be initialized before MPipe.
#   if (OT_FEATURE(M2))
        dll_init();
 800678c:	f7fd fd0a 	bl	80041a4 <dll_init>
//        mpipe_connect(NULL);
//#   endif
        
    ///@todo change these manual calls into normal task calls using event=0,
    ///      which is the initialization/kill state.
    i = TASK_terminus;
 8006790:	2406      	movs	r4, #6
    while (i > 1) {
 8006792:	e006      	b.n	80067a2 <sys_init+0x2a>
        sub_init_task(--i, 1);
 8006794:	3c01      	subs	r4, #1
 8006796:	b2a0      	uxth	r0, r4
 8006798:	b204      	sxth	r4, r0
 800679a:	2101      	movs	r1, #1
 800679c:	b240      	sxtb	r0, r0
 800679e:	f7ff ffd7 	bl	8006750 <sub_init_task>
    while (i > 1) {
 80067a2:	2c01      	cmp	r4, #1
 80067a4:	dcf6      	bgt.n	8006794 <sys_init+0x1c>
    }
}
 80067a6:	bd10      	pop	{r4, pc}
 80067a8:	20002db8 	.word	0x20002db8

080067ac <sys_panic>:
#endif



#ifndef EXTF_sys_panic
OT_WEAK void sys_panic(ot_u8 err_code) {
 80067ac:	b510      	push	{r4, lr}
 80067ae:	4604      	mov	r4, r0
/// Go to OFF state
#   if (OT_FEATURE(M2))
        dll.idle_state = 0;
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <sys_panic+0x20>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
        session_flush();
 80067b6:	f7fe fa33 	bl	8004c20 <session_flush>
        dll_idle();
 80067ba:	f7fd f861 	bl	8003880 <dll_idle>
#   endif

    systim_disable();
 80067be:	f000 fa1d 	bl	8006bfc <systim_disable>

#   if defined(EXTF_sys_sig_panic)
        sys_sig_panic(err_code);
 80067c2:	4620      	mov	r0, r4
 80067c4:	f7f9 ff84 	bl	80006d0 <sys_sig_panic>
#   elif (OT_FEATURE(SYSKERN_CALLBACKS) == ENABLED)
        sys.panic(err_code);
#   endif
}
 80067c8:	bd10      	pop	{r4, pc}
 80067ca:	bf00      	nop
 80067cc:	20002654 	.word	0x20002654

080067d0 <sys_powerdown>:
#endif



#ifndef EXTF_sys_powerdown
OT_WEAK void sys_powerdown() {
 80067d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ot_uint code = 3;
    ot_int i;

    ///@todo This call-model is kludgey, but for now it is OK in practice.
    ///      Better to have a second status call for exotasks.
    for (i=0; i<_NUM_EXOTASKS; i++) {
 80067d4:	2400      	movs	r4, #0
    ot_uint code = 3;
 80067d6:	2603      	movs	r6, #3
    for (i=0; i<_NUM_EXOTASKS; i++) {
 80067d8:	e007      	b.n	80067ea <sys_powerdown+0x1a>
        if (sys.task[i].cursor < code) {
            code = sys.task[i].cursor;
        }
        
        // Reset event and cursor to previous values
        sys.task[i].event   = task_event;
 80067da:	4b12      	ldr	r3, [pc, #72]	; (8006824 <sys_powerdown+0x54>)
 80067dc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80067e0:	f883 8004 	strb.w	r8, [r3, #4]
        sys.task[i].cursor  = task_cursor;
 80067e4:	715f      	strb	r7, [r3, #5]
    for (i=0; i<_NUM_EXOTASKS; i++) {
 80067e6:	3401      	adds	r4, #1
 80067e8:	b224      	sxth	r4, r4
 80067ea:	2c01      	cmp	r4, #1
 80067ec:	dc13      	bgt.n	8006816 <sys_powerdown+0x46>
        ot_u8 task_event    = sys.task[i].event;
 80067ee:	46a1      	mov	r9, r4
 80067f0:	4d0c      	ldr	r5, [pc, #48]	; (8006824 <sys_powerdown+0x54>)
 80067f2:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80067f6:	f895 8004 	ldrb.w	r8, [r5, #4]
        ot_u8 task_cursor   = sys.task[i].cursor;
 80067fa:	796f      	ldrb	r7, [r5, #5]
        sys.task[i].event   = 255;
 80067fc:	4628      	mov	r0, r5
 80067fe:	23ff      	movs	r3, #255	; 0xff
 8006800:	f800 3f04 	strb.w	r3, [r0, #4]!
        TASK_INDEXED_CALL(i);
 8006804:	4b08      	ldr	r3, [pc, #32]	; (8006828 <sys_powerdown+0x58>)
 8006806:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800680a:	4798      	blx	r3
        if (sys.task[i].cursor < code) {
 800680c:	796b      	ldrb	r3, [r5, #5]
 800680e:	42b3      	cmp	r3, r6
 8006810:	d2e3      	bcs.n	80067da <sys_powerdown+0xa>
            code = sys.task[i].cursor;
 8006812:	461e      	mov	r6, r3
 8006814:	e7e1      	b.n	80067da <sys_powerdown+0xa>
    }

    // Shut down the clocker: a task isn't running during powerdown
    systim_stop_clocker();
 8006816:	f000 fa6f 	bl	8006cf8 <systim_stop_clocker>

#   if defined(EXTF_sys_sig_powerdown)
        sys_sig_powerdown(code);
 800681a:	4630      	mov	r0, r6
 800681c:	f7f9 ff62 	bl	80006e4 <sys_sig_powerdown>
#   elif (OT_FEATURE(SYSKERN_CALLBACKS))
        sys.powerdown(code);
#   else
#       error "powerdown applet (sys_sig_powerdown) is not available."
#   endif
}
 8006820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006824:	20002db4 	.word	0x20002db4
 8006828:	08009f58 	.word	0x08009f58

0800682c <sys_task_setevent>:




void sys_task_setevent(ot_task task, ot_u8 event) {
    task->event = event;
 800682c:	7001      	strb	r1, [r0, #0]
}
 800682e:	4770      	bx	lr

08006830 <sys_task_setreserve>:
void sys_task_setcursor(ot_task task, ot_u8 cursor) {
    task->cursor = cursor;
}

void sys_task_setreserve(ot_task task, ot_u8 reserve) {
    task->reserve = reserve;
 8006830:	7081      	strb	r1, [r0, #2]
}
 8006832:	4770      	bx	lr

08006834 <sys_task_setlatency>:

void sys_task_setlatency(ot_task task, ot_u8 latency) {
    task->latency = latency;
 8006834:	70c1      	strb	r1, [r0, #3]
}
 8006836:	4770      	bx	lr

08006838 <sys_task_setnext_clocks>:

void sys_task_setnext(ot_task task, ot_u32 nextevent_ti) {
    sys_task_setnext_clocks(task, (ot_long)TI2CLK(nextevent_ti));
}

void sys_task_setnext_clocks(ot_task task, ot_long nextevent_clocks) {
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	4605      	mov	r5, r0
 800683c:	460c      	mov	r4, r1
    task->nextevent = nextevent_clocks + (ot_long)systim_get();
 800683e:	f000 f9d1 	bl	8006be4 <systim_get>
 8006842:	4420      	add	r0, r4
 8006844:	6068      	str	r0, [r5, #4]
}
 8006846:	bd38      	pop	{r3, r4, r5, pc}

08006848 <sys_task_setnext>:
void sys_task_setnext(ot_task task, ot_u32 nextevent_ti) {
 8006848:	b508      	push	{r3, lr}
    sys_task_setnext_clocks(task, (ot_long)TI2CLK(nextevent_ti));
 800684a:	f7ff fff5 	bl	8006838 <sys_task_setnext_clocks>
}
 800684e:	bd08      	pop	{r3, pc}

08006850 <sys_event_manager>:
  * The Event Manager is multiplexed in order to work with dynamic task calls
  * or static task calls.  Some platforms work better with dynamic, and some
  * better with static.
  */
#ifndef EXTF_sys_event_manager
OT_WEAK ot_uint sys_event_manager() {
 8006850:	b570      	push	{r4, r5, r6, lr}
    Task_Index  i;
#   endif

    /// 1. Get the elapsed time since the scheduler last run.  We also update
    ///    the time, which does nothing unless time is enabled.
    elapsed = systim_get();
 8006852:	f000 f9c7 	bl	8006be4 <systim_get>
 8006856:	b286      	uxth	r6, r0
    time_add(elapsed); 
 8006858:	4630      	mov	r0, r6
 800685a:	f000 f8c5 	bl	80069e8 <time_add>
    systim_flush();
 800685e:	f000 f9cf 	bl	8006c00 <systim_flush>
    ///      nearest task (nextevent), which loads into timer on exit </LI>
    /// <LI> If a pending task is selected, loop through higher priority
    ///      tasks than the one selected to find if they need to block the
    ///      invocation of the pending task. </LI>
#   if (OT_FEATURE(M2))
    dll_clock(elapsed);
 8006862:	4630      	mov	r0, r6
 8006864:	f7fd f99e 	bl	8003ba4 <dll_clock>

    nextevent   = OT_GPTIM_LIMIT;
    task_i      = &sys.task[TASK_terminus];
    select      = TASK_MAX; //TASK_terminus;
#   if (OT_FEATURE(SYSTASK_CALLBACKS) != ENABLED)
    i           = TASK_terminus;
 8006868:	2206      	movs	r2, #6
    select      = TASK_MAX; //TASK_terminus;
 800686a:	2500      	movs	r5, #0
    task_i      = &sys.task[TASK_terminus];
 800686c:	4b1c      	ldr	r3, [pc, #112]	; (80068e0 <sys_event_manager+0x90>)
    nextevent   = OT_GPTIM_LIMIT;
 800686e:	f641 64fc 	movw	r4, #7932	; 0x1efc
#   endif

    // Select the highest priority task that is active and pending
    // Note that nextevent is always clocked, allowing task blocking without
    // losing synchronization.
    while (task_i != &sys.task[0]) {
 8006872:	e001      	b.n	8006878 <sys_event_manager+0x28>
            if (task_i->nextevent <= nextevent) {
#               if (OT_PARAM_SYSTHREADS != 0)
                nextnext  = nextevent;
#               endif
                nextevent = task_i->nextevent;
                select    = TASK_SELECT(task_i, i);
 8006874:	4615      	mov	r5, r2
                nextevent = task_i->nextevent;
 8006876:	460c      	mov	r4, r1
    while (task_i != &sys.task[0]) {
 8006878:	491a      	ldr	r1, [pc, #104]	; (80068e4 <sys_event_manager+0x94>)
 800687a:	428b      	cmp	r3, r1
 800687c:	d011      	beq.n	80068a2 <sys_event_manager+0x52>
        TASK_DECREMENT(task_i, i);
 800687e:	3b08      	subs	r3, #8
 8006880:	3a01      	subs	r2, #1
 8006882:	b252      	sxtb	r2, r2
        task_i->nextevent -= elapsed;
 8006884:	6859      	ldr	r1, [r3, #4]
 8006886:	1b89      	subs	r1, r1, r6
 8006888:	6059      	str	r1, [r3, #4]
        if (task_i->event != 0) {
 800688a:	7818      	ldrb	r0, [r3, #0]
 800688c:	2800      	cmp	r0, #0
 800688e:	d0f3      	beq.n	8006878 <sys_event_manager+0x28>
            if (task_i->nextevent <= nextevent) {
 8006890:	42a1      	cmp	r1, r4
 8006892:	ddef      	ble.n	8006874 <sys_event_manager+0x24>
            }
            // Sometime nextevent can be negative, due to a long-waiting task.
            // higher priority tasks will always take precedent.
            else if (task_i->nextevent <= 0) {
 8006894:	2900      	cmp	r1, #0
 8006896:	dcef      	bgt.n	8006878 <sys_event_manager+0x28>
                select = TASK_SELECT(task_i, i);
 8006898:	4615      	mov	r5, r2
 800689a:	e7ed      	b.n	8006878 <sys_event_manager+0x28>
                nextevent   = task_i->nextevent;
                select      = TASK_SELECT(task_i, i);
                break;
            }
        }
        TASK_INCREMENT(task_i, i);
 800689c:	3308      	adds	r3, #8
 800689e:	3201      	adds	r2, #1
 80068a0:	b252      	sxtb	r2, r2
    while (task_i < TASK(select)) {
 80068a2:	462e      	mov	r6, r5
 80068a4:	4910      	ldr	r1, [pc, #64]	; (80068e8 <sys_event_manager+0x98>)
 80068a6:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80068aa:	3104      	adds	r1, #4
 80068ac:	4299      	cmp	r1, r3
 80068ae:	d90e      	bls.n	80068ce <sys_event_manager+0x7e>
        if (task_i->event != 0) {
 80068b0:	7818      	ldrb	r0, [r3, #0]
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d0f2      	beq.n	800689c <sys_event_manager+0x4c>
            if ((task_i->latency < TASK(select)->reserve) || \
 80068b6:	78d8      	ldrb	r0, [r3, #3]
 80068b8:	490b      	ldr	r1, [pc, #44]	; (80068e8 <sys_event_manager+0x98>)
 80068ba:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80068be:	7989      	ldrb	r1, [r1, #6]
 80068c0:	4288      	cmp	r0, r1
 80068c2:	d302      	bcc.n	80068ca <sys_event_manager+0x7a>
                (task_i->nextevent < TI2CLK(TASK(select)->reserve))) {
 80068c4:	6858      	ldr	r0, [r3, #4]
            if ((task_i->latency < TASK(select)->reserve) || \
 80068c6:	4288      	cmp	r0, r1
 80068c8:	dae8      	bge.n	800689c <sys_event_manager+0x4c>
                nextevent   = task_i->nextevent;
 80068ca:	685c      	ldr	r4, [r3, #4]
                select      = TASK_SELECT(task_i, i);
 80068cc:	4615      	mov	r5, r2
    }

    /// 3. Set the active task callback to the selected
    sys.active = select;
 80068ce:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <sys_event_manager+0x98>)
 80068d0:	701d      	strb	r5, [r3, #0]

    /// 4. The event manager is done here.  systim_schedule() will
    ///    make sure that the task hasn't been pended during the scheduler
    ///    runtime.
    return systim_schedule(nextevent, systim_get());
 80068d2:	f000 f987 	bl	8006be4 <systim_get>
 80068d6:	4601      	mov	r1, r0
 80068d8:	4620      	mov	r0, r4
 80068da:	f000 f999 	bl	8006c10 <systim_schedule>
//
//        }
//        platform_set_ktim(interval);
//        return retval;
//    }
}
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	20002de8 	.word	0x20002de8
 80068e4:	20002db8 	.word	0x20002db8
 80068e8:	20002db4 	.word	0x20002db4

080068ec <sys_run_task>:
#endif



#ifndef EXTF_sys_run_task
OT_INLINE void sys_run_task() {
 80068ec:	b508      	push	{r3, lr}
    }
#   endif

    ///@todo integrate any necessary systim suppression into the
    ///      task clocker feature
    systim_disable();
 80068ee:	f000 f985 	bl	8006bfc <systim_disable>
    systim_start_clocker();
 80068f2:	f000 f9f9 	bl	8006ce8 <systim_start_clocker>
    
    sys_run_task_CALL:
    if (TASK(sys.active)->event != 0) {
 80068f6:	4b08      	ldr	r3, [pc, #32]	; (8006918 <sys_run_task+0x2c>)
 80068f8:	f993 0000 	ldrsb.w	r0, [r3]
 80068fc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8006900:	791b      	ldrb	r3, [r3, #4]
 8006902:	b13b      	cbz	r3, 8006914 <sys_run_task+0x28>
        TASK_CALL(sys.active);
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <sys_run_task+0x30>)
 8006906:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800690a:	4b03      	ldr	r3, [pc, #12]	; (8006918 <sys_run_task+0x2c>)
 800690c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8006910:	3004      	adds	r0, #4
 8006912:	4790      	blx	r2
    }
}
 8006914:	bd08      	pop	{r3, pc}
 8006916:	bf00      	nop
 8006918:	20002db4 	.word	0x20002db4
 800691c:	08009f58 	.word	0x08009f58

08006920 <sys_preempt>:





OT_WEAK void sys_preempt(ot_task task, ot_uint nextevent_ti) {
 8006920:	b508      	push	{r3, lr}
/// Pre-empting will "pend" the timer.  In device terms, this is implemented
/// by manually setting the timer interrupt flag.  If a task is running while
/// this function is called (typical usage), first the task will finish and then
/// the scheduler will run anyway.
    sys_task_setnext(task, (ot_u32)nextevent_ti);
 8006922:	f7ff ff91 	bl	8006848 <sys_task_setnext>
    platform_ot_preempt();
 8006926:	f000 fcd1 	bl	80072cc <platform_ot_preempt>
}
 800692a:	bd08      	pop	{r3, pc}

0800692c <time_load_now>:
/** Driver functions
  * The following functions are sometimes implemented in the platform driver.
  * They do the low-level work for the system time module.
  */
#ifndef EXTF_time_load_now
OT_WEAK void time_load_now(ot_time* now) {
 800692c:	b510      	push	{r4, lr}
 800692e:	4604      	mov	r4, r0
    ot_u32 clocks;
    ot_u32 scratch;
    *now        = time_sys;
 8006930:	4b08      	ldr	r3, [pc, #32]	; (8006954 <time_load_now+0x28>)
 8006932:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006936:	e884 0003 	stmia.w	r4, {r0, r1}
    clocks      = systim_get();
 800693a:	f000 f953 	bl	8006be4 <systim_get>
    scratch     = clocks + now->clocks;
 800693e:	6863      	ldr	r3, [r4, #4]
    now->upper += (scratch < clocks);       ///@note changed this
 8006940:	1818      	adds	r0, r3, r0
 8006942:	bf2c      	ite	cs
 8006944:	2201      	movcs	r2, #1
 8006946:	2200      	movcc	r2, #0
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	4413      	add	r3, r2
 800694c:	6023      	str	r3, [r4, #0]
    now->clocks = scratch;
 800694e:	6060      	str	r0, [r4, #4]
}
 8006950:	bd10      	pop	{r4, pc}
 8006952:	bf00      	nop
 8006954:	20002de8 	.word	0x20002de8

08006958 <time_set>:
}
#endif


#ifndef EXTF_time_set
OT_WEAK void time_set(ot_time set_time) {
 8006958:	b510      	push	{r4, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	466c      	mov	r4, sp
 800695e:	e884 0003 	stmia.w	r4, {r0, r1}
    ot_time delta;
    time_load_now(&delta);
 8006962:	a802      	add	r0, sp, #8
 8006964:	f7ff ffe2 	bl	800692c <time_load_now>
    
    /// 1. Set time_sys to new value.
    time_sys = set_time;
 8006968:	4b0c      	ldr	r3, [pc, #48]	; (800699c <time_set+0x44>)
 800696a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800696e:	e883 0003 	stmia.w	r3, {r0, r1}
    
    /// 2. determine delta between previous time and new time
    delta.upper     = (time_sys.upper - delta.upper) + (time_sys.clocks < delta.clocks);
 8006972:	9b02      	ldr	r3, [sp, #8]
 8006974:	1ac3      	subs	r3, r0, r3
 8006976:	9a03      	ldr	r2, [sp, #12]
 8006978:	4291      	cmp	r1, r2
 800697a:	bf38      	it	cc
 800697c:	3301      	addcc	r3, #1
    delta.clocks    = (time_sys.clocks - delta.clocks);
 800697e:	1a88      	subs	r0, r1, r2
    
    /// 3. Apply Delta to time_start
    ///    This is necessary to maintain relative uptime figure
    time_start.clocks   += delta.clocks;
 8006980:	4a07      	ldr	r2, [pc, #28]	; (80069a0 <time_set+0x48>)
 8006982:	6851      	ldr	r1, [r2, #4]
 8006984:	4401      	add	r1, r0
 8006986:	6051      	str	r1, [r2, #4]
    time_start.upper    += delta.upper + (time_start.clocks < delta.clocks);
 8006988:	4288      	cmp	r0, r1
 800698a:	bf94      	ite	ls
 800698c:	4618      	movls	r0, r3
 800698e:	1c58      	addhi	r0, r3, #1
 8006990:	6813      	ldr	r3, [r2, #0]
 8006992:	4418      	add	r0, r3
 8006994:	6010      	str	r0, [r2, #0]
}
 8006996:	b004      	add	sp, #16
 8006998:	bd10      	pop	{r4, pc}
 800699a:	bf00      	nop
 800699c:	20002de8 	.word	0x20002de8
 80069a0:	20002df0 	.word	0x20002df0

080069a4 <time_set_utcprecise>:
#endif



#ifndef EXTF_time_set_utcprecise
OT_WEAK void time_set_utcprecise(ot_u32 utc, ot_u32 subseconds) {
 80069a4:	b500      	push	{lr}
 80069a6:	b083      	sub	sp, #12
	ot_time set_time;
    set_time.upper   = (utc >> _UPPER_SHIFT);
 80069a8:	0d83      	lsrs	r3, r0, #22
 80069aa:	9300      	str	r3, [sp, #0]
    set_time.clocks  = (utc << _LOWER_SHIFT);
    set_time.clocks |= subseconds;
 80069ac:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80069b0:	9101      	str	r1, [sp, #4]
    
    time_set(set_time);
 80069b2:	ab02      	add	r3, sp, #8
 80069b4:	e913 0003 	ldmdb	r3, {r0, r1}
 80069b8:	f7ff ffce 	bl	8006958 <time_set>
}
 80069bc:	b003      	add	sp, #12
 80069be:	f85d fb04 	ldr.w	pc, [sp], #4

080069c2 <time_set_utc>:
#endif


#ifndef EXTF_time_set_utc
OT_WEAK void time_set_utc(ot_u32 utc) {
 80069c2:	b508      	push	{r3, lr}
    time_set_utcprecise(utc, 0);
 80069c4:	2100      	movs	r1, #0
 80069c6:	f7ff ffed 	bl	80069a4 <time_set_utcprecise>
}
 80069ca:	bd08      	pop	{r3, pc}

080069cc <time_get_utc>:
    *get_time = time_sys;
}
#endif

#ifndef EXTF_time_get_utc
OT_WEAK ot_u32 time_get_utc(void) {
 80069cc:	b500      	push	{lr}
 80069ce:	b083      	sub	sp, #12
    ot_time now;
    time_load_now(&now);
 80069d0:	4668      	mov	r0, sp
 80069d2:	f7ff ffab 	bl	800692c <time_load_now>
    now.upper  <<= _UPPER_SHIFT;
    now.clocks >>= _LOWER_SHIFT;
 80069d6:	9801      	ldr	r0, [sp, #4]
 80069d8:	0a80      	lsrs	r0, r0, #10
    return (now.upper | now.clocks);
}
 80069da:	9b00      	ldr	r3, [sp, #0]
 80069dc:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 80069e0:	b003      	add	sp, #12
 80069e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080069e8 <time_add>:


#ifndef EXTF_time_add
OT_WEAK void time_add(ot_u32 clocks) {
    ot_u32 scratch;
    scratch         = clocks + time_sys.clocks;
 80069e8:	4a05      	ldr	r2, [pc, #20]	; (8006a00 <time_add+0x18>)
 80069ea:	6853      	ldr	r3, [r2, #4]
    time_sys.upper  += (scratch < clocks);
 80069ec:	1818      	adds	r0, r3, r0
 80069ee:	bf2c      	ite	cs
 80069f0:	2101      	movcs	r1, #1
 80069f2:	2100      	movcc	r1, #0
 80069f4:	6813      	ldr	r3, [r2, #0]
 80069f6:	440b      	add	r3, r1
 80069f8:	6013      	str	r3, [r2, #0]
    time_sys.clocks  = scratch;
 80069fa:	6050      	str	r0, [r2, #4]
}
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	20002de8 	.word	0x20002de8

08006a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006a04:	f8df d030 	ldr.w	sp, [pc, #48]	; 8006a38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006a08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006a0a:	e003      	b.n	8006a14 <LoopCopyDataInit>

08006a0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006a0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006a10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006a12:	3104      	adds	r1, #4

08006a14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006a14:	480a      	ldr	r0, [pc, #40]	; (8006a40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006a16:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006a18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006a1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006a1c:	d3f6      	bcc.n	8006a0c <CopyDataInit>
	ldr	r2, =_sbss
 8006a1e:	4a0a      	ldr	r2, [pc, #40]	; (8006a48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006a20:	e002      	b.n	8006a28 <LoopFillZerobss>

08006a22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006a22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006a24:	f842 3b04 	str.w	r3, [r2], #4

08006a28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006a28:	4b08      	ldr	r3, [pc, #32]	; (8006a4c <LoopForever+0x16>)
	cmp	r2, r3
 8006a2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006a2c:	d3f9      	bcc.n	8006a22 <FillZerobss>

/* DON'T Call the clock system intitialization function -- OpenTag does this elsewhere */
/*    bl  SystemInit  */
/* Call static constructors */
    bl __libc_init_array
 8006a2e:	f001 f9a7 	bl	8007d80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006a32:	f7f9 fdfb 	bl	800062c <main>

08006a36 <LoopForever>:

LoopForever:
    b LoopForever
 8006a36:	e7fe      	b.n	8006a36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006a38:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8006a3c:	0800a17c 	.word	0x0800a17c
	ldr	r0, =_sdata
 8006a40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006a44:	200001b8 	.word	0x200001b8
	ldr	r2, =_sbss
 8006a48:	200001b8 	.word	0x200001b8
	ldr	r3, = _ebss
 8006a4c:	200032b8 	.word	0x200032b8

08006a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006a50:	e7fe      	b.n	8006a50 <ADC1_2_IRQHandler>
	...

08006a54 <NMI_Handler>:
}



/// The NMI is triggerable by software.  It is used to manage runtime errors.
void NMI_Handler(void) {
 8006a54:	b508      	push	{r3, lr}
    ot_int code;

#   ifdef __DEBUG__
    if (platform.error_code == 0)
 8006a56:	4b06      	ldr	r3, [pc, #24]	; (8006a70 <NMI_Handler+0x1c>)
 8006a58:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8006a5c:	b900      	cbnz	r0, 8006a60 <NMI_Handler+0xc>
 8006a5e:	e7fe      	b.n	8006a5e <NMI_Handler+0xa>
        while(1);
#   endif

    code                = platform.error_code;
    platform.error_code = 0;
 8006a60:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <NMI_Handler+0x1c>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	805a      	strh	r2, [r3, #2]
    sys_panic(code);
 8006a66:	b2c0      	uxtb	r0, r0
 8006a68:	f7ff fea0 	bl	80067ac <sys_panic>
}
 8006a6c:	bd08      	pop	{r3, pc}
 8006a6e:	bf00      	nop
 8006a70:	20002dfc 	.word	0x20002dfc

08006a74 <HardFault_Handler>:


void HardFault_Handler(void) {
 8006a74:	b508      	push	{r3, lr}
	static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
 8006a76:	4c07      	ldr	r4, [pc, #28]	; (8006a94 <HardFault_Handler+0x20>)
 8006a78:	2610      	movs	r6, #16
 8006a7a:	61a6      	str	r6, [r4, #24]
	static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 8006a7c:	2520      	movs	r5, #32
 8006a7e:	62a5      	str	r5, [r4, #40]	; 0x28
/// other serious problem (possibly interrupt storm)
#if defined(__DEBUG__) || defined(__PROTO__)
    while (1) {
        BOARD_led1_on();
        BOARD_led2_off();
        delay_ti(100);
 8006a80:	2064      	movs	r0, #100	; 0x64
 8006a82:	f000 fd4b 	bl	800751c <delay_ti>
	static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 8006a86:	62a6      	str	r6, [r4, #40]	; 0x28
	static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 8006a88:	61a5      	str	r5, [r4, #24]
        BOARD_led1_off();
        BOARD_led2_on();
        delay_ti(100);
 8006a8a:	2064      	movs	r0, #100	; 0x64
 8006a8c:	f000 fd46 	bl	800751c <delay_ti>
 8006a90:	e7f1      	b.n	8006a76 <HardFault_Handler+0x2>
 8006a92:	bf00      	nop
 8006a94:	48000400 	.word	0x48000400

08006a98 <MemManage_Handler>:
    sub_save_error(1);
#endif
}


void MemManage_Handler(void) {
 8006a98:	e7fe      	b.n	8006a98 <MemManage_Handler>

08006a9a <BusFault_Handler>:
    sub_save_error(11);
#endif
}


void BusFault_Handler(void) {
 8006a9a:	e7fe      	b.n	8006a9a <BusFault_Handler>

08006a9c <UsageFault_Handler>:
    sub_save_error(7);
#endif
}


void UsageFault_Handler(void) {
 8006a9c:	e7fe      	b.n	8006a9c <UsageFault_Handler>

08006a9e <DebugMon_Handler>:
}


void DebugMon_Handler(void) {
/// Not really applicable
}
 8006a9e:	4770      	bx	lr

08006aa0 <__read_lptim_cnt>:
  *        STM32L4 reference manual recommends reading the CNT in a loop until
  *        two successive reads match.  That is the purpose of this function.
  */
ot_u16 __read_lptim_cnt() {
    ot_u16 a, b;
    b = LPTIM1->CNT;
 8006aa0:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <__read_lptim_cnt+0x18>)
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	e000      	b.n	8006aaa <__read_lptim_cnt+0xa>
    do {
        a = b;
        b = LPTIM1->CNT;
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	4a03      	ldr	r2, [pc, #12]	; (8006ab8 <__read_lptim_cnt+0x18>)
 8006aac:	69d0      	ldr	r0, [r2, #28]
 8006aae:	b280      	uxth	r0, r0
    } while (b != a);
 8006ab0:	4283      	cmp	r3, r0
 8006ab2:	d1f9      	bne.n	8006aa8 <__read_lptim_cnt+0x8>

    return b;
}
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40007c00 	.word	0x40007c00

08006abc <__write_lptim_cmp>:

void __write_lptim_cmp(ot_u16 new_cmp) {
// Clear the CMPOK bit ahead of setting CMP
// Set the CMP to the new value
// Assure that CMP was successfully written 
    LPTIM1->ICR = LPTIM_ICR_CMPOKCF;
 8006abc:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <__write_lptim_cmp+0x14>)
 8006abe:	2208      	movs	r2, #8
 8006ac0:	605a      	str	r2, [r3, #4]
    LPTIM1->CMP = new_cmp;
 8006ac2:	6158      	str	r0, [r3, #20]
    while ((LPTIM1->ISR & LPTIM_ISR_CMPOK) == 0) {
 8006ac4:	4b02      	ldr	r3, [pc, #8]	; (8006ad0 <__write_lptim_cmp+0x14>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f013 0f08 	tst.w	r3, #8
 8006acc:	d0fa      	beq.n	8006ac4 <__write_lptim_cmp+0x8>
        //test_cmp++;
    }
}
 8006ace:	4770      	bx	lr
 8006ad0:	40007c00 	.word	0x40007c00

08006ad4 <__write_lptim_arr>:


void __write_lptim_arr(ot_u16 new_arr) {
    LPTIM1->ICR = LPTIM_ICR_ARROKCF;
 8006ad4:	4b04      	ldr	r3, [pc, #16]	; (8006ae8 <__write_lptim_arr+0x14>)
 8006ad6:	2210      	movs	r2, #16
 8006ad8:	605a      	str	r2, [r3, #4]
    LPTIM1->ARR = new_arr;
 8006ada:	6198      	str	r0, [r3, #24]
    while ((LPTIM1->ISR & LPTIM_ISR_ARROK) == 0);
 8006adc:	4b02      	ldr	r3, [pc, #8]	; (8006ae8 <__write_lptim_arr+0x14>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f013 0f10 	tst.w	r3, #16
 8006ae4:	d0fa      	beq.n	8006adc <__write_lptim_arr+0x8>
}
 8006ae6:	4770      	bx	lr
 8006ae8:	40007c00 	.word	0x40007c00

08006aec <platform_isr_lptim1>:
    
    //volatile ot_u16 test;
    //test = __read_lptim_cnt();
    
    // Clear interrupt flags
    lptim_flags = LPTIM1->ISR;
 8006aec:	4a05      	ldr	r2, [pc, #20]	; (8006b04 <platform_isr_lptim1+0x18>)
 8006aee:	6813      	ldr	r3, [r2, #0]
 8006af0:	b2d9      	uxtb	r1, r3
    LPTIM1->ICR = lptim_flags;
 8006af2:	6051      	str	r1, [r2, #4]

    // Kernel Timer Compare Interrupt: clear the sleep flag that prevents the
    // scheduler from running
    if (lptim_flags & LPTIM_ISR_CMPM) {
 8006af4:	f013 0f01 	tst.w	r3, #1
 8006af8:	d002      	beq.n	8006b00 <platform_isr_lptim1+0x14>
        systim.flags = 0;
 8006afa:	4b03      	ldr	r3, [pc, #12]	; (8006b08 <platform_isr_lptim1+0x1c>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]
    }
    
    //test = 0;
}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	40007c00 	.word	0x40007c00
 8006b08:	20002df8 	.word	0x20002df8

08006b0c <platform_isr_rtcwakeup>:

/// Used for Insertor & Ticker:
/// - The ticker doesn't do a damn thing except wakeup from sleep 
/// - The Insertor manually vectors to radio_mac_isr(), although this should be
///   changed in the future to a dynamic callback.
void platform_isr_rtcwakeup() { 
 8006b0c:	b508      	push	{r3, lr}
#if (OT_FEATURE(M2))
#if (RF_FEATURE(CSMATIMER) != ENABLED)
    if (systim.opt & SYSTIM_INSERTION_ON) {
 8006b0e:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <platform_isr_rtcwakeup+0x2c>)
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	f013 0f01 	tst.w	r3, #1
 8006b16:	d100      	bne.n	8006b1a <platform_isr_rtcwakeup+0xe>
        RTC->CR    &= ~RTC_CR_WUTE;
        radio_mac_isr();
    }
#endif
#endif
}
 8006b18:	bd08      	pop	{r3, pc}
        systim.opt ^= SYSTIM_INSERTION_ON;
 8006b1a:	f083 0301 	eor.w	r3, r3, #1
 8006b1e:	4a06      	ldr	r2, [pc, #24]	; (8006b38 <platform_isr_rtcwakeup+0x2c>)
 8006b20:	7053      	strb	r3, [r2, #1]
        RTC->SCR    = RTC_SCR_CWUTF;
 8006b22:	4b06      	ldr	r3, [pc, #24]	; (8006b3c <platform_isr_rtcwakeup+0x30>)
 8006b24:	2204      	movs	r2, #4
 8006b26:	65da      	str	r2, [r3, #92]	; 0x5c
        RTC->CR    &= ~RTC_CR_WUTE;
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b2e:	619a      	str	r2, [r3, #24]
        radio_mac_isr();
 8006b30:	f7fa ff2a 	bl	8001988 <radio_mac_isr>
}
 8006b34:	e7f0      	b.n	8006b18 <platform_isr_rtcwakeup+0xc>
 8006b36:	bf00      	nop
 8006b38:	20002df8 	.word	0x20002df8
 8006b3c:	40002800 	.word	0x40002800

08006b40 <systim_init>:




#ifndef EXTF_systim_init
void systim_init(void* tim_init) {
 8006b40:	b570      	push	{r4, r5, r6, lr}
    ///    MAC Timer.  We must:
    ///    <LI> Unlock RTC as a whole </LI>
    ///    <LI> put into INIT mode </LI>
    ///    <LI> Use a prescaler to match the clock used.  For LSE, this is 1.
    ///         (set to 0).  For LSI, this is...
    RCC->BDCR  |= RCC_BDCR_RTCEN;
 8006b42:	4a24      	ldr	r2, [pc, #144]	; (8006bd4 <systim_init+0x94>)
 8006b44:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    
    RTC->WPR    = 0xCA;
 8006b50:	4b21      	ldr	r3, [pc, #132]	; (8006bd8 <systim_init+0x98>)
 8006b52:	22ca      	movs	r2, #202	; 0xca
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR    = 0x53;
 8006b56:	2253      	movs	r2, #83	; 0x53
 8006b58:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->CR     = 0;    //(1<<5);
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	619a      	str	r2, [r3, #24]
    RTC->ICSR  |= RTC_ICSR_INIT;
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b64:	60da      	str	r2, [r3, #12]
    while ((RTC->ICSR & RTC_ICSR_INITF) == 0);
 8006b66:	4b1c      	ldr	r3, [pc, #112]	; (8006bd8 <systim_init+0x98>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b6e:	d0fa      	beq.n	8006b66 <systim_init+0x26>
    RTC->TR     = 0;
 8006b70:	4b19      	ldr	r3, [pc, #100]	; (8006bd8 <systim_init+0x98>)
 8006b72:	2400      	movs	r4, #0
 8006b74:	601c      	str	r4, [r3, #0]
        RTC->PRER               = (127 << 16) | lsi_hz >> 7;
    }
#   endif

    // Clear any flags.
    RTC->SCR    = 0xFFFFFFFF;
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /// 2. Set LPTIM1 to use LSE/32 (or LSI/32)
    
    // IER and CFGR must be set with LPTIM disabled
    LPTIM1->CR      = 0;            // disable timer
 8006b7c:	4d17      	ldr	r5, [pc, #92]	; (8006bdc <systim_init+0x9c>)
 8006b7e:	612c      	str	r4, [r5, #16]
    LPTIM1->IER     = LPTIM_IER_CMPMIE;
 8006b80:	2601      	movs	r6, #1
 8006b82:	60ae      	str	r6, [r5, #8]
    LPTIM1->CFGR    = ((5-MCU_PRESCALER_SHIFT) << 9);    // generally div32, 16, 8
 8006b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b88:	60eb      	str	r3, [r5, #12]
    
    // ARR and CMP must be set with LPTIM enabled
    LPTIM1->CR      = LPTIM_CR_ENABLE;
 8006b8a:	612e      	str	r6, [r5, #16]
    __write_lptim_arr(65535);
 8006b8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006b90:	f7ff ffa0 	bl	8006ad4 <__write_lptim_arr>
    __write_lptim_cmp(65535);
 8006b94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006b98:	f7ff ff90 	bl	8006abc <__write_lptim_cmp>
    LPTIM1->ICR     = 0x7F;         // clear all interrupt flags
 8006b9c:	237f      	movs	r3, #127	; 0x7f
 8006b9e:	606b      	str	r3, [r5, #4]
    
    // Start Timer
    LPTIM1->CR      = LPTIM_CR_CNTSTRT | LPTIM_CR_ENABLE;
 8006ba0:	2305      	movs	r3, #5
 8006ba2:	612b      	str	r3, [r5, #16]
    

    /// 3. Clear flags and stamps
    systim.flags    = 0;
 8006ba4:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <systim_init+0xa0>)
 8006ba6:	701c      	strb	r4, [r3, #0]
    systim.stamp1   = 0;
 8006ba8:	805c      	strh	r4, [r3, #2]
    
    
    /// 4. Clocker initialization.  OpenTag doesn't really care about Clocker
    ///    so we also need a way to configure if it should be enabled or not.
    RCC->APB1ENR1  |= (RCC_APB1ENR1_TIM6EN);
 8006baa:	4a0a      	ldr	r2, [pc, #40]	; (8006bd4 <systim_init+0x94>)
 8006bac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006bae:	f043 0310 	orr.w	r3, r3, #16
 8006bb2:	6593      	str	r3, [r2, #88]	; 0x58
    TIM6->CR1       = 0;
 8006bb4:	f5a5 45d8 	sub.w	r5, r5, #27648	; 0x6c00
 8006bb8:	602c      	str	r4, [r5, #0]
    TIM6->CR2       = (b001 << 4);
 8006bba:	2310      	movs	r3, #16
 8006bbc:	606b      	str	r3, [r5, #4]
    TIM6->DIER      = 0;
 8006bbe:	60ec      	str	r4, [r5, #12]
    TIM6->ARR       = 65535;
 8006bc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006bc4:	62eb      	str	r3, [r5, #44]	; 0x2c
    TIM6->PSC       = (platform_get_clockhz(1) / 32768);
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f000 f9b8 	bl	8006f3c <platform_get_clockhz>
 8006bcc:	0bc0      	lsrs	r0, r0, #15
 8006bce:	62a8      	str	r0, [r5, #40]	; 0x28
    //TIM6->EGR   = TIM_EGR_UG;
}
 8006bd0:	bd70      	pop	{r4, r5, r6, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	40002800 	.word	0x40002800
 8006bdc:	40007c00 	.word	0x40007c00
 8006be0:	20002df8 	.word	0x20002df8

08006be4 <systim_get>:





ot_u32 systim_get() {
 8006be4:	b508      	push	{r3, lr}
    ot_u16 timer_cnt;
    timer_cnt   = __read_lptim_cnt();
 8006be6:	f7ff ff5b 	bl	8006aa0 <__read_lptim_cnt>
    timer_cnt  -= (ot_u16)systim.stamp1;
 8006bea:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <systim_get+0x14>)
 8006bec:	885b      	ldrh	r3, [r3, #2]
 8006bee:	1ac0      	subs	r0, r0, r3
    return (ot_u32)(timer_cnt >> OT_GPTIM_OVERSAMPLE);
}
 8006bf0:	f3c0 00cc 	ubfx	r0, r0, #3, #13
 8006bf4:	bd08      	pop	{r3, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20002df8 	.word	0x20002df8

08006bfc <systim_disable>:
}

void systim_disable() {
/// systim_enable and systim_disable are empty on STM32L0
    //LPTIM1->IER = 0;
}
 8006bfc:	4770      	bx	lr
	...

08006c00 <systim_flush>:
    systim.stamp1 = __read_lptim_cnt();
    __write_lptim_cmp(systim.stamp1);
    EXTI->SWIER2 = (1<<(32-32));
}

void systim_flush() {
 8006c00:	b508      	push	{r3, lr}
    //systim_disable();
    systim.stamp1 = __read_lptim_cnt();
 8006c02:	f7ff ff4d 	bl	8006aa0 <__read_lptim_cnt>
 8006c06:	4b01      	ldr	r3, [pc, #4]	; (8006c0c <systim_flush+0xc>)
 8006c08:	8058      	strh	r0, [r3, #2]
}
 8006c0a:	bd08      	pop	{r3, pc}
 8006c0c:	20002df8 	.word	0x20002df8

08006c10 <systim_schedule>:

ot_u16 systim_schedule(ot_u32 nextevent, ot_u32 overhead) {
 8006c10:	b570      	push	{r4, r5, r6, lr}
/// This should only be called from the scheduler.

    /// Subtracting the overhead of the scheduler runtime yields the true time
    /// to schedule the nextevent.
    nextevent = (ot_long)nextevent - (ot_long)overhead;
 8006c12:	1a44      	subs	r4, r0, r1
    
    /// If the task to be scheduled is already due return 0.
    /// This will ignore the sleep process and go straight to the task.
    if ((ot_long)nextevent <= 0) {
 8006c14:	2c00      	cmp	r4, #0
 8006c16:	dd0f      	ble.n	8006c38 <systim_schedule+0x28>
    
    /// Program the scheduled time into the timer, in ticks.
    /// Oversampling is done at the driver level, versus shifting which is done
    /// at the kernel level.  Oversampling can help timers without synchronized 
    /// updates whereas shifting can improve scheduling precision.
    systim.flags    = GPTIM_FLAG_SLEEP;
 8006c18:	4e09      	ldr	r6, [pc, #36]	; (8006c40 <systim_schedule+0x30>)
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	7033      	strb	r3, [r6, #0]
    LPTIM1->ICR     = 0x7f;     //LPTIM_ICR_CMPMCF;                 // Clear compare match
 8006c1e:	4d09      	ldr	r5, [pc, #36]	; (8006c44 <systim_schedule+0x34>)
 8006c20:	237f      	movs	r3, #127	; 0x7f
 8006c22:	606b      	str	r3, [r5, #4]
    systim.stamp1   = __read_lptim_cnt();
 8006c24:	f7ff ff3c 	bl	8006aa0 <__read_lptim_cnt>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	8070      	strh	r0, [r6, #2]
    
    LPTIM1->CMP     = systim.stamp1 + (ot_u16)(nextevent << OT_GPTIM_OVERSAMPLE);
 8006c2c:	b2a0      	uxth	r0, r4
 8006c2e:	00c2      	lsls	r2, r0, #3
 8006c30:	b292      	uxth	r2, r2
 8006c32:	4413      	add	r3, r2
 8006c34:	616b      	str	r3, [r5, #20]

    return (ot_u16)nextevent;
}
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
        systim.flags = 0;
 8006c38:	2000      	movs	r0, #0
 8006c3a:	4b01      	ldr	r3, [pc, #4]	; (8006c40 <systim_schedule+0x30>)
 8006c3c:	7018      	strb	r0, [r3, #0]
        return 0;
 8006c3e:	e7fa      	b.n	8006c36 <systim_schedule+0x26>
 8006c40:	20002df8 	.word	0x20002df8
 8006c44:	40007c00 	.word	0x40007c00

08006c48 <sub_disable_wkuptim>:
/// <LI> Wakeup Timer interrupt is always enabled (see systim_init()) </LI>
/// <LI> Make sure Wakeup Timer is off </LI>
/// <LI> Make sure RTC is off (if required, sometimes it is always on) </LI>
    ot_u32 scratch;
    
    scratch = RTC->CR;
 8006c48:	4b04      	ldr	r3, [pc, #16]	; (8006c5c <sub_disable_wkuptim+0x14>)
 8006c4a:	699b      	ldr	r3, [r3, #24]
    if (scratch & RTC_CR_WUTE) {
 8006c4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006c50:	d003      	beq.n	8006c5a <sub_disable_wkuptim+0x12>
        RTC->CR = scratch ^ RTC_CR_WUTE;
 8006c52:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8006c56:	4a01      	ldr	r2, [pc, #4]	; (8006c5c <sub_disable_wkuptim+0x14>)
 8006c58:	6193      	str	r3, [r2, #24]
//    scratch = RCC->BDCR;
//    if (scratch & RCC_BDCR_RTCEN) {
//        RCC->BDCR = scratch ^ RCC_BDCR_RTCEN;
//    }
//#   endif
}
 8006c5a:	4770      	bx	lr
 8006c5c:	40002800 	.word	0x40002800

08006c60 <sub_set_wkuptim>:
void sub_set_wkuptim(ot_uint period) {
    ot_u32 rtc_cr;
    ot_uint wdog;

    // Ensure Wakeup Timer is off
    rtc_cr  = RTC->CR;
 8006c60:	4b0b      	ldr	r3, [pc, #44]	; (8006c90 <sub_set_wkuptim+0x30>)
 8006c62:	6999      	ldr	r1, [r3, #24]
    RTC->CR = rtc_cr & ~RTC_CR_WUTE;
 8006c64:	f421 6280 	bic.w	r2, r1, #1024	; 0x400
 8006c68:	619a      	str	r2, [r3, #24]

    // Poll WUTWF until it is set, afterwhich WUTR can be set
    // SW watchdog assumes 10 clocks per loop, to yield ~80us at 32MHz
    wdog = 256; // ~70 us at 32 MHz 
 8006c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
    while ((RTC->ICSR & RTC_ICSR_WUTWF) == 0) {
 8006c6e:	4a08      	ldr	r2, [pc, #32]	; (8006c90 <sub_set_wkuptim+0x30>)
 8006c70:	68d2      	ldr	r2, [r2, #12]
 8006c72:	f012 0f04 	tst.w	r2, #4
 8006c76:	d103      	bne.n	8006c80 <sub_set_wkuptim+0x20>
        if (--wdog == 0) {
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1f6      	bne.n	8006c6e <sub_set_wkuptim+0xe>
            break;
        }
    }
    
    // Ticks interval to run wakeup.
    RTC->WUTR = (period << _TICKER_SHIFT);
 8006c80:	0040      	lsls	r0, r0, #1
 8006c82:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <sub_set_wkuptim+0x30>)
 8006c84:	6158      	str	r0, [r3, #20]

    // Enable Wakeup with interrupt
    // This will do nothing more than wake-up the chip from STOP at the set
    // interval.  The default ISR in platform_isr_STM32L.c is sufficient.
    RTC->CR = rtc_cr | RTC_CR_WUTIE | RTC_CR_WUTE | b000;
 8006c86:	f441 4188 	orr.w	r1, r1, #17408	; 0x4400
 8006c8a:	6199      	str	r1, [r3, #24]
}
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40002800 	.word	0x40002800

08006c94 <systim_stop_ticker>:

#ifndef EXTF_systim_stop_ticker
void systim_stop_ticker() {
/// Ticker is not used on STM32L4 implementation
    //sub_disable_wkuptim();
}
 8006c94:	4770      	bx	lr
	...

08006c98 <systim_set_insertion>:
  *
  * @note In OpenTag, the Mode 2 MAC timer needs the insertor, so if Mode 2 is 
  * being used then you can't really use it except for special cases (e.g. 
  * during bootup).
  */
void systim_set_insertion(ot_u16 value) {
 8006c98:	b508      	push	{r3, lr}
    if (systim.opt & SYSTIM_INSERTION_ON) {
 8006c9a:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <systim_set_insertion+0x20>)
 8006c9c:	785b      	ldrb	r3, [r3, #1]
 8006c9e:	f013 0f01 	tst.w	r3, #1
 8006ca2:	d004      	beq.n	8006cae <systim_set_insertion+0x16>
        if (value == 0) {
 8006ca4:	b920      	cbnz	r0, 8006cb0 <systim_set_insertion+0x18>
            EXTI->SWIER1 = (1<<20);
 8006ca6:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <systim_set_insertion+0x24>)
 8006ca8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006cac:	611a      	str	r2, [r3, #16]
        }
        else {
            sub_set_wkuptim(value);
        }
    }
}
 8006cae:	bd08      	pop	{r3, pc}
            sub_set_wkuptim(value);
 8006cb0:	f7ff ffd6 	bl	8006c60 <sub_set_wkuptim>
}
 8006cb4:	e7fb      	b.n	8006cae <systim_set_insertion+0x16>
 8006cb6:	bf00      	nop
 8006cb8:	20002df8 	.word	0x20002df8
 8006cbc:	40010400 	.word	0x40010400

08006cc0 <systim_enable_insertion>:

OT_INLINE void systim_enable_insertion() {
    systim.opt |= SYSTIM_INSERTION_ON;
 8006cc0:	4a02      	ldr	r2, [pc, #8]	; (8006ccc <systim_enable_insertion+0xc>)
 8006cc2:	7853      	ldrb	r3, [r2, #1]
 8006cc4:	f043 0301 	orr.w	r3, r3, #1
 8006cc8:	7053      	strb	r3, [r2, #1]
    //sub_enable_wkuptim();
}
 8006cca:	4770      	bx	lr
 8006ccc:	20002df8 	.word	0x20002df8

08006cd0 <systim_disable_insertion>:

OT_INLINE void systim_disable_insertion() {
 8006cd0:	b508      	push	{r3, lr}
    systim.opt &= ~SYSTIM_INSERTION_ON;
 8006cd2:	4a04      	ldr	r2, [pc, #16]	; (8006ce4 <systim_disable_insertion+0x14>)
 8006cd4:	7853      	ldrb	r3, [r2, #1]
 8006cd6:	f023 0301 	bic.w	r3, r3, #1
 8006cda:	7053      	strb	r3, [r2, #1]
    sub_disable_wkuptim();
 8006cdc:	f7ff ffb4 	bl	8006c48 <sub_disable_wkuptim>
}
 8006ce0:	bd08      	pop	{r3, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20002df8 	.word	0x20002df8

08006ce8 <systim_start_clocker>:
  * usually needs it, and it will manage it in a specific way.  Clocker uses
  * TIM6 in the STM32L4 implementation.
  */

void systim_start_clocker() {
    TIM6->CR1 = TIM_CR1_CEN;
 8006ce8:	4b02      	ldr	r3, [pc, #8]	; (8006cf4 <systim_start_clocker+0xc>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
    TIM6->EGR = TIM_EGR_UG;
 8006cee:	615a      	str	r2, [r3, #20]
}
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	40001000 	.word	0x40001000

08006cf8 <systim_stop_clocker>:
ot_u16 systim_get_clocker() {
    return TIM6->CNT;
}

void systim_stop_clocker() {
    TIM6->CR1 = 0;
 8006cf8:	4b01      	ldr	r3, [pc, #4]	; (8006d00 <systim_stop_clocker+0x8>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]
}
 8006cfe:	4770      	bx	lr
 8006d00:	40001000 	.word	0x40001000

08006d04 <systim_chronstamp>:
  * and it needs the timer to run through STOP mode.  So, LPTIM is the perfect
  * choice.  Since LPTIM is already set-up as a free-running counter as the
  * kernel timer, all we need to do in this implementation is to read it.
  */

ot_u32 systim_chronstamp(ot_u32* timestamp) {
 8006d04:	b510      	push	{r4, lr}
 8006d06:	4604      	mov	r4, r0
    ot_u16 timer_cnt = __read_lptim_cnt();
 8006d08:	f7ff feca 	bl	8006aa0 <__read_lptim_cnt>
    timer_cnt >>= OT_GPTIM_OVERSAMPLE;
 8006d0c:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    
    if (timestamp != NULL) {
 8006d10:	b114      	cbz	r4, 8006d18 <systim_chronstamp+0x14>
        timer_cnt -= (ot_u16)*timestamp;
 8006d12:	8823      	ldrh	r3, [r4, #0]
 8006d14:	1ac0      	subs	r0, r0, r3
 8006d16:	b280      	uxth	r0, r0
    }
    return (ot_u32)timer_cnt;
}
 8006d18:	bd10      	pop	{r4, pc}
	...

08006d1c <RTC_WKUP_IRQHandler>:
#undef _CCSLSE


/// Open RTC_WKUP interrupt
#if defined(__ISR_RTC_WKUP) && !defined(__N_ISR_RTC_WKUP)
void RTC_WKUP_IRQHandler(void) {
 8006d1c:	b508      	push	{r3, lr}
    ot_u32 exti_pr;
    __ISR_ENTRY_HOOK();
    EXTI->PR1 = (1<<20);
 8006d1e:	4b08      	ldr	r3, [pc, #32]	; (8006d40 <RTC_WKUP_IRQHandler+0x24>)
 8006d20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d24:	615a      	str	r2, [r3, #20]
    __ISR_WAKEUP_HOOK();
    
    ///@todo put this in entry/wakeup hook?
    RTC->ICSR  &= ~RTC_ICSR_RSF;
 8006d26:	f5a3 435c 	sub.w	r3, r3, #56320	; 0xdc00
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	f022 0220 	bic.w	r2, r2, #32
 8006d30:	60da      	str	r2, [r3, #12]
    
    RTC->SCR   |= RTC_SCR_CWUTF;
 8006d32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d34:	f042 0204 	orr.w	r2, r2, #4
 8006d38:	65da      	str	r2, [r3, #92]	; 0x5c
    platform_isr_rtcwakeup();
 8006d3a:	f7ff fee7 	bl	8006b0c <platform_isr_rtcwakeup>

    __ISR_EXIT_HOOK();
}
 8006d3e:	bd08      	pop	{r3, pc}
 8006d40:	40010400 	.word	0x40010400

08006d44 <EXTI0_IRQHandler>:
    } \
    else

// EXTI0 - EXTI4
#if ((defined(__ISR_EXTI0) || defined(__USE_EXTI0)) && !defined(__N_ISR_EXTI0))
void EXTI0_IRQHandler(void) {
 8006d44:	b508      	push	{r3, lr}
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    __EXTI_MACRO_LOW(0);
 8006d46:	4b03      	ldr	r3, [pc, #12]	; (8006d54 <EXTI0_IRQHandler+0x10>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	615a      	str	r2, [r3, #20]
 8006d4c:	f7fa f8cc 	bl	8000ee8 <sx127x_irq0_isr>
    __ISR_EXIT_HOOK();
}
 8006d50:	bd08      	pop	{r3, pc}
 8006d52:	bf00      	nop
 8006d54:	40010400 	.word	0x40010400

08006d58 <EXTI1_IRQHandler>:
#endif
#if ((defined(__ISR_EXTI1) || defined(__USE_EXTI1)) && !defined(__N_ISR_EXTI1))
void EXTI1_IRQHandler(void) {
 8006d58:	b508      	push	{r3, lr}
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    __EXTI_MACRO_LOW(1);
 8006d5a:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <EXTI1_IRQHandler+0x10>)
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	615a      	str	r2, [r3, #20]
 8006d60:	f7fa f8ca 	bl	8000ef8 <sx127x_irq1_isr>
    __ISR_EXIT_HOOK();
}
 8006d64:	bd08      	pop	{r3, pc}
 8006d66:	bf00      	nop
 8006d68:	40010400 	.word	0x40010400

08006d6c <EXTI2_IRQHandler>:
#endif
#if ((defined(__ISR_EXTI2) || defined(__USE_EXTI2)) && !defined(__N_ISR_EXTI2))
void EXTI2_IRQHandler(void) {
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    __EXTI_MACRO_LOW(2);
 8006d6c:	4b01      	ldr	r3, [pc, #4]	; (8006d74 <EXTI2_IRQHandler+0x8>)
 8006d6e:	2204      	movs	r2, #4
 8006d70:	615a      	str	r2, [r3, #20]
    __ISR_EXIT_HOOK();
}
 8006d72:	4770      	bx	lr
 8006d74:	40010400 	.word	0x40010400

08006d78 <EXTI3_IRQHandler>:
#endif
#if ((defined(__ISR_EXTI3) || defined(__USE_EXTI3)) && !defined(__N_ISR_EXTI3))
void EXTI3_IRQHandler(void) {
 8006d78:	b508      	push	{r3, lr}
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    __EXTI_MACRO_LOW(3);
 8006d7a:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <EXTI3_IRQHandler+0x10>)
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	615a      	str	r2, [r3, #20]
 8006d80:	f7fa f8c4 	bl	8000f0c <sx127x_irq3_isr>
    __ISR_EXIT_HOOK();
}
 8006d84:	bd08      	pop	{r3, pc}
 8006d86:	bf00      	nop
 8006d88:	40010400 	.word	0x40010400

08006d8c <EXTI4_IRQHandler>:
#endif
#if ((defined(__ISR_EXTI4) || defined(__USE_EXTI4)) && !defined(__N_ISR_EXTI4))
void EXTI4_IRQHandler(void) {
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    __EXTI_MACRO_LOW(4);
 8006d8c:	4b01      	ldr	r3, [pc, #4]	; (8006d94 <EXTI4_IRQHandler+0x8>)
 8006d8e:	2210      	movs	r2, #16
 8006d90:	615a      	str	r2, [r3, #20]
    __ISR_EXIT_HOOK();
}
 8006d92:	4770      	bx	lr
 8006d94:	40010400 	.word	0x40010400

08006d98 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void) {
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    
#   if ((defined(__ISR_EXTI5) || defined(__USE_EXTI5)) && !defined(__N_ISR_EXTI5))
    __EXTI_MACRO(5);
 8006d98:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <EXTI9_5_IRQHandler+0x58>)
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	f013 0f20 	tst.w	r3, #32
 8006da0:	d002      	beq.n	8006da8 <EXTI9_5_IRQHandler+0x10>
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <EXTI9_5_IRQHandler+0x58>)
 8006da4:	2220      	movs	r2, #32
 8006da6:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI6) || defined(__USE_EXTI6)) && !defined(__N_ISR_EXTI6))
    __EXTI_MACRO(6);
 8006da8:	4b11      	ldr	r3, [pc, #68]	; (8006df0 <EXTI9_5_IRQHandler+0x58>)
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006db0:	d002      	beq.n	8006db8 <EXTI9_5_IRQHandler+0x20>
 8006db2:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <EXTI9_5_IRQHandler+0x58>)
 8006db4:	2240      	movs	r2, #64	; 0x40
 8006db6:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI7) || defined(__USE_EXTI7)) && !defined(__N_ISR_EXTI7))
    __EXTI_MACRO(7);
 8006db8:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <EXTI9_5_IRQHandler+0x58>)
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006dc0:	d002      	beq.n	8006dc8 <EXTI9_5_IRQHandler+0x30>
 8006dc2:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <EXTI9_5_IRQHandler+0x58>)
 8006dc4:	2280      	movs	r2, #128	; 0x80
 8006dc6:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI8) || defined(__USE_EXTI8)) && !defined(__N_ISR_EXTI8))
    __EXTI_MACRO(8);
 8006dc8:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <EXTI9_5_IRQHandler+0x58>)
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006dd0:	d003      	beq.n	8006dda <EXTI9_5_IRQHandler+0x42>
 8006dd2:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <EXTI9_5_IRQHandler+0x58>)
 8006dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dd8:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI9) || defined(__USE_EXTI9)) && !defined(__N_ISR_EXTI9))
    __EXTI_MACRO(9);
 8006dda:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <EXTI9_5_IRQHandler+0x58>)
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006de2:	d003      	beq.n	8006dec <EXTI9_5_IRQHandler+0x54>
 8006de4:	4b02      	ldr	r3, [pc, #8]	; (8006df0 <EXTI9_5_IRQHandler+0x58>)
 8006de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dea:	615a      	str	r2, [r3, #20]
#   endif  
    { } //to terminate "else"

    __ISR_EXIT_HOOK();
}
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	40010400 	.word	0x40010400

08006df4 <EXTI15_10_IRQHandler>:
    || ((defined(__ISR_EXTI11) || defined(__USE_EXTI11)) && !defined(__N_ISR_EXTI11)) \
    || ((defined(__ISR_EXTI12) || defined(__USE_EXTI12)) && !defined(__N_ISR_EXTI12)) \
    || ((defined(__ISR_EXTI13) || defined(__USE_EXTI13)) && !defined(__N_ISR_EXTI13)) \
    || ((defined(__ISR_EXTI14) || defined(__USE_EXTI14)) && !defined(__N_ISR_EXTI14)) \
    || ((defined(__ISR_EXTI15) || defined(__USE_EXTI15)) && !defined(__N_ISR_EXTI15)) )
void EXTI15_10_IRQHandler(void) {
 8006df4:	b508      	push	{r3, lr}
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
 
#   if ((defined(__ISR_EXTI10) || defined(__USE_EXTI10)) && !defined(__N_ISR_EXTI10))
    __EXTI_MACRO(10);
 8006df6:	4b1d      	ldr	r3, [pc, #116]	; (8006e6c <EXTI15_10_IRQHandler+0x78>)
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006dfe:	d003      	beq.n	8006e08 <EXTI15_10_IRQHandler+0x14>
 8006e00:	4b1a      	ldr	r3, [pc, #104]	; (8006e6c <EXTI15_10_IRQHandler+0x78>)
 8006e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e06:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI11) || defined(__USE_EXTI11)) && !defined(__N_ISR_EXTI11))
    __EXTI_MACRO(11);
 8006e08:	4b18      	ldr	r3, [pc, #96]	; (8006e6c <EXTI15_10_IRQHandler+0x78>)
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006e10:	d003      	beq.n	8006e1a <EXTI15_10_IRQHandler+0x26>
 8006e12:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <EXTI15_10_IRQHandler+0x78>)
 8006e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e18:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI12) || defined(__USE_EXTI12)) && !defined(__N_ISR_EXTI12))
    __EXTI_MACRO(12);
 8006e1a:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <EXTI15_10_IRQHandler+0x78>)
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006e22:	d003      	beq.n	8006e2c <EXTI15_10_IRQHandler+0x38>
 8006e24:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <EXTI15_10_IRQHandler+0x78>)
 8006e26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e2a:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI13) || defined(__USE_EXTI13)) && !defined(__N_ISR_EXTI13))
    __EXTI_MACRO(13);
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <EXTI15_10_IRQHandler+0x78>)
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006e34:	d003      	beq.n	8006e3e <EXTI15_10_IRQHandler+0x4a>
 8006e36:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <EXTI15_10_IRQHandler+0x78>)
 8006e38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e3c:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI14) || defined(__USE_EXTI14)) && !defined(__N_ISR_EXTI14))
    __EXTI_MACRO(14);
 8006e3e:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <EXTI15_10_IRQHandler+0x78>)
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006e46:	d003      	beq.n	8006e50 <EXTI15_10_IRQHandler+0x5c>
 8006e48:	4b08      	ldr	r3, [pc, #32]	; (8006e6c <EXTI15_10_IRQHandler+0x78>)
 8006e4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e4e:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI15) || defined(__USE_EXTI15)) && !defined(__N_ISR_EXTI15))
    __EXTI_MACRO(15);
 8006e50:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <EXTI15_10_IRQHandler+0x78>)
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006e58:	d100      	bne.n	8006e5c <EXTI15_10_IRQHandler+0x68>
#   endif
    { } //to terminate "else"

    __ISR_EXIT_HOOK();
}
 8006e5a:	bd08      	pop	{r3, pc}
    __EXTI_MACRO(15);
 8006e5c:	4b03      	ldr	r3, [pc, #12]	; (8006e6c <EXTI15_10_IRQHandler+0x78>)
 8006e5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006e62:	615a      	str	r2, [r3, #20]
 8006e64:	f000 fc46 	bl	80076f4 <mpipe_rxsync_isr>
}
 8006e68:	e7f7      	b.n	8006e5a <EXTI15_10_IRQHandler+0x66>
 8006e6a:	bf00      	nop
 8006e6c:	40010400 	.word	0x40010400

08006e70 <DMA1_Channel6_IRQHandler>:
    platform_isr_dma1ch5();
    __ISR_EXIT_HOOK();
}
#endif
#if (defined(__USE_DMA1_CHAN6) || defined(__ISR_DMA1_Channel6)) && !defined(__N_ISR_DMA1_Channel6)
void DMA1_Channel6_IRQHandler(void) {
 8006e70:	b508      	push	{r3, lr}
    __ISR_ENTRY_HOOK();
    platform_isr_dma1ch6();
 8006e72:	f000 ff1f 	bl	8007cb4 <platform_isr_dma1ch6>
    __ISR_EXIT_HOOK();
}
 8006e76:	bd08      	pop	{r3, pc}

08006e78 <DMA1_Channel7_IRQHandler>:
#endif
#if (defined(__USE_DMA1_CHAN7) || defined(__ISR_DMA1_Channel7)) && !defined(__N_ISR_DMA1_Channel7)
void DMA1_Channel7_IRQHandler(void) {
 8006e78:	b508      	push	{r3, lr}
    __ISR_ENTRY_HOOK();
    platform_isr_dma1ch7();
 8006e7a:	f000 ff1f 	bl	8007cbc <platform_isr_dma1ch7>
    __ISR_EXIT_HOOK();
}
 8006e7e:	bd08      	pop	{r3, pc}

08006e80 <LPTIM1_IRQHandler>:
#endif


/// Open LPTIM1 Interrupt
#if defined(__ISR_LPTIM1) && !defined(__N_ISR_LPTIM1)
void LPTIM1_IRQHandler(void) {
 8006e80:	b508      	push	{r3, lr}
    __ISR_ENTRY_HOOK();
    ///@todo Not certain this PR clear is necessary or good
    //EXTI->PR2 = (1<<(32-32));
    __ISR_KTIM_WAKEUP_HOOK();
    platform_isr_lptim1();
 8006e82:	f7ff fe33 	bl	8006aec <platform_isr_lptim1>
    __ISR_EXIT_HOOK();
}
 8006e86:	bd08      	pop	{r3, pc}

08006e88 <USART2_IRQHandler>:
    platform_isr_usart1();
    __ISR_EXIT_HOOK();
}
#endif
#if defined(__ISR_USART2) && !defined(__N_ISR_USART2)
void USART2_IRQHandler(void) {
 8006e88:	b508      	push	{r3, lr}
    __ISR_ENTRY_HOOK();
    EXTI->PR1 = (1<<27);
 8006e8a:	4b03      	ldr	r3, [pc, #12]	; (8006e98 <USART2_IRQHandler+0x10>)
 8006e8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e90:	615a      	str	r2, [r3, #20]
    __ISR_WAKEUP_HOOK();
    platform_isr_usart2();
 8006e92:	f000 fda5 	bl	80079e0 <platform_isr_usart2>
    __ISR_EXIT_HOOK();
}
 8006e96:	bd08      	pop	{r3, pc}
 8006e98:	40010400 	.word	0x40010400

08006e9c <sub_voltage_config>:
void sub_voltage_config(ot_u16 pwr_cr_vos_x) {
/// Set Power Configuration based on Voltage Level parameters.
/// Input must be: POWER_1V0, POWER_1V2
    ot_u16 scratch;
    
    scratch     = PWR->CR1 & ~(ot_u32)(PWR_CR1_VOS_Msk);
 8006e9c:	4a06      	ldr	r2, [pc, #24]	; (8006eb8 <sub_voltage_config+0x1c>)
 8006e9e:	6813      	ldr	r3, [r2, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
    scratch    |= pwr_cr_vos_x;
 8006ea6:	4318      	orrs	r0, r3
    PWR->CR1    = scratch;
 8006ea8:	6010      	str	r0, [r2, #0]

    // Wait Until the Voltage Regulator is ready
    while((PWR->SR2 & PWR_SR2_VOSF) != 0) { }
 8006eaa:	4b03      	ldr	r3, [pc, #12]	; (8006eb8 <sub_voltage_config+0x1c>)
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006eb2:	d1fa      	bne.n	8006eaa <sub_voltage_config+0xe>
}
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	40007000 	.word	0x40007000

08006ebc <sub_osc_startup>:


void sub_osc_startup(ot_u16 counter, ot_u32 osc_mask) {
 8006ebc:	b410      	push	{r4}
///@note HSIASFS bit is not set here, because the clock system
///      only uses one clock at a time.
    //ot_u32 hsi_asfs_bit;
    ot_int osc_shift;
    
    if (osc_mask & RCC_CR_HSION) {
 8006ebe:	f411 7f80 	tst.w	r1, #256	; 0x100
 8006ec2:	d010      	beq.n	8006ee6 <sub_osc_startup+0x2a>
        //hsi_asfs_bit = RCC_CR_HSIASFS;
        osc_shift    = 2;
 8006ec4:	2402      	movs	r4, #2
        //hsi_asfs_bit = 0;
        osc_shift    = 1;
    }
    
    // Wait for Oscillator to get ready, counter goes to 0 on failure
    RCC->CR    |= osc_mask /*| hsi_asfs_bit*/;
 8006ec6:	4a09      	ldr	r2, [pc, #36]	; (8006eec <sub_osc_startup+0x30>)
 8006ec8:	6813      	ldr	r3, [r2, #0]
 8006eca:	430b      	orrs	r3, r1
 8006ecc:	6013      	str	r3, [r2, #0]
    osc_mask  <<= osc_shift;
 8006ece:	40a1      	lsls	r1, r4
    while ( ((RCC->CR & osc_mask) == 0) && (--counter) );
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <sub_osc_startup+0x30>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	420b      	tst	r3, r1
 8006ed6:	d103      	bne.n	8006ee0 <sub_osc_startup+0x24>
 8006ed8:	3801      	subs	r0, #1
 8006eda:	b280      	uxth	r0, r0
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d1f7      	bne.n	8006ed0 <sub_osc_startup+0x14>

    /// Test if oscillator failed to startup
    if (counter == 0) {
        ///@todo Death message / Death Blinkly
    }
}
 8006ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ee4:	4770      	bx	lr
        osc_shift    = 1;
 8006ee6:	2401      	movs	r4, #1
 8006ee8:	e7ed      	b.n	8006ec6 <sub_osc_startup+0xa>
 8006eea:	bf00      	nop
 8006eec:	40021000 	.word	0x40021000

08006ef0 <sub_setclocks>:
    ot_u32 ahb_hz;
    ot_u32 apb1_hz;
    ot_u32 apb2_hz;
} setclocks_t;

void sub_setclocks(SPEED_enum mode) {
 8006ef0:	b470      	push	{r4, r5, r6}
    };
    ot_u32 scratch;
    const setclocks_t* mode_params;

    // Configure clock source and dividers
    scratch     = RCC->CFGR;
 8006ef2:	4c0f      	ldr	r4, [pc, #60]	; (8006f30 <sub_setclocks+0x40>)
 8006ef4:	68a3      	ldr	r3, [r4, #8]
    scratch    &= ~(RCC_CFGR_HPRE_Msk|RCC_CFGR_PPRE1_Msk|RCC_CFGR_PPRE2_Msk|RCC_CFGR_SW_Msk);
 8006ef6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006efa:	f023 0333 	bic.w	r3, r3, #51	; 0x33
    mode_params = &params[mode];

    platform_ext.clock_hz[0] = mode_params->ahb_hz;      //AHB
 8006efe:	4d0d      	ldr	r5, [pc, #52]	; (8006f34 <sub_setclocks+0x44>)
 8006f00:	0100      	lsls	r0, r0, #4
 8006f02:	1829      	adds	r1, r5, r0
 8006f04:	684e      	ldr	r6, [r1, #4]
 8006f06:	4a0c      	ldr	r2, [pc, #48]	; (8006f38 <sub_setclocks+0x48>)
 8006f08:	6056      	str	r6, [r2, #4]
    platform_ext.clock_hz[1] = mode_params->apb1_hz;      //APB1
 8006f0a:	688e      	ldr	r6, [r1, #8]
 8006f0c:	6096      	str	r6, [r2, #8]
    platform_ext.clock_hz[2] = mode_params->apb2_hz;      //APB2
 8006f0e:	68c9      	ldr	r1, [r1, #12]
 8006f10:	60d1      	str	r1, [r2, #12]

    scratch    |= mode_params->cfgr_val;
 8006f12:	582a      	ldr	r2, [r5, r0]
 8006f14:	431a      	orrs	r2, r3
    RCC->CFGR   = scratch;
 8006f16:	60a2      	str	r2, [r4, #8]
    
    // Validate that configuration was successful, and bail-out to hwfault if not.
    scratch     = (scratch & 3) << 2;
 8006f18:	0092      	lsls	r2, r2, #2
 8006f1a:	f002 020c 	and.w	r2, r2, #12
    while ( (RCC->CFGR & (3<<2)) != scratch) {
 8006f1e:	4b04      	ldr	r3, [pc, #16]	; (8006f30 <sub_setclocks+0x40>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 030c 	and.w	r3, r3, #12
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d1f9      	bne.n	8006f1e <sub_setclocks+0x2e>
        ///@todo have this fail into hardware fault
    }
}
 8006f2a:	bc70      	pop	{r4, r5, r6}
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	40021000 	.word	0x40021000
 8006f34:	08009f70 	.word	0x08009f70
 8006f38:	20002e00 	.word	0x20002e00

08006f3c <platform_get_clockhz>:
/** Clock Hz retrieval function
  * ========================================================================<BR>
  */
ot_ulong platform_get_clockhz(ot_uint clock_index) {
#   if defined(__DEBUG__)
    if (clock_index > 2) {
 8006f3c:	2802      	cmp	r0, #2
 8006f3e:	d900      	bls.n	8006f42 <platform_get_clockhz+0x6>
 8006f40:	e7fe      	b.n	8006f40 <platform_get_clockhz+0x4>
        while(1);   //trap in debugging
    }
#   endif
    return (clock_index > 2) ? 0 : platform_ext.clock_hz[clock_index];
 8006f42:	4b02      	ldr	r3, [pc, #8]	; (8006f4c <platform_get_clockhz+0x10>)
 8006f44:	eb03 0380 	add.w	r3, r3, r0, lsl #2
}
 8006f48:	6858      	ldr	r0, [r3, #4]
 8006f4a:	4770      	bx	lr
 8006f4c:	20002e00 	.word	0x20002e00

08006f50 <platform_disable_interrupts>:
  __ASM volatile ("cpsid i" : : : "memory");
 8006f50:	b672      	cpsid	i
  */

#ifndef EXTF_platform_disable_interrupts
OT_INLINE void platform_disable_interrupts(void) {
    __disable_irq();    // CMSIS intrinsic
}
 8006f52:	4770      	bx	lr

08006f54 <platform_enable_interrupts>:
  __ASM volatile ("cpsie i" : : : "memory");
 8006f54:	b662      	cpsie	i


#ifndef EXTF_platform_enable_interrupts
OT_INLINE void platform_enable_interrupts(void) {
    __enable_irq();     // CMSIS intrinsic
}
 8006f56:	4770      	bx	lr

08006f58 <platform_init_OT>:
#endif



#ifndef EXTF_platform_init_OT
void platform_init_OT() {
 8006f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f5a:	b085      	sub	sp, #20
    /// 1. Initialize Data sources required by basically all OT features
    ///    - Buffers module allocates the data queues, used by all I/O
    ///    - Veelite module allocates and prepares the filesystem
    buffers_init();
 8006f5c:	f7fe fe5c 	bl	8005c18 <buffers_init>
    vl_init();
 8006f60:	f7ff fb28 	bl	80065b4 <vl_init>

    /// 2. Initialize the System Time.  If the build does not support time,
    ///    then this will do nothing.
    time_set_utc(364489200);
 8006f64:	4833      	ldr	r0, [pc, #204]	; (8007034 <platform_init_OT+0xdc>)
 8006f66:	f7ff fd2c 	bl	80069c2 <time_set_utc>

    /// 3. Look for errors, report them, and make sure to clear the error RAM.
    /// @note This is a decent place to put a breakpoint when debugging.
    if (TAMP->BKP2R != 0) {
 8006f6a:	4b33      	ldr	r3, [pc, #204]	; (8007038 <platform_init_OT+0xe0>)
 8006f6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006f70:	b983      	cbnz	r3, 8006f94 <platform_init_OT+0x3c>
        } chip_id;
        ot_u16* hwid;
        ot_int  i;

        // 96 bits with ASCII
        chip_id.word[2] = *((ot_u32*)(0x1FFF7590));     //X/Y coords on wafer
 8006f72:	4b32      	ldr	r3, [pc, #200]	; (800703c <platform_init_OT+0xe4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	9303      	str	r3, [sp, #12]
        chip_id.word[1] = *((ot_u32*)(0x1FFF7594));     //Lower Lot number (ASCII, b31:8) and wafer number (b7:0)
 8006f78:	4b31      	ldr	r3, [pc, #196]	; (8007040 <platform_init_OT+0xe8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	9302      	str	r3, [sp, #8]
        chip_id.word[0] = *((ot_u32*)(0x1FFF7598));     //Upper Lot number (ASCII)
 8006f7e:	4b31      	ldr	r3, [pc, #196]	; (8007044 <platform_init_OT+0xec>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	9301      	str	r3, [sp, #4]
        
        ///@todo compression of the ID.  There are many gaps in the ID
        fpid    = ISF_open_su(ISF_ID(device_features));
 8006f84:	2001      	movs	r0, #1
 8006f86:	f7ff fafb 	bl	8006580 <ISF_open_su>
 8006f8a:	4606      	mov	r6, r0
        hwid    = &chip_id.halfw[3];
        for (i=6; i!=0; i-=2) {
 8006f8c:	2106      	movs	r1, #6
        hwid    = &chip_id.halfw[3];
 8006f8e:	f10d 030a 	add.w	r3, sp, #10
        for (i=6; i!=0; i-=2) {
 8006f92:	e045      	b.n	8007020 <platform_init_OT+0xc8>
        error.ulong     = TAMP->BKP2R;
 8006f94:	4b28      	ldr	r3, [pc, #160]	; (8007038 <platform_init_OT+0xe0>)
 8006f96:	f8d3 7108 	ldr.w	r7, [r3, #264]	; 0x108
        TAMP->BKP2R     = 0;
 8006f9a:	2500      	movs	r5, #0
 8006f9c:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
        fp              = ISF_open_su(ISF_ID(hardware_fault_status));
 8006fa0:	2016      	movs	r0, #22
 8006fa2:	f7ff faed 	bl	8006580 <ISF_open_su>
 8006fa6:	4604      	mov	r4, r0
        resets.ushort   = vl_read(fp, 0);
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f7ff fa32 	bl	8006412 <vl_read>
 8006fae:	4605      	mov	r5, r0
        faults.ushort   = vl_read(fp, 2);
 8006fb0:	2102      	movs	r1, #2
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f7ff fa2d 	bl	8006412 <vl_read>
 8006fb8:	4606      	mov	r6, r0
 8006fba:	b2b9      	uxth	r1, r7
        resets.ubyte[0]+= (error.ushort[LOWER] != 0);
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	bf0c      	ite	eq
 8006fc0:	462b      	moveq	r3, r5
 8006fc2:	1c6b      	addne	r3, r5, #1
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	f363 0207 	bfi	r2, r3, #0, #8
        resets.ubyte[1]+= (error.ushort[UPPER] != 0);
 8006fcc:	0c3b      	lsrs	r3, r7, #16
 8006fce:	bf14      	ite	ne
 8006fd0:	2301      	movne	r3, #1
 8006fd2:	2300      	moveq	r3, #0
 8006fd4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8006fd8:	441d      	add	r5, r3
 8006fda:	f365 220f 	bfi	r2, r5, #8, #8
 8006fde:	0a00      	lsrs	r0, r0, #8
        faults.ubyte[1]+= (error.ushort[LOWER] == 11) << 1; //Memory Fault
 8006fe0:	290b      	cmp	r1, #11
 8006fe2:	d011      	beq.n	8007008 <platform_init_OT+0xb0>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	4418      	add	r0, r3
 8006fe8:	f360 260f 	bfi	r6, r0, #8, #8
        vl_write(fp, 0, resets.ushort);
 8006fec:	b292      	uxth	r2, r2
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f7ff fa15 	bl	8006420 <vl_write>
        vl_write(fp, 2, faults.ushort);
 8006ff6:	b2b2      	uxth	r2, r6
 8006ff8:	2102      	movs	r1, #2
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7ff fa10 	bl	8006420 <vl_write>
        vl_close(fp);
 8007000:	4620      	mov	r0, r4
 8007002:	f7ff fa85 	bl	8006510 <vl_close>
 8007006:	e7b4      	b.n	8006f72 <platform_init_OT+0x1a>
        faults.ubyte[1]+= (error.ushort[LOWER] == 11) << 1; //Memory Fault
 8007008:	2302      	movs	r3, #2
 800700a:	e7ec      	b.n	8006fe6 <platform_init_OT+0x8e>
            vl_write(fpid, i, *hwid++);
 800700c:	b28c      	uxth	r4, r1
 800700e:	1c9d      	adds	r5, r3, #2
 8007010:	881a      	ldrh	r2, [r3, #0]
 8007012:	4621      	mov	r1, r4
 8007014:	4630      	mov	r0, r6
 8007016:	f7ff fa03 	bl	8006420 <vl_write>
        for (i=6; i!=0; i-=2) {
 800701a:	1ea1      	subs	r1, r4, #2
 800701c:	b209      	sxth	r1, r1
            vl_write(fpid, i, *hwid++);
 800701e:	462b      	mov	r3, r5
        for (i=6; i!=0; i-=2) {
 8007020:	2900      	cmp	r1, #0
 8007022:	d1f3      	bne.n	800700c <platform_init_OT+0xb4>
        }
        vl_close(fpid);
 8007024:	4630      	mov	r0, r6
 8007026:	f7ff fa73 	bl	8006510 <vl_close>
#   endif
    
    /// 5. Initialize the System (Kernel & more).  The System initializer must
    ///    initialize all modules that are built onto the kernel.  These include
    ///    the DLL and MPipe.
    sys_init();
 800702a:	f7ff fba5 	bl	8006778 <sys_init>
}
 800702e:	b005      	add	sp, #20
 8007030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007032:	bf00      	nop
 8007034:	15b9a9f0 	.word	0x15b9a9f0
 8007038:	40003400 	.word	0x40003400
 800703c:	1fff7590 	.word	0x1fff7590
 8007040:	1fff7594 	.word	0x1fff7594
 8007044:	1fff7598 	.word	0x1fff7598

08007048 <platform_init_busclk>:
#endif



#ifndef EXTF_platform_init_busclk
void platform_init_busclk() {
 8007048:	b538      	push	{r3, r4, r5, lr}
/// the top of platform_poweron().

    // Load Default Clock Configuration
    // On the STM32L4 platform, OpenTag uses HSI16 for a number of peripherals.
    // HSI16 MUST be available, and thus it's OK to have STOPWUCK set permanently.
    RCC->CFGR |= RCC_CFGR_STOPWUCK;
 800704a:	4c11      	ldr	r4, [pc, #68]	; (8007090 <platform_init_busclk+0x48>)
 800704c:	68a3      	ldr	r3, [r4, #8]
 800704e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007052:	60a3      	str	r3, [r4, #8]

    // Load Default PLL specification.
    // This specification cannot be changed at runtime.
    RCC->PLLCFGR = _PLL_DIV | _PLL_MULT | (0<<4) | _PLL_SRC;
 8007054:	2500      	movs	r5, #0
 8007056:	60e5      	str	r5, [r4, #12]
    
    // MSI is the startup clock.  HSI, however, is to be our default clock via using 
    // the STOPWUCK bit.  Several peripherals will use HSI16 directly, so it will be
    // always on.
    // HSI @ 16MHz and 1.2V never require flash wait states or prefetch
    sub_osc_startup(300, RCC_CR_HSION);
 8007058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800705c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007060:	f7ff ff2c 	bl	8006ebc <sub_osc_startup>
    sub_setclocks(SPEED_Std);
 8007064:	4628      	mov	r0, r5
 8007066:	f7ff ff43 	bl	8006ef0 <sub_setclocks>
    FLASH->ACR = (FLASH_ACR_DCEN | FLASH_ACR_ICEN);
 800706a:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <platform_init_busclk+0x4c>)
 800706c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007070:	601a      	str	r2, [r3, #0]
    
    // Disable all clocks that aren't HSI16, and disable all clock interrupts
    RCC->CR    &= ~(RCC_CR_HSEON|RCC_CR_HSEBYP|RCC_CR_CSSON|RCC_CR_PLLON|RCC_CR_MSION);
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	f023 7386 	bic.w	r3, r3, #17563648	; 0x10c0000
 8007078:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800707c:	6023      	str	r3, [r4, #0]
    RCC->CIER   = 0;
 800707e:	61a5      	str	r5, [r4, #24]
#   elif BOARD_FEATURE(FLANKSPEED)
        platform_flank_speed();

#   endif
    
    RCC->CCIPR  = (0) \
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <platform_init_busclk+0x50>)
 8007082:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    /// X. Vector Table Relocation in Internal SRAM or FLASH.
#   ifdef VECT_TAB_SRAM
#       error "Silly rabbit! SRAM is for DATA!"
        SCB->VTOR   = SRAM_BASE;
#   else
        SCB->VTOR   = FLASH_BASE;
 8007086:	4b05      	ldr	r3, [pc, #20]	; (800709c <platform_init_busclk+0x54>)
 8007088:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800708c:	609a      	str	r2, [r3, #8]
#   endif
}
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	40021000 	.word	0x40021000
 8007094:	40022000 	.word	0x40022000
 8007098:	003c0c00 	.word	0x003c0c00
 800709c:	e000ed00 	.word	0xe000ed00

080070a0 <platform_init_periphclk>:
/// LPTIM1, 2, and the RTC are all driven by the LF clock.

    ///@todo have a setting that looks at the backup domain to make sure the clocking
    ///      for it is not already what it should be.
    
    PWR->CR1 |= PWR_CR1_DBP;
 80070a0:	4a0d      	ldr	r2, [pc, #52]	; (80070d8 <platform_init_periphclk+0x38>)
 80070a2:	6813      	ldr	r3, [r2, #0]
 80070a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a8:	6013      	str	r3, [r2, #0]
    //RCC->BDCR |= RCC_BDCR_RTCRST;
    
#   if BOARD_FEATURE(LFXTAL)
        RCC->CSR    = RCC_CSR_RMVF;
 80070aa:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <platform_init_periphclk+0x3c>)
 80070ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80070b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        RCC->BDCR  = (1<<RCC_BDCR_LSCOSEL_Pos) \
 80070b4:	4a0a      	ldr	r2, [pc, #40]	; (80070e0 <platform_init_periphclk+0x40>)
 80070b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                    | (b01<<RCC_BDCR_RTCSEL_Pos) \
                    | RCC_BDCR_LSECSSD \
                    | (b00<<RCC_BDCR_LSEDRV_Pos) \
                    | RCC_BDCR_LSEON;
                
        while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0);
 80070ba:	4b08      	ldr	r3, [pc, #32]	; (80070dc <platform_init_periphclk+0x3c>)
 80070bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c0:	f013 0f02 	tst.w	r3, #2
 80070c4:	d0f9      	beq.n	80070ba <platform_init_periphclk+0x1a>
    
        RCC->BDCR |= RCC_BDCR_LSCOEN | RCC_BDCR_RTCEN | RCC_BDCR_LSECSSON;   
 80070c6:	4a05      	ldr	r2, [pc, #20]	; (80070dc <platform_init_periphclk+0x3c>)
 80070c8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80070cc:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <platform_init_periphclk+0x44>)
 80070ce:	430b      	orrs	r3, r1
 80070d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    
        RCC->BDCR  = (0<<RCC_BDCR_LSCOSEL_Pos) | RCC_BDCR_LSCOEN \
                    | (b10<<RCC_BDCR_RTCSEL_Pos) | RCC_BDCR_RTCEN;
#   endif

}
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40007000 	.word	0x40007000
 80070dc:	40021000 	.word	0x40021000
 80070e0:	02000141 	.word	0x02000141
 80070e4:	01008020 	.word	0x01008020

080070e8 <platform_init_interruptor>:
    SYSCFG->EXTICR[0]   = (0 << 0) \
 80070e8:	4b2d      	ldr	r3, [pc, #180]	; (80071a0 <platform_init_interruptor+0xb8>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	609a      	str	r2, [r3, #8]
    SYSCFG->EXTICR[1]   = (0 << 0) \
 80070ee:	60da      	str	r2, [r3, #12]
    SYSCFG->EXTICR[2]   = (0 << 0) \
 80070f0:	611a      	str	r2, [r3, #16]
    SYSCFG->EXTICR[3]   = (0 << 0) \
 80070f2:	615a      	str	r2, [r3, #20]
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070f4:	4b2b      	ldr	r3, [pc, #172]	; (80071a4 <platform_init_interruptor+0xbc>)
 80070f6:	68d8      	ldr	r0, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070f8:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80070fc:	0400      	lsls	r0, r0, #16
 80070fe:	0c00      	lsrs	r0, r0, #16
  reg_value  =  (reg_value                                   |
 8007100:	4929      	ldr	r1, [pc, #164]	; (80071a8 <platform_init_interruptor+0xc0>)
 8007102:	4301      	orrs	r1, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8007104:	60d9      	str	r1, [r3, #12]
    /// <LI> Systick is not used and it is inadvisable to use because it is a
    ///         power hog and because it is mostly useless with OpenTag. </LI>
//  SCB->SHP[((uint32_t)(MemoryManagement_IRQn)&0xF)-4] = (b0000 << 4);
//  SCB->SHP[((uint32_t)(BusFault_IRQn)&0xF)-4]         = (b0000 << 4);
//  SCB->SHP[((uint32_t)(UsageFault_IRQn)&0xF)-4]       = (b0000 << 4);
    SCB->SHP[((uint32_t)(SVCall_IRQn)&0xF)-4]              = (b0000 << 4);
 8007106:	77da      	strb	r2, [r3, #31]
    SCB->SHP[((uint32_t)(PendSV_IRQn)&0xF)-4]           = (b1111 << 4);
 8007108:	21f0      	movs	r1, #240	; 0xf0
 800710a:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    /// in their individual I/O driver initializers.
    ///    <LI> NMI will interrupt anything.  It is used for panics.    </LI>
    ///    <LI> SVC is priority 0-0.  It runs the scheduler. </LI>
    ///    <LI> GPTIM (via LPTIM1) is priority 0-1.  It runs the tasker.  </LI>
    ///    <LI> RTC-Wakeup is priority 0-0, for critical interval timing tasks </LI>
    EXTI->PR1   = (1<<20);
 800710e:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8007112:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8007116:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800711a:	6159      	str	r1, [r3, #20]
    EXTI->PR2   = (1<<(32-32));
 800711c:	2101      	movs	r1, #1
 800711e:	6359      	str	r1, [r3, #52]	; 0x34
    EXTI->IMR1 |= (1<<20);
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007126:	6019      	str	r1, [r3, #0]
    EXTI->IMR2 |= (1<<(32-32));
 8007128:	6a19      	ldr	r1, [r3, #32]
 800712a:	f041 0101 	orr.w	r1, r1, #1
 800712e:	6219      	str	r1, [r3, #32]
    EXTI->RTSR1|= (1<<20);
 8007130:	6899      	ldr	r1, [r3, #8]
 8007132:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007136:	6099      	str	r1, [r3, #8]
    EXTI->RTSR2|= (1<<(32-32));
 8007138:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800713a:	f041 0101 	orr.w	r1, r1, #1
 800713e:	6299      	str	r1, [r3, #40]	; 0x28
    NVIC->IP[(uint32_t)(LPTIM1_IRQn)]           = ((_KERNEL_GROUP+_OT_SUB1) << 4);
 8007140:	4b1a      	ldr	r3, [pc, #104]	; (80071ac <platform_init_interruptor+0xc4>)
 8007142:	2110      	movs	r1, #16
 8007144:	f883 1341 	strb.w	r1, [r3, #833]	; 0x341
    NVIC->ISER[((uint32_t)(LPTIM1_IRQn)>>5)]    = (1 << ((uint32_t)(LPTIM1_IRQn) & 0x1F));
 8007148:	2102      	movs	r1, #2
 800714a:	6099      	str	r1, [r3, #8]
    NVIC->IP[(uint32_t)(RTC_WKUP_IRQn)]         = (_KERNEL_GROUP << 4);
 800714c:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
    NVIC->ISER[((uint32_t)(RTC_WKUP_IRQn)>>5)]  = (1 << ((uint32_t)(RTC_WKUP_IRQn) & 0x1F));
 8007150:	2208      	movs	r2, #8
 8007152:	601a      	str	r2, [r3, #0]
    
    /// 5. Setup other external interrupts
#   ifdef __USE_EXTI0
    NVIC->IP[(uint32_t)(EXTI0_IRQn)]        = (PLATFORM_NVIC_IO_GROUP << 4);
 8007154:	2280      	movs	r2, #128	; 0x80
 8007156:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
    NVIC->ISER[((uint32_t)(EXTI0_IRQn)>>5)] = (1 << ((uint32_t)(EXTI0_IRQn) & 0x1F));
 800715a:	2140      	movs	r1, #64	; 0x40
 800715c:	6019      	str	r1, [r3, #0]
#   endif
#   ifdef __USE_EXTI1
    NVIC->IP[(uint32_t)(EXTI1_IRQn)]        = (PLATFORM_NVIC_IO_GROUP << 4);
 800715e:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
    NVIC->ISER[((uint32_t)(EXTI1_IRQn)>>5)] = (1 << ((uint32_t)(EXTI1_IRQn) & 0x1F));
 8007162:	601a      	str	r2, [r3, #0]
#   endif
#   ifdef __USE_EXTI2
    NVIC->IP[(uint32_t)(EXTI2_IRQn)]        = (PLATFORM_NVIC_IO_GROUP << 4);
 8007164:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
    NVIC->ISER[((uint32_t)(EXTI2_IRQn)>>5)] = (1 << ((uint32_t)(EXTI2_IRQn) & 0x1F));
 8007168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800716c:	6019      	str	r1, [r3, #0]
#   endif
#   ifdef __USE_EXTI3
    NVIC->IP[(uint32_t)(EXTI3_IRQn)]        = (PLATFORM_NVIC_IO_GROUP << 4);
 800716e:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
    NVIC->ISER[((uint32_t)(EXTI3_IRQn)>>5)] = (1 << ((uint32_t)(EXTI3_IRQn) & 0x1F));
 8007172:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007176:	6018      	str	r0, [r3, #0]
#   endif
#   ifdef __USE_EXTI4
    NVIC->IP[(uint32_t)(EXTI4_IRQn)]        = (PLATFORM_NVIC_IO_GROUP << 4);
 8007178:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    NVIC->ISER[((uint32_t)(EXTI4_IRQn)>>5)] = (1 << ((uint32_t)(EXTI4_IRQn) & 0x1F));
 800717c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007180:	6018      	str	r0, [r3, #0]
#   endif
#   if (  defined(__USE_EXTI5) || defined(__USE_EXTI6) || defined(__USE_EXTI7) \
       || defined(__USE_EXTI8) || defined(__USE_EXTI9) )
    NVIC->IP[(uint32_t)(EXTI9_5_IRQn)]        = (PLATFORM_NVIC_IO_GROUP << 4);
 8007182:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
    NVIC->ISER[((uint32_t)(EXTI9_5_IRQn)>>5)] = (1 << ((uint32_t)(EXTI9_5_IRQn) & 0x1F));
 8007186:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800718a:	6018      	str	r0, [r3, #0]
#   endif
#   if (  defined(__USE_EXTI15) || defined(__USE_EXTI14) || defined(__USE_EXTI13) \
       || defined(__USE_EXTI12) || defined(__USE_EXTI11) || defined(__USE_EXTI10) )
    NVIC->IP[(uint32_t)(EXTI15_10_IRQn)]        = (PLATFORM_NVIC_IO_GROUP << 4);
 800718c:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
    NVIC->ISER[((uint32_t)(EXTI15_10_IRQn)>>5)] = (1 << ((uint32_t)(EXTI15_10_IRQn) & 0x1F));
 8007190:	6059      	str	r1, [r3, #4]

    /// 6. Setup ADC interrupt.  This is needed only for ADC-enabled builds,
    ///    but ADC is frequently used, so it is enabled by default.
    ///    The priority is "High Priority", although this is relative to Task Group
    ///    (not Kernel Group).
    NVIC->IP[(uint32_t)(ADC1_2_IRQn)]         = (_HIPRI_BASE << 4);
 8007192:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
    NVIC->ISER[((uint32_t)(ADC1_2_IRQn)>>5)]  = (1 << ((uint32_t)(ADC1_2_IRQn) & 0x1F));
 8007196:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800719a:	601a      	str	r2, [r3, #0]
}
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40010000 	.word	0x40010000
 80071a4:	e000ed00 	.word	0xe000ed00
 80071a8:	05fa0600 	.word	0x05fa0600
 80071ac:	e000e100 	.word	0xe000e100

080071b0 <platform_poweron>:
void platform_poweron() {
 80071b0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80071b2:	f3ef 8308 	mrs	r3, MSP
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80071b6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80071ba:	2302      	movs	r3, #2
 80071bc:	f383 8814 	msr	CONTROL, r3
    __set_MSP( (ot_u32)&platform_ext.sstack[(OT_PARAM_SSTACK_ALLOC/4)-1] );
 80071c0:	4c31      	ldr	r4, [pc, #196]	; (8007288 <platform_poweron+0xd8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80071c2:	f384 8808 	msr	MSP, r4
    RCC->AHB1ENR    = (_TSCCLK_N | _CRCCLK_N | _FLASHCLK_N | _DMA2CLK_N | _DMA1CLK_N);
 80071c6:	4b31      	ldr	r3, [pc, #196]	; (800728c <platform_poweron+0xdc>)
 80071c8:	f241 1201 	movw	r2, #4353	; 0x1101
 80071cc:	649a      	str	r2, [r3, #72]	; 0x48
    RCC->AHB1SMENR  = (_TSCCLK_LP | _CRCCLK_LP | _FLASHCLK_LP | _DMA2CLK_LP | _DMA1CLK_LP);
 80071ce:	f240 1203 	movw	r2, #259	; 0x103
 80071d2:	669a      	str	r2, [r3, #104]	; 0x68
    RCC->AHB2ENR    = (_RNGCLK_N | _AESCLK_N | _ADCCLK_N | _GPIOCLK_SU);
 80071d4:	2287      	movs	r2, #135	; 0x87
 80071d6:	64da      	str	r2, [r3, #76]	; 0x4c
    RCC->AHB2SMENR  = (_RNGCLK_LP | _AESCLK_LP | _ADCCLK_LP | _GPIOCLK_LP);
 80071d8:	4a2d      	ldr	r2, [pc, #180]	; (8007290 <platform_poweron+0xe0>)
 80071da:	66da      	str	r2, [r3, #108]	; 0x6c
    RCC->APB1ENR1   = (RCC_APB1ENR1_LPTIM1EN | RCC_APB1ENR1_PWREN | RCC_APB1ENR1_RTCAPBEN);
 80071dc:	4a2d      	ldr	r2, [pc, #180]	; (8007294 <platform_poweron+0xe4>)
 80071de:	659a      	str	r2, [r3, #88]	; 0x58
    RCC->APB2ENR   = (RCC_APB2ENR_SYSCFGEN);
 80071e0:	2201      	movs	r2, #1
 80071e2:	661a      	str	r2, [r3, #96]	; 0x60
    PWR->CR2 = PWR_CR2_PVME3;
 80071e4:	f5a3 33d0 	sub.w	r3, r3, #106496	; 0x1a000
 80071e8:	2240      	movs	r2, #64	; 0x40
 80071ea:	605a      	str	r2, [r3, #4]
    PWR->CR3 = PWR_CR3_ENULP | PWR_CR3_RRS;
 80071ec:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80071f0:	609a      	str	r2, [r3, #8]
    sub_voltage_config(POWER_1V2);
 80071f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80071f6:	f7ff fe51 	bl	8006e9c <sub_voltage_config>
    GPIOA->BSRR = (BOARD_RFSPI_NSSPIN | BOARD_UART_TXPIN);
 80071fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071fe:	2214      	movs	r2, #20
 8007200:	619a      	str	r2, [r3, #24]
    GPIOA->OSPEEDR  = (GPIO_OSPEEDR_10MHz << (0*2)) \
 8007202:	4a25      	ldr	r2, [pc, #148]	; (8007298 <platform_poweron+0xe8>)
 8007204:	609a      	str	r2, [r3, #8]
    GPIOA->MODER    = (GPIO_MODER_IN     << (0*2)) \
 8007206:	4a25      	ldr	r2, [pc, #148]	; (800729c <platform_poweron+0xec>)
 8007208:	601a      	str	r2, [r3, #0]
    GPIOA->OTYPER   = 0; //(1 << (2));
 800720a:	2500      	movs	r5, #0
 800720c:	605d      	str	r5, [r3, #4]
    GPIOA->PUPDR    = (2 << (0*2)) \
 800720e:	4a24      	ldr	r2, [pc, #144]	; (80072a0 <platform_poweron+0xf0>)
 8007210:	60da      	str	r2, [r3, #12]
    GPIOA->AFR[0]   = (7 << (BOARD_UART_TXPINNUM*4)) \
 8007212:	4a24      	ldr	r2, [pc, #144]	; (80072a4 <platform_poweron+0xf4>)
 8007214:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[1]   = (3 << ((BOARD_UART_RXPINNUM-8)*4));
 8007216:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800721a:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB->BSRR     = (1 << (BOARD_I2C_SCLPINNUM)) | (1 << (BOARD_I2C_SDAPINNUM));
 800721c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007220:	22c0      	movs	r2, #192	; 0xc0
 8007222:	619a      	str	r2, [r3, #24]
    GPIOB->OTYPER   = (1 << (BOARD_I2C_SCLPINNUM)) | (1 << (BOARD_I2C_SDAPINNUM));
 8007224:	605a      	str	r2, [r3, #4]
    GPIOB->OSPEEDR  = (GPIO_OSPEEDR_10MHz << (0*2)) \
 8007226:	f64a 228a 	movw	r2, #43658	; 0xaa8a
 800722a:	609a      	str	r2, [r3, #8]
    GPIOB->MODER    = (GPIO_MODER_ANALOG << (0*2)) \
 800722c:	f46f 42b5 	mvn.w	r2, #23168	; 0x5a80
 8007230:	601a      	str	r2, [r3, #0]
	GPIOB->AFR[0]   = (4 << ((BOARD_I2C_SCLPINNUM)*4)) \
 8007232:	f04f 4288 	mov.w	r2, #1140850688	; 0x44000000
 8007236:	621a      	str	r2, [r3, #32]
    GPIOC->MODER    = (GPIO_MODER_ANALOG << (0*2)) \
 8007238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800723c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007240:	601a      	str	r2, [r3, #0]
    platform_init_periphclk();
 8007242:	f7ff ff2d 	bl	80070a0 <platform_init_periphclk>
    platform_init_busclk();
 8007246:	f7ff feff 	bl	8007048 <platform_init_busclk>
    DBGMCU->CR         |= ( DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
 800724a:	4b17      	ldr	r3, [pc, #92]	; (80072a8 <platform_poweron+0xf8>)
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	f042 0207 	orr.w	r2, r2, #7
 8007252:	605a      	str	r2, [r3, #4]
    DBGMCU->APB1FZR1   |=DBGMCU_APB1FZR1_DBG_TIM2_STOP \
 8007254:	6899      	ldr	r1, [r3, #8]
 8007256:	4a15      	ldr	r2, [pc, #84]	; (80072ac <platform_poweron+0xfc>)
 8007258:	430a      	orrs	r2, r1
 800725a:	609a      	str	r2, [r3, #8]
    DBGMCU->APB1FZR2   |= DBGMCU_APB1FZR2_DBG_LPTIM2_STOP;
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	f042 0220 	orr.w	r2, r2, #32
 8007262:	60da      	str	r2, [r3, #12]
    DBGMCU->APB2FZ     |=DBGMCU_APB2FZ_DBG_TIM1_STOP \
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	f442 3242 	orr.w	r2, r2, #198656	; 0x30800
 800726a:	611a      	str	r2, [r3, #16]
    platform_init_interruptor();    // Interrupts OpenTag cares about
 800726c:	f7ff ff3c 	bl	80070e8 <platform_init_interruptor>
    systim_init(NULL);         // Initialize GPTIM (to 1024 Hz)
 8007270:	4628      	mov	r0, r5
 8007272:	f7ff fc65 	bl	8006b40 <systim_init>
    vworm_init();
 8007276:	f000 fd25 	bl	8007cc4 <vworm_init>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800727a:	f3ef 8309 	mrs	r3, PSP
    platform_ext.task_exit = (void*)__get_PSP();
 800727e:	f5a4 6482 	sub.w	r4, r4, #1040	; 0x410
 8007282:	6023      	str	r3, [r4, #0]
}
 8007284:	bd38      	pop	{r3, r4, r5, pc}
 8007286:	bf00      	nop
 8007288:	20003210 	.word	0x20003210
 800728c:	40021000 	.word	0x40021000
 8007290:	00042001 	.word	0x00042001
 8007294:	90000400 	.word	0x90000400
 8007298:	bc2afeaa 	.word	0xbc2afeaa
 800729c:	2bf0a910 	.word	0x2bf0a910
 80072a0:	6402008a 	.word	0x6402008a
 80072a4:	55500700 	.word	0x55500700
 80072a8:	e0042000 	.word	0xe0042000
 80072ac:	80e01c11 	.word	0x80e01c11

080072b0 <SVC_Handler>:


/** KERNEL INTERRUPTS
  * =================
  */
void SVC_Handler(void) {
 80072b0:	b508      	push	{r3, lr}
/// At present, the only protected system call is the call to the scheduler.
/// (sys_event_manager()).  Future system calls might make-use of the SVC
/// vectoring, however.
    sys_event_manager();
 80072b2:	f7ff facd 	bl	8006850 <sys_event_manager>
       default: //sys_notify();
                break;  //goto SVC_Handler_eventmgr;
    }

#endif
}
 80072b6:	bd08      	pop	{r3, pc}

080072b8 <PendSV_Handler>:
/// PendSV ISR is issued if and only if some task or event is asynchronously
/// pre-empting the kernel.  It is invoked __only__ through platform_ot_preempt().
/// @note SV is for "Supervisor," not "Sport Veloce"

    // There is an erratum that PendSV bit is not adequately cleared in HW
    __CLR_PENDSV();
 80072b8:	4a03      	ldr	r2, [pc, #12]	; (80072c8 <PendSV_Handler+0x10>)
 80072ba:	6853      	ldr	r3, [r2, #4]
 80072bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072c0:	6053      	str	r3, [r2, #4]

    // SVC(0) runs the scheduler runtime in protected context
    __SEND_SVC(0);
 80072c2:	df00      	svc	0
}
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	e000ed00 	.word	0xe000ed00

080072cc <platform_ot_preempt>:
/// Run the kernel scheduler by using system call.  If running a kernel task,
/// do not run the scheduler (we check this by inspecting the KTIM interrupt
/// enabler bit), as the ktask will run to completion and do the call in its
/// own context (platform_ot_run()).

    if (platform_ext.task_exit == NULL)
 80072cc:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <platform_ot_preempt+0x14>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	b103      	cbz	r3, 80072d4 <platform_ot_preempt+0x8>
        __SET_PENDSV();
}
 80072d2:	4770      	bx	lr
        __SET_PENDSV();
 80072d4:	4a03      	ldr	r2, [pc, #12]	; (80072e4 <platform_ot_preempt+0x18>)
 80072d6:	6853      	ldr	r3, [r2, #4]
 80072d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072dc:	6053      	str	r3, [r2, #4]
}
 80072de:	e7f8      	b.n	80072d2 <platform_ot_preempt+0x6>
 80072e0:	20002e00 	.word	0x20002e00
 80072e4:	e000ed00 	.word	0xe000ed00

080072e8 <platform_ot_run>:
#endif



#ifndef EXTF_platform_ot_run
OT_INLINE void platform_ot_run() {
 80072e8:	b510      	push	{r4, lr}

    /// 1. Run the Scheduler.  The scheduler will issue a PendSV if there is a
    /// threaded task, in which case the P-stack will get changed to that
    /// thread, and the code after this call will not run until all threads are
    /// dormant.
    platform_enable_interrupts();
 80072ea:	f7ff fe33 	bl	8006f54 <platform_enable_interrupts>
    __SEND_SVC(0);
 80072ee:	df00      	svc	0

    /// 2. When the PC is here, it means that a kernel task has been scheduled
    ///    or that no task is scheduled.  If no task is scheduled, then it is
    ///    time to go to sleep.  sys_powerdown() MUST re-enable interrupts
    ///    immediately before issuing WFI instruction.
    while (systim.flags & GPTIM_FLAG_SLEEP) {
 80072f0:	e004      	b.n	80072fc <platform_ot_run+0x14>
        platform_disable_interrupts();
 80072f2:	f7ff fe2d 	bl	8006f50 <platform_disable_interrupts>
        //systim_enable();                // LPTIM must be always running
        sys_powerdown();
 80072f6:	f7ff fa6b 	bl	80067d0 <sys_powerdown>
        
        // At this point, system has just woke-up from sleep.  
        // The wakeup ISR must clear GPTIM_FLAG_SLEEP if task scheduling is to continue
        __NOP();
 80072fa:	bf00      	nop
    while (systim.flags & GPTIM_FLAG_SLEEP) {
 80072fc:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <platform_ot_run+0x4c>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	f013 0f01 	tst.w	r3, #1
 8007304:	d1f5      	bne.n	80072f2 <platform_ot_run+0xa>
    }
    
    /// 3. Stop the backup timer, which is used as a kernel watchdog.
    platform_disable_interrupts();
 8007306:	f7ff fe23 	bl	8006f50 <platform_disable_interrupts>
    systim_stop_ticker();
 800730a:	f7ff fcc3 	bl	8006c94 <systim_stop_ticker>
 800730e:	f3ef 8309 	mrs	r3, PSP
    ///    onto this position.  If the task is killed during its runtime, this
    ///    data will be used to reset the P-stack and PC.
    ///@note this code only works with GCC-based compilers.  The && operator
    /// ahead of the label is a label-reference, and it is a GCC feature.
    {   register ot_u32 return_from_task;
        platform_ext.task_exit  = (void*)__get_PSP();
 8007312:	4c09      	ldr	r4, [pc, #36]	; (8007338 <platform_ot_run+0x50>)
 8007314:	6023      	str	r3, [r4, #0]
        return_from_task        = (ot_u32)&&RETURN_FROM_TASK;
 8007316:	4b09      	ldr	r3, [pc, #36]	; (800733c <platform_ot_run+0x54>)
        asm volatile ("PUSH {%0}" : : "r"(return_from_task) );
 8007318:	b408      	push	{r3}
    }

    /// 5. Run the Tasking Engine.  It will call the ktask or switch to the
    /// thread, as needed based on what is scheduled.
    platform_enable_interrupts();
 800731a:	f7ff fe1b 	bl	8006f54 <platform_enable_interrupts>
    sys_run_task();
 800731e:	f7ff fae5 	bl	80068ec <sys_run_task>

    /// 6. In any condition, retract the stack to a known, stable condition.
    /// If the task/thread exited cleanly, this changes nothing.  If killed,
    /// this will flush the stack.
    RETURN_FROM_TASK:
    platform_disable_interrupts();
 8007322:	f7ff fe15 	bl	8006f50 <platform_disable_interrupts>
    __set_PSP( (ot_u32)platform_ext.task_exit );
 8007326:	6823      	ldr	r3, [r4, #0]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8007328:	f383 8809 	msr	PSP, r3
    platform_ext.task_exit = NULL;
 800732c:	2300      	movs	r3, #0
 800732e:	6023      	str	r3, [r4, #0]
}
 8007330:	bd10      	pop	{r4, pc}
 8007332:	bf00      	nop
 8007334:	20002df8 	.word	0x20002df8
 8007338:	20002e00 	.word	0x20002e00
 800733c:	08007322 	.word	0x08007322

08007340 <WWDG_IRQHandler>:



#ifndef EXTF_WWDG_IRQHandler
void WWDG_IRQHandler(void) {
}
 8007340:	4770      	bx	lr

08007342 <sx127x_cadpin_ishigh>:
#if defined(_READY_PIN)
inline ot_uint sx127x_readypin_ishigh(void)   { return (_READY_PORT->IDR & _READY_PIN); }
#endif

// CAD-Detect may be implemented on DIO1
inline ot_uint sx127x_cadpin_ishigh(void)     { return (_CAD_DETECT_PORT->IDR & _CAD_DETECT_PIN); }
 8007342:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007346:	6918      	ldr	r0, [r3, #16]
 8007348:	f000 0002 	and.w	r0, r0, #2
 800734c:	4770      	bx	lr

0800734e <sx127x_getbasepwr>:


ot_u8 sx127x_getbasepwr() {
/// Base Power code: 0-3.  For this SX127x impl it's always 3.
    return 3;
}
 800734e:	2003      	movs	r0, #3
 8007350:	4770      	bx	lr

08007352 <sx127x_reset>:


/** Bus interface (SPI + 2x GPIO) <BR>
  * ========================================================================
  */
void sx127x_reset() {
 8007352:	b510      	push	{r4, lr}
/// - this sequence is taken from Semtech's implementation
/// - it doesn't agree 100% with documentation, namely how output/input shift occurs

    // Set Reset pin to Output, and set high
    {   ot_u32 moder;
        moder   = BOARD_RFCTL_RESETPORT->MODER;  
 8007354:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 8007358:	6823      	ldr	r3, [r4, #0]
        moder  &= ~(3 << (BOARD_RFCTL_RESETPINNUM*2));
 800735a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
        moder  |= (GPIO_MODER_OUT << (BOARD_RFCTL_RESETPINNUM*2));
 800735e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
        
        BOARD_RFCTL_RESETPORT->MODER    = moder;
 8007362:	6023      	str	r3, [r4, #0]
        BOARD_RFCTL_RESETPORT->BSRR     = BOARD_RFCTL_RESETPIN;
 8007364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007368:	61a3      	str	r3, [r4, #24]
    }
    delay_us(1200);   //wait ~120 us
 800736a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800736e:	f000 f8d9 	bl	8007524 <delay_us>
    
    // Set Reset pin to Input, floating
    BOARD_RFCTL_RESETPORT->MODER &= ~(3 << (BOARD_RFCTL_RESETPINNUM*2));
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007378:	6023      	str	r3, [r4, #0]

    // wait ~6ms
    delay_ti(6);    // wait ~6ms 
 800737a:	2006      	movs	r0, #6
 800737c:	f000 f8ce 	bl	800751c <delay_ti>
}
 8007380:	bd10      	pop	{r4, pc}
	...

08007384 <sx127x_init_bus>:


void sx127x_init_bus() {
 8007384:	b508      	push	{r3, lr}
    sx127x.clkreq = False;
#   endif

    ///1. Do a Reset.  
    ///@todo precede this with POR
    sx127x_reset();
 8007386:	f7ff ffe4 	bl	8007352 <sx127x_reset>
    ///2. Set-up DMA to work with SPI.  The DMA is bound to the SPI and it is
    ///   used for Duplex TX+RX.  The DMA RX Channel is used as an EVENT.  The
    ///   STM32L can do in-context naps using EVENTS.  To enable the EVENT, we
    ///   enable the DMA RX interrupt bit, but not the NVIC.
    BOARD_DMA_CLKON();
    _DMARX->CMAR    = (ot_u32)&sx127x.busrx[-1];
 800738a:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <sx127x_init_bus+0x5c>)
 800738c:	4b15      	ldr	r3, [pc, #84]	; (80073e4 <sx127x_init_bus+0x60>)
 800738e:	60d3      	str	r3, [r2, #12]
    _DMARX->CPAR    = (ot_u32)&RADIO_SPI->DR;
 8007390:	4b15      	ldr	r3, [pc, #84]	; (80073e8 <sx127x_init_bus+0x64>)
 8007392:	6093      	str	r3, [r2, #8]
    _DMATX->CPAR    = (ot_u32)&RADIO_SPI->DR;
 8007394:	3214      	adds	r2, #20
 8007396:	6093      	str	r3, [r2, #8]
    ///
    /// However, here we set the EXTI lines to the rising edge triggers we need
    /// and configure the NVIC.  Eventually, the NVIC stuff might be done in
    /// the platform module JUST FOR EXTI interrupts though.

    EXTI->PR1   =  RFI_ALL;         //clear flag bits
 8007398:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 800739c:	3b0c      	subs	r3, #12
 800739e:	220b      	movs	r2, #11
 80073a0:	615a      	str	r2, [r3, #20]
    EXTI->IMR1 &= ~RFI_ALL;         //clear interrupt enablers
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	f022 020b 	bic.w	r2, r2, #11
 80073a8:	601a      	str	r2, [r3, #0]
    EXTI->EMR1 &= ~RFI_ALL;         //clear event enablers
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	f022 020b 	bic.w	r2, r2, #11
 80073b0:	605a      	str	r2, [r3, #4]

    // All IRQ pins are rising edge detect
    EXTI->RTSR1|= (RFI_SOURCE0 | RFI_SOURCE1 | RFI_SOURCE2 | RFI_SOURCE3);
 80073b2:	689a      	ldr	r2, [r3, #8]
 80073b4:	f042 020b 	orr.w	r2, r2, #11
 80073b8:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073ba:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <sx127x_init_bus+0x68>)
 80073bc:	2240      	movs	r2, #64	; 0x40
 80073be:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073c2:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073c4:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073c8:	2180      	movs	r1, #128	; 0x80
 80073ca:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073cc:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073d4:	601a      	str	r2, [r3, #0]
#       endif
#   endif
    
    /// 4. Put SX127x to sleep
    //delay_ti(6);    // wait ~6ms 
    sx127x_strobe(_OPMODE_SLEEP, True);
 80073d6:	2101      	movs	r1, #1
 80073d8:	2000      	movs	r0, #0
 80073da:	f7f9 fe0b 	bl	8000ff4 <sx127x_strobe>
}
 80073de:	bd08      	pop	{r3, pc}
 80073e0:	4002001c 	.word	0x4002001c
 80073e4:	20002212 	.word	0x20002212
 80073e8:	4001300c 	.word	0x4001300c
 80073ec:	e000e100 	.word	0xe000e100

080073f0 <sx127x_spibus_io>:
}




void sx127x_spibus_io(ot_u8 cmd_len, ot_u8 resp_len, ot_u8* cmd) {
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	4604      	mov	r4, r0
 80073f4:	460e      	mov	r6, r1
 80073f6:	4615      	mov	r5, r2
///@note BOARD_DMA_CLKON() must be defined in the board support header as a
/// macro or inline function.  As the board may be using DMA for numerous
/// peripherals, we cannot assume in this module if it is appropriate to turn-
/// off the DMA for all other modules.

    platform_disable_interrupts();
 80073f8:	f7ff fdaa 	bl	8006f50 <platform_disable_interrupts>
    __SPI_CS_ON();
 80073fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8007400:	2310      	movs	r3, #16
 8007402:	6293      	str	r3, [r2, #40]	; 0x28
    __SPI_CLKON();
 8007404:	492d      	ldr	r1, [pc, #180]	; (80074bc <sx127x_spibus_io+0xcc>)
 8007406:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 8007408:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800740c:	660b      	str	r3, [r1, #96]	; 0x60
    __SPI_ENABLE();
 800740e:	4b2c      	ldr	r3, [pc, #176]	; (80074c0 <sx127x_spibus_io+0xd0>)
 8007410:	f241 7103 	movw	r1, #5891	; 0x1703
 8007414:	6059      	str	r1, [r3, #4]
 8007416:	2100      	movs	r1, #0
 8007418:	6099      	str	r1, [r3, #8]
 800741a:	f44f 7151 	mov.w	r1, #836	; 0x344
 800741e:	6019      	str	r1, [r3, #0]
    spi_moder   = GPIOA->MODER;
 8007420:	6813      	ldr	r3, [r2, #0]
    spi_moder  &= ~((3 << (BOARD_RFSPI_MISOPINNUM*2)) \
 8007422:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
    spi_moder  |= (GPIO_MODER_ALT << (BOARD_RFSPI_MISOPINNUM*2)) \
 8007426:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
    GPIOA->MODER = spi_moder;
 800742a:	6013      	str	r3, [r2, #0]
    /// module buffer.  If doing a read, the garbage data getting duplexed onto
    /// TX doesn't affect the SX127x.  If doing a write, simply disregard the
    /// RX duplexed data.
    BOARD_RFSPI_CLKON();
    BOARD_DMA_CLKON();
    __DMA_CLEAR_IFG();
 800742c:	4b25      	ldr	r3, [pc, #148]	; (80074c4 <sx127x_spibus_io+0xd4>)
 800742e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8007432:	605a      	str	r2, [r3, #4]
    cmd_len        += resp_len;
 8007434:	19a1      	adds	r1, r4, r6
 8007436:	b2c9      	uxtb	r1, r1
    _DMARX->CNDTR   = cmd_len;
 8007438:	4823      	ldr	r0, [pc, #140]	; (80074c8 <sx127x_spibus_io+0xd8>)
 800743a:	6041      	str	r1, [r0, #4]
    _DMATX->CNDTR   = cmd_len;
 800743c:	4a23      	ldr	r2, [pc, #140]	; (80074cc <sx127x_spibus_io+0xdc>)
 800743e:	6051      	str	r1, [r2, #4]
    _DMATX->CMAR    = (ot_u32)cmd;
 8007440:	60d5      	str	r5, [r2, #12]
    __DMA_ENABLE();
 8007442:	4923      	ldr	r1, [pc, #140]	; (80074d0 <sx127x_spibus_io+0xe0>)
 8007444:	680b      	ldr	r3, [r1, #0]
 8007446:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800744a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 800744e:	600b      	str	r3, [r1, #0]
 8007450:	f243 0383 	movw	r3, #12419	; 0x3083
 8007454:	6003      	str	r3, [r0, #0]
 8007456:	6813      	ldr	r3, [r2, #0]
 8007458:	f443 5342 	orr.w	r3, r3, #12416	; 0x3080
 800745c:	f043 0311 	orr.w	r3, r3, #17
 8007460:	6013      	str	r3, [r2, #0]
    /// WFE only works on EXTI line interrupts, as far as I can test. 
    /// So do busywait until DMA is done RX-ing
    //do {
        //__WFE();
    //}
    while((DMA1->ISR & _DMARX_IFG) == 0);
 8007462:	4b18      	ldr	r3, [pc, #96]	; (80074c4 <sx127x_spibus_io+0xd4>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f013 0f20 	tst.w	r3, #32
 800746a:	d0fa      	beq.n	8007462 <sx127x_spibus_io+0x72>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800746c:	4b19      	ldr	r3, [pc, #100]	; (80074d4 <sx127x_spibus_io+0xe4>)
 800746e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007472:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    __DMA_CLEAR_IRQ();
    __DMA_CLEAR_IFG();
 8007476:	4b13      	ldr	r3, [pc, #76]	; (80074c4 <sx127x_spibus_io+0xd4>)
 8007478:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800747c:	605a      	str	r2, [r3, #4]
    __DMA_DISABLE();
 800747e:	4a14      	ldr	r2, [pc, #80]	; (80074d0 <sx127x_spibus_io+0xe0>)
 8007480:	6813      	ldr	r3, [r2, #0]
 8007482:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	2300      	movs	r3, #0
 800748a:	3a8c      	subs	r2, #140	; 0x8c
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	3214      	adds	r2, #20
 8007490:	6013      	str	r3, [r2, #0]

    /// Turn-off and disable SPI to save energy
    __SPI_DISABLE();
 8007492:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <sx127x_spibus_io+0xd0>)
 8007494:	2204      	movs	r2, #4
 8007496:	601a      	str	r2, [r3, #0]
    __SPI_CS_OFF();
 8007498:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800749c:	2310      	movs	r3, #16
 800749e:	6193      	str	r3, [r2, #24]
    __SPI_CLKOFF();
 80074a0:	4906      	ldr	r1, [pc, #24]	; (80074bc <sx127x_spibus_io+0xcc>)
 80074a2:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 80074a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074a8:	660b      	str	r3, [r1, #96]	; 0x60
    spi_moder   = GPIOA->MODER;
 80074aa:	6813      	ldr	r3, [r2, #0]
    spi_moder  &= ~((3 << (BOARD_RFSPI_MISOPINNUM*2)) \
 80074ac:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
    spi_moder  |= (GPIO_MODER_IN << (BOARD_RFSPI_MISOPINNUM*2)) \
 80074b0:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
    GPIOA->MODER = spi_moder;
 80074b4:	6013      	str	r3, [r2, #0]
    BOARD_DMA_CLKOFF();
    BOARD_RFSPI_CLKOFF();
    platform_enable_interrupts();
 80074b6:	f7ff fd4d 	bl	8006f54 <platform_enable_interrupts>
}
 80074ba:	bd70      	pop	{r4, r5, r6, pc}
 80074bc:	40021000 	.word	0x40021000
 80074c0:	40013000 	.word	0x40013000
 80074c4:	40020000 	.word	0x40020000
 80074c8:	4002001c 	.word	0x4002001c
 80074cc:	40020030 	.word	0x40020030
 80074d0:	400200a8 	.word	0x400200a8
 80074d4:	e000e100 	.word	0xe000e100

080074d8 <sx127x_antsw_off>:

void sx127x_antsw_off(void) {
#   if (defined(__SX127x_PABOOST__) || defined(__SX127x_TXSW__) || defined(__SX127x_RXSW__))
    BOARD_RFANT_OFF();
#   endif
}
 80074d8:	4770      	bx	lr

080074da <sx127x_antsw_on>:

void sx127x_antsw_on(void) {
#   if (defined(__SX127x_PABOOST__) || defined(__SX127x_TXSW__) || defined(__SX127x_RXSW__))
    BOARD_RFANT_ON();
#   endif
}
 80074da:	4770      	bx	lr

080074dc <sx127x_antsw_tx>:
void sx127x_antsw_tx(ot_bool use_paboost) {
#   if (defined(__SX127x_PABOOST__) || defined(__SX127x_TXSW__))
    sx127x_antsw_on();
    BOARD_RFANT_TX(use_paboost);
#   endif
}
 80074dc:	4770      	bx	lr

080074de <sx127x_antsw_rx>:
void sx127x_antsw_rx(void) {
#   if defined(__SX127x_RXSW__)
    sx127x_antsw_on();
    BOARD_RFANT_RX();
#   endif
}
 80074de:	4770      	bx	lr

080074e0 <sx127x_int_config>:



void sx127x_int_config(ot_u32 ie_sel) {
    ot_u32 scratch;
    EXTI->PR1   = (ot_u32)RFI_ALL;
 80074e0:	4a04      	ldr	r2, [pc, #16]	; (80074f4 <sx127x_int_config+0x14>)
 80074e2:	230b      	movs	r3, #11
 80074e4:	6153      	str	r3, [r2, #20]
    scratch     = EXTI->IMR1;
 80074e6:	6813      	ldr	r3, [r2, #0]
    scratch    &= ~((ot_u32)RFI_ALL);
 80074e8:	f023 030b 	bic.w	r3, r3, #11
    scratch    |= ie_sel;
 80074ec:	4318      	orrs	r0, r3
    EXTI->IMR1  = scratch;
 80074ee:	6010      	str	r0, [r2, #0]
}
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40010400 	.word	0x40010400

080074f8 <sx127x_int_clearall>:

inline void sx127x_int_clearall(void) {
    EXTI->PR1 = RFI_ALL;
 80074f8:	4b01      	ldr	r3, [pc, #4]	; (8007500 <sx127x_int_clearall+0x8>)
 80074fa:	220b      	movs	r2, #11
 80074fc:	615a      	str	r2, [r3, #20]
}
 80074fe:	4770      	bx	lr
 8007500:	40010400 	.word	0x40010400

08007504 <delay_ms>:


#ifndef EXTF_delay_ms
void delay_ms(ot_u16 n) {
    ot_long c;
    c   = (platform_ext.clock_hz[0]>>10);   // Set cycles per ms
 8007504:	4b04      	ldr	r3, [pc, #16]	; (8007518 <delay_ms+0x14>)
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	0a9b      	lsrs	r3, r3, #10
    c  *= n;                                // Multiply by number of ms
 800750a:	fb03 f000 	mul.w	r0, r3, r0
    do {
        c -= 7;                         // 7 cycles per loop (measured)
 800750e:	3807      	subs	r0, #7
    } while (c > 0);
 8007510:	2800      	cmp	r0, #0
 8007512:	dcfc      	bgt.n	800750e <delay_ms+0xa>
}
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20002e00 	.word	0x20002e00

0800751c <delay_ti>:
void delay_ti(ot_u16 n) {
 800751c:	b508      	push	{r3, lr}
    delay_ms(n);
 800751e:	f7ff fff1 	bl	8007504 <delay_ms>
}
 8007522:	bd08      	pop	{r3, pc}

08007524 <delay_us>:


#ifndef EXTF_delay_us
void delay_us(ot_u16 n) {
    ot_long c;
    c   = (platform_ext.clock_hz[0]>>10);   // Set cycles per ms
 8007524:	4b04      	ldr	r3, [pc, #16]	; (8007538 <delay_us+0x14>)
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	0a9b      	lsrs	r3, r3, #10
    c  *= n;                                // Multiply by number of us
 800752a:	fb03 f000 	mul.w	r0, r3, r0
    c >>= 10;                               // Divide into cycles per us
 800752e:	1280      	asrs	r0, r0, #10
    do {
        c -= 7;                         // 7 cycles per loop (measured)
 8007530:	3807      	subs	r0, #7
    } while (c > 0);
 8007532:	2800      	cmp	r0, #0
 8007534:	dcfc      	bgt.n	8007530 <delay_us+0xc>
}
 8007536:	4770      	bx	lr
 8007538:	20002e00 	.word	0x20002e00

0800753c <sub_memcpy_dma>:


#if MCU_CONFIG(MEMCPYDMA)
#   define MEMCPY_DMA_INT  (1 << ((MEMCPY_DMA_CHAN_ID-1)*4))

void sub_memcpy_dma(ot_u8* dest, ot_u8* src, ot_uint length) {
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	4604      	mov	r4, r0
 8007540:	460e      	mov	r6, r1
 8007542:	4615      	mov	r5, r2
/// Use 8, 16, or 32 bit chunks based on detected alignment
    static const ot_u16 ccr[4]      = { 0x4AD1, 0x40D1, 0x45D1, 0x40D1 };
    static const ot_u16 len_div[4]  = { 2, 0, 1, 0 };
    ot_int align;

    platform_disable_interrupts();
 8007544:	f7ff fd04 	bl	8006f50 <platform_disable_interrupts>

    MEMCPY_DMACHAN->CCR     = 0;
 8007548:	4a0f      	ldr	r2, [pc, #60]	; (8007588 <sub_memcpy_dma+0x4c>)
 800754a:	2300      	movs	r3, #0
 800754c:	6013      	str	r3, [r2, #0]
    MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;
 800754e:	4b0f      	ldr	r3, [pc, #60]	; (800758c <sub_memcpy_dma+0x50>)
 8007550:	2101      	movs	r1, #1
 8007552:	6059      	str	r1, [r3, #4]
    MEMCPY_DMACHAN->CPAR    = (ot_u32)dest;
 8007554:	6094      	str	r4, [r2, #8]
    MEMCPY_DMACHAN->CMAR    = (ot_u32)src;
 8007556:	60d6      	str	r6, [r2, #12]
    align                   = ((ot_u32)dest | (ot_u32)src | (ot_u32)length) & 3;
 8007558:	ea44 0306 	orr.w	r3, r4, r6
 800755c:	b29b      	uxth	r3, r3
 800755e:	432b      	orrs	r3, r5
 8007560:	f003 0303 	and.w	r3, r3, #3
    length                >>= len_div[align];
 8007564:	490a      	ldr	r1, [pc, #40]	; (8007590 <sub_memcpy_dma+0x54>)
 8007566:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800756a:	4105      	asrs	r5, r0
    MEMCPY_DMACHAN->CNDTR   = length;
 800756c:	b2ad      	uxth	r5, r5
 800756e:	6055      	str	r5, [r2, #4]
    MEMCPY_DMACHAN->CCR     = ccr[align];
 8007570:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8007574:	891b      	ldrh	r3, [r3, #8]
 8007576:	6013      	str	r3, [r2, #0]
    while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 8007578:	4b04      	ldr	r3, [pc, #16]	; (800758c <sub_memcpy_dma+0x50>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f013 0f01 	tst.w	r3, #1
 8007580:	d0fa      	beq.n	8007578 <sub_memcpy_dma+0x3c>

    platform_enable_interrupts();
 8007582:	f7ff fce7 	bl	8006f54 <platform_enable_interrupts>
}
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	40020008 	.word	0x40020008
 800758c:	40020000 	.word	0x40020000
 8007590:	08009fa0 	.word	0x08009fa0

08007594 <sub_memcpy4_dma>:

    platform_enable_interrupts();
}


void sub_memcpy4_dma(ot_u32* dest, ot_u32* src, ot_uint length) {
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	4606      	mov	r6, r0
 8007598:	460d      	mov	r5, r1
 800759a:	4614      	mov	r4, r2
/// 32 bit chunks based on detected alignment
    platform_disable_interrupts();
 800759c:	f7ff fcd8 	bl	8006f50 <platform_disable_interrupts>

    MEMCPY_DMACHAN->CCR     = 0;
 80075a0:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <sub_memcpy4_dma+0x34>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
    MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;
 80075a6:	4a09      	ldr	r2, [pc, #36]	; (80075cc <sub_memcpy4_dma+0x38>)
 80075a8:	2101      	movs	r1, #1
 80075aa:	6051      	str	r1, [r2, #4]
    MEMCPY_DMACHAN->CPAR    = (ot_u32)dest;
 80075ac:	609e      	str	r6, [r3, #8]
    MEMCPY_DMACHAN->CMAR    = (ot_u32)src;
 80075ae:	60dd      	str	r5, [r3, #12]
    MEMCPY_DMACHAN->CNDTR   = length;
 80075b0:	605c      	str	r4, [r3, #4]
    MEMCPY_DMACHAN->CCR     = 0x4AD1;
 80075b2:	f644 22d1 	movw	r2, #19153	; 0x4ad1
 80075b6:	601a      	str	r2, [r3, #0]
    while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 80075b8:	4b04      	ldr	r3, [pc, #16]	; (80075cc <sub_memcpy4_dma+0x38>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f013 0f01 	tst.w	r3, #1
 80075c0:	d0fa      	beq.n	80075b8 <sub_memcpy4_dma+0x24>

    platform_enable_interrupts();
 80075c2:	f7ff fcc7 	bl	8006f54 <platform_enable_interrupts>
}
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
 80075c8:	40020008 	.word	0x40020008
 80075cc:	40020000 	.word	0x40020000

080075d0 <ot_memcpy>:




void ot_memcpy(ot_u8* dst, ot_u8* src, ot_uint length) {
    if (length != 0) {
 80075d0:	b902      	cbnz	r2, 80075d4 <ot_memcpy+0x4>
 80075d2:	4770      	bx	lr
void ot_memcpy(ot_u8* dst, ot_u8* src, ot_uint length) {
 80075d4:	b508      	push	{r3, lr}
#       if MCU_CONFIG(MEMCPYDMA)
        sub_memcpy_dma(dst, src, length);
 80075d6:	f7ff ffb1 	bl	800753c <sub_memcpy_dma>
#       else
        DUFF_DEVICE_8(*dst++, *src++, length);
#       endif
    }
}
 80075da:	bd08      	pop	{r3, pc}

080075dc <ot_memcpy_4>:
#       endif
    }
}

void ot_memcpy_4(ot_u32* dst, ot_u32* src, ot_uint length) {
    if (length != 0) {
 80075dc:	b902      	cbnz	r2, 80075e0 <ot_memcpy_4+0x4>
 80075de:	4770      	bx	lr
void ot_memcpy_4(ot_u32* dst, ot_u32* src, ot_uint length) {
 80075e0:	b508      	push	{r3, lr}
#       if MCU_CONFIG(MEMCPYDMA)
        sub_memcpy4_dma( dst, src, length);
 80075e2:	f7ff ffd7 	bl	8007594 <sub_memcpy4_dma>
#       else
        ot_memcpy((ot_u8*)dst, (ot_u8*)src, length<<2);
#       endif
    }
}
 80075e6:	bd08      	pop	{r3, pc}

080075e8 <ot_memset>:


void ot_memset(ot_u8* dst, ot_u8 value, ot_uint length) {
 80075e8:	b530      	push	{r4, r5, lr}
 80075ea:	b083      	sub	sp, #12
 80075ec:	f88d 1007 	strb.w	r1, [sp, #7]
    if (length != 0) {
 80075f0:	b90a      	cbnz	r2, 80075f6 <ot_memset+0xe>
#       else
        DUFF_DEVICE_8(*dst++, value, length);
#       endif
        platform_enable_interrupts();
    }
}
 80075f2:	b003      	add	sp, #12
 80075f4:	bd30      	pop	{r4, r5, pc}
 80075f6:	4614      	mov	r4, r2
 80075f8:	4605      	mov	r5, r0
        platform_disable_interrupts();
 80075fa:	f7ff fca9 	bl	8006f50 <platform_disable_interrupts>
        MEMCPY_DMACHAN->CCR     = 0;
 80075fe:	4b0b      	ldr	r3, [pc, #44]	; (800762c <ot_memset+0x44>)
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
        MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;       ///@todo see if this can be globalized
 8007604:	4a0a      	ldr	r2, [pc, #40]	; (8007630 <ot_memset+0x48>)
 8007606:	2101      	movs	r1, #1
 8007608:	6051      	str	r1, [r2, #4]
        MEMCPY_DMACHAN->CPAR    = (ot_u32)dst;
 800760a:	609d      	str	r5, [r3, #8]
        MEMCPY_DMACHAN->CMAR    = (ot_u32)&value;
 800760c:	f10d 0207 	add.w	r2, sp, #7
 8007610:	60da      	str	r2, [r3, #12]
        MEMCPY_DMACHAN->CNDTR   = length;
 8007612:	605c      	str	r4, [r3, #4]
        MEMCPY_DMACHAN->CCR     = DMA_CCR_DIR      | DMA_CCR_PINC     | \
 8007614:	f244 0251 	movw	r2, #16465	; 0x4051
 8007618:	601a      	str	r2, [r3, #0]
        while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 800761a:	4b05      	ldr	r3, [pc, #20]	; (8007630 <ot_memset+0x48>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f013 0f01 	tst.w	r3, #1
 8007622:	d0fa      	beq.n	800761a <ot_memset+0x32>
        platform_enable_interrupts();
 8007624:	f7ff fc96 	bl	8006f54 <platform_enable_interrupts>
}
 8007628:	e7e3      	b.n	80075f2 <ot_memset+0xa>
 800762a:	bf00      	nop
 800762c:	40020008 	.word	0x40020008
 8007630:	40020000 	.word	0x40020000

08007634 <ot_memset_4>:

void ot_memset_2(ot_u16* dst, ot_u16 value, ot_uint length) {
    ot_memset( (ot_u8*)dst, (ot_u8)value, length<<1 );
}

void ot_memset_4(ot_u32* dst, ot_u32 value, ot_uint length) {
 8007634:	b508      	push	{r3, lr}
    ot_memset( (ot_u8*)dst, (ot_u8)value, length<<2 );
 8007636:	0092      	lsls	r2, r2, #2
 8007638:	b292      	uxth	r2, r2
 800763a:	b2c9      	uxtb	r1, r1
 800763c:	f7ff ffd4 	bl	80075e8 <ot_memset>
}
 8007640:	bd08      	pop	{r3, pc}
	...

08007644 <rand_prn16>:
    return (ot_u8)rand_prn16();
}



ot_u16 rand_prn16() {
 8007644:	b508      	push	{r3, lr}
    static ot_u16 _prn_freg;
    _prn_freg ^= LPTIM1->CNT;
 8007646:	4b05      	ldr	r3, [pc, #20]	; (800765c <rand_prn16+0x18>)
 8007648:	69da      	ldr	r2, [r3, #28]
 800764a:	4805      	ldr	r0, [pc, #20]	; (8007660 <rand_prn16+0x1c>)
 800764c:	8803      	ldrh	r3, [r0, #0]
 800764e:	405a      	eors	r2, r3
 8007650:	b292      	uxth	r2, r2
 8007652:	8002      	strh	r2, [r0, #0]
    return crc16drv_block_manual( (ot_u8*)&_prn_freg, 2, _prn_freg );
 8007654:	2102      	movs	r1, #2
 8007656:	f7fe fb0f 	bl	8005c78 <crc16drv_block_manual>
}
 800765a:	bd08      	pop	{r3, pc}
 800765c:	40007c00 	.word	0x40007c00
 8007660:	20001200 	.word	0x20001200

08007664 <rand_prn8>:
ot_u8 rand_prn8() {
 8007664:	b508      	push	{r3, lr}
    return (ot_u8)rand_prn16();
 8007666:	f7ff ffed 	bl	8007644 <rand_prn16>
}
 800766a:	b2c0      	uxtb	r0, r0
 800766c:	bd08      	pop	{r3, pc}
	...

08007670 <sub_mpipe_open>:


void sub_mpipe_open() {
    ot_u32 scratch;
    __SYS_CLKON();
    __UART_CLKON();
 8007670:	4a08      	ldr	r2, [pc, #32]	; (8007694 <sub_mpipe_open+0x24>)
 8007672:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007678:	6593      	str	r3, [r2, #88]	; 0x58

    scratch                 = BOARD_UART_PORT->MODER;
 800767a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800767e:	6813      	ldr	r3, [r2, #0]
    scratch                &= ~((3 << (BOARD_UART_TXPINNUM*2)) | (3 << (BOARD_UART_RXPINNUM*2)));
 8007680:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007684:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    scratch                |= (2 << (BOARD_UART_TXPINNUM*2)) | (2 << (BOARD_UART_RXPINNUM*2));
 8007688:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800768c:	f043 0320 	orr.w	r3, r3, #32
    BOARD_UART_PORT->MODER  = scratch;
 8007690:	6013      	str	r3, [r2, #0]
}
 8007692:	4770      	bx	lr
 8007694:	40021000 	.word	0x40021000

08007698 <sub_mpipe_close>:

void sub_mpipe_close() {
    ot_u32 scratch          = BOARD_UART_PORT->MODER;
 8007698:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800769c:	6813      	ldr	r3, [r2, #0]
    scratch                &= ~((3 << (BOARD_UART_TXPINNUM*2)) | (3 << (BOARD_UART_RXPINNUM*2)));
 800769e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80076a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    scratch                |= (1 << (BOARD_UART_TXPINNUM*2)) | (0 << (BOARD_UART_RXPINNUM*2));
 80076a6:	f043 0310 	orr.w	r3, r3, #16
    BOARD_UART_PORT->MODER  = scratch;
 80076aa:	6013      	str	r3, [r2, #0]

    __DMA_ALL_CLOSE();
 80076ac:	4a0e      	ldr	r2, [pc, #56]	; (80076e8 <sub_mpipe_close+0x50>)
 80076ae:	6813      	ldr	r3, [r2, #0]
 80076b0:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	2300      	movs	r3, #0
 80076b8:	3a28      	subs	r2, #40	; 0x28
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	3a14      	subs	r2, #20
 80076be:	6013      	str	r3, [r2, #0]
    __DMA_ALL_CLEAR();
 80076c0:	3a6c      	subs	r2, #108	; 0x6c
 80076c2:	f04f 617f 	mov.w	r1, #267386880	; 0xff00000
 80076c6:	6051      	str	r1, [r2, #4]
    __DMA_CLKOFF();
    __UART_CLOSE();
 80076c8:	f5a2 32de 	sub.w	r2, r2, #113664	; 0x1bc00
 80076cc:	6013      	str	r3, [r2, #0]
    __UART_CLEAR();
 80076ce:	4b07      	ldr	r3, [pc, #28]	; (80076ec <sub_mpipe_close+0x54>)
 80076d0:	6213      	str	r3, [r2, #32]
    __UART_CLKOFF();
 80076d2:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80076d6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80076d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076dc:	6593      	str	r3, [r2, #88]	; 0x58

    //__DISMISS_FULL_SPEED();
    __CLR_MPIPE();
 80076de:	4b04      	ldr	r3, [pc, #16]	; (80076f0 <sub_mpipe_close+0x58>)
 80076e0:	22ff      	movs	r2, #255	; 0xff
 80076e2:	701a      	strb	r2, [r3, #0]
}
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	400200a8 	.word	0x400200a8
 80076ec:	00121b5f 	.word	0x00121b5f
 80076f0:	20002d9c 	.word	0x20002d9c

080076f4 <mpipe_rxsync_isr>:
  * These are DMA ISRs.  They are macros which are defined in this file, above.
  * In STM32, each DMA channel has its own IRQ, and each peripheral has mapping
  * to different channels.
  */

void mpipe_rxsync_isr(void) {
 80076f4:	b510      	push	{r4, lr}
#   if (BOARD_FEATURE(MPIPE_BREAK))
    // Falling edge ISR on RX line, which can wakeup from stop
    EXTI->IMR1  &= ~MPIPE_UART_RXPIN;
 80076f6:	4a08      	ldr	r2, [pc, #32]	; (8007718 <mpipe_rxsync_isr+0x24>)
 80076f8:	6813      	ldr	r3, [r2, #0]
 80076fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076fe:	6013      	str	r3, [r2, #0]
#   endif

    // Open UART for character-RX
    mpipe.state = MPIPE_Idle;
 8007700:	2400      	movs	r4, #0
 8007702:	4b06      	ldr	r3, [pc, #24]	; (800771c <mpipe_rxsync_isr+0x28>)
 8007704:	701c      	strb	r4, [r3, #0]
    // mpipeevt_rxinit();       ///@todo see if there's a point here
    sub_mpipe_open();
 8007706:	f7ff ffb3 	bl	8007670 <sub_mpipe_open>
    __UART_RXOPEN();
 800770a:	4b05      	ldr	r3, [pc, #20]	; (8007720 <mpipe_rxsync_isr+0x2c>)
 800770c:	601c      	str	r4, [r3, #0]
 800770e:	4a05      	ldr	r2, [pc, #20]	; (8007724 <mpipe_rxsync_isr+0x30>)
 8007710:	621a      	str	r2, [r3, #32]
 8007712:	2225      	movs	r2, #37	; 0x25
 8007714:	601a      	str	r2, [r3, #0]
}
 8007716:	bd10      	pop	{r4, pc}
 8007718:	40010400 	.word	0x40010400
 800771c:	20002d9c 	.word	0x20002d9c
 8007720:	40004400 	.word	0x40004400
 8007724:	00121b5f 	.word	0x00121b5f

08007728 <mpipedrv_init>:
}
#endif


#ifndef EXTF_mpipedrv_init
ot_int mpipedrv_init(void* port_id, mpipe_speed baud_rate) {
 8007728:	b570      	push	{r4, r5, r6, lr}
/// 1. "port_id" is unused in this impl, and it may be NULL
/// 2. Prepare the HW, which in this case is a UART
/// 3. Set default speed, which in this case is 115200 bps

    /// Basic setup for MPIPE-UART, with preset bps and sync detection
    mpipe.state     = MPIPE_Null;
 800772a:	4b28      	ldr	r3, [pc, #160]	; (80077cc <mpipedrv_init+0xa4>)
 800772c:	22ff      	movs	r2, #255	; 0xff
 800772e:	701a      	strb	r2, [r3, #0]
    uart.baudrate   = (baud_rate == MPIPE_default) ? _DEF_MPIPEBAUD : baud_rate;
 8007730:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8007734:	d048      	beq.n	80077c8 <mpipedrv_init+0xa0>
 8007736:	4c26      	ldr	r4, [pc, #152]	; (80077d0 <mpipedrv_init+0xa8>)
 8007738:	7021      	strb	r1, [r4, #0]

    /// UART Setup (RX & TX setup takes place at time of startup)
    __UART_CLKON();
 800773a:	4d26      	ldr	r5, [pc, #152]	; (80077d4 <mpipedrv_init+0xac>)
 800773c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800773e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007742:	65ab      	str	r3, [r5, #88]	; 0x58
    MPIPE_UART->BRR = __UART_CLKHZ() / _brtable[uart.baudrate];
 8007744:	2001      	movs	r0, #1
 8007746:	f7ff fbf9 	bl	8006f3c <platform_get_clockhz>
 800774a:	f914 2b5c 	ldrsb.w	r2, [r4], #92
 800774e:	4b22      	ldr	r3, [pc, #136]	; (80077d8 <mpipedrv_init+0xb0>)
 8007750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007754:	fbb0 f0f3 	udiv	r0, r0, r3
 8007758:	4b20      	ldr	r3, [pc, #128]	; (80077dc <mpipedrv_init+0xb4>)
 800775a:	60d8      	str	r0, [r3, #12]
    MPIPE_UART->CR3 = USART_CR3_DMAR | USART_CR3_DMAT;
 800775c:	22c0      	movs	r2, #192	; 0xc0
 800775e:	609a      	str	r2, [r3, #8]
    MPIPE_UART->CR2 = 0;
 8007760:	2600      	movs	r6, #0
 8007762:	605e      	str	r6, [r3, #4]
    MPIPE_UART->CR1 = 0;
 8007764:	601e      	str	r6, [r3, #0]
    __UART_CLKOFF();
 8007766:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007768:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800776c:	65ab      	str	r3, [r5, #88]	; 0x58

    /// Set up DMA channels for RX and TX
    _DMARX->CPAR    = (uint32_t)&(MPIPE_UART->RDR);
 800776e:	4b1c      	ldr	r3, [pc, #112]	; (80077e0 <mpipedrv_init+0xb8>)
 8007770:	4a1c      	ldr	r2, [pc, #112]	; (80077e4 <mpipedrv_init+0xbc>)
 8007772:	609a      	str	r2, [r3, #8]
    _DMATX->CPAR    = (uint32_t)&(MPIPE_UART->TDR);
 8007774:	3314      	adds	r3, #20
 8007776:	3204      	adds	r2, #4
 8007778:	609a      	str	r2, [r3, #8]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800777a:	4b1b      	ldr	r3, [pc, #108]	; (80077e8 <mpipedrv_init+0xc0>)
 800777c:	2280      	movs	r2, #128	; 0x80
 800777e:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007782:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007786:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007788:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800778c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8007790:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007792:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007796:	2240      	movs	r2, #64	; 0x40
 8007798:	605a      	str	r2, [r3, #4]
    /// must be in core_main.c, due to the way EXTIs are shared on STM32.
    NVIC_SetPriority(_UART_IRQ, _IRQGROUP);
    NVIC_EnableIRQ(_UART_IRQ);
    
#   if (BOARD_FEATURE(MPIPE_BREAK))
        EXTI->PR1   = MPIPE_UART_RXPIN;
 800779a:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 800779e:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 80077a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80077a6:	615a      	str	r2, [r3, #20]
        EXTI->RTSR1|= MPIPE_UART_RXPIN;
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077ae:	609a      	str	r2, [r3, #8]
#   endif

    /// Configure MPipe Queues
    /// @todo this will need to be adjusted in the final version
    alp_init(&mpipe.alp, &otmpin, &otmpout);
 80077b0:	4a0e      	ldr	r2, [pc, #56]	; (80077ec <mpipedrv_init+0xc4>)
 80077b2:	490f      	ldr	r1, [pc, #60]	; (80077f0 <mpipedrv_init+0xc8>)
 80077b4:	480f      	ldr	r0, [pc, #60]	; (80077f4 <mpipedrv_init+0xcc>)
 80077b6:	f7fe f955 	bl	8005a64 <alp_init>
    
    /// Initial values for Ring Buffer
    memset(&uart.tlist, 0, sizeof(uart_rb_t));
 80077ba:	2244      	movs	r2, #68	; 0x44
 80077bc:	4631      	mov	r1, r6
 80077be:	4620      	mov	r0, r4
 80077c0:	f7ff ff12 	bl	80075e8 <ot_memset>
    
    return 255;
}
 80077c4:	20ff      	movs	r0, #255	; 0xff
 80077c6:	bd70      	pop	{r4, r5, r6, pc}
    uart.baudrate   = (baud_rate == MPIPE_default) ? _DEF_MPIPEBAUD : baud_rate;
 80077c8:	2103      	movs	r1, #3
 80077ca:	e7b4      	b.n	8007736 <mpipedrv_init+0xe>
 80077cc:	20002d9c 	.word	0x20002d9c
 80077d0:	20003214 	.word	0x20003214
 80077d4:	40021000 	.word	0x40021000
 80077d8:	08009fc0 	.word	0x08009fc0
 80077dc:	40004400 	.word	0x40004400
 80077e0:	4002006c 	.word	0x4002006c
 80077e4:	40004424 	.word	0x40004424
 80077e8:	e000e100 	.word	0xe000e100
 80077ec:	2000274c 	.word	0x2000274c
 80077f0:	20002d88 	.word	0x20002d88
 80077f4:	20002da0 	.word	0x20002da0

080077f8 <mpipedrv_getpwrcode>:


#ifndef EXTF_mpipedrv_getpwrcode
ot_u8 mpipedrv_getpwrcode() {
/// Power code: 0-3.  For this MPipe impl it's always 1 or 2
    return 1 + (mpipe.state < 0);
 80077f8:	4b04      	ldr	r3, [pc, #16]	; (800780c <mpipedrv_getpwrcode+0x14>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007800:	d101      	bne.n	8007806 <mpipedrv_getpwrcode+0xe>
 8007802:	2001      	movs	r0, #1
}
 8007804:	4770      	bx	lr
    return 1 + (mpipe.state < 0);
 8007806:	2002      	movs	r0, #2
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	20002d9c 	.word	0x20002d9c

08007810 <mpipedrv_standby>:
#endif


#ifndef EXTF_mpipedrv_standby
void mpipedrv_standby() {
}
 8007810:	4770      	bx	lr
	...

08007814 <mpipedrv_unblock>:


#ifndef EXTF_mpipedrv_unblock
///@todo Check if this function gets used, and how.
void mpipedrv_unblock() {
    if (mpipe.state == MPIPE_Null) {
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <mpipedrv_unblock+0x18>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	b25b      	sxtb	r3, r3
 800781a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800781e:	d000      	beq.n	8007822 <mpipedrv_unblock+0xe>
        mpipe.state = MPIPE_Idle;
    }
}
 8007820:	4770      	bx	lr
        mpipe.state = MPIPE_Idle;
 8007822:	4b02      	ldr	r3, [pc, #8]	; (800782c <mpipedrv_unblock+0x18>)
 8007824:	2200      	movs	r2, #0
 8007826:	701a      	strb	r2, [r3, #0]
}
 8007828:	e7fa      	b.n	8007820 <mpipedrv_unblock+0xc>
 800782a:	bf00      	nop
 800782c:	20002d9c 	.word	0x20002d9c

08007830 <mpipedrv_kill>:
#endif


#ifndef EXTF_mpipedrv_kill
void mpipedrv_kill() {
 8007830:	b508      	push	{r3, lr}
    // Close down the peripheral
    sub_mpipe_close();
 8007832:	f7ff ff31 	bl	8007698 <sub_mpipe_close>

    // Clear the TX queue
    ///@note I just commented-out this on 20 Sept
	//q_empty(mpipe.alp.outq);
}
 8007836:	bd08      	pop	{r3, pc}

08007838 <sub_txopen>:
#endif




void sub_txopen() {
 8007838:	b570      	push	{r4, r5, r6, lr}
    uart_element_t*  txpayload;
    
    txpayload           = &uart.tlist.rb[uart.tlist.i];
 800783a:	4c22      	ldr	r4, [pc, #136]	; (80078c4 <sub_txopen+0x8c>)
 800783c:	f894 509e 	ldrb.w	r5, [r4, #158]	; 0x9e

    /// Build Header
    uart.header.syncFF  = 0xff;
 8007840:	23ff      	movs	r3, #255	; 0xff
 8007842:	7423      	strb	r3, [r4, #16]
    uart.header.sync55  = 0x55;
 8007844:	2355      	movs	r3, #85	; 0x55
 8007846:	7463      	strb	r3, [r4, #17]
    
    // Always include CRC on TX
    uart.header.plen    = PLATFORM_ENDIAN16(txpayload->length);
 8007848:	350b      	adds	r5, #11
 800784a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800784e:	892b      	ldrh	r3, [r5, #8]
  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8007850:	ba5b      	rev16	r3, r3
 8007852:	82a3      	strh	r3, [r4, #20]
    uart.header.ctl     = 0;
 8007854:	2600      	movs	r6, #0
 8007856:	75e6      	strb	r6, [r4, #23]
    uart.header.seq    += 1;
 8007858:	7da3      	ldrb	r3, [r4, #22]
 800785a:	3301      	adds	r3, #1
 800785c:	75a3      	strb	r3, [r4, #22]
    
    uart.header.crc16   = crc16drv_block_manual((ot_u8*)&uart.header.plen, 4, 0xFFFF);
 800785e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007862:	2104      	movs	r1, #4
 8007864:	f104 0014 	add.w	r0, r4, #20
 8007868:	f7fe fa06 	bl	8005c78 <crc16drv_block_manual>
 800786c:	4602      	mov	r2, r0
 800786e:	8260      	strh	r0, [r4, #18]
    uart.header.crc16   = crc16drv_block_manual(txpayload->front, txpayload->length, uart.header.crc16);
 8007870:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8007874:	6868      	ldr	r0, [r5, #4]
 8007876:	f7fe f9ff 	bl	8005c78 <crc16drv_block_manual>
 800787a:	ba40      	rev16	r0, r0
    uart.header.crc16   = PLATFORM_ENDIAN16(uart.header.crc16);
 800787c:	8260      	strh	r0, [r4, #18]

    sub_mpipe_close();
 800787e:	f7ff ff0b 	bl	8007698 <sub_mpipe_close>
    sub_mpipe_open();
 8007882:	f7ff fef5 	bl	8007670 <sub_mpipe_open>
    mpipe.state = MPIPE_Tx_Wait;
 8007886:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <sub_txopen+0x90>)
 8007888:	2205      	movs	r2, #5
 800788a:	701a      	strb	r2, [r3, #0]
    __UART_TXOPEN();
 800788c:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <sub_txopen+0x94>)
 800788e:	601e      	str	r6, [r3, #0]
 8007890:	4a0f      	ldr	r2, [pc, #60]	; (80078d0 <sub_txopen+0x98>)
 8007892:	621a      	str	r2, [r3, #32]
 8007894:	2209      	movs	r2, #9
 8007896:	601a      	str	r2, [r3, #0]
    __DMA_TXOPEN(&uart.header.syncFF, 8);
 8007898:	4a0e      	ldr	r2, [pc, #56]	; (80078d4 <sub_txopen+0x9c>)
 800789a:	6016      	str	r6, [r2, #0]
 800789c:	3410      	adds	r4, #16
 800789e:	60d4      	str	r4, [r2, #12]
 80078a0:	2308      	movs	r3, #8
 80078a2:	6053      	str	r3, [r2, #4]
 80078a4:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <sub_txopen+0xa0>)
 80078a6:	f04f 617f 	mov.w	r1, #267386880	; 0xff00000
 80078aa:	6059      	str	r1, [r3, #4]
 80078ac:	490b      	ldr	r1, [pc, #44]	; (80078dc <sub_txopen+0xa4>)
 80078ae:	680b      	ldr	r3, [r1, #0]
 80078b0:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 80078b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80078b8:	600b      	str	r3, [r1, #0]
 80078ba:	f242 0393 	movw	r3, #8339	; 0x2093
 80078be:	6013      	str	r3, [r2, #0]
}
 80078c0:	bd70      	pop	{r4, r5, r6, pc}
 80078c2:	bf00      	nop
 80078c4:	20003214 	.word	0x20003214
 80078c8:	20002d9c 	.word	0x20002d9c
 80078cc:	40004400 	.word	0x40004400
 80078d0:	00121b5f 	.word	0x00121b5f
 80078d4:	40020080 	.word	0x40020080
 80078d8:	40020000 	.word	0x40020000
 80078dc:	400200a8 	.word	0x400200a8

080078e0 <sub_txcont>:


void sub_txcont() {
    uart_element_t* txpayload;
    txpayload           = &uart.tlist.rb[uart.tlist.i];
 80078e0:	4b0f      	ldr	r3, [pc, #60]	; (8007920 <sub_txcont+0x40>)
 80078e2:	f893 109e 	ldrb.w	r1, [r3, #158]	; 0x9e
    _DMATX->CCR         = 0;
 80078e6:	4a0f      	ldr	r2, [pc, #60]	; (8007924 <sub_txcont+0x44>)
 80078e8:	2000      	movs	r0, #0
 80078ea:	6010      	str	r0, [r2, #0]
    _DMATX->CMAR        = (uint32_t)txpayload->front;   
 80078ec:	310b      	adds	r1, #11
 80078ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80078f2:	6859      	ldr	r1, [r3, #4]
 80078f4:	60d1      	str	r1, [r2, #12]
    _DMATX->CNDTR       = txpayload->length + MPIPE_DMAFLUFF;
 80078f6:	891b      	ldrh	r3, [r3, #8]
 80078f8:	6053      	str	r3, [r2, #4]
    DMA1->IFCR          = (_DMARX_IFG | _DMATX_IFG);
 80078fa:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <sub_txcont+0x48>)
 80078fc:	f04f 617f 	mov.w	r1, #267386880	; 0xff00000
 8007900:	6059      	str	r1, [r3, #4]
    DMA1_CSELR->CSELR   = (DMA1_CSELR->CSELR & ~_DMA_CSEL_MASK) | _DMATX_CSEL;
 8007902:	490a      	ldr	r1, [pc, #40]	; (800792c <sub_txcont+0x4c>)
 8007904:	680b      	ldr	r3, [r1, #0]
 8007906:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 800790a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800790e:	600b      	str	r3, [r1, #0]
    __UART_CLEAR();
 8007910:	4b07      	ldr	r3, [pc, #28]	; (8007930 <sub_txcont+0x50>)
 8007912:	4908      	ldr	r1, [pc, #32]	; (8007934 <sub_txcont+0x54>)
 8007914:	6219      	str	r1, [r3, #32]
    _DMATX->CCR         = (DMA_CCR_DIR | DMA_CCR_MINC | (2<<DMA_CCR_PL_Pos) | DMA_CCR_TCIE | DMA_CCR_EN);
 8007916:	f242 0393 	movw	r3, #8339	; 0x2093
 800791a:	6013      	str	r3, [r2, #0]
}
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20003214 	.word	0x20003214
 8007924:	40020080 	.word	0x40020080
 8007928:	40020000 	.word	0x40020000
 800792c:	400200a8 	.word	0x400200a8
 8007930:	40004400 	.word	0x40004400
 8007934:	00121b5f 	.word	0x00121b5f

08007938 <mpipedrv_tx>:



#ifndef EXTF_mpipedrv_tx
ot_int mpipedrv_tx(ot_bool blocking, mpipe_priority data_priority) {
 8007938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793a:	4606      	mov	r6, r0
        goto mpipedrv_tx_GO;
    }
    ///@todo In this space, swap to the standard mpipe queue
#   endif

    holdtime = q_blocktime(mpipe.alp.outq);
 800793c:	4b20      	ldr	r3, [pc, #128]	; (80079c0 <mpipedrv_tx+0x88>)
 800793e:	6918      	ldr	r0, [r3, #16]
 8007940:	f7fe fa67 	bl	8005e12 <q_blocktime>
    if (holdtime != 0) {
 8007944:	b110      	cbz	r0, 800794c <mpipedrv_tx+0x14>
        return -holdtime;
 8007946:	4240      	negs	r0, r0
 8007948:	b200      	sxth	r0, r0
    /// Purpose here is to continue blocking the queue until the
    /// most recently added packet (last packet) is sent.
    q_blockwrite(mpipe.alp.outq, blocking ? holdtime : 0);
    
    return holdtime;
}
 800794a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    holdtime                    = __MPIPE_TIMEOUT(q_length(mpipe.alp.outq));
 800794c:	4f1c      	ldr	r7, [pc, #112]	; (80079c0 <mpipedrv_tx+0x88>)
 800794e:	6938      	ldr	r0, [r7, #16]
 8007950:	f7fe fa4b 	bl	8005dea <q_length>
 8007954:	3008      	adds	r0, #8
 8007956:	f3c0 00cf 	ubfx	r0, r0, #3, #16
 800795a:	3001      	adds	r0, #1
 800795c:	b284      	uxth	r4, r0
    uart.tlist.size            += 1;
 800795e:	4b19      	ldr	r3, [pc, #100]	; (80079c4 <mpipedrv_tx+0x8c>)
 8007960:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8007964:	3201      	adds	r2, #1
 8007966:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    uart.tlist.j                = (uart.tlist.j + 1) & (UART_RB_MAX-1);
 800796a:	f893 509f 	ldrb.w	r5, [r3, #159]	; 0x9f
 800796e:	3501      	adds	r5, #1
 8007970:	f005 0507 	and.w	r5, r5, #7
 8007974:	f883 509f 	strb.w	r5, [r3, #159]	; 0x9f
    txpayload->front            = mpipe.alp.outq->getcursor;
 8007978:	6938      	ldr	r0, [r7, #16]
 800797a:	6842      	ldr	r2, [r0, #4]
 800797c:	350b      	adds	r5, #11
 800797e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007982:	606a      	str	r2, [r5, #4]
    txpayload->length           = q_span(mpipe.alp.outq);
 8007984:	f7fe fa36 	bl	8005df4 <q_span>
 8007988:	8128      	strh	r0, [r5, #8]
    mpipe.alp.outq->getcursor   = mpipe.alp.outq->putcursor;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	605a      	str	r2, [r3, #4]
    if (mpipe.state == MPIPE_Idle) {
 8007990:	783b      	ldrb	r3, [r7, #0]
 8007992:	b25b      	sxtb	r3, r3
 8007994:	b13b      	cbz	r3, 80079a6 <mpipedrv_tx+0x6e>
    q_blockwrite(mpipe.alp.outq, blocking ? holdtime : 0);
 8007996:	4b0a      	ldr	r3, [pc, #40]	; (80079c0 <mpipedrv_tx+0x88>)
 8007998:	6918      	ldr	r0, [r3, #16]
 800799a:	b17e      	cbz	r6, 80079bc <mpipedrv_tx+0x84>
 800799c:	4621      	mov	r1, r4
 800799e:	f7fe fa3a 	bl	8005e16 <q_blockwrite>
    return holdtime;
 80079a2:	b220      	sxth	r0, r4
 80079a4:	e7d1      	b.n	800794a <mpipedrv_tx+0x12>
        uart.tlist.i = (uart.tlist.i + 1) & (UART_RB_MAX-1);
 80079a6:	4a07      	ldr	r2, [pc, #28]	; (80079c4 <mpipedrv_tx+0x8c>)
 80079a8:	f892 309e 	ldrb.w	r3, [r2, #158]	; 0x9e
 80079ac:	3301      	adds	r3, #1
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	f882 309e 	strb.w	r3, [r2, #158]	; 0x9e
        sub_txopen();
 80079b6:	f7ff ff3f 	bl	8007838 <sub_txopen>
 80079ba:	e7ec      	b.n	8007996 <mpipedrv_tx+0x5e>
    q_blockwrite(mpipe.alp.outq, blocking ? holdtime : 0);
 80079bc:	2100      	movs	r1, #0
 80079be:	e7ee      	b.n	800799e <mpipedrv_tx+0x66>
 80079c0:	20002d9c 	.word	0x20002d9c
 80079c4:	20003214 	.word	0x20003214

080079c8 <mpipedrv_rx>:




#ifndef EXTF_mpipedrv_rx
void mpipedrv_rx(ot_bool blocking, mpipe_priority data_priority) {
 80079c8:	b508      	push	{r3, lr}
#if (BOARD_FEATURE(MPIPE_BREAK))
    /// Wait for Line Sync.  Sync interrupt will call sub_rx()
    sub_mpipe_close();
 80079ca:	f7ff fe65 	bl	8007698 <sub_mpipe_close>
    EXTI->IMR1 |= MPIPE_UART_RXPIN;
 80079ce:	4a03      	ldr	r2, [pc, #12]	; (80079dc <mpipedrv_rx+0x14>)
 80079d0:	6813      	ldr	r3, [r2, #0]
 80079d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079d6:	6013      	str	r3, [r2, #0]
    mpipe_rxsync_isr();
#endif

    //MPIPE_UART->CR1   = (USART_CR1_UE | USART_CR1_RE);
    //__DMA_RXOPEN(&uart.rxbuffer[0], uart.rxbuffer[0]+2);   //
}
 80079d8:	bd08      	pop	{r3, pc}
 80079da:	bf00      	nop
 80079dc:	40010400 	.word	0x40010400

080079e0 <platform_isr_usart2>:
void __UART_ISR(void) {
 80079e0:	b508      	push	{r3, lr}
    uart_isr = MPIPE_UART->ISR;
 80079e2:	4b27      	ldr	r3, [pc, #156]	; (8007a80 <platform_isr_usart2+0xa0>)
 80079e4:	69da      	ldr	r2, [r3, #28]
    __UART_CLEAR();
 80079e6:	4927      	ldr	r1, [pc, #156]	; (8007a84 <platform_isr_usart2+0xa4>)
 80079e8:	6219      	str	r1, [r3, #32]
    if (uart_isr & USART_ISR_RXNE) {
 80079ea:	f012 0f20 	tst.w	r2, #32
 80079ee:	d02a      	beq.n	8007a46 <platform_isr_usart2+0x66>
        uart.rxbuffer[0] = MPIPE_UART->RDR;
 80079f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	4a24      	ldr	r2, [pc, #144]	; (8007a88 <platform_isr_usart2+0xa8>)
 80079f6:	7613      	strb	r3, [r2, #24]
        mpipe.state     += (uart.rxbuffer[0] == 0x55);  // Progress to MPIPE_RxHeader
 80079f8:	4924      	ldr	r1, [pc, #144]	; (8007a8c <platform_isr_usart2+0xac>)
 80079fa:	780a      	ldrb	r2, [r1, #0]
 80079fc:	2b55      	cmp	r3, #85	; 0x55
 80079fe:	bf14      	ite	ne
 8007a00:	2300      	movne	r3, #0
 8007a02:	2301      	moveq	r3, #1
 8007a04:	fa43 f382 	sxtab	r3, r3, r2
 8007a08:	b25b      	sxtb	r3, r3
 8007a0a:	700b      	strb	r3, [r1, #0]
        if (mpipe.state > MPIPE_Idle) {
 8007a0c:	780b      	ldrb	r3, [r1, #0]
 8007a0e:	b25b      	sxtb	r3, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	dd17      	ble.n	8007a44 <platform_isr_usart2+0x64>
            MPIPE_UART->CR1 = (USART_CR1_UE | USART_CR1_RE);
 8007a14:	4b1a      	ldr	r3, [pc, #104]	; (8007a80 <platform_isr_usart2+0xa0>)
 8007a16:	2205      	movs	r2, #5
 8007a18:	601a      	str	r2, [r3, #0]
            __DMA_RXOPEN(_HEADER_RXPTR, MPIPE_HEADERBYTES-_HEADER_RXOFFSET);
 8007a1a:	4a1d      	ldr	r2, [pc, #116]	; (8007a90 <platform_isr_usart2+0xb0>)
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	6013      	str	r3, [r2, #0]
 8007a20:	4b1c      	ldr	r3, [pc, #112]	; (8007a94 <platform_isr_usart2+0xb4>)
 8007a22:	60d3      	str	r3, [r2, #12]
 8007a24:	2307      	movs	r3, #7
 8007a26:	6053      	str	r3, [r2, #4]
 8007a28:	4b1b      	ldr	r3, [pc, #108]	; (8007a98 <platform_isr_usart2+0xb8>)
 8007a2a:	f04f 617f 	mov.w	r1, #267386880	; 0xff00000
 8007a2e:	6059      	str	r1, [r3, #4]
 8007a30:	491a      	ldr	r1, [pc, #104]	; (8007a9c <platform_isr_usart2+0xbc>)
 8007a32:	680b      	ldr	r3, [r1, #0]
 8007a34:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8007a38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a3c:	600b      	str	r3, [r1, #0]
 8007a3e:	f242 0383 	movw	r3, #8323	; 0x2083
 8007a42:	6013      	str	r3, [r2, #0]
}
 8007a44:	bd08      	pop	{r3, pc}
    else if (uart_isr & USART_ISR_TC) {
 8007a46:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007a4a:	d0fb      	beq.n	8007a44 <platform_isr_usart2+0x64>
        if (--uart.tlist.size != 0) {
 8007a4c:	4a0e      	ldr	r2, [pc, #56]	; (8007a88 <platform_isr_usart2+0xa8>)
 8007a4e:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 8007a5a:	b93b      	cbnz	r3, 8007a6c <platform_isr_usart2+0x8c>
            mpipedrv_rx(False, 0);
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4608      	mov	r0, r1
 8007a60:	f7ff ffb2 	bl	80079c8 <mpipedrv_rx>
            mpipeevt_txdone(0);
 8007a64:	2000      	movs	r0, #0
 8007a66:	f7fe fe06 	bl	8006676 <mpipeevt_txdone>
}
 8007a6a:	e7eb      	b.n	8007a44 <platform_isr_usart2+0x64>
            uart.tlist.i = (uart.tlist.i + 1) & (UART_RB_MAX-1);
 8007a6c:	f892 309e 	ldrb.w	r3, [r2, #158]	; 0x9e
 8007a70:	3301      	adds	r3, #1
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	f882 309e 	strb.w	r3, [r2, #158]	; 0x9e
            sub_txopen();
 8007a7a:	f7ff fedd 	bl	8007838 <sub_txopen>
 8007a7e:	e7e1      	b.n	8007a44 <platform_isr_usart2+0x64>
 8007a80:	40004400 	.word	0x40004400
 8007a84:	00121b5f 	.word	0x00121b5f
 8007a88:	20003214 	.word	0x20003214
 8007a8c:	20002d9c 	.word	0x20002d9c
 8007a90:	4002006c 	.word	0x4002006c
 8007a94:	20003225 	.word	0x20003225
 8007a98:	40020000 	.word	0x40020000
 8007a9c:	400200a8 	.word	0x400200a8

08007aa0 <mpipedrv_isr>:




#ifndef EXTF_mpipedrv_isr
void mpipedrv_isr() {
 8007aa0:	b570      	push	{r4, r5, r6, lr}
///      Acks.  In this case, a complete TX process also requires RX'ing an
///      Ack, and a complete RX process requires TX'ing an Ack. </LI>
    //ot_bool tx_process = False;
    ot_int  error_code = -1;

    __DMA_ALL_CLOSE();
 8007aa2:	4a7c      	ldr	r2, [pc, #496]	; (8007c94 <mpipedrv_isr+0x1f4>)
 8007aa4:	6813      	ldr	r3, [r2, #0]
 8007aa6:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	2300      	movs	r3, #0
 8007aae:	3a28      	subs	r2, #40	; 0x28
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	3a14      	subs	r2, #20
 8007ab4:	6013      	str	r3, [r2, #0]
    __DMA_ALL_CLEAR();
 8007ab6:	4b78      	ldr	r3, [pc, #480]	; (8007c98 <mpipedrv_isr+0x1f8>)
 8007ab8:	f04f 627f 	mov.w	r2, #267386880	; 0xff00000
 8007abc:	605a      	str	r2, [r3, #4]

    switch (mpipe.state) {
 8007abe:	4b77      	ldr	r3, [pc, #476]	; (8007c9c <mpipedrv_isr+0x1fc>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b25b      	sxtb	r3, r3
 8007ac4:	2b06      	cmp	r3, #6
 8007ac6:	f200 80e0 	bhi.w	8007c8a <mpipedrv_isr+0x1ea>
 8007aca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007ace:	0007      	.short	0x0007
 8007ad0:	00750007 	.word	0x00750007
 8007ad4:	00de00de 	.word	0x00de00de
 8007ad8:	00d800d2 	.word	0x00d800d2
        case MPIPE_RxHeader: {
            ot_u16 blockticks;
            
            // If there is no payload or if the input queue is being used by 
            // someone else, this packet is registered as an error.
            uart.rxplen = PLATFORM_ENDIAN16(uart.header.plen);
 8007adc:	4a70      	ldr	r2, [pc, #448]	; (8007ca0 <mpipedrv_isr+0x200>)
 8007ade:	8a93      	ldrh	r3, [r2, #20]
 8007ae0:	ba5b      	rev16	r3, r3
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
            if (uart.rxplen == 0)                           error_code = -1;
 8007ae8:	b96b      	cbnz	r3, 8007b06 <mpipedrv_isr+0x66>
 8007aea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff

    // The RX process is complete, including and ACKing.
    // - Close MPipe and call rxdone event handler from MPipe Task
    // - If RX CRC matters, then make sure to compute it.
    mpipedrv_isr_RXSIG:
    mpipedrv_rx(False, 0);
 8007aee:	2100      	movs	r1, #0
 8007af0:	4608      	mov	r0, r1
 8007af2:	f7ff ff69 	bl	80079c8 <mpipedrv_rx>

    q_unlock(mpipe.alp.inq);
 8007af6:	4b69      	ldr	r3, [pc, #420]	; (8007c9c <mpipedrv_isr+0x1fc>)
 8007af8:	68d8      	ldr	r0, [r3, #12]
 8007afa:	f7fe f999 	bl	8005e30 <q_unlock>
    mpipeevt_rxdone(error_code);
 8007afe:	4620      	mov	r0, r4
 8007b00:	f7fe fdca 	bl	8006698 <mpipeevt_rxdone>
}
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
            else if (q_blocktime(mpipe.alp.inq))            error_code = -11;
 8007b06:	4b65      	ldr	r3, [pc, #404]	; (8007c9c <mpipedrv_isr+0x1fc>)
 8007b08:	68d8      	ldr	r0, [r3, #12]
 8007b0a:	f7fe f982 	bl	8005e12 <q_blocktime>
 8007b0e:	b110      	cbz	r0, 8007b16 <mpipedrv_isr+0x76>
 8007b10:	f06f 040a 	mvn.w	r4, #10
 8007b14:	e7eb      	b.n	8007aee <mpipedrv_isr+0x4e>
            else if (q_writespace(mpipe.alp.inq) < uart.rxplen)  error_code = -7;
 8007b16:	4b61      	ldr	r3, [pc, #388]	; (8007c9c <mpipedrv_isr+0x1fc>)
 8007b18:	68d8      	ldr	r0, [r3, #12]
 8007b1a:	f7fe f970 	bl	8005dfe <q_writespace>
 8007b1e:	4b60      	ldr	r3, [pc, #384]	; (8007ca0 <mpipedrv_isr+0x200>)
 8007b20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b24:	4298      	cmp	r0, r3
 8007b26:	da02      	bge.n	8007b2e <mpipedrv_isr+0x8e>
 8007b28:	f06f 0406 	mvn.w	r4, #6
 8007b2c:	e7df      	b.n	8007aee <mpipedrv_isr+0x4e>
                blockticks = __MPIPE_TIMEOUT(uart.rxplen);
 8007b2e:	f103 0408 	add.w	r4, r3, #8
 8007b32:	08e4      	lsrs	r4, r4, #3
 8007b34:	3401      	adds	r4, #1
                q_blockwrite(mpipe.alp.inq, blockticks);
 8007b36:	4e59      	ldr	r6, [pc, #356]	; (8007c9c <mpipedrv_isr+0x1fc>)
 8007b38:	4621      	mov	r1, r4
 8007b3a:	68f0      	ldr	r0, [r6, #12]
 8007b3c:	f7fe f96b 	bl	8005e16 <q_blockwrite>
                uart.rxframelen = (uart.rxplen <= MPIPE_BUFFER_SIZE) ? uart.rxplen : MPIPE_BUFFER_SIZE;
 8007b40:	4d57      	ldr	r5, [pc, #348]	; (8007ca0 <mpipedrv_isr+0x200>)
 8007b42:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
 8007b46:	2b40      	cmp	r3, #64	; 0x40
 8007b48:	bf28      	it	cs
 8007b4a:	2340      	movcs	r3, #64	; 0x40
 8007b4c:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
                __DMA_RXOPEN(uart.rxbuffer, uart.rxframelen);
 8007b50:	4a54      	ldr	r2, [pc, #336]	; (8007ca4 <mpipedrv_isr+0x204>)
 8007b52:	2100      	movs	r1, #0
 8007b54:	6011      	str	r1, [r2, #0]
 8007b56:	f105 0118 	add.w	r1, r5, #24
 8007b5a:	60d1      	str	r1, [r2, #12]
 8007b5c:	6053      	str	r3, [r2, #4]
 8007b5e:	4b4e      	ldr	r3, [pc, #312]	; (8007c98 <mpipedrv_isr+0x1f8>)
 8007b60:	f04f 617f 	mov.w	r1, #267386880	; 0xff00000
 8007b64:	6059      	str	r1, [r3, #4]
 8007b66:	494b      	ldr	r1, [pc, #300]	; (8007c94 <mpipedrv_isr+0x1f4>)
 8007b68:	680b      	ldr	r3, [r1, #0]
 8007b6a:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8007b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b72:	600b      	str	r3, [r1, #0]
 8007b74:	f242 0383 	movw	r3, #8323	; 0x2083
 8007b78:	6013      	str	r3, [r2, #0]
                mpipeevt_rxdetect(blockticks);
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7fe fd85 	bl	800668a <mpipeevt_rxdetect>
                mpipe.state = MPIPE_RxPayload;
 8007b80:	2302      	movs	r3, #2
 8007b82:	7033      	strb	r3, [r6, #0]
                uart.crc.count  = uart.rxplen;
 8007b84:	f9b5 305a 	ldrsh.w	r3, [r5, #90]	; 0x5a
 8007b88:	812b      	strh	r3, [r5, #8]
                uart.crc.val    = crc16drv_init();
 8007b8a:	f7fe f872 	bl	8005c72 <crc16drv_init>
 8007b8e:	81a8      	strh	r0, [r5, #12]
                if ((uart.header.ctl & MPIPE_CTL_NOCRC) == 0) {
 8007b90:	7deb      	ldrb	r3, [r5, #23]
 8007b92:	f013 0f01 	tst.w	r3, #1
 8007b96:	d1b5      	bne.n	8007b04 <mpipedrv_isr+0x64>
                    uart.crc.writeout   = False;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	72ab      	strb	r3, [r5, #10]
                    uart.crc.cursor     = (ot_u8*)&uart.header.plen;
 8007b9c:	f105 0314 	add.w	r3, r5, #20
 8007ba0:	606b      	str	r3, [r5, #4]
                    uart.crc.count     += 4;
 8007ba2:	892b      	ldrh	r3, [r5, #8]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	812b      	strh	r3, [r5, #8]
                    crc_calc_nstream(&uart.crc, 4);
 8007ba8:	2104      	movs	r1, #4
 8007baa:	1868      	adds	r0, r5, r1
 8007bac:	f7fe f880 	bl	8005cb0 <crc_calc_nstream>
                    uart.crc.cursor     = mpipe.alp.inq->putcursor;
 8007bb0:	68f3      	ldr	r3, [r6, #12]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	606b      	str	r3, [r5, #4]
 8007bb6:	e7a5      	b.n	8007b04 <mpipedrv_isr+0x64>
            if (uart.crc.count > MPIPE_BUFFER_SIZE) {
 8007bb8:	4b39      	ldr	r3, [pc, #228]	; (8007ca0 <mpipedrv_isr+0x200>)
 8007bba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007bbe:	2b40      	cmp	r3, #64	; 0x40
 8007bc0:	dd1c      	ble.n	8007bfc <mpipedrv_isr+0x15c>
                nextframe = uart.crc.count - uart.rxframelen;
 8007bc2:	b29c      	uxth	r4, r3
 8007bc4:	4b36      	ldr	r3, [pc, #216]	; (8007ca0 <mpipedrv_isr+0x200>)
 8007bc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bca:	1ae4      	subs	r4, r4, r3
 8007bcc:	b2a4      	uxth	r4, r4
                if (nextframe > MPIPE_BUFFER_SIZE) {
 8007bce:	2c40      	cmp	r4, #64	; 0x40
 8007bd0:	d900      	bls.n	8007bd4 <mpipedrv_isr+0x134>
                    nextframe = MPIPE_BUFFER_SIZE;
 8007bd2:	2440      	movs	r4, #64	; 0x40
                __DMA_RXOPEN(&uart.rxbuffer, nextframe);
 8007bd4:	4a33      	ldr	r2, [pc, #204]	; (8007ca4 <mpipedrv_isr+0x204>)
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	4b33      	ldr	r3, [pc, #204]	; (8007ca8 <mpipedrv_isr+0x208>)
 8007bdc:	60d3      	str	r3, [r2, #12]
 8007bde:	6054      	str	r4, [r2, #4]
 8007be0:	4b2d      	ldr	r3, [pc, #180]	; (8007c98 <mpipedrv_isr+0x1f8>)
 8007be2:	f04f 617f 	mov.w	r1, #267386880	; 0xff00000
 8007be6:	6059      	str	r1, [r3, #4]
 8007be8:	492a      	ldr	r1, [pc, #168]	; (8007c94 <mpipedrv_isr+0x1f4>)
 8007bea:	680b      	ldr	r3, [r1, #0]
 8007bec:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8007bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bf4:	600b      	str	r3, [r1, #0]
 8007bf6:	f242 0383 	movw	r3, #8323	; 0x2083
 8007bfa:	6013      	str	r3, [r2, #0]
            q_writestring(mpipe.alp.inq, uart.rxbuffer, uart.rxframelen);
 8007bfc:	4d28      	ldr	r5, [pc, #160]	; (8007ca0 <mpipedrv_isr+0x200>)
 8007bfe:	f9b5 2058 	ldrsh.w	r2, [r5, #88]	; 0x58
 8007c02:	f105 0118 	add.w	r1, r5, #24
 8007c06:	4b25      	ldr	r3, [pc, #148]	; (8007c9c <mpipedrv_isr+0x1fc>)
 8007c08:	68d8      	ldr	r0, [r3, #12]
 8007c0a:	f7fe f9b1 	bl	8005f70 <q_writestring>
            if ((uart.header.ctl & MPIPE_CTL_NOCRC) == 0) {
 8007c0e:	7deb      	ldrb	r3, [r5, #23]
 8007c10:	f013 0f01 	tst.w	r3, #1
 8007c14:	d026      	beq.n	8007c64 <mpipedrv_isr+0x1c4>
                uart.crc.count -= uart.rxframelen;
 8007c16:	4b22      	ldr	r3, [pc, #136]	; (8007ca0 <mpipedrv_isr+0x200>)
 8007c18:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 8007c1c:	891a      	ldrh	r2, [r3, #8]
 8007c1e:	1a52      	subs	r2, r2, r1
 8007c20:	811a      	strh	r2, [r3, #8]
            uart.rxframelen = nextframe;
 8007c22:	4d1f      	ldr	r5, [pc, #124]	; (8007ca0 <mpipedrv_isr+0x200>)
 8007c24:	f8a5 4058 	strh.w	r4, [r5, #88]	; 0x58
            q_blockwrite(mpipe.alp.inq, __MPIPE_TIMEOUT(uart.crc.count));
 8007c28:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8007c2c:	3108      	adds	r1, #8
 8007c2e:	10c9      	asrs	r1, r1, #3
 8007c30:	3101      	adds	r1, #1
 8007c32:	b289      	uxth	r1, r1
 8007c34:	4b19      	ldr	r3, [pc, #100]	; (8007c9c <mpipedrv_isr+0x1fc>)
 8007c36:	68d8      	ldr	r0, [r3, #12]
 8007c38:	f7fe f8ed 	bl	8005e16 <q_blockwrite>
            if (uart.crc.count > 0) {
 8007c3c:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f73f af5f 	bgt.w	8007b04 <mpipedrv_isr+0x64>
            if (PLATFORM_ENDIAN16(uart.crc.val) == uart.header.crc16) {
 8007c46:	89ab      	ldrh	r3, [r5, #12]
 8007c48:	ba5b      	rev16	r3, r3
 8007c4a:	8a6a      	ldrh	r2, [r5, #18]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d01f      	beq.n	8007c90 <mpipedrv_isr+0x1f0>
                mpipe.alp.inq->putcursor -= uart.rxplen;
 8007c50:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <mpipedrv_isr+0x1fc>)
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
 8007c58:	6893      	ldr	r3, [r2, #8]
 8007c5a:	1a5b      	subs	r3, r3, r1
 8007c5c:	6093      	str	r3, [r2, #8]
                error_code = -2;
 8007c5e:	f06f 0401 	mvn.w	r4, #1
 8007c62:	e744      	b.n	8007aee <mpipedrv_isr+0x4e>
                crc_calc_nstream(&uart.crc, uart.rxframelen);
 8007c64:	4628      	mov	r0, r5
 8007c66:	f8b5 1058 	ldrh.w	r1, [r5, #88]	; 0x58
 8007c6a:	3004      	adds	r0, #4
 8007c6c:	f7fe f820 	bl	8005cb0 <crc_calc_nstream>
 8007c70:	e7d7      	b.n	8007c22 <mpipedrv_isr+0x182>
            mpipe.state = MPIPE_Tx_Done;
 8007c72:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <mpipedrv_isr+0x1fc>)
 8007c74:	2206      	movs	r2, #6
 8007c76:	701a      	strb	r2, [r3, #0]
            sub_txcont();
 8007c78:	f7ff fe32 	bl	80078e0 <sub_txcont>
            return;
 8007c7c:	e742      	b.n	8007b04 <mpipedrv_isr+0x64>
            __UART_CLEAR();
 8007c7e:	4b0b      	ldr	r3, [pc, #44]	; (8007cac <mpipedrv_isr+0x20c>)
 8007c80:	4a0b      	ldr	r2, [pc, #44]	; (8007cb0 <mpipedrv_isr+0x210>)
 8007c82:	621a      	str	r2, [r3, #32]
            MPIPE_UART->CR1 = (USART_CR1_UE | USART_CR1_TE | USART_CR1_TCIE);
 8007c84:	2249      	movs	r2, #73	; 0x49
 8007c86:	601a      	str	r2, [r3, #0]
            return; 
 8007c88:	e73c      	b.n	8007b04 <mpipedrv_isr+0x64>
    ot_int  error_code = -1;
 8007c8a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007c8e:	e72e      	b.n	8007aee <mpipedrv_isr+0x4e>
                error_code = 0;   
 8007c90:	2400      	movs	r4, #0
 8007c92:	e72c      	b.n	8007aee <mpipedrv_isr+0x4e>
 8007c94:	400200a8 	.word	0x400200a8
 8007c98:	40020000 	.word	0x40020000
 8007c9c:	20002d9c 	.word	0x20002d9c
 8007ca0:	20003214 	.word	0x20003214
 8007ca4:	4002006c 	.word	0x4002006c
 8007ca8:	2000322c 	.word	0x2000322c
 8007cac:	40004400 	.word	0x40004400
 8007cb0:	00121b5f 	.word	0x00121b5f

08007cb4 <platform_isr_dma1ch6>:
void __DMARX_ISR(void) {
 8007cb4:	b508      	push	{r3, lr}
    mpipedrv_isr();
 8007cb6:	f7ff fef3 	bl	8007aa0 <mpipedrv_isr>
}
 8007cba:	bd08      	pop	{r3, pc}

08007cbc <platform_isr_dma1ch7>:
void __DMATX_ISR(void) {
 8007cbc:	b508      	push	{r3, lr}
    mpipedrv_isr();
 8007cbe:	f7ff feef 	bl	8007aa0 <mpipedrv_isr>
}
 8007cc2:	bd08      	pop	{r3, pc}

08007cc4 <vworm_init>:
}
#endif


#ifndef EXTF_vworm_init
ot_u8 vworm_init() {
 8007cc4:	b508      	push	{r3, lr}
    ot_memcpy_4(fsram, (ot_u32*)FLASH_FS_ADDR, sizeof(fsram)/4);
 8007cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cca:	4903      	ldr	r1, [pc, #12]	; (8007cd8 <vworm_init+0x14>)
 8007ccc:	4803      	ldr	r0, [pc, #12]	; (8007cdc <vworm_init+0x18>)
 8007cce:	f7ff fc85 	bl	80075dc <ot_memcpy_4>
    return 0;
}
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	bd08      	pop	{r3, pc}
 8007cd6:	bf00      	nop
 8007cd8:	0801f000 	.word	0x0801f000
 8007cdc:	20001204 	.word	0x20001204

08007ce0 <vworm_read>:

#ifndef EXTF_vworm_read
ot_u16 vworm_read(vaddr addr) {
    ot_u16* data;
    addr   -= VWORM_BASE_VADDR;
    addr   &= ~1;
 8007ce0:	f020 0001 	bic.w	r0, r0, #1
 8007ce4:	b280      	uxth	r0, r0
    data    = (ot_u16*)((ot_u8*)fsram + addr);
    return *data;
}
 8007ce6:	4b01      	ldr	r3, [pc, #4]	; (8007cec <vworm_read+0xc>)
 8007ce8:	5a18      	ldrh	r0, [r3, r0]
 8007cea:	4770      	bx	lr
 8007cec:	20001204 	.word	0x20001204

08007cf0 <vworm_write>:

#ifndef EXTF_vworm_write
ot_u8 vworm_write(vaddr addr, ot_u16 data) {
    ot_u16* aptr;
    addr   -= VWORM_BASE_VADDR;
    addr   &= ~1;
 8007cf0:	f020 0001 	bic.w	r0, r0, #1
 8007cf4:	b280      	uxth	r0, r0
    aptr    = (ot_u16*)((ot_u8*)fsram + addr);
 8007cf6:	4b02      	ldr	r3, [pc, #8]	; (8007d00 <vworm_write+0x10>)
    *aptr   = data;
 8007cf8:	5219      	strh	r1, [r3, r0]
    return 0;
}
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	20001204 	.word	0x20001204

08007d04 <vworm_mark>:
#endif
    


#ifndef EXTF_vworm_mark
ot_u8 vworm_mark(vaddr addr, ot_u16 value) {
 8007d04:	b508      	push	{r3, lr}
    return vworm_write(addr, value);
 8007d06:	f7ff fff3 	bl	8007cf0 <vworm_write>
}
 8007d0a:	bd08      	pop	{r3, pc}

08007d0c <vworm_wipeblock>:
#endif

#ifndef EXTF_vworm_wipeblock
ot_u8 vworm_wipeblock(vaddr addr, ot_uint wipe_span) {
    return 0;
}
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	4770      	bx	lr

08007d10 <vsram_read>:
  * ========================================================================<BR>
  * SRAM version of Veelite doesn't utilize VSRAM
  */

#ifndef EXTF_vsram_read
ot_u16 vsram_read(vaddr addr) {
 8007d10:	b508      	push	{r3, lr}
    return vworm_read(addr);
 8007d12:	f7ff ffe5 	bl	8007ce0 <vworm_read>
}
 8007d16:	bd08      	pop	{r3, pc}

08007d18 <vsram_mark>:
#endif

#ifndef EXTF_vsram_mark
ot_u8 vsram_mark(vaddr addr, ot_u16 value) {
 8007d18:	b508      	push	{r3, lr}
    return vworm_mark(addr, value);
 8007d1a:	f7ff fff3 	bl	8007d04 <vworm_mark>
}
 8007d1e:	bd08      	pop	{r3, pc}

08007d20 <__assert_func>:
 8007d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d22:	461c      	mov	r4, r3
 8007d24:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <__assert_func+0x2c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4605      	mov	r5, r0
 8007d2a:	68d8      	ldr	r0, [r3, #12]
 8007d2c:	b152      	cbz	r2, 8007d44 <__assert_func+0x24>
 8007d2e:	4b08      	ldr	r3, [pc, #32]	; (8007d50 <__assert_func+0x30>)
 8007d30:	9100      	str	r1, [sp, #0]
 8007d32:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007d36:	4907      	ldr	r1, [pc, #28]	; (8007d54 <__assert_func+0x34>)
 8007d38:	462b      	mov	r3, r5
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	f000 f80e 	bl	8007d5c <fiprintf>
 8007d40:	f000 fbf2 	bl	8008528 <abort>
 8007d44:	4b04      	ldr	r3, [pc, #16]	; (8007d58 <__assert_func+0x38>)
 8007d46:	461a      	mov	r2, r3
 8007d48:	e7f2      	b.n	8007d30 <__assert_func+0x10>
 8007d4a:	bf00      	nop
 8007d4c:	20000154 	.word	0x20000154
 8007d50:	0800a088 	.word	0x0800a088
 8007d54:	0800a095 	.word	0x0800a095
 8007d58:	0800a0c3 	.word	0x0800a0c3

08007d5c <fiprintf>:
 8007d5c:	b40e      	push	{r1, r2, r3}
 8007d5e:	b503      	push	{r0, r1, lr}
 8007d60:	4601      	mov	r1, r0
 8007d62:	ab03      	add	r3, sp, #12
 8007d64:	4805      	ldr	r0, [pc, #20]	; (8007d7c <fiprintf+0x20>)
 8007d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d6a:	6800      	ldr	r0, [r0, #0]
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	f000 f85d 	bl	8007e2c <_vfiprintf_r>
 8007d72:	b002      	add	sp, #8
 8007d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d78:	b003      	add	sp, #12
 8007d7a:	4770      	bx	lr
 8007d7c:	20000154 	.word	0x20000154

08007d80 <__libc_init_array>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	4e0d      	ldr	r6, [pc, #52]	; (8007db8 <__libc_init_array+0x38>)
 8007d84:	4c0d      	ldr	r4, [pc, #52]	; (8007dbc <__libc_init_array+0x3c>)
 8007d86:	1ba4      	subs	r4, r4, r6
 8007d88:	10a4      	asrs	r4, r4, #2
 8007d8a:	2500      	movs	r5, #0
 8007d8c:	42a5      	cmp	r5, r4
 8007d8e:	d109      	bne.n	8007da4 <__libc_init_array+0x24>
 8007d90:	4e0b      	ldr	r6, [pc, #44]	; (8007dc0 <__libc_init_array+0x40>)
 8007d92:	4c0c      	ldr	r4, [pc, #48]	; (8007dc4 <__libc_init_array+0x44>)
 8007d94:	f002 f9e2 	bl	800a15c <_init>
 8007d98:	1ba4      	subs	r4, r4, r6
 8007d9a:	10a4      	asrs	r4, r4, #2
 8007d9c:	2500      	movs	r5, #0
 8007d9e:	42a5      	cmp	r5, r4
 8007da0:	d105      	bne.n	8007dae <__libc_init_array+0x2e>
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007da8:	4798      	blx	r3
 8007daa:	3501      	adds	r5, #1
 8007dac:	e7ee      	b.n	8007d8c <__libc_init_array+0xc>
 8007dae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007db2:	4798      	blx	r3
 8007db4:	3501      	adds	r5, #1
 8007db6:	e7f2      	b.n	8007d9e <__libc_init_array+0x1e>
 8007db8:	0800a174 	.word	0x0800a174
 8007dbc:	0800a174 	.word	0x0800a174
 8007dc0:	0800a174 	.word	0x0800a174
 8007dc4:	0800a178 	.word	0x0800a178

08007dc8 <memset>:
 8007dc8:	4402      	add	r2, r0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d100      	bne.n	8007dd2 <memset+0xa>
 8007dd0:	4770      	bx	lr
 8007dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007dd6:	e7f9      	b.n	8007dcc <memset+0x4>

08007dd8 <__sfputc_r>:
 8007dd8:	6893      	ldr	r3, [r2, #8]
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	b410      	push	{r4}
 8007de0:	6093      	str	r3, [r2, #8]
 8007de2:	da08      	bge.n	8007df6 <__sfputc_r+0x1e>
 8007de4:	6994      	ldr	r4, [r2, #24]
 8007de6:	42a3      	cmp	r3, r4
 8007de8:	db01      	blt.n	8007dee <__sfputc_r+0x16>
 8007dea:	290a      	cmp	r1, #10
 8007dec:	d103      	bne.n	8007df6 <__sfputc_r+0x1e>
 8007dee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007df2:	f000 bad9 	b.w	80083a8 <__swbuf_r>
 8007df6:	6813      	ldr	r3, [r2, #0]
 8007df8:	1c58      	adds	r0, r3, #1
 8007dfa:	6010      	str	r0, [r2, #0]
 8007dfc:	7019      	strb	r1, [r3, #0]
 8007dfe:	4608      	mov	r0, r1
 8007e00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <__sfputs_r>:
 8007e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e08:	4606      	mov	r6, r0
 8007e0a:	460f      	mov	r7, r1
 8007e0c:	4614      	mov	r4, r2
 8007e0e:	18d5      	adds	r5, r2, r3
 8007e10:	42ac      	cmp	r4, r5
 8007e12:	d101      	bne.n	8007e18 <__sfputs_r+0x12>
 8007e14:	2000      	movs	r0, #0
 8007e16:	e007      	b.n	8007e28 <__sfputs_r+0x22>
 8007e18:	463a      	mov	r2, r7
 8007e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f7ff ffda 	bl	8007dd8 <__sfputc_r>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d1f3      	bne.n	8007e10 <__sfputs_r+0xa>
 8007e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e2c <_vfiprintf_r>:
 8007e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e30:	460c      	mov	r4, r1
 8007e32:	b09d      	sub	sp, #116	; 0x74
 8007e34:	4617      	mov	r7, r2
 8007e36:	461d      	mov	r5, r3
 8007e38:	4606      	mov	r6, r0
 8007e3a:	b118      	cbz	r0, 8007e44 <_vfiprintf_r+0x18>
 8007e3c:	6983      	ldr	r3, [r0, #24]
 8007e3e:	b90b      	cbnz	r3, 8007e44 <_vfiprintf_r+0x18>
 8007e40:	f000 fc6a 	bl	8008718 <__sinit>
 8007e44:	4b7c      	ldr	r3, [pc, #496]	; (8008038 <_vfiprintf_r+0x20c>)
 8007e46:	429c      	cmp	r4, r3
 8007e48:	d158      	bne.n	8007efc <_vfiprintf_r+0xd0>
 8007e4a:	6874      	ldr	r4, [r6, #4]
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	0718      	lsls	r0, r3, #28
 8007e50:	d55e      	bpl.n	8007f10 <_vfiprintf_r+0xe4>
 8007e52:	6923      	ldr	r3, [r4, #16]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d05b      	beq.n	8007f10 <_vfiprintf_r+0xe4>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e5c:	2320      	movs	r3, #32
 8007e5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e62:	2330      	movs	r3, #48	; 0x30
 8007e64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e68:	9503      	str	r5, [sp, #12]
 8007e6a:	f04f 0b01 	mov.w	fp, #1
 8007e6e:	46b8      	mov	r8, r7
 8007e70:	4645      	mov	r5, r8
 8007e72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007e76:	b10b      	cbz	r3, 8007e7c <_vfiprintf_r+0x50>
 8007e78:	2b25      	cmp	r3, #37	; 0x25
 8007e7a:	d154      	bne.n	8007f26 <_vfiprintf_r+0xfa>
 8007e7c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007e80:	d00b      	beq.n	8007e9a <_vfiprintf_r+0x6e>
 8007e82:	4653      	mov	r3, sl
 8007e84:	463a      	mov	r2, r7
 8007e86:	4621      	mov	r1, r4
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f7ff ffbc 	bl	8007e06 <__sfputs_r>
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f000 80c2 	beq.w	8008018 <_vfiprintf_r+0x1ec>
 8007e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e96:	4453      	add	r3, sl
 8007e98:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9a:	f898 3000 	ldrb.w	r3, [r8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 80ba 	beq.w	8008018 <_vfiprintf_r+0x1ec>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eae:	9304      	str	r3, [sp, #16]
 8007eb0:	9307      	str	r3, [sp, #28]
 8007eb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eb6:	931a      	str	r3, [sp, #104]	; 0x68
 8007eb8:	46a8      	mov	r8, r5
 8007eba:	2205      	movs	r2, #5
 8007ebc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007ec0:	485e      	ldr	r0, [pc, #376]	; (800803c <_vfiprintf_r+0x210>)
 8007ec2:	f7f8 f985 	bl	80001d0 <memchr>
 8007ec6:	9b04      	ldr	r3, [sp, #16]
 8007ec8:	bb78      	cbnz	r0, 8007f2a <_vfiprintf_r+0xfe>
 8007eca:	06d9      	lsls	r1, r3, #27
 8007ecc:	bf44      	itt	mi
 8007ece:	2220      	movmi	r2, #32
 8007ed0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ed4:	071a      	lsls	r2, r3, #28
 8007ed6:	bf44      	itt	mi
 8007ed8:	222b      	movmi	r2, #43	; 0x2b
 8007eda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ede:	782a      	ldrb	r2, [r5, #0]
 8007ee0:	2a2a      	cmp	r2, #42	; 0x2a
 8007ee2:	d02a      	beq.n	8007f3a <_vfiprintf_r+0x10e>
 8007ee4:	9a07      	ldr	r2, [sp, #28]
 8007ee6:	46a8      	mov	r8, r5
 8007ee8:	2000      	movs	r0, #0
 8007eea:	250a      	movs	r5, #10
 8007eec:	4641      	mov	r1, r8
 8007eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ef2:	3b30      	subs	r3, #48	; 0x30
 8007ef4:	2b09      	cmp	r3, #9
 8007ef6:	d969      	bls.n	8007fcc <_vfiprintf_r+0x1a0>
 8007ef8:	b360      	cbz	r0, 8007f54 <_vfiprintf_r+0x128>
 8007efa:	e024      	b.n	8007f46 <_vfiprintf_r+0x11a>
 8007efc:	4b50      	ldr	r3, [pc, #320]	; (8008040 <_vfiprintf_r+0x214>)
 8007efe:	429c      	cmp	r4, r3
 8007f00:	d101      	bne.n	8007f06 <_vfiprintf_r+0xda>
 8007f02:	68b4      	ldr	r4, [r6, #8]
 8007f04:	e7a2      	b.n	8007e4c <_vfiprintf_r+0x20>
 8007f06:	4b4f      	ldr	r3, [pc, #316]	; (8008044 <_vfiprintf_r+0x218>)
 8007f08:	429c      	cmp	r4, r3
 8007f0a:	bf08      	it	eq
 8007f0c:	68f4      	ldreq	r4, [r6, #12]
 8007f0e:	e79d      	b.n	8007e4c <_vfiprintf_r+0x20>
 8007f10:	4621      	mov	r1, r4
 8007f12:	4630      	mov	r0, r6
 8007f14:	f000 fa9a 	bl	800844c <__swsetup_r>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d09d      	beq.n	8007e58 <_vfiprintf_r+0x2c>
 8007f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f20:	b01d      	add	sp, #116	; 0x74
 8007f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f26:	46a8      	mov	r8, r5
 8007f28:	e7a2      	b.n	8007e70 <_vfiprintf_r+0x44>
 8007f2a:	4a44      	ldr	r2, [pc, #272]	; (800803c <_vfiprintf_r+0x210>)
 8007f2c:	1a80      	subs	r0, r0, r2
 8007f2e:	fa0b f000 	lsl.w	r0, fp, r0
 8007f32:	4318      	orrs	r0, r3
 8007f34:	9004      	str	r0, [sp, #16]
 8007f36:	4645      	mov	r5, r8
 8007f38:	e7be      	b.n	8007eb8 <_vfiprintf_r+0x8c>
 8007f3a:	9a03      	ldr	r2, [sp, #12]
 8007f3c:	1d11      	adds	r1, r2, #4
 8007f3e:	6812      	ldr	r2, [r2, #0]
 8007f40:	9103      	str	r1, [sp, #12]
 8007f42:	2a00      	cmp	r2, #0
 8007f44:	db01      	blt.n	8007f4a <_vfiprintf_r+0x11e>
 8007f46:	9207      	str	r2, [sp, #28]
 8007f48:	e004      	b.n	8007f54 <_vfiprintf_r+0x128>
 8007f4a:	4252      	negs	r2, r2
 8007f4c:	f043 0302 	orr.w	r3, r3, #2
 8007f50:	9207      	str	r2, [sp, #28]
 8007f52:	9304      	str	r3, [sp, #16]
 8007f54:	f898 3000 	ldrb.w	r3, [r8]
 8007f58:	2b2e      	cmp	r3, #46	; 0x2e
 8007f5a:	d10e      	bne.n	8007f7a <_vfiprintf_r+0x14e>
 8007f5c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007f60:	2b2a      	cmp	r3, #42	; 0x2a
 8007f62:	d138      	bne.n	8007fd6 <_vfiprintf_r+0x1aa>
 8007f64:	9b03      	ldr	r3, [sp, #12]
 8007f66:	1d1a      	adds	r2, r3, #4
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	9203      	str	r2, [sp, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	bfb8      	it	lt
 8007f70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f74:	f108 0802 	add.w	r8, r8, #2
 8007f78:	9305      	str	r3, [sp, #20]
 8007f7a:	4d33      	ldr	r5, [pc, #204]	; (8008048 <_vfiprintf_r+0x21c>)
 8007f7c:	f898 1000 	ldrb.w	r1, [r8]
 8007f80:	2203      	movs	r2, #3
 8007f82:	4628      	mov	r0, r5
 8007f84:	f7f8 f924 	bl	80001d0 <memchr>
 8007f88:	b140      	cbz	r0, 8007f9c <_vfiprintf_r+0x170>
 8007f8a:	2340      	movs	r3, #64	; 0x40
 8007f8c:	1b40      	subs	r0, r0, r5
 8007f8e:	fa03 f000 	lsl.w	r0, r3, r0
 8007f92:	9b04      	ldr	r3, [sp, #16]
 8007f94:	4303      	orrs	r3, r0
 8007f96:	f108 0801 	add.w	r8, r8, #1
 8007f9a:	9304      	str	r3, [sp, #16]
 8007f9c:	f898 1000 	ldrb.w	r1, [r8]
 8007fa0:	482a      	ldr	r0, [pc, #168]	; (800804c <_vfiprintf_r+0x220>)
 8007fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fa6:	2206      	movs	r2, #6
 8007fa8:	f108 0701 	add.w	r7, r8, #1
 8007fac:	f7f8 f910 	bl	80001d0 <memchr>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d037      	beq.n	8008024 <_vfiprintf_r+0x1f8>
 8007fb4:	4b26      	ldr	r3, [pc, #152]	; (8008050 <_vfiprintf_r+0x224>)
 8007fb6:	bb1b      	cbnz	r3, 8008000 <_vfiprintf_r+0x1d4>
 8007fb8:	9b03      	ldr	r3, [sp, #12]
 8007fba:	3307      	adds	r3, #7
 8007fbc:	f023 0307 	bic.w	r3, r3, #7
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	9303      	str	r3, [sp, #12]
 8007fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc6:	444b      	add	r3, r9
 8007fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fca:	e750      	b.n	8007e6e <_vfiprintf_r+0x42>
 8007fcc:	fb05 3202 	mla	r2, r5, r2, r3
 8007fd0:	2001      	movs	r0, #1
 8007fd2:	4688      	mov	r8, r1
 8007fd4:	e78a      	b.n	8007eec <_vfiprintf_r+0xc0>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f108 0801 	add.w	r8, r8, #1
 8007fdc:	9305      	str	r3, [sp, #20]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	250a      	movs	r5, #10
 8007fe2:	4640      	mov	r0, r8
 8007fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fe8:	3a30      	subs	r2, #48	; 0x30
 8007fea:	2a09      	cmp	r2, #9
 8007fec:	d903      	bls.n	8007ff6 <_vfiprintf_r+0x1ca>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0c3      	beq.n	8007f7a <_vfiprintf_r+0x14e>
 8007ff2:	9105      	str	r1, [sp, #20]
 8007ff4:	e7c1      	b.n	8007f7a <_vfiprintf_r+0x14e>
 8007ff6:	fb05 2101 	mla	r1, r5, r1, r2
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	e7f0      	b.n	8007fe2 <_vfiprintf_r+0x1b6>
 8008000:	ab03      	add	r3, sp, #12
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	4622      	mov	r2, r4
 8008006:	4b13      	ldr	r3, [pc, #76]	; (8008054 <_vfiprintf_r+0x228>)
 8008008:	a904      	add	r1, sp, #16
 800800a:	4630      	mov	r0, r6
 800800c:	f3af 8000 	nop.w
 8008010:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008014:	4681      	mov	r9, r0
 8008016:	d1d5      	bne.n	8007fc4 <_vfiprintf_r+0x198>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	065b      	lsls	r3, r3, #25
 800801c:	f53f af7e 	bmi.w	8007f1c <_vfiprintf_r+0xf0>
 8008020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008022:	e77d      	b.n	8007f20 <_vfiprintf_r+0xf4>
 8008024:	ab03      	add	r3, sp, #12
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	4622      	mov	r2, r4
 800802a:	4b0a      	ldr	r3, [pc, #40]	; (8008054 <_vfiprintf_r+0x228>)
 800802c:	a904      	add	r1, sp, #16
 800802e:	4630      	mov	r0, r6
 8008030:	f000 f888 	bl	8008144 <_printf_i>
 8008034:	e7ec      	b.n	8008010 <_vfiprintf_r+0x1e4>
 8008036:	bf00      	nop
 8008038:	0800a11c 	.word	0x0800a11c
 800803c:	0800a0c8 	.word	0x0800a0c8
 8008040:	0800a13c 	.word	0x0800a13c
 8008044:	0800a0fc 	.word	0x0800a0fc
 8008048:	0800a0ce 	.word	0x0800a0ce
 800804c:	0800a0d2 	.word	0x0800a0d2
 8008050:	00000000 	.word	0x00000000
 8008054:	08007e07 	.word	0x08007e07

08008058 <_printf_common>:
 8008058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800805c:	4691      	mov	r9, r2
 800805e:	461f      	mov	r7, r3
 8008060:	688a      	ldr	r2, [r1, #8]
 8008062:	690b      	ldr	r3, [r1, #16]
 8008064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008068:	4293      	cmp	r3, r2
 800806a:	bfb8      	it	lt
 800806c:	4613      	movlt	r3, r2
 800806e:	f8c9 3000 	str.w	r3, [r9]
 8008072:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008076:	4606      	mov	r6, r0
 8008078:	460c      	mov	r4, r1
 800807a:	b112      	cbz	r2, 8008082 <_printf_common+0x2a>
 800807c:	3301      	adds	r3, #1
 800807e:	f8c9 3000 	str.w	r3, [r9]
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	0699      	lsls	r1, r3, #26
 8008086:	bf42      	ittt	mi
 8008088:	f8d9 3000 	ldrmi.w	r3, [r9]
 800808c:	3302      	addmi	r3, #2
 800808e:	f8c9 3000 	strmi.w	r3, [r9]
 8008092:	6825      	ldr	r5, [r4, #0]
 8008094:	f015 0506 	ands.w	r5, r5, #6
 8008098:	d107      	bne.n	80080aa <_printf_common+0x52>
 800809a:	f104 0a19 	add.w	sl, r4, #25
 800809e:	68e3      	ldr	r3, [r4, #12]
 80080a0:	f8d9 2000 	ldr.w	r2, [r9]
 80080a4:	1a9b      	subs	r3, r3, r2
 80080a6:	42ab      	cmp	r3, r5
 80080a8:	dc28      	bgt.n	80080fc <_printf_common+0xa4>
 80080aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80080ae:	6822      	ldr	r2, [r4, #0]
 80080b0:	3300      	adds	r3, #0
 80080b2:	bf18      	it	ne
 80080b4:	2301      	movne	r3, #1
 80080b6:	0692      	lsls	r2, r2, #26
 80080b8:	d42d      	bmi.n	8008116 <_printf_common+0xbe>
 80080ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080be:	4639      	mov	r1, r7
 80080c0:	4630      	mov	r0, r6
 80080c2:	47c0      	blx	r8
 80080c4:	3001      	adds	r0, #1
 80080c6:	d020      	beq.n	800810a <_printf_common+0xb2>
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	68e5      	ldr	r5, [r4, #12]
 80080cc:	f8d9 2000 	ldr.w	r2, [r9]
 80080d0:	f003 0306 	and.w	r3, r3, #6
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	bf08      	it	eq
 80080d8:	1aad      	subeq	r5, r5, r2
 80080da:	68a3      	ldr	r3, [r4, #8]
 80080dc:	6922      	ldr	r2, [r4, #16]
 80080de:	bf0c      	ite	eq
 80080e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080e4:	2500      	movne	r5, #0
 80080e6:	4293      	cmp	r3, r2
 80080e8:	bfc4      	itt	gt
 80080ea:	1a9b      	subgt	r3, r3, r2
 80080ec:	18ed      	addgt	r5, r5, r3
 80080ee:	f04f 0900 	mov.w	r9, #0
 80080f2:	341a      	adds	r4, #26
 80080f4:	454d      	cmp	r5, r9
 80080f6:	d11a      	bne.n	800812e <_printf_common+0xd6>
 80080f8:	2000      	movs	r0, #0
 80080fa:	e008      	b.n	800810e <_printf_common+0xb6>
 80080fc:	2301      	movs	r3, #1
 80080fe:	4652      	mov	r2, sl
 8008100:	4639      	mov	r1, r7
 8008102:	4630      	mov	r0, r6
 8008104:	47c0      	blx	r8
 8008106:	3001      	adds	r0, #1
 8008108:	d103      	bne.n	8008112 <_printf_common+0xba>
 800810a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800810e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008112:	3501      	adds	r5, #1
 8008114:	e7c3      	b.n	800809e <_printf_common+0x46>
 8008116:	18e1      	adds	r1, r4, r3
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	2030      	movs	r0, #48	; 0x30
 800811c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008120:	4422      	add	r2, r4
 8008122:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008126:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800812a:	3302      	adds	r3, #2
 800812c:	e7c5      	b.n	80080ba <_printf_common+0x62>
 800812e:	2301      	movs	r3, #1
 8008130:	4622      	mov	r2, r4
 8008132:	4639      	mov	r1, r7
 8008134:	4630      	mov	r0, r6
 8008136:	47c0      	blx	r8
 8008138:	3001      	adds	r0, #1
 800813a:	d0e6      	beq.n	800810a <_printf_common+0xb2>
 800813c:	f109 0901 	add.w	r9, r9, #1
 8008140:	e7d8      	b.n	80080f4 <_printf_common+0x9c>
	...

08008144 <_printf_i>:
 8008144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008148:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800814c:	460c      	mov	r4, r1
 800814e:	7e09      	ldrb	r1, [r1, #24]
 8008150:	b085      	sub	sp, #20
 8008152:	296e      	cmp	r1, #110	; 0x6e
 8008154:	4617      	mov	r7, r2
 8008156:	4606      	mov	r6, r0
 8008158:	4698      	mov	r8, r3
 800815a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800815c:	f000 80b3 	beq.w	80082c6 <_printf_i+0x182>
 8008160:	d822      	bhi.n	80081a8 <_printf_i+0x64>
 8008162:	2963      	cmp	r1, #99	; 0x63
 8008164:	d036      	beq.n	80081d4 <_printf_i+0x90>
 8008166:	d80a      	bhi.n	800817e <_printf_i+0x3a>
 8008168:	2900      	cmp	r1, #0
 800816a:	f000 80b9 	beq.w	80082e0 <_printf_i+0x19c>
 800816e:	2958      	cmp	r1, #88	; 0x58
 8008170:	f000 8083 	beq.w	800827a <_printf_i+0x136>
 8008174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008178:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800817c:	e032      	b.n	80081e4 <_printf_i+0xa0>
 800817e:	2964      	cmp	r1, #100	; 0x64
 8008180:	d001      	beq.n	8008186 <_printf_i+0x42>
 8008182:	2969      	cmp	r1, #105	; 0x69
 8008184:	d1f6      	bne.n	8008174 <_printf_i+0x30>
 8008186:	6820      	ldr	r0, [r4, #0]
 8008188:	6813      	ldr	r3, [r2, #0]
 800818a:	0605      	lsls	r5, r0, #24
 800818c:	f103 0104 	add.w	r1, r3, #4
 8008190:	d52a      	bpl.n	80081e8 <_printf_i+0xa4>
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6011      	str	r1, [r2, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	da03      	bge.n	80081a2 <_printf_i+0x5e>
 800819a:	222d      	movs	r2, #45	; 0x2d
 800819c:	425b      	negs	r3, r3
 800819e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80081a2:	486f      	ldr	r0, [pc, #444]	; (8008360 <_printf_i+0x21c>)
 80081a4:	220a      	movs	r2, #10
 80081a6:	e039      	b.n	800821c <_printf_i+0xd8>
 80081a8:	2973      	cmp	r1, #115	; 0x73
 80081aa:	f000 809d 	beq.w	80082e8 <_printf_i+0x1a4>
 80081ae:	d808      	bhi.n	80081c2 <_printf_i+0x7e>
 80081b0:	296f      	cmp	r1, #111	; 0x6f
 80081b2:	d020      	beq.n	80081f6 <_printf_i+0xb2>
 80081b4:	2970      	cmp	r1, #112	; 0x70
 80081b6:	d1dd      	bne.n	8008174 <_printf_i+0x30>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	f043 0320 	orr.w	r3, r3, #32
 80081be:	6023      	str	r3, [r4, #0]
 80081c0:	e003      	b.n	80081ca <_printf_i+0x86>
 80081c2:	2975      	cmp	r1, #117	; 0x75
 80081c4:	d017      	beq.n	80081f6 <_printf_i+0xb2>
 80081c6:	2978      	cmp	r1, #120	; 0x78
 80081c8:	d1d4      	bne.n	8008174 <_printf_i+0x30>
 80081ca:	2378      	movs	r3, #120	; 0x78
 80081cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081d0:	4864      	ldr	r0, [pc, #400]	; (8008364 <_printf_i+0x220>)
 80081d2:	e055      	b.n	8008280 <_printf_i+0x13c>
 80081d4:	6813      	ldr	r3, [r2, #0]
 80081d6:	1d19      	adds	r1, r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6011      	str	r1, [r2, #0]
 80081dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081e4:	2301      	movs	r3, #1
 80081e6:	e08c      	b.n	8008302 <_printf_i+0x1be>
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6011      	str	r1, [r2, #0]
 80081ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081f0:	bf18      	it	ne
 80081f2:	b21b      	sxthne	r3, r3
 80081f4:	e7cf      	b.n	8008196 <_printf_i+0x52>
 80081f6:	6813      	ldr	r3, [r2, #0]
 80081f8:	6825      	ldr	r5, [r4, #0]
 80081fa:	1d18      	adds	r0, r3, #4
 80081fc:	6010      	str	r0, [r2, #0]
 80081fe:	0628      	lsls	r0, r5, #24
 8008200:	d501      	bpl.n	8008206 <_printf_i+0xc2>
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	e002      	b.n	800820c <_printf_i+0xc8>
 8008206:	0668      	lsls	r0, r5, #25
 8008208:	d5fb      	bpl.n	8008202 <_printf_i+0xbe>
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	4854      	ldr	r0, [pc, #336]	; (8008360 <_printf_i+0x21c>)
 800820e:	296f      	cmp	r1, #111	; 0x6f
 8008210:	bf14      	ite	ne
 8008212:	220a      	movne	r2, #10
 8008214:	2208      	moveq	r2, #8
 8008216:	2100      	movs	r1, #0
 8008218:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800821c:	6865      	ldr	r5, [r4, #4]
 800821e:	60a5      	str	r5, [r4, #8]
 8008220:	2d00      	cmp	r5, #0
 8008222:	f2c0 8095 	blt.w	8008350 <_printf_i+0x20c>
 8008226:	6821      	ldr	r1, [r4, #0]
 8008228:	f021 0104 	bic.w	r1, r1, #4
 800822c:	6021      	str	r1, [r4, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d13d      	bne.n	80082ae <_printf_i+0x16a>
 8008232:	2d00      	cmp	r5, #0
 8008234:	f040 808e 	bne.w	8008354 <_printf_i+0x210>
 8008238:	4665      	mov	r5, ip
 800823a:	2a08      	cmp	r2, #8
 800823c:	d10b      	bne.n	8008256 <_printf_i+0x112>
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	07db      	lsls	r3, r3, #31
 8008242:	d508      	bpl.n	8008256 <_printf_i+0x112>
 8008244:	6923      	ldr	r3, [r4, #16]
 8008246:	6862      	ldr	r2, [r4, #4]
 8008248:	429a      	cmp	r2, r3
 800824a:	bfde      	ittt	le
 800824c:	2330      	movle	r3, #48	; 0x30
 800824e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008252:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008256:	ebac 0305 	sub.w	r3, ip, r5
 800825a:	6123      	str	r3, [r4, #16]
 800825c:	f8cd 8000 	str.w	r8, [sp]
 8008260:	463b      	mov	r3, r7
 8008262:	aa03      	add	r2, sp, #12
 8008264:	4621      	mov	r1, r4
 8008266:	4630      	mov	r0, r6
 8008268:	f7ff fef6 	bl	8008058 <_printf_common>
 800826c:	3001      	adds	r0, #1
 800826e:	d14d      	bne.n	800830c <_printf_i+0x1c8>
 8008270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008274:	b005      	add	sp, #20
 8008276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800827a:	4839      	ldr	r0, [pc, #228]	; (8008360 <_printf_i+0x21c>)
 800827c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008280:	6813      	ldr	r3, [r2, #0]
 8008282:	6821      	ldr	r1, [r4, #0]
 8008284:	1d1d      	adds	r5, r3, #4
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6015      	str	r5, [r2, #0]
 800828a:	060a      	lsls	r2, r1, #24
 800828c:	d50b      	bpl.n	80082a6 <_printf_i+0x162>
 800828e:	07ca      	lsls	r2, r1, #31
 8008290:	bf44      	itt	mi
 8008292:	f041 0120 	orrmi.w	r1, r1, #32
 8008296:	6021      	strmi	r1, [r4, #0]
 8008298:	b91b      	cbnz	r3, 80082a2 <_printf_i+0x15e>
 800829a:	6822      	ldr	r2, [r4, #0]
 800829c:	f022 0220 	bic.w	r2, r2, #32
 80082a0:	6022      	str	r2, [r4, #0]
 80082a2:	2210      	movs	r2, #16
 80082a4:	e7b7      	b.n	8008216 <_printf_i+0xd2>
 80082a6:	064d      	lsls	r5, r1, #25
 80082a8:	bf48      	it	mi
 80082aa:	b29b      	uxthmi	r3, r3
 80082ac:	e7ef      	b.n	800828e <_printf_i+0x14a>
 80082ae:	4665      	mov	r5, ip
 80082b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80082b4:	fb02 3311 	mls	r3, r2, r1, r3
 80082b8:	5cc3      	ldrb	r3, [r0, r3]
 80082ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80082be:	460b      	mov	r3, r1
 80082c0:	2900      	cmp	r1, #0
 80082c2:	d1f5      	bne.n	80082b0 <_printf_i+0x16c>
 80082c4:	e7b9      	b.n	800823a <_printf_i+0xf6>
 80082c6:	6813      	ldr	r3, [r2, #0]
 80082c8:	6825      	ldr	r5, [r4, #0]
 80082ca:	6961      	ldr	r1, [r4, #20]
 80082cc:	1d18      	adds	r0, r3, #4
 80082ce:	6010      	str	r0, [r2, #0]
 80082d0:	0628      	lsls	r0, r5, #24
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	d501      	bpl.n	80082da <_printf_i+0x196>
 80082d6:	6019      	str	r1, [r3, #0]
 80082d8:	e002      	b.n	80082e0 <_printf_i+0x19c>
 80082da:	066a      	lsls	r2, r5, #25
 80082dc:	d5fb      	bpl.n	80082d6 <_printf_i+0x192>
 80082de:	8019      	strh	r1, [r3, #0]
 80082e0:	2300      	movs	r3, #0
 80082e2:	6123      	str	r3, [r4, #16]
 80082e4:	4665      	mov	r5, ip
 80082e6:	e7b9      	b.n	800825c <_printf_i+0x118>
 80082e8:	6813      	ldr	r3, [r2, #0]
 80082ea:	1d19      	adds	r1, r3, #4
 80082ec:	6011      	str	r1, [r2, #0]
 80082ee:	681d      	ldr	r5, [r3, #0]
 80082f0:	6862      	ldr	r2, [r4, #4]
 80082f2:	2100      	movs	r1, #0
 80082f4:	4628      	mov	r0, r5
 80082f6:	f7f7 ff6b 	bl	80001d0 <memchr>
 80082fa:	b108      	cbz	r0, 8008300 <_printf_i+0x1bc>
 80082fc:	1b40      	subs	r0, r0, r5
 80082fe:	6060      	str	r0, [r4, #4]
 8008300:	6863      	ldr	r3, [r4, #4]
 8008302:	6123      	str	r3, [r4, #16]
 8008304:	2300      	movs	r3, #0
 8008306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800830a:	e7a7      	b.n	800825c <_printf_i+0x118>
 800830c:	6923      	ldr	r3, [r4, #16]
 800830e:	462a      	mov	r2, r5
 8008310:	4639      	mov	r1, r7
 8008312:	4630      	mov	r0, r6
 8008314:	47c0      	blx	r8
 8008316:	3001      	adds	r0, #1
 8008318:	d0aa      	beq.n	8008270 <_printf_i+0x12c>
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	079b      	lsls	r3, r3, #30
 800831e:	d413      	bmi.n	8008348 <_printf_i+0x204>
 8008320:	68e0      	ldr	r0, [r4, #12]
 8008322:	9b03      	ldr	r3, [sp, #12]
 8008324:	4298      	cmp	r0, r3
 8008326:	bfb8      	it	lt
 8008328:	4618      	movlt	r0, r3
 800832a:	e7a3      	b.n	8008274 <_printf_i+0x130>
 800832c:	2301      	movs	r3, #1
 800832e:	464a      	mov	r2, r9
 8008330:	4639      	mov	r1, r7
 8008332:	4630      	mov	r0, r6
 8008334:	47c0      	blx	r8
 8008336:	3001      	adds	r0, #1
 8008338:	d09a      	beq.n	8008270 <_printf_i+0x12c>
 800833a:	3501      	adds	r5, #1
 800833c:	68e3      	ldr	r3, [r4, #12]
 800833e:	9a03      	ldr	r2, [sp, #12]
 8008340:	1a9b      	subs	r3, r3, r2
 8008342:	42ab      	cmp	r3, r5
 8008344:	dcf2      	bgt.n	800832c <_printf_i+0x1e8>
 8008346:	e7eb      	b.n	8008320 <_printf_i+0x1dc>
 8008348:	2500      	movs	r5, #0
 800834a:	f104 0919 	add.w	r9, r4, #25
 800834e:	e7f5      	b.n	800833c <_printf_i+0x1f8>
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1ac      	bne.n	80082ae <_printf_i+0x16a>
 8008354:	7803      	ldrb	r3, [r0, #0]
 8008356:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800835a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800835e:	e76c      	b.n	800823a <_printf_i+0xf6>
 8008360:	0800a0d9 	.word	0x0800a0d9
 8008364:	0800a0ea 	.word	0x0800a0ea

08008368 <siprintf>:
 8008368:	b40e      	push	{r1, r2, r3}
 800836a:	b500      	push	{lr}
 800836c:	b09c      	sub	sp, #112	; 0x70
 800836e:	ab1d      	add	r3, sp, #116	; 0x74
 8008370:	9002      	str	r0, [sp, #8]
 8008372:	9006      	str	r0, [sp, #24]
 8008374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008378:	4809      	ldr	r0, [pc, #36]	; (80083a0 <siprintf+0x38>)
 800837a:	9107      	str	r1, [sp, #28]
 800837c:	9104      	str	r1, [sp, #16]
 800837e:	4909      	ldr	r1, [pc, #36]	; (80083a4 <siprintf+0x3c>)
 8008380:	f853 2b04 	ldr.w	r2, [r3], #4
 8008384:	9105      	str	r1, [sp, #20]
 8008386:	6800      	ldr	r0, [r0, #0]
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	a902      	add	r1, sp, #8
 800838c:	f000 fbfe 	bl	8008b8c <_svfiprintf_r>
 8008390:	9b02      	ldr	r3, [sp, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	b01c      	add	sp, #112	; 0x70
 8008398:	f85d eb04 	ldr.w	lr, [sp], #4
 800839c:	b003      	add	sp, #12
 800839e:	4770      	bx	lr
 80083a0:	20000154 	.word	0x20000154
 80083a4:	ffff0208 	.word	0xffff0208

080083a8 <__swbuf_r>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	460e      	mov	r6, r1
 80083ac:	4614      	mov	r4, r2
 80083ae:	4605      	mov	r5, r0
 80083b0:	b118      	cbz	r0, 80083ba <__swbuf_r+0x12>
 80083b2:	6983      	ldr	r3, [r0, #24]
 80083b4:	b90b      	cbnz	r3, 80083ba <__swbuf_r+0x12>
 80083b6:	f000 f9af 	bl	8008718 <__sinit>
 80083ba:	4b21      	ldr	r3, [pc, #132]	; (8008440 <__swbuf_r+0x98>)
 80083bc:	429c      	cmp	r4, r3
 80083be:	d12a      	bne.n	8008416 <__swbuf_r+0x6e>
 80083c0:	686c      	ldr	r4, [r5, #4]
 80083c2:	69a3      	ldr	r3, [r4, #24]
 80083c4:	60a3      	str	r3, [r4, #8]
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	071a      	lsls	r2, r3, #28
 80083ca:	d52e      	bpl.n	800842a <__swbuf_r+0x82>
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	b363      	cbz	r3, 800842a <__swbuf_r+0x82>
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	6820      	ldr	r0, [r4, #0]
 80083d4:	1ac0      	subs	r0, r0, r3
 80083d6:	6963      	ldr	r3, [r4, #20]
 80083d8:	b2f6      	uxtb	r6, r6
 80083da:	4283      	cmp	r3, r0
 80083dc:	4637      	mov	r7, r6
 80083de:	dc04      	bgt.n	80083ea <__swbuf_r+0x42>
 80083e0:	4621      	mov	r1, r4
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 f92e 	bl	8008644 <_fflush_r>
 80083e8:	bb28      	cbnz	r0, 8008436 <__swbuf_r+0x8e>
 80083ea:	68a3      	ldr	r3, [r4, #8]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	60a3      	str	r3, [r4, #8]
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	6022      	str	r2, [r4, #0]
 80083f6:	701e      	strb	r6, [r3, #0]
 80083f8:	6963      	ldr	r3, [r4, #20]
 80083fa:	3001      	adds	r0, #1
 80083fc:	4283      	cmp	r3, r0
 80083fe:	d004      	beq.n	800840a <__swbuf_r+0x62>
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	07db      	lsls	r3, r3, #31
 8008404:	d519      	bpl.n	800843a <__swbuf_r+0x92>
 8008406:	2e0a      	cmp	r6, #10
 8008408:	d117      	bne.n	800843a <__swbuf_r+0x92>
 800840a:	4621      	mov	r1, r4
 800840c:	4628      	mov	r0, r5
 800840e:	f000 f919 	bl	8008644 <_fflush_r>
 8008412:	b190      	cbz	r0, 800843a <__swbuf_r+0x92>
 8008414:	e00f      	b.n	8008436 <__swbuf_r+0x8e>
 8008416:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <__swbuf_r+0x9c>)
 8008418:	429c      	cmp	r4, r3
 800841a:	d101      	bne.n	8008420 <__swbuf_r+0x78>
 800841c:	68ac      	ldr	r4, [r5, #8]
 800841e:	e7d0      	b.n	80083c2 <__swbuf_r+0x1a>
 8008420:	4b09      	ldr	r3, [pc, #36]	; (8008448 <__swbuf_r+0xa0>)
 8008422:	429c      	cmp	r4, r3
 8008424:	bf08      	it	eq
 8008426:	68ec      	ldreq	r4, [r5, #12]
 8008428:	e7cb      	b.n	80083c2 <__swbuf_r+0x1a>
 800842a:	4621      	mov	r1, r4
 800842c:	4628      	mov	r0, r5
 800842e:	f000 f80d 	bl	800844c <__swsetup_r>
 8008432:	2800      	cmp	r0, #0
 8008434:	d0cc      	beq.n	80083d0 <__swbuf_r+0x28>
 8008436:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800843a:	4638      	mov	r0, r7
 800843c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800843e:	bf00      	nop
 8008440:	0800a11c 	.word	0x0800a11c
 8008444:	0800a13c 	.word	0x0800a13c
 8008448:	0800a0fc 	.word	0x0800a0fc

0800844c <__swsetup_r>:
 800844c:	4b32      	ldr	r3, [pc, #200]	; (8008518 <__swsetup_r+0xcc>)
 800844e:	b570      	push	{r4, r5, r6, lr}
 8008450:	681d      	ldr	r5, [r3, #0]
 8008452:	4606      	mov	r6, r0
 8008454:	460c      	mov	r4, r1
 8008456:	b125      	cbz	r5, 8008462 <__swsetup_r+0x16>
 8008458:	69ab      	ldr	r3, [r5, #24]
 800845a:	b913      	cbnz	r3, 8008462 <__swsetup_r+0x16>
 800845c:	4628      	mov	r0, r5
 800845e:	f000 f95b 	bl	8008718 <__sinit>
 8008462:	4b2e      	ldr	r3, [pc, #184]	; (800851c <__swsetup_r+0xd0>)
 8008464:	429c      	cmp	r4, r3
 8008466:	d10f      	bne.n	8008488 <__swsetup_r+0x3c>
 8008468:	686c      	ldr	r4, [r5, #4]
 800846a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846e:	b29a      	uxth	r2, r3
 8008470:	0715      	lsls	r5, r2, #28
 8008472:	d42c      	bmi.n	80084ce <__swsetup_r+0x82>
 8008474:	06d0      	lsls	r0, r2, #27
 8008476:	d411      	bmi.n	800849c <__swsetup_r+0x50>
 8008478:	2209      	movs	r2, #9
 800847a:	6032      	str	r2, [r6, #0]
 800847c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008480:	81a3      	strh	r3, [r4, #12]
 8008482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008486:	e03e      	b.n	8008506 <__swsetup_r+0xba>
 8008488:	4b25      	ldr	r3, [pc, #148]	; (8008520 <__swsetup_r+0xd4>)
 800848a:	429c      	cmp	r4, r3
 800848c:	d101      	bne.n	8008492 <__swsetup_r+0x46>
 800848e:	68ac      	ldr	r4, [r5, #8]
 8008490:	e7eb      	b.n	800846a <__swsetup_r+0x1e>
 8008492:	4b24      	ldr	r3, [pc, #144]	; (8008524 <__swsetup_r+0xd8>)
 8008494:	429c      	cmp	r4, r3
 8008496:	bf08      	it	eq
 8008498:	68ec      	ldreq	r4, [r5, #12]
 800849a:	e7e6      	b.n	800846a <__swsetup_r+0x1e>
 800849c:	0751      	lsls	r1, r2, #29
 800849e:	d512      	bpl.n	80084c6 <__swsetup_r+0x7a>
 80084a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084a2:	b141      	cbz	r1, 80084b6 <__swsetup_r+0x6a>
 80084a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084a8:	4299      	cmp	r1, r3
 80084aa:	d002      	beq.n	80084b2 <__swsetup_r+0x66>
 80084ac:	4630      	mov	r0, r6
 80084ae:	f000 fa45 	bl	800893c <_free_r>
 80084b2:	2300      	movs	r3, #0
 80084b4:	6363      	str	r3, [r4, #52]	; 0x34
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084bc:	81a3      	strh	r3, [r4, #12]
 80084be:	2300      	movs	r3, #0
 80084c0:	6063      	str	r3, [r4, #4]
 80084c2:	6923      	ldr	r3, [r4, #16]
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	f043 0308 	orr.w	r3, r3, #8
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	6923      	ldr	r3, [r4, #16]
 80084d0:	b94b      	cbnz	r3, 80084e6 <__swsetup_r+0x9a>
 80084d2:	89a3      	ldrh	r3, [r4, #12]
 80084d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084dc:	d003      	beq.n	80084e6 <__swsetup_r+0x9a>
 80084de:	4621      	mov	r1, r4
 80084e0:	4630      	mov	r0, r6
 80084e2:	f000 f9c7 	bl	8008874 <__smakebuf_r>
 80084e6:	89a2      	ldrh	r2, [r4, #12]
 80084e8:	f012 0301 	ands.w	r3, r2, #1
 80084ec:	d00c      	beq.n	8008508 <__swsetup_r+0xbc>
 80084ee:	2300      	movs	r3, #0
 80084f0:	60a3      	str	r3, [r4, #8]
 80084f2:	6963      	ldr	r3, [r4, #20]
 80084f4:	425b      	negs	r3, r3
 80084f6:	61a3      	str	r3, [r4, #24]
 80084f8:	6923      	ldr	r3, [r4, #16]
 80084fa:	b953      	cbnz	r3, 8008512 <__swsetup_r+0xc6>
 80084fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008500:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008504:	d1ba      	bne.n	800847c <__swsetup_r+0x30>
 8008506:	bd70      	pop	{r4, r5, r6, pc}
 8008508:	0792      	lsls	r2, r2, #30
 800850a:	bf58      	it	pl
 800850c:	6963      	ldrpl	r3, [r4, #20]
 800850e:	60a3      	str	r3, [r4, #8]
 8008510:	e7f2      	b.n	80084f8 <__swsetup_r+0xac>
 8008512:	2000      	movs	r0, #0
 8008514:	e7f7      	b.n	8008506 <__swsetup_r+0xba>
 8008516:	bf00      	nop
 8008518:	20000154 	.word	0x20000154
 800851c:	0800a11c 	.word	0x0800a11c
 8008520:	0800a13c 	.word	0x0800a13c
 8008524:	0800a0fc 	.word	0x0800a0fc

08008528 <abort>:
 8008528:	b508      	push	{r3, lr}
 800852a:	2006      	movs	r0, #6
 800852c:	f000 fc5e 	bl	8008dec <raise>
 8008530:	2001      	movs	r0, #1
 8008532:	f000 fd7b 	bl	800902c <_exit>
	...

08008538 <__sflush_r>:
 8008538:	898a      	ldrh	r2, [r1, #12]
 800853a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800853e:	4605      	mov	r5, r0
 8008540:	0710      	lsls	r0, r2, #28
 8008542:	460c      	mov	r4, r1
 8008544:	d458      	bmi.n	80085f8 <__sflush_r+0xc0>
 8008546:	684b      	ldr	r3, [r1, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	dc05      	bgt.n	8008558 <__sflush_r+0x20>
 800854c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	dc02      	bgt.n	8008558 <__sflush_r+0x20>
 8008552:	2000      	movs	r0, #0
 8008554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800855a:	2e00      	cmp	r6, #0
 800855c:	d0f9      	beq.n	8008552 <__sflush_r+0x1a>
 800855e:	2300      	movs	r3, #0
 8008560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008564:	682f      	ldr	r7, [r5, #0]
 8008566:	6a21      	ldr	r1, [r4, #32]
 8008568:	602b      	str	r3, [r5, #0]
 800856a:	d032      	beq.n	80085d2 <__sflush_r+0x9a>
 800856c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	075a      	lsls	r2, r3, #29
 8008572:	d505      	bpl.n	8008580 <__sflush_r+0x48>
 8008574:	6863      	ldr	r3, [r4, #4]
 8008576:	1ac0      	subs	r0, r0, r3
 8008578:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800857a:	b10b      	cbz	r3, 8008580 <__sflush_r+0x48>
 800857c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800857e:	1ac0      	subs	r0, r0, r3
 8008580:	2300      	movs	r3, #0
 8008582:	4602      	mov	r2, r0
 8008584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008586:	6a21      	ldr	r1, [r4, #32]
 8008588:	4628      	mov	r0, r5
 800858a:	47b0      	blx	r6
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	d106      	bne.n	80085a0 <__sflush_r+0x68>
 8008592:	6829      	ldr	r1, [r5, #0]
 8008594:	291d      	cmp	r1, #29
 8008596:	d848      	bhi.n	800862a <__sflush_r+0xf2>
 8008598:	4a29      	ldr	r2, [pc, #164]	; (8008640 <__sflush_r+0x108>)
 800859a:	40ca      	lsrs	r2, r1
 800859c:	07d6      	lsls	r6, r2, #31
 800859e:	d544      	bpl.n	800862a <__sflush_r+0xf2>
 80085a0:	2200      	movs	r2, #0
 80085a2:	6062      	str	r2, [r4, #4]
 80085a4:	04d9      	lsls	r1, r3, #19
 80085a6:	6922      	ldr	r2, [r4, #16]
 80085a8:	6022      	str	r2, [r4, #0]
 80085aa:	d504      	bpl.n	80085b6 <__sflush_r+0x7e>
 80085ac:	1c42      	adds	r2, r0, #1
 80085ae:	d101      	bne.n	80085b4 <__sflush_r+0x7c>
 80085b0:	682b      	ldr	r3, [r5, #0]
 80085b2:	b903      	cbnz	r3, 80085b6 <__sflush_r+0x7e>
 80085b4:	6560      	str	r0, [r4, #84]	; 0x54
 80085b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085b8:	602f      	str	r7, [r5, #0]
 80085ba:	2900      	cmp	r1, #0
 80085bc:	d0c9      	beq.n	8008552 <__sflush_r+0x1a>
 80085be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085c2:	4299      	cmp	r1, r3
 80085c4:	d002      	beq.n	80085cc <__sflush_r+0x94>
 80085c6:	4628      	mov	r0, r5
 80085c8:	f000 f9b8 	bl	800893c <_free_r>
 80085cc:	2000      	movs	r0, #0
 80085ce:	6360      	str	r0, [r4, #52]	; 0x34
 80085d0:	e7c0      	b.n	8008554 <__sflush_r+0x1c>
 80085d2:	2301      	movs	r3, #1
 80085d4:	4628      	mov	r0, r5
 80085d6:	47b0      	blx	r6
 80085d8:	1c41      	adds	r1, r0, #1
 80085da:	d1c8      	bne.n	800856e <__sflush_r+0x36>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0c5      	beq.n	800856e <__sflush_r+0x36>
 80085e2:	2b1d      	cmp	r3, #29
 80085e4:	d001      	beq.n	80085ea <__sflush_r+0xb2>
 80085e6:	2b16      	cmp	r3, #22
 80085e8:	d101      	bne.n	80085ee <__sflush_r+0xb6>
 80085ea:	602f      	str	r7, [r5, #0]
 80085ec:	e7b1      	b.n	8008552 <__sflush_r+0x1a>
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	e7ad      	b.n	8008554 <__sflush_r+0x1c>
 80085f8:	690f      	ldr	r7, [r1, #16]
 80085fa:	2f00      	cmp	r7, #0
 80085fc:	d0a9      	beq.n	8008552 <__sflush_r+0x1a>
 80085fe:	0793      	lsls	r3, r2, #30
 8008600:	680e      	ldr	r6, [r1, #0]
 8008602:	bf08      	it	eq
 8008604:	694b      	ldreq	r3, [r1, #20]
 8008606:	600f      	str	r7, [r1, #0]
 8008608:	bf18      	it	ne
 800860a:	2300      	movne	r3, #0
 800860c:	eba6 0807 	sub.w	r8, r6, r7
 8008610:	608b      	str	r3, [r1, #8]
 8008612:	f1b8 0f00 	cmp.w	r8, #0
 8008616:	dd9c      	ble.n	8008552 <__sflush_r+0x1a>
 8008618:	4643      	mov	r3, r8
 800861a:	463a      	mov	r2, r7
 800861c:	6a21      	ldr	r1, [r4, #32]
 800861e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008620:	4628      	mov	r0, r5
 8008622:	47b0      	blx	r6
 8008624:	2800      	cmp	r0, #0
 8008626:	dc06      	bgt.n	8008636 <__sflush_r+0xfe>
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800862e:	81a3      	strh	r3, [r4, #12]
 8008630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008634:	e78e      	b.n	8008554 <__sflush_r+0x1c>
 8008636:	4407      	add	r7, r0
 8008638:	eba8 0800 	sub.w	r8, r8, r0
 800863c:	e7e9      	b.n	8008612 <__sflush_r+0xda>
 800863e:	bf00      	nop
 8008640:	20400001 	.word	0x20400001

08008644 <_fflush_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	690b      	ldr	r3, [r1, #16]
 8008648:	4605      	mov	r5, r0
 800864a:	460c      	mov	r4, r1
 800864c:	b1db      	cbz	r3, 8008686 <_fflush_r+0x42>
 800864e:	b118      	cbz	r0, 8008658 <_fflush_r+0x14>
 8008650:	6983      	ldr	r3, [r0, #24]
 8008652:	b90b      	cbnz	r3, 8008658 <_fflush_r+0x14>
 8008654:	f000 f860 	bl	8008718 <__sinit>
 8008658:	4b0c      	ldr	r3, [pc, #48]	; (800868c <_fflush_r+0x48>)
 800865a:	429c      	cmp	r4, r3
 800865c:	d109      	bne.n	8008672 <_fflush_r+0x2e>
 800865e:	686c      	ldr	r4, [r5, #4]
 8008660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008664:	b17b      	cbz	r3, 8008686 <_fflush_r+0x42>
 8008666:	4621      	mov	r1, r4
 8008668:	4628      	mov	r0, r5
 800866a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800866e:	f7ff bf63 	b.w	8008538 <__sflush_r>
 8008672:	4b07      	ldr	r3, [pc, #28]	; (8008690 <_fflush_r+0x4c>)
 8008674:	429c      	cmp	r4, r3
 8008676:	d101      	bne.n	800867c <_fflush_r+0x38>
 8008678:	68ac      	ldr	r4, [r5, #8]
 800867a:	e7f1      	b.n	8008660 <_fflush_r+0x1c>
 800867c:	4b05      	ldr	r3, [pc, #20]	; (8008694 <_fflush_r+0x50>)
 800867e:	429c      	cmp	r4, r3
 8008680:	bf08      	it	eq
 8008682:	68ec      	ldreq	r4, [r5, #12]
 8008684:	e7ec      	b.n	8008660 <_fflush_r+0x1c>
 8008686:	2000      	movs	r0, #0
 8008688:	bd38      	pop	{r3, r4, r5, pc}
 800868a:	bf00      	nop
 800868c:	0800a11c 	.word	0x0800a11c
 8008690:	0800a13c 	.word	0x0800a13c
 8008694:	0800a0fc 	.word	0x0800a0fc

08008698 <std>:
 8008698:	2300      	movs	r3, #0
 800869a:	b510      	push	{r4, lr}
 800869c:	4604      	mov	r4, r0
 800869e:	e9c0 3300 	strd	r3, r3, [r0]
 80086a2:	6083      	str	r3, [r0, #8]
 80086a4:	8181      	strh	r1, [r0, #12]
 80086a6:	6643      	str	r3, [r0, #100]	; 0x64
 80086a8:	81c2      	strh	r2, [r0, #14]
 80086aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086ae:	6183      	str	r3, [r0, #24]
 80086b0:	4619      	mov	r1, r3
 80086b2:	2208      	movs	r2, #8
 80086b4:	305c      	adds	r0, #92	; 0x5c
 80086b6:	f7ff fb87 	bl	8007dc8 <memset>
 80086ba:	4b05      	ldr	r3, [pc, #20]	; (80086d0 <std+0x38>)
 80086bc:	6263      	str	r3, [r4, #36]	; 0x24
 80086be:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <std+0x3c>)
 80086c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80086c2:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <std+0x40>)
 80086c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086c6:	4b05      	ldr	r3, [pc, #20]	; (80086dc <std+0x44>)
 80086c8:	6224      	str	r4, [r4, #32]
 80086ca:	6323      	str	r3, [r4, #48]	; 0x30
 80086cc:	bd10      	pop	{r4, pc}
 80086ce:	bf00      	nop
 80086d0:	08008e25 	.word	0x08008e25
 80086d4:	08008e47 	.word	0x08008e47
 80086d8:	08008e7f 	.word	0x08008e7f
 80086dc:	08008ea3 	.word	0x08008ea3

080086e0 <_cleanup_r>:
 80086e0:	4901      	ldr	r1, [pc, #4]	; (80086e8 <_cleanup_r+0x8>)
 80086e2:	f000 b885 	b.w	80087f0 <_fwalk_reent>
 80086e6:	bf00      	nop
 80086e8:	08008645 	.word	0x08008645

080086ec <__sfmoreglue>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	1e4a      	subs	r2, r1, #1
 80086f0:	2568      	movs	r5, #104	; 0x68
 80086f2:	4355      	muls	r5, r2
 80086f4:	460e      	mov	r6, r1
 80086f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086fa:	f000 f96d 	bl	80089d8 <_malloc_r>
 80086fe:	4604      	mov	r4, r0
 8008700:	b140      	cbz	r0, 8008714 <__sfmoreglue+0x28>
 8008702:	2100      	movs	r1, #0
 8008704:	e9c0 1600 	strd	r1, r6, [r0]
 8008708:	300c      	adds	r0, #12
 800870a:	60a0      	str	r0, [r4, #8]
 800870c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008710:	f7ff fb5a 	bl	8007dc8 <memset>
 8008714:	4620      	mov	r0, r4
 8008716:	bd70      	pop	{r4, r5, r6, pc}

08008718 <__sinit>:
 8008718:	6983      	ldr	r3, [r0, #24]
 800871a:	b510      	push	{r4, lr}
 800871c:	4604      	mov	r4, r0
 800871e:	bb33      	cbnz	r3, 800876e <__sinit+0x56>
 8008720:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008724:	6503      	str	r3, [r0, #80]	; 0x50
 8008726:	4b12      	ldr	r3, [pc, #72]	; (8008770 <__sinit+0x58>)
 8008728:	4a12      	ldr	r2, [pc, #72]	; (8008774 <__sinit+0x5c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6282      	str	r2, [r0, #40]	; 0x28
 800872e:	4298      	cmp	r0, r3
 8008730:	bf04      	itt	eq
 8008732:	2301      	moveq	r3, #1
 8008734:	6183      	streq	r3, [r0, #24]
 8008736:	f000 f81f 	bl	8008778 <__sfp>
 800873a:	6060      	str	r0, [r4, #4]
 800873c:	4620      	mov	r0, r4
 800873e:	f000 f81b 	bl	8008778 <__sfp>
 8008742:	60a0      	str	r0, [r4, #8]
 8008744:	4620      	mov	r0, r4
 8008746:	f000 f817 	bl	8008778 <__sfp>
 800874a:	2200      	movs	r2, #0
 800874c:	60e0      	str	r0, [r4, #12]
 800874e:	2104      	movs	r1, #4
 8008750:	6860      	ldr	r0, [r4, #4]
 8008752:	f7ff ffa1 	bl	8008698 <std>
 8008756:	2201      	movs	r2, #1
 8008758:	2109      	movs	r1, #9
 800875a:	68a0      	ldr	r0, [r4, #8]
 800875c:	f7ff ff9c 	bl	8008698 <std>
 8008760:	2202      	movs	r2, #2
 8008762:	2112      	movs	r1, #18
 8008764:	68e0      	ldr	r0, [r4, #12]
 8008766:	f7ff ff97 	bl	8008698 <std>
 800876a:	2301      	movs	r3, #1
 800876c:	61a3      	str	r3, [r4, #24]
 800876e:	bd10      	pop	{r4, pc}
 8008770:	0800a0c4 	.word	0x0800a0c4
 8008774:	080086e1 	.word	0x080086e1

08008778 <__sfp>:
 8008778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877a:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <__sfp+0x70>)
 800877c:	681e      	ldr	r6, [r3, #0]
 800877e:	69b3      	ldr	r3, [r6, #24]
 8008780:	4607      	mov	r7, r0
 8008782:	b913      	cbnz	r3, 800878a <__sfp+0x12>
 8008784:	4630      	mov	r0, r6
 8008786:	f7ff ffc7 	bl	8008718 <__sinit>
 800878a:	3648      	adds	r6, #72	; 0x48
 800878c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008790:	3b01      	subs	r3, #1
 8008792:	d503      	bpl.n	800879c <__sfp+0x24>
 8008794:	6833      	ldr	r3, [r6, #0]
 8008796:	b133      	cbz	r3, 80087a6 <__sfp+0x2e>
 8008798:	6836      	ldr	r6, [r6, #0]
 800879a:	e7f7      	b.n	800878c <__sfp+0x14>
 800879c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087a0:	b16d      	cbz	r5, 80087be <__sfp+0x46>
 80087a2:	3468      	adds	r4, #104	; 0x68
 80087a4:	e7f4      	b.n	8008790 <__sfp+0x18>
 80087a6:	2104      	movs	r1, #4
 80087a8:	4638      	mov	r0, r7
 80087aa:	f7ff ff9f 	bl	80086ec <__sfmoreglue>
 80087ae:	6030      	str	r0, [r6, #0]
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d1f1      	bne.n	8008798 <__sfp+0x20>
 80087b4:	230c      	movs	r3, #12
 80087b6:	603b      	str	r3, [r7, #0]
 80087b8:	4604      	mov	r4, r0
 80087ba:	4620      	mov	r0, r4
 80087bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087be:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <__sfp+0x74>)
 80087c0:	6665      	str	r5, [r4, #100]	; 0x64
 80087c2:	e9c4 5500 	strd	r5, r5, [r4]
 80087c6:	60a5      	str	r5, [r4, #8]
 80087c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80087cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80087d0:	2208      	movs	r2, #8
 80087d2:	4629      	mov	r1, r5
 80087d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087d8:	f7ff faf6 	bl	8007dc8 <memset>
 80087dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087e4:	e7e9      	b.n	80087ba <__sfp+0x42>
 80087e6:	bf00      	nop
 80087e8:	0800a0c4 	.word	0x0800a0c4
 80087ec:	ffff0001 	.word	0xffff0001

080087f0 <_fwalk_reent>:
 80087f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f4:	4680      	mov	r8, r0
 80087f6:	4689      	mov	r9, r1
 80087f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087fc:	2600      	movs	r6, #0
 80087fe:	b914      	cbnz	r4, 8008806 <_fwalk_reent+0x16>
 8008800:	4630      	mov	r0, r6
 8008802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008806:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800880a:	3f01      	subs	r7, #1
 800880c:	d501      	bpl.n	8008812 <_fwalk_reent+0x22>
 800880e:	6824      	ldr	r4, [r4, #0]
 8008810:	e7f5      	b.n	80087fe <_fwalk_reent+0xe>
 8008812:	89ab      	ldrh	r3, [r5, #12]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d907      	bls.n	8008828 <_fwalk_reent+0x38>
 8008818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800881c:	3301      	adds	r3, #1
 800881e:	d003      	beq.n	8008828 <_fwalk_reent+0x38>
 8008820:	4629      	mov	r1, r5
 8008822:	4640      	mov	r0, r8
 8008824:	47c8      	blx	r9
 8008826:	4306      	orrs	r6, r0
 8008828:	3568      	adds	r5, #104	; 0x68
 800882a:	e7ee      	b.n	800880a <_fwalk_reent+0x1a>

0800882c <__swhatbuf_r>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	460e      	mov	r6, r1
 8008830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008834:	2900      	cmp	r1, #0
 8008836:	b096      	sub	sp, #88	; 0x58
 8008838:	4614      	mov	r4, r2
 800883a:	461d      	mov	r5, r3
 800883c:	da07      	bge.n	800884e <__swhatbuf_r+0x22>
 800883e:	2300      	movs	r3, #0
 8008840:	602b      	str	r3, [r5, #0]
 8008842:	89b3      	ldrh	r3, [r6, #12]
 8008844:	061a      	lsls	r2, r3, #24
 8008846:	d410      	bmi.n	800886a <__swhatbuf_r+0x3e>
 8008848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800884c:	e00e      	b.n	800886c <__swhatbuf_r+0x40>
 800884e:	466a      	mov	r2, sp
 8008850:	f000 fb4e 	bl	8008ef0 <_fstat_r>
 8008854:	2800      	cmp	r0, #0
 8008856:	dbf2      	blt.n	800883e <__swhatbuf_r+0x12>
 8008858:	9a01      	ldr	r2, [sp, #4]
 800885a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800885e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008862:	425a      	negs	r2, r3
 8008864:	415a      	adcs	r2, r3
 8008866:	602a      	str	r2, [r5, #0]
 8008868:	e7ee      	b.n	8008848 <__swhatbuf_r+0x1c>
 800886a:	2340      	movs	r3, #64	; 0x40
 800886c:	2000      	movs	r0, #0
 800886e:	6023      	str	r3, [r4, #0]
 8008870:	b016      	add	sp, #88	; 0x58
 8008872:	bd70      	pop	{r4, r5, r6, pc}

08008874 <__smakebuf_r>:
 8008874:	898b      	ldrh	r3, [r1, #12]
 8008876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008878:	079d      	lsls	r5, r3, #30
 800887a:	4606      	mov	r6, r0
 800887c:	460c      	mov	r4, r1
 800887e:	d507      	bpl.n	8008890 <__smakebuf_r+0x1c>
 8008880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	6123      	str	r3, [r4, #16]
 8008888:	2301      	movs	r3, #1
 800888a:	6163      	str	r3, [r4, #20]
 800888c:	b002      	add	sp, #8
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	ab01      	add	r3, sp, #4
 8008892:	466a      	mov	r2, sp
 8008894:	f7ff ffca 	bl	800882c <__swhatbuf_r>
 8008898:	9900      	ldr	r1, [sp, #0]
 800889a:	4605      	mov	r5, r0
 800889c:	4630      	mov	r0, r6
 800889e:	f000 f89b 	bl	80089d8 <_malloc_r>
 80088a2:	b948      	cbnz	r0, 80088b8 <__smakebuf_r+0x44>
 80088a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a8:	059a      	lsls	r2, r3, #22
 80088aa:	d4ef      	bmi.n	800888c <__smakebuf_r+0x18>
 80088ac:	f023 0303 	bic.w	r3, r3, #3
 80088b0:	f043 0302 	orr.w	r3, r3, #2
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	e7e3      	b.n	8008880 <__smakebuf_r+0xc>
 80088b8:	4b0d      	ldr	r3, [pc, #52]	; (80088f0 <__smakebuf_r+0x7c>)
 80088ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	6020      	str	r0, [r4, #0]
 80088c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c4:	81a3      	strh	r3, [r4, #12]
 80088c6:	9b00      	ldr	r3, [sp, #0]
 80088c8:	6163      	str	r3, [r4, #20]
 80088ca:	9b01      	ldr	r3, [sp, #4]
 80088cc:	6120      	str	r0, [r4, #16]
 80088ce:	b15b      	cbz	r3, 80088e8 <__smakebuf_r+0x74>
 80088d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088d4:	4630      	mov	r0, r6
 80088d6:	f000 fb1d 	bl	8008f14 <_isatty_r>
 80088da:	b128      	cbz	r0, 80088e8 <__smakebuf_r+0x74>
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	f023 0303 	bic.w	r3, r3, #3
 80088e2:	f043 0301 	orr.w	r3, r3, #1
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	431d      	orrs	r5, r3
 80088ec:	81a5      	strh	r5, [r4, #12]
 80088ee:	e7cd      	b.n	800888c <__smakebuf_r+0x18>
 80088f0:	080086e1 	.word	0x080086e1

080088f4 <memcpy>:
 80088f4:	b510      	push	{r4, lr}
 80088f6:	1e43      	subs	r3, r0, #1
 80088f8:	440a      	add	r2, r1
 80088fa:	4291      	cmp	r1, r2
 80088fc:	d100      	bne.n	8008900 <memcpy+0xc>
 80088fe:	bd10      	pop	{r4, pc}
 8008900:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008908:	e7f7      	b.n	80088fa <memcpy+0x6>

0800890a <memmove>:
 800890a:	4288      	cmp	r0, r1
 800890c:	b510      	push	{r4, lr}
 800890e:	eb01 0302 	add.w	r3, r1, r2
 8008912:	d807      	bhi.n	8008924 <memmove+0x1a>
 8008914:	1e42      	subs	r2, r0, #1
 8008916:	4299      	cmp	r1, r3
 8008918:	d00a      	beq.n	8008930 <memmove+0x26>
 800891a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800891e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008922:	e7f8      	b.n	8008916 <memmove+0xc>
 8008924:	4283      	cmp	r3, r0
 8008926:	d9f5      	bls.n	8008914 <memmove+0xa>
 8008928:	1881      	adds	r1, r0, r2
 800892a:	1ad2      	subs	r2, r2, r3
 800892c:	42d3      	cmn	r3, r2
 800892e:	d100      	bne.n	8008932 <memmove+0x28>
 8008930:	bd10      	pop	{r4, pc}
 8008932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008936:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800893a:	e7f7      	b.n	800892c <memmove+0x22>

0800893c <_free_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4605      	mov	r5, r0
 8008940:	2900      	cmp	r1, #0
 8008942:	d045      	beq.n	80089d0 <_free_r+0x94>
 8008944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008948:	1f0c      	subs	r4, r1, #4
 800894a:	2b00      	cmp	r3, #0
 800894c:	bfb8      	it	lt
 800894e:	18e4      	addlt	r4, r4, r3
 8008950:	f000 fb02 	bl	8008f58 <__malloc_lock>
 8008954:	4a1f      	ldr	r2, [pc, #124]	; (80089d4 <_free_r+0x98>)
 8008956:	6813      	ldr	r3, [r2, #0]
 8008958:	4610      	mov	r0, r2
 800895a:	b933      	cbnz	r3, 800896a <_free_r+0x2e>
 800895c:	6063      	str	r3, [r4, #4]
 800895e:	6014      	str	r4, [r2, #0]
 8008960:	4628      	mov	r0, r5
 8008962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008966:	f000 baf8 	b.w	8008f5a <__malloc_unlock>
 800896a:	42a3      	cmp	r3, r4
 800896c:	d90c      	bls.n	8008988 <_free_r+0x4c>
 800896e:	6821      	ldr	r1, [r4, #0]
 8008970:	1862      	adds	r2, r4, r1
 8008972:	4293      	cmp	r3, r2
 8008974:	bf04      	itt	eq
 8008976:	681a      	ldreq	r2, [r3, #0]
 8008978:	685b      	ldreq	r3, [r3, #4]
 800897a:	6063      	str	r3, [r4, #4]
 800897c:	bf04      	itt	eq
 800897e:	1852      	addeq	r2, r2, r1
 8008980:	6022      	streq	r2, [r4, #0]
 8008982:	6004      	str	r4, [r0, #0]
 8008984:	e7ec      	b.n	8008960 <_free_r+0x24>
 8008986:	4613      	mov	r3, r2
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	b10a      	cbz	r2, 8008990 <_free_r+0x54>
 800898c:	42a2      	cmp	r2, r4
 800898e:	d9fa      	bls.n	8008986 <_free_r+0x4a>
 8008990:	6819      	ldr	r1, [r3, #0]
 8008992:	1858      	adds	r0, r3, r1
 8008994:	42a0      	cmp	r0, r4
 8008996:	d10b      	bne.n	80089b0 <_free_r+0x74>
 8008998:	6820      	ldr	r0, [r4, #0]
 800899a:	4401      	add	r1, r0
 800899c:	1858      	adds	r0, r3, r1
 800899e:	4282      	cmp	r2, r0
 80089a0:	6019      	str	r1, [r3, #0]
 80089a2:	d1dd      	bne.n	8008960 <_free_r+0x24>
 80089a4:	6810      	ldr	r0, [r2, #0]
 80089a6:	6852      	ldr	r2, [r2, #4]
 80089a8:	605a      	str	r2, [r3, #4]
 80089aa:	4401      	add	r1, r0
 80089ac:	6019      	str	r1, [r3, #0]
 80089ae:	e7d7      	b.n	8008960 <_free_r+0x24>
 80089b0:	d902      	bls.n	80089b8 <_free_r+0x7c>
 80089b2:	230c      	movs	r3, #12
 80089b4:	602b      	str	r3, [r5, #0]
 80089b6:	e7d3      	b.n	8008960 <_free_r+0x24>
 80089b8:	6820      	ldr	r0, [r4, #0]
 80089ba:	1821      	adds	r1, r4, r0
 80089bc:	428a      	cmp	r2, r1
 80089be:	bf04      	itt	eq
 80089c0:	6811      	ldreq	r1, [r2, #0]
 80089c2:	6852      	ldreq	r2, [r2, #4]
 80089c4:	6062      	str	r2, [r4, #4]
 80089c6:	bf04      	itt	eq
 80089c8:	1809      	addeq	r1, r1, r0
 80089ca:	6021      	streq	r1, [r4, #0]
 80089cc:	605c      	str	r4, [r3, #4]
 80089ce:	e7c7      	b.n	8008960 <_free_r+0x24>
 80089d0:	bd38      	pop	{r3, r4, r5, pc}
 80089d2:	bf00      	nop
 80089d4:	20002204 	.word	0x20002204

080089d8 <_malloc_r>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	1ccd      	adds	r5, r1, #3
 80089dc:	f025 0503 	bic.w	r5, r5, #3
 80089e0:	3508      	adds	r5, #8
 80089e2:	2d0c      	cmp	r5, #12
 80089e4:	bf38      	it	cc
 80089e6:	250c      	movcc	r5, #12
 80089e8:	2d00      	cmp	r5, #0
 80089ea:	4606      	mov	r6, r0
 80089ec:	db01      	blt.n	80089f2 <_malloc_r+0x1a>
 80089ee:	42a9      	cmp	r1, r5
 80089f0:	d903      	bls.n	80089fa <_malloc_r+0x22>
 80089f2:	230c      	movs	r3, #12
 80089f4:	6033      	str	r3, [r6, #0]
 80089f6:	2000      	movs	r0, #0
 80089f8:	bd70      	pop	{r4, r5, r6, pc}
 80089fa:	f000 faad 	bl	8008f58 <__malloc_lock>
 80089fe:	4a21      	ldr	r2, [pc, #132]	; (8008a84 <_malloc_r+0xac>)
 8008a00:	6814      	ldr	r4, [r2, #0]
 8008a02:	4621      	mov	r1, r4
 8008a04:	b991      	cbnz	r1, 8008a2c <_malloc_r+0x54>
 8008a06:	4c20      	ldr	r4, [pc, #128]	; (8008a88 <_malloc_r+0xb0>)
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	b91b      	cbnz	r3, 8008a14 <_malloc_r+0x3c>
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f000 f9b5 	bl	8008d7c <_sbrk_r>
 8008a12:	6020      	str	r0, [r4, #0]
 8008a14:	4629      	mov	r1, r5
 8008a16:	4630      	mov	r0, r6
 8008a18:	f000 f9b0 	bl	8008d7c <_sbrk_r>
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	d124      	bne.n	8008a6a <_malloc_r+0x92>
 8008a20:	230c      	movs	r3, #12
 8008a22:	6033      	str	r3, [r6, #0]
 8008a24:	4630      	mov	r0, r6
 8008a26:	f000 fa98 	bl	8008f5a <__malloc_unlock>
 8008a2a:	e7e4      	b.n	80089f6 <_malloc_r+0x1e>
 8008a2c:	680b      	ldr	r3, [r1, #0]
 8008a2e:	1b5b      	subs	r3, r3, r5
 8008a30:	d418      	bmi.n	8008a64 <_malloc_r+0x8c>
 8008a32:	2b0b      	cmp	r3, #11
 8008a34:	d90f      	bls.n	8008a56 <_malloc_r+0x7e>
 8008a36:	600b      	str	r3, [r1, #0]
 8008a38:	50cd      	str	r5, [r1, r3]
 8008a3a:	18cc      	adds	r4, r1, r3
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f000 fa8c 	bl	8008f5a <__malloc_unlock>
 8008a42:	f104 000b 	add.w	r0, r4, #11
 8008a46:	1d23      	adds	r3, r4, #4
 8008a48:	f020 0007 	bic.w	r0, r0, #7
 8008a4c:	1ac3      	subs	r3, r0, r3
 8008a4e:	d0d3      	beq.n	80089f8 <_malloc_r+0x20>
 8008a50:	425a      	negs	r2, r3
 8008a52:	50e2      	str	r2, [r4, r3]
 8008a54:	e7d0      	b.n	80089f8 <_malloc_r+0x20>
 8008a56:	428c      	cmp	r4, r1
 8008a58:	684b      	ldr	r3, [r1, #4]
 8008a5a:	bf16      	itet	ne
 8008a5c:	6063      	strne	r3, [r4, #4]
 8008a5e:	6013      	streq	r3, [r2, #0]
 8008a60:	460c      	movne	r4, r1
 8008a62:	e7eb      	b.n	8008a3c <_malloc_r+0x64>
 8008a64:	460c      	mov	r4, r1
 8008a66:	6849      	ldr	r1, [r1, #4]
 8008a68:	e7cc      	b.n	8008a04 <_malloc_r+0x2c>
 8008a6a:	1cc4      	adds	r4, r0, #3
 8008a6c:	f024 0403 	bic.w	r4, r4, #3
 8008a70:	42a0      	cmp	r0, r4
 8008a72:	d005      	beq.n	8008a80 <_malloc_r+0xa8>
 8008a74:	1a21      	subs	r1, r4, r0
 8008a76:	4630      	mov	r0, r6
 8008a78:	f000 f980 	bl	8008d7c <_sbrk_r>
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d0cf      	beq.n	8008a20 <_malloc_r+0x48>
 8008a80:	6025      	str	r5, [r4, #0]
 8008a82:	e7db      	b.n	8008a3c <_malloc_r+0x64>
 8008a84:	20002204 	.word	0x20002204
 8008a88:	20002208 	.word	0x20002208

08008a8c <_realloc_r>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	4607      	mov	r7, r0
 8008a90:	4614      	mov	r4, r2
 8008a92:	460e      	mov	r6, r1
 8008a94:	b921      	cbnz	r1, 8008aa0 <_realloc_r+0x14>
 8008a96:	4611      	mov	r1, r2
 8008a98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a9c:	f7ff bf9c 	b.w	80089d8 <_malloc_r>
 8008aa0:	b922      	cbnz	r2, 8008aac <_realloc_r+0x20>
 8008aa2:	f7ff ff4b 	bl	800893c <_free_r>
 8008aa6:	4625      	mov	r5, r4
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aac:	f000 fa56 	bl	8008f5c <_malloc_usable_size_r>
 8008ab0:	42a0      	cmp	r0, r4
 8008ab2:	d20f      	bcs.n	8008ad4 <_realloc_r+0x48>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	f7ff ff8e 	bl	80089d8 <_malloc_r>
 8008abc:	4605      	mov	r5, r0
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d0f2      	beq.n	8008aa8 <_realloc_r+0x1c>
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	f7ff ff15 	bl	80088f4 <memcpy>
 8008aca:	4631      	mov	r1, r6
 8008acc:	4638      	mov	r0, r7
 8008ace:	f7ff ff35 	bl	800893c <_free_r>
 8008ad2:	e7e9      	b.n	8008aa8 <_realloc_r+0x1c>
 8008ad4:	4635      	mov	r5, r6
 8008ad6:	e7e7      	b.n	8008aa8 <_realloc_r+0x1c>

08008ad8 <__ssputs_r>:
 8008ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008adc:	688e      	ldr	r6, [r1, #8]
 8008ade:	429e      	cmp	r6, r3
 8008ae0:	4682      	mov	sl, r0
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	4690      	mov	r8, r2
 8008ae6:	4699      	mov	r9, r3
 8008ae8:	d837      	bhi.n	8008b5a <__ssputs_r+0x82>
 8008aea:	898a      	ldrh	r2, [r1, #12]
 8008aec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008af0:	d031      	beq.n	8008b56 <__ssputs_r+0x7e>
 8008af2:	6825      	ldr	r5, [r4, #0]
 8008af4:	6909      	ldr	r1, [r1, #16]
 8008af6:	1a6f      	subs	r7, r5, r1
 8008af8:	6965      	ldr	r5, [r4, #20]
 8008afa:	2302      	movs	r3, #2
 8008afc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b00:	fb95 f5f3 	sdiv	r5, r5, r3
 8008b04:	f109 0301 	add.w	r3, r9, #1
 8008b08:	443b      	add	r3, r7
 8008b0a:	429d      	cmp	r5, r3
 8008b0c:	bf38      	it	cc
 8008b0e:	461d      	movcc	r5, r3
 8008b10:	0553      	lsls	r3, r2, #21
 8008b12:	d530      	bpl.n	8008b76 <__ssputs_r+0x9e>
 8008b14:	4629      	mov	r1, r5
 8008b16:	f7ff ff5f 	bl	80089d8 <_malloc_r>
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	b950      	cbnz	r0, 8008b34 <__ssputs_r+0x5c>
 8008b1e:	230c      	movs	r3, #12
 8008b20:	f8ca 3000 	str.w	r3, [sl]
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b2a:	81a3      	strh	r3, [r4, #12]
 8008b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b34:	463a      	mov	r2, r7
 8008b36:	6921      	ldr	r1, [r4, #16]
 8008b38:	f7ff fedc 	bl	80088f4 <memcpy>
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b46:	81a3      	strh	r3, [r4, #12]
 8008b48:	6126      	str	r6, [r4, #16]
 8008b4a:	6165      	str	r5, [r4, #20]
 8008b4c:	443e      	add	r6, r7
 8008b4e:	1bed      	subs	r5, r5, r7
 8008b50:	6026      	str	r6, [r4, #0]
 8008b52:	60a5      	str	r5, [r4, #8]
 8008b54:	464e      	mov	r6, r9
 8008b56:	454e      	cmp	r6, r9
 8008b58:	d900      	bls.n	8008b5c <__ssputs_r+0x84>
 8008b5a:	464e      	mov	r6, r9
 8008b5c:	4632      	mov	r2, r6
 8008b5e:	4641      	mov	r1, r8
 8008b60:	6820      	ldr	r0, [r4, #0]
 8008b62:	f7ff fed2 	bl	800890a <memmove>
 8008b66:	68a3      	ldr	r3, [r4, #8]
 8008b68:	1b9b      	subs	r3, r3, r6
 8008b6a:	60a3      	str	r3, [r4, #8]
 8008b6c:	6823      	ldr	r3, [r4, #0]
 8008b6e:	441e      	add	r6, r3
 8008b70:	6026      	str	r6, [r4, #0]
 8008b72:	2000      	movs	r0, #0
 8008b74:	e7dc      	b.n	8008b30 <__ssputs_r+0x58>
 8008b76:	462a      	mov	r2, r5
 8008b78:	f7ff ff88 	bl	8008a8c <_realloc_r>
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d1e2      	bne.n	8008b48 <__ssputs_r+0x70>
 8008b82:	6921      	ldr	r1, [r4, #16]
 8008b84:	4650      	mov	r0, sl
 8008b86:	f7ff fed9 	bl	800893c <_free_r>
 8008b8a:	e7c8      	b.n	8008b1e <__ssputs_r+0x46>

08008b8c <_svfiprintf_r>:
 8008b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b90:	461d      	mov	r5, r3
 8008b92:	898b      	ldrh	r3, [r1, #12]
 8008b94:	061f      	lsls	r7, r3, #24
 8008b96:	b09d      	sub	sp, #116	; 0x74
 8008b98:	4680      	mov	r8, r0
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	d50f      	bpl.n	8008bc0 <_svfiprintf_r+0x34>
 8008ba0:	690b      	ldr	r3, [r1, #16]
 8008ba2:	b96b      	cbnz	r3, 8008bc0 <_svfiprintf_r+0x34>
 8008ba4:	2140      	movs	r1, #64	; 0x40
 8008ba6:	f7ff ff17 	bl	80089d8 <_malloc_r>
 8008baa:	6020      	str	r0, [r4, #0]
 8008bac:	6120      	str	r0, [r4, #16]
 8008bae:	b928      	cbnz	r0, 8008bbc <_svfiprintf_r+0x30>
 8008bb0:	230c      	movs	r3, #12
 8008bb2:	f8c8 3000 	str.w	r3, [r8]
 8008bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bba:	e0c8      	b.n	8008d4e <_svfiprintf_r+0x1c2>
 8008bbc:	2340      	movs	r3, #64	; 0x40
 8008bbe:	6163      	str	r3, [r4, #20]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc4:	2320      	movs	r3, #32
 8008bc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bca:	2330      	movs	r3, #48	; 0x30
 8008bcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bd0:	9503      	str	r5, [sp, #12]
 8008bd2:	f04f 0b01 	mov.w	fp, #1
 8008bd6:	4637      	mov	r7, r6
 8008bd8:	463d      	mov	r5, r7
 8008bda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008bde:	b10b      	cbz	r3, 8008be4 <_svfiprintf_r+0x58>
 8008be0:	2b25      	cmp	r3, #37	; 0x25
 8008be2:	d13e      	bne.n	8008c62 <_svfiprintf_r+0xd6>
 8008be4:	ebb7 0a06 	subs.w	sl, r7, r6
 8008be8:	d00b      	beq.n	8008c02 <_svfiprintf_r+0x76>
 8008bea:	4653      	mov	r3, sl
 8008bec:	4632      	mov	r2, r6
 8008bee:	4621      	mov	r1, r4
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	f7ff ff71 	bl	8008ad8 <__ssputs_r>
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	f000 80a4 	beq.w	8008d44 <_svfiprintf_r+0x1b8>
 8008bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bfe:	4453      	add	r3, sl
 8008c00:	9309      	str	r3, [sp, #36]	; 0x24
 8008c02:	783b      	ldrb	r3, [r7, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 809d 	beq.w	8008d44 <_svfiprintf_r+0x1b8>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c14:	9304      	str	r3, [sp, #16]
 8008c16:	9307      	str	r3, [sp, #28]
 8008c18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8008c1e:	462f      	mov	r7, r5
 8008c20:	2205      	movs	r2, #5
 8008c22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008c26:	4850      	ldr	r0, [pc, #320]	; (8008d68 <_svfiprintf_r+0x1dc>)
 8008c28:	f7f7 fad2 	bl	80001d0 <memchr>
 8008c2c:	9b04      	ldr	r3, [sp, #16]
 8008c2e:	b9d0      	cbnz	r0, 8008c66 <_svfiprintf_r+0xda>
 8008c30:	06d9      	lsls	r1, r3, #27
 8008c32:	bf44      	itt	mi
 8008c34:	2220      	movmi	r2, #32
 8008c36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c3a:	071a      	lsls	r2, r3, #28
 8008c3c:	bf44      	itt	mi
 8008c3e:	222b      	movmi	r2, #43	; 0x2b
 8008c40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c44:	782a      	ldrb	r2, [r5, #0]
 8008c46:	2a2a      	cmp	r2, #42	; 0x2a
 8008c48:	d015      	beq.n	8008c76 <_svfiprintf_r+0xea>
 8008c4a:	9a07      	ldr	r2, [sp, #28]
 8008c4c:	462f      	mov	r7, r5
 8008c4e:	2000      	movs	r0, #0
 8008c50:	250a      	movs	r5, #10
 8008c52:	4639      	mov	r1, r7
 8008c54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c58:	3b30      	subs	r3, #48	; 0x30
 8008c5a:	2b09      	cmp	r3, #9
 8008c5c:	d94d      	bls.n	8008cfa <_svfiprintf_r+0x16e>
 8008c5e:	b1b8      	cbz	r0, 8008c90 <_svfiprintf_r+0x104>
 8008c60:	e00f      	b.n	8008c82 <_svfiprintf_r+0xf6>
 8008c62:	462f      	mov	r7, r5
 8008c64:	e7b8      	b.n	8008bd8 <_svfiprintf_r+0x4c>
 8008c66:	4a40      	ldr	r2, [pc, #256]	; (8008d68 <_svfiprintf_r+0x1dc>)
 8008c68:	1a80      	subs	r0, r0, r2
 8008c6a:	fa0b f000 	lsl.w	r0, fp, r0
 8008c6e:	4318      	orrs	r0, r3
 8008c70:	9004      	str	r0, [sp, #16]
 8008c72:	463d      	mov	r5, r7
 8008c74:	e7d3      	b.n	8008c1e <_svfiprintf_r+0x92>
 8008c76:	9a03      	ldr	r2, [sp, #12]
 8008c78:	1d11      	adds	r1, r2, #4
 8008c7a:	6812      	ldr	r2, [r2, #0]
 8008c7c:	9103      	str	r1, [sp, #12]
 8008c7e:	2a00      	cmp	r2, #0
 8008c80:	db01      	blt.n	8008c86 <_svfiprintf_r+0xfa>
 8008c82:	9207      	str	r2, [sp, #28]
 8008c84:	e004      	b.n	8008c90 <_svfiprintf_r+0x104>
 8008c86:	4252      	negs	r2, r2
 8008c88:	f043 0302 	orr.w	r3, r3, #2
 8008c8c:	9207      	str	r2, [sp, #28]
 8008c8e:	9304      	str	r3, [sp, #16]
 8008c90:	783b      	ldrb	r3, [r7, #0]
 8008c92:	2b2e      	cmp	r3, #46	; 0x2e
 8008c94:	d10c      	bne.n	8008cb0 <_svfiprintf_r+0x124>
 8008c96:	787b      	ldrb	r3, [r7, #1]
 8008c98:	2b2a      	cmp	r3, #42	; 0x2a
 8008c9a:	d133      	bne.n	8008d04 <_svfiprintf_r+0x178>
 8008c9c:	9b03      	ldr	r3, [sp, #12]
 8008c9e:	1d1a      	adds	r2, r3, #4
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	9203      	str	r2, [sp, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bfb8      	it	lt
 8008ca8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cac:	3702      	adds	r7, #2
 8008cae:	9305      	str	r3, [sp, #20]
 8008cb0:	4d2e      	ldr	r5, [pc, #184]	; (8008d6c <_svfiprintf_r+0x1e0>)
 8008cb2:	7839      	ldrb	r1, [r7, #0]
 8008cb4:	2203      	movs	r2, #3
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f7f7 fa8a 	bl	80001d0 <memchr>
 8008cbc:	b138      	cbz	r0, 8008cce <_svfiprintf_r+0x142>
 8008cbe:	2340      	movs	r3, #64	; 0x40
 8008cc0:	1b40      	subs	r0, r0, r5
 8008cc2:	fa03 f000 	lsl.w	r0, r3, r0
 8008cc6:	9b04      	ldr	r3, [sp, #16]
 8008cc8:	4303      	orrs	r3, r0
 8008cca:	3701      	adds	r7, #1
 8008ccc:	9304      	str	r3, [sp, #16]
 8008cce:	7839      	ldrb	r1, [r7, #0]
 8008cd0:	4827      	ldr	r0, [pc, #156]	; (8008d70 <_svfiprintf_r+0x1e4>)
 8008cd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cd6:	2206      	movs	r2, #6
 8008cd8:	1c7e      	adds	r6, r7, #1
 8008cda:	f7f7 fa79 	bl	80001d0 <memchr>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d038      	beq.n	8008d54 <_svfiprintf_r+0x1c8>
 8008ce2:	4b24      	ldr	r3, [pc, #144]	; (8008d74 <_svfiprintf_r+0x1e8>)
 8008ce4:	bb13      	cbnz	r3, 8008d2c <_svfiprintf_r+0x1a0>
 8008ce6:	9b03      	ldr	r3, [sp, #12]
 8008ce8:	3307      	adds	r3, #7
 8008cea:	f023 0307 	bic.w	r3, r3, #7
 8008cee:	3308      	adds	r3, #8
 8008cf0:	9303      	str	r3, [sp, #12]
 8008cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf4:	444b      	add	r3, r9
 8008cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf8:	e76d      	b.n	8008bd6 <_svfiprintf_r+0x4a>
 8008cfa:	fb05 3202 	mla	r2, r5, r2, r3
 8008cfe:	2001      	movs	r0, #1
 8008d00:	460f      	mov	r7, r1
 8008d02:	e7a6      	b.n	8008c52 <_svfiprintf_r+0xc6>
 8008d04:	2300      	movs	r3, #0
 8008d06:	3701      	adds	r7, #1
 8008d08:	9305      	str	r3, [sp, #20]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	250a      	movs	r5, #10
 8008d0e:	4638      	mov	r0, r7
 8008d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d14:	3a30      	subs	r2, #48	; 0x30
 8008d16:	2a09      	cmp	r2, #9
 8008d18:	d903      	bls.n	8008d22 <_svfiprintf_r+0x196>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0c8      	beq.n	8008cb0 <_svfiprintf_r+0x124>
 8008d1e:	9105      	str	r1, [sp, #20]
 8008d20:	e7c6      	b.n	8008cb0 <_svfiprintf_r+0x124>
 8008d22:	fb05 2101 	mla	r1, r5, r1, r2
 8008d26:	2301      	movs	r3, #1
 8008d28:	4607      	mov	r7, r0
 8008d2a:	e7f0      	b.n	8008d0e <_svfiprintf_r+0x182>
 8008d2c:	ab03      	add	r3, sp, #12
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	4622      	mov	r2, r4
 8008d32:	4b11      	ldr	r3, [pc, #68]	; (8008d78 <_svfiprintf_r+0x1ec>)
 8008d34:	a904      	add	r1, sp, #16
 8008d36:	4640      	mov	r0, r8
 8008d38:	f3af 8000 	nop.w
 8008d3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008d40:	4681      	mov	r9, r0
 8008d42:	d1d6      	bne.n	8008cf2 <_svfiprintf_r+0x166>
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	065b      	lsls	r3, r3, #25
 8008d48:	f53f af35 	bmi.w	8008bb6 <_svfiprintf_r+0x2a>
 8008d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d4e:	b01d      	add	sp, #116	; 0x74
 8008d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d54:	ab03      	add	r3, sp, #12
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	4622      	mov	r2, r4
 8008d5a:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <_svfiprintf_r+0x1ec>)
 8008d5c:	a904      	add	r1, sp, #16
 8008d5e:	4640      	mov	r0, r8
 8008d60:	f7ff f9f0 	bl	8008144 <_printf_i>
 8008d64:	e7ea      	b.n	8008d3c <_svfiprintf_r+0x1b0>
 8008d66:	bf00      	nop
 8008d68:	0800a0c8 	.word	0x0800a0c8
 8008d6c:	0800a0ce 	.word	0x0800a0ce
 8008d70:	0800a0d2 	.word	0x0800a0d2
 8008d74:	00000000 	.word	0x00000000
 8008d78:	08008ad9 	.word	0x08008ad9

08008d7c <_sbrk_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4c06      	ldr	r4, [pc, #24]	; (8008d98 <_sbrk_r+0x1c>)
 8008d80:	2300      	movs	r3, #0
 8008d82:	4605      	mov	r5, r0
 8008d84:	4608      	mov	r0, r1
 8008d86:	6023      	str	r3, [r4, #0]
 8008d88:	f000 f93a 	bl	8009000 <_sbrk>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	d102      	bne.n	8008d96 <_sbrk_r+0x1a>
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	b103      	cbz	r3, 8008d96 <_sbrk_r+0x1a>
 8008d94:	602b      	str	r3, [r5, #0]
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	200032b4 	.word	0x200032b4

08008d9c <_raise_r>:
 8008d9c:	291f      	cmp	r1, #31
 8008d9e:	b538      	push	{r3, r4, r5, lr}
 8008da0:	4604      	mov	r4, r0
 8008da2:	460d      	mov	r5, r1
 8008da4:	d904      	bls.n	8008db0 <_raise_r+0x14>
 8008da6:	2316      	movs	r3, #22
 8008da8:	6003      	str	r3, [r0, #0]
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008db2:	b112      	cbz	r2, 8008dba <_raise_r+0x1e>
 8008db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008db8:	b94b      	cbnz	r3, 8008dce <_raise_r+0x32>
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 f830 	bl	8008e20 <_getpid_r>
 8008dc0:	462a      	mov	r2, r5
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dca:	f000 b817 	b.w	8008dfc <_kill_r>
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d00a      	beq.n	8008de8 <_raise_r+0x4c>
 8008dd2:	1c59      	adds	r1, r3, #1
 8008dd4:	d103      	bne.n	8008dde <_raise_r+0x42>
 8008dd6:	2316      	movs	r3, #22
 8008dd8:	6003      	str	r3, [r0, #0]
 8008dda:	2001      	movs	r0, #1
 8008ddc:	e7e7      	b.n	8008dae <_raise_r+0x12>
 8008dde:	2400      	movs	r4, #0
 8008de0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008de4:	4628      	mov	r0, r5
 8008de6:	4798      	blx	r3
 8008de8:	2000      	movs	r0, #0
 8008dea:	e7e0      	b.n	8008dae <_raise_r+0x12>

08008dec <raise>:
 8008dec:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <raise+0xc>)
 8008dee:	4601      	mov	r1, r0
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	f7ff bfd3 	b.w	8008d9c <_raise_r>
 8008df6:	bf00      	nop
 8008df8:	20000154 	.word	0x20000154

08008dfc <_kill_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4c07      	ldr	r4, [pc, #28]	; (8008e1c <_kill_r+0x20>)
 8008e00:	2300      	movs	r3, #0
 8008e02:	4605      	mov	r5, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	4611      	mov	r1, r2
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	f000 f8e1 	bl	8008fd0 <_kill>
 8008e0e:	1c43      	adds	r3, r0, #1
 8008e10:	d102      	bne.n	8008e18 <_kill_r+0x1c>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	b103      	cbz	r3, 8008e18 <_kill_r+0x1c>
 8008e16:	602b      	str	r3, [r5, #0]
 8008e18:	bd38      	pop	{r3, r4, r5, pc}
 8008e1a:	bf00      	nop
 8008e1c:	200032b4 	.word	0x200032b4

08008e20 <_getpid_r>:
 8008e20:	f000 b8c6 	b.w	8008fb0 <_getpid>

08008e24 <__sread>:
 8008e24:	b510      	push	{r4, lr}
 8008e26:	460c      	mov	r4, r1
 8008e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e2c:	f000 f89e 	bl	8008f6c <_read_r>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	bfab      	itete	ge
 8008e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e36:	89a3      	ldrhlt	r3, [r4, #12]
 8008e38:	181b      	addge	r3, r3, r0
 8008e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e3e:	bfac      	ite	ge
 8008e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e42:	81a3      	strhlt	r3, [r4, #12]
 8008e44:	bd10      	pop	{r4, pc}

08008e46 <__swrite>:
 8008e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4a:	461f      	mov	r7, r3
 8008e4c:	898b      	ldrh	r3, [r1, #12]
 8008e4e:	05db      	lsls	r3, r3, #23
 8008e50:	4605      	mov	r5, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	4616      	mov	r6, r2
 8008e56:	d505      	bpl.n	8008e64 <__swrite+0x1e>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e60:	f000 f868 	bl	8008f34 <_lseek_r>
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e6e:	81a3      	strh	r3, [r4, #12]
 8008e70:	4632      	mov	r2, r6
 8008e72:	463b      	mov	r3, r7
 8008e74:	4628      	mov	r0, r5
 8008e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e7a:	f000 b817 	b.w	8008eac <_write_r>

08008e7e <__sseek>:
 8008e7e:	b510      	push	{r4, lr}
 8008e80:	460c      	mov	r4, r1
 8008e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e86:	f000 f855 	bl	8008f34 <_lseek_r>
 8008e8a:	1c43      	adds	r3, r0, #1
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	bf15      	itete	ne
 8008e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e9a:	81a3      	strheq	r3, [r4, #12]
 8008e9c:	bf18      	it	ne
 8008e9e:	81a3      	strhne	r3, [r4, #12]
 8008ea0:	bd10      	pop	{r4, pc}

08008ea2 <__sclose>:
 8008ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea6:	f000 b813 	b.w	8008ed0 <_close_r>
	...

08008eac <_write_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4c07      	ldr	r4, [pc, #28]	; (8008ecc <_write_r+0x20>)
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	4608      	mov	r0, r1
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	6022      	str	r2, [r4, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f000 f8ae 	bl	800901c <_write>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_write_r+0x1e>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_write_r+0x1e>
 8008ec8:	602b      	str	r3, [r5, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	200032b4 	.word	0x200032b4

08008ed0 <_close_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4c06      	ldr	r4, [pc, #24]	; (8008eec <_close_r+0x1c>)
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	4608      	mov	r0, r1
 8008eda:	6023      	str	r3, [r4, #0]
 8008edc:	f000 f858 	bl	8008f90 <_close>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d102      	bne.n	8008eea <_close_r+0x1a>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	b103      	cbz	r3, 8008eea <_close_r+0x1a>
 8008ee8:	602b      	str	r3, [r5, #0]
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	200032b4 	.word	0x200032b4

08008ef0 <_fstat_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	4c07      	ldr	r4, [pc, #28]	; (8008f10 <_fstat_r+0x20>)
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	4608      	mov	r0, r1
 8008efa:	4611      	mov	r1, r2
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	f000 f84f 	bl	8008fa0 <_fstat>
 8008f02:	1c43      	adds	r3, r0, #1
 8008f04:	d102      	bne.n	8008f0c <_fstat_r+0x1c>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	b103      	cbz	r3, 8008f0c <_fstat_r+0x1c>
 8008f0a:	602b      	str	r3, [r5, #0]
 8008f0c:	bd38      	pop	{r3, r4, r5, pc}
 8008f0e:	bf00      	nop
 8008f10:	200032b4 	.word	0x200032b4

08008f14 <_isatty_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4c06      	ldr	r4, [pc, #24]	; (8008f30 <_isatty_r+0x1c>)
 8008f18:	2300      	movs	r3, #0
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	4608      	mov	r0, r1
 8008f1e:	6023      	str	r3, [r4, #0]
 8008f20:	f000 f84e 	bl	8008fc0 <_isatty>
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	d102      	bne.n	8008f2e <_isatty_r+0x1a>
 8008f28:	6823      	ldr	r3, [r4, #0]
 8008f2a:	b103      	cbz	r3, 8008f2e <_isatty_r+0x1a>
 8008f2c:	602b      	str	r3, [r5, #0]
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}
 8008f30:	200032b4 	.word	0x200032b4

08008f34 <_lseek_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	4c07      	ldr	r4, [pc, #28]	; (8008f54 <_lseek_r+0x20>)
 8008f38:	4605      	mov	r5, r0
 8008f3a:	4608      	mov	r0, r1
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	2200      	movs	r2, #0
 8008f40:	6022      	str	r2, [r4, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	f000 f84c 	bl	8008fe0 <_lseek>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_lseek_r+0x1e>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_lseek_r+0x1e>
 8008f50:	602b      	str	r3, [r5, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	200032b4 	.word	0x200032b4

08008f58 <__malloc_lock>:
 8008f58:	4770      	bx	lr

08008f5a <__malloc_unlock>:
 8008f5a:	4770      	bx	lr

08008f5c <_malloc_usable_size_r>:
 8008f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f60:	1f18      	subs	r0, r3, #4
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	bfbc      	itt	lt
 8008f66:	580b      	ldrlt	r3, [r1, r0]
 8008f68:	18c0      	addlt	r0, r0, r3
 8008f6a:	4770      	bx	lr

08008f6c <_read_r>:
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	4c07      	ldr	r4, [pc, #28]	; (8008f8c <_read_r+0x20>)
 8008f70:	4605      	mov	r5, r0
 8008f72:	4608      	mov	r0, r1
 8008f74:	4611      	mov	r1, r2
 8008f76:	2200      	movs	r2, #0
 8008f78:	6022      	str	r2, [r4, #0]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	f000 f838 	bl	8008ff0 <_read>
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	d102      	bne.n	8008f8a <_read_r+0x1e>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	b103      	cbz	r3, 8008f8a <_read_r+0x1e>
 8008f88:	602b      	str	r3, [r5, #0]
 8008f8a:	bd38      	pop	{r3, r4, r5, pc}
 8008f8c:	200032b4 	.word	0x200032b4

08008f90 <_close>:
 8008f90:	4b02      	ldr	r3, [pc, #8]	; (8008f9c <_close+0xc>)
 8008f92:	2258      	movs	r2, #88	; 0x58
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f9a:	4770      	bx	lr
 8008f9c:	200032b4 	.word	0x200032b4

08008fa0 <_fstat>:
 8008fa0:	4b02      	ldr	r3, [pc, #8]	; (8008fac <_fstat+0xc>)
 8008fa2:	2258      	movs	r2, #88	; 0x58
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008faa:	4770      	bx	lr
 8008fac:	200032b4 	.word	0x200032b4

08008fb0 <_getpid>:
 8008fb0:	4b02      	ldr	r3, [pc, #8]	; (8008fbc <_getpid+0xc>)
 8008fb2:	2258      	movs	r2, #88	; 0x58
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fba:	4770      	bx	lr
 8008fbc:	200032b4 	.word	0x200032b4

08008fc0 <_isatty>:
 8008fc0:	4b02      	ldr	r3, [pc, #8]	; (8008fcc <_isatty+0xc>)
 8008fc2:	2258      	movs	r2, #88	; 0x58
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	200032b4 	.word	0x200032b4

08008fd0 <_kill>:
 8008fd0:	4b02      	ldr	r3, [pc, #8]	; (8008fdc <_kill+0xc>)
 8008fd2:	2258      	movs	r2, #88	; 0x58
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fda:	4770      	bx	lr
 8008fdc:	200032b4 	.word	0x200032b4

08008fe0 <_lseek>:
 8008fe0:	4b02      	ldr	r3, [pc, #8]	; (8008fec <_lseek+0xc>)
 8008fe2:	2258      	movs	r2, #88	; 0x58
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fea:	4770      	bx	lr
 8008fec:	200032b4 	.word	0x200032b4

08008ff0 <_read>:
 8008ff0:	4b02      	ldr	r3, [pc, #8]	; (8008ffc <_read+0xc>)
 8008ff2:	2258      	movs	r2, #88	; 0x58
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ffa:	4770      	bx	lr
 8008ffc:	200032b4 	.word	0x200032b4

08009000 <_sbrk>:
 8009000:	4b04      	ldr	r3, [pc, #16]	; (8009014 <_sbrk+0x14>)
 8009002:	6819      	ldr	r1, [r3, #0]
 8009004:	4602      	mov	r2, r0
 8009006:	b909      	cbnz	r1, 800900c <_sbrk+0xc>
 8009008:	4903      	ldr	r1, [pc, #12]	; (8009018 <_sbrk+0x18>)
 800900a:	6019      	str	r1, [r3, #0]
 800900c:	6818      	ldr	r0, [r3, #0]
 800900e:	4402      	add	r2, r0
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	4770      	bx	lr
 8009014:	2000220c 	.word	0x2000220c
 8009018:	200032b8 	.word	0x200032b8

0800901c <_write>:
 800901c:	4b02      	ldr	r3, [pc, #8]	; (8009028 <_write+0xc>)
 800901e:	2258      	movs	r2, #88	; 0x58
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009026:	4770      	bx	lr
 8009028:	200032b4 	.word	0x200032b4

0800902c <_exit>:
 800902c:	e7fe      	b.n	800902c <_exit>
 800902e:	0000      	movs	r0, r0
 8009030:	02890000 	.word	0x02890000
 8009034:	08000020 	.word	0x08000020
 8009038:	50890080 	.word	0x50890080
 800903c:	80890308 	.word	0x80890308

08009040 <appstr.10203>:
 8009040:	3d505041 65676150 74736554 00000000     APP=PageTest....

08009050 <rcc_flags.7122>:
 8009050:	00000007 00000001                       ........

08009058 <proc.8980>:
 8009058:	08005a61 08005985 08005a61 08005a61     aZ...Y..aZ..aZ..
 8009068:	080059fd 08005a61 08005a61 08000ce5     .Y..aZ..aZ......
 8009078:	080002bd                                ....

0800907c <base_std>:
 800907c:	0c0c0812 0e0e0a14 0a0a0a0a 0a0a0a0a     ................
 800908c:	06060606 06060606 06060606 06060606     ................

0800909c <ext_std>:
 800909c:	07070100                                ....

080090a0 <m2tt_lut.9064>:
 80090a0:	40302020                                  0@

080090a4 <opcode_lut.9049>:
 80090a4:	01000202 01000202 08060202 09070303     ................
 80090b4:	01000404 01000404 08060404 09070505     ................

080090c4 <bandwidth_lut>:
 80090c4:	00400080                                ..@.

080090c8 <mitipersym_lut>:
 80090c8:	080090e4 080090dc 080090d4              ............

080090d4 <mitipersym_ISM433>:
 80090d4:	0864218e 00870219                       .!d.....

080090dc <mitipersym_ISM866>:
 80090dc:	10c7431c 010d0432                       .C..2...

080090e4 <mitipersym_ISM915>:
 80090e4:	043210c7 0044010d                       ..2...D.

080090ec <bandplan_ISM433>:
 80090ec:	ed466c86 594e6c86 c5556c86 315d6c86     .lF..lNY.lU..l]1
 80090fc:	9d646c86 096c6c86 75736c86 e17a6c86     .ld..ll..lsu.lz.
 800910c:	4d826c86 b9896c86 25916c86 91986c86     .l.M.l...l.%.l..
 800911c:	fd9f6c86 69a76c86 d5ae6c86              .l...l.i.l..

08009128 <bandplan_ISM866>:
 8009128:	0048d886 0058d886 0068d886 0078d886     ..H...X...h...x.
 8009138:	0088d886 0098d886 00a8d886 00b8d886     ................
 8009148:	00c8d886 00d8d886 00e8d886 00f8d886     ................
 8009158:	0008d986 0018d986 0028d986              ..........(.

08009164 <bandplan_ISM915>:
 8009164:	77b7e186 6626e286 5595e286 4404e386     ...w..&f...U...D
 8009174:	3373e386 22e2e386 1151e486 00c0e486     ..s3..."..Q.....
 8009184:	ef2ee586 de9de586 cd0ce686 bc7be686     ..............{.
 8009194:	abeae686 9a59e786 89c8e786 5f474552     ......Y.....REG_
 80091a4:	00000000                                ....

080091a8 <defaults.7781>:
 80091a8:	00030002 00050004 7e098001 2b0b090a     ...........~...+
 80091b8:	000d230c 000f000e 741e9c1d 00204b1f     .#.........t.K .
 80091c8:	06220a21 0024ff23 2733c331 d7390a37     !.".#.$.1.3'7.9.
 80091d8:	a1401d3b 00000041                       ;.@.A...

080091e0 <wdog_amount.7827>:
 80091e0:	017d0a01 23a01996 23a01996 23a023a0     ..}....#...#.#.#

080091f0 <mdmcfg2.8563>:
 80091f0:	747494b4                                ..tt

080091f4 <detection.8571>:
 80091f4:	0ac30ac3 0ac50ac4 0ac30ac3 0ac50ac4     ................
 8009204:	04c202c2 04c304c3 04c202c2 04c404c3     ................

08009214 <flag_lut.8654>:
 8009214:	03020400                                ....

08009218 <mdmcfg1_lut.8705>:
 8009218:	0000040c                                ....

0800921c <preamblelen.8703>:
 800921c:	0a0a0606 00000a0a                       ........

08009224 <syncword.8702>:
 8009224:	14eb28d7 0000728d                       .(...r..

0800922c <deflength.8704>:
 800922c:	20101006 00002010                       ... . ..

08009234 <bg1init>:
 8009234:	049e0600 0000004b                       ....K...

0800923c <fginit>:
 800923c:	079eff02 000000ff                       ........

08009244 <pginit>:
 8009244:	079e1004 000000ff                       ........

0800924c <bg2init>:
 800924c:	079e0600 000000ff                       ........

08009254 <iterinit>:
 8009254:	05051144                                D...

08009258 <ti_per_block.8643>:
 8009258:	02061133                                3...

0800925c <mode_lut.8677>:
 800925c:	00020002 04040404                       ........

08009264 <bgpkt_ti_lut.8566>:
 8009264:	02071962 00000000 03091c6f 00000000     b.......o.......

08009274 <tgdti_lut.8570>:
 8009274:	06113578 00000000 091b54c0 00000000     x5.......T......

08009284 <converter.8580>:
 8009284:	08001a4d 08001a2d 08001a0d 080019ed     M...-...........

08009294 <frparams.8587>:
 8009294:	00000001 00010002 06020000 00000201     ................
 80092a4:	02010602 06020000                       ........

080092ac <initial_bytes.8605>:
 80092ac:	070f0507 1111050f                       ........

080092b4 <bits_per_lorablock.8604>:
 80092b4:	141c242c                                ,$..

080092b8 <crc7tab>:
 80092b8:	36241200 7e6c5a48 a6b48290 eefccad8     ..$6HZl~........
 80092c8:	04162032 4c5e687a 9486b0a2 dccef8ea     2 ..zh^L........
 80092d8:	52407664 1a083e2c c2d0e6f4 8a98aebc     dv@R,>..........
 80092e8:	60724456 283a0c1e f0e2d4c6 b8aa9c8e     VDr`..:(........
 80092f8:	feecdac8 b6a49280 6e7c4a58 26340210     ........XJ|n..4&
 8009308:	ccdee8fa 8496a0b2 5c4e786a 14063022     ........jxN\"0..
 8009318:	9a88beac d2c0f6e4 0a182e3c 42506674     ........<...tfPB
 8009328:	a8ba8c9e e0f2c4d6 382a1c0e 70625446     ..........*8FTbp
 8009338:	b4a69082 fceed8ca 24360012 6c7e485a     ..........6$ZH~l
 8009348:	8694a2b0 cedceaf8 16043220 5e4c7a68     ........ 2..hzL^
 8009358:	d0c2f4e6 988abcae 40526476 081a2c3e     ........vdR@>,..
 8009368:	e2f0c6d4 aab88e9c 72605644 3a281e0c     ........DV`r..(:
 8009378:	7c6e584a 34261002 ecfec8da a4b68092     JXn|..&4........
 8009388:	4e5c6a78 06142230 deccfae8 9684b2a0     xj\N0"..........
 8009398:	180a3c2e 50427466 889aacbe c0d2e4f6     .<..ftBP........
 80093a8:	2a380e1c 62704654 baa89e8c f2e0d6c4     ..8*TFpb........

080093b8 <infobits_select.8118>:
 80093b8:	0b0a0908 06060d0c                       ........

080093c0 <__func__.8130>:
 80093c0:	5f637368 74696e69 00000000              hsc_init....

080093cc <fbit_select.8129>:
 80093cc:	08009b8c 08009b0c 08009a8c 08009a0c     ................
 80093dc:	0800998c 0800990c 08009c0c 08009c0c     ................

080093ec <rbyte>:
 80093ec:	07080700 070c0704 070a0702 070e0706     ................
 80093fc:	07090701 070d0705 070b0703 070f0707     ................
 800940c:	03080300 030c0304 030a0302 030e0306     ................
 800941c:	03090301 030d0305 030b0303 030f0307     ................
 800942c:	05080500 050c0504 050a0502 050e0506     ................
 800943c:	05090501 050d0505 050b0503 050f0507     ................
 800944c:	01080100 010c0104 010a0102 010e0106     ................
 800945c:	01090101 010d0105 010b0103 010f0107     ................
 800946c:	06080600 060c0604 060a0602 060e0606     ................
 800947c:	06090601 060d0605 060b0603 060f0607     ................
 800948c:	02080200 020c0204 020a0202 020e0206     ................
 800949c:	02090201 020d0205 020b0203 020f0207     ................
 80094ac:	04080400 040c0404 040a0402 040e0406     ................
 80094bc:	04090401 040d0405 040b0403 040f0407     ................
 80094cc:	00080000 000c0004 000a0002 000e0006     ................
 80094dc:	00090001 000d0005 000b0003 000f0007     ................

080094ec <rseqbyte>:
 80094ec:	010f000f 040f020f 000d000e 030f000b     ................
 80094fc:	050f0007 010e060f 010d020e 020d040e     ................
 800950c:	040d010b 000c020b 070f0107 0207040b     ................
 800951c:	000a030e 0407050e 0009030d 0006060e     ................
 800952c:	0005050d 060d030b 050b010c 020c0003     ................
 800953c:	0307060b 040c010a 020a0507 070e0109     ................
 800954c:	040a0607 02090106 070d0206 01050409     ................
 800955c:	030c0406 00080205 070b0103 0405050c     ................
 800956c:	030a0203 060c0004 07070403 0309050a     ................
 800957c:	03060002 06090001 060a0506 01080305     ................
 800958c:	06060509 02080505 06050303 070c0408     ................
 800959c:	01020104 02040603 0503070a 02020404     ................
 80095ac:	01010709 02010706 03080402 04010705     ................
 80095bc:	00000508 07030304 03020504 06040608     ................
 80095cc:	05020301 06020501 06010100 02000708     ................
 80095dc:	07040400 07010702 05000300 07000600     ................

080095ec <lambda_lut>:
 80095ec:	00010006 00010002 00010003 00010002     ................
 80095fc:	00010004 00010002 00010003 00010002     ................
 800960c:	00010005 00010002 00010003 00010002     ................
 800961c:	00010004 00010002 00010003 00010002     ................
 800962c:	00010006 00010002 00010003 00010002     ................
 800963c:	00010004 00010002 00010003 00010002     ................
 800964c:	00010005 00010002 00010003 00010002     ................
 800965c:	00010004 00010002 00010003 00010002     ................

0800966c <wordmask.8175>:
 800966c:	ffffff00 ffff0000 ff000000 00000000     ................

0800967c <wordload.8176>:
 800967c:	00000000 00000100 00020100 03020100     ................

0800968c <minlambda_lut>:
 800968c:	02000100 03000100 02000100 04000100     ................
 800969c:	02000100 03000100 02000100 05000100     ................
 80096ac:	02000100 03000100 02000100 04000100     ................
 80096bc:	02000100 03000100 02000100 06000100     ................
 80096cc:	02000100 03000100 02000100 04000100     ................
 80096dc:	02000100 03000100 02000100 05000100     ................
 80096ec:	02000100 03000100 02000100 04000100     ................
 80096fc:	02000100 03000100 02000100 07000100     ................

0800970c <maxlambda_lut>:
 800970c:	01010000 02020202 03030303 03030303     ................
 800971c:	04040404 04040404 04040404 04040404     ................
 800972c:	05050505 05050505 05050505 05050505     ................
 800973c:	05050505 05050505 05050505 05050505     ................
 800974c:	06060606 06060606 06060606 06060606     ................
 800975c:	06060606 06060606 06060606 06060606     ................
 800976c:	06060606 06060606 06060606 06060606     ................
 800977c:	06060606 06060606 06060606 06060606     ................

0800978c <j1.8096>:
 800978c:	02000000 00000102 00000100 00000000     ................

0800979c <j0.8097>:
 800979c:	03000000 03030303 02020202 00000101     ................

080097ac <eminlambda_lut>:
 80097ac:	04010201 08010201 04010201 10010201     ................
 80097bc:	04010201 08010201 04010201 20010201     ............... 
 80097cc:	04010201 08010201 04010201 10010201     ................
 80097dc:	04010201 08010201 04010201 40010201     ...............@
 80097ec:	04010201 08010201 04010201 10010201     ................
 80097fc:	04010201 08010201 04010201 20010201     ............... 
 800980c:	04010201 08010201 04010201 10010201     ................
 800981c:	04010201 08010201 04010201 01010201     ................

0800982c <rseq>:
 800982c:	7b7d7e7f 7c5f6f77 76797a3f 6d736e75     .~}{wo_|?zyvunsm
 800983c:	675d6b5e 3d5b783e 3b725774 37714f6c     ^k]g>x[=tWr;lOq7
 800984c:	695c2f6a 651f5a66 63563c59 704e553a     j/\ifZ.eY<Vc:UNp
 800985c:	4d365339 2e4b6835 472d6433 2b62581e     9S6M5hK.3d-G.Xb+
 800986c:	6127541d 4c52381b 490f3417 462c5132     .T'a.8RL.4.I2Q,F
 800987c:	452a314a 6043291c 25191626 15231a50     J1*E.)C`&..%P.#.
 800988c:	0d300e48 0b284413 18240742 21411422     H.0..D(.B.$.".A!
 800989c:	110a120c 05400906 08102003 00010204     ......@.. ......

080098ac <wordmask.8273>:
 80098ac:	ffffff00 ffff0000 ff000000 00000000     ................

080098bc <wordload.8274>:
 80098bc:	00000000 00000100 00020100 03020100     ................

080098cc <bitify.8382>:
 80098cc:	00000000 00000001 00000100 00000101     ................
 80098dc:	00010000 00010001 00010100 00010101     ................
 80098ec:	01000000 01000001 01000100 01000101     ................
 80098fc:	01010000 01010001 01010100 01010101     ................

0800990c <fbit104>:
 800990c:	01010101 00010101 00010101 00000001     ................
 800991c:	00010101 00000000 00000000 00000000     ................
 800992c:	00000101 00000000 00000000 00000000     ................
	...
 800994c:	00000001 00000000 00000000 00000000     ................
	...

0800998c <fbit96>:
 800998c:	01010101 01010101 01010101 00000001     ................
 800999c:	00010101 00000001 00000001 00000000     ................
 80099ac:	00010101 00000001 00000000 00000000     ................
	...
 80099cc:	00010101 00000000 00000000 00000000     ................
	...

08009a0c <fbit88>:
 8009a0c:	01010101 01010101 01010101 00010101     ................
 8009a1c:	01010101 00000101 00000001 00000000     ................
 8009a2c:	00010101 00000001 00000001 00000000     ................
 8009a3c:	00000001 00000000 00000000 00000000     ................
 8009a4c:	00010101 00000001 00000001 00000000     ................
	...

08009a8c <fbit80>:
 8009a8c:	01010101 01010101 01010101 00010101     ................
 8009a9c:	01010101 00010101 00010101 00000000     ................
 8009aac:	01010101 00010101 00000001 00000000     ................
 8009abc:	00000001 00000000 00000000 00000000     ................
 8009acc:	00010101 00000001 00000001 00000000     ................
 8009adc:	00000001 00000000 00000000 00000000     ................
 8009aec:	00000001 00000000 00000000 00000000     ................
	...

08009b0c <fbit72>:
 8009b0c:	01010101 01010101 01010101 00010101     ................
 8009b1c:	01010101 00010101 00010101 00000001     ................
 8009b2c:	01010101 00010101 00010101 00000000     ................
 8009b3c:	00000101 00000000 00000000 00000000     ................
 8009b4c:	01010101 00010101 00010001 00000000     ................
 8009b5c:	00000001 00000000 00000000 00000000     ................
 8009b6c:	00000001 00000000 00000000 00000000     ................
	...

08009b8c <fbit64>:
 8009b8c:	01010101 01010101 01010101 01010101     ................
 8009b9c:	01010101 01010101 00010101 00000001     ................
 8009bac:	01010101 00010101 00010101 00000001     ................
 8009bbc:	00010101 00000001 00000000 00000000     ................
 8009bcc:	01010101 00010101 00010101 00000001     ................
 8009bdc:	00000101 00000000 00000000 00000000     ................
 8009bec:	00000001 00000000 00000000 00000000     ................
	...

08009c0c <fbit48>:
 8009c0c:	01010101 01010101 01010101 01010101     ................
 8009c1c:	01010101 01010101 01010101 00010101     ................
 8009c2c:	01010101 01010101 01010101 00010101     ................
 8009c3c:	01010101 00000001 00000001 00000000     ................
 8009c4c:	01010101 01010101 00010101 00000001     ................
 8009c5c:	00010101 00000001 00000001 00000000     ................
 8009c6c:	00010101 00000001 00000000 00000000     ................
	...

08009c8c <llrvrssi>:
 8009c8c:	01430120 0198016b 020001c8 0286023e      .C.k.......>...
 8009c9c:	032c02d3 03ff038f 0479043a 050604be     ..,.....:.y.....
 8009cac:	065305a5 0a0707f7 0fe50c9f 192f1400     ..S.........../.
 8009cbc:	27e81fb6 3f3e323a 643b4f9e 77237723     ...':2>?.O;d#w#w

08009ccc <llroffset>:
	...

08009cdc <scan_events.8837>:
 8009cdc:	05000000 00010004                       ........

08009ce4 <_idlen>:
 8009ce4:	00020008                                ....

08009ce8 <opgroup_proc>:
 8009ce8:	08004d49 08004d49 08004d69 08005415     IM..IM..iM...T..
 8009cf8:	08005415 08004c81 08004c83 08004e95     .T...L...L...N..

08009d08 <fixed_mask.8557>:
 8009d08:	ffffffff ffffffff ffffffff ffffffff     ................

08009d18 <cmd_fn.8092>:
 8009d18:	080058c1 08005451 080058c1 080058c1     .X..QT...X...X..
 8009d28:	08005651 08005451 08005651 08005651     QV..QT..QV..QV..
 8009d38:	080055b3 08005451 0800554f 080054b9     .U..QT..OU...T..
 8009d48:	08005651 08005451 08005473 08005451     QV..QT..sT..QT..

08009d58 <crc16_table>:
 8009d58:	80050000 000a800f 001e801b 80110014     ................
 8009d68:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
 8009d78:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
 8009d88:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
 8009d98:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
 8009da8:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
 8009db8:	80a500a0 00aa80af 00be80bb 80b100b4     ................
 8009dc8:	00968093 8099009c 808d0088 00828087     ................
 8009dd8:	01868183 8189018c 819d0198 01928197     ................
 8009de8:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
 8009df8:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
 8009e08:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
 8009e18:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
 8009e28:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
 8009e38:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
 8009e48:	81150110 011a811f 010e810b 81010104     ................
 8009e58:	03068303 8309030c 831d0318 03128317     ................
 8009e68:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
 8009e78:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
 8009e88:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
 8009e98:	83c503c0 03ca83cf 03de83db 83d103d4     ................
 8009ea8:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
 8009eb8:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
 8009ec8:	83950390 039a839f 038e838b 83810384     ................
 8009ed8:	82850280 028a828f 029e829b 82910294     ................
 8009ee8:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
 8009ef8:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
 8009f08:	82d502d0 02da82df 02ce82cb 82c102c4     ................
 8009f18:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
 8009f28:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
 8009f38:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
 8009f48:	02168213 8219021c 820d0208 02028207     ................

08009f58 <systask_call>:
 8009f58:	080041bd 080066ad 0800420d 08003cc5     .A...f...B...<..
 8009f68:	08003c3d 08000579                       =<..y...

08009f70 <params.8518>:
 8009f70:	00000001 00f42400 00f42400 00f42400     .....$...$...$..
 8009f80:	00000001 00f42400 00f42400 00f42400     .....$...$...$..
 8009f90:	00000001 00000000 00000000 00000000     ................

08009fa0 <len_div.7379>:
 8009fa0:	00000002 00000001                       ........

08009fa8 <ccr.7378>:
 8009fa8:	40d14ad1 40d145d1                       .J.@.E.@

08009fb0 <len_div.7407>:
 8009fb0:	00000002 00000001                       ........

08009fb8 <ccr.7406>:
 8009fb8:	40d14ad1 40d145d1                       .J.@.E.@

08009fc0 <_brtable>:
 8009fc0:	00002580 00007080 0000e100 0001c200     .%...p..........
 8009fd0:	0003d090 0007a120 6774227b 74736574     .... ...{"tgtest
 8009fe0:	007b3a22 6b6f7422 3a226e65 38302522     ":{."token":"%08
 8009ff0:	202c2258 00000000 73737222 253a2269     X", ...."rssi":%
 800a000:	00202c69 61656d22 6e732d6e 253a2272     i, ."mean-snr":%
 800a010:	007d7d69 00504c41 5f535953 00004e4f     i}}.ALP.SYS_ON..
 800a020:	74737953 6f206d65 6e61206e 704d2064     System on and Mp
 800a030:	20657069 69746361 000a6576 00465457     ipe active..WTF.
 800a040:	00000068 6573552f 6a2f7372 6f626e70     h.../Users/jpnbo
 800a050:	532f6b6f 2f636e79 6f706552 6f746973     ok/Sync/Reposito
 800a060:	4f2f7972 546e6570 485f6761 682f4f44     ry/OpenTag_HDO/h
 800a070:	6c697562 2f726564 696c6268 73682f62     builder/hblib/hs
 800a080:	65646f63 0000632e 7566202c 6974636e     code.c.., functi
 800a090:	203a6e6f 73736100 69747265 22206e6f     on: .assertion "
 800a0a0:	20227325 6c696166 203a6465 656c6966     %s" failed: file
 800a0b0:	73252220 6c202c22 20656e69 73256425      "%s", line %d%s
 800a0c0:	000a7325                                %s..

0800a0c4 <_global_impure_ptr>:
 800a0c4:	20000158 2b302d23 6c680020 6665004c     X.. #-0+ .hlL.ef
 800a0d4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
 800a0e4:	45444342 31300046 35343332 39383736     BCDEF.0123456789
 800a0f4:	64636261 00006665                       abcdef..

0800a0fc <__sf_fake_stderr>:
	...

0800a11c <__sf_fake_stdin>:
	...

0800a13c <__sf_fake_stdout>:
	...

0800a15c <_init>:
 800a15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15e:	bf00      	nop
 800a160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a162:	bc08      	pop	{r3}
 800a164:	469e      	mov	lr, r3
 800a166:	4770      	bx	lr

0800a168 <_fini>:
 800a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16a:	bf00      	nop
 800a16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16e:	bc08      	pop	{r3}
 800a170:	469e      	mov	lr, r3
 800a172:	4770      	bx	lr

0800a174 <__init_array_start>:
 800a174:	080001b5 	.word	0x080001b5

0800a178 <__fini_array_start>:
 800a178:	08000191 	.word	0x08000191
