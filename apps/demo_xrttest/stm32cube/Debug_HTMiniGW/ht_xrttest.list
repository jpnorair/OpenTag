
ht_xrttest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flash_start  00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  2 .crp_patch    00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  3 .text         0000b588  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .flashpatch   00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  5 .endflash     00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  6 .config       00000000  1ff80000  1ff80000  000275fc  2**0
                  CONTENTS
  7 .optionbytes  00000000  1ff80000  1ff80000  000275fc  2**0
                  CONTENTS
  8 .config2      00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  9 .optionbytes2 00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
 10 .vl_ov        00000280  08017000  08017000  00027000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .vl_isfs      00000000  08017360  08017360  000275fc  2**0
                  CONTENTS
 12 .vl_isf       000001fc  08017400  08017400  00027400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .data         000001ac  20000000  0800b648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00003100  200001ac  0800b7f4  000201ac  2**2
                  ALLOC
 15 ._usrstack    00000100  200032ac  0800e8f4  000201ac  2**0
                  ALLOC
 16 .ARM.attributes 00000028  00000000  00000000  000275fc  2**0
                  CONTENTS, READONLY
 17 .debug_info   0002a37b  00000000  00000000  00027624  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 000074d5  00000000  00000000  0005199f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00011680  00000000  00000000  00058e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00001b28  00000000  00000000  0006a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00002a30  00000000  00000000  0006c020  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   000157e8  00000000  00000000  0006ea50  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    000067f4  00000000  00000000  00084238  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  0008aa2c  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00004e8c  00000000  00000000  0008aaa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 26 .stab         000000cc  00000000  00000000  0008f934  2**2
                  CONTENTS, READONLY, DEBUGGING
 27 .stabstr      000001b9  00000000  00000000  0008fa00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ac 	.word	0x200001ac
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b628 	.word	0x0800b628

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001b0 	.word	0x200001b0
 8000104:	0800b628 	.word	0x0800b628

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <xrt_applet_fec>:

/** Communication Task Applets  <BR>
  * ========================================================================<BR>
  */

void xrt_applet_fec(m2session* active) {
 80003f4:	b500      	push	{lr}
 80003f6:	b083      	sub	sp, #12
/// This is a page operation, which gets buried directly onto the queue
	ot_u8 	payload[7];
	ot_u32  dev_token = ((ot_u32*)UID_BASE)[0];
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <xrt_applet_fec+0x38>)
 80003fa:	6818      	ldr	r0, [r3, #0]

	payload[0]	= 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	466a      	mov	r2, sp
 8000400:	7013      	strb	r3, [r2, #0]
	payload[1]	= 0x81;
 8000402:	2281      	movs	r2, #129	; 0x81
 8000404:	4669      	mov	r1, sp
 8000406:	704a      	strb	r2, [r1, #1]
	payload[2]	= 0;
 8000408:	708b      	strb	r3, [r1, #2]
	payload[3]	= (ot_u8)setup.page_count;
 800040a:	4a09      	ldr	r2, [pc, #36]	; (8000430 <xrt_applet_fec+0x3c>)
 800040c:	7912      	ldrb	r2, [r2, #4]
 800040e:	70ca      	strb	r2, [r1, #3]
	payload[4]	= 0;
 8000410:	466a      	mov	r2, sp
 8000412:	710b      	strb	r3, [r1, #4]
	payload[5]	= 0;
 8000414:	714b      	strb	r3, [r1, #5]
	payload[6]	= 0;
 8000416:	718b      	strb	r3, [r1, #6]

    otapi_new_telegram(dev_token, 2, payload);
 8000418:	2102      	movs	r1, #2
 800041a:	f004 f88d 	bl	8004538 <otapi_new_telegram>
    otapi_start_dialog(1024);
 800041e:	2080      	movs	r0, #128	; 0x80
 8000420:	00c0      	lsls	r0, r0, #3
 8000422:	f004 f8f5 	bl	8004610 <otapi_start_dialog>
}
 8000426:	b003      	add	sp, #12
 8000428:	bd00      	pop	{pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	1ff80050 	.word	0x1ff80050
 8000430:	20000000 	.word	0x20000000

08000434 <alp_ext_proc>:
ot_bool alp_ext_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	0004      	movs	r4, r0
    ot_u8 flags      	= INREC(alp, FLAGS);
 8000438:	2104      	movs	r1, #4
 800043a:	4249      	negs	r1, r1
 800043c:	6880      	ldr	r0, [r0, #8]
 800043e:	f006 fe05 	bl	800704c <q_getcursor_val>
    ot_u8 payload_len 	= INREC(alp, PLEN);
 8000442:	2103      	movs	r1, #3
 8000444:	4249      	negs	r1, r1
 8000446:	68a0      	ldr	r0, [r4, #8]
 8000448:	f006 fe00 	bl	800704c <q_getcursor_val>
    ot_u8 alp_id      	= INREC(alp, ID);
 800044c:	2102      	movs	r1, #2
 800044e:	4249      	negs	r1, r1
 8000450:	68a0      	ldr	r0, [r4, #8]
 8000452:	f006 fdfb 	bl	800704c <q_getcursor_val>
 8000456:	0005      	movs	r5, r0
    ot_u8 alp_cmd     	= INREC(alp, CMD);
 8000458:	2101      	movs	r1, #1
 800045a:	4249      	negs	r1, r1
 800045c:	68a0      	ldr	r0, [r4, #8]
 800045e:	f006 fdf5 	bl	800704c <q_getcursor_val>
    switch (alp_id) {
 8000462:	2d10      	cmp	r5, #16
 8000464:	d156      	bne.n	8000514 <alp_ext_proc+0xe0>
		radio_snr_t* snrdata = radio_getlinkinfo();
 8000466:	f001 fb43 	bl	8001af0 <radio_getlinkinfo>
 800046a:	0005      	movs	r5, r0
		setup.page_received = True;
 800046c:	4f37      	ldr	r7, [pc, #220]	; (800054c <alp_ext_proc+0x118>)
 800046e:	2301      	movs	r3, #1
 8000470:	707b      	strb	r3, [r7, #1]
		tx_eirp	= q_readbyte(alp->inq);
 8000472:	68a0      	ldr	r0, [r4, #8]
 8000474:	f006 fe69 	bl	800714a <q_readbyte>
		subnet  = q_readbyte(alp->inq);
 8000478:	68a0      	ldr	r0, [r4, #8]
 800047a:	f006 fe66 	bl	800714a <q_readbyte>
		token   = q_readlong(alp->inq);
 800047e:	68a0      	ldr	r0, [r4, #8]
 8000480:	f006 fe7d 	bl	800717e <q_readlong>
 8000484:	0006      	movs	r6, r0
		ptype   = q_readbyte(alp->inq);
 8000486:	68a0      	ldr	r0, [r4, #8]
 8000488:	f006 fe5f 	bl	800714a <q_readbyte>
		dtype.ubyte[UPPER] 	= q_readbyte(alp->inq);
 800048c:	68a0      	ldr	r0, [r4, #8]
 800048e:	f006 fe5c 	bl	800714a <q_readbyte>
		dtype.ubyte[LOWER] 	= q_readbyte(alp->inq);
 8000492:	68a0      	ldr	r0, [r4, #8]
 8000494:	f006 fe59 	bl	800714a <q_readbyte>
		pcnt.ubyte[UPPER] 	= q_readbyte(alp->inq);
 8000498:	68a0      	ldr	r0, [r4, #8]
 800049a:	f006 fe56 	bl	800714a <q_readbyte>
		pcnt.ubyte[LOWER] 	= q_readbyte(alp->inq);
 800049e:	68a0      	ldr	r0, [r4, #8]
 80004a0:	f006 fe53 	bl	800714a <q_readbyte>
		if (setup.is_gateway) {
 80004a4:	783b      	ldrb	r3, [r7, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d04e      	beq.n	8000548 <alp_ext_proc+0x114>
			logger_header(DATA_json, 0);
 80004aa:	2100      	movs	r1, #0
 80004ac:	2002      	movs	r0, #2
 80004ae:	f006 fd65 	bl	8006f7c <logger_header>
			mpipe.alp.outq->putcursor += sprintf(mpipe.alp.outq->putcursor, "{\"tgtest\":{");
 80004b2:	4c27      	ldr	r4, [pc, #156]	; (8000550 <alp_ext_proc+0x11c>)
 80004b4:	6923      	ldr	r3, [r4, #16]
 80004b6:	6898      	ldr	r0, [r3, #8]
 80004b8:	220c      	movs	r2, #12
 80004ba:	4926      	ldr	r1, [pc, #152]	; (8000554 <alp_ext_proc+0x120>)
 80004bc:	f008 fe30 	bl	8009120 <memcpy>
 80004c0:	6922      	ldr	r2, [r4, #16]
 80004c2:	6893      	ldr	r3, [r2, #8]
 80004c4:	330b      	adds	r3, #11
 80004c6:	6093      	str	r3, [r2, #8]
			mpipe.alp.outq->putcursor += sprintf(mpipe.alp.outq->putcursor, "\"token\":\"%08X\", ", token);
 80004c8:	6923      	ldr	r3, [r4, #16]
 80004ca:	6898      	ldr	r0, [r3, #8]
 80004cc:	0032      	movs	r2, r6
 80004ce:	4922      	ldr	r1, [pc, #136]	; (8000558 <alp_ext_proc+0x124>)
 80004d0:	f009 f8ea 	bl	80096a8 <siprintf>
 80004d4:	6922      	ldr	r2, [r4, #16]
 80004d6:	6893      	ldr	r3, [r2, #8]
 80004d8:	3314      	adds	r3, #20
 80004da:	6093      	str	r3, [r2, #8]
			mpipe.alp.outq->putcursor += sprintf(mpipe.alp.outq->putcursor, "\"rssi\":%i, ", radio.last_rssi);
 80004dc:	6923      	ldr	r3, [r4, #16]
 80004de:	6898      	ldr	r0, [r3, #8]
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <alp_ext_proc+0x128>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	5e9a      	ldrsh	r2, [r3, r2]
 80004e6:	491e      	ldr	r1, [pc, #120]	; (8000560 <alp_ext_proc+0x12c>)
 80004e8:	f009 f8de 	bl	80096a8 <siprintf>
 80004ec:	6923      	ldr	r3, [r4, #16]
 80004ee:	689a      	ldr	r2, [r3, #8]
 80004f0:	4694      	mov	ip, r2
 80004f2:	4460      	add	r0, ip
 80004f4:	6098      	str	r0, [r3, #8]
			mpipe.alp.outq->putcursor += sprintf(mpipe.alp.outq->putcursor, "\"mean-snr\":%i}}", snrdata->mean_snr);
 80004f6:	6923      	ldr	r3, [r4, #16]
 80004f8:	6898      	ldr	r0, [r3, #8]
 80004fa:	2304      	movs	r3, #4
 80004fc:	5eea      	ldrsh	r2, [r5, r3]
 80004fe:	4919      	ldr	r1, [pc, #100]	; (8000564 <alp_ext_proc+0x130>)
 8000500:	f009 f8d2 	bl	80096a8 <siprintf>
 8000504:	6923      	ldr	r3, [r4, #16]
 8000506:	689a      	ldr	r2, [r3, #8]
 8000508:	4694      	mov	ip, r2
 800050a:	4460      	add	r0, ip
 800050c:	6098      	str	r0, [r3, #8]
			logger_direct();
 800050e:	f006 fd7b 	bl	8007008 <logger_direct>
	} break;
 8000512:	e019      	b.n	8000548 <alp_ext_proc+0x114>
        logger_header(MSG_raw, 0);
 8000514:	2100      	movs	r1, #0
 8000516:	2004      	movs	r0, #4
 8000518:	f006 fd30 	bl	8006f7c <logger_header>
        q_writestring(mpipe.alp.outq, (ot_u8*)"ALP", 4);
 800051c:	4e0c      	ldr	r6, [pc, #48]	; (8000550 <alp_ext_proc+0x11c>)
 800051e:	2204      	movs	r2, #4
 8000520:	4911      	ldr	r1, [pc, #68]	; (8000568 <alp_ext_proc+0x134>)
 8000522:	6930      	ldr	r0, [r6, #16]
 8000524:	f006 fe41 	bl	80071aa <q_writestring>
        len = q_span(alp->inq);
 8000528:	68a0      	ldr	r0, [r4, #8]
 800052a:	f006 fd97 	bl	800705c <q_span>
 800052e:	0005      	movs	r5, r0
        q_writestring(mpipe.alp.outq, q_markbyte(alp->inq, len), len);
 8000530:	6936      	ldr	r6, [r6, #16]
 8000532:	68a0      	ldr	r0, [r4, #8]
 8000534:	0029      	movs	r1, r5
 8000536:	f006 fdd4 	bl	80070e2 <q_markbyte>
 800053a:	0001      	movs	r1, r0
 800053c:	002a      	movs	r2, r5
 800053e:	0030      	movs	r0, r6
 8000540:	f006 fe33 	bl	80071aa <q_writestring>
        logger_direct();
 8000544:	f006 fd60 	bl	8007008 <logger_direct>
}
 8000548:	2001      	movs	r0, #1
 800054a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800054c:	20000000 	.word	0x20000000
 8000550:	20002d90 	.word	0x20002d90
 8000554:	0800b4a4 	.word	0x0800b4a4
 8000558:	0800b4b0 	.word	0x0800b4b0
 800055c:	200026b8 	.word	0x200026b8
 8000560:	0800b4c4 	.word	0x0800b4c4
 8000564:	0800b4d0 	.word	0x0800b4d0
 8000568:	0800b4e0 	.word	0x0800b4e0

0800056c <xrt_invoke>:
  * Then, the kernel will call the DLL session task as soon as necessary
  * resources are available to run that task (by default DLL task is top
  * priority, so it should get called right away).
  */

void xrt_invoke(ot_u8 state) {
 800056c:	b510      	push	{r4, lr}
 800056e:	0001      	movs	r1, r0
    sys_task_setevent(XRTTEST_TASK, state);
 8000570:	4c08      	ldr	r4, [pc, #32]	; (8000594 <xrt_invoke+0x28>)
 8000572:	0020      	movs	r0, r4
 8000574:	f007 faac 	bl	8007ad0 <sys_task_setevent>
    sys_task_setreserve(XRTTEST_TASK, 1);
 8000578:	2101      	movs	r1, #1
 800057a:	0020      	movs	r0, r4
 800057c:	f007 faaa 	bl	8007ad4 <sys_task_setreserve>
    sys_task_setlatency(XRTTEST_TASK, 255);
 8000580:	21ff      	movs	r1, #255	; 0xff
 8000582:	0020      	movs	r0, r4
 8000584:	f007 faa8 	bl	8007ad8 <sys_task_setlatency>
    sys_preempt(XRTTEST_TASK, 0);
 8000588:	2100      	movs	r1, #0
 800058a:	0020      	movs	r0, r4
 800058c:	f007 fb1e 	bl	8007bcc <sys_preempt>
}
 8000590:	bd10      	pop	{r4, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	20002dd4 	.word	0x20002dd4

08000598 <app_set_txpwr>:


/** Function for modulating power <BR>
  * ==================================================================<BR>
  */
void app_set_txpwr(ot_int dBm) {
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0004      	movs	r4, r0
    vlFILE* fp;
    ot_uni16 pwr_flt;

    fp = ISF_open_su(0x02);
 800059c:	2002      	movs	r0, #2
 800059e:	f007 f932 	bl	8007806 <ISF_open_su>
 80005a2:	1e05      	subs	r5, r0, #0
    if (fp != NULL) {
 80005a4:	d02b      	beq.n	80005fe <app_set_txpwr+0x66>
        ot_uint offset;

        // Replace existing power levels for each of three channel groups
        // with new power spec.
        offset              = 6+2;
        pwr_flt.ushort      = vl_read(fp, offset);
 80005a6:	2108      	movs	r1, #8
 80005a8:	f007 f876 	bl	8007698 <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 80005ac:	3428      	adds	r4, #40	; 0x28
 80005ae:	0064      	lsls	r4, r4, #1
 80005b0:	b2e4      	uxtb	r4, r4
 80005b2:	26ff      	movs	r6, #255	; 0xff
 80005b4:	0002      	movs	r2, r0
 80005b6:	43b2      	bics	r2, r6
 80005b8:	4322      	orrs	r2, r4
        vl_write(fp, offset, pwr_flt.ushort);
 80005ba:	b292      	uxth	r2, r2
 80005bc:	2108      	movs	r1, #8
 80005be:	0028      	movs	r0, r5
 80005c0:	f007 f871 	bl	80076a6 <vl_write>

        offset              = 6+6+2;
        pwr_flt.ushort      = vl_read(fp, offset);
 80005c4:	210e      	movs	r1, #14
 80005c6:	0028      	movs	r0, r5
 80005c8:	f007 f866 	bl	8007698 <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 80005cc:	0002      	movs	r2, r0
 80005ce:	43b2      	bics	r2, r6
 80005d0:	4322      	orrs	r2, r4
        vl_write(fp, offset, pwr_flt.ushort);
 80005d2:	b292      	uxth	r2, r2
 80005d4:	210e      	movs	r1, #14
 80005d6:	0028      	movs	r0, r5
 80005d8:	f007 f865 	bl	80076a6 <vl_write>

        offset              = 6+6+6+2;
        pwr_flt.ushort      = vl_read(fp, offset);
 80005dc:	2114      	movs	r1, #20
 80005de:	0028      	movs	r0, r5
 80005e0:	f007 f85a 	bl	8007698 <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 80005e4:	0002      	movs	r2, r0
 80005e6:	43b2      	bics	r2, r6
 80005e8:	4322      	orrs	r2, r4
        vl_write(fp, offset, pwr_flt.ushort);
 80005ea:	b292      	uxth	r2, r2
 80005ec:	2114      	movs	r1, #20
 80005ee:	0028      	movs	r0, r5
 80005f0:	f007 f859 	bl	80076a6 <vl_write>

        vl_close(fp);
 80005f4:	0028      	movs	r0, r5
 80005f6:	f007 f8d1 	bl	800779c <vl_close>
        // This block of code resets the channel status, forcing the
        // radio module to update the channel information.
        // It's a hack, but this whole app is a hack.
        //phymac[0].channel   = 0xF0;
        //phymac[0].tx_eirp   = 0x7F;
        rm2_channel_refresh();
 80005fa:	f005 fa0b 	bl	8005a14 <rm2_channel_refresh>
    }

}
 80005fe:	bd70      	pop	{r4, r5, r6, pc}

08000600 <setup_init>:
  * any of the kernel & system features are initialized.  It's a good
  * place to put features that control which drivers or apps get 
  * activated.
  */
  
void setup_init() {
 8000600:	b510      	push	{r4, lr}
///    @todo it would be better to simply monitor the initial value of UART lines,
///    to see if they are connected, but this cannot be so easily guaranteed.
    
    // Set it up as gateway by default (switch open, if there is a switch at all)
#   if defined(__FORCE_GATEWAY)
    setup.is_gateway = 1;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <setup_init+0x40>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
#   endif
    
    /// Blink the board LEDs to show that it is starting up.
    {   ot_u8 i;

        i=4;
 8000608:	2404      	movs	r4, #4
        while (i != 0) {
 800060a:	e00f      	b.n	800062c <setup_init+0x2c>
#endif

static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
static inline void BOARD_led1_toggle(void)  { OT_TRIG1_TOG(); }
static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <setup_init+0x44>)
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	0092      	lsls	r2, r2, #2
 8000612:	619a      	str	r2, [r3, #24]
            if (i&1)    BOARD_led1_on();
            else        BOARD_led2_on();

            delay_ti(60);
 8000614:	203c      	movs	r0, #60	; 0x3c
 8000616:	f008 f937 	bl	8008888 <delay_ti>
static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <setup_init+0x44>)
 800061c:	2280      	movs	r2, #128	; 0x80
 800061e:	0092      	lsls	r2, r2, #2
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 8000622:	3a01      	subs	r2, #1
 8000624:	3aff      	subs	r2, #255	; 0xff
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
            BOARD_led2_off();
            BOARD_led1_off();
            i--;
 8000628:	3c01      	subs	r4, #1
 800062a:	b2e4      	uxtb	r4, r4
        while (i != 0) {
 800062c:	2c00      	cmp	r4, #0
 800062e:	d006      	beq.n	800063e <setup_init+0x3e>
            if (i&1)    BOARD_led1_on();
 8000630:	07e3      	lsls	r3, r4, #31
 8000632:	d5eb      	bpl.n	800060c <setup_init+0xc>
static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <setup_init+0x44>)
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	0052      	lsls	r2, r2, #1
 800063a:	619a      	str	r2, [r3, #24]
 800063c:	e7ea      	b.n	8000614 <setup_init+0x14>
    // Setup Button for interrupt
#	ifdef OT_SWITCH1_PIN
    EXTI->RTSR |= OT_SWITCH1_PIN;
    EXTI->IMR  |= OT_SWITCH1_PIN;
#	endif
}
 800063e:	bd10      	pop	{r4, pc}
 8000640:	20000000 	.word	0x20000000
 8000644:	50000400 	.word	0x50000400

08000648 <setup_beacons>:





ot_int setup_beacons(ot_u16 interval, ot_u8 channel) {
 8000648:	b530      	push	{r4, r5, lr}
 800064a:	b083      	sub	sp, #12
	ot_u8 beacon_list[8] = {0x00, 0x00, TG_CHANNEL, 0x02, 0x20, 0x00, 0x00, 0x08};
 800064c:	466a      	mov	r2, sp
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <setup_beacons+0x6c>)
 8000650:	cb30      	ldmia	r3!, {r4, r5}
 8000652:	c230      	stmia	r2!, {r4, r5}
    vlFILE* fp;
    ot_int 	output = -1;

    if (interval == 0) {
 8000654:	2800      	cmp	r0, #0
 8000656:	d110      	bne.n	800067a <setup_beacons+0x32>
    	fp = ISF_open_su(0);
 8000658:	f007 f8d5 	bl	8007806 <ISF_open_su>
 800065c:	1e05      	subs	r5, r0, #0
		if (fp != NULL) {
 800065e:	d022      	beq.n	80006a6 <setup_beacons+0x5e>
			output = vl_write(fp, 6, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	2106      	movs	r1, #6
 8000664:	f007 f81f 	bl	80076a6 <vl_write>
 8000668:	b204      	sxth	r4, r0
			vl_close(fp);
 800066a:	0028      	movs	r0, r5
 800066c:	f007 f896 	bl	800779c <vl_close>
			dll_refresh();
 8000670:	f004 fe5c 	bl	800532c <dll_refresh>
			dll_refresh();
		}
    }

    return output;
}
 8000674:	0020      	movs	r0, r4
 8000676:	b003      	add	sp, #12
 8000678:	bd30      	pop	{r4, r5, pc}
    	beacon_list[2] = channel;
 800067a:	466b      	mov	r3, sp
 800067c:	7099      	strb	r1, [r3, #2]
    	beacon_list[6] = (ot_u8)(interval >> 8);
 800067e:	0a03      	lsrs	r3, r0, #8
 8000680:	466a      	mov	r2, sp
 8000682:	7193      	strb	r3, [r2, #6]
    	beacon_list[7] = (ot_u8)(interval);
 8000684:	71d0      	strb	r0, [r2, #7]
    	fp = ISF_open_su(6);
 8000686:	2006      	movs	r0, #6
 8000688:	f007 f8bd 	bl	8007806 <ISF_open_su>
 800068c:	1e05      	subs	r5, r0, #0
		if (fp != NULL) {
 800068e:	d00d      	beq.n	80006ac <setup_beacons+0x64>
			output = vl_store(fp, 8, beacon_list);
 8000690:	466a      	mov	r2, sp
 8000692:	2108      	movs	r1, #8
 8000694:	f007 f84a 	bl	800772c <vl_store>
 8000698:	b204      	sxth	r4, r0
			vl_close(fp);
 800069a:	0028      	movs	r0, r5
 800069c:	f007 f87e 	bl	800779c <vl_close>
			dll_refresh();
 80006a0:	f004 fe44 	bl	800532c <dll_refresh>
 80006a4:	e7e6      	b.n	8000674 <setup_beacons+0x2c>
    ot_int 	output = -1;
 80006a6:	2401      	movs	r4, #1
 80006a8:	4264      	negs	r4, r4
 80006aa:	e7e3      	b.n	8000674 <setup_beacons+0x2c>
 80006ac:	2401      	movs	r4, #1
 80006ae:	4264      	negs	r4, r4
 80006b0:	e7e0      	b.n	8000674 <setup_beacons+0x2c>
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	0800a404 	.word	0x0800a404

080006b8 <setup_listen>:


void setup_listen(bool is_gateway, ot_u8 channel) {
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	0006      	movs	r6, r0
 80006be:	000d      	movs	r5, r1
	ot_u8 sleep_gateway[4] = { SPLIT_TIME16(2,0,0), TG_CHANNEL, 0x50 };
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <setup_listen+0x40>)
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	9201      	str	r2, [sp, #4]
	ot_u8 sleep_endpoint[4]= { SPLIT_TIME16(0,2,3), TG_CHANNEL, 0x80 };
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	9300      	str	r3, [sp, #0]
    vlFILE* fp;
    ot_u8* data;

    fp = ISF_open_su(5);
 80006ca:	2005      	movs	r0, #5
 80006cc:	f007 f89b 	bl	8007806 <ISF_open_su>
 80006d0:	1e04      	subs	r4, r0, #0
    if (fp != NULL) {
 80006d2:	d00c      	beq.n	80006ee <setup_listen+0x36>
        data = is_gateway ? (ot_u8*)sleep_gateway : (ot_u8*)sleep_endpoint;
 80006d4:	2e00      	cmp	r6, #0
 80006d6:	d00c      	beq.n	80006f2 <setup_listen+0x3a>
 80006d8:	aa01      	add	r2, sp, #4
        data[2] = channel;
 80006da:	7095      	strb	r5, [r2, #2]
        vl_store(fp, 4, data);
 80006dc:	2104      	movs	r1, #4
 80006de:	0020      	movs	r0, r4
 80006e0:	f007 f824 	bl	800772c <vl_store>
        vl_close(fp);
 80006e4:	0020      	movs	r0, r4
 80006e6:	f007 f859 	bl	800779c <vl_close>
        dll_refresh();
 80006ea:	f004 fe1f 	bl	800532c <dll_refresh>
    }
}
 80006ee:	b002      	add	sp, #8
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
        data = is_gateway ? (ot_u8*)sleep_gateway : (ot_u8*)sleep_endpoint;
 80006f2:	466a      	mov	r2, sp
 80006f4:	e7f1      	b.n	80006da <setup_listen+0x22>
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	0800a404 	.word	0x0800a404

080006fc <xrttest_systask>:
void xrttest_systask(void* arg) {
 80006fc:	b510      	push	{r4, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	0004      	movs	r4, r0
    switch (task->event) {
 8000702:	7803      	ldrb	r3, [r0, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d02f      	beq.n	8000768 <xrttest_systask+0x6c>
 8000708:	2b00      	cmp	r3, #0
 800070a:	d004      	beq.n	8000716 <xrttest_systask+0x1a>
 800070c:	2b02      	cmp	r3, #2
 800070e:	d01c      	beq.n	800074a <xrttest_systask+0x4e>
        task->event = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	7003      	strb	r3, [r0, #0]
}
 8000714:	e036      	b.n	8000784 <xrttest_systask+0x88>
    	setup.page_count = __PAGE_NUMBURST__;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <xrttest_systask+0x90>)
 8000718:	2201      	movs	r2, #1
 800071a:	809a      	strh	r2, [r3, #4]
    	setup.page_received = False;
 800071c:	2200      	movs	r2, #0
 800071e:	705a      	strb	r2, [r3, #1]
    	setup.page_type = 0;
 8000720:	805a      	strh	r2, [r3, #2]
    	break;
 8000722:	e02f      	b.n	8000784 <xrttest_systask+0x88>
				s_tmpl.channel 	= (TG_CHANNEL);
 8000724:	2381      	movs	r3, #129	; 0x81
 8000726:	466a      	mov	r2, sp
 8000728:	7053      	strb	r3, [r2, #1]
			s_tmpl.flagmask     = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	7153      	strb	r3, [r2, #5]
			s_tmpl.subnetmask   = 0;
 800072e:	70d3      	strb	r3, [r2, #3]
			m2task_telegram(&s_tmpl, applet);
 8000730:	4917      	ldr	r1, [pc, #92]	; (8000790 <xrttest_systask+0x94>)
 8000732:	4668      	mov	r0, sp
 8000734:	f004 ff08 	bl	8005548 <m2task_telegram>
			setup.page_type 	= (setup.page_type == 0);
 8000738:	4a14      	ldr	r2, [pc, #80]	; (800078c <xrttest_systask+0x90>)
 800073a:	2102      	movs	r1, #2
 800073c:	5e53      	ldrsh	r3, [r2, r1]
 800073e:	4259      	negs	r1, r3
 8000740:	414b      	adcs	r3, r1
 8000742:	8053      	strh	r3, [r2, #2]
			nextevent_ti = __PAGE_PERIOD_TI__;
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	00c9      	lsls	r1, r1, #3
 8000748:	e017      	b.n	800077a <xrttest_systask+0x7e>
    	if (setup.is_gateway) {
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <xrttest_systask+0x90>)
 800074c:	7818      	ldrb	r0, [r3, #0]
 800074e:	2800      	cmp	r0, #0
 8000750:	d00a      	beq.n	8000768 <xrttest_systask+0x6c>
    		ot_u8 chan = (setup.page_count == 0) ? (0x80|TG_CHANNEL) : ((~0x80)&TG_CHANNEL);
 8000752:	2204      	movs	r2, #4
 8000754:	5e9b      	ldrsh	r3, [r3, r2]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d116      	bne.n	8000788 <xrttest_systask+0x8c>
 800075a:	2181      	movs	r1, #129	; 0x81
    		setup.page_count = (setup.page_count == 0);
 800075c:	425a      	negs	r2, r3
 800075e:	4153      	adcs	r3, r2
 8000760:	4a0a      	ldr	r2, [pc, #40]	; (800078c <xrttest_systask+0x90>)
 8000762:	8093      	strh	r3, [r2, #4]
    		setup_listen(setup.is_gateway, chan);
 8000764:	f7ff ffa8 	bl	80006b8 <setup_listen>
    	if (setup.is_gateway) {
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <xrttest_systask+0x90>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d0d9      	beq.n	8000724 <xrttest_systask+0x28>
    		setup.page_received	= False;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <xrttest_systask+0x90>)
 8000772:	2200      	movs	r2, #0
 8000774:	705a      	strb	r2, [r3, #1]
    		nextevent_ti		= __PAGE_PERIOD_TI__*3;
 8000776:	21c0      	movs	r1, #192	; 0xc0
 8000778:	0109      	lsls	r1, r1, #4
    	task->event = 1;
 800077a:	2301      	movs	r3, #1
 800077c:	7023      	strb	r3, [r4, #0]
    	sys_task_setnext(task, nextevent_ti);
 800077e:	0020      	movs	r0, r4
 8000780:	f007 f9b4 	bl	8007aec <sys_task_setnext>
}
 8000784:	b002      	add	sp, #8
 8000786:	bd10      	pop	{r4, pc}
    		ot_u8 chan = (setup.page_count == 0) ? (0x80|TG_CHANNEL) : ((~0x80)&TG_CHANNEL);
 8000788:	2101      	movs	r1, #1
 800078a:	e7e7      	b.n	800075c <xrttest_systask+0x60>
 800078c:	20000000 	.word	0x20000000
 8000790:	080003f5 	.word	0x080003f5

08000794 <main>:
	return (ot_int)crcreg;
}
#endif


void main(void) {
 8000794:	b510      	push	{r4, lr}
 8000796:	b082      	sub	sp, #8
    ///1. Standard Power-on routine (Clocks, Timers, IRQ's, etc)
    ///2. Standard OpenTag Init (most stuff actually will not be used)
    platform_poweron();
 8000798:	f007 fe5c 	bl	8008454 <platform_poweron>
    platform_init_OT();
 800079c:	f007 fd32 	bl	8008204 <platform_init_OT>

    // 3. Preparing this application (local functions)
    setup_init();
 80007a0:	f7ff ff2e 	bl	8000600 <setup_init>
    app_set_txpwr((ot_int)(__DBM_DEFAULT));
 80007a4:	2014      	movs	r0, #20
 80007a6:	f7ff fef7 	bl	8000598 <app_set_txpwr>
    setup_listen(setup.is_gateway, TG_CHANNEL);
 80007aa:	4c16      	ldr	r4, [pc, #88]	; (8000804 <main+0x70>)
 80007ac:	7820      	ldrb	r0, [r4, #0]
 80007ae:	2181      	movs	r1, #129	; 0x81
 80007b0:	f7ff ff82 	bl	80006b8 <setup_listen>
    setup_beacons(0, TG_CHANNEL);
 80007b4:	2181      	movs	r1, #129	; 0x81
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff ff46 	bl	8000648 <setup_beacons>

    if (setup.is_gateway) {
 80007bc:	7823      	ldrb	r3, [r4, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d11c      	bne.n	80007fc <main+0x68>
    	asapi_init_srv();
    }

    xrt_invoke(1);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fed2 	bl	800056c <xrt_invoke>
    
    ///4. Set the app name (PageTest) as a cookie in the User-ID.
    ///   This is used for query filtering
    {   static const ot_u8 appstr[] = "APP=PageTest";
        vlFILE* fp;
        fp = ISF_open_su(ISF_ID(user_id));
 80007c8:	2011      	movs	r0, #17
 80007ca:	f007 f81c 	bl	8007806 <ISF_open_su>
 80007ce:	1e04      	subs	r4, r0, #0
        if (fp != NULL) {
 80007d0:	d004      	beq.n	80007dc <main+0x48>
            vl_store(fp, sizeof(appstr), appstr);
 80007d2:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <main+0x74>)
 80007d4:	3210      	adds	r2, #16
 80007d6:	210d      	movs	r1, #13
 80007d8:	f006 ffa8 	bl	800772c <vl_store>
        }
        vl_close(fp);
 80007dc:	0020      	movs	r0, r4
 80007de:	f006 ffdd 	bl	800779c <vl_close>
    ///5a. The device will wait (and block anything else) until you connect
    ///    it to a valid console app.
    ///5b. Load a message to show that main startup has passed
#   if (OT_FEATURE(MPIPE))
    //if (setup.is_gateway) {
        mpipedrv_standby();
 80007e2:	f008 f9dd 	bl	8008ba0 <mpipedrv_standby>
        logger_msg(MSG_utf8, 6, 27, (ot_u8*)"SYS_ON", (ot_u8*)"System on and Mpipe active\n");
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <main+0x78>)
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <main+0x7c>)
 80007ec:	221b      	movs	r2, #27
 80007ee:	2106      	movs	r1, #6
 80007f0:	2005      	movs	r0, #5
 80007f2:	f006 fbf3 	bl	8006fdc <logger_msg>
    ///<LI> You could put code before or after platform_ot_run, which will
    ///     run before or after the (task + kernel).  If you do, keep the code
    ///     very short or else you are risking timing glitches.</LI>
    ///<LI> To run any significant amount of user code, use tasks. </LI>
    while(1) {
        platform_ot_run();
 80007f6:	f007 fedb 	bl	80085b0 <platform_ot_run>
 80007fa:	e7fc      	b.n	80007f6 <main+0x62>
    	asapi_init_srv();
 80007fc:	f000 f8c2 	bl	8000984 <asapi_init_srv>
 8000800:	e7df      	b.n	80007c2 <main+0x2e>
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	20000000 	.word	0x20000000
 8000808:	0800a404 	.word	0x0800a404
 800080c:	0800b4ec 	.word	0x0800b4ec
 8000810:	0800b4e4 	.word	0x0800b4e4

08000814 <dll_sig_rfinit>:
/// 2 = Session invocation (rfinit() not called here)
/// 3 = RX initialization (!)
/// 4 = TX CSMA init (!)
/// 5 = TX watchdog (rfinit() not called here)

    if (pcode == 3) BOARD_led2_on();    // Orange (preferred) / Yellow / Red lamp
 8000814:	2803      	cmp	r0, #3
 8000816:	d004      	beq.n	8000822 <dll_sig_rfinit+0xe>
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <dll_sig_rfinit+0x18>)
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	0052      	lsls	r2, r2, #1
 800081e:	619a      	str	r2, [r3, #24]
    else            BOARD_led1_on();    // Green lamp
}
 8000820:	4770      	bx	lr
static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 8000822:	4b02      	ldr	r3, [pc, #8]	; (800082c <dll_sig_rfinit+0x18>)
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	0092      	lsls	r2, r2, #2
 8000828:	619a      	str	r2, [r3, #24]
 800082a:	e7f9      	b.n	8000820 <dll_sig_rfinit+0xc>
 800082c:	50000400 	.word	0x50000400

08000830 <dll_sig_rfterminate>:
static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <dll_sig_rfterminate+0x10>)
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	0092      	lsls	r2, r2, #2
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 8000838:	3a01      	subs	r2, #1
 800083a:	3aff      	subs	r2, #255	; 0xff
 800083c:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef EXTF_dll_sig_rfterminate
void dll_sig_rfterminate(ot_int pcode, ot_int scode) {
    BOARD_led2_off();   //Orange LED off
    BOARD_led1_off();   //Green LED off
}
 800083e:	4770      	bx	lr
 8000840:	50000400 	.word	0x50000400

08000844 <sys_sig_panic>:
#include <otsys/syskern.h>
#include <otlib/logger.h>


#ifdef EXTF_sys_sig_panic
void sys_sig_panic(ot_int code) {
 8000844:	b510      	push	{r4, lr}
#   if (OT_FEATURE(MPIPE))
    logger_code(3, (ot_u8*)"WTF", (ot_u16)code);
 8000846:	b282      	uxth	r2, r0
 8000848:	4902      	ldr	r1, [pc, #8]	; (8000854 <sys_sig_panic+0x10>)
 800084a:	2003      	movs	r0, #3
 800084c:	f006 fbec 	bl	8007028 <logger_code>
#   endif
}
 8000850:	bd10      	pop	{r4, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	0800b508 	.word	0x0800b508

08000858 <sys_sig_powerdown>:
    SCB->SCR    = scbscr_save;
}


//#ifdef EXTF_sys_sig_powerdown
void sys_sig_powerdown(ot_int code) {
 8000858:	b510      	push	{r4, lr}
        BOARD_STOP(code);
    }   
    else 
#   endif
    {   // Normal Sleeping mode (not deep sleep)
        SCB->SCR   &= ~((ot_u32)SCB_SCR_SLEEPDEEP_Msk);
 800085a:	4a07      	ldr	r2, [pc, #28]	; (8000878 <sys_sig_powerdown+0x20>)
 800085c:	6913      	ldr	r3, [r2, #16]
 800085e:	2104      	movs	r1, #4
 8000860:	438b      	bics	r3, r1
 8000862:	6113      	str	r3, [r2, #16]
#       if defined(__STM32L4xx__)
        // Nothing do to here for L4
#       else
        PWR->CR    &= ~(PWR_CR_PDDS | PWR_CR_LPSDSR | PWR_CR_FWU | PWR_CR_ULP);
 8000864:	4a05      	ldr	r2, [pc, #20]	; (800087c <sys_sig_powerdown+0x24>)
 8000866:	6813      	ldr	r3, [r2, #0]
 8000868:	4905      	ldr	r1, [pc, #20]	; (8000880 <sys_sig_powerdown+0x28>)
 800086a:	400b      	ands	r3, r1
 800086c:	6013      	str	r3, [r2, #0]
#       endif
        platform_enable_interrupts();
 800086e:	f007 fcc7 	bl	8008200 <platform_enable_interrupts>
        __WFI();
 8000872:	bf30      	wfi
    }

}
 8000874:	bd10      	pop	{r4, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	e000ed00 	.word	0xe000ed00
 800087c:	40007000 	.word	0x40007000
 8000880:	fffff9fc 	.word	0xfffff9fc

08000884 <alp_proc>:




#ifdef EXTF_alp_proc
ot_bool alp_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	0005      	movs	r5, r0
 8000888:	000c      	movs	r4, r1
    };

    ot_u8 alp_handle;

    // Always flush payload length of output before any data is written
    alp->outrec.plength = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	70c3      	strb	r3, [r0, #3]

    /// <LI> IDs in range 0-to-ALP_FUNCTIONS are standardized, or psuedo-standardized </LI>
    /// <LI> IDs in range 128-to-(128+ALP_API) are mapped OTAPI functions </LI>
    /// <LI> IDs outside this range get pushed to ALP_EXT </LI>
    //alp_handle = alp->inq->getcursor[2];
    alp_handle = INREC(alp, ID);
 800088e:	2102      	movs	r1, #2
 8000890:	4249      	negs	r1, r1
 8000892:	6880      	ldr	r0, [r0, #8]
 8000894:	f006 fbda 	bl	800704c <q_getcursor_val>

    //ASAPI section
    if (alp_handle > 7) {
 8000898:	2807      	cmp	r0, #7
 800089a:	d900      	bls.n	800089e <alp_proc+0x1a>
        alp_handle = 8;
 800089c:	2008      	movs	r0, #8
    }
    alp_handle = (ot_u8)proc[alp_handle](alp, user_id);
 800089e:	0080      	lsls	r0, r0, #2
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <alp_proc+0x30>)
 80008a2:	58c3      	ldr	r3, [r0, r3]
 80008a4:	0021      	movs	r1, r4
 80008a6:	0028      	movs	r0, r5
 80008a8:	4798      	blx	r3
    /// If the output bookmark is non-Null, there is output chunking.  Else,
    /// the output message is complete (ended)
    ///@todo Bookmarked has been refactored, and is not currently supported... sort it.
    //alp->OUTREC(_FLAGS)   &= ~ALP_FLAG_ME;
    //alp->OUTREC(_FLAGS)   |= (alp->BOOKMARK_OUT) ? ALP_FLAG_CF : ALP_FLAG_ME;
    alp->OUTREC(FLAGS)   |= ALP_FLAG_ME;   //Temporary fix
 80008aa:	78ab      	ldrb	r3, [r5, #2]
 80008ac:	2240      	movs	r2, #64	; 0x40
 80008ae:	4313      	orrs	r3, r2
 80008b0:	70ab      	strb	r3, [r5, #2]

    // Return True (atomic) or False (non-atomic)
    return (ot_bool)alp_handle;
}
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	0800a424 	.word	0x0800a424

080008b8 <sub_release_record>:
    }
}


static void sub_release_record(ot_queue* appq) {
    appq->front    += appq->front[1] + 4;
 80008b8:	68c3      	ldr	r3, [r0, #12]
 80008ba:	785a      	ldrb	r2, [r3, #1]
 80008bc:	3204      	adds	r2, #4
 80008be:	189b      	adds	r3, r3, r2
 80008c0:	60c3      	str	r3, [r0, #12]
    appq->getcursor = appq->front;
 80008c2:	6043      	str	r3, [r0, #4]
}
 80008c4:	4770      	bx	lr
	...

080008c8 <sub_q_purge>:
static void sub_q_purge(ot_queue* q) {
 80008c8:	b510      	push	{r4, lr}
    if (q_length(q) <= 0) {
 80008ca:	f006 fbc2 	bl	8007052 <q_length>
 80008ce:	2800      	cmp	r0, #0
 80008d0:	dd00      	ble.n	80008d4 <sub_q_purge+0xc>
}
 80008d2:	bd10      	pop	{r4, pc}
        q_init(&srv.q, srv_buffer, 256);
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <sub_q_purge+0x1c>)
 80008d8:	0052      	lsls	r2, r2, #1
 80008da:	4903      	ldr	r1, [pc, #12]	; (80008e8 <sub_q_purge+0x20>)
 80008dc:	3008      	adds	r0, #8
 80008de:	f006 fbe7 	bl	80070b0 <q_init>
}
 80008e2:	e7f6      	b.n	80008d2 <sub_q_purge+0xa>
 80008e4:	200001c8 	.word	0x200001c8
 80008e8:	200001e4 	.word	0x200001e4

080008ec <sub_retrieve_record>:


static ot_u8* sub_retrieve_record(alp_record* apprec, ot_queue* appq) {
 80008ec:	b510      	push	{r4, lr}
 80008ee:	000c      	movs	r4, r1
    memcpy((ot_u8*)&apprec->flags, appq->getcursor, 4);
 80008f0:	2204      	movs	r2, #4
 80008f2:	6849      	ldr	r1, [r1, #4]
 80008f4:	f008 f824 	bl	8008940 <ot_memcpy>
    appq->getcursor    += 4;
 80008f8:	6863      	ldr	r3, [r4, #4]
 80008fa:	3304      	adds	r3, #4
 80008fc:	6063      	str	r3, [r4, #4]
    return appq->front;
 80008fe:	68e0      	ldr	r0, [r4, #12]
}
 8000900:	bd10      	pop	{r4, pc}

08000902 <sub_check_more_records>:

static ot_u8 sub_check_more_records(ot_queue* appq) {
 8000902:	b510      	push	{r4, lr}
    return (q_span(appq) > 0);
 8000904:	f006 fbaa 	bl	800705c <q_span>
 8000908:	17c3      	asrs	r3, r0, #31
 800090a:	1a18      	subs	r0, r3, r0
 800090c:	0fc0      	lsrs	r0, r0, #31
}
 800090e:	bd10      	pop	{r4, pc}

08000910 <sub_test_stream>:
ot_int sub_test_stream(ot_u8* msg, ot_u8 cmd, ot_u8 ext) {
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	b082      	sub	sp, #8
    test_len    = base_std[cmd&31];
 8000914:	231f      	movs	r3, #31
 8000916:	400b      	ands	r3, r1
 8000918:	4c19      	ldr	r4, [pc, #100]	; (8000980 <sub_test_stream+0x70>)
 800091a:	5ce3      	ldrb	r3, [r4, r3]
    test_len   += ext_std[(ext>>5) & 3];
 800091c:	0956      	lsrs	r6, r2, #5
 800091e:	2503      	movs	r5, #3
 8000920:	4035      	ands	r5, r6
 8000922:	1964      	adds	r4, r4, r5
 8000924:	2520      	movs	r5, #32
 8000926:	5d64      	ldrb	r4, [r4, r5]
 8000928:	191b      	adds	r3, r3, r4
    msg_curs    = msg + test_len;
 800092a:	18c3      	adds	r3, r0, r3
    if (cmd & ASAPI_CMD_DLLS) {
 800092c:	074c      	lsls	r4, r1, #29
 800092e:	d504      	bpl.n	800093a <sub_test_stream+0x2a>
        test_len    = 2 + ((msg_curs[0] == 0) << 4);
 8000930:	781c      	ldrb	r4, [r3, #0]
 8000932:	2c00      	cmp	r4, #0
 8000934:	d113      	bne.n	800095e <sub_test_stream+0x4e>
 8000936:	3412      	adds	r4, #18
        msg_curs   += test_len;  
 8000938:	191b      	adds	r3, r3, r4
    if (cmd & ASAPI_CMD_ANYCAST) {
 800093a:	078c      	lsls	r4, r1, #30
 800093c:	d41a      	bmi.n	8000974 <sub_test_stream+0x64>
    if (ext & ASAPI_EXT_UDP) {
 800093e:	0692      	lsls	r2, r2, #26
 8000940:	d509      	bpl.n	8000956 <sub_test_stream+0x46>
        ((ot_u8*)&test_len)[UPPER]  = msg_curs[0];
 8000942:	7819      	ldrb	r1, [r3, #0]
 8000944:	466a      	mov	r2, sp
 8000946:	71d1      	strb	r1, [r2, #7]
        ((ot_u8*)&test_len)[LOWER]  = msg_curs[1];
 8000948:	7859      	ldrb	r1, [r3, #1]
 800094a:	7191      	strb	r1, [r2, #6]
        ((ot_u8*)&test_len)[UPPER]  = msg_curs[0];
 800094c:	3206      	adds	r2, #6
        test_len                   += ASAPI_UDP_SIZE;
 800094e:	8812      	ldrh	r2, [r2, #0]
 8000950:	3204      	adds	r2, #4
 8000952:	b292      	uxth	r2, r2
        msg_curs                   += test_len;
 8000954:	189b      	adds	r3, r3, r2
    return (ot_int)(msg_curs - msg);
 8000956:	1a18      	subs	r0, r3, r0
 8000958:	b200      	sxth	r0, r0
}
 800095a:	b002      	add	sp, #8
 800095c:	bd70      	pop	{r4, r5, r6, pc}
        test_len    = 2 + ((msg_curs[0] == 0) << 4);
 800095e:	2402      	movs	r4, #2
 8000960:	e7ea      	b.n	8000938 <sub_test_stream+0x28>
        test_len    = (msg_curs[0] & 0x80) ? msg_curs[1]<<1 : msg_curs[1];
 8000962:	785c      	ldrb	r4, [r3, #1]
 8000964:	0064      	lsls	r4, r4, #1
        test_len   += 2;
 8000966:	3402      	adds	r4, #2
        msg_curs   += test_len;
 8000968:	191b      	adds	r3, r3, r4
 800096a:	240b      	movs	r4, #11
 800096c:	400c      	ands	r4, r1
            cmd = 0;
 800096e:	2100      	movs	r1, #0
        if ((cmd & (ASAPI_CMD_MULTICAST+ASAPI_CMD_INIT)) == (ASAPI_CMD_MULTICAST+ASAPI_CMD_INIT)) {
 8000970:	2c0b      	cmp	r4, #11
 8000972:	d1e4      	bne.n	800093e <sub_test_stream+0x2e>
        test_len    = (msg_curs[0] & 0x80) ? msg_curs[1]<<1 : msg_curs[1];
 8000974:	2400      	movs	r4, #0
 8000976:	571c      	ldrsb	r4, [r3, r4]
 8000978:	2c00      	cmp	r4, #0
 800097a:	dbf2      	blt.n	8000962 <sub_test_stream+0x52>
 800097c:	785c      	ldrb	r4, [r3, #1]
 800097e:	e7f2      	b.n	8000966 <sub_test_stream+0x56>
 8000980:	0800a448 	.word	0x0800a448

08000984 <asapi_init_srv>:
void asapi_init_srv() {
 8000984:	b510      	push	{r4, lr}
    srv.alp         = NULL;
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <asapi_init_srv+0x18>)
 8000988:	2300      	movs	r3, #0
 800098a:	6003      	str	r3, [r0, #0]
    q_init(&srv.q, srv_buffer, 256);
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	3008      	adds	r0, #8
 8000990:	0052      	lsls	r2, r2, #1
 8000992:	4903      	ldr	r1, [pc, #12]	; (80009a0 <asapi_init_srv+0x1c>)
 8000994:	f006 fb8c 	bl	80070b0 <q_init>
}
 8000998:	bd10      	pop	{r4, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	200001c8 	.word	0x200001c8
 80009a0:	200001e4 	.word	0x200001e4

080009a4 <sub_stop_srv>:
static void sub_stop_srv() {
 80009a4:	b510      	push	{r4, lr}
    session_app_purge(&asapi_applet);
 80009a6:	4803      	ldr	r0, [pc, #12]	; (80009b4 <sub_stop_srv+0x10>)
 80009a8:	f005 f98a 	bl	8005cc0 <session_app_purge>
    asapi_init_srv();
 80009ac:	f7ff ffea 	bl	8000984 <asapi_init_srv>
}
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	08000a85 	.word	0x08000a85

080009b8 <sub_start_session>:





static ot_int sub_start_session(alp_tmpl* alp) {
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ba:	b087      	sub	sp, #28
    alp_record      rec;
    advert_tmpl     adv;

    /// 1. Start with a blank session creation template.  It will get updated
    ///    later, either in the advertising setup or the applet itself.
    memset((ot_u8*)&s_tmpl, 0, sizeof(session_tmpl));
 80009bc:	2206      	movs	r2, #6
 80009be:	2100      	movs	r1, #0
 80009c0:	a804      	add	r0, sp, #16
 80009c2:	f007 ffcb 	bl	800895c <ot_memset>
    ///      advertising request that follows.
    
    /// 2. The first record must be an initialization record.  Advertising can
    ///    be used with init.type_code = 1.  With init.type_code = 0, no 
    ///    advertising is performed, simply a following request is processed.
    sub_retrieve_record(&rec, &srv.q);
 80009c6:	492d      	ldr	r1, [pc, #180]	; (8000a7c <sub_start_session+0xc4>)
 80009c8:	ac03      	add	r4, sp, #12
 80009ca:	3108      	adds	r1, #8
 80009cc:	0020      	movs	r0, r4
 80009ce:	f7ff ff8d 	bl	80008ec <sub_retrieve_record>
    if ((rec.cmd & ASAPI_CMD_INIT) == 0) {
 80009d2:	78e2      	ldrb	r2, [r4, #3]
 80009d4:	0713      	lsls	r3, r2, #28
 80009d6:	d549      	bpl.n	8000a6c <sub_start_session+0xb4>
    }
    
    /// 3. If the message contains INIT, there are no further templates in the
    ///    message (by design).  Load the INIT template and then release this
    ///    ASAPI record.
    srv.q.getcursor+= (rec.cmd & ASAPI_CMD_EXT) ? 3 : 2;    //Ext byte & transid
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <sub_start_session+0xc4>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0692      	lsls	r2, r2, #26
 80009de:	d53b      	bpl.n	8000a58 <sub_start_session+0xa0>
 80009e0:	2203      	movs	r2, #3
 80009e2:	4c26      	ldr	r4, [pc, #152]	; (8000a7c <sub_start_session+0xc4>)
 80009e4:	189b      	adds	r3, r3, r2
 80009e6:	60e3      	str	r3, [r4, #12]
    type_code       = q_readbyte(&srv.q);
 80009e8:	3408      	adds	r4, #8
 80009ea:	0020      	movs	r0, r4
 80009ec:	f006 fbad 	bl	800714a <q_readbyte>
 80009f0:	0006      	movs	r6, r0
    s_tmpl.flags    = q_readbyte(&srv.q);       // link_flags byte
 80009f2:	0020      	movs	r0, r4
 80009f4:	f006 fba9 	bl	800714a <q_readbyte>
 80009f8:	af04      	add	r7, sp, #16
 80009fa:	7138      	strb	r0, [r7, #4]
    s_tmpl.flagmask = (1<<3) | (1<<4);          // RS coding flag & VID flag    ///@todo VID usage might need extra attention
 80009fc:	2318      	movs	r3, #24
 80009fe:	717b      	strb	r3, [r7, #5]
    adv.duty_off    = q_readbyte(&srv.q);
 8000a00:	0020      	movs	r0, r4
 8000a02:	f006 fba2 	bl	800714a <q_readbyte>
 8000a06:	ad01      	add	r5, sp, #4
 8000a08:	7028      	strb	r0, [r5, #0]
    adv.duty_on     = q_readbyte(&srv.q);
 8000a0a:	0020      	movs	r0, r4
 8000a0c:	f006 fb9d 	bl	800714a <q_readbyte>
 8000a10:	7068      	strb	r0, [r5, #1]
    adv.subnet      = q_readbyte(&srv.q);
 8000a12:	0020      	movs	r0, r4
 8000a14:	f006 fb99 	bl	800714a <q_readbyte>
 8000a18:	70a8      	strb	r0, [r5, #2]
    adv.channel     = q_readbyte(&srv.q);
 8000a1a:	0020      	movs	r0, r4
 8000a1c:	f006 fb95 	bl	800714a <q_readbyte>
 8000a20:	70e8      	strb	r0, [r5, #3]
    s_tmpl.channel  = adv.channel;
 8000a22:	7078      	strb	r0, [r7, #1]
    adv.duration    = q_readshort(&srv.q);
 8000a24:	0020      	movs	r0, r4
 8000a26:	f006 fb95 	bl	8007154 <q_readshort>
 8000a2a:	80a8      	strh	r0, [r5, #4]
    sub_release_record(&srv.q);                 // We are done with init record
 8000a2c:	0020      	movs	r0, r4
 8000a2e:	f7ff ff43 	bl	80008b8 <sub_release_record>
    ///    should be performed.
    ///    <LI> 0: no explicity connection initialization, just a "naked 
    ///             request" that is specified in the next record. </LI>
    ///    <LI> 1: Standard advertising followed by request in next record</LI>
    ///    <LI> 255: Strobing, no follow-on request required. </LI>
    if (type_code > 1) {
 8000a32:	2e01      	cmp	r6, #1
 8000a34:	d81e      	bhi.n	8000a74 <sub_start_session+0xbc>
        hb_run_strobe(adv.channel, s_tmpl.flags, adv.subnet, adv.duration, adv.duty_on);
#       endif
        //srv.inprogress = False;
        return -1;
    }
    else if (sub_check_more_records(&srv.q) == 0) {
 8000a36:	4811      	ldr	r0, [pc, #68]	; (8000a7c <sub_start_session+0xc4>)
 8000a38:	3008      	adds	r0, #8
 8000a3a:	f7ff ff62 	bl	8000902 <sub_check_more_records>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d014      	beq.n	8000a6c <sub_start_session+0xb4>
        goto sub_start_session_SESSION_ERR;
    }
    else if (type_code == 0) {  
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d10a      	bne.n	8000a5c <sub_start_session+0xa4>
        // Naked Request
        ///@todo this doesn't seem to work
        active = m2task_immediate(&s_tmpl, &asapi_applet);
 8000a46:	490e      	ldr	r1, [pc, #56]	; (8000a80 <sub_start_session+0xc8>)
 8000a48:	a804      	add	r0, sp, #16
 8000a4a:	f004 fd4f 	bl	80054ec <m2task_immediate>
        active = m2task_advertise(&adv, &s_tmpl, &asapi_applet);
    }
    
    /// 5. Report error if the session stack was too full to initialize the new
    ///    session.
    if (active == NULL) {
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d00a      	beq.n	8000a68 <sub_start_session+0xb0>
    }
    
    ///@note removing this flag, replaced with session_app_isloaded() calls, which
    ///      are direct checks to the underlying session stack, adding reliability.
    //srv.inprogress  = True;
    return 0;
 8000a52:	2000      	movs	r0, #0
    
    sub_start_session_SESSION_ERR:
    sub_stop_srv();
    return ASAPI_ERR_NOSESSION;
}
 8000a54:	b007      	add	sp, #28
 8000a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    srv.q.getcursor+= (rec.cmd & ASAPI_CMD_EXT) ? 3 : 2;    //Ext byte & transid
 8000a58:	2202      	movs	r2, #2
 8000a5a:	e7c2      	b.n	80009e2 <sub_start_session+0x2a>
        active = m2task_advertise(&adv, &s_tmpl, &asapi_applet);
 8000a5c:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <sub_start_session+0xc8>)
 8000a5e:	a904      	add	r1, sp, #16
 8000a60:	a801      	add	r0, sp, #4
 8000a62:	f004 fd49 	bl	80054f8 <m2task_advertise>
 8000a66:	e7f2      	b.n	8000a4e <sub_start_session+0x96>
        return ASAPI_ERR_STACKFULL;
 8000a68:	3009      	adds	r0, #9
 8000a6a:	e7f3      	b.n	8000a54 <sub_start_session+0x9c>
    sub_stop_srv();
 8000a6c:	f7ff ff9a 	bl	80009a4 <sub_stop_srv>
    return ASAPI_ERR_NOSESSION;
 8000a70:	200b      	movs	r0, #11
 8000a72:	e7ef      	b.n	8000a54 <sub_start_session+0x9c>
        return -1;
 8000a74:	2001      	movs	r0, #1
 8000a76:	4240      	negs	r0, r0
 8000a78:	e7ec      	b.n	8000a54 <sub_start_session+0x9c>
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	200001c8 	.word	0x200001c8
 8000a80:	08000a85 	.word	0x08000a85

08000a84 <asapi_applet>:

///@todo make sure that hold periods start getting clocked immedately after
/// valid REQUEST is processed.  This way, the delay period shall be front- 
/// chained from the point following the request transmission.

void asapi_applet(m2session* active) {
 8000a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a86:	46de      	mov	lr, fp
 8000a88:	4657      	mov	r7, sl
 8000a8a:	4646      	mov	r6, r8
 8000a8c:	b5c0      	push	{r6, r7, lr}
 8000a8e:	b090      	sub	sp, #64	; 0x40
 8000a90:	0004      	movs	r4, r0
    ot_u8           scratch;

    /// 1. Preliminary operations
    ///@note check to session_app_isloaded() is redundant, because asapi_applet()
    ///      is only called from the session stack.
    if ((srv.alp == NULL) /*|| (session_app_isloaded(&asapi_applet) == False) */ ) {
 8000a92:	4bd3      	ldr	r3, [pc, #844]	; (8000de0 <asapi_applet+0x35c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d007      	beq.n	8000aaa <asapi_applet+0x26>

    /// 2. Move to the next record that matches this ID.  If it returns False,
    ///    there are no more records of this type, so ASAPI is no longer in
    ///    in progress.
    ///    Else, store the command and move past the header
    if (sub_check_more_records(&srv.q) == 0) {
 8000a9a:	48d1      	ldr	r0, [pc, #836]	; (8000de0 <asapi_applet+0x35c>)
 8000a9c:	3008      	adds	r0, #8
 8000a9e:	f7ff ff30 	bl	8000902 <sub_check_more_records>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d109      	bne.n	8000aba <asapi_applet+0x36>
        sub_stop_srv();
 8000aa6:	f7ff ff7d 	bl	80009a4 <sub_stop_srv>
    return;

    /// 9. the server is closed, yet this applet was invoked.  Scrap it,
    ///    which will cause no communication to occur.
    asapi_applet_CLOSED:
    active->netstate = M2_NETSTATE_SCRAP;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	71e3      	strb	r3, [r4, #7]
}
 8000aae:	b010      	add	sp, #64	; 0x40
 8000ab0:	bc1c      	pop	{r2, r3, r4}
 8000ab2:	4690      	mov	r8, r2
 8000ab4:	469a      	mov	sl, r3
 8000ab6:	46a3      	mov	fp, r4
 8000ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sub_retrieve_record(&rec, &srv.q);
 8000aba:	49c9      	ldr	r1, [pc, #804]	; (8000de0 <asapi_applet+0x35c>)
 8000abc:	3108      	adds	r1, #8
 8000abe:	a80a      	add	r0, sp, #40	; 0x28
 8000ac0:	f7ff ff14 	bl	80008ec <sub_retrieve_record>
    if (active->netstate & M2_NETSTATE_SCRAP) {
 8000ac4:	79e3      	ldrb	r3, [r4, #7]
 8000ac6:	075b      	lsls	r3, r3, #29
 8000ac8:	d500      	bpl.n	8000acc <asapi_applet+0x48>
 8000aca:	e0d6      	b.n	8000c7a <asapi_applet+0x1f6>
    srv.q.getcursor    += ASAPI_TRANSID_SIZE;
 8000acc:	4ac4      	ldr	r2, [pc, #784]	; (8000de0 <asapi_applet+0x35c>)
 8000ace:	68d3      	ldr	r3, [r2, #12]
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	60d3      	str	r3, [r2, #12]
    ext                 = (rec.cmd & ASAPI_CMD_EXT) ? q_readbyte(&srv.q) : 0;
 8000ad4:	ab0a      	add	r3, sp, #40	; 0x28
 8000ad6:	78db      	ldrb	r3, [r3, #3]
 8000ad8:	069b      	lsls	r3, r3, #26
 8000ada:	d412      	bmi.n	8000b02 <asapi_applet+0x7e>
 8000adc:	2300      	movs	r3, #0
 8000ade:	4698      	mov	r8, r3
    if (rec.cmd & ASAPI_CMD_INIT) {
 8000ae0:	ab0a      	add	r3, sp, #40	; 0x28
 8000ae2:	78db      	ldrb	r3, [r3, #3]
 8000ae4:	071b      	lsls	r3, r3, #28
 8000ae6:	d538      	bpl.n	8000b5a <asapi_applet+0xd6>
        if (q_readbyte(&srv.q) != 1) { 
 8000ae8:	48bd      	ldr	r0, [pc, #756]	; (8000de0 <asapi_applet+0x35c>)
 8000aea:	3008      	adds	r0, #8
 8000aec:	f006 fb2d 	bl	800714a <q_readbyte>
 8000af0:	2801      	cmp	r0, #1
 8000af2:	d00c      	beq.n	8000b0e <asapi_applet+0x8a>
            active->netstate = M2_NETSTATE_SCRAP;
 8000af4:	2304      	movs	r3, #4
 8000af6:	71e3      	strb	r3, [r4, #7]
        sub_release_record(&srv.q);
 8000af8:	48b9      	ldr	r0, [pc, #740]	; (8000de0 <asapi_applet+0x35c>)
 8000afa:	3008      	adds	r0, #8
 8000afc:	f7ff fedc 	bl	80008b8 <sub_release_record>
        return;
 8000b00:	e7d5      	b.n	8000aae <asapi_applet+0x2a>
    ext                 = (rec.cmd & ASAPI_CMD_EXT) ? q_readbyte(&srv.q) : 0;
 8000b02:	0010      	movs	r0, r2
 8000b04:	3008      	adds	r0, #8
 8000b06:	f006 fb20 	bl	800714a <q_readbyte>
 8000b0a:	4680      	mov	r8, r0
 8000b0c:	e7e8      	b.n	8000ae0 <asapi_applet+0x5c>
            active->netstate    = (M2_NETFLAG_BG | M2_NETFLAG_STREAM | M2_NETSTATE_REQTX | M2_NETSTATE_INIT);
 8000b0e:	23c8      	movs	r3, #200	; 0xc8
 8000b10:	71e3      	strb	r3, [r4, #7]
            active->flags      |= (3<<3) & q_readbyte(&srv.q);      // lc flags
 8000b12:	4eb3      	ldr	r6, [pc, #716]	; (8000de0 <asapi_applet+0x35c>)
 8000b14:	0035      	movs	r5, r6
 8000b16:	3508      	adds	r5, #8
 8000b18:	0028      	movs	r0, r5
 8000b1a:	f006 fb16 	bl	800714a <q_readbyte>
 8000b1e:	2318      	movs	r3, #24
 8000b20:	4003      	ands	r3, r0
 8000b22:	7ae0      	ldrb	r0, [r4, #11]
 8000b24:	4318      	orrs	r0, r3
 8000b26:	72e0      	strb	r0, [r4, #11]
            srv.q.getcursor    += 2;                                // go past duty-cycle flags (not supported)
 8000b28:	68f3      	ldr	r3, [r6, #12]
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	60f3      	str	r3, [r6, #12]
            active->subnet      = q_readbyte(&srv.q);
 8000b2e:	0028      	movs	r0, r5
 8000b30:	f006 fb0b 	bl	800714a <q_readbyte>
 8000b34:	72a0      	strb	r0, [r4, #10]
            active->channel     = q_readbyte(&srv.q);
 8000b36:	0028      	movs	r0, r5
 8000b38:	f006 fb07 	bl	800714a <q_readbyte>
 8000b3c:	71a0      	strb	r0, [r4, #6]
            adv_duration        = q_readshort(&srv.q);
 8000b3e:	0028      	movs	r0, r5
 8000b40:	f006 fb08 	bl	8007154 <q_readshort>
 8000b44:	0005      	movs	r5, r0
            dll_set_defaults(active);
 8000b46:	0020      	movs	r0, r4
 8000b48:	f004 faee 	bl	8005128 <dll_set_defaults>
            active = session_extend(&asapi_applet, adv_duration, active->channel, M2_NETSTATE_REQTX);
 8000b4c:	79a2      	ldrb	r2, [r4, #6]
 8000b4e:	2300      	movs	r3, #0
 8000b50:	0029      	movs	r1, r5
 8000b52:	48a4      	ldr	r0, [pc, #656]	; (8000de4 <asapi_applet+0x360>)
 8000b54:	f005 f888 	bl	8005c68 <session_extend>
 8000b58:	e7ce      	b.n	8000af8 <asapi_applet+0x74>
    active->subnet  = q_readbyte(&srv.q);
 8000b5a:	4ea1      	ldr	r6, [pc, #644]	; (8000de0 <asapi_applet+0x35c>)
 8000b5c:	0035      	movs	r5, r6
 8000b5e:	3508      	adds	r5, #8
 8000b60:	0028      	movs	r0, r5
 8000b62:	f006 faf2 	bl	800714a <q_readbyte>
 8000b66:	72a0      	strb	r0, [r4, #10]
    active->channel = q_readbyte(&srv.q);   // req channel
 8000b68:	0028      	movs	r0, r5
 8000b6a:	f006 faee 	bl	800714a <q_readbyte>
 8000b6e:	71a0      	strb	r0, [r4, #6]
    dialog.chanlist = srv.q.getcursor;
 8000b70:	68f3      	ldr	r3, [r6, #12]
 8000b72:	ae0e      	add	r6, sp, #56	; 0x38
 8000b74:	930f      	str	r3, [sp, #60]	; 0x3c
    scratch         = q_readbyte(&srv.q);   // resp channel
 8000b76:	0028      	movs	r0, r5
 8000b78:	f006 fae7 	bl	800714a <q_readbyte>
    dialog.channels = (scratch != active->channel);
 8000b7c:	79a3      	ldrb	r3, [r4, #6]
 8000b7e:	1a18      	subs	r0, r3, r0
 8000b80:	1e43      	subs	r3, r0, #1
 8000b82:	4198      	sbcs	r0, r3
 8000b84:	7070      	strb	r0, [r6, #1]
    dialog.timeout  = q_readbyte(&srv.q);   // timeout code
 8000b86:	0028      	movs	r0, r5
 8000b88:	f006 fadf 	bl	800714a <q_readbyte>
 8000b8c:	7030      	strb	r0, [r6, #0]
    next_wait       = q_readshort(&srv.q);
 8000b8e:	0028      	movs	r0, r5
 8000b90:	f006 fae0 	bl	8007154 <q_readshort>
 8000b94:	0002      	movs	r2, r0
 8000b96:	9001      	str	r0, [sp, #4]
    active->flags  |= (next_wait == 0) << 7;          // M2_FLAG_LISTEN
 8000b98:	230b      	movs	r3, #11
 8000b9a:	56e3      	ldrsb	r3, [r4, r3]
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d000      	beq.n	8000ba2 <asapi_applet+0x11e>
 8000ba0:	e07e      	b.n	8000ca0 <asapi_applet+0x21c>
 8000ba2:	3a80      	subs	r2, #128	; 0x80
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	72e3      	strb	r3, [r4, #11]
    if (rec.cmd & ASAPI_CMD_DLLS) {
 8000baa:	aa0a      	add	r2, sp, #40	; 0x28
 8000bac:	78d2      	ldrb	r2, [r2, #3]
 8000bae:	0752      	lsls	r2, r2, #29
 8000bb0:	d478      	bmi.n	8000ca4 <asapi_applet+0x220>
        addressing   = (rec.cmd & ASAPI_CMD_ADDRMASK);
 8000bb2:	ab0a      	add	r3, sp, #40	; 0x28
 8000bb4:	78db      	ldrb	r3, [r3, #3]
        if (addressing == ASAPI_CMD_UNICAST) {
 8000bb6:	079b      	lsls	r3, r3, #30
 8000bb8:	d100      	bne.n	8000bbc <asapi_applet+0x138>
 8000bba:	e084      	b.n	8000cc6 <asapi_applet+0x242>
            addressing          = ADDR_broadcast;
 8000bbc:	2001      	movs	r0, #1
        routing.hop_code    = 0;    //override hop code value
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	aa02      	add	r2, sp, #8
 8000bc2:	7013      	strb	r3, [r2, #0]
        otapi_open_request((ADDR_Type)addressing, &routing);
 8000bc4:	0011      	movs	r1, r2
 8000bc6:	f003 fcf7 	bl	80045b8 <otapi_open_request>
    if (rec.cmd & ASAPI_CMD_FILECOMP) {
 8000bca:	ab0a      	add	r3, sp, #40	; 0x28
 8000bcc:	78db      	ldrb	r3, [r3, #3]
 8000bce:	079b      	lsls	r3, r3, #30
 8000bd0:	d500      	bpl.n	8000bd4 <asapi_applet+0x150>
 8000bd2:	e094      	b.n	8000cfe <asapi_applet+0x27a>
    scratch = 0;
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	2540      	movs	r5, #64	; 0x40
 8000bd8:	4643      	mov	r3, r8
 8000bda:	401d      	ands	r5, r3
    if (ext & ASAPI_EXT_FILECALL) {
 8000bdc:	d000      	beq.n	8000be0 <asapi_applet+0x15c>
 8000bde:	e09b      	b.n	8000d18 <asapi_applet+0x294>
    else if (ext & ASAPI_EXT_UDP) {
 8000be0:	069b      	lsls	r3, r3, #26
 8000be2:	d501      	bpl.n	8000be8 <asapi_applet+0x164>
        scratch |= (1<<4);
 8000be4:	2310      	movs	r3, #16
 8000be6:	431e      	orrs	r6, r3
        cmd.type        = m2tt_lut[(rec.cmd & ASAPI_CMD_ADDRMASK)];
 8000be8:	af0a      	add	r7, sp, #40	; 0x28
 8000bea:	78fb      	ldrb	r3, [r7, #3]
 8000bec:	2203      	movs	r2, #3
 8000bee:	4692      	mov	sl, r2
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	4a7d      	ldr	r2, [pc, #500]	; (8000de8 <asapi_applet+0x364>)
 8000bf4:	18d3      	adds	r3, r2, r3
 8000bf6:	2124      	movs	r1, #36	; 0x24
 8000bf8:	5c5b      	ldrb	r3, [r3, r1]
 8000bfa:	a902      	add	r1, sp, #8
 8000bfc:	700b      	strb	r3, [r1, #0]
        cmd.opcode      = opcode_lut[scratch];
 8000bfe:	1996      	adds	r6, r2, r6
 8000c00:	2328      	movs	r3, #40	; 0x28
 8000c02:	5cf3      	ldrb	r3, [r6, r3]
 8000c04:	704b      	strb	r3, [r1, #1]
        cmd.extension   = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	708b      	strb	r3, [r1, #2]
        otapi_put_command_tmpl(&local_status, &cmd);
 8000c0a:	331e      	adds	r3, #30
 8000c0c:	468c      	mov	ip, r1
 8000c0e:	4463      	add	r3, ip
 8000c10:	469b      	mov	fp, r3
 8000c12:	0018      	movs	r0, r3
 8000c14:	f003 fd04 	bl	8004620 <otapi_put_command_tmpl>
        otapi_put_dialog_tmpl(&status, &dialog);
 8000c18:	261f      	movs	r6, #31
 8000c1a:	ab02      	add	r3, sp, #8
 8000c1c:	469c      	mov	ip, r3
 8000c1e:	4466      	add	r6, ip
 8000c20:	a90e      	add	r1, sp, #56	; 0x38
 8000c22:	0030      	movs	r0, r6
 8000c24:	f003 fd3c 	bl	80046a0 <otapi_put_dialog_tmpl>
        status &= local_status;
 8000c28:	7832      	ldrb	r2, [r6, #0]
 8000c2a:	465b      	mov	r3, fp
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	7033      	strb	r3, [r6, #0]
    if ((rec.cmd & ASAPI_CMD_ADDRMASK) == ASAPI_CMD_MULTICAST) {
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	4652      	mov	r2, sl
 8000c36:	4013      	ands	r3, r2
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d07a      	beq.n	8000d32 <asapi_applet+0x2ae>
    if (rec.cmd & ASAPI_CMD_LQUERY) {
 8000c3c:	ab0a      	add	r3, sp, #40	; 0x28
 8000c3e:	78db      	ldrb	r3, [r3, #3]
 8000c40:	079b      	lsls	r3, r3, #30
 8000c42:	d500      	bpl.n	8000c46 <asapi_applet+0x1c2>
 8000c44:	e08b      	b.n	8000d5e <asapi_applet+0x2da>
    if (rec.cmd & ASAPI_CMD_FILECOMP) {
 8000c46:	ab0a      	add	r3, sp, #40	; 0x28
 8000c48:	78db      	ldrb	r3, [r3, #3]
 8000c4a:	079b      	lsls	r3, r3, #30
 8000c4c:	d500      	bpl.n	8000c50 <asapi_applet+0x1cc>
 8000c4e:	e09c      	b.n	8000d8a <asapi_applet+0x306>
    if (ext & ASAPI_EXT_FILECALL) {
 8000c50:	2d00      	cmp	r5, #0
 8000c52:	d000      	beq.n	8000c56 <asapi_applet+0x1d2>
 8000c54:	e0aa      	b.n	8000dac <asapi_applet+0x328>
    else if (ext & ASAPI_EXT_UDP) {
 8000c56:	4643      	mov	r3, r8
 8000c58:	069b      	lsls	r3, r3, #26
 8000c5a:	d500      	bpl.n	8000c5e <asapi_applet+0x1da>
 8000c5c:	e0ae      	b.n	8000dbc <asapi_applet+0x338>
    status &= local_status;
 8000c5e:	221f      	movs	r2, #31
 8000c60:	ab02      	add	r3, sp, #8
 8000c62:	469c      	mov	ip, r3
 8000c64:	4462      	add	r2, ip
 8000c66:	7811      	ldrb	r1, [r2, #0]
 8000c68:	231e      	movs	r3, #30
 8000c6a:	4463      	add	r3, ip
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	400b      	ands	r3, r1
 8000c70:	7013      	strb	r3, [r2, #0]
    if (status == 0) {
 8000c72:	d000      	beq.n	8000c76 <asapi_applet+0x1f2>
 8000c74:	e0ae      	b.n	8000dd4 <asapi_applet+0x350>
        active->netstate = M2_NETSTATE_SCRAP;
 8000c76:	3304      	adds	r3, #4
 8000c78:	71e3      	strb	r3, [r4, #7]
    sub_release_record(&srv.q);
 8000c7a:	4859      	ldr	r0, [pc, #356]	; (8000de0 <asapi_applet+0x35c>)
 8000c7c:	3008      	adds	r0, #8
 8000c7e:	f7ff fe1b 	bl	80008b8 <sub_release_record>
    if (active->netstate & M2_NETSTATE_SCRAP) {
 8000c82:	79e3      	ldrb	r3, [r4, #7]
 8000c84:	075b      	lsls	r3, r3, #29
 8000c86:	d500      	bpl.n	8000c8a <asapi_applet+0x206>
 8000c88:	e0a7      	b.n	8000dda <asapi_applet+0x356>
    else if (rec.cmd & ASAPI_CMD_HOLDOPEN) {
 8000c8a:	ab0a      	add	r3, sp, #40	; 0x28
 8000c8c:	78db      	ldrb	r3, [r3, #3]
 8000c8e:	065b      	lsls	r3, r3, #25
 8000c90:	d400      	bmi.n	8000c94 <asapi_applet+0x210>
 8000c92:	e70c      	b.n	8000aae <asapi_applet+0x2a>
        session_continue(active->applet, M2_NETSTATE_REQTX, next_wait);
 8000c94:	6820      	ldr	r0, [r4, #0]
 8000c96:	9a01      	ldr	r2, [sp, #4]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	f005 f861 	bl	8005d60 <session_continue>
 8000c9e:	e706      	b.n	8000aae <asapi_applet+0x2a>
    active->flags  |= (next_wait == 0) << 7;          // M2_FLAG_LISTEN
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e77f      	b.n	8000ba4 <asapi_applet+0x120>
        active->flags  |= M2_FLAG_DLLS;
 8000ca4:	2240      	movs	r2, #64	; 0x40
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	72e3      	strb	r3, [r4, #11]
        active->extra   = q_readbyte(&srv.q);           // Key-Index to use for encryption
 8000caa:	4e4d      	ldr	r6, [pc, #308]	; (8000de0 <asapi_applet+0x35c>)
 8000cac:	3608      	adds	r6, #8
 8000cae:	0030      	movs	r0, r6
 8000cb0:	f006 fa4b 	bl	800714a <q_readbyte>
 8000cb4:	7220      	strb	r0, [r4, #8]
        active->extra  |= (q_readbyte(&srv.q) << 7);    // User=1, Root=0
 8000cb6:	0030      	movs	r0, r6
 8000cb8:	f006 fa47 	bl	800714a <q_readbyte>
 8000cbc:	01c3      	lsls	r3, r0, #7
 8000cbe:	7a20      	ldrb	r0, [r4, #8]
 8000cc0:	4318      	orrs	r0, r3
 8000cc2:	7220      	strb	r0, [r4, #8]
 8000cc4:	e775      	b.n	8000bb2 <asapi_applet+0x12e>
            routing.hop_code    = q_readbyte(&srv.q);
 8000cc6:	4e46      	ldr	r6, [pc, #280]	; (8000de0 <asapi_applet+0x35c>)
 8000cc8:	3608      	adds	r6, #8
 8000cca:	0030      	movs	r0, r6
 8000ccc:	f006 fa3d 	bl	800714a <q_readbyte>
 8000cd0:	ab02      	add	r3, sp, #8
 8000cd2:	7018      	strb	r0, [r3, #0]
            routing.hop_ext     = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	aa02      	add	r2, sp, #8
 8000cd8:	7053      	strb	r3, [r2, #1]
            routing.dlog.length = q_readbyte(&srv.q);
 8000cda:	0030      	movs	r0, r6
 8000cdc:	f006 fa35 	bl	800714a <q_readbyte>
 8000ce0:	ab02      	add	r3, sp, #8
 8000ce2:	7118      	strb	r0, [r3, #4]
            routing.dlog.value  = q_markbyte(&srv.q, routing.dlog.length);
 8000ce4:	b201      	sxth	r1, r0
 8000ce6:	0030      	movs	r0, r6
 8000ce8:	f006 f9fb 	bl	80070e2 <q_markbyte>
 8000cec:	9004      	str	r0, [sp, #16]
            addressing         |= (routing.dlog.length == 2);   // Unicast with VID Target (3)
 8000cee:	ab02      	add	r3, sp, #8
 8000cf0:	7918      	ldrb	r0, [r3, #4]
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4243      	negs	r3, r0
 8000cf6:	4158      	adcs	r0, r3
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	4318      	orrs	r0, r3
 8000cfc:	e75f      	b.n	8000bbe <asapi_applet+0x13a>
        alp_breakdown_isfcomp_tmpl(&srv.q, (void*)&comp);
 8000cfe:	ae0d      	add	r6, sp, #52	; 0x34
 8000d00:	4837      	ldr	r0, [pc, #220]	; (8000de0 <asapi_applet+0x35c>)
 8000d02:	0031      	movs	r1, r6
 8000d04:	3008      	adds	r0, #8
 8000d06:	f006 f89c 	bl	8006e42 <alp_breakdown_isfcomp_tmpl>
        scratch  = (2 | (comp.is_series & 1) << 2);
 8000d0a:	7833      	ldrb	r3, [r6, #0]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	2604      	movs	r6, #4
 8000d10:	401e      	ands	r6, r3
 8000d12:	2302      	movs	r3, #2
 8000d14:	431e      	orrs	r6, r3
 8000d16:	e75e      	b.n	8000bd6 <asapi_applet+0x152>
        alp_breakdown_isfcall_tmpl(&srv.q, (void*)&call);
 8000d18:	af0b      	add	r7, sp, #44	; 0x2c
 8000d1a:	4831      	ldr	r0, [pc, #196]	; (8000de0 <asapi_applet+0x35c>)
 8000d1c:	0039      	movs	r1, r7
 8000d1e:	3008      	adds	r0, #8
 8000d20:	f006 f89e 	bl	8006e60 <alp_breakdown_isfcall_tmpl>
        scratch |= (2 | (call.is_series & 1));
 8000d24:	783a      	ldrb	r2, [r7, #0]
 8000d26:	2301      	movs	r3, #1
 8000d28:	4013      	ands	r3, r2
 8000d2a:	431e      	orrs	r6, r3
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	431e      	orrs	r6, r3
 8000d30:	e75a      	b.n	8000be8 <asapi_applet+0x164>
        alp_breakdown_query_tmpl(&srv.q, (void*)&query);
 8000d32:	482b      	ldr	r0, [pc, #172]	; (8000de0 <asapi_applet+0x35c>)
 8000d34:	a902      	add	r1, sp, #8
 8000d36:	3008      	adds	r0, #8
 8000d38:	f006 f853 	bl	8006de2 <alp_breakdown_query_tmpl>
        otapi_put_query_tmpl(&local_status, &query);
 8000d3c:	261e      	movs	r6, #30
 8000d3e:	ab02      	add	r3, sp, #8
 8000d40:	469c      	mov	ip, r3
 8000d42:	4466      	add	r6, ip
 8000d44:	0019      	movs	r1, r3
 8000d46:	0030      	movs	r0, r6
 8000d48:	f003 fcea 	bl	8004720 <otapi_put_query_tmpl>
        status &= local_status;
 8000d4c:	221f      	movs	r2, #31
 8000d4e:	ab02      	add	r3, sp, #8
 8000d50:	469c      	mov	ip, r3
 8000d52:	4462      	add	r2, ip
 8000d54:	7811      	ldrb	r1, [r2, #0]
 8000d56:	7833      	ldrb	r3, [r6, #0]
 8000d58:	400b      	ands	r3, r1
 8000d5a:	7013      	strb	r3, [r2, #0]
 8000d5c:	e76e      	b.n	8000c3c <asapi_applet+0x1b8>
        alp_breakdown_query_tmpl(&srv.q, (void*)&query);
 8000d5e:	4820      	ldr	r0, [pc, #128]	; (8000de0 <asapi_applet+0x35c>)
 8000d60:	a902      	add	r1, sp, #8
 8000d62:	3008      	adds	r0, #8
 8000d64:	f006 f83d 	bl	8006de2 <alp_breakdown_query_tmpl>
        otapi_put_query_tmpl(&local_status, &query);
 8000d68:	261e      	movs	r6, #30
 8000d6a:	ab02      	add	r3, sp, #8
 8000d6c:	469c      	mov	ip, r3
 8000d6e:	4466      	add	r6, ip
 8000d70:	0019      	movs	r1, r3
 8000d72:	0030      	movs	r0, r6
 8000d74:	f003 fcd4 	bl	8004720 <otapi_put_query_tmpl>
        status &= local_status;
 8000d78:	221f      	movs	r2, #31
 8000d7a:	ab02      	add	r3, sp, #8
 8000d7c:	469c      	mov	ip, r3
 8000d7e:	4462      	add	r2, ip
 8000d80:	7811      	ldrb	r1, [r2, #0]
 8000d82:	7833      	ldrb	r3, [r6, #0]
 8000d84:	400b      	ands	r3, r1
 8000d86:	7013      	strb	r3, [r2, #0]
 8000d88:	e75d      	b.n	8000c46 <asapi_applet+0x1c2>
        otapi_put_isf_comp(&local_status, &comp);
 8000d8a:	261e      	movs	r6, #30
 8000d8c:	ab02      	add	r3, sp, #8
 8000d8e:	469c      	mov	ip, r3
 8000d90:	4466      	add	r6, ip
 8000d92:	a90d      	add	r1, sp, #52	; 0x34
 8000d94:	0030      	movs	r0, r6
 8000d96:	f003 fd03 	bl	80047a0 <otapi_put_isf_comp>
        status &= local_status;
 8000d9a:	221f      	movs	r2, #31
 8000d9c:	ab02      	add	r3, sp, #8
 8000d9e:	469c      	mov	ip, r3
 8000da0:	4462      	add	r2, ip
 8000da2:	7811      	ldrb	r1, [r2, #0]
 8000da4:	7833      	ldrb	r3, [r6, #0]
 8000da6:	400b      	ands	r3, r1
 8000da8:	7013      	strb	r3, [r2, #0]
 8000daa:	e751      	b.n	8000c50 <asapi_applet+0x1cc>
        otapi_put_isf_call(&local_status, &call);
 8000dac:	a90b      	add	r1, sp, #44	; 0x2c
 8000dae:	201e      	movs	r0, #30
 8000db0:	ab02      	add	r3, sp, #8
 8000db2:	469c      	mov	ip, r3
 8000db4:	4460      	add	r0, ip
 8000db6:	f003 fd09 	bl	80047cc <otapi_put_isf_call>
 8000dba:	e750      	b.n	8000c5e <asapi_applet+0x1da>
        alp_breakdown_udp_tmpl(&srv.q, (void*)&udp);
 8000dbc:	4808      	ldr	r0, [pc, #32]	; (8000de0 <asapi_applet+0x35c>)
 8000dbe:	a902      	add	r1, sp, #8
 8000dc0:	3008      	adds	r0, #8
 8000dc2:	f006 f829 	bl	8006e18 <alp_breakdown_udp_tmpl>
        otapi_put_udp_tmpl(&local_status, &udp);
 8000dc6:	a902      	add	r1, sp, #8
 8000dc8:	201e      	movs	r0, #30
 8000dca:	468c      	mov	ip, r1
 8000dcc:	4460      	add	r0, ip
 8000dce:	f003 fd17 	bl	8004800 <otapi_put_udp_tmpl>
 8000dd2:	e744      	b.n	8000c5e <asapi_applet+0x1da>
        otapi_close_request();
 8000dd4:	f003 fc10 	bl	80045f8 <otapi_close_request>
 8000dd8:	e74f      	b.n	8000c7a <asapi_applet+0x1f6>
        sub_stop_srv();
 8000dda:	f7ff fde3 	bl	80009a4 <sub_stop_srv>
 8000dde:	e666      	b.n	8000aae <asapi_applet+0x2a>
 8000de0:	200001c8 	.word	0x200001c8
 8000de4:	08000a85 	.word	0x08000a85
 8000de8:	0800a448 	.word	0x0800a448

08000dec <asapi_open_srv>:
    if (srv.alp == NULL) {
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <asapi_open_srv+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d000      	beq.n	8000df6 <asapi_open_srv+0xa>
}
 8000df4:	4770      	bx	lr
        srv.alp         = alp;
 8000df6:	4b01      	ldr	r3, [pc, #4]	; (8000dfc <asapi_open_srv+0x10>)
 8000df8:	6018      	str	r0, [r3, #0]
}
 8000dfa:	e7fb      	b.n	8000df4 <asapi_open_srv+0x8>
 8000dfc:	200001c8 	.word	0x200001c8

08000e00 <asapi_proc>:
ot_bool asapi_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	46ce      	mov	lr, r9
 8000e04:	b500      	push	{lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	0004      	movs	r4, r0
    if (srv.alp != alp) {
 8000e0a:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <asapi_proc+0x128>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4283      	cmp	r3, r0
 8000e10:	d00b      	beq.n	8000e2a <asapi_proc+0x2a>
        if (srv.alp == NULL) {
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d007      	beq.n	8000e26 <asapi_proc+0x26>
            errcode = ASAPI_ERR_SERVERBUSY;
 8000e16:	2501      	movs	r5, #1
    if (inrec_cmd & ASAPI_CMD_RESPONSE) {
 8000e18:	063b      	lsls	r3, r7, #24
 8000e1a:	d468      	bmi.n	8000eee <asapi_proc+0xee>
}
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	b002      	add	sp, #8
 8000e20:	bc04      	pop	{r2}
 8000e22:	4691      	mov	r9, r2
 8000e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
            asapi_open_srv(alp);
 8000e26:	f7ff ffe1 	bl	8000dec <asapi_open_srv>
    inrec_plen  = INREC(alp, PLEN);
 8000e2a:	2103      	movs	r1, #3
 8000e2c:	4249      	negs	r1, r1
 8000e2e:	68a0      	ldr	r0, [r4, #8]
 8000e30:	f006 f90c 	bl	800704c <q_getcursor_val>
 8000e34:	0005      	movs	r5, r0
    inrec_cmd   = INREC(alp, CMD);
 8000e36:	2101      	movs	r1, #1
 8000e38:	4249      	negs	r1, r1
 8000e3a:	68a0      	ldr	r0, [r4, #8]
 8000e3c:	f006 f906 	bl	800704c <q_getcursor_val>
 8000e40:	0006      	movs	r6, r0
 8000e42:	0007      	movs	r7, r0
    if (inrec_cmd & ASAPI_CMD_STATUS) {
 8000e44:	06c3      	lsls	r3, r0, #27
 8000e46:	d509      	bpl.n	8000e5c <asapi_proc+0x5c>
        if (inrec_cmd & ASAPI_CMD_INIT) {  // KILL
 8000e48:	0703      	lsls	r3, r0, #28
 8000e4a:	d401      	bmi.n	8000e50 <asapi_proc+0x50>
        errcode = ASAPI_ERR_FLUSH;
 8000e4c:	25ff      	movs	r5, #255	; 0xff
 8000e4e:	e7e3      	b.n	8000e18 <asapi_proc+0x18>
            dll_refresh();
 8000e50:	f004 fa6c 	bl	800532c <dll_refresh>
            sub_stop_srv();
 8000e54:	f7ff fda6 	bl	80009a4 <sub_stop_srv>
        errcode = ASAPI_ERR_FLUSH;
 8000e58:	25ff      	movs	r5, #255	; 0xff
 8000e5a:	e7dd      	b.n	8000e18 <asapi_proc+0x18>
    payload             = &alp->inq->getcursor[0];
 8000e5c:	68a3      	ldr	r3, [r4, #8]
 8000e5e:	6858      	ldr	r0, [r3, #4]
    tid.ubyte[UPPER]    = payload[0];
 8000e60:	7801      	ldrb	r1, [r0, #0]
    tid.ubyte[LOWER]    = payload[1];
 8000e62:	7843      	ldrb	r3, [r0, #1]
 8000e64:	0209      	lsls	r1, r1, #8
 8000e66:	430b      	orrs	r3, r1
 8000e68:	466a      	mov	r2, sp
 8000e6a:	8093      	strh	r3, [r2, #4]
    ext_value           = (inrec_cmd & ASAPI_CMD_EXT) ? payload[2] : 0;
 8000e6c:	06b3      	lsls	r3, r6, #26
 8000e6e:	d514      	bpl.n	8000e9a <asapi_proc+0x9a>
 8000e70:	7882      	ldrb	r2, [r0, #2]
    len_check           = sub_test_stream(payload, inrec_cmd, ext_value);
 8000e72:	0031      	movs	r1, r6
 8000e74:	f7ff fd4c 	bl	8000910 <sub_test_stream>
    len_check          -= (ot_int)inrec_plen;
 8000e78:	b2ab      	uxth	r3, r5
 8000e7a:	4699      	mov	r9, r3
 8000e7c:	1ac0      	subs	r0, r0, r3
 8000e7e:	b200      	sxth	r0, r0
    len_check           = (len_check < 0) - (len_check > 0);
 8000e80:	0fc3      	lsrs	r3, r0, #31
 8000e82:	17c5      	asrs	r5, r0, #31
 8000e84:	1a2d      	subs	r5, r5, r0
 8000e86:	0fed      	lsrs	r5, r5, #31
 8000e88:	1b5d      	subs	r5, r3, r5
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	b22b      	sxth	r3, r5
    if (len_check) {
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d005      	beq.n	8000e9e <asapi_proc+0x9e>
        errcode = ASAPI_ERR_BADDATA + len_check;
 8000e92:	b2ed      	uxtb	r5, r5
 8000e94:	3506      	adds	r5, #6
 8000e96:	b2ed      	uxtb	r5, r5
        goto asapi_proc_END;
 8000e98:	e7be      	b.n	8000e18 <asapi_proc+0x18>
    ext_value           = (inrec_cmd & ASAPI_CMD_EXT) ? payload[2] : 0;
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	e7e9      	b.n	8000e72 <asapi_proc+0x72>
    sub_q_purge(&srv.q);
 8000e9e:	4d22      	ldr	r5, [pc, #136]	; (8000f28 <asapi_proc+0x128>)
 8000ea0:	3508      	adds	r5, #8
 8000ea2:	0028      	movs	r0, r5
 8000ea4:	f7ff fd10 	bl	80008c8 <sub_q_purge>
    len_check = 4 + inrec_plen;
 8000ea8:	464b      	mov	r3, r9
 8000eaa:	3304      	adds	r3, #4
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4699      	mov	r9, r3
    if (q_writespace(&srv.q) < len_check) {
 8000eb0:	0028      	movs	r0, r5
 8000eb2:	f006 f8d8 	bl	8007066 <q_writespace>
 8000eb6:	4548      	cmp	r0, r9
 8000eb8:	da01      	bge.n	8000ebe <asapi_proc+0xbe>
        errcode = ASAPI_ERR_STACKFULL;
 8000eba:	2509      	movs	r5, #9
 8000ebc:	e7ac      	b.n	8000e18 <asapi_proc+0x18>
    q_writestring(&srv.q, &alp->inq->getcursor[-4], len_check);
 8000ebe:	68a3      	ldr	r3, [r4, #8]
 8000ec0:	6859      	ldr	r1, [r3, #4]
 8000ec2:	3904      	subs	r1, #4
 8000ec4:	4818      	ldr	r0, [pc, #96]	; (8000f28 <asapi_proc+0x128>)
 8000ec6:	464a      	mov	r2, r9
 8000ec8:	3008      	adds	r0, #8
 8000eca:	f006 f96e 	bl	80071aa <q_writestring>
    if ((inrec_cmd & ASAPI_CMD_HOLDOPEN) == 0) {
 8000ece:	0673      	lsls	r3, r6, #25
 8000ed0:	d501      	bpl.n	8000ed6 <asapi_proc+0xd6>
    ot_u8       errcode     = 0;
 8000ed2:	2500      	movs	r5, #0
 8000ed4:	e7a0      	b.n	8000e18 <asapi_proc+0x18>
        if (session_app_isloaded(&asapi_applet) == False) {
 8000ed6:	4815      	ldr	r0, [pc, #84]	; (8000f2c <asapi_proc+0x12c>)
 8000ed8:	f004 ff08 	bl	8005cec <session_app_isloaded>
 8000edc:	2800      	cmp	r0, #0
 8000ede:	d001      	beq.n	8000ee4 <asapi_proc+0xe4>
    ot_u8       errcode     = 0;
 8000ee0:	2500      	movs	r5, #0
 8000ee2:	e799      	b.n	8000e18 <asapi_proc+0x18>
            errcode = sub_start_session(alp);
 8000ee4:	0020      	movs	r0, r4
 8000ee6:	f7ff fd67 	bl	80009b8 <sub_start_session>
 8000eea:	b2c5      	uxtb	r5, r0
 8000eec:	e794      	b.n	8000e18 <asapi_proc+0x18>
        alp->OUTREC(CMD) |= ASAPI_CMD_STATUS;
 8000eee:	7963      	ldrb	r3, [r4, #5]
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	7163      	strb	r3, [r4, #5]
        alp->OUTREC(PLEN) = 6;
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	70e3      	strb	r3, [r4, #3]
        q_writeshort(alp->outq, tid.ushort);                // Write transaction ID
 8000efa:	466b      	mov	r3, sp
 8000efc:	8899      	ldrh	r1, [r3, #4]
 8000efe:	68e0      	ldr	r0, [r4, #12]
 8000f00:	f006 f8f9 	bl	80070f6 <q_writeshort>
        q_writebyte(alp->outq, 0);                          // RFU byte
 8000f04:	2100      	movs	r1, #0
 8000f06:	68e0      	ldr	r0, [r4, #12]
 8000f08:	f006 f8f0 	bl	80070ec <q_writebyte>
        q_writebyte(alp->outq, errcode);                    // Write Error code
 8000f0c:	0029      	movs	r1, r5
 8000f0e:	68e0      	ldr	r0, [r4, #12]
 8000f10:	f006 f8ec 	bl	80070ec <q_writebyte>
        q_writeshort(alp->outq, q_writespace(&srv.q));      // Space remaining in ALP queue
 8000f14:	68e4      	ldr	r4, [r4, #12]
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <asapi_proc+0x128>)
 8000f18:	3008      	adds	r0, #8
 8000f1a:	f006 f8a4 	bl	8007066 <q_writespace>
 8000f1e:	b281      	uxth	r1, r0
 8000f20:	0020      	movs	r0, r4
 8000f22:	f006 f8e8 	bl	80070f6 <q_writeshort>
 8000f26:	e779      	b.n	8000e1c <asapi_proc+0x1c>
 8000f28:	200001c8 	.word	0x200001c8
 8000f2c:	08000a85 	.word	0x08000a85

08000f30 <sx127x_int_off>:
  * <LI> sx127x_int_clearall() </LI>
  * <LI> sx127x_int_force() </LI>
  * <LI> sx127x_int_turnon() </LI>
  * <LI> sx127x_int_turnoff() </LI>
  */
OT_WEAK void sx127x_int_off() {
 8000f30:	b510      	push	{r4, lr}
    sx127x_int_config(0);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f007 fc86 	bl	8008844 <sx127x_int_config>
}
 8000f38:	bd10      	pop	{r4, pc}
	...

08000f3c <sx127x_int_listen>:
inline void sx127x_iocfg_tx()  {
    sx127x_int_clearall();
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_TX);
}

inline void sx127x_int_listen() {
 8000f3c:	b510      	push	{r4, lr}
    sx127x.imode = MODE_Listen;
 8000f3e:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <sx127x_int_listen+0x10>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_LISTEN);
 8000f44:	2010      	movs	r0, #16
 8000f46:	f007 fc7d 	bl	8008844 <sx127x_int_config>
}
 8000f4a:	bd10      	pop	{r4, pc}
 8000f4c:	20002204 	.word	0x20002204

08000f50 <sx127x_int_rxdata>:

inline void sx127x_int_rxdata() {
 8000f50:	b510      	push	{r4, lr}
    sx127x.imode = MODE_RXData;
 8000f52:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <sx127x_int_rxdata+0x10>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_RXDATA);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <sx127x_int_rxdata+0x14>)
 8000f5a:	f007 fc73 	bl	8008844 <sx127x_int_config>
}
 8000f5e:	bd10      	pop	{r4, pc}
 8000f60:	20002204 	.word	0x20002204
 8000f64:	00002002 	.word	0x00002002

08000f68 <sx127x_int_rxend>:

inline void sx127x_int_rxend() {
 8000f68:	b510      	push	{r4, lr}
    sx127x.imode = MODE_RXData;
 8000f6a:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <sx127x_int_rxend+0x10>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_RXEND);
 8000f70:	2012      	movs	r0, #18
 8000f72:	f007 fc67 	bl	8008844 <sx127x_int_config>
}
 8000f76:	bd10      	pop	{r4, pc}
 8000f78:	20002204 	.word	0x20002204

08000f7c <sx127x_int_csma>:

inline void sx127x_int_csma() {
 8000f7c:	b510      	push	{r4, lr}
    sx127x.imode = MODE_CSMA;
 8000f7e:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <sx127x_int_csma+0x10>)
 8000f80:	2205      	movs	r2, #5
 8000f82:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_CSMA);
 8000f84:	2010      	movs	r0, #16
 8000f86:	f007 fc5d 	bl	8008844 <sx127x_int_config>
}
 8000f8a:	bd10      	pop	{r4, pc}
 8000f8c:	20002204 	.word	0x20002204

08000f90 <sx127x_int_txdata>:

inline void sx127x_int_txdata() {
 8000f90:	b510      	push	{r4, lr}
    sx127x.imode = MODE_TXData;
 8000f92:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <sx127x_int_txdata+0x10>)
 8000f94:	2206      	movs	r2, #6
 8000f96:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_TXDONE);
 8000f98:	2010      	movs	r0, #16
 8000f9a:	f007 fc53 	bl	8008844 <sx127x_int_config>
}
 8000f9e:	bd10      	pop	{r4, pc}
 8000fa0:	20002204 	.word	0x20002204

08000fa4 <sx127x_irq0_isr>:


void sx127x_irq0_isr() {   sx127x_virtual_isr(sx127x.imode);     }
 8000fa4:	b510      	push	{r4, lr}
 8000fa6:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <sx127x_irq0_isr+0xc>)
 8000fa8:	7818      	ldrb	r0, [r3, #0]
 8000faa:	f000 fd53 	bl	8001a54 <sx127x_virtual_isr>
 8000fae:	bd10      	pop	{r4, pc}
 8000fb0:	20002204 	.word	0x20002204

08000fb4 <sx127x_irq1_isr>:
void sx127x_irq1_isr() {   sx127x_virtual_isr(sx127x.imode + 1); }
 8000fb4:	b510      	push	{r4, lr}
 8000fb6:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <sx127x_irq1_isr+0x10>)
 8000fb8:	7818      	ldrb	r0, [r3, #0]
 8000fba:	3001      	adds	r0, #1
 8000fbc:	b2c0      	uxtb	r0, r0
 8000fbe:	f000 fd49 	bl	8001a54 <sx127x_virtual_isr>
 8000fc2:	bd10      	pop	{r4, pc}
 8000fc4:	20002204 	.word	0x20002204

08000fc8 <sx127x_irq3_isr>:
void sx127x_irq2_isr() {   sx127x_virtual_isr(sx127x.imode + 2); }
void sx127x_irq3_isr() {   sx127x_virtual_isr(sx127x.imode + 3); }
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <sx127x_irq3_isr+0x10>)
 8000fcc:	7818      	ldrb	r0, [r3, #0]
 8000fce:	3003      	adds	r0, #3
 8000fd0:	b2c0      	uxtb	r0, r0
 8000fd2:	f000 fd3f 	bl	8001a54 <sx127x_virtual_isr>
 8000fd6:	bd10      	pop	{r4, pc}
 8000fd8:	20002204 	.word	0x20002204

08000fdc <sx127x_check_cadpin>:
//            return;
//        }
//    }
}
*/
ot_bool sx127x_check_cadpin() {
 8000fdc:	b510      	push	{r4, lr}
    return (ot_bool)(sx127x_cadpin_ishigh() != 0);
 8000fde:	f007 fb13 	bl	8008608 <sx127x_cadpin_ishigh>
 8000fe2:	1e43      	subs	r3, r0, #1
 8000fe4:	4198      	sbcs	r0, r3
 8000fe6:	b2c0      	uxtb	r0, r0
}
 8000fe8:	bd10      	pop	{r4, pc}
	...

08000fec <sx127x_read>:
            } while (old_mode != new_mode);
        }
    }
}

ot_u8 sx127x_read(ot_u8 addr) {
 8000fec:	b500      	push	{lr}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	466b      	mov	r3, sp
 8000ff2:	1dda      	adds	r2, r3, #7
 8000ff4:	7010      	strb	r0, [r2, #0]
    sx127x_spibus_io(1, 1, &addr);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f007 fb4f 	bl	800869c <sx127x_spibus_io>
    return sx127x.busrx[0];
 8000ffe:	4b02      	ldr	r3, [pc, #8]	; (8001008 <sx127x_read+0x1c>)
 8001000:	78d8      	ldrb	r0, [r3, #3]
}
 8001002:	b003      	add	sp, #12
 8001004:	bd00      	pop	{pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	20002204 	.word	0x20002204

0800100c <sx127x_mode>:
ot_u8 sx127x_mode() {
 800100c:	b510      	push	{r4, lr}
    return sx127x_read(RFREG_LR_OPMODE) & _OPMODE;
 800100e:	2001      	movs	r0, #1
 8001010:	f7ff ffec 	bl	8000fec <sx127x_read>
 8001014:	2307      	movs	r3, #7
 8001016:	4018      	ands	r0, r3
}
 8001018:	bd10      	pop	{r4, pc}
	...

0800101c <sx127x_burstread>:

void sx127x_burstread(ot_u8 start_addr, ot_u8 length, ot_u8* data) {
 800101c:	b530      	push	{r4, r5, lr}
 800101e:	b083      	sub	sp, #12
 8001020:	000c      	movs	r4, r1
 8001022:	0015      	movs	r5, r2
 8001024:	466b      	mov	r3, sp
 8001026:	1dda      	adds	r2, r3, #7
 8001028:	7010      	strb	r0, [r2, #0]
    sx127x_spibus_io(1, length, &start_addr);
 800102a:	2001      	movs	r0, #1
 800102c:	f007 fb36 	bl	800869c <sx127x_spibus_io>
    memcpy(data, sx127x.busrx, length);
 8001030:	b2a2      	uxth	r2, r4
 8001032:	4903      	ldr	r1, [pc, #12]	; (8001040 <sx127x_burstread+0x24>)
 8001034:	0028      	movs	r0, r5
 8001036:	f007 fc83 	bl	8008940 <ot_memcpy>
}
 800103a:	b003      	add	sp, #12
 800103c:	bd30      	pop	{r4, r5, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	20002207 	.word	0x20002207

08001044 <sx127x_write>:

void sx127x_write(ot_u8 addr, ot_u8 data) {
 8001044:	b500      	push	{lr}
 8001046:	b083      	sub	sp, #12
    ot_u8 cmd[2];
    cmd[0]  = 0x80 | addr;
 8001048:	aa01      	add	r2, sp, #4
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	425b      	negs	r3, r3
 800104e:	4318      	orrs	r0, r3
 8001050:	7010      	strb	r0, [r2, #0]
    cmd[1]  = data;
 8001052:	7051      	strb	r1, [r2, #1]
    sx127x_spibus_io(2, 0, cmd);
 8001054:	2100      	movs	r1, #0
 8001056:	2002      	movs	r0, #2
 8001058:	f007 fb20 	bl	800869c <sx127x_spibus_io>
}
 800105c:	b003      	add	sp, #12
 800105e:	bd00      	pop	{pc}

08001060 <sx127x_iocfg_cad>:
inline void sx127x_iocfg_cad()  {
 8001060:	b510      	push	{r4, lr}
    sx127x_int_clearall();
 8001062:	f007 fbff 	bl	8008864 <sx127x_int_clearall>
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_CAD);
 8001066:	21a1      	movs	r1, #161	; 0xa1
 8001068:	2040      	movs	r0, #64	; 0x40
 800106a:	f7ff ffeb 	bl	8001044 <sx127x_write>
}
 800106e:	bd10      	pop	{r4, pc}

08001070 <sx127x_iocfg_rx>:
inline void sx127x_iocfg_rx()  {
 8001070:	b510      	push	{r4, lr}
    sx127x_int_clearall();
 8001072:	f007 fbf7 	bl	8008864 <sx127x_int_clearall>
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_RX);
 8001076:	2101      	movs	r1, #1
 8001078:	2040      	movs	r0, #64	; 0x40
 800107a:	f7ff ffe3 	bl	8001044 <sx127x_write>
}
 800107e:	bd10      	pop	{r4, pc}

08001080 <sx127x_iocfg_tx>:
inline void sx127x_iocfg_tx()  {
 8001080:	b510      	push	{r4, lr}
    sx127x_int_clearall();
 8001082:	f007 fbef 	bl	8008864 <sx127x_int_clearall>
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_TX);
 8001086:	2140      	movs	r1, #64	; 0x40
 8001088:	2040      	movs	r0, #64	; 0x40
 800108a:	f7ff ffdb 	bl	8001044 <sx127x_write>
}
 800108e:	bd10      	pop	{r4, pc}

08001090 <sx127x_load_defaults>:
void sx127x_load_defaults() {
 8001090:	b510      	push	{r4, lr}
    cursor = (ot_u8*)defaults;
 8001092:	4c05      	ldr	r4, [pc, #20]	; (80010a8 <sx127x_load_defaults+0x18>)
 8001094:	3408      	adds	r4, #8
    while (*cursor != 0) {
 8001096:	e003      	b.n	80010a0 <sx127x_load_defaults+0x10>
        sx127x_write(cursor[0], cursor[1]);
 8001098:	7861      	ldrb	r1, [r4, #1]
 800109a:	f7ff ffd3 	bl	8001044 <sx127x_write>
        cursor += 2;
 800109e:	3402      	adds	r4, #2
    while (*cursor != 0) {
 80010a0:	7820      	ldrb	r0, [r4, #0]
 80010a2:	2800      	cmp	r0, #0
 80010a4:	d1f8      	bne.n	8001098 <sx127x_load_defaults+0x8>
}
 80010a6:	bd10      	pop	{r4, pc}
 80010a8:	0800a490 	.word	0x0800a490

080010ac <sx127x_strobe>:
void sx127x_strobe(ot_u8 new_mode, ot_bool blocking) {
 80010ac:	b570      	push	{r4, r5, r6, lr}
 80010ae:	0005      	movs	r5, r0
    if (!blocking) {
 80010b0:	2900      	cmp	r1, #0
 80010b2:	d01c      	beq.n	80010ee <sx127x_strobe+0x42>
        ot_u8 old_mode = sx127x_mode();
 80010b4:	f7ff ffaa 	bl	800100c <sx127x_mode>
 80010b8:	0004      	movs	r4, r0
        if (old_mode != new_mode) {
 80010ba:	42a8      	cmp	r0, r5
 80010bc:	d01d      	beq.n	80010fa <sx127x_strobe+0x4e>
            sx127x_write(RFREG_LR_OPMODE, _LORAMODE|new_mode);
 80010be:	2180      	movs	r1, #128	; 0x80
 80010c0:	4249      	negs	r1, r1
 80010c2:	4329      	orrs	r1, r5
 80010c4:	b2c9      	uxtb	r1, r1
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff ffbc 	bl	8001044 <sx127x_write>
            wdog = wdog_amount[(new_mode<<1) + (old_mode!=0)];
 80010cc:	006b      	lsls	r3, r5, #1
 80010ce:	1e62      	subs	r2, r4, #1
 80010d0:	4194      	sbcs	r4, r2
 80010d2:	191c      	adds	r4, r3, r4
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <sx127x_strobe+0x64>)
 80010d6:	191c      	adds	r4, r3, r4
 80010d8:	2344      	movs	r3, #68	; 0x44
 80010da:	5ce4      	ldrb	r4, [r4, r3]
                if (--wdog == 0) {
 80010dc:	3c01      	subs	r4, #1
 80010de:	b2a4      	uxth	r4, r4
 80010e0:	2c00      	cmp	r4, #0
 80010e2:	d00b      	beq.n	80010fc <sx127x_strobe+0x50>
                old_mode = sx127x_mode();
 80010e4:	f7ff ff92 	bl	800100c <sx127x_mode>
            } while (old_mode != new_mode);
 80010e8:	4285      	cmp	r5, r0
 80010ea:	d1f7      	bne.n	80010dc <sx127x_strobe+0x30>
 80010ec:	e005      	b.n	80010fa <sx127x_strobe+0x4e>
        sx127x_write(RFREG_LR_OPMODE, _LORAMODE|new_mode);
 80010ee:	3980      	subs	r1, #128	; 0x80
 80010f0:	4301      	orrs	r1, r0
 80010f2:	b2c9      	uxtb	r1, r1
 80010f4:	2001      	movs	r0, #1
 80010f6:	f7ff ffa5 	bl	8001044 <sx127x_write>
}
 80010fa:	bd70      	pop	{r4, r5, r6, pc}
                    sx127x_reset();
 80010fc:	f007 fa8e 	bl	800861c <sx127x_reset>
                    delay_us(400);
 8001100:	20c8      	movs	r0, #200	; 0xc8
 8001102:	0040      	lsls	r0, r0, #1
 8001104:	f007 fbc4 	bl	8008890 <delay_us>
                    dll_init();
 8001108:	f004 f936 	bl	8005378 <dll_init>
                    return;
 800110c:	e7f5      	b.n	80010fa <sx127x_strobe+0x4e>
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	0800a490 	.word	0x0800a490

08001114 <sx127x_burstwrite>:

void sx127x_burstwrite(ot_u8 start_addr, ot_u8 length, ot_u8* cmd_data) {
 8001114:	b570      	push	{r4, r5, r6, lr}
    ot_u8 save;
    cmd_data--;
 8001116:	1e54      	subs	r4, r2, #1
    save        = *cmd_data;
 8001118:	7825      	ldrb	r5, [r4, #0]
    *cmd_data   = 0x80 | start_addr;
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	425b      	negs	r3, r3
 800111e:	4318      	orrs	r0, r3
 8001120:	7020      	strb	r0, [r4, #0]
    sx127x_spibus_io(1+length, 0, cmd_data);
 8001122:	3101      	adds	r1, #1
 8001124:	b2c8      	uxtb	r0, r1
 8001126:	0022      	movs	r2, r4
 8001128:	2100      	movs	r1, #0
 800112a:	f007 fab7 	bl	800869c <sx127x_spibus_io>
    *cmd_data   = save;
 800112e:	7025      	strb	r5, [r4, #0]
}
 8001130:	bd70      	pop	{r4, r5, r6, pc}
	...

08001134 <sx127x_start_counter>:
  * internal timers of the SX127x, we instead use the more reliable interval
  * timer feature of OpenTag.
  */
static ot_u32 macstamp;

void sx127x_start_counter() {
 8001134:	b510      	push	{r4, lr}
    macstamp = systim_chronstamp(NULL);
 8001136:	2000      	movs	r0, #0
 8001138:	f006 ff14 	bl	8007f64 <systim_chronstamp>
 800113c:	4b01      	ldr	r3, [pc, #4]	; (8001144 <sx127x_start_counter+0x10>)
 800113e:	6018      	str	r0, [r3, #0]
}
 8001140:	bd10      	pop	{r4, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	200002e4 	.word	0x200002e4

08001148 <sx127x_stop_counter>:

void sx127x_stop_counter() {
}
 8001148:	4770      	bx	lr
	...

0800114c <sx127x_get_counter>:

ot_u16 sx127x_get_counter() {
 800114c:	b510      	push	{r4, lr}
    ot_u16 value;
    value = dll.counter - (ot_u16)systim_chronstamp(&macstamp);
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <sx127x_get_counter+0x14>)
 8001150:	885c      	ldrh	r4, [r3, #2]
 8001152:	4804      	ldr	r0, [pc, #16]	; (8001164 <sx127x_get_counter+0x18>)
 8001154:	f006 ff06 	bl	8007f64 <systim_chronstamp>
 8001158:	b280      	uxth	r0, r0
 800115a:	1a20      	subs	r0, r4, r0
 800115c:	b280      	uxth	r0, r0
    return value;
}
 800115e:	bd10      	pop	{r4, pc}
 8001160:	20002648 	.word	0x20002648
 8001164:	200002e4 	.word	0x200002e4

08001168 <sx127x_calc_rssi>:


/** Advanced Configuration <BR>
  * ========================================================================<BR>
  */
ot_int sx127x_calc_rssi(ot_u8 encoded_value, ot_s8 packet_snr) {
 8001168:	b510      	push	{r4, lr}
        rssi = -125 + (ot_int)encoded_value;
    
    /// SX1276 has a more elaborate RSSI calculation process
#   elif defined(__SX1276__) || defined(__SX1277__) || defined(__SX1278__) || defined(__SX1279__)
        rssi = (ot_int)encoded_value;
        if (packet_snr < 0) {
 800116a:	2900      	cmp	r1, #0
 800116c:	db07      	blt.n	800117e <sx127x_calc_rssi+0x16>
            rssi += ((ot_int)packet_snr - 2) / 4;
        }
        else {
            rssi = (rssi * 16) / 15;
 800116e:	0100      	lsls	r0, r0, #4
 8001170:	210f      	movs	r1, #15
 8001172:	f7ff f853 	bl	800021c <__divsi3>
 8001176:	b200      	sxth	r0, r0
        }
#       if (RF_PARAM_BAND < 750)
            rssi += -164;
#       else
            rssi += -157;
 8001178:	389d      	subs	r0, #157	; 0x9d
 800117a:	b200      	sxth	r0, r0
#       endif
#   endif
            
    return rssi;
}
 800117c:	bd10      	pop	{r4, pc}
            rssi += ((ot_int)packet_snr - 2) / 4;
 800117e:	1e8b      	subs	r3, r1, #2
 8001180:	17da      	asrs	r2, r3, #31
 8001182:	2103      	movs	r1, #3
 8001184:	4011      	ands	r1, r2
 8001186:	18c9      	adds	r1, r1, r3
 8001188:	1089      	asrs	r1, r1, #2
 800118a:	1808      	adds	r0, r1, r0
 800118c:	e7f4      	b.n	8001178 <sx127x_calc_rssi+0x10>

0800118e <sx127x_calc_rssithr>:
#   else
        rssi_thr = (157 - 140) + input;
#   endif
#   endif
        
    return (ot_u8)rssi_thr;
 800118e:	3011      	adds	r0, #17
 8001190:	b2c0      	uxtb	r0, r0
}
 8001192:	4770      	bx	lr

08001194 <sx127x_clip_txeirp>:
#   define _MIN_DBM_EIRP (((2*2) - RF_HDB_ATTEN) + 80)
#else
#   define _MAX_DBM_EIRP (((14*2) - RF_HDB_ATTEN) + 80)
#   define _MIN_DBM_EIRP (((-1*2) - RF_HDB_ATTEN) + 80)
#endif
    if (input_eirp > _MAX_DBM_EIRP) {
 8001194:	2874      	cmp	r0, #116	; 0x74
 8001196:	d802      	bhi.n	800119e <sx127x_clip_txeirp+0xa>
        input_eirp = _MAX_DBM_EIRP;
    }
    else if (input_eirp < _MIN_DBM_EIRP) {
 8001198:	2855      	cmp	r0, #85	; 0x55
 800119a:	d902      	bls.n	80011a2 <sx127x_clip_txeirp+0xe>
    
    return input_eirp;
    
#   undef _MAX_DBM_EIRP
#   undef _MIN_DBM_EIRP
}
 800119c:	4770      	bx	lr
        input_eirp = _MAX_DBM_EIRP;
 800119e:	2074      	movs	r0, #116	; 0x74
 80011a0:	e7fc      	b.n	800119c <sx127x_clip_txeirp+0x8>
        input_eirp = _MIN_DBM_EIRP;
 80011a2:	2056      	movs	r0, #86	; 0x56
 80011a4:	e7fa      	b.n	800119c <sx127x_clip_txeirp+0x8>

080011a6 <sx127x_set_txpwr>:


void sx127x_set_txpwr(ot_u8 pwr_code) {
 80011a6:	b510      	push	{r4, lr}
/// i.e. eirp_code=0 => -40 dBm, eirp_code=80 => 0 dBm, etc
    ot_int dBm;
    ot_u8 padac;
    
    // get dBm
    dBm = (((ot_int)pwr_code + RF_HDB_ATTEN) >> 1) - 40;
 80011a8:	3004      	adds	r0, #4
 80011aa:	0840      	lsrs	r0, r0, #1
 80011ac:	0003      	movs	r3, r0
 80011ae:	3b28      	subs	r3, #40	; 0x28
#   endif

#elif (defined(__SX1276__) || defined(__SX1277__) || defined(__SX1278__) || defined(__SX1279__))
#   if defined(__SX127x_PABOOST__) && defined(__SX127x_20dBm__)
    // Convert to SX1276/8/9 units (PA Boost on, max 20dBm)
    if (dBm > 17) {
 80011b0:	2b11      	cmp	r3, #17
 80011b2:	dc0e      	bgt.n	80011d2 <sx127x_set_txpwr+0x2c>
        padac   = _PADAC_20DBM_ON;
        dBm    -= 5;
    }
    else {
        padac   = _PADAC_20DBM_OFF;
        dBm    -= 2;
 80011b4:	382a      	subs	r0, #42	; 0x2a
 80011b6:	b204      	sxth	r4, r0
        padac   = _PADAC_20DBM_OFF;
 80011b8:	2184      	movs	r1, #132	; 0x84
    }
    sx127x_write(RFREG_LR_PADAC, padac);
 80011ba:	204d      	movs	r0, #77	; 0x4d
 80011bc:	f7ff ff42 	bl	8001044 <sx127x_write>
    pwr_code = (1<<7) | (7<<4) | ((ot_u8)dBm & 0x0F);
 80011c0:	b2e4      	uxtb	r4, r4
 80011c2:	2110      	movs	r1, #16
 80011c4:	4249      	negs	r1, r1
 80011c6:	4321      	orrs	r1, r4
 80011c8:	b2c9      	uxtb	r1, r1
#	error "Unsupported LoRa device"

#endif

    // Write new PA Table to device
    sx127x_write(RFREG_LR_PACONFIG, pwr_code);
 80011ca:	2009      	movs	r0, #9
 80011cc:	f7ff ff3a 	bl	8001044 <sx127x_write>
}
 80011d0:	bd10      	pop	{r4, pc}
        dBm    -= 5;
 80011d2:	382d      	subs	r0, #45	; 0x2d
 80011d4:	b204      	sxth	r4, r0
        padac   = _PADAC_20DBM_ON;
 80011d6:	2187      	movs	r1, #135	; 0x87
 80011d8:	e7ef      	b.n	80011ba <sx127x_set_txpwr+0x14>
	...

080011dc <sub_initcad>:
    ///@todo why is this commented-out?  Does it matter?
    //dll_offset_rxtimeout();
    rm2_reenter_rx(radio.evtdone);
}

void sub_initcad(void) {
 80011dc:	b510      	push	{r4, lr}
    // Set I/O for CAD detect
    sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);  
 80011de:	21ff      	movs	r1, #255	; 0xff
 80011e0:	2012      	movs	r0, #18
 80011e2:	f7ff ff2f 	bl	8001044 <sx127x_write>
    sx127x_iocfg_cad();
 80011e6:	f7ff ff3b 	bl	8001060 <sx127x_iocfg_cad>
    sx127x_int_listen();
 80011ea:	f7ff fea7 	bl	8000f3c <sx127x_int_listen>
    
    radio.state = RADIO_Listening;
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <sub_initcad+0x28>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
    /// time for CAD->RSSI is dependent on SF and BW
    /// - SF7:500kHZ = 320us
    /// - SF7:125kHZ = 1280us
    //radio_set_mactimer(?);
    
    sx127x_antsw_rx();
 80011f4:	f007 fb1e 	bl	8008834 <sx127x_antsw_rx>
    sx127x_strobe(_OPMODE_CAD, False);  //non-blocking call
 80011f8:	2100      	movs	r1, #0
 80011fa:	2007      	movs	r0, #7
 80011fc:	f7ff ff56 	bl	80010ac <sx127x_strobe>
}
 8001200:	bd10      	pop	{r4, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	200026b8 	.word	0x200026b8

08001208 <radio_init>:
OT_WEAK void radio_init(void) {
 8001208:	b510      	push	{r4, lr}
    rfctl.flags     = 0;
 800120a:	2200      	movs	r2, #0
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <radio_init+0x20>)
 800120e:	705a      	strb	r2, [r3, #1]
    radio.state     = RADIO_Idle;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <radio_init+0x24>)
 8001212:	701a      	strb	r2, [r3, #0]
    radio.evtdone   = &otutils_sig2_null;
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <radio_init+0x28>)
 8001216:	609a      	str	r2, [r3, #8]
    sx127x_init_bus();
 8001218:	f007 fa16 	bl	8008648 <sx127x_init_bus>
    sx127x_load_defaults();
 800121c:	f7ff ff38 	bl	8001090 <sx127x_load_defaults>
    rm2_init();
 8001220:	f004 fc7c 	bl	8005b1c <rm2_init>
}
 8001224:	bd10      	pop	{r4, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	20002644 	.word	0x20002644
 800122c:	200026b8 	.word	0x200026b8
 8001230:	0800721f 	.word	0x0800721f

08001234 <radio_set_mactimer>:
OT_WEAK void radio_set_mactimer(ot_u16 clocks) {
 8001234:	b510      	push	{r4, lr}
 8001236:	0004      	movs	r4, r0
    systim_enable_insertion();
 8001238:	f006 fe72 	bl	8007f20 <systim_enable_insertion>
    systim_set_insertion(clocks);
 800123c:	0020      	movs	r0, r4
 800123e:	f006 fe5b 	bl	8007ef8 <systim_set_insertion>
}
 8001242:	bd10      	pop	{r4, pc}

08001244 <radio_activate_queue>:
    q->options.ubyte[UPPER]    += 1;
 8001244:	78c3      	ldrb	r3, [r0, #3]
 8001246:	3301      	adds	r3, #1
 8001248:	70c3      	strb	r3, [r0, #3]
    q->options.ubyte[LOWER]     = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	7083      	strb	r3, [r0, #2]
}
 800124e:	4770      	bx	lr

08001250 <rm2_clip_txeirp>:
OT_INLINE ot_u8 rm2_clip_txeirp(ot_u8 m2_txeirp) {
 8001250:	b510      	push	{r4, lr}
    return sx127x_clip_txeirp(m2_txeirp & 0x7f);
 8001252:	237f      	movs	r3, #127	; 0x7f
 8001254:	4018      	ands	r0, r3
 8001256:	f7ff ff9d 	bl	8001194 <sx127x_clip_txeirp>
}
 800125a:	bd10      	pop	{r4, pc}

0800125c <rm2_calc_rssithr>:
OT_INLINE ot_u8 rm2_calc_rssithr(ot_u8 m2_rssithr) {
 800125c:	b510      	push	{r4, lr}
    return sx127x_calc_rssithr(m2_rssithr);
 800125e:	f7ff ff96 	bl	800118e <sx127x_calc_rssithr>
}
 8001262:	bd10      	pop	{r4, pc}

08001264 <sub_modemconfig2_baseval>:
    return mdmcfg2[sf_code];
 8001264:	4b01      	ldr	r3, [pc, #4]	; (800126c <sub_modemconfig2_baseval+0x8>)
 8001266:	5c18      	ldrb	r0, [r3, r0]
}
 8001268:	4770      	bx	lr
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	0800a51c 	.word	0x0800a51c

08001270 <rm2_channel_fastcheck>:
    if (radio.flags & RADIO_FLAG_REFRESH) {
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <rm2_channel_fastcheck+0x2c>)
 8001272:	785b      	ldrb	r3, [r3, #1]
 8001274:	07da      	lsls	r2, r3, #31
 8001276:	d407      	bmi.n	8001288 <rm2_channel_fastcheck+0x18>
    if ((chan_id == 0) || (chan_id == phymac[0].channel)) {
 8001278:	2800      	cmp	r0, #0
 800127a:	d00d      	beq.n	8001298 <rm2_channel_fastcheck+0x28>
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <rm2_channel_fastcheck+0x30>)
 800127e:	789b      	ldrb	r3, [r3, #2]
 8001280:	4283      	cmp	r3, r0
 8001282:	d007      	beq.n	8001294 <rm2_channel_fastcheck+0x24>
    return False;
 8001284:	2000      	movs	r0, #0
 8001286:	e004      	b.n	8001292 <rm2_channel_fastcheck+0x22>
        radio.flags ^= RADIO_FLAG_REFRESH;
 8001288:	2201      	movs	r2, #1
 800128a:	4053      	eors	r3, r2
 800128c:	4a03      	ldr	r2, [pc, #12]	; (800129c <rm2_channel_fastcheck+0x2c>)
 800128e:	7053      	strb	r3, [r2, #1]
        return False;
 8001290:	2000      	movs	r0, #0
}
 8001292:	4770      	bx	lr
        return True;
 8001294:	2001      	movs	r0, #1
 8001296:	e7fc      	b.n	8001292 <rm2_channel_fastcheck+0x22>
 8001298:	2001      	movs	r0, #1
 800129a:	e7fa      	b.n	8001292 <rm2_channel_fastcheck+0x22>
 800129c:	200026b8 	.word	0x200026b8
 80012a0:	200026c4 	.word	0x200026c4

080012a4 <rm2_enter_channel>:
OT_WEAK void rm2_enter_channel(ot_u8 old_chan_id, ot_u8 old_tx_eirp) {
 80012a4:	b570      	push	{r4, r5, r6, lr}
 80012a6:	0004      	movs	r4, r0
    if (old_tx_eirp != phymac[0].tx_eirp) {
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <rm2_enter_channel+0x74>)
 80012aa:	7918      	ldrb	r0, [r3, #4]
 80012ac:	4288      	cmp	r0, r1
 80012ae:	d109      	bne.n	80012c4 <rm2_enter_channel+0x20>
    old_chan_id ^= phymac[0].channel;
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <rm2_enter_channel+0x74>)
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	405c      	eors	r4, r3
    if (old_chan_id & 0xF0) {
 80012b6:	220f      	movs	r2, #15
 80012b8:	0021      	movs	r1, r4
 80012ba:	4391      	bics	r1, r2
 80012bc:	d105      	bne.n	80012ca <rm2_enter_channel+0x26>
    if (old_chan_id & 0x0F) {
 80012be:	0723      	lsls	r3, r4, #28
 80012c0:	d111      	bne.n	80012e6 <rm2_enter_channel+0x42>
}
 80012c2:	bd70      	pop	{r4, r5, r6, pc}
        sx127x_set_txpwr( phymac[0].tx_eirp );
 80012c4:	f7ff ff6f 	bl	80011a6 <sx127x_set_txpwr>
 80012c8:	e7f2      	b.n	80012b0 <rm2_enter_channel+0xc>
        ot_u8* detect_regs = detection[phymac[0].channel>>4];
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	4d13      	ldr	r5, [pc, #76]	; (800131c <rm2_enter_channel+0x78>)
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	3504      	adds	r5, #4
 80012d2:	18ed      	adds	r5, r5, r3
        sx127x_write(RFREG_LR_DETECTOPTIMIZE, detect_regs[0]);
 80012d4:	7829      	ldrb	r1, [r5, #0]
 80012d6:	2031      	movs	r0, #49	; 0x31
 80012d8:	f7ff feb4 	bl	8001044 <sx127x_write>
        sx127x_write(RFREG_LR_DETECTIONTHRESHOLD, detect_regs[1]);
 80012dc:	7869      	ldrb	r1, [r5, #1]
 80012de:	2037      	movs	r0, #55	; 0x37
 80012e0:	f7ff feb0 	bl	8001044 <sx127x_write>
 80012e4:	e7eb      	b.n	80012be <rm2_enter_channel+0x1a>
        offset  = (phymac[0].flags > 2) ? 2 : phymac[0].flags;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <rm2_enter_channel+0x74>)
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	1c13      	adds	r3, r2, #0
 80012ec:	2a02      	cmp	r2, #2
 80012ee:	d900      	bls.n	80012f2 <rm2_enter_channel+0x4e>
 80012f0:	2302      	movs	r3, #2
 80012f2:	b2da      	uxtb	r2, r3
        offset *= (15 * FREQ_SIZE);
 80012f4:	233c      	movs	r3, #60	; 0x3c
 80012f6:	435a      	muls	r2, r3
        offset += ((phymac[0].channel & 0x0F) - 1) * FREQ_SIZE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <rm2_enter_channel+0x74>)
 80012fa:	7899      	ldrb	r1, [r3, #2]
 80012fc:	230f      	movs	r3, #15
 80012fe:	400b      	ands	r3, r1
 8001300:	3b01      	subs	r3, #1
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	18d2      	adds	r2, r2, r3
 8001306:	b292      	uxth	r2, r2
        sx127x_spibus_io(4, 0, (ot_u8*)&bandplan[offset]);
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <rm2_enter_channel+0x7c>)
 800130a:	18d2      	adds	r2, r2, r3
 800130c:	2100      	movs	r1, #0
 800130e:	2004      	movs	r0, #4
 8001310:	f007 f9c4 	bl	800869c <sx127x_spibus_io>
}
 8001314:	e7d5      	b.n	80012c2 <rm2_enter_channel+0x1e>
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	200026c4 	.word	0x200026c4
 800131c:	0800a51c 	.word	0x0800a51c
 8001320:	0800a590 	.word	0x0800a590

08001324 <rm2_mac_configure>:
}
 8001324:	4770      	bx	lr
	...

08001328 <rm2_calc_link>:
OT_WEAK void rm2_calc_link(void) {
 8001328:	b510      	push	{r4, lr}
	prssi_code			= sx127x_read(RFREG_LR_PKTRSSIVALUE);
 800132a:	201a      	movs	r0, #26
 800132c:	f7ff fe5e 	bl	8000fec <sx127x_read>
 8001330:	0004      	movs	r4, r0
	psnr_code           = sx127x_read(RFREG_LR_PKTSNRVALUE);
 8001332:	2019      	movs	r0, #25
 8001334:	f7ff fe5a 	bl	8000fec <sx127x_read>
 8001338:	b241      	sxtb	r1, r0
	loralink.mean_snr   = (ot_s16)psnr_code;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <rm2_calc_link+0x38>)
 800133c:	8099      	strh	r1, [r3, #4]
    radio.last_rssi     = sx127x_calc_rssi(prssi_code, psnr_code);
 800133e:	0020      	movs	r0, r4
 8001340:	f7ff ff12 	bl	8001168 <sx127x_calc_rssi>
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <rm2_calc_link+0x3c>)
 8001346:	8090      	strh	r0, [r2, #4]
    radio.last_linkloss = (ot_int)(rxq.front[2] & 0x7F) - 80 - RF_HDB_RXATTEN;
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <rm2_calc_link+0x40>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	7899      	ldrb	r1, [r3, #2]
 800134e:	237f      	movs	r3, #127	; 0x7f
 8001350:	400b      	ands	r3, r1
 8001352:	3b54      	subs	r3, #84	; 0x54
    radio.last_linkloss = (radio.last_linkloss - radio.last_rssi*2) >> 1;
 8001354:	0040      	lsls	r0, r0, #1
 8001356:	1a18      	subs	r0, r3, r0
 8001358:	1040      	asrs	r0, r0, #1
 800135a:	80d0      	strh	r0, [r2, #6]
}
 800135c:	bd10      	pop	{r4, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	2000263c 	.word	0x2000263c
 8001364:	200026b8 	.word	0x200026b8
 8001368:	20002d54 	.word	0x20002d54

0800136c <rm2_flood_getcounter>:
OT_WEAK ot_int rm2_flood_getcounter(void) {
 800136c:	b510      	push	{r4, lr}
    offset_count    = (ot_int)sx127x_get_counter();
 800136e:	f7ff feed 	bl	800114c <sx127x_get_counter>
    offset_count   -= 7; //rm2_scale_codec(phymac[0].channel, 29);
 8001372:	3807      	subs	r0, #7
 8001374:	b200      	sxth	r0, r0
}
 8001376:	bd10      	pop	{r4, pc}

08001378 <rm2_flood_txstop>:
OT_WEAK void rm2_flood_txstop(void) {
 8001378:	b510      	push	{r4, lr}
    rfctl.state = RADIO_STATE_TXDONE;
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <rm2_flood_txstop+0x14>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
    sx127x_stop_counter();
 8001380:	f7ff fee2 	bl	8001148 <sx127x_stop_counter>
    sx127x_int_txdata();
 8001384:	f7ff fe04 	bl	8000f90 <sx127x_int_txdata>
}
 8001388:	bd10      	pop	{r4, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	20002644 	.word	0x20002644

08001390 <rm2_flood_txstart>:
OT_WEAK void rm2_flood_txstart(void) {
 8001390:	b510      	push	{r4, lr}
    sx127x_start_counter();
 8001392:	f7ff fecf 	bl	8001134 <sx127x_start_counter>
}
 8001396:	bd10      	pop	{r4, pc}

08001398 <rm2_rxsync_isr>:
}
#endif


#ifndef EXTF_rm2_rxsync_isr
OT_WEAK void rm2_rxsync_isr(void) {
 8001398:	b510      	push	{r4, lr}
/// - Multiframe packets are not possible in LoRa, so FRAME-CONT bit always 0
/// - LoRa packet reception is done with a manually-timed buffer interval,
///   via the mactimer.  LoRa's built-in packet engine is too dogmatic to be
///   useful for advanced applications (like this one)

    __DEBUG_ERRCODE_EVAL(=210); 
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <rm2_rxsync_isr+0x34>)
 800139c:	2200      	movs	r2, #0
 800139e:	801a      	strh	r2, [r3, #0]
 80013a0:	32d2      	adds	r2, #210	; 0xd2
 80013a2:	805a      	strh	r2, [r3, #2]
    
    radio.state = RADIO_DataRX;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <rm2_rxsync_isr+0x38>)
 80013a6:	3acd      	subs	r2, #205	; 0xcd
 80013a8:	701a      	strb	r2, [r3, #0]
    dll_block();
 80013aa:	f003 fcd3 	bl	8004d54 <dll_block>

    // Manual download timing.
    // Either wait for the end of the packet (iter_ti=0: unencoded BG and PG frames)
    // or setup a timer interrupt.
    if (rfctl.iter_ti != 0) {
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <rm2_rxsync_isr+0x3c>)
 80013b0:	78d8      	ldrb	r0, [r3, #3]
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d106      	bne.n	80013c4 <rm2_rxsync_isr+0x2c>
    	radio_set_mactimer(rfctl.iter_ti);
    }
    sx127x_int_rxend();
 80013b6:	f7ff fdd7 	bl	8000f68 <sx127x_int_rxend>

    em2_decode_newpacket();
 80013ba:	f000 fd13 	bl	8001de4 <em2_decode_newpacket>
    em2_decode_newframe();
 80013be:	f000 fd13 	bl	8001de8 <em2_decode_newframe>

}
 80013c2:	bd10      	pop	{r4, pc}
    	radio_set_mactimer(rfctl.iter_ti);
 80013c4:	b280      	uxth	r0, r0
 80013c6:	f7ff ff35 	bl	8001234 <radio_set_mactimer>
 80013ca:	e7f4      	b.n	80013b6 <rm2_rxsync_isr+0x1e>
 80013cc:	20002df0 	.word	0x20002df0
 80013d0:	200026b8 	.word	0x200026b8
 80013d4:	20002644 	.word	0x20002644

080013d8 <rm2_txinit>:
/** Radio TX Functions  <BR>
  * ========================================================================<BR>
  */

#ifndef EXTF_rm2_txinit
OT_WEAK void rm2_txinit(ot_u8 psettings, ot_sig2 callback) {
 80013d8:	b510      	push	{r4, lr}
            RADIO_FLAG_PG,
            RADIO_FLAG_CONT,
            (RADIO_FLAG_BG | RADIO_FLAG_CONT)
    };

    rfctl.flags    &= ~(RADIO_FLAG_BG | RADIO_FLAG_PG | RADIO_FLAG_CONT);
 80013da:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <rm2_txinit+0x38>)
 80013dc:	7853      	ldrb	r3, [r2, #1]
 80013de:	2407      	movs	r4, #7
 80013e0:	43a3      	bics	r3, r4
    //rfctl.flags    |= (psettings & (M2_NETFLAG_BG | M2_NETFLAG_STREAM)) >> 6;

    ///@todo temporary method until PG mode refined
    rfctl.flags |= flag_lut[(psettings & (M2_NETFLAG_STREAM | M2_NETFLAG_BG)) >> 6];
 80013e2:	0984      	lsrs	r4, r0, #6
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <rm2_txinit+0x3c>)
 80013e6:	1900      	adds	r0, r0, r4
 80013e8:	2424      	movs	r4, #36	; 0x24
 80013ea:	5d00      	ldrb	r0, [r0, r4]
 80013ec:	4303      	orrs	r3, r0
 80013ee:	7053      	strb	r3, [r2, #1]

    radio.evtdone   = callback;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <rm2_txinit+0x40>)
 80013f2:	6099      	str	r1, [r3, #8]
    radio.state     = RADIO_Csma;
 80013f4:	2102      	movs	r1, #2
 80013f6:	7019      	strb	r1, [r3, #0]
    rfctl.state     = RADIO_STATE_TXINIT;
 80013f8:	2308      	movs	r3, #8
 80013fa:	7013      	strb	r3, [r2, #0]

    /// If 0, it's a retransmission, no re-encoding necessary
    /// This value is revised later.
    txq.options.ubyte[UPPER] = 0;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <rm2_txinit+0x44>)
 80013fe:	2200      	movs	r2, #0
 8001400:	70da      	strb	r2, [r3, #3]

    /// CSMA-CA interrupt based and fully pre-emptive.  This is
    /// possible using CC1 on the GPTIM to clock the intervals.
    radio_set_mactimer( (ot_uint)dll.comm.tca << 3 );
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <rm2_txinit+0x48>)
 8001404:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8001406:	00c0      	lsls	r0, r0, #3
 8001408:	b280      	uxth	r0, r0
 800140a:	f7ff ff13 	bl	8001234 <radio_set_mactimer>
}
 800140e:	bd10      	pop	{r4, pc}
 8001410:	20002644 	.word	0x20002644
 8001414:	0800a51c 	.word	0x0800a51c
 8001418:	200026b8 	.word	0x200026b8
 800141c:	20002d68 	.word	0x20002d68
 8001420:	20002648 	.word	0x20002648

08001424 <rm2_resend>:
#endif



#ifndef EXTF_rm2_resend
OT_WEAK void rm2_resend(ot_sig2 callback) {
 8001424:	b510      	push	{r4, lr}
    radio.evtdone               = callback;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <rm2_resend+0x20>)
 8001428:	6098      	str	r0, [r3, #8]
    radio.state                 = RADIO_Csma;
 800142a:	2202      	movs	r2, #2
 800142c:	701a      	strb	r2, [r3, #0]
    rfctl.state                 = RADIO_STATE_TXINIT;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <rm2_resend+0x24>)
 8001430:	3206      	adds	r2, #6
 8001432:	701a      	strb	r2, [r3, #0]
    txq.options.ubyte[UPPER]    = 255;
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <rm2_resend+0x28>)
 8001436:	32f7      	adds	r2, #247	; 0xf7
 8001438:	70da      	strb	r2, [r3, #3]
    radio_set_mactimer(0);
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff fefa 	bl	8001234 <radio_set_mactimer>
}
 8001440:	bd10      	pop	{r4, pc}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	200026b8 	.word	0x200026b8
 8001448:	20002644 	.word	0x20002644
 800144c:	20002d68 	.word	0x20002d68

08001450 <sub_cca_isfail>:
    sx127x_antsw_rx();
    sx127x_strobe(_OPMODE_CAD, False);  //non-blocking call
    radio.state = RADIO_Csma;
}

ot_bool sub_cca_isfail(void) {
 8001450:	b510      	push	{r4, lr}
    ot_bool test;
    test = sx127x_check_cadpin();
 8001452:	f7ff fdc3 	bl	8000fdc <sx127x_check_cadpin>
 8001456:	1e04      	subs	r4, r0, #0
    if (test) {
 8001458:	d101      	bne.n	800145e <sub_cca_isfail+0xe>
        
        // This calls CSMA loop
        radio.evtdone(1, 0);
    }
    return test;
}
 800145a:	0020      	movs	r0, r4
 800145c:	bd10      	pop	{r4, pc}
        sx127x_int_off();
 800145e:	f7ff fd67 	bl	8000f30 <sx127x_int_off>
        rfctl.state = RADIO_STATE_TXCAD1;
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <sub_cca_isfail+0x24>)
 8001464:	2210      	movs	r2, #16
 8001466:	701a      	strb	r2, [r3, #0]
        radio.evtdone(1, 0);
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <sub_cca_isfail+0x28>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2100      	movs	r1, #0
 800146e:	2001      	movs	r0, #1
 8001470:	4798      	blx	r3
 8001472:	e7f2      	b.n	800145a <sub_cca_isfail+0xa>
 8001474:	20002644 	.word	0x20002644
 8001478:	200026b8 	.word	0x200026b8

0800147c <sx127xdrv_buffer_config>:

void sx127xdrv_null(ot_int arg1, ot_int arg2) { }


#ifndef EXTF_sx127xdrv_buffer_config
OT_WEAK void sx127xdrv_buffer_config(MODE_enum mode, ot_u16 param) {
 800147c:	b570      	push	{r4, r5, r6, lr}
 800147e:	000e      	movs	r6, r1
        (_BW_500_KHZ | _CODINGRATE_4_5 | _IMPLICITHEADER_ON | _RXPAYLOADCRC_OFF | _LOWDATARATEOPTIMIZE_OFF),
        (_BW_500_KHZ | _CODINGRATE_4_4 | _IMPLICITHEADER_ON | _RXPAYLOADCRC_OFF | _LOWDATARATEOPTIMIZE_OFF)
    };

    ///@todo Param manipulation must take into account the variable coding rate
    usefec  = (phymac[0].channel >> 7);
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <sx127xdrv_buffer_config+0x48>)
 8001482:	789b      	ldrb	r3, [r3, #2]
 8001484:	09db      	lsrs	r3, r3, #7
    offset  = (ot_u8)mode + usefec;
 8001486:	1818      	adds	r0, r3, r0
 8001488:	b2c4      	uxtb	r4, r0

    sx127x_write(RFREG_LR_MODEMCONFIG1, mdmcfg1[usefec]);
 800148a:	4d0f      	ldr	r5, [pc, #60]	; (80014c8 <sx127xdrv_buffer_config+0x4c>)
 800148c:	18eb      	adds	r3, r5, r3
 800148e:	2228      	movs	r2, #40	; 0x28
 8001490:	5c99      	ldrb	r1, [r3, r2]
 8001492:	201d      	movs	r0, #29
 8001494:	f7ff fdd6 	bl	8001044 <sx127x_write>
    //sx127x_write(RFREG_LR_MODEMCONFIG1, mdmcfg1[0]);

    sx127x_write(RFREG_LR_PREAMBLELSB, preamblelen[offset]);
 8001498:	192d      	adds	r5, r5, r4
 800149a:	232c      	movs	r3, #44	; 0x2c
 800149c:	5ce9      	ldrb	r1, [r5, r3]
 800149e:	2021      	movs	r0, #33	; 0x21
 80014a0:	f7ff fdd0 	bl	8001044 <sx127x_write>
    sx127x_write(RFREG_LR_SYNCWORD, syncword[offset]);
 80014a4:	2334      	movs	r3, #52	; 0x34
 80014a6:	5ce9      	ldrb	r1, [r5, r3]
 80014a8:	2039      	movs	r0, #57	; 0x39
 80014aa:	f7ff fdcb 	bl	8001044 <sx127x_write>

    if (param == 0) {
 80014ae:	2e00      	cmp	r6, #0
 80014b0:	d103      	bne.n	80014ba <sx127xdrv_buffer_config+0x3e>
        param = deflength[offset];
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <sx127xdrv_buffer_config+0x4c>)
 80014b4:	1904      	adds	r4, r0, r4
 80014b6:	233c      	movs	r3, #60	; 0x3c
 80014b8:	5ce6      	ldrb	r6, [r4, r3]
    }
    sx127x_write(RFREG_LR_PAYLOADLENGTH, param);
 80014ba:	b2f1      	uxtb	r1, r6
 80014bc:	2022      	movs	r0, #34	; 0x22
 80014be:	f7ff fdc1 	bl	8001044 <sx127x_write>
}
 80014c2:	bd70      	pop	{r4, r5, r6, pc}
 80014c4:	200026c4 	.word	0x200026c4
 80014c8:	0800a51c 	.word	0x0800a51c

080014cc <radio_gag>:
   radio_sleep();
}
#endif

#ifndef EXTF_radio_gag
OT_WEAK void radio_gag(void) {
 80014cc:	b510      	push	{r4, lr}
    sx127x_int_off();                       // Disable pin interrutps on MCU
 80014ce:	f7ff fd2f 	bl	8000f30 <sx127x_int_off>
    sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);  // Clear Register IRQ Flags on SX127x
 80014d2:	21ff      	movs	r1, #255	; 0xff
 80014d4:	2012      	movs	r0, #18
 80014d6:	f7ff fdb5 	bl	8001044 <sx127x_write>
}
 80014da:	bd10      	pop	{r4, pc}

080014dc <radio_finish>:
OT_WEAK void radio_finish(ot_int main_err, ot_int frame_err) {
 80014dc:	b570      	push	{r4, r5, r6, lr}
 80014de:	0004      	movs	r4, r0
 80014e0:	000d      	movs	r5, r1
    radio_gag();                            // redundant, but here for robustness
 80014e2:	f7ff fff3 	bl	80014cc <radio_gag>
    dll_unblock();                          // also redundant and here for robustness
 80014e6:	f003 fc3b 	bl	8004d60 <dll_unblock>
    rfctl.state     = 0;
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <radio_finish+0x2c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
    rfctl.flags    &= (RADIO_FLAG_XOON);    //clear all other flags
 80014f0:	7859      	ldrb	r1, [r3, #1]
 80014f2:	3240      	adds	r2, #64	; 0x40
 80014f4:	400a      	ands	r2, r1
 80014f6:	705a      	strb	r2, [r3, #1]
    callback        = radio.evtdone;
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <radio_finish+0x30>)
 80014fa:	689a      	ldr	r2, [r3, #8]
    radio.evtdone   = &otutils_sig2_null;
 80014fc:	4904      	ldr	r1, [pc, #16]	; (8001510 <radio_finish+0x34>)
 80014fe:	6099      	str	r1, [r3, #8]
    callback(main_err, frame_err);
 8001500:	0029      	movs	r1, r5
 8001502:	0020      	movs	r0, r4
 8001504:	4790      	blx	r2
}
 8001506:	bd70      	pop	{r4, r5, r6, pc}
 8001508:	20002644 	.word	0x20002644
 800150c:	200026b8 	.word	0x200026b8
 8001510:	0800721f 	.word	0x0800721f

08001514 <sub_hwtimeout_isr>:
void sub_hwtimeout_isr(void) {
 8001514:	b510      	push	{r4, lr}
    if (rfctl.flags & RADIO_FLAG_BG) {
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <sub_hwtimeout_isr+0x38>)
 8001518:	785b      	ldrb	r3, [r3, #1]
 800151a:	07db      	lsls	r3, r3, #31
 800151c:	d506      	bpl.n	800152c <sub_hwtimeout_isr+0x18>
        if (--rfctl.tries <= 0) {
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <sub_hwtimeout_isr+0x38>)
 8001520:	7893      	ldrb	r3, [r2, #2]
 8001522:	3b01      	subs	r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	7093      	strb	r3, [r2, #2]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <sub_hwtimeout_isr+0x2a>
    sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);
 800152c:	21ff      	movs	r1, #255	; 0xff
 800152e:	2012      	movs	r0, #18
 8001530:	f7ff fd88 	bl	8001044 <sx127x_write>
    sx127x_strobe(_OPMODE_RXSINGLE, False);
 8001534:	2100      	movs	r1, #0
 8001536:	2006      	movs	r0, #6
 8001538:	f7ff fdb8 	bl	80010ac <sx127x_strobe>
}
 800153c:	bd10      	pop	{r4, pc}
            radio_finish(RM2_ERR_TIMEOUT, 1 /*radio.link.sqi*/);
 800153e:	2004      	movs	r0, #4
 8001540:	2101      	movs	r1, #1
 8001542:	4240      	negs	r0, r0
 8001544:	f7ff ffca 	bl	80014dc <radio_finish>
            return;
 8001548:	e7f8      	b.n	800153c <sub_hwtimeout_isr+0x28>
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	20002644 	.word	0x20002644

08001550 <rm2_rxinit>:
OT_WEAK void rm2_rxinit(ot_u8 channel, ot_u8 psettings, ot_sig2 callback) {
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=200);
 8001554:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <rm2_rxinit+0xb8>)
 8001556:	2000      	movs	r0, #0
 8001558:	8018      	strh	r0, [r3, #0]
 800155a:	30c8      	adds	r0, #200	; 0xc8
 800155c:	8058      	strh	r0, [r3, #2]
    radio.evtdone   = callback;
 800155e:	4b2b      	ldr	r3, [pc, #172]	; (800160c <rm2_rxinit+0xbc>)
 8001560:	609a      	str	r2, [r3, #8]
    rfctl.flags    &= ~(RADIO_FLAG_CONT | RADIO_FLAG_BG | RADIO_FLAG_PG);
 8001562:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <rm2_rxinit+0xc0>)
 8001564:	7853      	ldrb	r3, [r2, #1]
 8001566:	38c1      	subs	r0, #193	; 0xc1
 8001568:	4383      	bics	r3, r0
 800156a:	7053      	strb	r3, [r2, #1]
    rfctl.tries 	= 1;
 800156c:	3806      	subs	r0, #6
 800156e:	7090      	strb	r0, [r2, #2]
    if (psettings & (M2_NETFLAG_BG)) {
 8001570:	064a      	lsls	r2, r1, #25
 8001572:	d51e      	bpl.n	80015b2 <rm2_rxinit+0x62>
        if ((psettings & M2_NETFLAG_STREAM) == 0) {
 8001574:	b24a      	sxtb	r2, r1
 8001576:	2a00      	cmp	r2, #0
 8001578:	db07      	blt.n	800158a <rm2_rxinit+0x3a>
            rfctl.flags |= RADIO_FLAG_PG;
 800157a:	2204      	movs	r2, #4
 800157c:	4313      	orrs	r3, r2
 800157e:	4a24      	ldr	r2, [pc, #144]	; (8001610 <rm2_rxinit+0xc0>)
 8001580:	7053      	strb	r3, [r2, #1]
        	sub_init = &sub_initrx;
 8001582:	4e24      	ldr	r6, [pc, #144]	; (8001614 <rm2_rxinit+0xc4>)
        	initvals = (ot_u8*)pginit;
 8001584:	4d24      	ldr	r5, [pc, #144]	; (8001618 <rm2_rxinit+0xc8>)
 8001586:	3554      	adds	r5, #84	; 0x54
 8001588:	e016      	b.n	80015b8 <rm2_rxinit+0x68>
        else if (psettings & M2_NETSTATE_INIT) {
 800158a:	070a      	lsls	r2, r1, #28
 800158c:	d509      	bpl.n	80015a2 <rm2_rxinit+0x52>
            rfctl.flags |= RADIO_FLAG_BG;
 800158e:	4a20      	ldr	r2, [pc, #128]	; (8001610 <rm2_rxinit+0xc0>)
 8001590:	2101      	movs	r1, #1
 8001592:	430b      	orrs	r3, r1
 8001594:	7053      	strb	r3, [r2, #1]
            rfctl.tries = 3;
 8001596:	2303      	movs	r3, #3
 8001598:	7093      	strb	r3, [r2, #2]
		    sub_init 	= &sub_initcad;
 800159a:	4e20      	ldr	r6, [pc, #128]	; (800161c <rm2_rxinit+0xcc>)
		    initvals 	= (ot_u8*)bg1init;
 800159c:	4d1e      	ldr	r5, [pc, #120]	; (8001618 <rm2_rxinit+0xc8>)
 800159e:	3544      	adds	r5, #68	; 0x44
 80015a0:	e00a      	b.n	80015b8 <rm2_rxinit+0x68>
		    rfctl.flags |= RADIO_FLAG_BG;
 80015a2:	2201      	movs	r2, #1
 80015a4:	4313      	orrs	r3, r2
 80015a6:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <rm2_rxinit+0xc0>)
 80015a8:	7053      	strb	r3, [r2, #1]
            sub_init = &sub_initrx;
 80015aa:	4e1a      	ldr	r6, [pc, #104]	; (8001614 <rm2_rxinit+0xc4>)
            initvals = (ot_u8*)bg2init;
 80015ac:	4d1a      	ldr	r5, [pc, #104]	; (8001618 <rm2_rxinit+0xc8>)
 80015ae:	355c      	adds	r5, #92	; 0x5c
 80015b0:	e002      	b.n	80015b8 <rm2_rxinit+0x68>
        sub_init    = &sub_initrx;
 80015b2:	4e18      	ldr	r6, [pc, #96]	; (8001614 <rm2_rxinit+0xc4>)
        initvals    = (ot_u8*)fginit;
 80015b4:	4d18      	ldr	r5, [pc, #96]	; (8001618 <rm2_rxinit+0xc8>)
 80015b6:	354c      	adds	r5, #76	; 0x4c
    if (rm2_test_channel(channel) == False) {
 80015b8:	0020      	movs	r0, r4
 80015ba:	f004 fad1 	bl	8005b60 <rm2_test_channel>
 80015be:	2800      	cmp	r0, #0
 80015c0:	d01b      	beq.n	80015fa <rm2_rxinit+0xaa>
    sx127xdrv_buffer_config(initvals[0], 0);
 80015c2:	7828      	ldrb	r0, [r5, #0]
 80015c4:	2100      	movs	r1, #0
 80015c6:	f7ff ff59 	bl	800147c <sx127xdrv_buffer_config>
    channel			= (channel>>4) & 3;
 80015ca:	0924      	lsrs	r4, r4, #4
 80015cc:	2003      	movs	r0, #3
 80015ce:	4020      	ands	r0, r4
    rfctl.iter_ti	= iterinit[channel];
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <rm2_rxinit+0xc8>)
 80015d2:	181b      	adds	r3, r3, r0
 80015d4:	2264      	movs	r2, #100	; 0x64
 80015d6:	5c9a      	ldrb	r2, [r3, r2]
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <rm2_rxinit+0xc0>)
 80015da:	70da      	strb	r2, [r3, #3]
    initvals[3]    |= sub_modemconfig2_baseval(channel);
 80015dc:	f7ff fe42 	bl	8001264 <sub_modemconfig2_baseval>
 80015e0:	78e9      	ldrb	r1, [r5, #3]
 80015e2:	4301      	orrs	r1, r0
 80015e4:	b2c9      	uxtb	r1, r1
 80015e6:	70e9      	strb	r1, [r5, #3]
    sx127x_write(RFREG_LR_MODEMCONFIG2, initvals[3]);
 80015e8:	201e      	movs	r0, #30
 80015ea:	f7ff fd2b 	bl	8001044 <sx127x_write>
    sx127x_write(RFREG_LR_SYMBTIMEOUTLSB, initvals[4]);
 80015ee:	7929      	ldrb	r1, [r5, #4]
 80015f0:	201f      	movs	r0, #31
 80015f2:	f7ff fd27 	bl	8001044 <sx127x_write>
    sub_init();
 80015f6:	47b0      	blx	r6
}
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
        radio_finish(RM2_ERR_BADCHANNEL, 0);
 80015fa:	3003      	adds	r0, #3
 80015fc:	2100      	movs	r1, #0
 80015fe:	4240      	negs	r0, r0
 8001600:	f7ff ff6c 	bl	80014dc <radio_finish>
        return;
 8001604:	e7f8      	b.n	80015f8 <rm2_rxinit+0xa8>
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	20002df0 	.word	0x20002df0
 800160c:	200026b8 	.word	0x200026b8
 8001610:	20002644 	.word	0x20002644
 8001614:	08001869 	.word	0x08001869
 8001618:	0800a51c 	.word	0x0800a51c
 800161c:	080011dd 	.word	0x080011dd

08001620 <rm2_decode_s2>:
void rm2_decode_s2(void) {
 8001620:	b510      	push	{r4, lr}
        llrbits = lorallr_getblock(&lorallr, rxq.getcursor);
 8001622:	4c24      	ldr	r4, [pc, #144]	; (80016b4 <rm2_decode_s2+0x94>)
 8001624:	6861      	ldr	r1, [r4, #4]
 8001626:	4824      	ldr	r0, [pc, #144]	; (80016b8 <rm2_decode_s2+0x98>)
 8001628:	f002 ff02 	bl	8004430 <lorallr_getblock>
 800162c:	0002      	movs	r2, r0
        blockcrc = hsc_decode(&hsc, rxq.putcursor, llrbits);
 800162e:	68a1      	ldr	r1, [r4, #8]
 8001630:	4822      	ldr	r0, [pc, #136]	; (80016bc <rm2_decode_s2+0x9c>)
 8001632:	f000 fe49 	bl	80022c8 <hsc_decode>
        if (blockcrc != 0) {
 8001636:	2800      	cmp	r0, #0
 8001638:	d127      	bne.n	800168a <rm2_decode_s2+0x6a>
        lorallr_popblock(&lorallr);
 800163a:	481f      	ldr	r0, [pc, #124]	; (80016b8 <rm2_decode_s2+0x98>)
 800163c:	f002 ff36 	bl	80044ac <lorallr_popblock>
        rxq.putcursor += hsc.infobytes;
 8001640:	481e      	ldr	r0, [pc, #120]	; (80016bc <rm2_decode_s2+0x9c>)
 8001642:	88c3      	ldrh	r3, [r0, #6]
 8001644:	4c1b      	ldr	r4, [pc, #108]	; (80016b4 <rm2_decode_s2+0x94>)
 8001646:	68a2      	ldr	r2, [r4, #8]
 8001648:	4694      	mov	ip, r2
 800164a:	4463      	add	r3, ip
 800164c:	60a3      	str	r3, [r4, #8]
        hsc_init(&hsc, (hscrate_t)(rxq.front[1] & 7));
 800164e:	68e3      	ldr	r3, [r4, #12]
 8001650:	785b      	ldrb	r3, [r3, #1]
 8001652:	2107      	movs	r1, #7
 8001654:	4019      	ands	r1, r3
 8001656:	f000 fd13 	bl	8002080 <hsc_init>
        rxq.getcursor      += 16;
 800165a:	6863      	ldr	r3, [r4, #4]
 800165c:	3310      	adds	r3, #16
 800165e:	6063      	str	r3, [r4, #4]
        unprocessed_bytes   = em2.bytes - (rxq.getcursor - (rxq.front + rxq.options.ushort));
 8001660:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <rm2_decode_s2+0xa0>)
 8001662:	8852      	ldrh	r2, [r2, #2]
 8001664:	68e1      	ldr	r1, [r4, #12]
 8001666:	8860      	ldrh	r0, [r4, #2]
 8001668:	1809      	adds	r1, r1, r0
 800166a:	1a5b      	subs	r3, r3, r1
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	b21b      	sxth	r3, r3
    } while (unprocessed_bytes >= 16);
 8001670:	2b0f      	cmp	r3, #15
 8001672:	dcd6      	bgt.n	8001622 <rm2_decode_s2+0x2>
    if (rfctl.state == RADIO_STATE_RXDONE) {
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <rm2_decode_s2+0xa4>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d10c      	bne.n	8001696 <rm2_decode_s2+0x76>
        radio_finish(0, em2_decode_endframe());
 800167c:	f000 fca4 	bl	8001fc8 <em2_decode_endframe>
 8001680:	b201      	sxth	r1, r0
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff ff2a 	bl	80014dc <radio_finish>
        return;
 8001688:	e012      	b.n	80016b0 <rm2_decode_s2+0x90>
            rxq.options.ushort  = 0;
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <rm2_decode_s2+0x94>)
 800168c:	2200      	movs	r2, #0
 800168e:	805a      	strh	r2, [r3, #2]
            em2.state           = -1;
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <rm2_decode_s2+0xa0>)
 8001692:	3a01      	subs	r2, #1
 8001694:	809a      	strh	r2, [r3, #4]
    sys.task_RFA.event      = 5;
 8001696:	490c      	ldr	r1, [pc, #48]	; (80016c8 <rm2_decode_s2+0xa8>)
 8001698:	2305      	movs	r3, #5
 800169a:	710b      	strb	r3, [r1, #4]
    sys.task_RFA.nextevent  = (ot_uint)ti_per_block[(phymac[0].channel >> 4) & 3];
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <rm2_decode_s2+0xac>)
 800169e:	789a      	ldrb	r2, [r3, #2]
 80016a0:	0912      	lsrs	r2, r2, #4
 80016a2:	2303      	movs	r3, #3
 80016a4:	401a      	ands	r2, r3
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <rm2_decode_s2+0xb0>)
 80016a8:	189b      	adds	r3, r3, r2
 80016aa:	2268      	movs	r2, #104	; 0x68
 80016ac:	5c9b      	ldrb	r3, [r3, r2]
 80016ae:	608b      	str	r3, [r1, #8]
}
 80016b0:	bd10      	pop	{r4, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	20002d54 	.word	0x20002d54
 80016b8:	20002230 	.word	0x20002230
 80016bc:	20002228 	.word	0x20002228
 80016c0:	20002684 	.word	0x20002684
 80016c4:	20002644 	.word	0x20002644
 80016c8:	20002da8 	.word	0x20002da8
 80016cc:	200026c4 	.word	0x200026c4
 80016d0:	0800a51c 	.word	0x0800a51c

080016d4 <rm2_rxtimeout_isr>:
OT_WEAK void rm2_rxtimeout_isr(void) {
 80016d4:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=280);
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <rm2_rxtimeout_isr+0x20>)
 80016d8:	2200      	movs	r2, #0
 80016da:	801a      	strh	r2, [r3, #0]
 80016dc:	3219      	adds	r2, #25
 80016de:	32ff      	adds	r2, #255	; 0xff
 80016e0:	805a      	strh	r2, [r3, #2]
    radio_gag();
 80016e2:	f7ff fef3 	bl	80014cc <radio_gag>
    radio_finish(RM2_ERR_TIMEOUT, 1 /*radio.link.sqi*/);
 80016e6:	2004      	movs	r0, #4
 80016e8:	2101      	movs	r1, #1
 80016ea:	4240      	negs	r0, r0
 80016ec:	f7ff fef6 	bl	80014dc <radio_finish>
}
 80016f0:	bd10      	pop	{r4, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	20002df0 	.word	0x20002df0

080016f8 <rm2_rxend_isr>:
OT_WEAK void rm2_rxend_isr(void) {
 80016f8:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=230);
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <rm2_rxend_isr+0x38>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	801a      	strh	r2, [r3, #0]
 8001700:	32e6      	adds	r2, #230	; 0xe6
 8001702:	805a      	strh	r2, [r3, #2]
    systim_disable_insertion();					// Here for safety purposes
 8001704:	f006 fc14 	bl	8007f30 <systim_disable_insertion>
    radio_gag();                                // No more Radio interrupts!
 8001708:	f7ff fee0 	bl	80014cc <radio_gag>
    rm2_calc_link();                            // Calculate relative link info
 800170c:	f7ff fe0c 	bl	8001328 <rm2_calc_link>
    rfctl.state = RADIO_STATE_RXDONE;           // Make sure in DONE State, for decoding
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <rm2_rxend_isr+0x3c>)
 8001712:	2202      	movs	r2, #2
 8001714:	701a      	strb	r2, [r3, #0]
    em2_decode_data();                          // decode any leftover data
 8001716:	f000 fbcd 	bl	8001eb4 <em2_decode_data>
    if (sys.task_RFA.event != 6) {
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <rm2_rxend_isr+0x40>)
 800171c:	791b      	ldrb	r3, [r3, #4]
 800171e:	2b06      	cmp	r3, #6
 8001720:	d005      	beq.n	800172e <rm2_rxend_isr+0x36>
        ot_u16 integrity = em2_decode_endframe();
 8001722:	f000 fc51 	bl	8001fc8 <em2_decode_endframe>
        radio_finish(0, integrity);
 8001726:	b201      	sxth	r1, r0
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff fed7 	bl	80014dc <radio_finish>
}
 800172e:	bd10      	pop	{r4, pc}
 8001730:	20002df0 	.word	0x20002df0
 8001734:	20002644 	.word	0x20002644
 8001738:	20002da8 	.word	0x20002da8

0800173c <radio_sleep>:
    }
}
#endif

#ifndef EXTF_radio_sleep
OT_WEAK void radio_sleep(void) {
 800173c:	b510      	push	{r4, lr}
    sx127x_antsw_off();
 800173e:	f007 f83f 	bl	80087c0 <sx127x_antsw_off>
    sx127x_strobe(_OPMODE_SLEEP, True);
 8001742:	2101      	movs	r1, #1
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff fcb1 	bl	80010ac <sx127x_strobe>
//        radio.state  = RADIO_Idle;
//        rfctl.flags &= ~RADIO_FLAG_PWRMASK;
//        sx127x_strobe(_OPMODE_SLEEP);
//        sx127x_waitfor_sleep();
//    }
}
 800174a:	bd10      	pop	{r4, pc}

0800174c <radio_idle>:
#endif

#ifndef EXTF_radio_idle
OT_WEAK void radio_idle(void) {
 800174c:	b510      	push	{r4, lr}
    sx127x_antsw_on();                    ///@todo see if this matters
 800174e:	f007 f84d 	bl	80087ec <sx127x_antsw_on>
    sx127x_strobe(_OPMODE_STANDBY, True);
 8001752:	2101      	movs	r1, #1
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff fca9 	bl	80010ac <sx127x_strobe>
//    if (!test) {
//        radio.state  = RADIO_Idle;
//        rfctl.flags |= RADIO_FLAG_XOON;
//        sx127xdrv_force_standby();
//    }
}
 800175a:	bd10      	pop	{r4, pc}

0800175c <rm2_kill>:
OT_WEAK void rm2_kill(void) {
 800175c:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=290);
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <rm2_kill+0x28>)
 8001760:	2200      	movs	r2, #0
 8001762:	801a      	strh	r2, [r3, #0]
 8001764:	3223      	adds	r2, #35	; 0x23
 8001766:	32ff      	adds	r2, #255	; 0xff
 8001768:	805a      	strh	r2, [r3, #2]
    radio_gag();
 800176a:	f7ff feaf 	bl	80014cc <radio_gag>
    radio_idle();
 800176e:	f7ff ffed 	bl	800174c <radio_idle>
    dll_unblock();
 8001772:	f003 faf5 	bl	8004d60 <dll_unblock>
    radio_finish(RM2_ERR_KILL, 0);
 8001776:	2001      	movs	r0, #1
 8001778:	2100      	movs	r1, #0
 800177a:	4240      	negs	r0, r0
 800177c:	f7ff feae 	bl	80014dc <radio_finish>
}
 8001780:	bd10      	pop	{r4, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	20002df0 	.word	0x20002df0

08001788 <sub_cad_csma>:
void sub_cad_csma(void) {
 8001788:	b510      	push	{r4, lr}
    radio_gag(); 
 800178a:	f7ff fe9f 	bl	80014cc <radio_gag>
    sx127x_iocfg_cad();
 800178e:	f7ff fc67 	bl	8001060 <sx127x_iocfg_cad>
    sx127x_int_csma();
 8001792:	f7ff fbf3 	bl	8000f7c <sx127x_int_csma>
    radio_idle();
 8001796:	f7ff ffd9 	bl	800174c <radio_idle>
    sx127x_antsw_rx();
 800179a:	f007 f84b 	bl	8008834 <sx127x_antsw_rx>
    sx127x_strobe(_OPMODE_CAD, False);  //non-blocking call
 800179e:	2100      	movs	r1, #0
 80017a0:	2007      	movs	r0, #7
 80017a2:	f7ff fc83 	bl	80010ac <sx127x_strobe>
    radio.state = RADIO_Csma;
 80017a6:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <sub_cad_csma+0x28>)
 80017a8:	2202      	movs	r2, #2
 80017aa:	701a      	strb	r2, [r3, #0]
}
 80017ac:	bd10      	pop	{r4, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	200026b8 	.word	0x200026b8

080017b4 <rm2_txdata_isr>:
OT_WEAK void rm2_txdata_isr(void) {
 80017b4:	b510      	push	{r4, lr}
    if ((rfctl.flags & RADIO_FLAG_BGFLOOD) == RADIO_FLAG_BGFLOOD) {
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <rm2_txdata_isr+0x64>)
 80017b8:	785a      	ldrb	r2, [r3, #1]
 80017ba:	2303      	movs	r3, #3
 80017bc:	4013      	ands	r3, r2
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d10a      	bne.n	80017d8 <rm2_txdata_isr+0x24>
        radio.evtdone(RADIO_FLAG_CONT, 0);
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <rm2_txdata_isr+0x68>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2100      	movs	r1, #0
 80017c8:	2002      	movs	r0, #2
 80017ca:	4798      	blx	r3
        if ((rfctl.state & RADIO_STATE_TXMASK) == RADIO_STATE_TXDATA) {
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <rm2_txdata_isr+0x64>)
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	2338      	movs	r3, #56	; 0x38
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b38      	cmp	r3, #56	; 0x38
 80017d6:	d00b      	beq.n	80017f0 <rm2_txdata_isr+0x3c>
    radio_gag();
 80017d8:	f7ff fe78 	bl	80014cc <radio_gag>
    radio_idle();
 80017dc:	f7ff ffb6 	bl	800174c <radio_idle>
    radio_finish((rfctl.flags & (RADIO_FLAG_PG | RADIO_FLAG_BG | RADIO_FLAG_CONT)), 0);
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <rm2_txdata_isr+0x64>)
 80017e2:	785b      	ldrb	r3, [r3, #1]
 80017e4:	2007      	movs	r0, #7
 80017e6:	4018      	ands	r0, r3
 80017e8:	2100      	movs	r1, #0
 80017ea:	f7ff fe77 	bl	80014dc <radio_finish>
}
 80017ee:	bd10      	pop	{r4, pc}
            bgcrc8_put(&txq.front[2]);
 80017f0:	4c0b      	ldr	r4, [pc, #44]	; (8001820 <rm2_txdata_isr+0x6c>)
 80017f2:	68e3      	ldr	r3, [r4, #12]
 80017f4:	1c98      	adds	r0, r3, #2
 80017f6:	f002 fe98 	bl	800452a <bgcrc8_put>
            sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);
 80017fa:	21ff      	movs	r1, #255	; 0xff
 80017fc:	2012      	movs	r0, #18
 80017fe:	f7ff fc21 	bl	8001044 <sx127x_write>
            sx127x_burstwrite(RFREG_LR_FIFO, 6, &txq.front[2]);
 8001802:	68e2      	ldr	r2, [r4, #12]
 8001804:	3202      	adds	r2, #2
 8001806:	2106      	movs	r1, #6
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff fc83 	bl	8001114 <sx127x_burstwrite>
            sx127x_strobe(_OPMODE_TX, False);   //non-blocking call
 800180e:	2100      	movs	r1, #0
 8001810:	2003      	movs	r0, #3
 8001812:	f7ff fc4b 	bl	80010ac <sx127x_strobe>
            return;
 8001816:	e7ea      	b.n	80017ee <rm2_txdata_isr+0x3a>
 8001818:	20002644 	.word	0x20002644
 800181c:	200026b8 	.word	0x200026b8
 8001820:	20002d68 	.word	0x20002d68

08001824 <radio_flush_rx>:
/// Unused in SX127x
}
#endif

#ifndef EXTF_radio_flush_rx
OT_WEAK void radio_flush_rx(void) {
 8001824:	b510      	push	{r4, lr}
    sx127x_write(RFREG_LR_FIFOADDRPTR, 0);
 8001826:	2100      	movs	r1, #0
 8001828:	200d      	movs	r0, #13
 800182a:	f7ff fc0b 	bl	8001044 <sx127x_write>
}
 800182e:	bd10      	pop	{r4, pc}

08001830 <rm2_reenter_rx>:
OT_WEAK void rm2_reenter_rx(ot_sig2 callback) {
 8001830:	b510      	push	{r4, lr}
    radio.evtdone   = callback;
 8001832:	4c0b      	ldr	r4, [pc, #44]	; (8001860 <rm2_reenter_rx+0x30>)
 8001834:	60a0      	str	r0, [r4, #8]
    rfctl.state     = RADIO_STATE_RXAUTO;
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <rm2_reenter_rx+0x34>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
    radio_gag();                            
 800183c:	f7ff fe46 	bl	80014cc <radio_gag>
    radio_flush_rx();
 8001840:	f7ff fff0 	bl	8001824 <radio_flush_rx>
    sx127x_antsw_rx();
 8001844:	f006 fff6 	bl	8008834 <sx127x_antsw_rx>
    sx127x_strobe(_OPMODE_RXSINGLE, False);  //sx127x_strobe(opmode, False);   //non-blocking call
 8001848:	2100      	movs	r1, #0
 800184a:	2006      	movs	r0, #6
 800184c:	f7ff fc2e 	bl	80010ac <sx127x_strobe>
    sx127x_int_rxdata();
 8001850:	f7ff fb7e 	bl	8000f50 <sx127x_int_rxdata>
    radio.state = RADIO_Listening;
 8001854:	2301      	movs	r3, #1
 8001856:	7023      	strb	r3, [r4, #0]
    dll_unblock();
 8001858:	f003 fa82 	bl	8004d60 <dll_unblock>
}
 800185c:	bd10      	pop	{r4, pc}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	200026b8 	.word	0x200026b8
 8001864:	20002644 	.word	0x20002644

08001868 <sub_initrx>:
void sub_initrx(void) {
 8001868:	b510      	push	{r4, lr}
    sx127x_iocfg_rx();
 800186a:	f7ff fc01 	bl	8001070 <sx127x_iocfg_rx>
    rm2_reenter_rx(radio.evtdone);
 800186e:	4b02      	ldr	r3, [pc, #8]	; (8001878 <sub_initrx+0x10>)
 8001870:	6898      	ldr	r0, [r3, #8]
 8001872:	f7ff ffdd 	bl	8001830 <rm2_reenter_rx>
}
 8001876:	bd10      	pop	{r4, pc}
 8001878:	200026b8 	.word	0x200026b8

0800187c <rm2_rxdata_isr>:
OT_WEAK void rm2_rxdata_isr() {
 800187c:	b510      	push	{r4, lr}
    em2_decode_data();
 800187e:	f000 fb19 	bl	8001eb4 <em2_decode_data>
    if (em2.state < 0) {
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <rm2_rxdata_isr+0x78>)
 8001884:	2204      	movs	r2, #4
 8001886:	5e9b      	ldrsh	r3, [r3, r2]
 8001888:	2b00      	cmp	r3, #0
 800188a:	db04      	blt.n	8001896 <rm2_rxdata_isr+0x1a>
    else if ((em2.crc5 == 1) && ((rfctl.flags & 7) == 0)) {
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <rm2_rxdata_isr+0x78>)
 800188e:	785b      	ldrb	r3, [r3, #1]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d00d      	beq.n	80018b0 <rm2_rxdata_isr+0x34>
}
 8001894:	bd10      	pop	{r4, pc}
        systim_disable_insertion();
 8001896:	f006 fb4b 	bl	8007f30 <systim_disable_insertion>
        radio.state = RADIO_Idle;
 800189a:	4c17      	ldr	r4, [pc, #92]	; (80018f8 <rm2_rxdata_isr+0x7c>)
 800189c:	2300      	movs	r3, #0
 800189e:	7023      	strb	r3, [r4, #0]
        radio_gag();
 80018a0:	f7ff fe14 	bl	80014cc <radio_gag>
        radio_idle();
 80018a4:	f7ff ff52 	bl	800174c <radio_idle>
        rm2_reenter_rx(radio.evtdone);
 80018a8:	68a0      	ldr	r0, [r4, #8]
 80018aa:	f7ff ffc1 	bl	8001830 <rm2_reenter_rx>
 80018ae:	e7f1      	b.n	8001894 <rm2_rxdata_isr+0x18>
    else if ((em2.crc5 == 1) && ((rfctl.flags & 7) == 0)) {
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <rm2_rxdata_isr+0x80>)
 80018b2:	785b      	ldrb	r3, [r3, #1]
 80018b4:	075b      	lsls	r3, r3, #29
 80018b6:	d1ed      	bne.n	8001894 <rm2_rxdata_isr+0x18>
        if (phymac[0].channel & 0x80) {
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <rm2_rxdata_isr+0x84>)
 80018ba:	789b      	ldrb	r3, [r3, #2]
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0a      	blt.n	80018d8 <rm2_rxdata_isr+0x5c>
            rx_octets = rxq.front[0]+1;
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <rm2_rxdata_isr+0x88>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	781c      	ldrb	r4, [r3, #0]
 80018c8:	3401      	adds	r4, #1
            systim_disable_insertion();
 80018ca:	f006 fb31 	bl	8007f30 <systim_disable_insertion>
        sx127x_write(RFREG_LR_PAYLOADLENGTH, (ot_u8)rx_octets);
 80018ce:	b2e1      	uxtb	r1, r4
 80018d0:	2022      	movs	r0, #34	; 0x22
 80018d2:	f7ff fbb7 	bl	8001044 <sx127x_write>
}
 80018d6:	e7dd      	b.n	8001894 <rm2_rxdata_isr+0x18>
            rx_octets   = (ot_uint)hsc_octetsinframe((hscrate_t)(rxq.front[1]&7), rxq.front[0]-7);
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <rm2_rxdata_isr+0x88>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	785a      	ldrb	r2, [r3, #1]
 80018de:	2007      	movs	r0, #7
 80018e0:	4010      	ands	r0, r2
 80018e2:	7819      	ldrb	r1, [r3, #0]
 80018e4:	3907      	subs	r1, #7
 80018e6:	b2c9      	uxtb	r1, r1
 80018e8:	f000 fbbc 	bl	8002064 <hsc_octetsinframe>
            rx_octets  += 16;
 80018ec:	3010      	adds	r0, #16
 80018ee:	b284      	uxth	r4, r0
 80018f0:	e7ed      	b.n	80018ce <rm2_rxdata_isr+0x52>
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	20002684 	.word	0x20002684
 80018f8:	200026b8 	.word	0x200026b8
 80018fc:	20002644 	.word	0x20002644
 8001900:	200026c4 	.word	0x200026c4
 8001904:	20002d54 	.word	0x20002d54

08001908 <radio_flush_tx>:
#endif

#ifndef EXTF_radio_flush_tx
OT_WEAK void radio_flush_tx(void) {
 8001908:	b510      	push	{r4, lr}
    sx127x_write(RFREG_LR_FIFOADDRPTR, 0);
 800190a:	2100      	movs	r1, #0
 800190c:	200d      	movs	r0, #13
 800190e:	f7ff fb99 	bl	8001044 <sx127x_write>
}
 8001912:	bd10      	pop	{r4, pc}

08001914 <rm2_txcsma_isr>:
OT_WEAK void rm2_txcsma_isr(void) {
 8001914:	b510      	push	{r4, lr}
    switch ( (rfctl.state >> RADIO_STATE_TXSHIFT) & (RADIO_STATE_TXMASK >> RADIO_STATE_TXSHIFT) ) {
 8001916:	4b48      	ldr	r3, [pc, #288]	; (8001a38 <rm2_txcsma_isr+0x124>)
 8001918:	781a      	ldrb	r2, [r3, #0]
 800191a:	08d2      	lsrs	r2, r2, #3
 800191c:	2307      	movs	r3, #7
 800191e:	4013      	ands	r3, r2
 8001920:	b2da      	uxtb	r2, r3
 8001922:	2a06      	cmp	r2, #6
 8001924:	d875      	bhi.n	8001a12 <rm2_txcsma_isr+0xfe>
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4a44      	ldr	r2, [pc, #272]	; (8001a3c <rm2_txcsma_isr+0x128>)
 800192a:	58d3      	ldr	r3, [r2, r3]
 800192c:	469f      	mov	pc, r3
            if (rm2_test_chanlist() == False) {
 800192e:	f004 f92d 	bl	8005b8c <rm2_test_chanlist>
 8001932:	2800      	cmp	r0, #0
 8001934:	d106      	bne.n	8001944 <rm2_txcsma_isr+0x30>
                radio.evtdone(RM2_ERR_BADCHANNEL, 0);
 8001936:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <rm2_txcsma_isr+0x12c>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	3003      	adds	r0, #3
 800193c:	2100      	movs	r1, #0
 800193e:	4240      	negs	r0, r0
 8001940:	4798      	blx	r3
                break;
 8001942:	e066      	b.n	8001a12 <rm2_txcsma_isr+0xfe>
            mdmconfig2 = sub_modemconfig2_baseval((phymac[0].channel>>4) & 3);
 8001944:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <rm2_txcsma_isr+0x130>)
 8001946:	789b      	ldrb	r3, [r3, #2]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	2003      	movs	r0, #3
 800194c:	4018      	ands	r0, r3
 800194e:	f7ff fc89 	bl	8001264 <sub_modemconfig2_baseval>
 8001952:	0001      	movs	r1, r0
            sx127x_write(RFREG_LR_MODEMCONFIG2, mdmconfig2);
 8001954:	201e      	movs	r0, #30
 8001956:	f7ff fb75 	bl	8001044 <sx127x_write>
            radio_activate_queue(&txq);
 800195a:	483b      	ldr	r0, [pc, #236]	; (8001a48 <rm2_txcsma_isr+0x134>)
 800195c:	f7ff fc72 	bl	8001244 <radio_activate_queue>
            em2_encode_newpacket();
 8001960:	f000 f948 	bl	8001bf4 <em2_encode_newpacket>
            em2_encode_newframe();
 8001964:	f000 f948 	bl	8001bf8 <em2_encode_newframe>
            type = mode_lut[rfctl.flags & 7];
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <rm2_txcsma_isr+0x124>)
 800196a:	785a      	ldrb	r2, [r3, #1]
 800196c:	2307      	movs	r3, #7
 800196e:	401a      	ands	r2, r3
 8001970:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <rm2_txcsma_isr+0x138>)
 8001972:	189b      	adds	r3, r3, r2
 8001974:	226c      	movs	r2, #108	; 0x6c
 8001976:	5c98      	ldrb	r0, [r3, r2]
            sx127xdrv_buffer_config(type, em2.bytes);
 8001978:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <rm2_txcsma_isr+0x13c>)
 800197a:	8859      	ldrh	r1, [r3, #2]
 800197c:	f7ff fd7e 	bl	800147c <sx127xdrv_buffer_config>
            sx127x_int_off();
 8001980:	f7ff fad6 	bl	8000f30 <sx127x_int_off>
                goto rm2_txcsma_START;
 8001984:	e01c      	b.n	80019c0 <rm2_txcsma_isr+0xac>
            rfctl.state = RADIO_STATE_TXCCA1;
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <rm2_txcsma_isr+0x124>)
 8001988:	2218      	movs	r2, #24
 800198a:	701a      	strb	r2, [r3, #0]
            sub_cad_csma();
 800198c:	f7ff fefc 	bl	8001788 <sub_cad_csma>
            break;
 8001990:	e03f      	b.n	8001a12 <rm2_txcsma_isr+0xfe>
            if (sub_cca_isfail() == False) {
 8001992:	f7ff fd5d 	bl	8001450 <sub_cca_isfail>
 8001996:	2800      	cmp	r0, #0
 8001998:	d13b      	bne.n	8001a12 <rm2_txcsma_isr+0xfe>
                radio_sleep();
 800199a:	f7ff fecf 	bl	800173c <radio_sleep>
                rfctl.state = RADIO_STATE_TXCAD2;
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <rm2_txcsma_isr+0x124>)
 80019a0:	2220      	movs	r2, #32
 80019a2:	701a      	strb	r2, [r3, #0]
                radio_set_mactimer(0 /*phymac[0].tg */);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff fc45 	bl	8001234 <radio_set_mactimer>
 80019aa:	e032      	b.n	8001a12 <rm2_txcsma_isr+0xfe>
            rfctl.state = RADIO_STATE_TXCCA2;
 80019ac:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <rm2_txcsma_isr+0x124>)
 80019ae:	2228      	movs	r2, #40	; 0x28
 80019b0:	701a      	strb	r2, [r3, #0]
            sub_cad_csma();
 80019b2:	f7ff fee9 	bl	8001788 <sub_cad_csma>
            break;
 80019b6:	e02c      	b.n	8001a12 <rm2_txcsma_isr+0xfe>
            if (sub_cca_isfail()) {
 80019b8:	f7ff fd4a 	bl	8001450 <sub_cca_isfail>
 80019bc:	2800      	cmp	r0, #0
 80019be:	d128      	bne.n	8001a12 <rm2_txcsma_isr+0xfe>
            rfctl.state = RADIO_STATE_TXSTART;
 80019c0:	4c1d      	ldr	r4, [pc, #116]	; (8001a38 <rm2_txcsma_isr+0x124>)
 80019c2:	2330      	movs	r3, #48	; 0x30
 80019c4:	7023      	strb	r3, [r4, #0]
            radio.evtdone(0, (rfctl.flags & (RADIO_FLAG_PG | RADIO_FLAG_CONT | RADIO_FLAG_BG)));
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <rm2_txcsma_isr+0x12c>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	7862      	ldrb	r2, [r4, #1]
 80019cc:	2107      	movs	r1, #7
 80019ce:	4011      	ands	r1, r2
 80019d0:	2000      	movs	r0, #0
 80019d2:	4798      	blx	r3
            radio_gag();
 80019d4:	f7ff fd7a 	bl	80014cc <radio_gag>
            txq.front[2] = phymac[0].tx_eirp;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <rm2_txcsma_isr+0x134>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <rm2_txcsma_isr+0x130>)
 80019de:	7912      	ldrb	r2, [r2, #4]
 80019e0:	709a      	strb	r2, [r3, #2]
            if (rfctl.flags & RADIO_FLAG_BG) {
 80019e2:	7863      	ldrb	r3, [r4, #1]
 80019e4:	07db      	lsls	r3, r3, #31
 80019e6:	d415      	bmi.n	8001a14 <rm2_txcsma_isr+0x100>
            radio_flush_tx();
 80019e8:	f7ff ff8e 	bl	8001908 <radio_flush_tx>
            em2_encode_data();
 80019ec:	f000 f99c 	bl	8001d28 <em2_encode_data>
            radio.state = RADIO_DataTX;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <rm2_txcsma_isr+0x12c>)
 80019f2:	2206      	movs	r2, #6
 80019f4:	701a      	strb	r2, [r3, #0]
            rfctl.state = RADIO_STATE_TXDATA;
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <rm2_txcsma_isr+0x124>)
 80019f8:	3232      	adds	r2, #50	; 0x32
 80019fa:	701a      	strb	r2, [r3, #0]
            sx127x_iocfg_tx();
 80019fc:	f7ff fb40 	bl	8001080 <sx127x_iocfg_tx>
            sx127x_antsw_tx((ot_bool)BOARD_FEATURE(RF_PABOOST));
 8001a00:	2001      	movs	r0, #1
 8001a02:	f006 ff0b 	bl	800881c <sx127x_antsw_tx>
            sx127x_int_txdata();
 8001a06:	f7ff fac3 	bl	8000f90 <sx127x_int_txdata>
            sx127x_strobe(_OPMODE_TX, False);   //non-blocking call
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f7ff fb4d 	bl	80010ac <sx127x_strobe>
}
 8001a12:	bd10      	pop	{r4, pc}
                radio_idle();
 8001a14:	f7ff fe9a 	bl	800174c <radio_idle>
                if (rfctl.flags & RADIO_FLAG_CONT) {
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <rm2_txcsma_isr+0x124>)
 8001a1a:	785b      	ldrb	r3, [r3, #1]
 8001a1c:	079b      	lsls	r3, r3, #30
 8001a1e:	d408      	bmi.n	8001a32 <rm2_txcsma_isr+0x11e>
                radio.evtdone((rfctl.flags & RADIO_FLAG_CONT), 0);
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <rm2_txcsma_isr+0x12c>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <rm2_txcsma_isr+0x124>)
 8001a26:	7852      	ldrb	r2, [r2, #1]
 8001a28:	2002      	movs	r0, #2
 8001a2a:	4010      	ands	r0, r2
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4798      	blx	r3
 8001a30:	e7da      	b.n	80019e8 <rm2_txcsma_isr+0xd4>
                    rm2_flood_txstart();
 8001a32:	f7ff fcad 	bl	8001390 <rm2_flood_txstart>
 8001a36:	e7f3      	b.n	8001a20 <rm2_txcsma_isr+0x10c>
 8001a38:	20002644 	.word	0x20002644
 8001a3c:	0800a4e4 	.word	0x0800a4e4
 8001a40:	200026b8 	.word	0x200026b8
 8001a44:	200026c4 	.word	0x200026c4
 8001a48:	20002d68 	.word	0x20002d68
 8001a4c:	0800a51c 	.word	0x0800a51c
 8001a50:	20002684 	.word	0x20002684

08001a54 <sx127x_virtual_isr>:
void sx127x_virtual_isr(ot_u8 code) {
 8001a54:	b510      	push	{r4, lr}
    switch (code) {
 8001a56:	2806      	cmp	r0, #6
 8001a58:	d822      	bhi.n	8001aa0 <sx127x_virtual_isr+0x4c>
 8001a5a:	0080      	lsls	r0, r0, #2
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <sx127x_virtual_isr+0x54>)
 8001a5e:	581b      	ldr	r3, [r3, r0]
 8001a60:	469f      	mov	pc, r3
            ot_uint test = sx127x_check_cadpin();
 8001a62:	f7ff fabb 	bl	8000fdc <sx127x_check_cadpin>
            if (test) {
 8001a66:	2800      	cmp	r0, #0
 8001a68:	d008      	beq.n	8001a7c <sx127x_virtual_isr+0x28>
                radio_gag();
 8001a6a:	f7ff fd2f 	bl	80014cc <radio_gag>
                sx127x_strobe(_OPMODE_STANDBY, True);
 8001a6e:	2101      	movs	r1, #1
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff fb1b 	bl	80010ac <sx127x_strobe>
                sub_initrx();
 8001a76:	f7ff fef7 	bl	8001868 <sub_initrx>
 8001a7a:	e004      	b.n	8001a86 <sx127x_virtual_isr+0x32>
                rm2_kill();
 8001a7c:	f7ff fe6e 	bl	800175c <rm2_kill>
 8001a80:	e001      	b.n	8001a86 <sx127x_virtual_isr+0x32>
        case RFIV_RXDONE:       rm2_rxend_isr();        break;
 8001a82:	f7ff fe39 	bl	80016f8 <rm2_rxend_isr>
}
 8001a86:	bd10      	pop	{r4, pc}
        case RFIV_RXTIMEOUT:    sub_hwtimeout_isr();    break; 
 8001a88:	f7ff fd44 	bl	8001514 <sub_hwtimeout_isr>
 8001a8c:	e7fb      	b.n	8001a86 <sx127x_virtual_isr+0x32>
        case RFIV_RXHEADER:     rm2_rxsync_isr();       break;
 8001a8e:	f7ff fc83 	bl	8001398 <rm2_rxsync_isr>
 8001a92:	e7f8      	b.n	8001a86 <sx127x_virtual_isr+0x32>
        case RFIV_CCA:          rm2_txcsma_isr();       break;
 8001a94:	f7ff ff3e 	bl	8001914 <rm2_txcsma_isr>
 8001a98:	e7f5      	b.n	8001a86 <sx127x_virtual_isr+0x32>
        case RFIV_TXDONE:       rm2_txdata_isr();       break;
 8001a9a:	f7ff fe8b 	bl	80017b4 <rm2_txdata_isr>
 8001a9e:	e7f2      	b.n	8001a86 <sx127x_virtual_isr+0x32>
        default:                rm2_kill();             break;
 8001aa0:	f7ff fe5c 	bl	800175c <rm2_kill>
}
 8001aa4:	e7ef      	b.n	8001a86 <sx127x_virtual_isr+0x32>
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	0800a500 	.word	0x0800a500

08001aac <radio_mac_isr>:
OT_WEAK void radio_mac_isr(void) {
 8001aac:	b510      	push	{r4, lr}
	if (radio.state == RADIO_DataRX) {
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <radio_mac_isr+0x3c>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d00a      	beq.n	8001acc <radio_mac_isr+0x20>
	systim_disable_insertion();
 8001ab6:	f006 fa3b 	bl	8007f30 <systim_disable_insertion>
    if (radio.state == RADIO_Csma) {
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <radio_mac_isr+0x3c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d007      	beq.n	8001ad2 <radio_mac_isr+0x26>
    if (radio.state == RADIO_Listening) {
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d008      	beq.n	8001ad8 <radio_mac_isr+0x2c>
	rm2_kill();
 8001ac6:	f7ff fe49 	bl	800175c <rm2_kill>
}
 8001aca:	bd10      	pop	{r4, pc}
		rm2_rxdata_isr();
 8001acc:	f7ff fed6 	bl	800187c <rm2_rxdata_isr>
		return;
 8001ad0:	e7fb      	b.n	8001aca <radio_mac_isr+0x1e>
    	rm2_txcsma_isr();
 8001ad2:	f7ff ff1f 	bl	8001914 <rm2_txcsma_isr>
    	return;
 8001ad6:	e7f8      	b.n	8001aca <radio_mac_isr+0x1e>
    	chan_rssi = sx127x_read(RFREG_LR_RSSIVALUE);
 8001ad8:	201b      	movs	r0, #27
 8001ada:	f7ff fa87 	bl	8000fec <sx127x_read>
    	if (chan_rssi >= phymac[0].cs_thr) {
 8001ade:	4b03      	ldr	r3, [pc, #12]	; (8001aec <radio_mac_isr+0x40>)
 8001ae0:	799b      	ldrb	r3, [r3, #6]
 8001ae2:	4283      	cmp	r3, r0
 8001ae4:	d8ef      	bhi.n	8001ac6 <radio_mac_isr+0x1a>
 8001ae6:	e7f0      	b.n	8001aca <radio_mac_isr+0x1e>
 8001ae8:	200026b8 	.word	0x200026b8
 8001aec:	200026c4 	.word	0x200026c4

08001af0 <radio_getlinkinfo>:
#   if (M2_FEATURE_HSCODE)
    return &loralink;
#   else
    return NULL;
#   endif
}
 8001af0:	4800      	ldr	r0, [pc, #0]	; (8001af4 <radio_getlinkinfo+0x4>)
 8001af2:	4770      	bx	lr
 8001af4:	2000263c 	.word	0x2000263c

08001af8 <radio_getpwrcode>:
#endif

#ifndef EXTF_radio_getpwrcode
OT_WEAK ot_u8 radio_getpwrcode(void) {
 8001af8:	b510      	push	{r4, lr}
/// Power code: 0-3.  sx127x_getbasepwr() typically returns 3 on most platforms
    return sx127x_getbasepwr() - (radio.state > RADIO_Idle);
 8001afa:	f006 fd8d 	bl	8008618 <sx127x_getbasepwr>
 8001afe:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <radio_getpwrcode+0x14>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	1e5a      	subs	r2, r3, #1
 8001b04:	4193      	sbcs	r3, r2
 8001b06:	1ac0      	subs	r0, r0, r3
 8001b08:	b2c0      	uxtb	r0, r0
}
 8001b0a:	bd10      	pop	{r4, pc}
 8001b0c:	200026b8 	.word	0x200026b8

08001b10 <sub_bytes_to_symbols_sf5>:
  * rm2_scale_codec
  */

typedef ot_uint (*converter_fn)(ot_int, ot_int);

static ot_uint sub_bytes_to_symbols_sf5(ot_int pkt_bytes, ot_int codesize) {
 8001b10:	b510      	push	{r4, lr}
 8001b12:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 12 + 19) / 20) * codesize );
 8001b14:	00c0      	lsls	r0, r0, #3
 8001b16:	3007      	adds	r0, #7
 8001b18:	2114      	movs	r1, #20
 8001b1a:	f7fe fb7f 	bl	800021c <__divsi3>
 8001b1e:	4360      	muls	r0, r4
 8001b20:	3008      	adds	r0, #8
 8001b22:	b280      	uxth	r0, r0
}
 8001b24:	bd10      	pop	{r4, pc}

08001b26 <sub_bytes_to_symbols_sf7>:
static ot_uint sub_bytes_to_symbols_sf7(ot_int pkt_bytes, ot_int codesize) {
 8001b26:	b510      	push	{r4, lr}
 8001b28:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 20 + 27) / 28) * codesize );
 8001b2a:	00c0      	lsls	r0, r0, #3
 8001b2c:	3007      	adds	r0, #7
 8001b2e:	211c      	movs	r1, #28
 8001b30:	f7fe fb74 	bl	800021c <__divsi3>
 8001b34:	4360      	muls	r0, r4
 8001b36:	3008      	adds	r0, #8
 8001b38:	b280      	uxth	r0, r0
}
 8001b3a:	bd10      	pop	{r4, pc}

08001b3c <sub_bytes_to_symbols_sf9>:
static ot_uint sub_bytes_to_symbols_sf9(ot_int pkt_bytes, ot_int codesize) {
 8001b3c:	b510      	push	{r4, lr}
 8001b3e:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 28 + 35) / 36) * codesize );
 8001b40:	00c0      	lsls	r0, r0, #3
 8001b42:	3007      	adds	r0, #7
 8001b44:	2124      	movs	r1, #36	; 0x24
 8001b46:	f7fe fb69 	bl	800021c <__divsi3>
 8001b4a:	4360      	muls	r0, r4
 8001b4c:	3008      	adds	r0, #8
 8001b4e:	b280      	uxth	r0, r0
}
 8001b50:	bd10      	pop	{r4, pc}

08001b52 <sub_bytes_to_symbols_sf11>:
static ot_uint sub_bytes_to_symbols_sf11(ot_int pkt_bytes, ot_int codesize) {
 8001b52:	b510      	push	{r4, lr}
 8001b54:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 36 + 43) / 44) * codesize );
 8001b56:	00c0      	lsls	r0, r0, #3
 8001b58:	3007      	adds	r0, #7
 8001b5a:	212c      	movs	r1, #44	; 0x2c
 8001b5c:	f7fe fb5e 	bl	800021c <__divsi3>
 8001b60:	4360      	muls	r0, r4
 8001b62:	3008      	adds	r0, #8
 8001b64:	b280      	uxth	r0, r0
}
 8001b66:	bd10      	pop	{r4, pc}

08001b68 <sub_symbols_to_ti>:



static ot_uint sub_symbols_to_ti(ot_int symbols, ot_uint miti_per_sym) {
    ot_ulong miti;
    miti    = symbols * miti_per_sym;
 8001b68:	4348      	muls	r0, r1
    miti   += 1023;
 8001b6a:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <sub_symbols_to_ti+0x10>)
 8001b6c:	469c      	mov	ip, r3
 8001b6e:	4460      	add	r0, ip
    return (ot_uint)(miti >> 10);
 8001b70:	0a80      	lsrs	r0, r0, #10
 8001b72:	b280      	uxth	r0, r0
}
 8001b74:	4770      	bx	lr
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	000003ff 	.word	0x000003ff

08001b7c <rm2_rxtimeout_floor>:
                0, // 1100: FEC, extra coding, PAGE         (presently unspecified)
                0, // 1101: FEC, extra coding, SF9          (presently unspecified)
                0, // 1110: FEC, extra coding, SF7          (presently unspecified)
                0, // 1111: FEC, extra coding, SF5          (presently unspecified)
        };
    return (ot_uint)bgpkt_ti_lut[ (chan_id>>4) & 0x0F ];
 8001b7c:	0900      	lsrs	r0, r0, #4
 8001b7e:	4b01      	ldr	r3, [pc, #4]	; (8001b84 <rm2_rxtimeout_floor+0x8>)
 8001b80:	5c18      	ldrb	r0, [r3, r0]
}
 8001b82:	4770      	bx	lr
 8001b84:	0800a644 	.word	0x0800a644

08001b88 <rm2_default_tgd>:
            0, // 1101: FEC, extra coding, SF9          (presently unspecified)
            0, // 1110: FEC, extra coding, SF7          (presently unspecified)
            0, // 1111: FEC, extra coding, SF5          (presently unspecified)
    };
    
    return (ot_uint)tgdti_lut[ (chan_id>>4) & 0x0F ];
 8001b88:	0903      	lsrs	r3, r0, #4
 8001b8a:	4802      	ldr	r0, [pc, #8]	; (8001b94 <rm2_default_tgd+0xc>)
 8001b8c:	18c0      	adds	r0, r0, r3
 8001b8e:	7c00      	ldrb	r0, [r0, #16]
}
 8001b90:	4770      	bx	lr
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	0800a644 	.word	0x0800a644

08001b98 <rm2_bgpkt_duration>:
ot_uint rm2_pkt_duration(ot_queue* pkt_q) {
    return rm2_scale_codec( phymac[0].channel, (ot_uint)pkt_q->front[0]+2 );
}


ot_uint rm2_bgpkt_duration() {
 8001b98:	b510      	push	{r4, lr}
    return rm2_rxtimeout_floor(phymac[0].channel);
 8001b9a:	4b02      	ldr	r3, [pc, #8]	; (8001ba4 <rm2_bgpkt_duration+0xc>)
 8001b9c:	7898      	ldrb	r0, [r3, #2]
 8001b9e:	f7ff ffed 	bl	8001b7c <rm2_rxtimeout_floor>
}
 8001ba2:	bd10      	pop	{r4, pc}
 8001ba4:	200026c4 	.word	0x200026c4

08001ba8 <rm2_scale_codec>:


///@todo this entire function might be done in a direct lookup table, even if in blocks.
ot_uint rm2_scale_codec(ot_u8 channel_code, ot_uint buf_bytes) {
 8001ba8:	b570      	push	{r4, r5, r6, lr}
    };

    ot_int codesize;
    ot_uint miti_per_sym;

    channel_code    = (channel_code >> 4) & 3;
 8001baa:	0903      	lsrs	r3, r0, #4
 8001bac:	2003      	movs	r0, #3
 8001bae:	4018      	ands	r0, r3
    codesize        = (channel_code & 0x80) ? 4 : 5;
 8001bb0:	2505      	movs	r5, #5
    miti_per_sym    = mitipersym_chan[channel_code];
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <rm2_scale_codec+0x30>)
 8001bb4:	0042      	lsls	r2, r0, #1
 8001bb6:	189a      	adds	r2, r3, r2
 8001bb8:	8c14      	ldrh	r4, [r2, #32]
    buf_bytes       = converter[channel_code](buf_bytes, codesize);
 8001bba:	0080      	lsls	r0, r0, #2
 8001bbc:	1818      	adds	r0, r3, r0
 8001bbe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001bc0:	b208      	sxth	r0, r1
 8001bc2:	0029      	movs	r1, r5
 8001bc4:	4798      	blx	r3
    
    // + Also add Preamble & Sync Overhead
    // + Also add 4 or 5 symbols because LoRa TX-END is late-arriving by one symbol group
    buf_bytes  += RF_PARAM_PKT_OVERHEAD + codesize;
 8001bc6:	1940      	adds	r0, r0, r5
 8001bc8:	b280      	uxth	r0, r0
 8001bca:	300f      	adds	r0, #15
    
    return sub_symbols_to_ti(buf_bytes, miti_per_sym);
 8001bcc:	b200      	sxth	r0, r0
 8001bce:	0021      	movs	r1, r4
 8001bd0:	f7ff ffca 	bl	8001b68 <sub_symbols_to_ti>
}
 8001bd4:	bd70      	pop	{r4, r5, r6, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	0800a644 	.word	0x0800a644

08001bdc <rm2_pkt_duration>:
ot_uint rm2_pkt_duration(ot_queue* pkt_q) {
 8001bdc:	b510      	push	{r4, lr}
    return rm2_scale_codec( phymac[0].channel, (ot_uint)pkt_q->front[0]+2 );
 8001bde:	68c3      	ldr	r3, [r0, #12]
 8001be0:	7819      	ldrb	r1, [r3, #0]
 8001be2:	3102      	adds	r1, #2
 8001be4:	4b02      	ldr	r3, [pc, #8]	; (8001bf0 <rm2_pkt_duration+0x14>)
 8001be6:	7898      	ldrb	r0, [r3, #2]
 8001be8:	f7ff ffde 	bl	8001ba8 <rm2_scale_codec>
}
 8001bec:	bd10      	pop	{r4, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	200026c4 	.word	0x200026c4

08001bf4 <em2_encode_newpacket>:
  * has these optimized encode and decode functions.
  *
  */

void em2_encode_newpacket() {
}
 8001bf4:	4770      	bx	lr
	...

08001bf8 <em2_encode_newframe>:





void em2_encode_newframe() {
 8001bf8:	b570      	push	{r4, r5, r6, lr}
        {0, 2},             // b111 : PG/BG encoded (impossible)
        };
#   endif
    ///@todo this retransmission case is broken since state was reassigned to bit counter
    /// Case where this is a retransmission.  Don't re-encode.
    if (txq.options.ubyte[UPPER] == 0) {
 8001bfa:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <em2_encode_newframe+0x114>)
 8001bfc:	78db      	ldrb	r3, [r3, #3]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d104      	bne.n	8001c0c <em2_encode_newframe+0x14>
        em2.bytes = em2.state;
 8001c02:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <em2_encode_newframe+0x118>)
 8001c04:	2104      	movs	r1, #4
 8001c06:	5e5a      	ldrsh	r2, [r3, r1]
 8001c08:	805a      	strh	r2, [r3, #2]
#       endif

		/// Save amount of encoded bytes for this frame (last frame) in state
		em2.state = em2.bytes;
    }
}
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}
        selector = (rfctl.flags & 5) | ((phymac[0].channel >> 6) & 2);
 8001c0c:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <em2_encode_newframe+0x11c>)
 8001c0e:	785b      	ldrb	r3, [r3, #1]
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	2405      	movs	r4, #5
 8001c14:	4023      	ands	r3, r4
 8001c16:	4a40      	ldr	r2, [pc, #256]	; (8001d18 <em2_encode_newframe+0x120>)
 8001c18:	7892      	ldrb	r2, [r2, #2]
 8001c1a:	0992      	lsrs	r2, r2, #6
 8001c1c:	3c03      	subs	r4, #3
 8001c1e:	4014      	ands	r4, r2
 8001c20:	431c      	orrs	r4, r3
        txq.options.ubyte[LOWER]= frparams[selector][0];
 8001c22:	0062      	lsls	r2, r4, #1
 8001c24:	1912      	adds	r2, r2, r4
 8001c26:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <em2_encode_newframe+0x124>)
 8001c28:	189b      	adds	r3, r3, r2
 8001c2a:	2238      	movs	r2, #56	; 0x38
 8001c2c:	5c9d      	ldrb	r5, [r3, r2]
 8001c2e:	4e37      	ldr	r6, [pc, #220]	; (8001d0c <em2_encode_newframe+0x114>)
 8001c30:	70b5      	strb	r5, [r6, #2]
        txq.getcursor           = txq.front + frparams[selector][1];
 8001c32:	3339      	adds	r3, #57	; 0x39
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	68f2      	ldr	r2, [r6, #12]
 8001c38:	4694      	mov	ip, r2
 8001c3a:	4463      	add	r3, ip
 8001c3c:	6073      	str	r3, [r6, #4]
        bytes_to_crc            = q_span(&txq);
 8001c3e:	0030      	movs	r0, r6
 8001c40:	f005 fa0c 	bl	800705c <q_span>
 8001c44:	b282      	uxth	r2, r0
        txq.front[0]            = bytes_to_crc + frparams[selector][0];
 8001c46:	182b      	adds	r3, r5, r0
 8001c48:	68f1      	ldr	r1, [r6, #12]
 8001c4a:	700b      	strb	r3, [r1, #0]
        txq.front[1]            = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	68f1      	ldr	r1, [r6, #12]
 8001c50:	704b      	strb	r3, [r1, #1]
        txq.putcursor          += (frparams[selector][0] + 1);
 8001c52:	1c6b      	adds	r3, r5, #1
 8001c54:	68b1      	ldr	r1, [r6, #8]
 8001c56:	468c      	mov	ip, r1
 8001c58:	4463      	add	r3, ip
 8001c5a:	60b3      	str	r3, [r6, #8]
        em2.bytes               = bytes_to_crc + (frparams[selector][0] + 1);
 8001c5c:	18ad      	adds	r5, r5, r2
 8001c5e:	3501      	adds	r5, #1
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <em2_encode_newframe+0x118>)
 8001c62:	805d      	strh	r5, [r3, #2]
 8001c64:	2501      	movs	r5, #1
 8001c66:	4025      	ands	r5, r4
        if ((selector & 1) == 0) {
 8001c68:	d01f      	beq.n	8001caa <em2_encode_newframe+0xb2>
        if (selector == 0) {
 8001c6a:	2c00      	cmp	r4, #0
 8001c6c:	d025      	beq.n	8001cba <em2_encode_newframe+0xc2>
		else if (selector & 2) {
 8001c6e:	07a3      	lsls	r3, r4, #30
 8001c70:	d516      	bpl.n	8001ca0 <em2_encode_newframe+0xa8>
		    if (selector & 1) {
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	d024      	beq.n	8001cc0 <em2_encode_newframe+0xc8>
		        txq.front[1]= frparams[selector][2];
 8001c76:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <em2_encode_newframe+0x114>)
 8001c78:	68d9      	ldr	r1, [r3, #12]
 8001c7a:	0062      	lsls	r2, r4, #1
 8001c7c:	1912      	adds	r2, r2, r4
 8001c7e:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <em2_encode_newframe+0x124>)
 8001c80:	189b      	adds	r3, r3, r2
 8001c82:	333a      	adds	r3, #58	; 0x3a
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	704b      	strb	r3, [r1, #1]
		        em2.bytes   = 16;
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <em2_encode_newframe+0x118>)
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	805a      	strh	r2, [r3, #2]
		    hsc_init(&hsc, frparams[selector][2]);
 8001c8e:	0063      	lsls	r3, r4, #1
 8001c90:	191b      	adds	r3, r3, r4
 8001c92:	4c22      	ldr	r4, [pc, #136]	; (8001d1c <em2_encode_newframe+0x124>)
 8001c94:	18e4      	adds	r4, r4, r3
 8001c96:	343a      	adds	r4, #58	; 0x3a
 8001c98:	7821      	ldrb	r1, [r4, #0]
 8001c9a:	4821      	ldr	r0, [pc, #132]	; (8001d20 <em2_encode_newframe+0x128>)
 8001c9c:	f000 f9f0 	bl	8002080 <hsc_init>
		em2.state = em2.bytes;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <em2_encode_newframe+0x118>)
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	5e5a      	ldrsh	r2, [r3, r1]
 8001ca6:	809a      	strh	r2, [r3, #4]
}
 8001ca8:	e7af      	b.n	8001c0a <em2_encode_newframe+0x12>
            crc_init_stream(&em2.crc, True, bytes_to_crc, txq.getcursor);
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <em2_encode_newframe+0x114>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	0002      	movs	r2, r0
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	481c      	ldr	r0, [pc, #112]	; (8001d24 <em2_encode_newframe+0x12c>)
 8001cb4:	f005 f90e 	bl	8006ed4 <crc_init_stream>
 8001cb8:	e7d7      	b.n	8001c6a <em2_encode_newframe+0x72>
            em2_add_crc5();
 8001cba:	f003 fbc5 	bl	8005448 <em2_add_crc5>
 8001cbe:	e7ef      	b.n	8001ca0 <em2_encode_newframe+0xa8>
		    else if (selector & 4) {
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	4223      	tst	r3, r4
 8001cc4:	d00c      	beq.n	8001ce0 <em2_encode_newframe+0xe8>
		        txq.front[1]= frparams[selector][2];
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <em2_encode_newframe+0x114>)
 8001cc8:	68d9      	ldr	r1, [r3, #12]
 8001cca:	0062      	lsls	r2, r4, #1
 8001ccc:	1912      	adds	r2, r2, r4
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <em2_encode_newframe+0x124>)
 8001cd0:	189b      	adds	r3, r3, r2
 8001cd2:	333a      	adds	r3, #58	; 0x3a
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	704b      	strb	r3, [r1, #1]
		        em2.bytes   = 32;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <em2_encode_newframe+0x118>)
 8001cda:	2220      	movs	r2, #32
 8001cdc:	805a      	strh	r2, [r3, #2]
 8001cde:	e7d6      	b.n	8001c8e <em2_encode_newframe+0x96>
		        txq.front[1]= RATE64;
 8001ce0:	480a      	ldr	r0, [pc, #40]	; (8001d0c <em2_encode_newframe+0x114>)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	68c2      	ldr	r2, [r0, #12]
 8001ce6:	7053      	strb	r3, [r2, #1]
		        em2.bytes   = 16;
 8001ce8:	4d09      	ldr	r5, [pc, #36]	; (8001d10 <em2_encode_newframe+0x118>)
 8001cea:	3310      	adds	r3, #16
 8001cec:	806b      	strh	r3, [r5, #2]
		        em2.bytes  += hsc_octetsinframe(txq.front[1], q_span(&txq)-8);
 8001cee:	68c3      	ldr	r3, [r0, #12]
 8001cf0:	785e      	ldrb	r6, [r3, #1]
 8001cf2:	f005 f9b3 	bl	800705c <q_span>
 8001cf6:	0001      	movs	r1, r0
 8001cf8:	3908      	subs	r1, #8
 8001cfa:	b2c9      	uxtb	r1, r1
 8001cfc:	0030      	movs	r0, r6
 8001cfe:	f000 f9b1 	bl	8002064 <hsc_octetsinframe>
 8001d02:	886b      	ldrh	r3, [r5, #2]
 8001d04:	18c0      	adds	r0, r0, r3
 8001d06:	8068      	strh	r0, [r5, #2]
 8001d08:	e7c1      	b.n	8001c8e <em2_encode_newframe+0x96>
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	20002d68 	.word	0x20002d68
 8001d10:	20002684 	.word	0x20002684
 8001d14:	20002644 	.word	0x20002644
 8001d18:	200026c4 	.word	0x200026c4
 8001d1c:	0800a644 	.word	0x0800a644
 8001d20:	20002228 	.word	0x20002228
 8001d24:	2000268c 	.word	0x2000268c

08001d28 <em2_encode_data>:


void em2_encode_data(void) {
 8001d28:	b570      	push	{r4, r5, r6, lr}
/// Only encode if this if not a retransmission
    if (txq.options.ubyte[UPPER] != 0) {
 8001d2a:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <em2_encode_data+0xa8>)
 8001d2c:	78db      	ldrb	r3, [r3, #3]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d035      	beq.n	8001d9e <em2_encode_data+0x76>

        /// Do CRC of the long frame (FG/PG) or the short frame (BG)
        if (txq.options.ubyte[LOWER] != 0) {
 8001d32:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <em2_encode_data+0xa8>)
 8001d34:	789b      	ldrb	r3, [r3, #2]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00a      	beq.n	8001d50 <em2_encode_data+0x28>
            crc_calc_nstream(&em2.crc, em2.crc.count);
 8001d3a:	4826      	ldr	r0, [pc, #152]	; (8001dd4 <em2_encode_data+0xac>)
 8001d3c:	8981      	ldrh	r1, [r0, #12]
 8001d3e:	3008      	adds	r0, #8
 8001d40:	f005 f8e8 	bl	8006f14 <crc_calc_nstream>
        else {
            bgcrc8_put(txq.getcursor);
        }

#       if (M2_FEATURE(HSCODE))
        if (phymac[0].channel & 0x80) {
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <em2_encode_data+0xb0>)
 8001d46:	789b      	ldrb	r3, [r3, #2]
 8001d48:	b25b      	sxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	da35      	bge.n	8001dba <em2_encode_data+0x92>
 8001d4e:	e021      	b.n	8001d94 <em2_encode_data+0x6c>
            bgcrc8_put(txq.getcursor);
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <em2_encode_data+0xa8>)
 8001d52:	6858      	ldr	r0, [r3, #4]
 8001d54:	f002 fbe9 	bl	800452a <bgcrc8_put>
 8001d58:	e7f4      	b.n	8001d44 <em2_encode_data+0x1c>
            while (em2.bytes > 0) {
                hsc_encode(&hsc, hsc_iobuf, q_markbyte(&txq, hsc.infobytes));
 8001d5a:	4c20      	ldr	r4, [pc, #128]	; (8001ddc <em2_encode_data+0xb4>)
 8001d5c:	2306      	movs	r3, #6
 8001d5e:	5ee1      	ldrsh	r1, [r4, r3]
 8001d60:	4e1b      	ldr	r6, [pc, #108]	; (8001dd0 <em2_encode_data+0xa8>)
 8001d62:	0030      	movs	r0, r6
 8001d64:	f005 f9bd 	bl	80070e2 <q_markbyte>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	4d1d      	ldr	r5, [pc, #116]	; (8001de0 <em2_encode_data+0xb8>)
 8001d6c:	0029      	movs	r1, r5
 8001d6e:	0020      	movs	r0, r4
 8001d70:	f000 f9a2 	bl	80020b8 <hsc_encode>
                hsc_init(&hsc, txq.front[1]&7);
 8001d74:	68f3      	ldr	r3, [r6, #12]
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	2107      	movs	r1, #7
 8001d7a:	4019      	ands	r1, r3
 8001d7c:	0020      	movs	r0, r4
 8001d7e:	f000 f97f 	bl	8002080 <hsc_init>
                sx127x_burstwrite(RFREG_LR_FIFO, 16, hsc_iobuf);
 8001d82:	002a      	movs	r2, r5
 8001d84:	2110      	movs	r1, #16
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7ff f9c4 	bl	8001114 <sx127x_burstwrite>
                em2.bytes -= 16;
 8001d8c:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <em2_encode_data+0xac>)
 8001d8e:	8853      	ldrh	r3, [r2, #2]
 8001d90:	3b10      	subs	r3, #16
 8001d92:	8053      	strh	r3, [r2, #2]
            while (em2.bytes > 0) {
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <em2_encode_data+0xac>)
 8001d96:	2202      	movs	r2, #2
 8001d98:	5e9b      	ldrsh	r3, [r3, r2]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	dcdd      	bgt.n	8001d5a <em2_encode_data+0x32>
                em2.bytes  -= fill;
                sx127x_burstwrite(RFREG_LR_FIFO, fill, q_markbyte(&txq, fill));
            }
        }
    }
}
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
                ot_int fill = (em2.bytes > 32) ? 32 : em2.bytes;
 8001da0:	b214      	sxth	r4, r2
                em2.bytes  -= fill;
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <em2_encode_data+0xac>)
 8001da6:	8053      	strh	r3, [r2, #2]
                sx127x_burstwrite(RFREG_LR_FIFO, fill, q_markbyte(&txq, fill));
 8001da8:	0021      	movs	r1, r4
 8001daa:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <em2_encode_data+0xa8>)
 8001dac:	f005 f999 	bl	80070e2 <q_markbyte>
 8001db0:	0002      	movs	r2, r0
 8001db2:	b2e1      	uxtb	r1, r4
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff f9ad 	bl	8001114 <sx127x_burstwrite>
            while (em2.bytes > 0) {
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <em2_encode_data+0xac>)
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	5e9b      	ldrsh	r3, [r3, r2]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	ddec      	ble.n	8001d9e <em2_encode_data+0x76>
                ot_int fill = (em2.bytes > 32) ? 32 : em2.bytes;
 8001dc4:	1c1a      	adds	r2, r3, #0
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	ddea      	ble.n	8001da0 <em2_encode_data+0x78>
 8001dca:	2220      	movs	r2, #32
 8001dcc:	e7e8      	b.n	8001da0 <em2_encode_data+0x78>
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	20002d68 	.word	0x20002d68
 8001dd4:	20002684 	.word	0x20002684
 8001dd8:	200026c4 	.word	0x200026c4
 8001ddc:	20002228 	.word	0x20002228
 8001de0:	200002e8 	.word	0x200002e8

08001de4 <em2_decode_newpacket>:


void em2_decode_newpacket() {
/// Lora cannot support multiframe packets, so there is no difference between
/// packet and frame
}
 8001de4:	4770      	bx	lr
	...

08001de8 <em2_decode_newframe>:

void em2_decode_newframe() {
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dea:	b083      	sub	sp, #12
            5, // b101 : PG/BG (impossible)
            17, // b110 : PG, encoded
            17  // b111 : PG/BG encoded (impossible)
    };
    uint8_t selector;
    lorasf_t chansf = (phymac[0].channel >> 4) & 3;
 8001dec:	4e2a      	ldr	r6, [pc, #168]	; (8001e98 <em2_decode_newframe+0xb0>)
 8001dee:	78b2      	ldrb	r2, [r6, #2]
 8001df0:	0912      	lsrs	r2, r2, #4
 8001df2:	2503      	movs	r5, #3
 8001df4:	4015      	ands	r5, r2
#   ifdef __DECODER_DEBUG__
    hits_sv = 0;
#   endif

    /// 1. Prepare the RX Queue to receive a new frame.
    q_empty(&rxq);
 8001df6:	4829      	ldr	r0, [pc, #164]	; (8001e9c <em2_decode_newframe+0xb4>)
 8001df8:	f005 f951 	bl	800709e <q_empty>

    /// The selector value is
    selector = (rfctl.flags & 5) | ((phymac[0].channel >> 6) & 2);
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <em2_decode_newframe+0xb8>)
 8001dfe:	785b      	ldrb	r3, [r3, #1]
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	2405      	movs	r4, #5
 8001e04:	401c      	ands	r4, r3
 8001e06:	78b3      	ldrb	r3, [r6, #2]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	431c      	orrs	r4, r3
    /// provide seed information for the LLR interpolator.  Also, we need to provide
    /// default decoding setup -- lower 3 bits of front[1] are used for variable
    /// rate information.  The first frame is always RATE64, unless it's a BG frame
    /// in which case it's RATE48.
#   if (M2_FEATURE(HSCODE))
    if (selector & 2) {
 8001e10:	4222      	tst	r2, r4
 8001e12:	d125      	bne.n	8001e60 <em2_decode_newframe+0x78>
    	rxq.front[1] = rate; // initial encoding rate
    }
    else
#   endif
    {
        rxq.front[1] = 0;
 8001e14:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <em2_decode_newframe+0xb4>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	705a      	strb	r2, [r3, #1]
    }

    rxq.front[0]    = initial_bytes[selector];
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <em2_decode_newframe+0xb4>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4a20      	ldr	r2, [pc, #128]	; (8001ea4 <em2_decode_newframe+0xbc>)
 8001e22:	1910      	adds	r0, r2, r4
 8001e24:	2150      	movs	r1, #80	; 0x50
 8001e26:	5c41      	ldrb	r1, [r0, r1]
 8001e28:	7019      	strb	r1, [r3, #0]
    em2.bytes       = 0;
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <em2_decode_newframe+0xc0>)
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	8059      	strh	r1, [r3, #2]
    em2.state       = 0;
 8001e30:	8099      	strh	r1, [r3, #4]
    em2.lctl        = bits_per_lorablock[chansf];
 8001e32:	1952      	adds	r2, r2, r5
 8001e34:	3158      	adds	r1, #88	; 0x58
 8001e36:	5c52      	ldrb	r2, [r2, r1]
 8001e38:	701a      	strb	r2, [r3, #0]
    em2.crc5        = 0;
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	705a      	strb	r2, [r3, #1]

    /// BG and PG frames are fixed-length, and they are shoehorned into the
    /// generic header structure via a special operation, here.
    if (selector & (RADIO_FLAG_BG | RADIO_FLAG_PG)) {
 8001e3e:	2305      	movs	r3, #5
 8001e40:	4223      	tst	r3, r4
 8001e42:	d00b      	beq.n	8001e5c <em2_decode_newframe+0x74>
        rxq.front[1]       |= 0x20;
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <em2_decode_newframe+0xb4>)
 8001e46:	68d9      	ldr	r1, [r3, #12]
 8001e48:	784a      	ldrb	r2, [r1, #1]
 8001e4a:	2020      	movs	r0, #32
 8001e4c:	4302      	orrs	r2, r0
 8001e4e:	704a      	strb	r2, [r1, #1]
        rxq.options.ushort  = 2;
 8001e50:	2202      	movs	r2, #2
 8001e52:	805a      	strh	r2, [r3, #2]
        rxq.putcursor       = &rxq.front[2];
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	3202      	adds	r2, #2
 8001e58:	609a      	str	r2, [r3, #8]
        rxq.getcursor       = &rxq.front[2];
 8001e5a:	605a      	str	r2, [r3, #4]
    }
}
 8001e5c:	b003      	add	sp, #12
 8001e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ot_u8 rssi_nb   = sx127x_read(RFREG_LR_RSSIVALUE);
 8001e60:	201b      	movs	r0, #27
 8001e62:	f7ff f8c3 	bl	8000fec <sx127x_read>
 8001e66:	0007      	movs	r7, r0
        ot_u8 rssi_wb   = sx127x_read(RFREG_LR_RSSIWIDEBAND);
 8001e68:	202c      	movs	r0, #44	; 0x2c
 8001e6a:	f7ff f8bf 	bl	8000fec <sx127x_read>
    	hscrate_t rate  = (selector & RADIO_FLAG_BG) ? RATE48 : RATE64;
 8001e6e:	07e3      	lsls	r3, r4, #31
 8001e70:	d50f      	bpl.n	8001e92 <em2_decode_newframe+0xaa>
 8001e72:	2606      	movs	r6, #6
    	lorallr_init(&lorallr, rate, chansf, rssi_nb, rssi_wb);
 8001e74:	9000      	str	r0, [sp, #0]
 8001e76:	003b      	movs	r3, r7
 8001e78:	002a      	movs	r2, r5
 8001e7a:	0031      	movs	r1, r6
 8001e7c:	480b      	ldr	r0, [pc, #44]	; (8001eac <em2_decode_newframe+0xc4>)
 8001e7e:	f002 fa61 	bl	8004344 <lorallr_init>
    	hsc_init(&hsc, rate);
 8001e82:	0031      	movs	r1, r6
 8001e84:	480a      	ldr	r0, [pc, #40]	; (8001eb0 <em2_decode_newframe+0xc8>)
 8001e86:	f000 f8fb 	bl	8002080 <hsc_init>
    	rxq.front[1] = rate; // initial encoding rate
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <em2_decode_newframe+0xb4>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	705e      	strb	r6, [r3, #1]
 8001e90:	e7c4      	b.n	8001e1c <em2_decode_newframe+0x34>
    	hscrate_t rate  = (selector & RADIO_FLAG_BG) ? RATE48 : RATE64;
 8001e92:	2600      	movs	r6, #0
 8001e94:	e7ee      	b.n	8001e74 <em2_decode_newframe+0x8c>
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	200026c4 	.word	0x200026c4
 8001e9c:	20002d54 	.word	0x20002d54
 8001ea0:	20002644 	.word	0x20002644
 8001ea4:	0800a644 	.word	0x0800a644
 8001ea8:	20002684 	.word	0x20002684
 8001eac:	20002230 	.word	0x20002230
 8001eb0:	20002228 	.word	0x20002228

08001eb4 <em2_decode_data>:




void em2_decode_data(void) {
 8001eb4:	b570      	push	{r4, r5, r6, lr}
    int newbytes;
    int grab;
    ot_u8* data;

    /// Live encoder needs to track the predicted bit position over the air
    em2.state += em2.lctl;
 8001eb6:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <em2_decode_data+0x100>)
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	8899      	ldrh	r1, [r3, #4]
 8001ebc:	1852      	adds	r2, r2, r1
 8001ebe:	809a      	strh	r2, [r3, #4]

    /// 1. When using HSCODE FEC, we need to take the RSSI and SNR values and log them.
    ///    It's important to do this as close to the time of reception as possible.
#	if (M2_FEATURE(HSCODE))
    if (phymac[0].channel & 0x80) {
 8001ec0:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <em2_decode_data+0x104>)
 8001ec2:	789b      	ldrb	r3, [r3, #2]
 8001ec4:	b25b      	sxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db12      	blt.n	8001ef0 <em2_decode_data+0x3c>
#   endif

    /// 2. Just download whatever fresh data is in the LoRa radio and put it
    ///    on the rx queue.  After data is on the rx queue, it will be reprocessed
    ///    if it needs to be.  The implementation here has a 32 byte SPI buffer.
    rxbytes     = sx127x_read(RFREG_LR_FIFORXBYTEADDR);
 8001eca:	2025      	movs	r0, #37	; 0x25
 8001ecc:	f7ff f88e 	bl	8000fec <sx127x_read>
 8001ed0:	0004      	movs	r4, r0
    rxptr       = sx127x_read(RFREG_LR_FIFOADDRPTR);
 8001ed2:	200d      	movs	r0, #13
 8001ed4:	f7ff f88a 	bl	8000fec <sx127x_read>
    newbytes    = (int)rxbytes - (int)rxptr;
 8001ed8:	1a24      	subs	r4, r4, r0
    tim_sv[hits_sv] = LPTIM1->CNT;
    bits_sv[hits_sv] = em2.state;
    hits_sv++;
#   endif

    if (newbytes <= 0) {
 8001eda:	2c00      	cmp	r4, #0
 8001edc:	dd40      	ble.n	8001f60 <em2_decode_data+0xac>
    }

    // rxbyte-addr is at the last loaded byte, not ahead of the last loaded byte,
    // so need to increment newbytes.
    //newbytes++;
    data = rxq.front + rxq.options.ushort + em2.bytes;
 8001ede:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <em2_decode_data+0x108>)
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	885b      	ldrh	r3, [r3, #2]
 8001ee4:	4933      	ldr	r1, [pc, #204]	; (8001fb4 <em2_decode_data+0x100>)
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	5e09      	ldrsh	r1, [r1, r0]
 8001eea:	185b      	adds	r3, r3, r1
 8001eec:	18d2      	adds	r2, r2, r3
	while (newbytes > 0) {
 8001eee:	e019      	b.n	8001f24 <em2_decode_data+0x70>
        ot_u8 rssi_wb  = sx127x_read(RFREG_LR_RSSIWIDEBAND);
 8001ef0:	202c      	movs	r0, #44	; 0x2c
 8001ef2:	f7ff f87b 	bl	8000fec <sx127x_read>
 8001ef6:	0004      	movs	r4, r0
        ot_u8 rssi_nb  = sx127x_read(RFREG_LR_RSSIVALUE);
 8001ef8:	201b      	movs	r0, #27
 8001efa:	f7ff f877 	bl	8000fec <sx127x_read>
 8001efe:	0001      	movs	r1, r0
        lorallr_pushsample(&lorallr, rssi_nb, rssi_wb, em2.lctl);
 8001f00:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <em2_decode_data+0x100>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	0022      	movs	r2, r4
 8001f06:	482e      	ldr	r0, [pc, #184]	; (8001fc0 <em2_decode_data+0x10c>)
 8001f08:	f002 fa52 	bl	80043b0 <lorallr_pushsample>
 8001f0c:	e7dd      	b.n	8001eca <em2_decode_data+0x16>
	    ot_u8* loadptr;
		grab        = (newbytes > 32) ? 32 : newbytes;
		newbytes   -= grab;
 8001f0e:	1a64      	subs	r4, r4, r1
		em2.bytes  += grab;
 8001f10:	4828      	ldr	r0, [pc, #160]	; (8001fb4 <em2_decode_data+0x100>)
 8001f12:	8843      	ldrh	r3, [r0, #2]
 8001f14:	185b      	adds	r3, r3, r1
 8001f16:	8043      	strh	r3, [r0, #2]
		loadptr     = data;
		data       += grab;
 8001f18:	1855      	adds	r5, r2, r1
		sx127x_burstread(RFREG_LR_FIFO, grab, loadptr);
 8001f1a:	b2c9      	uxtb	r1, r1
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff f87d 	bl	800101c <sx127x_burstread>
		data       += grab;
 8001f22:	002a      	movs	r2, r5
	while (newbytes > 0) {
 8001f24:	2c00      	cmp	r4, #0
 8001f26:	dd04      	ble.n	8001f32 <em2_decode_data+0x7e>
		grab        = (newbytes > 32) ? 32 : newbytes;
 8001f28:	0021      	movs	r1, r4
 8001f2a:	2c20      	cmp	r4, #32
 8001f2c:	ddef      	ble.n	8001f0e <em2_decode_data+0x5a>
 8001f2e:	2120      	movs	r1, #32
 8001f30:	e7ed      	b.n	8001f0e <em2_decode_data+0x5a>
    /// 3. Raw data is in the queue.  If frame is unencoded, nothing more to do.
    ///    Encoded frames, on the other hand, require a substantial amount of
    ///    processing.  Decoding is block-based and occurs when a block is
    ///    available in the queue.  Blocks are 16 bytes.
#   if (M2_FEATURE(HSCODE))
	if (phymac[0].channel & 0x80) {
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <em2_decode_data+0x104>)
 8001f34:	789b      	ldrb	r3, [r3, #2]
 8001f36:	b25b      	sxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db12      	blt.n	8001f62 <em2_decode_data+0xae>
		}
	}
	else
#   endif
	{
	    rxq.putcursor   = rxq.getcursor + em2.bytes;
 8001f3c:	491f      	ldr	r1, [pc, #124]	; (8001fbc <em2_decode_data+0x108>)
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <em2_decode_data+0x100>)
 8001f40:	2202      	movs	r2, #2
 8001f42:	5e9a      	ldrsh	r2, [r3, r2]
 8001f44:	684b      	ldr	r3, [r1, #4]
 8001f46:	189b      	adds	r3, r3, r2
 8001f48:	608b      	str	r3, [r1, #8]
	    em2.crc5       += (em2.bytes >= 2);
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	2a01      	cmp	r2, #1
 8001f4e:	dd26      	ble.n	8001f9e <em2_decode_data+0xea>
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <em2_decode_data+0x100>)
 8001f54:	7851      	ldrb	r1, [r2, #1]
 8001f56:	185b      	adds	r3, r3, r1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	7053      	strb	r3, [r2, #1]
	    if (em2.crc5 == 1) {
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d020      	beq.n	8001fa2 <em2_decode_data+0xee>
	        if (em2_check_crc5() != 0) {
	            em2.state = -1;
	        }
	    }
	}
}
 8001f60:	bd70      	pop	{r4, r5, r6, pc}
		blcursor    = rxq.getcursor - (rxq.front + rxq.options.ushort);
 8001f62:	4916      	ldr	r1, [pc, #88]	; (8001fbc <em2_decode_data+0x108>)
 8001f64:	684b      	ldr	r3, [r1, #4]
 8001f66:	68ca      	ldr	r2, [r1, #12]
 8001f68:	8849      	ldrh	r1, [r1, #2]
 8001f6a:	1852      	adds	r2, r2, r1
 8001f6c:	1a9a      	subs	r2, r3, r2
 8001f6e:	b212      	sxth	r2, r2
		em2.crc5   += (em2.bytes >= 16);
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <em2_decode_data+0x100>)
 8001f72:	2102      	movs	r1, #2
 8001f74:	5e59      	ldrsh	r1, [r3, r1]
 8001f76:	2301      	movs	r3, #1
 8001f78:	290f      	cmp	r1, #15
 8001f7a:	dc00      	bgt.n	8001f7e <em2_decode_data+0xca>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <em2_decode_data+0x100>)
 8001f82:	7844      	ldrb	r4, [r0, #1]
 8001f84:	191b      	adds	r3, r3, r4
 8001f86:	7043      	strb	r3, [r0, #1]
		if ((em2.bytes-blcursor) >= 16) {
 8001f88:	1a8a      	subs	r2, r1, r2
 8001f8a:	2a0f      	cmp	r2, #15
 8001f8c:	dde8      	ble.n	8001f60 <em2_decode_data+0xac>
		    sys.task_RFA.event = 6;
 8001f8e:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <em2_decode_data+0x110>)
 8001f90:	2306      	movs	r3, #6
 8001f92:	7103      	strb	r3, [r0, #4]
		    sys_preempt(&sys.task_RFA, 0);
 8001f94:	3004      	adds	r0, #4
 8001f96:	2100      	movs	r1, #0
 8001f98:	f005 fe18 	bl	8007bcc <sys_preempt>
 8001f9c:	e7e0      	b.n	8001f60 <em2_decode_data+0xac>
	    em2.crc5       += (em2.bytes >= 2);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e7d6      	b.n	8001f50 <em2_decode_data+0x9c>
	        if (em2_check_crc5() != 0) {
 8001fa2:	f003 fa63 	bl	800546c <em2_check_crc5>
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	d0da      	beq.n	8001f60 <em2_decode_data+0xac>
	            em2.state = -1;
 8001faa:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <em2_decode_data+0x100>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	4252      	negs	r2, r2
 8001fb0:	809a      	strh	r2, [r3, #4]
 8001fb2:	e7d5      	b.n	8001f60 <em2_decode_data+0xac>
 8001fb4:	20002684 	.word	0x20002684
 8001fb8:	200026c4 	.word	0x200026c4
 8001fbc:	20002d54 	.word	0x20002d54
 8001fc0:	20002230 	.word	0x20002230
 8001fc4:	20002da8 	.word	0x20002da8

08001fc8 <em2_decode_endframe>:
//    0xCC, 0xA0, 0x2E, 0x42, 0x65, 0x9F, 0xDD, 0xD7, 0x27, 0xDD, 0x9F, 0x95, 0x17, 0xB7, 0x5F, 0xFF
//};
//static ot_u8 rawdata_sv[32];
//#endif

ot_u16 em2_decode_endframe() {
 8001fc8:	b510      	push	{r4, lr}
/// Perform block-code error correction if available, strip blockcoding if its
/// there (after processing), and strip CRC
    ot_u16 crc_invalid;

    /// Decoder state errors (state < 1)
    if (em2.state < 1) {
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <em2_decode_endframe+0x7c>)
 8001fcc:	2204      	movs	r2, #4
 8001fce:	5e9b      	ldrsh	r3, [r3, r2]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	dd35      	ble.n	8002040 <em2_decode_endframe+0x78>
        crc_invalid = 1;
    }
    else {
        /// In FEC mode, need to clean-up rxq after successful packet received
#       if (M2_FEATURE(HSCODE))
        if (phymac[0].channel & 0x80) {
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <em2_decode_endframe+0x80>)
 8001fd6:	789b      	ldrb	r3, [r3, #2]
 8001fd8:	b25b      	sxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db14      	blt.n	8002008 <em2_decode_endframe+0x40>
#       endif
        {
        }

        /// BG Frame has CRC8
        if (rfctl.flags & RADIO_FLAG_BG) {
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <em2_decode_endframe+0x84>)
 8001fe0:	785b      	ldrb	r3, [r3, #1]
 8001fe2:	07db      	lsls	r3, r3, #31
 8001fe4:	d51a      	bpl.n	800201c <em2_decode_endframe+0x54>
            crc_invalid = bgcrc8_check(rxq.getcursor);
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <em2_decode_endframe+0x88>)
 8001fe8:	6858      	ldr	r0, [r3, #4]
 8001fea:	f002 fa97 	bl	800451c <bgcrc8_check>
 8001fee:	b280      	uxth	r0, r0
            /// PG, FG frames have CRC16
            crc_invalid     = crc_block(&em2.crc, False, q_span(&rxq), rxq.getcursor);
            rxq.front[0]   -= 2;
            rxq.putcursor  -= 2;
        }
        rxq.back = rxq.putcursor;
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <em2_decode_endframe+0x88>)
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	611a      	str	r2, [r3, #16]

        ///@note marker that shows packet is successfully read into driver.
        rxq.front[1] |= 0x20;
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	7853      	ldrb	r3, [r2, #1]
 8001ffa:	2120      	movs	r1, #32
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	7053      	strb	r3, [r2, #1]
//        errs   += ((diffbits & 0x01) != 0);
//        loralink.max_ebn0 += errs;
//    }
//#   endif

    rxq.options.ushort = 0;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <em2_decode_endframe+0x88>)
 8002002:	2200      	movs	r2, #0
 8002004:	805a      	strh	r2, [r3, #2]
    return crc_invalid;
}
 8002006:	bd10      	pop	{r4, pc}
            rxq.getcursor   = rxq.front + rxq.options.ushort;
 8002008:	4a11      	ldr	r2, [pc, #68]	; (8002050 <em2_decode_endframe+0x88>)
 800200a:	68d3      	ldr	r3, [r2, #12]
 800200c:	8851      	ldrh	r1, [r2, #2]
 800200e:	1859      	adds	r1, r3, r1
 8002010:	6051      	str	r1, [r2, #4]
            rxq.putcursor   = rxq.front + rxq.front[0] + 1;
 8002012:	7819      	ldrb	r1, [r3, #0]
 8002014:	3101      	adds	r1, #1
 8002016:	185b      	adds	r3, r3, r1
 8002018:	6093      	str	r3, [r2, #8]
 800201a:	e7e0      	b.n	8001fde <em2_decode_endframe+0x16>
            crc_invalid     = crc_block(&em2.crc, False, q_span(&rxq), rxq.getcursor);
 800201c:	4c0c      	ldr	r4, [pc, #48]	; (8002050 <em2_decode_endframe+0x88>)
 800201e:	0020      	movs	r0, r4
 8002020:	f005 f81c 	bl	800705c <q_span>
 8002024:	0002      	movs	r2, r0
 8002026:	6863      	ldr	r3, [r4, #4]
 8002028:	2100      	movs	r1, #0
 800202a:	480a      	ldr	r0, [pc, #40]	; (8002054 <em2_decode_endframe+0x8c>)
 800202c:	f004 ff9a 	bl	8006f64 <crc_block>
            rxq.front[0]   -= 2;
 8002030:	68e2      	ldr	r2, [r4, #12]
 8002032:	7813      	ldrb	r3, [r2, #0]
 8002034:	3b02      	subs	r3, #2
 8002036:	7013      	strb	r3, [r2, #0]
            rxq.putcursor  -= 2;
 8002038:	68a3      	ldr	r3, [r4, #8]
 800203a:	3b02      	subs	r3, #2
 800203c:	60a3      	str	r3, [r4, #8]
 800203e:	e7d7      	b.n	8001ff0 <em2_decode_endframe+0x28>
        crc_invalid = 1;
 8002040:	2001      	movs	r0, #1
 8002042:	e7dd      	b.n	8002000 <em2_decode_endframe+0x38>
 8002044:	20002684 	.word	0x20002684
 8002048:	200026c4 	.word	0x200026c4
 800204c:	20002644 	.word	0x20002644
 8002050:	20002d54 	.word	0x20002d54
 8002054:	2000268c 	.word	0x2000268c

08002058 <hsc_bytesperblock>:

uint8_t hsc_bytesperblock(hscrate_t rate) {
	static const uint8_t infobits_select[8] = {
	        8, 9, 10, 11, 12, 13, 6, 6
	};
	return infobits_select[rate];
 8002058:	4b01      	ldr	r3, [pc, #4]	; (8002060 <hsc_bytesperblock+0x8>)
 800205a:	5c18      	ldrb	r0, [r3, r0]
}
 800205c:	4770      	bx	lr
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	0800a748 	.word	0x0800a748

08002064 <hsc_octetsinframe>:
	return infobits_select[rate];
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <hsc_octetsinframe+0x18>)

uint16_t hsc_octetsinframe(hscrate_t rate, uint8_t databytes) {
 8002066:	b510      	push	{r4, lr}
	uint16_t foctets;
	uint16_t block;

	block	= (uint16_t)hsc_bytesperblock(rate);
	foctets = ((uint16_t)databytes + (block-1)) / block;
 8002068:	5c1b      	ldrb	r3, [r3, r0]
 800206a:	1e58      	subs	r0, r3, #1
 800206c:	1840      	adds	r0, r0, r1
 800206e:	0019      	movs	r1, r3
 8002070:	f7fe f8d4 	bl	800021c <__divsi3>

	return (foctets << 4);
 8002074:	0100      	lsls	r0, r0, #4
 8002076:	b280      	uxth	r0, r0
}
 8002078:	bd10      	pop	{r4, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	0800a748 	.word	0x0800a748

08002080 <hsc_init>:



void hsc_init(hsc_t* h, hscrate_t rate) {
 8002080:	b510      	push	{r4, lr}
    static const uint8_t* const fbit_select[8] = {
        fbit64, fbit72, fbit80, fbit88, fbit96, fbit104, fbit48, fbit48
    };

    assert(h);
 8002082:	2800      	cmp	r0, #0
 8002084:	d009      	beq.n	800209a <hsc_init+0x1a>
    
    h->fbit        = fbit_select[rate];
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <hsc_init+0x2c>)
 8002088:	008a      	lsls	r2, r1, #2
 800208a:	189a      	adds	r2, r3, r2
    h->infobytes   = hsc_bytesperblock(rate);
 800208c:	5c5b      	ldrb	r3, [r3, r1]
    h->fbit        = fbit_select[rate];
 800208e:	6951      	ldr	r1, [r2, #20]
    h->infobits    = h->infobytes << 3;
 8002090:	00da      	lsls	r2, r3, #3
    h->fbit        = fbit_select[rate];
 8002092:	6001      	str	r1, [r0, #0]
    h->infobytes   = hsc_bytesperblock(rate);
 8002094:	80c3      	strh	r3, [r0, #6]
    h->infobits    = h->infobytes << 3;
 8002096:	8082      	strh	r2, [r0, #4]
}
 8002098:	bd10      	pop	{r4, pc}
    assert(h);
 800209a:	218c      	movs	r1, #140	; 0x8c
 800209c:	4a03      	ldr	r2, [pc, #12]	; (80020ac <hsc_init+0x2c>)
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <hsc_init+0x30>)
 80020a0:	4804      	ldr	r0, [pc, #16]	; (80020b4 <hsc_init+0x34>)
 80020a2:	3208      	adds	r2, #8
 80020a4:	0089      	lsls	r1, r1, #2
 80020a6:	f007 f80d 	bl	80090c4 <__assert_func>
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	0800a748 	.word	0x0800a748
 80020b0:	0800b50c 	.word	0x0800b50c
 80020b4:	0800b510 	.word	0x0800b510

080020b8 <hsc_encode>:
}




void hsc_encode(hsc_t* h, void* output, const uint8_t* input) {
 80020b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ba:	46de      	mov	lr, fp
 80020bc:	464e      	mov	r6, r9
 80020be:	4645      	mov	r5, r8
 80020c0:	4657      	mov	r7, sl
 80020c2:	b5e0      	push	{r5, r6, r7, lr}
 80020c4:	b087      	sub	sp, #28
 80020c6:	000c      	movs	r4, r1
 80020c8:	0006      	movs	r6, r0
 80020ca:	0015      	movs	r5, r2
    int i;
    int j;
    uint8_t x[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 80020cc:	2100      	movs	r1, #0
 80020ce:	2210      	movs	r2, #16
 80020d0:	a802      	add	r0, sp, #8
 80020d2:	f007 f82e 	bl	8009132 <memset>
    uint8_t* y;
    
    /// Zero output, and copy input to output
    ((uint32_t*)output)[0]  = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	6023      	str	r3, [r4, #0]
    ((uint32_t*)output)[1]  = 0;
 80020da:	6063      	str	r3, [r4, #4]
    ((uint32_t*)output)[2]  = 0;
 80020dc:	60a3      	str	r3, [r4, #8]
    ((uint32_t*)output)[3]  = 0;
 80020de:	60e3      	str	r3, [r4, #12]
    memcpy(output, input, h->infobytes);
 80020e0:	0020      	movs	r0, r4
 80020e2:	88f2      	ldrh	r2, [r6, #6]
 80020e4:	0029      	movs	r1, r5
 80020e6:	f006 fc2b 	bl	8008940 <ot_memcpy>
    
    /// "y" variable is linked to output and only relevant for typing purposes.
    /// Copy input to the output, and add CRC
    y               = output;
    y[h->infobytes] = crccalc(y, h->infobytes);
 80020ea:	88f3      	ldrh	r3, [r6, #6]
 80020ec:	18e0      	adds	r0, r4, r3
    while (--len >= 0) {
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d100      	bne.n	80020f4 <hsc_encode+0x3c>
 80020f2:	e0d9      	b.n	80022a8 <hsc_encode+0x1f0>
 80020f4:	0021      	movs	r1, r4
    uint8_t reg = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	4d6c      	ldr	r5, [pc, #432]	; (80022ac <hsc_encode+0x1f4>)
        reg = CRCTABLE[reg ^ *block++];
 80020fa:	780a      	ldrb	r2, [r1, #0]
 80020fc:	3101      	adds	r1, #1
 80020fe:	4053      	eors	r3, r2
 8002100:	5ceb      	ldrb	r3, [r5, r3]
    while (--len >= 0) {
 8002102:	4288      	cmp	r0, r1
 8002104:	d1f9      	bne.n	80020fa <hsc_encode+0x42>
    y[h->infobytes] = crccalc(y, h->infobytes);
 8002106:	7003      	strb	r3, [r0, #0]
    /// Polarization Stage 1: rate dependent
    ///@todo there is a bit relocation instruction on cortex M4 that can be used
    ///      to optimize this loop.  Basically, relocate a bit from y[i>>3] to
    ///      position from rseqbyte[i][1] in x[rseqbyte[i][0]]
    for (i=0; i<h->infobits+CRCBITS; i++) {
        uint8_t a = (y[i>>3] >> (7-(i&7))) & 1;
 8002108:	2207      	movs	r2, #7
    for (i=0; i<h->infobits+CRCBITS; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	88b6      	ldrh	r6, [r6, #4]
 800210e:	4868      	ldr	r0, [pc, #416]	; (80022b0 <hsc_encode+0x1f8>)
 8002110:	3606      	adds	r6, #6
 8002112:	250f      	movs	r5, #15
 8002114:	2100      	movs	r1, #0
        uint8_t a = (y[i>>3] >> (7-(i&7))) & 1;
 8002116:	4694      	mov	ip, r2
 8002118:	2701      	movs	r7, #1
 800211a:	4698      	mov	r8, r3
 800211c:	e003      	b.n	8002126 <hsc_encode+0x6e>
 800211e:	7845      	ldrb	r5, [r0, #1]
 8002120:	3002      	adds	r0, #2
 8002122:	5d53      	ldrb	r3, [r2, r5]
 8002124:	4698      	mov	r8, r3
 8002126:	4662      	mov	r2, ip
 8002128:	10cb      	asrs	r3, r1, #3
 800212a:	5ce3      	ldrb	r3, [r4, r3]
 800212c:	438a      	bics	r2, r1
 800212e:	4113      	asrs	r3, r2
        x[rseqbyte[i][0]] |= a << rseqbyte[i][1];
 8002130:	7802      	ldrb	r2, [r0, #0]
 8002132:	403b      	ands	r3, r7
 8002134:	4093      	lsls	r3, r2
 8002136:	4642      	mov	r2, r8
    for (i=0; i<h->infobits+CRCBITS; i++) {
 8002138:	3101      	adds	r1, #1
        x[rseqbyte[i][0]] |= a << rseqbyte[i][1];
 800213a:	4313      	orrs	r3, r2
 800213c:	aa02      	add	r2, sp, #8
 800213e:	5553      	strb	r3, [r2, r5]
    for (i=0; i<h->infobits+CRCBITS; i++) {
 8002140:	42b1      	cmp	r1, r6
 8002142:	ddec      	ble.n	800211e <hsc_encode+0x66>
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002144:	2301      	movs	r3, #1
 8002146:	469a      	mov	sl, r3
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002148:	333f      	adds	r3, #63	; 0x3f
 800214a:	4699      	mov	r9, r3
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 800214c:	3b20      	subs	r3, #32
 800214e:	4698      	mov	r8, r3
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 8002150:	9b05      	ldr	r3, [sp, #20]
 8002152:	9e02      	ldr	r6, [sp, #8]
 8002154:	469c      	mov	ip, r3
 8002156:	4d57      	ldr	r5, [pc, #348]	; (80022b4 <hsc_encode+0x1fc>)
 8002158:	0073      	lsls	r3, r6, #1
 800215a:	402b      	ands	r3, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 800215c:	4f56      	ldr	r7, [pc, #344]	; (80022b8 <hsc_encode+0x200>)
        ((uint32_t*)x)[i] ^= a;
 800215e:	405e      	eors	r6, r3
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 8002160:	00b3      	lsls	r3, r6, #2
 8002162:	403b      	ands	r3, r7
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 8002164:	9803      	ldr	r0, [sp, #12]
 8002166:	0021      	movs	r1, r4
        ((uint32_t*)x)[i] ^= a;
 8002168:	4073      	eors	r3, r6
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 800216a:	4c54      	ldr	r4, [pc, #336]	; (80022bc <hsc_encode+0x204>)
 800216c:	011e      	lsls	r6, r3, #4
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 800216e:	9a04      	ldr	r2, [sp, #16]
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 8002170:	4026      	ands	r6, r4
 8002172:	46a3      	mov	fp, r4
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 8002174:	0044      	lsls	r4, r0, #1
 8002176:	402c      	ands	r4, r5
        ((uint32_t*)x)[i] ^= a;
 8002178:	4044      	eors	r4, r0
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 800217a:	0050      	lsls	r0, r2, #1
 800217c:	4028      	ands	r0, r5
        ((uint32_t*)x)[i] ^= a;
 800217e:	4050      	eors	r0, r2
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 8002180:	4662      	mov	r2, ip
 8002182:	0052      	lsls	r2, r2, #1
 8002184:	402a      	ands	r2, r5
        ((uint32_t*)x)[i] ^= a;
 8002186:	4665      	mov	r5, ip
 8002188:	406a      	eors	r2, r5
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 800218a:	4d4d      	ldr	r5, [pc, #308]	; (80022c0 <hsc_encode+0x208>)
        ((uint32_t*)x)[i] ^= a;
 800218c:	4073      	eors	r3, r6
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 800218e:	46ac      	mov	ip, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 8002190:	00a5      	lsls	r5, r4, #2
 8002192:	403d      	ands	r5, r7
        ((uint32_t*)x)[i] ^= a;
 8002194:	406c      	eors	r4, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 8002196:	0085      	lsls	r5, r0, #2
 8002198:	403d      	ands	r5, r7
        ((uint32_t*)x)[i] ^= a;
 800219a:	4068      	eors	r0, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 800219c:	0095      	lsls	r5, r2, #2
 800219e:	403d      	ands	r5, r7
        ((uint32_t*)x)[i] ^= a;
 80021a0:	406a      	eors	r2, r5
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80021a2:	4665      	mov	r5, ip
 80021a4:	0a1e      	lsrs	r6, r3, #8
 80021a6:	402e      	ands	r6, r5
        ((uint32_t*)x)[i] ^= a;
 80021a8:	4073      	eors	r3, r6
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 80021aa:	465e      	mov	r6, fp
 80021ac:	0125      	lsls	r5, r4, #4
 80021ae:	4035      	ands	r5, r6
        ((uint32_t*)x)[i] ^= a;
 80021b0:	406c      	eors	r4, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 80021b2:	0105      	lsls	r5, r0, #4
 80021b4:	4035      	ands	r5, r6
        ((uint32_t*)x)[i] ^= a;
 80021b6:	4068      	eors	r0, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 80021b8:	0115      	lsls	r5, r2, #4
 80021ba:	4035      	ands	r5, r6
        ((uint32_t*)x)[i] ^= a;
 80021bc:	406a      	eors	r2, r5
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80021be:	4665      	mov	r5, ip
        uint32_t a = (((uint32_t*)x)[i] & 0xFFFF0000) >> 16;
 80021c0:	0c1e      	lsrs	r6, r3, #16
        ((uint32_t*)x)[i] ^= a;
 80021c2:	405e      	eors	r6, r3
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80021c4:	0a23      	lsrs	r3, r4, #8
 80021c6:	402b      	ands	r3, r5
        ((uint32_t*)x)[i] ^= a;
 80021c8:	405c      	eors	r4, r3
        uint32_t a = (((uint32_t*)x)[i] & 0xFFFF0000) >> 16;
 80021ca:	0c23      	lsrs	r3, r4, #16
        ((uint32_t*)x)[i] ^= a;
 80021cc:	405c      	eors	r4, r3
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80021ce:	0a03      	lsrs	r3, r0, #8
 80021d0:	402b      	ands	r3, r5
        ((uint32_t*)x)[i] ^= a;
 80021d2:	4058      	eors	r0, r3
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80021d4:	4663      	mov	r3, ip
        uint32_t a = (((uint32_t*)x)[i] & 0xFFFF0000) >> 16;
 80021d6:	0c07      	lsrs	r7, r0, #16
        ((uint32_t*)x)[i] ^= a;
 80021d8:	4047      	eors	r7, r0
 80021da:	483a      	ldr	r0, [pc, #232]	; (80022c4 <hsc_encode+0x20c>)
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80021dc:	0a15      	lsrs	r5, r2, #8
 80021de:	401d      	ands	r5, r3
 80021e0:	1c43      	adds	r3, r0, #1
 80021e2:	33ff      	adds	r3, #255	; 0xff
 80021e4:	469c      	mov	ip, r3
        ((uint32_t*)x)[i] ^= a;
 80021e6:	406a      	eors	r2, r5
        uint32_t a = (((uint32_t*)x)[i] & 0xFFFF0000) >> 16;
 80021e8:	0c15      	lsrs	r5, r2, #16
        ((uint32_t*)x)[i] ^= a;
 80021ea:	406a      	eors	r2, r5
    ((uint32_t*)x)[0] ^= ((uint32_t*)x)[1];
 80021ec:	4066      	eors	r6, r4
    ((uint32_t*)x)[2] ^= ((uint32_t*)x)[3];
 80021ee:	4057      	eors	r7, r2
    ((uint32_t*)x)[1] ^= ((uint32_t*)x)[3];
 80021f0:	4054      	eors	r4, r2
    ((uint32_t*)x)[0] ^= ((uint32_t*)x)[2];
 80021f2:	407e      	eors	r6, r7
    ((uint32_t*)x)[1] ^= ((uint32_t*)x)[3];
 80021f4:	9403      	str	r4, [sp, #12]
        ((uint32_t*)x)[i] ^= a;
 80021f6:	9205      	str	r2, [sp, #20]
    ((uint32_t*)x)[0] ^= ((uint32_t*)x)[2];
 80021f8:	9602      	str	r6, [sp, #8]
    ((uint32_t*)x)[2] ^= ((uint32_t*)x)[3];
 80021fa:	9704      	str	r7, [sp, #16]
 80021fc:	9101      	str	r1, [sp, #4]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 80021fe:	7804      	ldrb	r4, [r0, #0]
 8002200:	a902      	add	r1, sp, #8
 8002202:	7845      	ldrb	r5, [r0, #1]
 8002204:	5d0f      	ldrb	r7, [r1, r4]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002206:	7b82      	ldrb	r2, [r0, #14]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 8002208:	412f      	asrs	r7, r5
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 800220a:	7883      	ldrb	r3, [r0, #2]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 800220c:	7906      	ldrb	r6, [r0, #4]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 800220e:	5c8c      	ldrb	r4, [r1, r2]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002210:	5cca      	ldrb	r2, [r1, r3]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002212:	5d8b      	ldrb	r3, [r1, r6]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 8002214:	01f9      	lsls	r1, r7, #7
 8002216:	468b      	mov	fp, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002218:	7bc5      	ldrb	r5, [r0, #15]
 800221a:	4651      	mov	r1, sl
 800221c:	412c      	asrs	r4, r5
 800221e:	465f      	mov	r7, fp
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002220:	78c5      	ldrb	r5, [r0, #3]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002222:	400c      	ands	r4, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002224:	412a      	asrs	r2, r5
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 8002226:	7985      	ldrb	r5, [r0, #6]
 8002228:	a902      	add	r1, sp, #8
 800222a:	5d4e      	ldrb	r6, [r1, r5]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 800222c:	7945      	ldrb	r5, [r0, #5]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 800222e:	4327      	orrs	r7, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002230:	412b      	asrs	r3, r5
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 8002232:	7a05      	ldrb	r5, [r0, #8]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002234:	46bb      	mov	fp, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 8002236:	5d4d      	ldrb	r5, [r1, r5]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002238:	4649      	mov	r1, r9
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 800223a:	79c4      	ldrb	r4, [r0, #7]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 800223c:	0192      	lsls	r2, r2, #6
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 800223e:	4126      	asrs	r6, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 8002240:	7a84      	ldrb	r4, [r0, #10]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002242:	400a      	ands	r2, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 8002244:	a902      	add	r1, sp, #8
 8002246:	5d0c      	ldrb	r4, [r1, r4]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002248:	4659      	mov	r1, fp
 800224a:	4311      	orrs	r1, r2
 800224c:	468b      	mov	fp, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 800224e:	4641      	mov	r1, r8
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 8002250:	7b02      	ldrb	r2, [r0, #12]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002252:	015b      	lsls	r3, r3, #5
 8002254:	400b      	ands	r3, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 8002256:	a902      	add	r1, sp, #8
 8002258:	5c8a      	ldrb	r2, [r1, r2]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 800225a:	4659      	mov	r1, fp
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 800225c:	7a47      	ldrb	r7, [r0, #9]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 800225e:	430b      	orrs	r3, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 8002260:	413d      	asrs	r5, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 8002262:	7ac7      	ldrb	r7, [r0, #11]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 8002264:	2110      	movs	r1, #16
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 8002266:	413c      	asrs	r4, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 8002268:	7b47      	ldrb	r7, [r0, #13]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 800226a:	0136      	lsls	r6, r6, #4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 800226c:	413a      	asrs	r2, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 800226e:	400e      	ands	r6, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 8002270:	00ed      	lsls	r5, r5, #3
 8002272:	3908      	subs	r1, #8
 8002274:	400d      	ands	r5, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002276:	4333      	orrs	r3, r6
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 8002278:	3904      	subs	r1, #4
 800227a:	00a4      	lsls	r4, r4, #2
 800227c:	400c      	ands	r4, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 800227e:	432b      	orrs	r3, r5
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 8002280:	0052      	lsls	r2, r2, #1
 8002282:	3902      	subs	r1, #2
 8002284:	400a      	ands	r2, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002286:	4323      	orrs	r3, r4
 8002288:	4313      	orrs	r3, r2
 800228a:	9a01      	ldr	r2, [sp, #4]
 800228c:	3010      	adds	r0, #16
 800228e:	7013      	strb	r3, [r2, #0]
 8002290:	0013      	movs	r3, r2
 8002292:	3301      	adds	r3, #1
 8002294:	9301      	str	r3, [sp, #4]
    for (i=0, j=0; i<BLOCKLENGTH; j++) {
 8002296:	4560      	cmp	r0, ip
 8002298:	d1b1      	bne.n	80021fe <hsc_encode+0x146>
    }

    /// The encoding is written to "output" via "y"
}
 800229a:	b007      	add	sp, #28
 800229c:	bc3c      	pop	{r2, r3, r4, r5}
 800229e:	4690      	mov	r8, r2
 80022a0:	4699      	mov	r9, r3
 80022a2:	46a2      	mov	sl, r4
 80022a4:	46ab      	mov	fp, r5
 80022a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t reg = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	e72c      	b.n	8002106 <hsc_encode+0x4e>
 80022ac:	0800ac3c 	.word	0x0800ac3c
 80022b0:	0800a9bd 	.word	0x0800a9bd
 80022b4:	aaaaaaaa 	.word	0xaaaaaaaa
 80022b8:	cccccccc 	.word	0xcccccccc
 80022bc:	f0f0f0f0 	.word	0xf0f0f0f0
 80022c0:	00ff00ff 	.word	0x00ff00ff
 80022c4:	0800ab3c 	.word	0x0800ab3c

080022c8 <hsc_decode>:



uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 80022c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ca:	46de      	mov	lr, fp
 80022cc:	4657      	mov	r7, sl
 80022ce:	464e      	mov	r6, r9
 80022d0:	4645      	mov	r5, r8
 80022d2:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t crcreg;
    int i;
    int num_paths;
    
    /// Zero intermediate buffers
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 80022d4:	4f8b      	ldr	r7, [pc, #556]	; (8002504 <hsc_decode+0x23c>)
uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 80022d6:	b099      	sub	sp, #100	; 0x64
 80022d8:	9008      	str	r0, [sp, #32]
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 80022da:	0038      	movs	r0, r7
uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 80022dc:	910b      	str	r1, [sp, #44]	; 0x2c
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 80022de:	301c      	adds	r0, #28
uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 80022e0:	920c      	str	r2, [sp, #48]	; 0x30
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 80022e2:	2100      	movs	r1, #0
 80022e4:	2207      	movs	r2, #7
 80022e6:	f006 fb5f 	bl	80089a8 <ot_memset_4>
    ot_memset_4(PRIBIT(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 80022ea:	0038      	movs	r0, r7
 80022ec:	2207      	movs	r2, #7
 80022ee:	2100      	movs	r1, #0
 80022f0:	f006 fb5a 	bl	80089a8 <ot_memset_4>
    ot_memset_4(PM(h), 0, LISTSIZE/4);
 80022f4:	0038      	movs	r0, r7
 80022f6:	2201      	movs	r2, #1
 80022f8:	2100      	movs	r1, #0
 80022fa:	3038      	adds	r0, #56	; 0x38
 80022fc:	f006 fb54 	bl	80089a8 <ot_memset_4>
    /// num_paths intializes as 1, will expand to LISTSIZE
    num_paths = 1;

    /// Outer Decoding Loop.
    /// Runs once per each bit in the Block (128 iteration)
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 8002300:	2100      	movs	r1, #0
 8002302:	9105      	str	r1, [sp, #20]
    num_paths = 1;
 8002304:	3101      	adds	r1, #1
 8002306:	468a      	mov	sl, r1
    PRIORITY(h)[0] = 0;
 8002308:	2348      	movs	r3, #72	; 0x48
 800230a:	2200      	movs	r2, #0
                // update new paths dependencies
                // - deepest layers are taken from parent
                // - all bits are copied
                if (l != lr) {
                    int lmd = max_lmd;
                    switch (max_lmd-min_lmd) {
 800230c:	46d3      	mov	fp, sl
 800230e:	497e      	ldr	r1, [pc, #504]	; (8002508 <hsc_decode+0x240>)
    PRIORITY(h)[0] = 0;
 8002310:	54fa      	strb	r2, [r7, r3]
 8002312:	910a      	str	r1, [sp, #40]	; 0x28
 8002314:	497d      	ldr	r1, [pc, #500]	; (800250c <hsc_decode+0x244>)
                    switch (max_lmd-min_lmd) {
 8002316:	4b7e      	ldr	r3, [pc, #504]	; (8002510 <hsc_decode+0x248>)
 8002318:	9102      	str	r1, [sp, #8]
 800231a:	497e      	ldr	r1, [pc, #504]	; (8002514 <hsc_decode+0x24c>)
 800231c:	9312      	str	r3, [sp, #72]	; 0x48
 800231e:	9106      	str	r1, [sp, #24]
 8002320:	497d      	ldr	r1, [pc, #500]	; (8002518 <hsc_decode+0x250>)
 8002322:	9109      	str	r1, [sp, #36]	; 0x24
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 8002324:	497d      	ldr	r1, [pc, #500]	; (800251c <hsc_decode+0x254>)
 8002326:	910d      	str	r1, [sp, #52]	; 0x34
            int min_lmd = minlambda_lut[phi];
 8002328:	497d      	ldr	r1, [pc, #500]	; (8002520 <hsc_decode+0x258>)
 800232a:	9110      	str	r1, [sp, #64]	; 0x40
                        case 1: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
                        case 0: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];
                       default: break;
                    }
                    lmd = max_lmd;
                    switch (max_lmd) {
 800232c:	497d      	ldr	r1, [pc, #500]	; (8002524 <hsc_decode+0x25c>)
 800232e:	9111      	str	r1, [sp, #68]	; 0x44
        int next_pt     = (1 << lmd0);
 8002330:	2201      	movs	r2, #1
        int lmd0        = lambda_lut[phi];
 8002332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002334:	9905      	ldr	r1, [sp, #20]
 8002336:	5c58      	ldrb	r0, [r3, r1]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8002338:	2302      	movs	r3, #2
        int next_pt     = (1 << lmd0);
 800233a:	4082      	lsls	r2, r0
        bool use_gfunc  = (bool)(phi & next_pt);
 800233c:	4011      	ands	r1, r2
        int next_pt     = (1 << lmd0);
 800233e:	4694      	mov	ip, r2
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8002340:	4083      	lsls	r3, r0
        bool use_gfunc  = (bool)(phi & next_pt);
 8002342:	1e4a      	subs	r2, r1, #1
 8002344:	4191      	sbcs	r1, r2
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8002346:	1e5a      	subs	r2, r3, #1
        bool use_gfunc  = (bool)(phi & next_pt);
 8002348:	b2c9      	uxtb	r1, r1
        int lmd0        = lambda_lut[phi];
 800234a:	9004      	str	r0, [sp, #16]
        bool use_gfunc  = (bool)(phi & next_pt);
 800234c:	9103      	str	r1, [sp, #12]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 800234e:	2a00      	cmp	r2, #0
 8002350:	dc00      	bgt.n	8002354 <hsc_decode+0x8c>
 8002352:	e0f0      	b.n	8002536 <hsc_decode+0x26e>
 8002354:	4974      	ldr	r1, [pc, #464]	; (8002528 <hsc_decode+0x260>)
 8002356:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002358:	4688      	mov	r8, r1
 800235a:	4443      	add	r3, r8
 800235c:	46a8      	mov	r8, r5
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 800235e:	4659      	mov	r1, fp
 8002360:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	4443      	add	r3, r8
 8002366:	46a8      	mov	r8, r5
 8002368:	1e4c      	subs	r4, r1, #1
 800236a:	4970      	ldr	r1, [pc, #448]	; (800252c <hsc_decode+0x264>)
 800236c:	00d0      	lsls	r0, r2, #3
 800236e:	9d02      	ldr	r5, [sp, #8]
 8002370:	1841      	adds	r1, r0, r1
 8002372:	4441      	add	r1, r8
 8002374:	46a8      	mov	r8, r5
 8002376:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002378:	4440      	add	r0, r8
 800237a:	46a8      	mov	r8, r5
 800237c:	4665      	mov	r5, ip
 800237e:	00a4      	lsls	r4, r4, #2
 8002380:	4444      	add	r4, r8
 8002382:	9407      	str	r4, [sp, #28]
 8002384:	0054      	lsls	r4, r2, #1
 8002386:	9400      	str	r4, [sp, #0]
 8002388:	9501      	str	r5, [sp, #4]
 800238a:	46bc      	mov	ip, r7
 800238c:	9c00      	ldr	r4, [sp, #0]
 800238e:	e031      	b.n	80023f4 <hsc_decode+0x12c>
    llr_t a_inv = -llr_layer_a;
 8002390:	426f      	negs	r7, r5
 8002392:	46b8      	mov	r8, r7
    llr_t b_inv = -llr_layer_b;
 8002394:	4277      	negs	r7, r6
 8002396:	46b9      	mov	r9, r7
    if (llr_layer_a < llr_layer_b) {
 8002398:	42b5      	cmp	r5, r6
 800239a:	da00      	bge.n	800239e <hsc_decode+0xd6>
 800239c:	e094      	b.n	80024c8 <hsc_decode+0x200>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 800239e:	0035      	movs	r5, r6
 80023a0:	4546      	cmp	r6, r8
 80023a2:	da00      	bge.n	80023a6 <hsc_decode+0xde>
 80023a4:	4645      	mov	r5, r8
				for (int l=0; l<num_paths; l++) {
 80023a6:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80023a8:	601d      	str	r5, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 80023aa:	2c01      	cmp	r4, #1
 80023ac:	d015      	beq.n	80023da <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 80023ae:	0035      	movs	r5, r6
 80023b0:	4546      	cmp	r6, r8
 80023b2:	da00      	bge.n	80023b6 <hsc_decode+0xee>
 80023b4:	4645      	mov	r5, r8
				for (int l=0; l<num_paths; l++) {
 80023b6:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80023b8:	605d      	str	r5, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 80023ba:	2c02      	cmp	r4, #2
 80023bc:	d00d      	beq.n	80023da <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 80023be:	0035      	movs	r5, r6
 80023c0:	4546      	cmp	r6, r8
 80023c2:	da00      	bge.n	80023c6 <hsc_decode+0xfe>
 80023c4:	4645      	mov	r5, r8
				for (int l=0; l<num_paths; l++) {
 80023c6:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80023c8:	609d      	str	r5, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 80023ca:	2c03      	cmp	r4, #3
 80023cc:	d005      	beq.n	80023da <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 80023ce:	46b1      	mov	r9, r6
 80023d0:	4546      	cmp	r6, r8
 80023d2:	da00      	bge.n	80023d6 <hsc_decode+0x10e>
 80023d4:	46c1      	mov	r9, r8
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80023d6:	464c      	mov	r4, r9
 80023d8:	60dc      	str	r4, [r3, #12]
            if (beta == next_pt) {
 80023da:	9c01      	ldr	r4, [sp, #4]
 80023dc:	4294      	cmp	r4, r2
 80023de:	d056      	beq.n	800248e <hsc_decode+0x1c6>
 80023e0:	9c00      	ldr	r4, [sp, #0]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 80023e2:	3a01      	subs	r2, #1
 80023e4:	3c02      	subs	r4, #2
 80023e6:	9400      	str	r4, [sp, #0]
 80023e8:	3b10      	subs	r3, #16
 80023ea:	3808      	subs	r0, #8
 80023ec:	3908      	subs	r1, #8
 80023ee:	2a00      	cmp	r2, #0
 80023f0:	d100      	bne.n	80023f4 <hsc_decode+0x12c>
 80023f2:	e09f      	b.n	8002534 <hsc_decode+0x26c>
			if (beta_x2 >= BLOCKLENGTH) {
 80023f4:	2c7f      	cmp	r4, #127	; 0x7f
 80023f6:	dc01      	bgt.n	80023fc <hsc_decode+0x134>
 80023f8:	f000 fd10 	bl	8002e1c <hsc_decode+0xb54>
					if (use_gfunc) {
 80023fc:	9f03      	ldr	r7, [sp, #12]
				llr_t llr0  = llrinput[beta_e];
 80023fe:	680d      	ldr	r5, [r1, #0]
				llr_t llr1  = llrinput[beta_e+1];
 8002400:	684e      	ldr	r6, [r1, #4]
					if (use_gfunc) {
 8002402:	2f00      	cmp	r7, #0
 8002404:	d0c4      	beq.n	8002390 <hsc_decode+0xc8>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002406:	9f04      	ldr	r7, [sp, #16]
 8002408:	00bf      	lsls	r7, r7, #2
 800240a:	46b8      	mov	r8, r7
 800240c:	4667      	mov	r7, ip
 800240e:	4644      	mov	r4, r8
 8002410:	5d3c      	ldrb	r4, [r7, r4]
 8002412:	46a2      	mov	sl, r4
        llr_layer_a = -llr_layer_a;
 8002414:	426c      	negs	r4, r5
 8002416:	46a1      	mov	r9, r4
    if (bit_layer) {
 8002418:	4654      	mov	r4, sl
 800241a:	5d04      	ldrb	r4, [r0, r4]
 800241c:	2c00      	cmp	r4, #0
 800241e:	d100      	bne.n	8002422 <hsc_decode+0x15a>
				llr_t llr0  = llrinput[beta_e];
 8002420:	46a9      	mov	r9, r5
    return (llr_layer_b + llr_layer_a);
 8002422:	44b1      	add	r9, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002424:	464c      	mov	r4, r9
 8002426:	601c      	str	r4, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 8002428:	465c      	mov	r4, fp
 800242a:	2c01      	cmp	r4, #1
 800242c:	d0d5      	beq.n	80023da <hsc_decode+0x112>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800242e:	46e1      	mov	r9, ip
 8002430:	44c1      	add	r9, r8
 8002432:	464c      	mov	r4, r9
 8002434:	7864      	ldrb	r4, [r4, #1]
 8002436:	46a2      	mov	sl, r4
        llr_layer_a = -llr_layer_a;
 8002438:	426c      	negs	r4, r5
 800243a:	46a1      	mov	r9, r4
    if (bit_layer) {
 800243c:	4654      	mov	r4, sl
 800243e:	5d04      	ldrb	r4, [r0, r4]
 8002440:	2c00      	cmp	r4, #0
 8002442:	d100      	bne.n	8002446 <hsc_decode+0x17e>
				llr_t llr0  = llrinput[beta_e];
 8002444:	46a9      	mov	r9, r5
    return (llr_layer_b + llr_layer_a);
 8002446:	44b1      	add	r9, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002448:	464c      	mov	r4, r9
 800244a:	605c      	str	r4, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 800244c:	465c      	mov	r4, fp
 800244e:	2c02      	cmp	r4, #2
 8002450:	d0c3      	beq.n	80023da <hsc_decode+0x112>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002452:	46e1      	mov	r9, ip
 8002454:	44c1      	add	r9, r8
 8002456:	464c      	mov	r4, r9
 8002458:	78a4      	ldrb	r4, [r4, #2]
 800245a:	46a2      	mov	sl, r4
        llr_layer_a = -llr_layer_a;
 800245c:	426c      	negs	r4, r5
 800245e:	46a1      	mov	r9, r4
    if (bit_layer) {
 8002460:	4654      	mov	r4, sl
 8002462:	5d04      	ldrb	r4, [r0, r4]
 8002464:	2c00      	cmp	r4, #0
 8002466:	d100      	bne.n	800246a <hsc_decode+0x1a2>
				llr_t llr0  = llrinput[beta_e];
 8002468:	46a9      	mov	r9, r5
    return (llr_layer_b + llr_layer_a);
 800246a:	44b1      	add	r9, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800246c:	464c      	mov	r4, r9
 800246e:	609c      	str	r4, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 8002470:	465c      	mov	r4, fp
 8002472:	2c03      	cmp	r4, #3
 8002474:	d0b1      	beq.n	80023da <hsc_decode+0x112>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002476:	44e0      	add	r8, ip
 8002478:	4644      	mov	r4, r8
 800247a:	78e4      	ldrb	r4, [r4, #3]
    if (bit_layer) {
 800247c:	5d04      	ldrb	r4, [r0, r4]
 800247e:	2c00      	cmp	r4, #0
 8002480:	d000      	beq.n	8002484 <hsc_decode+0x1bc>
        llr_layer_a = -llr_layer_a;
 8002482:	426d      	negs	r5, r5
    return (llr_layer_b + llr_layer_a);
 8002484:	1975      	adds	r5, r6, r5
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002486:	60dd      	str	r5, [r3, #12]
            if (beta == next_pt) {
 8002488:	9c01      	ldr	r4, [sp, #4]
 800248a:	4294      	cmp	r4, r2
 800248c:	d1a8      	bne.n	80023e0 <hsc_decode+0x118>
                use_gfunc   = phi & next_pt;
 800248e:	9d05      	ldr	r5, [sp, #20]
                next_pt   >>= 1;
 8002490:	1064      	asrs	r4, r4, #1
                use_gfunc   = phi & next_pt;
 8002492:	4025      	ands	r5, r4
 8002494:	1e6e      	subs	r6, r5, #1
 8002496:	41b5      	sbcs	r5, r6
                next_pt   >>= 1;
 8002498:	9401      	str	r4, [sp, #4]
                use_gfunc   = phi & next_pt;
 800249a:	b2ec      	uxtb	r4, r5
 800249c:	9403      	str	r4, [sp, #12]
                if (--lmd0 >= 0) {
 800249e:	9c04      	ldr	r4, [sp, #16]
 80024a0:	3c01      	subs	r4, #1
 80024a2:	9404      	str	r4, [sp, #16]
 80024a4:	d49c      	bmi.n	80023e0 <hsc_decode+0x118>
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 80024a6:	9c04      	ldr	r4, [sp, #16]
 80024a8:	00a5      	lsls	r5, r4, #2
 80024aa:	4c21      	ldr	r4, [pc, #132]	; (8002530 <hsc_decode+0x268>)
 80024ac:	46a0      	mov	r8, r4
 80024ae:	44a8      	add	r8, r5
 80024b0:	4644      	mov	r4, r8
 80024b2:	6824      	ldr	r4, [r4, #0]
 80024b4:	46a1      	mov	r9, r4
 80024b6:	9c07      	ldr	r4, [sp, #28]
 80024b8:	6b65      	ldr	r5, [r4, #52]	; 0x34
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 80024ba:	6c66      	ldr	r6, [r4, #68]	; 0x44
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 80024bc:	464c      	mov	r4, r9
 80024be:	4025      	ands	r5, r4
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 80024c0:	4644      	mov	r4, r8
 80024c2:	4335      	orrs	r5, r6
 80024c4:	6025      	str	r5, [r4, #0]
 80024c6:	e78b      	b.n	80023e0 <hsc_decode+0x118>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 80024c8:	46aa      	mov	sl, r5
 80024ca:	4546      	cmp	r6, r8
 80024cc:	dc00      	bgt.n	80024d0 <hsc_decode+0x208>
    llr_t b_inv = -llr_layer_b;
 80024ce:	46ba      	mov	sl, r7
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80024d0:	4654      	mov	r4, sl
 80024d2:	601c      	str	r4, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 80024d4:	465c      	mov	r4, fp
 80024d6:	2c01      	cmp	r4, #1
 80024d8:	d100      	bne.n	80024dc <hsc_decode+0x214>
 80024da:	e77e      	b.n	80023da <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 80024dc:	46aa      	mov	sl, r5
 80024de:	4546      	cmp	r6, r8
 80024e0:	dc00      	bgt.n	80024e4 <hsc_decode+0x21c>
    llr_t b_inv = -llr_layer_b;
 80024e2:	46ca      	mov	sl, r9
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80024e4:	4654      	mov	r4, sl
 80024e6:	605c      	str	r4, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 80024e8:	465c      	mov	r4, fp
 80024ea:	2c02      	cmp	r4, #2
 80024ec:	d100      	bne.n	80024f0 <hsc_decode+0x228>
 80024ee:	e774      	b.n	80023da <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 80024f0:	4546      	cmp	r6, r8
 80024f2:	dc00      	bgt.n	80024f6 <hsc_decode+0x22e>
 80024f4:	e212      	b.n	800291c <hsc_decode+0x654>
				for (int l=0; l<num_paths; l++) {
 80024f6:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80024f8:	609d      	str	r5, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 80024fa:	46a9      	mov	r9, r5
 80024fc:	2c03      	cmp	r4, #3
 80024fe:	d000      	beq.n	8002502 <hsc_decode+0x23a>
 8002500:	e769      	b.n	80023d6 <hsc_decode+0x10e>
 8002502:	e76a      	b.n	80023da <hsc_decode+0x112>
 8002504:	200002f8 	.word	0x200002f8
 8002508:	0800a93c 	.word	0x0800a93c
 800250c:	20000570 	.word	0x20000570
 8002510:	0800a6bc 	.word	0x0800a6bc
 8002514:	20000370 	.word	0x20000370
 8002518:	20000970 	.word	0x20000970
 800251c:	0800a748 	.word	0x0800a748
 8002520:	0800a8bc 	.word	0x0800a8bc
 8002524:	0800a6d8 	.word	0x0800a6d8
 8002528:	0fffffff 	.word	0x0fffffff
 800252c:	fffffe00 	.word	0xfffffe00
 8002530:	20000314 	.word	0x20000314
 8002534:	4667      	mov	r7, ip
        if (h->fbit[phi]) {
 8002536:	9b08      	ldr	r3, [sp, #32]
 8002538:	9a05      	ldr	r2, [sp, #20]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d100      	bne.n	8002544 <hsc_decode+0x27c>
 8002542:	e1f2      	b.n	800292a <hsc_decode+0x662>
            switch (num_paths-1) {
 8002544:	465b      	mov	r3, fp
 8002546:	3b01      	subs	r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <hsc_decode+0x288>
 800254c:	f000 fc63 	bl	8002e16 <hsc_decode+0xb4e>
 8002550:	dc01      	bgt.n	8002556 <hsc_decode+0x28e>
 8002552:	f000 fc49 	bl	8002de8 <hsc_decode+0xb20>
 8002556:	2b02      	cmp	r3, #2
 8002558:	d101      	bne.n	800255e <hsc_decode+0x296>
 800255a:	f000 fc59 	bl	8002e10 <hsc_decode+0xb48>
 800255e:	2b03      	cmp	r3, #3
 8002560:	d118      	bne.n	8002594 <hsc_decode+0x2cc>
                case 3: if (LLR(h)[1][3] < 0) { PM(h)[3] -= LLR(h)[1][3]; }
 8002562:	4a58      	ldr	r2, [pc, #352]	; (80026c4 <hsc_decode+0x3fc>)
 8002564:	69d3      	ldr	r3, [r2, #28]
 8002566:	2b00      	cmp	r3, #0
 8002568:	da02      	bge.n	8002570 <hsc_decode+0x2a8>
 800256a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800256c:	1acb      	subs	r3, r1, r3
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
                case 2: if (LLR(h)[1][2] < 0) { PM(h)[2] -= LLR(h)[1][2]; }
 8002570:	6993      	ldr	r3, [r2, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	da02      	bge.n	800257c <hsc_decode+0x2b4>
 8002576:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002578:	1acb      	subs	r3, r1, r3
 800257a:	643b      	str	r3, [r7, #64]	; 0x40
                case 1: if (LLR(h)[1][1] < 0) { PM(h)[1] -= LLR(h)[1][1]; }
 800257c:	6953      	ldr	r3, [r2, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	da02      	bge.n	8002588 <hsc_decode+0x2c0>
 8002582:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002584:	1acb      	subs	r3, r1, r3
 8002586:	63fb      	str	r3, [r7, #60]	; 0x3c
                case 0: if (LLR(h)[1][0] < 0) { PM(h)[0] -= LLR(h)[1][0]; }
 8002588:	6913      	ldr	r3, [r2, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	da02      	bge.n	8002594 <hsc_decode+0x2cc>
 800258e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	63bb      	str	r3, [r7, #56]	; 0x38
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 8002594:	2601      	movs	r6, #1
 8002596:	9c02      	ldr	r4, [sp, #8]
 8002598:	2100      	movs	r1, #0
 800259a:	46a4      	mov	ip, r4
 800259c:	9805      	ldr	r0, [sp, #20]
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 800259e:	4a4a      	ldr	r2, [pc, #296]	; (80026c8 <hsc_decode+0x400>)
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 80025a0:	4006      	ands	r6, r0
 80025a2:	1cb3      	adds	r3, r6, #2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4463      	add	r3, ip
 80025a8:	6019      	str	r1, [r3, #0]
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 80025aa:	9906      	ldr	r1, [sp, #24]
 80025ac:	0083      	lsls	r3, r0, #2
 80025ae:	50ca      	str	r2, [r1, r3]
            }
        }


        // update bit tree
        if ((phi & 1) == 0) {
 80025b0:	2e00      	cmp	r6, #0
 80025b2:	d000      	beq.n	80025b6 <hsc_decode+0x2ee>
 80025b4:	e396      	b.n	8002ce4 <hsc_decode+0xa1c>
#           if WORDIFY && (LISTSIZE==4)
            *(uint32_t*)PRIBIT(h)[0] = 0x03020100;
 80025b6:	4b44      	ldr	r3, [pc, #272]	; (80026c8 <hsc_decode+0x400>)
 80025b8:	603b      	str	r3, [r7, #0]
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 80025ba:	9b05      	ldr	r3, [sp, #20]
 80025bc:	3301      	adds	r3, #1
 80025be:	9305      	str	r3, [sp, #20]
 80025c0:	2b80      	cmp	r3, #128	; 0x80
 80025c2:	d000      	beq.n	80025c6 <hsc_decode+0x2fe>
 80025c4:	e6b4      	b.n	8002330 <hsc_decode+0x68>
 80025c6:	46da      	mov	sl, fp
    *(uint32_t*)&indexOut[4] = 0x07060504;
 80025c8:	4658      	mov	r0, fp
    *(uint32_t*)&indexOut[0] = 0x03020100;
 80025ca:	4a3f      	ldr	r2, [pc, #252]	; (80026c8 <hsc_decode+0x400>)
    *(uint32_t*)&indexOut[4] = 0x07060504;
 80025cc:	4b3f      	ldr	r3, [pc, #252]	; (80026cc <hsc_decode+0x404>)
    *(uint32_t*)&indexOut[0] = 0x03020100;
 80025ce:	677a      	str	r2, [r7, #116]	; 0x74
    *(uint32_t*)&indexOut[4] = 0x07060504;
 80025d0:	67bb      	str	r3, [r7, #120]	; 0x78
        gap    -= (gap > 1);
 80025d2:	2301      	movs	r3, #1
 80025d4:	2801      	cmp	r0, #1
 80025d6:	dc00      	bgt.n	80025da <hsc_decode+0x312>
 80025d8:	2300      	movs	r3, #0
 80025da:	1ac0      	subs	r0, r0, r3
        sorted  = (gap == 1);
 80025dc:	1e43      	subs	r3, r0, #1
 80025de:	425a      	negs	r2, r3
 80025e0:	4153      	adcs	r3, r2
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	469c      	mov	ip, r3
        for (i=0, j=gap; j<length; i++, j++) {
 80025e6:	4582      	cmp	sl, r0
 80025e8:	dd15      	ble.n	8002616 <hsc_decode+0x34e>
 80025ea:	003b      	movs	r3, r7
 80025ec:	4652      	mov	r2, sl
 80025ee:	3374      	adds	r3, #116	; 0x74
 80025f0:	18d6      	adds	r6, r2, r3
 80025f2:	1a36      	subs	r6, r6, r0
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 80025f4:	781c      	ldrb	r4, [r3, #0]
 80025f6:	5c1d      	ldrb	r5, [r3, r0]
 80025f8:	00a1      	lsls	r1, r4, #2
 80025fa:	00aa      	lsls	r2, r5, #2
 80025fc:	1879      	adds	r1, r7, r1
 80025fe:	18ba      	adds	r2, r7, r2
 8002600:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8002602:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002604:	4291      	cmp	r1, r2
 8002606:	dd03      	ble.n	8002610 <hsc_decode+0x348>
                sorted      = false;
 8002608:	2200      	movs	r2, #0
 800260a:	4694      	mov	ip, r2
                indexOut[i] = indexOut[j];
 800260c:	701d      	strb	r5, [r3, #0]
                indexOut[j] = k;
 800260e:	541c      	strb	r4, [r3, r0]
 8002610:	3301      	adds	r3, #1
        for (i=0, j=gap; j<length; i++, j++) {
 8002612:	42b3      	cmp	r3, r6
 8002614:	d1ee      	bne.n	80025f4 <hsc_decode+0x32c>
    } while (!sorted);
 8002616:	4663      	mov	r3, ip
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0da      	beq.n	80025d2 <hsc_decode+0x30a>

    /// CRC Path Check process
    /// The BITMEM buffer is reused here.  It is not needed anymore.
    ///@note DECMSG(h) replaced with BITMEM(h)
    crcreg = 0;
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 800261c:	2300      	movs	r3, #0
 800261e:	9315      	str	r3, [sp, #84]	; 0x54
        reg = CRCTABLE[reg ^ *block++];
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <hsc_decode+0x408>)
        int lp = INDEX(h)[correct_path];
        int phi;

        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
            DECMSG(h)[phi]    = MAP(h)[phi][lp] >> 7;
            lp                  = MAP(h)[phi][lp] & 0x7F;
 8002622:	267f      	movs	r6, #127	; 0x7f
        reg = CRCTABLE[reg ^ *block++];
 8002624:	9310      	str	r3, [sp, #64]	; 0x40
        int lp = INDEX(h)[correct_path];
 8002626:	4653      	mov	r3, sl
 8002628:	3774      	adds	r7, #116	; 0x74
 800262a:	9317      	str	r3, [sp, #92]	; 0x5c
 800262c:	9b02      	ldr	r3, [sp, #8]
 800262e:	9716      	str	r7, [sp, #88]	; 0x58
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 8002630:	207f      	movs	r0, #127	; 0x7f
        int lp = INDEX(h)[correct_path];
 8002632:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002634:	9915      	ldr	r1, [sp, #84]	; 0x54
 8002636:	5c89      	ldrb	r1, [r1, r2]
 8002638:	9a06      	ldr	r2, [sp, #24]
            DECMSG(h)[phi]    = MAP(h)[phi][lp] >> 7;
 800263a:	0084      	lsls	r4, r0, #2
 800263c:	1914      	adds	r4, r2, r4
 800263e:	5c61      	ldrb	r1, [r4, r1]
 8002640:	09cc      	lsrs	r4, r1, #7
 8002642:	541c      	strb	r4, [r3, r0]
            lp                  = MAP(h)[phi][lp] & 0x7F;
 8002644:	4031      	ands	r1, r6
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 8002646:	3801      	subs	r0, #1
 8002648:	d2f7      	bcs.n	800263a <hsc_decode+0x372>
        }
        
        /// Bytewise CRC compute.
        /// Requires loading the bit data into a byte buffer.
        /// On success, the successful bytewise decoding is in the output[]
        for (i=0, phi=0; phi<h->infobits; i++) {
 800264a:	9a08      	ldr	r2, [sp, #32]
 800264c:	8891      	ldrh	r1, [r2, #4]
 800264e:	2900      	cmp	r1, #0
 8002650:	d101      	bne.n	8002656 <hsc_decode+0x38e>
 8002652:	f000 fe2d 	bl	80032b0 <hsc_decode+0xfe8>
 8002656:	223f      	movs	r2, #63	; 0x3f
 8002658:	2479      	movs	r4, #121	; 0x79
 800265a:	920d      	str	r2, [sp, #52]	; 0x34
 800265c:	3240      	adds	r2, #64	; 0x40
 800265e:	4691      	mov	r9, r2
 8002660:	3a05      	subs	r2, #5
 8002662:	920c      	str	r2, [sp, #48]	; 0x30
 8002664:	4a1b      	ldr	r2, [pc, #108]	; (80026d4 <hsc_decode+0x40c>)
 8002666:	940a      	str	r4, [sp, #40]	; 0x28
 8002668:	9200      	str	r2, [sp, #0]
 800266a:	2201      	movs	r2, #1
 800266c:	3404      	adds	r4, #4
 800266e:	9404      	str	r4, [sp, #16]
 8002670:	3c07      	subs	r4, #7
 8002672:	9409      	str	r4, [sp, #36]	; 0x24
 8002674:	3405      	adds	r4, #5
 8002676:	9402      	str	r4, [sp, #8]
 8002678:	3c06      	subs	r4, #6
 800267a:	9407      	str	r4, [sp, #28]
 800267c:	3402      	adds	r4, #2
 800267e:	9401      	str	r4, [sp, #4]
 8002680:	3c09      	subs	r4, #9
 8002682:	940f      	str	r4, [sp, #60]	; 0x3c
 8002684:	3401      	adds	r4, #1
 8002686:	9405      	str	r4, [sp, #20]
 8002688:	3404      	adds	r4, #4
 800268a:	940e      	str	r4, [sp, #56]	; 0x38
 800268c:	3c14      	subs	r4, #20
 800268e:	4812      	ldr	r0, [pc, #72]	; (80026d8 <hsc_decode+0x410>)
 8002690:	9403      	str	r4, [sp, #12]
 8002692:	3414      	adds	r4, #20
 8002694:	46a0      	mov	r8, r4
 8002696:	3c05      	subs	r4, #5
 8002698:	46a4      	mov	ip, r4
 800269a:	1a12      	subs	r2, r2, r0
 800269c:	207e      	movs	r0, #126	; 0x7e
 800269e:	257a      	movs	r5, #122	; 0x7a
 80026a0:	9214      	str	r2, [sp, #80]	; 0x50
 80026a2:	464a      	mov	r2, r9
 80026a4:	4681      	mov	r9, r0
 80026a6:	4660      	mov	r0, ip
 80026a8:	3407      	adds	r4, #7
 80026aa:	46a2      	mov	sl, r4
 80026ac:	3401      	adds	r4, #1
 80026ae:	46a3      	mov	fp, r4
 80026b0:	3c37      	subs	r4, #55	; 0x37
 80026b2:	46a4      	mov	ip, r4
 80026b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80026b6:	4644      	mov	r4, r8
 80026b8:	2779      	movs	r7, #121	; 0x79
 80026ba:	46a8      	mov	r8, r5
 80026bc:	9311      	str	r3, [sp, #68]	; 0x44
 80026be:	0005      	movs	r5, r0
 80026c0:	0018      	movs	r0, r3
 80026c2:	e033      	b.n	800272c <hsc_decode+0x464>
 80026c4:	20000970 	.word	0x20000970
 80026c8:	03020100 	.word	0x03020100
 80026cc:	07060504 	.word	0x07060504
 80026d0:	0800ac3c 	.word	0x0800ac3c
 80026d4:	0800aac3 	.word	0x0800aac3
 80026d8:	0800aabc 	.word	0x0800aabc
 80026dc:	9b00      	ldr	r3, [sp, #0]
 80026de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80026e0:	785b      	ldrb	r3, [r3, #1]
 80026e2:	469c      	mov	ip, r3
 80026e4:	9b00      	ldr	r3, [sp, #0]
 80026e6:	789b      	ldrb	r3, [r3, #2]
 80026e8:	4698      	mov	r8, r3
 80026ea:	9b00      	ldr	r3, [sp, #0]
 80026ec:	78df      	ldrb	r7, [r3, #3]
 80026ee:	791b      	ldrb	r3, [r3, #4]
 80026f0:	469b      	mov	fp, r3
 80026f2:	9b00      	ldr	r3, [sp, #0]
 80026f4:	795b      	ldrb	r3, [r3, #5]
 80026f6:	469a      	mov	sl, r3
 80026f8:	9b00      	ldr	r3, [sp, #0]
 80026fa:	799d      	ldrb	r5, [r3, #6]
 80026fc:	79dc      	ldrb	r4, [r3, #7]
 80026fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002700:	940e      	str	r4, [sp, #56]	; 0x38
 8002702:	9303      	str	r3, [sp, #12]
 8002704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002706:	950f      	str	r5, [sp, #60]	; 0x3c
 8002708:	9305      	str	r3, [sp, #20]
 800270a:	9b07      	ldr	r3, [sp, #28]
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002710:	9302      	str	r3, [sp, #8]
 8002712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002714:	970a      	str	r7, [sp, #40]	; 0x28
 8002716:	9304      	str	r3, [sp, #16]
 8002718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800271a:	4699      	mov	r9, r3
 800271c:	4643      	mov	r3, r8
 800271e:	930c      	str	r3, [sp, #48]	; 0x30
 8002720:	4663      	mov	r3, ip
 8002722:	930d      	str	r3, [sp, #52]	; 0x34
 8002724:	465b      	mov	r3, fp
 8002726:	9309      	str	r3, [sp, #36]	; 0x24
 8002728:	4653      	mov	r3, sl
 800272a:	9307      	str	r3, [sp, #28]
 800272c:	4663      	mov	r3, ip
 800272e:	9312      	str	r3, [sp, #72]	; 0x48
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 8002730:	464b      	mov	r3, r9
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
 8002732:	5c82      	ldrb	r2, [r0, r2]
 8002734:	01d2      	lsls	r2, r2, #7
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 800273a:	5cc3      	ldrb	r3, [r0, r3]
 800273c:	469c      	mov	ip, r3
 800273e:	4643      	mov	r3, r8
 8002740:	9313      	str	r3, [sp, #76]	; 0x4c
 8002742:	4663      	mov	r3, ip
 8002744:	019b      	lsls	r3, r3, #6
 8002746:	431a      	orrs	r2, r3
 8002748:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 800274a:	9b04      	ldr	r3, [sp, #16]
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 800274c:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 800274e:	5cc3      	ldrb	r3, [r0, r3]
 8002750:	469c      	mov	ip, r3
 8002752:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002754:	4699      	mov	r9, r3
 8002756:	9b00      	ldr	r3, [sp, #0]
 8002758:	4698      	mov	r8, r3
 800275a:	4663      	mov	r3, ip
 800275c:	015b      	lsls	r3, r3, #5
 800275e:	431a      	orrs	r2, r3
 8002760:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 8002762:	9b02      	ldr	r3, [sp, #8]
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 8002764:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 8002766:	5cc3      	ldrb	r3, [r0, r3]
 8002768:	44c1      	add	r9, r8
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	431a      	orrs	r2, r3
 800276e:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 8002770:	9b01      	ldr	r3, [sp, #4]
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 8002772:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 8002774:	5cc3      	ldrb	r3, [r0, r3]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	431a      	orrs	r2, r3
 800277a:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 800277c:	9b05      	ldr	r3, [sp, #20]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 800277e:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 8002780:	5cc3      	ldrb	r3, [r0, r3]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	431a      	orrs	r2, r3
 8002786:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 8002788:	9b03      	ldr	r3, [sp, #12]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 800278a:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 800278c:	5cc3      	ldrb	r3, [r0, r3]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	431a      	orrs	r2, r3
 8002792:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 8002794:	9b00      	ldr	r3, [sp, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 8002796:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	5cc3      	ldrb	r3, [r0, r3]
 800279c:	469c      	mov	ip, r3
 800279e:	9b00      	ldr	r3, [sp, #0]
 80027a0:	3308      	adds	r3, #8
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4663      	mov	r3, ip
 80027a6:	431a      	orrs	r2, r3
        for (i=0, phi=0; phi<h->infobits; i++) {
 80027a8:	9b08      	ldr	r3, [sp, #32]
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 80027aa:	700a      	strb	r2, [r1, #0]
        for (i=0, phi=0; phi<h->infobits; i++) {
 80027ac:	889a      	ldrh	r2, [r3, #4]
 80027ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80027b0:	1acb      	subs	r3, r1, r3
 80027b2:	469c      	mov	ip, r3
 80027b4:	3101      	adds	r1, #1
 80027b6:	454a      	cmp	r2, r9
 80027b8:	dc90      	bgt.n	80026dc <hsc_decode+0x414>
 80027ba:	46a0      	mov	r8, r4
 80027bc:	4664      	mov	r4, ip
        reg = CRCTABLE[reg ^ *block++];
 80027be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027c0:	46d9      	mov	r9, fp
 80027c2:	7811      	ldrb	r1, [r2, #0]
 80027c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80027c6:	46ac      	mov	ip, r5
 80027c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80027ca:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80027cc:	2c00      	cmp	r4, #0
 80027ce:	dc01      	bgt.n	80027d4 <hsc_decode+0x50c>
 80027d0:	f000 fc0b 	bl	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80027d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027d6:	7850      	ldrb	r0, [r2, #1]
 80027d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80027da:	4041      	eors	r1, r0
 80027dc:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80027de:	2c01      	cmp	r4, #1
 80027e0:	d101      	bne.n	80027e6 <hsc_decode+0x51e>
 80027e2:	f000 fc02 	bl	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80027e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027e8:	7890      	ldrb	r0, [r2, #2]
 80027ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80027ec:	4041      	eors	r1, r0
 80027ee:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80027f0:	2c02      	cmp	r4, #2
 80027f2:	d101      	bne.n	80027f8 <hsc_decode+0x530>
 80027f4:	f000 fbf9 	bl	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80027f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027fa:	78d0      	ldrb	r0, [r2, #3]
 80027fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80027fe:	4041      	eors	r1, r0
 8002800:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002802:	2c03      	cmp	r4, #3
 8002804:	d101      	bne.n	800280a <hsc_decode+0x542>
 8002806:	f000 fbf0 	bl	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800280a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800280c:	7910      	ldrb	r0, [r2, #4]
 800280e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002810:	4041      	eors	r1, r0
 8002812:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002814:	2c04      	cmp	r4, #4
 8002816:	d100      	bne.n	800281a <hsc_decode+0x552>
 8002818:	e3e7      	b.n	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800281a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800281c:	7950      	ldrb	r0, [r2, #5]
 800281e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002820:	4041      	eors	r1, r0
 8002822:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002824:	2c05      	cmp	r4, #5
 8002826:	d100      	bne.n	800282a <hsc_decode+0x562>
 8002828:	e3df      	b.n	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800282a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800282c:	7990      	ldrb	r0, [r2, #6]
 800282e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002830:	4041      	eors	r1, r0
 8002832:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002834:	2c06      	cmp	r4, #6
 8002836:	d100      	bne.n	800283a <hsc_decode+0x572>
 8002838:	e3d7      	b.n	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800283a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800283c:	79d0      	ldrb	r0, [r2, #7]
 800283e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002840:	4041      	eors	r1, r0
 8002842:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002844:	2c07      	cmp	r4, #7
 8002846:	d100      	bne.n	800284a <hsc_decode+0x582>
 8002848:	e3cf      	b.n	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800284a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800284c:	7a10      	ldrb	r0, [r2, #8]
 800284e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002850:	4041      	eors	r1, r0
 8002852:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002854:	2c08      	cmp	r4, #8
 8002856:	d100      	bne.n	800285a <hsc_decode+0x592>
 8002858:	e3c7      	b.n	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800285a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800285c:	7a50      	ldrb	r0, [r2, #9]
 800285e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002860:	4041      	eors	r1, r0
 8002862:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002864:	2c09      	cmp	r4, #9
 8002866:	d100      	bne.n	800286a <hsc_decode+0x5a2>
 8002868:	e3bf      	b.n	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800286a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800286c:	7a90      	ldrb	r0, [r2, #10]
 800286e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002870:	4041      	eors	r1, r0
 8002872:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002874:	2c0a      	cmp	r4, #10
 8002876:	d100      	bne.n	800287a <hsc_decode+0x5b2>
 8002878:	e3b7      	b.n	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800287a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800287c:	7ad0      	ldrb	r0, [r2, #11]
 800287e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002880:	4041      	eors	r1, r0
 8002882:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002884:	2c0b      	cmp	r4, #11
 8002886:	d100      	bne.n	800288a <hsc_decode+0x5c2>
 8002888:	e3af      	b.n	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800288a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800288c:	7b10      	ldrb	r0, [r2, #12]
 800288e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002890:	4041      	eors	r1, r0
 8002892:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002894:	2c0c      	cmp	r4, #12
 8002896:	d100      	bne.n	800289a <hsc_decode+0x5d2>
 8002898:	e3a7      	b.n	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800289a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800289c:	7b50      	ldrb	r0, [r2, #13]
 800289e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80028a0:	4041      	eors	r1, r0
 80028a2:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80028a4:	2c0d      	cmp	r4, #13
 80028a6:	d100      	bne.n	80028aa <hsc_decode+0x5e2>
 80028a8:	e39f      	b.n	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80028aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80028ac:	7b90      	ldrb	r0, [r2, #14]
 80028ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80028b0:	4041      	eors	r1, r0
 80028b2:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80028b4:	2c0f      	cmp	r4, #15
 80028b6:	d000      	beq.n	80028ba <hsc_decode+0x5f2>
 80028b8:	e397      	b.n	8002fea <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80028ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80028bc:	7bd0      	ldrb	r0, [r2, #15]
 80028be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80028c0:	4041      	eors	r1, r0
 80028c2:	5651      	ldrsb	r1, [r2, r1]
 80028c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
        }
            
        crcreg  = crccalc(output, i);
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 80028c6:	5c98      	ldrb	r0, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 80028c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 80028ca:	5ddd      	ldrb	r5, [r3, r7]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 80028cc:	5c9c      	ldrb	r4, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 80028ce:	464a      	mov	r2, r9
 80028d0:	5c9f      	ldrb	r7, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 80028d2:	4652      	mov	r2, sl
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 80028d4:	01c0      	lsls	r0, r0, #7
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 80028d6:	01a4      	lsls	r4, r4, #6
 80028d8:	4060      	eors	r0, r4
 80028da:	4041      	eors	r1, r0
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 80028dc:	5c98      	ldrb	r0, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 80028de:	4662      	mov	r2, ip
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 80028e0:	016d      	lsls	r5, r5, #5
 80028e2:	4069      	eors	r1, r5
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 80028e4:	5c9d      	ldrb	r5, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 80028e6:	4642      	mov	r2, r8
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 80028e8:	013f      	lsls	r7, r7, #4
 80028ea:	4079      	eors	r1, r7
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 80028ec:	00c0      	lsls	r0, r0, #3
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 80028ee:	5c9f      	ldrb	r7, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 80028f0:	4048      	eors	r0, r1
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 80028f2:	00ad      	lsls	r5, r5, #2
 80028f4:	4068      	eors	r0, r5
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 80028f6:	007f      	lsls	r7, r7, #1
 80028f8:	4078      	eors	r0, r7
 80028fa:	b2c0      	uxtb	r0, r0
        if (crcreg == 0) {
 80028fc:	2800      	cmp	r0, #0
 80028fe:	d006      	beq.n	800290e <hsc_decode+0x646>
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 8002900:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002902:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002904:	3201      	adds	r2, #1
 8002906:	9215      	str	r2, [sp, #84]	; 0x54
 8002908:	4291      	cmp	r1, r2
 800290a:	d000      	beq.n	800290e <hsc_decode+0x646>
 800290c:	e690      	b.n	8002630 <hsc_decode+0x368>
    }
    /// CRC Path Check Process Over

    /// Decoded Bytewise data stored in output[].
    return crcreg;
}
 800290e:	b019      	add	sp, #100	; 0x64
 8002910:	bc3c      	pop	{r2, r3, r4, r5}
 8002912:	4690      	mov	r8, r2
 8002914:	4699      	mov	r9, r3
 8002916:	46a2      	mov	sl, r4
 8002918:	46ab      	mov	fp, r5
 800291a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 800291c:	464c      	mov	r4, r9
 800291e:	609c      	str	r4, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 8002920:	465c      	mov	r4, fp
 8002922:	2c03      	cmp	r4, #3
 8002924:	d000      	beq.n	8002928 <hsc_decode+0x660>
 8002926:	e556      	b.n	80023d6 <hsc_decode+0x10e>
 8002928:	e557      	b.n	80023da <hsc_decode+0x112>
 800292a:	0010      	movs	r0, r2
            int max_lmd = maxlambda_lut[phi];
 800292c:	4be5      	ldr	r3, [pc, #916]	; (8002cc4 <hsc_decode+0x9fc>)
                if (LLR(h)[1][l] < 0) {
 800292e:	4ae6      	ldr	r2, [pc, #920]	; (8002cc8 <hsc_decode+0xa00>)
            int max_lmd = maxlambda_lut[phi];
 8002930:	5c1b      	ldrb	r3, [r3, r0]
                if (LLR(h)[1][l] < 0) {
 8002932:	6911      	ldr	r1, [r2, #16]
            int max_lmd = maxlambda_lut[phi];
 8002934:	9303      	str	r3, [sp, #12]
            int min_lmd = minlambda_lut[phi];
 8002936:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002938:	5c1b      	ldrb	r3, [r3, r0]
 800293a:	469a      	mov	sl, r3
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                if (LLR(h)[1][l] < 0) {
 800293e:	2900      	cmp	r1, #0
 8002940:	da00      	bge.n	8002944 <hsc_decode+0x67c>
 8002942:	e2e1      	b.n	8002f08 <hsc_decode+0xc40>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8002944:	18c9      	adds	r1, r1, r3
 8002946:	6539      	str	r1, [r7, #80]	; 0x50
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8002948:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (int l=0; l<num_paths; l++) {
 800294a:	465b      	mov	r3, fp
 800294c:	2b01      	cmp	r3, #1
 800294e:	d01d      	beq.n	800298c <hsc_decode+0x6c4>
                if (LLR(h)[1][l] < 0) {
 8002950:	6953      	ldr	r3, [r2, #20]
 8002952:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002954:	2b00      	cmp	r3, #0
 8002956:	da00      	bge.n	800295a <hsc_decode+0x692>
 8002958:	e2fb      	b.n	8002f52 <hsc_decode+0xc8a>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 800295a:	185b      	adds	r3, r3, r1
 800295c:	65bb      	str	r3, [r7, #88]	; 0x58
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 800295e:	6579      	str	r1, [r7, #84]	; 0x54
            for (int l=0; l<num_paths; l++) {
 8002960:	465b      	mov	r3, fp
 8002962:	2b02      	cmp	r3, #2
 8002964:	d012      	beq.n	800298c <hsc_decode+0x6c4>
                if (LLR(h)[1][l] < 0) {
 8002966:	6993      	ldr	r3, [r2, #24]
 8002968:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	da00      	bge.n	8002970 <hsc_decode+0x6a8>
 800296e:	e2f4      	b.n	8002f5a <hsc_decode+0xc92>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8002970:	185b      	adds	r3, r3, r1
 8002972:	663b      	str	r3, [r7, #96]	; 0x60
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8002974:	65f9      	str	r1, [r7, #92]	; 0x5c
            for (int l=0; l<num_paths; l++) {
 8002976:	465b      	mov	r3, fp
 8002978:	2b03      	cmp	r3, #3
 800297a:	d007      	beq.n	800298c <hsc_decode+0x6c4>
                if (LLR(h)[1][l] < 0) {
 800297c:	69d3      	ldr	r3, [r2, #28]
 800297e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002980:	2b00      	cmp	r3, #0
 8002982:	da00      	bge.n	8002986 <hsc_decode+0x6be>
 8002984:	e334      	b.n	8002ff0 <hsc_decode+0xd28>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8002986:	189b      	adds	r3, r3, r2
 8002988:	66bb      	str	r3, [r7, #104]	; 0x68
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 800298a:	667a      	str	r2, [r7, #100]	; 0x64
            num_paths = num_paths * 2;
 800298c:	465b      	mov	r3, fp
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	469b      	mov	fp, r3
 8002992:	0018      	movs	r0, r3
 8002994:	236c      	movs	r3, #108	; 0x6c
    *(uint32_t*)&indexOut[0] = 0x03020100;
 8002996:	4acd      	ldr	r2, [pc, #820]	; (8002ccc <hsc_decode+0xa04>)
 8002998:	469c      	mov	ip, r3
    *(uint32_t*)&indexOut[4] = 0x07060504;
 800299a:	4bcd      	ldr	r3, [pc, #820]	; (8002cd0 <hsc_decode+0xa08>)
    *(uint32_t*)&indexOut[0] = 0x03020100;
 800299c:	66fa      	str	r2, [r7, #108]	; 0x6c
    *(uint32_t*)&indexOut[4] = 0x07060504;
 800299e:	673b      	str	r3, [r7, #112]	; 0x70
        gap    -= (gap > 1);
 80029a0:	2301      	movs	r3, #1
 80029a2:	2801      	cmp	r0, #1
 80029a4:	dc00      	bgt.n	80029a8 <hsc_decode+0x6e0>
 80029a6:	2300      	movs	r3, #0
 80029a8:	1ac0      	subs	r0, r0, r3
        sorted  = (gap == 1);
 80029aa:	1e46      	subs	r6, r0, #1
 80029ac:	4273      	negs	r3, r6
 80029ae:	415e      	adcs	r6, r3
 80029b0:	b2f6      	uxtb	r6, r6
        for (i=0, j=gap; j<length; i++, j++) {
 80029b2:	4583      	cmp	fp, r0
 80029b4:	ddf4      	ble.n	80029a0 <hsc_decode+0x6d8>
 80029b6:	003b      	movs	r3, r7
 80029b8:	465a      	mov	r2, fp
 80029ba:	336c      	adds	r3, #108	; 0x6c
 80029bc:	18d2      	adds	r2, r2, r3
 80029be:	1a12      	subs	r2, r2, r0
 80029c0:	46b0      	mov	r8, r6
 80029c2:	0016      	movs	r6, r2
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 80029c4:	781c      	ldrb	r4, [r3, #0]
 80029c6:	5c1d      	ldrb	r5, [r3, r0]
 80029c8:	00a1      	lsls	r1, r4, #2
 80029ca:	00aa      	lsls	r2, r5, #2
 80029cc:	1879      	adds	r1, r7, r1
 80029ce:	18ba      	adds	r2, r7, r2
 80029d0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80029d2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029d4:	4291      	cmp	r1, r2
 80029d6:	dd03      	ble.n	80029e0 <hsc_decode+0x718>
                sorted      = false;
 80029d8:	2200      	movs	r2, #0
 80029da:	4690      	mov	r8, r2
                indexOut[i] = indexOut[j];
 80029dc:	701d      	strb	r5, [r3, #0]
                indexOut[j] = k;
 80029de:	541c      	strb	r4, [r3, r0]
 80029e0:	3301      	adds	r3, #1
        for (i=0, j=gap; j<length; i++, j++) {
 80029e2:	429e      	cmp	r6, r3
 80029e4:	d1ee      	bne.n	80029c4 <hsc_decode+0x6fc>
 80029e6:	4663      	mov	r3, ip
 80029e8:	4646      	mov	r6, r8
 80029ea:	5cfa      	ldrb	r2, [r7, r3]
    } while (!sorted);
 80029ec:	2e00      	cmp	r6, #0
 80029ee:	d0d7      	beq.n	80029a0 <hsc_decode+0x6d8>
            if (num_paths > LISTSIZE) {
 80029f0:	465b      	mov	r3, fp
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	dd00      	ble.n	80029f8 <hsc_decode+0x730>
 80029f6:	e1fe      	b.n	8002df6 <hsc_decode+0xb2e>
 80029f8:	1e9d      	subs	r5, r3, #2
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 80029fa:	1e5c      	subs	r4, r3, #1
           chk2       |= (1<<k);
 80029fc:	2301      	movs	r3, #1
       k = idx_a[i] >> 1;
 80029fe:	0850      	lsrs	r0, r2, #1
           chk2       |= (1<<k);
 8002a00:	469c      	mov	ip, r3
 8002a02:	4083      	lsls	r3, r0
 8002a04:	4699      	mov	r9, r3
       k = idx_a[i] >> 1;
 8002a06:	003b      	movs	r3, r7
 8002a08:	336c      	adds	r3, #108	; 0x6c
 8002a0a:	7859      	ldrb	r1, [r3, #1]
       if ((chk2 & (1<<k)) == 0) {
 8002a0c:	26ff      	movs	r6, #255	; 0xff
 8002a0e:	464b      	mov	r3, r9
 8002a10:	401e      	ands	r6, r3
       k = idx_a[i] >> 1;
 8002a12:	084b      	lsrs	r3, r1, #1
 8002a14:	9307      	str	r3, [sp, #28]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	4698      	mov	r8, r3
       if ((chk2 & (1<<k)) == 0) {
 8002a1a:	411e      	asrs	r6, r3
 8002a1c:	4663      	mov	r3, ip
           pri[p_i--]  = k;
 8002a1e:	193c      	adds	r4, r7, r4
 8002a20:	3448      	adds	r4, #72	; 0x48
 8002a22:	7020      	strb	r0, [r4, #0]
           idx_b[k]    = idx_a[i];
 8002a24:	1838      	adds	r0, r7, r0
 8002a26:	3074      	adds	r0, #116	; 0x74
 8002a28:	7002      	strb	r2, [r0, #0]
       if ((chk2 & (1<<k)) == 0) {
 8002a2a:	4233      	tst	r3, r6
 8002a2c:	d000      	beq.n	8002a30 <hsc_decode+0x768>
 8002a2e:	e1e7      	b.n	8002e00 <hsc_decode+0xb38>
           chk2       |= (1<<k);
 8002a30:	4643      	mov	r3, r8
 8002a32:	4660      	mov	r0, ip
 8002a34:	4098      	lsls	r0, r3
           chk1       |= (1<<i);
 8002a36:	2303      	movs	r3, #3
 8002a38:	9300      	str	r3, [sp, #0]
           chk2       |= (1<<k);
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	4318      	orrs	r0, r3
 8002a3e:	b2c3      	uxtb	r3, r0
 8002a40:	4699      	mov	r9, r3
           pri[p_i--]  = k;
 8002a42:	4643      	mov	r3, r8
 8002a44:	197d      	adds	r5, r7, r5
 8002a46:	3548      	adds	r5, #72	; 0x48
 8002a48:	702b      	strb	r3, [r5, #0]
           idx_b[k]    = idx_a[i];
 8002a4a:	18f8      	adds	r0, r7, r3
           pri[p_i--]  = k;
 8002a4c:	465b      	mov	r3, fp
 8002a4e:	2201      	movs	r2, #1
 8002a50:	2407      	movs	r4, #7
           idx_b[k]    = idx_a[i];
 8002a52:	3074      	adds	r0, #116	; 0x74
 8002a54:	7001      	strb	r1, [r0, #0]
           pri[p_i--]  = k;
 8002a56:	1edd      	subs	r5, r3, #3
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8002a58:	465b      	mov	r3, fp
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d029      	beq.n	8002ab2 <hsc_decode+0x7ea>
       k = idx_a[i] >> 1;
 8002a5e:	003a      	movs	r2, r7
       if ((chk2 & (1<<k)) == 0) {
 8002a60:	4648      	mov	r0, r9
       k = idx_a[i] >> 1;
 8002a62:	326c      	adds	r2, #108	; 0x6c
 8002a64:	7893      	ldrb	r3, [r2, #2]
       if ((chk2 & (1<<k)) == 0) {
 8002a66:	2201      	movs	r2, #1
       k = idx_a[i] >> 1;
 8002a68:	085e      	lsrs	r6, r3, #1
       if ((chk2 & (1<<k)) == 0) {
 8002a6a:	4130      	asrs	r0, r6
       k = idx_a[i] >> 1;
 8002a6c:	469c      	mov	ip, r3
       if ((chk2 & (1<<k)) == 0) {
 8002a6e:	4202      	tst	r2, r0
 8002a70:	d10e      	bne.n	8002a90 <hsc_decode+0x7c8>
           chk2       |= (1<<k);
 8002a72:	40b2      	lsls	r2, r6
 8002a74:	464b      	mov	r3, r9
 8002a76:	0010      	movs	r0, r2
 8002a78:	4318      	orrs	r0, r3
 8002a7a:	b2c3      	uxtb	r3, r0
 8002a7c:	4699      	mov	r9, r3
           idx_b[k]    = idx_a[i];
 8002a7e:	4663      	mov	r3, ip
           pri[p_i--]  = k;
 8002a80:	197a      	adds	r2, r7, r5
           chk1       |= (1<<i);
 8002a82:	9400      	str	r4, [sp, #0]
           idx_b[k]    = idx_a[i];
 8002a84:	19bc      	adds	r4, r7, r6
 8002a86:	3474      	adds	r4, #116	; 0x74
           pri[p_i--]  = k;
 8002a88:	3248      	adds	r2, #72	; 0x48
           idx_b[k]    = idx_a[i];
 8002a8a:	7023      	strb	r3, [r4, #0]
           pri[p_i--]  = k;
 8002a8c:	7016      	strb	r6, [r2, #0]
 8002a8e:	3d01      	subs	r5, #1
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8002a90:	465b      	mov	r3, fp
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d000      	beq.n	8002a98 <hsc_decode+0x7d0>
 8002a96:	e3de      	b.n	8003256 <hsc_decode+0xf8e>
       k = idx_a[i] >> 1;
 8002a98:	003a      	movs	r2, r7
 8002a9a:	326c      	adds	r2, #108	; 0x6c
 8002a9c:	78d6      	ldrb	r6, [r2, #3]
       if ((chk2 & (1<<k)) == 0) {
 8002a9e:	464a      	mov	r2, r9
       k = idx_a[i] >> 1;
 8002aa0:	0874      	lsrs	r4, r6, #1
       if ((chk2 & (1<<k)) == 0) {
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	4122      	asrs	r2, r4
 8002aa6:	4210      	tst	r0, r2
 8002aa8:	d100      	bne.n	8002aac <hsc_decode+0x7e4>
 8002aaa:	e231      	b.n	8002f10 <hsc_decode+0xc48>
 8002aac:	9b00      	ldr	r3, [sp, #0]
 8002aae:	085a      	lsrs	r2, r3, #1
 8002ab0:	b2d2      	uxtb	r2, r2
    switch ((chk1>>1) & 7) {
 8002ab2:	2a06      	cmp	r2, #6
 8002ab4:	d900      	bls.n	8002ab8 <hsc_decode+0x7f0>
 8002ab6:	e244      	b.n	8002f42 <hsc_decode+0xc7a>
 8002ab8:	4886      	ldr	r0, [pc, #536]	; (8002cd4 <hsc_decode+0xa0c>)
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	5882      	ldr	r2, [r0, r2]
 8002abe:	4697      	mov	pc, r2
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8002ac0:	003b      	movs	r3, r7
 8002ac2:	2464      	movs	r4, #100	; 0x64
 8002ac4:	336c      	adds	r3, #108	; 0x6c
 8002ac6:	789b      	ldrb	r3, [r3, #2]
                pri[0]          = j0[chk2];
 8002ac8:	2248      	movs	r2, #72	; 0x48
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8002aca:	4883      	ldr	r0, [pc, #524]	; (8002cd8 <hsc_decode+0xa10>)
 8002acc:	0019      	movs	r1, r3
 8002ace:	4448      	add	r0, r9
 8002ad0:	5d00      	ldrb	r0, [r0, r4]
                pri[0]          = j0[chk2];
 8002ad2:	54b8      	strb	r0, [r7, r2]
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8002ad4:	1838      	adds	r0, r7, r0
 8002ad6:	3074      	adds	r0, #116	; 0x74
 8002ad8:	7003      	strb	r3, [r0, #0]
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	9307      	str	r3, [sp, #28]
                    switch (max_lmd-min_lmd) {
 8002ade:	4654      	mov	r4, sl
 8002ae0:	2601      	movs	r6, #1
 8002ae2:	9803      	ldr	r0, [sp, #12]
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8002ae4:	2500      	movs	r5, #0
                    switch (max_lmd-min_lmd) {
 8002ae6:	1b03      	subs	r3, r0, r4
 8002ae8:	9c05      	ldr	r4, [sp, #20]
 8002aea:	0098      	lsls	r0, r3, #2
 8002aec:	4026      	ands	r6, r4
 8002aee:	1cb4      	adds	r4, r6, #2
 8002af0:	00a4      	lsls	r4, r4, #2
 8002af2:	9400      	str	r4, [sp, #0]
 8002af4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8002af6:	9304      	str	r3, [sp, #16]
 8002af8:	46a2      	mov	sl, r4
                    switch (max_lmd) {
 8002afa:	9b03      	ldr	r3, [sp, #12]
                    switch (max_lmd-min_lmd) {
 8002afc:	4482      	add	sl, r0
                    switch (max_lmd) {
 8002afe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4698      	mov	r8, r3
 8002b04:	4684      	mov	ip, r0
 8002b06:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b08:	9b03      	ldr	r3, [sp, #12]
 8002b0a:	44c4      	add	ip, r8
 8002b0c:	2248      	movs	r2, #72	; 0x48
 8002b0e:	4698      	mov	r8, r3
 8002b10:	000b      	movs	r3, r1
 8002b12:	4661      	mov	r1, ip
 8002b14:	960e      	str	r6, [sp, #56]	; 0x38
 8002b16:	002e      	movs	r6, r5
 8002b18:	9c05      	ldr	r4, [sp, #20]
 8002b1a:	5cba      	ldrb	r2, [r7, r2]
 8002b1c:	00a4      	lsls	r4, r4, #2
 8002b1e:	9807      	ldr	r0, [sp, #28]
 8002b20:	9401      	str	r4, [sp, #4]
 8002b22:	9103      	str	r1, [sp, #12]
                int lr  = INDEX(h)[l] >> 1;
 8002b24:	b2c0      	uxtb	r0, r0
                if (l != lr) {
 8002b26:	4282      	cmp	r2, r0
 8002b28:	d04f      	beq.n	8002bca <hsc_decode+0x902>
                    switch (max_lmd-min_lmd) {
 8002b2a:	9904      	ldr	r1, [sp, #16]
 8002b2c:	2906      	cmp	r1, #6
 8002b2e:	d82c      	bhi.n	8002b8a <hsc_decode+0x8c2>
 8002b30:	4651      	mov	r1, sl
 8002b32:	6809      	ldr	r1, [r1, #0]
 8002b34:	468f      	mov	pc, r1
            int max_lmd = maxlambda_lut[phi];
 8002b36:	4641      	mov	r1, r8
                        case 5: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b38:	008c      	lsls	r4, r1, #2
 8002b3a:	193c      	adds	r4, r7, r4
 8002b3c:	1825      	adds	r5, r4, r0
 8002b3e:	7f2d      	ldrb	r5, [r5, #28]
 8002b40:	18a4      	adds	r4, r4, r2
 8002b42:	3901      	subs	r1, #1
 8002b44:	7725      	strb	r5, [r4, #28]
                        case 4: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b46:	008c      	lsls	r4, r1, #2
 8002b48:	193c      	adds	r4, r7, r4
 8002b4a:	1825      	adds	r5, r4, r0
 8002b4c:	7f2d      	ldrb	r5, [r5, #28]
 8002b4e:	18a4      	adds	r4, r4, r2
 8002b50:	3901      	subs	r1, #1
 8002b52:	7725      	strb	r5, [r4, #28]
                        case 3: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b54:	008c      	lsls	r4, r1, #2
 8002b56:	193c      	adds	r4, r7, r4
 8002b58:	1825      	adds	r5, r4, r0
 8002b5a:	7f2d      	ldrb	r5, [r5, #28]
 8002b5c:	18a4      	adds	r4, r4, r2
 8002b5e:	3901      	subs	r1, #1
 8002b60:	7725      	strb	r5, [r4, #28]
                        case 2: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b62:	008c      	lsls	r4, r1, #2
 8002b64:	193c      	adds	r4, r7, r4
 8002b66:	1825      	adds	r5, r4, r0
 8002b68:	7f2d      	ldrb	r5, [r5, #28]
 8002b6a:	18a4      	adds	r4, r4, r2
 8002b6c:	3901      	subs	r1, #1
 8002b6e:	7725      	strb	r5, [r4, #28]
                        case 1: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b70:	008c      	lsls	r4, r1, #2
 8002b72:	193c      	adds	r4, r7, r4
 8002b74:	1825      	adds	r5, r4, r0
 8002b76:	7f2d      	ldrb	r5, [r5, #28]
 8002b78:	18a4      	adds	r4, r4, r2
 8002b7a:	3901      	subs	r1, #1
 8002b7c:	7725      	strb	r5, [r4, #28]
                        case 0: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];
 8002b7e:	0089      	lsls	r1, r1, #2
 8002b80:	1879      	adds	r1, r7, r1
 8002b82:	180c      	adds	r4, r1, r0
 8002b84:	7f24      	ldrb	r4, [r4, #28]
 8002b86:	1889      	adds	r1, r1, r2
 8002b88:	770c      	strb	r4, [r1, #28]
                    switch (max_lmd) {
 8002b8a:	4641      	mov	r1, r8
 8002b8c:	2906      	cmp	r1, #6
 8002b8e:	d81c      	bhi.n	8002bca <hsc_decode+0x902>
 8002b90:	9903      	ldr	r1, [sp, #12]
 8002b92:	6809      	ldr	r1, [r1, #0]
 8002b94:	468f      	mov	pc, r1
                        case 6: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002b96:	1839      	adds	r1, r7, r0
 8002b98:	7e0c      	ldrb	r4, [r1, #24]
 8002b9a:	18b9      	adds	r1, r7, r2
 8002b9c:	760c      	strb	r4, [r1, #24]
                        case 5: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002b9e:	1839      	adds	r1, r7, r0
 8002ba0:	7d0c      	ldrb	r4, [r1, #20]
 8002ba2:	18b9      	adds	r1, r7, r2
 8002ba4:	750c      	strb	r4, [r1, #20]
                        case 4: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002ba6:	1839      	adds	r1, r7, r0
 8002ba8:	7c0c      	ldrb	r4, [r1, #16]
 8002baa:	18b9      	adds	r1, r7, r2
 8002bac:	740c      	strb	r4, [r1, #16]
                        case 3: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002bae:	1839      	adds	r1, r7, r0
 8002bb0:	7b0c      	ldrb	r4, [r1, #12]
 8002bb2:	18b9      	adds	r1, r7, r2
 8002bb4:	730c      	strb	r4, [r1, #12]
                        case 2: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002bb6:	1839      	adds	r1, r7, r0
 8002bb8:	7a0c      	ldrb	r4, [r1, #8]
 8002bba:	18b9      	adds	r1, r7, r2
 8002bbc:	720c      	strb	r4, [r1, #8]
                        case 1: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002bbe:	1839      	adds	r1, r7, r0
 8002bc0:	790c      	ldrb	r4, [r1, #4]
 8002bc2:	18b9      	adds	r1, r7, r2
 8002bc4:	710c      	strb	r4, [r1, #4]
                        case 0: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];
 8002bc6:	5c39      	ldrb	r1, [r7, r0]
 8002bc8:	54b9      	strb	r1, [r7, r2]
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002bca:	2401      	movs	r4, #1
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8002bcc:	0099      	lsls	r1, r3, #2
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002bce:	401c      	ands	r4, r3
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002bd0:	01db      	lsls	r3, r3, #7
 8002bd2:	4303      	orrs	r3, r0
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002bd4:	9802      	ldr	r0, [sp, #8]
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8002bd6:	1879      	adds	r1, r7, r1
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002bd8:	4684      	mov	ip, r0
 8002bda:	9800      	ldr	r0, [sp, #0]
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8002bdc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002bde:	4681      	mov	r9, r0
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8002be0:	0095      	lsls	r5, r2, #2
 8002be2:	197d      	adds	r5, r7, r5
 8002be4:	63a9      	str	r1, [r5, #56]	; 0x38
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002be6:	9d01      	ldr	r5, [sp, #4]
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002be8:	44cc      	add	ip, r9
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002bea:	46a9      	mov	r9, r5
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002bec:	4660      	mov	r0, ip
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002bee:	9906      	ldr	r1, [sp, #24]
            for (int ll=0; ll<num_paths; ll++) {
 8002bf0:	3601      	adds	r6, #1
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002bf2:	4449      	add	r1, r9
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002bf4:	5484      	strb	r4, [r0, r2]
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002bf6:	548b      	strb	r3, [r1, r2]
            for (int ll=0; ll<num_paths; ll++) {
 8002bf8:	455e      	cmp	r6, fp
 8002bfa:	d06f      	beq.n	8002cdc <hsc_decode+0xa14>
 8002bfc:	003a      	movs	r2, r7
 8002bfe:	2374      	movs	r3, #116	; 0x74
 8002c00:	3248      	adds	r2, #72	; 0x48
 8002c02:	5cb2      	ldrb	r2, [r6, r2]
 8002c04:	18b9      	adds	r1, r7, r2
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	0858      	lsrs	r0, r3, #1
 8002c0a:	e78b      	b.n	8002b24 <hsc_decode+0x85c>
            int max_lmd = maxlambda_lut[phi];
 8002c0c:	4641      	mov	r1, r8
 8002c0e:	e79a      	b.n	8002b46 <hsc_decode+0x87e>
 8002c10:	4641      	mov	r1, r8
 8002c12:	e79f      	b.n	8002b54 <hsc_decode+0x88c>
 8002c14:	4641      	mov	r1, r8
 8002c16:	e7a4      	b.n	8002b62 <hsc_decode+0x89a>
 8002c18:	4641      	mov	r1, r8
 8002c1a:	e7a9      	b.n	8002b70 <hsc_decode+0x8a8>
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	e7ae      	b.n	8002b7e <hsc_decode+0x8b6>
                        case 6: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002c20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002c22:	1879      	adds	r1, r7, r1
 8002c24:	180c      	adds	r4, r1, r0
 8002c26:	7f24      	ldrb	r4, [r4, #28]
 8002c28:	1889      	adds	r1, r1, r2
 8002c2a:	770c      	strb	r4, [r1, #28]
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	3901      	subs	r1, #1
 8002c30:	e782      	b.n	8002b38 <hsc_decode+0x870>
        case 3: idx_b[j0[chk2]] = idx_a[3]; 
 8002c32:	003b      	movs	r3, r7
 8002c34:	336c      	adds	r3, #108	; 0x6c
 8002c36:	2464      	movs	r4, #100	; 0x64
 8002c38:	78db      	ldrb	r3, [r3, #3]
 8002c3a:	e745      	b.n	8002ac8 <hsc_decode+0x800>
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8002c3c:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <hsc_decode+0xa10>)
 8002c3e:	2254      	movs	r2, #84	; 0x54
 8002c40:	0018      	movs	r0, r3
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c42:	003b      	movs	r3, r7
 8002c44:	2664      	movs	r6, #100	; 0x64
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8002c46:	4448      	add	r0, r9
 8002c48:	5c82      	ldrb	r2, [r0, r2]
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c4a:	336c      	adds	r3, #108	; 0x6c
 8002c4c:	78dd      	ldrb	r5, [r3, #3]
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8002c4e:	18bb      	adds	r3, r7, r2
 8002c50:	3374      	adds	r3, #116	; 0x74
 8002c52:	7019      	strb	r1, [r3, #0]
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c54:	5d83      	ldrb	r3, [r0, r6]
                pri[1]          = j1[chk2];
 8002c56:	0038      	movs	r0, r7
 8002c58:	2448      	movs	r4, #72	; 0x48
 8002c5a:	3048      	adds	r0, #72	; 0x48
 8002c5c:	7042      	strb	r2, [r0, #1]
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c5e:	18fa      	adds	r2, r7, r3
 8002c60:	3274      	adds	r2, #116	; 0x74
                pri[0]          = j0[chk2];
 8002c62:	553b      	strb	r3, [r7, r4]
 8002c64:	086b      	lsrs	r3, r5, #1
 8002c66:	0029      	movs	r1, r5
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c68:	7015      	strb	r5, [r2, #0]
 8002c6a:	9307      	str	r3, [sp, #28]
 8002c6c:	e737      	b.n	8002ade <hsc_decode+0x816>
                pri[1]          = j1[chk2];
 8002c6e:	2348      	movs	r3, #72	; 0x48
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002c70:	003a      	movs	r2, r7
                pri[1]          = j1[chk2];
 8002c72:	4698      	mov	r8, r3
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002c74:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <hsc_decode+0xa10>)
 8002c76:	2554      	movs	r5, #84	; 0x54
 8002c78:	0018      	movs	r0, r3
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c7a:	2664      	movs	r6, #100	; 0x64
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002c7c:	326c      	adds	r2, #108	; 0x6c
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c7e:	78d4      	ldrb	r4, [r2, #3]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002c80:	7892      	ldrb	r2, [r2, #2]
 8002c82:	4448      	add	r0, r9
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c84:	5d83      	ldrb	r3, [r0, r6]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002c86:	4694      	mov	ip, r2
 8002c88:	5d42      	ldrb	r2, [r0, r5]
                pri[1]          = j1[chk2];
 8002c8a:	0038      	movs	r0, r7
 8002c8c:	3048      	adds	r0, #72	; 0x48
 8002c8e:	7042      	strb	r2, [r0, #1]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002c90:	4660      	mov	r0, ip
 8002c92:	18ba      	adds	r2, r7, r2
 8002c94:	3274      	adds	r2, #116	; 0x74
 8002c96:	7010      	strb	r0, [r2, #0]
                pri[0]          = j0[chk2];
 8002c98:	4640      	mov	r0, r8
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c9a:	18fa      	adds	r2, r7, r3
 8002c9c:	3274      	adds	r2, #116	; 0x74
                pri[0]          = j0[chk2];
 8002c9e:	543b      	strb	r3, [r7, r0]
 8002ca0:	0863      	lsrs	r3, r4, #1
 8002ca2:	0021      	movs	r1, r4
                idx_b[j0[chk2]] = idx_a[3]; 
 8002ca4:	7014      	strb	r4, [r2, #0]
 8002ca6:	9307      	str	r3, [sp, #28]
 8002ca8:	e719      	b.n	8002ade <hsc_decode+0x816>
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8002caa:	2364      	movs	r3, #100	; 0x64
                pri[0]          = j0[chk2];
 8002cac:	2248      	movs	r2, #72	; 0x48
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8002cae:	480a      	ldr	r0, [pc, #40]	; (8002cd8 <hsc_decode+0xa10>)
 8002cb0:	4448      	add	r0, r9
 8002cb2:	5cc0      	ldrb	r0, [r0, r3]
 8002cb4:	084b      	lsrs	r3, r1, #1
                pri[0]          = j0[chk2];
 8002cb6:	54b8      	strb	r0, [r7, r2]
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8002cb8:	1838      	adds	r0, r7, r0
 8002cba:	3074      	adds	r0, #116	; 0x74
 8002cbc:	9307      	str	r3, [sp, #28]
 8002cbe:	7001      	strb	r1, [r0, #0]
 8002cc0:	e70d      	b.n	8002ade <hsc_decode+0x816>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	0800a7bc 	.word	0x0800a7bc
 8002cc8:	20000970 	.word	0x20000970
 8002ccc:	03020100 	.word	0x03020100
 8002cd0:	07060504 	.word	0x07060504
 8002cd4:	0800a6a0 	.word	0x0800a6a0
 8002cd8:	0800a748 	.word	0x0800a748
 8002cdc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
        if ((phi & 1) == 0) {
 8002cde:	2e00      	cmp	r6, #0
 8002ce0:	d100      	bne.n	8002ce4 <hsc_decode+0xa1c>
 8002ce2:	e468      	b.n	80025b6 <hsc_decode+0x2ee>
            beta_laststage  = eminlambda_lut[phi];
 8002ce4:	4bc9      	ldr	r3, [pc, #804]	; (800300c <hsc_decode+0xd44>)
 8002ce6:	9a05      	ldr	r2, [sp, #20]
 8002ce8:	5c9b      	ldrb	r3, [r3, r2]
 8002cea:	9301      	str	r3, [sp, #4]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	9303      	str	r3, [sp, #12]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	dc00      	bgt.n	8002cf6 <hsc_decode+0xa2e>
 8002cf4:	e180      	b.n	8002ff8 <hsc_decode+0xd30>
 8002cf6:	465b      	mov	r3, fp
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d100      	bne.n	8002cfe <hsc_decode+0xa36>
 8002cfc:	e138      	b.n	8002f70 <hsc_decode+0xca8>
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d100      	bne.n	8002d04 <hsc_decode+0xa3c>
 8002d02:	e18b      	b.n	800301c <hsc_decode+0xd54>
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d100      	bne.n	8002d0a <hsc_decode+0xa42>
 8002d08:	e245      	b.n	8003196 <hsc_decode+0xece>
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	4698      	mov	r8, r3
            next_pt         = 2;
 8002d0e:	3b04      	subs	r3, #4
 8002d10:	9307      	str	r3, [sp, #28]
            lmd0            = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	9304      	str	r3, [sp, #16]
 8002d16:	469c      	mov	ip, r3
 8002d18:	465b      	mov	r3, fp
 8002d1a:	930e      	str	r3, [sp, #56]	; 0x38
 8002d1c:	4643      	mov	r3, r8
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002d1e:	2002      	movs	r0, #2
 8002d20:	46b9      	mov	r9, r7
 8002d22:	4abb      	ldr	r2, [pc, #748]	; (8003010 <hsc_decode+0xd48>)
 8002d24:	9300      	str	r3, [sp, #0]
                int incval  = (beta < beta_laststage);
 8002d26:	9901      	ldr	r1, [sp, #4]
 8002d28:	2301      	movs	r3, #1
 8002d2a:	4281      	cmp	r1, r0
 8002d2c:	dc00      	bgt.n	8002d30 <hsc_decode+0xa68>
 8002d2e:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002d30:	9f02      	ldr	r7, [sp, #8]
 8002d32:	4665      	mov	r5, ip
 8002d34:	4649      	mov	r1, r9
 8002d36:	46b8      	mov	r8, r7
 8002d38:	5d49      	ldrb	r1, [r1, r5]
 8002d3a:	0084      	lsls	r4, r0, #2
 8002d3c:	4444      	add	r4, r8
 8002d3e:	5c65      	ldrb	r5, [r4, r1]
 8002d40:	7816      	ldrb	r6, [r2, #0]
                int bit0_i  = (beta*2) + incval;
 8002d42:	0041      	lsls	r1, r0, #1
 8002d44:	4688      	mov	r8, r1
 8002d46:	18c9      	adds	r1, r1, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002d48:	4075      	eors	r5, r6
 8002d4a:	0089      	lsls	r1, r1, #2
 8002d4c:	547d      	strb	r5, [r7, r1]
                int bit1_i  = ((beta+1)*2) + incval;
 8002d4e:	9d00      	ldr	r5, [sp, #0]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002d50:	7816      	ldrb	r6, [r2, #0]
                int bit1_i  = ((beta+1)*2) + incval;
 8002d52:	46aa      	mov	sl, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002d54:	464d      	mov	r5, r9
 8002d56:	4465      	add	r5, ip
 8002d58:	786f      	ldrb	r7, [r5, #1]
                int bit1_i  = ((beta+1)*2) + incval;
 8002d5a:	4453      	add	r3, sl
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002d5c:	46ba      	mov	sl, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002d5e:	9f02      	ldr	r7, [sp, #8]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	54fe      	strb	r6, [r7, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002d64:	7857      	ldrb	r7, [r2, #1]
 8002d66:	4656      	mov	r6, sl
 8002d68:	46ba      	mov	sl, r7
 8002d6a:	9f02      	ldr	r7, [sp, #8]
 8002d6c:	5da6      	ldrb	r6, [r4, r6]
 8002d6e:	46bb      	mov	fp, r7
 8002d70:	4657      	mov	r7, sl
 8002d72:	4459      	add	r1, fp
 8002d74:	407e      	eors	r6, r7
 8002d76:	704e      	strb	r6, [r1, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002d78:	7856      	ldrb	r6, [r2, #1]
 8002d7a:	445b      	add	r3, fp
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002d7c:	78af      	ldrb	r7, [r5, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002d7e:	705e      	strb	r6, [r3, #1]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002d80:	5de6      	ldrb	r6, [r4, r7]
 8002d82:	7897      	ldrb	r7, [r2, #2]
 8002d84:	78ed      	ldrb	r5, [r5, #3]
 8002d86:	407e      	eors	r6, r7
 8002d88:	708e      	strb	r6, [r1, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002d8a:	7896      	ldrb	r6, [r2, #2]
 8002d8c:	709e      	strb	r6, [r3, #2]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002d8e:	5d64      	ldrb	r4, [r4, r5]
 8002d90:	78d5      	ldrb	r5, [r2, #3]
 8002d92:	406c      	eors	r4, r5
 8002d94:	70cc      	strb	r4, [r1, #3]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002d96:	78d1      	ldrb	r1, [r2, #3]
 8002d98:	70d9      	strb	r1, [r3, #3]
                if (beta == next_pt) {
 8002d9a:	9b07      	ldr	r3, [sp, #28]
 8002d9c:	4298      	cmp	r0, r3
 8002d9e:	d010      	beq.n	8002dc2 <hsc_decode+0xafa>
 8002da0:	9b00      	ldr	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002da2:	3002      	adds	r0, #2
 8002da4:	3304      	adds	r3, #4
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	9b03      	ldr	r3, [sp, #12]
 8002daa:	3208      	adds	r2, #8
 8002dac:	4283      	cmp	r3, r0
 8002dae:	dcba      	bgt.n	8002d26 <hsc_decode+0xa5e>
 8002db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002db2:	464f      	mov	r7, r9
 8002db4:	469b      	mov	fp, r3
 8002db6:	4663      	mov	r3, ip
 8002db8:	18fb      	adds	r3, r7, r3
            *(uint32_t*)PRIBIT(h)[lmd0] = 0x03020100;
 8002dba:	4a96      	ldr	r2, [pc, #600]	; (8003014 <hsc_decode+0xd4c>)
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f7ff fbfc 	bl	80025ba <hsc_decode+0x2f2>
                    next_pt = (next_pt << 1) + 2;
 8002dc2:	4643      	mov	r3, r8
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	9307      	str	r3, [sp, #28]
                    lmd0++;
 8002dc8:	9b04      	ldr	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002dca:	3002      	adds	r0, #2
                    lmd0++;
 8002dcc:	3301      	adds	r3, #1
 8002dce:	9304      	str	r3, [sp, #16]
 8002dd0:	9b00      	ldr	r3, [sp, #0]
 8002dd2:	3208      	adds	r2, #8
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	9300      	str	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002dd8:	9b03      	ldr	r3, [sp, #12]
 8002dda:	4298      	cmp	r0, r3
 8002ddc:	db00      	blt.n	8002de0 <hsc_decode+0xb18>
 8002dde:	e0c0      	b.n	8002f62 <hsc_decode+0xc9a>
 8002de0:	9b04      	ldr	r3, [sp, #16]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	469c      	mov	ip, r3
 8002de6:	e79e      	b.n	8002d26 <hsc_decode+0xa5e>
            switch (num_paths-1) {
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <hsc_decode+0xb28>
 8002dec:	f7ff fbd2 	bl	8002594 <hsc_decode+0x2cc>
 8002df0:	4a89      	ldr	r2, [pc, #548]	; (8003018 <hsc_decode+0xd50>)
 8002df2:	f7ff fbc9 	bl	8002588 <hsc_decode+0x2c0>
                num_paths = LISTSIZE;
 8002df6:	2304      	movs	r3, #4
 8002df8:	2403      	movs	r4, #3
 8002dfa:	2502      	movs	r5, #2
 8002dfc:	469b      	mov	fp, r3
 8002dfe:	e5fd      	b.n	80029fc <hsc_decode+0x734>
           chk2       |= (1<<k);
 8002e00:	464b      	mov	r3, r9
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	4699      	mov	r9, r3
 8002e06:	2301      	movs	r3, #1
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2405      	movs	r4, #5
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	e623      	b.n	8002a58 <hsc_decode+0x790>
 8002e10:	4a81      	ldr	r2, [pc, #516]	; (8003018 <hsc_decode+0xd50>)
 8002e12:	f7ff fbad 	bl	8002570 <hsc_decode+0x2a8>
 8002e16:	4a80      	ldr	r2, [pc, #512]	; (8003018 <hsc_decode+0xd50>)
 8002e18:	f7ff fbb0 	bl	800257c <hsc_decode+0x2b4>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e1c:	9c04      	ldr	r4, [sp, #16]
 8002e1e:	4665      	mov	r5, ip
 8002e20:	00a4      	lsls	r4, r4, #2
 8002e22:	46a0      	mov	r8, r4
 8002e24:	9c00      	ldr	r4, [sp, #0]
 8002e26:	4445      	add	r5, r8
 8002e28:	7f2e      	ldrb	r6, [r5, #28]
 8002e2a:	1c65      	adds	r5, r4, #1
 8002e2c:	00a4      	lsls	r4, r4, #2
 8002e2e:	46a2      	mov	sl, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e30:	00ac      	lsls	r4, r5, #2
 8002e32:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e34:	4655      	mov	r5, sl
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e36:	940e      	str	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e38:	19ad      	adds	r5, r5, r6
 8002e3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e3c:	444e      	add	r6, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e3e:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e40:	00b6      	lsls	r6, r6, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e42:	5965      	ldr	r5, [r4, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e44:	59a6      	ldr	r6, [r4, r6]
					if (use_gfunc) {
 8002e46:	9c03      	ldr	r4, [sp, #12]
 8002e48:	2c00      	cmp	r4, #0
 8002e4a:	d000      	beq.n	8002e4e <hsc_decode+0xb86>
 8002e4c:	e143      	b.n	80030d6 <hsc_decode+0xe0e>
    llr_t a_inv = -llr_layer_a;
 8002e4e:	426c      	negs	r4, r5
    if (llr_layer_a < llr_layer_b) {
 8002e50:	42b5      	cmp	r5, r6
 8002e52:	db00      	blt.n	8002e56 <hsc_decode+0xb8e>
 8002e54:	e205      	b.n	8003262 <hsc_decode+0xf9a>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002e56:	42a6      	cmp	r6, r4
 8002e58:	dc00      	bgt.n	8002e5c <hsc_decode+0xb94>
    llr_t b_inv = -llr_layer_b;
 8002e5a:	4275      	negs	r5, r6
				for (int l=0; l<num_paths; l++) {
 8002e5c:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8002e5e:	601d      	str	r5, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 8002e60:	2c01      	cmp	r4, #1
 8002e62:	d101      	bne.n	8002e68 <hsc_decode+0xba0>
 8002e64:	f7ff fab9 	bl	80023da <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e68:	4665      	mov	r5, ip
 8002e6a:	4654      	mov	r4, sl
 8002e6c:	4445      	add	r5, r8
 8002e6e:	7f6e      	ldrb	r6, [r5, #29]
 8002e70:	19a5      	adds	r5, r4, r6
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e72:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e74:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e76:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e78:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e7a:	444e      	add	r6, r9
 8002e7c:	00b6      	lsls	r6, r6, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e7e:	5965      	ldr	r5, [r4, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e80:	59a6      	ldr	r6, [r4, r6]
    llr_t a_inv = -llr_layer_a;
 8002e82:	426c      	negs	r4, r5
 8002e84:	46a1      	mov	r9, r4
    if (llr_layer_a < llr_layer_b) {
 8002e86:	42b5      	cmp	r5, r6
 8002e88:	db00      	blt.n	8002e8c <hsc_decode+0xbc4>
 8002e8a:	e1f0      	b.n	800326e <hsc_decode+0xfa6>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002e8c:	454e      	cmp	r6, r9
 8002e8e:	dc00      	bgt.n	8002e92 <hsc_decode+0xbca>
    llr_t b_inv = -llr_layer_b;
 8002e90:	4275      	negs	r5, r6
				for (int l=0; l<num_paths; l++) {
 8002e92:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8002e94:	605d      	str	r5, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 8002e96:	2c02      	cmp	r4, #2
 8002e98:	d101      	bne.n	8002e9e <hsc_decode+0xbd6>
 8002e9a:	f7ff fa9e 	bl	80023da <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e9e:	4665      	mov	r5, ip
 8002ea0:	4654      	mov	r4, sl
 8002ea2:	4445      	add	r5, r8
 8002ea4:	7fae      	ldrb	r6, [r5, #30]
 8002ea6:	19a5      	adds	r5, r4, r6
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002ea8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002eaa:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002eac:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002eae:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002eb0:	444e      	add	r6, r9
 8002eb2:	00b6      	lsls	r6, r6, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002eb4:	5965      	ldr	r5, [r4, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002eb6:	59a6      	ldr	r6, [r4, r6]
    llr_t a_inv = -llr_layer_a;
 8002eb8:	426c      	negs	r4, r5
 8002eba:	46a1      	mov	r9, r4
    if (llr_layer_a < llr_layer_b) {
 8002ebc:	42ae      	cmp	r6, r5
 8002ebe:	dc00      	bgt.n	8002ec2 <hsc_decode+0xbfa>
 8002ec0:	e1e7      	b.n	8003292 <hsc_decode+0xfca>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002ec2:	454e      	cmp	r6, r9
 8002ec4:	dc00      	bgt.n	8002ec8 <hsc_decode+0xc00>
    llr_t b_inv = -llr_layer_b;
 8002ec6:	4275      	negs	r5, r6
				for (int l=0; l<num_paths; l++) {
 8002ec8:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8002eca:	609d      	str	r5, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 8002ecc:	2c03      	cmp	r4, #3
 8002ece:	d101      	bne.n	8002ed4 <hsc_decode+0xc0c>
 8002ed0:	f7ff fa83 	bl	80023da <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002ed4:	4645      	mov	r5, r8
 8002ed6:	4654      	mov	r4, sl
 8002ed8:	4465      	add	r5, ip
 8002eda:	7fee      	ldrb	r6, [r5, #31]
 8002edc:	19a5      	adds	r5, r4, r6
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002ede:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002ee0:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002ee2:	46a0      	mov	r8, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002ee4:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002ee6:	4446      	add	r6, r8
 8002ee8:	00b6      	lsls	r6, r6, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002eea:	5965      	ldr	r5, [r4, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002eec:	59a6      	ldr	r6, [r4, r6]
    llr_t a_inv = -llr_layer_a;
 8002eee:	426c      	negs	r4, r5
 8002ef0:	46a0      	mov	r8, r4
    if (llr_layer_a < llr_layer_b) {
 8002ef2:	42ae      	cmp	r6, r5
 8002ef4:	dc00      	bgt.n	8002ef8 <hsc_decode+0xc30>
 8002ef6:	e1d2      	b.n	800329e <hsc_decode+0xfd6>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002ef8:	4546      	cmp	r6, r8
 8002efa:	dd01      	ble.n	8002f00 <hsc_decode+0xc38>
 8002efc:	f7ff fac3 	bl	8002486 <hsc_decode+0x1be>
    llr_t b_inv = -llr_layer_b;
 8002f00:	4275      	negs	r5, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002f02:	60dd      	str	r5, [r3, #12]
 8002f04:	f7ff fac0 	bl	8002488 <hsc_decode+0x1c0>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8002f08:	1a59      	subs	r1, r3, r1
 8002f0a:	64f9      	str	r1, [r7, #76]	; 0x4c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8002f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8002f0e:	e51c      	b.n	800294a <hsc_decode+0x682>
 8002f10:	2304      	movs	r3, #4
 8002f12:	469c      	mov	ip, r3
 8002f14:	9b00      	ldr	r3, [sp, #0]
           chk2       |= (1<<k);
 8002f16:	40a0      	lsls	r0, r4
 8002f18:	085a      	lsrs	r2, r3, #1
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	4318      	orrs	r0, r3
           idx_b[k]    = idx_a[i];
 8002f1e:	193b      	adds	r3, r7, r4
 8002f20:	4698      	mov	r8, r3
 8002f22:	2374      	movs	r3, #116	; 0x74
 8002f24:	4699      	mov	r9, r3
 8002f26:	4663      	mov	r3, ip
 8002f28:	44c8      	add	r8, r9
 8002f2a:	431a      	orrs	r2, r3
           chk2       |= (1<<k);
 8002f2c:	b2c3      	uxtb	r3, r0
 8002f2e:	4699      	mov	r9, r3
           idx_b[k]    = idx_a[i];
 8002f30:	4643      	mov	r3, r8
           pri[p_i--]  = k;
 8002f32:	197d      	adds	r5, r7, r5
 8002f34:	3548      	adds	r5, #72	; 0x48
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	702c      	strb	r4, [r5, #0]
           idx_b[k]    = idx_a[i];
 8002f3a:	701e      	strb	r6, [r3, #0]
    switch ((chk1>>1) & 7) {
 8002f3c:	2a06      	cmp	r2, #6
 8002f3e:	d800      	bhi.n	8002f42 <hsc_decode+0xc7a>
 8002f40:	e5ba      	b.n	8002ab8 <hsc_decode+0x7f0>
 8002f42:	2348      	movs	r3, #72	; 0x48
 8002f44:	003a      	movs	r2, r7
 8002f46:	5cfb      	ldrb	r3, [r7, r3]
 8002f48:	3274      	adds	r2, #116	; 0x74
 8002f4a:	5cd1      	ldrb	r1, [r2, r3]
 8002f4c:	084b      	lsrs	r3, r1, #1
 8002f4e:	9307      	str	r3, [sp, #28]
 8002f50:	e5c5      	b.n	8002ade <hsc_decode+0x816>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8002f52:	1acb      	subs	r3, r1, r3
 8002f54:	657b      	str	r3, [r7, #84]	; 0x54
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8002f56:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f58:	e502      	b.n	8002960 <hsc_decode+0x698>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8002f5a:	1acb      	subs	r3, r1, r3
 8002f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8002f5e:	6639      	str	r1, [r7, #96]	; 0x60
 8002f60:	e509      	b.n	8002976 <hsc_decode+0x6ae>
 8002f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f64:	464f      	mov	r7, r9
 8002f66:	469b      	mov	fp, r3
 8002f68:	9b04      	ldr	r3, [sp, #16]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	469c      	mov	ip, r3
 8002f6e:	e722      	b.n	8002db6 <hsc_decode+0xaee>
            next_pt         = 2;
 8002f70:	3301      	adds	r3, #1
 8002f72:	4699      	mov	r9, r3
            lmd0            = 0;
 8002f74:	2300      	movs	r3, #0
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002f76:	2606      	movs	r6, #6
 8002f78:	2202      	movs	r2, #2
 8002f7a:	469c      	mov	ip, r3
 8002f7c:	46ba      	mov	sl, r7
 8002f7e:	4c24      	ldr	r4, [pc, #144]	; (8003010 <hsc_decode+0xd48>)
            lmd0            = 0;
 8002f80:	9304      	str	r3, [sp, #16]
                int incval  = (beta < beta_laststage);
 8002f82:	9901      	ldr	r1, [sp, #4]
 8002f84:	2301      	movs	r3, #1
 8002f86:	4291      	cmp	r1, r2
 8002f88:	dc00      	bgt.n	8002f8c <hsc_decode+0xcc4>
 8002f8a:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002f8c:	4660      	mov	r0, ip
 8002f8e:	4655      	mov	r5, sl
 8002f90:	5c2d      	ldrb	r5, [r5, r0]
 8002f92:	9802      	ldr	r0, [sp, #8]
 8002f94:	0091      	lsls	r1, r2, #2
 8002f96:	4680      	mov	r8, r0
 8002f98:	4441      	add	r1, r8
 8002f9a:	5d49      	ldrb	r1, [r1, r5]
 8002f9c:	7820      	ldrb	r0, [r4, #0]
 8002f9e:	4688      	mov	r8, r1
 8002fa0:	4647      	mov	r7, r8
 8002fa2:	0055      	lsls	r5, r2, #1
 8002fa4:	18e9      	adds	r1, r5, r3
 8002fa6:	4047      	eors	r7, r0
 8002fa8:	9802      	ldr	r0, [sp, #8]
 8002faa:	0089      	lsls	r1, r1, #2
 8002fac:	5447      	strb	r7, [r0, r1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002fae:	18f3      	adds	r3, r6, r3
 8002fb0:	7821      	ldrb	r1, [r4, #0]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	54c1      	strb	r1, [r0, r3]
                if (beta == next_pt) {
 8002fb6:	4591      	cmp	r9, r2
 8002fb8:	d007      	beq.n	8002fca <hsc_decode+0xd02>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002fba:	9b03      	ldr	r3, [sp, #12]
 8002fbc:	3202      	adds	r2, #2
 8002fbe:	3604      	adds	r6, #4
 8002fc0:	3408      	adds	r4, #8
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	dcdd      	bgt.n	8002f82 <hsc_decode+0xcba>
 8002fc6:	4657      	mov	r7, sl
 8002fc8:	e6f5      	b.n	8002db6 <hsc_decode+0xaee>
                    next_pt = (next_pt << 1) + 2;
 8002fca:	1cab      	adds	r3, r5, #2
 8002fcc:	4699      	mov	r9, r3
                    lmd0++;
 8002fce:	9b04      	ldr	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002fd0:	3202      	adds	r2, #2
                    lmd0++;
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	9304      	str	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002fd6:	9b03      	ldr	r3, [sp, #12]
 8002fd8:	3604      	adds	r6, #4
 8002fda:	3408      	adds	r4, #8
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	db00      	blt.n	8002fe2 <hsc_decode+0xd1a>
 8002fe0:	e14b      	b.n	800327a <hsc_decode+0xfb2>
 8002fe2:	9b04      	ldr	r3, [sp, #16]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	469c      	mov	ip, r3
 8002fe8:	e7cb      	b.n	8002f82 <hsc_decode+0xcba>
 8002fea:	b249      	sxtb	r1, r1
 8002fec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002fee:	e46a      	b.n	80028c6 <hsc_decode+0x5fe>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	667b      	str	r3, [r7, #100]	; 0x64
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8002ff4:	66ba      	str	r2, [r7, #104]	; 0x68
 8002ff6:	e4c9      	b.n	800298c <hsc_decode+0x6c4>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002ff8:	003b      	movs	r3, r7
 8002ffa:	e6de      	b.n	8002dba <hsc_decode+0xaf2>
        case 0: idx_b[1]    = idx_a[1]; 
 8002ffc:	003a      	movs	r2, r7
                pri[0]      = 1;
 8002ffe:	2048      	movs	r0, #72	; 0x48
 8003000:	2401      	movs	r4, #1
        case 0: idx_b[1]    = idx_a[1]; 
 8003002:	3274      	adds	r2, #116	; 0x74
                pri[0]      = 1;
 8003004:	543c      	strb	r4, [r7, r0]
        case 0: idx_b[1]    = idx_a[1]; 
 8003006:	7051      	strb	r1, [r2, #1]
 8003008:	e569      	b.n	8002ade <hsc_decode+0x816>
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	0800a83c 	.word	0x0800a83c
 8003010:	2000057c 	.word	0x2000057c
 8003014:	03020100 	.word	0x03020100
 8003018:	20000970 	.word	0x20000970
            lmd0            = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	469c      	mov	ip, r3
 8003020:	9304      	str	r3, [sp, #16]
 8003022:	465b      	mov	r3, fp
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003024:	2606      	movs	r6, #6
 8003026:	930e      	str	r3, [sp, #56]	; 0x38
 8003028:	4663      	mov	r3, ip
 800302a:	2102      	movs	r1, #2
            next_pt         = 2;
 800302c:	46da      	mov	sl, fp
 800302e:	46b8      	mov	r8, r7
 8003030:	4ca7      	ldr	r4, [pc, #668]	; (80032d0 <hsc_decode+0x1008>)
 8003032:	9600      	str	r6, [sp, #0]
 8003034:	9307      	str	r3, [sp, #28]
                int incval  = (beta < beta_laststage);
 8003036:	9a01      	ldr	r2, [sp, #4]
 8003038:	2301      	movs	r3, #1
 800303a:	428a      	cmp	r2, r1
 800303c:	dc00      	bgt.n	8003040 <hsc_decode+0xd78>
 800303e:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003040:	4642      	mov	r2, r8
 8003042:	9f07      	ldr	r7, [sp, #28]
 8003044:	0088      	lsls	r0, r1, #2
 8003046:	5dd2      	ldrb	r2, [r2, r7]
 8003048:	9f02      	ldr	r7, [sp, #8]
 800304a:	7825      	ldrb	r5, [r4, #0]
 800304c:	46bc      	mov	ip, r7
 800304e:	4460      	add	r0, ip
 8003050:	5c82      	ldrb	r2, [r0, r2]
 8003052:	4691      	mov	r9, r2
 8003054:	464e      	mov	r6, r9
                int bit0_i  = (beta*2) + incval;
 8003056:	004a      	lsls	r2, r1, #1
 8003058:	4694      	mov	ip, r2
 800305a:	18d2      	adds	r2, r2, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800305c:	4075      	eors	r5, r6
 800305e:	0092      	lsls	r2, r2, #2
 8003060:	54bd      	strb	r5, [r7, r2]
                int bit1_i  = ((beta+1)*2) + incval;
 8003062:	9d00      	ldr	r5, [sp, #0]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003064:	003e      	movs	r6, r7
                int bit1_i  = ((beta+1)*2) + incval;
 8003066:	46a9      	mov	r9, r5
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003068:	7825      	ldrb	r5, [r4, #0]
                int bit1_i  = ((beta+1)*2) + incval;
 800306a:	444b      	add	r3, r9
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800306c:	46a9      	mov	r9, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800306e:	9f07      	ldr	r7, [sp, #28]
 8003070:	4645      	mov	r5, r8
 8003072:	46bb      	mov	fp, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003074:	464f      	mov	r7, r9
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003076:	46b1      	mov	r9, r6
 8003078:	445d      	add	r5, fp
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800307a:	009b      	lsls	r3, r3, #2
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800307c:	786d      	ldrb	r5, [r5, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800307e:	54f7      	strb	r7, [r6, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003080:	5d40      	ldrb	r0, [r0, r5]
 8003082:	7865      	ldrb	r5, [r4, #1]
 8003084:	444a      	add	r2, r9
 8003086:	4068      	eors	r0, r5
 8003088:	7050      	strb	r0, [r2, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800308a:	7862      	ldrb	r2, [r4, #1]
 800308c:	444b      	add	r3, r9
 800308e:	705a      	strb	r2, [r3, #1]
                if (beta == next_pt) {
 8003090:	4551      	cmp	r1, sl
 8003092:	d00d      	beq.n	80030b0 <hsc_decode+0xde8>
 8003094:	9b00      	ldr	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003096:	3102      	adds	r1, #2
 8003098:	3304      	adds	r3, #4
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	9b03      	ldr	r3, [sp, #12]
 800309e:	3408      	adds	r4, #8
 80030a0:	428b      	cmp	r3, r1
 80030a2:	dcc8      	bgt.n	8003036 <hsc_decode+0xd6e>
 80030a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030a6:	4647      	mov	r7, r8
 80030a8:	469b      	mov	fp, r3
 80030aa:	9b07      	ldr	r3, [sp, #28]
 80030ac:	469c      	mov	ip, r3
 80030ae:	e682      	b.n	8002db6 <hsc_decode+0xaee>
                    next_pt = (next_pt << 1) + 2;
 80030b0:	2302      	movs	r3, #2
 80030b2:	4463      	add	r3, ip
 80030b4:	469a      	mov	sl, r3
                    lmd0++;
 80030b6:	9b04      	ldr	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80030b8:	3102      	adds	r1, #2
                    lmd0++;
 80030ba:	3301      	adds	r3, #1
 80030bc:	9304      	str	r3, [sp, #16]
 80030be:	9b00      	ldr	r3, [sp, #0]
 80030c0:	3408      	adds	r4, #8
 80030c2:	3304      	adds	r3, #4
 80030c4:	9300      	str	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80030c6:	9b03      	ldr	r3, [sp, #12]
 80030c8:	4299      	cmp	r1, r3
 80030ca:	db00      	blt.n	80030ce <hsc_decode+0xe06>
 80030cc:	e0da      	b.n	8003284 <hsc_decode+0xfbc>
 80030ce:	9b04      	ldr	r3, [sp, #16]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	9307      	str	r3, [sp, #28]
 80030d4:	e7af      	b.n	8003036 <hsc_decode+0xd6e>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80030d6:	4664      	mov	r4, ip
 80030d8:	4647      	mov	r7, r8
 80030da:	5de4      	ldrb	r4, [r4, r7]
    if (bit_layer) {
 80030dc:	5d04      	ldrb	r4, [r0, r4]
 80030de:	2c00      	cmp	r4, #0
 80030e0:	d000      	beq.n	80030e4 <hsc_decode+0xe1c>
        llr_layer_a = -llr_layer_a;
 80030e2:	426d      	negs	r5, r5
				for (int l=0; l<num_paths; l++) {
 80030e4:	465c      	mov	r4, fp
    return (llr_layer_b + llr_layer_a);
 80030e6:	1975      	adds	r5, r6, r5
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80030e8:	601d      	str	r5, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 80030ea:	2c01      	cmp	r4, #1
 80030ec:	d101      	bne.n	80030f2 <hsc_decode+0xe2a>
 80030ee:	f7ff f974 	bl	80023da <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80030f2:	4666      	mov	r6, ip
 80030f4:	4446      	add	r6, r8
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80030f6:	7874      	ldrb	r4, [r6, #1]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80030f8:	7f75      	ldrb	r5, [r6, #29]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80030fa:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80030fc:	4654      	mov	r4, sl
 80030fe:	1966      	adds	r6, r4, r5
    if (bit_layer) {
 8003100:	464c      	mov	r4, r9
 8003102:	5d04      	ldrb	r4, [r0, r4]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003104:	00b6      	lsls	r6, r6, #2
    if (bit_layer) {
 8003106:	0027      	movs	r7, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003108:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800310a:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800310c:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800310e:	444d      	add	r5, r9
 8003110:	00ad      	lsls	r5, r5, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003112:	59a6      	ldr	r6, [r4, r6]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003114:	5965      	ldr	r5, [r4, r5]
    if (bit_layer) {
 8003116:	2f00      	cmp	r7, #0
 8003118:	d000      	beq.n	800311c <hsc_decode+0xe54>
        llr_layer_a = -llr_layer_a;
 800311a:	4276      	negs	r6, r6
				for (int l=0; l<num_paths; l++) {
 800311c:	465c      	mov	r4, fp
    return (llr_layer_b + llr_layer_a);
 800311e:	19ae      	adds	r6, r5, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003120:	605e      	str	r6, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 8003122:	2c02      	cmp	r4, #2
 8003124:	d101      	bne.n	800312a <hsc_decode+0xe62>
 8003126:	f7ff f958 	bl	80023da <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800312a:	4666      	mov	r6, ip
 800312c:	4446      	add	r6, r8
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800312e:	78b4      	ldrb	r4, [r6, #2]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003130:	7fb5      	ldrb	r5, [r6, #30]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003132:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003134:	4654      	mov	r4, sl
 8003136:	1966      	adds	r6, r4, r5
    if (bit_layer) {
 8003138:	464c      	mov	r4, r9
 800313a:	5d04      	ldrb	r4, [r0, r4]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800313c:	00b6      	lsls	r6, r6, #2
    if (bit_layer) {
 800313e:	0027      	movs	r7, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003140:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003142:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003144:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003146:	444d      	add	r5, r9
 8003148:	00ad      	lsls	r5, r5, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800314a:	59a6      	ldr	r6, [r4, r6]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800314c:	5965      	ldr	r5, [r4, r5]
    if (bit_layer) {
 800314e:	2f00      	cmp	r7, #0
 8003150:	d000      	beq.n	8003154 <hsc_decode+0xe8c>
        llr_layer_a = -llr_layer_a;
 8003152:	4276      	negs	r6, r6
				for (int l=0; l<num_paths; l++) {
 8003154:	465c      	mov	r4, fp
    return (llr_layer_b + llr_layer_a);
 8003156:	19ae      	adds	r6, r5, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003158:	609e      	str	r6, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 800315a:	2c03      	cmp	r4, #3
 800315c:	d101      	bne.n	8003162 <hsc_decode+0xe9a>
 800315e:	f7ff f93c 	bl	80023da <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003162:	4646      	mov	r6, r8
 8003164:	4466      	add	r6, ip
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003166:	78f4      	ldrb	r4, [r6, #3]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003168:	7ff5      	ldrb	r5, [r6, #31]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800316a:	46a0      	mov	r8, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800316c:	4654      	mov	r4, sl
 800316e:	1966      	adds	r6, r4, r5
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003170:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003172:	00b6      	lsls	r6, r6, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003174:	46a1      	mov	r9, r4
    if (bit_layer) {
 8003176:	4644      	mov	r4, r8
 8003178:	5d04      	ldrb	r4, [r0, r4]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800317a:	444d      	add	r5, r9
    if (bit_layer) {
 800317c:	46a0      	mov	r8, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800317e:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003180:	00ad      	lsls	r5, r5, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003182:	59a6      	ldr	r6, [r4, r6]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003184:	5965      	ldr	r5, [r4, r5]
    if (bit_layer) {
 8003186:	4644      	mov	r4, r8
 8003188:	2c00      	cmp	r4, #0
 800318a:	d000      	beq.n	800318e <hsc_decode+0xec6>
        llr_layer_a = -llr_layer_a;
 800318c:	4276      	negs	r6, r6
    return (llr_layer_b + llr_layer_a);
 800318e:	19ae      	adds	r6, r5, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003190:	60de      	str	r6, [r3, #12]
 8003192:	f7ff f922 	bl	80023da <hsc_decode+0x112>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003196:	3303      	adds	r3, #3
 8003198:	469a      	mov	sl, r3
            next_pt         = 2;
 800319a:	3b04      	subs	r3, #4
 800319c:	9307      	str	r3, [sp, #28]
            lmd0            = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	9304      	str	r3, [sp, #16]
 80031a2:	469c      	mov	ip, r3
 80031a4:	465b      	mov	r3, fp
 80031a6:	930e      	str	r3, [sp, #56]	; 0x38
 80031a8:	4653      	mov	r3, sl
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80031aa:	2402      	movs	r4, #2
 80031ac:	46b9      	mov	r9, r7
 80031ae:	4948      	ldr	r1, [pc, #288]	; (80032d0 <hsc_decode+0x1008>)
 80031b0:	9300      	str	r3, [sp, #0]
                int incval  = (beta < beta_laststage);
 80031b2:	9a01      	ldr	r2, [sp, #4]
 80031b4:	2301      	movs	r3, #1
 80031b6:	42a2      	cmp	r2, r4
 80031b8:	dc00      	bgt.n	80031bc <hsc_decode+0xef4>
 80031ba:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80031bc:	9f02      	ldr	r7, [sp, #8]
 80031be:	4665      	mov	r5, ip
 80031c0:	464a      	mov	r2, r9
 80031c2:	46b8      	mov	r8, r7
 80031c4:	5d52      	ldrb	r2, [r2, r5]
 80031c6:	00a0      	lsls	r0, r4, #2
 80031c8:	4440      	add	r0, r8
 80031ca:	5c85      	ldrb	r5, [r0, r2]
 80031cc:	780e      	ldrb	r6, [r1, #0]
                int bit0_i  = (beta*2) + incval;
 80031ce:	0062      	lsls	r2, r4, #1
 80031d0:	4690      	mov	r8, r2
 80031d2:	18d2      	adds	r2, r2, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80031d4:	4075      	eors	r5, r6
 80031d6:	0092      	lsls	r2, r2, #2
 80031d8:	464e      	mov	r6, r9
 80031da:	54bd      	strb	r5, [r7, r2]
                int bit1_i  = ((beta+1)*2) + incval;
 80031dc:	9d00      	ldr	r5, [sp, #0]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80031de:	4466      	add	r6, ip
                int bit1_i  = ((beta+1)*2) + incval;
 80031e0:	46aa      	mov	sl, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80031e2:	7877      	ldrb	r7, [r6, #1]
                int bit1_i  = ((beta+1)*2) + incval;
 80031e4:	4453      	add	r3, sl
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80031e6:	46ba      	mov	sl, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80031e8:	780d      	ldrb	r5, [r1, #0]
 80031ea:	9f02      	ldr	r7, [sp, #8]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	54fd      	strb	r5, [r7, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80031f0:	784f      	ldrb	r7, [r1, #1]
 80031f2:	4655      	mov	r5, sl
 80031f4:	46ba      	mov	sl, r7
 80031f6:	9f02      	ldr	r7, [sp, #8]
 80031f8:	5d45      	ldrb	r5, [r0, r5]
 80031fa:	46bb      	mov	fp, r7
 80031fc:	4657      	mov	r7, sl
 80031fe:	445a      	add	r2, fp
 8003200:	407d      	eors	r5, r7
 8003202:	7055      	strb	r5, [r2, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003204:	784d      	ldrb	r5, [r1, #1]
 8003206:	445b      	add	r3, fp
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003208:	78b6      	ldrb	r6, [r6, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800320a:	705d      	strb	r5, [r3, #1]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800320c:	5d80      	ldrb	r0, [r0, r6]
 800320e:	788d      	ldrb	r5, [r1, #2]
 8003210:	4068      	eors	r0, r5
 8003212:	7090      	strb	r0, [r2, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003214:	788a      	ldrb	r2, [r1, #2]
 8003216:	709a      	strb	r2, [r3, #2]
                if (beta == next_pt) {
 8003218:	9b07      	ldr	r3, [sp, #28]
 800321a:	429c      	cmp	r4, r3
 800321c:	d008      	beq.n	8003230 <hsc_decode+0xf68>
 800321e:	9b00      	ldr	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003220:	3402      	adds	r4, #2
 8003222:	3304      	adds	r3, #4
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	9b03      	ldr	r3, [sp, #12]
 8003228:	3108      	adds	r1, #8
 800322a:	42a3      	cmp	r3, r4
 800322c:	dcc1      	bgt.n	80031b2 <hsc_decode+0xeea>
 800322e:	e5bf      	b.n	8002db0 <hsc_decode+0xae8>
                    next_pt = (next_pt << 1) + 2;
 8003230:	4643      	mov	r3, r8
 8003232:	3302      	adds	r3, #2
 8003234:	9307      	str	r3, [sp, #28]
                    lmd0++;
 8003236:	9b04      	ldr	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003238:	3402      	adds	r4, #2
                    lmd0++;
 800323a:	3301      	adds	r3, #1
 800323c:	9304      	str	r3, [sp, #16]
 800323e:	9b00      	ldr	r3, [sp, #0]
 8003240:	3108      	adds	r1, #8
 8003242:	3304      	adds	r3, #4
 8003244:	9300      	str	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003246:	9b03      	ldr	r3, [sp, #12]
 8003248:	429c      	cmp	r4, r3
 800324a:	db00      	blt.n	800324e <hsc_decode+0xf86>
 800324c:	e689      	b.n	8002f62 <hsc_decode+0xc9a>
 800324e:	9b04      	ldr	r3, [sp, #16]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	469c      	mov	ip, r3
 8003254:	e7ad      	b.n	80031b2 <hsc_decode+0xeea>
 8003256:	9b00      	ldr	r3, [sp, #0]
 8003258:	085a      	lsrs	r2, r3, #1
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 800325a:	2303      	movs	r3, #3
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	469b      	mov	fp, r3
 8003260:	e427      	b.n	8002ab2 <hsc_decode+0x7ea>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 8003262:	0035      	movs	r5, r6
 8003264:	42a6      	cmp	r6, r4
 8003266:	db00      	blt.n	800326a <hsc_decode+0xfa2>
 8003268:	e5f8      	b.n	8002e5c <hsc_decode+0xb94>
 800326a:	0025      	movs	r5, r4
 800326c:	e5f6      	b.n	8002e5c <hsc_decode+0xb94>
 800326e:	0035      	movs	r5, r6
 8003270:	454e      	cmp	r6, r9
 8003272:	db00      	blt.n	8003276 <hsc_decode+0xfae>
 8003274:	e60d      	b.n	8002e92 <hsc_decode+0xbca>
 8003276:	464d      	mov	r5, r9
 8003278:	e60b      	b.n	8002e92 <hsc_decode+0xbca>
 800327a:	9b04      	ldr	r3, [sp, #16]
 800327c:	4657      	mov	r7, sl
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	469c      	mov	ip, r3
 8003282:	e598      	b.n	8002db6 <hsc_decode+0xaee>
 8003284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003286:	4647      	mov	r7, r8
 8003288:	469b      	mov	fp, r3
 800328a:	9b04      	ldr	r3, [sp, #16]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	469c      	mov	ip, r3
 8003290:	e591      	b.n	8002db6 <hsc_decode+0xaee>
 8003292:	0035      	movs	r5, r6
 8003294:	454e      	cmp	r6, r9
 8003296:	db00      	blt.n	800329a <hsc_decode+0xfd2>
 8003298:	e616      	b.n	8002ec8 <hsc_decode+0xc00>
 800329a:	464d      	mov	r5, r9
 800329c:	e614      	b.n	8002ec8 <hsc_decode+0xc00>
 800329e:	0035      	movs	r5, r6
 80032a0:	4546      	cmp	r6, r8
 80032a2:	db01      	blt.n	80032a8 <hsc_decode+0xfe0>
 80032a4:	f7ff f8ef 	bl	8002486 <hsc_decode+0x1be>
 80032a8:	4645      	mov	r5, r8
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80032aa:	60dd      	str	r5, [r3, #12]
 80032ac:	f7ff f8ec 	bl	8002488 <hsc_decode+0x1c0>
        for (i=0, phi=0; phi<h->infobits; i++) {
 80032b0:	225f      	movs	r2, #95	; 0x5f
 80032b2:	4690      	mov	r8, r2
 80032b4:	3210      	adds	r2, #16
 80032b6:	4694      	mov	ip, r2
 80032b8:	3208      	adds	r2, #8
 80032ba:	4692      	mov	sl, r2
 80032bc:	3204      	adds	r2, #4
 80032be:	4691      	mov	r9, r2
 80032c0:	3203      	adds	r2, #3
 80032c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80032c4:	3201      	adds	r2, #1
 80032c6:	277d      	movs	r7, #125	; 0x7d
 80032c8:	2100      	movs	r1, #0
 80032ca:	9212      	str	r2, [sp, #72]	; 0x48
 80032cc:	f7ff fafb 	bl	80028c6 <hsc_decode+0x5fe>
 80032d0:	2000057c 	.word	0x2000057c

080032d4 <hsc_decode_blockllr>:




uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 80032d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d6:	46de      	mov	lr, fp
 80032d8:	4657      	mov	r7, sl
 80032da:	464e      	mov	r6, r9
 80032dc:	4645      	mov	r5, r8
 80032de:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t crcreg;
    int i;
    int num_paths;

    /// Zero intermediate buffers
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 80032e0:	4fc2      	ldr	r7, [pc, #776]	; (80035ec <hsc_decode_blockllr+0x318>)
uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 80032e2:	b099      	sub	sp, #100	; 0x64
 80032e4:	900f      	str	r0, [sp, #60]	; 0x3c
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 80032e6:	0038      	movs	r0, r7
uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 80032e8:	9112      	str	r1, [sp, #72]	; 0x48
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 80032ea:	301c      	adds	r0, #28
uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 80032ec:	920a      	str	r2, [sp, #40]	; 0x28
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 80032ee:	2100      	movs	r1, #0
 80032f0:	2207      	movs	r2, #7
uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 80032f2:	001c      	movs	r4, r3
 80032f4:	9300      	str	r3, [sp, #0]
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 80032f6:	f005 fb57 	bl	80089a8 <ot_memset_4>
    ot_memset_4(PRIBIT(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 80032fa:	0038      	movs	r0, r7
 80032fc:	2207      	movs	r2, #7
 80032fe:	2100      	movs	r1, #0
 8003300:	f005 fb52 	bl	80089a8 <ot_memset_4>
    ot_memset_4(PM(h), 0, LISTSIZE/4);
 8003304:	0038      	movs	r0, r7
 8003306:	2201      	movs	r2, #1
 8003308:	3038      	adds	r0, #56	; 0x38
 800330a:	2100      	movs	r1, #0
 800330c:	f005 fb4c 	bl	80089a8 <ot_memset_4>
    /// num_paths intializes as 1, will expand to LISTSIZE
    num_paths = 1;

    /// Outer Decoding Loop.
    /// Runs once per each bit in the Block (128 iteration)
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 8003310:	2100      	movs	r1, #0
    PRIORITY(h)[0] = 0;
 8003312:	2348      	movs	r3, #72	; 0x48
 8003314:	2200      	movs	r2, #0
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 8003316:	9106      	str	r1, [sp, #24]
    num_paths = 1;
 8003318:	3101      	adds	r1, #1
				int ibit	= beta_e & 7;
				int ibyte	= beta_e >> 3;
				uint8_t bit1= (inbytes[ibyte] >> ibit);
				uint8_t bit0= b1 & 1;
				bit1		= (bit1>>1) & 1;
				llr0 		= bit0 ? -blockllr : blockllr;
 800331a:	468b      	mov	fp, r1
 800331c:	48b4      	ldr	r0, [pc, #720]	; (80035f0 <hsc_decode_blockllr+0x31c>)
    PRIORITY(h)[0] = 0;
 800331e:	54fa      	strb	r2, [r7, r3]
 8003320:	9011      	str	r0, [sp, #68]	; 0x44
 8003322:	48b4      	ldr	r0, [pc, #720]	; (80035f4 <hsc_decode_blockllr+0x320>)
				llr0 		= bit0 ? -blockllr : blockllr;
 8003324:	4263      	negs	r3, r4
 8003326:	9003      	str	r0, [sp, #12]
 8003328:	48b3      	ldr	r0, [pc, #716]	; (80035f8 <hsc_decode_blockllr+0x324>)
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	900b      	str	r0, [sp, #44]	; 0x2c
 800332e:	48b3      	ldr	r0, [pc, #716]	; (80035fc <hsc_decode_blockllr+0x328>)
 8003330:	9b06      	ldr	r3, [sp, #24]
 8003332:	9010      	str	r0, [sp, #64]	; 0x40
                next_pt   >>= 1;
                use_gfunc   = phi & next_pt;

                if (--lmd0 >= 0) {
#                   if WORDIFY && (LISTSIZE==4)
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 8003334:	48b2      	ldr	r0, [pc, #712]	; (8003600 <hsc_decode_blockllr+0x32c>)
 8003336:	900c      	str	r0, [sp, #48]	; 0x30
#           endif

        }
        else {
            // calculate llr of each fork path
            int min_lmd = minlambda_lut[phi];
 8003338:	48b2      	ldr	r0, [pc, #712]	; (8003604 <hsc_decode_blockllr+0x330>)
 800333a:	9013      	str	r0, [sp, #76]	; 0x4c
                        case 1: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
                        case 0: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];
                       default: break;
                    }
                    lmd = max_lmd;
                    switch (max_lmd) {
 800333c:	48b2      	ldr	r0, [pc, #712]	; (8003608 <hsc_decode_blockllr+0x334>)
 800333e:	9014      	str	r0, [sp, #80]	; 0x50
                    switch (max_lmd-min_lmd) {
 8003340:	48b2      	ldr	r0, [pc, #712]	; (800360c <hsc_decode_blockllr+0x338>)
 8003342:	9015      	str	r0, [sp, #84]	; 0x54
        int next_pt     = (1 << lmd0);
 8003344:	2401      	movs	r4, #1
        int lmd0        = lambda_lut[phi];
 8003346:	9a11      	ldr	r2, [sp, #68]	; 0x44
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8003348:	2102      	movs	r1, #2
        int lmd0        = lambda_lut[phi];
 800334a:	5cd0      	ldrb	r0, [r2, r3]
        int next_pt     = (1 << lmd0);
 800334c:	4084      	lsls	r4, r0
        bool use_gfunc  = (bool)(phi & next_pt);
 800334e:	4023      	ands	r3, r4
 8003350:	001a      	movs	r2, r3
 8003352:	1e53      	subs	r3, r2, #1
 8003354:	419a      	sbcs	r2, r3
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8003356:	4081      	lsls	r1, r0
        bool use_gfunc  = (bool)(phi & next_pt);
 8003358:	b2d3      	uxtb	r3, r2
        int lmd0        = lambda_lut[phi];
 800335a:	9005      	str	r0, [sp, #20]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 800335c:	4688      	mov	r8, r1
        bool use_gfunc  = (bool)(phi & next_pt);
 800335e:	9304      	str	r3, [sp, #16]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8003360:	2901      	cmp	r1, #1
 8003362:	dd7b      	ble.n	800345c <hsc_decode_blockllr+0x188>
 8003364:	9810      	ldr	r0, [sp, #64]	; 0x40
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 8003366:	465b      	mov	r3, fp
 8003368:	4684      	mov	ip, r0
 800336a:	49a9      	ldr	r1, [pc, #676]	; (8003610 <hsc_decode_blockllr+0x33c>)
 800336c:	3b01      	subs	r3, #1
 800336e:	4441      	add	r1, r8
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	0109      	lsls	r1, r1, #4
 8003374:	930d      	str	r3, [sp, #52]	; 0x34
 8003376:	4461      	add	r1, ip
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 8003378:	469c      	mov	ip, r3
 800337a:	4643      	mov	r3, r8
 800337c:	1e5d      	subs	r5, r3, #1
 800337e:	4ba5      	ldr	r3, [pc, #660]	; (8003614 <hsc_decode_blockllr+0x340>)
 8003380:	9702      	str	r7, [sp, #8]
 8003382:	4443      	add	r3, r8
 8003384:	9308      	str	r3, [sp, #32]
 8003386:	4ba4      	ldr	r3, [pc, #656]	; (8003618 <hsc_decode_blockllr+0x344>)
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8003388:	2200      	movs	r2, #0
 800338a:	4443      	add	r3, r8
 800338c:	9307      	str	r3, [sp, #28]
 800338e:	4643      	mov	r3, r8
 8003390:	0027      	movs	r7, r4
 8003392:	46a8      	mov	r8, r5
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 8003394:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003396:	9309      	str	r3, [sp, #36]	; 0x24
 8003398:	4460      	add	r0, ip
 800339a:	900e      	str	r0, [sp, #56]	; 0x38
 800339c:	4d9f      	ldr	r5, [pc, #636]	; (800361c <hsc_decode_blockllr+0x348>)
 800339e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033a0:	46ac      	mov	ip, r5
 80033a2:	1a9c      	subs	r4, r3, r2
 80033a4:	9b08      	ldr	r3, [sp, #32]
 80033a6:	00e0      	lsls	r0, r4, #3
 80033a8:	1a9e      	subs	r6, r3, r2
 80033aa:	0075      	lsls	r5, r6, #1
 80033ac:	4460      	add	r0, ip
 80033ae:	46ac      	mov	ip, r5
 80033b0:	4645      	mov	r5, r8
 80033b2:	1aad      	subs	r5, r5, r2
 80033b4:	46aa      	mov	sl, r5
			if (beta_x2 >= BLOCKLENGTH) {
 80033b6:	4665      	mov	r5, ip
 80033b8:	9b07      	ldr	r3, [sp, #28]
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	2d7f      	cmp	r5, #127	; 0x7f
 80033c0:	dc01      	bgt.n	80033c6 <hsc_decode_blockllr+0xf2>
 80033c2:	f000 fd57 	bl	8003e74 <hsc_decode_blockllr+0xba0>
				uint8_t bit1= (inbytes[ibyte] >> ibit);
 80033c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
				int ibyte	= beta_e >> 3;
 80033c8:	10dc      	asrs	r4, r3, #3
				uint8_t bit1= (inbytes[ibyte] >> ibit);
 80033ca:	5d2c      	ldrb	r4, [r5, r4]
				int ibit	= beta_e & 7;
 80033cc:	2507      	movs	r5, #7
 80033ce:	402b      	ands	r3, r5
				uint8_t bit1= (inbytes[ibyte] >> ibit);
 80033d0:	411c      	asrs	r4, r3
				llr1		= bit1 ? -blockllr : blockllr;
 80033d2:	2302      	movs	r3, #2
 80033d4:	4223      	tst	r3, r4
 80033d6:	d100      	bne.n	80033da <hsc_decode_blockllr+0x106>
 80033d8:	e258      	b.n	800388c <hsc_decode_blockllr+0x5b8>
					if (use_gfunc) {
 80033da:	9d01      	ldr	r5, [sp, #4]
 80033dc:	9c04      	ldr	r4, [sp, #16]
 80033de:	002b      	movs	r3, r5
 80033e0:	2c00      	cmp	r4, #0
 80033e2:	d100      	bne.n	80033e6 <hsc_decode_blockllr+0x112>
 80033e4:	e29c      	b.n	8003920 <hsc_decode_blockllr+0x64c>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80033e6:	9c05      	ldr	r4, [sp, #20]
 80033e8:	00a5      	lsls	r5, r4, #2
 80033ea:	9c02      	ldr	r4, [sp, #8]
 80033ec:	5d66      	ldrb	r6, [r4, r5]
    if (bit_layer) {
 80033ee:	9c00      	ldr	r4, [sp, #0]
 80033f0:	5d86      	ldrb	r6, [r0, r6]
 80033f2:	2e00      	cmp	r6, #0
 80033f4:	d100      	bne.n	80033f8 <hsc_decode_blockllr+0x124>
 80033f6:	9c01      	ldr	r4, [sp, #4]
    return (llr_layer_b + llr_layer_a);
 80033f8:	191c      	adds	r4, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80033fa:	600c      	str	r4, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 80033fc:	465c      	mov	r4, fp
 80033fe:	2c01      	cmp	r4, #1
 8003400:	d024      	beq.n	800344c <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003402:	9c02      	ldr	r4, [sp, #8]
 8003404:	1964      	adds	r4, r4, r5
 8003406:	7866      	ldrb	r6, [r4, #1]
    if (bit_layer) {
 8003408:	9c00      	ldr	r4, [sp, #0]
 800340a:	5d86      	ldrb	r6, [r0, r6]
 800340c:	2e00      	cmp	r6, #0
 800340e:	d100      	bne.n	8003412 <hsc_decode_blockllr+0x13e>
 8003410:	9c01      	ldr	r4, [sp, #4]
    return (llr_layer_b + llr_layer_a);
 8003412:	191c      	adds	r4, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003414:	604c      	str	r4, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 8003416:	465c      	mov	r4, fp
 8003418:	2c02      	cmp	r4, #2
 800341a:	d017      	beq.n	800344c <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800341c:	9c02      	ldr	r4, [sp, #8]
 800341e:	1964      	adds	r4, r4, r5
 8003420:	78a6      	ldrb	r6, [r4, #2]
    if (bit_layer) {
 8003422:	9c00      	ldr	r4, [sp, #0]
 8003424:	5d86      	ldrb	r6, [r0, r6]
 8003426:	2e00      	cmp	r6, #0
 8003428:	d100      	bne.n	800342c <hsc_decode_blockllr+0x158>
 800342a:	9c01      	ldr	r4, [sp, #4]
    return (llr_layer_b + llr_layer_a);
 800342c:	191c      	adds	r4, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800342e:	608c      	str	r4, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 8003430:	465c      	mov	r4, fp
 8003432:	2c03      	cmp	r4, #3
 8003434:	d00a      	beq.n	800344c <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003436:	9c02      	ldr	r4, [sp, #8]
 8003438:	46a4      	mov	ip, r4
 800343a:	4465      	add	r5, ip
 800343c:	78ed      	ldrb	r5, [r5, #3]
    if (bit_layer) {
 800343e:	9c00      	ldr	r4, [sp, #0]
 8003440:	5d40      	ldrb	r0, [r0, r5]
 8003442:	2800      	cmp	r0, #0
 8003444:	d100      	bne.n	8003448 <hsc_decode_blockllr+0x174>
 8003446:	9c01      	ldr	r4, [sp, #4]
    return (llr_layer_b + llr_layer_a);
 8003448:	191b      	adds	r3, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800344a:	60cb      	str	r3, [r1, #12]
            if (beta == next_pt) {
 800344c:	4557      	cmp	r7, sl
 800344e:	d100      	bne.n	8003452 <hsc_decode_blockllr+0x17e>
 8003450:	e249      	b.n	80038e6 <hsc_decode_blockllr+0x612>
 8003452:	3201      	adds	r2, #1
 8003454:	3910      	subs	r1, #16
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8003456:	4590      	cmp	r8, r2
 8003458:	d1a0      	bne.n	800339c <hsc_decode_blockllr+0xc8>
 800345a:	9f02      	ldr	r7, [sp, #8]
        if (h->fbit[phi]) {
 800345c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800345e:	9a06      	ldr	r2, [sp, #24]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	5c9b      	ldrb	r3, [r3, r2]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d100      	bne.n	800346a <hsc_decode_blockllr+0x196>
 8003468:	e2f6      	b.n	8003a58 <hsc_decode_blockllr+0x784>
            switch (num_paths-1) {
 800346a:	465b      	mov	r3, fp
 800346c:	3b01      	subs	r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <hsc_decode_blockllr+0x1a2>
 8003472:	f000 fcfc 	bl	8003e6e <hsc_decode_blockllr+0xb9a>
 8003476:	dc01      	bgt.n	800347c <hsc_decode_blockllr+0x1a8>
 8003478:	f000 fce2 	bl	8003e40 <hsc_decode_blockllr+0xb6c>
 800347c:	2b02      	cmp	r3, #2
 800347e:	d101      	bne.n	8003484 <hsc_decode_blockllr+0x1b0>
 8003480:	f000 fcf2 	bl	8003e68 <hsc_decode_blockllr+0xb94>
 8003484:	2b03      	cmp	r3, #3
 8003486:	d118      	bne.n	80034ba <hsc_decode_blockllr+0x1e6>
                case 3: if (LLR(h)[1][3] < 0) { PM(h)[3] -= LLR(h)[1][3]; }
 8003488:	4a5c      	ldr	r2, [pc, #368]	; (80035fc <hsc_decode_blockllr+0x328>)
 800348a:	69d3      	ldr	r3, [r2, #28]
 800348c:	2b00      	cmp	r3, #0
 800348e:	da02      	bge.n	8003496 <hsc_decode_blockllr+0x1c2>
 8003490:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003492:	1acb      	subs	r3, r1, r3
 8003494:	647b      	str	r3, [r7, #68]	; 0x44
                case 2: if (LLR(h)[1][2] < 0) { PM(h)[2] -= LLR(h)[1][2]; }
 8003496:	6993      	ldr	r3, [r2, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	da02      	bge.n	80034a2 <hsc_decode_blockllr+0x1ce>
 800349c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800349e:	1acb      	subs	r3, r1, r3
 80034a0:	643b      	str	r3, [r7, #64]	; 0x40
                case 1: if (LLR(h)[1][1] < 0) { PM(h)[1] -= LLR(h)[1][1]; }
 80034a2:	6953      	ldr	r3, [r2, #20]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	da02      	bge.n	80034ae <hsc_decode_blockllr+0x1da>
 80034a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034aa:	1acb      	subs	r3, r1, r3
 80034ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                case 0: if (LLR(h)[1][0] < 0) { PM(h)[0] -= LLR(h)[1][0]; }
 80034ae:	6913      	ldr	r3, [r2, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	da02      	bge.n	80034ba <hsc_decode_blockllr+0x1e6>
 80034b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	63bb      	str	r3, [r7, #56]	; 0x38
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 80034ba:	2601      	movs	r6, #1
 80034bc:	9c03      	ldr	r4, [sp, #12]
 80034be:	2100      	movs	r1, #0
 80034c0:	46a4      	mov	ip, r4
 80034c2:	9806      	ldr	r0, [sp, #24]
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 80034c4:	4a56      	ldr	r2, [pc, #344]	; (8003620 <hsc_decode_blockllr+0x34c>)
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 80034c6:	4006      	ands	r6, r0
 80034c8:	1cb3      	adds	r3, r6, #2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4463      	add	r3, ip
 80034ce:	6019      	str	r1, [r3, #0]
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 80034d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034d2:	0083      	lsls	r3, r0, #2
 80034d4:	50ca      	str	r2, [r1, r3]
            }
        }


        // update bit tree
        if ((phi & 1) == 0) {
 80034d6:	2e00      	cmp	r6, #0
 80034d8:	d000      	beq.n	80034dc <hsc_decode_blockllr+0x208>
 80034da:	e24d      	b.n	8003978 <hsc_decode_blockllr+0x6a4>
#           if WORDIFY && (LISTSIZE==4)
            *(uint32_t*)PRIBIT(h)[0] = 0x03020100;
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <hsc_decode_blockllr+0x34c>)
 80034de:	603b      	str	r3, [r7, #0]
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 80034e0:	9b06      	ldr	r3, [sp, #24]
 80034e2:	3301      	adds	r3, #1
 80034e4:	9306      	str	r3, [sp, #24]
 80034e6:	2b80      	cmp	r3, #128	; 0x80
 80034e8:	d000      	beq.n	80034ec <hsc_decode_blockllr+0x218>
 80034ea:	e72b      	b.n	8003344 <hsc_decode_blockllr+0x70>
 80034ec:	4658      	mov	r0, fp
    *(uint32_t*)&indexOut[0] = 0x03020100;
 80034ee:	4a4c      	ldr	r2, [pc, #304]	; (8003620 <hsc_decode_blockllr+0x34c>)
    *(uint32_t*)&indexOut[4] = 0x07060504;
 80034f0:	4b4c      	ldr	r3, [pc, #304]	; (8003624 <hsc_decode_blockllr+0x350>)
 80034f2:	9016      	str	r0, [sp, #88]	; 0x58
    *(uint32_t*)&indexOut[0] = 0x03020100;
 80034f4:	677a      	str	r2, [r7, #116]	; 0x74
    *(uint32_t*)&indexOut[4] = 0x07060504;
 80034f6:	67bb      	str	r3, [r7, #120]	; 0x78
        gap    -= (gap > 1);
 80034f8:	2301      	movs	r3, #1
 80034fa:	2801      	cmp	r0, #1
 80034fc:	dc00      	bgt.n	8003500 <hsc_decode_blockllr+0x22c>
 80034fe:	2300      	movs	r3, #0
 8003500:	1ac0      	subs	r0, r0, r3
        sorted  = (gap == 1);
 8003502:	1e43      	subs	r3, r0, #1
 8003504:	425a      	negs	r2, r3
 8003506:	4153      	adcs	r3, r2
        for (i=0, j=gap; j<length; i++, j++) {
 8003508:	9a16      	ldr	r2, [sp, #88]	; 0x58
        sorted  = (gap == 1);
 800350a:	b2de      	uxtb	r6, r3
        for (i=0, j=gap; j<length; i++, j++) {
 800350c:	4282      	cmp	r2, r0
 800350e:	dd17      	ble.n	8003540 <hsc_decode_blockllr+0x26c>
 8003510:	003b      	movs	r3, r7
 8003512:	3374      	adds	r3, #116	; 0x74
 8003514:	18d2      	adds	r2, r2, r3
 8003516:	1a12      	subs	r2, r2, r0
 8003518:	46b4      	mov	ip, r6
 800351a:	0016      	movs	r6, r2
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 800351c:	781c      	ldrb	r4, [r3, #0]
 800351e:	5c1d      	ldrb	r5, [r3, r0]
 8003520:	00a1      	lsls	r1, r4, #2
 8003522:	00aa      	lsls	r2, r5, #2
 8003524:	1879      	adds	r1, r7, r1
 8003526:	18ba      	adds	r2, r7, r2
 8003528:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800352a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800352c:	4291      	cmp	r1, r2
 800352e:	dd03      	ble.n	8003538 <hsc_decode_blockllr+0x264>
                sorted      = false;
 8003530:	2200      	movs	r2, #0
 8003532:	4694      	mov	ip, r2
                indexOut[i] = indexOut[j];
 8003534:	701d      	strb	r5, [r3, #0]
                indexOut[j] = k;
 8003536:	541c      	strb	r4, [r3, r0]
 8003538:	3301      	adds	r3, #1
        for (i=0, j=gap; j<length; i++, j++) {
 800353a:	42b3      	cmp	r3, r6
 800353c:	d1ee      	bne.n	800351c <hsc_decode_blockllr+0x248>
 800353e:	4666      	mov	r6, ip
    } while (!sorted);
 8003540:	2e00      	cmp	r6, #0
 8003542:	d0d9      	beq.n	80034f8 <hsc_decode_blockllr+0x224>

    /// CRC Path Check process
    /// The BITMEM buffer is reused here.  It is not needed anymore.
    ///@note DECMSG(h) replaced with BITMEM(h)
    crcreg = 0;
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 8003544:	2300      	movs	r3, #0
        int lp = INDEX(h)[correct_path];
        int phi;

        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
            DECMSG(h)[phi]    = MAP(h)[phi][lp] >> 7;
            lp                  = MAP(h)[phi][lp] & 0x7F;
 8003546:	267f      	movs	r6, #127	; 0x7f
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 8003548:	9315      	str	r3, [sp, #84]	; 0x54
        reg = CRCTABLE[reg ^ *block++];
 800354a:	4b37      	ldr	r3, [pc, #220]	; (8003628 <hsc_decode_blockllr+0x354>)
        int lp = INDEX(h)[correct_path];
 800354c:	3774      	adds	r7, #116	; 0x74
        reg = CRCTABLE[reg ^ *block++];
 800354e:	930e      	str	r3, [sp, #56]	; 0x38
        int lp = INDEX(h)[correct_path];
 8003550:	9b03      	ldr	r3, [sp, #12]
 8003552:	9717      	str	r7, [sp, #92]	; 0x5c
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 8003554:	207f      	movs	r0, #127	; 0x7f
        int lp = INDEX(h)[correct_path];
 8003556:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003558:	9915      	ldr	r1, [sp, #84]	; 0x54
 800355a:	5c89      	ldrb	r1, [r1, r2]
 800355c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            DECMSG(h)[phi]    = MAP(h)[phi][lp] >> 7;
 800355e:	0084      	lsls	r4, r0, #2
 8003560:	1914      	adds	r4, r2, r4
 8003562:	5c61      	ldrb	r1, [r4, r1]
 8003564:	09cc      	lsrs	r4, r1, #7
 8003566:	541c      	strb	r4, [r3, r0]
            lp                  = MAP(h)[phi][lp] & 0x7F;
 8003568:	4031      	ands	r1, r6
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 800356a:	3801      	subs	r0, #1
 800356c:	d2f7      	bcs.n	800355e <hsc_decode_blockllr+0x28a>
        }

        /// Bytewise CRC compute.
        /// Requires loading the bit data into a byte buffer.
        /// On success, the successful bytewise decoding is in the output[]
        for (i=0, phi=0; phi<h->infobits; i++) {
 800356e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003570:	8891      	ldrh	r1, [r2, #4]
 8003572:	2900      	cmp	r1, #0
 8003574:	d101      	bne.n	800357a <hsc_decode_blockllr+0x2a6>
 8003576:	f000 feb4 	bl	80042e2 <hsc_decode_blockllr+0x100e>
 800357a:	223f      	movs	r2, #63	; 0x3f
 800357c:	2479      	movs	r4, #121	; 0x79
 800357e:	920a      	str	r2, [sp, #40]	; 0x28
 8003580:	3240      	adds	r2, #64	; 0x40
 8003582:	4691      	mov	r9, r2
 8003584:	3a05      	subs	r2, #5
 8003586:	9209      	str	r2, [sp, #36]	; 0x24
 8003588:	4a28      	ldr	r2, [pc, #160]	; (800362c <hsc_decode_blockllr+0x358>)
 800358a:	9408      	str	r4, [sp, #32]
 800358c:	9200      	str	r2, [sp, #0]
 800358e:	2201      	movs	r2, #1
 8003590:	3404      	adds	r4, #4
 8003592:	9404      	str	r4, [sp, #16]
 8003594:	3c07      	subs	r4, #7
 8003596:	9407      	str	r4, [sp, #28]
 8003598:	3405      	adds	r4, #5
 800359a:	9401      	str	r4, [sp, #4]
 800359c:	3c06      	subs	r4, #6
 800359e:	9406      	str	r4, [sp, #24]
 80035a0:	3402      	adds	r4, #2
 80035a2:	9402      	str	r4, [sp, #8]
 80035a4:	3c09      	subs	r4, #9
 80035a6:	940d      	str	r4, [sp, #52]	; 0x34
 80035a8:	3401      	adds	r4, #1
 80035aa:	9403      	str	r4, [sp, #12]
 80035ac:	3404      	adds	r4, #4
 80035ae:	4820      	ldr	r0, [pc, #128]	; (8003630 <hsc_decode_blockllr+0x35c>)
 80035b0:	940c      	str	r4, [sp, #48]	; 0x30
 80035b2:	3c14      	subs	r4, #20
 80035b4:	9405      	str	r4, [sp, #20]
 80035b6:	3414      	adds	r4, #20
 80035b8:	46a0      	mov	r8, r4
 80035ba:	1a12      	subs	r2, r2, r0
 80035bc:	207e      	movs	r0, #126	; 0x7e
 80035be:	3c05      	subs	r4, #5
 80035c0:	46a4      	mov	ip, r4
 80035c2:	257a      	movs	r5, #122	; 0x7a
 80035c4:	9310      	str	r3, [sp, #64]	; 0x40
 80035c6:	9214      	str	r2, [sp, #80]	; 0x50
 80035c8:	233f      	movs	r3, #63	; 0x3f
 80035ca:	464a      	mov	r2, r9
 80035cc:	4681      	mov	r9, r0
 80035ce:	4640      	mov	r0, r8
 80035d0:	3407      	adds	r4, #7
 80035d2:	46a2      	mov	sl, r4
 80035d4:	3401      	adds	r4, #1
 80035d6:	46a3      	mov	fp, r4
 80035d8:	3c37      	subs	r4, #55	; 0x37
 80035da:	9411      	str	r4, [sp, #68]	; 0x44
 80035dc:	46a8      	mov	r8, r5
 80035de:	4664      	mov	r4, ip
 80035e0:	0005      	movs	r5, r0
 80035e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80035e4:	2779      	movs	r7, #121	; 0x79
 80035e6:	469c      	mov	ip, r3
 80035e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80035ea:	e04b      	b.n	8003684 <hsc_decode_blockllr+0x3b0>
 80035ec:	200002f8 	.word	0x200002f8
 80035f0:	0800a93c 	.word	0x0800a93c
 80035f4:	20000570 	.word	0x20000570
 80035f8:	20000370 	.word	0x20000370
 80035fc:	20000970 	.word	0x20000970
 8003600:	0800ad3c 	.word	0x0800ad3c
 8003604:	0800a8bc 	.word	0x0800a8bc
 8003608:	0800a72c 	.word	0x0800a72c
 800360c:	0800a710 	.word	0x0800a710
 8003610:	0fffffff 	.word	0x0fffffff
 8003614:	7fffffff 	.word	0x7fffffff
 8003618:	7fffffbf 	.word	0x7fffffbf
 800361c:	20000568 	.word	0x20000568
 8003620:	03020100 	.word	0x03020100
 8003624:	07060504 	.word	0x07060504
 8003628:	0800ac3c 	.word	0x0800ac3c
 800362c:	0800aac3 	.word	0x0800aac3
 8003630:	0800aabc 	.word	0x0800aabc
 8003634:	9b00      	ldr	r3, [sp, #0]
 8003636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003638:	785b      	ldrb	r3, [r3, #1]
 800363a:	469c      	mov	ip, r3
 800363c:	9b00      	ldr	r3, [sp, #0]
 800363e:	789b      	ldrb	r3, [r3, #2]
 8003640:	4698      	mov	r8, r3
 8003642:	9b00      	ldr	r3, [sp, #0]
 8003644:	78df      	ldrb	r7, [r3, #3]
 8003646:	791b      	ldrb	r3, [r3, #4]
 8003648:	469b      	mov	fp, r3
 800364a:	9b00      	ldr	r3, [sp, #0]
 800364c:	795b      	ldrb	r3, [r3, #5]
 800364e:	469a      	mov	sl, r3
 8003650:	9b00      	ldr	r3, [sp, #0]
 8003652:	799c      	ldrb	r4, [r3, #6]
 8003654:	79dd      	ldrb	r5, [r3, #7]
 8003656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003658:	950c      	str	r5, [sp, #48]	; 0x30
 800365a:	9305      	str	r3, [sp, #20]
 800365c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800365e:	940d      	str	r4, [sp, #52]	; 0x34
 8003660:	9303      	str	r3, [sp, #12]
 8003662:	9b06      	ldr	r3, [sp, #24]
 8003664:	9302      	str	r3, [sp, #8]
 8003666:	9b07      	ldr	r3, [sp, #28]
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	9b08      	ldr	r3, [sp, #32]
 800366c:	9708      	str	r7, [sp, #32]
 800366e:	9304      	str	r3, [sp, #16]
 8003670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003672:	4699      	mov	r9, r3
 8003674:	4643      	mov	r3, r8
 8003676:	9309      	str	r3, [sp, #36]	; 0x24
 8003678:	4663      	mov	r3, ip
 800367a:	930a      	str	r3, [sp, #40]	; 0x28
 800367c:	465b      	mov	r3, fp
 800367e:	9307      	str	r3, [sp, #28]
 8003680:	4653      	mov	r3, sl
 8003682:	9306      	str	r3, [sp, #24]
 8003684:	4663      	mov	r3, ip
 8003686:	9311      	str	r3, [sp, #68]	; 0x44
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 8003688:	464b      	mov	r3, r9
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
 800368a:	5c82      	ldrb	r2, [r0, r2]
 800368c:	01d2      	lsls	r2, r2, #7
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 8003692:	5cc3      	ldrb	r3, [r0, r3]
 8003694:	469c      	mov	ip, r3
 8003696:	4643      	mov	r3, r8
 8003698:	9313      	str	r3, [sp, #76]	; 0x4c
 800369a:	4663      	mov	r3, ip
 800369c:	019b      	lsls	r3, r3, #6
 800369e:	431a      	orrs	r2, r3
 80036a0:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 80036a2:	9b04      	ldr	r3, [sp, #16]
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 80036a4:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 80036a6:	5cc3      	ldrb	r3, [r0, r3]
 80036a8:	469c      	mov	ip, r3
 80036aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80036ac:	4699      	mov	r9, r3
 80036ae:	9b00      	ldr	r3, [sp, #0]
 80036b0:	4698      	mov	r8, r3
 80036b2:	4663      	mov	r3, ip
 80036b4:	015b      	lsls	r3, r3, #5
 80036b6:	431a      	orrs	r2, r3
 80036b8:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 80036ba:	9b01      	ldr	r3, [sp, #4]
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 80036bc:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 80036be:	5cc3      	ldrb	r3, [r0, r3]
 80036c0:	44c1      	add	r9, r8
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	431a      	orrs	r2, r3
 80036c6:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 80036c8:	9b02      	ldr	r3, [sp, #8]
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 80036ca:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 80036cc:	5cc3      	ldrb	r3, [r0, r3]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	431a      	orrs	r2, r3
 80036d2:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 80036d4:	9b03      	ldr	r3, [sp, #12]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 80036d6:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 80036d8:	5cc3      	ldrb	r3, [r0, r3]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	431a      	orrs	r2, r3
 80036de:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 80036e0:	9b05      	ldr	r3, [sp, #20]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 80036e2:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 80036e4:	5cc3      	ldrb	r3, [r0, r3]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	431a      	orrs	r2, r3
 80036ea:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 80036ec:	9b00      	ldr	r3, [sp, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 80036ee:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	5cc3      	ldrb	r3, [r0, r3]
 80036f4:	469c      	mov	ip, r3
 80036f6:	9b00      	ldr	r3, [sp, #0]
 80036f8:	3308      	adds	r3, #8
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	4663      	mov	r3, ip
 80036fe:	431a      	orrs	r2, r3
        for (i=0, phi=0; phi<h->infobits; i++) {
 8003700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 8003702:	700a      	strb	r2, [r1, #0]
        for (i=0, phi=0; phi<h->infobits; i++) {
 8003704:	889a      	ldrh	r2, [r3, #4]
 8003706:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003708:	1acb      	subs	r3, r1, r3
 800370a:	469c      	mov	ip, r3
 800370c:	3101      	adds	r1, #1
 800370e:	454a      	cmp	r2, r9
 8003710:	dc90      	bgt.n	8003634 <hsc_decode_blockllr+0x360>
 8003712:	4662      	mov	r2, ip
 8003714:	46a4      	mov	ip, r4
 8003716:	0014      	movs	r4, r2
        reg = CRCTABLE[reg ^ *block++];
 8003718:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800371a:	46d9      	mov	r9, fp
 800371c:	7811      	ldrb	r1, [r2, #0]
 800371e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003720:	46a8      	mov	r8, r5
 8003722:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003724:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003726:	2c00      	cmp	r4, #0
 8003728:	dc01      	bgt.n	800372e <hsc_decode_blockllr+0x45a>
 800372a:	f000 fc83 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 800372e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003730:	7850      	ldrb	r0, [r2, #1]
 8003732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003734:	4041      	eors	r1, r0
 8003736:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003738:	2c01      	cmp	r4, #1
 800373a:	d101      	bne.n	8003740 <hsc_decode_blockllr+0x46c>
 800373c:	f000 fc7a 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003740:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003742:	7890      	ldrb	r0, [r2, #2]
 8003744:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003746:	4041      	eors	r1, r0
 8003748:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 800374a:	2c02      	cmp	r4, #2
 800374c:	d101      	bne.n	8003752 <hsc_decode_blockllr+0x47e>
 800374e:	f000 fc71 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003752:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003754:	78d0      	ldrb	r0, [r2, #3]
 8003756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003758:	4041      	eors	r1, r0
 800375a:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 800375c:	2c03      	cmp	r4, #3
 800375e:	d101      	bne.n	8003764 <hsc_decode_blockllr+0x490>
 8003760:	f000 fc68 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003764:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003766:	7910      	ldrb	r0, [r2, #4]
 8003768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800376a:	4041      	eors	r1, r0
 800376c:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 800376e:	2c04      	cmp	r4, #4
 8003770:	d101      	bne.n	8003776 <hsc_decode_blockllr+0x4a2>
 8003772:	f000 fc5f 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003776:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003778:	7950      	ldrb	r0, [r2, #5]
 800377a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800377c:	4041      	eors	r1, r0
 800377e:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003780:	2c05      	cmp	r4, #5
 8003782:	d101      	bne.n	8003788 <hsc_decode_blockllr+0x4b4>
 8003784:	f000 fc56 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003788:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800378a:	7990      	ldrb	r0, [r2, #6]
 800378c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800378e:	4041      	eors	r1, r0
 8003790:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003792:	2c06      	cmp	r4, #6
 8003794:	d101      	bne.n	800379a <hsc_decode_blockllr+0x4c6>
 8003796:	f000 fc4d 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 800379a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800379c:	79d0      	ldrb	r0, [r2, #7]
 800379e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037a0:	4041      	eors	r1, r0
 80037a2:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80037a4:	2c07      	cmp	r4, #7
 80037a6:	d101      	bne.n	80037ac <hsc_decode_blockllr+0x4d8>
 80037a8:	f000 fc44 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80037ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037ae:	7a10      	ldrb	r0, [r2, #8]
 80037b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037b2:	4041      	eors	r1, r0
 80037b4:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80037b6:	2c08      	cmp	r4, #8
 80037b8:	d101      	bne.n	80037be <hsc_decode_blockllr+0x4ea>
 80037ba:	f000 fc3b 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80037be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037c0:	7a50      	ldrb	r0, [r2, #9]
 80037c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037c4:	4041      	eors	r1, r0
 80037c6:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80037c8:	2c09      	cmp	r4, #9
 80037ca:	d101      	bne.n	80037d0 <hsc_decode_blockllr+0x4fc>
 80037cc:	f000 fc32 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80037d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037d2:	7a90      	ldrb	r0, [r2, #10]
 80037d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037d6:	4041      	eors	r1, r0
 80037d8:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80037da:	2c0a      	cmp	r4, #10
 80037dc:	d101      	bne.n	80037e2 <hsc_decode_blockllr+0x50e>
 80037de:	f000 fc29 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80037e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037e4:	7ad0      	ldrb	r0, [r2, #11]
 80037e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037e8:	4041      	eors	r1, r0
 80037ea:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80037ec:	2c0b      	cmp	r4, #11
 80037ee:	d101      	bne.n	80037f4 <hsc_decode_blockllr+0x520>
 80037f0:	f000 fc20 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80037f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037f6:	7b10      	ldrb	r0, [r2, #12]
 80037f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037fa:	4041      	eors	r1, r0
 80037fc:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80037fe:	2c0c      	cmp	r4, #12
 8003800:	d101      	bne.n	8003806 <hsc_decode_blockllr+0x532>
 8003802:	f000 fc17 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003806:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003808:	7b50      	ldrb	r0, [r2, #13]
 800380a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800380c:	4041      	eors	r1, r0
 800380e:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003810:	2c0d      	cmp	r4, #13
 8003812:	d101      	bne.n	8003818 <hsc_decode_blockllr+0x544>
 8003814:	f000 fc0e 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003818:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800381a:	7b90      	ldrb	r0, [r2, #14]
 800381c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800381e:	4041      	eors	r1, r0
 8003820:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003822:	2c0f      	cmp	r4, #15
 8003824:	d001      	beq.n	800382a <hsc_decode_blockllr+0x556>
 8003826:	f000 fc05 	bl	8004034 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 800382a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800382c:	7bd0      	ldrb	r0, [r2, #15]
 800382e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003830:	4041      	eors	r1, r0
 8003832:	5651      	ldrsb	r1, [r2, r1]
 8003834:	9a11      	ldr	r2, [sp, #68]	; 0x44
        }

        crcreg  = crccalc(output, i);
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 8003836:	5c98      	ldrb	r0, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 8003838:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 800383a:	5ddd      	ldrb	r5, [r3, r7]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 800383c:	5c9c      	ldrb	r4, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 800383e:	464a      	mov	r2, r9
 8003840:	5c9f      	ldrb	r7, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8003842:	4652      	mov	r2, sl
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 8003844:	01a4      	lsls	r4, r4, #6
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 8003846:	01c0      	lsls	r0, r0, #7
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 8003848:	4060      	eors	r0, r4
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 800384a:	5c9c      	ldrb	r4, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 800384c:	4662      	mov	r2, ip
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 800384e:	4041      	eors	r1, r0
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 8003850:	016d      	lsls	r5, r5, #5
 8003852:	4069      	eors	r1, r5
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 8003854:	5c9d      	ldrb	r5, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 8003856:	4642      	mov	r2, r8
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 8003858:	0138      	lsls	r0, r7, #4
 800385a:	4048      	eors	r0, r1
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 800385c:	00e4      	lsls	r4, r4, #3
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 800385e:	5c99      	ldrb	r1, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8003860:	4060      	eors	r0, r4
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 8003862:	00ad      	lsls	r5, r5, #2
 8003864:	4068      	eors	r0, r5
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 8003866:	0049      	lsls	r1, r1, #1
 8003868:	4048      	eors	r0, r1
 800386a:	b2c0      	uxtb	r0, r0
        if (crcreg == 0) {
 800386c:	2800      	cmp	r0, #0
 800386e:	d006      	beq.n	800387e <hsc_decode_blockllr+0x5aa>
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 8003870:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003872:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003874:	3201      	adds	r2, #1
 8003876:	9215      	str	r2, [sp, #84]	; 0x54
 8003878:	4291      	cmp	r1, r2
 800387a:	d000      	beq.n	800387e <hsc_decode_blockllr+0x5aa>
 800387c:	e66a      	b.n	8003554 <hsc_decode_blockllr+0x280>
    }
    /// CRC Path Check Process Over

    /// Decoded Bytewise data stored in output[].
    return crcreg;
}
 800387e:	b019      	add	sp, #100	; 0x64
 8003880:	bc3c      	pop	{r2, r3, r4, r5}
 8003882:	4690      	mov	r8, r2
 8003884:	4699      	mov	r9, r3
 8003886:	46a2      	mov	sl, r4
 8003888:	46ab      	mov	fp, r5
 800388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (use_gfunc) {
 800388c:	9b04      	ldr	r3, [sp, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d144      	bne.n	800391c <hsc_decode_blockllr+0x648>
    if (llr_layer_a < llr_layer_b) {
 8003892:	9b00      	ldr	r3, [sp, #0]
 8003894:	9801      	ldr	r0, [sp, #4]
 8003896:	4283      	cmp	r3, r0
 8003898:	dc01      	bgt.n	800389e <hsc_decode_blockllr+0x5ca>
 800389a:	f000 fd32 	bl	8004302 <hsc_decode_blockllr+0x102e>
				for (int l=0; l<num_paths; l++) {
 800389e:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80038a0:	6008      	str	r0, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d100      	bne.n	80038a8 <hsc_decode_blockllr+0x5d4>
 80038a6:	e5d1      	b.n	800344c <hsc_decode_blockllr+0x178>
    llr_t b_inv = -llr_layer_b;
 80038a8:	9b00      	ldr	r3, [sp, #0]
 80038aa:	9c01      	ldr	r4, [sp, #4]
 80038ac:	0018      	movs	r0, r3
 80038ae:	001d      	movs	r5, r3
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 80038b0:	429d      	cmp	r5, r3
 80038b2:	da52      	bge.n	800395a <hsc_decode_blockllr+0x686>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80038b4:	9d01      	ldr	r5, [sp, #4]
 80038b6:	604d      	str	r5, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 80038b8:	465d      	mov	r5, fp
 80038ba:	2d02      	cmp	r5, #2
 80038bc:	d100      	bne.n	80038c0 <hsc_decode_blockllr+0x5ec>
 80038be:	e5c5      	b.n	800344c <hsc_decode_blockllr+0x178>
    if (llr_layer_a < llr_layer_b) {
 80038c0:	9d01      	ldr	r5, [sp, #4]
 80038c2:	429d      	cmp	r5, r3
 80038c4:	db01      	blt.n	80038ca <hsc_decode_blockllr+0x5f6>
 80038c6:	f000 fd22 	bl	800430e <hsc_decode_blockllr+0x103a>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 80038ca:	9800      	ldr	r0, [sp, #0]
 80038cc:	4298      	cmp	r0, r3
 80038ce:	da4c      	bge.n	800396a <hsc_decode_blockllr+0x696>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80038d0:	9b01      	ldr	r3, [sp, #4]
 80038d2:	608b      	str	r3, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 80038d4:	001c      	movs	r4, r3
 80038d6:	465b      	mov	r3, fp
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d100      	bne.n	80038de <hsc_decode_blockllr+0x60a>
 80038dc:	e5b6      	b.n	800344c <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80038de:	60cc      	str	r4, [r1, #12]
            if (beta == next_pt) {
 80038e0:	4557      	cmp	r7, sl
 80038e2:	d000      	beq.n	80038e6 <hsc_decode_blockllr+0x612>
 80038e4:	e5b5      	b.n	8003452 <hsc_decode_blockllr+0x17e>
                use_gfunc   = phi & next_pt;
 80038e6:	9806      	ldr	r0, [sp, #24]
                next_pt   >>= 1;
 80038e8:	107f      	asrs	r7, r7, #1
                use_gfunc   = phi & next_pt;
 80038ea:	4038      	ands	r0, r7
 80038ec:	1e43      	subs	r3, r0, #1
 80038ee:	4198      	sbcs	r0, r3
 80038f0:	b2c3      	uxtb	r3, r0
 80038f2:	9304      	str	r3, [sp, #16]
                if (--lmd0 >= 0) {
 80038f4:	9b05      	ldr	r3, [sp, #20]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	9305      	str	r3, [sp, #20]
 80038fa:	d500      	bpl.n	80038fe <hsc_decode_blockllr+0x62a>
 80038fc:	e5a9      	b.n	8003452 <hsc_decode_blockllr+0x17e>
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 80038fe:	9c02      	ldr	r4, [sp, #8]
 8003900:	9b05      	ldr	r3, [sp, #20]
 8003902:	341c      	adds	r4, #28
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	18e4      	adds	r4, r4, r3
 8003908:	980d      	ldr	r0, [sp, #52]	; 0x34
 800390a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800390c:	6825      	ldr	r5, [r4, #0]
 800390e:	58c3      	ldr	r3, [r0, r3]
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 8003910:	980e      	ldr	r0, [sp, #56]	; 0x38
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 8003912:	402b      	ands	r3, r5
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 8003914:	6900      	ldr	r0, [r0, #16]
 8003916:	4303      	orrs	r3, r0
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	e59a      	b.n	8003452 <hsc_decode_blockllr+0x17e>
					if (use_gfunc) {
 800391c:	9b00      	ldr	r3, [sp, #0]
 800391e:	e562      	b.n	80033e6 <hsc_decode_blockllr+0x112>
 8003920:	9c00      	ldr	r4, [sp, #0]
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 8003922:	0018      	movs	r0, r3
 8003924:	42a3      	cmp	r3, r4
 8003926:	da00      	bge.n	800392a <hsc_decode_blockllr+0x656>
 8003928:	0020      	movs	r0, r4
				for (int l=0; l<num_paths; l++) {
 800392a:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 800392c:	6008      	str	r0, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 800392e:	2c01      	cmp	r4, #1
 8003930:	d100      	bne.n	8003934 <hsc_decode_blockllr+0x660>
 8003932:	e58b      	b.n	800344c <hsc_decode_blockllr+0x178>
    if (llr_layer_a < llr_layer_b) {
 8003934:	9d01      	ldr	r5, [sp, #4]
    llr_t b_inv = -llr_layer_b;
 8003936:	425c      	negs	r4, r3
    if (llr_layer_a < llr_layer_b) {
 8003938:	42ab      	cmp	r3, r5
 800393a:	dd01      	ble.n	8003940 <hsc_decode_blockllr+0x66c>
 800393c:	f000 fce4 	bl	8004308 <hsc_decode_blockllr+0x1034>
				for (int l=0; l<num_paths; l++) {
 8003940:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003942:	6048      	str	r0, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 8003944:	0004      	movs	r4, r0
 8003946:	2b02      	cmp	r3, #2
 8003948:	d100      	bne.n	800394c <hsc_decode_blockllr+0x678>
 800394a:	e57f      	b.n	800344c <hsc_decode_blockllr+0x178>
 800394c:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 800394e:	6088      	str	r0, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 8003950:	2b03      	cmp	r3, #3
 8003952:	d100      	bne.n	8003956 <hsc_decode_blockllr+0x682>
 8003954:	e57a      	b.n	800344c <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003956:	60cc      	str	r4, [r1, #12]
 8003958:	e7c2      	b.n	80038e0 <hsc_decode_blockllr+0x60c>
				for (int l=0; l<num_paths; l++) {
 800395a:	4658      	mov	r0, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 800395c:	604c      	str	r4, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 800395e:	2802      	cmp	r0, #2
 8003960:	d100      	bne.n	8003964 <hsc_decode_blockllr+0x690>
 8003962:	e573      	b.n	800344c <hsc_decode_blockllr+0x178>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003964:	9800      	ldr	r0, [sp, #0]
 8003966:	4298      	cmp	r0, r3
 8003968:	dbb2      	blt.n	80038d0 <hsc_decode_blockllr+0x5fc>
				for (int l=0; l<num_paths; l++) {
 800396a:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 800396c:	608c      	str	r4, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 800396e:	2b03      	cmp	r3, #3
 8003970:	d100      	bne.n	8003974 <hsc_decode_blockllr+0x6a0>
 8003972:	e56b      	b.n	800344c <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003974:	60cc      	str	r4, [r1, #12]
 8003976:	e7b3      	b.n	80038e0 <hsc_decode_blockllr+0x60c>
            beta_laststage  = eminlambda_lut[phi];
 8003978:	4bd3      	ldr	r3, [pc, #844]	; (8003cc8 <hsc_decode_blockllr+0x9f4>)
 800397a:	9a06      	ldr	r2, [sp, #24]
 800397c:	5c9b      	ldrb	r3, [r3, r2]
 800397e:	9304      	str	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	9305      	str	r3, [sp, #20]
 8003984:	2b02      	cmp	r3, #2
 8003986:	dc00      	bgt.n	800398a <hsc_decode_blockllr+0x6b6>
 8003988:	e358      	b.n	800403c <hsc_decode_blockllr+0xd68>
 800398a:	465b      	mov	r3, fp
 800398c:	2b01      	cmp	r3, #1
 800398e:	d100      	bne.n	8003992 <hsc_decode_blockllr+0x6be>
 8003990:	e30f      	b.n	8003fb2 <hsc_decode_blockllr+0xcde>
 8003992:	2b02      	cmp	r3, #2
 8003994:	d100      	bne.n	8003998 <hsc_decode_blockllr+0x6c4>
 8003996:	e35a      	b.n	800404e <hsc_decode_blockllr+0xd7a>
 8003998:	2b03      	cmp	r3, #3
 800399a:	d101      	bne.n	80039a0 <hsc_decode_blockllr+0x6cc>
 800399c:	f000 fc12 	bl	80041c4 <hsc_decode_blockllr+0xef0>
 80039a0:	2306      	movs	r3, #6
 80039a2:	4698      	mov	r8, r3
            next_pt         = 2;
 80039a4:	3b04      	subs	r3, #4
 80039a6:	9308      	str	r3, [sp, #32]
            lmd0            = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	9307      	str	r3, [sp, #28]
 80039ac:	469c      	mov	ip, r3
 80039ae:	465b      	mov	r3, fp
 80039b0:	9309      	str	r3, [sp, #36]	; 0x24
 80039b2:	4643      	mov	r3, r8
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80039b4:	2002      	movs	r0, #2
 80039b6:	46b9      	mov	r9, r7
 80039b8:	4ac4      	ldr	r2, [pc, #784]	; (8003ccc <hsc_decode_blockllr+0x9f8>)
 80039ba:	9302      	str	r3, [sp, #8]
                int incval  = (beta < beta_laststage);
 80039bc:	9904      	ldr	r1, [sp, #16]
 80039be:	2301      	movs	r3, #1
 80039c0:	4281      	cmp	r1, r0
 80039c2:	dc00      	bgt.n	80039c6 <hsc_decode_blockllr+0x6f2>
 80039c4:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80039c6:	9f03      	ldr	r7, [sp, #12]
 80039c8:	4665      	mov	r5, ip
 80039ca:	4649      	mov	r1, r9
 80039cc:	46b8      	mov	r8, r7
 80039ce:	5d49      	ldrb	r1, [r1, r5]
 80039d0:	0084      	lsls	r4, r0, #2
 80039d2:	4444      	add	r4, r8
 80039d4:	5c65      	ldrb	r5, [r4, r1]
 80039d6:	7816      	ldrb	r6, [r2, #0]
                int bit0_i  = (beta*2) + incval;
 80039d8:	0041      	lsls	r1, r0, #1
 80039da:	4688      	mov	r8, r1
 80039dc:	18c9      	adds	r1, r1, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80039de:	4075      	eors	r5, r6
 80039e0:	0089      	lsls	r1, r1, #2
 80039e2:	547d      	strb	r5, [r7, r1]
                int bit1_i  = ((beta+1)*2) + incval;
 80039e4:	9d02      	ldr	r5, [sp, #8]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80039e6:	7816      	ldrb	r6, [r2, #0]
                int bit1_i  = ((beta+1)*2) + incval;
 80039e8:	46aa      	mov	sl, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80039ea:	464d      	mov	r5, r9
 80039ec:	4465      	add	r5, ip
 80039ee:	786f      	ldrb	r7, [r5, #1]
                int bit1_i  = ((beta+1)*2) + incval;
 80039f0:	4453      	add	r3, sl
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80039f2:	46ba      	mov	sl, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80039f4:	9f03      	ldr	r7, [sp, #12]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	54fe      	strb	r6, [r7, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80039fa:	7857      	ldrb	r7, [r2, #1]
 80039fc:	4656      	mov	r6, sl
 80039fe:	46ba      	mov	sl, r7
 8003a00:	9f03      	ldr	r7, [sp, #12]
 8003a02:	5da6      	ldrb	r6, [r4, r6]
 8003a04:	46bb      	mov	fp, r7
 8003a06:	4657      	mov	r7, sl
 8003a08:	4459      	add	r1, fp
 8003a0a:	407e      	eors	r6, r7
 8003a0c:	704e      	strb	r6, [r1, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003a0e:	7856      	ldrb	r6, [r2, #1]
 8003a10:	445b      	add	r3, fp
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003a12:	78af      	ldrb	r7, [r5, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003a14:	705e      	strb	r6, [r3, #1]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003a16:	5de6      	ldrb	r6, [r4, r7]
 8003a18:	7897      	ldrb	r7, [r2, #2]
 8003a1a:	78ed      	ldrb	r5, [r5, #3]
 8003a1c:	407e      	eors	r6, r7
 8003a1e:	708e      	strb	r6, [r1, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003a20:	7896      	ldrb	r6, [r2, #2]
 8003a22:	709e      	strb	r6, [r3, #2]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003a24:	5d64      	ldrb	r4, [r4, r5]
 8003a26:	78d5      	ldrb	r5, [r2, #3]
 8003a28:	406c      	eors	r4, r5
 8003a2a:	70cc      	strb	r4, [r1, #3]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003a2c:	78d1      	ldrb	r1, [r2, #3]
 8003a2e:	70d9      	strb	r1, [r3, #3]
                if (beta == next_pt) {
 8003a30:	9b08      	ldr	r3, [sp, #32]
 8003a32:	4298      	cmp	r0, r3
 8003a34:	d100      	bne.n	8003a38 <hsc_decode_blockllr+0x764>
 8003a36:	e1f0      	b.n	8003e1a <hsc_decode_blockllr+0xb46>
 8003a38:	9b02      	ldr	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003a3a:	3002      	adds	r0, #2
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	9302      	str	r3, [sp, #8]
 8003a40:	9b05      	ldr	r3, [sp, #20]
 8003a42:	3208      	adds	r2, #8
 8003a44:	4283      	cmp	r3, r0
 8003a46:	dcb9      	bgt.n	80039bc <hsc_decode_blockllr+0x6e8>
 8003a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a4a:	464f      	mov	r7, r9
 8003a4c:	469b      	mov	fp, r3
 8003a4e:	4663      	mov	r3, ip
 8003a50:	18fb      	adds	r3, r7, r3
            *(uint32_t*)PRIBIT(h)[lmd0] = 0x03020100;
 8003a52:	4a9f      	ldr	r2, [pc, #636]	; (8003cd0 <hsc_decode_blockllr+0x9fc>)
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e543      	b.n	80034e0 <hsc_decode_blockllr+0x20c>
 8003a58:	0010      	movs	r0, r2
            int max_lmd = maxlambda_lut[phi];
 8003a5a:	4b9e      	ldr	r3, [pc, #632]	; (8003cd4 <hsc_decode_blockllr+0xa00>)
                if (LLR(h)[1][l] < 0) {
 8003a5c:	4a9e      	ldr	r2, [pc, #632]	; (8003cd8 <hsc_decode_blockllr+0xa04>)
            int max_lmd = maxlambda_lut[phi];
 8003a5e:	5c1b      	ldrb	r3, [r3, r0]
                if (LLR(h)[1][l] < 0) {
 8003a60:	6911      	ldr	r1, [r2, #16]
            int max_lmd = maxlambda_lut[phi];
 8003a62:	9305      	str	r3, [sp, #20]
            int min_lmd = minlambda_lut[phi];
 8003a64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a66:	5c1b      	ldrb	r3, [r3, r0]
 8003a68:	469a      	mov	sl, r3
 8003a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                if (LLR(h)[1][l] < 0) {
 8003a6c:	2900      	cmp	r1, #0
 8003a6e:	da00      	bge.n	8003a72 <hsc_decode_blockllr+0x79e>
 8003a70:	e26b      	b.n	8003f4a <hsc_decode_blockllr+0xc76>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8003a72:	18c9      	adds	r1, r1, r3
 8003a74:	6539      	str	r1, [r7, #80]	; 0x50
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8003a76:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (int l=0; l<num_paths; l++) {
 8003a78:	465b      	mov	r3, fp
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d01d      	beq.n	8003aba <hsc_decode_blockllr+0x7e6>
                if (LLR(h)[1][l] < 0) {
 8003a7e:	6953      	ldr	r3, [r2, #20]
 8003a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	da00      	bge.n	8003a88 <hsc_decode_blockllr+0x7b4>
 8003a86:	e285      	b.n	8003f94 <hsc_decode_blockllr+0xcc0>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8003a88:	185b      	adds	r3, r3, r1
 8003a8a:	65bb      	str	r3, [r7, #88]	; 0x58
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8003a8c:	6579      	str	r1, [r7, #84]	; 0x54
            for (int l=0; l<num_paths; l++) {
 8003a8e:	465b      	mov	r3, fp
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d012      	beq.n	8003aba <hsc_decode_blockllr+0x7e6>
                if (LLR(h)[1][l] < 0) {
 8003a94:	6993      	ldr	r3, [r2, #24]
 8003a96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	da00      	bge.n	8003a9e <hsc_decode_blockllr+0x7ca>
 8003a9c:	e27e      	b.n	8003f9c <hsc_decode_blockllr+0xcc8>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8003a9e:	185b      	adds	r3, r3, r1
 8003aa0:	663b      	str	r3, [r7, #96]	; 0x60
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8003aa2:	65f9      	str	r1, [r7, #92]	; 0x5c
            for (int l=0; l<num_paths; l++) {
 8003aa4:	465b      	mov	r3, fp
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d007      	beq.n	8003aba <hsc_decode_blockllr+0x7e6>
                if (LLR(h)[1][l] < 0) {
 8003aaa:	69d3      	ldr	r3, [r2, #28]
 8003aac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	da00      	bge.n	8003ab4 <hsc_decode_blockllr+0x7e0>
 8003ab2:	e2bb      	b.n	800402c <hsc_decode_blockllr+0xd58>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8003ab4:	189b      	adds	r3, r3, r2
 8003ab6:	66bb      	str	r3, [r7, #104]	; 0x68
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8003ab8:	667a      	str	r2, [r7, #100]	; 0x64
            num_paths = num_paths * 2;
 8003aba:	465b      	mov	r3, fp
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	469b      	mov	fp, r3
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	236c      	movs	r3, #108	; 0x6c
    *(uint32_t*)&indexOut[0] = 0x03020100;
 8003ac4:	4a82      	ldr	r2, [pc, #520]	; (8003cd0 <hsc_decode_blockllr+0x9fc>)
 8003ac6:	469c      	mov	ip, r3
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8003ac8:	4b84      	ldr	r3, [pc, #528]	; (8003cdc <hsc_decode_blockllr+0xa08>)
    *(uint32_t*)&indexOut[0] = 0x03020100;
 8003aca:	66fa      	str	r2, [r7, #108]	; 0x6c
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8003acc:	673b      	str	r3, [r7, #112]	; 0x70
        gap    -= (gap > 1);
 8003ace:	2301      	movs	r3, #1
 8003ad0:	2801      	cmp	r0, #1
 8003ad2:	dc00      	bgt.n	8003ad6 <hsc_decode_blockllr+0x802>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	1ac0      	subs	r0, r0, r3
        sorted  = (gap == 1);
 8003ad8:	1e46      	subs	r6, r0, #1
 8003ada:	4273      	negs	r3, r6
 8003adc:	415e      	adcs	r6, r3
 8003ade:	b2f6      	uxtb	r6, r6
        for (i=0, j=gap; j<length; i++, j++) {
 8003ae0:	4583      	cmp	fp, r0
 8003ae2:	ddf4      	ble.n	8003ace <hsc_decode_blockllr+0x7fa>
 8003ae4:	003b      	movs	r3, r7
 8003ae6:	465a      	mov	r2, fp
 8003ae8:	336c      	adds	r3, #108	; 0x6c
 8003aea:	18d2      	adds	r2, r2, r3
 8003aec:	1a12      	subs	r2, r2, r0
 8003aee:	46b0      	mov	r8, r6
 8003af0:	0016      	movs	r6, r2
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 8003af2:	781c      	ldrb	r4, [r3, #0]
 8003af4:	5c1d      	ldrb	r5, [r3, r0]
 8003af6:	00a1      	lsls	r1, r4, #2
 8003af8:	00aa      	lsls	r2, r5, #2
 8003afa:	1879      	adds	r1, r7, r1
 8003afc:	18ba      	adds	r2, r7, r2
 8003afe:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003b00:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b02:	4291      	cmp	r1, r2
 8003b04:	dd03      	ble.n	8003b0e <hsc_decode_blockllr+0x83a>
                sorted      = false;
 8003b06:	2200      	movs	r2, #0
 8003b08:	4690      	mov	r8, r2
                indexOut[i] = indexOut[j];
 8003b0a:	701d      	strb	r5, [r3, #0]
                indexOut[j] = k;
 8003b0c:	541c      	strb	r4, [r3, r0]
 8003b0e:	3301      	adds	r3, #1
        for (i=0, j=gap; j<length; i++, j++) {
 8003b10:	429e      	cmp	r6, r3
 8003b12:	d1ee      	bne.n	8003af2 <hsc_decode_blockllr+0x81e>
 8003b14:	4663      	mov	r3, ip
 8003b16:	4646      	mov	r6, r8
 8003b18:	5cfa      	ldrb	r2, [r7, r3]
    } while (!sorted);
 8003b1a:	2e00      	cmp	r6, #0
 8003b1c:	d0d7      	beq.n	8003ace <hsc_decode_blockllr+0x7fa>
            if (num_paths > LISTSIZE) {
 8003b1e:	465b      	mov	r3, fp
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	dd00      	ble.n	8003b26 <hsc_decode_blockllr+0x852>
 8003b24:	e193      	b.n	8003e4e <hsc_decode_blockllr+0xb7a>
 8003b26:	1e9d      	subs	r5, r3, #2
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8003b28:	1e5c      	subs	r4, r3, #1
           chk2       |= (1<<k);
 8003b2a:	2301      	movs	r3, #1
       k = idx_a[i] >> 1;
 8003b2c:	0850      	lsrs	r0, r2, #1
           chk2       |= (1<<k);
 8003b2e:	469c      	mov	ip, r3
 8003b30:	4083      	lsls	r3, r0
 8003b32:	4699      	mov	r9, r3
       k = idx_a[i] >> 1;
 8003b34:	003b      	movs	r3, r7
 8003b36:	336c      	adds	r3, #108	; 0x6c
 8003b38:	7859      	ldrb	r1, [r3, #1]
       if ((chk2 & (1<<k)) == 0) {
 8003b3a:	26ff      	movs	r6, #255	; 0xff
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	401e      	ands	r6, r3
       k = idx_a[i] >> 1;
 8003b40:	084b      	lsrs	r3, r1, #1
 8003b42:	9308      	str	r3, [sp, #32]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	4698      	mov	r8, r3
       if ((chk2 & (1<<k)) == 0) {
 8003b48:	411e      	asrs	r6, r3
 8003b4a:	4663      	mov	r3, ip
           pri[p_i--]  = k;
 8003b4c:	193c      	adds	r4, r7, r4
 8003b4e:	3448      	adds	r4, #72	; 0x48
 8003b50:	7020      	strb	r0, [r4, #0]
           idx_b[k]    = idx_a[i];
 8003b52:	1838      	adds	r0, r7, r0
 8003b54:	3074      	adds	r0, #116	; 0x74
 8003b56:	7002      	strb	r2, [r0, #0]
       if ((chk2 & (1<<k)) == 0) {
 8003b58:	4233      	tst	r3, r6
 8003b5a:	d000      	beq.n	8003b5e <hsc_decode_blockllr+0x88a>
 8003b5c:	e17c      	b.n	8003e58 <hsc_decode_blockllr+0xb84>
           chk2       |= (1<<k);
 8003b5e:	4643      	mov	r3, r8
 8003b60:	4660      	mov	r0, ip
 8003b62:	4098      	lsls	r0, r3
           chk1       |= (1<<i);
 8003b64:	2303      	movs	r3, #3
 8003b66:	9302      	str	r3, [sp, #8]
           chk2       |= (1<<k);
 8003b68:	464b      	mov	r3, r9
 8003b6a:	4318      	orrs	r0, r3
 8003b6c:	b2c3      	uxtb	r3, r0
 8003b6e:	4699      	mov	r9, r3
           pri[p_i--]  = k;
 8003b70:	4643      	mov	r3, r8
 8003b72:	197d      	adds	r5, r7, r5
 8003b74:	3548      	adds	r5, #72	; 0x48
 8003b76:	702b      	strb	r3, [r5, #0]
           idx_b[k]    = idx_a[i];
 8003b78:	18f8      	adds	r0, r7, r3
           pri[p_i--]  = k;
 8003b7a:	465b      	mov	r3, fp
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	2407      	movs	r4, #7
           idx_b[k]    = idx_a[i];
 8003b80:	3074      	adds	r0, #116	; 0x74
 8003b82:	7001      	strb	r1, [r0, #0]
           pri[p_i--]  = k;
 8003b84:	1edd      	subs	r5, r3, #3
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8003b86:	465b      	mov	r3, fp
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d02a      	beq.n	8003be2 <hsc_decode_blockllr+0x90e>
       k = idx_a[i] >> 1;
 8003b8c:	003a      	movs	r2, r7
       if ((chk2 & (1<<k)) == 0) {
 8003b8e:	464b      	mov	r3, r9
       k = idx_a[i] >> 1;
 8003b90:	326c      	adds	r2, #108	; 0x6c
 8003b92:	7890      	ldrb	r0, [r2, #2]
       if ((chk2 & (1<<k)) == 0) {
 8003b94:	2201      	movs	r2, #1
       k = idx_a[i] >> 1;
 8003b96:	0846      	lsrs	r6, r0, #1
       if ((chk2 & (1<<k)) == 0) {
 8003b98:	4133      	asrs	r3, r6
 8003b9a:	421a      	tst	r2, r3
 8003b9c:	d110      	bne.n	8003bc0 <hsc_decode_blockllr+0x8ec>
           chk2       |= (1<<k);
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	40b2      	lsls	r2, r6
 8003ba2:	431a      	orrs	r2, r3
           pri[p_i--]  = k;
 8003ba4:	197b      	adds	r3, r7, r5
 8003ba6:	469c      	mov	ip, r3
 8003ba8:	2348      	movs	r3, #72	; 0x48
 8003baa:	4698      	mov	r8, r3
           chk2       |= (1<<k);
 8003bac:	b2d3      	uxtb	r3, r2
           pri[p_i--]  = k;
 8003bae:	44c4      	add	ip, r8
           chk2       |= (1<<k);
 8003bb0:	4699      	mov	r9, r3
           pri[p_i--]  = k;
 8003bb2:	4663      	mov	r3, ip
           chk1       |= (1<<i);
 8003bb4:	9402      	str	r4, [sp, #8]
           idx_b[k]    = idx_a[i];
 8003bb6:	19bc      	adds	r4, r7, r6
 8003bb8:	3474      	adds	r4, #116	; 0x74
 8003bba:	7020      	strb	r0, [r4, #0]
           pri[p_i--]  = k;
 8003bbc:	701e      	strb	r6, [r3, #0]
 8003bbe:	3d01      	subs	r5, #1
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8003bc0:	465b      	mov	r3, fp
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d000      	beq.n	8003bc8 <hsc_decode_blockllr+0x8f4>
 8003bc6:	e35e      	b.n	8004286 <hsc_decode_blockllr+0xfb2>
       k = idx_a[i] >> 1;
 8003bc8:	003a      	movs	r2, r7
 8003bca:	326c      	adds	r2, #108	; 0x6c
 8003bcc:	78d6      	ldrb	r6, [r2, #3]
       if ((chk2 & (1<<k)) == 0) {
 8003bce:	464a      	mov	r2, r9
       k = idx_a[i] >> 1;
 8003bd0:	0874      	lsrs	r4, r6, #1
       if ((chk2 & (1<<k)) == 0) {
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	4122      	asrs	r2, r4
 8003bd6:	4210      	tst	r0, r2
 8003bd8:	d100      	bne.n	8003bdc <hsc_decode_blockllr+0x908>
 8003bda:	e1ba      	b.n	8003f52 <hsc_decode_blockllr+0xc7e>
 8003bdc:	9b02      	ldr	r3, [sp, #8]
 8003bde:	085a      	lsrs	r2, r3, #1
 8003be0:	b2d2      	uxtb	r2, r2
    switch ((chk1>>1) & 7) {
 8003be2:	2a06      	cmp	r2, #6
 8003be4:	d900      	bls.n	8003be8 <hsc_decode_blockllr+0x914>
 8003be6:	e1cd      	b.n	8003f84 <hsc_decode_blockllr+0xcb0>
 8003be8:	483d      	ldr	r0, [pc, #244]	; (8003ce0 <hsc_decode_blockllr+0xa0c>)
 8003bea:	0092      	lsls	r2, r2, #2
 8003bec:	5882      	ldr	r2, [r0, r2]
 8003bee:	4697      	mov	pc, r2
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8003bf0:	003b      	movs	r3, r7
 8003bf2:	2564      	movs	r5, #100	; 0x64
 8003bf4:	336c      	adds	r3, #108	; 0x6c
 8003bf6:	789b      	ldrb	r3, [r3, #2]
                pri[0]          = j0[chk2];
 8003bf8:	2448      	movs	r4, #72	; 0x48
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8003bfa:	483a      	ldr	r0, [pc, #232]	; (8003ce4 <hsc_decode_blockllr+0xa10>)
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	4448      	add	r0, r9
 8003c00:	5d42      	ldrb	r2, [r0, r5]
                pri[0]          = j0[chk2];
 8003c02:	553a      	strb	r2, [r7, r4]
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8003c04:	18ba      	adds	r2, r7, r2
 8003c06:	3274      	adds	r2, #116	; 0x74
 8003c08:	7013      	strb	r3, [r2, #0]
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	9308      	str	r3, [sp, #32]
                    switch (max_lmd-min_lmd) {
 8003c0e:	4654      	mov	r4, sl
 8003c10:	2601      	movs	r6, #1
 8003c12:	9805      	ldr	r0, [sp, #20]
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8003c14:	2500      	movs	r5, #0
                    switch (max_lmd-min_lmd) {
 8003c16:	1b03      	subs	r3, r0, r4
 8003c18:	9c06      	ldr	r4, [sp, #24]
 8003c1a:	0098      	lsls	r0, r3, #2
 8003c1c:	4026      	ands	r6, r4
 8003c1e:	1cb4      	adds	r4, r6, #2
 8003c20:	00a4      	lsls	r4, r4, #2
 8003c22:	9404      	str	r4, [sp, #16]
 8003c24:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8003c26:	9307      	str	r3, [sp, #28]
 8003c28:	46a2      	mov	sl, r4
                    switch (max_lmd) {
 8003c2a:	9b05      	ldr	r3, [sp, #20]
                    switch (max_lmd-min_lmd) {
 8003c2c:	4482      	add	sl, r0
                    switch (max_lmd) {
 8003c2e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4698      	mov	r8, r3
 8003c34:	4684      	mov	ip, r0
 8003c36:	930d      	str	r3, [sp, #52]	; 0x34
 8003c38:	9b05      	ldr	r3, [sp, #20]
 8003c3a:	44c4      	add	ip, r8
 8003c3c:	2248      	movs	r2, #72	; 0x48
 8003c3e:	4698      	mov	r8, r3
 8003c40:	000b      	movs	r3, r1
 8003c42:	4661      	mov	r1, ip
 8003c44:	9609      	str	r6, [sp, #36]	; 0x24
 8003c46:	002e      	movs	r6, r5
 8003c48:	9c06      	ldr	r4, [sp, #24]
 8003c4a:	5cba      	ldrb	r2, [r7, r2]
 8003c4c:	00a4      	lsls	r4, r4, #2
 8003c4e:	9808      	ldr	r0, [sp, #32]
 8003c50:	9402      	str	r4, [sp, #8]
 8003c52:	9105      	str	r1, [sp, #20]
                int lr  = INDEX(h)[l] >> 1;
 8003c54:	b2c0      	uxtb	r0, r0
                if (l != lr) {
 8003c56:	4282      	cmp	r2, r0
 8003c58:	d060      	beq.n	8003d1c <hsc_decode_blockllr+0xa48>
                    switch (max_lmd-min_lmd) {
 8003c5a:	9907      	ldr	r1, [sp, #28]
 8003c5c:	2906      	cmp	r1, #6
 8003c5e:	d82c      	bhi.n	8003cba <hsc_decode_blockllr+0x9e6>
 8003c60:	4651      	mov	r1, sl
 8003c62:	6809      	ldr	r1, [r1, #0]
 8003c64:	468f      	mov	pc, r1
            int max_lmd = maxlambda_lut[phi];
 8003c66:	4641      	mov	r1, r8
                        case 5: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003c68:	008c      	lsls	r4, r1, #2
 8003c6a:	193c      	adds	r4, r7, r4
 8003c6c:	1825      	adds	r5, r4, r0
 8003c6e:	7f2d      	ldrb	r5, [r5, #28]
 8003c70:	18a4      	adds	r4, r4, r2
 8003c72:	3901      	subs	r1, #1
 8003c74:	7725      	strb	r5, [r4, #28]
                        case 4: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003c76:	008c      	lsls	r4, r1, #2
 8003c78:	193c      	adds	r4, r7, r4
 8003c7a:	1825      	adds	r5, r4, r0
 8003c7c:	7f2d      	ldrb	r5, [r5, #28]
 8003c7e:	18a4      	adds	r4, r4, r2
 8003c80:	3901      	subs	r1, #1
 8003c82:	7725      	strb	r5, [r4, #28]
                        case 3: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003c84:	008c      	lsls	r4, r1, #2
 8003c86:	193c      	adds	r4, r7, r4
 8003c88:	1825      	adds	r5, r4, r0
 8003c8a:	7f2d      	ldrb	r5, [r5, #28]
 8003c8c:	18a4      	adds	r4, r4, r2
 8003c8e:	3901      	subs	r1, #1
 8003c90:	7725      	strb	r5, [r4, #28]
                        case 2: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003c92:	008c      	lsls	r4, r1, #2
 8003c94:	193c      	adds	r4, r7, r4
 8003c96:	1825      	adds	r5, r4, r0
 8003c98:	7f2d      	ldrb	r5, [r5, #28]
 8003c9a:	18a4      	adds	r4, r4, r2
 8003c9c:	3901      	subs	r1, #1
 8003c9e:	7725      	strb	r5, [r4, #28]
                        case 1: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003ca0:	008c      	lsls	r4, r1, #2
 8003ca2:	193c      	adds	r4, r7, r4
 8003ca4:	1825      	adds	r5, r4, r0
 8003ca6:	7f2d      	ldrb	r5, [r5, #28]
 8003ca8:	18a4      	adds	r4, r4, r2
 8003caa:	3901      	subs	r1, #1
 8003cac:	7725      	strb	r5, [r4, #28]
                        case 0: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];
 8003cae:	0089      	lsls	r1, r1, #2
 8003cb0:	1879      	adds	r1, r7, r1
 8003cb2:	180c      	adds	r4, r1, r0
 8003cb4:	7f24      	ldrb	r4, [r4, #28]
 8003cb6:	1889      	adds	r1, r1, r2
 8003cb8:	770c      	strb	r4, [r1, #28]
                    switch (max_lmd) {
 8003cba:	4641      	mov	r1, r8
 8003cbc:	2906      	cmp	r1, #6
 8003cbe:	d82d      	bhi.n	8003d1c <hsc_decode_blockllr+0xa48>
 8003cc0:	9905      	ldr	r1, [sp, #20]
 8003cc2:	6809      	ldr	r1, [r1, #0]
 8003cc4:	468f      	mov	pc, r1
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	0800a83c 	.word	0x0800a83c
 8003ccc:	2000057c 	.word	0x2000057c
 8003cd0:	03020100 	.word	0x03020100
 8003cd4:	0800a7bc 	.word	0x0800a7bc
 8003cd8:	20000970 	.word	0x20000970
 8003cdc:	07060504 	.word	0x07060504
 8003ce0:	0800a6f4 	.word	0x0800a6f4
 8003ce4:	0800a748 	.word	0x0800a748
                        case 6: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003ce8:	1839      	adds	r1, r7, r0
 8003cea:	7e0c      	ldrb	r4, [r1, #24]
 8003cec:	18b9      	adds	r1, r7, r2
 8003cee:	760c      	strb	r4, [r1, #24]
                        case 5: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003cf0:	1839      	adds	r1, r7, r0
 8003cf2:	7d0c      	ldrb	r4, [r1, #20]
 8003cf4:	18b9      	adds	r1, r7, r2
 8003cf6:	750c      	strb	r4, [r1, #20]
                        case 4: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003cf8:	1839      	adds	r1, r7, r0
 8003cfa:	7c0c      	ldrb	r4, [r1, #16]
 8003cfc:	18b9      	adds	r1, r7, r2
 8003cfe:	740c      	strb	r4, [r1, #16]
                        case 3: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003d00:	1839      	adds	r1, r7, r0
 8003d02:	7b0c      	ldrb	r4, [r1, #12]
 8003d04:	18b9      	adds	r1, r7, r2
 8003d06:	730c      	strb	r4, [r1, #12]
                        case 2: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003d08:	1839      	adds	r1, r7, r0
 8003d0a:	7a0c      	ldrb	r4, [r1, #8]
 8003d0c:	18b9      	adds	r1, r7, r2
 8003d0e:	720c      	strb	r4, [r1, #8]
                        case 1: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003d10:	1839      	adds	r1, r7, r0
 8003d12:	790c      	ldrb	r4, [r1, #4]
 8003d14:	18b9      	adds	r1, r7, r2
 8003d16:	710c      	strb	r4, [r1, #4]
                        case 0: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];
 8003d18:	5c39      	ldrb	r1, [r7, r0]
 8003d1a:	54b9      	strb	r1, [r7, r2]
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d1c:	2401      	movs	r4, #1
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8003d1e:	0099      	lsls	r1, r3, #2
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d20:	401c      	ands	r4, r3
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d22:	01db      	lsls	r3, r3, #7
 8003d24:	4303      	orrs	r3, r0
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d26:	9803      	ldr	r0, [sp, #12]
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8003d28:	1879      	adds	r1, r7, r1
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d2a:	4684      	mov	ip, r0
 8003d2c:	9804      	ldr	r0, [sp, #16]
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8003d2e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d30:	4681      	mov	r9, r0
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8003d32:	0095      	lsls	r5, r2, #2
 8003d34:	197d      	adds	r5, r7, r5
 8003d36:	63a9      	str	r1, [r5, #56]	; 0x38
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d38:	9d02      	ldr	r5, [sp, #8]
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d3a:	44cc      	add	ip, r9
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d3c:	46a9      	mov	r9, r5
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d3e:	4660      	mov	r0, ip
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
            for (int ll=0; ll<num_paths; ll++) {
 8003d42:	3601      	adds	r6, #1
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d44:	4449      	add	r1, r9
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d46:	5484      	strb	r4, [r0, r2]
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d48:	548b      	strb	r3, [r1, r2]
            for (int ll=0; ll<num_paths; ll++) {
 8003d4a:	455e      	cmp	r6, fp
 8003d4c:	d062      	beq.n	8003e14 <hsc_decode_blockllr+0xb40>
 8003d4e:	003a      	movs	r2, r7
 8003d50:	2374      	movs	r3, #116	; 0x74
 8003d52:	3248      	adds	r2, #72	; 0x48
 8003d54:	5cb2      	ldrb	r2, [r6, r2]
 8003d56:	18b9      	adds	r1, r7, r2
 8003d58:	5ccb      	ldrb	r3, [r1, r3]
 8003d5a:	0858      	lsrs	r0, r3, #1
 8003d5c:	e77a      	b.n	8003c54 <hsc_decode_blockllr+0x980>
            int max_lmd = maxlambda_lut[phi];
 8003d5e:	4641      	mov	r1, r8
 8003d60:	e789      	b.n	8003c76 <hsc_decode_blockllr+0x9a2>
 8003d62:	4641      	mov	r1, r8
 8003d64:	e78e      	b.n	8003c84 <hsc_decode_blockllr+0x9b0>
 8003d66:	4641      	mov	r1, r8
 8003d68:	e793      	b.n	8003c92 <hsc_decode_blockllr+0x9be>
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	e798      	b.n	8003ca0 <hsc_decode_blockllr+0x9cc>
 8003d6e:	4641      	mov	r1, r8
 8003d70:	e79d      	b.n	8003cae <hsc_decode_blockllr+0x9da>
                        case 6: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003d72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d74:	1879      	adds	r1, r7, r1
 8003d76:	180c      	adds	r4, r1, r0
 8003d78:	7f24      	ldrb	r4, [r4, #28]
 8003d7a:	1889      	adds	r1, r1, r2
 8003d7c:	770c      	strb	r4, [r1, #28]
 8003d7e:	4641      	mov	r1, r8
 8003d80:	3901      	subs	r1, #1
 8003d82:	e771      	b.n	8003c68 <hsc_decode_blockllr+0x994>
        case 3: idx_b[j0[chk2]] = idx_a[3]; 
 8003d84:	003b      	movs	r3, r7
 8003d86:	336c      	adds	r3, #108	; 0x6c
 8003d88:	2564      	movs	r5, #100	; 0x64
 8003d8a:	78db      	ldrb	r3, [r3, #3]
 8003d8c:	e734      	b.n	8003bf8 <hsc_decode_blockllr+0x924>
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8003d8e:	4bde      	ldr	r3, [pc, #888]	; (8004108 <hsc_decode_blockllr+0xe34>)
 8003d90:	2454      	movs	r4, #84	; 0x54
 8003d92:	0018      	movs	r0, r3
                idx_b[j0[chk2]] = idx_a[3]; 
 8003d94:	003b      	movs	r3, r7
 8003d96:	2664      	movs	r6, #100	; 0x64
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8003d98:	4448      	add	r0, r9
 8003d9a:	5d02      	ldrb	r2, [r0, r4]
                idx_b[j0[chk2]] = idx_a[3]; 
 8003d9c:	336c      	adds	r3, #108	; 0x6c
 8003d9e:	78dd      	ldrb	r5, [r3, #3]
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8003da0:	18bb      	adds	r3, r7, r2
 8003da2:	3374      	adds	r3, #116	; 0x74
 8003da4:	7019      	strb	r1, [r3, #0]
                idx_b[j0[chk2]] = idx_a[3]; 
 8003da6:	5d83      	ldrb	r3, [r0, r6]
                pri[1]          = j1[chk2];
 8003da8:	0038      	movs	r0, r7
 8003daa:	3048      	adds	r0, #72	; 0x48
 8003dac:	7042      	strb	r2, [r0, #1]
 8003dae:	3c0c      	subs	r4, #12
                idx_b[j0[chk2]] = idx_a[3]; 
 8003db0:	18fa      	adds	r2, r7, r3
                pri[0]          = j0[chk2];
 8003db2:	553b      	strb	r3, [r7, r4]
                idx_b[j0[chk2]] = idx_a[3]; 
 8003db4:	3274      	adds	r2, #116	; 0x74
 8003db6:	086b      	lsrs	r3, r5, #1
 8003db8:	7015      	strb	r5, [r2, #0]
 8003dba:	0029      	movs	r1, r5
 8003dbc:	9308      	str	r3, [sp, #32]
 8003dbe:	e726      	b.n	8003c0e <hsc_decode_blockllr+0x93a>
                pri[1]          = j1[chk2];
 8003dc0:	2348      	movs	r3, #72	; 0x48
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003dc2:	003a      	movs	r2, r7
                pri[1]          = j1[chk2];
 8003dc4:	4698      	mov	r8, r3
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003dc6:	4bd0      	ldr	r3, [pc, #832]	; (8004108 <hsc_decode_blockllr+0xe34>)
 8003dc8:	326c      	adds	r2, #108	; 0x6c
                idx_b[j0[chk2]] = idx_a[3]; 
 8003dca:	78d5      	ldrb	r5, [r2, #3]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003dcc:	0018      	movs	r0, r3
 8003dce:	7892      	ldrb	r2, [r2, #2]
 8003dd0:	2454      	movs	r4, #84	; 0x54
 8003dd2:	4694      	mov	ip, r2
                pri[1]          = j1[chk2];
 8003dd4:	003a      	movs	r2, r7
                idx_b[j0[chk2]] = idx_a[3]; 
 8003dd6:	2664      	movs	r6, #100	; 0x64
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003dd8:	4448      	add	r0, r9
 8003dda:	5d04      	ldrb	r4, [r0, r4]
                pri[1]          = j1[chk2];
 8003ddc:	3248      	adds	r2, #72	; 0x48
 8003dde:	7054      	strb	r4, [r2, #1]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003de0:	4662      	mov	r2, ip
                idx_b[j0[chk2]] = idx_a[3]; 
 8003de2:	5d83      	ldrb	r3, [r0, r6]
                pri[0]          = j0[chk2];
 8003de4:	4640      	mov	r0, r8
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003de6:	193c      	adds	r4, r7, r4
 8003de8:	3474      	adds	r4, #116	; 0x74
 8003dea:	7022      	strb	r2, [r4, #0]
                idx_b[j0[chk2]] = idx_a[3]; 
 8003dec:	18fa      	adds	r2, r7, r3
                pri[0]          = j0[chk2];
 8003dee:	543b      	strb	r3, [r7, r0]
                idx_b[j0[chk2]] = idx_a[3]; 
 8003df0:	3274      	adds	r2, #116	; 0x74
 8003df2:	086b      	lsrs	r3, r5, #1
 8003df4:	7015      	strb	r5, [r2, #0]
 8003df6:	0029      	movs	r1, r5
 8003df8:	9308      	str	r3, [sp, #32]
 8003dfa:	e708      	b.n	8003c0e <hsc_decode_blockllr+0x93a>
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8003dfc:	2364      	movs	r3, #100	; 0x64
                pri[0]          = j0[chk2];
 8003dfe:	2448      	movs	r4, #72	; 0x48
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8003e00:	48c1      	ldr	r0, [pc, #772]	; (8004108 <hsc_decode_blockllr+0xe34>)
 8003e02:	4448      	add	r0, r9
 8003e04:	5cc2      	ldrb	r2, [r0, r3]
 8003e06:	084b      	lsrs	r3, r1, #1
                pri[0]          = j0[chk2];
 8003e08:	553a      	strb	r2, [r7, r4]
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8003e0a:	18ba      	adds	r2, r7, r2
 8003e0c:	3274      	adds	r2, #116	; 0x74
 8003e0e:	9308      	str	r3, [sp, #32]
 8003e10:	7011      	strb	r1, [r2, #0]
 8003e12:	e6fc      	b.n	8003c0e <hsc_decode_blockllr+0x93a>
 8003e14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003e16:	f7ff fb5e 	bl	80034d6 <hsc_decode_blockllr+0x202>
                    next_pt = (next_pt << 1) + 2;
 8003e1a:	4643      	mov	r3, r8
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	9308      	str	r3, [sp, #32]
                    lmd0++;
 8003e20:	9b07      	ldr	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003e22:	3002      	adds	r0, #2
                    lmd0++;
 8003e24:	3301      	adds	r3, #1
 8003e26:	9307      	str	r3, [sp, #28]
 8003e28:	9b02      	ldr	r3, [sp, #8]
 8003e2a:	3208      	adds	r2, #8
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	9302      	str	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003e30:	9b05      	ldr	r3, [sp, #20]
 8003e32:	4298      	cmp	r0, r3
 8003e34:	db00      	blt.n	8003e38 <hsc_decode_blockllr+0xb64>
 8003e36:	e0b5      	b.n	8003fa4 <hsc_decode_blockllr+0xcd0>
 8003e38:	9b07      	ldr	r3, [sp, #28]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	469c      	mov	ip, r3
 8003e3e:	e5bd      	b.n	80039bc <hsc_decode_blockllr+0x6e8>
            switch (num_paths-1) {
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <hsc_decode_blockllr+0xb74>
 8003e44:	f7ff fb39 	bl	80034ba <hsc_decode_blockllr+0x1e6>
 8003e48:	4ab0      	ldr	r2, [pc, #704]	; (800410c <hsc_decode_blockllr+0xe38>)
 8003e4a:	f7ff fb30 	bl	80034ae <hsc_decode_blockllr+0x1da>
                num_paths = LISTSIZE;
 8003e4e:	2304      	movs	r3, #4
 8003e50:	2403      	movs	r4, #3
 8003e52:	2502      	movs	r5, #2
 8003e54:	469b      	mov	fp, r3
 8003e56:	e668      	b.n	8003b2a <hsc_decode_blockllr+0x856>
           chk2       |= (1<<k);
 8003e58:	464b      	mov	r3, r9
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	4699      	mov	r9, r3
 8003e5e:	2301      	movs	r3, #1
 8003e60:	2200      	movs	r2, #0
 8003e62:	2405      	movs	r4, #5
 8003e64:	9302      	str	r3, [sp, #8]
 8003e66:	e68e      	b.n	8003b86 <hsc_decode_blockllr+0x8b2>
 8003e68:	4aa8      	ldr	r2, [pc, #672]	; (800410c <hsc_decode_blockllr+0xe38>)
 8003e6a:	f7ff fb14 	bl	8003496 <hsc_decode_blockllr+0x1c2>
 8003e6e:	4aa7      	ldr	r2, [pc, #668]	; (800410c <hsc_decode_blockllr+0xe38>)
 8003e70:	f7ff fb17 	bl	80034a2 <hsc_decode_blockllr+0x1ce>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003e74:	9b05      	ldr	r3, [sp, #20]
 8003e76:	00f6      	lsls	r6, r6, #3
 8003e78:	009d      	lsls	r5, r3, #2
 8003e7a:	0063      	lsls	r3, r4, #1
 8003e7c:	3b01      	subs	r3, #1
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4699      	mov	r9, r3
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003e82:	9c02      	ldr	r4, [sp, #8]
 8003e84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e86:	1964      	adds	r4, r4, r5
 8003e88:	7f24      	ldrb	r4, [r4, #28]
 8003e8a:	1936      	adds	r6, r6, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003e8c:	444c      	add	r4, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003e8e:	00b6      	lsls	r6, r6, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003e90:	00a4      	lsls	r4, r4, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003e92:	599e      	ldr	r6, [r3, r6]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003e94:	591c      	ldr	r4, [r3, r4]
					if (use_gfunc) {
 8003e96:	9b04      	ldr	r3, [sp, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d000      	beq.n	8003e9e <hsc_decode_blockllr+0xbca>
 8003e9c:	e13a      	b.n	8004114 <hsc_decode_blockllr+0xe40>
    llr_t a_inv = -llr_layer_a;
 8003e9e:	4273      	negs	r3, r6
    if (llr_layer_a < llr_layer_b) {
 8003ea0:	42a6      	cmp	r6, r4
 8003ea2:	db00      	blt.n	8003ea6 <hsc_decode_blockllr+0xbd2>
 8003ea4:	e1f5      	b.n	8004292 <hsc_decode_blockllr+0xfbe>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003ea6:	429c      	cmp	r4, r3
 8003ea8:	dc00      	bgt.n	8003eac <hsc_decode_blockllr+0xbd8>
    llr_t b_inv = -llr_layer_b;
 8003eaa:	4266      	negs	r6, r4
				for (int l=0; l<num_paths; l++) {
 8003eac:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003eae:	600e      	str	r6, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <hsc_decode_blockllr+0xbe4>
 8003eb4:	f7ff faca 	bl	800344c <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003eb8:	4660      	mov	r0, ip
 8003eba:	9b02      	ldr	r3, [sp, #8]
 8003ebc:	0080      	lsls	r0, r0, #2
 8003ebe:	195b      	adds	r3, r3, r5
 8003ec0:	7f5b      	ldrb	r3, [r3, #29]
 8003ec2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003ec4:	9016      	str	r0, [sp, #88]	; 0x58
 8003ec6:	18c0      	adds	r0, r0, r3
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003ec8:	444b      	add	r3, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003eca:	0080      	lsls	r0, r0, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003ecc:	009b      	lsls	r3, r3, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003ece:	5820      	ldr	r0, [r4, r0]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003ed0:	58e3      	ldr	r3, [r4, r3]
    llr_t a_inv = -llr_layer_a;
 8003ed2:	4244      	negs	r4, r0
    if (llr_layer_a < llr_layer_b) {
 8003ed4:	4298      	cmp	r0, r3
 8003ed6:	db00      	blt.n	8003eda <hsc_decode_blockllr+0xc06>
 8003ed8:	e1e7      	b.n	80042aa <hsc_decode_blockllr+0xfd6>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003eda:	42a3      	cmp	r3, r4
 8003edc:	dc00      	bgt.n	8003ee0 <hsc_decode_blockllr+0xc0c>
    llr_t b_inv = -llr_layer_b;
 8003ede:	4258      	negs	r0, r3
				for (int l=0; l<num_paths; l++) {
 8003ee0:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003ee2:	6048      	str	r0, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d101      	bne.n	8003eec <hsc_decode_blockllr+0xc18>
 8003ee8:	f7ff fab0 	bl	800344c <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003eec:	9b02      	ldr	r3, [sp, #8]
 8003eee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003ef0:	195b      	adds	r3, r3, r5
 8003ef2:	7f98      	ldrb	r0, [r3, #30]
 8003ef4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003ef6:	181b      	adds	r3, r3, r0
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003ef8:	4448      	add	r0, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003efa:	009b      	lsls	r3, r3, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003efc:	0080      	lsls	r0, r0, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003efe:	58e3      	ldr	r3, [r4, r3]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f00:	5820      	ldr	r0, [r4, r0]
    llr_t a_inv = -llr_layer_a;
 8003f02:	425c      	negs	r4, r3
    if (llr_layer_a < llr_layer_b) {
 8003f04:	4298      	cmp	r0, r3
 8003f06:	dc00      	bgt.n	8003f0a <hsc_decode_blockllr+0xc36>
 8003f08:	e1dd      	b.n	80042c6 <hsc_decode_blockllr+0xff2>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003f0a:	42a0      	cmp	r0, r4
 8003f0c:	dc00      	bgt.n	8003f10 <hsc_decode_blockllr+0xc3c>
    llr_t b_inv = -llr_layer_b;
 8003f0e:	4243      	negs	r3, r0
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003f10:	608b      	str	r3, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 8003f12:	465b      	mov	r3, fp
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d101      	bne.n	8003f1c <hsc_decode_blockllr+0xc48>
 8003f18:	f7ff fa98 	bl	800344c <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f1c:	9b02      	ldr	r3, [sp, #8]
 8003f1e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003f20:	469c      	mov	ip, r3
 8003f22:	4465      	add	r5, ip
 8003f24:	7fe8      	ldrb	r0, [r5, #31]
 8003f26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003f28:	181b      	adds	r3, r3, r0
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f2a:	4448      	add	r0, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f2c:	009b      	lsls	r3, r3, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f2e:	0080      	lsls	r0, r0, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f30:	58e3      	ldr	r3, [r4, r3]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f32:	5820      	ldr	r0, [r4, r0]
    llr_t a_inv = -llr_layer_a;
 8003f34:	425c      	negs	r4, r3
    if (llr_layer_a < llr_layer_b) {
 8003f36:	4298      	cmp	r0, r3
 8003f38:	dc00      	bgt.n	8003f3c <hsc_decode_blockllr+0xc68>
 8003f3a:	e1ca      	b.n	80042d2 <hsc_decode_blockllr+0xffe>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003f3c:	42a0      	cmp	r0, r4
 8003f3e:	dd01      	ble.n	8003f44 <hsc_decode_blockllr+0xc70>
 8003f40:	f7ff fa83 	bl	800344a <hsc_decode_blockllr+0x176>
    llr_t b_inv = -llr_layer_b;
 8003f44:	4243      	negs	r3, r0
 8003f46:	f7ff fa80 	bl	800344a <hsc_decode_blockllr+0x176>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8003f4a:	1a59      	subs	r1, r3, r1
 8003f4c:	64f9      	str	r1, [r7, #76]	; 0x4c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8003f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f50:	e592      	b.n	8003a78 <hsc_decode_blockllr+0x7a4>
 8003f52:	2304      	movs	r3, #4
 8003f54:	469c      	mov	ip, r3
 8003f56:	9b02      	ldr	r3, [sp, #8]
           chk2       |= (1<<k);
 8003f58:	40a0      	lsls	r0, r4
 8003f5a:	085a      	lsrs	r2, r3, #1
 8003f5c:	464b      	mov	r3, r9
 8003f5e:	4318      	orrs	r0, r3
           idx_b[k]    = idx_a[i];
 8003f60:	193b      	adds	r3, r7, r4
 8003f62:	4698      	mov	r8, r3
 8003f64:	2374      	movs	r3, #116	; 0x74
 8003f66:	4699      	mov	r9, r3
 8003f68:	4663      	mov	r3, ip
 8003f6a:	44c8      	add	r8, r9
 8003f6c:	431a      	orrs	r2, r3
           chk2       |= (1<<k);
 8003f6e:	b2c3      	uxtb	r3, r0
 8003f70:	4699      	mov	r9, r3
           idx_b[k]    = idx_a[i];
 8003f72:	4643      	mov	r3, r8
           pri[p_i--]  = k;
 8003f74:	197d      	adds	r5, r7, r5
 8003f76:	3548      	adds	r5, #72	; 0x48
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	702c      	strb	r4, [r5, #0]
           idx_b[k]    = idx_a[i];
 8003f7c:	701e      	strb	r6, [r3, #0]
    switch ((chk1>>1) & 7) {
 8003f7e:	2a06      	cmp	r2, #6
 8003f80:	d800      	bhi.n	8003f84 <hsc_decode_blockllr+0xcb0>
 8003f82:	e631      	b.n	8003be8 <hsc_decode_blockllr+0x914>
 8003f84:	2348      	movs	r3, #72	; 0x48
 8003f86:	003a      	movs	r2, r7
 8003f88:	5cfb      	ldrb	r3, [r7, r3]
 8003f8a:	3274      	adds	r2, #116	; 0x74
 8003f8c:	5cd1      	ldrb	r1, [r2, r3]
 8003f8e:	084b      	lsrs	r3, r1, #1
 8003f90:	9308      	str	r3, [sp, #32]
 8003f92:	e63c      	b.n	8003c0e <hsc_decode_blockllr+0x93a>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8003f94:	1acb      	subs	r3, r1, r3
 8003f96:	657b      	str	r3, [r7, #84]	; 0x54
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8003f98:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f9a:	e578      	b.n	8003a8e <hsc_decode_blockllr+0x7ba>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8003f9c:	1acb      	subs	r3, r1, r3
 8003f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8003fa0:	6639      	str	r1, [r7, #96]	; 0x60
 8003fa2:	e57f      	b.n	8003aa4 <hsc_decode_blockllr+0x7d0>
 8003fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa6:	464f      	mov	r7, r9
 8003fa8:	469b      	mov	fp, r3
 8003faa:	9b07      	ldr	r3, [sp, #28]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	469c      	mov	ip, r3
 8003fb0:	e54d      	b.n	8003a4e <hsc_decode_blockllr+0x77a>
            next_pt         = 2;
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	4699      	mov	r9, r3
            lmd0            = 0;
 8003fb6:	2300      	movs	r3, #0
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003fb8:	2606      	movs	r6, #6
 8003fba:	2202      	movs	r2, #2
 8003fbc:	469c      	mov	ip, r3
 8003fbe:	46ba      	mov	sl, r7
 8003fc0:	4c53      	ldr	r4, [pc, #332]	; (8004110 <hsc_decode_blockllr+0xe3c>)
            lmd0            = 0;
 8003fc2:	9307      	str	r3, [sp, #28]
                int incval  = (beta < beta_laststage);
 8003fc4:	9904      	ldr	r1, [sp, #16]
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	4291      	cmp	r1, r2
 8003fca:	dc00      	bgt.n	8003fce <hsc_decode_blockllr+0xcfa>
 8003fcc:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003fce:	4660      	mov	r0, ip
 8003fd0:	4655      	mov	r5, sl
 8003fd2:	5c2d      	ldrb	r5, [r5, r0]
 8003fd4:	9803      	ldr	r0, [sp, #12]
 8003fd6:	0091      	lsls	r1, r2, #2
 8003fd8:	4680      	mov	r8, r0
 8003fda:	4441      	add	r1, r8
 8003fdc:	5d49      	ldrb	r1, [r1, r5]
 8003fde:	7820      	ldrb	r0, [r4, #0]
 8003fe0:	4688      	mov	r8, r1
 8003fe2:	4647      	mov	r7, r8
 8003fe4:	0055      	lsls	r5, r2, #1
 8003fe6:	18e9      	adds	r1, r5, r3
 8003fe8:	4047      	eors	r7, r0
 8003fea:	9803      	ldr	r0, [sp, #12]
 8003fec:	0089      	lsls	r1, r1, #2
 8003fee:	5447      	strb	r7, [r0, r1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003ff0:	18f3      	adds	r3, r6, r3
 8003ff2:	7821      	ldrb	r1, [r4, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	54c1      	strb	r1, [r0, r3]
                if (beta == next_pt) {
 8003ff8:	4591      	cmp	r9, r2
 8003ffa:	d007      	beq.n	800400c <hsc_decode_blockllr+0xd38>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003ffc:	9b05      	ldr	r3, [sp, #20]
 8003ffe:	3202      	adds	r2, #2
 8004000:	3604      	adds	r6, #4
 8004002:	3408      	adds	r4, #8
 8004004:	4293      	cmp	r3, r2
 8004006:	dcdd      	bgt.n	8003fc4 <hsc_decode_blockllr+0xcf0>
 8004008:	4657      	mov	r7, sl
 800400a:	e520      	b.n	8003a4e <hsc_decode_blockllr+0x77a>
                    next_pt = (next_pt << 1) + 2;
 800400c:	1cab      	adds	r3, r5, #2
 800400e:	4699      	mov	r9, r3
                    lmd0++;
 8004010:	9b07      	ldr	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004012:	3202      	adds	r2, #2
                    lmd0++;
 8004014:	3301      	adds	r3, #1
 8004016:	9307      	str	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004018:	9b05      	ldr	r3, [sp, #20]
 800401a:	3604      	adds	r6, #4
 800401c:	3408      	adds	r4, #8
 800401e:	4293      	cmp	r3, r2
 8004020:	dc00      	bgt.n	8004024 <hsc_decode_blockllr+0xd50>
 8004022:	e13c      	b.n	800429e <hsc_decode_blockllr+0xfca>
 8004024:	9b07      	ldr	r3, [sp, #28]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	469c      	mov	ip, r3
 800402a:	e7cb      	b.n	8003fc4 <hsc_decode_blockllr+0xcf0>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	667b      	str	r3, [r7, #100]	; 0x64
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8004030:	66ba      	str	r2, [r7, #104]	; 0x68
 8004032:	e542      	b.n	8003aba <hsc_decode_blockllr+0x7e6>
 8004034:	b249      	sxtb	r1, r1
 8004036:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004038:	f7ff fbfd 	bl	8003836 <hsc_decode_blockllr+0x562>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800403c:	003b      	movs	r3, r7
 800403e:	e508      	b.n	8003a52 <hsc_decode_blockllr+0x77e>
        case 0: idx_b[1]    = idx_a[1]; 
 8004040:	003a      	movs	r2, r7
                pri[0]      = 1;
 8004042:	2048      	movs	r0, #72	; 0x48
 8004044:	2401      	movs	r4, #1
        case 0: idx_b[1]    = idx_a[1]; 
 8004046:	3274      	adds	r2, #116	; 0x74
                pri[0]      = 1;
 8004048:	543c      	strb	r4, [r7, r0]
        case 0: idx_b[1]    = idx_a[1]; 
 800404a:	7051      	strb	r1, [r2, #1]
 800404c:	e5df      	b.n	8003c0e <hsc_decode_blockllr+0x93a>
            lmd0            = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	469c      	mov	ip, r3
 8004052:	9307      	str	r3, [sp, #28]
 8004054:	465b      	mov	r3, fp
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004056:	2606      	movs	r6, #6
 8004058:	9309      	str	r3, [sp, #36]	; 0x24
 800405a:	4663      	mov	r3, ip
 800405c:	2102      	movs	r1, #2
            next_pt         = 2;
 800405e:	46da      	mov	sl, fp
 8004060:	46b8      	mov	r8, r7
 8004062:	4c2b      	ldr	r4, [pc, #172]	; (8004110 <hsc_decode_blockllr+0xe3c>)
 8004064:	9602      	str	r6, [sp, #8]
 8004066:	9308      	str	r3, [sp, #32]
                int incval  = (beta < beta_laststage);
 8004068:	9a04      	ldr	r2, [sp, #16]
 800406a:	2301      	movs	r3, #1
 800406c:	428a      	cmp	r2, r1
 800406e:	dc00      	bgt.n	8004072 <hsc_decode_blockllr+0xd9e>
 8004070:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004072:	4642      	mov	r2, r8
 8004074:	9f08      	ldr	r7, [sp, #32]
 8004076:	0088      	lsls	r0, r1, #2
 8004078:	5dd2      	ldrb	r2, [r2, r7]
 800407a:	9f03      	ldr	r7, [sp, #12]
 800407c:	7825      	ldrb	r5, [r4, #0]
 800407e:	46bc      	mov	ip, r7
 8004080:	4460      	add	r0, ip
 8004082:	5c82      	ldrb	r2, [r0, r2]
 8004084:	4691      	mov	r9, r2
 8004086:	464e      	mov	r6, r9
                int bit0_i  = (beta*2) + incval;
 8004088:	004a      	lsls	r2, r1, #1
 800408a:	4694      	mov	ip, r2
 800408c:	18d2      	adds	r2, r2, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800408e:	4075      	eors	r5, r6
 8004090:	0092      	lsls	r2, r2, #2
 8004092:	54bd      	strb	r5, [r7, r2]
                int bit1_i  = ((beta+1)*2) + incval;
 8004094:	9d02      	ldr	r5, [sp, #8]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004096:	003e      	movs	r6, r7
                int bit1_i  = ((beta+1)*2) + incval;
 8004098:	46a9      	mov	r9, r5
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800409a:	7825      	ldrb	r5, [r4, #0]
                int bit1_i  = ((beta+1)*2) + incval;
 800409c:	444b      	add	r3, r9
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800409e:	46a9      	mov	r9, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80040a0:	9f08      	ldr	r7, [sp, #32]
 80040a2:	4645      	mov	r5, r8
 80040a4:	46bb      	mov	fp, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80040a6:	464f      	mov	r7, r9
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80040a8:	46b1      	mov	r9, r6
 80040aa:	445d      	add	r5, fp
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80040ac:	009b      	lsls	r3, r3, #2
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80040ae:	786d      	ldrb	r5, [r5, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80040b0:	54f7      	strb	r7, [r6, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80040b2:	5d40      	ldrb	r0, [r0, r5]
 80040b4:	7865      	ldrb	r5, [r4, #1]
 80040b6:	444a      	add	r2, r9
 80040b8:	4068      	eors	r0, r5
 80040ba:	7050      	strb	r0, [r2, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80040bc:	7862      	ldrb	r2, [r4, #1]
 80040be:	444b      	add	r3, r9
 80040c0:	705a      	strb	r2, [r3, #1]
                if (beta == next_pt) {
 80040c2:	4551      	cmp	r1, sl
 80040c4:	d00d      	beq.n	80040e2 <hsc_decode_blockllr+0xe0e>
 80040c6:	9b02      	ldr	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80040c8:	3102      	adds	r1, #2
 80040ca:	3304      	adds	r3, #4
 80040cc:	9302      	str	r3, [sp, #8]
 80040ce:	9b05      	ldr	r3, [sp, #20]
 80040d0:	3408      	adds	r4, #8
 80040d2:	428b      	cmp	r3, r1
 80040d4:	dcc8      	bgt.n	8004068 <hsc_decode_blockllr+0xd94>
 80040d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040d8:	4647      	mov	r7, r8
 80040da:	469b      	mov	fp, r3
 80040dc:	9b08      	ldr	r3, [sp, #32]
 80040de:	469c      	mov	ip, r3
 80040e0:	e4b5      	b.n	8003a4e <hsc_decode_blockllr+0x77a>
                    next_pt = (next_pt << 1) + 2;
 80040e2:	2302      	movs	r3, #2
 80040e4:	4463      	add	r3, ip
 80040e6:	469a      	mov	sl, r3
                    lmd0++;
 80040e8:	9b07      	ldr	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80040ea:	3102      	adds	r1, #2
                    lmd0++;
 80040ec:	3301      	adds	r3, #1
 80040ee:	9307      	str	r3, [sp, #28]
 80040f0:	9b02      	ldr	r3, [sp, #8]
 80040f2:	3408      	adds	r4, #8
 80040f4:	3304      	adds	r3, #4
 80040f6:	9302      	str	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80040f8:	9b05      	ldr	r3, [sp, #20]
 80040fa:	428b      	cmp	r3, r1
 80040fc:	dc00      	bgt.n	8004100 <hsc_decode_blockllr+0xe2c>
 80040fe:	e0da      	b.n	80042b6 <hsc_decode_blockllr+0xfe2>
 8004100:	9b07      	ldr	r3, [sp, #28]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	9308      	str	r3, [sp, #32]
 8004106:	e7af      	b.n	8004068 <hsc_decode_blockllr+0xd94>
 8004108:	0800a748 	.word	0x0800a748
 800410c:	20000970 	.word	0x20000970
 8004110:	2000057c 	.word	0x2000057c
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004114:	9b02      	ldr	r3, [sp, #8]
 8004116:	5d5b      	ldrb	r3, [r3, r5]
    if (bit_layer) {
 8004118:	5cc3      	ldrb	r3, [r0, r3]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d000      	beq.n	8004120 <hsc_decode_blockllr+0xe4c>
        llr_layer_a = -llr_layer_a;
 800411e:	4276      	negs	r6, r6
				for (int l=0; l<num_paths; l++) {
 8004120:	465b      	mov	r3, fp
    return (llr_layer_b + llr_layer_a);
 8004122:	19a4      	adds	r4, r4, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004124:	600c      	str	r4, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <hsc_decode_blockllr+0xe5a>
 800412a:	f7ff f98f 	bl	800344c <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800412e:	9b02      	ldr	r3, [sp, #8]
 8004130:	4666      	mov	r6, ip
 8004132:	195b      	adds	r3, r3, r5
 8004134:	7f5c      	ldrb	r4, [r3, #29]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004136:	785b      	ldrb	r3, [r3, #1]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004138:	00b6      	lsls	r6, r6, #2
    if (bit_layer) {
 800413a:	5cc3      	ldrb	r3, [r0, r3]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800413c:	9616      	str	r6, [sp, #88]	; 0x58
    if (bit_layer) {
 800413e:	469c      	mov	ip, r3
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004140:	464b      	mov	r3, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004142:	1936      	adds	r6, r6, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004144:	191b      	adds	r3, r3, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004146:	00b4      	lsls	r4, r6, #2
 8004148:	9e10      	ldr	r6, [sp, #64]	; 0x40
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800414a:	009b      	lsls	r3, r3, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800414c:	5934      	ldr	r4, [r6, r4]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800414e:	58f3      	ldr	r3, [r6, r3]
    if (bit_layer) {
 8004150:	4666      	mov	r6, ip
 8004152:	2e00      	cmp	r6, #0
 8004154:	d000      	beq.n	8004158 <hsc_decode_blockllr+0xe84>
        llr_layer_a = -llr_layer_a;
 8004156:	4264      	negs	r4, r4
    return (llr_layer_b + llr_layer_a);
 8004158:	191b      	adds	r3, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800415a:	604b      	str	r3, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 800415c:	465b      	mov	r3, fp
 800415e:	2b02      	cmp	r3, #2
 8004160:	d101      	bne.n	8004166 <hsc_decode_blockllr+0xe92>
 8004162:	f7ff f973 	bl	800344c <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004166:	9b02      	ldr	r3, [sp, #8]
 8004168:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800416a:	195b      	adds	r3, r3, r5
 800416c:	7f9c      	ldrb	r4, [r3, #30]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800416e:	789b      	ldrb	r3, [r3, #2]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004170:	1936      	adds	r6, r6, r4
    if (bit_layer) {
 8004172:	5cc3      	ldrb	r3, [r0, r3]
 8004174:	469c      	mov	ip, r3
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004176:	464b      	mov	r3, r9
 8004178:	191b      	adds	r3, r3, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800417a:	00b4      	lsls	r4, r6, #2
 800417c:	9e10      	ldr	r6, [sp, #64]	; 0x40
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800417e:	009b      	lsls	r3, r3, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004180:	5934      	ldr	r4, [r6, r4]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004182:	58f3      	ldr	r3, [r6, r3]
    if (bit_layer) {
 8004184:	4666      	mov	r6, ip
 8004186:	2e00      	cmp	r6, #0
 8004188:	d000      	beq.n	800418c <hsc_decode_blockllr+0xeb8>
        llr_layer_a = -llr_layer_a;
 800418a:	4264      	negs	r4, r4
    return (llr_layer_b + llr_layer_a);
 800418c:	191b      	adds	r3, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800418e:	608b      	str	r3, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 8004190:	465b      	mov	r3, fp
 8004192:	2b03      	cmp	r3, #3
 8004194:	d101      	bne.n	800419a <hsc_decode_blockllr+0xec6>
 8004196:	f7ff f959 	bl	800344c <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800419a:	9b02      	ldr	r3, [sp, #8]
 800419c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800419e:	469c      	mov	ip, r3
 80041a0:	4465      	add	r5, ip
 80041a2:	7feb      	ldrb	r3, [r5, #31]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80041a4:	78ec      	ldrb	r4, [r5, #3]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80041a6:	9d16      	ldr	r5, [sp, #88]	; 0x58
    if (bit_layer) {
 80041a8:	5d04      	ldrb	r4, [r0, r4]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80041aa:	18ed      	adds	r5, r5, r3
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80041ac:	444b      	add	r3, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80041ae:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80041b0:	009b      	lsls	r3, r3, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80041b2:	5970      	ldr	r0, [r6, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80041b4:	58f3      	ldr	r3, [r6, r3]
    if (bit_layer) {
 80041b6:	2c00      	cmp	r4, #0
 80041b8:	d000      	beq.n	80041bc <hsc_decode_blockllr+0xee8>
        llr_layer_a = -llr_layer_a;
 80041ba:	4240      	negs	r0, r0
    return (llr_layer_b + llr_layer_a);
 80041bc:	181b      	adds	r3, r3, r0
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80041be:	60cb      	str	r3, [r1, #12]
 80041c0:	f7ff f944 	bl	800344c <hsc_decode_blockllr+0x178>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80041c4:	3303      	adds	r3, #3
 80041c6:	469a      	mov	sl, r3
            next_pt         = 2;
 80041c8:	3b04      	subs	r3, #4
 80041ca:	9308      	str	r3, [sp, #32]
            lmd0            = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	9307      	str	r3, [sp, #28]
 80041d0:	469c      	mov	ip, r3
 80041d2:	465b      	mov	r3, fp
 80041d4:	9309      	str	r3, [sp, #36]	; 0x24
 80041d6:	4653      	mov	r3, sl
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80041d8:	2402      	movs	r4, #2
 80041da:	46b9      	mov	r9, r7
 80041dc:	494d      	ldr	r1, [pc, #308]	; (8004314 <hsc_decode_blockllr+0x1040>)
 80041de:	9302      	str	r3, [sp, #8]
                int incval  = (beta < beta_laststage);
 80041e0:	9a04      	ldr	r2, [sp, #16]
 80041e2:	2301      	movs	r3, #1
 80041e4:	42a2      	cmp	r2, r4
 80041e6:	dc00      	bgt.n	80041ea <hsc_decode_blockllr+0xf16>
 80041e8:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80041ea:	9f03      	ldr	r7, [sp, #12]
 80041ec:	4665      	mov	r5, ip
 80041ee:	464a      	mov	r2, r9
 80041f0:	46b8      	mov	r8, r7
 80041f2:	5d52      	ldrb	r2, [r2, r5]
 80041f4:	00a0      	lsls	r0, r4, #2
 80041f6:	4440      	add	r0, r8
 80041f8:	5c85      	ldrb	r5, [r0, r2]
 80041fa:	780e      	ldrb	r6, [r1, #0]
                int bit0_i  = (beta*2) + incval;
 80041fc:	0062      	lsls	r2, r4, #1
 80041fe:	4690      	mov	r8, r2
 8004200:	18d2      	adds	r2, r2, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004202:	4075      	eors	r5, r6
 8004204:	0092      	lsls	r2, r2, #2
 8004206:	464e      	mov	r6, r9
 8004208:	54bd      	strb	r5, [r7, r2]
                int bit1_i  = ((beta+1)*2) + incval;
 800420a:	9d02      	ldr	r5, [sp, #8]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800420c:	4466      	add	r6, ip
                int bit1_i  = ((beta+1)*2) + incval;
 800420e:	46aa      	mov	sl, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004210:	7877      	ldrb	r7, [r6, #1]
                int bit1_i  = ((beta+1)*2) + incval;
 8004212:	4453      	add	r3, sl
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004214:	46ba      	mov	sl, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004216:	780d      	ldrb	r5, [r1, #0]
 8004218:	9f03      	ldr	r7, [sp, #12]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	54fd      	strb	r5, [r7, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800421e:	784f      	ldrb	r7, [r1, #1]
 8004220:	4655      	mov	r5, sl
 8004222:	46ba      	mov	sl, r7
 8004224:	9f03      	ldr	r7, [sp, #12]
 8004226:	5d45      	ldrb	r5, [r0, r5]
 8004228:	46bb      	mov	fp, r7
 800422a:	4657      	mov	r7, sl
 800422c:	445a      	add	r2, fp
 800422e:	407d      	eors	r5, r7
 8004230:	7055      	strb	r5, [r2, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004232:	784d      	ldrb	r5, [r1, #1]
 8004234:	445b      	add	r3, fp
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004236:	78b6      	ldrb	r6, [r6, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004238:	705d      	strb	r5, [r3, #1]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800423a:	5d80      	ldrb	r0, [r0, r6]
 800423c:	788d      	ldrb	r5, [r1, #2]
 800423e:	4068      	eors	r0, r5
 8004240:	7090      	strb	r0, [r2, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004242:	788a      	ldrb	r2, [r1, #2]
 8004244:	709a      	strb	r2, [r3, #2]
                if (beta == next_pt) {
 8004246:	9b08      	ldr	r3, [sp, #32]
 8004248:	429c      	cmp	r4, r3
 800424a:	d009      	beq.n	8004260 <hsc_decode_blockllr+0xf8c>
 800424c:	9b02      	ldr	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800424e:	3402      	adds	r4, #2
 8004250:	3304      	adds	r3, #4
 8004252:	9302      	str	r3, [sp, #8]
 8004254:	9b05      	ldr	r3, [sp, #20]
 8004256:	3108      	adds	r1, #8
 8004258:	42a3      	cmp	r3, r4
 800425a:	dcc1      	bgt.n	80041e0 <hsc_decode_blockllr+0xf0c>
 800425c:	f7ff fbf4 	bl	8003a48 <hsc_decode_blockllr+0x774>
                    next_pt = (next_pt << 1) + 2;
 8004260:	4643      	mov	r3, r8
 8004262:	3302      	adds	r3, #2
 8004264:	9308      	str	r3, [sp, #32]
                    lmd0++;
 8004266:	9b07      	ldr	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004268:	3402      	adds	r4, #2
                    lmd0++;
 800426a:	3301      	adds	r3, #1
 800426c:	9307      	str	r3, [sp, #28]
 800426e:	9b02      	ldr	r3, [sp, #8]
 8004270:	3108      	adds	r1, #8
 8004272:	3304      	adds	r3, #4
 8004274:	9302      	str	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004276:	9b05      	ldr	r3, [sp, #20]
 8004278:	429c      	cmp	r4, r3
 800427a:	db00      	blt.n	800427e <hsc_decode_blockllr+0xfaa>
 800427c:	e692      	b.n	8003fa4 <hsc_decode_blockllr+0xcd0>
 800427e:	9b07      	ldr	r3, [sp, #28]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	469c      	mov	ip, r3
 8004284:	e7ac      	b.n	80041e0 <hsc_decode_blockllr+0xf0c>
 8004286:	9b02      	ldr	r3, [sp, #8]
 8004288:	085a      	lsrs	r2, r3, #1
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 800428a:	2303      	movs	r3, #3
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	469b      	mov	fp, r3
 8004290:	e4a7      	b.n	8003be2 <hsc_decode_blockllr+0x90e>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 8004292:	0026      	movs	r6, r4
 8004294:	429c      	cmp	r4, r3
 8004296:	db00      	blt.n	800429a <hsc_decode_blockllr+0xfc6>
 8004298:	e608      	b.n	8003eac <hsc_decode_blockllr+0xbd8>
 800429a:	001e      	movs	r6, r3
 800429c:	e606      	b.n	8003eac <hsc_decode_blockllr+0xbd8>
 800429e:	9b07      	ldr	r3, [sp, #28]
 80042a0:	4657      	mov	r7, sl
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	469c      	mov	ip, r3
 80042a6:	f7ff fbd2 	bl	8003a4e <hsc_decode_blockllr+0x77a>
 80042aa:	0018      	movs	r0, r3
 80042ac:	42a3      	cmp	r3, r4
 80042ae:	db00      	blt.n	80042b2 <hsc_decode_blockllr+0xfde>
 80042b0:	e616      	b.n	8003ee0 <hsc_decode_blockllr+0xc0c>
 80042b2:	0020      	movs	r0, r4
 80042b4:	e614      	b.n	8003ee0 <hsc_decode_blockllr+0xc0c>
 80042b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b8:	4647      	mov	r7, r8
 80042ba:	469b      	mov	fp, r3
 80042bc:	9b07      	ldr	r3, [sp, #28]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	469c      	mov	ip, r3
 80042c2:	f7ff fbc4 	bl	8003a4e <hsc_decode_blockllr+0x77a>
 80042c6:	0003      	movs	r3, r0
 80042c8:	42a0      	cmp	r0, r4
 80042ca:	db00      	blt.n	80042ce <hsc_decode_blockllr+0xffa>
 80042cc:	e620      	b.n	8003f10 <hsc_decode_blockllr+0xc3c>
 80042ce:	0023      	movs	r3, r4
 80042d0:	e61e      	b.n	8003f10 <hsc_decode_blockllr+0xc3c>
 80042d2:	0003      	movs	r3, r0
 80042d4:	42a0      	cmp	r0, r4
 80042d6:	db01      	blt.n	80042dc <hsc_decode_blockllr+0x1008>
 80042d8:	f7ff f8b7 	bl	800344a <hsc_decode_blockllr+0x176>
 80042dc:	0023      	movs	r3, r4
 80042de:	f7ff f8b4 	bl	800344a <hsc_decode_blockllr+0x176>
        for (i=0, phi=0; phi<h->infobits; i++) {
 80042e2:	225f      	movs	r2, #95	; 0x5f
 80042e4:	4690      	mov	r8, r2
 80042e6:	3210      	adds	r2, #16
 80042e8:	4694      	mov	ip, r2
 80042ea:	3208      	adds	r2, #8
 80042ec:	4692      	mov	sl, r2
 80042ee:	3204      	adds	r2, #4
 80042f0:	4691      	mov	r9, r2
 80042f2:	3203      	adds	r2, #3
 80042f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80042f6:	3201      	adds	r2, #1
 80042f8:	277d      	movs	r7, #125	; 0x7d
 80042fa:	2100      	movs	r1, #0
 80042fc:	9211      	str	r2, [sp, #68]	; 0x44
 80042fe:	f7ff fa9a 	bl	8003836 <hsc_decode_blockllr+0x562>
 8004302:	001c      	movs	r4, r3
 8004304:	f7ff fb0d 	bl	8003922 <hsc_decode_blockllr+0x64e>
 8004308:	9d00      	ldr	r5, [sp, #0]
 800430a:	f7ff fad1 	bl	80038b0 <hsc_decode_blockllr+0x5dc>
    if (llr_layer_a < llr_layer_b) {
 800430e:	0004      	movs	r4, r0
 8004310:	f7ff fb1c 	bl	800394c <hsc_decode_blockllr+0x678>
 8004314:	2000057c 	.word	0x2000057c

08004318 <sub_calc_llrindex>:
    else if (index < 0)     index = 0;
    else                    index >>= 8;

#   elif (LLRMODEL == LLRMODEL_NBRSSI)
    index = (int)lora_nrssi - 40;
    if (index < 0)          index = 0;
 8004318:	2328      	movs	r3, #40	; 0x28
 800431a:	425b      	negs	r3, r3
 800431c:	18c8      	adds	r0, r1, r3
 800431e:	d404      	bmi.n	800432a <sub_calc_llrindex+0x12>
    else if (index >= 31)   index = 31;
 8004320:	281e      	cmp	r0, #30
 8004322:	dd00      	ble.n	8004326 <sub_calc_llrindex+0xe>
 8004324:	201f      	movs	r0, #31

#   endif

    return (uint8_t)index;
 8004326:	b2c0      	uxtb	r0, r0
}
 8004328:	4770      	bx	lr
    if (index < 0)          index = 0;
 800432a:	2000      	movs	r0, #0
 800432c:	e7fb      	b.n	8004326 <sub_calc_llrindex+0xe>
	...

08004330 <sub_scale_llrmag>:
#   if (LLRMODEL == LLRMODEL_SPOTSNR)
    llrmag = llrvsnr[index];
#   elif (LLRMODEL == LLRMODEL_WBRSSI)
    llrmag = (int32_t)llrvebn0_0dB2[index];
#   elif (LLRMODEL == LLRMODEL_NBRSSI)
    llrmag = (int32_t)llrvrssi[index];
 8004330:	0040      	lsls	r0, r0, #1
 8004332:	4b03      	ldr	r3, [pc, #12]	; (8004340 <sub_scale_llrmag+0x10>)
 8004334:	5ac0      	ldrh	r0, [r0, r3]
#   endif

    llrmag *= bytesperblock;
 8004336:	4348      	muls	r0, r1
 8004338:	b280      	uxth	r0, r0
    llrmag>>= 3;
 800433a:	08c0      	lsrs	r0, r0, #3
    return llrmag;
}
 800433c:	4770      	bx	lr
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	0800b11c 	.word	0x0800b11c

08004344 <lorallr_init>:



void lorallr_init(lorallr_t* obj, hscrate_t coderate, lorasf_t lora_sf, uint8_t lora_nrssi, uint8_t lora_wrssi) {
 8004344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004346:	46c6      	mov	lr, r8
 8004348:	b500      	push	{lr}
 800434a:	0004      	movs	r4, r0
 800434c:	001d      	movs	r5, r3
 800434e:	ab06      	add	r3, sp, #24
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	4698      	mov	r8, r3
    ///@note no input checking
    obj->buffer_bits    = 0;
 8004354:	4b10      	ldr	r3, [pc, #64]	; (8004398 <lorallr_init+0x54>)
 8004356:	2000      	movs	r0, #0
 8004358:	52e0      	strh	r0, [r4, r3]
    obj->bufput         = obj->buf;
 800435a:	3b04      	subs	r3, #4
 800435c:	50e4      	str	r4, [r4, r3]
    obj->llr_offset     = llroffset[lora_sf];
 800435e:	0093      	lsls	r3, r2, #2
 8004360:	4a0e      	ldr	r2, [pc, #56]	; (800439c <lorallr_init+0x58>)
 8004362:	18d2      	adds	r2, r2, r3
 8004364:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004366:	4e0e      	ldr	r6, [pc, #56]	; (80043a0 <lorallr_init+0x5c>)
 8004368:	55a3      	strb	r3, [r4, r6]
    obj->bytesperblock  = hsc_bytesperblock(coderate);
 800436a:	0008      	movs	r0, r1
 800436c:	f7fd fe74 	bl	8002058 <hsc_bytesperblock>
 8004370:	0007      	movs	r7, r0
 8004372:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <lorallr_init+0x60>)
 8004374:	54e0      	strb	r0, [r4, r3]

    obj->last_nrssi     = lora_nrssi;
 8004376:	3301      	adds	r3, #1
 8004378:	54e5      	strb	r5, [r4, r3]

#   if (LLRMODEL != LLRMODEL_FIXEDVAL)
    obj->last_index     = sub_calc_llrindex(obj->llr_offset, lora_nrssi, lora_wrssi);
 800437a:	5da0      	ldrb	r0, [r4, r6]
 800437c:	4642      	mov	r2, r8
 800437e:	0029      	movs	r1, r5
 8004380:	f7ff ffca 	bl	8004318 <sub_calc_llrindex>
 8004384:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <lorallr_init+0x64>)
 8004386:	54e0      	strb	r0, [r4, r3]
#   else
    obj->last_index     = 0;
#   endif

    obj->last_llr = sub_scale_llrmag(obj->last_index, obj->bytesperblock);
 8004388:	0039      	movs	r1, r7
 800438a:	f7ff ffd1 	bl	8004330 <sub_scale_llrmag>
 800438e:	4b07      	ldr	r3, [pc, #28]	; (80043ac <lorallr_init+0x68>)
 8004390:	52e0      	strh	r0, [r4, r3]
}
 8004392:	bc04      	pop	{r2}
 8004394:	4690      	mov	r8, r2
 8004396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004398:	00000404 	.word	0x00000404
 800439c:	0800b11c 	.word	0x0800b11c
 80043a0:	00000406 	.word	0x00000406
 80043a4:	00000407 	.word	0x00000407
 80043a8:	00000409 	.word	0x00000409
 80043ac:	0000040a 	.word	0x0000040a

080043b0 <lorallr_pushsample>:

///@note pushsample is not threadsafe when used with popblock (it is threadsafe with getblock, though).
///      Since pushsample is generally used in an ISR, if popblock is not used within the same ISR
///      call (i.e. it's in a thread/task), popblock must be protected with interrupt halting or a
///      mutex (if mutex exists).
void lorallr_pushsample(lorallr_t* obj, uint8_t lora_nrssi, uint8_t lora_wrssi, int16_t new_bits) {
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	0005      	movs	r5, r0
 80043b4:	1e1c      	subs	r4, r3, #0
    uint16_t next_mag;
    uint8_t index;

    /// Exit if no new information, or if too much
    if (new_bits <= 0) {
 80043b6:	dd2f      	ble.n	8004418 <lorallr_pushsample+0x68>
        return;
    }
    obj->buffer_bits += new_bits;
 80043b8:	4818      	ldr	r0, [pc, #96]	; (800441c <lorallr_pushsample+0x6c>)
 80043ba:	5a2b      	ldrh	r3, [r5, r0]
 80043bc:	191b      	adds	r3, r3, r4
 80043be:	b29b      	uxth	r3, r3
 80043c0:	522b      	strh	r3, [r5, r0]
    if (obj->buffer_bits > 256) {
 80043c2:	2080      	movs	r0, #128	; 0x80
 80043c4:	0040      	lsls	r0, r0, #1
 80043c6:	4283      	cmp	r3, r0
 80043c8:	d826      	bhi.n	8004418 <lorallr_pushsample+0x68>
#   if (LLRMODEL == LLRMODEL_FIXEDVAL)
    index = 0;
#   else
    /// The rssi can have sharp deviations (sometimes).  If it's more than 6 dB more or less than last
    /// value, clip it.
    if (lora_nrssi > (obj->last_nrssi + 6)) {
 80043ca:	2381      	movs	r3, #129	; 0x81
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	5ceb      	ldrb	r3, [r5, r3]
 80043d0:	1d98      	adds	r0, r3, #6
 80043d2:	4281      	cmp	r1, r0
 80043d4:	dd12      	ble.n	80043fc <lorallr_pushsample+0x4c>
        lora_nrssi = obj->last_nrssi + 6;
 80043d6:	b2c1      	uxtb	r1, r0
    else if (lora_nrssi < (obj->last_nrssi - 6)) {
        lora_nrssi = obj->last_nrssi - 6;
    }

    /// Get the next index value, and average it with the last value.
    index   = sub_calc_llrindex(obj->llr_offset, lora_nrssi, lora_wrssi);
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <lorallr_pushsample+0x70>)
 80043da:	5ce8      	ldrb	r0, [r5, r3]
 80043dc:	f7ff ff9c 	bl	8004318 <sub_calc_llrindex>
    index   = (obj->last_index + index) >> 1;
 80043e0:	4b10      	ldr	r3, [pc, #64]	; (8004424 <lorallr_pushsample+0x74>)
 80043e2:	5ceb      	ldrb	r3, [r5, r3]
 80043e4:	18c0      	adds	r0, r0, r3
 80043e6:	1040      	asrs	r0, r0, #1
 80043e8:	b2c0      	uxtb	r0, r0
#   endif

    next_mag = sub_scale_llrmag(index, obj->bytesperblock);
 80043ea:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <lorallr_pushsample+0x78>)
 80043ec:	5ce9      	ldrb	r1, [r5, r3]
 80043ee:	f7ff ff9f 	bl	8004330 <sub_scale_llrmag>

    ///@note this last-llr might go away
    obj->last_llr = next_mag;
 80043f2:	4b0e      	ldr	r3, [pc, #56]	; (800442c <lorallr_pushsample+0x7c>)
 80043f4:	52e8      	strh	r0, [r5, r3]

    // Variant that just averages across the block
    {   register llr_t* bit = obj->bufput;
 80043f6:	3b0a      	subs	r3, #10
 80043f8:	58eb      	ldr	r3, [r5, r3]
        register llr_t mag  = next_mag;
        while (--new_bits >= 0) {
 80043fa:	e006      	b.n	800440a <lorallr_pushsample+0x5a>
    else if (lora_nrssi < (obj->last_nrssi - 6)) {
 80043fc:	1f98      	subs	r0, r3, #6
 80043fe:	4281      	cmp	r1, r0
 8004400:	daea      	bge.n	80043d8 <lorallr_pushsample+0x28>
        lora_nrssi = obj->last_nrssi - 6;
 8004402:	b2c1      	uxtb	r1, r0
 8004404:	e7e8      	b.n	80043d8 <lorallr_pushsample+0x28>
            *bit++  = mag;
 8004406:	6018      	str	r0, [r3, #0]
 8004408:	3304      	adds	r3, #4
        while (--new_bits >= 0) {
 800440a:	3c01      	subs	r4, #1
 800440c:	b224      	sxth	r4, r4
 800440e:	2c00      	cmp	r4, #0
 8004410:	daf9      	bge.n	8004406 <lorallr_pushsample+0x56>
        }
        obj->bufput = bit;
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	00d2      	lsls	r2, r2, #3
 8004416:	50ab      	str	r3, [r5, r2]
    }
}
 8004418:	bd70      	pop	{r4, r5, r6, pc}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	00000404 	.word	0x00000404
 8004420:	00000406 	.word	0x00000406
 8004424:	00000409 	.word	0x00000409
 8004428:	00000407 	.word	0x00000407
 800442c:	0000040a 	.word	0x0000040a

08004430 <lorallr_getblock>:


llr_t* lorallr_getblock(lorallr_t* obj, const uint8_t* blockbytes) {
 8004430:	b510      	push	{r4, lr}
//            return NULL;
//        }
//    }

    ///@todo this could be done with multiplication and/or SIMD on Cortex M4
    end     = &blockbytes[16];
 8004432:	000c      	movs	r4, r1
 8004434:	3410      	adds	r4, #16
    bitptr  = obj->buf;
 8004436:	0003      	movs	r3, r0
    while (blockbytes < end) {
 8004438:	e005      	b.n	8004446 <lorallr_getblock+0x16>
        if (*blockbytes & 0x80) *bitptr = 0 - *bitptr;
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4252      	negs	r2, r2
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	e007      	b.n	8004452 <lorallr_getblock+0x22>
        if (*blockbytes & 0x04) *bitptr = 0 - *bitptr;
        bitptr++;
        if (*blockbytes & 0x02) *bitptr = 0 - *bitptr;
        bitptr++;
        if (*blockbytes & 0x01) *bitptr = 0 - *bitptr;
        bitptr++;
 8004442:	3320      	adds	r3, #32
        blockbytes++;
 8004444:	3101      	adds	r1, #1
    while (blockbytes < end) {
 8004446:	42a1      	cmp	r1, r4
 8004448:	d22e      	bcs.n	80044a8 <lorallr_getblock+0x78>
        if (*blockbytes & 0x80) *bitptr = 0 - *bitptr;
 800444a:	2200      	movs	r2, #0
 800444c:	568a      	ldrsb	r2, [r1, r2]
 800444e:	2a00      	cmp	r2, #0
 8004450:	dbf3      	blt.n	800443a <lorallr_getblock+0xa>
        if (*blockbytes & 0x40) *bitptr = 0 - *bitptr;
 8004452:	780a      	ldrb	r2, [r1, #0]
 8004454:	0652      	lsls	r2, r2, #25
 8004456:	d502      	bpl.n	800445e <lorallr_getblock+0x2e>
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	4252      	negs	r2, r2
 800445c:	605a      	str	r2, [r3, #4]
        if (*blockbytes & 0x20) *bitptr = 0 - *bitptr;
 800445e:	780a      	ldrb	r2, [r1, #0]
 8004460:	0692      	lsls	r2, r2, #26
 8004462:	d502      	bpl.n	800446a <lorallr_getblock+0x3a>
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	4252      	negs	r2, r2
 8004468:	609a      	str	r2, [r3, #8]
        if (*blockbytes & 0x10) *bitptr = 0 - *bitptr;
 800446a:	780a      	ldrb	r2, [r1, #0]
 800446c:	06d2      	lsls	r2, r2, #27
 800446e:	d502      	bpl.n	8004476 <lorallr_getblock+0x46>
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	4252      	negs	r2, r2
 8004474:	60da      	str	r2, [r3, #12]
        if (*blockbytes & 0x08) *bitptr = 0 - *bitptr;
 8004476:	780a      	ldrb	r2, [r1, #0]
 8004478:	0712      	lsls	r2, r2, #28
 800447a:	d502      	bpl.n	8004482 <lorallr_getblock+0x52>
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	4252      	negs	r2, r2
 8004480:	611a      	str	r2, [r3, #16]
        if (*blockbytes & 0x04) *bitptr = 0 - *bitptr;
 8004482:	780a      	ldrb	r2, [r1, #0]
 8004484:	0752      	lsls	r2, r2, #29
 8004486:	d502      	bpl.n	800448e <lorallr_getblock+0x5e>
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	4252      	negs	r2, r2
 800448c:	615a      	str	r2, [r3, #20]
        if (*blockbytes & 0x02) *bitptr = 0 - *bitptr;
 800448e:	780a      	ldrb	r2, [r1, #0]
 8004490:	0792      	lsls	r2, r2, #30
 8004492:	d502      	bpl.n	800449a <lorallr_getblock+0x6a>
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	4252      	negs	r2, r2
 8004498:	619a      	str	r2, [r3, #24]
        if (*blockbytes & 0x01) *bitptr = 0 - *bitptr;
 800449a:	780a      	ldrb	r2, [r1, #0]
 800449c:	07d2      	lsls	r2, r2, #31
 800449e:	d5d0      	bpl.n	8004442 <lorallr_getblock+0x12>
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	4252      	negs	r2, r2
 80044a4:	61da      	str	r2, [r3, #28]
 80044a6:	e7cc      	b.n	8004442 <lorallr_getblock+0x12>
    }

    return obj->buf;
}
 80044a8:	bd10      	pop	{r4, pc}
	...

080044ac <lorallr_popblock>:


void lorallr_popblock(lorallr_t* obj) {
 80044ac:	b510      	push	{r4, lr}
 80044ae:	0004      	movs	r4, r0
    ot_int cpy_units;

    cpy_units = ((void*)obj->bufput - (void*)&obj->buf[128]) / 4;
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	58c3      	ldr	r3, [r0, r3]
 80044b6:	2280      	movs	r2, #128	; 0x80
 80044b8:	0092      	lsls	r2, r2, #2
 80044ba:	1881      	adds	r1, r0, r2
 80044bc:	1a5b      	subs	r3, r3, r1
 80044be:	17d8      	asrs	r0, r3, #31
 80044c0:	3afe      	subs	r2, #254	; 0xfe
 80044c2:	3aff      	subs	r2, #255	; 0xff
 80044c4:	4002      	ands	r2, r0
 80044c6:	18d2      	adds	r2, r2, r3
 80044c8:	1092      	asrs	r2, r2, #2
 80044ca:	b213      	sxth	r3, r2
    if (cpy_units > 0) {
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	dd0e      	ble.n	80044ee <lorallr_popblock+0x42>
        ot_memcpy_4(obj->buf, &obj->buf[128], cpy_units);
 80044d0:	b292      	uxth	r2, r2
 80044d2:	0020      	movs	r0, r4
 80044d4:	f004 fa3b 	bl	800894e <ot_memcpy_4>
        obj->bufput        -= 128;
 80044d8:	2280      	movs	r2, #128	; 0x80
 80044da:	00d2      	lsls	r2, r2, #3
 80044dc:	58a3      	ldr	r3, [r4, r2]
 80044de:	4904      	ldr	r1, [pc, #16]	; (80044f0 <lorallr_popblock+0x44>)
 80044e0:	468c      	mov	ip, r1
 80044e2:	4463      	add	r3, ip
 80044e4:	50a3      	str	r3, [r4, r2]
        obj->buffer_bits   -= 128;
 80044e6:	4a03      	ldr	r2, [pc, #12]	; (80044f4 <lorallr_popblock+0x48>)
 80044e8:	5aa3      	ldrh	r3, [r4, r2]
 80044ea:	3b80      	subs	r3, #128	; 0x80
 80044ec:	52a3      	strh	r3, [r4, r2]
    }
}
 80044ee:	bd10      	pop	{r4, pc}
 80044f0:	fffffe00 	.word	0xfffffe00
 80044f4:	00000404 	.word	0x00000404

080044f8 <bgcrc8_block>:
    0x33, 0x1C, 0x6D, 0x42
};



ot_u8 bgcrc8_block(ot_u8* block_addr) {
 80044f8:	b510      	push	{r4, lr}
 80044fa:	0002      	movs	r2, r0
    ot_int  cnt = 5;
    ot_u8   reg = 0xFF;
 80044fc:	20ff      	movs	r0, #255	; 0xff
    ot_int  cnt = 5;
 80044fe:	2305      	movs	r3, #5
    
    while (--cnt >= 0) {
 8004500:	e004      	b.n	800450c <bgcrc8_block+0x14>
        reg = *block_addr ^ crc8tab[reg];
 8004502:	7811      	ldrb	r1, [r2, #0]
 8004504:	4c04      	ldr	r4, [pc, #16]	; (8004518 <bgcrc8_block+0x20>)
 8004506:	5c20      	ldrb	r0, [r4, r0]
 8004508:	4048      	eors	r0, r1
        block_addr++;
 800450a:	3201      	adds	r2, #1
    while (--cnt >= 0) {
 800450c:	3b01      	subs	r3, #1
 800450e:	b21b      	sxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	daf6      	bge.n	8004502 <bgcrc8_block+0xa>
    }
    return reg;
}
 8004514:	bd10      	pop	{r4, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	20000008 	.word	0x20000008

0800451c <bgcrc8_check>:

ot_u8 bgcrc8_check(ot_u8* block_addr) {
 800451c:	b510      	push	{r4, lr}
    return (block_addr[5] ^ bgcrc8_block(block_addr));
 800451e:	7944      	ldrb	r4, [r0, #5]
 8004520:	f7ff ffea 	bl	80044f8 <bgcrc8_block>
 8004524:	4060      	eors	r0, r4
 8004526:	b2c0      	uxtb	r0, r0
}
 8004528:	bd10      	pop	{r4, pc}

0800452a <bgcrc8_put>:

void bgcrc8_put(ot_u8* block_addr) {
 800452a:	b510      	push	{r4, lr}
 800452c:	0004      	movs	r4, r0
    block_addr[5] = bgcrc8_block(block_addr);
 800452e:	f7ff ffe3 	bl	80044f8 <bgcrc8_block>
 8004532:	7160      	strb	r0, [r4, #5]
}
 8004534:	bd10      	pop	{r4, pc}
	...

08004538 <otapi_new_telegram>:
#endif
}


///@todo this function is experimental, and it is subject to change
ot_u16 otapi_new_telegram(ot_u32 token, ot_u8 data_id, const ot_u8* data) {
 8004538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800453a:	b083      	sub	sp, #12
 800453c:	0006      	movs	r6, r0
 800453e:	000d      	movs	r5, r1
 8004540:	9201      	str	r2, [sp, #4]
///         +---------+--------+-------+-------+---------+--------+
/// </PRE>
// ========================================================================
/// Set the header if the session is valid.  Also conditionally write the header
/// depending on the address type (a parameter).
    if (session_notempty()) {
 8004542:	f001 fc3b 	bl	8005dbc <session_notempty>
 8004546:	2800      	cmp	r0, #0
 8004548:	d102      	bne.n	8004550 <otapi_new_telegram+0x18>
        q_writebyte(&txq, data_id);
        q_writestring(&txq, data, 7);

        return 1;
    }
    return 0;
 800454a:	2000      	movs	r0, #0
}
 800454c:	b003      	add	sp, #12
 800454e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        s_active = session_top();
 8004550:	f001 fc00 	bl	8005d54 <session_top>
 8004554:	0007      	movs	r7, r0
        dll_set_defaults(s_active);
 8004556:	f000 fde7 	bl	8005128 <dll_set_defaults>
        dll.comm.rx_timeout = 0;
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <otapi_new_telegram+0x78>)
 800455c:	2200      	movs	r2, #0
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
        q_empty(&txq);
 8004560:	4c14      	ldr	r4, [pc, #80]	; (80045b4 <otapi_new_telegram+0x7c>)
 8004562:	0020      	movs	r0, r4
 8004564:	f002 fd9b 	bl	800709e <q_empty>
        txq.getcursor += 2;         // Bypass unused length and Link CTL bytes
 8004568:	6863      	ldr	r3, [r4, #4]
 800456a:	3302      	adds	r3, #2
 800456c:	6063      	str	r3, [r4, #4]
        q_writebyte(&txq, 14);      // Dummy Length value (not actually sent)
 800456e:	210e      	movs	r1, #14
 8004570:	0020      	movs	r0, r4
 8004572:	f002 fdbb 	bl	80070ec <q_writebyte>
        q_writebyte(&txq, 0);       // Dummy Link-Control (not actually sent)
 8004576:	2100      	movs	r1, #0
 8004578:	0020      	movs	r0, r4
 800457a:	f002 fdb7 	bl	80070ec <q_writebyte>
        q_writebyte(&txq, 0);                           // Dummy TX-EIRP (updated by RF driver)
 800457e:	2100      	movs	r1, #0
 8004580:	0020      	movs	r0, r4
 8004582:	f002 fdb3 	bl	80070ec <q_writebyte>
        q_writebyte(&txq, (s_active->subnet | 0x01));   // This byte is two nibbles: Subnet specifier and Page ID (1)
 8004586:	7ab9      	ldrb	r1, [r7, #10]
 8004588:	2301      	movs	r3, #1
 800458a:	4319      	orrs	r1, r3
 800458c:	0020      	movs	r0, r4
 800458e:	f002 fdad 	bl	80070ec <q_writebyte>
        q_writelong(&txq, token);                       // Application Token (32 bits)
 8004592:	0031      	movs	r1, r6
 8004594:	0020      	movs	r0, r4
 8004596:	f002 fdc2 	bl	800711e <q_writelong>
        q_writebyte(&txq, data_id);
 800459a:	0029      	movs	r1, r5
 800459c:	0020      	movs	r0, r4
 800459e:	f002 fda5 	bl	80070ec <q_writebyte>
        q_writestring(&txq, data, 7);
 80045a2:	2207      	movs	r2, #7
 80045a4:	9901      	ldr	r1, [sp, #4]
 80045a6:	0020      	movs	r0, r4
 80045a8:	f002 fdff 	bl	80071aa <q_writestring>
        return 1;
 80045ac:	2001      	movs	r0, #1
 80045ae:	e7cd      	b.n	800454c <otapi_new_telegram+0x14>
 80045b0:	20002648 	.word	0x20002648
 80045b4:	20002d68 	.word	0x20002d68

080045b8 <otapi_open_request>:



ot_u16 otapi_open_request(addr_type addr, routing_tmpl* routing) {
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	0004      	movs	r4, r0
 80045bc:	000d      	movs	r5, r1
/// Set the header if the session is valid.  Also conditionally write the header
/// depending on the address type (a parameter).  
    if (session_notempty()) {
 80045be:	f001 fbfd 	bl	8005dbc <session_notempty>
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d101      	bne.n	80045ca <otapi_open_request+0x12>

        // Load the header
        m2np_header(s_active, (ot_u8)addr, M2FI_FRDIALOG);
        return 1;
    }
    return 0;
 80045c6:	2000      	movs	r0, #0
}
 80045c8:	bd70      	pop	{r4, r5, r6, pc}
        s_active = session_top();
 80045ca:	f001 fbc3 	bl	8005d54 <session_top>
 80045ce:	0006      	movs	r6, r0
        dll_set_defaults(s_active);
 80045d0:	f000 fdaa 	bl	8005128 <dll_set_defaults>
        if (addr & M2FI_UCAST) {
 80045d4:	07a3      	lsls	r3, r4, #30
 80045d6:	d406      	bmi.n	80045e6 <otapi_open_request+0x2e>
        m2np_header(s_active, (ot_u8)addr, M2FI_FRDIALOG);
 80045d8:	2200      	movs	r2, #0
 80045da:	0021      	movs	r1, r4
 80045dc:	0030      	movs	r0, r6
 80045de:	f000 ffd7 	bl	8005590 <m2np_header>
        return 1;
 80045e2:	2001      	movs	r0, #1
 80045e4:	e7f0      	b.n	80045c8 <otapi_open_request+0x10>
            ot_memcpy((ot_u8*)&m2np.rt, (ot_u8*)routing, sizeof(routing_tmpl));
 80045e6:	221c      	movs	r2, #28
 80045e8:	0029      	movs	r1, r5
 80045ea:	4802      	ldr	r0, [pc, #8]	; (80045f4 <otapi_open_request+0x3c>)
 80045ec:	f004 f9a8 	bl	8008940 <ot_memcpy>
 80045f0:	e7f2      	b.n	80045d8 <otapi_open_request+0x20>
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	20002698 	.word	0x20002698

080045f8 <otapi_close_request>:


ot_u16 otapi_close_request() {
 80045f8:	b510      	push	{r4, lr}
/// Set the footer if the session is valid
    if (session_notempty()) {
 80045fa:	f001 fbdf 	bl	8005dbc <session_notempty>
 80045fe:	2800      	cmp	r0, #0
 8004600:	d101      	bne.n	8004606 <otapi_close_request+0xe>
        m2np_footer( /* session_top() */ );
        return 1;
    }
    return 0;
 8004602:	2000      	movs	r0, #0
}
 8004604:	bd10      	pop	{r4, pc}
        m2np_footer( /* session_top() */ );
 8004606:	f001 f88d 	bl	8005724 <m2np_footer>
        return 1;
 800460a:	2001      	movs	r0, #1
 800460c:	e7fa      	b.n	8004604 <otapi_close_request+0xc>
	...

08004610 <otapi_start_dialog>:
//    if (radio.state != RADIO_Idle) {
//    	rm2_kill();
//    }
//#   endif

    if (timeout != 0) {
 8004610:	2800      	cmp	r0, #0
 8004612:	d001      	beq.n	8004618 <otapi_start_dialog+0x8>
        dll.comm.tc = TI2CLK(timeout);
 8004614:	4b01      	ldr	r3, [pc, #4]	; (800461c <otapi_start_dialog+0xc>)
 8004616:	6218      	str	r0, [r3, #32]
//    sys.task_RFA.event = 0;
//    sys_preempt(&sys.task_RFA, 0);
//#   endif
    
    return 1;
}
 8004618:	2001      	movs	r0, #1
 800461a:	4770      	bx	lr
 800461c:	20002648 	.word	0x20002648

08004620 <otapi_put_command_tmpl>:




#ifndef EXTF_otapi_put_command_tmpl
ot_u16 otapi_put_command_tmpl(ot_u8* status, command_tmpl* command) {    
 8004620:	b570      	push	{r4, r5, r6, lr}
 8004622:	0004      	movs	r4, r0
    /// Check Opcodes to make sure this one is supported
    /// @todo base this on app_config.h settings.  Currently this is rudimentary
    ///       and hard-coded.  It just filters out Datastream and non-existing codes
    if (command->opcode > 15) {
 8004624:	784b      	ldrb	r3, [r1, #1]
 8004626:	2b0f      	cmp	r3, #15
 8004628:	d823      	bhi.n	8004672 <otapi_put_command_tmpl+0x52>
        // command extension, not present at the moment
        *status = 0;
        return 0;
    }
    
    dll.comm.csmaca_params |= command->type & M2_CSMACA_A2P;
 800462a:	2200      	movs	r2, #0
 800462c:	568a      	ldrsb	r2, [r1, r2]
 800462e:	2340      	movs	r3, #64	; 0x40
 8004630:	4013      	ands	r3, r2
 8004632:	4818      	ldr	r0, [pc, #96]	; (8004694 <otapi_put_command_tmpl+0x74>)
 8004634:	222e      	movs	r2, #46	; 0x2e
 8004636:	5c85      	ldrb	r5, [r0, r2]
 8004638:	432b      	orrs	r3, r5
 800463a:	5483      	strb	r3, [r0, r2]
    m2qp.cmd.code           = command->type | command->opcode;
 800463c:	780b      	ldrb	r3, [r1, #0]
 800463e:	784a      	ldrb	r2, [r1, #1]
 8004640:	4313      	orrs	r3, r2
    m2qp.cmd.code          |= (command->extension != 0) << 7;
 8004642:	b25b      	sxtb	r3, r3
 8004644:	788a      	ldrb	r2, [r1, #2]
 8004646:	2a00      	cmp	r2, #0
 8004648:	d017      	beq.n	800467a <otapi_put_command_tmpl+0x5a>
 800464a:	2180      	movs	r1, #128	; 0x80
 800464c:	4249      	negs	r1, r1
 800464e:	4319      	orrs	r1, r3
 8004650:	b2c9      	uxtb	r1, r1
 8004652:	4d11      	ldr	r5, [pc, #68]	; (8004698 <otapi_put_command_tmpl+0x78>)
 8004654:	7029      	strb	r1, [r5, #0]
    m2qp.cmd.ext            = command->extension;
 8004656:	706a      	strb	r2, [r5, #1]
    q_writebyte(&txq, m2qp.cmd.code);
 8004658:	4810      	ldr	r0, [pc, #64]	; (800469c <otapi_put_command_tmpl+0x7c>)
 800465a:	f002 fd47 	bl	80070ec <q_writebyte>
    
    if (m2qp.cmd.ext != 0) {
 800465e:	7869      	ldrb	r1, [r5, #1]
 8004660:	2900      	cmp	r1, #0
 8004662:	d10c      	bne.n	800467e <otapi_put_command_tmpl+0x5e>
        if (m2qp.cmd.ext & 2) {
            dll.comm.rx_timeout = 0;
        }
    }
    
    *status = 1;
 8004664:	2301      	movs	r3, #1
 8004666:	7023      	strb	r3, [r4, #0]
    return q_length(&txq);
 8004668:	480c      	ldr	r0, [pc, #48]	; (800469c <otapi_put_command_tmpl+0x7c>)
 800466a:	f002 fcf2 	bl	8007052 <q_length>
 800466e:	b280      	uxth	r0, r0
}
 8004670:	bd70      	pop	{r4, r5, r6, pc}
        *status = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	7003      	strb	r3, [r0, #0]
        return 0;
 8004676:	2000      	movs	r0, #0
 8004678:	e7fa      	b.n	8004670 <otapi_put_command_tmpl+0x50>
    m2qp.cmd.code          |= (command->extension != 0) << 7;
 800467a:	2100      	movs	r1, #0
 800467c:	e7e7      	b.n	800464e <otapi_put_command_tmpl+0x2e>
        q_writebyte(&txq, m2qp.cmd.ext);
 800467e:	4807      	ldr	r0, [pc, #28]	; (800469c <otapi_put_command_tmpl+0x7c>)
 8004680:	f002 fd34 	bl	80070ec <q_writebyte>
        if (m2qp.cmd.ext & 2) {
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <otapi_put_command_tmpl+0x78>)
 8004686:	785b      	ldrb	r3, [r3, #1]
 8004688:	079b      	lsls	r3, r3, #30
 800468a:	d5eb      	bpl.n	8004664 <otapi_put_command_tmpl+0x44>
            dll.comm.rx_timeout = 0;
 800468c:	4b01      	ldr	r3, [pc, #4]	; (8004694 <otapi_put_command_tmpl+0x74>)
 800468e:	2200      	movs	r2, #0
 8004690:	629a      	str	r2, [r3, #40]	; 0x28
 8004692:	e7e7      	b.n	8004664 <otapi_put_command_tmpl+0x44>
 8004694:	20002648 	.word	0x20002648
 8004698:	20002700 	.word	0x20002700
 800469c:	20002d68 	.word	0x20002d68

080046a0 <otapi_put_dialog_tmpl>:
#endif


#ifndef EXTF_otapi_put_dialog_tmpl
ot_u16 otapi_put_dialog_tmpl(ot_u8* status, dialog_tmpl* dialog) {
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	0005      	movs	r5, r0
 80046a4:	1e0c      	subs	r4, r1, #0
    if (dialog == NULL) {
 80046a6:	d01f      	beq.n	80046e8 <otapi_put_dialog_tmpl+0x48>
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
        q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
    }
    else {
        // Place dialog with timeout
        dll.comm.rx_timeout = otutils_calc_timeout(dialog->timeout);
 80046a8:	7808      	ldrb	r0, [r1, #0]
 80046aa:	f002 fdc4 	bl	8007236 <otutils_calc_timeout>
 80046ae:	4b19      	ldr	r3, [pc, #100]	; (8004714 <otapi_put_dialog_tmpl+0x74>)
 80046b0:	6298      	str	r0, [r3, #40]	; 0x28
        dialog->timeout    |= (dialog->channels != 0) << 7;     // 0 or 0x80
 80046b2:	2100      	movs	r1, #0
 80046b4:	5661      	ldrsb	r1, [r4, r1]
 80046b6:	7863      	ldrb	r3, [r4, #1]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d029      	beq.n	8004710 <otapi_put_dialog_tmpl+0x70>
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	425b      	negs	r3, r3
 80046c0:	4319      	orrs	r1, r3
 80046c2:	b2c9      	uxtb	r1, r1
 80046c4:	7021      	strb	r1, [r4, #0]
        q_writebyte(&txq, dialog->timeout);
 80046c6:	4814      	ldr	r0, [pc, #80]	; (8004718 <otapi_put_dialog_tmpl+0x78>)
 80046c8:	f002 fd10 	bl	80070ec <q_writebyte>
    
        // Write response list
        if (dialog->channels != 0) {
 80046cc:	7863      	ldrb	r3, [r4, #1]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d015      	beq.n	80046fe <otapi_put_dialog_tmpl+0x5e>
            dll.comm.rx_channels = dialog->channels;
 80046d2:	4a10      	ldr	r2, [pc, #64]	; (8004714 <otapi_put_dialog_tmpl+0x74>)
 80046d4:	2131      	movs	r1, #49	; 0x31
 80046d6:	5453      	strb	r3, [r2, r1]
            dll.comm.rx_chanlist = dialog->chanlist;
 80046d8:	6863      	ldr	r3, [r4, #4]
 80046da:	6393      	str	r3, [r2, #56]	; 0x38
            q_writestring(&txq, dialog->chanlist, dialog->channels);
 80046dc:	7862      	ldrb	r2, [r4, #1]
 80046de:	6861      	ldr	r1, [r4, #4]
 80046e0:	480d      	ldr	r0, [pc, #52]	; (8004718 <otapi_put_dialog_tmpl+0x78>)
 80046e2:	f002 fd62 	bl	80071aa <q_writestring>
 80046e6:	e00a      	b.n	80046fe <otapi_put_dialog_tmpl+0x5e>
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <otapi_put_dialog_tmpl+0x7c>)
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	079b      	lsls	r3, r3, #30
 80046ee:	d40d      	bmi.n	800470c <otapi_put_dialog_tmpl+0x6c>
 80046f0:	210f      	movs	r1, #15
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <otapi_put_dialog_tmpl+0x74>)
 80046f4:	6299      	str	r1, [r3, #40]	; 0x28
        q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
 80046f6:	b2c9      	uxtb	r1, r1
 80046f8:	4807      	ldr	r0, [pc, #28]	; (8004718 <otapi_put_dialog_tmpl+0x78>)
 80046fa:	f002 fcf7 	bl	80070ec <q_writebyte>
        }
    }

    *status = 1;
 80046fe:	2301      	movs	r3, #1
 8004700:	702b      	strb	r3, [r5, #0]
    return q_length(&txq);
 8004702:	4805      	ldr	r0, [pc, #20]	; (8004718 <otapi_put_dialog_tmpl+0x78>)
 8004704:	f002 fca5 	bl	8007052 <q_length>
 8004708:	b280      	uxth	r0, r0
}
 800470a:	bd70      	pop	{r4, r5, r6, pc}
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
 800470c:	2100      	movs	r1, #0
 800470e:	e7f0      	b.n	80046f2 <otapi_put_dialog_tmpl+0x52>
        dialog->timeout    |= (dialog->channels != 0) << 7;     // 0 or 0x80
 8004710:	2300      	movs	r3, #0
 8004712:	e7d5      	b.n	80046c0 <otapi_put_dialog_tmpl+0x20>
 8004714:	20002648 	.word	0x20002648
 8004718:	20002d68 	.word	0x20002d68
 800471c:	20002700 	.word	0x20002700

08004720 <otapi_put_query_tmpl>:
#endif


#ifndef EXTF_otapi_put_query_tmpl
ot_u16 otapi_put_query_tmpl(ot_u8* status, query_tmpl* query) {
 8004720:	b570      	push	{r4, r5, r6, lr}
 8004722:	0005      	movs	r5, r0
 8004724:	000c      	movs	r4, r1
    /// Test for Anycast and Multicast addressing (query needs one of these)    

    if ((m2qp.cmd.code & M2TT_MASK) > M2TT_REQ_UB) {
 8004726:	4b15      	ldr	r3, [pc, #84]	; (800477c <otapi_put_query_tmpl+0x5c>)
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	2370      	movs	r3, #112	; 0x70
 800472c:	4013      	ands	r3, r2
 800472e:	2b20      	cmp	r3, #32
 8004730:	d803      	bhi.n	800473a <otapi_put_query_tmpl+0x1a>
        q_writestring(&txq, query->value, query->length);
    
        *status = 1;
        return q_length(&txq);
    }
    *status = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	7003      	strb	r3, [r0, #0]
    return 0;
 8004736:	2000      	movs	r0, #0
}
 8004738:	bd70      	pop	{r4, r5, r6, pc}
        q_writebyte(&txq, query->length);
 800473a:	7849      	ldrb	r1, [r1, #1]
 800473c:	4e10      	ldr	r6, [pc, #64]	; (8004780 <otapi_put_query_tmpl+0x60>)
 800473e:	0030      	movs	r0, r6
 8004740:	f002 fcd4 	bl	80070ec <q_writebyte>
        q_writebyte(&txq, query->code);
 8004744:	7821      	ldrb	r1, [r4, #0]
 8004746:	0030      	movs	r0, r6
 8004748:	f002 fcd0 	bl	80070ec <q_writebyte>
        if (query->code & 0x80) {
 800474c:	2300      	movs	r3, #0
 800474e:	56e3      	ldrsb	r3, [r4, r3]
 8004750:	2b00      	cmp	r3, #0
 8004752:	db0c      	blt.n	800476e <otapi_put_query_tmpl+0x4e>
        q_writestring(&txq, query->value, query->length);
 8004754:	7862      	ldrb	r2, [r4, #1]
 8004756:	68a1      	ldr	r1, [r4, #8]
 8004758:	4c09      	ldr	r4, [pc, #36]	; (8004780 <otapi_put_query_tmpl+0x60>)
 800475a:	0020      	movs	r0, r4
 800475c:	f002 fd25 	bl	80071aa <q_writestring>
        *status = 1;
 8004760:	2301      	movs	r3, #1
 8004762:	702b      	strb	r3, [r5, #0]
        return q_length(&txq);
 8004764:	0020      	movs	r0, r4
 8004766:	f002 fc74 	bl	8007052 <q_length>
 800476a:	b280      	uxth	r0, r0
 800476c:	e7e4      	b.n	8004738 <otapi_put_query_tmpl+0x18>
            q_writestring(&txq, query->mask, query->length);
 800476e:	7862      	ldrb	r2, [r4, #1]
 8004770:	6861      	ldr	r1, [r4, #4]
 8004772:	4803      	ldr	r0, [pc, #12]	; (8004780 <otapi_put_query_tmpl+0x60>)
 8004774:	f002 fd19 	bl	80071aa <q_writestring>
 8004778:	e7ec      	b.n	8004754 <otapi_put_query_tmpl+0x34>
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	20002700 	.word	0x20002700
 8004780:	20002d68 	.word	0x20002d68

08004784 <sub_put_isf_offset>:
}
#endif


#ifndef EXTF_otapi_put_isf_offset
void sub_put_isf_offset(ot_u8 is_series, ot_u16 offset) {
 8004784:	b510      	push	{r4, lr}
    if (is_series) {
 8004786:	2800      	cmp	r0, #0
 8004788:	d104      	bne.n	8004794 <sub_put_isf_offset+0x10>
        q_writeshort(&txq, offset);
    }
    else {
        q_writebyte(&txq, (ot_u8)offset);
 800478a:	b2c9      	uxtb	r1, r1
 800478c:	4803      	ldr	r0, [pc, #12]	; (800479c <sub_put_isf_offset+0x18>)
 800478e:	f002 fcad 	bl	80070ec <q_writebyte>
    }
}
 8004792:	bd10      	pop	{r4, pc}
        q_writeshort(&txq, offset);
 8004794:	4801      	ldr	r0, [pc, #4]	; (800479c <sub_put_isf_offset+0x18>)
 8004796:	f002 fcae 	bl	80070f6 <q_writeshort>
 800479a:	e7fa      	b.n	8004792 <sub_put_isf_offset+0xe>
 800479c:	20002d68 	.word	0x20002d68

080047a0 <otapi_put_isf_comp>:
#endif


#ifndef EXTF_otapi_put_isf_comp
ot_u16 otapi_put_isf_comp(ot_u8* status, isfcomp_tmpl* isfcomp) {
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	0006      	movs	r6, r0
 80047a4:	000c      	movs	r4, r1
    q_writebyte(&txq, isfcomp->isf_id);
 80047a6:	7849      	ldrb	r1, [r1, #1]
 80047a8:	4d07      	ldr	r5, [pc, #28]	; (80047c8 <otapi_put_isf_comp+0x28>)
 80047aa:	0028      	movs	r0, r5
 80047ac:	f002 fc9e 	bl	80070ec <q_writebyte>
    sub_put_isf_offset(isfcomp->is_series, isfcomp->offset);
 80047b0:	8861      	ldrh	r1, [r4, #2]
 80047b2:	7820      	ldrb	r0, [r4, #0]
 80047b4:	f7ff ffe6 	bl	8004784 <sub_put_isf_offset>
    
    *status = 1;
 80047b8:	2301      	movs	r3, #1
 80047ba:	7033      	strb	r3, [r6, #0]
    return q_length(&txq);
 80047bc:	0028      	movs	r0, r5
 80047be:	f002 fc48 	bl	8007052 <q_length>
 80047c2:	b280      	uxth	r0, r0
}
 80047c4:	bd70      	pop	{r4, r5, r6, pc}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	20002d68 	.word	0x20002d68

080047cc <otapi_put_isf_call>:
#endif


#ifndef EXTF_otapi_put_isf_call
ot_u16 otapi_put_isf_call(ot_u8* status, isfcall_tmpl* isfcall) {
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	0006      	movs	r6, r0
 80047d0:	000c      	movs	r4, r1
    q_writebyte(&txq, isfcall->max_return);
 80047d2:	7909      	ldrb	r1, [r1, #4]
 80047d4:	4d09      	ldr	r5, [pc, #36]	; (80047fc <otapi_put_isf_call+0x30>)
 80047d6:	0028      	movs	r0, r5
 80047d8:	f002 fc88 	bl	80070ec <q_writebyte>
    q_writebyte(&txq, isfcall->isf_id);
 80047dc:	7861      	ldrb	r1, [r4, #1]
 80047de:	0028      	movs	r0, r5
 80047e0:	f002 fc84 	bl	80070ec <q_writebyte>
    sub_put_isf_offset(isfcall->is_series, isfcall->offset);
 80047e4:	8861      	ldrh	r1, [r4, #2]
 80047e6:	7820      	ldrb	r0, [r4, #0]
 80047e8:	f7ff ffcc 	bl	8004784 <sub_put_isf_offset>
    
    *status = 1;
 80047ec:	2301      	movs	r3, #1
 80047ee:	7033      	strb	r3, [r6, #0]
    return q_length(&txq);
 80047f0:	0028      	movs	r0, r5
 80047f2:	f002 fc2e 	bl	8007052 <q_length>
 80047f6:	b280      	uxth	r0, r0
}
 80047f8:	bd70      	pop	{r4, r5, r6, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	20002d68 	.word	0x20002d68

08004800 <otapi_put_udp_tmpl>:
}
#endif


#ifndef EXTF_otapi_put_udp_tmpl
ot_u16 otapi_put_udp_tmpl(ot_u8* status, udp_tmpl* udp) {
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	0007      	movs	r7, r0
 8004804:	000e      	movs	r6, r1
    ot_u16 space;
    vlFILE* fp = NULL;
    
    space = q_writespace(&txq);
 8004806:	4825      	ldr	r0, [pc, #148]	; (800489c <otapi_put_udp_tmpl+0x9c>)
 8004808:	f002 fc2d 	bl	8007066 <q_writespace>
 800480c:	b284      	uxth	r4, r0
    ///      detect boundaries across the packet rather than simply across the
    ///      frame.  It will probably require a network-layer function to 
    ///      determine the overhead when supplied payload length.
#   else
        
        if (udp->data == NULL) {
 800480e:	6873      	ldr	r3, [r6, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00f      	beq.n	8004834 <otapi_put_udp_tmpl+0x34>
    vlFILE* fp = NULL;
 8004814:	2500      	movs	r5, #0
        	///@todo add a user to UDP type for access control
        	fp              = ISF_open(udp->src_port, VL_ACCESS_R, AUTH_GUEST );
        	udp->data_length= (fp != NULL) ? fp->length : 0;
        }
        
        space -= 4;
 8004816:	3c04      	subs	r4, #4
 8004818:	b2a4      	uxth	r4, r4
        if (space < udp->data_length) {
 800481a:	8833      	ldrh	r3, [r6, #0]
 800481c:	42a3      	cmp	r3, r4
 800481e:	d915      	bls.n	800484c <otapi_put_udp_tmpl+0x4c>
            *status = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	703b      	strb	r3, [r7, #0]
            else {
            	q_writestring(&txq, udp->data, udp->data_length);
            }
        }
        
        vl_close(fp);
 8004824:	0028      	movs	r0, r5
 8004826:	f002 ffb9 	bl	800779c <vl_close>
#   endif

    return q_length(&txq);
 800482a:	481c      	ldr	r0, [pc, #112]	; (800489c <otapi_put_udp_tmpl+0x9c>)
 800482c:	f002 fc11 	bl	8007052 <q_length>
 8004830:	b280      	uxth	r0, r0
}
 8004832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	fp              = ISF_open(udp->src_port, VL_ACCESS_R, AUTH_GUEST );
 8004834:	78f0      	ldrb	r0, [r6, #3]
 8004836:	4a1a      	ldr	r2, [pc, #104]	; (80048a0 <otapi_put_udp_tmpl+0xa0>)
 8004838:	2124      	movs	r1, #36	; 0x24
 800483a:	f002 fff4 	bl	8007826 <ISF_open>
 800483e:	1e05      	subs	r5, r0, #0
        	udp->data_length= (fp != NULL) ? fp->length : 0;
 8004840:	d002      	beq.n	8004848 <otapi_put_udp_tmpl+0x48>
 8004842:	8903      	ldrh	r3, [r0, #8]
 8004844:	8033      	strh	r3, [r6, #0]
 8004846:	e7e6      	b.n	8004816 <otapi_put_udp_tmpl+0x16>
 8004848:	2300      	movs	r3, #0
 800484a:	e7fb      	b.n	8004844 <otapi_put_udp_tmpl+0x44>
            *status = 1;
 800484c:	2301      	movs	r3, #1
 800484e:	703b      	strb	r3, [r7, #0]
            q_writebyte(&txq, (ALP_FLAG_MB | ALP_FLAG_ME));
 8004850:	4c12      	ldr	r4, [pc, #72]	; (800489c <otapi_put_udp_tmpl+0x9c>)
 8004852:	21c0      	movs	r1, #192	; 0xc0
 8004854:	0020      	movs	r0, r4
 8004856:	f002 fc49 	bl	80070ec <q_writebyte>
            q_writebyte(&txq, (ot_u8)udp->data_length);
 800485a:	7831      	ldrb	r1, [r6, #0]
 800485c:	0020      	movs	r0, r4
 800485e:	f002 fc45 	bl	80070ec <q_writebyte>
            q_writebyte(&txq, udp->dst_port);
 8004862:	78b1      	ldrb	r1, [r6, #2]
 8004864:	0020      	movs	r0, r4
 8004866:	f002 fc41 	bl	80070ec <q_writebyte>
            q_writebyte(&txq, udp->src_port);
 800486a:	78f1      	ldrb	r1, [r6, #3]
 800486c:	0020      	movs	r0, r4
 800486e:	f002 fc3d 	bl	80070ec <q_writebyte>
            if (udp->data == NULL) {
 8004872:	6871      	ldr	r1, [r6, #4]
 8004874:	2900      	cmp	r1, #0
 8004876:	d005      	beq.n	8004884 <otapi_put_udp_tmpl+0x84>
            	q_writestring(&txq, udp->data, udp->data_length);
 8004878:	2300      	movs	r3, #0
 800487a:	5ef2      	ldrsh	r2, [r6, r3]
 800487c:	4807      	ldr	r0, [pc, #28]	; (800489c <otapi_put_udp_tmpl+0x9c>)
 800487e:	f002 fc94 	bl	80071aa <q_writestring>
 8004882:	e7cf      	b.n	8004824 <otapi_put_udp_tmpl+0x24>
                txq.putcursor += vl_load(fp, udp->data_length, txq.putcursor);
 8004884:	4c05      	ldr	r4, [pc, #20]	; (800489c <otapi_put_udp_tmpl+0x9c>)
 8004886:	8831      	ldrh	r1, [r6, #0]
 8004888:	68a2      	ldr	r2, [r4, #8]
 800488a:	0028      	movs	r0, r5
 800488c:	f002 ff25 	bl	80076da <vl_load>
 8004890:	68a3      	ldr	r3, [r4, #8]
 8004892:	469c      	mov	ip, r3
 8004894:	4460      	add	r0, ip
 8004896:	60a0      	str	r0, [r4, #8]
 8004898:	e7c4      	b.n	8004824 <otapi_put_udp_tmpl+0x24>
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	20002d68 	.word	0x20002d68
 80048a0:	20002738 	.word	0x20002738

080048a4 <dll_response_applet>:

/** Internal DLL applets <BR>
  * ========================================================================<BR>
  */

OT_WEAK void dll_response_applet(m2session* active) {
 80048a4:	b510      	push	{r4, lr}
/// If this is a response transmission of a session with "Listen" active, it
/// means the contention period (Tc) is followed immediately with a subsequent
/// request.  We must not overlap that request with the tail-end of our own
/// response.  Therefore, we subtract from Tc the duration of this response.
    if (active->flags & M2_FLAG_LISTEN) {
 80048a6:	230b      	movs	r3, #11
 80048a8:	56c3      	ldrsb	r3, [r0, r3]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	db00      	blt.n	80048b0 <dll_response_applet+0xc>
            sys.task_HSS.cursor     = 0;
            sys.task_HSS.nextevent  = TI2CLK(dll.comm.rx_timeout);
            dll.comm.rx_timeout     = rm2_default_tgd(active->channel);
        }
    }
}
 80048ae:	bd10      	pop	{r4, pc}
        ot_u8 substate = active->netstate & M2_NETSTATE_TMASK;
 80048b0:	79c2      	ldrb	r2, [r0, #7]
 80048b2:	2370      	movs	r3, #112	; 0x70
 80048b4:	4013      	ands	r3, r2
        if (substate == M2_NETSTATE_RESPTX) {
 80048b6:	2b10      	cmp	r3, #16
 80048b8:	d00c      	beq.n	80048d4 <dll_response_applet+0x30>
        else if (substate == M2_NETSTATE_REQRX) {
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d1f7      	bne.n	80048ae <dll_response_applet+0xa>
            sys.task_HSS.cursor     = 0;
 80048be:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <dll_response_applet+0x40>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	755a      	strb	r2, [r3, #21]
            sys.task_HSS.nextevent  = TI2CLK(dll.comm.rx_timeout);
 80048c4:	4c08      	ldr	r4, [pc, #32]	; (80048e8 <dll_response_applet+0x44>)
 80048c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80048c8:	619a      	str	r2, [r3, #24]
            dll.comm.rx_timeout     = rm2_default_tgd(active->channel);
 80048ca:	7980      	ldrb	r0, [r0, #6]
 80048cc:	f7fd f95c 	bl	8001b88 <rm2_default_tgd>
 80048d0:	62a0      	str	r0, [r4, #40]	; 0x28
}
 80048d2:	e7ec      	b.n	80048ae <dll_response_applet+0xa>
            dll.comm.tc -= rm2_pkt_duration(&txq);  //TI2CLK(rm2_pkt_duration(&txq));
 80048d4:	4805      	ldr	r0, [pc, #20]	; (80048ec <dll_response_applet+0x48>)
 80048d6:	f7fd f981 	bl	8001bdc <rm2_pkt_duration>
 80048da:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <dll_response_applet+0x44>)
 80048dc:	6a1a      	ldr	r2, [r3, #32]
 80048de:	1a10      	subs	r0, r2, r0
 80048e0:	6218      	str	r0, [r3, #32]
 80048e2:	e7e4      	b.n	80048ae <dll_response_applet+0xa>
 80048e4:	20002da8 	.word	0x20002da8
 80048e8:	20002648 	.word	0x20002648
 80048ec:	20002d68 	.word	0x20002d68

080048f0 <sub_csma_scramble>:





void sub_csma_scramble(void) {
 80048f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f2:	b083      	sub	sp, #12
/// Sort of optional: Go through the channel list and scramble the channel
/// entries randomly in order to improve band utilization, as multiple devices
/// will scramble the list differently.
    ot_u8 txchans = dll.comm.tx_channels - 1;
 80048f4:	4a1a      	ldr	r2, [pc, #104]	; (8004960 <sub_csma_scramble+0x70>)
 80048f6:	2330      	movs	r3, #48	; 0x30
 80048f8:	5cd4      	ldrb	r4, [r2, r3]
 80048fa:	3c01      	subs	r4, #1
 80048fc:	b2e4      	uxtb	r4, r4

    if (txchans) {
 80048fe:	2c00      	cmp	r4, #0
 8004900:	d101      	bne.n	8004906 <sub_csma_scramble+0x16>

            rot.ushort     &= ~0x0101;   //Shift each byte right 1 bit
            rot.ushort    >>= 1;
        }
    }
}
 8004902:	b003      	add	sp, #12
 8004904:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rot.ushort = rand_prn16();
 8004906:	f004 f857 	bl	80089b8 <rand_prn16>
 800490a:	1c06      	adds	r6, r0, #0
        for (i=0; i<txchans; i++) {
 800490c:	2200      	movs	r2, #0
 800490e:	e023      	b.n	8004958 <sub_csma_scramble+0x68>
            j = i + ((rot.ubyte[0] & 1) != 0);
 8004910:	2301      	movs	r3, #1
 8004912:	0019      	movs	r1, r3
 8004914:	4031      	ands	r1, r6
 8004916:	1889      	adds	r1, r1, r2
 8004918:	b2c9      	uxtb	r1, r1
            k = txchans * ((rot.ubyte[1] & 1) != 0);
 800491a:	0435      	lsls	r5, r6, #16
 800491c:	0e2d      	lsrs	r5, r5, #24
 800491e:	402b      	ands	r3, r5
 8004920:	4363      	muls	r3, r4
 8004922:	b2db      	uxtb	r3, r3
            scratch                 = dll.comm.tx_chanlist[i];
 8004924:	4d0e      	ldr	r5, [pc, #56]	; (8004960 <sub_csma_scramble+0x70>)
 8004926:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8004928:	9701      	str	r7, [sp, #4]
 800492a:	18b8      	adds	r0, r7, r2
 800492c:	7807      	ldrb	r7, [r0, #0]
 800492e:	46bc      	mov	ip, r7
            dll.comm.tx_chanlist[i] = dll.comm.tx_chanlist[k];
 8004930:	9f01      	ldr	r7, [sp, #4]
 8004932:	5cff      	ldrb	r7, [r7, r3]
 8004934:	7007      	strb	r7, [r0, #0]
            dll.comm.tx_chanlist[k] = scratch;
 8004936:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004938:	4667      	mov	r7, ip
 800493a:	54c7      	strb	r7, [r0, r3]
            scratch                 = dll.comm.tx_chanlist[i];
 800493c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800493e:	1883      	adds	r3, r0, r2
 8004940:	781f      	ldrb	r7, [r3, #0]
            dll.comm.tx_chanlist[i] = dll.comm.tx_chanlist[j];
 8004942:	5c40      	ldrb	r0, [r0, r1]
 8004944:	7018      	strb	r0, [r3, #0]
            dll.comm.tx_chanlist[j] = scratch;
 8004946:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004948:	545f      	strb	r7, [r3, r1]
            rot.ushort     &= ~0x0101;   //Shift each byte right 1 bit
 800494a:	4806      	ldr	r0, [pc, #24]	; (8004964 <sub_csma_scramble+0x74>)
 800494c:	4030      	ands	r0, r6
 800494e:	b280      	uxth	r0, r0
            rot.ushort    >>= 1;
 8004950:	0840      	lsrs	r0, r0, #1
 8004952:	1c06      	adds	r6, r0, #0
        for (i=0; i<txchans; i++) {
 8004954:	3201      	adds	r2, #1
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	42a2      	cmp	r2, r4
 800495a:	d3d9      	bcc.n	8004910 <sub_csma_scramble+0x20>
 800495c:	e7d1      	b.n	8004902 <sub_csma_scramble+0x12>
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	20002648 	.word	0x20002648
 8004964:	fffffefe 	.word	0xfffffefe

08004968 <sub_rigd_newslot>:
    }
}



CLK_UNIT sub_rigd_newslot(void) {
 8004968:	b510      	push	{r4, lr}
/// halve tc from previous value and offset a random within that duration
    dll.comm.tc >>= 1;
 800496a:	4a07      	ldr	r2, [pc, #28]	; (8004988 <sub_rigd_newslot+0x20>)
 800496c:	6a13      	ldr	r3, [r2, #32]
 800496e:	105b      	asrs	r3, r3, #1
 8004970:	6213      	str	r3, [r2, #32]
    if (dll.comm.tc == 0)
 8004972:	d101      	bne.n	8004978 <sub_rigd_newslot+0x10>
        return 0;
 8004974:	2000      	movs	r0, #0
    
    //return (TI2CLK(rand_prn16()) % (CLK_UNIT)dll.comm.tc);
    return (rand_prn16() % (CLK_UNIT)dll.comm.tc);
}
 8004976:	bd10      	pop	{r4, pc}
    return (rand_prn16() % (CLK_UNIT)dll.comm.tc);
 8004978:	f004 f81e 	bl	80089b8 <rand_prn16>
 800497c:	4b02      	ldr	r3, [pc, #8]	; (8004988 <sub_rigd_newslot+0x20>)
 800497e:	8c19      	ldrh	r1, [r3, #32]
 8004980:	f7fb fc48 	bl	8000214 <__aeabi_uidivmod>
 8004984:	b288      	uxth	r0, r1
 8004986:	e7f6      	b.n	8004976 <sub_rigd_newslot+0xe>
 8004988:	20002648 	.word	0x20002648

0800498c <sub_fcloop>:
CLK_UNIT sub_fcloop(void) {
 800498c:	b510      	push	{r4, lr}
    if (dll.comm.csmaca_params & 0x20) {    //NO CA
 800498e:	4a0d      	ldr	r2, [pc, #52]	; (80049c4 <sub_fcloop+0x38>)
 8004990:	232e      	movs	r3, #46	; 0x2e
 8004992:	5cd3      	ldrb	r3, [r2, r3]
 8004994:	069a      	lsls	r2, r3, #26
 8004996:	d40c      	bmi.n	80049b2 <sub_fcloop+0x26>
    if (dll.comm.csmaca_params & 0x18) {    //RAIND, AIND
 8004998:	2218      	movs	r2, #24
 800499a:	421a      	tst	r2, r3
 800499c:	d10c      	bne.n	80049b8 <sub_fcloop+0x2c>
        wait    = (dll.comm.tc - dll.comm.tca);
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <sub_fcloop+0x38>)
 80049a0:	6a18      	ldr	r0, [r3, #32]
 80049a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80049a4:	1b04      	subs	r4, r0, r4
        wait   += sub_rigd_newslot();
 80049a6:	f7ff ffdf 	bl	8004968 <sub_rigd_newslot>
        return (wait < 0) ? 0 : (CLK_UNIT)wait;
 80049aa:	1900      	adds	r0, r0, r4
 80049ac:	d408      	bmi.n	80049c0 <sub_fcloop+0x34>
 80049ae:	b280      	uxth	r0, r0
 80049b0:	e001      	b.n	80049b6 <sub_fcloop+0x2a>
        return phymac[0].tg; //TI2CLK(phymac[0].tg);
 80049b2:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <sub_fcloop+0x3c>)
 80049b4:	7858      	ldrb	r0, [r3, #1]
}
 80049b6:	bd10      	pop	{r4, pc}
        return rm2_pkt_duration(&txq); //TI2CLK(rm2_pkt_duration(&txq));
 80049b8:	4804      	ldr	r0, [pc, #16]	; (80049cc <sub_fcloop+0x40>)
 80049ba:	f7fd f90f 	bl	8001bdc <rm2_pkt_duration>
 80049be:	e7fa      	b.n	80049b6 <sub_fcloop+0x2a>
        return (wait < 0) ? 0 : (CLK_UNIT)wait;
 80049c0:	2000      	movs	r0, #0
 80049c2:	e7f8      	b.n	80049b6 <sub_fcloop+0x2a>
 80049c4:	20002648 	.word	0x20002648
 80049c8:	200026c4 	.word	0x200026c4
 80049cc:	20002d68 	.word	0x20002d68

080049d0 <sub_fcinit>:
CLK_UNIT sub_fcinit(void) {
 80049d0:	b570      	push	{r4, r5, r6, lr}
    sub_csma_scramble();
 80049d2:	f7ff ff8d 	bl	80048f0 <sub_csma_scramble>
    if (dll.comm.csmaca_params & M2_CSMACA_AIND) {
 80049d6:	4a0d      	ldr	r2, [pc, #52]	; (8004a0c <sub_fcinit+0x3c>)
 80049d8:	232e      	movs	r3, #46	; 0x2e
 80049da:	5cd3      	ldrb	r3, [r2, r3]
 80049dc:	06da      	lsls	r2, r3, #27
 80049de:	d412      	bmi.n	8004a06 <sub_fcinit+0x36>
    if (dll.comm.csmaca_params & M2_CSMACA_RAIND) {
 80049e0:	071b      	lsls	r3, r3, #28
 80049e2:	d402      	bmi.n	80049ea <sub_fcinit+0x1a>
    return sub_rigd_newslot();
 80049e4:	f7ff ffc0 	bl	8004968 <sub_rigd_newslot>
 80049e8:	e00e      	b.n	8004a08 <sub_fcinit+0x38>
        random  = rand_prn16();
 80049ea:	f003 ffe5 	bl	80089b8 <rand_prn16>
 80049ee:	0005      	movs	r5, r0
        random %= dll.comm.tc - rm2_pkt_duration(&txq);
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <sub_fcinit+0x3c>)
 80049f2:	6a1c      	ldr	r4, [r3, #32]
 80049f4:	4806      	ldr	r0, [pc, #24]	; (8004a10 <sub_fcinit+0x40>)
 80049f6:	f7fd f8f1 	bl	8001bdc <rm2_pkt_duration>
 80049fa:	1a21      	subs	r1, r4, r0
 80049fc:	0028      	movs	r0, r5
 80049fe:	f7fb fcf3 	bl	80003e8 <__aeabi_idivmod>
 8004a02:	b288      	uxth	r0, r1
        return random;
 8004a04:	e000      	b.n	8004a08 <sub_fcinit+0x38>
        return 0;
 8004a06:	2000      	movs	r0, #0
}
 8004a08:	bd70      	pop	{r4, r5, r6, pc}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	20002648 	.word	0x20002648
 8004a10:	20002d68 	.word	0x20002d68

08004a14 <dll_block_idletasks>:
    sys.task_HSS.event  = 0;
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <dll_block_idletasks+0x10>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	751a      	strb	r2, [r3, #20]
    sys.task_BTS.event  = 0;
 8004a1a:	771a      	strb	r2, [r3, #28]
    sys.task_SSS.event  = 0;
 8004a1c:	2124      	movs	r1, #36	; 0x24
 8004a1e:	545a      	strb	r2, [r3, r1]
}
 8004a20:	4770      	bx	lr
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	20002da8 	.word	0x20002da8

08004a28 <dll_refresh_rts>:
}
 8004a28:	4770      	bx	lr
	...

08004a2c <dll_idle>:
OT_WEAK void dll_idle(void) {
 8004a2c:	b570      	push	{r4, r5, r6, lr}
	radio_gag();
 8004a2e:	f7fc fd4d 	bl	80014cc <radio_gag>
    radio_sleep();
 8004a32:	f7fc fe83 	bl	800173c <radio_sleep>
    sys.task_RFA.event  = 0;
 8004a36:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <dll_idle+0x40>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	711a      	strb	r2, [r3, #4]
    scan_evt_ptr        = (ot_u8*)&scan_events[dll.idle_state<<1];
 8004a3c:	4a0c      	ldr	r2, [pc, #48]	; (8004a70 <dll_idle+0x44>)
 8004a3e:	7814      	ldrb	r4, [r2, #0]
 8004a40:	0061      	lsls	r1, r4, #1
 8004a42:	480c      	ldr	r0, [pc, #48]	; (8004a74 <dll_idle+0x48>)
 8004a44:	1845      	adds	r5, r0, r1
    sys.task_HSS.event  = *scan_evt_ptr;
 8004a46:	5c41      	ldrb	r1, [r0, r1]
 8004a48:	7519      	strb	r1, [r3, #20]
    sys.task_SSS.event  = *(++scan_evt_ptr);
 8004a4a:	7868      	ldrb	r0, [r5, #1]
 8004a4c:	2124      	movs	r1, #36	; 0x24
 8004a4e:	5458      	strb	r0, [r3, r1]
    sys.task_BTS.event  = ((dll.netconf.b_attempts != 0) \
 8004a50:	7f53      	ldrb	r3, [r2, #29]
    		            && (dll.idle_state != M2_DLLIDLE_OFF));
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <dll_idle+0x32>
 8004a56:	2c00      	cmp	r4, #0
 8004a58:	d105      	bne.n	8004a66 <dll_idle+0x3a>
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	e000      	b.n	8004a60 <dll_idle+0x34>
 8004a5e:	2200      	movs	r2, #0
    sys.task_BTS.event  = ((dll.netconf.b_attempts != 0) \
 8004a60:	4b02      	ldr	r3, [pc, #8]	; (8004a6c <dll_idle+0x40>)
 8004a62:	771a      	strb	r2, [r3, #28]
}
 8004a64:	bd70      	pop	{r4, r5, r6, pc}
    		            && (dll.idle_state != M2_DLLIDLE_OFF));
 8004a66:	2201      	movs	r2, #1
 8004a68:	e7fa      	b.n	8004a60 <dll_idle+0x34>
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	20002da8 	.word	0x20002da8
 8004a70:	20002648 	.word	0x20002648
 8004a74:	0800b16c 	.word	0x0800b16c

08004a78 <dll_rfevt_brx>:
OT_WEAK void dll_rfevt_brx(ot_int scode, ot_int fcode) {
 8004a78:	b510      	push	{r4, lr}
 8004a7a:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=100);
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <dll_rfevt_brx+0x74>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	801a      	strh	r2, [r3, #0]
 8004a82:	3264      	adds	r2, #100	; 0x64
 8004a84:	805a      	strh	r2, [r3, #2]
    if (fcode != 0) {
 8004a86:	2900      	cmp	r1, #0
 8004a88:	d01a      	beq.n	8004ac0 <dll_rfevt_brx+0x48>
    	__DEBUG_ERRCODE_EVAL(=101);
 8004a8a:	3201      	adds	r2, #1
 8004a8c:	805a      	strh	r2, [r3, #2]
    	if (dll.comm.redundants != 0) {
 8004a8e:	4a18      	ldr	r2, [pc, #96]	; (8004af0 <dll_rfevt_brx+0x78>)
 8004a90:	232f      	movs	r3, #47	; 0x2f
 8004a92:	5cd3      	ldrb	r3, [r2, r3]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10f      	bne.n	8004ab8 <dll_rfevt_brx+0x40>
    session_pop();
 8004a98:	f001 f950 	bl	8005d3c <session_pop>
    dll_idle();
 8004a9c:	f7ff ffc6 	bl	8004a2c <dll_idle>
    DLL_SIG_RFTERMINATE(3, scode);
 8004aa0:	0021      	movs	r1, r4
 8004aa2:	2003      	movs	r0, #3
 8004aa4:	f7fb fec4 	bl	8000830 <dll_sig_rfterminate>
    sys.task_RFA.event = 0;
 8004aa8:	4812      	ldr	r0, [pc, #72]	; (8004af4 <dll_rfevt_brx+0x7c>)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	7103      	strb	r3, [r0, #4]
    sys_preempt(&sys.task_RFA, 0);
 8004aae:	3004      	adds	r0, #4
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	f003 f88b 	bl	8007bcc <sys_preempt>
}
 8004ab6:	bd10      	pop	{r4, pc}
    		rm2_reenter_rx(&dll_rfevt_brx);   //non-blocking
 8004ab8:	480f      	ldr	r0, [pc, #60]	; (8004af8 <dll_rfevt_brx+0x80>)
 8004aba:	f7fc feb9 	bl	8001830 <rm2_reenter_rx>
    		return;
 8004abe:	e7fa      	b.n	8004ab6 <dll_rfevt_brx+0x3e>
    if (scode < 0) {
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	da05      	bge.n	8004ad0 <dll_rfevt_brx+0x58>
        __DEBUG_ERRCODE_EVAL(=102);
 8004ac4:	4b09      	ldr	r3, [pc, #36]	; (8004aec <dll_rfevt_brx+0x74>)
 8004ac6:	2266      	movs	r2, #102	; 0x66
 8004ac8:	805a      	strh	r2, [r3, #2]
        scode = RM2_ERR_GENERIC;
 8004aca:	2406      	movs	r4, #6
 8004acc:	4264      	negs	r4, r4
    	goto dll_rfevt_FAILURE;
 8004ace:	e7e3      	b.n	8004a98 <dll_rfevt_brx+0x20>
    if (rm2_mac_filter()) {
 8004ad0:	f000 ff72 	bl	80059b8 <rm2_mac_filter>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d0df      	beq.n	8004a98 <dll_rfevt_brx+0x20>
        __DEBUG_ERRCODE_EVAL(=103);
 8004ad8:	4b04      	ldr	r3, [pc, #16]	; (8004aec <dll_rfevt_brx+0x74>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	801a      	strh	r2, [r3, #0]
 8004ade:	3267      	adds	r2, #103	; 0x67
 8004ae0:	805a      	strh	r2, [r3, #2]
        if (network_parse_bf()) {
 8004ae2:	f000 ff55 	bl	8005990 <network_parse_bf>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d1da      	bne.n	8004aa0 <dll_rfevt_brx+0x28>
    dll_rfevt_FAILURE:
 8004aea:	e7d5      	b.n	8004a98 <dll_rfevt_brx+0x20>
 8004aec:	20002df0 	.word	0x20002df0
 8004af0:	20002648 	.word	0x20002648
 8004af4:	20002da8 	.word	0x20002da8
 8004af8:	08004a79 	.word	0x08004a79

08004afc <dll_rfevt_frx>:
OT_WEAK void dll_rfevt_frx(ot_int pcode, ot_int fcode) {
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	0005      	movs	r5, r0
 8004b00:	000c      	movs	r4, r1
    m2session*  active  = session_top();
 8004b02:	f001 f927 	bl	8005d54 <session_top>
 8004b06:	0006      	movs	r6, r0
    __DEBUG_ERRCODE_EVAL(=110);
 8004b08:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <dll_rfevt_frx+0xf4>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	801a      	strh	r2, [r3, #0]
    if (pcode < 0) {
 8004b0e:	2d00      	cmp	r5, #0
 8004b10:	db1f      	blt.n	8004b52 <dll_rfevt_frx+0x56>
        __DEBUG_ERRCODE_EVAL(=113);
 8004b12:	4b37      	ldr	r3, [pc, #220]	; (8004bf0 <dll_rfevt_frx+0xf4>)
 8004b14:	2271      	movs	r2, #113	; 0x71
 8004b16:	805a      	strh	r2, [r3, #2]
    	if (fcode != 0) {
 8004b18:	2c00      	cmp	r4, #0
 8004b1a:	d03e      	beq.n	8004b9a <dll_rfevt_frx+0x9e>
    		frx_code = -1;
 8004b1c:	2401      	movs	r4, #1
 8004b1e:	4264      	negs	r4, r4
        if (pcode == 0) {
 8004b20:	2d00      	cmp	r5, #0
 8004b22:	d14d      	bne.n	8004bc0 <dll_rfevt_frx+0xc4>
            ot_bool rx_isresp = (active->netstate & M2_NETSTATE_RESP);
 8004b24:	79f2      	ldrb	r2, [r6, #7]
 8004b26:	2310      	movs	r3, #16
 8004b28:	4013      	ands	r3, r2
            if (frx_code == 0) {
 8004b2a:	2c00      	cmp	r4, #0
 8004b2c:	d104      	bne.n	8004b38 <dll_rfevt_frx+0x3c>
                sys.task_RFA.reserve = 20;  ///@todo Could have quick evaluator here
 8004b2e:	4a31      	ldr	r2, [pc, #196]	; (8004bf4 <dll_rfevt_frx+0xf8>)
 8004b30:	2114      	movs	r1, #20
 8004b32:	7191      	strb	r1, [r2, #6]
                sys.task_RFA.event   = 1;   ///Process the packet!!!
 8004b34:	3913      	subs	r1, #19
 8004b36:	7111      	strb	r1, [r2, #4]
            if (rx_isresp) {
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <dll_rfevt_frx+0x4a>
                dll.counter     = dll.netconf.hold_limit;
 8004b3c:	4a2e      	ldr	r2, [pc, #184]	; (8004bf8 <dll_rfevt_frx+0xfc>)
 8004b3e:	8bd1      	ldrh	r1, [r2, #30]
 8004b40:	8051      	strh	r1, [r2, #2]
                dll.idle_state  = M2_DLLIDLE_HOLD;
 8004b42:	2102      	movs	r1, #2
 8004b44:	7011      	strb	r1, [r2, #0]
            re_init = (frx_code || rx_isresp);
 8004b46:	2c00      	cmp	r4, #0
 8004b48:	d12e      	bne.n	8004ba8 <dll_rfevt_frx+0xac>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d033      	beq.n	8004bb6 <dll_rfevt_frx+0xba>
 8004b4e:	2501      	movs	r5, #1
 8004b50:	e02b      	b.n	8004baa <dll_rfevt_frx+0xae>
        __DEBUG_ERRCODE_EVAL(=111);
 8004b52:	326f      	adds	r2, #111	; 0x6f
 8004b54:	805a      	strh	r2, [r3, #2]
        sys.task_RFA.event  = 0;
 8004b56:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <dll_rfevt_frx+0xf8>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	711a      	strb	r2, [r3, #4]
        if (dll.comm.redundants) {
 8004b5c:	4a26      	ldr	r2, [pc, #152]	; (8004bf8 <dll_rfevt_frx+0xfc>)
 8004b5e:	232f      	movs	r3, #47	; 0x2f
 8004b60:	5cd3      	ldrb	r3, [r2, r3]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d004      	beq.n	8004b70 <dll_rfevt_frx+0x74>
            active->netstate   = (M2_NETSTATE_REQTX | M2_NETSTATE_INIT | M2_NETFLAG_FIRSTRX);
 8004b66:	230a      	movs	r3, #10
 8004b68:	71c3      	strb	r3, [r0, #7]
    ot_bool     re_init = False;
 8004b6a:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 8004b6c:	2400      	movs	r4, #0
 8004b6e:	e028      	b.n	8004bc2 <dll_rfevt_frx+0xc6>
        else if (((active->netstate & M2_NETSTATE_TMASK) == M2_NETSTATE_RESPRX) \
 8004b70:	79c2      	ldrb	r2, [r0, #7]
 8004b72:	2370      	movs	r3, #112	; 0x70
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b30      	cmp	r3, #48	; 0x30
 8004b78:	d108      	bne.n	8004b8c <dll_rfevt_frx+0x90>
               && (active->applet != NULL)) {
 8004b7a:	6803      	ldr	r3, [r0, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <dll_rfevt_frx+0x90>
            active->netstate  &= ~M2_NETSTATE_TMASK;   // Default to Request-TX
 8004b80:	2370      	movs	r3, #112	; 0x70
 8004b82:	439a      	bics	r2, r3
 8004b84:	71c2      	strb	r2, [r0, #7]
    ot_bool     re_init = False;
 8004b86:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 8004b88:	2400      	movs	r4, #0
            active->netstate  &= ~M2_NETSTATE_TMASK;   // Default to Request-TX
 8004b8a:	e01a      	b.n	8004bc2 <dll_rfevt_frx+0xc6>
            session_pop();
 8004b8c:	f001 f8d6 	bl	8005d3c <session_pop>
            dll_idle();
 8004b90:	f7ff ff4c 	bl	8004a2c <dll_idle>
    ot_bool     re_init = False;
 8004b94:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 8004b96:	2400      	movs	r4, #0
 8004b98:	e013      	b.n	8004bc2 <dll_rfevt_frx+0xc6>
        else if (rm2_mac_filter() == False) {
 8004b9a:	f000 ff0d 	bl	80059b8 <rm2_mac_filter>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d1be      	bne.n	8004b20 <dll_rfevt_frx+0x24>
            frx_code = -4;
 8004ba2:	2404      	movs	r4, #4
 8004ba4:	4264      	negs	r4, r4
 8004ba6:	e7bb      	b.n	8004b20 <dll_rfevt_frx+0x24>
            re_init = (frx_code || rx_isresp);
 8004ba8:	2501      	movs	r5, #1
            if (re_init) {
 8004baa:	2d00      	cmp	r5, #0
 8004bac:	d005      	beq.n	8004bba <dll_rfevt_frx+0xbe>
                rm2_reenter_rx(&dll_rfevt_frx);
 8004bae:	4813      	ldr	r0, [pc, #76]	; (8004bfc <dll_rfevt_frx+0x100>)
 8004bb0:	f7fc fe3e 	bl	8001830 <rm2_reenter_rx>
 8004bb4:	e005      	b.n	8004bc2 <dll_rfevt_frx+0xc6>
            re_init = (frx_code || rx_isresp);
 8004bb6:	2500      	movs	r5, #0
 8004bb8:	e7f7      	b.n	8004baa <dll_rfevt_frx+0xae>
                radio_sleep();
 8004bba:	f7fc fdbf 	bl	800173c <radio_sleep>
 8004bbe:	e000      	b.n	8004bc2 <dll_rfevt_frx+0xc6>
    ot_bool     re_init = False;
 8004bc0:	2500      	movs	r5, #0
    DLL_SIG_RFTERMINATE(3, frx_code);
 8004bc2:	0021      	movs	r1, r4
 8004bc4:	2003      	movs	r0, #3
 8004bc6:	f7fb fe33 	bl	8000830 <dll_sig_rfterminate>
    if (re_init) {
 8004bca:	2d00      	cmp	r5, #0
 8004bcc:	d102      	bne.n	8004bd4 <dll_rfevt_frx+0xd8>
    if (frx_code == 0) {
 8004bce:	2c00      	cmp	r4, #0
 8004bd0:	d009      	beq.n	8004be6 <dll_rfevt_frx+0xea>
}
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
        __DEBUG_ERRCODE_EVAL(=114);
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <dll_rfevt_frx+0xf4>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	3272      	adds	r2, #114	; 0x72
 8004bdc:	805a      	strh	r2, [r3, #2]
        DLL_SIG_RFINIT(3);
 8004bde:	2003      	movs	r0, #3
 8004be0:	f7fb fe18 	bl	8000814 <dll_sig_rfinit>
 8004be4:	e7f3      	b.n	8004bce <dll_rfevt_frx+0xd2>
        sys_preempt(&sys.task_RFA, 0);
 8004be6:	2100      	movs	r1, #0
 8004be8:	4805      	ldr	r0, [pc, #20]	; (8004c00 <dll_rfevt_frx+0x104>)
 8004bea:	f002 ffef 	bl	8007bcc <sys_preempt>
}
 8004bee:	e7f0      	b.n	8004bd2 <dll_rfevt_frx+0xd6>
 8004bf0:	20002df0 	.word	0x20002df0
 8004bf4:	20002da8 	.word	0x20002da8
 8004bf8:	20002648 	.word	0x20002648
 8004bfc:	08004afd 	.word	0x08004afd
 8004c00:	20002dac 	.word	0x20002dac

08004c04 <dll_rfevt_txcsma>:
OT_WEAK void dll_rfevt_txcsma(ot_int pcode, ot_int tcode) {
 8004c04:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=120);
 8004c06:	4b25      	ldr	r3, [pc, #148]	; (8004c9c <dll_rfevt_txcsma+0x98>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	801a      	strh	r2, [r3, #0]
    if (pcode == 0) {
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d120      	bne.n	8004c52 <dll_rfevt_txcsma+0x4e>
        __DEBUG_ERRCODE_EVAL(=121);
 8004c10:	3279      	adds	r2, #121	; 0x79
 8004c12:	805a      	strh	r2, [r3, #2]
        sys.task_RFA.latency    = 0;
 8004c14:	4b22      	ldr	r3, [pc, #136]	; (8004ca0 <dll_rfevt_txcsma+0x9c>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	71da      	strb	r2, [r3, #7]
        sys.task_RFA.event      = 5;
 8004c1a:	3205      	adds	r2, #5
 8004c1c:	711a      	strb	r2, [r3, #4]
        radio.evtdone   = (tcode & 1) ? &dll_rfevt_btx : &dll_rfevt_ftx;
 8004c1e:	b289      	uxth	r1, r1
 8004c20:	07cb      	lsls	r3, r1, #31
 8004c22:	d50f      	bpl.n	8004c44 <dll_rfevt_txcsma+0x40>
 8004c24:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <dll_rfevt_txcsma+0xa0>)
 8004c26:	4b20      	ldr	r3, [pc, #128]	; (8004ca8 <dll_rfevt_txcsma+0xa4>)
 8004c28:	609a      	str	r2, [r3, #8]
        event_ticks     = (tcode & 2) ? dll.counter+20 : (ot_uint)(rm2_pkt_duration(&txq));
 8004c2a:	078b      	lsls	r3, r1, #30
 8004c2c:	d50c      	bpl.n	8004c48 <dll_rfevt_txcsma+0x44>
 8004c2e:	4b1f      	ldr	r3, [pc, #124]	; (8004cac <dll_rfevt_txcsma+0xa8>)
 8004c30:	885c      	ldrh	r4, [r3, #2]
 8004c32:	3414      	adds	r4, #20
 8004c34:	b2a4      	uxth	r4, r4
        radio_idle();
 8004c36:	f7fc fd89 	bl	800174c <radio_idle>
    sys_preempt(&sys.task_RFA, event_ticks);
 8004c3a:	0021      	movs	r1, r4
 8004c3c:	481c      	ldr	r0, [pc, #112]	; (8004cb0 <dll_rfevt_txcsma+0xac>)
 8004c3e:	f002 ffc5 	bl	8007bcc <sys_preempt>
}
 8004c42:	bd10      	pop	{r4, pc}
        radio.evtdone   = (tcode & 1) ? &dll_rfevt_btx : &dll_rfevt_ftx;
 8004c44:	4a1b      	ldr	r2, [pc, #108]	; (8004cb4 <dll_rfevt_txcsma+0xb0>)
 8004c46:	e7ee      	b.n	8004c26 <dll_rfevt_txcsma+0x22>
        event_ticks     = (tcode & 2) ? dll.counter+20 : (ot_uint)(rm2_pkt_duration(&txq));
 8004c48:	481b      	ldr	r0, [pc, #108]	; (8004cb8 <dll_rfevt_txcsma+0xb4>)
 8004c4a:	f7fc ffc7 	bl	8001bdc <rm2_pkt_duration>
 8004c4e:	0004      	movs	r4, r0
 8004c50:	e7f1      	b.n	8004c36 <dll_rfevt_txcsma+0x32>
    else if (pcode > 0) {
 8004c52:	2800      	cmp	r0, #0
 8004c54:	dd10      	ble.n	8004c78 <dll_rfevt_txcsma+0x74>
        __DEBUG_ERRCODE_EVAL(=122);
 8004c56:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <dll_rfevt_txcsma+0x98>)
 8004c58:	227a      	movs	r2, #122	; 0x7a
 8004c5a:	805a      	strh	r2, [r3, #2]
        nextcsma = (ot_uint)sub_fcloop();
 8004c5c:	f7ff fe96 	bl	800498c <sub_fcloop>
 8004c60:	0004      	movs	r4, r0
        if (nextcsma < 2) 
 8004c62:	2801      	cmp	r0, #1
 8004c64:	d905      	bls.n	8004c72 <dll_rfevt_txcsma+0x6e>
            radio_sleep();
 8004c66:	f7fc fd69 	bl	800173c <radio_sleep>
        radio_set_mactimer( nextcsma );
 8004c6a:	0020      	movs	r0, r4
 8004c6c:	f7fc fae2 	bl	8001234 <radio_set_mactimer>
        return;
 8004c70:	e7e7      	b.n	8004c42 <dll_rfevt_txcsma+0x3e>
            radio_idle();
 8004c72:	f7fc fd6b 	bl	800174c <radio_idle>
 8004c76:	e7f8      	b.n	8004c6a <dll_rfevt_txcsma+0x66>
        __DEBUG_ERRCODE_EVAL(=123);
 8004c78:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <dll_rfevt_txcsma+0x98>)
 8004c7a:	227b      	movs	r2, #123	; 0x7b
 8004c7c:	805a      	strh	r2, [r3, #2]
        DLL_SIG_RFTERMINATE(sys.task_RFA.event, pcode);
 8004c7e:	4c08      	ldr	r4, [pc, #32]	; (8004ca0 <dll_rfevt_txcsma+0x9c>)
 8004c80:	7923      	ldrb	r3, [r4, #4]
 8004c82:	0001      	movs	r1, r0
 8004c84:	0018      	movs	r0, r3
 8004c86:	f7fb fdd3 	bl	8000830 <dll_sig_rfterminate>
        session_pop();
 8004c8a:	f001 f857 	bl	8005d3c <session_pop>
        dll_idle();
 8004c8e:	f7ff fecd 	bl	8004a2c <dll_idle>
        sys.task_RFA.event  = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	7123      	strb	r3, [r4, #4]
        event_ticks         = 0;
 8004c96:	2400      	movs	r4, #0
 8004c98:	e7cf      	b.n	8004c3a <dll_rfevt_txcsma+0x36>
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	20002df0 	.word	0x20002df0
 8004ca0:	20002da8 	.word	0x20002da8
 8004ca4:	0800509d 	.word	0x0800509d
 8004ca8:	200026b8 	.word	0x200026b8
 8004cac:	20002648 	.word	0x20002648
 8004cb0:	20002dac 	.word	0x20002dac
 8004cb4:	08004cbd 	.word	0x08004cbd
 8004cb8:	20002d68 	.word	0x20002d68

08004cbc <dll_rfevt_ftx>:
OT_WEAK void dll_rfevt_ftx(ot_int pcode, ot_int scratch) {
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=140);
 8004cc0:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <dll_rfevt_ftx+0x88>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	801a      	strh	r2, [r3, #0]
 8004cc6:	328c      	adds	r2, #140	; 0x8c
 8004cc8:	805a      	strh	r2, [r3, #2]
    if (pcode == 1) {
 8004cca:	2801      	cmp	r0, #1
 8004ccc:	d02d      	beq.n	8004d2a <dll_rfevt_ftx+0x6e>
        __DEBUG_ERRCODE_EVAL(=141);
 8004cce:	3201      	adds	r2, #1
 8004cd0:	805a      	strh	r2, [r3, #2]
        active = session_top();
 8004cd2:	f001 f83f 	bl	8005d54 <session_top>
        scratch = ((active->netstate & M2_NETSTATE_RESPTX) \
 8004cd6:	79c3      	ldrb	r3, [r0, #7]
        		|| (dll.comm.rx_timeout <= 0));
 8004cd8:	06db      	lsls	r3, r3, #27
 8004cda:	d407      	bmi.n	8004cec <dll_rfevt_ftx+0x30>
 8004cdc:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <dll_rfevt_ftx+0x8c>)
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	dd01      	ble.n	8004ce8 <dll_rfevt_ftx+0x2c>
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	e002      	b.n	8004cee <dll_rfevt_ftx+0x32>
 8004ce8:	2201      	movs	r2, #1
 8004cea:	e000      	b.n	8004cee <dll_rfevt_ftx+0x32>
 8004cec:	2201      	movs	r2, #1
        scratch = ((active->netstate & M2_NETSTATE_RESPTX) \
 8004cee:	b212      	sxth	r2, r2
        dll.comm.redundants--;
 8004cf0:	4d15      	ldr	r5, [pc, #84]	; (8004d48 <dll_rfevt_ftx+0x8c>)
 8004cf2:	212f      	movs	r1, #47	; 0x2f
 8004cf4:	5c6b      	ldrb	r3, [r5, r1]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	546b      	strb	r3, [r5, r1]
        if ((dll.comm.redundants != 0) && scratch) {
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <dll_rfevt_ftx+0x48>
 8004d00:	2a00      	cmp	r2, #0
 8004d02:	d113      	bne.n	8004d2c <dll_rfevt_ftx+0x70>
        if (scratch || pcode) {
 8004d04:	4322      	orrs	r2, r4
 8004d06:	d118      	bne.n	8004d3a <dll_rfevt_ftx+0x7e>
            active->netstate  &= ~M2_NETSTATE_TMASK;
 8004d08:	79c3      	ldrb	r3, [r0, #7]
 8004d0a:	2270      	movs	r2, #112	; 0x70
 8004d0c:	4393      	bics	r3, r2
            active->netstate  |= M2_NETSTATE_RESPRX;
 8004d0e:	2230      	movs	r2, #48	; 0x30
 8004d10:	4313      	orrs	r3, r2
 8004d12:	71c3      	strb	r3, [r0, #7]
        DLL_SIG_RFTERMINATE(sys.task_RFA.event, pcode);
 8004d14:	4d0d      	ldr	r5, [pc, #52]	; (8004d4c <dll_rfevt_ftx+0x90>)
 8004d16:	7928      	ldrb	r0, [r5, #4]
 8004d18:	0021      	movs	r1, r4
 8004d1a:	f7fb fd89 	bl	8000830 <dll_sig_rfterminate>
        sys.task_RFA.event = 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	712b      	strb	r3, [r5, #4]
        sys_preempt(&sys.task_RFA, 0);
 8004d22:	1d28      	adds	r0, r5, #4
 8004d24:	2100      	movs	r1, #0
 8004d26:	f002 ff51 	bl	8007bcc <sys_preempt>
}
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
            dll.comm.csmaca_params = (M2_CSMACA_NOCSMA | M2_CSMACA_MACCA);
 8004d2c:	232e      	movs	r3, #46	; 0x2e
 8004d2e:	310d      	adds	r1, #13
 8004d30:	54e9      	strb	r1, [r5, r3]
            rm2_resend( (ot_sig2)&dll_rfevt_txcsma );
 8004d32:	4807      	ldr	r0, [pc, #28]	; (8004d50 <dll_rfevt_ftx+0x94>)
 8004d34:	f7fc fb76 	bl	8001424 <rm2_resend>
            return;
 8004d38:	e7f7      	b.n	8004d2a <dll_rfevt_ftx+0x6e>
            session_pop();
 8004d3a:	f000 ffff 	bl	8005d3c <session_pop>
            dll_idle();
 8004d3e:	f7ff fe75 	bl	8004a2c <dll_idle>
 8004d42:	e7e7      	b.n	8004d14 <dll_rfevt_ftx+0x58>
 8004d44:	20002df0 	.word	0x20002df0
 8004d48:	20002648 	.word	0x20002648
 8004d4c:	20002da8 	.word	0x20002da8
 8004d50:	08004c05 	.word	0x08004c05

08004d54 <dll_block>:
	sys.task_RFA.latency = 0;
 8004d54:	4b01      	ldr	r3, [pc, #4]	; (8004d5c <dll_block+0x8>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	71da      	strb	r2, [r3, #7]
}
 8004d5a:	4770      	bx	lr
 8004d5c:	20002da8 	.word	0x20002da8

08004d60 <dll_unblock>:
	sys.task_RFA.latency = _REQRX_LATENCY;
 8004d60:	4b01      	ldr	r3, [pc, #4]	; (8004d68 <dll_unblock+0x8>)
 8004d62:	2228      	movs	r2, #40	; 0x28
 8004d64:	71da      	strb	r2, [r3, #7]
}
 8004d66:	4770      	bx	lr
 8004d68:	20002da8 	.word	0x20002da8

08004d6c <dll_clock>:
OT_WEAK void dll_clock(ot_uint clocks) {
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	0004      	movs	r4, r0
    if (sys.task_RFA.event != 0) {
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <dll_clock+0x34>)
 8004d72:	791b      	ldrb	r3, [r3, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d004      	beq.n	8004d82 <dll_clock+0x16>
    	dll.comm.rx_timeout -= CLK2TI(clocks);
 8004d78:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <dll_clock+0x38>)
 8004d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d7c:	1a14      	subs	r4, r2, r0
 8004d7e:	629c      	str	r4, [r3, #40]	; 0x28
}
 8004d80:	bd70      	pop	{r4, r5, r6, pc}
    else if (session_notempty()) {
 8004d82:	f001 f81b 	bl	8005dbc <session_notempty>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d0fa      	beq.n	8004d80 <dll_clock+0x14>
        sys.task_RFA.event      = 2;
 8004d8a:	4d05      	ldr	r5, [pc, #20]	; (8004da0 <dll_clock+0x34>)
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	712b      	strb	r3, [r5, #4]
        sys.task_RFA.nextevent  = clocks + TI2CLK(session_getnext());
 8004d90:	f000 ff3c 	bl	8005c0c <session_getnext>
 8004d94:	1820      	adds	r0, r4, r0
 8004d96:	60a8      	str	r0, [r5, #8]
        dll_block_idletasks();
 8004d98:	f7ff fe3c 	bl	8004a14 <dll_block_idletasks>
}
 8004d9c:	e7f0      	b.n	8004d80 <dll_clock+0x14>
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	20002da8 	.word	0x20002da8
 8004da4:	20002648 	.word	0x20002648

08004da8 <dll_processing>:
void dll_processing(void) {
 8004da8:	b570      	push	{r4, r5, r6, lr}
    sys.task_RFA.event  = 0;                // Only run processing once
 8004daa:	2500      	movs	r5, #0
 8004dac:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <dll_processing+0x54>)
 8004dae:	711d      	strb	r5, [r3, #4]
    active              = session_top();
 8004db0:	f000 ffd0 	bl	8005d54 <session_top>
 8004db4:	0004      	movs	r4, r0
    active->counter     = 0;
 8004db6:	8085      	strh	r5, [r0, #4]
    proc_score          = network_route_ff(active);
 8004db8:	f000 fcc0 	bl	800573c <network_route_ff>
    if (proc_score >= 0) {
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	db19      	blt.n	8004df4 <dll_processing+0x4c>
        sys.task_HSS.cursor = 0;
 8004dc0:	4b0e      	ldr	r3, [pc, #56]	; (8004dfc <dll_processing+0x54>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	755a      	strb	r2, [r3, #21]
        dll.counter         = dll.netconf.hold_limit;
 8004dc6:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <dll_processing+0x58>)
 8004dc8:	8bda      	ldrh	r2, [r3, #30]
 8004dca:	805a      	strh	r2, [r3, #2]
        dll.idle_state      = M2_DLLIDLE_HOLD;
 8004dcc:	2202      	movs	r2, #2
 8004dce:	701a      	strb	r2, [r3, #0]
        if (active->flags & M2_FLAG_LISTEN) {
 8004dd0:	230b      	movs	r3, #11
 8004dd2:	56e3      	ldrsb	r3, [r4, r3]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	db07      	blt.n	8004de8 <dll_processing+0x40>
    if (active->netstate & M2_NETSTATE_SCRAP) {
 8004dd8:	79e3      	ldrb	r3, [r4, #7]
 8004dda:	075b      	lsls	r3, r3, #29
 8004ddc:	d503      	bpl.n	8004de6 <dll_processing+0x3e>
        session_pop();
 8004dde:	f000 ffad 	bl	8005d3c <session_pop>
        dll_idle();
 8004de2:	f7ff fe23 	bl	8004a2c <dll_idle>
}
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
            session_continue(active->applet, M2_NETSTATE_REQRX, 0);
 8004de8:	2200      	movs	r2, #0
 8004dea:	2120      	movs	r1, #32
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	f000 ffb7 	bl	8005d60 <session_continue>
 8004df2:	e7f1      	b.n	8004dd8 <dll_processing+0x30>
    else if ((active->netstate & M2_NETSTATE_RESP) == 0) {
 8004df4:	79e3      	ldrb	r3, [r4, #7]
 8004df6:	06db      	lsls	r3, r3, #27
 8004df8:	d5f1      	bpl.n	8004dde <dll_processing+0x36>
 8004dfa:	e7ed      	b.n	8004dd8 <dll_processing+0x30>
 8004dfc:	20002da8 	.word	0x20002da8
 8004e00:	20002648 	.word	0x20002648

08004e04 <dll_systask_sleepscan>:
OT_WEAK void dll_systask_sleepscan(ot_task task) {
 8004e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e06:	46c6      	mov	lr, r8
 8004e08:	b500      	push	{lr}
 8004e0a:	0004      	movs	r4, r0
    if (task->event == 0) {
 8004e0c:	7800      	ldrb	r0, [r0, #0]
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d102      	bne.n	8004e18 <dll_systask_sleepscan+0x14>
}
 8004e12:	bc04      	pop	{r2}
 8004e14:	4690      	mov	r8, r2
 8004e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fp = ISF_open_su( task->event );
 8004e18:	f002 fcf5 	bl	8007806 <ISF_open_su>
 8004e1c:	0007      	movs	r7, r0
    scratch.ushort  = PLATFORM_ENDIAN16( vl_read(fp, task->cursor) );
 8004e1e:	7861      	ldrb	r1, [r4, #1]
 8004e20:	f002 fc3a 	bl	8007698 <vl_read>
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8004e24:	ba40      	rev16	r0, r0
 8004e26:	b280      	uxth	r0, r0
 8004e28:	0a03      	lsrs	r3, r0, #8
 8004e2a:	4698      	mov	r8, r3
    sys_task_setnext(task, (ot_u32)otutils_calc_longtimeout(scratch.ushort));
 8004e2c:	f002 f9f8 	bl	8007220 <otutils_calc_longtimeout>
 8004e30:	0001      	movs	r1, r0
 8004e32:	0020      	movs	r0, r4
 8004e34:	f002 fe5a 	bl	8007aec <sys_task_setnext>
    task->cursor   += 2;
 8004e38:	7861      	ldrb	r1, [r4, #1]
 8004e3a:	3102      	adds	r1, #2
 8004e3c:	b2c9      	uxtb	r1, r1
 8004e3e:	7061      	strb	r1, [r4, #1]
    scratch.ushort  = vl_read(fp, task->cursor);
 8004e40:	b289      	uxth	r1, r1
 8004e42:	0038      	movs	r0, r7
 8004e44:	f002 fc28 	bl	8007698 <vl_read>
 8004e48:	b2c6      	uxtb	r6, r0
 8004e4a:	0400      	lsls	r0, r0, #16
 8004e4c:	0e05      	lsrs	r5, r0, #24
    task->cursor   += 2;
 8004e4e:	7863      	ldrb	r3, [r4, #1]
 8004e50:	3302      	adds	r3, #2
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	7063      	strb	r3, [r4, #1]
    task->cursor    = (task->cursor >= fp->length) ? 0 : task->cursor;
 8004e56:	b299      	uxth	r1, r3
 8004e58:	893a      	ldrh	r2, [r7, #8]
 8004e5a:	4291      	cmp	r1, r2
 8004e5c:	d216      	bcs.n	8004e8c <dll_systask_sleepscan+0x88>
 8004e5e:	7063      	strb	r3, [r4, #1]
    vl_close(fp);
 8004e60:	0038      	movs	r0, r7
 8004e62:	f002 fc9b 	bl	800779c <vl_close>
    	s_type          = (s_type >> 1) | (s_code & 0x80);
 8004e66:	237f      	movs	r3, #127	; 0x7f
 8004e68:	002a      	movs	r2, r5
 8004e6a:	439a      	bics	r2, r3
 8004e6c:	b253      	sxtb	r3, r2
 8004e6e:	4642      	mov	r2, r8
 8004e70:	0851      	lsrs	r1, r2, #1
 8004e72:	2240      	movs	r2, #64	; 0x40
 8004e74:	400a      	ands	r2, r1
 8004e76:	4313      	orrs	r3, r2
 8004e78:	b2db      	uxtb	r3, r3
    	netstate        = s_type | (M2_NETSTATE_REQRX | M2_NETSTATE_INIT);
 8004e7a:	2228      	movs	r2, #40	; 0x28
 8004e7c:	4313      	orrs	r3, r2
		s_new           = session_new(&dll_scan_applet, 0, s_channel, netstate);
 8004e7e:	0032      	movs	r2, r6
 8004e80:	2100      	movs	r1, #0
 8004e82:	4803      	ldr	r0, [pc, #12]	; (8004e90 <dll_systask_sleepscan+0x8c>)
 8004e84:	f000 feca 	bl	8005c1c <session_new>
		s_new->extra    = s_code;
 8004e88:	7205      	strb	r5, [r0, #8]
 8004e8a:	e7c2      	b.n	8004e12 <dll_systask_sleepscan+0xe>
    task->cursor    = (task->cursor >= fp->length) ? 0 : task->cursor;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e7e6      	b.n	8004e5e <dll_systask_sleepscan+0x5a>
 8004e90:	08005181 	.word	0x08005181

08004e94 <dll_systask_beacon>:
OT_WEAK void dll_systask_beacon(ot_task task) {
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	0004      	movs	r4, r0
    if ((task->event == 0) || (dll.netconf.b_attempts == 0)) {
 8004e98:	7803      	ldrb	r3, [r0, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d03b      	beq.n	8004f16 <dll_systask_beacon+0x82>
 8004e9e:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <dll_systask_beacon+0x94>)
 8004ea0:	7f5b      	ldrb	r3, [r3, #29]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d037      	beq.n	8004f16 <dll_systask_beacon+0x82>
    if (dll.netconf.dd_flags == 0) {
 8004ea6:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <dll_systask_beacon+0x94>)
 8004ea8:	7f1b      	ldrb	r3, [r3, #28]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d11e      	bne.n	8004eec <dll_systask_beacon+0x58>
        fp = ISF_open_su( ISF_ID(beacon_transmit_sequence) );
 8004eae:	2006      	movs	r0, #6
 8004eb0:	f002 fca9 	bl	8007806 <ISF_open_su>
 8004eb4:	1e05      	subs	r5, r0, #0
        if (fp == NULL) {
 8004eb6:	d035      	beq.n	8004f24 <dll_systask_beacon+0x90>
        if (fp->length == 0)    {
 8004eb8:	8903      	ldrh	r3, [r0, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d02e      	beq.n	8004f1c <dll_systask_beacon+0x88>
        scratch     = fp->start;
 8004ebe:	8846      	ldrh	r6, [r0, #2]
        fp->start  += task->cursor;
 8004ec0:	7863      	ldrb	r3, [r4, #1]
 8004ec2:	199b      	adds	r3, r3, r6
 8004ec4:	8043      	strh	r3, [r0, #2]
        task->cursor += 8;
 8004ec6:	7863      	ldrb	r3, [r4, #1]
 8004ec8:	3308      	adds	r3, #8
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	7063      	strb	r3, [r4, #1]
        if (task->cursor >= fp->length) {
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8902      	ldrh	r2, [r0, #8]
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d301      	bcc.n	8004eda <dll_systask_beacon+0x46>
        	task->cursor = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	7063      	strb	r3, [r4, #1]
        vl_load(fp, 8, dll.netconf.btemp);
 8004eda:	4a14      	ldr	r2, [pc, #80]	; (8004f2c <dll_systask_beacon+0x98>)
 8004edc:	2108      	movs	r1, #8
 8004ede:	0028      	movs	r0, r5
 8004ee0:	f002 fbfb 	bl	80076da <vl_load>
        fp->start = scratch;
 8004ee4:	806e      	strh	r6, [r5, #2]
        vl_close(fp);
 8004ee6:	0028      	movs	r0, r5
 8004ee8:	f002 fc58 	bl	800779c <vl_close>
		b_session           = session_new(  &dll_beacon_applet, 0, dll.netconf.btemp[2], b_flags);
 8004eec:	4d0e      	ldr	r5, [pc, #56]	; (8004f28 <dll_systask_beacon+0x94>)
 8004eee:	7a2a      	ldrb	r2, [r5, #8]
 8004ef0:	230a      	movs	r3, #10
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	480e      	ldr	r0, [pc, #56]	; (8004f30 <dll_systask_beacon+0x9c>)
 8004ef6:	f000 fe91 	bl	8005c1c <session_new>
		b_session->subnet   = dll.netconf.b_subnet;
 8004efa:	7e6b      	ldrb	r3, [r5, #25]
 8004efc:	7283      	strb	r3, [r0, #10]
		b_session->extra    = dll.netconf.btemp[3];
 8004efe:	7a6b      	ldrb	r3, [r5, #9]
 8004f00:	7203      	strb	r3, [r0, #8]
    nextbeacon = otutils_calc_longtimeout( PLATFORM_ENDIAN16(*(ot_u16*)&dll.netconf.btemp[0]) );
 8004f02:	88e8      	ldrh	r0, [r5, #6]
 8004f04:	ba40      	rev16	r0, r0
 8004f06:	b280      	uxth	r0, r0
 8004f08:	f002 f98a 	bl	8007220 <otutils_calc_longtimeout>
 8004f0c:	b281      	uxth	r1, r0
    sys_task_setnext(task, (ot_u32)nextbeacon);
 8004f0e:	0020      	movs	r0, r4
 8004f10:	f002 fdec 	bl	8007aec <sys_task_setnext>
 8004f14:	e001      	b.n	8004f1a <dll_systask_beacon+0x86>
        dll_idle();
 8004f16:	f7ff fd89 	bl	8004a2c <dll_idle>
}
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
            vl_close(fp);
 8004f1c:	f002 fc3e 	bl	800779c <vl_close>
    nextbeacon = 10;
 8004f20:	210a      	movs	r1, #10
            goto dll_systask_beacon_END;
 8004f22:	e7f4      	b.n	8004f0e <dll_systask_beacon+0x7a>
    nextbeacon = 10;
 8004f24:	210a      	movs	r1, #10
 8004f26:	e7f2      	b.n	8004f0e <dll_systask_beacon+0x7a>
 8004f28:	20002648 	.word	0x20002648
 8004f2c:	2000264e 	.word	0x2000264e
 8004f30:	080051ad 	.word	0x080051ad

08004f34 <dll_init_rx>:
OT_WEAK void dll_init_rx(m2session* active) {
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	0004      	movs	r4, r0
    sys.task_RFA.event      = 3;
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <dll_init_rx+0x54>)
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	711a      	strb	r2, [r3, #4]
    sys.task_RFA.latency    = (active->netstate & M2_NETSTATE_RESP) ? \
 8004f3e:	79c3      	ldrb	r3, [r0, #7]
 8004f40:	06db      	lsls	r3, r3, #27
 8004f42:	d51c      	bpl.n	8004f7e <dll_init_rx+0x4a>
 8004f44:	3a01      	subs	r2, #1
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <dll_init_rx+0x54>)
 8004f48:	71da      	strb	r2, [r3, #7]
    min_timeout = rm2_rxtimeout_floor(active->channel);
 8004f4a:	79a0      	ldrb	r0, [r4, #6]
 8004f4c:	f7fc fe16 	bl	8001b7c <rm2_rxtimeout_floor>
    if (dll.comm.rx_timeout < min_timeout) {
 8004f50:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <dll_init_rx+0x58>)
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	4283      	cmp	r3, r0
 8004f56:	da01      	bge.n	8004f5c <dll_init_rx+0x28>
        dll.comm.rx_timeout = min_timeout;
 8004f58:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <dll_init_rx+0x58>)
 8004f5a:	6298      	str	r0, [r3, #40]	; 0x28
	sys_task_setnext(&sys.task[TASK_radio], (ot_u32)dll.comm.rx_timeout);
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <dll_init_rx+0x58>)
 8004f5e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004f60:	4d0b      	ldr	r5, [pc, #44]	; (8004f90 <dll_init_rx+0x5c>)
 8004f62:	0028      	movs	r0, r5
 8004f64:	f002 fdc2 	bl	8007aec <sys_task_setnext>
    DLL_SIG_RFINIT(sys.task_RFA.event);
 8004f68:	7828      	ldrb	r0, [r5, #0]
 8004f6a:	f7fb fc53 	bl	8000814 <dll_sig_rfinit>
    callback = (active->netstate & M2_NETFLAG_BG) ? &dll_rfevt_brx : &dll_rfevt_frx;
 8004f6e:	79e1      	ldrb	r1, [r4, #7]
 8004f70:	064b      	lsls	r3, r1, #25
 8004f72:	d406      	bmi.n	8004f82 <dll_init_rx+0x4e>
 8004f74:	4a07      	ldr	r2, [pc, #28]	; (8004f94 <dll_init_rx+0x60>)
    rm2_rxinit(active->channel, active->netstate, callback);
 8004f76:	79a0      	ldrb	r0, [r4, #6]
 8004f78:	f7fc faea 	bl	8001550 <rm2_rxinit>
}
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
    sys.task_RFA.latency    = (active->netstate & M2_NETSTATE_RESP) ? \
 8004f7e:	2228      	movs	r2, #40	; 0x28
 8004f80:	e7e1      	b.n	8004f46 <dll_init_rx+0x12>
    callback = (active->netstate & M2_NETFLAG_BG) ? &dll_rfevt_brx : &dll_rfevt_frx;
 8004f82:	4a05      	ldr	r2, [pc, #20]	; (8004f98 <dll_init_rx+0x64>)
 8004f84:	e7f7      	b.n	8004f76 <dll_init_rx+0x42>
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	20002da8 	.word	0x20002da8
 8004f8c:	20002648 	.word	0x20002648
 8004f90:	20002dac 	.word	0x20002dac
 8004f94:	08004afd 	.word	0x08004afd
 8004f98:	08004a79 	.word	0x08004a79

08004f9c <dll_init_tx>:
OT_WEAK void dll_init_tx(m2session* active) {
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	0005      	movs	r5, r0
    sys_task_setnext(&sys.task[TASK_radio], (ot_u32)dll.comm.tc);
 8004fa0:	4e0f      	ldr	r6, [pc, #60]	; (8004fe0 <dll_init_tx+0x44>)
 8004fa2:	4c10      	ldr	r4, [pc, #64]	; (8004fe4 <dll_init_tx+0x48>)
 8004fa4:	6a31      	ldr	r1, [r6, #32]
 8004fa6:	0020      	movs	r0, r4
 8004fa8:	f002 fda0 	bl	8007aec <sys_task_setnext>
    dll.comm.tca            = sub_fcinit();
 8004fac:	f7ff fd10 	bl	80049d0 <sub_fcinit>
 8004fb0:	6270      	str	r0, [r6, #36]	; 0x24
    sys.task_RFA.latency    = 1;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	70e3      	strb	r3, [r4, #3]
    sys.task_RFA.event      = 4;
 8004fb6:	3303      	adds	r3, #3
 8004fb8:	7023      	strb	r3, [r4, #0]
    DLL_SIG_RFINIT(sys.task_RFA.event);
 8004fba:	2004      	movs	r0, #4
 8004fbc:	f7fb fc2a 	bl	8000814 <dll_sig_rfinit>
    if (active->netstate & M2_NETFLAG_BG) {
 8004fc0:	79eb      	ldrb	r3, [r5, #7]
 8004fc2:	065a      	lsls	r2, r3, #25
 8004fc4:	d502      	bpl.n	8004fcc <dll_init_tx+0x30>
    	if (active->netstate & M2_NETFLAG_STREAM) {
 8004fc6:	b25b      	sxtb	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	db04      	blt.n	8004fd6 <dll_init_tx+0x3a>
    rm2_txinit(active->netstate, &dll_rfevt_txcsma);
 8004fcc:	79e8      	ldrb	r0, [r5, #7]
 8004fce:	4906      	ldr	r1, [pc, #24]	; (8004fe8 <dll_init_tx+0x4c>)
 8004fd0:	f7fc fa02 	bl	80013d8 <rm2_txinit>
}
 8004fd4:	bd70      	pop	{r4, r5, r6, pc}
    		m2advp_open(session_follower());
 8004fd6:	f000 ff0d 	bl	8005df4 <session_follower>
 8004fda:	f000 fc75 	bl	80058c8 <m2advp_open>
 8004fde:	e7f5      	b.n	8004fcc <dll_init_tx+0x30>
 8004fe0:	20002648 	.word	0x20002648
 8004fe4:	20002dac 	.word	0x20002dac
 8004fe8:	08004c05 	.word	0x08004c05

08004fec <dll_activate>:
OT_WEAK void dll_activate(void) {
 8004fec:	b510      	push	{r4, lr}
    s_active            = session_top();
 8004fee:	f000 feb1 	bl	8005d54 <session_top>
 8004ff2:	0004      	movs	r4, r0
    s_applet            = (s_active->applet == NULL) ? \
 8004ff4:	6803      	ldr	r3, [r0, #0]
                            &dll_response_applet : s_active->applet;
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00c      	beq.n	8005014 <dll_activate+0x28>
    s_active->applet    = NULL;
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	6022      	str	r2, [r4, #0]
    s_applet(s_active);
 8004ffe:	0020      	movs	r0, r4
 8005000:	4798      	blx	r3
    if (s_active->netstate & M2_NETSTATE_SCRAP) {
 8005002:	79e3      	ldrb	r3, [r4, #7]
 8005004:	075a      	lsls	r2, r3, #29
 8005006:	d407      	bmi.n	8005018 <dll_activate+0x2c>
    else if (s_active->netstate & M2_NETSTATE_RX) {
 8005008:	069b      	lsls	r3, r3, #26
 800500a:	d40a      	bmi.n	8005022 <dll_activate+0x36>
        dll_init_tx(s_active);
 800500c:	0020      	movs	r0, r4
 800500e:	f7ff ffc5 	bl	8004f9c <dll_init_tx>
}
 8005012:	bd10      	pop	{r4, pc}
                            &dll_response_applet : s_active->applet;
 8005014:	4b05      	ldr	r3, [pc, #20]	; (800502c <dll_activate+0x40>)
 8005016:	e7f0      	b.n	8004ffa <dll_activate+0xe>
        session_pop();
 8005018:	f000 fe90 	bl	8005d3c <session_pop>
        dll_idle();
 800501c:	f7ff fd06 	bl	8004a2c <dll_idle>
 8005020:	e7f7      	b.n	8005012 <dll_activate+0x26>
        dll_init_rx(s_active);
 8005022:	0020      	movs	r0, r4
 8005024:	f7ff ff86 	bl	8004f34 <dll_init_rx>
 8005028:	e7f3      	b.n	8005012 <dll_activate+0x26>
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	080048a5 	.word	0x080048a5

08005030 <dll_scan_timeout>:
OT_WEAK void dll_scan_timeout(void) {
 8005030:	b510      	push	{r4, lr}
    if ((radio.state != RADIO_DataRX) || (dll.comm.csmaca_params & M2_CSMACA_A2P)) {    ///@todo change to LISTEN
 8005032:	4b0a      	ldr	r3, [pc, #40]	; (800505c <dll_scan_timeout+0x2c>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b05      	cmp	r3, #5
 8005038:	d104      	bne.n	8005044 <dll_scan_timeout+0x14>
 800503a:	4a09      	ldr	r2, [pc, #36]	; (8005060 <dll_scan_timeout+0x30>)
 800503c:	3329      	adds	r3, #41	; 0x29
 800503e:	5cd3      	ldrb	r3, [r2, r3]
 8005040:	065b      	lsls	r3, r3, #25
 8005042:	d502      	bpl.n	800504a <dll_scan_timeout+0x1a>
        rm2_rxtimeout_isr();
 8005044:	f7fc fb46 	bl	80016d4 <rm2_rxtimeout_isr>
}
 8005048:	bd10      	pop	{r4, pc}
        sys.task[TASK_radio].event = 5;
 800504a:	4806      	ldr	r0, [pc, #24]	; (8005064 <dll_scan_timeout+0x34>)
 800504c:	2305      	movs	r3, #5
 800504e:	7103      	strb	r3, [r0, #4]
        sys_task_setnext(&sys.task[TASK_radio], 128);
 8005050:	3004      	adds	r0, #4
 8005052:	2180      	movs	r1, #128	; 0x80
 8005054:	f002 fd4a 	bl	8007aec <sys_task_setnext>
}
 8005058:	e7f6      	b.n	8005048 <dll_scan_timeout+0x18>
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	200026b8 	.word	0x200026b8
 8005060:	20002648 	.word	0x20002648
 8005064:	20002da8 	.word	0x20002da8

08005068 <dll_m2advp_refresh>:
OT_WEAK void dll_m2advp_refresh(void) {
 8005068:	b570      	push	{r4, r5, r6, lr}
    countdown = rm2_flood_getcounter();
 800506a:	f7fc f97f 	bl	800136c <rm2_flood_getcounter>
 800506e:	0004      	movs	r4, r0
    if (countdown < rm2_bgpkt_duration()) {
 8005070:	f7fc fd92 	bl	8001b98 <rm2_bgpkt_duration>
 8005074:	4284      	cmp	r4, r0
 8005076:	db03      	blt.n	8005080 <dll_m2advp_refresh+0x18>
        m2advp_update(countdown);
 8005078:	b2a0      	uxth	r0, r4
 800507a:	f000 fc4f 	bl	800591c <m2advp_update>
}
 800507e:	bd70      	pop	{r4, r5, r6, pc}
        dll.counter = (countdown < 0) ? 0 : countdown;
 8005080:	1c23      	adds	r3, r4, #0
 8005082:	0422      	lsls	r2, r4, #16
 8005084:	d406      	bmi.n	8005094 <dll_m2advp_refresh+0x2c>
 8005086:	4a04      	ldr	r2, [pc, #16]	; (8005098 <dll_m2advp_refresh+0x30>)
 8005088:	8053      	strh	r3, [r2, #2]
        m2advp_close();
 800508a:	f000 fc57 	bl	800593c <m2advp_close>
        rm2_flood_txstop();
 800508e:	f7fc f973 	bl	8001378 <rm2_flood_txstop>
 8005092:	e7f4      	b.n	800507e <dll_m2advp_refresh+0x16>
        dll.counter = (countdown < 0) ? 0 : countdown;
 8005094:	2300      	movs	r3, #0
 8005096:	e7f6      	b.n	8005086 <dll_m2advp_refresh+0x1e>
 8005098:	20002648 	.word	0x20002648

0800509c <dll_rfevt_btx>:
OT_WEAK void dll_rfevt_btx(ot_int flcode, ot_int scratch) {
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=130);
 80050a0:	4b1e      	ldr	r3, [pc, #120]	; (800511c <dll_rfevt_btx+0x80>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	801a      	strh	r2, [r3, #0]
 80050a6:	3282      	adds	r2, #130	; 0x82
 80050a8:	805a      	strh	r2, [r3, #2]
    switch (flcode) {
 80050aa:	2802      	cmp	r0, #2
 80050ac:	d012      	beq.n	80050d4 <dll_rfevt_btx+0x38>
 80050ae:	2803      	cmp	r0, #3
 80050b0:	d016      	beq.n	80050e0 <dll_rfevt_btx+0x44>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d031      	beq.n	800511a <dll_rfevt_btx+0x7e>
            __DEBUG_ERRCODE_EVAL(=133);
 80050b6:	4b19      	ldr	r3, [pc, #100]	; (800511c <dll_rfevt_btx+0x80>)
 80050b8:	2285      	movs	r2, #133	; 0x85
 80050ba:	805a      	strh	r2, [r3, #2]
            dll_idle();
 80050bc:	f7ff fcb6 	bl	8004a2c <dll_idle>
            dirty_adv_check = (session_netstate() & M2_NETFLAG_STREAM);
 80050c0:	f000 feb2 	bl	8005e28 <session_netstate>
 80050c4:	0005      	movs	r5, r0
            session_pop();// pop the BG session
 80050c6:	f000 fe39 	bl	8005d3c <session_pop>
            if (dirty_adv_check) {
 80050ca:	062b      	lsls	r3, r5, #24
 80050cc:	d51a      	bpl.n	8005104 <dll_rfevt_btx+0x68>
                session_scrap();
 80050ce:	f000 fe21 	bl	8005d14 <session_scrap>
 80050d2:	e017      	b.n	8005104 <dll_rfevt_btx+0x68>
            __DEBUG_ERRCODE_EVAL(=131);
 80050d4:	4b11      	ldr	r3, [pc, #68]	; (800511c <dll_rfevt_btx+0x80>)
 80050d6:	2283      	movs	r2, #131	; 0x83
 80050d8:	805a      	strh	r2, [r3, #2]
            dll_m2advp_refresh();
 80050da:	f7ff ffc5 	bl	8005068 <dll_m2advp_refresh>
        } return; // skip termination section
 80050de:	e01c      	b.n	800511a <dll_rfevt_btx+0x7e>
            __DEBUG_ERRCODE_EVAL(=132);
 80050e0:	4b0e      	ldr	r3, [pc, #56]	; (800511c <dll_rfevt_btx+0x80>)
 80050e2:	2284      	movs	r2, #132	; 0x84
 80050e4:	805a      	strh	r2, [r3, #2]
            follower                = session_follower();
 80050e6:	f000 fe85 	bl	8005df4 <session_follower>
            follower->counter       = dll.counter;
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <dll_rfevt_btx+0x84>)
 80050ec:	885a      	ldrh	r2, [r3, #2]
 80050ee:	8082      	strh	r2, [r0, #4]
            sys.task_RFA.event      = 0;
 80050f0:	4a0c      	ldr	r2, [pc, #48]	; (8005124 <dll_rfevt_btx+0x88>)
 80050f2:	2100      	movs	r1, #0
 80050f4:	7111      	strb	r1, [r2, #4]
            dll.comm.tc             = 2;    //TI2CLK(2);
 80050f6:	2202      	movs	r2, #2
 80050f8:	621a      	str	r2, [r3, #32]
            dll.comm.csmaca_params  = (M2_CSMACA_NOCSMA | M2_CSMACA_MACCA);
 80050fa:	322c      	adds	r2, #44	; 0x2c
 80050fc:	313c      	adds	r1, #60	; 0x3c
 80050fe:	5499      	strb	r1, [r3, r2]
            session_pop();
 8005100:	f000 fe1c 	bl	8005d3c <session_pop>
    DLL_SIG_RFTERMINATE(sys.task_RFA.event, flcode);
 8005104:	4d07      	ldr	r5, [pc, #28]	; (8005124 <dll_rfevt_btx+0x88>)
 8005106:	7928      	ldrb	r0, [r5, #4]
 8005108:	0021      	movs	r1, r4
 800510a:	f7fb fb91 	bl	8000830 <dll_sig_rfterminate>
    sys.task_RFA.event = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	712b      	strb	r3, [r5, #4]
    sys_preempt(&sys.task_RFA, 0);
 8005112:	1d28      	adds	r0, r5, #4
 8005114:	2100      	movs	r1, #0
 8005116:	f002 fd59 	bl	8007bcc <sys_preempt>
}
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	20002df0 	.word	0x20002df0
 8005120:	20002648 	.word	0x20002648
 8005124:	20002da8 	.word	0x20002da8

08005128 <dll_set_defaults>:
OT_WEAK void dll_set_defaults(m2session* s_active) {
 8005128:	b510      	push	{r4, lr}
 800512a:	0004      	movs	r4, r0
    ot_u16 follower         = session_follower_wait();
 800512c:	f000 fe6e 	bl	8005e0c <session_follower_wait>
    dll.comm.tc             = follower >> 3;
 8005130:	08c2      	lsrs	r2, r0, #3
 8005132:	b292      	uxth	r2, r2
 8005134:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <dll_set_defaults+0x4c>)
 8005136:	621a      	str	r2, [r3, #32]
    dll.comm.rx_timeout     = follower;
 8005138:	6298      	str	r0, [r3, #40]	; 0x28
    dll.comm.csmaca_params  = M2_CSMACA_MACCA;
 800513a:	222e      	movs	r2, #46	; 0x2e
 800513c:	2138      	movs	r1, #56	; 0x38
 800513e:	5499      	strb	r1, [r3, r2]
    dll.comm.redundants     = ((s_active->netstate & M2_NETSTATE_RX) == 0);
 8005140:	79e2      	ldrb	r2, [r4, #7]
 8005142:	0952      	lsrs	r2, r2, #5
 8005144:	2001      	movs	r0, #1
 8005146:	2101      	movs	r1, #1
 8005148:	404a      	eors	r2, r1
 800514a:	2101      	movs	r1, #1
 800514c:	400a      	ands	r2, r1
 800514e:	312e      	adds	r1, #46	; 0x2e
 8005150:	545a      	strb	r2, [r3, r1]
    dll.comm.tx_channels    = 1;
 8005152:	2230      	movs	r2, #48	; 0x30
 8005154:	5498      	strb	r0, [r3, r2]
    dll.comm.rx_channels    = 1;
 8005156:	3201      	adds	r2, #1
 8005158:	5498      	strb	r0, [r3, r2]
    dll.comm.tx_chanlist    = &dll.comm.scratch[0];
 800515a:	001a      	movs	r2, r3
 800515c:	322c      	adds	r2, #44	; 0x2c
 800515e:	635a      	str	r2, [r3, #52]	; 0x34
    dll.comm.rx_chanlist    = &dll.comm.scratch[1];
 8005160:	001a      	movs	r2, r3
 8005162:	322d      	adds	r2, #45	; 0x2d
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
    dll.comm.scratch[0]     = s_active->channel;
 8005166:	79a1      	ldrb	r1, [r4, #6]
 8005168:	222c      	movs	r2, #44	; 0x2c
 800516a:	5499      	strb	r1, [r3, r2]
    dll.comm.scratch[1]     = s_active->channel;
 800516c:	79a1      	ldrb	r1, [r4, #6]
 800516e:	3201      	adds	r2, #1
 8005170:	5499      	strb	r1, [r3, r2]
}
 8005172:	bd10      	pop	{r4, pc}
 8005174:	20002648 	.word	0x20002648

08005178 <dll_default_applet>:
OT_WEAK void dll_default_applet(m2session* active) {
 8005178:	b510      	push	{r4, lr}
    dll_set_defaults(active);
 800517a:	f7ff ffd5 	bl	8005128 <dll_set_defaults>
}
 800517e:	bd10      	pop	{r4, pc}

08005180 <dll_scan_applet>:
OT_WEAK void dll_scan_applet(m2session* active) {
 8005180:	b510      	push	{r4, lr}
 8005182:	0004      	movs	r4, r0
    dll_set_defaults(active);
 8005184:	f7ff ffd0 	bl	8005128 <dll_set_defaults>
    scan_code       = active->extra;
 8005188:	7a20      	ldrb	r0, [r4, #8]
    active->extra   = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	7223      	strb	r3, [r4, #8]
    timeout         = otutils_calc_timeout(scan_code);
 800518e:	f002 f852 	bl	8007236 <otutils_calc_timeout>
    if (timeout > 65535) {
 8005192:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <dll_scan_applet+0x24>)
 8005194:	4298      	cmp	r0, r3
 8005196:	dd00      	ble.n	800519a <dll_scan_applet+0x1a>
        timeout = 65535;
 8005198:	0018      	movs	r0, r3
    dll.comm.rx_timeout = (ot_u16)timeout;
 800519a:	0400      	lsls	r0, r0, #16
 800519c:	0c00      	lsrs	r0, r0, #16
 800519e:	4b02      	ldr	r3, [pc, #8]	; (80051a8 <dll_scan_applet+0x28>)
 80051a0:	6298      	str	r0, [r3, #40]	; 0x28
}
 80051a2:	bd10      	pop	{r4, pc}
 80051a4:	0000ffff 	.word	0x0000ffff
 80051a8:	20002648 	.word	0x20002648

080051ac <dll_beacon_applet>:
OT_WEAK void dll_beacon_applet(m2session* active) {
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	0004      	movs	r4, r0
    b_params        = active->extra;
 80051b2:	7a05      	ldrb	r5, [r0, #8]
    active->extra   = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	7203      	strb	r3, [r0, #8]
    dll_set_defaults(active);
 80051b8:	f7ff ffb6 	bl	8005128 <dll_set_defaults>
    dll.comm.tc             = M2_PARAM_BEACON_TCA;  //TI2CLK(M2_PARAM_BEACON_TCA);
 80051bc:	4b41      	ldr	r3, [pc, #260]	; (80052c4 <dll_beacon_applet+0x118>)
 80051be:	220c      	movs	r2, #12
 80051c0:	621a      	str	r2, [r3, #32]
    dll.comm.rx_timeout     = (b_params & 0x02) ? 0 : rm2_default_tgd(active->channel);
 80051c2:	07ab      	lsls	r3, r5, #30
 80051c4:	d549      	bpl.n	800525a <dll_beacon_applet+0xae>
 80051c6:	2000      	movs	r0, #0
 80051c8:	4b3e      	ldr	r3, [pc, #248]	; (80052c4 <dll_beacon_applet+0x118>)
 80051ca:	6298      	str	r0, [r3, #40]	; 0x28
    dll.comm.csmaca_params |= (b_params & 0x04) | M2_CSMACA_NA2P | M2_CSMACA_MACCA;
 80051cc:	202e      	movs	r0, #46	; 0x2e
 80051ce:	2104      	movs	r1, #4
 80051d0:	4029      	ands	r1, r5
 80051d2:	5c1a      	ldrb	r2, [r3, r0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	2138      	movs	r1, #56	; 0x38
 80051d8:	430a      	orrs	r2, r1
 80051da:	541a      	strb	r2, [r3, r0]
    dll.comm.redundants     = dll.netconf.b_attempts;
 80051dc:	7f59      	ldrb	r1, [r3, #29]
 80051de:	222f      	movs	r2, #47	; 0x2f
 80051e0:	5499      	strb	r1, [r3, r2]
    if (dll.netconf.btemp[0] & 0x80) {
 80051e2:	799b      	ldrb	r3, [r3, #6]
 80051e4:	b25b      	sxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	db3b      	blt.n	8005262 <dll_beacon_applet+0xb6>
		m2np_header(active, M2RT_BROADCAST, M2FI_FRDIALOG);
 80051ea:	2200      	movs	r2, #0
 80051ec:	2101      	movs	r1, #1
 80051ee:	0020      	movs	r0, r4
 80051f0:	f000 f9ce 	bl	8005590 <m2np_header>
		cmd_ext     = (b_params & 0x06);                            // Normal extension bits
 80051f4:	2606      	movs	r6, #6
 80051f6:	402e      	ands	r6, r5
		cmd_ext    |= (dll.netconf.btemp[4] == 0) << 6;             // Announcement No-File bit
 80051f8:	4b32      	ldr	r3, [pc, #200]	; (80052c4 <dll_beacon_applet+0x118>)
 80051fa:	7a9b      	ldrb	r3, [r3, #10]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d157      	bne.n	80052b0 <dll_beacon_applet+0x104>
 8005200:	3340      	adds	r3, #64	; 0x40
 8005202:	431e      	orrs	r6, r3
		cmd_code    = 0x20 | (b_params & 1) | ((cmd_ext!=0) << 7);
 8005204:	2401      	movs	r4, #1
 8005206:	402c      	ands	r4, r5
 8005208:	2320      	movs	r3, #32
 800520a:	431c      	orrs	r4, r3
 800520c:	2e00      	cmp	r6, #0
 800520e:	d051      	beq.n	80052b4 <dll_beacon_applet+0x108>
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	425b      	negs	r3, r3
 8005214:	431c      	orrs	r4, r3
 8005216:	b264      	sxtb	r4, r4
 8005218:	b2e4      	uxtb	r4, r4
		q_writebyte(&txq, cmd_code);
 800521a:	0021      	movs	r1, r4
 800521c:	482a      	ldr	r0, [pc, #168]	; (80052c8 <dll_beacon_applet+0x11c>)
 800521e:	f001 ff65 	bl	80070ec <q_writebyte>
		if (cmd_code) {
 8005222:	2c00      	cmp	r4, #0
 8005224:	d148      	bne.n	80052b8 <dll_beacon_applet+0x10c>
		q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
 8005226:	4c27      	ldr	r4, [pc, #156]	; (80052c4 <dll_beacon_applet+0x118>)
 8005228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800522a:	b2d9      	uxtb	r1, r3
 800522c:	4826      	ldr	r0, [pc, #152]	; (80052c8 <dll_beacon_applet+0x11c>)
 800522e:	f001 ff5d 	bl	80070ec <q_writebyte>
		if (dll.netconf.btemp[4] != 0) {
 8005232:	7aa3      	ldrb	r3, [r4, #10]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00c      	beq.n	8005252 <dll_beacon_applet+0xa6>
			q_init(&beacon_queue, &dll.netconf.btemp[4], 4);
 8005238:	2204      	movs	r2, #4
 800523a:	4924      	ldr	r1, [pc, #144]	; (80052cc <dll_beacon_applet+0x120>)
 800523c:	a801      	add	r0, sp, #4
 800523e:	f001 ff37 	bl	80070b0 <q_init>
			if (m2qp_isf_call((b_params & 1), &beacon_queue, AUTH_GUEST) < 0) {
 8005242:	2001      	movs	r0, #1
 8005244:	4028      	ands	r0, r5
 8005246:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <dll_beacon_applet+0x124>)
 8005248:	a901      	add	r1, sp, #4
 800524a:	f001 f91d 	bl	8006488 <m2qp_isf_call>
 800524e:	2800      	cmp	r0, #0
 8005250:	db29      	blt.n	80052a6 <dll_beacon_applet+0xfa>
		m2np_footer();
 8005252:	f000 fa67 	bl	8005724 <m2np_footer>
}
 8005256:	b006      	add	sp, #24
 8005258:	bd70      	pop	{r4, r5, r6, pc}
    dll.comm.rx_timeout     = (b_params & 0x02) ? 0 : rm2_default_tgd(active->channel);
 800525a:	79a0      	ldrb	r0, [r4, #6]
 800525c:	f7fc fc94 	bl	8001b88 <rm2_default_tgd>
 8005260:	e7b2      	b.n	80051c8 <dll_beacon_applet+0x1c>
    	ot_memset(beacon_tgram, 0, 8);
 8005262:	3a27      	subs	r2, #39	; 0x27
 8005264:	2100      	movs	r1, #0
 8005266:	a801      	add	r0, sp, #4
 8005268:	f003 fb78 	bl	800895c <ot_memset>
    	active->netstate |= M2_NETFLAG_BG;
 800526c:	79e3      	ldrb	r3, [r4, #7]
 800526e:	2240      	movs	r2, #64	; 0x40
 8005270:	4313      	orrs	r3, r2
 8005272:	71e3      	strb	r3, [r4, #7]
    	fp = vl_open(VL_ISF_BLOCKID, dll.netconf.btemp[5], VL_ACCESS_R, AUTH_GUEST);
 8005274:	4b13      	ldr	r3, [pc, #76]	; (80052c4 <dll_beacon_applet+0x118>)
 8005276:	7ad9      	ldrb	r1, [r3, #11]
 8005278:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <dll_beacon_applet+0x124>)
 800527a:	2224      	movs	r2, #36	; 0x24
 800527c:	2003      	movs	r0, #3
 800527e:	f002 f9d1 	bl	8007624 <vl_open>
 8005282:	1e04      	subs	r4, r0, #0
    	if (fp != NULL) {
 8005284:	d007      	beq.n	8005296 <dll_beacon_applet+0xea>
    		vl_load(fp, dll.netconf.btemp[4], beacon_tgram);
 8005286:	4b0f      	ldr	r3, [pc, #60]	; (80052c4 <dll_beacon_applet+0x118>)
 8005288:	7a99      	ldrb	r1, [r3, #10]
 800528a:	aa01      	add	r2, sp, #4
 800528c:	f002 fa25 	bl	80076da <vl_load>
    		vl_close(fp);
 8005290:	0020      	movs	r0, r4
 8005292:	f002 fa83 	bl	800779c <vl_close>
    	if (otapi_new_telegram(token, dll.netconf.btemp[5], beacon_tgram) == 0) {
 8005296:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <dll_beacon_applet+0x118>)
 8005298:	7ad9      	ldrb	r1, [r3, #11]
 800529a:	aa01      	add	r2, sp, #4
 800529c:	480d      	ldr	r0, [pc, #52]	; (80052d4 <dll_beacon_applet+0x128>)
 800529e:	f7ff f94b 	bl	8004538 <otapi_new_telegram>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d1d7      	bne.n	8005256 <dll_beacon_applet+0xaa>
	session_pop();
 80052a6:	f000 fd49 	bl	8005d3c <session_pop>
	dll_idle();
 80052aa:	f7ff fbbf 	bl	8004a2c <dll_idle>
	return;
 80052ae:	e7d2      	b.n	8005256 <dll_beacon_applet+0xaa>
		cmd_ext    |= (dll.netconf.btemp[4] == 0) << 6;             // Announcement No-File bit
 80052b0:	2300      	movs	r3, #0
 80052b2:	e7a6      	b.n	8005202 <dll_beacon_applet+0x56>
		cmd_code    = 0x20 | (b_params & 1) | ((cmd_ext!=0) << 7);
 80052b4:	2300      	movs	r3, #0
 80052b6:	e7ad      	b.n	8005214 <dll_beacon_applet+0x68>
			q_writebyte(&txq, cmd_ext);
 80052b8:	0031      	movs	r1, r6
 80052ba:	4803      	ldr	r0, [pc, #12]	; (80052c8 <dll_beacon_applet+0x11c>)
 80052bc:	f001 ff16 	bl	80070ec <q_writebyte>
 80052c0:	e7b1      	b.n	8005226 <dll_beacon_applet+0x7a>
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	20002648 	.word	0x20002648
 80052c8:	20002d68 	.word	0x20002d68
 80052cc:	20002652 	.word	0x20002652
 80052d0:	20002738 	.word	0x20002738
 80052d4:	01020304 	.word	0x01020304

080052d8 <sub_default_idle>:
}
 80052d8:	2001      	movs	r0, #1
 80052da:	4770      	bx	lr

080052dc <sub_dll_flush>:
void sub_dll_flush(void) {
 80052dc:	b510      	push	{r4, lr}
	if (radio.state != RADIO_Idle) {
 80052de:	4b0f      	ldr	r3, [pc, #60]	; (800531c <sub_dll_flush+0x40>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d116      	bne.n	8005314 <sub_dll_flush+0x38>
    rm2_mac_configure();
 80052e6:	f7fc f81d 	bl	8001324 <rm2_mac_configure>
    task = &sys.task_HSS;
 80052ea:	4b0d      	ldr	r3, [pc, #52]	; (8005320 <sub_dll_flush+0x44>)
        task->cursor   = 0;
 80052ec:	2200      	movs	r2, #0
 80052ee:	705a      	strb	r2, [r3, #1]
        task->reserve  = 1;
 80052f0:	2101      	movs	r1, #1
 80052f2:	7099      	strb	r1, [r3, #2]
        task->latency  = 255;
 80052f4:	31fe      	adds	r1, #254	; 0xfe
 80052f6:	70d9      	strb	r1, [r3, #3]
        task->nextevent= 0;
 80052f8:	605a      	str	r2, [r3, #4]
        task++;
 80052fa:	3308      	adds	r3, #8
	} while (task < &sys.task[SSS_INDEX+1]);
 80052fc:	4a09      	ldr	r2, [pc, #36]	; (8005324 <sub_dll_flush+0x48>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d3f4      	bcc.n	80052ec <sub_dll_flush+0x10>
    session_init();
 8005302:	f000 fc7b 	bl	8005bfc <session_init>
    dll.idle_state  = sub_default_idle();
 8005306:	f7ff ffe7 	bl	80052d8 <sub_default_idle>
 800530a:	4b07      	ldr	r3, [pc, #28]	; (8005328 <sub_dll_flush+0x4c>)
 800530c:	7018      	strb	r0, [r3, #0]
    dll_idle();
 800530e:	f7ff fb8d 	bl	8004a2c <dll_idle>
}
 8005312:	bd10      	pop	{r4, pc}
		rm2_kill();
 8005314:	f7fc fa22 	bl	800175c <rm2_kill>
 8005318:	e7e5      	b.n	80052e6 <sub_dll_flush+0xa>
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	200026b8 	.word	0x200026b8
 8005320:	20002dbc 	.word	0x20002dbc
 8005324:	20002dd4 	.word	0x20002dd4
 8005328:	20002648 	.word	0x20002648

0800532c <dll_refresh>:
OT_WEAK void dll_refresh(void) {
 800532c:	b570      	push	{r4, r5, r6, lr}
    fp = ISF_open_su(0);
 800532e:	2000      	movs	r0, #0
 8005330:	f002 fa69 	bl	8007806 <ISF_open_su>
 8005334:	0005      	movs	r5, r0
    vl_load(fp, 10, dll.netconf.vid);
 8005336:	4c0f      	ldr	r4, [pc, #60]	; (8005374 <dll_refresh+0x48>)
 8005338:	0022      	movs	r2, r4
 800533a:	210a      	movs	r1, #10
 800533c:	f002 f9cd 	bl	80076da <vl_load>
    dll.netconf.dd_flags    = 0;
 8005340:	3c16      	subs	r4, #22
 8005342:	2300      	movs	r3, #0
 8005344:	7723      	strb	r3, [r4, #28]
    dll.netconf.hold_limit  = PLATFORM_ENDIAN16(dll.netconf.hold_limit);
 8005346:	8be3      	ldrh	r3, [r4, #30]
 8005348:	ba5b      	rev16	r3, r3
 800534a:	83e3      	strh	r3, [r4, #30]
    vl_close(fp);
 800534c:	0028      	movs	r0, r5
 800534e:	f002 fa25 	bl	800779c <vl_close>
    fp = ISF_open_su(1);
 8005352:	2001      	movs	r0, #1
 8005354:	f002 fa57 	bl	8007806 <ISF_open_su>
 8005358:	0005      	movs	r5, r0
    vl_load(fp, 8, dll.netconf.uid);
 800535a:	0022      	movs	r2, r4
 800535c:	320e      	adds	r2, #14
 800535e:	2108      	movs	r1, #8
 8005360:	f002 f9bb 	bl	80076da <vl_load>
    vl_close(fp);
 8005364:	0028      	movs	r0, r5
 8005366:	f002 fa19 	bl	800779c <vl_close>
    dll_refresh_rts();
 800536a:	f7ff fb5d 	bl	8004a28 <dll_refresh_rts>
    sub_dll_flush();
 800536e:	f7ff ffb5 	bl	80052dc <sub_dll_flush>
}
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	2000265e 	.word	0x2000265e

08005378 <dll_init>:
OT_WEAK void dll_init(void) {
 8005378:	b510      	push	{r4, lr}
    radio_init();
 800537a:	f7fb ff45 	bl	8001208 <radio_init>
    network_init();
 800537e:	f000 f8ef 	bl	8005560 <network_init>
    m2qp_init();
 8005382:	f000 fdeb 	bl	8005f5c <m2qp_init>
    auth_init();
 8005386:	f001 fd75 	bl	8006e74 <auth_init>
    dll_refresh();
 800538a:	f7ff ffcf 	bl	800532c <dll_refresh>
}
 800538e:	bd10      	pop	{r4, pc}

08005390 <dll_systask_rf>:
OT_WEAK void dll_systask_rf(ot_task task) {
 8005390:	b510      	push	{r4, lr}
 8005392:	0004      	movs	r4, r0
        switch (sys.task_RFA.event) {
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <dll_systask_rf+0x4c>)
 8005396:	791b      	ldrb	r3, [r3, #4]
 8005398:	2b03      	cmp	r3, #3
 800539a:	d015      	beq.n	80053c8 <dll_systask_rf+0x38>
 800539c:	d805      	bhi.n	80053aa <dll_systask_rf+0x1a>
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d00c      	beq.n	80053bc <dll_systask_rf+0x2c>
 80053a2:	d80e      	bhi.n	80053c2 <dll_systask_rf+0x32>
            case 0: dll_refresh();          break;
 80053a4:	f7ff ffc2 	bl	800532c <dll_refresh>
}
 80053a8:	bd10      	pop	{r4, pc}
        switch (sys.task_RFA.event) {
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	d012      	beq.n	80053d4 <dll_systask_rf+0x44>
 80053ae:	d30e      	bcc.n	80053ce <dll_systask_rf+0x3e>
 80053b0:	2bff      	cmp	r3, #255	; 0xff
 80053b2:	d1f9      	bne.n	80053a8 <dll_systask_rf+0x18>
            case 255: task->cursor = radio_getpwrcode(); break;
 80053b4:	f7fc fba0 	bl	8001af8 <radio_getpwrcode>
 80053b8:	7060      	strb	r0, [r4, #1]
}
 80053ba:	e7f5      	b.n	80053a8 <dll_systask_rf+0x18>
            case 1: dll_processing();       break;
 80053bc:	f7ff fcf4 	bl	8004da8 <dll_processing>
 80053c0:	e7f2      	b.n	80053a8 <dll_systask_rf+0x18>
            case 2: dll_activate();         break;
 80053c2:	f7ff fe13 	bl	8004fec <dll_activate>
 80053c6:	e7ef      	b.n	80053a8 <dll_systask_rf+0x18>
            case 3: dll_scan_timeout();    break;
 80053c8:	f7ff fe32 	bl	8005030 <dll_scan_timeout>
 80053cc:	e7ec      	b.n	80053a8 <dll_systask_rf+0x18>
            case 5: rm2_kill();             break;
 80053ce:	f7fc f9c5 	bl	800175c <rm2_kill>
 80053d2:	e7e9      	b.n	80053a8 <dll_systask_rf+0x18>
            case 6: rm2_decode_s2();        break;
 80053d4:	f7fc f924 	bl	8001620 <rm2_decode_s2>
 80053d8:	e7e6      	b.n	80053a8 <dll_systask_rf+0x18>
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	20002da8 	.word	0x20002da8

080053e0 <dll_systask_holdscan>:
OT_WEAK void dll_systask_holdscan(ot_task task) {
 80053e0:	b510      	push	{r4, lr}
    if (task->event == 0) return;
 80053e2:	7803      	ldrb	r3, [r0, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00e      	beq.n	8005406 <dll_systask_holdscan+0x26>
    if (dll.counter != 0) {
 80053e8:	4b0c      	ldr	r3, [pc, #48]	; (800541c <dll_systask_holdscan+0x3c>)
 80053ea:	885b      	ldrh	r3, [r3, #2]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10b      	bne.n	8005408 <dll_systask_holdscan+0x28>
        dll.idle_state      = sub_default_idle();
 80053f0:	f7ff ff72 	bl	80052d8 <sub_default_idle>
 80053f4:	4b09      	ldr	r3, [pc, #36]	; (800541c <dll_systask_holdscan+0x3c>)
 80053f6:	7018      	strb	r0, [r3, #0]
        sys.task_HSS.event  = 0;
 80053f8:	4b09      	ldr	r3, [pc, #36]	; (8005420 <dll_systask_holdscan+0x40>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	751a      	strb	r2, [r3, #20]
        sys.task_HSS.cursor = 0;
 80053fe:	755a      	strb	r2, [r3, #21]
        sys.task_SSS.event  = 5;
 8005400:	3224      	adds	r2, #36	; 0x24
 8005402:	2105      	movs	r1, #5
 8005404:	5499      	strb	r1, [r3, r2]
}
 8005406:	bd10      	pop	{r4, pc}
        dll.counter -= (sys.task_HSS.cursor == 0);
 8005408:	4a05      	ldr	r2, [pc, #20]	; (8005420 <dll_systask_holdscan+0x40>)
 800540a:	7d52      	ldrb	r2, [r2, #21]
 800540c:	4251      	negs	r1, r2
 800540e:	414a      	adcs	r2, r1
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	4a02      	ldr	r2, [pc, #8]	; (800541c <dll_systask_holdscan+0x3c>)
 8005414:	8053      	strh	r3, [r2, #2]
        dll_systask_sleepscan(task);
 8005416:	f7ff fcf5 	bl	8004e04 <dll_systask_sleepscan>
 800541a:	e7f4      	b.n	8005406 <dll_systask_holdscan+0x26>
 800541c:	20002648 	.word	0x20002648
 8005420:	20002da8 	.word	0x20002da8

08005424 <crc0B_table>:
    0x03, 0x08, 0x15, 0x1E, 0x04, 0x0F, 0x12, 0x19,
    0x0D, 0x06, 0x1B, 0x10, 0x0A, 0x01, 0x1C, 0x17
};

ot_u8 crc0B_table(ot_u8* data) {
    ot_u8 a = (data[0] >> 3);
 8005424:	7802      	ldrb	r2, [r0, #0]
 8005426:	08d1      	lsrs	r1, r2, #3
    ot_u8 b = ((data[1] >> 6) | (data[0] << 2)) & 0x1f;
 8005428:	7843      	ldrb	r3, [r0, #1]
 800542a:	0092      	lsls	r2, r2, #2
 800542c:	099b      	lsrs	r3, r3, #6
 800542e:	4313      	orrs	r3, r2
 8005430:	221f      	movs	r2, #31
 8005432:	4013      	ands	r3, r2
    return crc0B_5t5[ crc0B_0t5[a] ^ b ];
 8005434:	4a03      	ldr	r2, [pc, #12]	; (8005444 <crc0B_table+0x20>)
 8005436:	5c51      	ldrb	r1, [r2, r1]
 8005438:	404b      	eors	r3, r1
 800543a:	18d2      	adds	r2, r2, r3
 800543c:	2320      	movs	r3, #32
 800543e:	5cd0      	ldrb	r0, [r2, r3]
}
 8005440:	4770      	bx	lr
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	20000108 	.word	0x20000108

08005448 <em2_add_crc5>:

void em2_add_crc5() {
 8005448:	b510      	push	{r4, lr}
    txq.front[1] &= ~0x1f;
 800544a:	4a07      	ldr	r2, [pc, #28]	; (8005468 <em2_add_crc5+0x20>)
 800544c:	68d1      	ldr	r1, [r2, #12]
 800544e:	784b      	ldrb	r3, [r1, #1]
 8005450:	201f      	movs	r0, #31
 8005452:	4383      	bics	r3, r0
 8005454:	704b      	strb	r3, [r1, #1]
    txq.front[1] |= crc0B_table(txq.front);
 8005456:	68d4      	ldr	r4, [r2, #12]
 8005458:	0020      	movs	r0, r4
 800545a:	f7ff ffe3 	bl	8005424 <crc0B_table>
 800545e:	7863      	ldrb	r3, [r4, #1]
 8005460:	4318      	orrs	r0, r3
 8005462:	7060      	strb	r0, [r4, #1]
}
 8005464:	bd10      	pop	{r4, pc}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	20002d68 	.word	0x20002d68

0800546c <em2_check_crc5>:

ot_u8 em2_check_crc5() {
 800546c:	b510      	push	{r4, lr}
    ot_u8 crc5_val;
    crc5_val = crc0B_table(rxq.front);
 800546e:	4b05      	ldr	r3, [pc, #20]	; (8005484 <em2_check_crc5+0x18>)
 8005470:	68dc      	ldr	r4, [r3, #12]
 8005472:	0020      	movs	r0, r4
 8005474:	f7ff ffd6 	bl	8005424 <crc0B_table>
    return ((rxq.front[1] & 0x1f) - crc5_val);
 8005478:	7862      	ldrb	r2, [r4, #1]
 800547a:	231f      	movs	r3, #31
 800547c:	4013      	ands	r3, r2
 800547e:	1a18      	subs	r0, r3, r0
 8005480:	b2c0      	uxtb	r0, r0
}
 8005482:	bd10      	pop	{r4, pc}
 8005484:	20002d54 	.word	0x20002d54

08005488 <sub_apply_subnet_flags>:
#include <m2/dll.h>
#include <m2/m2task.h>
#include <m2/session.h>


void sub_apply_subnet_flags(session_tmpl* s_tmpl) {
 8005488:	b510      	push	{r4, lr}
    // Apply custom-masked subnet and flags to session (typically unused)
    s_tmpl->subnet  = (dll.netconf.subnet & ~s_tmpl->subnetmask) | \
 800548a:	490a      	ldr	r1, [pc, #40]	; (80054b4 <sub_apply_subnet_flags+0x2c>)
 800548c:	2318      	movs	r3, #24
 800548e:	56cb      	ldrsb	r3, [r1, r3]
 8005490:	78c4      	ldrb	r4, [r0, #3]
 8005492:	43a3      	bics	r3, r4
 8005494:	b25b      	sxtb	r3, r3
                                        (s_tmpl->subnet & s_tmpl->subnetmask);
 8005496:	7882      	ldrb	r2, [r0, #2]
    s_tmpl->subnet  = (dll.netconf.subnet & ~s_tmpl->subnetmask) | \
 8005498:	4022      	ands	r2, r4
 800549a:	4313      	orrs	r3, r2
 800549c:	7083      	strb	r3, [r0, #2]
    s_tmpl->flags   = (dll.netconf.dd_flags & ~s_tmpl->flagmask) | \
 800549e:	231c      	movs	r3, #28
 80054a0:	56cb      	ldrsb	r3, [r1, r3]
 80054a2:	7941      	ldrb	r1, [r0, #5]
 80054a4:	438b      	bics	r3, r1
 80054a6:	b25b      	sxtb	r3, r3
                                        (s_tmpl->flags & s_tmpl->flagmask);
 80054a8:	7902      	ldrb	r2, [r0, #4]
    s_tmpl->flags   = (dll.netconf.dd_flags & ~s_tmpl->flagmask) | \
 80054aa:	400a      	ands	r2, r1
 80054ac:	4313      	orrs	r3, r2
 80054ae:	7103      	strb	r3, [r0, #4]
}
 80054b0:	bd10      	pop	{r4, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	20002648 	.word	0x20002648

080054b8 <sub_newtask>:


m2session* sub_newtask(session_tmpl* s_tmpl, ot_app applet, ot_u16 offset) {
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	0004      	movs	r4, r0
 80054bc:	000d      	movs	r5, r1
 80054be:	0016      	movs	r6, r2
    m2session* next;
    
    /// Make sure there is a free session... it is easiest this way
    if (session_numfree() < 1) {
 80054c0:	f000 fc6e 	bl	8005da0 <session_numfree>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	dd0f      	ble.n	80054e8 <sub_newtask+0x30>
        return NULL;
    }
    
    /// Create new session (session always begins with req tx)
    next = session_new(applet, offset, s_tmpl->channel, (M2_NETSTATE_INIT | M2_NETSTATE_REQTX));
 80054c8:	7862      	ldrb	r2, [r4, #1]
 80054ca:	2308      	movs	r3, #8
 80054cc:	0031      	movs	r1, r6
 80054ce:	0028      	movs	r0, r5
 80054d0:	f000 fba4 	bl	8005c1c <session_new>
 80054d4:	0005      	movs	r5, r0
    sub_apply_subnet_flags(s_tmpl);
 80054d6:	0020      	movs	r0, r4
 80054d8:	f7ff ffd6 	bl	8005488 <sub_apply_subnet_flags>
    next->subnet    = s_tmpl->subnet;
 80054dc:	78a3      	ldrb	r3, [r4, #2]
 80054de:	72ab      	strb	r3, [r5, #10]
    next->flags     = s_tmpl->flags;
 80054e0:	7923      	ldrb	r3, [r4, #4]
 80054e2:	72eb      	strb	r3, [r5, #11]

    return next;
}
 80054e4:	0028      	movs	r0, r5
 80054e6:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 80054e8:	2500      	movs	r5, #0
 80054ea:	e7fb      	b.n	80054e4 <sub_newtask+0x2c>

080054ec <m2task_immediate>:



m2session* m2task_immediate(session_tmpl* s_tmpl, ot_app applet) {
 80054ec:	b510      	push	{r4, lr}
/// This call doesn't actually cause the session to occur immediately,
/// but it will happen immediately following any sessions happenning 
/// at this very moment.
    return sub_newtask(s_tmpl, applet, 0);
 80054ee:	2200      	movs	r2, #0
 80054f0:	f7ff ffe2 	bl	80054b8 <sub_newtask>
}
 80054f4:	bd10      	pop	{r4, pc}
	...

080054f8 <m2task_advertise>:





m2session* m2task_advertise(advert_tmpl* adv_tmpl, session_tmpl* s_tmpl, ot_app applet) {
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	0005      	movs	r5, r0
 80054fc:	000c      	movs	r4, r1
 80054fe:	0016      	movs	r6, r2
/// creates two sessions: one for the flood and one for the request.
#   define _FLOOD_NETSTATE  (M2_NETFLAG_BG | M2_NETFLAG_STREAM | M2_NETSTATE_INIT | M2_NETSTATE_REQTX)
    m2session* next;
    
    /// Make sure there are at least two free sessions
    if (session_numfree() < 2) {
 8005500:	f000 fc4e 	bl	8005da0 <session_numfree>
 8005504:	2801      	cmp	r0, #1
 8005506:	dd1b      	ble.n	8005540 <m2task_advertise+0x48>
        return NULL;
    }

    /// Apply session flags
    sub_apply_subnet_flags(s_tmpl);
 8005508:	0020      	movs	r0, r4
 800550a:	f7ff ffbd 	bl	8005488 <sub_apply_subnet_flags>
    
    /// Only add the flood if the user isn't an idiot (or an algorithm of some sort)
    if (adv_tmpl->duration != 0) {
 800550e:	88ab      	ldrh	r3, [r5, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <m2task_advertise+0x32>
        next        = session_new(&dll_default_applet, 0, adv_tmpl->channel, _FLOOD_NETSTATE);
        next->subnet= s_tmpl->subnet;
        next->flags = s_tmpl->flags;
    }
    
    next        = session_new(applet, adv_tmpl->duration, s_tmpl->channel, M2_NETSTATE_REQTX);
 8005514:	88a9      	ldrh	r1, [r5, #4]
 8005516:	7862      	ldrb	r2, [r4, #1]
 8005518:	2300      	movs	r3, #0
 800551a:	0030      	movs	r0, r6
 800551c:	f000 fb7e 	bl	8005c1c <session_new>
    next->subnet= s_tmpl->subnet;
 8005520:	78a3      	ldrb	r3, [r4, #2]
 8005522:	7283      	strb	r3, [r0, #10]
    next->flags = s_tmpl->flags;
 8005524:	7923      	ldrb	r3, [r4, #4]
 8005526:	72c3      	strb	r3, [r0, #11]
    
    return next;
    
#   undef _FLOOD_NETSTATE
}
 8005528:	bd70      	pop	{r4, r5, r6, pc}
        next        = session_new(&dll_default_applet, 0, adv_tmpl->channel, _FLOOD_NETSTATE);
 800552a:	78ea      	ldrb	r2, [r5, #3]
 800552c:	23c8      	movs	r3, #200	; 0xc8
 800552e:	2100      	movs	r1, #0
 8005530:	4804      	ldr	r0, [pc, #16]	; (8005544 <m2task_advertise+0x4c>)
 8005532:	f000 fb73 	bl	8005c1c <session_new>
        next->subnet= s_tmpl->subnet;
 8005536:	78a3      	ldrb	r3, [r4, #2]
 8005538:	7283      	strb	r3, [r0, #10]
        next->flags = s_tmpl->flags;
 800553a:	7923      	ldrb	r3, [r4, #4]
 800553c:	72c3      	strb	r3, [r0, #11]
 800553e:	e7e9      	b.n	8005514 <m2task_advertise+0x1c>
        return NULL;
 8005540:	2000      	movs	r0, #0
 8005542:	e7f1      	b.n	8005528 <m2task_advertise+0x30>
 8005544:	08005179 	.word	0x08005179

08005548 <m2task_telegram>:




m2session* m2task_telegram(session_tmpl* s_tmpl, ot_app applet) {
 8005548:	b510      	push	{r4, lr}
 800554a:	0004      	movs	r4, r0
/// This is an experimental function
    m2session* next;
    next 			= sub_newtask(s_tmpl, applet, 0);
 800554c:	2200      	movs	r2, #0
 800554e:	f7ff ffb3 	bl	80054b8 <sub_newtask>
    next->netstate |= M2_NETFLAG_BG;
 8005552:	79c3      	ldrb	r3, [r0, #7]
 8005554:	2240      	movs	r2, #64	; 0x40
 8005556:	4313      	orrs	r3, r2
 8005558:	71c3      	strb	r3, [r0, #7]
    next->flags     = s_tmpl->flags;
 800555a:	7923      	ldrb	r3, [r4, #4]
 800555c:	72c3      	strb	r3, [r0, #11]

    return next;
}
 800555e:	bd10      	pop	{r4, pc}

08005560 <network_init>:
#   endif

    // Hop code should be explicitly set when producing an anycast or unicast 
    // transmission.  OTAPI will do this for you.
    //m2np.rt.hop_code  = 0;
}
 8005560:	4770      	bx	lr
	...

08005564 <m2np_put_deviceid>:
}




void m2np_put_deviceid(ot_bool use_vid) {
 8005564:	b510      	push	{r4, lr}
    if (use_vid) q_writeshort_be(&txq, *(ot_u16*)dll.netconf.vid);
 8005566:	2800      	cmp	r0, #0
 8005568:	d105      	bne.n	8005576 <m2np_put_deviceid+0x12>
    else         q_writestring(&txq, dll.netconf.uid, 8);
 800556a:	2208      	movs	r2, #8
 800556c:	4905      	ldr	r1, [pc, #20]	; (8005584 <m2np_put_deviceid+0x20>)
 800556e:	4806      	ldr	r0, [pc, #24]	; (8005588 <m2np_put_deviceid+0x24>)
 8005570:	f001 fe1b 	bl	80071aa <q_writestring>
}
 8005574:	bd10      	pop	{r4, pc}
    if (use_vid) q_writeshort_be(&txq, *(ot_u16*)dll.netconf.vid);
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <m2np_put_deviceid+0x28>)
 8005578:	8ad9      	ldrh	r1, [r3, #22]
 800557a:	4803      	ldr	r0, [pc, #12]	; (8005588 <m2np_put_deviceid+0x24>)
 800557c:	f001 fdc5 	bl	800710a <q_writeshort_be>
 8005580:	e7f8      	b.n	8005574 <m2np_put_deviceid+0x10>
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	20002656 	.word	0x20002656
 8005588:	20002d68 	.word	0x20002d68
 800558c:	20002648 	.word	0x20002648

08005590 <m2np_header>:
void m2np_header(m2session* active, ot_u8 addressing, ot_u8 nack) {
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	0004      	movs	r4, r0
 8005594:	000e      	movs	r6, r1
    q_empty(&txq);
 8005596:	4d2e      	ldr	r5, [pc, #184]	; (8005650 <m2np_header+0xc0>)
 8005598:	0028      	movs	r0, r5
 800559a:	f001 fd80 	bl	800709e <q_empty>
        active->flags  &= ~M2_FLAG_RSCODE;
 800559e:	7ae3      	ldrb	r3, [r4, #11]
 80055a0:	2208      	movs	r2, #8
 80055a2:	4393      	bics	r3, r2
 80055a4:	72e3      	strb	r3, [r4, #11]
        txq.back        = txq.getcursor + maxframe;
 80055a6:	686b      	ldr	r3, [r5, #4]
 80055a8:	33fe      	adds	r3, #254	; 0xfe
 80055aa:	612b      	str	r3, [r5, #16]
    q_writeshort(&txq, (ot_u16)((active->flags & M2_FLAG_RSCODE) << 3) );
 80055ac:	7ae3      	ldrb	r3, [r4, #11]
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	2140      	movs	r1, #64	; 0x40
 80055b2:	4019      	ands	r1, r3
 80055b4:	0028      	movs	r0, r5
 80055b6:	f001 fd9e 	bl	80070f6 <q_writeshort>
    q_writeshort(&txq, (ot_u16)active->subnet);
 80055ba:	7aa1      	ldrb	r1, [r4, #10]
 80055bc:	0028      	movs	r0, r5
 80055be:	f001 fd9a 	bl	80070f6 <q_writeshort>
    active->flags &= M2_FLAG_ROUTE;
 80055c2:	7ae3      	ldrb	r3, [r4, #11]
 80055c4:	2104      	movs	r1, #4
 80055c6:	4019      	ands	r1, r3
 80055c8:	72e1      	strb	r1, [r4, #11]
    if (active->netstate & M2_NETSTATE_RESP) {
 80055ca:	79e2      	ldrb	r2, [r4, #7]
 80055cc:	06d3      	lsls	r3, r2, #27
 80055ce:	d526      	bpl.n	800561e <m2np_header+0x8e>
        vid_valid   = (*(ot_u16*)dll.netconf.vid != 0) | (active->flags & 1);
 80055d0:	4b20      	ldr	r3, [pc, #128]	; (8005654 <m2np_header+0xc4>)
 80055d2:	8ad9      	ldrh	r1, [r3, #22]
 80055d4:	1e4b      	subs	r3, r1, #1
 80055d6:	4199      	sbcs	r1, r3
        addressing |= vid_valid << 4;                           // Use Source VID if valid
 80055d8:	0109      	lsls	r1, r1, #4
        addressing |= (active->flags & M2_FLAG_VID) >> 4;       // Use Target VID if Request source was VID
 80055da:	2302      	movs	r3, #2
 80055dc:	4319      	orrs	r1, r3
    m2np.header.fr_info     = addressing;
 80055de:	4b1e      	ldr	r3, [pc, #120]	; (8005658 <m2np_header+0xc8>)
 80055e0:	7719      	strb	r1, [r3, #28]
    m2np.header.fr_info    |= ((active->extra & 0x0F) != 0) << 3;   //M2FI_EXT
 80055e2:	b249      	sxtb	r1, r1
 80055e4:	7a23      	ldrb	r3, [r4, #8]
 80055e6:	071b      	lsls	r3, r3, #28
 80055e8:	d022      	beq.n	8005630 <m2np_header+0xa0>
 80055ea:	2308      	movs	r3, #8
 80055ec:	4319      	orrs	r1, r3
 80055ee:	b2c9      	uxtb	r1, r1
 80055f0:	4d19      	ldr	r5, [pc, #100]	; (8005658 <m2np_header+0xc8>)
 80055f2:	7729      	strb	r1, [r5, #28]
    q_writebyte(&txq, m2np.header.fr_info);
 80055f4:	4816      	ldr	r0, [pc, #88]	; (8005650 <m2np_header+0xc0>)
 80055f6:	f001 fd79 	bl	80070ec <q_writebyte>
    if (m2np.header.fr_info & M2FI_EXT) {
 80055fa:	7f2b      	ldrb	r3, [r5, #28]
 80055fc:	071b      	lsls	r3, r3, #28
 80055fe:	d419      	bmi.n	8005634 <m2np_header+0xa4>
    q_writebyte(&txq, active->dialog_id);
 8005600:	7a61      	ldrb	r1, [r4, #9]
 8005602:	4813      	ldr	r0, [pc, #76]	; (8005650 <m2np_header+0xc0>)
 8005604:	f001 fd72 	bl	80070ec <q_writebyte>
    m2np_put_deviceid( (ot_bool)(m2np.header.fr_info & M2FI_VID) );
 8005608:	4c13      	ldr	r4, [pc, #76]	; (8005658 <m2np_header+0xc8>)
 800560a:	7f23      	ldrb	r3, [r4, #28]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	2001      	movs	r0, #1
 8005610:	4018      	ands	r0, r3
 8005612:	f7ff ffa7 	bl	8005564 <m2np_put_deviceid>
    if (m2np.header.fr_info & M2FI_UCAST) {
 8005616:	7f23      	ldrb	r3, [r4, #28]
 8005618:	079b      	lsls	r3, r3, #30
 800561a:	d410      	bmi.n	800563e <m2np_header+0xae>
}
 800561c:	bd70      	pop	{r4, r5, r6, pc}
        active->flags      |= addressing;
 800561e:	4331      	orrs	r1, r6
 8005620:	72e1      	strb	r1, [r4, #11]
        active->netstate   |= (addressing & M2FI_UCAST);    // M2_NETFLAG_FIRSTRX == M2FI_UCAST
 8005622:	2302      	movs	r3, #2
 8005624:	401e      	ands	r6, r3
 8005626:	4316      	orrs	r6, r2
 8005628:	71e6      	strb	r6, [r4, #7]
        addressing          = active->flags & ~M2_FLAG_RSCODE;
 800562a:	3306      	adds	r3, #6
 800562c:	4399      	bics	r1, r3
 800562e:	e7d6      	b.n	80055de <m2np_header+0x4e>
    m2np.header.fr_info    |= ((active->extra & 0x0F) != 0) << 3;   //M2FI_EXT
 8005630:	2300      	movs	r3, #0
 8005632:	e7db      	b.n	80055ec <m2np_header+0x5c>
        q_writebyte(&txq, active->extra);
 8005634:	7a21      	ldrb	r1, [r4, #8]
 8005636:	4806      	ldr	r0, [pc, #24]	; (8005650 <m2np_header+0xc0>)
 8005638:	f001 fd58 	bl	80070ec <q_writebyte>
 800563c:	e7e0      	b.n	8005600 <m2np_header+0x70>
        ot_u8* tmp_id       = m2np.rt.dlog.value;
 800563e:	4b06      	ldr	r3, [pc, #24]	; (8005658 <m2np_header+0xc8>)
 8005640:	6899      	ldr	r1, [r3, #8]
        m2np.rt.dlog.value  = txq.putcursor;
 8005642:	4803      	ldr	r0, [pc, #12]	; (8005650 <m2np_header+0xc0>)
 8005644:	6882      	ldr	r2, [r0, #8]
 8005646:	609a      	str	r2, [r3, #8]
        q_writestring(&txq, tmp_id, m2np.rt.dlog.length);
 8005648:	791a      	ldrb	r2, [r3, #4]
 800564a:	f001 fdae 	bl	80071aa <q_writestring>
}
 800564e:	e7e5      	b.n	800561c <m2np_header+0x8c>
 8005650:	20002d68 	.word	0x20002d68
 8005654:	20002648 	.word	0x20002648
 8005658:	20002698 	.word	0x20002698

0800565c <m2np_idcmp>:



ot_bool m2np_idcmp(ot_int length, ot_u8* id) {
 800565c:	b530      	push	{r4, r5, lr}
    ot_u8* stored_id;
    ot_u8  check;
    
    // Don't match on vid == 0, that is reserved as unassigned value
    if ((length == 2) && (*(ot_u16*)dll.netconf.vid == 0)) {
 800565e:	2802      	cmp	r0, #2
 8005660:	d00a      	beq.n	8005678 <m2np_idcmp+0x1c>
        return False;
    }
    
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 8005662:	2808      	cmp	r0, #8
 8005664:	d00e      	beq.n	8005684 <m2np_idcmp+0x28>
 8005666:	4a2b      	ldr	r2, [pc, #172]	; (8005714 <m2np_idcmp+0xb8>)
    length      = 8 - length;
 8005668:	2308      	movs	r3, #8
 800566a:	1a18      	subs	r0, r3, r0
    check       = 0;
    
    switch (length & 7) {
 800566c:	2307      	movs	r3, #7
 800566e:	4018      	ands	r0, r3
 8005670:	0080      	lsls	r0, r0, #2
 8005672:	4b29      	ldr	r3, [pc, #164]	; (8005718 <m2np_idcmp+0xbc>)
 8005674:	581b      	ldr	r3, [r3, r0]
 8005676:	469f      	mov	pc, r3
    if ((length == 2) && (*(ot_u16*)dll.netconf.vid == 0)) {
 8005678:	4b28      	ldr	r3, [pc, #160]	; (800571c <m2np_idcmp+0xc0>)
 800567a:	8adb      	ldrh	r3, [r3, #22]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f0      	bne.n	8005662 <m2np_idcmp+0x6>
        return False;
 8005680:	2000      	movs	r0, #0
 8005682:	e033      	b.n	80056ec <m2np_idcmp+0x90>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 8005684:	4a26      	ldr	r2, [pc, #152]	; (8005720 <m2np_idcmp+0xc4>)
 8005686:	e7ef      	b.n	8005668 <m2np_idcmp+0xc>
        case 0: check |= *stored_id++ ^ *id++; 
 8005688:	7813      	ldrb	r3, [r2, #0]
 800568a:	7808      	ldrb	r0, [r1, #0]
 800568c:	4043      	eors	r3, r0
 800568e:	3201      	adds	r2, #1
 8005690:	3101      	adds	r1, #1
 8005692:	e000      	b.n	8005696 <m2np_idcmp+0x3a>
    check       = 0;
 8005694:	2300      	movs	r3, #0
        case 1: check |= *stored_id++ ^ *id++; 
 8005696:	7810      	ldrb	r0, [r2, #0]
 8005698:	780c      	ldrb	r4, [r1, #0]
 800569a:	4060      	eors	r0, r4
 800569c:	4303      	orrs	r3, r0
 800569e:	3201      	adds	r2, #1
 80056a0:	3101      	adds	r1, #1
        case 2: check |= *stored_id++ ^ *id++; 
 80056a2:	1c55      	adds	r5, r2, #1
 80056a4:	7810      	ldrb	r0, [r2, #0]
 80056a6:	1c4c      	adds	r4, r1, #1
 80056a8:	780a      	ldrb	r2, [r1, #0]
 80056aa:	4050      	eors	r0, r2
 80056ac:	4318      	orrs	r0, r3
        case 3: check |= *stored_id++ ^ *id++; 
 80056ae:	1c6a      	adds	r2, r5, #1
 80056b0:	782b      	ldrb	r3, [r5, #0]
 80056b2:	1c61      	adds	r1, r4, #1
 80056b4:	7824      	ldrb	r4, [r4, #0]
 80056b6:	4063      	eors	r3, r4
 80056b8:	4318      	orrs	r0, r3
        case 4: check |= *stored_id++ ^ *id++; 
 80056ba:	1c55      	adds	r5, r2, #1
 80056bc:	7813      	ldrb	r3, [r2, #0]
 80056be:	1c4c      	adds	r4, r1, #1
 80056c0:	780a      	ldrb	r2, [r1, #0]
 80056c2:	4053      	eors	r3, r2
 80056c4:	4303      	orrs	r3, r0
        case 5: check |= *stored_id++ ^ *id++; 
 80056c6:	1c6a      	adds	r2, r5, #1
 80056c8:	7828      	ldrb	r0, [r5, #0]
 80056ca:	1c61      	adds	r1, r4, #1
 80056cc:	7824      	ldrb	r4, [r4, #0]
 80056ce:	4060      	eors	r0, r4
 80056d0:	4303      	orrs	r3, r0
        case 6: check |= *stored_id++ ^ *id++; 
 80056d2:	1c54      	adds	r4, r2, #1
 80056d4:	7810      	ldrb	r0, [r2, #0]
 80056d6:	1c4a      	adds	r2, r1, #1
 80056d8:	7809      	ldrb	r1, [r1, #0]
 80056da:	4048      	eors	r0, r1
 80056dc:	4318      	orrs	r0, r3
        case 7: check |= *stored_id ^ *id;
 80056de:	7823      	ldrb	r3, [r4, #0]
 80056e0:	7812      	ldrb	r2, [r2, #0]
 80056e2:	4053      	eors	r3, r2
 80056e4:	4318      	orrs	r0, r3
                break;
    }
    
    return (ot_bool)(check == 0);
 80056e6:	4243      	negs	r3, r0
 80056e8:	4158      	adcs	r0, r3
 80056ea:	b2c0      	uxtb	r0, r0
}
 80056ec:	bd30      	pop	{r4, r5, pc}
    check       = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e7d7      	b.n	80056a2 <m2np_idcmp+0x46>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 80056f2:	0015      	movs	r5, r2
    switch (length & 7) {
 80056f4:	000c      	movs	r4, r1
    check       = 0;
 80056f6:	2000      	movs	r0, #0
 80056f8:	e7d9      	b.n	80056ae <m2np_idcmp+0x52>
 80056fa:	2000      	movs	r0, #0
 80056fc:	e7dd      	b.n	80056ba <m2np_idcmp+0x5e>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 80056fe:	0015      	movs	r5, r2
    switch (length & 7) {
 8005700:	000c      	movs	r4, r1
    check       = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	e7df      	b.n	80056c6 <m2np_idcmp+0x6a>
 8005706:	2300      	movs	r3, #0
 8005708:	e7e3      	b.n	80056d2 <m2np_idcmp+0x76>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 800570a:	0014      	movs	r4, r2
    switch (length & 7) {
 800570c:	000a      	movs	r2, r1
    check       = 0;
 800570e:	2000      	movs	r0, #0
 8005710:	e7e5      	b.n	80056de <m2np_idcmp+0x82>
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	2000265e 	.word	0x2000265e
 8005718:	0800b174 	.word	0x0800b174
 800571c:	20002648 	.word	0x20002648
 8005720:	20002656 	.word	0x20002656

08005724 <m2np_footer>:
#endif



#ifndef EXTF_m2np_footer
OT_WEAK void m2np_footer() {
 8005724:	b510      	push	{r4, lr}

    /// RS and CRC will be appended during encoding, and their extra length
    /// will be added to the frame length field.  -1 is because the length
    /// byte is not included in the length field.
    m2np_footer_END:
    txq.getcursor[0] = q_span(&txq) - 1;
 8005726:	4c04      	ldr	r4, [pc, #16]	; (8005738 <m2np_footer+0x14>)
 8005728:	0020      	movs	r0, r4
 800572a:	f001 fc97 	bl	800705c <q_span>
 800572e:	6863      	ldr	r3, [r4, #4]
 8005730:	3801      	subs	r0, #1
 8005732:	7018      	strb	r0, [r3, #0]
}
 8005734:	bd10      	pop	{r4, pc}
 8005736:	46c0      	nop			; (mov r8, r8)
 8005738:	20002d68 	.word	0x20002d68

0800573c <network_route_ff>:
ot_int network_route_ff(m2session* active) {
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	0004      	movs	r4, r0
    active->flags       = (rxq.front[1] & M2LC_RSCODE) >> 3;
 8005740:	4a48      	ldr	r2, [pc, #288]	; (8005864 <network_route_ff+0x128>)
 8005742:	68d3      	ldr	r3, [r2, #12]
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	10db      	asrs	r3, r3, #3
 8005748:	2508      	movs	r5, #8
 800574a:	402b      	ands	r3, r5
 800574c:	72c3      	strb	r3, [r0, #11]
    rxq.getcursor       = &rxq.front[4];
 800574e:	68d1      	ldr	r1, [r2, #12]
    m2np.header.fr_info = *rxq.getcursor++;
 8005750:	1d48      	adds	r0, r1, #5
 8005752:	6050      	str	r0, [r2, #4]
 8005754:	790b      	ldrb	r3, [r1, #4]
 8005756:	4a44      	ldr	r2, [pc, #272]	; (8005868 <network_route_ff+0x12c>)
 8005758:	7713      	strb	r3, [r2, #28]
    active->flags      |= (m2np.header.fr_info & ~M2_FLAG_RSCODE);     
 800575a:	b25b      	sxtb	r3, r3
 800575c:	2608      	movs	r6, #8
 800575e:	43b3      	bics	r3, r6
 8005760:	7ae6      	ldrb	r6, [r4, #11]
 8005762:	4333      	orrs	r3, r6
 8005764:	72e3      	strb	r3, [r4, #11]
    m2np.header.ext_info = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	7753      	strb	r3, [r2, #29]
    if (m2np.header.fr_info & M2FI_EXT) {
 800576a:	7f13      	ldrb	r3, [r2, #28]
 800576c:	421d      	tst	r5, r3
 800576e:	d005      	beq.n	800577c <network_route_ff+0x40>
        m2np.header.ext_info = *rxq.getcursor++;
 8005770:	1d88      	adds	r0, r1, #6
 8005772:	4a3c      	ldr	r2, [pc, #240]	; (8005864 <network_route_ff+0x128>)
 8005774:	6050      	str	r0, [r2, #4]
 8005776:	7949      	ldrb	r1, [r1, #5]
 8005778:	4a3b      	ldr	r2, [pc, #236]	; (8005868 <network_route_ff+0x12c>)
 800577a:	7751      	strb	r1, [r2, #29]
 800577c:	2503      	movs	r5, #3
 800577e:	401d      	ands	r5, r3
    use_m2np = ((m2np.header.fr_info & M2FI_ADDRMASK) != 0);
 8005780:	002b      	movs	r3, r5
 8005782:	1e5a      	subs	r2, r3, #1
 8005784:	4193      	sbcs	r3, r2
 8005786:	b2db      	uxtb	r3, r3
    if (active->netstate & M2_NETSTATE_CONNECTED) {
 8005788:	79e2      	ldrb	r2, [r4, #7]
 800578a:	07d1      	lsls	r1, r2, #31
 800578c:	d434      	bmi.n	80057f8 <network_route_ff+0xbc>
    else if (use_m2np) {
 800578e:	2d00      	cmp	r5, #0
 8005790:	d058      	beq.n	8005844 <network_route_ff+0x108>
        active->netstate  |= M2_NETSTATE_CONNECTED;
 8005792:	2301      	movs	r3, #1
 8005794:	431a      	orrs	r2, r3
 8005796:	71e2      	strb	r2, [r4, #7]
        active->subnet     = rxq.front[3];
 8005798:	4832      	ldr	r0, [pc, #200]	; (8005864 <network_route_ff+0x128>)
 800579a:	68c3      	ldr	r3, [r0, #12]
 800579c:	78db      	ldrb	r3, [r3, #3]
 800579e:	72a3      	strb	r3, [r4, #10]
        active->dialog_id  = q_readbyte(&rxq);
 80057a0:	f001 fcd3 	bl	800714a <q_readbyte>
 80057a4:	7260      	strb	r0, [r4, #9]
    if (m2np.header.fr_info & M2FI_DLLS) {
 80057a6:	4b30      	ldr	r3, [pc, #192]	; (8005868 <network_route_ff+0x12c>)
 80057a8:	7f1a      	ldrb	r2, [r3, #28]
 80057aa:	0653      	lsls	r3, r2, #25
 80057ac:	d44d      	bmi.n	800584a <network_route_ff+0x10e>
    if (use_m2np) {
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	d04e      	beq.n	8005850 <network_route_ff+0x114>
        m2np.rt.dlog.length = _idlen[ ((m2np.header.fr_info & M2FI_VID) != 0) ];
 80057b2:	0912      	lsrs	r2, r2, #4
 80057b4:	2301      	movs	r3, #1
 80057b6:	4013      	ands	r3, r2
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	4a2c      	ldr	r2, [pc, #176]	; (800586c <network_route_ff+0x130>)
 80057bc:	5cd1      	ldrb	r1, [r2, r3]
 80057be:	4d2a      	ldr	r5, [pc, #168]	; (8005868 <network_route_ff+0x12c>)
 80057c0:	7129      	strb	r1, [r5, #4]
        m2np.rt.dlog.value  = q_markbyte(&rxq, m2np.rt.dlog.length);
 80057c2:	b209      	sxth	r1, r1
 80057c4:	4827      	ldr	r0, [pc, #156]	; (8005864 <network_route_ff+0x128>)
 80057c6:	f001 fc8c 	bl	80070e2 <q_markbyte>
 80057ca:	60a8      	str	r0, [r5, #8]
        if ((m2np.header.fr_info & M2_FLAG_CRYPTO) == M2_FLAG_NLS) {
 80057cc:	7f2a      	ldrb	r2, [r5, #28]
 80057ce:	2360      	movs	r3, #96	; 0x60
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d03f      	beq.n	8005856 <network_route_ff+0x11a>
        if (m2np.header.fr_info & M2FI_UCAST) {
 80057d6:	0793      	lsls	r3, r2, #30
 80057d8:	d41a      	bmi.n	8005810 <network_route_ff+0xd4>
        m2np.rt.hop_code = 0;
 80057da:	4b23      	ldr	r3, [pc, #140]	; (8005868 <network_route_ff+0x12c>)
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
        if (m2np.header.fr_info & M2FI_ROUTE) {
 80057e0:	7f1b      	ldrb	r3, [r3, #28]
 80057e2:	075b      	lsls	r3, r3, #29
 80057e4:	d43a      	bmi.n	800585c <network_route_ff+0x120>
            route_val = m2qp_parse_frame(active);
 80057e6:	0020      	movs	r0, r4
 80057e8:	f000 fe32 	bl	8006450 <m2qp_parse_frame>
 80057ec:	1e04      	subs	r4, r0, #0
    if (route_val >= 0) {
 80057ee:	db01      	blt.n	80057f4 <network_route_ff+0xb8>
        m2np_footer( /* active */);
 80057f0:	f7ff ff98 	bl	8005724 <m2np_footer>
}
 80057f4:	0020      	movs	r0, r4
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
        active->dialog_id += use_m2np;
 80057f8:	7a66      	ldrb	r6, [r4, #9]
 80057fa:	199e      	adds	r6, r3, r6
 80057fc:	b2f6      	uxtb	r6, r6
 80057fe:	7266      	strb	r6, [r4, #9]
        if (active->dialog_id != q_readbyte(&rxq)) {
 8005800:	4818      	ldr	r0, [pc, #96]	; (8005864 <network_route_ff+0x128>)
 8005802:	f001 fca2 	bl	800714a <q_readbyte>
 8005806:	4286      	cmp	r6, r0
 8005808:	d0cd      	beq.n	80057a6 <network_route_ff+0x6a>
            return -1;
 800580a:	2401      	movs	r4, #1
 800580c:	4264      	negs	r4, r4
 800580e:	e7f1      	b.n	80057f4 <network_route_ff+0xb8>
            active->flags      |= (target_len << 4);        //sets M2_FLAG_VID (SRC)
 8005810:	2301      	movs	r3, #1
 8005812:	401a      	ands	r2, r3
 8005814:	0111      	lsls	r1, r2, #4
 8005816:	7ae3      	ldrb	r3, [r4, #11]
 8005818:	430b      	orrs	r3, r1
 800581a:	72e3      	strb	r3, [r4, #11]
            active->netstate   |= M2_NETFLAG_FIRSTRX;
 800581c:	79e3      	ldrb	r3, [r4, #7]
 800581e:	2102      	movs	r1, #2
 8005820:	430b      	orrs	r3, r1
 8005822:	71e3      	strb	r3, [r4, #7]
            target_len          = _idlen[ target_len ];
 8005824:	0052      	lsls	r2, r2, #1
 8005826:	4b11      	ldr	r3, [pc, #68]	; (800586c <network_route_ff+0x130>)
 8005828:	5ed5      	ldrsh	r5, [r2, r3]
            if (m2np_idcmp(target_len, q_markbyte(&rxq, target_len)) == False) {
 800582a:	0029      	movs	r1, r5
 800582c:	480d      	ldr	r0, [pc, #52]	; (8005864 <network_route_ff+0x128>)
 800582e:	f001 fc58 	bl	80070e2 <q_markbyte>
 8005832:	0001      	movs	r1, r0
 8005834:	0028      	movs	r0, r5
 8005836:	f7ff ff11 	bl	800565c <m2np_idcmp>
 800583a:	2800      	cmp	r0, #0
 800583c:	d1cd      	bne.n	80057da <network_route_ff+0x9e>
                return -1;
 800583e:	2401      	movs	r4, #1
 8005840:	4264      	negs	r4, r4
 8005842:	e7d7      	b.n	80057f4 <network_route_ff+0xb8>
        return -1;  //M2DP cannot be first frame!
 8005844:	2401      	movs	r4, #1
 8005846:	4264      	negs	r4, r4
 8005848:	e7d4      	b.n	80057f4 <network_route_ff+0xb8>
        return -1;
 800584a:	2401      	movs	r4, #1
 800584c:	4264      	negs	r4, r4
 800584e:	e7d1      	b.n	80057f4 <network_route_ff+0xb8>
        route_val = -1;     // placeholder until multiframe implemented
 8005850:	2401      	movs	r4, #1
 8005852:	4264      	negs	r4, r4
 8005854:	e7ce      	b.n	80057f4 <network_route_ff+0xb8>
            return -1;
 8005856:	2401      	movs	r4, #1
 8005858:	4264      	negs	r4, r4
 800585a:	e7cb      	b.n	80057f4 <network_route_ff+0xb8>
                return -1;
 800585c:	2401      	movs	r4, #1
 800585e:	4264      	negs	r4, r4
 8005860:	e7c8      	b.n	80057f4 <network_route_ff+0xb8>
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	20002d54 	.word	0x20002d54
 8005868:	20002698 	.word	0x20002698
 800586c:	0800b194 	.word	0x0800b194

08005870 <m2advp_parse>:
    //ot_u8   txadv_buffer[10];
#endif


#ifndef EXTF_m2advp_parse
OT_WEAK m2session* m2advp_parse(void) {
 8005870:	b570      	push	{r4, r5, r6, lr}
    ot_int      slop;
    m2session*	s_next;
    ot_u16      pkt_ti;

    // Get the counter-ETA information from the inbound frame
    count.ubyte[UPPER]  = rxq.getcursor[3];
 8005872:	4b13      	ldr	r3, [pc, #76]	; (80058c0 <m2advp_parse+0x50>)
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	78d3      	ldrb	r3, [r2, #3]
    count.ubyte[LOWER]  = rxq.getcursor[4];
 8005878:	7914      	ldrb	r4, [r2, #4]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	431c      	orrs	r4, r3
    count.ushort       &= 0x7FFF;
 800587e:	0464      	lsls	r4, r4, #17
 8005880:	0c64      	lsrs	r4, r4, #17

    // stores the bg packet duration of the active channel.  We need this
    // in order to deal with timing skew.
    pkt_ti  = rm2_bgpkt_duration();
 8005882:	f7fc f989 	bl	8001b98 <rm2_bgpkt_duration>

    // Account for "slop" due to clock deviation, process latency,
    // and other such things.  Thus the follow-up session is
    // either a second BG scan (if too much slop), or it is FG
    // listening for the request.
    slop = (count.ushort / OT_GPTIM_ERRDIV);
 8005886:	2300      	movs	r3, #0
    if (slop <= pkt_ti) {
 8005888:	4283      	cmp	r3, r0
 800588a:	dd0f      	ble.n	80058ac <m2advp_parse+0x3c>
        netstate    	= M2_NETSTATE_REQRX;
    }
    else {
    	count.ushort   -= slop;
        scancode        = 0x80;
        netstate        = M2_NETSTATE_REQRX | M2_NETFLAG_BG;
 800588c:	2660      	movs	r6, #96	; 0x60
        scancode        = 0x80;
 800588e:	2580      	movs	r5, #128	; 0x80
    }

    // ensure that count value is never negative.
    if (count.sshort < 0) {
 8005890:	0423      	lsls	r3, r4, #16
 8005892:	d413      	bmi.n	80058bc <m2advp_parse+0x4c>
        count.sshort = 0;
    }

    // The next session is written in-place of the current session
    s_next              = session_top();
 8005894:	f000 fa5e 	bl	8005d54 <session_top>
    s_next->applet      = &dll_scan_applet;
 8005898:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <m2advp_parse+0x54>)
 800589a:	6003      	str	r3, [r0, #0]
    s_next->counter     = count.ushort;
 800589c:	8084      	strh	r4, [r0, #4]
    s_next->channel     = rxq.getcursor[2];
 800589e:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <m2advp_parse+0x50>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	789b      	ldrb	r3, [r3, #2]
 80058a4:	7183      	strb	r3, [r0, #6]
    s_next->netstate    = netstate;
 80058a6:	71c6      	strb	r6, [r0, #7]
    s_next->extra       = scancode;
 80058a8:	7205      	strb	r5, [r0, #8]

    return s_next;
}
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
    	count.ushort   -= pkt_ti;
 80058ac:	1a24      	subs	r4, r4, r0
    	scancode        = otutils_encode_timeout(pkt_ti<<1);
 80058ae:	0040      	lsls	r0, r0, #1
 80058b0:	b280      	uxth	r0, r0
 80058b2:	f001 fccb 	bl	800724c <otutils_encode_timeout>
 80058b6:	0005      	movs	r5, r0
        netstate    	= M2_NETSTATE_REQRX;
 80058b8:	2620      	movs	r6, #32
 80058ba:	e7e9      	b.n	8005890 <m2advp_parse+0x20>
        count.sshort = 0;
 80058bc:	2400      	movs	r4, #0
 80058be:	e7e9      	b.n	8005894 <m2advp_parse+0x24>
 80058c0:	20002d54 	.word	0x20002d54
 80058c4:	08005181 	.word	0x08005181

080058c8 <m2advp_open>:
#endif



#ifndef EXTF_m2advp_open
OT_WEAK void m2advp_open(m2session* follower) {
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	0005      	movs	r5, r0
    q_empty(&txq);
 80058cc:	4c11      	ldr	r4, [pc, #68]	; (8005914 <m2advp_open+0x4c>)
 80058ce:	0020      	movs	r0, r4
 80058d0:	f001 fbe5 	bl	800709e <q_empty>
    txq.getcursor += 2;     //Bypass unused length and Link CTL bytes
 80058d4:	6863      	ldr	r3, [r4, #4]
 80058d6:	3302      	adds	r3, #2
 80058d8:	6063      	str	r3, [r4, #4]
    
    q_writebyte(&txq, (BG_FRAMESIZE-1));    //Dummy Length value (not actually sent)
 80058da:	2105      	movs	r1, #5
 80058dc:	0020      	movs	r0, r4
 80058de:	f001 fc05 	bl	80070ec <q_writebyte>
    q_writebyte(&txq, 0);                   //Dummy Link-Control (not actually sent)
 80058e2:	2100      	movs	r1, #0
 80058e4:	0020      	movs	r0, r4
 80058e6:	f001 fc01 	bl	80070ec <q_writebyte>
    q_writebyte(&txq, 0);                   //Dummy TX-EIRP (updated by RF driver)
 80058ea:	2100      	movs	r1, #0
 80058ec:	0020      	movs	r0, r4
 80058ee:	f001 fbfd 	bl	80070ec <q_writebyte>
    
    // This byte is two nibbles: Subnet specifier and AdvP ID (F)
    q_writebyte(&txq, (follower->subnet | 0x0F));
 80058f2:	7aa9      	ldrb	r1, [r5, #10]
 80058f4:	230f      	movs	r3, #15
 80058f6:	4319      	orrs	r1, r3
 80058f8:	0020      	movs	r0, r4
 80058fa:	f001 fbf7 	bl	80070ec <q_writebyte>
    
    // Follower session channel
    q_writebyte(&txq, follower->channel);
 80058fe:	79a9      	ldrb	r1, [r5, #6]
 8005900:	0020      	movs	r0, r4
 8005902:	f001 fbf3 	bl	80070ec <q_writebyte>
    
    // Follower wait time is set to dll counter
    dll.counter = follower->counter;
 8005906:	88a9      	ldrh	r1, [r5, #4]
 8005908:	4b03      	ldr	r3, [pc, #12]	; (8005918 <m2advp_open+0x50>)
 800590a:	8059      	strh	r1, [r3, #2]
    q_writeshort(&txq, follower->counter);
 800590c:	0020      	movs	r0, r4
 800590e:	f001 fbf2 	bl	80070f6 <q_writeshort>
}
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	20002d68 	.word	0x20002d68
 8005918:	20002648 	.word	0x20002648

0800591c <m2advp_update>:
#ifndef EXTF_m2advp_update
OT_WEAK void m2advp_update(ot_u16 countdown) {
///@note In this function we manually reset the txq cursors to the places
///      they need to be for the encoder.  The encoder implementation may or
///      may not do this automatically, but it is safer to be redundant.
    txq.getcursor       = &txq.front[2];                //No length, link-CTL bytes in BG Frame
 800591c:	4b06      	ldr	r3, [pc, #24]	; (8005938 <m2advp_update+0x1c>)
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	1c91      	adds	r1, r2, #2
 8005922:	6059      	str	r1, [r3, #4]
    txq.putcursor       = txq.getcursor;
    txq.putcursor      += 3;                            //Skip EIRP, Subnet, Channel bytes
    *txq.putcursor++    = ((ot_u8*)&countdown)[UPPER];  //Countdown (upper 8 bits)
 8005924:	1d91      	adds	r1, r2, #6
 8005926:	6099      	str	r1, [r3, #8]
 8005928:	0a01      	lsrs	r1, r0, #8
 800592a:	7151      	strb	r1, [r2, #5]
    *txq.putcursor++    = ((ot_u8*)&countdown)[LOWER];  //Countdown (lower 8 bits)
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	1c51      	adds	r1, r2, #1
 8005930:	6099      	str	r1, [r3, #8]
 8005932:	7010      	strb	r0, [r2, #0]
}
 8005934:	4770      	bx	lr
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	20002d68 	.word	0x20002d68

0800593c <m2advp_close>:
#endif


#ifndef EXTF_m2advp_close
OT_WEAK void m2advp_close() {
}
 800593c:	4770      	bx	lr
	...

08005940 <m2tgram_parse>:

///@todo This is patchwork code, just to deliver basic functionality with
/// with existing buffer structure and M2QP impl.
extern alp_tmpl m2alp;

m2session* m2tgram_parse(void) {
 8005940:	b510      	push	{r4, lr}
/// Telegram format is made into an ALP frame and sent to telegram forwarder
/// ALP (ID = ???)
/// @todo ID currently set to 16, but subject to change

	// Shift 14 byte telegram by four bytes to make room for ALP header
	for (ot_int i=13; i>=0; i--) {
 8005942:	230d      	movs	r3, #13
 8005944:	e006      	b.n	8005954 <m2tgram_parse+0x14>
		rxq.getcursor[i+4] = rxq.getcursor[i];
 8005946:	4a0f      	ldr	r2, [pc, #60]	; (8005984 <m2tgram_parse+0x44>)
 8005948:	6852      	ldr	r2, [r2, #4]
 800594a:	1d19      	adds	r1, r3, #4
 800594c:	5cd0      	ldrb	r0, [r2, r3]
 800594e:	5450      	strb	r0, [r2, r1]
	for (ot_int i=13; i>=0; i--) {
 8005950:	3b01      	subs	r3, #1
 8005952:	b21b      	sxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	daf6      	bge.n	8005946 <m2tgram_parse+0x6>
	}

	// Putcursor re-oriented to include only ALP header and telegram payload
	rxq.putcursor    = rxq.getcursor + 4 + 14;
 8005958:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <m2tgram_parse+0x44>)
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	0011      	movs	r1, r2
 800595e:	3112      	adds	r1, #18
 8005960:	6099      	str	r1, [r3, #8]

	// Put ALP header
	rxq.getcursor[0] = 0xD0;
 8005962:	21d0      	movs	r1, #208	; 0xd0
 8005964:	7011      	strb	r1, [r2, #0]
	rxq.getcursor[1] = 14;
 8005966:	220e      	movs	r2, #14
 8005968:	6859      	ldr	r1, [r3, #4]
 800596a:	704a      	strb	r2, [r1, #1]
	rxq.getcursor[2] = 16;
 800596c:	3202      	adds	r2, #2
 800596e:	6859      	ldr	r1, [r3, #4]
 8005970:	708a      	strb	r2, [r1, #2]
	rxq.getcursor[3] = 0;
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	70da      	strb	r2, [r3, #3]

	alp_parse_message(&m2alp, AUTH_GUEST);
 8005978:	4903      	ldr	r1, [pc, #12]	; (8005988 <m2tgram_parse+0x48>)
 800597a:	4804      	ldr	r0, [pc, #16]	; (800598c <m2tgram_parse+0x4c>)
 800597c:	f001 f9b1 	bl	8006ce2 <alp_parse_message>

	return NULL;
}
 8005980:	2000      	movs	r0, #0
 8005982:	bd10      	pop	{r4, pc}
 8005984:	20002d54 	.word	0x20002d54
 8005988:	20002738 	.word	0x20002738
 800598c:	20002714 	.word	0x20002714

08005990 <network_parse_bf>:
OT_WEAK m2session* network_parse_bf(void) {
 8005990:	b510      	push	{r4, lr}
	    switch (rxq.getcursor[1] & 15) {
 8005992:	4b08      	ldr	r3, [pc, #32]	; (80059b4 <network_parse_bf+0x24>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	785a      	ldrb	r2, [r3, #1]
 8005998:	230f      	movs	r3, #15
 800599a:	4013      	ands	r3, r2
 800599c:	2b01      	cmp	r3, #1
 800599e:	d004      	beq.n	80059aa <network_parse_bf+0x1a>
 80059a0:	2b0f      	cmp	r3, #15
 80059a2:	d105      	bne.n	80059b0 <network_parse_bf+0x20>
	    case 15:    s_next = m2advp_parse();        break;
 80059a4:	f7ff ff64 	bl	8005870 <m2advp_parse>
	}
 80059a8:	bd10      	pop	{r4, pc}
	    case 1:     s_next = m2tgram_parse();       break;
 80059aa:	f7ff ffc9 	bl	8005940 <m2tgram_parse>
 80059ae:	e7fb      	b.n	80059a8 <network_parse_bf+0x18>
	    s_next  = NULL;
 80059b0:	2000      	movs	r0, #0
	    return s_next;
 80059b2:	e7f9      	b.n	80059a8 <network_parse_bf+0x18>
 80059b4:	20002d54 	.word	0x20002d54

080059b8 <rm2_mac_filter>:




#ifndef EXTF_rm2_mac_filter
OT_WEAK ot_bool rm2_mac_filter() {
 80059b8:	b530      	push	{r4, r5, lr}

    // TX EIRP encoded value    = (dBm + 40) * 2
    // TX EIRP dBm              = ((encoded value) / 2) - 40
    // Link Loss                = TX EIRP dBm - Detected RX dBm
    // Link Quality Filter      = (Link Loss <= Link Loss Limit)
    ot_u8 qualifier = (ot_u8)(radio.last_linkloss <= ((ot_int)phymac[0].link_qual)<<1);
 80059ba:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <rm2_mac_filter+0x4c>)
 80059bc:	2206      	movs	r2, #6
 80059be:	5e9a      	ldrsh	r2, [r3, r2]
 80059c0:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <rm2_mac_filter+0x50>)
 80059c2:	795b      	ldrb	r3, [r3, #5]
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	0fd0      	lsrs	r0, r2, #31
 80059c8:	17d9      	asrs	r1, r3, #31
 80059ca:	4293      	cmp	r3, r2
 80059cc:	4148      	adcs	r0, r1
 80059ce:	b2c0      	uxtb	r0, r0
    {   ot_u8 fr_subnet, dsm, specifier, mask;
        fr_subnet   = rxq.front[3];
 80059d0:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <rm2_mac_filter+0x54>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	78da      	ldrb	r2, [r3, #3]
        dsm         = dll.netconf.subnet & 0x0F;
 80059d6:	4b0e      	ldr	r3, [pc, #56]	; (8005a10 <rm2_mac_filter+0x58>)
 80059d8:	7e1b      	ldrb	r3, [r3, #24]
 80059da:	240f      	movs	r4, #15
 80059dc:	210f      	movs	r1, #15
 80059de:	4019      	ands	r1, r3
        mask        = fr_subnet & dsm;
 80059e0:	000d      	movs	r5, r1
 80059e2:	4015      	ands	r5, r2
        specifier   = (fr_subnet ^ dll.netconf.subnet) & 0xF0;
 80059e4:	4053      	eors	r3, r2
 80059e6:	43a3      	bics	r3, r4
        fr_subnet  &= 0xF0;
 80059e8:	43a2      	bics	r2, r4
        qualifier  &= (ot_bool)(((fr_subnet == 0xF0) || (specifier == 0)) && (mask == dsm));
 80059ea:	2af0      	cmp	r2, #240	; 0xf0
 80059ec:	d001      	beq.n	80059f2 <rm2_mac_filter+0x3a>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d104      	bne.n	80059fc <rm2_mac_filter+0x44>
 80059f2:	42a9      	cmp	r1, r5
 80059f4:	d004      	beq.n	8005a00 <rm2_mac_filter+0x48>
 80059f6:	2300      	movs	r3, #0
    }
    return qualifier;
 80059f8:	4018      	ands	r0, r3
}
 80059fa:	bd30      	pop	{r4, r5, pc}
        qualifier  &= (ot_bool)(((fr_subnet == 0xF0) || (specifier == 0)) && (mask == dsm));
 80059fc:	2300      	movs	r3, #0
 80059fe:	e7fb      	b.n	80059f8 <rm2_mac_filter+0x40>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e7f9      	b.n	80059f8 <rm2_mac_filter+0x40>
 8005a04:	200026b8 	.word	0x200026b8
 8005a08:	200026c4 	.word	0x200026c4
 8005a0c:	20002d54 	.word	0x20002d54
 8005a10:	20002648 	.word	0x20002648

08005a14 <rm2_channel_refresh>:
#endif


#ifndef EXTF_rm2_channel_refresh
OT_WEAK void rm2_channel_refresh(void) {
    radio.flags |= RADIO_FLAG_REFRESH;
 8005a14:	4a02      	ldr	r2, [pc, #8]	; (8005a20 <rm2_channel_refresh+0xc>)
 8005a16:	7853      	ldrb	r3, [r2, #1]
 8005a18:	2101      	movs	r1, #1
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	7053      	strb	r3, [r2, #1]
}
 8005a1e:	4770      	bx	lr
 8005a20:	200026b8 	.word	0x200026b8

08005a24 <rm2_channel_lookup>:
}
#endif


#ifndef EXTF_rm2_channel_lookup
OT_WEAK ot_bool rm2_channel_lookup(ot_u8 chan_id, vlFILE* fp) {
 8005a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a26:	46d6      	mov	lr, sl
 8005a28:	464f      	mov	r7, r9
 8005a2a:	4646      	mov	r6, r8
 8005a2c:	b5c0      	push	{r6, r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	0007      	movs	r7, r0
 8005a32:	000d      	movs	r5, r1
    ot_u8       spectrum_id;
    ot_int      i;
    volatile ot_uni16    scratch;

    // Strip the FEC & Spread bits
    spectrum_id = chan_id & 0x3F;
 8005a34:	263f      	movs	r6, #63	; 0x3f
 8005a36:	4006      	ands	r6, r0

    /// Populate the phymac flags: these are not frequently used
    /// @todo I might want to do this in radio_init() instead
    scratch.ushort  = vl_read(fp, 2);
 8005a38:	2102      	movs	r1, #2
 8005a3a:	0028      	movs	r0, r5
 8005a3c:	f001 fe2c 	bl	8007698 <vl_read>
 8005a40:	ab01      	add	r3, sp, #4
 8005a42:	8018      	strh	r0, [r3, #0]
    phymac[0].flags = scratch.ubyte[0];
 8005a44:	781a      	ldrb	r2, [r3, #0]
 8005a46:	4b33      	ldr	r3, [pc, #204]	; (8005b14 <rm2_channel_lookup+0xf0>)
 8005a48:	701a      	strb	r2, [r3, #0]

    /// Look through the channel list to find the one with matching spectrum id.
    /// The channel list is not necessarily sorted.
    /// @todo might do this with vl_get() in the future
    for (i=6; i<fp->length; i+=6) {
 8005a4a:	2406      	movs	r4, #6
 8005a4c:	892b      	ldrh	r3, [r5, #8]
 8005a4e:	429c      	cmp	r4, r3
 8005a50:	da5d      	bge.n	8005b0e <rm2_channel_lookup+0xea>
        scratch.ushort = vl_read(fp, i);
 8005a52:	b2a4      	uxth	r4, r4
 8005a54:	0021      	movs	r1, r4
 8005a56:	0028      	movs	r0, r5
 8005a58:	f001 fe1e 	bl	8007698 <vl_read>
 8005a5c:	ab01      	add	r3, sp, #4
 8005a5e:	8018      	strh	r0, [r3, #0]

        if ((spectrum_id == scratch.ubyte[0]) \
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	42b3      	cmp	r3, r6
 8005a66:	d009      	beq.n	8005a7c <rm2_channel_lookup+0x58>
        || ((spectrum_id & 0xF0) == scratch.ubyte[0])) {
 8005a68:	ab01      	add	r3, sp, #4
 8005a6a:	781a      	ldrb	r2, [r3, #0]
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	2330      	movs	r3, #48	; 0x30
 8005a70:	403b      	ands	r3, r7
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d002      	beq.n	8005a7c <rm2_channel_lookup+0x58>
    for (i=6; i<fp->length; i+=6) {
 8005a76:	3406      	adds	r4, #6
 8005a78:	b224      	sxth	r4, r4
 8005a7a:	e7e7      	b.n	8005a4c <rm2_channel_lookup+0x28>
            ot_u8 old_chan_id   = phymac[0].channel;
 8005a7c:	4b25      	ldr	r3, [pc, #148]	; (8005b14 <rm2_channel_lookup+0xf0>)
 8005a7e:	4698      	mov	r8, r3
 8005a80:	789b      	ldrb	r3, [r3, #2]
 8005a82:	469a      	mov	sl, r3
            ot_u8 old_tx_eirp   = (phymac[0].tx_eirp & 0x7f);
 8005a84:	4643      	mov	r3, r8
 8005a86:	791b      	ldrb	r3, [r3, #4]
 8005a88:	227f      	movs	r2, #127	; 0x7f
 8005a8a:	401a      	ands	r2, r3
 8005a8c:	4691      	mov	r9, r2

            phymac[0].tg        = rm2_default_tgd(chan_id);
 8005a8e:	0038      	movs	r0, r7
 8005a90:	f7fc f87a 	bl	8001b88 <rm2_default_tgd>
 8005a94:	4643      	mov	r3, r8
 8005a96:	7058      	strb	r0, [r3, #1]
            phymac[0].channel   = chan_id;
 8005a98:	709f      	strb	r7, [r3, #2]
          //phymac[0].autoscale = scratch.ubyte[1];

            scratch.ushort      = vl_read(fp, i+2);
 8005a9a:	1ca1      	adds	r1, r4, #2
 8005a9c:	b289      	uxth	r1, r1
 8005a9e:	0028      	movs	r0, r5
 8005aa0:	f001 fdfa 	bl	8007698 <vl_read>
 8005aa4:	ae01      	add	r6, sp, #4
 8005aa6:	8030      	strh	r0, [r6, #0]
            phymac[0].tx_eirp   = scratch.ubyte[0] & 0x80;
 8005aa8:	7833      	ldrb	r3, [r6, #0]
 8005aaa:	227f      	movs	r2, #127	; 0x7f
 8005aac:	4393      	bics	r3, r2
 8005aae:	4642      	mov	r2, r8
 8005ab0:	7113      	strb	r3, [r2, #4]
            phymac[0].tx_eirp  |= rm2_clip_txeirp(scratch.ubyte[0]);
 8005ab2:	7830      	ldrb	r0, [r6, #0]
 8005ab4:	b2c0      	uxtb	r0, r0
 8005ab6:	f7fb fbcb 	bl	8001250 <rm2_clip_txeirp>
 8005aba:	4643      	mov	r3, r8
 8005abc:	791b      	ldrb	r3, [r3, #4]
 8005abe:	4318      	orrs	r0, r3
 8005ac0:	4643      	mov	r3, r8
 8005ac2:	7118      	strb	r0, [r3, #4]
            phymac[0].link_qual = scratch.ubyte[1];
 8005ac4:	7873      	ldrb	r3, [r6, #1]
 8005ac6:	4642      	mov	r2, r8
 8005ac8:	7153      	strb	r3, [r2, #5]

            ///@todo Try this: *(ot_u16*)&phymac[0].cs_thr = vl_read(fp, i+4);  
            ///it will need some rearrangement in phymac struct
            /// Convert thresholds from DASH7 numeric encoding to native encoding
            scratch.ushort      = vl_read(fp, i+4);
 8005aca:	1d21      	adds	r1, r4, #4
 8005acc:	b289      	uxth	r1, r1
 8005ace:	0028      	movs	r0, r5
 8005ad0:	f001 fde2 	bl	8007698 <vl_read>
 8005ad4:	8030      	strh	r0, [r6, #0]
            //phymac[0].cs_thr    = __THR(scratch.ubyte[0]);
            //phymac[0].cca_thr   = scratch.ubyte[1];
            //phymac[0].cs_thr    = rm2_calc_rssithr(phymac[0].cs_thr);
            //phymac[0].cca_thr   = rm2_calc_rssithr(phymac[0].cca_thr);
            radio.threshold.raw = scratch.ubyte[0];
 8005ad6:	7830      	ldrb	r0, [r6, #0]
 8005ad8:	b2c0      	uxtb	r0, r0
 8005ada:	4b0f      	ldr	r3, [pc, #60]	; (8005b18 <rm2_channel_lookup+0xf4>)
 8005adc:	70d8      	strb	r0, [r3, #3]
            phymac[0].cs_thr    = rm2_calc_rssithr( (ot_u8)(radio.threshold.raw + radio.threshold.offset) );
 8005ade:	789b      	ldrb	r3, [r3, #2]
 8005ae0:	18c0      	adds	r0, r0, r3
 8005ae2:	b2c0      	uxtb	r0, r0
 8005ae4:	f7fb fbba 	bl	800125c <rm2_calc_rssithr>
 8005ae8:	4643      	mov	r3, r8
 8005aea:	7198      	strb	r0, [r3, #6]
            phymac[0].cca_thr   = rm2_calc_rssithr( scratch.ubyte[1] );
 8005aec:	7870      	ldrb	r0, [r6, #1]
 8005aee:	b2c0      	uxtb	r0, r0
 8005af0:	f7fb fbb4 	bl	800125c <rm2_calc_rssithr>
 8005af4:	4643      	mov	r3, r8
 8005af6:	71d8      	strb	r0, [r3, #7]
            
            rm2_enter_channel(old_chan_id, old_tx_eirp);
 8005af8:	4649      	mov	r1, r9
 8005afa:	4650      	mov	r0, sl
 8005afc:	f7fb fbd2 	bl	80012a4 <rm2_enter_channel>
            return True;
 8005b00:	2001      	movs	r0, #1
        }
    }
    return False;
}
 8005b02:	b002      	add	sp, #8
 8005b04:	bc1c      	pop	{r2, r3, r4}
 8005b06:	4690      	mov	r8, r2
 8005b08:	4699      	mov	r9, r3
 8005b0a:	46a2      	mov	sl, r4
 8005b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return False;
 8005b0e:	2000      	movs	r0, #0
 8005b10:	e7f7      	b.n	8005b02 <rm2_channel_lookup+0xde>
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	200026c4 	.word	0x200026c4
 8005b18:	200026b8 	.word	0x200026b8

08005b1c <rm2_init>:
OT_WEAK void rm2_init(void) {
 8005b1c:	b510      	push	{r4, lr}
    radio.state     = RADIO_Idle;
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <rm2_init+0x38>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	701a      	strb	r2, [r3, #0]
    radio.flags     = RADIO_FLAG_REFRESH;
 8005b24:	2101      	movs	r1, #1
 8005b26:	7059      	strb	r1, [r3, #1]
    radio.evtdone   = &otutils_sig2_null;
 8005b28:	490b      	ldr	r1, [pc, #44]	; (8005b58 <rm2_init+0x3c>)
 8005b2a:	6099      	str	r1, [r3, #8]
    radio.threshold.offset  = 0;
 8005b2c:	709a      	strb	r2, [r3, #2]
    radio.threshold.raw     = 0;
 8005b2e:	70da      	strb	r2, [r3, #3]
    phymac[0].channel   = 0xF0;
 8005b30:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <rm2_init+0x40>)
 8005b32:	32f0      	adds	r2, #240	; 0xf0
 8005b34:	709a      	strb	r2, [r3, #2]
    phymac[0].tx_eirp   = 0x7F;
 8005b36:	3a71      	subs	r2, #113	; 0x71
 8005b38:	711a      	strb	r2, [r3, #4]
    fp                  = ISF_open_su( ISF_ID(channel_configuration) );
 8005b3a:	2002      	movs	r0, #2
 8005b3c:	f001 fe63 	bl	8007806 <ISF_open_su>
 8005b40:	0004      	movs	r4, r0
    rm2_channel_lookup(0x18, fp);
 8005b42:	0001      	movs	r1, r0
 8005b44:	2018      	movs	r0, #24
 8005b46:	f7ff ff6d 	bl	8005a24 <rm2_channel_lookup>
    vl_close(fp);
 8005b4a:	0020      	movs	r0, r4
 8005b4c:	f001 fe26 	bl	800779c <vl_close>
}
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	200026b8 	.word	0x200026b8
 8005b58:	0800721f 	.word	0x0800721f
 8005b5c:	200026c4 	.word	0x200026c4

08005b60 <rm2_test_channel>:
OT_WEAK ot_bool rm2_test_channel(ot_u8 channel) {
 8005b60:	b570      	push	{r4, r5, r6, lr}
 8005b62:	0005      	movs	r5, r0
    test = rm2_channel_fastcheck(channel);
 8005b64:	f7fb fb84 	bl	8001270 <rm2_channel_fastcheck>
 8005b68:	1e04      	subs	r4, r0, #0
    if (test == False) {
 8005b6a:	d001      	beq.n	8005b70 <rm2_test_channel+0x10>
}
 8005b6c:	0020      	movs	r0, r4
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
        fp      = ISF_open_su( ISF_ID(channel_configuration) );
 8005b70:	2002      	movs	r0, #2
 8005b72:	f001 fe48 	bl	8007806 <ISF_open_su>
 8005b76:	0006      	movs	r6, r0
        test    = rm2_channel_lookup(channel, fp);
 8005b78:	0001      	movs	r1, r0
 8005b7a:	0028      	movs	r0, r5
 8005b7c:	f7ff ff52 	bl	8005a24 <rm2_channel_lookup>
 8005b80:	0004      	movs	r4, r0
        vl_close(fp);
 8005b82:	0030      	movs	r0, r6
 8005b84:	f001 fe0a 	bl	800779c <vl_close>
 8005b88:	e7f0      	b.n	8005b6c <rm2_test_channel+0xc>
	...

08005b8c <rm2_test_chanlist>:
OT_WEAK ot_bool rm2_test_chanlist() {
 8005b8c:	b570      	push	{r4, r5, r6, lr}
    fp = ISF_open_su( ISF_ID(channel_configuration) );
 8005b8e:	2002      	movs	r0, #2
 8005b90:	f001 fe39 	bl	8007806 <ISF_open_su>
 8005b94:	0006      	movs	r6, r0
    for (i=0, test=False; i<dll.comm.tx_channels; i++) {
 8005b96:	2400      	movs	r4, #0
 8005b98:	4a0f      	ldr	r2, [pc, #60]	; (8005bd8 <rm2_test_chanlist+0x4c>)
 8005b9a:	2330      	movs	r3, #48	; 0x30
 8005b9c:	5cd3      	ldrb	r3, [r2, r3]
 8005b9e:	429c      	cmp	r4, r3
 8005ba0:	da10      	bge.n	8005bc4 <rm2_test_chanlist+0x38>
        next_channel = dll.comm.tx_chanlist[i];
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <rm2_test_chanlist+0x4c>)
 8005ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba6:	5d1d      	ldrb	r5, [r3, r4]
        if (rm2_channel_fastcheck(next_channel)) {
 8005ba8:	0028      	movs	r0, r5
 8005baa:	f7fb fb61 	bl	8001270 <rm2_channel_fastcheck>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d10e      	bne.n	8005bd0 <rm2_test_chanlist+0x44>
        if (rm2_channel_lookup(next_channel, fp)) {
 8005bb2:	0031      	movs	r1, r6
 8005bb4:	0028      	movs	r0, r5
 8005bb6:	f7ff ff35 	bl	8005a24 <rm2_channel_lookup>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d10a      	bne.n	8005bd4 <rm2_test_chanlist+0x48>
    for (i=0, test=False; i<dll.comm.tx_channels; i++) {
 8005bbe:	3401      	adds	r4, #1
 8005bc0:	b224      	sxth	r4, r4
 8005bc2:	e7e9      	b.n	8005b98 <rm2_test_chanlist+0xc>
 8005bc4:	2400      	movs	r4, #0
    vl_close(fp);
 8005bc6:	0030      	movs	r0, r6
 8005bc8:	f001 fde8 	bl	800779c <vl_close>
}
 8005bcc:	0020      	movs	r0, r4
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
        	test = True;
 8005bd0:	2401      	movs	r4, #1
 8005bd2:	e7f8      	b.n	8005bc6 <rm2_test_chanlist+0x3a>
        	test = True;
 8005bd4:	2401      	movs	r4, #1
 8005bd6:	e7f6      	b.n	8005bc6 <rm2_test_chanlist+0x3a>
 8005bd8:	20002648 	.word	0x20002648

08005bdc <session_applet_null>:

session_struct session;



void session_applet_null(m2session* a) { }
 8005bdc:	4770      	bx	lr

08005bde <sub_store_session>:



static m2session* sub_store_session(m2session* store, ot_app applet, ot_u16 wait, ot_u8 netstate, ot_u8 channel) {
 8005bde:	b510      	push	{r4, lr}
 8005be0:	0004      	movs	r4, r0
 8005be2:	a802      	add	r0, sp, #8
 8005be4:	7800      	ldrb	r0, [r0, #0]
/// Attach session to location specified
    store->applet       = applet;
 8005be6:	6021      	str	r1, [r4, #0]
    store->counter      = wait;
 8005be8:	80a2      	strh	r2, [r4, #4]
    store->channel      = channel;
 8005bea:	71a0      	strb	r0, [r4, #6]
    store->netstate     = netstate;
 8005bec:	71e3      	strb	r3, [r4, #7]
    store->extra        = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	7223      	strb	r3, [r4, #8]
    store->dialog_id    = rand_prn8();
 8005bf2:	f002 fef1 	bl	80089d8 <rand_prn8>
 8005bf6:	7260      	strb	r0, [r4, #9]
    return store;
}
 8005bf8:	0020      	movs	r0, r4
 8005bfa:	bd10      	pop	{r4, pc}

08005bfc <session_init>:



#ifndef EXTF_session_init
void session_init() {
    session.top = &session.heap[_END];
 8005bfc:	4b02      	ldr	r3, [pc, #8]	; (8005c08 <session_init+0xc>)
 8005bfe:	001a      	movs	r2, r3
 8005c00:	3234      	adds	r2, #52	; 0x34
 8005c02:	601a      	str	r2, [r3, #0]
}
 8005c04:	4770      	bx	lr
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	200026cc 	.word	0x200026cc

08005c0c <session_getnext>:
#ifndef EXTF_session_getnext
OT_WEAK ot_uint session_getnext() {
/// Not idiot proof.  Do not call this unless you have already checked
/// session_notempty().
    ot_uint wait;
    wait                    = session.top->counter;
 8005c0c:	4b02      	ldr	r3, [pc, #8]	; (8005c18 <session_getnext+0xc>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	8898      	ldrh	r0, [r3, #4]
    session.top->counter    = 0;
 8005c12:	2200      	movs	r2, #0
 8005c14:	809a      	strh	r2, [r3, #4]
    return wait;
}
 8005c16:	4770      	bx	lr
 8005c18:	200026cc 	.word	0x200026cc

08005c1c <session_new>:
#endif



#ifndef EXTF_session_new
OT_WEAK m2session* session_new(ot_app applet, ot_u16 wait, ot_u8 channel, ot_u8 netstate) {
 8005c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	0004      	movs	r4, r0
 8005c22:	000d      	movs	r5, r1
 8005c24:	0017      	movs	r7, r2
 8005c26:	001e      	movs	r6, r3
    ot_u8* src;
    ot_uint length;

    // Always reserve an extra session for extension.
    // i.e. There must be two or more free sessions to do session_new()
    if (session.top <= &session.heap[_2ND] ) {
 8005c28:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <session_new+0x44>)
 8005c2a:	6819      	ldr	r1, [r3, #0]
 8005c2c:	3310      	adds	r3, #16
 8005c2e:	4299      	cmp	r1, r3
 8005c30:	d914      	bls.n	8005c5c <session_new+0x40>
        return NULL;
    }

    // We're adding a new session to the bottom of the heap/stack/queue...
    src         = (ot_u8*)session.top;
    session.top--;
 8005c32:	0008      	movs	r0, r1
 8005c34:	380c      	subs	r0, #12
 8005c36:	4a0a      	ldr	r2, [pc, #40]	; (8005c60 <session_new+0x44>)
 8005c38:	6010      	str	r0, [r2, #0]
    length      = (ot_uint)((ot_u8*)&session.heap[_END] - src);
 8005c3a:	3234      	adds	r2, #52	; 0x34
 8005c3c:	1a52      	subs	r2, r2, r1
 8005c3e:	b292      	uxth	r2, r2

    // Only do the copy if the size is not zero
    if (length != 0) {
 8005c40:	2a00      	cmp	r2, #0
 8005c42:	d108      	bne.n	8005c56 <session_new+0x3a>
        memcpy( (ot_u8*)session.top, src, length);
    }

    return sub_store_session(&session.heap[_LAST], applet, wait, netstate, channel);
 8005c44:	9700      	str	r7, [sp, #0]
 8005c46:	0033      	movs	r3, r6
 8005c48:	002a      	movs	r2, r5
 8005c4a:	0021      	movs	r1, r4
 8005c4c:	4805      	ldr	r0, [pc, #20]	; (8005c64 <session_new+0x48>)
 8005c4e:	f7ff ffc6 	bl	8005bde <sub_store_session>
}
 8005c52:	b003      	add	sp, #12
 8005c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy( (ot_u8*)session.top, src, length);
 8005c56:	f002 fe73 	bl	8008940 <ot_memcpy>
 8005c5a:	e7f3      	b.n	8005c44 <session_new+0x28>
        return NULL;
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e7f8      	b.n	8005c52 <session_new+0x36>
 8005c60:	200026cc 	.word	0x200026cc
 8005c64:	200026f4 	.word	0x200026f4

08005c68 <session_extend>:
#endif



#ifndef EXTF_session_extend
OT_WEAK m2session* session_extend(ot_app applet, ot_u16 wait, ot_u8 channel, ot_u8 netstate) {
 8005c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	9003      	str	r0, [sp, #12]
 8005c6e:	000e      	movs	r6, r1
 8005c70:	0017      	movs	r7, r2
 8005c72:	001d      	movs	r5, r3
    m2session* extend;

    // If not one free session, there's no room!
    if (session.top <= &session.heap[_1ST]) {
 8005c74:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <session_extend+0x50>)
 8005c76:	cb02      	ldmia	r3!, {r1}
 8005c78:	4299      	cmp	r1, r3
 8005c7a:	d91b      	bls.n	8005cb4 <session_extend+0x4c>
        return NULL;
    }

    // We're adding a new session...
    session.top--;
 8005c7c:	0008      	movs	r0, r1
 8005c7e:	380c      	subs	r0, #12
 8005c80:	4b0d      	ldr	r3, [pc, #52]	; (8005cb8 <session_extend+0x50>)
 8005c82:	6018      	str	r0, [r3, #0]
    // If the new session is on the last spot, it means the heap is actually
    // empty, so no movement is necessary.  If heap is not empty and not full
    // (we know this by condition above and condition below), go through the
    // session heap to see where to put this extended session, and move all
    // higher data one spot up.
    if (extend < &session.heap[_LAST]) {
 8005c84:	3328      	adds	r3, #40	; 0x28
 8005c86:	4298      	cmp	r0, r3
 8005c88:	d20c      	bcs.n	8005ca4 <session_extend+0x3c>
    extend = session.top;
 8005c8a:	0004      	movs	r4, r0
        do {
            // Increment session, noting that first increment simply counters
            // "session.top--" above.
            extend++;
 8005c8c:	340c      	adds	r4, #12

            // Inspect following session. If it is INIT, then we extend the
            // session sequence below this point.  Else, following session is
            // still part of the current session sequence, so keep looking.
            if (extend[1].netstate & M2_NETSTATE_INIT) {
 8005c8e:	7ce3      	ldrb	r3, [r4, #19]
 8005c90:	071b      	lsls	r3, r3, #28
 8005c92:	d402      	bmi.n	8005c9a <session_extend+0x32>
                break;
            }

            // The above "if (session.top <= &session.heap[_1ST])" make it OK
            // if we are at the 1st place in the session heap
        } while (extend < &session.heap[_LAST]);
 8005c94:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <session_extend+0x54>)
 8005c96:	429c      	cmp	r4, r3
 8005c98:	d3f8      	bcc.n	8005c8c <session_extend+0x24>

        // Shift the stack down one notch, from top to extension point.
        memcpy( (ot_u8*)session.top,
                (ot_u8*)&session.top[1],
                (ot_uint)((ot_u8*)extend - (ot_u8*)session.top) );
 8005c9a:	1a22      	subs	r2, r4, r0
        memcpy( (ot_u8*)session.top,
 8005c9c:	b292      	uxth	r2, r2
 8005c9e:	f002 fe4f 	bl	8008940 <ot_memcpy>
            extend++;
 8005ca2:	0020      	movs	r0, r4
    }

    return sub_store_session(extend, applet, wait, channel, netstate);
 8005ca4:	9500      	str	r5, [sp, #0]
 8005ca6:	003b      	movs	r3, r7
 8005ca8:	0032      	movs	r2, r6
 8005caa:	9903      	ldr	r1, [sp, #12]
 8005cac:	f7ff ff97 	bl	8005bde <sub_store_session>
}
 8005cb0:	b005      	add	sp, #20
 8005cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NULL;
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	e7fb      	b.n	8005cb0 <session_extend+0x48>
 8005cb8:	200026cc 	.word	0x200026cc
 8005cbc:	200026f4 	.word	0x200026f4

08005cc0 <session_app_purge>:
OT_WEAK void session_app_purge(ot_app applet) {
///@todo At present the purge leaves the session-session timing delays intact.
///      Need to determine what the right approach is: either set delays to 0
///      or leave as programmed.
    m2session* next;
    next = session.top;
 8005cc0:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <session_app_purge+0x20>)
 8005cc2:	681b      	ldr	r3, [r3, #0]

    while (next < &session.heap[_END]) {
 8005cc4:	e000      	b.n	8005cc8 <session_app_purge+0x8>
        if (next->applet == applet) {
            next->applet    = &session_applet_null;
            next->netstate  = M2_NETSTATE_SCRAP;
        }
        next++;
 8005cc6:	330c      	adds	r3, #12
    while (next < &session.heap[_END]) {
 8005cc8:	4a06      	ldr	r2, [pc, #24]	; (8005ce4 <session_app_purge+0x24>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d207      	bcs.n	8005cde <session_app_purge+0x1e>
        if (next->applet == applet) {
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	4282      	cmp	r2, r0
 8005cd2:	d1f8      	bne.n	8005cc6 <session_app_purge+0x6>
            next->applet    = &session_applet_null;
 8005cd4:	4a04      	ldr	r2, [pc, #16]	; (8005ce8 <session_app_purge+0x28>)
 8005cd6:	601a      	str	r2, [r3, #0]
            next->netstate  = M2_NETSTATE_SCRAP;
 8005cd8:	2204      	movs	r2, #4
 8005cda:	71da      	strb	r2, [r3, #7]
 8005cdc:	e7f3      	b.n	8005cc6 <session_app_purge+0x6>
    }
}
 8005cde:	4770      	bx	lr
 8005ce0:	200026cc 	.word	0x200026cc
 8005ce4:	20002700 	.word	0x20002700
 8005ce8:	08005bdd 	.word	0x08005bdd

08005cec <session_app_isloaded>:


#ifndef EXTF_session_app_isloaded
OT_WEAK ot_bool session_app_isloaded(ot_app applet) {
    m2session* next;
    next = session.top;
 8005cec:	4b07      	ldr	r3, [pc, #28]	; (8005d0c <session_app_isloaded+0x20>)
 8005cee:	681b      	ldr	r3, [r3, #0]

    while ((next->applet != applet) && (next < &session.heap[_END])) {
 8005cf0:	e000      	b.n	8005cf4 <session_app_isloaded+0x8>
        next++;
 8005cf2:	330c      	adds	r3, #12
    while ((next->applet != applet) && (next < &session.heap[_END])) {
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4282      	cmp	r2, r0
 8005cf8:	d002      	beq.n	8005d00 <session_app_isloaded+0x14>
 8005cfa:	4a05      	ldr	r2, [pc, #20]	; (8005d10 <session_app_isloaded+0x24>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d3f8      	bcc.n	8005cf2 <session_app_isloaded+0x6>
    }
    return (ot_bool)(next < &session.heap[_END]);
 8005d00:	4803      	ldr	r0, [pc, #12]	; (8005d10 <session_app_isloaded+0x24>)
 8005d02:	4283      	cmp	r3, r0
 8005d04:	4180      	sbcs	r0, r0
 8005d06:	4240      	negs	r0, r0
}
 8005d08:	4770      	bx	lr
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	200026cc 	.word	0x200026cc
 8005d10:	20002700 	.word	0x20002700

08005d14 <session_scrap>:
}
#endif


#ifndef EXTF_session_scrap
OT_WEAK void session_scrap(void) {
 8005d14:	b510      	push	{r4, lr}
    if (session.top != &session.heap[_END]) {
 8005d16:	4b08      	ldr	r3, [pc, #32]	; (8005d38 <session_scrap+0x24>)
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	3334      	adds	r3, #52	; 0x34
 8005d1c:	4298      	cmp	r0, r3
 8005d1e:	d009      	beq.n	8005d34 <session_scrap+0x20>
        m2session* old_top;
        old_top = session.top++;
 8005d20:	0003      	movs	r3, r0
 8005d22:	330c      	adds	r3, #12
 8005d24:	4a04      	ldr	r2, [pc, #16]	; (8005d38 <session_scrap+0x24>)
 8005d26:	6013      	str	r3, [r2, #0]

        if (old_top->applet != NULL) {
 8005d28:	6803      	ldr	r3, [r0, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <session_scrap+0x20>
            old_top->netstate = M2_NETSTATE_SCRAP;
 8005d2e:	2204      	movs	r2, #4
 8005d30:	71c2      	strb	r2, [r0, #7]
            old_top->applet(old_top);
 8005d32:	4798      	blx	r3
        }
    }
}
 8005d34:	bd10      	pop	{r4, pc}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	200026cc 	.word	0x200026cc

08005d3c <session_pop>:
#ifndef EXTF_session_pop
OT_WEAK void session_pop() {
/// session.top++ will pop a session, but this routine includes protection
/// against less-than-perfect API usage by assuring that session.top is
/// only incremented when in bounds.
    if (session.top != &session.heap[_END])
 8005d3c:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <session_pop+0x14>)
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	3334      	adds	r3, #52	; 0x34
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d002      	beq.n	8005d4c <session_pop+0x10>
        session.top++;
 8005d46:	320c      	adds	r2, #12
 8005d48:	4b01      	ldr	r3, [pc, #4]	; (8005d50 <session_pop+0x14>)
 8005d4a:	601a      	str	r2, [r3, #0]
}
 8005d4c:	4770      	bx	lr
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	200026cc 	.word	0x200026cc

08005d54 <session_top>:
#endif


#ifndef EXTF_session_top
OT_WEAK m2session* session_top() {
    return session.top;
 8005d54:	4b01      	ldr	r3, [pc, #4]	; (8005d5c <session_top+0x8>)
 8005d56:	6818      	ldr	r0, [r3, #0]
}
 8005d58:	4770      	bx	lr
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	200026cc 	.word	0x200026cc

08005d60 <session_continue>:
OT_WEAK m2session* session_continue(ot_app applet, ot_u8 next_state, ot_uint wait) {
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	0006      	movs	r6, r0
 8005d64:	000d      	movs	r5, r1
 8005d66:	0017      	movs	r7, r2
    active      = session_top();
 8005d68:	f7ff fff4 	bl	8005d54 <session_top>
 8005d6c:	0004      	movs	r4, r0
    netstate    = (active->netstate & 0x0F) | M2_NETSTATE_CONNECTED | next_state;
 8005d6e:	79c2      	ldrb	r2, [r0, #7]
 8005d70:	230e      	movs	r3, #14
 8005d72:	4013      	ands	r3, r2
 8005d74:	431d      	orrs	r5, r3
 8005d76:	2301      	movs	r3, #1
 8005d78:	432b      	orrs	r3, r5
    next = session_extend(applet, /*dll.comm.tc +*/ wait, active->channel, netstate);
 8005d7a:	7982      	ldrb	r2, [r0, #6]
 8005d7c:	0039      	movs	r1, r7
 8005d7e:	0030      	movs	r0, r6
 8005d80:	f7ff ff72 	bl	8005c68 <session_extend>
    if (next) {
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d009      	beq.n	8005d9c <session_continue+0x3c>
        next->extra     = active->extra;
 8005d88:	7a23      	ldrb	r3, [r4, #8]
 8005d8a:	7203      	strb	r3, [r0, #8]
        next->dialog_id = active->dialog_id++;
 8005d8c:	7a63      	ldrb	r3, [r4, #9]
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	7262      	strb	r2, [r4, #9]
 8005d92:	7243      	strb	r3, [r0, #9]
        next->subnet    = active->subnet;
 8005d94:	7aa3      	ldrb	r3, [r4, #10]
 8005d96:	7283      	strb	r3, [r0, #10]
        next->flags     = active->flags;
 8005d98:	7ae3      	ldrb	r3, [r4, #11]
 8005d9a:	72c3      	strb	r3, [r0, #11]
}
 8005d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005da0 <session_numfree>:
#endif


#ifndef EXTF_session_numfree
OT_WEAK ot_int session_numfree() {
 8005da0:	b510      	push	{r4, lr}
    ot_uint block;
    block   = (ot_uint)((ot_u8*)session.top - (ot_u8*)&session.heap[_1ST]);
 8005da2:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <session_numfree+0x18>)
 8005da4:	cb01      	ldmia	r3!, {r0}
 8005da6:	1ac0      	subs	r0, r0, r3
 8005da8:	b280      	uxth	r0, r0
    block  /= sizeof(m2session);
 8005daa:	210c      	movs	r1, #12
 8005dac:	f7fa f9ac 	bl	8000108 <__udivsi3>
 8005db0:	b280      	uxth	r0, r0
    block  -= 1;            //because we always keep one free for extensions
 8005db2:	3801      	subs	r0, #1

    return (ot_int)block;
 8005db4:	b200      	sxth	r0, r0
}
 8005db6:	bd10      	pop	{r4, pc}
 8005db8:	200026cc 	.word	0x200026cc

08005dbc <session_notempty>:
#endif


#ifndef EXTF_session_notempty
OT_WEAK ot_bool session_notempty() {
    return (session.top < &session.heap[_END]);
 8005dbc:	4b03      	ldr	r3, [pc, #12]	; (8005dcc <session_notempty+0x10>)
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	3334      	adds	r3, #52	; 0x34
 8005dc2:	4298      	cmp	r0, r3
 8005dc4:	4180      	sbcs	r0, r0
 8005dc6:	4240      	negs	r0, r0
}
 8005dc8:	4770      	bx	lr
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	200026cc 	.word	0x200026cc

08005dd0 <session_flush>:
OT_WEAK void session_flush() {
 8005dd0:	b510      	push	{r4, lr}
    while (session_notempty()) {
 8005dd2:	f7ff fff3 	bl	8005dbc <session_notempty>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d008      	beq.n	8005dec <session_flush+0x1c>
        if (session.top->netstate & M2_NETSTATE_INIT) {
 8005dda:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <session_flush+0x20>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	79da      	ldrb	r2, [r3, #7]
 8005de0:	0712      	lsls	r2, r2, #28
 8005de2:	d403      	bmi.n	8005dec <session_flush+0x1c>
        session.top++;      //session_pop();
 8005de4:	330c      	adds	r3, #12
 8005de6:	4a02      	ldr	r2, [pc, #8]	; (8005df0 <session_flush+0x20>)
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e7f2      	b.n	8005dd2 <session_flush+0x2>
}
 8005dec:	bd10      	pop	{r4, pc}
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	200026cc 	.word	0x200026cc

08005df4 <session_follower>:



#ifndef EXTF_session_follower
OT_WEAK m2session* session_follower() {
    if (session.top < &session.heap[_LAST]) {
 8005df4:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <session_follower+0x14>)
 8005df6:	6818      	ldr	r0, [r3, #0]
 8005df8:	3328      	adds	r3, #40	; 0x28
 8005dfa:	4298      	cmp	r0, r3
 8005dfc:	d201      	bcs.n	8005e02 <session_follower+0xe>
        return &session.top[1];
 8005dfe:	300c      	adds	r0, #12
    }
    return NULL;
}
 8005e00:	4770      	bx	lr
    return NULL;
 8005e02:	2000      	movs	r0, #0
 8005e04:	e7fc      	b.n	8005e00 <session_follower+0xc>
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	200026cc 	.word	0x200026cc

08005e0c <session_follower_wait>:
#endif


#ifndef EXTF_session_follower_wait
OT_WEAK ot_u16 session_follower_wait() {
    if (session.top < &session.heap[_LAST]) {
 8005e0c:	4b04      	ldr	r3, [pc, #16]	; (8005e20 <session_follower_wait+0x14>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	3328      	adds	r3, #40	; 0x28
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d201      	bcs.n	8005e1a <session_follower_wait+0xe>
        return session.top[1].counter;
 8005e16:	8a10      	ldrh	r0, [r2, #16]
    }
    return 65535;
}
 8005e18:	4770      	bx	lr
    return 65535;
 8005e1a:	4802      	ldr	r0, [pc, #8]	; (8005e24 <session_follower_wait+0x18>)
 8005e1c:	e7fc      	b.n	8005e18 <session_follower_wait+0xc>
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	200026cc 	.word	0x200026cc
 8005e24:	0000ffff 	.word	0x0000ffff

08005e28 <session_netstate>:



#ifndef EXTF_session_netstate
OT_WEAK ot_u8 session_netstate() {
    return session.top->netstate;
 8005e28:	4b01      	ldr	r3, [pc, #4]	; (8005e30 <session_netstate+0x8>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	79d8      	ldrb	r0, [r3, #7]
}
 8005e2e:	4770      	bx	lr
 8005e30:	200026cc 	.word	0x200026cc

08005e34 <sub_opgroup_scinit>:



void sub_opgroup_scinit(void) {
/// This is an SCTP command.  RFU
}
 8005e34:	4770      	bx	lr

08005e36 <sub_opgroup_sctransport>:



void sub_opgroup_sctransport(void) {
/// This is an SCTP command.  RFU
}
 8005e36:	4770      	bx	lr

08005e38 <sub_load_charcorrelation>:
/** Protocol File Loading Subroutines <BR>
  * ========================================================================<BR>
  * - Used as the load_function() argument to sub_load_isf()
  */

ot_int sub_load_charcorrelation(ot_int* cursor, ot_u8 data_byte) {
 8005e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ot_int c;
    ot_u8* local_buf;

    /// The datastream is buffered in an unused part of the data-queue.
    /// The LOCAL_U8() macro behaves similar to array nomenclature
    local_buf = &LOCAL_U8(0);
 8005e3a:	4b1c      	ldr	r3, [pc, #112]	; (8005eac <sub_load_charcorrelation+0x74>)
 8005e3c:	68dc      	ldr	r4, [r3, #12]
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	3b10      	subs	r3, #16
 8005e42:	18e4      	adds	r4, r4, r3
    local_buf[*cursor] = data_byte;
 8005e44:	2200      	movs	r2, #0
 8005e46:	5e83      	ldrsh	r3, [r0, r2]
 8005e48:	54e1      	strb	r1, [r4, r3]

    /// If the datastream is *not* fully pre-buffered, return to the caller.
    /// If the datastream is fully pre-buffered, then proceed to correlation.
    if ( *cursor < (m2qp.qtmpl.length-1) ) {
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	5ec2      	ldrsh	r2, [r0, r3]
 8005e4e:	4b18      	ldr	r3, [pc, #96]	; (8005eb0 <sub_load_charcorrelation+0x78>)
 8005e50:	7a5b      	ldrb	r3, [r3, #9]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	429a      	cmp	r2, r3
 8005e56:	db02      	blt.n	8005e5e <sub_load_charcorrelation+0x26>
    /// Equality Correlation with data shifting of the buffer after each
    /// comparison operation.  The value c is the comparison score.  It is a
    /// bipolar accumulator, so a non-equality alters the score by -1 and an
    /// equality by +1.  It is implemented as c += (0 or 2) - 1
    else {
        for (i=0, c=0; i<m2qp.qtmpl.length; i++) {
 8005e58:	2700      	movs	r7, #0
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e00c      	b.n	8005e78 <sub_load_charcorrelation+0x40>
        (*cursor)++;
 8005e5e:	3201      	adds	r2, #1
 8005e60:	8002      	strh	r2, [r0, #0]
        return 0;
 8005e62:	2000      	movs	r0, #0
 8005e64:	e021      	b.n	8005eaa <sub_load_charcorrelation+0x72>
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 8005e66:	2200      	movs	r2, #0
 8005e68:	19d2      	adds	r2, r2, r7
 8005e6a:	b292      	uxth	r2, r2
                   (m2qp.qtmpl.value[i] & m2qp.qtmpl.mask[i]) ) << 1;
            c -= 1;
 8005e6c:	3a01      	subs	r2, #1
 8005e6e:	b217      	sxth	r7, r2

            local_buf[i-1] = local_buf[i];
 8005e70:	3901      	subs	r1, #1
 8005e72:	5465      	strb	r5, [r4, r1]
        for (i=0, c=0; i<m2qp.qtmpl.length; i++) {
 8005e74:	3301      	adds	r3, #1
 8005e76:	b21b      	sxth	r3, r3
 8005e78:	4a0d      	ldr	r2, [pc, #52]	; (8005eb0 <sub_load_charcorrelation+0x78>)
 8005e7a:	7a52      	ldrb	r2, [r2, #9]
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	da0b      	bge.n	8005e98 <sub_load_charcorrelation+0x60>
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 8005e80:	0019      	movs	r1, r3
 8005e82:	5ce5      	ldrb	r5, [r4, r3]
                   (m2qp.qtmpl.value[i] & m2qp.qtmpl.mask[i]) ) << 1;
 8005e84:	4e0a      	ldr	r6, [pc, #40]	; (8005eb0 <sub_load_charcorrelation+0x78>)
 8005e86:	6932      	ldr	r2, [r6, #16]
 8005e88:	5cd0      	ldrb	r0, [r2, r3]
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 8005e8a:	68f2      	ldr	r2, [r6, #12]
 8005e8c:	5cd2      	ldrb	r2, [r2, r3]
 8005e8e:	4068      	eors	r0, r5
 8005e90:	4210      	tst	r0, r2
 8005e92:	d1e8      	bne.n	8005e66 <sub_load_charcorrelation+0x2e>
 8005e94:	2202      	movs	r2, #2
 8005e96:	e7e7      	b.n	8005e68 <sub_load_charcorrelation+0x30>

    /// One parameter of the correlation query is a correlation threshold.  It
    /// occupies the lower 5 bits of the query code.  It is an integer value.
    /// Scores higher than the threshold are passing scores.  The query score
    /// indicates the number of hits the query made on the file data.
    return (c >= (ot_int)(m2qp.qtmpl.code & 0x1F));
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <sub_load_charcorrelation+0x78>)
 8005e9a:	7a1a      	ldrb	r2, [r3, #8]
 8005e9c:	231f      	movs	r3, #31
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	17f8      	asrs	r0, r7, #31
 8005ea2:	0fda      	lsrs	r2, r3, #31
 8005ea4:	429f      	cmp	r7, r3
 8005ea6:	4150      	adcs	r0, r2
 8005ea8:	b200      	sxth	r0, r0
}
 8005eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eac:	20002d68 	.word	0x20002d68
 8005eb0:	20002700 	.word	0x20002700

08005eb4 <sub_load_comparison>:


ot_int sub_load_comparison(ot_int* cursor, ot_u8 data_byte) {
 8005eb4:	b530      	push	{r4, r5, lr}
/// Just loads comparison data, from the file system, into the local buffer.
/// Comparison is limited to16 bytes per the Mode 2 Spec.
    LOCAL_U8(*cursor) = data_byte;
 8005eb6:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <sub_load_comparison+0x20>)
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	3b10      	subs	r3, #16
 8005ebe:	2500      	movs	r5, #0
 8005ec0:	5f44      	ldrsh	r4, [r0, r5]
 8005ec2:	191b      	adds	r3, r3, r4
 8005ec4:	54d1      	strb	r1, [r2, r3]
    (*cursor)++;
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	5e83      	ldrsh	r3, [r0, r2]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	8003      	strh	r3, [r0, #0]
    return 0;
}
 8005ece:	2000      	movs	r0, #0
 8005ed0:	bd30      	pop	{r4, r5, pc}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	20002d68 	.word	0x20002d68

08005ed8 <sub_load_return>:


ot_int sub_load_return(ot_int* cursor, ot_u8 data_byte) {
 8005ed8:	b510      	push	{r4, lr}
 8005eda:	0004      	movs	r4, r0
/// Just loads file data into the TX queue.
    q_writebyte(&txq, data_byte);
 8005edc:	4804      	ldr	r0, [pc, #16]	; (8005ef0 <sub_load_return+0x18>)
 8005ede:	f001 f905 	bl	80070ec <q_writebyte>
    (*cursor)++;
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	5ea3      	ldrsh	r3, [r4, r2]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	8023      	strh	r3, [r4, #0]
    return 0;
}
 8005eea:	2000      	movs	r0, #0
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	20002d68 	.word	0x20002d68

08005ef4 <m2qp_sig_isf>:
OT_WEAK ot_bool m2qp_sig_isf(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	4770      	bx	lr

08005ef8 <sub_opgroup_globalisf>:
void sub_opgroup_globalisf(void) {
 8005ef8:	b510      	push	{r4, lr}
    M2QP_CB_ISF();
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <sub_opgroup_globalisf+0x18>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	210f      	movs	r1, #15
 8005f00:	4019      	ands	r1, r3
 8005f02:	2070      	movs	r0, #112	; 0x70
 8005f04:	4018      	ands	r0, r3
 8005f06:	4a03      	ldr	r2, [pc, #12]	; (8005f14 <sub_opgroup_globalisf+0x1c>)
 8005f08:	f7ff fff4 	bl	8005ef4 <m2qp_sig_isf>
}
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	20002700 	.word	0x20002700
 8005f14:	2000269c 	.word	0x2000269c

08005f18 <sub_opgroup_udp>:
void sub_opgroup_udp(void) {
 8005f18:	b510      	push	{r4, lr}
    rxq.putcursor = rxq.back;
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <sub_opgroup_udp+0x2c>)
 8005f1c:	691a      	ldr	r2, [r3, #16]
 8005f1e:	609a      	str	r2, [r3, #8]
    status  = alp_parse_message(&m2alp, &m2np.rt.dlog);
 8005f20:	4909      	ldr	r1, [pc, #36]	; (8005f48 <sub_opgroup_udp+0x30>)
 8005f22:	480a      	ldr	r0, [pc, #40]	; (8005f4c <sub_opgroup_udp+0x34>)
 8005f24:	f000 fedd 	bl	8006ce2 <alp_parse_message>
    if (status == MSG_Null) {
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d000      	beq.n	8005f2e <sub_opgroup_udp+0x16>
}
 8005f2c:	bd10      	pop	{r4, pc}
        M2QP_CB_ISF();
 8005f2e:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <sub_opgroup_udp+0x38>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	210f      	movs	r1, #15
 8005f34:	4019      	ands	r1, r3
 8005f36:	3070      	adds	r0, #112	; 0x70
 8005f38:	4018      	ands	r0, r3
 8005f3a:	4a03      	ldr	r2, [pc, #12]	; (8005f48 <sub_opgroup_udp+0x30>)
 8005f3c:	f7ff ffda 	bl	8005ef4 <m2qp_sig_isf>
}
 8005f40:	e7f4      	b.n	8005f2c <sub_opgroup_udp+0x14>
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	20002d54 	.word	0x20002d54
 8005f48:	2000269c 	.word	0x2000269c
 8005f4c:	20002714 	.word	0x20002714
 8005f50:	20002700 	.word	0x20002700

08005f54 <m2qp_sig_ctl>:
OT_WEAK ot_bool m2qp_sig_ctl(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 8005f54:	2000      	movs	r0, #0
 8005f56:	4770      	bx	lr

08005f58 <m2qp_sig_a2p>:
OT_WEAK ot_bool m2qp_sig_a2p(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 8005f58:	2000      	movs	r0, #0
 8005f5a:	4770      	bx	lr

08005f5c <m2qp_init>:
OT_WEAK void m2qp_init() {
 8005f5c:	b510      	push	{r4, lr}
    m2qp.cmd.code = 0x1F;
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <m2qp_init+0x14>)
 8005f60:	221f      	movs	r2, #31
 8005f62:	701a      	strb	r2, [r3, #0]
    alp_init(&m2alp, &rxq, &txq);
 8005f64:	4a03      	ldr	r2, [pc, #12]	; (8005f74 <m2qp_init+0x18>)
 8005f66:	4904      	ldr	r1, [pc, #16]	; (8005f78 <m2qp_init+0x1c>)
 8005f68:	4804      	ldr	r0, [pc, #16]	; (8005f7c <m2qp_init+0x20>)
 8005f6a:	f000 feb3 	bl	8006cd4 <alp_init>
}
 8005f6e:	bd10      	pop	{r4, pc}
 8005f70:	20002700 	.word	0x20002700
 8005f74:	20002d68 	.word	0x20002d68
 8005f78:	20002d54 	.word	0x20002d54
 8005f7c:	20002714 	.word	0x20002714

08005f80 <sub_parse_response>:
ot_int sub_parse_response(m2session* active) {
 8005f80:	b570      	push	{r4, r5, r6, lr}
    req_cmdcode     = m2qp.cmd.code;
 8005f82:	4d17      	ldr	r5, [pc, #92]	; (8005fe0 <sub_parse_response+0x60>)
 8005f84:	782c      	ldrb	r4, [r5, #0]
    m2qp.cmd.code   = q_readbyte(&rxq);
 8005f86:	4817      	ldr	r0, [pc, #92]	; (8005fe4 <sub_parse_response+0x64>)
 8005f88:	f001 f8df 	bl	800714a <q_readbyte>
 8005f8c:	7028      	strb	r0, [r5, #0]
    if (((req_cmdcode ^ m2qp.cmd.code) & 0x0F) == 0) {
 8005f8e:	4060      	eors	r0, r4
 8005f90:	0703      	lsls	r3, r0, #28
 8005f92:	d10a      	bne.n	8005faa <sub_parse_response+0x2a>
        if (((req_cmdcode & 0x60) == M2TT_REQ_M_INIT) && (q_writespace(&txq) > 48)) {
 8005f94:	2360      	movs	r3, #96	; 0x60
 8005f96:	4023      	ands	r3, r4
 8005f98:	2b40      	cmp	r3, #64	; 0x40
 8005f9a:	d009      	beq.n	8005fb0 <sub_parse_response+0x30>
            opgroup_proc[((req_cmdcode>>1) & 7)]();
 8005f9c:	0864      	lsrs	r4, r4, #1
 8005f9e:	2307      	movs	r3, #7
 8005fa0:	401c      	ands	r4, r3
 8005fa2:	00a4      	lsls	r4, r4, #2
 8005fa4:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <sub_parse_response+0x68>)
 8005fa6:	58e3      	ldr	r3, [r4, r3]
 8005fa8:	4798      	blx	r3
    return -1; //(ot_int)test - 1;
 8005faa:	2001      	movs	r0, #1
}
 8005fac:	4240      	negs	r0, r0
 8005fae:	bd70      	pop	{r4, r5, r6, pc}
        if (((req_cmdcode & 0x60) == M2TT_REQ_M_INIT) && (q_writespace(&txq) > 48)) {
 8005fb0:	480e      	ldr	r0, [pc, #56]	; (8005fec <sub_parse_response+0x6c>)
 8005fb2:	f001 f858 	bl	8007066 <q_writespace>
 8005fb6:	2830      	cmp	r0, #48	; 0x30
 8005fb8:	ddf0      	ble.n	8005f9c <sub_parse_response+0x1c>
            txq.getcursor[0]++;
 8005fba:	480c      	ldr	r0, [pc, #48]	; (8005fec <sub_parse_response+0x6c>)
 8005fbc:	6842      	ldr	r2, [r0, #4]
 8005fbe:	7813      	ldrb	r3, [r2, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	7013      	strb	r3, [r2, #0]
            q_writestring(&txq, m2np.rt.dlog.value, m2np.rt.dlog.length);
 8005fc4:	4d0a      	ldr	r5, [pc, #40]	; (8005ff0 <sub_parse_response+0x70>)
 8005fc6:	792a      	ldrb	r2, [r5, #4]
 8005fc8:	68a9      	ldr	r1, [r5, #8]
 8005fca:	f001 f8ee 	bl	80071aa <q_writestring>
            test = (ot_u8)M2QP_CB_A2P();
 8005fce:	1d2a      	adds	r2, r5, #4
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	f7ff ffc0 	bl	8005f58 <m2qp_sig_a2p>
        if (test) {
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d1df      	bne.n	8005f9c <sub_parse_response+0x1c>
 8005fdc:	e7e5      	b.n	8005faa <sub_parse_response+0x2a>
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	20002700 	.word	0x20002700
 8005fe4:	20002d54 	.word	0x20002d54
 8005fe8:	0800b1b0 	.word	0x0800b1b0
 8005fec:	20002d68 	.word	0x20002d68
 8005ff0:	20002698 	.word	0x20002698

08005ff4 <sub_parse_control>:
ot_int sub_parse_control(m2session* active) {
 8005ff4:	b570      	push	{r4, r5, r6, lr}
    code    = q_readbyte(&rxq);
 8005ff6:	4c07      	ldr	r4, [pc, #28]	; (8006014 <sub_parse_control+0x20>)
 8005ff8:	0020      	movs	r0, r4
 8005ffa:	f001 f8a6 	bl	800714a <q_readbyte>
 8005ffe:	0005      	movs	r5, r0
    subcode = q_readbyte(&rxq);
 8006000:	0020      	movs	r0, r4
 8006002:	f001 f8a2 	bl	800714a <q_readbyte>
 8006006:	0001      	movs	r1, r0
    return (ot_int)M2QP_CB_ERROR(code, subcode);
 8006008:	4a03      	ldr	r2, [pc, #12]	; (8006018 <sub_parse_control+0x24>)
 800600a:	0028      	movs	r0, r5
 800600c:	f7ff ffa2 	bl	8005f54 <m2qp_sig_ctl>
 8006010:	b200      	sxth	r0, r0
}
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	20002d54 	.word	0x20002d54
 8006018:	2000269c 	.word	0x2000269c

0800601c <sub_renack>:
void sub_renack(ot_int nack) {
 800601c:	b510      	push	{r4, lr}
 800601e:	0001      	movs	r1, r0
    txq.getcursor[-1]  |= 0x10;     //M2QP Nack Bit
 8006020:	4807      	ldr	r0, [pc, #28]	; (8006040 <sub_renack+0x24>)
 8006022:	6843      	ldr	r3, [r0, #4]
 8006024:	3b01      	subs	r3, #1
 8006026:	781a      	ldrb	r2, [r3, #0]
 8006028:	2410      	movs	r4, #16
 800602a:	4322      	orrs	r2, r4
 800602c:	701a      	strb	r2, [r3, #0]
    txq.front[3]       |= 1;        //DLL Nack Bit ///@todo wrap into DLL layer
 800602e:	68c2      	ldr	r2, [r0, #12]
 8006030:	78d3      	ldrb	r3, [r2, #3]
 8006032:	2401      	movs	r4, #1
 8006034:	4323      	orrs	r3, r4
 8006036:	70d3      	strb	r3, [r2, #3]
    q_writebyte(&txq, (ot_u8)nack);
 8006038:	b2c9      	uxtb	r1, r1
 800603a:	f001 f857 	bl	80070ec <q_writebyte>
}
 800603e:	bd10      	pop	{r4, pc}
 8006040:	20002d68 	.word	0x20002d68

08006044 <sub_opgroup_rfu>:
void sub_opgroup_rfu(void) {
 8006044:	b510      	push	{r4, lr}
    sub_renack(1);
 8006046:	2001      	movs	r0, #1
 8006048:	f7ff ffe8 	bl	800601c <sub_renack>
}
 800604c:	bd10      	pop	{r4, pc}
	...

08006050 <sub_load_query>:
void sub_load_query(void) {
 8006050:	b570      	push	{r4, r5, r6, lr}
    m2qp.qtmpl.length = q_readbyte(&rxq);
 8006052:	4d0f      	ldr	r5, [pc, #60]	; (8006090 <sub_load_query+0x40>)
 8006054:	0028      	movs	r0, r5
 8006056:	f001 f878 	bl	800714a <q_readbyte>
 800605a:	4c0e      	ldr	r4, [pc, #56]	; (8006094 <sub_load_query+0x44>)
 800605c:	7260      	strb	r0, [r4, #9]
    m2qp.qtmpl.code   = q_readbyte(&rxq);
 800605e:	0028      	movs	r0, r5
 8006060:	f001 f873 	bl	800714a <q_readbyte>
 8006064:	7220      	strb	r0, [r4, #8]
    if ((m2qp.qtmpl.code & M2QC_MASKED) != 0) {
 8006066:	b240      	sxtb	r0, r0
 8006068:	2800      	cmp	r0, #0
 800606a:	db0a      	blt.n	8006082 <sub_load_query+0x32>
        m2qp.qtmpl.mask = (ot_u8*)fixed_mask;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <sub_load_query+0x48>)
 800606e:	4a09      	ldr	r2, [pc, #36]	; (8006094 <sub_load_query+0x44>)
 8006070:	3320      	adds	r3, #32
 8006072:	60d3      	str	r3, [r2, #12]
    m2qp.qtmpl.value  = q_markbyte(&rxq, m2qp.qtmpl.length);
 8006074:	4c07      	ldr	r4, [pc, #28]	; (8006094 <sub_load_query+0x44>)
 8006076:	7a61      	ldrb	r1, [r4, #9]
 8006078:	4805      	ldr	r0, [pc, #20]	; (8006090 <sub_load_query+0x40>)
 800607a:	f001 f832 	bl	80070e2 <q_markbyte>
 800607e:	6120      	str	r0, [r4, #16]
}
 8006080:	bd70      	pop	{r4, r5, r6, pc}
        m2qp.qtmpl.mask = q_markbyte(&rxq, m2qp.qtmpl.length);
 8006082:	4c04      	ldr	r4, [pc, #16]	; (8006094 <sub_load_query+0x44>)
 8006084:	7a61      	ldrb	r1, [r4, #9]
 8006086:	4802      	ldr	r0, [pc, #8]	; (8006090 <sub_load_query+0x40>)
 8006088:	f001 f82b 	bl	80070e2 <q_markbyte>
 800608c:	60e0      	str	r0, [r4, #12]
 800608e:	e7f1      	b.n	8006074 <sub_load_query+0x24>
 8006090:	20002d54 	.word	0x20002d54
 8006094:	20002700 	.word	0x20002700
 8006098:	0800b1b0 	.word	0x0800b1b0

0800609c <m2qp_load_isf>:
                                id_tmpl*    user_id ) {
 800609c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609e:	46de      	mov	lr, fp
 80060a0:	4657      	mov	r7, sl
 80060a2:	464e      	mov	r6, r9
 80060a4:	4645      	mov	r5, r8
 80060a6:	b5e0      	push	{r5, r6, r7, lr}
 80060a8:	b085      	sub	sp, #20
 80060aa:	4682      	mov	sl, r0
 80060ac:	0008      	movs	r0, r1
 80060ae:	0014      	movs	r4, r2
 80060b0:	4699      	mov	r9, r3
    ot_int  j       = 0;
 80060b2:	ab02      	add	r3, sp, #8
 80060b4:	2200      	movs	r2, #0
 80060b6:	805a      	strh	r2, [r3, #2]
    if (is_series) {
 80060b8:	4653      	mov	r3, sl
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <m2qp_load_isf+0x36>
        scratch.ubyte[0]    = isf_id;
 80060be:	ab03      	add	r3, sp, #12
 80060c0:	7019      	strb	r1, [r3, #0]
        n_files             = 1;
 80060c2:	2301      	movs	r3, #1
 80060c4:	469b      	mov	fp, r3
    vlFILE* fp_s    = NULL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	9301      	str	r3, [sp, #4]
    ot_int  output  = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	4698      	mov	r8, r3
    for (i=0; i<n_files; i++) {
 80060ce:	2600      	movs	r6, #0
 80060d0:	e01d      	b.n	800610e <m2qp_load_isf+0x72>
        fp_s = ISS_open( isf_id, VL_ACCESS_R, user_id );
 80060d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060d4:	2124      	movs	r1, #36	; 0x24
 80060d6:	f001 fb9e 	bl	8007816 <ISS_open>
 80060da:	9001      	str	r0, [sp, #4]
        if (fp_s == NULL) {
 80060dc:	2800      	cmp	r0, #0
 80060de:	d059      	beq.n	8006194 <m2qp_load_isf+0xf8>
        n_files = fp_s->length;
 80060e0:	2208      	movs	r2, #8
 80060e2:	5e83      	ldrsh	r3, [r0, r2]
 80060e4:	469b      	mov	fp, r3
 80060e6:	e7f0      	b.n	80060ca <m2qp_load_isf+0x2e>
        fp_f = ISF_open( scratch.ubyte[align], VL_ACCESS_R, user_id );
 80060e8:	ab03      	add	r3, sp, #12
 80060ea:	5d58      	ldrb	r0, [r3, r5]
 80060ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060ee:	2124      	movs	r1, #36	; 0x24
 80060f0:	f001 fb99 	bl	8007826 <ISF_open>
 80060f4:	1e07      	subs	r7, r0, #0
        if (fp_f == NULL) {
 80060f6:	d01a      	beq.n	800612e <m2qp_load_isf+0x92>
        offset -= fp_f->length;
 80060f8:	8905      	ldrh	r5, [r0, #8]
 80060fa:	1b65      	subs	r5, r4, r5
 80060fc:	b22d      	sxth	r5, r5
        if (offset < 0) {
 80060fe:	2d00      	cmp	r5, #0
 8006100:	db2c      	blt.n	800615c <m2qp_load_isf+0xc0>
        vl_close(fp_f);
 8006102:	0038      	movs	r0, r7
 8006104:	f001 fb4a 	bl	800779c <vl_close>
    for (i=0; i<n_files; i++) {
 8006108:	3601      	adds	r6, #1
 800610a:	b236      	sxth	r6, r6
 800610c:	002c      	movs	r4, r5
 800610e:	455e      	cmp	r6, fp
 8006110:	da35      	bge.n	800617e <m2qp_load_isf+0xe2>
        ot_u8 align = (i & 1);
 8006112:	2501      	movs	r5, #1
 8006114:	4035      	ands	r5, r6
        if ((is_series) && (align == 0)) {
 8006116:	4653      	mov	r3, sl
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0e5      	beq.n	80060e8 <m2qp_load_isf+0x4c>
 800611c:	2d00      	cmp	r5, #0
 800611e:	d1e3      	bne.n	80060e8 <m2qp_load_isf+0x4c>
            scratch.ushort = vl_read(fp_s, i);
 8006120:	b2b1      	uxth	r1, r6
 8006122:	9801      	ldr	r0, [sp, #4]
 8006124:	f001 fab8 	bl	8007698 <vl_read>
 8006128:	ab03      	add	r3, sp, #12
 800612a:	8018      	strh	r0, [r3, #0]
 800612c:	e7dc      	b.n	80060e8 <m2qp_load_isf+0x4c>
            vl_close(fp_s);
 800612e:	9801      	ldr	r0, [sp, #4]
 8006130:	f001 fb34 	bl	800779c <vl_close>
            return -32768;
 8006134:	4b19      	ldr	r3, [pc, #100]	; (800619c <m2qp_load_isf+0x100>)
 8006136:	4698      	mov	r8, r3
 8006138:	e024      	b.n	8006184 <m2qp_load_isf+0xe8>
                    ldata.ushort = vl_read(fp_f, offset);
 800613a:	b2a1      	uxth	r1, r4
 800613c:	0038      	movs	r0, r7
 800613e:	f001 faab 	bl	8007698 <vl_read>
 8006142:	ab02      	add	r3, sp, #8
 8006144:	8018      	strh	r0, [r3, #0]
                output += load_function( &j, ldata.ubyte[align] );
 8006146:	ab02      	add	r3, sp, #8
 8006148:	5d59      	ldrb	r1, [r3, r5]
 800614a:	1c98      	adds	r0, r3, #2
 800614c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800614e:	4798      	blx	r3
 8006150:	b280      	uxth	r0, r0
 8006152:	4440      	add	r0, r8
 8006154:	b203      	sxth	r3, r0
 8006156:	4698      	mov	r8, r3
                offset++;
 8006158:	3401      	adds	r4, #1
 800615a:	b224      	sxth	r4, r4
            while ( (j < window_bytes) && (offset < fp_f->length) ) {
 800615c:	ab02      	add	r3, sp, #8
 800615e:	3302      	adds	r3, #2
 8006160:	2200      	movs	r2, #0
 8006162:	5e9b      	ldrsh	r3, [r3, r2]
 8006164:	454b      	cmp	r3, r9
 8006166:	da08      	bge.n	800617a <m2qp_load_isf+0xde>
 8006168:	893b      	ldrh	r3, [r7, #8]
 800616a:	429c      	cmp	r4, r3
 800616c:	da03      	bge.n	8006176 <m2qp_load_isf+0xda>
                align = offset & 1;
 800616e:	2501      	movs	r5, #1
 8006170:	4025      	ands	r5, r4
                if (align == 0) {
 8006172:	d1e8      	bne.n	8006146 <m2qp_load_isf+0xaa>
 8006174:	e7e1      	b.n	800613a <m2qp_load_isf+0x9e>
            offset = 0;
 8006176:	2500      	movs	r5, #0
 8006178:	e7c3      	b.n	8006102 <m2qp_load_isf+0x66>
 800617a:	2500      	movs	r5, #0
 800617c:	e7c1      	b.n	8006102 <m2qp_load_isf+0x66>
    vl_close(fp_s);
 800617e:	9801      	ldr	r0, [sp, #4]
 8006180:	f001 fb0c 	bl	800779c <vl_close>
}
 8006184:	4640      	mov	r0, r8
 8006186:	b005      	add	sp, #20
 8006188:	bc3c      	pop	{r2, r3, r4, r5}
 800618a:	4690      	mov	r8, r2
 800618c:	4699      	mov	r9, r3
 800618e:	46a2      	mov	sl, r4
 8006190:	46ab      	mov	fp, r5
 8006192:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -32768;
 8006194:	4b01      	ldr	r3, [pc, #4]	; (800619c <m2qp_load_isf+0x100>)
 8006196:	4698      	mov	r8, r3
 8006198:	e7f4      	b.n	8006184 <m2qp_load_isf+0xe8>
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	ffff8000 	.word	0xffff8000

080061a0 <m2qp_isf_comp>:
OT_WEAK ot_int m2qp_isf_comp(ot_u8 is_series, id_tmpl* user_id) {
 80061a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061a2:	b083      	sub	sp, #12
 80061a4:	0004      	movs	r4, r0
 80061a6:	000e      	movs	r6, r1
        m2qp.qtmpl.length   = (m2qp.qtmpl.code) ? m2qp.qtmpl.length : 0;
 80061a8:	4b38      	ldr	r3, [pc, #224]	; (800628c <m2qp_isf_comp+0xec>)
 80061aa:	7a1b      	ldrb	r3, [r3, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d03b      	beq.n	8006228 <m2qp_isf_comp+0x88>
 80061b0:	4a36      	ldr	r2, [pc, #216]	; (800628c <m2qp_isf_comp+0xec>)
 80061b2:	7a51      	ldrb	r1, [r2, #9]
 80061b4:	4a35      	ldr	r2, [pc, #212]	; (800628c <m2qp_isf_comp+0xec>)
 80061b6:	7251      	strb	r1, [r2, #9]
                               &sub_load_charcorrelation : &sub_load_comparison;
 80061b8:	065b      	lsls	r3, r3, #25
 80061ba:	d537      	bpl.n	800622c <m2qp_isf_comp+0x8c>
 80061bc:	4d34      	ldr	r5, [pc, #208]	; (8006290 <m2qp_isf_comp+0xf0>)
        m2qp.qdata.comp_id  = q_readbyte(&rxq);
 80061be:	4835      	ldr	r0, [pc, #212]	; (8006294 <m2qp_isf_comp+0xf4>)
 80061c0:	f000 ffc3 	bl	800714a <q_readbyte>
 80061c4:	4b31      	ldr	r3, [pc, #196]	; (800628c <m2qp_isf_comp+0xec>)
 80061c6:	7098      	strb	r0, [r3, #2]
        if (is_series)  m2qp.qdata.comp_offset  = q_readshort(&rxq);
 80061c8:	2c00      	cmp	r4, #0
 80061ca:	d031      	beq.n	8006230 <m2qp_isf_comp+0x90>
 80061cc:	4831      	ldr	r0, [pc, #196]	; (8006294 <m2qp_isf_comp+0xf4>)
 80061ce:	f000 ffc1 	bl	8007154 <q_readshort>
 80061d2:	4b2e      	ldr	r3, [pc, #184]	; (800628c <m2qp_isf_comp+0xec>)
 80061d4:	8098      	strh	r0, [r3, #4]
        score   = m2qp_load_isf(is_series, m2qp.qdata.comp_id, m2qp.qdata.comp_offset,
 80061d6:	4b2d      	ldr	r3, [pc, #180]	; (800628c <m2qp_isf_comp+0xec>)
 80061d8:	7899      	ldrb	r1, [r3, #2]
 80061da:	2004      	movs	r0, #4
 80061dc:	5e1a      	ldrsh	r2, [r3, r0]
 80061de:	7a5b      	ldrb	r3, [r3, #9]
 80061e0:	9601      	str	r6, [sp, #4]
 80061e2:	9500      	str	r5, [sp, #0]
 80061e4:	0020      	movs	r0, r4
 80061e6:	f7ff ff59 	bl	800609c <m2qp_load_isf>
 80061ea:	1e03      	subs	r3, r0, #0
    if (score < 0) {
 80061ec:	db2a      	blt.n	8006244 <m2qp_isf_comp+0xa4>
    else if (m2qp.qtmpl.code & M2QC_COR_SEARCH) {
 80061ee:	4a27      	ldr	r2, [pc, #156]	; (800628c <m2qp_isf_comp+0xec>)
 80061f0:	7a17      	ldrb	r7, [r2, #8]
 80061f2:	067a      	lsls	r2, r7, #25
 80061f4:	d422      	bmi.n	800623c <m2qp_isf_comp+0x9c>
    else if (m2qp.qtmpl.code & M2QC_ALU) {
 80061f6:	06bb      	lsls	r3, r7, #26
 80061f8:	d524      	bpl.n	8006244 <m2qp_isf_comp+0xa4>
        for (i=0; i<m2qp.qtmpl.length; i++) {
 80061fa:	2300      	movs	r3, #0
 80061fc:	4a23      	ldr	r2, [pc, #140]	; (800628c <m2qp_isf_comp+0xec>)
 80061fe:	7a52      	ldrb	r2, [r2, #9]
 8006200:	4293      	cmp	r3, r2
 8006202:	da34      	bge.n	800626e <m2qp_isf_comp+0xce>
            ot_u8* local_buf = &LOCAL_U8(0);
 8006204:	4a24      	ldr	r2, [pc, #144]	; (8006298 <m2qp_isf_comp+0xf8>)
 8006206:	68d4      	ldr	r4, [r2, #12]
 8006208:	8815      	ldrh	r5, [r2, #0]
 800620a:	3d10      	subs	r5, #16
            j = m2qp.qtmpl.mask[i] & m2qp.qtmpl.value[i];
 800620c:	4a1f      	ldr	r2, [pc, #124]	; (800628c <m2qp_isf_comp+0xec>)
 800620e:	68d1      	ldr	r1, [r2, #12]
 8006210:	5cce      	ldrb	r6, [r1, r3]
 8006212:	6912      	ldr	r2, [r2, #16]
 8006214:	5cd1      	ldrb	r1, [r2, r3]
 8006216:	4031      	ands	r1, r6
            k = m2qp.qtmpl.mask[i] & local_buf[i];
 8006218:	1964      	adds	r4, r4, r5
 800621a:	5ce2      	ldrb	r2, [r4, r3]
 800621c:	4032      	ands	r2, r6
            if (j != k) {
 800621e:	4291      	cmp	r1, r2
 8006220:	d112      	bne.n	8006248 <m2qp_isf_comp+0xa8>
        for (i=0; i<m2qp.qtmpl.length; i++) {
 8006222:	3301      	adds	r3, #1
 8006224:	b21b      	sxth	r3, r3
 8006226:	e7e9      	b.n	80061fc <m2qp_isf_comp+0x5c>
        m2qp.qtmpl.length   = (m2qp.qtmpl.code) ? m2qp.qtmpl.length : 0;
 8006228:	0019      	movs	r1, r3
 800622a:	e7c3      	b.n	80061b4 <m2qp_isf_comp+0x14>
                               &sub_load_charcorrelation : &sub_load_comparison;
 800622c:	4d1b      	ldr	r5, [pc, #108]	; (800629c <m2qp_isf_comp+0xfc>)
 800622e:	e7c6      	b.n	80061be <m2qp_isf_comp+0x1e>
        else            m2qp.qdata.comp_offset  = q_readbyte(&rxq);
 8006230:	4818      	ldr	r0, [pc, #96]	; (8006294 <m2qp_isf_comp+0xf4>)
 8006232:	f000 ff8a 	bl	800714a <q_readbyte>
 8006236:	4b15      	ldr	r3, [pc, #84]	; (800628c <m2qp_isf_comp+0xec>)
 8006238:	8098      	strh	r0, [r3, #4]
 800623a:	e7cc      	b.n	80061d6 <m2qp_isf_comp+0x36>
        score -= (score == 0);
 800623c:	4258      	negs	r0, r3
 800623e:	4158      	adcs	r0, r3
 8006240:	1a18      	subs	r0, r3, r0
 8006242:	b200      	sxth	r0, r0
}
 8006244:	b003      	add	sp, #12
 8006246:	bdf0      	pop	{r4, r5, r6, r7, pc}
                switch (m2qp.qtmpl.code & 0x1F) {
 8006248:	201f      	movs	r0, #31
 800624a:	4038      	ands	r0, r7
 800624c:	b2c3      	uxtb	r3, r0
 800624e:	2b05      	cmp	r3, #5
 8006250:	d812      	bhi.n	8006278 <m2qp_isf_comp+0xd8>
 8006252:	0080      	lsls	r0, r0, #2
 8006254:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <m2qp_isf_comp+0x100>)
 8006256:	581b      	ldr	r3, [r3, r0]
 8006258:	469f      	mov	pc, r3
                    case 0: return 0;                   // !=
 800625a:	2000      	movs	r0, #0
 800625c:	e7f2      	b.n	8006244 <m2qp_isf_comp+0xa4>
                    case 3: return (j < k) - 1;         // <, <=
 800625e:	4291      	cmp	r1, r2
 8006260:	da0d      	bge.n	800627e <m2qp_isf_comp+0xde>
 8006262:	2000      	movs	r0, #0
 8006264:	e7ee      	b.n	8006244 <m2qp_isf_comp+0xa4>
                    case 5: return (j > k) - 1;         // >, >=
 8006266:	4291      	cmp	r1, r2
 8006268:	dd0c      	ble.n	8006284 <m2qp_isf_comp+0xe4>
 800626a:	2000      	movs	r0, #0
 800626c:	e7ea      	b.n	8006244 <m2qp_isf_comp+0xa4>
        return ((ot_int)m2qp.qtmpl.code & 1) - 1;
 800626e:	2001      	movs	r0, #1
 8006270:	4038      	ands	r0, r7
 8006272:	3801      	subs	r0, #1
 8006274:	b200      	sxth	r0, r0
 8006276:	e7e5      	b.n	8006244 <m2qp_isf_comp+0xa4>
                    case 1: return -1;                  // ==
 8006278:	2001      	movs	r0, #1
 800627a:	4240      	negs	r0, r0
 800627c:	e7e2      	b.n	8006244 <m2qp_isf_comp+0xa4>
                    case 3: return (j < k) - 1;         // <, <=
 800627e:	2001      	movs	r0, #1
 8006280:	4240      	negs	r0, r0
 8006282:	e7df      	b.n	8006244 <m2qp_isf_comp+0xa4>
                    case 5: return (j > k) - 1;         // >, >=
 8006284:	2001      	movs	r0, #1
 8006286:	4240      	negs	r0, r0
 8006288:	e7dc      	b.n	8006244 <m2qp_isf_comp+0xa4>
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	20002700 	.word	0x20002700
 8006290:	08005e39 	.word	0x08005e39
 8006294:	20002d54 	.word	0x20002d54
 8006298:	20002d68 	.word	0x20002d68
 800629c:	08005eb5 	.word	0x08005eb5
 80062a0:	0800b198 	.word	0x0800b198

080062a4 <sub_process_query>:
ot_int sub_process_query(m2session* active) {
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	0005      	movs	r5, r0
    ot_u8 cmd_type = m2qp.cmd.code & 0x70;
 80062a8:	4b26      	ldr	r3, [pc, #152]	; (8006344 <sub_process_query+0xa0>)
 80062aa:	781f      	ldrb	r7, [r3, #0]
 80062ac:	2370      	movs	r3, #112	; 0x70
 80062ae:	403b      	ands	r3, r7
    if (cmd_type > M2TT_REQ_M_INIT) {     ///@todo future update code
 80062b0:	2b40      	cmp	r3, #64	; 0x40
 80062b2:	d915      	bls.n	80062e0 <sub_process_query+0x3c>
        ot_int  number_of_acks  = (ot_int)q_readbyte(&rxq);
 80062b4:	4824      	ldr	r0, [pc, #144]	; (8006348 <sub_process_query+0xa4>)
 80062b6:	f000 ff48 	bl	800714a <q_readbyte>
 80062ba:	b204      	sxth	r4, r0
            id_test = m2np_idcmp(m2np.rt.dlog.length, q_markbyte(&rxq, m2np.rt.dlog.length));
 80062bc:	4b23      	ldr	r3, [pc, #140]	; (800634c <sub_process_query+0xa8>)
 80062be:	791e      	ldrb	r6, [r3, #4]
 80062c0:	0031      	movs	r1, r6
 80062c2:	4821      	ldr	r0, [pc, #132]	; (8006348 <sub_process_query+0xa4>)
 80062c4:	f000 ff0d 	bl	80070e2 <q_markbyte>
 80062c8:	0001      	movs	r1, r0
 80062ca:	0030      	movs	r0, r6
 80062cc:	f7ff f9c6 	bl	800565c <m2np_idcmp>
            number_of_acks--;
 80062d0:	3c01      	subs	r4, #1
 80062d2:	b224      	sxth	r4, r4
        while ((number_of_acks >= 0) && (id_test == False));
 80062d4:	2c00      	cmp	r4, #0
 80062d6:	db01      	blt.n	80062dc <sub_process_query+0x38>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d0ef      	beq.n	80062bc <sub_process_query+0x18>
        if (number_of_acks != 0) {
 80062dc:	2c00      	cmp	r4, #0
 80062de:	d129      	bne.n	8006334 <sub_process_query+0x90>
    sub_load_query();
 80062e0:	f7ff feb6 	bl	8006050 <sub_load_query>
    if (cmd_type & M2TT_REQ_M) {  ///@todo future update code
 80062e4:	067b      	lsls	r3, r7, #25
 80062e6:	d51d      	bpl.n	8006324 <sub_process_query+0x80>
        local_ptr       = rxq.getcursor;
 80062e8:	4c17      	ldr	r4, [pc, #92]	; (8006348 <sub_process_query+0xa4>)
 80062ea:	6867      	ldr	r7, [r4, #4]
        query_size      = q_readbyte(&rxq);                 //token
 80062ec:	0020      	movs	r0, r4
 80062ee:	f000 ff2c 	bl	800714a <q_readbyte>
 80062f2:	0006      	movs	r6, r0
        query_size    <<= ((q_readbyte(&rxq) & 0x80) != 0);  //mask
 80062f4:	0020      	movs	r0, r4
 80062f6:	f000 ff28 	bl	800714a <q_readbyte>
 80062fa:	b240      	sxtb	r0, r0
 80062fc:	0fc0      	lsrs	r0, r0, #31
 80062fe:	4086      	lsls	r6, r0
 8006300:	b236      	sxth	r6, r6
        rxq.getcursor  += query_size;
 8006302:	6863      	ldr	r3, [r4, #4]
 8006304:	469c      	mov	ip, r3
 8006306:	4466      	add	r6, ip
 8006308:	6066      	str	r6, [r4, #4]
        if (m2qp_isf_comp((m2qp.cmd.code & 1), &m2np.rt.dlog) < 0) {
 800630a:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <sub_process_query+0xa0>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2001      	movs	r0, #1
 8006310:	4018      	ands	r0, r3
 8006312:	490f      	ldr	r1, [pc, #60]	; (8006350 <sub_process_query+0xac>)
 8006314:	f7ff ff44 	bl	80061a0 <m2qp_isf_comp>
 8006318:	2800      	cmp	r0, #0
 800631a:	db0b      	blt.n	8006334 <sub_process_query+0x90>
        rxq.getcursor   = local_ptr;
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <sub_process_query+0xa4>)
 800631e:	605f      	str	r7, [r3, #4]
        sub_load_query();
 8006320:	f7ff fe96 	bl	8006050 <sub_load_query>
    return m2qp_isf_comp((m2qp.cmd.code & 1), &m2np.rt.dlog);
 8006324:	4b07      	ldr	r3, [pc, #28]	; (8006344 <sub_process_query+0xa0>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2001      	movs	r0, #1
 800632a:	4018      	ands	r0, r3
 800632c:	4908      	ldr	r1, [pc, #32]	; (8006350 <sub_process_query+0xac>)
 800632e:	f7ff ff37 	bl	80061a0 <m2qp_isf_comp>
}
 8006332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    active->flags &= ~M2FI_LISTEN;
 8006334:	7aea      	ldrb	r2, [r5, #11]
 8006336:	237f      	movs	r3, #127	; 0x7f
 8006338:	4013      	ands	r3, r2
 800633a:	72eb      	strb	r3, [r5, #11]
    return -1;
 800633c:	2001      	movs	r0, #1
 800633e:	4240      	negs	r0, r0
 8006340:	e7f7      	b.n	8006332 <sub_process_query+0x8e>
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	20002700 	.word	0x20002700
 8006348:	20002d54 	.word	0x20002d54
 800634c:	20002698 	.word	0x20002698
 8006350:	2000269c 	.word	0x2000269c

08006354 <sub_parse_request>:
ot_int sub_parse_request(m2session* active) {
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	0006      	movs	r6, r0
    active->netstate      &= ~M2_NETSTATE_TMASK;
 8006358:	79c3      	ldrb	r3, [r0, #7]
 800635a:	2270      	movs	r2, #112	; 0x70
 800635c:	4393      	bics	r3, r2
 800635e:	71c3      	strb	r3, [r0, #7]
    m2qp.cmd.code           = q_readbyte(&rxq);
 8006360:	4836      	ldr	r0, [pc, #216]	; (800643c <sub_parse_request+0xe8>)
 8006362:	f000 fef2 	bl	800714a <q_readbyte>
 8006366:	4b36      	ldr	r3, [pc, #216]	; (8006440 <sub_parse_request+0xec>)
 8006368:	7018      	strb	r0, [r3, #0]
    m2qp.cmd.ext            = (m2qp.cmd.code & 0x80) ? q_readbyte(&rxq) : 0;
 800636a:	b240      	sxtb	r0, r0
 800636c:	2800      	cmp	r0, #0
 800636e:	db31      	blt.n	80063d4 <sub_parse_request+0x80>
 8006370:	2300      	movs	r3, #0
 8006372:	4a33      	ldr	r2, [pc, #204]	; (8006440 <sub_parse_request+0xec>)
 8006374:	7053      	strb	r3, [r2, #1]
    dll.comm.redundants     = 1;
 8006376:	4d33      	ldr	r5, [pc, #204]	; (8006444 <sub_parse_request+0xf0>)
 8006378:	212f      	movs	r1, #47	; 0x2f
 800637a:	2001      	movs	r0, #1
 800637c:	5468      	strb	r0, [r5, r1]
    dll.comm.csmaca_params  = m2qp.cmd.ext & (M2_CSMACA_CAMASK | M2_CSMACA_NOCSMA);
 800637e:	303b      	adds	r0, #59	; 0x3b
 8006380:	4003      	ands	r3, r0
    dll.comm.csmaca_params |= m2qp.cmd.code & M2_CSMACA_ARBMASK;
 8006382:	7812      	ldrb	r2, [r2, #0]
 8006384:	b251      	sxtb	r1, r2
 8006386:	3004      	adds	r0, #4
 8006388:	4008      	ands	r0, r1
 800638a:	4318      	orrs	r0, r3
 800638c:	232e      	movs	r3, #46	; 0x2e
 800638e:	54e8      	strb	r0, [r5, r3]
    cmd_opcode              = m2qp.cmd.code & M2OP_MASK;
 8006390:	240f      	movs	r4, #15
 8006392:	4014      	ands	r4, r2
    {   ot_u8 timeout_code  = q_readbyte(&rxq);
 8006394:	4829      	ldr	r0, [pc, #164]	; (800643c <sub_parse_request+0xe8>)
 8006396:	f000 fed8 	bl	800714a <q_readbyte>
 800639a:	0007      	movs	r7, r0
        dll.comm.rx_timeout = otutils_calc_timeout(timeout_code);   // original contention period
 800639c:	f000 ff4b 	bl	8007236 <otutils_calc_timeout>
 80063a0:	62a8      	str	r0, [r5, #40]	; 0x28
        dll.comm.tc         = dll.comm.rx_timeout;                  // contention period counter
 80063a2:	6228      	str	r0, [r5, #32]
        if (timeout_code & 0x80) {
 80063a4:	063b      	lsls	r3, r7, #24
 80063a6:	d41a      	bmi.n	80063de <sub_parse_request+0x8a>
            dll.comm.tx_channels    = 1;
 80063a8:	4b26      	ldr	r3, [pc, #152]	; (8006444 <sub_parse_request+0xf0>)
 80063aa:	2230      	movs	r2, #48	; 0x30
 80063ac:	2101      	movs	r1, #1
 80063ae:	5499      	strb	r1, [r3, r2]
            dll.comm.tx_chanlist    = &dll.comm.scratch[0];
 80063b0:	001a      	movs	r2, r3
 80063b2:	322c      	adds	r2, #44	; 0x2c
 80063b4:	635a      	str	r2, [r3, #52]	; 0x34
            dll.comm.scratch[0]     = active->channel;
 80063b6:	79b1      	ldrb	r1, [r6, #6]
 80063b8:	222c      	movs	r2, #44	; 0x2c
 80063ba:	5499      	strb	r1, [r3, r2]
    if ((m2qp.cmd.code & 0x70) > M2TT_REQ_UB) {
 80063bc:	4b20      	ldr	r3, [pc, #128]	; (8006440 <sub_parse_request+0xec>)
 80063be:	781a      	ldrb	r2, [r3, #0]
 80063c0:	2370      	movs	r3, #112	; 0x70
 80063c2:	4013      	ands	r3, r2
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d917      	bls.n	80063f8 <sub_parse_request+0xa4>
        score = sub_process_query(active);
 80063c8:	0030      	movs	r0, r6
 80063ca:	f7ff ff6b 	bl	80062a4 <sub_process_query>
 80063ce:	1e05      	subs	r5, r0, #0
    if (score >= 0) {
 80063d0:	da13      	bge.n	80063fa <sub_parse_request+0xa6>
 80063d2:	e022      	b.n	800641a <sub_parse_request+0xc6>
    m2qp.cmd.ext            = (m2qp.cmd.code & 0x80) ? q_readbyte(&rxq) : 0;
 80063d4:	4819      	ldr	r0, [pc, #100]	; (800643c <sub_parse_request+0xe8>)
 80063d6:	f000 feb8 	bl	800714a <q_readbyte>
 80063da:	0003      	movs	r3, r0
 80063dc:	e7c9      	b.n	8006372 <sub_parse_request+0x1e>
            dll.comm.tx_channels    = q_readbyte(&rxq);
 80063de:	4d17      	ldr	r5, [pc, #92]	; (800643c <sub_parse_request+0xe8>)
 80063e0:	0028      	movs	r0, r5
 80063e2:	f000 feb2 	bl	800714a <q_readbyte>
 80063e6:	4f17      	ldr	r7, [pc, #92]	; (8006444 <sub_parse_request+0xf0>)
 80063e8:	2330      	movs	r3, #48	; 0x30
 80063ea:	54f8      	strb	r0, [r7, r3]
            dll.comm.tx_chanlist    = q_markbyte(&rxq, dll.comm.tx_channels);
 80063ec:	b201      	sxth	r1, r0
 80063ee:	0028      	movs	r0, r5
 80063f0:	f000 fe77 	bl	80070e2 <q_markbyte>
 80063f4:	6378      	str	r0, [r7, #52]	; 0x34
 80063f6:	e7e1      	b.n	80063bc <sub_parse_request+0x68>
    ot_int  score   = 0;
 80063f8:	2500      	movs	r5, #0
        q_empty(&txq); // Flush TX ot_queue
 80063fa:	4813      	ldr	r0, [pc, #76]	; (8006448 <sub_parse_request+0xf4>)
 80063fc:	f000 fe4f 	bl	800709e <q_empty>
        if (m2qp.cmd.ext & M2CE_NORESP) {
 8006400:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <sub_parse_request+0xec>)
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	079b      	lsls	r3, r3, #30
 8006406:	d50a      	bpl.n	800641e <sub_parse_request+0xca>
            active->netstate |= M2_NETSTATE_SCRAP;
 8006408:	79f3      	ldrb	r3, [r6, #7]
 800640a:	2204      	movs	r2, #4
 800640c:	4313      	orrs	r3, r2
 800640e:	71f3      	strb	r3, [r6, #7]
        opgroup_proc[((cmd_opcode>>1) & 7)]();
 8006410:	0864      	lsrs	r4, r4, #1
 8006412:	00a4      	lsls	r4, r4, #2
 8006414:	4b0d      	ldr	r3, [pc, #52]	; (800644c <sub_parse_request+0xf8>)
 8006416:	58e3      	ldr	r3, [r4, r3]
 8006418:	4798      	blx	r3
}
 800641a:	0028      	movs	r0, r5
 800641c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            active->netstate |= M2_NETSTATE_RESPTX;
 800641e:	79f3      	ldrb	r3, [r6, #7]
 8006420:	2210      	movs	r2, #16
 8006422:	4313      	orrs	r3, r2
 8006424:	71f3      	strb	r3, [r6, #7]
            m2np_header(active, 0, M2FI_FRDIALOG); ///@todo Future Update Code, Can use 0 in addressing for Response
 8006426:	2200      	movs	r2, #0
 8006428:	2100      	movs	r1, #0
 800642a:	0030      	movs	r0, r6
 800642c:	f7ff f8b0 	bl	8005590 <m2np_header>
            q_writebyte(&txq, (M2TT_RESPONSE | cmd_opcode));            // Write Cmd code byte
 8006430:	0021      	movs	r1, r4
 8006432:	4805      	ldr	r0, [pc, #20]	; (8006448 <sub_parse_request+0xf4>)
 8006434:	f000 fe5a 	bl	80070ec <q_writebyte>
 8006438:	e7ea      	b.n	8006410 <sub_parse_request+0xbc>
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	20002d54 	.word	0x20002d54
 8006440:	20002700 	.word	0x20002700
 8006444:	20002648 	.word	0x20002648
 8006448:	20002d68 	.word	0x20002d68
 800644c:	0800b1b0 	.word	0x0800b1b0

08006450 <m2qp_parse_frame>:
OT_WEAK ot_int m2qp_parse_frame(m2session* active) {
 8006450:	b510      	push	{r4, lr}
    ot_u8 cmd_type = (*rxq.getcursor >> 4) & 7;
 8006452:	4b0c      	ldr	r3, [pc, #48]	; (8006484 <m2qp_parse_frame+0x34>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	781a      	ldrb	r2, [r3, #0]
 8006458:	0912      	lsrs	r2, r2, #4
 800645a:	2307      	movs	r3, #7
 800645c:	4013      	ands	r3, r2
    if (cmd_type == 0)  return sub_parse_response(active);
 800645e:	d007      	beq.n	8006470 <m2qp_parse_frame+0x20>
    if (cmd_type == 1)  return sub_parse_control(active);
 8006460:	2b01      	cmp	r3, #1
 8006462:	d008      	beq.n	8006476 <m2qp_parse_frame+0x26>
    if (active->netstate & M2_NETSTATE_RESP) return -1;
 8006464:	79c3      	ldrb	r3, [r0, #7]
 8006466:	06db      	lsls	r3, r3, #27
 8006468:	d408      	bmi.n	800647c <m2qp_parse_frame+0x2c>
    return sub_parse_request(active);
 800646a:	f7ff ff73 	bl	8006354 <sub_parse_request>
}
 800646e:	bd10      	pop	{r4, pc}
    if (cmd_type == 0)  return sub_parse_response(active);
 8006470:	f7ff fd86 	bl	8005f80 <sub_parse_response>
 8006474:	e7fb      	b.n	800646e <m2qp_parse_frame+0x1e>
    if (cmd_type == 1)  return sub_parse_control(active);
 8006476:	f7ff fdbd 	bl	8005ff4 <sub_parse_control>
 800647a:	e7f8      	b.n	800646e <m2qp_parse_frame+0x1e>
    if (active->netstate & M2_NETSTATE_RESP) return -1;
 800647c:	2001      	movs	r0, #1
 800647e:	4240      	negs	r0, r0
 8006480:	e7f5      	b.n	800646e <m2qp_parse_frame+0x1e>
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	20002d54 	.word	0x20002d54

08006488 <m2qp_isf_call>:
OT_WEAK ot_int m2qp_isf_call( ot_u8 is_series, ot_queue* input_q, id_tmpl* user_id ) {
 8006488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648a:	46d6      	mov	lr, sl
 800648c:	464f      	mov	r7, r9
 800648e:	4646      	mov	r6, r8
 8006490:	b5c0      	push	{r6, r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	0006      	movs	r6, r0
 8006496:	9005      	str	r0, [sp, #20]
 8006498:	000c      	movs	r4, r1
 800649a:	0017      	movs	r7, r2
 800649c:	9203      	str	r2, [sp, #12]
    max_bytes   = (ot_int)q_readbyte(input_q);
 800649e:	0008      	movs	r0, r1
 80064a0:	f000 fe53 	bl	800714a <q_readbyte>
 80064a4:	b203      	sxth	r3, r0
 80064a6:	4698      	mov	r8, r3
    isf_id      = q_readbyte(input_q);
 80064a8:	0020      	movs	r0, r4
 80064aa:	f000 fe4e 	bl	800714a <q_readbyte>
 80064ae:	0005      	movs	r5, r0
 80064b0:	9004      	str	r0, [sp, #16]
    q_writebyte(&txq, isf_id);
 80064b2:	0001      	movs	r1, r0
 80064b4:	4847      	ldr	r0, [pc, #284]	; (80065d4 <m2qp_isf_call+0x14c>)
 80064b6:	f000 fe19 	bl	80070ec <q_writebyte>
    if (is_series) {
 80064ba:	2e00      	cmp	r6, #0
 80064bc:	d069      	beq.n	8006592 <m2qp_isf_call+0x10a>
        fp_s = ISS_open( isf_id, VL_ACCESS_R, user_id );
 80064be:	003a      	movs	r2, r7
 80064c0:	2124      	movs	r1, #36	; 0x24
 80064c2:	0028      	movs	r0, r5
 80064c4:	f001 f9a7 	bl	8007816 <ISS_open>
 80064c8:	1e07      	subs	r7, r0, #0
        if (fp_s == NULL) {
 80064ca:	d100      	bne.n	80064ce <m2qp_isf_call+0x46>
 80064cc:	e07c      	b.n	80065c8 <m2qp_isf_call+0x140>
        offset = q_readshort(input_q);
 80064ce:	0020      	movs	r0, r4
 80064d0:	f000 fe40 	bl	8007154 <q_readshort>
 80064d4:	0006      	movs	r6, r0
 80064d6:	b203      	sxth	r3, r0
 80064d8:	4699      	mov	r9, r3
        q_writebyte( &txq, (ot_u8)fp_s->length );
 80064da:	7a39      	ldrb	r1, [r7, #8]
 80064dc:	4c3d      	ldr	r4, [pc, #244]	; (80065d4 <m2qp_isf_call+0x14c>)
 80064de:	0020      	movs	r0, r4
 80064e0:	f000 fe04 	bl	80070ec <q_writebyte>
        q_writeshort(&txq, offset );
 80064e4:	0031      	movs	r1, r6
 80064e6:	0020      	movs	r0, r4
 80064e8:	f000 fe05 	bl	80070f6 <q_writeshort>
        clength_ptr     = txq.putcursor;
 80064ec:	68a3      	ldr	r3, [r4, #8]
 80064ee:	469a      	mov	sl, r3
        txq.putcursor  += 2;
 80064f0:	3302      	adds	r3, #2
 80064f2:	60a3      	str	r3, [r4, #8]
        for (i=0; i<fp_s->length; i++) {
 80064f4:	2400      	movs	r4, #0
    ot_int  total_length = 0;
 80064f6:	2500      	movs	r5, #0
        for (i=0; i<fp_s->length; i++) {
 80064f8:	e00b      	b.n	8006512 <m2qp_isf_call+0x8a>
                scratch.ushort = vl_read(fp_s, i);
 80064fa:	0021      	movs	r1, r4
 80064fc:	0038      	movs	r0, r7
 80064fe:	f001 f8cb 	bl	8007698 <vl_read>
 8006502:	ab07      	add	r3, sp, #28
 8006504:	8018      	strh	r0, [r3, #0]
 8006506:	e00b      	b.n	8006520 <m2qp_isf_call+0x98>
            vl_close(fp_f);
 8006508:	0030      	movs	r0, r6
 800650a:	f001 f947 	bl	800779c <vl_close>
        for (i=0; i<fp_s->length; i++) {
 800650e:	3401      	adds	r4, #1
 8006510:	b224      	sxth	r4, r4
 8006512:	893b      	ldrh	r3, [r7, #8]
 8006514:	429c      	cmp	r4, r3
 8006516:	da17      	bge.n	8006548 <m2qp_isf_call+0xc0>
            if ( (i&1) == 0 ) {
 8006518:	b2a4      	uxth	r4, r4
 800651a:	2601      	movs	r6, #1
 800651c:	4026      	ands	r6, r4
 800651e:	d0ec      	beq.n	80064fa <m2qp_isf_call+0x72>
            fp_f = ISF_open(scratch.ubyte[i&1], VL_ACCESS_R, user_id);
 8006520:	ab07      	add	r3, sp, #28
 8006522:	5d98      	ldrb	r0, [r3, r6]
 8006524:	9a03      	ldr	r2, [sp, #12]
 8006526:	2124      	movs	r1, #36	; 0x24
 8006528:	f001 f97d 	bl	8007826 <ISF_open>
 800652c:	1e06      	subs	r6, r0, #0
            if (fp_f != NULL) {
 800652e:	d0eb      	beq.n	8006508 <m2qp_isf_call+0x80>
                q_writebyte(&txq, GET_B0_U16(fp_f->idmod) );
 8006530:	7981      	ldrb	r1, [r0, #6]
 8006532:	4828      	ldr	r0, [pc, #160]	; (80065d4 <m2qp_isf_call+0x14c>)
 8006534:	f000 fdda 	bl	80070ec <q_writebyte>
                q_writebyte(&txq, (ot_u8)fp_f->length );
 8006538:	7a31      	ldrb	r1, [r6, #8]
 800653a:	4826      	ldr	r0, [pc, #152]	; (80065d4 <m2qp_isf_call+0x14c>)
 800653c:	f000 fdd6 	bl	80070ec <q_writebyte>
                total_length += fp_f->length;
 8006540:	8933      	ldrh	r3, [r6, #8]
 8006542:	195d      	adds	r5, r3, r5
 8006544:	b22d      	sxth	r5, r5
 8006546:	e7df      	b.n	8006508 <m2qp_isf_call+0x80>
        vl_close(fp_s);
 8006548:	0038      	movs	r0, r7
 800654a:	f001 f927 	bl	800779c <vl_close>
        clength_ptr[0]  = scratch.ubyte[UPPER];
 800654e:	042b      	lsls	r3, r5, #16
 8006550:	0e1b      	lsrs	r3, r3, #24
 8006552:	4652      	mov	r2, sl
 8006554:	7013      	strb	r3, [r2, #0]
        clength_ptr[1]  = scratch.ubyte[LOWER];
 8006556:	7055      	strb	r5, [r2, #1]
    scratch.sshort = (txq.back - txq.putcursor);
 8006558:	4b1e      	ldr	r3, [pc, #120]	; (80065d4 <m2qp_isf_call+0x14c>)
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	1ad2      	subs	r2, r2, r3
 8006560:	b212      	sxth	r2, r2
    if (max_bytes > scratch.sshort) {
 8006562:	4542      	cmp	r2, r8
 8006564:	db00      	blt.n	8006568 <m2qp_isf_call+0xe0>
    max_bytes   = (ot_int)q_readbyte(input_q);
 8006566:	4642      	mov	r2, r8
    scratch.sshort = (total_length - offset);
 8006568:	464b      	mov	r3, r9
 800656a:	1aeb      	subs	r3, r5, r3
 800656c:	b21b      	sxth	r3, r3
    if (max_bytes > scratch.sshort) {
 800656e:	4293      	cmp	r3, r2
 8006570:	db00      	blt.n	8006574 <m2qp_isf_call+0xec>
 8006572:	0013      	movs	r3, r2
    return m2qp_load_isf(is_series, isf_id, offset, max_bytes, &sub_load_return, user_id);
 8006574:	9a03      	ldr	r2, [sp, #12]
 8006576:	9201      	str	r2, [sp, #4]
 8006578:	4a17      	ldr	r2, [pc, #92]	; (80065d8 <m2qp_isf_call+0x150>)
 800657a:	9200      	str	r2, [sp, #0]
 800657c:	464a      	mov	r2, r9
 800657e:	9904      	ldr	r1, [sp, #16]
 8006580:	9805      	ldr	r0, [sp, #20]
 8006582:	f7ff fd8b 	bl	800609c <m2qp_load_isf>
}
 8006586:	b008      	add	sp, #32
 8006588:	bc1c      	pop	{r2, r3, r4}
 800658a:	4690      	mov	r8, r2
 800658c:	4699      	mov	r9, r3
 800658e:	46a2      	mov	sl, r4
 8006590:	bdf0      	pop	{r4, r5, r6, r7, pc}
        fp_f = ISF_open( isf_id, VL_ACCESS_R, user_id );
 8006592:	9a03      	ldr	r2, [sp, #12]
 8006594:	2124      	movs	r1, #36	; 0x24
 8006596:	9804      	ldr	r0, [sp, #16]
 8006598:	f001 f945 	bl	8007826 <ISF_open>
 800659c:	1e06      	subs	r6, r0, #0
        if (fp_f == NULL) {
 800659e:	d016      	beq.n	80065ce <m2qp_isf_call+0x146>
        offset          = q_readbyte(input_q);
 80065a0:	0020      	movs	r0, r4
 80065a2:	f000 fdd2 	bl	800714a <q_readbyte>
 80065a6:	0001      	movs	r1, r0
 80065a8:	b203      	sxth	r3, r0
 80065aa:	4699      	mov	r9, r3
        total_length    = fp_f->length;
 80065ac:	8934      	ldrh	r4, [r6, #8]
 80065ae:	b225      	sxth	r5, r4
        q_writebyte(&txq, (ot_u8)offset );
 80065b0:	4f08      	ldr	r7, [pc, #32]	; (80065d4 <m2qp_isf_call+0x14c>)
 80065b2:	0038      	movs	r0, r7
 80065b4:	f000 fd9a 	bl	80070ec <q_writebyte>
        q_writebyte(&txq, (ot_u8)total_length );
 80065b8:	b2e1      	uxtb	r1, r4
 80065ba:	0038      	movs	r0, r7
 80065bc:	f000 fd96 	bl	80070ec <q_writebyte>
        vl_close(fp_f);
 80065c0:	0030      	movs	r0, r6
 80065c2:	f001 f8eb 	bl	800779c <vl_close>
 80065c6:	e7c7      	b.n	8006558 <m2qp_isf_call+0xd0>
            return -2;
 80065c8:	2002      	movs	r0, #2
 80065ca:	4240      	negs	r0, r0
 80065cc:	e7db      	b.n	8006586 <m2qp_isf_call+0xfe>
            return -2;
 80065ce:	2002      	movs	r0, #2
 80065d0:	4240      	negs	r0, r0
 80065d2:	e7d8      	b.n	8006586 <m2qp_isf_call+0xfe>
 80065d4:	20002d68 	.word	0x20002d68
 80065d8:	08005ed9 	.word	0x08005ed9

080065dc <sub_opgroup_collection>:
void sub_opgroup_collection(void) {
 80065dc:	b510      	push	{r4, lr}
    if ( (*(ot_u16*)&m2qp.cmd & ((0x0070<<8)|M2CE_NORESP)) == 0 ) {
 80065de:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <sub_opgroup_collection+0x2c>)
 80065e0:	881a      	ldrh	r2, [r3, #0]
 80065e2:	4b0a      	ldr	r3, [pc, #40]	; (800660c <sub_opgroup_collection+0x30>)
 80065e4:	421a      	tst	r2, r3
 80065e6:	d002      	beq.n	80065ee <sub_opgroup_collection+0x12>
    sub_opgroup_globalisf();
 80065e8:	f7ff fc86 	bl	8005ef8 <sub_opgroup_globalisf>
}
 80065ec:	bd10      	pop	{r4, pc}
            nack = m2qp_isf_call((m2qp.cmd.code & 1), &rxq, &m2np.rt.dlog);
 80065ee:	4b06      	ldr	r3, [pc, #24]	; (8006608 <sub_opgroup_collection+0x2c>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2001      	movs	r0, #1
 80065f4:	4018      	ands	r0, r3
 80065f6:	4a06      	ldr	r2, [pc, #24]	; (8006610 <sub_opgroup_collection+0x34>)
 80065f8:	4906      	ldr	r1, [pc, #24]	; (8006614 <sub_opgroup_collection+0x38>)
 80065fa:	f7ff ff45 	bl	8006488 <m2qp_isf_call>
            if (nack != 0) {
 80065fe:	2800      	cmp	r0, #0
 8006600:	d0f2      	beq.n	80065e8 <sub_opgroup_collection+0xc>
                sub_renack(nack);
 8006602:	f7ff fd0b 	bl	800601c <sub_renack>
 8006606:	e7ef      	b.n	80065e8 <sub_opgroup_collection+0xc>
 8006608:	20002700 	.word	0x20002700
 800660c:	00007002 	.word	0x00007002
 8006610:	2000269c 	.word	0x2000269c
 8006614:	20002d54 	.word	0x20002d54

08006618 <sub_return>:


// Return functions are not handled by the server (ignore)
static ot_int sub_return(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
    return 0;
}
 8006618:	2000      	movs	r0, #0
 800661a:	4770      	bx	lr

0800661c <sub_qnotfull>:
}



/// This is a form of overwrite protection
static ot_bool sub_qnotfull(ot_u8 write, ot_u8 write_size, ot_queue* q) {
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	0005      	movs	r5, r0
 8006620:	000c      	movs	r4, r1
    return (ot_bool)((write_size <= q_writespace(q)) || (write == 0));
 8006622:	0010      	movs	r0, r2
 8006624:	f000 fd1f 	bl	8007066 <q_writespace>
 8006628:	4284      	cmp	r4, r0
 800662a:	dd05      	ble.n	8006638 <sub_qnotfull+0x1c>
 800662c:	2d00      	cmp	r5, #0
 800662e:	d001      	beq.n	8006634 <sub_qnotfull+0x18>
 8006630:	2000      	movs	r0, #0
 8006632:	e002      	b.n	800663a <sub_qnotfull+0x1e>
 8006634:	2001      	movs	r0, #1
 8006636:	e000      	b.n	800663a <sub_qnotfull+0x1e>
 8006638:	2001      	movs	r0, #1

    ///@note impl used prior to q_space()
    //return (ot_bool)(((q->putcursor+write_size) < q->back) || (write == 0));
}
 800663a:	bd70      	pop	{r4, r5, r6, pc}

0800663c <sub_filerestore>:




/// Not currently supported, always returns "unrestorable" error
static ot_int sub_filerestore(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	0005      	movs	r5, r0
 8006640:	0016      	movs	r6, r2
 8006642:	ab06      	add	r3, sp, #24
 8006644:	2400      	movs	r4, #0
 8006646:	5f1c      	ldrsh	r4, [r3, r4]
    ot_int  data_out    = 0;
 8006648:	2700      	movs	r7, #0
    //vlBLOCK file_block  = ((cmd_in >> 4) & 0x07);

    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 800664a:	e009      	b.n	8006660 <sub_filerestore+0x24>
        ot_u8   err_code    = 0x03;
        ot_u8   file_id     = q_readbyte(alp->inq);
        data_in            -= 1;

        if (respond) {
            q_writebyte(alp->outq, file_id);
 800664c:	0001      	movs	r1, r0
 800664e:	68e8      	ldr	r0, [r5, #12]
 8006650:	f000 fd4c 	bl	80070ec <q_writebyte>
            q_writebyte(alp->outq, err_code);
 8006654:	2103      	movs	r1, #3
 8006656:	68e8      	ldr	r0, [r5, #12]
 8006658:	f000 fd48 	bl	80070ec <q_writebyte>
            data_out += 2;
 800665c:	3702      	adds	r7, #2
 800665e:	b23f      	sxth	r7, r7
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8006660:	2c00      	cmp	r4, #0
 8006662:	dd0e      	ble.n	8006682 <sub_filerestore+0x46>
 8006664:	68ea      	ldr	r2, [r5, #12]
 8006666:	2102      	movs	r1, #2
 8006668:	0030      	movs	r0, r6
 800666a:	f7ff ffd7 	bl	800661c <sub_qnotfull>
 800666e:	2800      	cmp	r0, #0
 8006670:	d007      	beq.n	8006682 <sub_filerestore+0x46>
        ot_u8   file_id     = q_readbyte(alp->inq);
 8006672:	68a8      	ldr	r0, [r5, #8]
 8006674:	f000 fd69 	bl	800714a <q_readbyte>
        data_in            -= 1;
 8006678:	3c01      	subs	r4, #1
 800667a:	b224      	sxth	r4, r4
        if (respond) {
 800667c:	2e00      	cmp	r6, #0
 800667e:	d0ef      	beq.n	8006660 <sub_filerestore+0x24>
 8006680:	e7e4      	b.n	800664c <sub_filerestore+0x10>
        }
    }

    return data_out;
}
 8006682:	0038      	movs	r0, r7
 8006684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006686 <sub_filecreate>:
static ot_int sub_filecreate(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
 8006686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006688:	46d6      	mov	lr, sl
 800668a:	b500      	push	{lr}
 800668c:	b088      	sub	sp, #32
 800668e:	0004      	movs	r4, r0
 8006690:	468a      	mov	sl, r1
 8006692:	0017      	movs	r7, r2
 8006694:	aa0e      	add	r2, sp, #56	; 0x38
 8006696:	2500      	movs	r5, #0
 8006698:	5f55      	ldrsh	r5, [r2, r5]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 800669a:	091b      	lsrs	r3, r3, #4
 800669c:	2207      	movs	r2, #7
 800669e:	401a      	ands	r2, r3
 80066a0:	9205      	str	r2, [sp, #20]
    ot_int  data_out    = 0;
 80066a2:	2600      	movs	r6, #0
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 80066a4:	e00c      	b.n	80066c0 <sub_filecreate+0x3a>
            q_writebyte(alp->outq, id);
 80066a6:	9903      	ldr	r1, [sp, #12]
 80066a8:	68e0      	ldr	r0, [r4, #12]
 80066aa:	f000 fd1f 	bl	80070ec <q_writebyte>
            q_writebyte(alp->outq, err_code);
 80066ae:	9904      	ldr	r1, [sp, #16]
 80066b0:	68e0      	ldr	r0, [r4, #12]
 80066b2:	f000 fd1b 	bl	80070ec <q_writebyte>
            data_out += 2;
 80066b6:	3602      	adds	r6, #2
 80066b8:	b236      	sxth	r6, r6
        vl_close(fp);
 80066ba:	9807      	ldr	r0, [sp, #28]
 80066bc:	f001 f86e 	bl	800779c <vl_close>
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	dd26      	ble.n	8006712 <sub_filecreate+0x8c>
 80066c4:	68e2      	ldr	r2, [r4, #12]
 80066c6:	2102      	movs	r1, #2
 80066c8:	0038      	movs	r0, r7
 80066ca:	f7ff ffa7 	bl	800661c <sub_qnotfull>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d01f      	beq.n	8006712 <sub_filecreate+0x8c>
        vlFILE*     fp = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	9307      	str	r3, [sp, #28]
        data_in            -= 6;
 80066d6:	3d06      	subs	r5, #6
 80066d8:	b22d      	sxth	r5, r5
        id                  = q_readbyte(alp->inq);
 80066da:	68a0      	ldr	r0, [r4, #8]
 80066dc:	f000 fd35 	bl	800714a <q_readbyte>
 80066e0:	9003      	str	r0, [sp, #12]
        mod                 = q_readbyte(alp->inq);
 80066e2:	68a0      	ldr	r0, [r4, #8]
 80066e4:	f000 fd31 	bl	800714a <q_readbyte>
 80066e8:	9004      	str	r0, [sp, #16]
        alp->inq->getcursor+= 2;           
 80066ea:	68a2      	ldr	r2, [r4, #8]
 80066ec:	6851      	ldr	r1, [r2, #4]
 80066ee:	1c8b      	adds	r3, r1, #2
 80066f0:	6053      	str	r3, [r2, #4]
        alloc               = q_readshort(alp->inq);
 80066f2:	68a0      	ldr	r0, [r4, #8]
 80066f4:	f000 fd2e 	bl	8007154 <q_readshort>
        err_code            = vl_new(&fp, file_block, id, mod, alloc, user_id);
 80066f8:	4651      	mov	r1, sl
 80066fa:	9101      	str	r1, [sp, #4]
 80066fc:	9000      	str	r0, [sp, #0]
 80066fe:	9b04      	ldr	r3, [sp, #16]
 8006700:	9a03      	ldr	r2, [sp, #12]
 8006702:	9905      	ldr	r1, [sp, #20]
 8006704:	a807      	add	r0, sp, #28
 8006706:	f000 fe67 	bl	80073d8 <vl_new>
 800670a:	9004      	str	r0, [sp, #16]
        if (respond) {
 800670c:	2f00      	cmp	r7, #0
 800670e:	d0d4      	beq.n	80066ba <sub_filecreate+0x34>
 8006710:	e7c9      	b.n	80066a6 <sub_filecreate+0x20>
}
 8006712:	0030      	movs	r0, r6
 8006714:	b008      	add	sp, #32
 8006716:	bc04      	pop	{r2}
 8006718:	4692      	mov	sl, r2
 800671a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800671c <sub_filedelete>:
static ot_int sub_filedelete( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 800671c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800671e:	b085      	sub	sp, #20
 8006720:	0005      	movs	r5, r0
 8006722:	9103      	str	r1, [sp, #12]
 8006724:	0014      	movs	r4, r2
 8006726:	aa0a      	add	r2, sp, #40	; 0x28
 8006728:	2600      	movs	r6, #0
 800672a:	5f96      	ldrsh	r6, [r2, r6]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 800672c:	091b      	lsrs	r3, r3, #4
 800672e:	2207      	movs	r2, #7
 8006730:	401a      	ands	r2, r3
 8006732:	9202      	str	r2, [sp, #8]
    ot_int  data_out    = 0;
 8006734:	2700      	movs	r7, #0
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8006736:	e009      	b.n	800674c <sub_filedelete+0x30>
            q_writebyte(alp->outq, file_id);
 8006738:	9900      	ldr	r1, [sp, #0]
 800673a:	68e8      	ldr	r0, [r5, #12]
 800673c:	f000 fcd6 	bl	80070ec <q_writebyte>
            q_writebyte(alp->outq, err_code);
 8006740:	9901      	ldr	r1, [sp, #4]
 8006742:	68e8      	ldr	r0, [r5, #12]
 8006744:	f000 fcd2 	bl	80070ec <q_writebyte>
            data_out += 2;
 8006748:	3702      	adds	r7, #2
 800674a:	b23f      	sxth	r7, r7
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 800674c:	2e00      	cmp	r6, #0
 800674e:	dd15      	ble.n	800677c <sub_filedelete+0x60>
 8006750:	68ea      	ldr	r2, [r5, #12]
 8006752:	2102      	movs	r1, #2
 8006754:	0020      	movs	r0, r4
 8006756:	f7ff ff61 	bl	800661c <sub_qnotfull>
 800675a:	2800      	cmp	r0, #0
 800675c:	d00e      	beq.n	800677c <sub_filedelete+0x60>
        data_in--;
 800675e:	3e01      	subs	r6, #1
 8006760:	b236      	sxth	r6, r6
        file_id     = q_readbyte(alp->inq);
 8006762:	68a8      	ldr	r0, [r5, #8]
 8006764:	f000 fcf1 	bl	800714a <q_readbyte>
 8006768:	0001      	movs	r1, r0
 800676a:	9000      	str	r0, [sp, #0]
        err_code    = vl_delete(file_block, file_id, user_id);
 800676c:	9a03      	ldr	r2, [sp, #12]
 800676e:	9802      	ldr	r0, [sp, #8]
 8006770:	f000 fe8a 	bl	8007488 <vl_delete>
 8006774:	9001      	str	r0, [sp, #4]
        if (respond) {
 8006776:	2c00      	cmp	r4, #0
 8006778:	d0e8      	beq.n	800674c <sub_filedelete+0x30>
 800677a:	e7dd      	b.n	8006738 <sub_filedelete+0x1c>
}
 800677c:	0038      	movs	r0, r7
 800677e:	b005      	add	sp, #20
 8006780:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006782 <sub_fileheaders>:
static ot_int sub_fileheaders( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 8006782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006784:	46d6      	mov	lr, sl
 8006786:	4647      	mov	r7, r8
 8006788:	b580      	push	{r7, lr}
 800678a:	b087      	sub	sp, #28
 800678c:	0006      	movs	r6, r0
 800678e:	0011      	movs	r1, r2
 8006790:	9203      	str	r2, [sp, #12]
 8006792:	aa0e      	add	r2, sp, #56	; 0x38
 8006794:	2400      	movs	r4, #0
 8006796:	5f14      	ldrsh	r4, [r2, r4]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 8006798:	091b      	lsrs	r3, r3, #4
 800679a:	2507      	movs	r5, #7
 800679c:	401d      	ands	r5, r3
    if (respond) {
 800679e:	2900      	cmp	r1, #0
 80067a0:	d002      	beq.n	80067a8 <sub_fileheaders+0x26>
    ot_int  data_out    = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	4698      	mov	r8, r3
 80067a6:	e02e      	b.n	8006806 <sub_fileheaders+0x84>
 80067a8:	2300      	movs	r3, #0
 80067aa:	4698      	mov	r8, r3
}
 80067ac:	4640      	mov	r0, r8
 80067ae:	b007      	add	sp, #28
 80067b0:	bc0c      	pop	{r2, r3}
 80067b2:	4690      	mov	r8, r2
 80067b4:	469a      	mov	sl, r3
 80067b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                q_writeshort_be(alp->outq, vworm_read(header + 4)); // id & mod
 80067b8:	68f3      	ldr	r3, [r6, #12]
 80067ba:	469a      	mov	sl, r3
 80067bc:	270e      	movs	r7, #14
 80067be:	ab02      	add	r3, sp, #8
 80067c0:	469c      	mov	ip, r3
 80067c2:	4467      	add	r7, ip
 80067c4:	8838      	ldrh	r0, [r7, #0]
 80067c6:	3004      	adds	r0, #4
 80067c8:	b280      	uxth	r0, r0
 80067ca:	f002 fc5d 	bl	8009088 <vworm_read>
 80067ce:	0001      	movs	r1, r0
 80067d0:	4650      	mov	r0, sl
 80067d2:	f000 fc9a 	bl	800710a <q_writeshort_be>
                q_writeshort(alp->outq, vworm_read(header + 0)); // length
 80067d6:	68f3      	ldr	r3, [r6, #12]
 80067d8:	469a      	mov	sl, r3
 80067da:	8838      	ldrh	r0, [r7, #0]
 80067dc:	f002 fc54 	bl	8009088 <vworm_read>
 80067e0:	0001      	movs	r1, r0
 80067e2:	4650      	mov	r0, sl
 80067e4:	f000 fc87 	bl	80070f6 <q_writeshort>
                q_writeshort(alp->outq, vworm_read(header + 2)); // alloc
 80067e8:	68f3      	ldr	r3, [r6, #12]
 80067ea:	469a      	mov	sl, r3
 80067ec:	8838      	ldrh	r0, [r7, #0]
 80067ee:	3002      	adds	r0, #2
 80067f0:	b280      	uxth	r0, r0
 80067f2:	f002 fc49 	bl	8009088 <vworm_read>
 80067f6:	0001      	movs	r1, r0
 80067f8:	4650      	mov	r0, sl
 80067fa:	f000 fc7c 	bl	80070f6 <q_writeshort>
                data_out += 6;
 80067fe:	4643      	mov	r3, r8
 8006800:	3306      	adds	r3, #6
 8006802:	b21b      	sxth	r3, r3
 8006804:	4698      	mov	r8, r3
        while ((data_in > 0) && sub_qnotfull(respond, 6, alp->outq)) {
 8006806:	2c00      	cmp	r4, #0
 8006808:	ddd0      	ble.n	80067ac <sub_fileheaders+0x2a>
 800680a:	68f2      	ldr	r2, [r6, #12]
 800680c:	2106      	movs	r1, #6
 800680e:	9803      	ldr	r0, [sp, #12]
 8006810:	f7ff ff04 	bl	800661c <sub_qnotfull>
 8006814:	2800      	cmp	r0, #0
 8006816:	d0c9      	beq.n	80067ac <sub_fileheaders+0x2a>
            data_in--;  // one for the file id
 8006818:	3c01      	subs	r4, #1
 800681a:	b224      	sxth	r4, r4
            allow_output = (ot_bool)(vl_getheader_vaddr(&header, file_block, \
 800681c:	68b0      	ldr	r0, [r6, #8]
 800681e:	f000 fc94 	bl	800714a <q_readbyte>
 8006822:	0002      	movs	r2, r0
 8006824:	2300      	movs	r3, #0
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	3324      	adds	r3, #36	; 0x24
 800682a:	0029      	movs	r1, r5
 800682c:	200e      	movs	r0, #14
 800682e:	af02      	add	r7, sp, #8
 8006830:	46bc      	mov	ip, r7
 8006832:	4460      	add	r0, ip
 8006834:	f000 fe80 	bl	8007538 <vl_getheader_vaddr>
            if (allow_output) {
 8006838:	2800      	cmp	r0, #0
 800683a:	d1e4      	bne.n	8006806 <sub_fileheaders+0x84>
 800683c:	e7bc      	b.n	80067b8 <sub_fileheaders+0x36>
	...

08006840 <sub_filedata>:
static ot_int sub_filedata(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
 8006840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006842:	46de      	mov	lr, fp
 8006844:	4657      	mov	r7, sl
 8006846:	464e      	mov	r6, r9
 8006848:	4645      	mov	r5, r8
 800684a:	b5e0      	push	{r5, r6, r7, lr}
 800684c:	b093      	sub	sp, #76	; 0x4c
 800684e:	900c      	str	r0, [sp, #48]	; 0x30
 8006850:	9109      	str	r1, [sp, #36]	; 0x24
 8006852:	920a      	str	r2, [sp, #40]	; 0x28
 8006854:	aa1c      	add	r2, sp, #112	; 0x70
 8006856:	2100      	movs	r1, #0
 8006858:	5e52      	ldrsh	r2, [r2, r1]
 800685a:	4692      	mov	sl, r2
 800685c:	220f      	movs	r2, #15
 800685e:	401a      	ands	r2, r3
 8006860:	920b      	str	r2, [sp, #44]	; 0x2c
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 8006862:	091a      	lsrs	r2, r3, #4
 8006864:	2107      	movs	r1, #7
 8006866:	4011      	ands	r1, r2
 8006868:	9108      	str	r1, [sp, #32]
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 800686a:	079a      	lsls	r2, r3, #30
 800686c:	d511      	bpl.n	8006892 <sub_filedata+0x52>
 800686e:	2212      	movs	r2, #18
 8006870:	9205      	str	r2, [sp, #20]
    ot_u8   insert_mode = (cmd_in & 0x01);
 8006872:	2201      	movs	r2, #1
 8006874:	401a      	ands	r2, r3
 8006876:	920e      	str	r2, [sp, #56]	; 0x38
    ot_queue*  inq      = alp->inq;
 8006878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800687a:	689e      	ldr	r6, [r3, #8]
    ot_queue*  outq     = alp->outq;
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	9304      	str	r3, [sp, #16]
    ot_qcur outq_marker = alp->outq->putcursor;
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	930f      	str	r3, [sp, #60]	; 0x3c
    vlFILE* fp          = NULL;
 8006884:	2300      	movs	r3, #0
 8006886:	9303      	str	r3, [sp, #12]
    ot_int  data_out    = 0;
 8006888:	2700      	movs	r7, #0
 800688a:	9607      	str	r6, [sp, #28]
 800688c:	46bb      	mov	fp, r7
 800688e:	4654      	mov	r4, sl
    while (data_in > 0) {
 8006890:	e0c1      	b.n	8006a16 <sub_filedata+0x1d6>
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 8006892:	2224      	movs	r2, #36	; 0x24
 8006894:	9205      	str	r2, [sp, #20]
 8006896:	e7ec      	b.n	8006872 <sub_filedata+0x32>
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 8006898:	4b9f      	ldr	r3, [pc, #636]	; (8006b18 <sub_filedata+0x2d8>)
 800689a:	469a      	mov	sl, r3
 800689c:	e0d3      	b.n	8006a46 <sub_filedata+0x206>
            if (limit > fp->alloc) {
 800689e:	4556      	cmp	r6, sl
 80068a0:	d324      	bcc.n	80068ec <sub_filedata+0xac>
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 80068a2:	4656      	mov	r6, sl
            if (insert_mode == 0) {
 80068a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d122      	bne.n	80068f0 <sub_filedata+0xb0>
                fp->length = 0;
 80068aa:	9a03      	ldr	r2, [sp, #12]
 80068ac:	8113      	strh	r3, [r2, #8]
 80068ae:	4643      	mov	r3, r8
 80068b0:	46b0      	mov	r8, r6
 80068b2:	46ba      	mov	sl, r7
 80068b4:	9f07      	ldr	r7, [sp, #28]
 80068b6:	001e      	movs	r6, r3
            for (; offset<limit; offset+=2, span-=2, data_in-=2) {
 80068b8:	4545      	cmp	r5, r8
 80068ba:	d21f      	bcs.n	80068fc <sub_filedata+0xbc>
                if (inq->getcursor >= inq->back) {
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d300      	bcc.n	80068c6 <sub_filedata+0x86>
 80068c4:	e114      	b.n	8006af0 <sub_filedata+0x2b0>
                err_code |= vl_write(fp, offset, q_readshort_be(inq));
 80068c6:	0038      	movs	r0, r7
 80068c8:	f000 fc4f 	bl	800716a <q_readshort_be>
 80068cc:	0002      	movs	r2, r0
 80068ce:	0029      	movs	r1, r5
 80068d0:	9803      	ldr	r0, [sp, #12]
 80068d2:	f000 fee8 	bl	80076a6 <vl_write>
 80068d6:	4653      	mov	r3, sl
 80068d8:	4303      	orrs	r3, r0
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	469a      	mov	sl, r3
            for (; offset<limit; offset+=2, span-=2, data_in-=2) {
 80068de:	3502      	adds	r5, #2
 80068e0:	b2ad      	uxth	r5, r5
 80068e2:	3e02      	subs	r6, #2
 80068e4:	b2b6      	uxth	r6, r6
 80068e6:	3c02      	subs	r4, #2
 80068e8:	b224      	sxth	r4, r4
 80068ea:	e7e5      	b.n	80068b8 <sub_filedata+0x78>
                err_code    = 0x08;
 80068ec:	2708      	movs	r7, #8
 80068ee:	e7d9      	b.n	80068a4 <sub_filedata+0x64>
 80068f0:	4643      	mov	r3, r8
 80068f2:	46b0      	mov	r8, r6
 80068f4:	46ba      	mov	sl, r7
 80068f6:	9f07      	ldr	r7, [sp, #28]
 80068f8:	001e      	movs	r6, r3
 80068fa:	e7dd      	b.n	80068b8 <sub_filedata+0x78>
 80068fc:	46b0      	mov	r8, r6
 80068fe:	4657      	mov	r7, sl
 8006900:	e079      	b.n	80069f6 <sub_filedata+0x1b6>
            ot_u8 overhead = 5 << (inc_header != 0);
 8006902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006904:	2b0c      	cmp	r3, #12
 8006906:	d026      	beq.n	8006956 <sub_filedata+0x116>
 8006908:	2305      	movs	r3, #5
 800690a:	930d      	str	r3, [sp, #52]	; 0x34
            if (overhead >= q_writespace(outq)) {
 800690c:	9804      	ldr	r0, [sp, #16]
 800690e:	f000 fbaa 	bl	8007066 <q_writespace>
 8006912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006914:	4283      	cmp	r3, r0
 8006916:	db00      	blt.n	800691a <sub_filedata+0xda>
 8006918:	e0ec      	b.n	8006af4 <sub_filedata+0x2b4>
            data_out += overhead;
 800691a:	445b      	add	r3, fp
 800691c:	b21b      	sxth	r3, r3
 800691e:	469b      	mov	fp, r3
            if (inc_header) {
 8006920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006922:	2b0c      	cmp	r3, #12
 8006924:	d01a      	beq.n	800695c <sub_filedata+0x11c>
                q_writebyte(outq, (vworm_read(header+4) & 0x00ff) );
 8006926:	230e      	movs	r3, #14
 8006928:	aa0e      	add	r2, sp, #56	; 0x38
 800692a:	4694      	mov	ip, r2
 800692c:	4463      	add	r3, ip
 800692e:	8818      	ldrh	r0, [r3, #0]
 8006930:	3004      	adds	r0, #4
 8006932:	b280      	uxth	r0, r0
 8006934:	f002 fba8 	bl	8009088 <vworm_read>
 8006938:	b2c1      	uxtb	r1, r0
 800693a:	9804      	ldr	r0, [sp, #16]
 800693c:	f000 fbd6 	bl	80070ec <q_writebyte>
            if (offset >= fp->length) {
 8006940:	9b03      	ldr	r3, [sp, #12]
 8006942:	891b      	ldrh	r3, [r3, #8]
 8006944:	42ab      	cmp	r3, r5
 8006946:	d926      	bls.n	8006996 <sub_filedata+0x156>
            else if (limit > fp->length) {
 8006948:	4553      	cmp	r3, sl
 800694a:	d227      	bcs.n	800699c <sub_filedata+0x15c>
                span    = fp->length - offset;
 800694c:	1b9a      	subs	r2, r3, r6
 800694e:	b292      	uxth	r2, r2
 8006950:	4690      	mov	r8, r2
                limit   = fp->length;
 8006952:	469a      	mov	sl, r3
 8006954:	e022      	b.n	800699c <sub_filedata+0x15c>
            ot_u8 overhead = 5 << (inc_header != 0);
 8006956:	3b02      	subs	r3, #2
 8006958:	930d      	str	r3, [sp, #52]	; 0x34
 800695a:	e7d7      	b.n	800690c <sub_filedata+0xcc>
                q_writeshort_be(outq, vworm_read(header + 4));
 800695c:	ab0e      	add	r3, sp, #56	; 0x38
 800695e:	89d8      	ldrh	r0, [r3, #14]
 8006960:	3004      	adds	r0, #4
 8006962:	b280      	uxth	r0, r0
 8006964:	f002 fb90 	bl	8009088 <vworm_read>
 8006968:	0001      	movs	r1, r0
 800696a:	9804      	ldr	r0, [sp, #16]
 800696c:	f000 fbcd 	bl	800710a <q_writeshort_be>
                q_writeshort(outq, vworm_read(header + 0));    // length
 8006970:	ab0e      	add	r3, sp, #56	; 0x38
 8006972:	89d8      	ldrh	r0, [r3, #14]
 8006974:	f002 fb88 	bl	8009088 <vworm_read>
 8006978:	0001      	movs	r1, r0
 800697a:	9804      	ldr	r0, [sp, #16]
 800697c:	f000 fbbb 	bl	80070f6 <q_writeshort>
                q_writeshort(outq, vworm_read(header + 2));    // alloc
 8006980:	ab0e      	add	r3, sp, #56	; 0x38
 8006982:	89d8      	ldrh	r0, [r3, #14]
 8006984:	3002      	adds	r0, #2
 8006986:	b280      	uxth	r0, r0
 8006988:	f002 fb7e 	bl	8009088 <vworm_read>
 800698c:	0001      	movs	r1, r0
 800698e:	9804      	ldr	r0, [sp, #16]
 8006990:	f000 fbb1 	bl	80070f6 <q_writeshort>
 8006994:	e7d4      	b.n	8006940 <sub_filedata+0x100>
                limit   = 0;
 8006996:	2300      	movs	r3, #0
 8006998:	469a      	mov	sl, r3
                span    = 0;
 800699a:	4698      	mov	r8, r3
            q_writeshort(outq, offset);
 800699c:	0031      	movs	r1, r6
 800699e:	9e04      	ldr	r6, [sp, #16]
 80069a0:	0030      	movs	r0, r6
 80069a2:	f000 fba8 	bl	80070f6 <q_writeshort>
            q_writeshort(outq, span);
 80069a6:	4641      	mov	r1, r8
 80069a8:	0030      	movs	r0, r6
 80069aa:	f000 fba4 	bl	80070f6 <q_writeshort>
 80069ae:	4646      	mov	r6, r8
 80069b0:	46b8      	mov	r8, r7
 80069b2:	4657      	mov	r7, sl
 80069b4:	0023      	movs	r3, r4
 80069b6:	465c      	mov	r4, fp
 80069b8:	469b      	mov	fp, r3
            for (; offset<limit; offset+=2, span-=2, data_out+=2) {
 80069ba:	42bd      	cmp	r5, r7
 80069bc:	d214      	bcs.n	80069e8 <sub_filedata+0x1a8>
                if (2 >= q_writespace(outq)) {
 80069be:	9804      	ldr	r0, [sp, #16]
 80069c0:	f000 fb51 	bl	8007066 <q_writespace>
 80069c4:	2802      	cmp	r0, #2
 80069c6:	dc00      	bgt.n	80069ca <sub_filedata+0x18a>
 80069c8:	e096      	b.n	8006af8 <sub_filedata+0x2b8>
                q_writeshort_be(outq, vl_read(fp, offset));
 80069ca:	0029      	movs	r1, r5
 80069cc:	9803      	ldr	r0, [sp, #12]
 80069ce:	f000 fe63 	bl	8007698 <vl_read>
 80069d2:	0001      	movs	r1, r0
 80069d4:	9804      	ldr	r0, [sp, #16]
 80069d6:	f000 fb98 	bl	800710a <q_writeshort_be>
            for (; offset<limit; offset+=2, span-=2, data_out+=2) {
 80069da:	3502      	adds	r5, #2
 80069dc:	b2ad      	uxth	r5, r5
 80069de:	3e02      	subs	r6, #2
 80069e0:	b2b6      	uxth	r6, r6
 80069e2:	3402      	adds	r4, #2
 80069e4:	b224      	sxth	r4, r4
 80069e6:	e7e8      	b.n	80069ba <sub_filedata+0x17a>
 80069e8:	4647      	mov	r7, r8
 80069ea:	46b0      	mov	r8, r6
 80069ec:	465b      	mov	r3, fp
 80069ee:	46a3      	mov	fp, r4
 80069f0:	001c      	movs	r4, r3
 80069f2:	e000      	b.n	80069f6 <sub_filedata+0x1b6>
            err_code = 0xFF;
 80069f4:	27ff      	movs	r7, #255	; 0xff
            app_err = vl_close(fp);
 80069f6:	9803      	ldr	r0, [sp, #12]
 80069f8:	f000 fed0 	bl	800779c <vl_close>
            if ((app_err != 0) && (err_code == 0)) {
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d002      	beq.n	8006a06 <sub_filedata+0x1c6>
 8006a00:	2f00      	cmp	r7, #0
 8006a02:	d100      	bne.n	8006a06 <sub_filedata+0x1c6>
                err_code = 0x09;    
 8006a04:	3709      	adds	r7, #9
        if (respond) {
 8006a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d148      	bne.n	8006a9e <sub_filedata+0x25e>
        data_in -= 5;       // 5 bytes input header
 8006a0c:	3c05      	subs	r4, #5
 8006a0e:	b2a4      	uxth	r4, r4
        data_in -= span;    // Bypass data payload
 8006a10:	4643      	mov	r3, r8
 8006a12:	1ae4      	subs	r4, r4, r3
 8006a14:	b224      	sxth	r4, r4
    while (data_in > 0) {
 8006a16:	2c00      	cmp	r4, #0
 8006a18:	dc00      	bgt.n	8006a1c <sub_filedata+0x1dc>
 8006a1a:	e07b      	b.n	8006b14 <sub_filedata+0x2d4>
        file_id     = q_readbyte(inq);
 8006a1c:	9f07      	ldr	r7, [sp, #28]
 8006a1e:	0038      	movs	r0, r7
 8006a20:	f000 fb93 	bl	800714a <q_readbyte>
 8006a24:	9006      	str	r0, [sp, #24]
        offset      = q_readshort(inq);
 8006a26:	0038      	movs	r0, r7
 8006a28:	f000 fb94 	bl	8007154 <q_readshort>
 8006a2c:	0006      	movs	r6, r0
 8006a2e:	0005      	movs	r5, r0
        span        = q_readshort(inq);
 8006a30:	0038      	movs	r0, r7
 8006a32:	f000 fb8f 	bl	8007154 <q_readshort>
 8006a36:	4680      	mov	r8, r0
        lim_check   = (ot_long)offset + (ot_long)span;
 8006a38:	1832      	adds	r2, r6, r0
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 8006a3a:	4b37      	ldr	r3, [pc, #220]	; (8006b18 <sub_filedata+0x2d8>)
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	dd00      	ble.n	8006a42 <sub_filedata+0x202>
 8006a40:	e72a      	b.n	8006898 <sub_filedata+0x58>
 8006a42:	b293      	uxth	r3, r2
 8006a44:	469a      	mov	sl, r3
        err_code    = vl_getheader_vaddr(&header, file_block, file_id, file_mod, user_id);
 8006a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	9b05      	ldr	r3, [sp, #20]
 8006a4c:	4699      	mov	r9, r3
 8006a4e:	9a06      	ldr	r2, [sp, #24]
 8006a50:	9908      	ldr	r1, [sp, #32]
 8006a52:	200e      	movs	r0, #14
 8006a54:	af0e      	add	r7, sp, #56	; 0x38
 8006a56:	46bc      	mov	ip, r7
 8006a58:	4460      	add	r0, ip
 8006a5a:	f000 fd6d 	bl	8007538 <vl_getheader_vaddr>
 8006a5e:	0007      	movs	r7, r0
 8006a60:	2312      	movs	r3, #18
 8006a62:	464a      	mov	r2, r9
 8006a64:	401a      	ands	r2, r3
 8006a66:	4691      	mov	r9, r2
        file_mod    = ((file_mod & VL_ACCESS_W) != 0);
 8006a68:	0013      	movs	r3, r2
 8006a6a:	1e5a      	subs	r2, r3, #1
 8006a6c:	4193      	sbcs	r3, r2
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	9305      	str	r3, [sp, #20]
        if (err_code != 0) {
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d1bf      	bne.n	80069f6 <sub_filedata+0x1b6>
        fp = vl_open_file(header);
 8006a76:	230e      	movs	r3, #14
 8006a78:	aa0e      	add	r2, sp, #56	; 0x38
 8006a7a:	4694      	mov	ip, r2
 8006a7c:	4463      	add	r3, ip
 8006a7e:	8818      	ldrh	r0, [r3, #0]
 8006a80:	f000 fd90 	bl	80075a4 <vl_open_file>
 8006a84:	9003      	str	r0, [sp, #12]
        if (fp == NULL) {
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d0b4      	beq.n	80069f4 <sub_filedata+0x1b4>
        if (file_mod) {
 8006a8a:	464a      	mov	r2, r9
 8006a8c:	2a00      	cmp	r2, #0
 8006a8e:	d100      	bne.n	8006a92 <sub_filedata+0x252>
 8006a90:	e737      	b.n	8006902 <sub_filedata+0xc2>
            if (offset >= fp->alloc) {
 8006a92:	8886      	ldrh	r6, [r0, #4]
 8006a94:	42ae      	cmp	r6, r5
 8006a96:	d900      	bls.n	8006a9a <sub_filedata+0x25a>
 8006a98:	e701      	b.n	800689e <sub_filedata+0x5e>
                err_code = 0x07;
 8006a9a:	2707      	movs	r7, #7
 8006a9c:	e7ab      	b.n	80069f6 <sub_filedata+0x1b6>
            if (2 >= q_writespace(outq)) {
 8006a9e:	9d04      	ldr	r5, [sp, #16]
 8006aa0:	0028      	movs	r0, r5
 8006aa2:	f000 fae0 	bl	8007066 <q_writespace>
 8006aa6:	2802      	cmp	r0, #2
 8006aa8:	dd32      	ble.n	8006b10 <sub_filedata+0x2d0>
            if (file_mod | err_code) {
 8006aaa:	9b05      	ldr	r3, [sp, #20]
 8006aac:	433b      	orrs	r3, r7
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0ab      	beq.n	8006a0c <sub_filedata+0x1cc>
                if (file_mod == 0) {
 8006ab4:	464b      	mov	r3, r9
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d107      	bne.n	8006aca <sub_filedata+0x28a>
                    outq->putcursor     = outq_marker;
 8006aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006abc:	60ab      	str	r3, [r5, #8]
                    alp->OUTREC(CMD)   |= 0x0F;
 8006abe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ac0:	794b      	ldrb	r3, [r1, #5]
 8006ac2:	220f      	movs	r2, #15
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	714b      	strb	r3, [r1, #5]
                    data_in             = 0;
 8006ac8:	2400      	movs	r4, #0
                q_writebyte(outq, file_id);
 8006aca:	9906      	ldr	r1, [sp, #24]
 8006acc:	9d04      	ldr	r5, [sp, #16]
 8006ace:	0028      	movs	r0, r5
 8006ad0:	f000 fb0c 	bl	80070ec <q_writebyte>
                q_writebyte(outq, err_code);
 8006ad4:	0039      	movs	r1, r7
 8006ad6:	0028      	movs	r0, r5
 8006ad8:	f000 fb08 	bl	80070ec <q_writebyte>
                q_markbyte(inq, span);         // go past any leftover input data
 8006adc:	4643      	mov	r3, r8
 8006ade:	b219      	sxth	r1, r3
 8006ae0:	9807      	ldr	r0, [sp, #28]
 8006ae2:	f000 fafe 	bl	80070e2 <q_markbyte>
                data_out += 2;
 8006ae6:	465b      	mov	r3, fp
 8006ae8:	3302      	adds	r3, #2
 8006aea:	b21b      	sxth	r3, r3
 8006aec:	469b      	mov	fp, r3
 8006aee:	e78d      	b.n	8006a0c <sub_filedata+0x1cc>
 8006af0:	465f      	mov	r7, fp
 8006af2:	e002      	b.n	8006afa <sub_filedata+0x2ba>
 8006af4:	465f      	mov	r7, fp
 8006af6:	e000      	b.n	8006afa <sub_filedata+0x2ba>
 8006af8:	0027      	movs	r7, r4
    vl_close(fp);
 8006afa:	9803      	ldr	r0, [sp, #12]
 8006afc:	f000 fe4e 	bl	800779c <vl_close>
}
 8006b00:	0038      	movs	r0, r7
 8006b02:	b013      	add	sp, #76	; 0x4c
 8006b04:	bc3c      	pop	{r2, r3, r4, r5}
 8006b06:	4690      	mov	r8, r2
 8006b08:	4699      	mov	r9, r3
 8006b0a:	46a2      	mov	sl, r4
 8006b0c:	46ab      	mov	fp, r5
 8006b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b10:	465f      	mov	r7, fp
 8006b12:	e7f2      	b.n	8006afa <sub_filedata+0x2ba>
 8006b14:	465f      	mov	r7, fp
 8006b16:	e7f3      	b.n	8006b00 <sub_filedata+0x2c0>
 8006b18:	0000ffff 	.word	0x0000ffff

08006b1c <sub_fileperms>:
static ot_int sub_fileperms( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 8006b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1e:	46ce      	mov	lr, r9
 8006b20:	4647      	mov	r7, r8
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b089      	sub	sp, #36	; 0x24
 8006b26:	0006      	movs	r6, r0
 8006b28:	9105      	str	r1, [sp, #20]
 8006b2a:	4691      	mov	r9, r2
 8006b2c:	aa10      	add	r2, sp, #64	; 0x40
 8006b2e:	2400      	movs	r4, #0
 8006b30:	5f14      	ldrsh	r4, [r2, r4]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 8006b32:	091a      	lsrs	r2, r3, #4
 8006b34:	2707      	movs	r7, #7
 8006b36:	4017      	ands	r7, r2
 8006b38:	9704      	str	r7, [sp, #16]
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 8006b3a:	079b      	lsls	r3, r3, #30
 8006b3c:	d453      	bmi.n	8006be6 <sub_fileperms+0xca>
 8006b3e:	2724      	movs	r7, #36	; 0x24
 8006b40:	2300      	movs	r3, #0
 8006b42:	4698      	mov	r8, r3
 8006b44:	e00d      	b.n	8006b62 <sub_fileperms+0x46>
            data_in--;  // two for the new mod
 8006b46:	3b02      	subs	r3, #2
 8006b48:	b21c      	sxth	r4, r3
            file_mod = vl_chmod(file_block, file_id, q_readbyte(alp->inq), user_id);
 8006b4a:	68b0      	ldr	r0, [r6, #8]
 8006b4c:	f000 fafd 	bl	800714a <q_readbyte>
 8006b50:	0002      	movs	r2, r0
 8006b52:	9b05      	ldr	r3, [sp, #20]
 8006b54:	9903      	ldr	r1, [sp, #12]
 8006b56:	9804      	ldr	r0, [sp, #16]
 8006b58:	f000 fd7d 	bl	8007656 <vl_chmod>
 8006b5c:	0007      	movs	r7, r0
        if (allow_write) {
 8006b5e:	2d00      	cmp	r5, #0
 8006b60:	d134      	bne.n	8006bcc <sub_fileperms+0xb0>
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8006b62:	2c00      	cmp	r4, #0
 8006b64:	dd41      	ble.n	8006bea <sub_fileperms+0xce>
 8006b66:	68f2      	ldr	r2, [r6, #12]
 8006b68:	2102      	movs	r1, #2
 8006b6a:	4648      	mov	r0, r9
 8006b6c:	f7ff fd56 	bl	800661c <sub_qnotfull>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d03a      	beq.n	8006bea <sub_fileperms+0xce>
        ot_u8   file_id         = q_readbyte(alp->inq);
 8006b74:	68b0      	ldr	r0, [r6, #8]
 8006b76:	f000 fae8 	bl	800714a <q_readbyte>
 8006b7a:	9003      	str	r0, [sp, #12]
        ot_bool allow_write     = respond;
 8006b7c:	464d      	mov	r5, r9
 8006b7e:	1e6b      	subs	r3, r5, #1
 8006b80:	419d      	sbcs	r5, r3
 8006b82:	b2ed      	uxtb	r5, r5
        data_in--;  // one for the file id
 8006b84:	b2a3      	uxth	r3, r4
 8006b86:	1e5c      	subs	r4, r3, #1
 8006b88:	b224      	sxth	r4, r4
        if (file_mod == VL_ACCESS_W ) {
 8006b8a:	2f12      	cmp	r7, #18
 8006b8c:	d0db      	beq.n	8006b46 <sub_fileperms+0x2a>
        else if (allow_write) {
 8006b8e:	464b      	mov	r3, r9
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0e4      	beq.n	8006b5e <sub_fileperms+0x42>
            allow_write = (ot_bool)(vl_getheader_vaddr(&header, file_block, file_id, \
 8006b94:	2300      	movs	r3, #0
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	3324      	adds	r3, #36	; 0x24
 8006b9a:	9a03      	ldr	r2, [sp, #12]
 8006b9c:	9904      	ldr	r1, [sp, #16]
 8006b9e:	200e      	movs	r0, #14
 8006ba0:	ad04      	add	r5, sp, #16
 8006ba2:	46ac      	mov	ip, r5
 8006ba4:	4460      	add	r0, ip
 8006ba6:	f000 fcc7 	bl	8007538 <vl_getheader_vaddr>
 8006baa:	4245      	negs	r5, r0
 8006bac:	4145      	adcs	r5, r0
 8006bae:	b2ed      	uxtb	r5, r5
            if (allow_write) {
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d1d4      	bne.n	8006b5e <sub_fileperms+0x42>
                file_idmod  = vworm_read(header + 4);   //shortcut to idmod, hack-ish but fast
 8006bb4:	230e      	movs	r3, #14
 8006bb6:	aa04      	add	r2, sp, #16
 8006bb8:	4694      	mov	ip, r2
 8006bba:	4463      	add	r3, ip
 8006bbc:	8818      	ldrh	r0, [r3, #0]
 8006bbe:	3004      	adds	r0, #4
 8006bc0:	b280      	uxth	r0, r0
 8006bc2:	f002 fa61 	bl	8009088 <vworm_read>
                file_mod    = file_idmod >> 8;          ///@todo this might be endian dependent
 8006bc6:	0a00      	lsrs	r0, r0, #8
 8006bc8:	b2c7      	uxtb	r7, r0
 8006bca:	e7c8      	b.n	8006b5e <sub_fileperms+0x42>
            q_writebyte(alp->outq, file_id);
 8006bcc:	9903      	ldr	r1, [sp, #12]
 8006bce:	68f0      	ldr	r0, [r6, #12]
 8006bd0:	f000 fa8c 	bl	80070ec <q_writebyte>
            q_writebyte(alp->outq, file_mod);
 8006bd4:	0039      	movs	r1, r7
 8006bd6:	68f0      	ldr	r0, [r6, #12]
 8006bd8:	f000 fa88 	bl	80070ec <q_writebyte>
            data_out += 2;
 8006bdc:	4643      	mov	r3, r8
 8006bde:	3302      	adds	r3, #2
 8006be0:	b21b      	sxth	r3, r3
 8006be2:	4698      	mov	r8, r3
 8006be4:	e7bd      	b.n	8006b62 <sub_fileperms+0x46>
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 8006be6:	2712      	movs	r7, #18
 8006be8:	e7aa      	b.n	8006b40 <sub_fileperms+0x24>
}
 8006bea:	4640      	mov	r0, r8
 8006bec:	b009      	add	sp, #36	; 0x24
 8006bee:	bc0c      	pop	{r2, r3}
 8006bf0:	4690      	mov	r8, r2
 8006bf2:	4699      	mov	r9, r3
 8006bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006bf8 <alp_proc_filedata>:
OT_WEAK ot_bool alp_proc_filedata(alp_tmpl* alp, const id_tmpl* user_id) {
 8006bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	0004      	movs	r4, r0
 8006bfe:	9103      	str	r1, [sp, #12]
    ot_int  data_in     = INREC(alp, PLEN);     //alp->INREC(PLEN);
 8006c00:	2103      	movs	r1, #3
 8006c02:	4249      	negs	r1, r1
 8006c04:	6880      	ldr	r0, [r0, #8]
 8006c06:	f000 fa21 	bl	800704c <q_getcursor_val>
 8006c0a:	b207      	sxth	r7, r0
    ot_u8   cmd_in      = INREC(alp, CMD);      //alp->INREC(CMD);
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	4249      	negs	r1, r1
 8006c10:	68a0      	ldr	r0, [r4, #8]
 8006c12:	f000 fa1b 	bl	800704c <q_getcursor_val>
 8006c16:	0006      	movs	r6, r0
    alp->OUTREC(PLEN) = cmd_fn[cmd_in & 0x0F](alp, user_id, (cmd_in & 0x80), cmd_in, data_in);
 8006c18:	230f      	movs	r3, #15
 8006c1a:	4003      	ands	r3, r0
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4a11      	ldr	r2, [pc, #68]	; (8006c64 <alp_proc_filedata+0x6c>)
 8006c20:	589d      	ldr	r5, [r3, r2]
 8006c22:	237f      	movs	r3, #127	; 0x7f
 8006c24:	0002      	movs	r2, r0
 8006c26:	439a      	bics	r2, r3
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	9700      	str	r7, [sp, #0]
 8006c2c:	0003      	movs	r3, r0
 8006c2e:	9903      	ldr	r1, [sp, #12]
 8006c30:	0020      	movs	r0, r4
 8006c32:	47a8      	blx	r5
 8006c34:	b2c0      	uxtb	r0, r0
 8006c36:	70e0      	strb	r0, [r4, #3]
    if (cmd_in & 0x80) {
 8006c38:	0633      	lsls	r3, r6, #24
 8006c3a:	d406      	bmi.n	8006c4a <alp_proc_filedata+0x52>
        alp->outq->putcursor   -= alp->OUTREC(PLEN);
 8006c3c:	68e3      	ldr	r3, [r4, #12]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	1a10      	subs	r0, r2, r0
 8006c42:	6098      	str	r0, [r3, #8]
}
 8006c44:	2001      	movs	r0, #1
 8006c46:	b005      	add	sp, #20
 8006c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        alp->OUTREC(CMD)  ^= 0x80;
 8006c4a:	7962      	ldrb	r2, [r4, #5]
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	425b      	negs	r3, r3
 8006c50:	4053      	eors	r3, r2
        alp->OUTREC(CMD)  |= (cmd_in & 0x02) ? 0x0F : 0x01;
 8006c52:	b25b      	sxtb	r3, r3
 8006c54:	07b2      	lsls	r2, r6, #30
 8006c56:	d403      	bmi.n	8006c60 <alp_proc_filedata+0x68>
 8006c58:	2201      	movs	r2, #1
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	7163      	strb	r3, [r4, #5]
 8006c5e:	e7f1      	b.n	8006c44 <alp_proc_filedata+0x4c>
 8006c60:	220f      	movs	r2, #15
 8006c62:	e7fa      	b.n	8006c5a <alp_proc_filedata+0x62>
 8006c64:	0800b1e0 	.word	0x0800b1e0

08006c68 <alp_proc_logger>:
#include <otlib/auth.h>
#include <otlib/queue.h>

///@todo replace INREC calls with direct access from input

OT_WEAK ot_bool alp_proc_logger(alp_tmpl* alp, const id_tmpl* user_id) {
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	0004      	movs	r4, r0
/// Logger ALP is like ECHO.  The input is copied to the output.

    // Only root can log directly (this is an important security firewall)
    if (auth_isroot(user_id)) {
 8006c6c:	0008      	movs	r0, r1
 8006c6e:	f000 f902 	bl	8006e76 <auth_isroot>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d101      	bne.n	8006c7a <alp_proc_logger+0x12>
        if (alp->inq != alp->outq) {
            q_movedata(alp->outq, alp->inq, alp->OUTREC(PLEN));
        }
    }
    return True;
}
 8006c76:	2001      	movs	r0, #1
 8006c78:	bd10      	pop	{r4, pc}
        alp->OUTREC(FLAGS)  = q_readbyte(alp->inq);
 8006c7a:	68a0      	ldr	r0, [r4, #8]
 8006c7c:	f000 fa65 	bl	800714a <q_readbyte>
 8006c80:	70a0      	strb	r0, [r4, #2]
        alp->OUTREC(PLEN)   = q_readbyte(alp->inq);
 8006c82:	68a0      	ldr	r0, [r4, #8]
 8006c84:	f000 fa61 	bl	800714a <q_readbyte>
 8006c88:	70e0      	strb	r0, [r4, #3]
        alp->inq->getcursor+= 2;
 8006c8a:	68a2      	ldr	r2, [r4, #8]
 8006c8c:	6853      	ldr	r3, [r2, #4]
 8006c8e:	3302      	adds	r3, #2
 8006c90:	6053      	str	r3, [r2, #4]
        if (alp->inq != alp->outq) {
 8006c92:	68a1      	ldr	r1, [r4, #8]
 8006c94:	68e0      	ldr	r0, [r4, #12]
 8006c96:	4281      	cmp	r1, r0
 8006c98:	d0ed      	beq.n	8006c76 <alp_proc_logger+0xe>
            q_movedata(alp->outq, alp->inq, alp->OUTREC(PLEN));
 8006c9a:	78e2      	ldrb	r2, [r4, #3]
 8006c9c:	f000 fa9c 	bl	80071d8 <q_movedata>
 8006ca0:	e7e9      	b.n	8006c76 <alp_proc_logger+0xe>

08006ca2 <sub_get_headerlen>:
    hdr_len    -= (tnf == 6);               // Add Type len, Remove ID len & 2 byte ID
    return hdr_len;
#else
    return 4;
#endif
}
 8006ca2:	2004      	movs	r0, #4
 8006ca4:	4770      	bx	lr

08006ca6 <sub_insert_header>:



void sub_insert_header(alp_tmpl* alp, ot_qcur hdr_position, ot_u8 hdr_len) {
 8006ca6:	b570      	push	{r4, r5, r6, lr}
 8006ca8:	0004      	movs	r4, r0
/// <LI> Add hdr_len to the queue length (cursors are already in place). </LI>
/// <LI> If using NDEF (hdr_len != 4), output header processing is ugly. </LI>
/// <LI> Pure ALP (hdr_len == 4) output header processing is universal. </LI>
/// <LI> Finally, always clear MB because now the first record is done. </LI>
    ot_qcur savedput = alp->outq->putcursor + hdr_len;
 8006caa:	68c3      	ldr	r3, [r0, #12]
 8006cac:	6898      	ldr	r0, [r3, #8]
 8006cae:	1885      	adds	r5, r0, r2
    
    ///@todo make sure this works, might need to have qcur be signed
    if (hdr_position != NULL) {
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	d000      	beq.n	8006cb6 <sub_insert_header+0x10>
        alp->outq->putcursor = hdr_position;
 8006cb4:	6099      	str	r1, [r3, #8]
    }
    else
#   else
    {
        //q_writelong_be(alp->outq, alp->OUTREC(FLAGS));
        ot_memcpy(alp->outq->putcursor, &(alp->OUTREC(FLAGS)), 4);
 8006cb6:	68e3      	ldr	r3, [r4, #12]
 8006cb8:	6898      	ldr	r0, [r3, #8]
 8006cba:	1ca1      	adds	r1, r4, #2
 8006cbc:	2204      	movs	r2, #4
 8006cbe:	f001 fe3f 	bl	8008940 <ot_memcpy>
    }
#   endif

    alp->outq->putcursor = savedput;
 8006cc2:	68e3      	ldr	r3, [r4, #12]
 8006cc4:	609d      	str	r5, [r3, #8]
    alp->OUTREC(FLAGS)  &= ~ALP_FLAG_MB;
 8006cc6:	78a2      	ldrb	r2, [r4, #2]
 8006cc8:	237f      	movs	r3, #127	; 0x7f
 8006cca:	4013      	ands	r3, r2
 8006ccc:	70a3      	strb	r3, [r4, #2]
}
 8006cce:	bd70      	pop	{r4, r5, r6, pc}

08006cd0 <alp_proc_null>:
 * The Null Processor is implemented here.  The rest of the processors are
 * implemented in separate C files, named alp_...c
 */
OT_WEAK ot_bool alp_proc_null(alp_tmpl* a0, const id_tmpl* a1) {
    return True;   // Atomic, with no payload data
}
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	4770      	bx	lr

08006cd4 <alp_init>:
 * ========================================================================<BR>
 */

#ifndef EXTF_alp_init
void alp_init(alp_tmpl* alp, ot_queue* inq, ot_queue* outq) {
    alp->purge_id       = 1;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	8003      	strh	r3, [r0, #0]
    alp->OUTREC(FLAGS)  = (ALP_FLAG_MB | ALP_FLAG_ME | ALP_FLAG_SR);   ///@todo this will need to be removed soon
 8006cd8:	33cf      	adds	r3, #207	; 0xcf
 8006cda:	7083      	strb	r3, [r0, #2]
    alp->inq            = inq;
 8006cdc:	6081      	str	r1, [r0, #8]
    alp->outq           = outq;
 8006cde:	60c2      	str	r2, [r0, #12]
}
 8006ce0:	4770      	bx	lr

08006ce2 <alp_parse_message>:
///@todo To be completed when transformation of ALP is complete
}



ALP_status alp_parse_message(alp_tmpl* alp, const id_tmpl* user_id) {
 8006ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce4:	0004      	movs	r4, r0
 8006ce6:	000d      	movs	r5, r1
    //ot_u8       hdr_len;
    ot_int      proc_output;
    //ot_int      bytes;

    /// Lock the ot_queues while ALP is parsing/processing
    q_lock(alp->inq);
 8006ce8:	6880      	ldr	r0, [r0, #8]
 8006cea:	f000 f9ca 	bl	8007082 <q_lock>
    q_lock(alp->outq);
 8006cee:	68e0      	ldr	r0, [r4, #12]
 8006cf0:	f000 f9c7 	bl	8007082 <q_lock>
 8006cf4:	e027      	b.n	8006d46 <alp_parse_message+0x64>
    /// previous message.  If new input record header does not match
    /// OpenTag requirement, bypass it and go to the next.  Else, copy
    /// the input record to the output record.  alp_proc() will adjust
    /// the output payload length and flags, as necessary.
    if (alp->OUTREC(FLAGS) & ALP_FLAG_ME) {
        alp->OUTREC(FLAGS)  = q_getcursor_val(alp->inq, 0);
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	68a0      	ldr	r0, [r4, #8]
 8006cfa:	f000 f9a7 	bl	800704c <q_getcursor_val>
 8006cfe:	70a0      	strb	r0, [r4, #2]
        alp->OUTREC(PLEN)   = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	70e3      	strb	r3, [r4, #3]
        alp->OUTREC(ID)     = q_getcursor_val(alp->inq, 2);
 8006d04:	2102      	movs	r1, #2
 8006d06:	68a0      	ldr	r0, [r4, #8]
 8006d08:	f000 f9a0 	bl	800704c <q_getcursor_val>
 8006d0c:	7120      	strb	r0, [r4, #4]
        alp->OUTREC(CMD)    = q_getcursor_val(alp->inq, 3);
 8006d0e:	2103      	movs	r1, #3
 8006d10:	68a0      	ldr	r0, [r4, #8]
 8006d12:	f000 f99b 	bl	800704c <q_getcursor_val>
 8006d16:	7160      	strb	r0, [r4, #5]
 8006d18:	e022      	b.n	8006d60 <alp_parse_message+0x7e>
        // Also, remove output chunking flag
        alp->outq->putcursor   = hdr_position;
        alp->OUTREC(FLAGS)    &= ~NDEF_CF;
    }
    else {
        memcpy(hdr_position, &alp->OUTREC(FLAGS), 4);
 8006d1a:	1ca1      	adds	r1, r4, #2
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	0038      	movs	r0, r7
 8006d20:	f001 fe0e 	bl	8008940 <ot_memcpy>
        alp->OUTREC(FLAGS)  &= ~ALP_FLAG_MB;
 8006d24:	78a2      	ldrb	r2, [r4, #2]
 8006d26:	237f      	movs	r3, #127	; 0x7f
 8006d28:	4013      	ands	r3, r2
 8006d2a:	70a3      	strb	r3, [r4, #2]
    }
    
    ///@note Added from old sources to handle batched ALP inputs
    {   ot_u8* nextrecord;
        nextrecord = input_position + input_position[1] + 4;
 8006d2c:	7873      	ldrb	r3, [r6, #1]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	18f3      	adds	r3, r6, r3
        if (nextrecord == alp->inq->putcursor) {
 8006d32:	68a2      	ldr	r2, [r4, #8]
 8006d34:	6891      	ldr	r1, [r2, #8]
 8006d36:	4299      	cmp	r1, r3
 8006d38:	d028      	beq.n	8006d8c <alp_parse_message+0xaa>
            /// The input record, now treated, shall be rewound
            alp->inq->putcursor = input_position;
            alp->inq->getcursor = input_position;
        }
        else {
            alp->inq->getcursor = nextrecord;
 8006d3a:	6053      	str	r3, [r2, #4]

            ///@note HACK
            /// should be put into a loop
            if (alp->inq->putcursor > alp->inq->getcursor) {
 8006d3c:	68a3      	ldr	r3, [r4, #8]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d925      	bls.n	8006d92 <alp_parse_message+0xb0>
    if ((q_readspace(alp->inq) < 4) || (q_writespace(alp->outq) < 4)) {
 8006d46:	68a0      	ldr	r0, [r4, #8]
 8006d48:	f000 f992 	bl	8007070 <q_readspace>
 8006d4c:	2803      	cmp	r0, #3
 8006d4e:	dd28      	ble.n	8006da2 <alp_parse_message+0xc0>
 8006d50:	68e0      	ldr	r0, [r4, #12]
 8006d52:	f000 f988 	bl	8007066 <q_writespace>
 8006d56:	2803      	cmp	r0, #3
 8006d58:	dd25      	ble.n	8006da6 <alp_parse_message+0xc4>
    if (alp->OUTREC(FLAGS) & ALP_FLAG_ME) {
 8006d5a:	78a3      	ldrb	r3, [r4, #2]
 8006d5c:	065b      	lsls	r3, r3, #25
 8006d5e:	d4ca      	bmi.n	8006cf6 <alp_parse_message+0x14>
    input_position          = alp->inq->getcursor;
 8006d60:	68a3      	ldr	r3, [r4, #8]
 8006d62:	685e      	ldr	r6, [r3, #4]
    alp->inq->getcursor    += 4;
 8006d64:	1d32      	adds	r2, r6, #4
 8006d66:	605a      	str	r2, [r3, #4]
    hdr_position            = alp->outq->putcursor;
 8006d68:	68e3      	ldr	r3, [r4, #12]
 8006d6a:	689f      	ldr	r7, [r3, #8]
    alp->outq->putcursor   += 4;
 8006d6c:	1d3a      	adds	r2, r7, #4
 8006d6e:	609a      	str	r2, [r3, #8]
    proc_output = alp_proc(alp, user_id);
 8006d70:	0029      	movs	r1, r5
 8006d72:	0020      	movs	r0, r4
 8006d74:	f7f9 fd86 	bl	8000884 <alp_proc>
    if (alp->OUTREC(PLEN) == 0) {
 8006d78:	78e3      	ldrb	r3, [r4, #3]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1cd      	bne.n	8006d1a <alp_parse_message+0x38>
        alp->outq->putcursor   = hdr_position;
 8006d7e:	68e3      	ldr	r3, [r4, #12]
 8006d80:	609f      	str	r7, [r3, #8]
        alp->OUTREC(FLAGS)    &= ~NDEF_CF;
 8006d82:	78a3      	ldrb	r3, [r4, #2]
 8006d84:	2220      	movs	r2, #32
 8006d86:	4393      	bics	r3, r2
 8006d88:	70a3      	strb	r3, [r4, #2]
 8006d8a:	e7cf      	b.n	8006d2c <alp_parse_message+0x4a>
            alp->inq->putcursor = input_position;
 8006d8c:	6096      	str	r6, [r2, #8]
            alp->inq->getcursor = input_position;
 8006d8e:	68a3      	ldr	r3, [r4, #8]
 8006d90:	605e      	str	r6, [r3, #4]
            }
        }
    }
    
    /// Unlock the ot_queues after ALP is parsing/processing
    q_unlock(alp->inq);
 8006d92:	68a0      	ldr	r0, [r4, #8]
 8006d94:	f000 f980 	bl	8007098 <q_unlock>
    q_unlock(alp->outq);
 8006d98:	68e0      	ldr	r0, [r4, #12]
 8006d9a:	f000 f97d 	bl	8007098 <q_unlock>
    
    exit_code = MSG_End;
 8006d9e:	2006      	movs	r0, #6

    alp_parse_message_END:
    return exit_code;
}
 8006da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        exit_code = MSG_Null;
 8006da2:	2000      	movs	r0, #0
 8006da4:	e7fc      	b.n	8006da0 <alp_parse_message+0xbe>
 8006da6:	2000      	movs	r0, #0
 8006da8:	e7fa      	b.n	8006da0 <alp_parse_message+0xbe>

08006daa <alp_new_record>:
  */

/// @note This function is used by the logger (logger.c), but nowhere
/// else.  The ability to create a new output record/message is required, but
/// the method of doing it may likely get re-architected.
OT_WEAK void alp_new_record(alp_tmpl* alp, ot_u8 flags, ot_u8 payload_limit, ot_int payload_remaining) {
 8006daa:	b510      	push	{r4, lr}
 8006dac:	0004      	movs	r4, r0
    // Clear control flags (begin, end, chunk)
	// Chunk and End will be intelligently set in this function, but Begin must
	// be set by the caller, AFTER this function.
	alp->OUTREC(FLAGS) |= flags;
 8006dae:	7880      	ldrb	r0, [r0, #2]
 8006db0:	4301      	orrs	r1, r0
	alp->OUTREC(FLAGS) |= NDEF_SR;
 8006db2:	2010      	movs	r0, #16
 8006db4:	4301      	orrs	r1, r0
#   if (OT_FEATURE(NDEF))
	alp->OUTREC(FLAGS) &= ~(ALP_FLAG_ME | ALP_FLAG_CF | NDEF_IL);
#   else
    alp->OUTREC(FLAGS) &= (ALP_FLAG_MB | NDEF_SR);
 8006db6:	206f      	movs	r0, #111	; 0x6f
 8006db8:	4381      	bics	r1, r0
 8006dba:	70a1      	strb	r1, [r4, #2]
#   endif

	// Automatically set Chunk or End.
	// "payload_remaining" is re-purposed to contain the number of bytes loaded
	// Chunk Flag is ignored by pure-ALP
	if (payload_remaining > payload_limit) {
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	dc0e      	bgt.n	8006dde <alp_new_record+0x34>
#       if (OT_FEATURE(NDEF))
		alp->OUTREC(FLAGS)  |= ALP_FLAG_CF;
#       endif
	}
	else {
		alp->OUTREC(FLAGS)  |= ALP_FLAG_ME;
 8006dc0:	2240      	movs	r2, #64	; 0x40
 8006dc2:	4311      	orrs	r1, r2
 8006dc4:	70a1      	strb	r1, [r4, #2]
	}

	alp->OUTREC(PLEN) = (ot_u8)payload_remaining;
 8006dc6:	70e3      	strb	r3, [r4, #3]
	sub_insert_header(alp, NULL, sub_get_headerlen(alp->OUTREC(FLAGS)&7));
 8006dc8:	78a3      	ldrb	r3, [r4, #2]
 8006dca:	2007      	movs	r0, #7
 8006dcc:	4018      	ands	r0, r3
 8006dce:	f7ff ff68 	bl	8006ca2 <sub_get_headerlen>
 8006dd2:	0002      	movs	r2, r0
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	0020      	movs	r0, r4
 8006dd8:	f7ff ff65 	bl	8006ca6 <sub_insert_header>
}
 8006ddc:	bd10      	pop	{r4, pc}
		payload_remaining   = payload_limit;
 8006dde:	b213      	sxth	r3, r2
 8006de0:	e7f1      	b.n	8006dc6 <alp_new_record+0x1c>

08006de2 <alp_breakdown_query_tmpl>:





OT_WEAK void alp_breakdown_query_tmpl(ot_queue* in_q, void* data_type) {
 8006de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de4:	0006      	movs	r6, r0
 8006de6:	000d      	movs	r5, r1
    ot_u8   query_length;
    ot_u8   query_code;
    ot_u8*  query_mask;
    
    query_code      = q_readbyte(in_q);
 8006de8:	f000 f9af 	bl	800714a <q_readbyte>
 8006dec:	0007      	movs	r7, r0
    query_length    = q_readbyte(in_q);
 8006dee:	0030      	movs	r0, r6
 8006df0:	f000 f9ab 	bl	800714a <q_readbyte>
 8006df4:	0004      	movs	r4, r0
    query_mask      = NULL;
    
    if (query_code & 0x80) {
 8006df6:	063b      	lsls	r3, r7, #24
 8006df8:	d409      	bmi.n	8006e0e <alp_breakdown_query_tmpl+0x2c>
    query_mask      = NULL;
 8006dfa:	2000      	movs	r0, #0
        query_mask  = q_markbyte(in_q, query_length);
    }
    
    ((query_tmpl*)data_type)->code      = query_code;
 8006dfc:	702f      	strb	r7, [r5, #0]
    ((query_tmpl*)data_type)->length    = query_length;
 8006dfe:	706c      	strb	r4, [r5, #1]
    ((query_tmpl*)data_type)->mask      = query_mask;
 8006e00:	6068      	str	r0, [r5, #4]
    ((query_tmpl*)data_type)->value     = q_markbyte(in_q, query_length);
 8006e02:	b221      	sxth	r1, r4
 8006e04:	0030      	movs	r0, r6
 8006e06:	f000 f96c 	bl	80070e2 <q_markbyte>
 8006e0a:	60a8      	str	r0, [r5, #8]
}
 8006e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        query_mask  = q_markbyte(in_q, query_length);
 8006e0e:	b201      	sxth	r1, r0
 8006e10:	0030      	movs	r0, r6
 8006e12:	f000 f966 	bl	80070e2 <q_markbyte>
 8006e16:	e7f1      	b.n	8006dfc <alp_breakdown_query_tmpl+0x1a>

08006e18 <alp_breakdown_udp_tmpl>:





OT_WEAK void alp_breakdown_udp_tmpl(ot_queue* in_q, void* data_type) {
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	0005      	movs	r5, r0
 8006e1c:	000c      	movs	r4, r1
    ot_int udp_data_length;
    udp_data_length                       = q_readshort(in_q);
 8006e1e:	f000 f999 	bl	8007154 <q_readshort>
 8006e22:	b206      	sxth	r6, r0
    ((udp_tmpl*)data_type)->data_length   = udp_data_length;
 8006e24:	8020      	strh	r0, [r4, #0]
    ((udp_tmpl*)data_type)->dst_port      = q_readbyte(in_q);
 8006e26:	0028      	movs	r0, r5
 8006e28:	f000 f98f 	bl	800714a <q_readbyte>
 8006e2c:	70a0      	strb	r0, [r4, #2]
    ((udp_tmpl*)data_type)->src_port      = q_readbyte(in_q);
 8006e2e:	0028      	movs	r0, r5
 8006e30:	f000 f98b 	bl	800714a <q_readbyte>
 8006e34:	70e0      	strb	r0, [r4, #3]
    ((udp_tmpl*)data_type)->data          = q_markbyte(in_q, udp_data_length);
 8006e36:	0031      	movs	r1, r6
 8006e38:	0028      	movs	r0, r5
 8006e3a:	f000 f952 	bl	80070e2 <q_markbyte>
 8006e3e:	6060      	str	r0, [r4, #4]
}
 8006e40:	bd70      	pop	{r4, r5, r6, pc}

08006e42 <alp_breakdown_isfcomp_tmpl>:





OT_WEAK void alp_breakdown_isfcomp_tmpl(ot_queue* in_q, void* data_type) {
 8006e42:	b570      	push	{r4, r5, r6, lr}
 8006e44:	0005      	movs	r5, r0
 8006e46:	000c      	movs	r4, r1
    ((isfcomp_tmpl*)data_type)->is_series   = q_readbyte(in_q);
 8006e48:	f000 f97f 	bl	800714a <q_readbyte>
 8006e4c:	7020      	strb	r0, [r4, #0]
    ((isfcomp_tmpl*)data_type)->isf_id      = q_readbyte(in_q);
 8006e4e:	0028      	movs	r0, r5
 8006e50:	f000 f97b 	bl	800714a <q_readbyte>
 8006e54:	7060      	strb	r0, [r4, #1]
    ((isfcomp_tmpl*)data_type)->offset      = q_readshort(in_q);
 8006e56:	0028      	movs	r0, r5
 8006e58:	f000 f97c 	bl	8007154 <q_readshort>
 8006e5c:	8060      	strh	r0, [r4, #2]
}
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}

08006e60 <alp_breakdown_isfcall_tmpl>:





OT_WEAK void alp_breakdown_isfcall_tmpl(ot_queue* in_q, void* data_type) {
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	0005      	movs	r5, r0
 8006e64:	000c      	movs	r4, r1
    alp_breakdown_isfcomp_tmpl(in_q, data_type);
 8006e66:	f7ff ffec 	bl	8006e42 <alp_breakdown_isfcomp_tmpl>
    ((isfcall_tmpl*)data_type)->max_return  = q_readshort(in_q);
 8006e6a:	0028      	movs	r0, r5
 8006e6c:	f000 f972 	bl	8007154 <q_readshort>
 8006e70:	80a0      	strh	r0, [r4, #4]
}
 8006e72:	bd70      	pop	{r4, r5, r6, pc}

08006e74 <auth_init>:
#endif

#if (_SEC_NLS)
    ///@todo
#endif
}
 8006e74:	4770      	bx	lr

08006e76 <auth_isroot>:
#if (_SEC_ANY)
    return sub_ismask(user_id, b00000000);
#else
    return False;
#endif
}
 8006e76:	2000      	movs	r0, #0
 8006e78:	4770      	bx	lr

08006e7a <auth_check>:

    return 0;

#else
    // Try guest access
    return (0x07 & req_mod & rw_mod);
 8006e7a:	4001      	ands	r1, r0
 8006e7c:	2007      	movs	r0, #7
 8006e7e:	4008      	ands	r0, r1
#endif
}
 8006e80:	4770      	bx	lr
	...

08006e84 <buffers_init>:
#endif



#ifndef EXTF_buffers_init
void buffers_init() {
 8006e84:	b570      	push	{r4, r5, r6, lr}
#   if (OT_FEATURE(SERVER) == ENABLED)
    q_init(&rxq,    otbuf,              TXRX_SIZE);
 8006e86:	2580      	movs	r5, #128	; 0x80
 8006e88:	006d      	lsls	r5, r5, #1
 8006e8a:	4c0d      	ldr	r4, [pc, #52]	; (8006ec0 <buffers_init+0x3c>)
 8006e8c:	002a      	movs	r2, r5
 8006e8e:	0021      	movs	r1, r4
 8006e90:	480c      	ldr	r0, [pc, #48]	; (8006ec4 <buffers_init+0x40>)
 8006e92:	f000 f90d 	bl	80070b0 <q_init>
    q_init(&txq,    otbuf+TXRX_SIZE,    TXRX_SIZE);    
 8006e96:	1961      	adds	r1, r4, r5
 8006e98:	002a      	movs	r2, r5
 8006e9a:	480b      	ldr	r0, [pc, #44]	; (8006ec8 <buffers_init+0x44>)
 8006e9c:	f000 f908 	bl	80070b0 <q_init>
#   endif
#   if (ALP_ENABLED)
    q_init(&otmpin,     otbuf+(TXRX_SIZE*2),            ALP_SIZE );
 8006ea0:	3501      	adds	r5, #1
 8006ea2:	35ff      	adds	r5, #255	; 0xff
 8006ea4:	1961      	adds	r1, r4, r5
 8006ea6:	002a      	movs	r2, r5
 8006ea8:	4808      	ldr	r0, [pc, #32]	; (8006ecc <buffers_init+0x48>)
 8006eaa:	f000 f901 	bl	80070b0 <q_init>
    q_init(&otmpout,    otbuf+(TXRX_SIZE*2)+ALP_SIZE,   ALP_SIZE );
 8006eae:	2380      	movs	r3, #128	; 0x80
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	18e1      	adds	r1, r4, r3
 8006eb4:	002a      	movs	r2, r5
 8006eb6:	4806      	ldr	r0, [pc, #24]	; (8006ed0 <buffers_init+0x4c>)
 8006eb8:	f000 f8fa 	bl	80070b0 <q_init>
#   endif
}
 8006ebc:	bd70      	pop	{r4, r5, r6, pc}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	20002754 	.word	0x20002754
 8006ec4:	20002d54 	.word	0x20002d54
 8006ec8:	20002d68 	.word	0x20002d68
 8006ecc:	20002d7c 	.word	0x20002d7c
 8006ed0:	20002740 	.word	0x20002740

08006ed4 <crc_init_stream>:

//crc_struct crc;


void crc_init_stream(crcstream_t* stream, ot_bool writeout, ot_int size, ot_u8* data) {
    stream->writeout    = writeout;
 8006ed4:	7181      	strb	r1, [r0, #6]
    stream->cursor      = data;
 8006ed6:	6003      	str	r3, [r0, #0]
    stream->count       = size;
 8006ed8:	8082      	strh	r2, [r0, #4]
    stream->val         = crc16drv_init();
 8006eda:	2301      	movs	r3, #1
 8006edc:	425b      	negs	r3, r3
 8006ede:	8103      	strh	r3, [r0, #8]
}
 8006ee0:	4770      	bx	lr
	...

08006ee4 <crc16drv_init>:

#ifndef EXTF_crc16drv_init
OT_INLINE ot_u16 crc16drv_init() {
    //crc16_dr = 0xFFFF;
    return 0xFFFF;
}
 8006ee4:	4800      	ldr	r0, [pc, #0]	; (8006ee8 <crc16drv_init+0x4>)
 8006ee6:	4770      	bx	lr
 8006ee8:	0000ffff 	.word	0x0000ffff

08006eec <crc16drv_block_manual>:
#endif


#ifndef EXTF_crc16drv_block_manual
OT_WEAK ot_u16 crc16drv_block_manual(ot_u8* block_addr, ot_int block_size, ot_u16 init) {
 8006eec:	b510      	push	{r4, lr}
/// One nice thing about the software-only CRC16 method is that it doesn't
/// require any sort of interrupt blocking.  In practice, interrupt blocking
/// by CRC isn't much of an issue, but if you are getting weird CRC errors
/// when using streams, try comparing against this software implemetation.

    while (--block_size >= 0) {
 8006eee:	e009      	b.n	8006f04 <crc16drv_block_manual+0x18>
        ot_u8 index = ((ot_u8*)&init)[UPPER] ^ *block_addr++;       //((crc_val>>8) & 0xff) ^ *block_addr++;
 8006ef0:	0a13      	lsrs	r3, r2, #8
 8006ef2:	7804      	ldrb	r4, [r0, #0]
 8006ef4:	4063      	eors	r3, r4
        init        = (init<<8) ^ crc16_table[index];
 8006ef6:	0212      	lsls	r2, r2, #8
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	4c05      	ldr	r4, [pc, #20]	; (8006f10 <crc16drv_block_manual+0x24>)
 8006efc:	5f1b      	ldrsh	r3, [r3, r4]
 8006efe:	405a      	eors	r2, r3
 8006f00:	b292      	uxth	r2, r2
        ot_u8 index = ((ot_u8*)&init)[UPPER] ^ *block_addr++;       //((crc_val>>8) & 0xff) ^ *block_addr++;
 8006f02:	3001      	adds	r0, #1
    while (--block_size >= 0) {
 8006f04:	3901      	subs	r1, #1
 8006f06:	b209      	sxth	r1, r1
 8006f08:	2900      	cmp	r1, #0
 8006f0a:	daf1      	bge.n	8006ef0 <crc16drv_block_manual+0x4>
    }
    return init;
}
 8006f0c:	0010      	movs	r0, r2
 8006f0e:	bd10      	pop	{r4, pc}
 8006f10:	0800b220 	.word	0x0800b220

08006f14 <crc_calc_nstream>:
void crc_calc_nstream(crcstream_t* stream, ot_u16 n) {
 8006f14:	b510      	push	{r4, lr}
 8006f16:	0004      	movs	r4, r0
    if (stream->count > 0) {
 8006f18:	2204      	movs	r2, #4
 8006f1a:	5e83      	ldrsh	r3, [r0, r2]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	dd0c      	ble.n	8006f3a <crc_calc_nstream+0x26>
        if (n > stream->count) {
 8006f20:	4299      	cmp	r1, r3
 8006f22:	dd00      	ble.n	8006f26 <crc_calc_nstream+0x12>
            n = stream->count;
 8006f24:	b299      	uxth	r1, r3
        stream->count  -= n;
 8006f26:	1a5b      	subs	r3, r3, r1
 8006f28:	80a3      	strh	r3, [r4, #4]
        data            = stream->cursor;
 8006f2a:	6820      	ldr	r0, [r4, #0]
        stream->cursor += n;
 8006f2c:	1843      	adds	r3, r0, r1
 8006f2e:	6023      	str	r3, [r4, #0]
        stream->val     = crc16drv_block_manual(data, n, stream->val);
 8006f30:	8922      	ldrh	r2, [r4, #8]
 8006f32:	b209      	sxth	r1, r1
 8006f34:	f7ff ffda 	bl	8006eec <crc16drv_block_manual>
 8006f38:	8120      	strh	r0, [r4, #8]
    if ((stream->count == 0) && (stream->writeout)) {
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	5ea3      	ldrsh	r3, [r4, r2]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10f      	bne.n	8006f62 <crc_calc_nstream+0x4e>
 8006f42:	79a3      	ldrb	r3, [r4, #6]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00c      	beq.n	8006f62 <crc_calc_nstream+0x4e>
        stream->writeout    = False;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	71a3      	strb	r3, [r4, #6]
        *stream->cursor++   = (ot_u8)(stream->val >> 8);
 8006f4c:	8923      	ldrh	r3, [r4, #8]
 8006f4e:	6822      	ldr	r2, [r4, #0]
 8006f50:	1c51      	adds	r1, r2, #1
 8006f52:	6021      	str	r1, [r4, #0]
 8006f54:	0a1b      	lsrs	r3, r3, #8
 8006f56:	7013      	strb	r3, [r2, #0]
        *stream->cursor++   = (ot_u8)(stream->val);
 8006f58:	8922      	ldrh	r2, [r4, #8]
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	1c59      	adds	r1, r3, #1
 8006f5e:	6021      	str	r1, [r4, #0]
 8006f60:	701a      	strb	r2, [r3, #0]
}
 8006f62:	bd10      	pop	{r4, pc}

08006f64 <crc_block>:
ot_u16 crc_block(crcstream_t* stream, ot_bool writeout, ot_int size, ot_u8* data) {
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	0005      	movs	r5, r0
 8006f68:	0014      	movs	r4, r2
    crc_init_stream(stream, writeout, size, data);
 8006f6a:	f7ff ffb3 	bl	8006ed4 <crc_init_stream>
    crc_calc_nstream(stream, size);
 8006f6e:	b2a1      	uxth	r1, r4
 8006f70:	0028      	movs	r0, r5
 8006f72:	f7ff ffcf 	bl	8006f14 <crc_calc_nstream>
    return stream->val;
 8006f76:	8928      	ldrh	r0, [r5, #8]
}
 8006f78:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f7c <logger_header>:
#include <otsys/mpipe.h>

#include <string.h>


ot_bool logger_header(ot_u8 id_subcode, ot_int payload_length) {
 8006f7c:	b510      	push	{r4, lr}
/// logger_header creates the ALP/NDEF header needed by MPipe.  It is used
/// by all logging functions.  If there is not enough space in the MPipe queue
/// to hold the log data, it will return False, and nothing will be added to
/// the MPipe queue.

    mpipe.alp.outrec.id     = 4;                //Logger ID
 8006f7e:	4a0a      	ldr	r2, [pc, #40]	; (8006fa8 <logger_header+0x2c>)
 8006f80:	2304      	movs	r3, #4
 8006f82:	7213      	strb	r3, [r2, #8]
    mpipe.alp.outrec.cmd    = id_subcode;       //Format Type
 8006f84:	7250      	strb	r0, [r2, #9]

    if ((mpipe.alp.outq->putcursor+payload_length) < mpipe.alp.outq->back) {
 8006f86:	6910      	ldr	r0, [r2, #16]
 8006f88:	6883      	ldr	r3, [r0, #8]
 8006f8a:	185a      	adds	r2, r3, r1
 8006f8c:	6903      	ldr	r3, [r0, #16]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d301      	bcc.n	8006f96 <logger_header+0x1a>
        alp_new_record(&mpipe.alp, (ALP_FLAG_MB+5), 255, payload_length);
        return True;
    }
    //mpipe_kill();
    return False;
 8006f92:	2000      	movs	r0, #0
}
 8006f94:	bd10      	pop	{r4, pc}
        alp_new_record(&mpipe.alp, (ALP_FLAG_MB+5), 255, payload_length);
 8006f96:	000b      	movs	r3, r1
 8006f98:	22ff      	movs	r2, #255	; 0xff
 8006f9a:	2185      	movs	r1, #133	; 0x85
 8006f9c:	4803      	ldr	r0, [pc, #12]	; (8006fac <logger_header+0x30>)
 8006f9e:	f7ff ff04 	bl	8006daa <alp_new_record>
        return True;
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	e7f6      	b.n	8006f94 <logger_header+0x18>
 8006fa6:	46c0      	nop			; (mov r8, r8)
 8006fa8:	20002d90 	.word	0x20002d90
 8006fac:	20002d94 	.word	0x20002d94

08006fb0 <sub_logmsg>:
}
#endif



void sub_logmsg(ot_int label_len, ot_int data_len, ot_u8* label, ot_u8* data) {
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	000e      	movs	r6, r1
 8006fb4:	0011      	movs	r1, r2
 8006fb6:	001d      	movs	r5, r3
	q_writestring(mpipe.alp.outq, label, label_len);
 8006fb8:	4c07      	ldr	r4, [pc, #28]	; (8006fd8 <sub_logmsg+0x28>)
 8006fba:	0002      	movs	r2, r0
 8006fbc:	6920      	ldr	r0, [r4, #16]
 8006fbe:	f000 f8f4 	bl	80071aa <q_writestring>
    q_writebyte(mpipe.alp.outq, 0);
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	6920      	ldr	r0, [r4, #16]
 8006fc6:	f000 f891 	bl	80070ec <q_writebyte>
    q_writestring(mpipe.alp.outq, data, data_len);
 8006fca:	6920      	ldr	r0, [r4, #16]
 8006fcc:	0032      	movs	r2, r6
 8006fce:	0029      	movs	r1, r5
 8006fd0:	f000 f8eb 	bl	80071aa <q_writestring>
}
 8006fd4:	bd70      	pop	{r4, r5, r6, pc}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	20002d90 	.word	0x20002d90

08006fdc <logger_msg>:
#endif



#ifndef EXTF_logger_msg
void logger_msg(logmsg_type logcmd, ot_int label_len, ot_int data_len, ot_u8* label, ot_u8* data) {
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	000c      	movs	r4, r1
 8006fe0:	0015      	movs	r5, r2
 8006fe2:	001e      	movs	r6, r3
/// Log a "Message" if it fits in the MPipe output queue.  A "Message" is a
/// text label, plus a space, plus a data payload.  The client should know how
/// to read-back Message data.  Check here for more information about messages:
/// http://www.indigresso.com/wiki/doku.php?id=opentag:otlib:logger

    ot_int payload_length = label_len + 1 + data_len;
 8006fe4:	1889      	adds	r1, r1, r2
 8006fe6:	3101      	adds	r1, #1
 8006fe8:	b209      	sxth	r1, r1
    //q_empty(mpipe.alp.outq);

    if (logger_header(logcmd, payload_length)) {
 8006fea:	f7ff ffc7 	bl	8006f7c <logger_header>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d100      	bne.n	8006ff4 <logger_msg+0x18>
    	sub_logmsg(label_len, data_len, label, data);
    	mpipe_txschedule(0); //mpipe_send();
    }
}
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}
    	sub_logmsg(label_len, data_len, label, data);
 8006ff4:	9b04      	ldr	r3, [sp, #16]
 8006ff6:	0032      	movs	r2, r6
 8006ff8:	0029      	movs	r1, r5
 8006ffa:	0020      	movs	r0, r4
 8006ffc:	f7ff ffd8 	bl	8006fb0 <sub_logmsg>
    	mpipe_txschedule(0); //mpipe_send();
 8007000:	2000      	movs	r0, #0
 8007002:	f000 fc6b 	bl	80078dc <mpipe_txschedule>
}
 8007006:	e7f4      	b.n	8006ff2 <logger_msg+0x16>

08007008 <logger_direct>:
#endif



#ifndef EXTF_logger_direct
void logger_direct() {
 8007008:	b510      	push	{r4, lr}
/// Use this if you have already created a valid MPipe ALP/NDEF frame in the
/// MPipe output queue and all you want to do is log it.
    mpipe.alp.outq->getcursor[1] = q_span(mpipe.alp.outq) - 4;
 800700a:	4c06      	ldr	r4, [pc, #24]	; (8007024 <logger_direct+0x1c>)
 800700c:	6920      	ldr	r0, [r4, #16]
 800700e:	f000 f825 	bl	800705c <q_span>
 8007012:	6923      	ldr	r3, [r4, #16]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	3804      	subs	r0, #4
 8007018:	7058      	strb	r0, [r3, #1]
    mpipe_txschedule(0); //mpipe_send();
 800701a:	2000      	movs	r0, #0
 800701c:	f000 fc5e 	bl	80078dc <mpipe_txschedule>
}
 8007020:	bd10      	pop	{r4, pc}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	20002d90 	.word	0x20002d90

08007028 <logger_code>:
#endif



#ifndef EXTF_logger_code
void logger_code(ot_int label_len, ot_u8* label, ot_u16 code) {
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	0005      	movs	r5, r0
 800702e:	000e      	movs	r6, r1
 8007030:	240e      	movs	r4, #14
 8007032:	446c      	add	r4, sp
 8007034:	8022      	strh	r2, [r4, #0]
/// Emergency logging: Used for kernel panics or other such things.
    mpipedrv_kill();
 8007036:	f001 fdc1 	bl	8008bbc <mpipedrv_kill>

    //code = PLATFORM_ENDIAN16(code);
    logger_msg(MSG_raw, label_len, 2, label, (ot_u8*)&code);
 800703a:	9400      	str	r4, [sp, #0]
 800703c:	0033      	movs	r3, r6
 800703e:	2202      	movs	r2, #2
 8007040:	0029      	movs	r1, r5
 8007042:	2004      	movs	r0, #4
 8007044:	f7ff ffca 	bl	8006fdc <logger_msg>
}
 8007048:	b004      	add	sp, #16
 800704a:	bd70      	pop	{r4, r5, r6, pc}

0800704c <q_getcursor_val>:
  * ==================
  */

#ifndef EXTF_q_intrinsics
OT_INLINE ot_u8 q_getcursor_val(ot_queue* q, ot_int offset) {
    return q->getcursor[offset];
 800704c:	6843      	ldr	r3, [r0, #4]
 800704e:	5c58      	ldrb	r0, [r3, r1]
}
 8007050:	4770      	bx	lr

08007052 <q_length>:
  * ====================
  */

#ifndef EXTF_q_length
ot_int q_length(ot_queue* q) {
    return (q->putcursor - q->front);
 8007052:	6883      	ldr	r3, [r0, #8]
 8007054:	68c0      	ldr	r0, [r0, #12]
 8007056:	1a18      	subs	r0, r3, r0
 8007058:	b200      	sxth	r0, r0
}
 800705a:	4770      	bx	lr

0800705c <q_span>:
#endif


#ifndef EXTF_q_span
ot_int q_span(ot_queue* q) {
    return (q->putcursor - q->getcursor);
 800705c:	6883      	ldr	r3, [r0, #8]
 800705e:	6840      	ldr	r0, [r0, #4]
 8007060:	1a18      	subs	r0, r3, r0
 8007062:	b200      	sxth	r0, r0
}
 8007064:	4770      	bx	lr

08007066 <q_writespace>:
#endif


#ifndef EXTF_q_writespace
ot_int q_writespace(ot_queue* q) {
    return (q->back - q->putcursor);
 8007066:	6903      	ldr	r3, [r0, #16]
 8007068:	6880      	ldr	r0, [r0, #8]
 800706a:	1a18      	subs	r0, r3, r0
 800706c:	b200      	sxth	r0, r0
}
 800706e:	4770      	bx	lr

08007070 <q_readspace>:
#endif


#ifndef EXTF_q_readspace
ot_int q_readspace(ot_queue* q) {
    return (q->back - q->getcursor);
 8007070:	6903      	ldr	r3, [r0, #16]
 8007072:	6840      	ldr	r0, [r0, #4]
 8007074:	1a18      	subs	r0, r3, r0
 8007076:	b200      	sxth	r0, r0
}
 8007078:	4770      	bx	lr

0800707a <q_blocktime>:
  * ==================================
  */

#ifndef EXTF_q_blocktime
OT_INLINE ot_uint q_blocktime(ot_queue* q) {
    return q->options.ushort;
 800707a:	8840      	ldrh	r0, [r0, #2]
}
 800707c:	4770      	bx	lr

0800707e <q_blockwrite>:
#endif

#ifndef EXTF_q_blockwrite
OT_INLINE void q_blockwrite(ot_queue* q, ot_uint blocktime) {
    q->options.ushort = blocktime;
 800707e:	8041      	strh	r1, [r0, #2]
}
 8007080:	4770      	bx	lr

08007082 <q_lock>:
#endif

#ifndef EXTF_q_lock
void q_lock(ot_queue* q) {
 8007082:	b510      	push	{r4, lr}
 8007084:	0004      	movs	r4, r0
    while (q->options.ushort != 0) {
 8007086:	e001      	b.n	800708c <q_lock+0xa>
        //    otthread_set_tmask( &(q->tmask), thandle );
        //    otthread_wait();
        //    otthread_clear_tmask( &(q->tmask), thandle );
        //}
        //else 
        {   delay_ti(q->options.ushort);
 8007088:	f001 fbfe 	bl	8008888 <delay_ti>
    while (q->options.ushort != 0) {
 800708c:	8860      	ldrh	r0, [r4, #2]
 800708e:	2800      	cmp	r0, #0
 8007090:	d1fa      	bne.n	8007088 <q_lock+0x6>
        }
    }
    q->options.ushort = 1;
 8007092:	2301      	movs	r3, #1
 8007094:	8063      	strh	r3, [r4, #2]
}
 8007096:	bd10      	pop	{r4, pc}

08007098 <q_unlock>:
#endif

#ifndef EXTF_q_unlock
void q_unlock(ot_queue* q) {
    // otthread_release_any( &(q->tmask) );
    q->options.ushort = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	8043      	strh	r3, [r0, #2]
}
 800709c:	4770      	bx	lr

0800709e <q_empty>:



#ifndef EXTF_q_empty
void q_empty(ot_queue* q) {
    q->options.ushort   = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	8043      	strh	r3, [r0, #2]
    q->back             = q->front + q->alloc;
 80070a2:	68c3      	ldr	r3, [r0, #12]
 80070a4:	8802      	ldrh	r2, [r0, #0]
 80070a6:	189a      	adds	r2, r3, r2
 80070a8:	6102      	str	r2, [r0, #16]
    q->putcursor        = q->front;
 80070aa:	6083      	str	r3, [r0, #8]
    q->getcursor        = q->front;
 80070ac:	6043      	str	r3, [r0, #4]
}
 80070ae:	4770      	bx	lr

080070b0 <q_init>:
void q_init(ot_queue* q, void* buffer, ot_u16 alloc) {
 80070b0:	b510      	push	{r4, lr}
    q->alloc    = alloc;
 80070b2:	8002      	strh	r2, [r0, #0]
    q->front    = buffer;
 80070b4:	60c1      	str	r1, [r0, #12]
    q->back     = buffer+alloc;
 80070b6:	1889      	adds	r1, r1, r2
 80070b8:	6101      	str	r1, [r0, #16]
    q_empty(q);
 80070ba:	f7ff fff0 	bl	800709e <q_empty>
}
 80070be:	bd10      	pop	{r4, pc}

080070c0 <q_rewind>:
#endif


#ifndef EXTF_q_rewind
void q_rewind(ot_queue* q) {
 80070c0:	b510      	push	{r4, lr}
    ot_int dist = q->getcursor - q->front;
 80070c2:	6841      	ldr	r1, [r0, #4]
 80070c4:	68c4      	ldr	r4, [r0, #12]
 80070c6:	1b0b      	subs	r3, r1, r4
 80070c8:	b21b      	sxth	r3, r3
    
    if (dist > 0) {
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	dd08      	ble.n	80070e0 <q_rewind+0x20>
        ot_u8* put      = q->putcursor;
 80070ce:	6882      	ldr	r2, [r0, #8]
        ot_u8* get      = q->getcursor;
        q->putcursor   -= dist;
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	6083      	str	r3, [r0, #8]
        q->getcursor    = q->front;
 80070d4:	6044      	str	r4, [r0, #4]
        
        memcpy(q->front, get, put-get);
 80070d6:	1a52      	subs	r2, r2, r1
 80070d8:	b292      	uxth	r2, r2
 80070da:	0020      	movs	r0, r4
 80070dc:	f001 fc30 	bl	8008940 <ot_memcpy>
    }
}
 80070e0:	bd10      	pop	{r4, pc}

080070e2 <q_markbyte>:


#ifndef EXTF_q_markbyte
ot_qcur q_markbyte(ot_queue* q, ot_int shift) {
    ot_qcur output;
    output          = q->getcursor;
 80070e2:	6843      	ldr	r3, [r0, #4]
    q->getcursor   += shift;
 80070e4:	1859      	adds	r1, r3, r1
 80070e6:	6041      	str	r1, [r0, #4]
    return output;
}
 80070e8:	0018      	movs	r0, r3
 80070ea:	4770      	bx	lr

080070ec <q_writebyte>:
#endif


#ifndef EXTF_q_writebyte
void q_writebyte(ot_queue* q, ot_u8 byte_in) {
    *q->putcursor++ = byte_in;
 80070ec:	6883      	ldr	r3, [r0, #8]
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	6082      	str	r2, [r0, #8]
 80070f2:	7019      	strb	r1, [r3, #0]
}
 80070f4:	4770      	bx	lr

080070f6 <q_writeshort>:
#   if defined(__UNALIGNED_ACCESS__)
        *(ot_u16*)q->putcursor  = PLATFORM_ENDIAN16(short_in);
        q->putcursor           += 2;
#   else
        ot_u8* data     = (ot_u8*)&short_in;
        *q->putcursor++ = data[UPPER];
 80070f6:	6883      	ldr	r3, [r0, #8]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	6082      	str	r2, [r0, #8]
 80070fc:	0a0a      	lsrs	r2, r1, #8
 80070fe:	701a      	strb	r2, [r3, #0]
        *q->putcursor++ = data[LOWER];
 8007100:	6883      	ldr	r3, [r0, #8]
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	6082      	str	r2, [r0, #8]
 8007106:	7019      	strb	r1, [r3, #0]
#   endif
}
 8007108:	4770      	bx	lr

0800710a <q_writeshort_be>:
#   elif defined(__UNALIGNED_ACCESS__)
        *(ot_u16*)q->putcursor = short_in;
        q->putcursor          += 4;
#   else
        ot_u8* data     = (ot_u8*)&short_in;
        *q->putcursor++ = data[0];
 800710a:	6883      	ldr	r3, [r0, #8]
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	6082      	str	r2, [r0, #8]
 8007110:	7019      	strb	r1, [r3, #0]
        *q->putcursor++ = data[1];
 8007112:	6883      	ldr	r3, [r0, #8]
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	6082      	str	r2, [r0, #8]
 8007118:	0a09      	lsrs	r1, r1, #8
 800711a:	7019      	strb	r1, [r3, #0]
#   endif
}
 800711c:	4770      	bx	lr

0800711e <q_writelong>:
        *(ot_u32*)q->putcursor = PLATFORM_ENDIAN32(long_in);
        q->putcursor          += 4;
#   else
        ot_u8* data;
        data = (ot_u8*)&long_in;
        *q->putcursor++ = data[_B3];
 800711e:	6883      	ldr	r3, [r0, #8]
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	6082      	str	r2, [r0, #8]
 8007124:	0e0a      	lsrs	r2, r1, #24
 8007126:	701a      	strb	r2, [r3, #0]
        *q->putcursor++ = data[_B2];
 8007128:	6882      	ldr	r2, [r0, #8]
 800712a:	1c53      	adds	r3, r2, #1
 800712c:	6083      	str	r3, [r0, #8]
 800712e:	020b      	lsls	r3, r1, #8
 8007130:	0e1b      	lsrs	r3, r3, #24
 8007132:	7013      	strb	r3, [r2, #0]
        *q->putcursor++ = data[_B1];
 8007134:	6882      	ldr	r2, [r0, #8]
 8007136:	1c53      	adds	r3, r2, #1
 8007138:	6083      	str	r3, [r0, #8]
 800713a:	040b      	lsls	r3, r1, #16
 800713c:	0e1b      	lsrs	r3, r3, #24
 800713e:	7013      	strb	r3, [r2, #0]
        *q->putcursor++ = data[_B0];
 8007140:	6883      	ldr	r3, [r0, #8]
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	6082      	str	r2, [r0, #8]
 8007146:	7019      	strb	r1, [r3, #0]
#   endif
}
 8007148:	4770      	bx	lr

0800714a <q_readbyte>:
#endif


#ifndef EXTF_q_readbyte
ot_u8 q_readbyte(ot_queue* q) {
    return *q->getcursor++;
 800714a:	6843      	ldr	r3, [r0, #4]
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	6042      	str	r2, [r0, #4]
 8007150:	7818      	ldrb	r0, [r3, #0]
}
 8007152:	4770      	bx	lr

08007154 <q_readshort>:
#endif



#ifndef EXTF_q_readshort
ot_u16 q_readshort(ot_queue* q) {
 8007154:	0001      	movs	r1, r0
        ot_u16 data     = *(ot_u16*)q->getcursor;
        q->getcursor   += 2;
        return PLATFORM_ENDIAN16(data);
#   else
        ot_uni16 data;
        data.ubyte[UPPER] = *q->getcursor++;
 8007156:	6842      	ldr	r2, [r0, #4]
 8007158:	1c53      	adds	r3, r2, #1
 800715a:	6043      	str	r3, [r0, #4]
 800715c:	7810      	ldrb	r0, [r2, #0]
        data.ubyte[LOWER] = *q->getcursor++;
 800715e:	1c93      	adds	r3, r2, #2
 8007160:	604b      	str	r3, [r1, #4]
 8007162:	7853      	ldrb	r3, [r2, #1]
 8007164:	0200      	lsls	r0, r0, #8
        return data.ushort;
 8007166:	4318      	orrs	r0, r3
#   endif
}
 8007168:	4770      	bx	lr

0800716a <q_readshort_be>:
        ot_u16 data     = *(ot_u16*)q->getcursor;
        q->getcursor   += 2
        return data;
#   else
        ot_uni16 data;
        data.ubyte[0]   = *q->getcursor++;
 800716a:	6841      	ldr	r1, [r0, #4]
 800716c:	1c4b      	adds	r3, r1, #1
 800716e:	6043      	str	r3, [r0, #4]
 8007170:	780a      	ldrb	r2, [r1, #0]
        data.ubyte[1]   = *q->getcursor++;
 8007172:	1c8b      	adds	r3, r1, #2
 8007174:	6043      	str	r3, [r0, #4]
 8007176:	7848      	ldrb	r0, [r1, #1]
 8007178:	0200      	lsls	r0, r0, #8
        return data.ushort;
 800717a:	4310      	orrs	r0, r2
#   endif
}
 800717c:	4770      	bx	lr

0800717e <q_readlong>:
#endif


#ifndef EXTF_q_readlong
ot_u32 q_readlong(ot_queue* q)  {
 800717e:	b530      	push	{r4, r5, lr}
 8007180:	0002      	movs	r2, r0
        ot_u32 data     = *(ot_u32*)q->getcursor;
        q->getcursor   += 4;
        return PLATFORM_ENDIAN32(data);
#   else
        ot_uni32 data;
        data.ubyte[_B3]  = *q->getcursor++;
 8007182:	6841      	ldr	r1, [r0, #4]
 8007184:	1c48      	adds	r0, r1, #1
 8007186:	6050      	str	r0, [r2, #4]
 8007188:	780b      	ldrb	r3, [r1, #0]
        data.ubyte[_B2]  = *q->getcursor++;
 800718a:	1c8c      	adds	r4, r1, #2
 800718c:	6054      	str	r4, [r2, #4]
 800718e:	784d      	ldrb	r5, [r1, #1]
 8007190:	042d      	lsls	r5, r5, #16
 8007192:	061b      	lsls	r3, r3, #24
        data.ubyte[_B1]  = *q->getcursor++;
 8007194:	3103      	adds	r1, #3
 8007196:	6051      	str	r1, [r2, #4]
 8007198:	7840      	ldrb	r0, [r0, #1]
 800719a:	0200      	lsls	r0, r0, #8
 800719c:	432b      	orrs	r3, r5
        data.ubyte[_B0]  = *q->getcursor++;
 800719e:	1ca1      	adds	r1, r4, #2
 80071a0:	6051      	str	r1, [r2, #4]
 80071a2:	7862      	ldrb	r2, [r4, #1]
 80071a4:	4318      	orrs	r0, r3
 80071a6:	4310      	orrs	r0, r2
        return data.ulong;
#   endif
}
 80071a8:	bd30      	pop	{r4, r5, pc}

080071aa <q_writestring>:
}
#endif


#ifndef EXTF_q_writestring
ot_int q_writestring(ot_queue* q, ot_u8* string, ot_int length) {
 80071aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ac:	0005      	movs	r5, r0
 80071ae:	000f      	movs	r7, r1
 80071b0:	1e16      	subs	r6, r2, #0
    ot_int limit;
    
    if (length <= 0) {
 80071b2:	dd0f      	ble.n	80071d4 <q_writestring+0x2a>
        return 0;
    }
    
    limit = q_writespace(q);
 80071b4:	f7ff ff57 	bl	8007066 <q_writespace>
 80071b8:	0004      	movs	r4, r0
    if (limit < length) {
 80071ba:	4286      	cmp	r6, r0
 80071bc:	dc00      	bgt.n	80071c0 <q_writestring+0x16>
 80071be:	0034      	movs	r4, r6
        length = limit;
    } 

    ot_memcpy(q->putcursor, string, length);
 80071c0:	b2a2      	uxth	r2, r4
 80071c2:	0039      	movs	r1, r7
 80071c4:	68a8      	ldr	r0, [r5, #8]
 80071c6:	f001 fbbb 	bl	8008940 <ot_memcpy>
    q->putcursor += length;
 80071ca:	68ab      	ldr	r3, [r5, #8]
 80071cc:	191b      	adds	r3, r3, r4
 80071ce:	60ab      	str	r3, [r5, #8]
    
    return length;
}
 80071d0:	0020      	movs	r0, r4
 80071d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 80071d4:	2400      	movs	r4, #0
 80071d6:	e7fb      	b.n	80071d0 <q_writestring+0x26>

080071d8 <q_movedata>:
#endif



#ifndef EXTF_q_movedata
ot_int q_movedata(ot_queue* qdst, ot_queue* qsrc, ot_int length) {
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	0007      	movs	r7, r0
 80071dc:	000d      	movs	r5, r1
 80071de:	1e14      	subs	r4, r2, #0
    ot_int writespace, readspace, limit;
    ot_u8* dst;
    ot_u8* src;

    if (length <= 0) {
 80071e0:	dd1b      	ble.n	800721a <q_movedata+0x42>
        return 0;
    }
    
    writespace  = q_writespace(qdst);
 80071e2:	f7ff ff40 	bl	8007066 <q_writespace>
 80071e6:	0006      	movs	r6, r0
    readspace   = q_readspace(qsrc);
 80071e8:	0028      	movs	r0, r5
 80071ea:	f7ff ff41 	bl	8007070 <q_readspace>
    limit       = (writespace < readspace) ? writespace : readspace;
 80071ee:	1c33      	adds	r3, r6, #0
 80071f0:	4286      	cmp	r6, r0
 80071f2:	dd00      	ble.n	80071f6 <q_movedata+0x1e>
 80071f4:	1c03      	adds	r3, r0, #0
 80071f6:	b21a      	sxth	r2, r3
    if (limit < length) {
 80071f8:	4294      	cmp	r4, r2
 80071fa:	dd02      	ble.n	8007202 <q_movedata+0x2a>
        return length - limit;
 80071fc:	1ae4      	subs	r4, r4, r3
 80071fe:	b220      	sxth	r0, r4
    qdst->putcursor    += length;
    qsrc->getcursor    += length;
    ot_memcpy(dst, src, length);
    
    return length;
}
 8007200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dst                 = qdst->putcursor;
 8007202:	68b8      	ldr	r0, [r7, #8]
    src                 = qsrc->getcursor;
 8007204:	6869      	ldr	r1, [r5, #4]
    qdst->putcursor    += length;
 8007206:	1903      	adds	r3, r0, r4
 8007208:	60bb      	str	r3, [r7, #8]
    qsrc->getcursor    += length;
 800720a:	686b      	ldr	r3, [r5, #4]
 800720c:	191b      	adds	r3, r3, r4
 800720e:	606b      	str	r3, [r5, #4]
    ot_memcpy(dst, src, length);
 8007210:	b2a2      	uxth	r2, r4
 8007212:	f001 fb95 	bl	8008940 <ot_memcpy>
    return length;
 8007216:	0020      	movs	r0, r4
 8007218:	e7f2      	b.n	8007200 <q_movedata+0x28>
        return 0;
 800721a:	2000      	movs	r0, #0
 800721c:	e7f0      	b.n	8007200 <q_movedata+0x28>

0800721e <otutils_sig2_null>:


// Null Signals
void otutils_null(void)                     { }
void otutils_sig_null(ot_int a)             { }
void otutils_sig2_null(ot_int a, ot_int b)  { }
 800721e:	4770      	bx	lr

08007220 <otutils_calc_longtimeout>:

#ifndef EXTF_otutils_calc_longtimeout
ot_ulong otutils_calc_longtimeout(ot_u16 timeout_code) {
	ot_uint 	shift;
	ot_ulong    timeout;
	shift       = (timeout_code >> 8) & 0x001C;
 8007220:	0a03      	lsrs	r3, r0, #8
 8007222:	221c      	movs	r2, #28
 8007224:	401a      	ands	r2, r3
	timeout     = (timeout_code & 0x3FF);
 8007226:	0580      	lsls	r0, r0, #22
 8007228:	0d80      	lsrs	r0, r0, #22
	timeout    += (shift != 0);
 800722a:	0013      	movs	r3, r2
 800722c:	1e59      	subs	r1, r3, #1
 800722e:	418b      	sbcs	r3, r1
 8007230:	1818      	adds	r0, r3, r0
	timeout    *= (1 << shift);
 8007232:	4090      	lsls	r0, r2
	return timeout;
}
 8007234:	4770      	bx	lr

08007236 <otutils_calc_timeout>:

#ifndef EXTF_otutils_calc_timeout
ot_ulong otutils_calc_timeout(ot_u8 timeout_code) {
	ot_uint		shift;
	ot_ulong    timeout;
	shift       = (timeout_code >> 3) & 0x000E;
 8007236:	08c2      	lsrs	r2, r0, #3
 8007238:	210e      	movs	r1, #14
 800723a:	400a      	ands	r2, r1
 800723c:	b293      	uxth	r3, r2
	timeout     = (timeout_code & 0x0E);
 800723e:	4001      	ands	r1, r0
	timeout    += (shift != 0);
 8007240:	0018      	movs	r0, r3
 8007242:	1e43      	subs	r3, r0, #1
 8007244:	4198      	sbcs	r0, r3
 8007246:	1840      	adds	r0, r0, r1
	timeout    *= (1 << shift);
 8007248:	4090      	lsls	r0, r2
	return timeout;
}
 800724a:	4770      	bx	lr

0800724c <otutils_encode_timeout>:

#ifndef EXTF_otutils_encode_timeout
ot_u8 otutils_encode_timeout(ot_u16 timeout_ticks) {
	ot_uint exp;

	if (timeout_ticks < 0x10) {
 800724c:	280f      	cmp	r0, #15
 800724e:	d902      	bls.n	8007256 <otutils_encode_timeout+0xa>
		return (ot_u8)timeout_ticks;
	}

	exp 			= 1;
	timeout_ticks >>= 2;
 8007250:	0880      	lsrs	r0, r0, #2
	exp 			= 1;
 8007252:	2301      	movs	r3, #1

	while (timeout_ticks > 0x10) {
 8007254:	e004      	b.n	8007260 <otutils_encode_timeout+0x14>
		return (ot_u8)timeout_ticks;
 8007256:	b2c0      	uxtb	r0, r0
 8007258:	e00a      	b.n	8007270 <otutils_encode_timeout+0x24>
		exp += 2;
 800725a:	3302      	adds	r3, #2
 800725c:	b29b      	uxth	r3, r3
		timeout_ticks >>= 4;
 800725e:	0900      	lsrs	r0, r0, #4
	while (timeout_ticks > 0x10) {
 8007260:	2810      	cmp	r0, #16
 8007262:	d8fa      	bhi.n	800725a <otutils_encode_timeout+0xe>
	}
	timeout_ticks--;
 8007264:	1e42      	subs	r2, r0, #1

	return (exp << 4) + (ot_u8)timeout_ticks;
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	b2d8      	uxtb	r0, r3
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	1880      	adds	r0, r0, r2
 800726e:	b2c0      	uxtb	r0, r0
}
 8007270:	4770      	bx	lr

08007272 <sub_gfb_new>:
                        GFB_Header_START_USER,
                        GFB_NUM_USER_FILES   );
#else
    return NULL;
#endif
}
 8007272:	2000      	movs	r0, #0
 8007274:	4770      	bx	lr

08007276 <sub_iss_new>:
                        ISS_Header_START_USER,
                        ISS_NUM_USER_CODES   );
#else
    return NULL;
#endif
}
 8007276:	2000      	movs	r0, #0
 8007278:	4770      	bx	lr

0800727a <sub_isf_new>:
                        ISF_Header_START_USER,
                        ISF_NUM_USER_FILES );
#else
    return NULL;
#endif
}
 800727a:	2000      	movs	r0, #0
 800727c:	4770      	bx	lr

0800727e <sub_gfb_delete_check>:
#if ((OT_FEATURE(VLNEW) == ENABLED) && ((GFB_HEAP_BYTES > 0) && (GFB_NUM_USER_FILES > 0)))
    return ( id > GFB_NUM_STOCK_FILES );
#else
    return 0;
#endif
}
 800727e:	2000      	movs	r0, #0
 8007280:	4770      	bx	lr

08007282 <sub_iss_delete_check>:
#if ((OT_FEATURE(VLNEW) == ENABLED) && (ISS_NUM_USER_CODES > 0))
    return ( id >= ISS_ID_extended_service);
#else
    return 0;
#endif
}
 8007282:	2000      	movs	r0, #0
 8007284:	4770      	bx	lr

08007286 <sub_isf_delete_check>:
    return ((id >= (ISF_NUM_M1_FILES+ISF_NUM_M2_FILES)) && \
            (id < (256-ISF_NUM_EXT_FILES)) );
#else
    return 0;
#endif
}
 8007286:	2000      	movs	r0, #0
 8007288:	4770      	bx	lr
	...

0800728c <sub_new_fp>:

static vlFILE* sub_new_fp() {
#if (OT_PARAM(VLFPS) < 8)
    ot_int fd;

    for (fd=0; fd<OT_PARAM(VLFPS); fd++) {
 800728c:	2300      	movs	r3, #0
 800728e:	2b02      	cmp	r3, #2
 8007290:	dc0d      	bgt.n	80072ae <sub_new_fp+0x22>
        if (vlfile[fd].read == NULL)
 8007292:	009a      	lsls	r2, r3, #2
 8007294:	18d2      	adds	r2, r2, r3
 8007296:	0091      	lsls	r1, r2, #2
 8007298:	4a06      	ldr	r2, [pc, #24]	; (80072b4 <sub_new_fp+0x28>)
 800729a:	1852      	adds	r2, r2, r1
 800729c:	68d2      	ldr	r2, [r2, #12]
 800729e:	2a00      	cmp	r2, #0
 80072a0:	d002      	beq.n	80072a8 <sub_new_fp+0x1c>
    for (fd=0; fd<OT_PARAM(VLFPS); fd++) {
 80072a2:	3301      	adds	r3, #1
 80072a4:	b21b      	sxth	r3, r3
 80072a6:	e7f2      	b.n	800728e <sub_new_fp+0x2>
            return &vlfile[fd];
 80072a8:	4802      	ldr	r0, [pc, #8]	; (80072b4 <sub_new_fp+0x28>)
 80072aa:	1840      	adds	r0, r0, r1
 80072ac:	e000      	b.n	80072b0 <sub_new_fp+0x24>
    }
#else
        ///@todo do a binary search
#endif

    return NULL;
 80072ae:	2000      	movs	r0, #0
}
 80072b0:	4770      	bx	lr
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	20001170 	.word	0x20001170

080072b8 <sub_write_header>:
        header += 2;
    }
}


static void sub_write_header(vaddr header, ot_u16* data, ot_uint length ) {
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	0007      	movs	r7, r0
 80072bc:	000d      	movs	r5, r1
 80072be:	0016      	movs	r6, r2
    ot_int i;

    for (i=0; i<length; i+=2, data++) {
 80072c0:	2300      	movs	r3, #0
 80072c2:	e008      	b.n	80072d6 <sub_write_header+0x1e>
        vworm_write( (header+i), *data);
 80072c4:	b29c      	uxth	r4, r3
 80072c6:	8829      	ldrh	r1, [r5, #0]
 80072c8:	19e0      	adds	r0, r4, r7
 80072ca:	b280      	uxth	r0, r0
 80072cc:	f001 fee4 	bl	8009098 <vworm_write>
    for (i=0; i<length; i+=2, data++) {
 80072d0:	3402      	adds	r4, #2
 80072d2:	b223      	sxth	r3, r4
 80072d4:	3502      	adds	r5, #2
 80072d6:	42b3      	cmp	r3, r6
 80072d8:	dbf4      	blt.n	80072c4 <sub_write_header+0xc>
    }
}
 80072da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072dc <sub_header_search>:
static vaddr sub_header_search(vaddr header, ot_u8 search_id, ot_int num_headers) {
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	0004      	movs	r4, r0
 80072e0:	000f      	movs	r7, r1
 80072e2:	0016      	movs	r6, r2
    for (; num_headers > 0; num_headers--) {
 80072e4:	e003      	b.n	80072ee <sub_header_search+0x12>
        header += OCTETS_IN_vl_header_t;
 80072e6:	3410      	adds	r4, #16
 80072e8:	b2a4      	uxth	r4, r4
    for (; num_headers > 0; num_headers--) {
 80072ea:	3e01      	subs	r6, #1
 80072ec:	b236      	sxth	r6, r6
 80072ee:	2e00      	cmp	r6, #0
 80072f0:	dd12      	ble.n	8007318 <sub_header_search+0x3c>
        ot_u16 base     = vworm_read(header + 6);
 80072f2:	1da0      	adds	r0, r4, #6
 80072f4:	b280      	uxth	r0, r0
 80072f6:	f001 fec7 	bl	8009088 <vworm_read>
 80072fa:	0005      	movs	r5, r0
        idmod.ushort    = vworm_read(header + 4);
 80072fc:	1d20      	adds	r0, r4, #4
 80072fe:	b280      	uxth	r0, r0
 8007300:	f001 fec2 	bl	8009088 <vworm_read>
        if ( base != 0 && base != 0xFFFF) {
 8007304:	3d01      	subs	r5, #1
 8007306:	b2ad      	uxth	r5, r5
 8007308:	4b04      	ldr	r3, [pc, #16]	; (800731c <sub_header_search+0x40>)
 800730a:	429d      	cmp	r5, r3
 800730c:	d8eb      	bhi.n	80072e6 <sub_header_search+0xa>
            if (idmod.ubyte[0] == search_id)
 800730e:	b2c0      	uxtb	r0, r0
 8007310:	4287      	cmp	r7, r0
 8007312:	d1e8      	bne.n	80072e6 <sub_header_search+0xa>
                return header;
 8007314:	0020      	movs	r0, r4
 8007316:	e000      	b.n	800731a <sub_header_search+0x3e>
    return NULL_vaddr;
 8007318:	4801      	ldr	r0, [pc, #4]	; (8007320 <sub_header_search+0x44>)
}
 800731a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800731c:	0000fffd 	.word	0x0000fffd
 8007320:	0000ffff 	.word	0x0000ffff

08007324 <sub_isf_search>:
static vaddr sub_isf_search(ot_u8 id) {
 8007324:	b510      	push	{r4, lr}
    if ( (id >= ISF_NUM_STOCK_FILES) && (id < (256-ISF_NUM_EXT_FILES)) ) {
 8007326:	0003      	movs	r3, r0
 8007328:	3b19      	subs	r3, #25
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2be5      	cmp	r3, #229	; 0xe5
 800732e:	d905      	bls.n	800733c <sub_isf_search+0x18>
    if (id > (255-ISF_NUM_EXT_FILES)) {
 8007330:	28ff      	cmp	r0, #255	; 0xff
 8007332:	d00a      	beq.n	800734a <sub_isf_search+0x26>
    return (OCTETS_IN_vl_header_t * id) + ISF_Header_START;
 8007334:	300e      	adds	r0, #14
 8007336:	0100      	lsls	r0, r0, #4
 8007338:	b280      	uxth	r0, r0
}
 800733a:	bd10      	pop	{r4, pc}
        return sub_header_search(ISF_Header_START_USER, id, ISF_NUM_USER_FILES);
 800733c:	239c      	movs	r3, #156	; 0x9c
 800733e:	2200      	movs	r2, #0
 8007340:	0001      	movs	r1, r0
 8007342:	0098      	lsls	r0, r3, #2
 8007344:	f7ff ffca 	bl	80072dc <sub_header_search>
 8007348:	e7f7      	b.n	800733a <sub_isf_search+0x16>
        id = (ot_u8)((ot_int)ISF_NUM_STOCK_FILES + (255-id));
 800734a:	2118      	movs	r1, #24
 800734c:	1a08      	subs	r0, r1, r0
 800734e:	b2c0      	uxtb	r0, r0
 8007350:	e7f0      	b.n	8007334 <sub_isf_search+0x10>

08007352 <sub_iss_search>:
static vaddr sub_iss_search(ot_u8 id) {
 8007352:	b510      	push	{r4, lr}
 8007354:	0001      	movs	r1, r0
    return sub_header_search( ISS_Header_START, id, ISS_NUM_FILES );
 8007356:	220c      	movs	r2, #12
 8007358:	2020      	movs	r0, #32
 800735a:	f7ff ffbf 	bl	80072dc <sub_header_search>
}
 800735e:	bd10      	pop	{r4, pc}

08007360 <sub_gfb_search>:
static vaddr sub_gfb_search(ot_u8 id) {
 8007360:	b510      	push	{r4, lr}
 8007362:	0001      	movs	r1, r0
    return sub_header_search( GFB_Header_START, id, GFB_NUM_USER_FILES );
 8007364:	2200      	movs	r2, #0
 8007366:	2020      	movs	r0, #32
 8007368:	f7ff ffb8 	bl	80072dc <sub_header_search>
}
 800736c:	bd10      	pop	{r4, pc}
	...

08007370 <sub_action>:
static ot_u8 sub_action(vlFILE* fp) {
 8007370:	b510      	push	{r4, lr}
 8007372:	0004      	movs	r4, r0
    select = vworm_read(fp->header+10) >> 8;        ///@todo this is little endian only
 8007374:	8800      	ldrh	r0, [r0, #0]
 8007376:	300a      	adds	r0, #10
 8007378:	b280      	uxth	r0, r0
 800737a:	f001 fe85 	bl	8009088 <vworm_read>
 800737e:	0a00      	lsrs	r0, r0, #8
 8007380:	b280      	uxth	r0, r0
    if (select < OT_PARAM(VLACTIONS)) {
 8007382:	2807      	cmp	r0, #7
 8007384:	d807      	bhi.n	8007396 <sub_action+0x26>
        retval = vlaction[select](fp);
 8007386:	0080      	lsls	r0, r0, #2
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <sub_action+0x2c>)
 800738a:	1818      	adds	r0, r3, r0
 800738c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800738e:	0020      	movs	r0, r4
 8007390:	4798      	blx	r3
 8007392:	b2c0      	uxtb	r0, r0
}
 8007394:	bd10      	pop	{r4, pc}
    ot_u8 retval = 0;
 8007396:	2000      	movs	r0, #0
 8007398:	e7fc      	b.n	8007394 <sub_action+0x24>
 800739a:	46c0      	nop			; (mov r8, r8)
 800739c:	20001170 	.word	0x20001170

080073a0 <sub_delete_file>:
static void sub_delete_file(vaddr del_header) {
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	0004      	movs	r4, r0
    header_alloc    = (ot_u16)vworm_read(del_header+2);
 80073a4:	1c85      	adds	r5, r0, #2
 80073a6:	b2ad      	uxth	r5, r5
 80073a8:	0028      	movs	r0, r5
 80073aa:	f001 fe6d 	bl	8009088 <vworm_read>
 80073ae:	0006      	movs	r6, r0
    header_base     = (vaddr)vworm_read(del_header+6);
 80073b0:	3406      	adds	r4, #6
 80073b2:	b2a4      	uxth	r4, r4
 80073b4:	0020      	movs	r0, r4
 80073b6:	f001 fe67 	bl	8009088 <vworm_read>
    vworm_wipeblock(header_base, header_alloc);
 80073ba:	0031      	movs	r1, r6
 80073bc:	f001 fe78 	bl	80090b0 <vworm_wipeblock>
    vworm_mark((del_header+2), 0);                //alloc
 80073c0:	2100      	movs	r1, #0
 80073c2:	0028      	movs	r0, r5
 80073c4:	f001 fe70 	bl	80090a8 <vworm_mark>
    vworm_mark((del_header+6), NULL_vaddr);       //base
 80073c8:	4902      	ldr	r1, [pc, #8]	; (80073d4 <sub_delete_file+0x34>)
 80073ca:	0020      	movs	r0, r4
 80073cc:	f001 fe6c 	bl	80090a8 <vworm_mark>
}
 80073d0:	bd70      	pop	{r4, r5, r6, pc}
 80073d2:	46c0      	nop			; (mov r8, r8)
 80073d4:	0000ffff 	.word	0x0000ffff

080073d8 <vl_new>:
OT_WEAK ot_u8 vl_new(vlFILE** fp_new, vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, ot_uint max_length, const id_tmpl* user_id) {
 80073d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073da:	b083      	sub	sp, #12
 80073dc:	0006      	movs	r6, r0
 80073de:	000c      	movs	r4, r1
 80073e0:	9200      	str	r2, [sp, #0]
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	ab08      	add	r3, sp, #32
 80073e6:	881f      	ldrh	r7, [r3, #0]
    if (user_id != NULL) {
 80073e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d006      	beq.n	80073fc <vl_new+0x24>
        if ( auth_check(VL_ACCESS_USER, VL_ACCESS_W, user_id) == 0 ) {
 80073ee:	001a      	movs	r2, r3
 80073f0:	2112      	movs	r1, #18
 80073f2:	2038      	movs	r0, #56	; 0x38
 80073f4:	f7ff fd41 	bl	8006e7a <auth_check>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d02f      	beq.n	800745c <vl_new+0x84>
    block_id--;
 80073fc:	3c01      	subs	r4, #1
 80073fe:	b2e4      	uxtb	r4, r4
    switch (block_id) {
 8007400:	2c01      	cmp	r4, #1
 8007402:	d028      	beq.n	8007456 <vl_new+0x7e>
 8007404:	2c00      	cmp	r4, #0
 8007406:	d003      	beq.n	8007410 <vl_new+0x38>
 8007408:	2c02      	cmp	r4, #2
 800740a:	d021      	beq.n	8007450 <vl_new+0x78>
       default: return 0xFF;
 800740c:	20ff      	movs	r0, #255	; 0xff
 800740e:	e01d      	b.n	800744c <vl_new+0x74>
                new_fn      = &sub_gfb_new;
 8007410:	4d15      	ldr	r5, [pc, #84]	; (8007468 <vl_new+0x90>)
        case 0: search_fn   = &sub_gfb_search;
 8007412:	4b16      	ldr	r3, [pc, #88]	; (800746c <vl_new+0x94>)
    header = search_fn(data_id);
 8007414:	9800      	ldr	r0, [sp, #0]
 8007416:	4798      	blx	r3
    if (header != NULL_vaddr) {
 8007418:	4b15      	ldr	r3, [pc, #84]	; (8007470 <vl_new+0x98>)
 800741a:	4298      	cmp	r0, r3
 800741c:	d120      	bne.n	8007460 <vl_new+0x88>
    *fp_new = new_fn(data_id, mod, max_length);
 800741e:	b2fa      	uxtb	r2, r7
 8007420:	9901      	ldr	r1, [sp, #4]
 8007422:	9800      	ldr	r0, [sp, #0]
 8007424:	47a8      	blx	r5
 8007426:	6030      	str	r0, [r6, #0]
    if (*fp_new == NULL) {
 8007428:	2800      	cmp	r0, #0
 800742a:	d01b      	beq.n	8007464 <vl_new+0x8c>
        block[block_id].files  += 1;
 800742c:	4a11      	ldr	r2, [pc, #68]	; (8007474 <vl_new+0x9c>)
 800742e:	3262      	adds	r2, #98	; 0x62
 8007430:	0063      	lsls	r3, r4, #1
 8007432:	191c      	adds	r4, r3, r4
 8007434:	0063      	lsls	r3, r4, #1
 8007436:	18d2      	adds	r2, r2, r3
 8007438:	7911      	ldrb	r1, [r2, #4]
 800743a:	7953      	ldrb	r3, [r2, #5]
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	430b      	orrs	r3, r1
 8007440:	3301      	adds	r3, #1
 8007442:	b29b      	uxth	r3, r3
 8007444:	7113      	strb	r3, [r2, #4]
 8007446:	0a1b      	lsrs	r3, r3, #8
 8007448:	7153      	strb	r3, [r2, #5]
    return 0;
 800744a:	2000      	movs	r0, #0
}
 800744c:	b003      	add	sp, #12
 800744e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                new_fn      = &sub_isf_new;
 8007450:	4d09      	ldr	r5, [pc, #36]	; (8007478 <vl_new+0xa0>)
        case 2: search_fn   = &sub_isf_search;
 8007452:	4b0a      	ldr	r3, [pc, #40]	; (800747c <vl_new+0xa4>)
                break;
 8007454:	e7de      	b.n	8007414 <vl_new+0x3c>
                new_fn      = &sub_iss_new;
 8007456:	4d0a      	ldr	r5, [pc, #40]	; (8007480 <vl_new+0xa8>)
        case 1: search_fn   = &sub_iss_search;
 8007458:	4b0a      	ldr	r3, [pc, #40]	; (8007484 <vl_new+0xac>)
 800745a:	e7db      	b.n	8007414 <vl_new+0x3c>
            return 0x04;
 800745c:	2004      	movs	r0, #4
 800745e:	e7f5      	b.n	800744c <vl_new+0x74>
        return 0x02;
 8007460:	2002      	movs	r0, #2
 8007462:	e7f3      	b.n	800744c <vl_new+0x74>
        return 0x06;
 8007464:	2006      	movs	r0, #6
 8007466:	e7f1      	b.n	800744c <vl_new+0x74>
 8007468:	08007273 	.word	0x08007273
 800746c:	08007361 	.word	0x08007361
 8007470:	0000ffff 	.word	0x0000ffff
 8007474:	20001170 	.word	0x20001170
 8007478:	0800727b 	.word	0x0800727b
 800747c:	08007325 	.word	0x08007325
 8007480:	08007277 	.word	0x08007277
 8007484:	08007353 	.word	0x08007353

08007488 <vl_delete>:
OT_WEAK ot_u8 vl_delete(vlBLOCK block_id, ot_u8 data_id, const id_tmpl* user_id) {
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	000d      	movs	r5, r1
 800748c:	0016      	movs	r6, r2
    block_id--;
 800748e:	3801      	subs	r0, #1
 8007490:	b2c4      	uxtb	r4, r0
    switch (block_id) {
 8007492:	2c01      	cmp	r4, #1
 8007494:	d036      	beq.n	8007504 <vl_delete+0x7c>
 8007496:	2c00      	cmp	r4, #0
 8007498:	d003      	beq.n	80074a2 <vl_delete+0x1a>
 800749a:	2c02      	cmp	r4, #2
 800749c:	d02f      	beq.n	80074fe <vl_delete+0x76>
       default: return 255;
 800749e:	20ff      	movs	r0, #255	; 0xff
 80074a0:	e02c      	b.n	80074fc <vl_delete+0x74>
        case 0: check_fn    = &sub_gfb_delete_check;
 80074a2:	4b1d      	ldr	r3, [pc, #116]	; (8007518 <vl_delete+0x90>)
                search_fn   = &sub_gfb_search;
 80074a4:	4f1d      	ldr	r7, [pc, #116]	; (800751c <vl_delete+0x94>)
    if (check_fn(data_id) != 0) {
 80074a6:	0028      	movs	r0, r5
 80074a8:	4798      	blx	r3
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d02d      	beq.n	800750a <vl_delete+0x82>
        header = search_fn(data_id);
 80074ae:	0028      	movs	r0, r5
 80074b0:	47b8      	blx	r7
 80074b2:	0005      	movs	r5, r0
    if (header == NULL_vaddr) {
 80074b4:	4b1a      	ldr	r3, [pc, #104]	; (8007520 <vl_delete+0x98>)
 80074b6:	4298      	cmp	r0, r3
 80074b8:	d029      	beq.n	800750e <vl_delete+0x86>
    if (user_id != NULL) {
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	d00b      	beq.n	80074d6 <vl_delete+0x4e>
        filemod.ushort = vworm_read(header + 4);
 80074be:	3004      	adds	r0, #4
 80074c0:	b280      	uxth	r0, r0
 80074c2:	f001 fde1 	bl	8009088 <vworm_read>
        if ( auth_check(filemod.ubyte[1], VL_ACCESS_RW, user_id) == 0 ) {
 80074c6:	0400      	lsls	r0, r0, #16
 80074c8:	0e00      	lsrs	r0, r0, #24
 80074ca:	0032      	movs	r2, r6
 80074cc:	2136      	movs	r1, #54	; 0x36
 80074ce:	f7ff fcd4 	bl	8006e7a <auth_check>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d01d      	beq.n	8007512 <vl_delete+0x8a>
    sub_delete_file(header);
 80074d6:	0028      	movs	r0, r5
 80074d8:	f7ff ff62 	bl	80073a0 <sub_delete_file>
        block[block_id].files  -= 1;
 80074dc:	4a11      	ldr	r2, [pc, #68]	; (8007524 <vl_delete+0x9c>)
 80074de:	3262      	adds	r2, #98	; 0x62
 80074e0:	0060      	lsls	r0, r4, #1
 80074e2:	1904      	adds	r4, r0, r4
 80074e4:	0063      	lsls	r3, r4, #1
 80074e6:	18d2      	adds	r2, r2, r3
 80074e8:	7911      	ldrb	r1, [r2, #4]
 80074ea:	7953      	ldrb	r3, [r2, #5]
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	430b      	orrs	r3, r1
 80074f0:	3b01      	subs	r3, #1
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	7113      	strb	r3, [r2, #4]
 80074f6:	0a1b      	lsrs	r3, r3, #8
 80074f8:	7153      	strb	r3, [r2, #5]
    return 0;
 80074fa:	2000      	movs	r0, #0
}
 80074fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 2: check_fn    = &sub_isf_delete_check;
 80074fe:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <vl_delete+0xa0>)
                search_fn   = &sub_isf_search;
 8007500:	4f0a      	ldr	r7, [pc, #40]	; (800752c <vl_delete+0xa4>)
                break;
 8007502:	e7d0      	b.n	80074a6 <vl_delete+0x1e>
        case 1: check_fn    = &sub_iss_delete_check;
 8007504:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <vl_delete+0xa8>)
                search_fn   = &sub_iss_search;
 8007506:	4f0b      	ldr	r7, [pc, #44]	; (8007534 <vl_delete+0xac>)
 8007508:	e7cd      	b.n	80074a6 <vl_delete+0x1e>
        return 0x01;
 800750a:	2001      	movs	r0, #1
 800750c:	e7f6      	b.n	80074fc <vl_delete+0x74>
 800750e:	2001      	movs	r0, #1
 8007510:	e7f4      	b.n	80074fc <vl_delete+0x74>
            return 0x04;
 8007512:	2004      	movs	r0, #4
 8007514:	e7f2      	b.n	80074fc <vl_delete+0x74>
 8007516:	46c0      	nop			; (mov r8, r8)
 8007518:	0800727f 	.word	0x0800727f
 800751c:	08007361 	.word	0x08007361
 8007520:	0000ffff 	.word	0x0000ffff
 8007524:	20001170 	.word	0x20001170
 8007528:	08007287 	.word	0x08007287
 800752c:	08007325 	.word	0x08007325
 8007530:	08007283 	.word	0x08007283
 8007534:	08007353 	.word	0x08007353

08007538 <vl_getheader_vaddr>:
OT_WEAK ot_u8 vl_getheader_vaddr(vaddr* header, vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 8007538:	b570      	push	{r4, r5, r6, lr}
 800753a:	0005      	movs	r5, r0
 800753c:	001c      	movs	r4, r3
    switch (block_id) {
 800753e:	2902      	cmp	r1, #2
 8007540:	d01e      	beq.n	8007580 <vl_getheader_vaddr+0x48>
 8007542:	2903      	cmp	r1, #3
 8007544:	d021      	beq.n	800758a <vl_getheader_vaddr+0x52>
 8007546:	2901      	cmp	r1, #1
 8007548:	d001      	beq.n	800754e <vl_getheader_vaddr+0x16>
        default:                return 255;
 800754a:	20ff      	movs	r0, #255	; 0xff
}
 800754c:	bd70      	pop	{r4, r5, r6, pc}
        case VL_GFB_BLOCKID:    *header = sub_gfb_search(data_id);      break;
 800754e:	0010      	movs	r0, r2
 8007550:	f7ff ff06 	bl	8007360 <sub_gfb_search>
 8007554:	8028      	strh	r0, [r5, #0]
    if (*header == NULL_vaddr) {
 8007556:	8828      	ldrh	r0, [r5, #0]
 8007558:	4b11      	ldr	r3, [pc, #68]	; (80075a0 <vl_getheader_vaddr+0x68>)
 800755a:	4298      	cmp	r0, r3
 800755c:	d01c      	beq.n	8007598 <vl_getheader_vaddr+0x60>
    if (user_id != NULL) {
 800755e:	9b04      	ldr	r3, [sp, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01b      	beq.n	800759c <vl_getheader_vaddr+0x64>
        filemod.ushort = vworm_read(*header + 4);
 8007564:	3004      	adds	r0, #4
 8007566:	b280      	uxth	r0, r0
 8007568:	f001 fd8e 	bl	8009088 <vworm_read>
        if ( auth_check(filemod.ubyte[1], mod, user_id) == 0 ) {
 800756c:	0400      	lsls	r0, r0, #16
 800756e:	0e00      	lsrs	r0, r0, #24
 8007570:	9a04      	ldr	r2, [sp, #16]
 8007572:	0021      	movs	r1, r4
 8007574:	f7ff fc81 	bl	8006e7a <auth_check>
 8007578:	2800      	cmp	r0, #0
 800757a:	d00b      	beq.n	8007594 <vl_getheader_vaddr+0x5c>
    return 0;
 800757c:	2000      	movs	r0, #0
 800757e:	e7e5      	b.n	800754c <vl_getheader_vaddr+0x14>
        case VL_ISS_BLOCKID:    *header = sub_iss_search(data_id);     break;
 8007580:	0010      	movs	r0, r2
 8007582:	f7ff fee6 	bl	8007352 <sub_iss_search>
 8007586:	8028      	strh	r0, [r5, #0]
 8007588:	e7e5      	b.n	8007556 <vl_getheader_vaddr+0x1e>
        case VL_ISF_BLOCKID:    *header = sub_isf_search(data_id);      break;
 800758a:	0010      	movs	r0, r2
 800758c:	f7ff feca 	bl	8007324 <sub_isf_search>
 8007590:	8028      	strh	r0, [r5, #0]
 8007592:	e7e0      	b.n	8007556 <vl_getheader_vaddr+0x1e>
            return 0x04;
 8007594:	3004      	adds	r0, #4
 8007596:	e7d9      	b.n	800754c <vl_getheader_vaddr+0x14>
        return 0x01;
 8007598:	2001      	movs	r0, #1
 800759a:	e7d7      	b.n	800754c <vl_getheader_vaddr+0x14>
    return 0;
 800759c:	2000      	movs	r0, #0
 800759e:	e7d5      	b.n	800754c <vl_getheader_vaddr+0x14>
 80075a0:	0000ffff 	.word	0x0000ffff

080075a4 <vl_open_file>:
OT_WEAK vlFILE* vl_open_file(vaddr header) {
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	0005      	movs	r5, r0
    fp = sub_new_fp();
 80075a8:	f7ff fe70 	bl	800728c <sub_new_fp>
 80075ac:	1e04      	subs	r4, r0, #0
    if (fp != NULL) {
 80075ae:	d01e      	beq.n	80075ee <vl_open_file+0x4a>
        fp->header  = header;
 80075b0:	8005      	strh	r5, [r0, #0]
        fp->alloc   = vworm_read(header + 2);               //alloc
 80075b2:	1ca8      	adds	r0, r5, #2
 80075b4:	b280      	uxth	r0, r0
 80075b6:	f001 fd67 	bl	8009088 <vworm_read>
 80075ba:	80a0      	strh	r0, [r4, #4]
        fp->idmod   = vworm_read(header + 4);
 80075bc:	1d28      	adds	r0, r5, #4
 80075be:	b280      	uxth	r0, r0
 80075c0:	f001 fd62 	bl	8009088 <vworm_read>
 80075c4:	80e0      	strh	r0, [r4, #6]
        fp->start   = vworm_read(header + 8);               //mirror base addr
 80075c6:	0028      	movs	r0, r5
 80075c8:	3008      	adds	r0, #8
 80075ca:	b280      	uxth	r0, r0
 80075cc:	f001 fd5c 	bl	8009088 <vworm_read>
 80075d0:	8060      	strh	r0, [r4, #2]
        fp->flags   = VL_FLAG_OPENED;
 80075d2:	2301      	movs	r3, #1
 80075d4:	8163      	strh	r3, [r4, #10]
        if (fp->start != NULL_vaddr) {
 80075d6:	4b0e      	ldr	r3, [pc, #56]	; (8007610 <vl_open_file+0x6c>)
 80075d8:	4298      	cmp	r0, r3
 80075da:	d00a      	beq.n	80075f2 <vl_open_file+0x4e>
            fp->start  += 2;
 80075dc:	1c83      	adds	r3, r0, #2
 80075de:	8063      	strh	r3, [r4, #2]
            fp->write   = &vsram_mark;
 80075e0:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <vl_open_file+0x70>)
 80075e2:	6123      	str	r3, [r4, #16]
            fp->read    = &vsram_read;
 80075e4:	4b0c      	ldr	r3, [pc, #48]	; (8007618 <vl_open_file+0x74>)
 80075e6:	60e3      	str	r3, [r4, #12]
            fp->length  = vsram_read(mlen);
 80075e8:	f001 fd64 	bl	80090b4 <vsram_read>
 80075ec:	8120      	strh	r0, [r4, #8]
}
 80075ee:	0020      	movs	r0, r4
 80075f0:	bd70      	pop	{r4, r5, r6, pc}
            fp->write   = &vworm_write;
 80075f2:	4b0a      	ldr	r3, [pc, #40]	; (800761c <vl_open_file+0x78>)
 80075f4:	6123      	str	r3, [r4, #16]
            fp->read    = &vworm_read;
 80075f6:	4b0a      	ldr	r3, [pc, #40]	; (8007620 <vl_open_file+0x7c>)
 80075f8:	60e3      	str	r3, [r4, #12]
            fp->length  = vworm_read(header + 0);           //length
 80075fa:	0028      	movs	r0, r5
 80075fc:	f001 fd44 	bl	8009088 <vworm_read>
 8007600:	8120      	strh	r0, [r4, #8]
            fp->start   = vworm_read(header + 6);           //vworm base addr
 8007602:	3506      	adds	r5, #6
 8007604:	b2a8      	uxth	r0, r5
 8007606:	f001 fd3f 	bl	8009088 <vworm_read>
 800760a:	8060      	strh	r0, [r4, #2]
    return fp;
 800760c:	e7ef      	b.n	80075ee <vl_open_file+0x4a>
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	0000ffff 	.word	0x0000ffff
 8007614:	080090bd 	.word	0x080090bd
 8007618:	080090b5 	.word	0x080090b5
 800761c:	08009099 	.word	0x08009099
 8007620:	08009089 	.word	0x08009089

08007624 <vl_open>:
OT_WEAK vlFILE* vl_open(vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 8007624:	b530      	push	{r4, r5, lr}
 8007626:	b085      	sub	sp, #20
 8007628:	0004      	movs	r4, r0
    vaddr header = NULL_vaddr;
 800762a:	200e      	movs	r0, #14
 800762c:	4468      	add	r0, sp
 800762e:	2501      	movs	r5, #1
 8007630:	426d      	negs	r5, r5
 8007632:	8005      	strh	r5, [r0, #0]
    if (vl_getheader_vaddr(&header, block_id, data_id, mod, user_id) == 0) {
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	0013      	movs	r3, r2
 8007638:	000a      	movs	r2, r1
 800763a:	0021      	movs	r1, r4
 800763c:	f7ff ff7c 	bl	8007538 <vl_getheader_vaddr>
 8007640:	2800      	cmp	r0, #0
 8007642:	d106      	bne.n	8007652 <vl_open+0x2e>
        return vl_open_file(header);
 8007644:	230e      	movs	r3, #14
 8007646:	446b      	add	r3, sp
 8007648:	8818      	ldrh	r0, [r3, #0]
 800764a:	f7ff ffab 	bl	80075a4 <vl_open_file>
}
 800764e:	b005      	add	sp, #20
 8007650:	bd30      	pop	{r4, r5, pc}
    return NULL;
 8007652:	2000      	movs	r0, #0
 8007654:	e7fb      	b.n	800764e <vl_open+0x2a>

08007656 <vl_chmod>:
OT_WEAK ot_u8 vl_chmod(vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 8007656:	b570      	push	{r4, r5, r6, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	0004      	movs	r4, r0
 800765c:	000d      	movs	r5, r1
 800765e:	0016      	movs	r6, r2
    vaddr header = NULL_vaddr;
 8007660:	200e      	movs	r0, #14
 8007662:	4468      	add	r0, sp
 8007664:	2201      	movs	r2, #1
 8007666:	4252      	negs	r2, r2
 8007668:	8002      	strh	r2, [r0, #0]
    output = vl_getheader_vaddr(&header, block_id, data_id, VL_ACCESS_RW, user_id);
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	2336      	movs	r3, #54	; 0x36
 800766e:	000a      	movs	r2, r1
 8007670:	0021      	movs	r1, r4
 8007672:	f7ff ff61 	bl	8007538 <vl_getheader_vaddr>
 8007676:	1e04      	subs	r4, r0, #0
    if (output == 0) {
 8007678:	d002      	beq.n	8007680 <vl_chmod+0x2a>
}
 800767a:	0020      	movs	r0, r4
 800767c:	b004      	add	sp, #16
 800767e:	bd70      	pop	{r4, r5, r6, pc}
        idmod.ubyte[0]  = data_id;
 8007680:	a903      	add	r1, sp, #12
 8007682:	700d      	strb	r5, [r1, #0]
        idmod.ubyte[1]  = mod;
 8007684:	704e      	strb	r6, [r1, #1]
        sub_write_header((header+4), &idmod.ushort, 2);
 8007686:	230e      	movs	r3, #14
 8007688:	446b      	add	r3, sp
 800768a:	8818      	ldrh	r0, [r3, #0]
 800768c:	3004      	adds	r0, #4
 800768e:	b280      	uxth	r0, r0
 8007690:	2202      	movs	r2, #2
 8007692:	f7ff fe11 	bl	80072b8 <sub_write_header>
 8007696:	e7f0      	b.n	800767a <vl_chmod+0x24>

08007698 <vl_read>:
OT_WEAK ot_u16 vl_read( vlFILE* fp, ot_uint offset ) {
 8007698:	b510      	push	{r4, lr}
    return fp->read( (ot_uint)(offset+fp->start) );
 800769a:	68c3      	ldr	r3, [r0, #12]
 800769c:	8840      	ldrh	r0, [r0, #2]
 800769e:	1840      	adds	r0, r0, r1
 80076a0:	b280      	uxth	r0, r0
 80076a2:	4798      	blx	r3
}
 80076a4:	bd10      	pop	{r4, pc}

080076a6 <vl_write>:
OT_WEAK ot_u8 vl_write( vlFILE* fp, ot_uint offset, ot_u16 data ) {
 80076a6:	b510      	push	{r4, lr}
    if (offset >= fp->alloc) {
 80076a8:	8883      	ldrh	r3, [r0, #4]
 80076aa:	428b      	cmp	r3, r1
 80076ac:	d913      	bls.n	80076d6 <vl_write+0x30>
    if (offset >= fp->length) {
 80076ae:	8903      	ldrh	r3, [r0, #8]
 80076b0:	428b      	cmp	r3, r1
 80076b2:	d805      	bhi.n	80076c0 <vl_write+0x1a>
        fp->length  = offset+2;
 80076b4:	1c8b      	adds	r3, r1, #2
 80076b6:	8103      	strh	r3, [r0, #8]
        fp->flags  |= VL_FLAG_RESIZED;
 80076b8:	8943      	ldrh	r3, [r0, #10]
 80076ba:	2404      	movs	r4, #4
 80076bc:	4323      	orrs	r3, r4
 80076be:	8143      	strh	r3, [r0, #10]
    fp->flags |= VL_FLAG_MODDED;
 80076c0:	8943      	ldrh	r3, [r0, #10]
 80076c2:	2402      	movs	r4, #2
 80076c4:	4323      	orrs	r3, r4
 80076c6:	8143      	strh	r3, [r0, #10]
    return fp->write( (offset+fp->start), data);
 80076c8:	6903      	ldr	r3, [r0, #16]
 80076ca:	8840      	ldrh	r0, [r0, #2]
 80076cc:	1840      	adds	r0, r0, r1
 80076ce:	b280      	uxth	r0, r0
 80076d0:	0011      	movs	r1, r2
 80076d2:	4798      	blx	r3
}
 80076d4:	bd10      	pop	{r4, pc}
        return 255;
 80076d6:	20ff      	movs	r0, #255	; 0xff
 80076d8:	e7fc      	b.n	80076d4 <vl_write+0x2e>

080076da <vl_load>:
OT_WEAK ot_uint vl_load( vlFILE* fp, ot_uint length, ot_u8* data ) {
 80076da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076dc:	46c6      	mov	lr, r8
 80076de:	b500      	push	{lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	4680      	mov	r8, r0
 80076e4:	0017      	movs	r7, r2
    if (length > fp->length) {
 80076e6:	8900      	ldrh	r0, [r0, #8]
 80076e8:	4288      	cmp	r0, r1
 80076ea:	d300      	bcc.n	80076ee <vl_load+0x14>
 80076ec:	0008      	movs	r0, r1
    cursor      = fp->start;        // guaranteed to be 16 bit aligned
 80076ee:	4643      	mov	r3, r8
 80076f0:	885c      	ldrh	r4, [r3, #2]
    length      = cursor+length;
 80076f2:	1900      	adds	r0, r0, r4
 80076f4:	b286      	uxth	r6, r0
    for (; cursor<length; cursor++) {
 80076f6:	e005      	b.n	8007704 <vl_load+0x2a>
        *data++ = scratch.ubyte[align];
 80076f8:	ab01      	add	r3, sp, #4
 80076fa:	5d5b      	ldrb	r3, [r3, r5]
 80076fc:	703b      	strb	r3, [r7, #0]
    for (; cursor<length; cursor++) {
 80076fe:	3401      	adds	r4, #1
 8007700:	b2a4      	uxth	r4, r4
        *data++ = scratch.ubyte[align];
 8007702:	3701      	adds	r7, #1
    for (; cursor<length; cursor++) {
 8007704:	42b4      	cmp	r4, r6
 8007706:	d209      	bcs.n	800771c <vl_load+0x42>
        ot_u8 align = (cursor & 1);
 8007708:	2501      	movs	r5, #1
 800770a:	4025      	ands	r5, r4
        if (align == 0) {
 800770c:	d1f4      	bne.n	80076f8 <vl_load+0x1e>
            scratch.ushort = fp->read(cursor);
 800770e:	0020      	movs	r0, r4
 8007710:	4643      	mov	r3, r8
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	4798      	blx	r3
 8007716:	ab01      	add	r3, sp, #4
 8007718:	8018      	strh	r0, [r3, #0]
 800771a:	e7ed      	b.n	80076f8 <vl_load+0x1e>
    return (length - fp->start);
 800771c:	4643      	mov	r3, r8
 800771e:	8858      	ldrh	r0, [r3, #2]
 8007720:	1a30      	subs	r0, r6, r0
 8007722:	b280      	uxth	r0, r0
}
 8007724:	b002      	add	sp, #8
 8007726:	bc04      	pop	{r2}
 8007728:	4690      	mov	r8, r2
 800772a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800772c <vl_store>:
OT_WEAK ot_u8 vl_store( vlFILE* fp, ot_uint length, const ot_u8* data ) {
 800772c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800772e:	46ce      	mov	lr, r9
 8007730:	b500      	push	{lr}
 8007732:	b082      	sub	sp, #8
 8007734:	0005      	movs	r5, r0
    if (length > fp->alloc) {
 8007736:	8886      	ldrh	r6, [r0, #4]
 8007738:	428e      	cmp	r6, r1
 800773a:	d300      	bcc.n	800773e <vl_store+0x12>
 800773c:	000e      	movs	r6, r1
    fp->flags  |= (length != fp->length) ? (VL_FLAG_RESIZED|VL_FLAG_MODDED) : VL_FLAG_MODDED;
 800773e:	210a      	movs	r1, #10
 8007740:	5e6b      	ldrsh	r3, [r5, r1]
 8007742:	8929      	ldrh	r1, [r5, #8]
 8007744:	42b1      	cmp	r1, r6
 8007746:	d008      	beq.n	800775a <vl_store+0x2e>
 8007748:	2106      	movs	r1, #6
 800774a:	430b      	orrs	r3, r1
 800774c:	816b      	strh	r3, [r5, #10]
    fp->length  = length;
 800774e:	812e      	strh	r6, [r5, #8]
    cursor      = fp->start;
 8007750:	886c      	ldrh	r4, [r5, #2]
    length      = cursor+length;
 8007752:	1936      	adds	r6, r6, r4
 8007754:	b2b6      	uxth	r6, r6
    for (test=0; cursor<length; cursor+=2) {
 8007756:	2700      	movs	r7, #0
 8007758:	e019      	b.n	800778e <vl_store+0x62>
    fp->flags  |= (length != fp->length) ? (VL_FLAG_RESIZED|VL_FLAG_MODDED) : VL_FLAG_MODDED;
 800775a:	2102      	movs	r1, #2
 800775c:	e7f5      	b.n	800774a <vl_store+0x1e>
        scratch.ubyte[0]    = *data++;
 800775e:	7813      	ldrb	r3, [r2, #0]
 8007760:	21ff      	movs	r1, #255	; 0xff
 8007762:	4668      	mov	r0, sp
 8007764:	8880      	ldrh	r0, [r0, #4]
 8007766:	4388      	bics	r0, r1
 8007768:	4303      	orrs	r3, r0
        scratch.ubyte[1]    = *data++;
 800776a:	1c91      	adds	r1, r2, #2
 800776c:	4689      	mov	r9, r1
 800776e:	7852      	ldrb	r2, [r2, #1]
 8007770:	0212      	lsls	r2, r2, #8
 8007772:	21ff      	movs	r1, #255	; 0xff
 8007774:	4019      	ands	r1, r3
 8007776:	4311      	orrs	r1, r2
 8007778:	466b      	mov	r3, sp
 800777a:	8099      	strh	r1, [r3, #4]
        test               |= fp->write(cursor, scratch.ushort);
 800777c:	b289      	uxth	r1, r1
 800777e:	0020      	movs	r0, r4
 8007780:	692b      	ldr	r3, [r5, #16]
 8007782:	4798      	blx	r3
 8007784:	4307      	orrs	r7, r0
 8007786:	b2ff      	uxtb	r7, r7
    for (test=0; cursor<length; cursor+=2) {
 8007788:	3402      	adds	r4, #2
 800778a:	b2a4      	uxth	r4, r4
        scratch.ubyte[1]    = *data++;
 800778c:	464a      	mov	r2, r9
    for (test=0; cursor<length; cursor+=2) {
 800778e:	42b4      	cmp	r4, r6
 8007790:	d3e5      	bcc.n	800775e <vl_store+0x32>
}
 8007792:	0038      	movs	r0, r7
 8007794:	b002      	add	sp, #8
 8007796:	bc04      	pop	{r2}
 8007798:	4691      	mov	r9, r2
 800779a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800779c <vl_close>:
OT_WEAK ot_u8 vl_close( vlFILE* fp ) {
 800779c:	b510      	push	{r4, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	1e04      	subs	r4, r0, #0
    if (FP_ISVALID(fp)) {
 80077a2:	d02e      	beq.n	8007802 <vl_close+0x66>
        if (vworm_read(fp->header+0) != fp->length) {
 80077a4:	8800      	ldrh	r0, [r0, #0]
 80077a6:	f001 fc6f 	bl	8009088 <vworm_read>
 80077aa:	8923      	ldrh	r3, [r4, #8]
 80077ac:	4298      	cmp	r0, r3
 80077ae:	d115      	bne.n	80077dc <vl_close+0x40>
        epoch_s = time_get_utc();
 80077b0:	f000 fa61 	bl	8007c76 <time_get_utc>
 80077b4:	9001      	str	r0, [sp, #4]
        if (fp->flags & VL_FLAG_MODDED) {
 80077b6:	8963      	ldrh	r3, [r4, #10]
 80077b8:	079b      	lsls	r3, r3, #30
 80077ba:	d416      	bmi.n	80077ea <vl_close+0x4e>
            action.ushort       = vworm_read(fp->header+10);    ///@todo make offset constant instead of 10
 80077bc:	8820      	ldrh	r0, [r4, #0]
 80077be:	300a      	adds	r0, #10
 80077c0:	b280      	uxth	r0, r0
 80077c2:	f001 fc61 	bl	8009088 <vworm_read>
            action.ubyte[0]    &= (ot_u8)fp->flags;
 80077c6:	7aa3      	ldrb	r3, [r4, #10]
 80077c8:	4018      	ands	r0, r3
            if (action.ubyte[0] != 0) {
 80077ca:	d116      	bne.n	80077fa <vl_close+0x5e>
        fp->start   = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	8063      	strh	r3, [r4, #2]
        fp->length  = 0;
 80077d0:	8123      	strh	r3, [r4, #8]
        fp->flags   = 0;
 80077d2:	8163      	strh	r3, [r4, #10]
        fp->read    = NULL;
 80077d4:	60e3      	str	r3, [r4, #12]
        fp->write   = NULL;
 80077d6:	6123      	str	r3, [r4, #16]
}
 80077d8:	b002      	add	sp, #8
 80077da:	bd10      	pop	{r4, pc}
            sub_write_header( (fp->header+0), &(fp->length), 2);
 80077dc:	0021      	movs	r1, r4
 80077de:	3108      	adds	r1, #8
 80077e0:	8820      	ldrh	r0, [r4, #0]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f7ff fd68 	bl	80072b8 <sub_write_header>
 80077e8:	e7e2      	b.n	80077b0 <vl_close+0x14>
            sub_write_header( (fp->header+12), (ot_u16*)&epoch_s, 4);    ///@todo make offset constant instead of 12
 80077ea:	8820      	ldrh	r0, [r4, #0]
 80077ec:	300c      	adds	r0, #12
 80077ee:	b280      	uxth	r0, r0
 80077f0:	2204      	movs	r2, #4
 80077f2:	a901      	add	r1, sp, #4
 80077f4:	f7ff fd60 	bl	80072b8 <sub_write_header>
 80077f8:	e7e0      	b.n	80077bc <vl_close+0x20>
                retval = sub_action(fp);
 80077fa:	0020      	movs	r0, r4
 80077fc:	f7ff fdb8 	bl	8007370 <sub_action>
 8007800:	e7e4      	b.n	80077cc <vl_close+0x30>
        retval = 255;
 8007802:	20ff      	movs	r0, #255	; 0xff
 8007804:	e7e8      	b.n	80077d8 <vl_close+0x3c>

08007806 <ISF_open_su>:
OT_WEAK vlFILE* ISF_open_su( ot_u8 id ) {
 8007806:	b510      	push	{r4, lr}
 8007808:	0001      	movs	r1, r0
    return vl_open(VL_ISF_BLOCKID, id, VL_ACCESS_SU, NULL);
 800780a:	2300      	movs	r3, #0
 800780c:	223f      	movs	r2, #63	; 0x3f
 800780e:	2003      	movs	r0, #3
 8007810:	f7ff ff08 	bl	8007624 <vl_open>
}
 8007814:	bd10      	pop	{r4, pc}

08007816 <ISS_open>:
OT_WEAK vlFILE* ISS_open( ot_u8 id, ot_u8 mod, const id_tmpl* user_id ) {
 8007816:	b510      	push	{r4, lr}
 8007818:	0013      	movs	r3, r2
    return vl_open(VL_ISS_BLOCKID, id, mod, user_id);
 800781a:	000a      	movs	r2, r1
 800781c:	0001      	movs	r1, r0
 800781e:	2002      	movs	r0, #2
 8007820:	f7ff ff00 	bl	8007624 <vl_open>
}
 8007824:	bd10      	pop	{r4, pc}

08007826 <ISF_open>:
OT_WEAK vlFILE* ISF_open( ot_u8 id, ot_u8 mod, const id_tmpl* user_id ) {
 8007826:	b510      	push	{r4, lr}
 8007828:	0013      	movs	r3, r2
    return vl_open(VL_ISF_BLOCKID, id, mod, user_id);
 800782a:	000a      	movs	r2, r1
 800782c:	0001      	movs	r1, r0
 800782e:	2003      	movs	r0, #3
 8007830:	f7ff fef8 	bl	8007624 <vl_open>
}
 8007834:	bd10      	pop	{r4, pc}

08007836 <ISF_loadmirror>:
}
 8007836:	2000      	movs	r0, #0
 8007838:	4770      	bx	lr
	...

0800783c <vl_init>:
OT_WEAK ot_u8 vl_init(void) {
 800783c:	b510      	push	{r4, lr}
    memset(vlaction, 0, sizeof(vlaction));
 800783e:	4c11      	ldr	r4, [pc, #68]	; (8007884 <vl_init+0x48>)
 8007840:	0020      	movs	r0, r4
 8007842:	303c      	adds	r0, #60	; 0x3c
 8007844:	2220      	movs	r2, #32
 8007846:	2100      	movs	r1, #0
 8007848:	f001 f888 	bl	800895c <ot_memset>
    memset(vlaction_users, 0, sizeof(vlaction_users));
 800784c:	0020      	movs	r0, r4
 800784e:	307c      	adds	r0, #124	; 0x7c
 8007850:	2208      	movs	r2, #8
 8007852:	2100      	movs	r1, #0
 8007854:	f001 f882 	bl	800895c <ot_memset>
    memset(vlfile, 0, sizeof(vlfile));
 8007858:	223c      	movs	r2, #60	; 0x3c
 800785a:	2100      	movs	r1, #0
 800785c:	0020      	movs	r0, r4
 800785e:	f001 f87d 	bl	800895c <ot_memset>
    for (i=0; i<OT_PARAM(VLFPS); i++) {
 8007862:	2300      	movs	r3, #0
 8007864:	e008      	b.n	8007878 <vl_init+0x3c>
        vlfile[i].header   = NULL_vaddr;
 8007866:	009a      	lsls	r2, r3, #2
 8007868:	18d2      	adds	r2, r2, r3
 800786a:	0091      	lsls	r1, r2, #2
 800786c:	4a05      	ldr	r2, [pc, #20]	; (8007884 <vl_init+0x48>)
 800786e:	2001      	movs	r0, #1
 8007870:	4240      	negs	r0, r0
 8007872:	5288      	strh	r0, [r1, r2]
    for (i=0; i<OT_PARAM(VLFPS); i++) {
 8007874:	3301      	adds	r3, #1
 8007876:	b21b      	sxth	r3, r3
 8007878:	2b02      	cmp	r3, #2
 800787a:	ddf4      	ble.n	8007866 <vl_init+0x2a>
    ISF_loadmirror();
 800787c:	f7ff ffdb 	bl	8007836 <ISF_loadmirror>
}
 8007880:	2000      	movs	r0, #0
 8007882:	bd10      	pop	{r4, pc}
 8007884:	20001170 	.word	0x20001170

08007888 <mpipe_open>:
    return mpipe.state;
}
#endif


void mpipe_open() {
 8007888:	b510      	push	{r4, lr}
	sys.task_MPA.event = 0;
 800788a:	4b04      	ldr	r3, [pc, #16]	; (800789c <mpipe_open+0x14>)
 800788c:	2200      	movs	r2, #0
 800788e:	731a      	strb	r2, [r3, #12]
	mpipedrv_rx(False, MPIPE_High );
 8007890:	2101      	movs	r1, #1
 8007892:	2000      	movs	r0, #0
 8007894:	f001 fa66 	bl	8008d64 <mpipedrv_rx>
}
 8007898:	bd10      	pop	{r4, pc}
 800789a:	46c0      	nop			; (mov r8, r8)
 800789c:	20002da8 	.word	0x20002da8

080078a0 <mpipe_connect>:
void mpipe_connect(void* port_id) {
 80078a0:	b510      	push	{r4, lr}
    sys.task_MPA.latency    = mpipedrv_init(port_id, MPIPE_default);
 80078a2:	2101      	movs	r1, #1
 80078a4:	4249      	negs	r1, r1
 80078a6:	f001 f8ff 	bl	8008aa8 <mpipedrv_init>
 80078aa:	4b02      	ldr	r3, [pc, #8]	; (80078b4 <mpipe_connect+0x14>)
 80078ac:	73d8      	strb	r0, [r3, #15]
    mpipe_open();
 80078ae:	f7ff ffeb 	bl	8007888 <mpipe_open>
}
 80078b2:	bd10      	pop	{r4, pc}
 80078b4:	20002da8 	.word	0x20002da8

080078b8 <sub_mpipe_setidle>:
    //mpipedrv_kill();
}


void sub_mpipe_setidle(ot_task task) {
    task->event     = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	7003      	strb	r3, [r0, #0]
    task->reserve   = 1;
 80078bc:	3301      	adds	r3, #1
 80078be:	7083      	strb	r3, [r0, #2]
}
 80078c0:	4770      	bx	lr
	...

080078c4 <sub_mpipe_actuate>:

void sub_mpipe_actuate(ot_u8 new_event, ot_u8 new_reserve, ot_uint new_nextevent) {
 80078c4:	b510      	push	{r4, lr}
/// Kernel should be pre-empted in order to cancel the currently scheduled
/// task for MPipe and replace it with this one (if any task is scheduled).
    sys.task_MPA.event      = new_event;
 80078c6:	4b04      	ldr	r3, [pc, #16]	; (80078d8 <sub_mpipe_actuate+0x14>)
 80078c8:	7318      	strb	r0, [r3, #12]
    sys.task_MPA.reserve    = new_reserve;
 80078ca:	7399      	strb	r1, [r3, #14]
    sys_preempt(&sys.task_MPA, new_nextevent);
 80078cc:	330c      	adds	r3, #12
 80078ce:	0018      	movs	r0, r3
 80078d0:	0011      	movs	r1, r2
 80078d2:	f000 f97b 	bl	8007bcc <sys_preempt>
}
 80078d6:	bd10      	pop	{r4, pc}
 80078d8:	20002da8 	.word	0x20002da8

080078dc <mpipe_txschedule>:


void mpipe_txschedule(ot_int wait) {
 80078dc:	b510      	push	{r4, lr}
    if (sys.task_MPA.event == 0) {
 80078de:	4b05      	ldr	r3, [pc, #20]	; (80078f4 <mpipe_txschedule+0x18>)
 80078e0:	7b1b      	ldrb	r3, [r3, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d000      	beq.n	80078e8 <mpipe_txschedule+0xc>
        sub_mpipe_actuate(2, 1, wait);
    }
}
 80078e6:	bd10      	pop	{r4, pc}
        sub_mpipe_actuate(2, 1, wait);
 80078e8:	b282      	uxth	r2, r0
 80078ea:	2101      	movs	r1, #1
 80078ec:	2002      	movs	r0, #2
 80078ee:	f7ff ffe9 	bl	80078c4 <sub_mpipe_actuate>
}
 80078f2:	e7f8      	b.n	80078e6 <mpipe_txschedule+0xa>
 80078f4:	20002da8 	.word	0x20002da8

080078f8 <mpipe_send>:
        sub_mpipe_actuate(5, 1, wait);
    }
}


void mpipe_send() {
 80078f8:	b510      	push	{r4, lr}
///@note A session stack could be implemented for MPipe Task.  For now, Sending (TX)
/// will just fall-through if mpipe is occupied
    mpipe_txschedule(0);
 80078fa:	2000      	movs	r0, #0
 80078fc:	f7ff ffee 	bl	80078dc <mpipe_txschedule>
}
 8007900:	bd10      	pop	{r4, pc}

08007902 <mpipeevt_txdone>:


void mpipeevt_txdone(ot_int code) {
 8007902:	b510      	push	{r4, lr}
/// It will only call it after it is done will all queued TX jobs, not after
/// each packet.
/// If code == 0, everything went well in the driver.  If code != 0, TX went
/// wrong, and must be killed.
///
    sub_mpipe_actuate(3+(code==0), 1, 0);
 8007904:	2800      	cmp	r0, #0
 8007906:	d005      	beq.n	8007914 <mpipeevt_txdone+0x12>
 8007908:	2003      	movs	r0, #3
 800790a:	2200      	movs	r2, #0
 800790c:	2101      	movs	r1, #1
 800790e:	f7ff ffd9 	bl	80078c4 <sub_mpipe_actuate>
}
 8007912:	bd10      	pop	{r4, pc}
    sub_mpipe_actuate(3+(code==0), 1, 0);
 8007914:	3004      	adds	r0, #4
 8007916:	e7f8      	b.n	800790a <mpipeevt_txdone+0x8>

08007918 <mpipeevt_rxdetect>:
void mpipeevt_rxinit(ot_int code) {
    sub_mpipe_actuate(5, 1, code);
}


void mpipeevt_rxdetect(ot_int code) {
 8007918:	b510      	push	{r4, lr}
    sub_mpipe_actuate(3, 1, (ot_uint)code); ///@note come back to this
 800791a:	b282      	uxth	r2, r0
 800791c:	2101      	movs	r1, #1
 800791e:	2003      	movs	r0, #3
 8007920:	f7ff ffd0 	bl	80078c4 <sub_mpipe_actuate>
}
 8007924:	bd10      	pop	{r4, pc}

08007926 <mpipeevt_rxdone>:


void mpipeevt_rxdone(ot_int code) {
 8007926:	b510      	push	{r4, lr}
/// @note "32" in the array is given as the maximum time for protocol parsing.  
/// It might need to be more dynamic, depending on protocol and length of packet.
/// In the future, there might be a "guess runtime" function in ALP that 
/// inspects these things.
    if (code == 0) {
 8007928:	2800      	cmp	r0, #0
 800792a:	d000      	beq.n	800792e <mpipeevt_rxdone+0x8>
        sub_mpipe_actuate(1, 32, 0);
    }
}
 800792c:	bd10      	pop	{r4, pc}
        sub_mpipe_actuate(1, 32, 0);
 800792e:	2200      	movs	r2, #0
 8007930:	2120      	movs	r1, #32
 8007932:	3001      	adds	r0, #1
 8007934:	f7ff ffc6 	bl	80078c4 <sub_mpipe_actuate>
}
 8007938:	e7f8      	b.n	800792c <mpipeevt_rxdone+0x6>
	...

0800793c <mpipe_systask>:



void mpipe_systask(ot_task task) {
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	0004      	movs	r4, r0
    switch (sys.task_MPA.event) {
 8007940:	4b24      	ldr	r3, [pc, #144]	; (80079d4 <mpipe_systask+0x98>)
 8007942:	7b1b      	ldrb	r3, [r3, #12]
 8007944:	2b05      	cmp	r3, #5
 8007946:	d841      	bhi.n	80079cc <mpipe_systask+0x90>
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4a23      	ldr	r2, [pc, #140]	; (80079d8 <mpipe_systask+0x9c>)
 800794c:	58d3      	ldr	r3, [r2, r3]
 800794e:	469f      	mov	pc, r3
        //Task destructor & initializer: close mpipe
        ///@todo fix mpipe_connect(NULL), it needs to have dynamic input from config
        case 0: sys_taskinit_macro(task, mpipedrv_kill(), mpipe_connect(NULL)); 
 8007950:	f001 f934 	bl	8008bbc <mpipedrv_kill>
 8007954:	7863      	ldrb	r3, [r4, #1]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01f      	beq.n	800799a <mpipe_systask+0x5e>
 800795a:	2000      	movs	r0, #0
 800795c:	f7ff ffa0 	bl	80078a0 <mpipe_connect>
 8007960:	2300      	movs	r3, #0
 8007962:	7063      	strb	r3, [r4, #1]
 8007964:	e019      	b.n	800799a <mpipe_systask+0x5e>
                break;

        /// RX packet successful
        /// ALP must manage the protocol/packet data and call TX when/if it has
        /// a response ready.  Driver is always in passive-RX if not TX'ing.
        case 1: alp_parse_message(&mpipe.alp, NULL);
 8007966:	4d1d      	ldr	r5, [pc, #116]	; (80079dc <mpipe_systask+0xa0>)
 8007968:	2100      	movs	r1, #0
 800796a:	0028      	movs	r0, r5
 800796c:	f7ff f9b9 	bl	8006ce2 <alp_parse_message>
        
                ///@todo this is a hack.  ALP must be migrated to app queues, 
                ///      it's too much of a headache the old way.
                q_empty(mpipe.alp.inq);
 8007970:	68a8      	ldr	r0, [r5, #8]
 8007972:	f7ff fb94 	bl	800709e <q_empty>
                
                /// If there's data to send, we need to send it.
                /// Do that by falling through if output queue has greater than zero span.
                if (q_span(mpipe.alp.outq) <= 0) {
 8007976:	68e8      	ldr	r0, [r5, #12]
 8007978:	f7ff fb70 	bl	800705c <q_span>
 800797c:	2800      	cmp	r0, #0
 800797e:	dd0d      	ble.n	800799c <mpipe_systask+0x60>
                    sub_mpipe_setidle(task);
                    break;
                }
                mpipe_send();
 8007980:	f7ff ffba 	bl	80078f8 <mpipe_send>
                
        // Initialize TX: mpipe_send is used.
        case 2: //mpipe_send();
                mpipedrv_unblock();
 8007984:	f001 f90e 	bl	8008ba4 <mpipedrv_unblock>
                sub_mpipe_actuate(3, 1, (ot_uint)mpipedrv_tx(False, MPIPE_High));
 8007988:	2101      	movs	r1, #1
 800798a:	2000      	movs	r0, #0
 800798c:	f001 f9a2 	bl	8008cd4 <mpipedrv_tx>
 8007990:	b282      	uxth	r2, r0
 8007992:	2101      	movs	r1, #1
 8007994:	2003      	movs	r0, #3
 8007996:	f7ff ff95 	bl	80078c4 <sub_mpipe_actuate>
        				
        // Return the power-code state of the driver, 0-3
        default: task->cursor = mpipedrv_getpwrcode();
                break;
    }
}
 800799a:	bd70      	pop	{r4, r5, r6, pc}
                    sub_mpipe_setidle(task);
 800799c:	0020      	movs	r0, r4
 800799e:	f7ff ff8b 	bl	80078b8 <sub_mpipe_setidle>
                    break;
 80079a2:	e7fa      	b.n	800799a <mpipe_systask+0x5e>
        case 3: mpipedrv_kill();
 80079a4:	f001 f90a 	bl	8008bbc <mpipedrv_kill>
                q_rewind(mpipe.alp.outq);
 80079a8:	4b0d      	ldr	r3, [pc, #52]	; (80079e0 <mpipe_systask+0xa4>)
 80079aa:	6918      	ldr	r0, [r3, #16]
 80079ac:	f7ff fb88 	bl	80070c0 <q_rewind>
                mpipe_open();
 80079b0:	f7ff ff6a 	bl	8007888 <mpipe_open>
                break;
 80079b4:	e7f1      	b.n	800799a <mpipe_systask+0x5e>
        case 4: q_rewind(mpipe.alp.outq);
 80079b6:	4b0a      	ldr	r3, [pc, #40]	; (80079e0 <mpipe_systask+0xa4>)
 80079b8:	6918      	ldr	r0, [r3, #16]
 80079ba:	f7ff fb81 	bl	80070c0 <q_rewind>
                sub_mpipe_setidle(task);
 80079be:	0020      	movs	r0, r4
 80079c0:	f7ff ff7a 	bl	80078b8 <sub_mpipe_setidle>
                break;    
 80079c4:	e7e9      	b.n	800799a <mpipe_systask+0x5e>
        case 5: mpipe_open();
 80079c6:	f7ff ff5f 	bl	8007888 <mpipe_open>
        		break;
 80079ca:	e7e6      	b.n	800799a <mpipe_systask+0x5e>
        default: task->cursor = mpipedrv_getpwrcode();
 80079cc:	f001 f8dc 	bl	8008b88 <mpipedrv_getpwrcode>
 80079d0:	7060      	strb	r0, [r4, #1]
}
 80079d2:	e7e2      	b.n	800799a <mpipe_systask+0x5e>
 80079d4:	20002da8 	.word	0x20002da8
 80079d8:	0800b420 	.word	0x0800b420
 80079dc:	20002d94 	.word	0x20002d94
 80079e0:	20002d90 	.word	0x20002d90

080079e4 <sub_init_task>:
#endif
};



ot_u8 sub_init_task(Task_Index i, ot_u8 is_restart) {
 80079e4:	b570      	push	{r4, r5, r6, lr}
    ot_u8 task_event;
    task_event          = sys.task[i].event;
 80079e6:	00c3      	lsls	r3, r0, #3
 80079e8:	4c07      	ldr	r4, [pc, #28]	; (8007a08 <sub_init_task+0x24>)
 80079ea:	18e4      	adds	r4, r4, r3
 80079ec:	1d22      	adds	r2, r4, #4
 80079ee:	7926      	ldrb	r6, [r4, #4]
    sys.task[i].event   = 0;
 80079f0:	2500      	movs	r5, #0
 80079f2:	7125      	strb	r5, [r4, #4]
    sys.task[i].cursor  = is_restart;
 80079f4:	7161      	strb	r1, [r4, #5]
    TASK_INDEXED_CALL(i);
 80079f6:	0080      	lsls	r0, r0, #2
 80079f8:	4904      	ldr	r1, [pc, #16]	; (8007a0c <sub_init_task+0x28>)
 80079fa:	5843      	ldr	r3, [r0, r1]
 80079fc:	0010      	movs	r0, r2
 80079fe:	4798      	blx	r3
    sys.task[i].cursor  = 0;
 8007a00:	7165      	strb	r5, [r4, #5]
    return task_event;
}
 8007a02:	0030      	movs	r0, r6
 8007a04:	bd70      	pop	{r4, r5, r6, pc}
 8007a06:	46c0      	nop			; (mov r8, r8)
 8007a08:	20002da8 	.word	0x20002da8
 8007a0c:	0800b438 	.word	0x0800b438

08007a10 <sys_init>:
/** System Core Functions
  * ============================================================================
  */

#ifndef EXTF_sys_init
OT_WEAK void sys_init() {
 8007a10:	b510      	push	{r4, lr}
#   endif

    /// Set default values in system tasks.  At a minimum, this is doing a
    /// memset on the task struct to 0.  If dynamic task callbacks are enabled,
    /// also set theses callbacks to the default values.
    memset((ot_u8*)sys.task, 0, sizeof(task_marker)*SYS_TASKS);
 8007a12:	4c0b      	ldr	r4, [pc, #44]	; (8007a40 <sys_init+0x30>)
 8007a14:	2230      	movs	r2, #48	; 0x30
 8007a16:	2100      	movs	r1, #0
 8007a18:	0020      	movs	r0, r4
 8007a1a:	f000 ff9f 	bl	800895c <ot_memset>
            sys_task->call  = default_call;
        }
    }
#   endif

    sys.active = TASK_MAX;
 8007a1e:	3c04      	subs	r4, #4
 8007a20:	2300      	movs	r3, #0
 8007a22:	7023      	strb	r3, [r4, #0]
//#   endif

    /// Initialize DLL, which also initializes the rest of the protocol stack.
    /// In some HW, the radio must be initialized before MPipe.
#   if (OT_FEATURE(M2))
        dll_init();
 8007a24:	f7fd fca8 	bl	8005378 <dll_init>
//        mpipe_connect(NULL);
//#   endif
        
    ///@todo change these manual calls into normal task calls using event=0,
    ///      which is the initialization/kill state.
    i = TASK_terminus;
 8007a28:	2406      	movs	r4, #6
    while (i > 1) {
 8007a2a:	e006      	b.n	8007a3a <sys_init+0x2a>
        sub_init_task(--i, 1);
 8007a2c:	3c01      	subs	r4, #1
 8007a2e:	b2a0      	uxth	r0, r4
 8007a30:	b204      	sxth	r4, r0
 8007a32:	b240      	sxtb	r0, r0
 8007a34:	2101      	movs	r1, #1
 8007a36:	f7ff ffd5 	bl	80079e4 <sub_init_task>
    while (i > 1) {
 8007a3a:	2c01      	cmp	r4, #1
 8007a3c:	dcf6      	bgt.n	8007a2c <sys_init+0x1c>
    }
}
 8007a3e:	bd10      	pop	{r4, pc}
 8007a40:	20002dac 	.word	0x20002dac

08007a44 <sys_panic>:
#endif



#ifndef EXTF_sys_panic
OT_WEAK void sys_panic(ot_u8 err_code) {
 8007a44:	b510      	push	{r4, lr}
 8007a46:	0004      	movs	r4, r0
/// Go to OFF state
#   if (OT_FEATURE(M2))
        dll.idle_state = 0;
 8007a48:	4b06      	ldr	r3, [pc, #24]	; (8007a64 <sys_panic+0x20>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	701a      	strb	r2, [r3, #0]
        session_flush();
 8007a4e:	f7fe f9bf 	bl	8005dd0 <session_flush>
        dll_idle();
 8007a52:	f7fc ffeb 	bl	8004a2c <dll_idle>
#   endif

    systim_disable();
 8007a56:	f000 f9fb 	bl	8007e50 <systim_disable>

#   if defined(EXTF_sys_sig_panic)
        sys_sig_panic(err_code);
 8007a5a:	b220      	sxth	r0, r4
 8007a5c:	f7f8 fef2 	bl	8000844 <sys_sig_panic>
#   elif (OT_FEATURE(SYSKERN_CALLBACKS) == ENABLED)
        sys.panic(err_code);
#   endif
}
 8007a60:	bd10      	pop	{r4, pc}
 8007a62:	46c0      	nop			; (mov r8, r8)
 8007a64:	20002648 	.word	0x20002648

08007a68 <sys_powerdown>:
#endif



#ifndef EXTF_sys_powerdown
OT_WEAK void sys_powerdown() {
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	46ce      	mov	lr, r9
 8007a6c:	4647      	mov	r7, r8
 8007a6e:	b580      	push	{r7, lr}
    ot_uint code = 3;
    ot_int i;

    ///@todo This call-model is kludgey, but for now it is OK in practice.
    ///      Better to have a second status call for exotasks.
    for (i=0; i<_NUM_EXOTASKS; i++) {
 8007a70:	2400      	movs	r4, #0
    ot_uint code = 3;
 8007a72:	2703      	movs	r7, #3
    for (i=0; i<_NUM_EXOTASKS; i++) {
 8007a74:	e008      	b.n	8007a88 <sys_powerdown+0x20>
        if (sys.task[i].cursor < code) {
            code = sys.task[i].cursor;
        }
        
        // Reset event and cursor to previous values
        sys.task[i].event   = task_event;
 8007a76:	00f6      	lsls	r6, r6, #3
 8007a78:	4b13      	ldr	r3, [pc, #76]	; (8007ac8 <sys_powerdown+0x60>)
 8007a7a:	199b      	adds	r3, r3, r6
 8007a7c:	464a      	mov	r2, r9
 8007a7e:	711a      	strb	r2, [r3, #4]
        sys.task[i].cursor  = task_cursor;
 8007a80:	4642      	mov	r2, r8
 8007a82:	715a      	strb	r2, [r3, #5]
    for (i=0; i<_NUM_EXOTASKS; i++) {
 8007a84:	3401      	adds	r4, #1
 8007a86:	b224      	sxth	r4, r4
 8007a88:	2c01      	cmp	r4, #1
 8007a8a:	dc13      	bgt.n	8007ab4 <sys_powerdown+0x4c>
        ot_u8 task_event    = sys.task[i].event;
 8007a8c:	0026      	movs	r6, r4
 8007a8e:	00e3      	lsls	r3, r4, #3
 8007a90:	4d0d      	ldr	r5, [pc, #52]	; (8007ac8 <sys_powerdown+0x60>)
 8007a92:	18ed      	adds	r5, r5, r3
 8007a94:	1d28      	adds	r0, r5, #4
 8007a96:	792b      	ldrb	r3, [r5, #4]
 8007a98:	4699      	mov	r9, r3
        ot_u8 task_cursor   = sys.task[i].cursor;
 8007a9a:	796b      	ldrb	r3, [r5, #5]
 8007a9c:	4698      	mov	r8, r3
        sys.task[i].event   = 255;
 8007a9e:	23ff      	movs	r3, #255	; 0xff
 8007aa0:	712b      	strb	r3, [r5, #4]
        TASK_INDEXED_CALL(i);
 8007aa2:	00a3      	lsls	r3, r4, #2
 8007aa4:	4a09      	ldr	r2, [pc, #36]	; (8007acc <sys_powerdown+0x64>)
 8007aa6:	589b      	ldr	r3, [r3, r2]
 8007aa8:	4798      	blx	r3
        if (sys.task[i].cursor < code) {
 8007aaa:	796b      	ldrb	r3, [r5, #5]
 8007aac:	42bb      	cmp	r3, r7
 8007aae:	d2e2      	bcs.n	8007a76 <sys_powerdown+0xe>
            code = sys.task[i].cursor;
 8007ab0:	001f      	movs	r7, r3
 8007ab2:	e7e0      	b.n	8007a76 <sys_powerdown+0xe>
    }

    // Shut down the clocker: a task isn't running during powerdown
    systim_stop_clocker();
 8007ab4:	f000 fa50 	bl	8007f58 <systim_stop_clocker>

#   if defined(EXTF_sys_sig_powerdown)
        sys_sig_powerdown(code);
 8007ab8:	b238      	sxth	r0, r7
 8007aba:	f7f8 fecd 	bl	8000858 <sys_sig_powerdown>
#   elif (OT_FEATURE(SYSKERN_CALLBACKS))
        sys.powerdown(code);
#   else
#       error "powerdown applet (sys_sig_powerdown) is not available."
#   endif
}
 8007abe:	bc0c      	pop	{r2, r3}
 8007ac0:	4690      	mov	r8, r2
 8007ac2:	4699      	mov	r9, r3
 8007ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac6:	46c0      	nop			; (mov r8, r8)
 8007ac8:	20002da8 	.word	0x20002da8
 8007acc:	0800b438 	.word	0x0800b438

08007ad0 <sys_task_setevent>:




void sys_task_setevent(ot_task task, ot_u8 event) {
    task->event = event;
 8007ad0:	7001      	strb	r1, [r0, #0]
}
 8007ad2:	4770      	bx	lr

08007ad4 <sys_task_setreserve>:
void sys_task_setcursor(ot_task task, ot_u8 cursor) {
    task->cursor = cursor;
}

void sys_task_setreserve(ot_task task, ot_u8 reserve) {
    task->reserve = reserve;
 8007ad4:	7081      	strb	r1, [r0, #2]
}
 8007ad6:	4770      	bx	lr

08007ad8 <sys_task_setlatency>:

void sys_task_setlatency(ot_task task, ot_u8 latency) {
    task->latency = latency;
 8007ad8:	70c1      	strb	r1, [r0, #3]
}
 8007ada:	4770      	bx	lr

08007adc <sys_task_setnext_clocks>:

void sys_task_setnext(ot_task task, ot_u32 nextevent_ti) {
    sys_task_setnext_clocks(task, (ot_long)TI2CLK(nextevent_ti));
}

void sys_task_setnext_clocks(ot_task task, ot_long nextevent_clocks) {
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	0004      	movs	r4, r0
 8007ae0:	000d      	movs	r5, r1
    task->nextevent = nextevent_clocks + (ot_long)systim_get();
 8007ae2:	f000 f9a9 	bl	8007e38 <systim_get>
 8007ae6:	1940      	adds	r0, r0, r5
 8007ae8:	6060      	str	r0, [r4, #4]
}
 8007aea:	bd70      	pop	{r4, r5, r6, pc}

08007aec <sys_task_setnext>:
void sys_task_setnext(ot_task task, ot_u32 nextevent_ti) {
 8007aec:	b510      	push	{r4, lr}
    sys_task_setnext_clocks(task, (ot_long)TI2CLK(nextevent_ti));
 8007aee:	f7ff fff5 	bl	8007adc <sys_task_setnext_clocks>
}
 8007af2:	bd10      	pop	{r4, pc}

08007af4 <sys_event_manager>:
  * The Event Manager is multiplexed in order to work with dynamic task calls
  * or static task calls.  Some platforms work better with dynamic, and some
  * better with static.
  */
#ifndef EXTF_sys_event_manager
OT_WEAK ot_uint sys_event_manager() {
 8007af4:	b570      	push	{r4, r5, r6, lr}
    Task_Index  i;
#   endif

    /// 1. Get the elapsed time since the scheduler last run.  We also update
    ///    the time, which does nothing unless time is enabled.
    elapsed = systim_get();
 8007af6:	f000 f99f 	bl	8007e38 <systim_get>
 8007afa:	b284      	uxth	r4, r0
 8007afc:	0400      	lsls	r0, r0, #16
 8007afe:	0c06      	lsrs	r6, r0, #16
    time_add(elapsed); 
 8007b00:	0030      	movs	r0, r6
 8007b02:	f000 f8c5 	bl	8007c90 <time_add>
    systim_flush();
 8007b06:	f000 f9a5 	bl	8007e54 <systim_flush>
    ///      nearest task (nextevent), which loads into timer on exit </LI>
    /// <LI> If a pending task is selected, loop through higher priority
    ///      tasks than the one selected to find if they need to block the
    ///      invocation of the pending task. </LI>
#   if (OT_FEATURE(M2))
    dll_clock(elapsed);
 8007b0a:	0020      	movs	r0, r4
 8007b0c:	f7fd f92e 	bl	8004d6c <dll_clock>

    nextevent   = OT_GPTIM_LIMIT;
    task_i      = &sys.task[TASK_terminus];
    select      = TASK_MAX; //TASK_terminus;
#   if (OT_FEATURE(SYSTASK_CALLBACKS) != ENABLED)
    i           = TASK_terminus;
 8007b10:	2106      	movs	r1, #6
    select      = TASK_MAX; //TASK_terminus;
 8007b12:	2500      	movs	r5, #0
    task_i      = &sys.task[TASK_terminus];
 8007b14:	4b1c      	ldr	r3, [pc, #112]	; (8007b88 <sys_event_manager+0x94>)
    nextevent   = OT_GPTIM_LIMIT;
 8007b16:	4c1d      	ldr	r4, [pc, #116]	; (8007b8c <sys_event_manager+0x98>)
#   endif

    // Select the highest priority task that is active and pending
    // Note that nextevent is always clocked, allowing task blocking without
    // losing synchronization.
    while (task_i != &sys.task[0]) {
 8007b18:	e001      	b.n	8007b1e <sys_event_manager+0x2a>
            if (task_i->nextevent <= nextevent) {
#               if (OT_PARAM_SYSTHREADS != 0)
                nextnext  = nextevent;
#               endif
                nextevent = task_i->nextevent;
                select    = TASK_SELECT(task_i, i);
 8007b1a:	000d      	movs	r5, r1
                nextevent = task_i->nextevent;
 8007b1c:	0014      	movs	r4, r2
    while (task_i != &sys.task[0]) {
 8007b1e:	4a1c      	ldr	r2, [pc, #112]	; (8007b90 <sys_event_manager+0x9c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d011      	beq.n	8007b48 <sys_event_manager+0x54>
        TASK_DECREMENT(task_i, i);
 8007b24:	3b08      	subs	r3, #8
 8007b26:	3901      	subs	r1, #1
 8007b28:	b249      	sxtb	r1, r1
        task_i->nextevent -= elapsed;
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	1b92      	subs	r2, r2, r6
 8007b2e:	605a      	str	r2, [r3, #4]
        if (task_i->event != 0) {
 8007b30:	7818      	ldrb	r0, [r3, #0]
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d0f3      	beq.n	8007b1e <sys_event_manager+0x2a>
            if (task_i->nextevent <= nextevent) {
 8007b36:	42a2      	cmp	r2, r4
 8007b38:	ddef      	ble.n	8007b1a <sys_event_manager+0x26>
            }
            // Sometime nextevent can be negative, due to a long-waiting task.
            // higher priority tasks will always take precedent.
            else if (task_i->nextevent <= 0) {
 8007b3a:	2a00      	cmp	r2, #0
 8007b3c:	dcef      	bgt.n	8007b1e <sys_event_manager+0x2a>
                select = TASK_SELECT(task_i, i);
 8007b3e:	000d      	movs	r5, r1
 8007b40:	e7ed      	b.n	8007b1e <sys_event_manager+0x2a>
                nextevent   = task_i->nextevent;
                select      = TASK_SELECT(task_i, i);
                break;
            }
        }
        TASK_INCREMENT(task_i, i);
 8007b42:	3308      	adds	r3, #8
 8007b44:	3101      	adds	r1, #1
 8007b46:	b249      	sxtb	r1, r1
    while (task_i < TASK(select)) {
 8007b48:	0028      	movs	r0, r5
 8007b4a:	00ea      	lsls	r2, r5, #3
 8007b4c:	4e11      	ldr	r6, [pc, #68]	; (8007b94 <sys_event_manager+0xa0>)
 8007b4e:	1992      	adds	r2, r2, r6
 8007b50:	3204      	adds	r2, #4
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d90e      	bls.n	8007b74 <sys_event_manager+0x80>
        if (task_i->event != 0) {
 8007b56:	781a      	ldrb	r2, [r3, #0]
 8007b58:	2a00      	cmp	r2, #0
 8007b5a:	d0f2      	beq.n	8007b42 <sys_event_manager+0x4e>
            if ((task_i->latency < TASK(select)->reserve) || \
 8007b5c:	78de      	ldrb	r6, [r3, #3]
 8007b5e:	00c0      	lsls	r0, r0, #3
 8007b60:	4a0c      	ldr	r2, [pc, #48]	; (8007b94 <sys_event_manager+0xa0>)
 8007b62:	1810      	adds	r0, r2, r0
 8007b64:	7982      	ldrb	r2, [r0, #6]
 8007b66:	4296      	cmp	r6, r2
 8007b68:	d302      	bcc.n	8007b70 <sys_event_manager+0x7c>
 8007b6a:	6858      	ldr	r0, [r3, #4]
 8007b6c:	4290      	cmp	r0, r2
 8007b6e:	dae8      	bge.n	8007b42 <sys_event_manager+0x4e>
                nextevent   = task_i->nextevent;
 8007b70:	685c      	ldr	r4, [r3, #4]
                select      = TASK_SELECT(task_i, i);
 8007b72:	000d      	movs	r5, r1
    }

    /// 3. Set the active task callback to the selected
    sys.active = select;
 8007b74:	4b07      	ldr	r3, [pc, #28]	; (8007b94 <sys_event_manager+0xa0>)
 8007b76:	701d      	strb	r5, [r3, #0]

    /// 4. The event manager is done here.  systim_schedule() will
    ///    make sure that the task hasn't been pended during the scheduler
    ///    runtime.
    return systim_schedule(nextevent, systim_get());
 8007b78:	f000 f95e 	bl	8007e38 <systim_get>
 8007b7c:	0001      	movs	r1, r0
 8007b7e:	0020      	movs	r0, r4
 8007b80:	f000 f970 	bl	8007e64 <systim_schedule>
//
//        }
//        platform_set_ktim(interval);
//        return retval;
//    }
}
 8007b84:	bd70      	pop	{r4, r5, r6, pc}
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	20002ddc 	.word	0x20002ddc
 8007b8c:	00001efc 	.word	0x00001efc
 8007b90:	20002dac 	.word	0x20002dac
 8007b94:	20002da8 	.word	0x20002da8

08007b98 <sys_run_task>:
#endif



#ifndef EXTF_sys_run_task
OT_INLINE void sys_run_task() {
 8007b98:	b510      	push	{r4, lr}
    }
#   endif

    ///@todo integrate any necessary systim suppression into the
    ///      task clocker feature
    systim_disable();
 8007b9a:	f000 f959 	bl	8007e50 <systim_disable>
    systim_start_clocker();
 8007b9e:	f000 f9d3 	bl	8007f48 <systim_start_clocker>
    
    sys_run_task_CALL:
    if (TASK(sys.active)->event != 0) {
 8007ba2:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <sys_run_task+0x2c>)
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	5618      	ldrsb	r0, [r3, r0]
 8007ba8:	00c2      	lsls	r2, r0, #3
 8007baa:	189b      	adds	r3, r3, r2
 8007bac:	791b      	ldrb	r3, [r3, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <sys_run_task+0x2a>
        TASK_CALL(sys.active);
 8007bb2:	0082      	lsls	r2, r0, #2
 8007bb4:	4b04      	ldr	r3, [pc, #16]	; (8007bc8 <sys_run_task+0x30>)
 8007bb6:	58d3      	ldr	r3, [r2, r3]
 8007bb8:	00c0      	lsls	r0, r0, #3
 8007bba:	4a02      	ldr	r2, [pc, #8]	; (8007bc4 <sys_run_task+0x2c>)
 8007bbc:	1880      	adds	r0, r0, r2
 8007bbe:	3004      	adds	r0, #4
 8007bc0:	4798      	blx	r3
    }
}
 8007bc2:	bd10      	pop	{r4, pc}
 8007bc4:	20002da8 	.word	0x20002da8
 8007bc8:	0800b438 	.word	0x0800b438

08007bcc <sys_preempt>:





OT_WEAK void sys_preempt(ot_task task, ot_uint nextevent_ti) {
 8007bcc:	b510      	push	{r4, lr}
/// Pre-empting will "pend" the timer.  In device terms, this is implemented
/// by manually setting the timer interrupt flag.  If a task is running while
/// this function is called (typical usage), first the task will finish and then
/// the scheduler will run anyway.
    sys_task_setnext(task, (ot_u32)nextevent_ti);
 8007bce:	f7ff ff8d 	bl	8007aec <sys_task_setnext>
    platform_ot_preempt();
 8007bd2:	f000 fcdd 	bl	8008590 <platform_ot_preempt>
}
 8007bd6:	bd10      	pop	{r4, pc}

08007bd8 <time_load_now>:
/** Driver functions
  * The following functions are sometimes implemented in the platform driver.
  * They do the low-level work for the system time module.
  */
#ifndef EXTF_time_load_now
OT_WEAK void time_load_now(ot_time* now) {
 8007bd8:	b510      	push	{r4, lr}
 8007bda:	0004      	movs	r4, r0
    ot_u32 clocks;
    ot_u32 scratch;
    *now        = time_sys;
 8007bdc:	4b08      	ldr	r3, [pc, #32]	; (8007c00 <time_load_now+0x28>)
 8007bde:	0002      	movs	r2, r0
 8007be0:	cb03      	ldmia	r3!, {r0, r1}
 8007be2:	c203      	stmia	r2!, {r0, r1}
    clocks      = systim_get();
 8007be4:	f000 f928 	bl	8007e38 <systim_get>
    scratch     = clocks + now->clocks;
 8007be8:	6863      	ldr	r3, [r4, #4]
 8007bea:	181b      	adds	r3, r3, r0
    now->upper += (scratch < clocks);       ///@note changed this
 8007bec:	4283      	cmp	r3, r0
 8007bee:	4180      	sbcs	r0, r0
 8007bf0:	4240      	negs	r0, r0
 8007bf2:	6822      	ldr	r2, [r4, #0]
 8007bf4:	4694      	mov	ip, r2
 8007bf6:	4460      	add	r0, ip
 8007bf8:	6020      	str	r0, [r4, #0]
    now->clocks = scratch;
 8007bfa:	6063      	str	r3, [r4, #4]
}
 8007bfc:	bd10      	pop	{r4, pc}
 8007bfe:	46c0      	nop			; (mov r8, r8)
 8007c00:	20002ddc 	.word	0x20002ddc

08007c04 <time_set>:
}
#endif


#ifndef EXTF_time_set
OT_WEAK void time_set(ot_time set_time) {
 8007c04:	b530      	push	{r4, r5, lr}
 8007c06:	b085      	sub	sp, #20
 8007c08:	466c      	mov	r4, sp
 8007c0a:	9000      	str	r0, [sp, #0]
 8007c0c:	6061      	str	r1, [r4, #4]
    ot_time delta;
    time_load_now(&delta);
 8007c0e:	a802      	add	r0, sp, #8
 8007c10:	f7ff ffe2 	bl	8007bd8 <time_load_now>
    
    /// 1. Set time_sys to new value.
    time_sys = set_time;
 8007c14:	4b0e      	ldr	r3, [pc, #56]	; (8007c50 <time_set+0x4c>)
 8007c16:	001a      	movs	r2, r3
 8007c18:	0021      	movs	r1, r4
 8007c1a:	c921      	ldmia	r1!, {r0, r5}
 8007c1c:	c221      	stmia	r2!, {r0, r5}
    
    /// 2. determine delta between previous time and new time
    delta.upper     = (time_sys.upper - delta.upper) + (time_sys.clocks < delta.clocks);
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	9a02      	ldr	r2, [sp, #8]
 8007c22:	1a9b      	subs	r3, r3, r2
 8007c24:	6862      	ldr	r2, [r4, #4]
 8007c26:	9803      	ldr	r0, [sp, #12]
 8007c28:	4282      	cmp	r2, r0
 8007c2a:	4189      	sbcs	r1, r1
 8007c2c:	4249      	negs	r1, r1
 8007c2e:	1859      	adds	r1, r3, r1
    delta.clocks    = (time_sys.clocks - delta.clocks);
 8007c30:	1a12      	subs	r2, r2, r0
    
    /// 3. Apply Delta to time_start
    ///    This is necessary to maintain relative uptime figure
    time_start.clocks   += delta.clocks;
 8007c32:	4808      	ldr	r0, [pc, #32]	; (8007c54 <time_set+0x50>)
 8007c34:	6843      	ldr	r3, [r0, #4]
 8007c36:	18d3      	adds	r3, r2, r3
 8007c38:	6043      	str	r3, [r0, #4]
    time_start.upper    += delta.upper + (time_start.clocks < delta.clocks);
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	419b      	sbcs	r3, r3
 8007c3e:	425b      	negs	r3, r3
 8007c40:	18cb      	adds	r3, r1, r3
 8007c42:	6802      	ldr	r2, [r0, #0]
 8007c44:	4694      	mov	ip, r2
 8007c46:	4463      	add	r3, ip
 8007c48:	6003      	str	r3, [r0, #0]
}
 8007c4a:	b005      	add	sp, #20
 8007c4c:	bd30      	pop	{r4, r5, pc}
 8007c4e:	46c0      	nop			; (mov r8, r8)
 8007c50:	20002ddc 	.word	0x20002ddc
 8007c54:	20002de4 	.word	0x20002de4

08007c58 <time_set_utcprecise>:
#endif



#ifndef EXTF_time_set_utcprecise
OT_WEAK void time_set_utcprecise(ot_u32 utc, ot_u32 subseconds) {
 8007c58:	b500      	push	{lr}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	0003      	movs	r3, r0
	ot_time set_time;
    set_time.upper   = (utc >> _UPPER_SHIFT);
 8007c5e:	0d80      	lsrs	r0, r0, #22
    set_time.clocks  = (utc << _LOWER_SHIFT);
 8007c60:	029b      	lsls	r3, r3, #10
    set_time.clocks |= subseconds;
 8007c62:	4319      	orrs	r1, r3
    
    time_set(set_time);
 8007c64:	f7ff ffce 	bl	8007c04 <time_set>
}
 8007c68:	b003      	add	sp, #12
 8007c6a:	bd00      	pop	{pc}

08007c6c <time_set_utc>:
#endif


#ifndef EXTF_time_set_utc
OT_WEAK void time_set_utc(ot_u32 utc) {
 8007c6c:	b510      	push	{r4, lr}
    time_set_utcprecise(utc, 0);
 8007c6e:	2100      	movs	r1, #0
 8007c70:	f7ff fff2 	bl	8007c58 <time_set_utcprecise>
}
 8007c74:	bd10      	pop	{r4, pc}

08007c76 <time_get_utc>:
    *get_time = time_sys;
}
#endif

#ifndef EXTF_time_get_utc
OT_WEAK ot_u32 time_get_utc(void) {
 8007c76:	b500      	push	{lr}
 8007c78:	b083      	sub	sp, #12
    ot_time now;
    time_load_now(&now);
 8007c7a:	4668      	mov	r0, sp
 8007c7c:	f7ff ffac 	bl	8007bd8 <time_load_now>
    now.upper  <<= _UPPER_SHIFT;
 8007c80:	9b00      	ldr	r3, [sp, #0]
 8007c82:	0598      	lsls	r0, r3, #22
    now.clocks >>= _LOWER_SHIFT;
 8007c84:	9b01      	ldr	r3, [sp, #4]
 8007c86:	0a9b      	lsrs	r3, r3, #10
    return (now.upper | now.clocks);
 8007c88:	4318      	orrs	r0, r3
}
 8007c8a:	b003      	add	sp, #12
 8007c8c:	bd00      	pop	{pc}
	...

08007c90 <time_add>:


#ifndef EXTF_time_add
OT_WEAK void time_add(ot_u32 clocks) {
    ot_u32 scratch;
    scratch         = clocks + time_sys.clocks;
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <time_add+0x18>)
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	1812      	adds	r2, r2, r0
    time_sys.upper  += (scratch < clocks);
 8007c96:	4282      	cmp	r2, r0
 8007c98:	4180      	sbcs	r0, r0
 8007c9a:	4240      	negs	r0, r0
 8007c9c:	6819      	ldr	r1, [r3, #0]
 8007c9e:	468c      	mov	ip, r1
 8007ca0:	4460      	add	r0, ip
 8007ca2:	6018      	str	r0, [r3, #0]
    time_sys.clocks  = scratch;
 8007ca4:	605a      	str	r2, [r3, #4]
}
 8007ca6:	4770      	bx	lr
 8007ca8:	20002ddc 	.word	0x20002ddc

08007cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8007cac:	480b      	ldr	r0, [pc, #44]	; (8007cdc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8007cae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8007cb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007cb2:	e003      	b.n	8007cbc <LoopCopyDataInit>

08007cb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007cb4:	4b0a      	ldr	r3, [pc, #40]	; (8007ce0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8007cb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007cb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007cba:	3104      	adds	r1, #4

08007cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8007cbc:	4809      	ldr	r0, [pc, #36]	; (8007ce4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8007cbe:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8007cc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007cc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007cc4:	d3f6      	bcc.n	8007cb4 <CopyDataInit>
  ldr  r2, =_sbss
 8007cc6:	4a09      	ldr	r2, [pc, #36]	; (8007cec <LoopForever+0x12>)
  b  LoopFillZerobss
 8007cc8:	e002      	b.n	8007cd0 <LoopFillZerobss>

08007cca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8007cca:	2300      	movs	r3, #0
  str  r3, [r2]
 8007ccc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007cce:	3204      	adds	r2, #4

08007cd0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8007cd0:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <LoopForever+0x16>)
  cmp  r2, r3
 8007cd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007cd4:	d3f9      	bcc.n	8007cca <FillZerobss>
/* Call the clock system intitialization function.
  bl  SystemInit*/
/* Call static constructors 
    bl __libc_init_array*/
/* Call the application's entry point.*/
  bl  main
 8007cd6:	f7f8 fd5d 	bl	8000794 <main>

08007cda <LoopForever>:

LoopForever:
    b LoopForever
 8007cda:	e7fe      	b.n	8007cda <LoopForever>
   ldr   r0, =_estack
 8007cdc:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8007ce0:	0800b648 	.word	0x0800b648
  ldr  r0, =_sdata
 8007ce4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007ce8:	200001ac 	.word	0x200001ac
  ldr  r2, =_sbss
 8007cec:	200001ac 	.word	0x200001ac
  ldr  r3, = _ebss
 8007cf0:	200032ac 	.word	0x200032ac

08007cf4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007cf4:	e7fe      	b.n	8007cf4 <ADC1_COMP_IRQHandler>
	...

08007cf8 <NMI_Handler>:
}



/// The NMI is triggerable by software.  It is used to manage runtime errors.
void NMI_Handler(void) {
 8007cf8:	b510      	push	{r4, lr}
    ot_int code;

#   ifdef __DEBUG__
    if (platform.error_code == 0)
 8007cfa:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <NMI_Handler+0x1c>)
 8007cfc:	2002      	movs	r0, #2
 8007cfe:	5e18      	ldrsh	r0, [r3, r0]
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d100      	bne.n	8007d06 <NMI_Handler+0xe>
 8007d04:	e7fe      	b.n	8007d04 <NMI_Handler+0xc>
        while(1);
#   endif

    code                = platform.error_code;
    platform.error_code = 0;
 8007d06:	4b03      	ldr	r3, [pc, #12]	; (8007d14 <NMI_Handler+0x1c>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	805a      	strh	r2, [r3, #2]
    sys_panic(code);
 8007d0c:	b2c0      	uxtb	r0, r0
 8007d0e:	f7ff fe99 	bl	8007a44 <sys_panic>
}
 8007d12:	bd10      	pop	{r4, pc}
 8007d14:	20002df0 	.word	0x20002df0

08007d18 <HardFault_Handler>:


void HardFault_Handler(void) {
 8007d18:	b570      	push	{r4, r5, r6, lr}
static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
 8007d1a:	4c08      	ldr	r4, [pc, #32]	; (8007d3c <HardFault_Handler+0x24>)
 8007d1c:	2680      	movs	r6, #128	; 0x80
 8007d1e:	0076      	lsls	r6, r6, #1
 8007d20:	61a6      	str	r6, [r4, #24]
static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 8007d22:	2580      	movs	r5, #128	; 0x80
 8007d24:	00ad      	lsls	r5, r5, #2
 8007d26:	62a5      	str	r5, [r4, #40]	; 0x28
/// other serious problem (possibly interrupt storm)
#if defined(__DEBUG__) || defined(__PROTO__)
    while (1) {
        BOARD_led1_on();
        BOARD_led2_off();
        delay_ti(100);
 8007d28:	2064      	movs	r0, #100	; 0x64
 8007d2a:	f000 fdad 	bl	8008888 <delay_ti>
static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 8007d2e:	62a6      	str	r6, [r4, #40]	; 0x28
static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 8007d30:	61a5      	str	r5, [r4, #24]
        BOARD_led1_off();
        BOARD_led2_on();
        delay_ti(100);
 8007d32:	2064      	movs	r0, #100	; 0x64
 8007d34:	f000 fda8 	bl	8008888 <delay_ti>
 8007d38:	e7ef      	b.n	8007d1a <HardFault_Handler+0x2>
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	50000400 	.word	0x50000400

08007d40 <__read_lptim_cnt>:
  *        STM320 reference manual recommends reading the CNT in a loop until
  *        two successive reads match.  That is the purpose of this function.
  */
ot_u16 __read_lptim_cnt() {
    ot_u16 a, b;
    b = LPTIM1->CNT;
 8007d40:	4b05      	ldr	r3, [pc, #20]	; (8007d58 <__read_lptim_cnt+0x18>)
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	e000      	b.n	8007d4a <__read_lptim_cnt+0xa>
    do {
        a = b;
        b = LPTIM1->CNT;
 8007d48:	0003      	movs	r3, r0
 8007d4a:	4a03      	ldr	r2, [pc, #12]	; (8007d58 <__read_lptim_cnt+0x18>)
 8007d4c:	69d0      	ldr	r0, [r2, #28]
 8007d4e:	b280      	uxth	r0, r0
    } while (b != a);
 8007d50:	4283      	cmp	r3, r0
 8007d52:	d1f9      	bne.n	8007d48 <__read_lptim_cnt+0x8>

    return b;
}
 8007d54:	4770      	bx	lr
 8007d56:	46c0      	nop			; (mov r8, r8)
 8007d58:	40007c00 	.word	0x40007c00

08007d5c <__write_lptim_cmp>:

void __write_lptim_cmp(ot_u16 new_cmp) {
// Clear the CMPOK bit ahead of setting CMP
// Set the CMP to the new value
// Assure that CMP was successfully written 
    LPTIM1->ICR = LPTIM_ICR_CMPOKCF;
 8007d5c:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <__write_lptim_cmp+0x14>)
 8007d5e:	2208      	movs	r2, #8
 8007d60:	605a      	str	r2, [r3, #4]
    LPTIM1->CMP = new_cmp;
 8007d62:	6158      	str	r0, [r3, #20]
    while ((LPTIM1->ISR & LPTIM_ISR_CMPOK) == 0) {
 8007d64:	4b02      	ldr	r3, [pc, #8]	; (8007d70 <__write_lptim_cmp+0x14>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	071b      	lsls	r3, r3, #28
 8007d6a:	d5fb      	bpl.n	8007d64 <__write_lptim_cmp+0x8>
        //test_cmp++;
    }
}
 8007d6c:	4770      	bx	lr
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	40007c00 	.word	0x40007c00

08007d74 <__write_lptim_arr>:


void __write_lptim_arr(ot_u16 new_arr) {
    LPTIM1->ICR = LPTIM_ICR_ARROKCF;
 8007d74:	4b04      	ldr	r3, [pc, #16]	; (8007d88 <__write_lptim_arr+0x14>)
 8007d76:	2210      	movs	r2, #16
 8007d78:	605a      	str	r2, [r3, #4]
    LPTIM1->ARR = new_arr;
 8007d7a:	6198      	str	r0, [r3, #24]
    while ((LPTIM1->ISR & LPTIM_ISR_ARROK) == 0);
 8007d7c:	4b02      	ldr	r3, [pc, #8]	; (8007d88 <__write_lptim_arr+0x14>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	06db      	lsls	r3, r3, #27
 8007d82:	d5fb      	bpl.n	8007d7c <__write_lptim_arr+0x8>
}
 8007d84:	4770      	bx	lr
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	40007c00 	.word	0x40007c00

08007d8c <platform_isr_lptim1>:
    
    //volatile ot_u16 test;
    //test = __read_lptim_cnt();
    
    // Clear interrupt flags
    lptim_flags = LPTIM1->ISR;
 8007d8c:	4905      	ldr	r1, [pc, #20]	; (8007da4 <platform_isr_lptim1+0x18>)
 8007d8e:	680a      	ldr	r2, [r1, #0]
 8007d90:	23ff      	movs	r3, #255	; 0xff
 8007d92:	4013      	ands	r3, r2
    LPTIM1->ICR = lptim_flags;
 8007d94:	604b      	str	r3, [r1, #4]

    // Kernel Timer Compare Interrupt: clear the sleep flag that prevents the
    // scheduler from running
    if (lptim_flags & LPTIM_ISR_CMPM) {
 8007d96:	07d3      	lsls	r3, r2, #31
 8007d98:	d502      	bpl.n	8007da0 <platform_isr_lptim1+0x14>
        systim.flags = 0;
 8007d9a:	4b03      	ldr	r3, [pc, #12]	; (8007da8 <platform_isr_lptim1+0x1c>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	701a      	strb	r2, [r3, #0]
    }
    
    //test = 0;
}
 8007da0:	4770      	bx	lr
 8007da2:	46c0      	nop			; (mov r8, r8)
 8007da4:	40007c00 	.word	0x40007c00
 8007da8:	20002dec 	.word	0x20002dec

08007dac <platform_isr_rtcwakeup>:

/// Used for Insertor & Ticker:
/// - The ticker doesn't do a damn thing except wakeup from sleep 
/// - The Insertor manually vectors to radio_mac_isr(), although this should be
///   changed in the future to a dynamic callback.
void platform_isr_rtcwakeup() { 
 8007dac:	b510      	push	{r4, lr}
#if (RF_FEATURE(CSMATIMER) != ENABLED)
    //if (systim.opt & SYSTIM_INSERTION_ON) {
        //systim.opt ^= SYSTIM_INSERTION_ON;
        //RTC->ISR    = ~RTC_ISR_WUTF;
        //RTC->CR    &= ~RTC_CR_WUTE;
        radio_mac_isr();
 8007dae:	f7f9 fe7d 	bl	8001aac <radio_mac_isr>
    //}
#endif
#endif
}
 8007db2:	bd10      	pop	{r4, pc}

08007db4 <systim_init>:




#ifndef EXTF_systim_init
void systim_init(void* tim_init) {
 8007db4:	b570      	push	{r4, r5, r6, lr}
    ///    MAC Timer.  We must:
    ///    <LI> Unlock RTC as a whole </LI>
    ///    <LI> put into INIT mode </LI>
    ///    <LI> Use a prescaler to match the clock used.  For LSE, this is 1.
    ///         (set to 0).  For LSI, this is...
    RTC->WPR    = 0xCA;
 8007db6:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <systim_init+0x6c>)
 8007db8:	22ca      	movs	r2, #202	; 0xca
 8007dba:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR    = 0x53;
 8007dbc:	3a77      	subs	r2, #119	; 0x77
 8007dbe:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->CR     = 0;    //(1<<5);
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	609a      	str	r2, [r3, #8]
    RTC->ISR    = 0xFFFFFFFF;
 8007dc4:	3a01      	subs	r2, #1
 8007dc6:	60da      	str	r2, [r3, #12]
    while ((RTC->ISR & RTC_ISR_INITF) == 0);
 8007dc8:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <systim_init+0x6c>)
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	065b      	lsls	r3, r3, #25
 8007dce:	d5fb      	bpl.n	8007dc8 <systim_init+0x14>
    RTC->TR     = 0;
 8007dd0:	4b13      	ldr	r3, [pc, #76]	; (8007e20 <systim_init+0x6c>)
 8007dd2:	2400      	movs	r4, #0
 8007dd4:	601c      	str	r4, [r3, #0]
        RTC->PRER               = (127 << 16) | lsi_hz >> 7;
    }
#   endif

    // Clear any ISRs
    RTC->ISR = 0;
 8007dd6:	60dc      	str	r4, [r3, #12]

    /// 2. Set LPTIM1 to use LSE/32 (or LSI/32)
    
    // IER and CFGR must be set with LPTIM disabled
    LPTIM1->CR      = 0;            // disable timer
 8007dd8:	4d12      	ldr	r5, [pc, #72]	; (8007e24 <systim_init+0x70>)
 8007dda:	612c      	str	r4, [r5, #16]
    LPTIM1->IER     = LPTIM_IER_CMPMIE;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	60ab      	str	r3, [r5, #8]
    LPTIM1->CFGR    = ((5-MCU_PRESCALER_SHIFT) << 9);    // generally div32, 16, 8
 8007de0:	2280      	movs	r2, #128	; 0x80
 8007de2:	00d2      	lsls	r2, r2, #3
 8007de4:	60ea      	str	r2, [r5, #12]
    
    // ARR and CMP must be set with LPTIM enabled
    LPTIM1->CR      = LPTIM_CR_ENABLE;
 8007de6:	612b      	str	r3, [r5, #16]
    __write_lptim_arr(65535);
 8007de8:	4e0f      	ldr	r6, [pc, #60]	; (8007e28 <systim_init+0x74>)
 8007dea:	0030      	movs	r0, r6
 8007dec:	f7ff ffc2 	bl	8007d74 <__write_lptim_arr>
    __write_lptim_cmp(65535);
 8007df0:	0030      	movs	r0, r6
 8007df2:	f7ff ffb3 	bl	8007d5c <__write_lptim_cmp>
    LPTIM1->ICR     = 0x7F;         // clear all interrupt flags
 8007df6:	237f      	movs	r3, #127	; 0x7f
 8007df8:	606b      	str	r3, [r5, #4]
    
    // Start Timer
    LPTIM1->CR      = LPTIM_CR_CNTSTRT | LPTIM_CR_ENABLE;
 8007dfa:	3b7a      	subs	r3, #122	; 0x7a
 8007dfc:	612b      	str	r3, [r5, #16]
    

    /// 3. Clear flags and stamps
    systim.flags    = 0;
 8007dfe:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <systim_init+0x78>)
 8007e00:	701c      	strb	r4, [r3, #0]
    systim.stamp1   = 0;
 8007e02:	805c      	strh	r4, [r3, #2]
    
    
    /// 4. Clocker initialization.  OpenTag doesn't really care about Clocker
    ///    so we also need a way to configure if it should be enabled or not.
    RCC->APB1ENR   |= (RCC_APB1ENR_TIM6EN); 
 8007e04:	490a      	ldr	r1, [pc, #40]	; (8007e30 <systim_init+0x7c>)
 8007e06:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8007e08:	2210      	movs	r2, #16
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	638b      	str	r3, [r1, #56]	; 0x38
    TIM6->CR1       = 0;
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <systim_init+0x80>)
 8007e10:	601c      	str	r4, [r3, #0]
    TIM6->CR2       = (b001 << 4);
 8007e12:	605a      	str	r2, [r3, #4]
    TIM6->DIER      = 0;
 8007e14:	60dc      	str	r4, [r3, #12]
    TIM6->ARR       = 65535;
 8007e16:	62de      	str	r6, [r3, #44]	; 0x2c
    TIM6->PSC       = ((PLATFORM_HSCLOCK_HZ / BOARD_PARAM_APB1CLKDIV) / 32768);
 8007e18:	32d9      	adds	r2, #217	; 0xd9
 8007e1a:	32ff      	adds	r2, #255	; 0xff
 8007e1c:	629a      	str	r2, [r3, #40]	; 0x28
    //TIM6->EGR   = TIM_EGR_UG;
}
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	40002800 	.word	0x40002800
 8007e24:	40007c00 	.word	0x40007c00
 8007e28:	0000ffff 	.word	0x0000ffff
 8007e2c:	20002dec 	.word	0x20002dec
 8007e30:	40021000 	.word	0x40021000
 8007e34:	40001000 	.word	0x40001000

08007e38 <systim_get>:





ot_u32 systim_get() {
 8007e38:	b510      	push	{r4, lr}
    ot_u16 timer_cnt;
    timer_cnt   = __read_lptim_cnt();
 8007e3a:	f7ff ff81 	bl	8007d40 <__read_lptim_cnt>
    timer_cnt  -= (ot_u16)systim.stamp1;
 8007e3e:	4b03      	ldr	r3, [pc, #12]	; (8007e4c <systim_get+0x14>)
 8007e40:	885b      	ldrh	r3, [r3, #2]
 8007e42:	1ac0      	subs	r0, r0, r3
 8007e44:	b280      	uxth	r0, r0
    return (ot_u32)(timer_cnt >> OT_GPTIM_OVERSAMPLE);
 8007e46:	08c0      	lsrs	r0, r0, #3
}
 8007e48:	bd10      	pop	{r4, pc}
 8007e4a:	46c0      	nop			; (mov r8, r8)
 8007e4c:	20002dec 	.word	0x20002dec

08007e50 <systim_disable>:
}

void systim_disable() {
/// systim_enable and systim_disable are empty on STM32L0
    //LPTIM1->IER = 0;
}
 8007e50:	4770      	bx	lr
	...

08007e54 <systim_flush>:
    systim.stamp1 = __read_lptim_cnt();
    __write_lptim_cmp(systim.stamp1);
    EXTI->SWIER = (1<<29);
}

void systim_flush() {
 8007e54:	b510      	push	{r4, lr}
    //systim_disable();
    systim.stamp1 = __read_lptim_cnt();
 8007e56:	f7ff ff73 	bl	8007d40 <__read_lptim_cnt>
 8007e5a:	4b01      	ldr	r3, [pc, #4]	; (8007e60 <systim_flush+0xc>)
 8007e5c:	8058      	strh	r0, [r3, #2]
}
 8007e5e:	bd10      	pop	{r4, pc}
 8007e60:	20002dec 	.word	0x20002dec

08007e64 <systim_schedule>:

ot_u16 systim_schedule(ot_u32 nextevent, ot_u32 overhead) {
 8007e64:	b570      	push	{r4, r5, r6, lr}
/// This should only be called from the scheduler.

    /// Subtracting the overhead of the scheduler runtime yields the true time
    /// to schedule the nextevent.
    nextevent = (ot_long)nextevent - (ot_long)overhead;
 8007e66:	1a44      	subs	r4, r0, r1
    
    /// If the task to be scheduled is already due return 0.
    /// This will ignore the sleep process and go straight to the task.
    if ((ot_long)nextevent <= 0) {
 8007e68:	2c00      	cmp	r4, #0
 8007e6a:	dd0f      	ble.n	8007e8c <systim_schedule+0x28>
    
    /// Program the scheduled time into the timer, in ticks.
    /// Oversampling is done at the driver level, versus shifting which is done
    /// at the kernel level.  Oversampling can help timers without synchronized 
    /// updates whereas shifting can improve scheduling precision.
    systim.flags    = GPTIM_FLAG_SLEEP;
 8007e6c:	4e0a      	ldr	r6, [pc, #40]	; (8007e98 <systim_schedule+0x34>)
 8007e6e:	2301      	movs	r3, #1
 8007e70:	7033      	strb	r3, [r6, #0]
    LPTIM1->ICR     = 0x7f;     //LPTIM_ICR_CMPMCF;                 // Clear compare match
 8007e72:	4d0a      	ldr	r5, [pc, #40]	; (8007e9c <systim_schedule+0x38>)
 8007e74:	337e      	adds	r3, #126	; 0x7e
 8007e76:	606b      	str	r3, [r5, #4]
    systim.stamp1   = __read_lptim_cnt();
 8007e78:	f7ff ff62 	bl	8007d40 <__read_lptim_cnt>
 8007e7c:	0003      	movs	r3, r0
 8007e7e:	8070      	strh	r0, [r6, #2]
    
    LPTIM1->CMP     = _LPTIM_OVERHEAD_HACK + systim.stamp1 + (ot_u16)(nextevent << OT_GPTIM_OVERSAMPLE);
 8007e80:	b2a0      	uxth	r0, r4
 8007e82:	00c2      	lsls	r2, r0, #3
 8007e84:	b292      	uxth	r2, r2
 8007e86:	189b      	adds	r3, r3, r2
 8007e88:	616b      	str	r3, [r5, #20]
    //__write_lptim_cmp(_LPTIM_OVERHEAD_HACK + systim.stamp1 + (ot_u16)(nextevent << OT_GPTIM_OVERSAMPLE) );

    return (ot_u16)nextevent;
}
 8007e8a:	bd70      	pop	{r4, r5, r6, pc}
        systim.flags = 0;
 8007e8c:	4b02      	ldr	r3, [pc, #8]	; (8007e98 <systim_schedule+0x34>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]
        return 0;
 8007e92:	2000      	movs	r0, #0
 8007e94:	e7f9      	b.n	8007e8a <systim_schedule+0x26>
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	20002dec 	.word	0x20002dec
 8007e9c:	40007c00 	.word	0x40007c00

08007ea0 <sub_disable_wkuptim>:
/// <LI> Wakeup Timer interrupt is always enabled (see systim_init()) </LI>
/// <LI> Make sure Wakeup Timer is off </LI>
/// <LI> Make sure RTC is off (if required, sometimes it is always on) </LI>
    ot_u32 scratch;
    
    scratch = RTC->CR;
 8007ea0:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <sub_disable_wkuptim+0x14>)
 8007ea2:	689b      	ldr	r3, [r3, #8]
    if (scratch & RTC_CR_WUTE) {
 8007ea4:	055a      	lsls	r2, r3, #21
 8007ea6:	d503      	bpl.n	8007eb0 <sub_disable_wkuptim+0x10>
        RTC->CR = scratch & ~(RTC_CR_WUTE|RTC_CR_WUTIE);
 8007ea8:	4a03      	ldr	r2, [pc, #12]	; (8007eb8 <sub_disable_wkuptim+0x18>)
 8007eaa:	4013      	ands	r3, r2
 8007eac:	4a01      	ldr	r2, [pc, #4]	; (8007eb4 <sub_disable_wkuptim+0x14>)
 8007eae:	6093      	str	r3, [r2, #8]
    }
}
 8007eb0:	4770      	bx	lr
 8007eb2:	46c0      	nop			; (mov r8, r8)
 8007eb4:	40002800 	.word	0x40002800
 8007eb8:	ffffbbff 	.word	0xffffbbff

08007ebc <sub_set_wkuptim>:
void sub_set_wkuptim(ot_uint period) {
    ot_u32 rtc_cr;
    ot_uint wdog;

    // Ensure Wakeup Timer is off
    rtc_cr  = RTC->CR;
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <sub_set_wkuptim+0x2c>)
 8007ebe:	6899      	ldr	r1, [r3, #8]
    RTC->CR = rtc_cr & ~RTC_CR_WUTE;
 8007ec0:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <sub_set_wkuptim+0x30>)
 8007ec2:	400a      	ands	r2, r1
 8007ec4:	609a      	str	r2, [r3, #8]

    // Poll WUTWF until it is set, afterwhich WUTR can be set
    // SW watchdog assumes 10 clocks per loop, to yield ~80us at 32MHz
    wdog = 256; // ~70 us at 32 MHz 
 8007ec6:	2380      	movs	r3, #128	; 0x80
 8007ec8:	005b      	lsls	r3, r3, #1
    while ((RTC->ISR & RTC_ISR_WUTWF) == 0) {
 8007eca:	4a07      	ldr	r2, [pc, #28]	; (8007ee8 <sub_set_wkuptim+0x2c>)
 8007ecc:	68d2      	ldr	r2, [r2, #12]
 8007ece:	0752      	lsls	r2, r2, #29
 8007ed0:	d403      	bmi.n	8007eda <sub_set_wkuptim+0x1e>
        if (--wdog == 0) {
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1f7      	bne.n	8007eca <sub_set_wkuptim+0xe>
        }
    }
    
    // Ticks interval to run wakeup.
    //RTC->WUTR = (period << _TICKER_SHIFT);
    RTC->WUTR = period;
 8007eda:	4a03      	ldr	r2, [pc, #12]	; (8007ee8 <sub_set_wkuptim+0x2c>)
 8007edc:	6150      	str	r0, [r2, #20]

    // Enable Wakeup with interrupt
    // This will do nothing more than wake-up the chip from STOP at the set
    // interval.  The default ISR in platform_isr_STM32L.c is sufficient.
    RTC->CR = rtc_cr | RTC_CR_WUTIE | RTC_CR_WUTE | b001;
 8007ede:	4b04      	ldr	r3, [pc, #16]	; (8007ef0 <sub_set_wkuptim+0x34>)
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	6093      	str	r3, [r2, #8]
}
 8007ee4:	4770      	bx	lr
 8007ee6:	46c0      	nop			; (mov r8, r8)
 8007ee8:	40002800 	.word	0x40002800
 8007eec:	fffffbff 	.word	0xfffffbff
 8007ef0:	00004401 	.word	0x00004401

08007ef4 <systim_stop_ticker>:

#ifndef EXTF_systim_stop_ticker
void systim_stop_ticker() {
/// Ticker is not used on STM32L0 implementation
    //sub_disable_wkuptim();
}
 8007ef4:	4770      	bx	lr
	...

08007ef8 <systim_set_insertion>:
  * @note On STM32L0, the insertor utilizes the ticker, therefore you can only
  * use one or the other safely.  Also, in OpenTag, the Mode 2 MAC timer needs
  * the insertor, so if Mode 2 is being used then you can't really use either
  * except for special cases (e.g. during bootup).
  */
void systim_set_insertion(ot_u16 value) {
 8007ef8:	b510      	push	{r4, lr}
    if (systim.opt & SYSTIM_INSERTION_ON) {
 8007efa:	4b07      	ldr	r3, [pc, #28]	; (8007f18 <systim_set_insertion+0x20>)
 8007efc:	785b      	ldrb	r3, [r3, #1]
 8007efe:	07db      	lsls	r3, r3, #31
 8007f00:	d505      	bpl.n	8007f0e <systim_set_insertion+0x16>
        if (value == 0) {
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d104      	bne.n	8007f10 <systim_set_insertion+0x18>
            EXTI->SWIER = (1<<20);
 8007f06:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <systim_set_insertion+0x24>)
 8007f08:	2280      	movs	r2, #128	; 0x80
 8007f0a:	0352      	lsls	r2, r2, #13
 8007f0c:	611a      	str	r2, [r3, #16]
        }
        else {
            sub_set_wkuptim(value);
        }
    }
}
 8007f0e:	bd10      	pop	{r4, pc}
            sub_set_wkuptim(value);
 8007f10:	f7ff ffd4 	bl	8007ebc <sub_set_wkuptim>
}
 8007f14:	e7fb      	b.n	8007f0e <systim_set_insertion+0x16>
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	20002dec 	.word	0x20002dec
 8007f1c:	40010400 	.word	0x40010400

08007f20 <systim_enable_insertion>:

OT_INLINE void systim_enable_insertion() {
    systim.opt |= SYSTIM_INSERTION_ON;
 8007f20:	4a02      	ldr	r2, [pc, #8]	; (8007f2c <systim_enable_insertion+0xc>)
 8007f22:	7853      	ldrb	r3, [r2, #1]
 8007f24:	2101      	movs	r1, #1
 8007f26:	430b      	orrs	r3, r1
 8007f28:	7053      	strb	r3, [r2, #1]
    //sub_enable_wkuptim();
}
 8007f2a:	4770      	bx	lr
 8007f2c:	20002dec 	.word	0x20002dec

08007f30 <systim_disable_insertion>:

OT_INLINE void systim_disable_insertion() {
 8007f30:	b510      	push	{r4, lr}
    systim.opt &= ~SYSTIM_INSERTION_ON;
 8007f32:	4a04      	ldr	r2, [pc, #16]	; (8007f44 <systim_disable_insertion+0x14>)
 8007f34:	7853      	ldrb	r3, [r2, #1]
 8007f36:	2101      	movs	r1, #1
 8007f38:	438b      	bics	r3, r1
 8007f3a:	7053      	strb	r3, [r2, #1]
    sub_disable_wkuptim();
 8007f3c:	f7ff ffb0 	bl	8007ea0 <sub_disable_wkuptim>
}
 8007f40:	bd10      	pop	{r4, pc}
 8007f42:	46c0      	nop			; (mov r8, r8)
 8007f44:	20002dec 	.word	0x20002dec

08007f48 <systim_start_clocker>:

///@todo clocker implementation.  OpenTag doesn't really care about clocker, so
/// we also need a way to configure if it should be enabled or not.

void systim_start_clocker() {
    TIM6->CR1 = TIM_CR1_CEN;
 8007f48:	4b02      	ldr	r3, [pc, #8]	; (8007f54 <systim_start_clocker+0xc>)
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]
    TIM6->EGR = TIM_EGR_UG;
 8007f4e:	615a      	str	r2, [r3, #20]
}
 8007f50:	4770      	bx	lr
 8007f52:	46c0      	nop			; (mov r8, r8)
 8007f54:	40001000 	.word	0x40001000

08007f58 <systim_stop_clocker>:
ot_u16 systim_get_clocker() {
    return TIM6->CNT;
}

void systim_stop_clocker() {
    TIM6->CR1 = 0;
 8007f58:	4b01      	ldr	r3, [pc, #4]	; (8007f60 <systim_stop_clocker+0x8>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]
}
 8007f5e:	4770      	bx	lr
 8007f60:	40001000 	.word	0x40001000

08007f64 <systim_chronstamp>:
  * and it needs the timer to run through STOP mode.  So, LPTIM is the perfect
  * choice.  Since LPTIM is already set-up as a free-running counter as the
  * kernel timer, all we need to do in this implementation is to read it.
  */

ot_u32 systim_chronstamp(ot_u32* timestamp) {
 8007f64:	b510      	push	{r4, lr}
 8007f66:	0004      	movs	r4, r0
    ot_u16 timer_cnt = __read_lptim_cnt();
 8007f68:	f7ff feea 	bl	8007d40 <__read_lptim_cnt>
    timer_cnt >>= OT_GPTIM_OVERSAMPLE;
 8007f6c:	08c0      	lsrs	r0, r0, #3
 8007f6e:	b280      	uxth	r0, r0
    
    if (timestamp != NULL) {
 8007f70:	2c00      	cmp	r4, #0
 8007f72:	d002      	beq.n	8007f7a <systim_chronstamp+0x16>
        timer_cnt -= (ot_u16)*timestamp;
 8007f74:	8823      	ldrh	r3, [r4, #0]
 8007f76:	1ac0      	subs	r0, r0, r3
 8007f78:	b280      	uxth	r0, r0
    }
    return (ot_u32)timer_cnt;
}
 8007f7a:	bd10      	pop	{r4, pc}

08007f7c <RTC_IRQHandler>:
#define _RTCALARM   (defined(__ISR_RTC_Alarm) && !defined(__N_ISR_RTC_Alarm))
#define _RTCWKUP    (defined(__ISR_RTC_WKUP) && !defined(__N_ISR_RTC_WKUP)) 
#define _TAMPER     (defined(__ISR_TAMPER_STAMP) && !defined(__N_ISR_TAMPER_STAMP))
#define _CSSLSE     (defined(__ISR_CSSLSE) && !defined(__N_ISR_CSSLSE))
#if (_RTCALARM || _RTCWKUP || _TAMPER || CSSLSE)
void RTC_IRQHandler(void) {
 8007f7c:	b510      	push	{r4, lr}
    ot_u32 exti_pr;
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    exti_pr     = EXTI->PR;
 8007f7e:	4b08      	ldr	r3, [pc, #32]	; (8007fa0 <RTC_IRQHandler+0x24>)
 8007f80:	6959      	ldr	r1, [r3, #20]
    EXTI->PR    = (1<<17) | (1<<19) | (1<<20);
 8007f82:	22d0      	movs	r2, #208	; 0xd0
 8007f84:	0352      	lsls	r2, r2, #13
 8007f86:	615a      	str	r2, [r3, #20]
    RTC->ISR   &= ~(RTC_ISR_RSF | RTC_ISR_WUTF);
 8007f88:	4a06      	ldr	r2, [pc, #24]	; (8007fa4 <RTC_IRQHandler+0x28>)
 8007f8a:	68d3      	ldr	r3, [r2, #12]
 8007f8c:	4806      	ldr	r0, [pc, #24]	; (8007fa8 <RTC_IRQHandler+0x2c>)
 8007f8e:	4003      	ands	r3, r0
 8007f90:	60d3      	str	r3, [r2, #12]
    if (RCC->CIER & RCC->CIFR & RCC_CIFR_CSSLSEF) {
        platform_isr_csslse();
    }
#   endif
#   if (_RTCWKUP)
    if (exti_pr & (1<<20)) 
 8007f92:	02cb      	lsls	r3, r1, #11
 8007f94:	d400      	bmi.n	8007f98 <RTC_IRQHandler+0x1c>
        // platform_isr_tamperstamp must clear its own flags in RTC->ISR
        platform_isr_tamperstamp();
#   endif

    __ISR_EXIT_HOOK();
}
 8007f96:	bd10      	pop	{r4, pc}
        platform_isr_rtcwakeup();
 8007f98:	f7ff ff08 	bl	8007dac <platform_isr_rtcwakeup>
}
 8007f9c:	e7fb      	b.n	8007f96 <RTC_IRQHandler+0x1a>
 8007f9e:	46c0      	nop			; (mov r8, r8)
 8007fa0:	40010400 	.word	0x40010400
 8007fa4:	40002800 	.word	0x40002800
 8007fa8:	fffffbdf 	.word	0xfffffbdf

08007fac <EXTI0_1_IRQHandler>:



#if (  ((defined(__ISR_EXTI0) || defined(__USE_EXTI0)) && !defined(__N_ISR_EXTI0)) \
    || ((defined(__ISR_EXTI1) || defined(__USE_EXTI1)) && !defined(__N_ISR_EXTI1)) )
void EXTI0_1_IRQHandler(void) {
 8007fac:	b510      	push	{r4, lr}
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    
#   if ((defined(__ISR_EXTI0) || defined(__USE_EXTI0)) && !defined(__N_ISR_EXTI0))
    __EXTI_MACRO(0);
 8007fae:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <EXTI0_1_IRQHandler+0x28>)
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	07db      	lsls	r3, r3, #31
 8007fb4:	d502      	bpl.n	8007fbc <EXTI0_1_IRQHandler+0x10>
 8007fb6:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <EXTI0_1_IRQHandler+0x28>)
 8007fb8:	2201      	movs	r2, #1
 8007fba:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI1) || defined(__USE_EXTI1)) && !defined(__N_ISR_EXTI1))
    __EXTI_MACRO(1);
 8007fbc:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <EXTI0_1_IRQHandler+0x28>)
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	079b      	lsls	r3, r3, #30
 8007fc2:	d400      	bmi.n	8007fc6 <EXTI0_1_IRQHandler+0x1a>
#   endif
    { } //to terminate "else"

    __ISR_EXIT_HOOK();
}
 8007fc4:	bd10      	pop	{r4, pc}
    __EXTI_MACRO(1);
 8007fc6:	4b03      	ldr	r3, [pc, #12]	; (8007fd4 <EXTI0_1_IRQHandler+0x28>)
 8007fc8:	2202      	movs	r2, #2
 8007fca:	615a      	str	r2, [r3, #20]
 8007fcc:	f7f8 fff2 	bl	8000fb4 <sx127x_irq1_isr>
}
 8007fd0:	e7f8      	b.n	8007fc4 <EXTI0_1_IRQHandler+0x18>
 8007fd2:	46c0      	nop			; (mov r8, r8)
 8007fd4:	40010400 	.word	0x40010400

08007fd8 <EXTI2_3_IRQHandler>:
void EXTI2_3_IRQHandler(void) {
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    
#   if ((defined(__ISR_EXTI2) || defined(__USE_EXTI2)) && !defined(__N_ISR_EXTI2))
    __EXTI_MACRO(2);
 8007fd8:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <EXTI2_3_IRQHandler+0x20>)
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	075b      	lsls	r3, r3, #29
 8007fde:	d502      	bpl.n	8007fe6 <EXTI2_3_IRQHandler+0xe>
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <EXTI2_3_IRQHandler+0x20>)
 8007fe2:	2204      	movs	r2, #4
 8007fe4:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI3) || defined(__USE_EXTI3)) && !defined(__N_ISR_EXTI3))
    __EXTI_MACRO(3);
 8007fe6:	4b04      	ldr	r3, [pc, #16]	; (8007ff8 <EXTI2_3_IRQHandler+0x20>)
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	071b      	lsls	r3, r3, #28
 8007fec:	d502      	bpl.n	8007ff4 <EXTI2_3_IRQHandler+0x1c>
 8007fee:	4b02      	ldr	r3, [pc, #8]	; (8007ff8 <EXTI2_3_IRQHandler+0x20>)
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	615a      	str	r2, [r3, #20]
#   endif
    { } //to terminate "else"

    __ISR_EXIT_HOOK();
}
 8007ff4:	4770      	bx	lr
 8007ff6:	46c0      	nop			; (mov r8, r8)
 8007ff8:	40010400 	.word	0x40010400

08007ffc <EXTI4_15_IRQHandler>:
    || ((defined(__ISR_EXTI11) || defined(__USE_EXTI11)) && !defined(__N_ISR_EXTI11)) \
    || ((defined(__ISR_EXTI12) || defined(__USE_EXTI12)) && !defined(__N_ISR_EXTI12)) \
    || ((defined(__ISR_EXTI13) || defined(__USE_EXTI13)) && !defined(__N_ISR_EXTI13)) \
    || ((defined(__ISR_EXTI14) || defined(__USE_EXTI14)) && !defined(__N_ISR_EXTI14)) \
    || ((defined(__ISR_EXTI15) || defined(__USE_EXTI15)) && !defined(__N_ISR_EXTI15)) )
void EXTI4_15_IRQHandler(void) {
 8007ffc:	b510      	push	{r4, lr}
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();

#   if ((defined(__ISR_EXTI4) || defined(__USE_EXTI4)) && !defined(__N_ISR_EXTI4))
    __EXTI_MACRO(4);
 8007ffe:	4b31      	ldr	r3, [pc, #196]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	06db      	lsls	r3, r3, #27
 8008004:	d451      	bmi.n	80080aa <EXTI4_15_IRQHandler+0xae>
#   endif
#   if ((defined(__ISR_EXTI5) || defined(__USE_EXTI5)) && !defined(__N_ISR_EXTI5))
    __EXTI_MACRO(5);
 8008006:	4b2f      	ldr	r3, [pc, #188]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	069b      	lsls	r3, r3, #26
 800800c:	d502      	bpl.n	8008014 <EXTI4_15_IRQHandler+0x18>
 800800e:	4b2d      	ldr	r3, [pc, #180]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 8008010:	2220      	movs	r2, #32
 8008012:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI6) || defined(__USE_EXTI6)) && !defined(__N_ISR_EXTI6))
    __EXTI_MACRO(6);
 8008014:	4b2b      	ldr	r3, [pc, #172]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	065b      	lsls	r3, r3, #25
 800801a:	d502      	bpl.n	8008022 <EXTI4_15_IRQHandler+0x26>
 800801c:	4b29      	ldr	r3, [pc, #164]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 800801e:	2240      	movs	r2, #64	; 0x40
 8008020:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI7) || defined(__USE_EXTI7)) && !defined(__N_ISR_EXTI7))
    __EXTI_MACRO(7);
 8008022:	4b28      	ldr	r3, [pc, #160]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	061b      	lsls	r3, r3, #24
 8008028:	d502      	bpl.n	8008030 <EXTI4_15_IRQHandler+0x34>
 800802a:	4b26      	ldr	r3, [pc, #152]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 800802c:	2280      	movs	r2, #128	; 0x80
 800802e:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI8) || defined(__USE_EXTI8)) && !defined(__N_ISR_EXTI8))
    __EXTI_MACRO(8);
 8008030:	4b24      	ldr	r3, [pc, #144]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 8008032:	695b      	ldr	r3, [r3, #20]
 8008034:	05db      	lsls	r3, r3, #23
 8008036:	d503      	bpl.n	8008040 <EXTI4_15_IRQHandler+0x44>
 8008038:	4b22      	ldr	r3, [pc, #136]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 800803a:	2280      	movs	r2, #128	; 0x80
 800803c:	0052      	lsls	r2, r2, #1
 800803e:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI9) || defined(__USE_EXTI9)) && !defined(__N_ISR_EXTI9))
    __EXTI_MACRO(9);
 8008040:	4b20      	ldr	r3, [pc, #128]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	059b      	lsls	r3, r3, #22
 8008046:	d503      	bpl.n	8008050 <EXTI4_15_IRQHandler+0x54>
 8008048:	4b1e      	ldr	r3, [pc, #120]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 800804a:	2280      	movs	r2, #128	; 0x80
 800804c:	0092      	lsls	r2, r2, #2
 800804e:	615a      	str	r2, [r3, #20]
#   endif    
#   if ((defined(__ISR_EXTI10) || defined(__USE_EXTI10)) && !defined(__N_ISR_EXTI10))
    __EXTI_MACRO(10);
 8008050:	4b1c      	ldr	r3, [pc, #112]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	055b      	lsls	r3, r3, #21
 8008056:	d503      	bpl.n	8008060 <EXTI4_15_IRQHandler+0x64>
 8008058:	4b1a      	ldr	r3, [pc, #104]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 800805a:	2280      	movs	r2, #128	; 0x80
 800805c:	00d2      	lsls	r2, r2, #3
 800805e:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI11) || defined(__USE_EXTI11)) && !defined(__N_ISR_EXTI11))
    __EXTI_MACRO(11);
 8008060:	4b18      	ldr	r3, [pc, #96]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	051b      	lsls	r3, r3, #20
 8008066:	d503      	bpl.n	8008070 <EXTI4_15_IRQHandler+0x74>
 8008068:	4b16      	ldr	r3, [pc, #88]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 800806a:	2280      	movs	r2, #128	; 0x80
 800806c:	0112      	lsls	r2, r2, #4
 800806e:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI12) || defined(__USE_EXTI12)) && !defined(__N_ISR_EXTI12))
    __EXTI_MACRO(12);
 8008070:	4b14      	ldr	r3, [pc, #80]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	04db      	lsls	r3, r3, #19
 8008076:	d503      	bpl.n	8008080 <EXTI4_15_IRQHandler+0x84>
 8008078:	4b12      	ldr	r3, [pc, #72]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 800807a:	2280      	movs	r2, #128	; 0x80
 800807c:	0152      	lsls	r2, r2, #5
 800807e:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI13) || defined(__USE_EXTI13)) && !defined(__N_ISR_EXTI13))
    __EXTI_MACRO(13);
 8008080:	4b10      	ldr	r3, [pc, #64]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	049b      	lsls	r3, r3, #18
 8008086:	d416      	bmi.n	80080b6 <EXTI4_15_IRQHandler+0xba>
#   endif
#   if ((defined(__ISR_EXTI14) || defined(__USE_EXTI14)) && !defined(__N_ISR_EXTI14))
    __EXTI_MACRO(14);
 8008088:	4b0e      	ldr	r3, [pc, #56]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	045b      	lsls	r3, r3, #17
 800808e:	d503      	bpl.n	8008098 <EXTI4_15_IRQHandler+0x9c>
 8008090:	4b0c      	ldr	r3, [pc, #48]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 8008092:	2280      	movs	r2, #128	; 0x80
 8008094:	01d2      	lsls	r2, r2, #7
 8008096:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI15) || defined(__USE_EXTI15)) && !defined(__N_ISR_EXTI15))
    __EXTI_MACRO(15);
 8008098:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	041b      	lsls	r3, r3, #16
 800809e:	d503      	bpl.n	80080a8 <EXTI4_15_IRQHandler+0xac>
 80080a0:	4b08      	ldr	r3, [pc, #32]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 80080a2:	2280      	movs	r2, #128	; 0x80
 80080a4:	0212      	lsls	r2, r2, #8
 80080a6:	615a      	str	r2, [r3, #20]
#   endif
    { } //to terminate "else"

    __ISR_EXIT_HOOK();
}
 80080a8:	bd10      	pop	{r4, pc}
    __EXTI_MACRO(4);
 80080aa:	4b06      	ldr	r3, [pc, #24]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 80080ac:	2210      	movs	r2, #16
 80080ae:	615a      	str	r2, [r3, #20]
 80080b0:	f7f8 ff78 	bl	8000fa4 <sx127x_irq0_isr>
 80080b4:	e7a7      	b.n	8008006 <EXTI4_15_IRQHandler+0xa>
    __EXTI_MACRO(13);
 80080b6:	4b03      	ldr	r3, [pc, #12]	; (80080c4 <EXTI4_15_IRQHandler+0xc8>)
 80080b8:	2280      	movs	r2, #128	; 0x80
 80080ba:	0192      	lsls	r2, r2, #6
 80080bc:	615a      	str	r2, [r3, #20]
 80080be:	f7f8 ff83 	bl	8000fc8 <sx127x_irq3_isr>
 80080c2:	e7e1      	b.n	8008088 <EXTI4_15_IRQHandler+0x8c>
 80080c4:	40010400 	.word	0x40010400

080080c8 <DMA1_Channel4_5_6_7_IRQHandler>:
#define _DMA4   ((defined(__USE_DMA1_CHAN4) || defined(__ISR_DMA1_Channel4)) && !defined(__N_ISR_DMA1_Channel4))
#define _DMA5   ((defined(__USE_DMA1_CHAN5) || defined(__ISR_DMA1_Channel5)) && !defined(__N_ISR_DMA1_Channel5))
#define _DMA6   ((defined(__USE_DMA1_CHAN6) || defined(__ISR_DMA1_Channel6)) && !defined(__N_ISR_DMA1_Channel6))
#define _DMA7   ((defined(__USE_DMA1_CHAN7) || defined(__ISR_DMA1_Channel7)) && !defined(__N_ISR_DMA1_Channel7))
#if (_DMA4 || _DMA5 || _DMA6 || _DMA7)
void DMA1_Channel4_5_6_7_IRQHandler(void) {
 80080c8:	b510      	push	{r4, lr}
    ot_u32 chan_x;
    __ISR_ENTRY_HOOK();
#   if (_DMA4)
        chan_x = DMA1_Channel4->CCR;
 80080ca:	4b0e      	ldr	r3, [pc, #56]	; (8008104 <DMA1_Channel4_5_6_7_IRQHandler+0x3c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
        if ((chan_x & 1) && (chan_x & 0x000E) && (DMA1->ISR & (1<<12)))
 80080ce:	07da      	lsls	r2, r3, #31
 80080d0:	d506      	bpl.n	80080e0 <DMA1_Channel4_5_6_7_IRQHandler+0x18>
 80080d2:	220e      	movs	r2, #14
 80080d4:	421a      	tst	r2, r3
 80080d6:	d003      	beq.n	80080e0 <DMA1_Channel4_5_6_7_IRQHandler+0x18>
 80080d8:	4b0b      	ldr	r3, [pc, #44]	; (8008108 <DMA1_Channel4_5_6_7_IRQHandler+0x40>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	04db      	lsls	r3, r3, #19
 80080de:	d40b      	bmi.n	80080f8 <DMA1_Channel4_5_6_7_IRQHandler+0x30>
            platform_isr_dma1ch4();
#   endif
#   if (_DMA5)
        chan_x = DMA1_Channel5->CCR;
 80080e0:	4b0a      	ldr	r3, [pc, #40]	; (800810c <DMA1_Channel4_5_6_7_IRQHandler+0x44>)
 80080e2:	681b      	ldr	r3, [r3, #0]
        if ((chan_x & 1) && (chan_x & 0x000E) && (DMA1->ISR & (1<<16)))
 80080e4:	07da      	lsls	r2, r3, #31
 80080e6:	d506      	bpl.n	80080f6 <DMA1_Channel4_5_6_7_IRQHandler+0x2e>
 80080e8:	220e      	movs	r2, #14
 80080ea:	421a      	tst	r2, r3
 80080ec:	d003      	beq.n	80080f6 <DMA1_Channel4_5_6_7_IRQHandler+0x2e>
 80080ee:	4b06      	ldr	r3, [pc, #24]	; (8008108 <DMA1_Channel4_5_6_7_IRQHandler+0x40>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	03db      	lsls	r3, r3, #15
 80080f4:	d403      	bmi.n	80080fe <DMA1_Channel4_5_6_7_IRQHandler+0x36>
        chan_x = DMA1_Channel7->CCR;
        if ((chan_x & 1) && (chan_x & 0x000E) && (DMA1->ISR & (1<<24)))
            platform_isr_dma1ch7();
#   endif
    __ISR_EXIT_HOOK();
}
 80080f6:	bd10      	pop	{r4, pc}
            platform_isr_dma1ch4();
 80080f8:	f000 ffb4 	bl	8009064 <platform_isr_dma1ch4>
 80080fc:	e7f0      	b.n	80080e0 <DMA1_Channel4_5_6_7_IRQHandler+0x18>
            platform_isr_dma1ch5();
 80080fe:	f000 ffad 	bl	800905c <platform_isr_dma1ch5>
}
 8008102:	e7f8      	b.n	80080f6 <DMA1_Channel4_5_6_7_IRQHandler+0x2e>
 8008104:	40020044 	.word	0x40020044
 8008108:	40020000 	.word	0x40020000
 800810c:	40020058 	.word	0x40020058

08008110 <LPTIM1_IRQHandler>:



/// Open LPTIM Interrupt
#if defined(__ISR_LPTIM1) && !defined(__N_ISR_LPTIM1)
void LPTIM1_IRQHandler(void) {
 8008110:	b510      	push	{r4, lr}
    
    ///@todo Not certain this PR clear is necessary or good
    //EXTI->PR = (1<<29);         
    
    __ISR_KTIM_WAKEUP_HOOK();
    platform_isr_lptim1();
 8008112:	f7ff fe3b 	bl	8007d8c <platform_isr_lptim1>
    __ISR_EXIT_HOOK();
}
 8008116:	bd10      	pop	{r4, pc}

08008118 <USART1_IRQHandler>:
#endif


/// Open USART interrupts
#if defined(__ISR_USART1) && !defined(__N_ISR_USART1)
void USART1_IRQHandler(void) {
 8008118:	b510      	push	{r4, lr}
    __ISR_ENTRY_HOOK();
    EXTI->PR = (1<<25);
 800811a:	4b03      	ldr	r3, [pc, #12]	; (8008128 <USART1_IRQHandler+0x10>)
 800811c:	2280      	movs	r2, #128	; 0x80
 800811e:	0492      	lsls	r2, r2, #18
 8008120:	615a      	str	r2, [r3, #20]
    __ISR_WAKEUP_HOOK();
    platform_isr_usart1();
 8008122:	f000 fe23 	bl	8008d6c <platform_isr_usart1>
    __ISR_EXIT_HOOK();
}
 8008126:	bd10      	pop	{r4, pc}
 8008128:	40010400 	.word	0x40010400

0800812c <sub_osc_startup>:

void sub_osc_startup(ot_u16 counter, ot_u32 osc_mask) {
    ///@todo figure out a way to do this with WFE
    
    // Wait for Oscillator to get ready, counter goes to 0 on failure
    RCC->CR    |= osc_mask;
 800812c:	4a08      	ldr	r2, [pc, #32]	; (8008150 <sub_osc_startup+0x24>)
 800812e:	6813      	ldr	r3, [r2, #0]
 8008130:	430b      	orrs	r3, r1
 8008132:	6013      	str	r3, [r2, #0]
    osc_mask  <<= (osc_mask & 1);   // hack for STM32L0 HSI
 8008134:	2301      	movs	r3, #1
 8008136:	400b      	ands	r3, r1
 8008138:	4099      	lsls	r1, r3
    osc_mask  <<= 1;
 800813a:	0049      	lsls	r1, r1, #1
    while ( ((RCC->CR & osc_mask) == 0) && (--counter) );
 800813c:	4b04      	ldr	r3, [pc, #16]	; (8008150 <sub_osc_startup+0x24>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4219      	tst	r1, r3
 8008142:	d103      	bne.n	800814c <sub_osc_startup+0x20>
 8008144:	3801      	subs	r0, #1
 8008146:	b280      	uxth	r0, r0
 8008148:	2800      	cmp	r0, #0
 800814a:	d1f7      	bne.n	800813c <sub_osc_startup+0x10>

    /// Test if oscillator failed to startup
    if (counter == 0) {
        ///@todo Death message / Death Blinkly
    }
}
 800814c:	4770      	bx	lr
 800814e:	46c0      	nop			; (mov r8, r8)
 8008150:	40021000 	.word	0x40021000

08008154 <sub_osc_setclock>:


void sub_osc_setclock(ot_u32 clock_mask) {
    ///@todo have this fail into hardware fault
    ot_u32 scratch;
    scratch         = RCC->CFGR & ~(3 | RCC_CFGR_STOPWUCK);
 8008154:	4907      	ldr	r1, [pc, #28]	; (8008174 <sub_osc_setclock+0x20>)
 8008156:	68cb      	ldr	r3, [r1, #12]
 8008158:	4a07      	ldr	r2, [pc, #28]	; (8008178 <sub_osc_setclock+0x24>)
 800815a:	4013      	ands	r3, r2
    scratch        |= clock_mask;
 800815c:	4303      	orrs	r3, r0
    clock_mask      = (clock_mask & 3) << 2;
 800815e:	0082      	lsls	r2, r0, #2
 8008160:	200c      	movs	r0, #12
 8008162:	4010      	ands	r0, r2
    RCC->CFGR       = scratch;
 8008164:	60cb      	str	r3, [r1, #12]
    while ( (RCC->CFGR & (3<<2)) != clock_mask);
 8008166:	4b03      	ldr	r3, [pc, #12]	; (8008174 <sub_osc_setclock+0x20>)
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	230c      	movs	r3, #12
 800816c:	4013      	ands	r3, r2
 800816e:	4283      	cmp	r3, r0
 8008170:	d1f9      	bne.n	8008166 <sub_osc_setclock+0x12>
}
 8008172:	4770      	bx	lr
 8008174:	40021000 	.word	0x40021000
 8008178:	ffff7ffc 	.word	0xffff7ffc

0800817c <sub_set_clockhz>:

void sub_set_clockhz(ot_ulong cpu_clock_hz) {
/// In interest of speed and size, you need to setup your clock dividers as
/// constants in the board configuration file.
    ///@todo Additional argument for changing the clock dividers.
    platform_ext.clock_hz[0]    = cpu_clock_hz >> (BOARD_PARAM_AHBCLKDIV-1);    //AHB
 800817c:	4b02      	ldr	r3, [pc, #8]	; (8008188 <sub_set_clockhz+0xc>)
 800817e:	6058      	str	r0, [r3, #4]
    platform_ext.clock_hz[1]    = cpu_clock_hz >> (BOARD_PARAM_APB1CLKDIV-1);    //APB1
 8008180:	6098      	str	r0, [r3, #8]
    platform_ext.clock_hz[2]    = cpu_clock_hz >> (BOARD_PARAM_APB2CLKDIV-1);    //APB2
 8008182:	60d8      	str	r0, [r3, #12]
}
 8008184:	4770      	bx	lr
 8008186:	46c0      	nop			; (mov r8, r8)
 8008188:	20002df4 	.word	0x20002df4

0800818c <platform_get_clockhz>:
/** Clock Hz retrieval function
  * ========================================================================<BR>
  */
ot_ulong platform_get_clockhz(ot_uint clock_index) {
#   if defined(__DEBUG__)
    if (clock_index > 2) {
 800818c:	2802      	cmp	r0, #2
 800818e:	d900      	bls.n	8008192 <platform_get_clockhz+0x6>
 8008190:	e7fe      	b.n	8008190 <platform_get_clockhz+0x4>
#   elif defined(__API__)
    if (clock_index > 2) {
        return 0;   //result for dumb APIs
    }
#   endif
    return (clock_index > 2) ? 0 : platform_ext.clock_hz[clock_index];
 8008192:	0080      	lsls	r0, r0, #2
 8008194:	4b01      	ldr	r3, [pc, #4]	; (800819c <platform_get_clockhz+0x10>)
 8008196:	1818      	adds	r0, r3, r0
 8008198:	6840      	ldr	r0, [r0, #4]
}
 800819a:	4770      	bx	lr
 800819c:	20002df4 	.word	0x20002df4

080081a0 <platform_full_speed>:




#ifndef EXTF_platform_full_speed
void platform_full_speed() {
 80081a0:	b510      	push	{r4, lr}
/// Only go through the process of entering Full Speed if it is not activated
/// already.  Also, in Multispeed systems, we need to make sure there are no
/// active full speed or flank speed requests.

#if BOARD_FEATURE(FULLSPEED)
    if ( _FULLSPEED_OFF() /* && !_FLANKRQ() */ ) {
 80081a2:	4b10      	ldr	r3, [pc, #64]	; (80081e4 <platform_full_speed+0x44>)
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	4b10      	ldr	r3, [pc, #64]	; (80081e8 <platform_full_speed+0x48>)
 80081a8:	421a      	tst	r2, r3
 80081aa:	d100      	bne.n	80081ae <platform_full_speed+0xe>
        RCC->CR    &= ~(RCC_CR_MSION | RCC_CR_PLLON);
        sub_set_clockhz(PLATFORM_HSCLOCK_HZ);
        platform_enable_interrupts();
    }
#endif
}
 80081ac:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80081ae:	b672      	cpsid	i
        sub_osc_startup(_FULLOSC_TIMEOUT, _FULLOSC_ONBIT);
 80081b0:	2096      	movs	r0, #150	; 0x96
 80081b2:	2101      	movs	r1, #1
 80081b4:	0040      	lsls	r0, r0, #1
 80081b6:	f7ff ffb9 	bl	800812c <sub_osc_startup>
            FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY;
 80081ba:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <platform_full_speed+0x4c>)
 80081bc:	2203      	movs	r2, #3
 80081be:	601a      	str	r2, [r3, #0]
            sub_osc_setclock(_FULLOSC_CLOCKBIT);    ///@todo FIXED TO HSI
 80081c0:	480b      	ldr	r0, [pc, #44]	; (80081f0 <platform_full_speed+0x50>)
 80081c2:	f7ff ffc7 	bl	8008154 <sub_osc_setclock>
        RCC->CFGR  |= RCC_CFGR_STOPWUCK;
 80081c6:	4b07      	ldr	r3, [pc, #28]	; (80081e4 <platform_full_speed+0x44>)
 80081c8:	68d9      	ldr	r1, [r3, #12]
 80081ca:	2280      	movs	r2, #128	; 0x80
 80081cc:	0212      	lsls	r2, r2, #8
 80081ce:	430a      	orrs	r2, r1
 80081d0:	60da      	str	r2, [r3, #12]
        RCC->CR    &= ~(RCC_CR_MSION | RCC_CR_PLLON);
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	4907      	ldr	r1, [pc, #28]	; (80081f4 <platform_full_speed+0x54>)
 80081d6:	400a      	ands	r2, r1
 80081d8:	601a      	str	r2, [r3, #0]
        sub_set_clockhz(PLATFORM_HSCLOCK_HZ);
 80081da:	4807      	ldr	r0, [pc, #28]	; (80081f8 <platform_full_speed+0x58>)
 80081dc:	f7ff ffce 	bl	800817c <sub_set_clockhz>
  __ASM volatile ("cpsie i" : : : "memory");
 80081e0:	b662      	cpsie	i
}
 80081e2:	e7e3      	b.n	80081ac <platform_full_speed+0xc>
 80081e4:	40021000 	.word	0x40021000
 80081e8:	01000100 	.word	0x01000100
 80081ec:	40022000 	.word	0x40022000
 80081f0:	00008001 	.word	0x00008001
 80081f4:	fefffeff 	.word	0xfefffeff
 80081f8:	00f42400 	.word	0x00f42400

080081fc <platform_disable_interrupts>:
  __ASM volatile ("cpsid i" : : : "memory");
 80081fc:	b672      	cpsid	i
  */

#ifndef EXTF_platform_disable_interrupts
OT_INLINE void platform_disable_interrupts(void) {
    __disable_irq();    // CMSIS intrinsic
}
 80081fe:	4770      	bx	lr

08008200 <platform_enable_interrupts>:
  __ASM volatile ("cpsie i" : : : "memory");
 8008200:	b662      	cpsie	i


#ifndef EXTF_platform_enable_interrupts
OT_INLINE void platform_enable_interrupts(void) {
    __enable_irq();     // CMSIS intrinsic
}
 8008202:	4770      	bx	lr

08008204 <platform_init_OT>:
#endif



#ifndef EXTF_platform_init_OT
void platform_init_OT() {
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	b084      	sub	sp, #16
    /// 1. Initialize Data sources required by basically all OT features
    ///    - Buffers module allocates the data queues, used by all I/O
    ///    - Veelite module allocates and prepares the filesystem
    buffers_init();
 8008208:	f7fe fe3c 	bl	8006e84 <buffers_init>
    vl_init();
 800820c:	f7ff fb16 	bl	800783c <vl_init>

    /// 2. Initialize the System Time.  If the build does not support time,
    ///    then this will do nothing.
    time_set_utc(364489200);
 8008210:	4836      	ldr	r0, [pc, #216]	; (80082ec <platform_init_OT+0xe8>)
 8008212:	f7ff fd2b 	bl	8007c6c <time_set_utc>

    /// 3. Look for errors, report them, and make sure to clear the error RAM.
    /// @note This is a decent place to put a breakpoint when debugging.
    if (RTC->BKP2R != 0) {
 8008216:	4b36      	ldr	r3, [pc, #216]	; (80082f0 <platform_init_OT+0xec>)
 8008218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800821a:	2b00      	cmp	r3, #0
 800821c:	d117      	bne.n	800824e <platform_init_OT+0x4a>
            ot_u16 halfw[6];
        } generated_id;
        ot_u16* hwid;
        ot_int  i;

        generated_id.word[0]    = *((ot_u32*)(0x1FF80050));
 800821e:	4b35      	ldr	r3, [pc, #212]	; (80082f4 <platform_init_OT+0xf0>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	ac01      	add	r4, sp, #4
 8008224:	9301      	str	r3, [sp, #4]
        generated_id.halfw[1]  ^= *((ot_u16*)(0x1FF80064));
 8008226:	4a34      	ldr	r2, [pc, #208]	; (80082f8 <platform_init_OT+0xf4>)
 8008228:	8812      	ldrh	r2, [r2, #0]
 800822a:	0c1b      	lsrs	r3, r3, #16
 800822c:	4053      	eors	r3, r2
 800822e:	8063      	strh	r3, [r4, #2]
        generated_id.halfw[2]   = *((ot_u16*)(0x1FF80066));
 8008230:	4b32      	ldr	r3, [pc, #200]	; (80082fc <platform_init_OT+0xf8>)
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	80a3      	strh	r3, [r4, #4]
        generated_id.word[0]   ^= *((ot_u32*)(0x1FF80054));
 8008236:	4b32      	ldr	r3, [pc, #200]	; (8008300 <platform_init_OT+0xfc>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	9a01      	ldr	r2, [sp, #4]
 800823c:	4053      	eors	r3, r2
 800823e:	9301      	str	r3, [sp, #4]
        
        fpid    = ISF_open_su(ISF_ID(device_features));
 8008240:	2001      	movs	r0, #1
 8008242:	f7ff fae0 	bl	8007806 <ISF_open_su>
 8008246:	0005      	movs	r5, r0
        hwid    = &generated_id.halfw[0];
        for (i=6; i!=0; i-=2) {
 8008248:	2106      	movs	r1, #6
        hwid    = &generated_id.halfw[0];
 800824a:	0023      	movs	r3, r4
        for (i=6; i!=0; i-=2) {
 800824c:	e045      	b.n	80082da <platform_init_OT+0xd6>
        error.ulong     = RTC->BKP2R;
 800824e:	4b28      	ldr	r3, [pc, #160]	; (80082f0 <platform_init_OT+0xec>)
 8008250:	6d9c      	ldr	r4, [r3, #88]	; 0x58
        RTC->BKP2R      = 0;
 8008252:	2200      	movs	r2, #0
 8008254:	659a      	str	r2, [r3, #88]	; 0x58
        fp              = ISF_open_su(ISF_ID(hardware_fault_status));
 8008256:	2016      	movs	r0, #22
 8008258:	f7ff fad5 	bl	8007806 <ISF_open_su>
 800825c:	0005      	movs	r5, r0
        resets.ushort   = vl_read(fp, 0);
 800825e:	2100      	movs	r1, #0
 8008260:	f7ff fa1a 	bl	8007698 <vl_read>
 8008264:	0006      	movs	r6, r0
        faults.ushort   = vl_read(fp, 2);
 8008266:	2102      	movs	r1, #2
 8008268:	0028      	movs	r0, r5
 800826a:	f7ff fa15 	bl	8007698 <vl_read>
 800826e:	b2a1      	uxth	r1, r4
        resets.ubyte[0]+= (error.ushort[LOWER] != 0);
 8008270:	000b      	movs	r3, r1
 8008272:	1e5a      	subs	r2, r3, #1
 8008274:	4193      	sbcs	r3, r2
 8008276:	199b      	adds	r3, r3, r6
        resets.ubyte[1]+= (error.ushort[UPPER] != 0);
 8008278:	0c24      	lsrs	r4, r4, #16
 800827a:	0022      	movs	r2, r4
 800827c:	1e54      	subs	r4, r2, #1
 800827e:	41a2      	sbcs	r2, r4
 8008280:	0436      	lsls	r6, r6, #16
 8008282:	0e36      	lsrs	r6, r6, #24
 8008284:	1992      	adds	r2, r2, r6
 8008286:	b2d2      	uxtb	r2, r2
 8008288:	0212      	lsls	r2, r2, #8
 800828a:	24ff      	movs	r4, #255	; 0xff
 800828c:	4023      	ands	r3, r4
 800828e:	431a      	orrs	r2, r3
 8008290:	0403      	lsls	r3, r0, #16
 8008292:	0e1b      	lsrs	r3, r3, #24
        faults.ubyte[1]+= (error.ushort[LOWER] == 11) << 1; //Memory Fault
 8008294:	290b      	cmp	r1, #11
 8008296:	d014      	beq.n	80082c2 <platform_init_OT+0xbe>
 8008298:	2400      	movs	r4, #0
 800829a:	18e3      	adds	r3, r4, r3
 800829c:	b2db      	uxtb	r3, r3
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	24ff      	movs	r4, #255	; 0xff
 80082a2:	4004      	ands	r4, r0
 80082a4:	431c      	orrs	r4, r3
        vl_write(fp, 0, resets.ushort);
 80082a6:	b292      	uxth	r2, r2
 80082a8:	2100      	movs	r1, #0
 80082aa:	0028      	movs	r0, r5
 80082ac:	f7ff f9fb 	bl	80076a6 <vl_write>
        vl_write(fp, 2, faults.ushort);
 80082b0:	b2a2      	uxth	r2, r4
 80082b2:	2102      	movs	r1, #2
 80082b4:	0028      	movs	r0, r5
 80082b6:	f7ff f9f6 	bl	80076a6 <vl_write>
        vl_close(fp);
 80082ba:	0028      	movs	r0, r5
 80082bc:	f7ff fa6e 	bl	800779c <vl_close>
 80082c0:	e7ad      	b.n	800821e <platform_init_OT+0x1a>
        faults.ubyte[1]+= (error.ushort[LOWER] == 11) << 1; //Memory Fault
 80082c2:	3cfd      	subs	r4, #253	; 0xfd
 80082c4:	e7e9      	b.n	800829a <platform_init_OT+0x96>
            vl_write(fpid, i, *hwid++);
 80082c6:	b28c      	uxth	r4, r1
 80082c8:	1c9e      	adds	r6, r3, #2
 80082ca:	881a      	ldrh	r2, [r3, #0]
 80082cc:	0021      	movs	r1, r4
 80082ce:	0028      	movs	r0, r5
 80082d0:	f7ff f9e9 	bl	80076a6 <vl_write>
        for (i=6; i!=0; i-=2) {
 80082d4:	3c02      	subs	r4, #2
 80082d6:	b221      	sxth	r1, r4
            vl_write(fpid, i, *hwid++);
 80082d8:	0033      	movs	r3, r6
        for (i=6; i!=0; i-=2) {
 80082da:	2900      	cmp	r1, #0
 80082dc:	d1f3      	bne.n	80082c6 <platform_init_OT+0xc2>
        }
        vl_close(fpid);
 80082de:	0028      	movs	r0, r5
 80082e0:	f7ff fa5c 	bl	800779c <vl_close>
#   endif
    
    /// 5. Initialize the System (Kernel & more).  The System initializer must
    ///    initialize all modules that are built onto the kernel.  These include
    ///    the DLL and MPipe.
    sys_init();
 80082e4:	f7ff fb94 	bl	8007a10 <sys_init>
}
 80082e8:	b004      	add	sp, #16
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	15b9a9f0 	.word	0x15b9a9f0
 80082f0:	40002800 	.word	0x40002800
 80082f4:	1ff80050 	.word	0x1ff80050
 80082f8:	1ff80064 	.word	0x1ff80064
 80082fc:	1ff80066 	.word	0x1ff80066
 8008300:	1ff80054 	.word	0x1ff80054

08008304 <platform_init_busclk>:
#endif



#ifndef EXTF_platform_init_busclk
void platform_init_busclk() {
 8008304:	b510      	push	{r4, lr}

    ///1. RESET System Clocks
    ///@todo This may not be necessary.  These settings should be reset default settings.

    // Assure MSI bit is on (it should be, by default)
    RCC->CR    |= (uint32_t)0x00000100;
 8008306:	4c0c      	ldr	r4, [pc, #48]	; (8008338 <platform_init_busclk+0x34>)
 8008308:	6822      	ldr	r2, [r4, #0]
 800830a:	2380      	movs	r3, #128	; 0x80
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	4313      	orrs	r3, r2
 8008310:	6023      	str	r3, [r4, #0]

    // Configure dividers and PLL information (even if not used) and keep 
    // active clock via MSI (these fields are 0)
    RCC->CFGR   = ( _PLL_SRC | _PLL_MULT | _PLL_DIV | _AHB_DIV | _APB1_DIV | _APB2_DIV );
 8008312:	2300      	movs	r3, #0
 8008314:	60e3      	str	r3, [r4, #12]

    // Reset HSION, HSEON, HSEBYP, CSSON and PLLON bits
    // Disable all clocker interrupts (default)
    RCC->CR    &= 0xFEF0FFF6;   // 0xEEFAFFFE;
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	4a08      	ldr	r2, [pc, #32]	; (800833c <platform_init_busclk+0x38>)
 800831a:	4013      	ands	r3, r2
 800831c:	6023      	str	r3, [r4, #0]
#   elif BOARD_FEATURE(FULLSPEED)
#       if ((_FULLSPEED_VOLTAGE != POWER_1V5) && (_FULL_UPVOLT() == 0))
            sub_voltage_config(_FULLSPEED_VOLTAGE | _RTC_PROTECTION);   ///@note This isn't running
#       endif
        // Basic Flash setup, then run normal routine
        FLASH->ACR = FLASH_ACR_PRFTEN;
 800831e:	4b08      	ldr	r3, [pc, #32]	; (8008340 <platform_init_busclk+0x3c>)
 8008320:	2202      	movs	r2, #2
 8008322:	601a      	str	r2, [r3, #0]
        platform_full_speed();
 8008324:	f7ff ff3c 	bl	80081a0 <platform_full_speed>
#       error "At least one of BOARD_FEATURE_STDSPEED, _FULLSPEED, or _FLANKSPEED must be ENABLED"
#   endif

    
    ///4. Clock selection for special buses
    RCC->CCIPR  = ((BOARD_FEATURE(USBPLL)!=ENABLED) << 26)  /* HSI48MSEL */ \
 8008328:	4b06      	ldr	r3, [pc, #24]	; (8008344 <platform_init_busclk+0x40>)
 800832a:	64e3      	str	r3, [r4, #76]	; 0x4c
    /// X. Vector Table Relocation in Internal SRAM or FLASH.
#   ifdef VECT_TAB_SRAM
#       error "Silly rabbit! SRAM is for DATA!"
        SCB->VTOR   = SRAM_BASE;
#   else
        SCB->VTOR   = FLASH_BASE;
 800832c:	4b06      	ldr	r3, [pc, #24]	; (8008348 <platform_init_busclk+0x44>)
 800832e:	2280      	movs	r2, #128	; 0x80
 8008330:	0512      	lsls	r2, r2, #20
 8008332:	609a      	str	r2, [r3, #8]
#   endif
}
 8008334:	bd10      	pop	{r4, pc}
 8008336:	46c0      	nop			; (mov r8, r8)
 8008338:	40021000 	.word	0x40021000
 800833c:	fef0fff6 	.word	0xfef0fff6
 8008340:	40022000 	.word	0x40022000
 8008344:	040c0c00 	.word	0x040c0c00
 8008348:	e000ed00 	.word	0xe000ed00

0800834c <platform_init_periphclk>:

#define CR_OFFSET                (PWR_OFFSET + 0x00)
#define DBP_BitNumber            0x08
#define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
*/
    ot_u32  pwr_cr_save = (PWR->CR | PWR_CR_DBP);
 800834c:	4b0a      	ldr	r3, [pc, #40]	; (8008378 <platform_init_periphclk+0x2c>)
 800834e:	6819      	ldr	r1, [r3, #0]
 8008350:	2280      	movs	r2, #128	; 0x80
 8008352:	0052      	lsls	r2, r2, #1
 8008354:	430a      	orrs	r2, r1

#   if BOARD_FEATURE(LFXTAL)
    PWR->CR     = ((1 << 11) | PWR_CR_DBP);
 8008356:	2190      	movs	r1, #144	; 0x90
 8008358:	0109      	lsls	r1, r1, #4
 800835a:	6019      	str	r1, [r3, #0]
    RCC->CSR    = RCC_CSR_RMVF | RCC_CSR_RTCRST;
 800835c:	4b07      	ldr	r3, [pc, #28]	; (800837c <platform_init_periphclk+0x30>)
 800835e:	2188      	movs	r1, #136	; 0x88
 8008360:	0409      	lsls	r1, r1, #16
 8008362:	6519      	str	r1, [r3, #80]	; 0x50
    RCC->CSR    = RCC_CSR_LSEON | RCC_CSR_RTCEN | RCC_CSR_RTCSEL_LSE;
 8008364:	4906      	ldr	r1, [pc, #24]	; (8008380 <platform_init_periphclk+0x34>)
 8008366:	6519      	str	r1, [r3, #80]	; 0x50
    while ((RCC->CSR & RCC_CSR_LSERDY) == 0);
 8008368:	4b04      	ldr	r3, [pc, #16]	; (800837c <platform_init_periphclk+0x30>)
 800836a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800836c:	059b      	lsls	r3, r3, #22
 800836e:	d5fb      	bpl.n	8008368 <platform_init_periphclk+0x1c>
    RCC->CSR    = RCC_CSR_LSION | RCC_CSR_RTCEN | RCC_CSR_RTCSEL_LSI;
    while ((RCC->CSR & RCC_CSR_LSIRDY) == 0);

#   endif

   PWR->CR = (pwr_cr_save);
 8008370:	4b01      	ldr	r3, [pc, #4]	; (8008378 <platform_init_periphclk+0x2c>)
 8008372:	601a      	str	r2, [r3, #0]
}
 8008374:	4770      	bx	lr
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	40007000 	.word	0x40007000
 800837c:	40021000 	.word	0x40021000
 8008380:	00050100 	.word	0x00050100

08008384 <platform_init_interruptor>:
/** OpenTag Resource Initializers <BR>
  * ========================================================================<BR>
  */

#ifndef EXTF_platform_init_interruptor
void platform_init_interruptor() {
 8008384:	b5f0      	push	{r4, r5, r6, r7, lr}
    SYSCFG->EXTICR[0]   = (0 << 0) \
 8008386:	4b2b      	ldr	r3, [pc, #172]	; (8008434 <platform_init_interruptor+0xb0>)
 8008388:	2288      	movs	r2, #136	; 0x88
 800838a:	0052      	lsls	r2, r2, #1
 800838c:	609a      	str	r2, [r3, #8]
    SYSCFG->EXTICR[1]   = (BOARD_RFGPIO_0PORTNUM << 0) \
 800838e:	4a2a      	ldr	r2, [pc, #168]	; (8008438 <platform_init_interruptor+0xb4>)
 8008390:	60da      	str	r2, [r3, #12]
    SYSCFG->EXTICR[2]   = (0 << 0) \
 8008392:	2210      	movs	r2, #16
 8008394:	611a      	str	r2, [r3, #16]
    SYSCFG->EXTICR[3]   = (0 << 0) \
 8008396:	3211      	adds	r2, #17
 8008398:	32ff      	adds	r2, #255	; 0xff
 800839a:	615a      	str	r2, [r3, #20]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800839c:	4a27      	ldr	r2, [pc, #156]	; (800843c <platform_init_interruptor+0xb8>)
 800839e:	69d3      	ldr	r3, [r2, #28]
 80083a0:	021b      	lsls	r3, r3, #8
 80083a2:	0a1b      	lsrs	r3, r3, #8
 80083a4:	61d3      	str	r3, [r2, #28]
 80083a6:	6a10      	ldr	r0, [r2, #32]
 80083a8:	4925      	ldr	r1, [pc, #148]	; (8008440 <platform_init_interruptor+0xbc>)
 80083aa:	4008      	ands	r0, r1
 80083ac:	23c0      	movs	r3, #192	; 0xc0
 80083ae:	041b      	lsls	r3, r3, #16
 80083b0:	4303      	orrs	r3, r0
 80083b2:	6213      	str	r3, [r2, #32]
    // Line 25: USART1-wakeup
    // Line 26: USART2-wakeup
    // Line 28: LPUART1-wakeup
    // Line 29: LPTIM-wakeup

    EXTI->PR    = (1<<20) | (1<<29);
 80083b4:	4b23      	ldr	r3, [pc, #140]	; (8008444 <platform_init_interruptor+0xc0>)
 80083b6:	4a24      	ldr	r2, [pc, #144]	; (8008448 <platform_init_interruptor+0xc4>)
 80083b8:	615a      	str	r2, [r3, #20]
    EXTI->IMR  |= (1<<20) | (1<<29);
 80083ba:	6818      	ldr	r0, [r3, #0]
 80083bc:	4310      	orrs	r0, r2
 80083be:	6018      	str	r0, [r3, #0]
    EXTI->RTSR |= (1<<20) | (1<<29);
 80083c0:	6898      	ldr	r0, [r3, #8]
 80083c2:	4302      	orrs	r2, r0
 80083c4:	609a      	str	r2, [r3, #8]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80083c6:	4b21      	ldr	r3, [pc, #132]	; (800844c <platform_init_interruptor+0xc8>)
 80083c8:	20c0      	movs	r0, #192	; 0xc0
 80083ca:	0080      	lsls	r0, r0, #2
 80083cc:	581a      	ldr	r2, [r3, r0]
 80083ce:	400a      	ands	r2, r1
 80083d0:	2480      	movs	r4, #128	; 0x80
 80083d2:	03e4      	lsls	r4, r4, #15
 80083d4:	4322      	orrs	r2, r4
 80083d6:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083d8:	2204      	movs	r2, #4
 80083da:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80083dc:	300c      	adds	r0, #12
 80083de:	581a      	ldr	r2, [r3, r0]
 80083e0:	4f1b      	ldr	r7, [pc, #108]	; (8008450 <platform_init_interruptor+0xcc>)
 80083e2:	403a      	ands	r2, r7
 80083e4:	2580      	movs	r5, #128	; 0x80
 80083e6:	01ed      	lsls	r5, r5, #7
 80083e8:	432a      	orrs	r2, r5
 80083ea:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083ec:	2280      	movs	r2, #128	; 0x80
 80083ee:	0192      	lsls	r2, r2, #6
 80083f0:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80083f2:	22c1      	movs	r2, #193	; 0xc1
 80083f4:	0092      	lsls	r2, r2, #2
 80083f6:	589e      	ldr	r6, [r3, r2]
 80083f8:	403e      	ands	r6, r7
 80083fa:	4335      	orrs	r5, r6
 80083fc:	509d      	str	r5, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083fe:	2520      	movs	r5, #32
 8008400:	601d      	str	r5, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008402:	589d      	ldr	r5, [r3, r2]
 8008404:	4029      	ands	r1, r5
 8008406:	430c      	orrs	r4, r1
 8008408:	509c      	str	r4, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800840a:	2140      	movs	r1, #64	; 0x40
 800840c:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800840e:	5899      	ldr	r1, [r3, r2]
 8008410:	0209      	lsls	r1, r1, #8
 8008412:	0a09      	lsrs	r1, r1, #8
 8008414:	2480      	movs	r4, #128	; 0x80
 8008416:	05e4      	lsls	r4, r4, #23
 8008418:	4321      	orrs	r1, r4
 800841a:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800841c:	2180      	movs	r1, #128	; 0x80
 800841e:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008420:	581a      	ldr	r2, [r3, r0]
 8008422:	24ff      	movs	r4, #255	; 0xff
 8008424:	43a2      	bics	r2, r4
 8008426:	430a      	orrs	r2, r1
 8008428:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800842a:	2280      	movs	r2, #128	; 0x80
 800842c:	0152      	lsls	r2, r2, #5
 800842e:	601a      	str	r2, [r3, #0]
//#   if defined(__USE_ADC1)
    NVIC_SetPriority(ADC1_COMP_IRQn, _HIPRI_GROUP);
    NVIC_EnableIRQ(ADC1_COMP_IRQn);
//#   endif

}
 8008430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008432:	46c0      	nop			; (mov r8, r8)
 8008434:	40010000 	.word	0x40010000
 8008438:	00002111 	.word	0x00002111
 800843c:	e000ed00 	.word	0xe000ed00
 8008440:	ff00ffff 	.word	0xff00ffff
 8008444:	40010400 	.word	0x40010400
 8008448:	20100000 	.word	0x20100000
 800844c:	e000e100 	.word	0xe000e100
 8008450:	ffff00ff 	.word	0xffff00ff

08008454 <platform_poweron>:
void platform_poweron() {
 8008454:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8008456:	f3ef 8308 	mrs	r3, MSP
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800845a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800845e:	2302      	movs	r3, #2
 8008460:	f383 8814 	msr	CONTROL, r3
    __set_MSP( (ot_u32)&platform_ext.sstack[(OT_PARAM_SSTACK_ALLOC/4)-1] );
 8008464:	4c2d      	ldr	r4, [pc, #180]	; (800851c <platform_poweron+0xc8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8008466:	f384 8808 	msr	MSP, r4
    RCC->AHBENR     = (_CRYPCLK_N | _RNGCLK_N | _TOUCHCLK_N | _CRCCLK_N | _MIFCLK_N | _DMACLK_N);
 800846a:	4a2d      	ldr	r2, [pc, #180]	; (8008520 <platform_poweron+0xcc>)
 800846c:	4b2d      	ldr	r3, [pc, #180]	; (8008524 <platform_poweron+0xd0>)
 800846e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHBSMENR   = (_CRYPCLK_LP| _RNGCLK_LP| _TOUCHCLK_LP| _CRCCLK_LP| _MIFCLK_LP| _DMACLK_LP);
 8008470:	4b2d      	ldr	r3, [pc, #180]	; (8008528 <platform_poweron+0xd4>)
 8008472:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->IOPENR     = _IOPENR_STARTUP;
 8008474:	4b2d      	ldr	r3, [pc, #180]	; (800852c <platform_poweron+0xd8>)
 8008476:	62d3      	str	r3, [r2, #44]	; 0x2c
    RCC->APB2ENR   = (RCC_APB2ENR_DBGMCUEN | RCC_APB2ENR_SYSCFGEN | _APB2_PERIPH_CLK);
 8008478:	4b2d      	ldr	r3, [pc, #180]	; (8008530 <platform_poweron+0xdc>)
 800847a:	6353      	str	r3, [r2, #52]	; 0x34
    RCC->APB1ENR   = (RCC_APB1ENR_LPTIM1EN | RCC_APB1ENR_PWREN); 
 800847c:	2390      	movs	r3, #144	; 0x90
 800847e:	061b      	lsls	r3, r3, #24
 8008480:	6393      	str	r3, [r2, #56]	; 0x38
    PWR->CR    |= PWR_CR_PLS_LEV0 | PWR_CR_PVDE;  
 8008482:	492c      	ldr	r1, [pc, #176]	; (8008534 <platform_poweron+0xe0>)
 8008484:	680b      	ldr	r3, [r1, #0]
 8008486:	2010      	movs	r0, #16
 8008488:	4303      	orrs	r3, r0
 800848a:	600b      	str	r3, [r1, #0]
	GPIOA->BSRR     = (BOARD_UART_TXPIN \
 800848c:	23a0      	movs	r3, #160	; 0xa0
 800848e:	05db      	lsls	r3, r3, #23
 8008490:	4929      	ldr	r1, [pc, #164]	; (8008538 <platform_poweron+0xe4>)
 8008492:	6199      	str	r1, [r3, #24]
	GPIOA->PUPDR    = (1 << (3*2)) \
 8008494:	4929      	ldr	r1, [pc, #164]	; (800853c <platform_poweron+0xe8>)
 8008496:	60d9      	str	r1, [r3, #12]
	GPIOA->OTYPER   = (1 << (BOARD_UART_TXPINNUM));
 8008498:	2180      	movs	r1, #128	; 0x80
 800849a:	0089      	lsls	r1, r1, #2
 800849c:	6059      	str	r1, [r3, #4]
    GPIOA->MODER    = (GPIO_MODER_ANALOG << (0*2)) \
 800849e:	4928      	ldr	r1, [pc, #160]	; (8008540 <platform_poweron+0xec>)
 80084a0:	6019      	str	r1, [r3, #0]
    GPIOA->OSPEEDR  = (GPIO_OSPEEDR_10MHz << (1*2)) \
 80084a2:	4928      	ldr	r1, [pc, #160]	; (8008544 <platform_poweron+0xf0>)
 80084a4:	6099      	str	r1, [r3, #8]
    GPIOA->AFR[0]   = (4 << (BOARD_EXTUART_TXPINNUM*4)) \
 80084a6:	2188      	movs	r1, #136	; 0x88
 80084a8:	01c9      	lsls	r1, r1, #7
 80084aa:	6219      	str	r1, [r3, #32]
	GPIOA->AFR[1]   = (4 << ((BOARD_UART_TXPINNUM-8)*4)) \
 80084ac:	2188      	movs	r1, #136	; 0x88
 80084ae:	00c9      	lsls	r1, r1, #3
 80084b0:	6259      	str	r1, [r3, #36]	; 0x24
    GPIOB->MODER    = (GPIO_MODER_IN     << (0*2)) \
 80084b2:	4b25      	ldr	r3, [pc, #148]	; (8008548 <platform_poweron+0xf4>)
 80084b4:	4925      	ldr	r1, [pc, #148]	; (800854c <platform_poweron+0xf8>)
 80084b6:	6019      	str	r1, [r3, #0]
    GPIOB->PUPDR    = (1 << (0*2)) \
 80084b8:	2106      	movs	r1, #6
 80084ba:	31ff      	adds	r1, #255	; 0xff
 80084bc:	60d9      	str	r1, [r3, #12]
    GPIOB->OSPEEDR  = (GPIO_OSPEEDR_10MHz << (0*2)) \
 80084be:	4924      	ldr	r1, [pc, #144]	; (8008550 <platform_poweron+0xfc>)
 80084c0:	6099      	str	r1, [r3, #8]
	GPIOB->AFR[0]   = (0 << ((BOARD_RFSPI_SCLKPINNUM)*4));
 80084c2:	2100      	movs	r1, #0
 80084c4:	6219      	str	r1, [r3, #32]
    GPIOC->MODER    = (GPIO_MODER_IN     << (0*2)) \
 80084c6:	4b23      	ldr	r3, [pc, #140]	; (8008554 <platform_poweron+0x100>)
 80084c8:	4823      	ldr	r0, [pc, #140]	; (8008558 <platform_poweron+0x104>)
 80084ca:	6018      	str	r0, [r3, #0]
    GPIOC->PUPDR    = (1 << (13*2));
 80084cc:	2080      	movs	r0, #128	; 0x80
 80084ce:	04c0      	lsls	r0, r0, #19
 80084d0:	60d8      	str	r0, [r3, #12]
    GPIOC->OSPEEDR  = (GPIO_OSPEEDR_10MHz << (1*2)) \
 80084d2:	4822      	ldr	r0, [pc, #136]	; (800855c <platform_poweron+0x108>)
 80084d4:	6098      	str	r0, [r3, #8]
    GPIOH->MODER    = (GPIO_MODER_IN << (0*2))
 80084d6:	4b22      	ldr	r3, [pc, #136]	; (8008560 <platform_poweron+0x10c>)
 80084d8:	6019      	str	r1, [r3, #0]
    RCC->IOPENR = _IOPENR_RUNTIME;
 80084da:	4b22      	ldr	r3, [pc, #136]	; (8008564 <platform_poweron+0x110>)
 80084dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    platform_init_periphclk();
 80084de:	f7ff ff35 	bl	800834c <platform_init_periphclk>
    platform_init_busclk();
 80084e2:	f7ff ff0f 	bl	8008304 <platform_init_busclk>
    DBGMCU->CR     |= ( DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
 80084e6:	4b20      	ldr	r3, [pc, #128]	; (8008568 <platform_poweron+0x114>)
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	2107      	movs	r1, #7
 80084ec:	430a      	orrs	r2, r1
 80084ee:	605a      	str	r2, [r3, #4]
    DBGMCU->APB1FZ |= ( DBGMCU_APB1_FZ_DBG_TIM2_STOP \
 80084f0:	6899      	ldr	r1, [r3, #8]
 80084f2:	4a1e      	ldr	r2, [pc, #120]	; (800856c <platform_poweron+0x118>)
 80084f4:	430a      	orrs	r2, r1
 80084f6:	609a      	str	r2, [r3, #8]
    DBGMCU->APB2FZ |= ( DBGMCU_APB2_FZ_DBG_TIM22_STOP \
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	2124      	movs	r1, #36	; 0x24
 80084fc:	430a      	orrs	r2, r1
 80084fe:	60da      	str	r2, [r3, #12]
    platform_init_interruptor();    // Interrupts OpenTag cares about
 8008500:	f7ff ff40 	bl	8008384 <platform_init_interruptor>
    systim_init(NULL);         // Initialize GPTIM (to 1024 Hz)
 8008504:	2000      	movs	r0, #0
 8008506:	f7ff fc55 	bl	8007db4 <systim_init>
    vworm_init();
 800850a:	f000 fdaf 	bl	800906c <vworm_init>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800850e:	f3ef 8309 	mrs	r3, PSP
    platform_ext.task_exit = (void*)__get_PSP();
 8008512:	4a17      	ldr	r2, [pc, #92]	; (8008570 <platform_poweron+0x11c>)
 8008514:	4694      	mov	ip, r2
 8008516:	4464      	add	r4, ip
 8008518:	6023      	str	r3, [r4, #0]
}
 800851a:	bd10      	pop	{r4, pc}
 800851c:	20003204 	.word	0x20003204
 8008520:	40021000 	.word	0x40021000
 8008524:	00101101 	.word	0x00101101
 8008528:	00110101 	.word	0x00110101
 800852c:	00001187 	.word	0x00001187
 8008530:	00400001 	.word	0x00400001
 8008534:	40007000 	.word	0x40007000
 8008538:	00008604 	.word	0x00008604
 800853c:	24100040 	.word	0x24100040
 8008540:	69c5a7a7 	.word	0x69c5a7a7
 8008544:	3c28f8a8 	.word	0x3c28f8a8
 8008548:	50000400 	.word	0x50000400
 800854c:	57f55480 	.word	0x57f55480
 8008550:	000a02ca 	.word	0x000a02ca
 8008554:	50000800 	.word	0x50000800
 8008558:	93ffffd4 	.word	0x93ffffd4
 800855c:	08000028 	.word	0x08000028
 8008560:	50001c00 	.word	0x50001c00
 8008564:	00001107 	.word	0x00001107
 8008568:	40015800 	.word	0x40015800
 800856c:	80601c11 	.word	0x80601c11
 8008570:	fffffbf0 	.word	0xfffffbf0

08008574 <SVC_Handler>:


/** KERNEL INTERRUPTS
  * =================
  */
void SVC_Handler(void) {
 8008574:	b510      	push	{r4, lr}
/// At present, the only protected system call is the call to the scheduler.
/// (sys_event_manager()).  Future system calls might make-use of the SVC
/// vectoring, however.
    sys_event_manager();
 8008576:	f7ff fabd 	bl	8007af4 <sys_event_manager>
       default: //sys_notify();
                break;  //goto SVC_Handler_eventmgr;
    }

#endif
}
 800857a:	bd10      	pop	{r4, pc}

0800857c <PendSV_Handler>:
/// PendSV ISR is issued if and only if some task or event is asynchronously
/// pre-empting the kernel.  It is invoked __only__ through platform_ot_preempt().
/// @note SV is for "Supervisor," not "Sport Veloce"

    // There is an erratum that PendSV bit is not adequately cleared in HW
    __CLR_PENDSV();
 800857c:	4a03      	ldr	r2, [pc, #12]	; (800858c <PendSV_Handler+0x10>)
 800857e:	6851      	ldr	r1, [r2, #4]
 8008580:	2380      	movs	r3, #128	; 0x80
 8008582:	051b      	lsls	r3, r3, #20
 8008584:	430b      	orrs	r3, r1
 8008586:	6053      	str	r3, [r2, #4]

    // SVC(0) runs the scheduler runtime in protected context
    __SEND_SVC(0);
 8008588:	df00      	svc	0
}
 800858a:	4770      	bx	lr
 800858c:	e000ed00 	.word	0xe000ed00

08008590 <platform_ot_preempt>:
/// Run the kernel scheduler by using system call.  If running a kernel task,
/// do not run the scheduler (we check this by inspecting the KTIM interrupt
/// enabler bit), as the ktask will run to completion and do the call in its
/// own context (platform_ot_run()).

    if (platform_ext.task_exit == NULL)
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <platform_ot_preempt+0x18>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d000      	beq.n	800859a <platform_ot_preempt+0xa>
        __SET_PENDSV();
}
 8008598:	4770      	bx	lr
        __SET_PENDSV();
 800859a:	4a04      	ldr	r2, [pc, #16]	; (80085ac <platform_ot_preempt+0x1c>)
 800859c:	6851      	ldr	r1, [r2, #4]
 800859e:	2380      	movs	r3, #128	; 0x80
 80085a0:	055b      	lsls	r3, r3, #21
 80085a2:	430b      	orrs	r3, r1
 80085a4:	6053      	str	r3, [r2, #4]
}
 80085a6:	e7f7      	b.n	8008598 <platform_ot_preempt+0x8>
 80085a8:	20002df4 	.word	0x20002df4
 80085ac:	e000ed00 	.word	0xe000ed00

080085b0 <platform_ot_run>:
#endif



#ifndef EXTF_platform_ot_run
OT_INLINE void platform_ot_run() {
 80085b0:	b510      	push	{r4, lr}

    /// 1. Run the Scheduler.  The scheduler will issue a PendSV if there is a
    /// threaded task, in which case the P-stack will get changed to that
    /// thread, and the code after this call will not run until all threads are
    /// dormant.
    platform_enable_interrupts();
 80085b2:	f7ff fe25 	bl	8008200 <platform_enable_interrupts>
    __SEND_SVC(0);
 80085b6:	df00      	svc	0

    /// 2. When the PC is here, it means that a kernel task has been scheduled
    ///    or that no task is scheduled.  If no task is scheduled, then it is
    ///    time to go to sleep.  sys_powerdown() MUST re-enable interrupts
    ///    immediately before issuing WFI instruction.
    while (systim.flags & GPTIM_FLAG_SLEEP) {
 80085b8:	e004      	b.n	80085c4 <platform_ot_run+0x14>
        platform_disable_interrupts();
 80085ba:	f7ff fe1f 	bl	80081fc <platform_disable_interrupts>
        //systim_enable();                // LPTIM must be always running
        sys_powerdown();
 80085be:	f7ff fa53 	bl	8007a68 <sys_powerdown>
        
        // At this point, system has just woke-up from sleep.  
        // The wakeup ISR must clear GPTIM_FLAG_SLEEP if task scheduling is to continue
        __NOP();
 80085c2:	46c0      	nop			; (mov r8, r8)
    while (systim.flags & GPTIM_FLAG_SLEEP) {
 80085c4:	4b0c      	ldr	r3, [pc, #48]	; (80085f8 <platform_ot_run+0x48>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	07db      	lsls	r3, r3, #31
 80085ca:	d4f6      	bmi.n	80085ba <platform_ot_run+0xa>
    }
    
    /// 3. Stop the backup timer, which is used as a kernel watchdog.
    platform_disable_interrupts();
 80085cc:	f7ff fe16 	bl	80081fc <platform_disable_interrupts>
    systim_stop_ticker();
 80085d0:	f7ff fc90 	bl	8007ef4 <systim_stop_ticker>
 80085d4:	f3ef 8309 	mrs	r3, PSP
    ///    onto this position.  If the task is killed during its runtime, this
    ///    data will be used to reset the P-stack and PC.
    ///@note this code only works with GCC-based compilers.  The && operator
    /// ahead of the label is a label-reference, and it is a GCC feature.
    {   register ot_u32 return_from_task;
        platform_ext.task_exit  = (void*)__get_PSP();
 80085d8:	4c08      	ldr	r4, [pc, #32]	; (80085fc <platform_ot_run+0x4c>)
 80085da:	6023      	str	r3, [r4, #0]
        return_from_task        = (ot_u32)&&RETURN_FROM_TASK;
 80085dc:	4b08      	ldr	r3, [pc, #32]	; (8008600 <platform_ot_run+0x50>)
        asm volatile ("PUSH {%0}" : : "r"(return_from_task) );
 80085de:	b408      	push	{r3}
    }

    /// 5. Run the Tasking Engine.  It will call the ktask or switch to the
    /// thread, as needed based on what is scheduled.
    platform_enable_interrupts();
 80085e0:	f7ff fe0e 	bl	8008200 <platform_enable_interrupts>
    sys_run_task();
 80085e4:	f7ff fad8 	bl	8007b98 <sys_run_task>

    /// 6. In any condition, retract the stack to a known, stable condition.
    /// If the task/thread exited cleanly, this changes nothing.  If killed,
    /// this will flush the stack.
    RETURN_FROM_TASK:
    platform_disable_interrupts();
 80085e8:	f7ff fe08 	bl	80081fc <platform_disable_interrupts>
    __set_PSP( (ot_u32)platform_ext.task_exit );
 80085ec:	6823      	ldr	r3, [r4, #0]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80085ee:	f383 8809 	msr	PSP, r3
    platform_ext.task_exit = NULL;
 80085f2:	2300      	movs	r3, #0
 80085f4:	6023      	str	r3, [r4, #0]
}
 80085f6:	bd10      	pop	{r4, pc}
 80085f8:	20002dec 	.word	0x20002dec
 80085fc:	20002df4 	.word	0x20002df4
 8008600:	080085e8 	.word	0x080085e8

08008604 <WWDG_IRQHandler>:



#ifndef EXTF_WWDG_IRQHandler
void WWDG_IRQHandler(void) {
}
 8008604:	4770      	bx	lr
	...

08008608 <sx127x_cadpin_ishigh>:
#if defined(_READY_PIN)
inline ot_uint sx127x_readypin_ishigh(void)   { return (_READY_PORT->IDR & _READY_PIN); }
#endif

// CAD-Detect may be implemented on DIO1
inline ot_uint sx127x_cadpin_ishigh(void)     { return (_CAD_DETECT_PORT->IDR & _CAD_DETECT_PIN); }
 8008608:	4b02      	ldr	r3, [pc, #8]	; (8008614 <sx127x_cadpin_ishigh+0xc>)
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	2002      	movs	r0, #2
 800860e:	4018      	ands	r0, r3
 8008610:	4770      	bx	lr
 8008612:	46c0      	nop			; (mov r8, r8)
 8008614:	50000400 	.word	0x50000400

08008618 <sx127x_getbasepwr>:


ot_u8 sx127x_getbasepwr() {
/// Base Power code: 0-3.  For this SX127x impl it's always 3.
    return 3;
}
 8008618:	2003      	movs	r0, #3
 800861a:	4770      	bx	lr

0800861c <sx127x_reset>:


/** Bus interface (SPI + 2x GPIO) <BR>
  * ========================================================================
  */
void sx127x_reset() {
 800861c:	b570      	push	{r4, r5, r6, lr}
/// - this sequence is taken from Semtech's implementation
/// - it doesn't agree 100% with documentation, namely how output/input shift occurs

    // Set Reset pin to Output, and set high
    {   ot_u32 moder;
        moder   = BOARD_RFCTL_RESETPORT->MODER;  
 800861e:	4c09      	ldr	r4, [pc, #36]	; (8008644 <sx127x_reset+0x28>)
 8008620:	6823      	ldr	r3, [r4, #0]
        moder  &= ~(3 << (BOARD_RFCTL_RESETPINNUM*2));
 8008622:	2503      	movs	r5, #3
 8008624:	43ab      	bics	r3, r5
        moder  |= (GPIO_MODER_OUT << (BOARD_RFCTL_RESETPINNUM*2));
 8008626:	2201      	movs	r2, #1
 8008628:	4313      	orrs	r3, r2
        
        BOARD_RFCTL_RESETPORT->MODER    = moder;
 800862a:	6023      	str	r3, [r4, #0]
        BOARD_RFCTL_RESETPORT->BSRR     = BOARD_RFCTL_RESETPIN;
 800862c:	61a2      	str	r2, [r4, #24]
    }
    delay_us(1200);   //wait ~120 us
 800862e:	2096      	movs	r0, #150	; 0x96
 8008630:	00c0      	lsls	r0, r0, #3
 8008632:	f000 f92d 	bl	8008890 <delay_us>
    
    // Set Reset pin to Input, floating
    BOARD_RFCTL_RESETPORT->MODER &= ~(3 << (BOARD_RFCTL_RESETPINNUM*2));
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	43ab      	bics	r3, r5
 800863a:	6023      	str	r3, [r4, #0]

    // wait ~6ms
    delay_ti(6);    // wait ~6ms 
 800863c:	2006      	movs	r0, #6
 800863e:	f000 f923 	bl	8008888 <delay_ti>
}
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	50000800 	.word	0x50000800

08008648 <sx127x_init_bus>:


void sx127x_init_bus() {
 8008648:	b510      	push	{r4, lr}
    sx127x.clkreq = False;
#   endif

    ///1. Do a Reset.  
    ///@todo precede this with POR
    sx127x_reset();
 800864a:	f7ff ffe7 	bl	800861c <sx127x_reset>
    ///2. Set-up DMA to work with SPI.  The DMA is bound to the SPI and it is
    ///   used for Duplex TX+RX.  The DMA RX Channel is used as an EVENT.  The
    ///   STM32L can do in-context naps using EVENTS.  To enable the EVENT, we
    ///   enable the DMA RX interrupt bit, but not the NVIC.
    BOARD_DMA_CLKON();
    _DMARX->CMAR    = (ot_u32)&sx127x.busrx[-1];
 800864e:	4a0c      	ldr	r2, [pc, #48]	; (8008680 <sx127x_init_bus+0x38>)
 8008650:	4b0c      	ldr	r3, [pc, #48]	; (8008684 <sx127x_init_bus+0x3c>)
 8008652:	60d3      	str	r3, [r2, #12]
    _DMARX->CPAR    = (ot_u32)&RADIO_SPI->DR;
 8008654:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <sx127x_init_bus+0x40>)
 8008656:	6093      	str	r3, [r2, #8]
    _DMATX->CPAR    = (ot_u32)&RADIO_SPI->DR;
 8008658:	4a0c      	ldr	r2, [pc, #48]	; (800868c <sx127x_init_bus+0x44>)
 800865a:	6093      	str	r3, [r2, #8]
    ///
    /// However, here we set the EXTI lines to the rising edge triggers we need
    /// and configure the NVIC.  Eventually, the NVIC stuff might be done in
    /// the platform module JUST FOR EXTI interrupts though.

    EXTI->PR    =  RFI_ALL;         //clear flag bits
 800865c:	4b0c      	ldr	r3, [pc, #48]	; (8008690 <sx127x_init_bus+0x48>)
 800865e:	4a0d      	ldr	r2, [pc, #52]	; (8008694 <sx127x_init_bus+0x4c>)
 8008660:	615a      	str	r2, [r3, #20]
    EXTI->IMR  &= ~RFI_ALL;         //clear interrupt enablers
 8008662:	6818      	ldr	r0, [r3, #0]
 8008664:	4c0c      	ldr	r4, [pc, #48]	; (8008698 <sx127x_init_bus+0x50>)
 8008666:	4020      	ands	r0, r4
 8008668:	6018      	str	r0, [r3, #0]
    EXTI->EMR  &= ~RFI_ALL;         //clear event enablers
 800866a:	6859      	ldr	r1, [r3, #4]
 800866c:	4021      	ands	r1, r4
 800866e:	6059      	str	r1, [r3, #4]

    // All IRQ pins are rising edge detect
    EXTI->RTSR |= (RFI_SOURCE0 | RFI_SOURCE1 | RFI_SOURCE2 | RFI_SOURCE3);
 8008670:	6899      	ldr	r1, [r3, #8]
 8008672:	430a      	orrs	r2, r1
 8008674:	609a      	str	r2, [r3, #8]
#       endif
#   endif
    
    /// 4. Put SX127x to sleep
    //delay_ti(6);    // wait ~6ms 
    sx127x_strobe(_OPMODE_SLEEP, True);
 8008676:	2101      	movs	r1, #1
 8008678:	2000      	movs	r0, #0
 800867a:	f7f8 fd17 	bl	80010ac <sx127x_strobe>
}
 800867e:	bd10      	pop	{r4, pc}
 8008680:	4002001c 	.word	0x4002001c
 8008684:	20002206 	.word	0x20002206
 8008688:	4001300c 	.word	0x4001300c
 800868c:	40020030 	.word	0x40020030
 8008690:	40010400 	.word	0x40010400
 8008694:	00002012 	.word	0x00002012
 8008698:	ffffdfed 	.word	0xffffdfed

0800869c <sx127x_spibus_io>:
}




void sx127x_spibus_io(ot_u8 cmd_len, ot_u8 resp_len, ot_u8* cmd) {
 800869c:	b570      	push	{r4, r5, r6, lr}
 800869e:	0004      	movs	r4, r0
 80086a0:	000e      	movs	r6, r1
 80086a2:	0015      	movs	r5, r2
///@note BOARD_DMA_CLKON() must be defined in the board support header as a
/// macro or inline function.  As the board may be using DMA for numerous
/// peripherals, we cannot assume in this module if it is appropriate to turn-
/// off the DMA for all other modules.

    platform_disable_interrupts();
 80086a4:	f7ff fdaa 	bl	80081fc <platform_disable_interrupts>
    __SPI_CLKON();
 80086a8:	4a38      	ldr	r2, [pc, #224]	; (800878c <sx127x_spibus_io+0xf0>)
 80086aa:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80086ac:	2380      	movs	r3, #128	; 0x80
 80086ae:	015b      	lsls	r3, r3, #5
 80086b0:	430b      	orrs	r3, r1
 80086b2:	6353      	str	r3, [r2, #52]	; 0x34
    __SPI_ENABLE();
 80086b4:	4b36      	ldr	r3, [pc, #216]	; (8008790 <sx127x_spibus_io+0xf4>)
 80086b6:	2203      	movs	r2, #3
 80086b8:	605a      	str	r2, [r3, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	609a      	str	r2, [r3, #8]
 80086be:	22d1      	movs	r2, #209	; 0xd1
 80086c0:	0092      	lsls	r2, r2, #2
 80086c2:	601a      	str	r2, [r3, #0]
    __SPI_CS_ON();
 80086c4:	23a0      	movs	r3, #160	; 0xa0
 80086c6:	05db      	lsls	r3, r3, #23
 80086c8:	2280      	movs	r2, #128	; 0x80
 80086ca:	0212      	lsls	r2, r2, #8
 80086cc:	629a      	str	r2, [r3, #40]	; 0x28
    spi_moder   = GPIOA->MODER;
 80086ce:	681a      	ldr	r2, [r3, #0]
    spi_moder  &= ~((3 << (BOARD_RFSPI_MISOPINNUM*2)) \
 80086d0:	4930      	ldr	r1, [pc, #192]	; (8008794 <sx127x_spibus_io+0xf8>)
 80086d2:	4011      	ands	r1, r2
    spi_moder  |= (GPIO_MODER_ALT << (BOARD_RFSPI_MISOPINNUM*2)) \
 80086d4:	22a0      	movs	r2, #160	; 0xa0
 80086d6:	0212      	lsls	r2, r2, #8
 80086d8:	430a      	orrs	r2, r1
    GPIOA->MODER = spi_moder;
 80086da:	601a      	str	r2, [r3, #0]
    spi_moder   = GPIOB->MODER;
 80086dc:	4a2e      	ldr	r2, [pc, #184]	; (8008798 <sx127x_spibus_io+0xfc>)
 80086de:	6813      	ldr	r3, [r2, #0]
    spi_moder  &= ~(3 << (BOARD_RFSPI_SCLKPINNUM*2));
 80086e0:	21c0      	movs	r1, #192	; 0xc0
 80086e2:	438b      	bics	r3, r1
    spi_moder  |= (GPIO_MODER_ALT << (BOARD_RFSPI_SCLKPINNUM*2));
 80086e4:	3940      	subs	r1, #64	; 0x40
 80086e6:	430b      	orrs	r3, r1
    GPIOB->MODER = spi_moder;
 80086e8:	6013      	str	r3, [r2, #0]
    /// module buffer.  If doing a read, the garbage data getting duplexed onto
    /// TX doesn't affect the SX127x.  If doing a write, simply disregard the
    /// RX duplexed data.
    BOARD_RFSPI_CLKON();
    BOARD_DMA_CLKON();
    __DMA_CLEAR_IFG();
 80086ea:	4b2c      	ldr	r3, [pc, #176]	; (800879c <sx127x_spibus_io+0x100>)
 80086ec:	22ff      	movs	r2, #255	; 0xff
 80086ee:	0112      	lsls	r2, r2, #4
 80086f0:	605a      	str	r2, [r3, #4]
    cmd_len        += resp_len;
 80086f2:	19a4      	adds	r4, r4, r6
 80086f4:	b2e4      	uxtb	r4, r4
    _DMARX->CNDTR   = cmd_len;
 80086f6:	482a      	ldr	r0, [pc, #168]	; (80087a0 <sx127x_spibus_io+0x104>)
 80086f8:	6044      	str	r4, [r0, #4]
    _DMATX->CNDTR   = cmd_len;
 80086fa:	4b2a      	ldr	r3, [pc, #168]	; (80087a4 <sx127x_spibus_io+0x108>)
 80086fc:	605c      	str	r4, [r3, #4]
    _DMATX->CMAR    = (ot_u32)cmd;
 80086fe:	60dd      	str	r5, [r3, #12]
    __DMA_ENABLE();
 8008700:	4c29      	ldr	r4, [pc, #164]	; (80087a8 <sx127x_spibus_io+0x10c>)
 8008702:	6822      	ldr	r2, [r4, #0]
 8008704:	4929      	ldr	r1, [pc, #164]	; (80087ac <sx127x_spibus_io+0x110>)
 8008706:	4011      	ands	r1, r2
 8008708:	2288      	movs	r2, #136	; 0x88
 800870a:	0052      	lsls	r2, r2, #1
 800870c:	430a      	orrs	r2, r1
 800870e:	6022      	str	r2, [r4, #0]
 8008710:	4a27      	ldr	r2, [pc, #156]	; (80087b0 <sx127x_spibus_io+0x114>)
 8008712:	6002      	str	r2, [r0, #0]
 8008714:	6819      	ldr	r1, [r3, #0]
 8008716:	4a27      	ldr	r2, [pc, #156]	; (80087b4 <sx127x_spibus_io+0x118>)
 8008718:	430a      	orrs	r2, r1
 800871a:	601a      	str	r2, [r3, #0]
    /// WFE only works on EXTI line interrupts, as far as I can test. 
    /// So do busywait until DMA is done RX-ing
    //do {
        //__WFE();
    //}
    while((DMA1->ISR & _DMARX_IFG) == 0);
 800871c:	4b1f      	ldr	r3, [pc, #124]	; (800879c <sx127x_spibus_io+0x100>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	069b      	lsls	r3, r3, #26
 8008722:	d5fb      	bpl.n	800871c <sx127x_spibus_io+0x80>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008724:	4a24      	ldr	r2, [pc, #144]	; (80087b8 <sx127x_spibus_io+0x11c>)
 8008726:	23c0      	movs	r3, #192	; 0xc0
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	2180      	movs	r1, #128	; 0x80
 800872c:	00c9      	lsls	r1, r1, #3
 800872e:	50d1      	str	r1, [r2, r3]
    __DMA_CLEAR_IRQ();
    __DMA_CLEAR_IFG();
 8008730:	4b1a      	ldr	r3, [pc, #104]	; (800879c <sx127x_spibus_io+0x100>)
 8008732:	22ff      	movs	r2, #255	; 0xff
 8008734:	0112      	lsls	r2, r2, #4
 8008736:	605a      	str	r2, [r3, #4]
    __DMA_DISABLE();
 8008738:	4a1b      	ldr	r2, [pc, #108]	; (80087a8 <sx127x_spibus_io+0x10c>)
 800873a:	6813      	ldr	r3, [r2, #0]
 800873c:	491b      	ldr	r1, [pc, #108]	; (80087ac <sx127x_spibus_io+0x110>)
 800873e:	400b      	ands	r3, r1
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	2300      	movs	r3, #0
 8008744:	4a16      	ldr	r2, [pc, #88]	; (80087a0 <sx127x_spibus_io+0x104>)
 8008746:	6013      	str	r3, [r2, #0]
 8008748:	4a16      	ldr	r2, [pc, #88]	; (80087a4 <sx127x_spibus_io+0x108>)
 800874a:	6013      	str	r3, [r2, #0]

    /// Turn-off and disable SPI to save energy
    __SPI_CS_OFF();
 800874c:	23a0      	movs	r3, #160	; 0xa0
 800874e:	05db      	lsls	r3, r3, #23
 8008750:	2280      	movs	r2, #128	; 0x80
 8008752:	0212      	lsls	r2, r2, #8
 8008754:	619a      	str	r2, [r3, #24]
    __SPI_DISABLE();
 8008756:	4a0e      	ldr	r2, [pc, #56]	; (8008790 <sx127x_spibus_io+0xf4>)
 8008758:	21c1      	movs	r1, #193	; 0xc1
 800875a:	0089      	lsls	r1, r1, #2
 800875c:	6011      	str	r1, [r2, #0]
    __SPI_CLKOFF();
 800875e:	490b      	ldr	r1, [pc, #44]	; (800878c <sx127x_spibus_io+0xf0>)
 8008760:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8008762:	4816      	ldr	r0, [pc, #88]	; (80087bc <sx127x_spibus_io+0x120>)
 8008764:	4002      	ands	r2, r0
 8008766:	634a      	str	r2, [r1, #52]	; 0x34
    spi_moder   = GPIOA->MODER;
 8008768:	681a      	ldr	r2, [r3, #0]
    spi_moder  &= ~((3 << (BOARD_RFSPI_MISOPINNUM*2)) \
 800876a:	490a      	ldr	r1, [pc, #40]	; (8008794 <sx127x_spibus_io+0xf8>)
 800876c:	4011      	ands	r1, r2
    spi_moder  |= (GPIO_MODER_IN << (BOARD_RFSPI_MISOPINNUM*2)) \
 800876e:	2280      	movs	r2, #128	; 0x80
 8008770:	01d2      	lsls	r2, r2, #7
 8008772:	430a      	orrs	r2, r1
    GPIOA->MODER = spi_moder;
 8008774:	601a      	str	r2, [r3, #0]
    spi_moder   = GPIOB->MODER;
 8008776:	4a08      	ldr	r2, [pc, #32]	; (8008798 <sx127x_spibus_io+0xfc>)
 8008778:	6813      	ldr	r3, [r2, #0]
    spi_moder  &= ~(3 << (BOARD_RFSPI_SCLKPINNUM*2));
 800877a:	21c0      	movs	r1, #192	; 0xc0
 800877c:	438b      	bics	r3, r1
    spi_moder  |= (GPIO_MODER_OUT << (BOARD_RFSPI_SCLKPINNUM*2));
 800877e:	3980      	subs	r1, #128	; 0x80
 8008780:	430b      	orrs	r3, r1
    GPIOB->MODER = spi_moder;
 8008782:	6013      	str	r3, [r2, #0]
    BOARD_DMA_CLKOFF();
    BOARD_RFSPI_CLKOFF();
    platform_enable_interrupts();
 8008784:	f7ff fd3c 	bl	8008200 <platform_enable_interrupts>
}
 8008788:	bd70      	pop	{r4, r5, r6, pc}
 800878a:	46c0      	nop			; (mov r8, r8)
 800878c:	40021000 	.word	0x40021000
 8008790:	40013000 	.word	0x40013000
 8008794:	ffff0fff 	.word	0xffff0fff
 8008798:	50000400 	.word	0x50000400
 800879c:	40020000 	.word	0x40020000
 80087a0:	4002001c 	.word	0x4002001c
 80087a4:	40020030 	.word	0x40020030
 80087a8:	400200a8 	.word	0x400200a8
 80087ac:	fffff00f 	.word	0xfffff00f
 80087b0:	00003083 	.word	0x00003083
 80087b4:	00003091 	.word	0x00003091
 80087b8:	e000e100 	.word	0xe000e100
 80087bc:	ffffefff 	.word	0xffffefff

080087c0 <sx127x_antsw_off>:
    GPIOA->BSRR = ((1<<1) << 16);
 80087c0:	21a0      	movs	r1, #160	; 0xa0
 80087c2:	05c9      	lsls	r1, r1, #23
 80087c4:	2380      	movs	r3, #128	; 0x80
 80087c6:	029b      	lsls	r3, r3, #10
 80087c8:	618b      	str	r3, [r1, #24]
    GPIOC->BSRR = (((1<<1) | (1<<2)) << 16);
 80087ca:	4a07      	ldr	r2, [pc, #28]	; (80087e8 <sx127x_antsw_off+0x28>)
 80087cc:	23c0      	movs	r3, #192	; 0xc0
 80087ce:	02db      	lsls	r3, r3, #11
 80087d0:	6193      	str	r3, [r2, #24]
    ant_moder       = GPIOA->MODER;
 80087d2:	680b      	ldr	r3, [r1, #0]
    ant_moder      &= ~((3 << (1*2)));
 80087d4:	200c      	movs	r0, #12
 80087d6:	4383      	bics	r3, r0
    ant_moder      |= ((3 << (1*2)));
 80087d8:	4303      	orrs	r3, r0
    GPIOA->MODER    = ant_moder;
 80087da:	600b      	str	r3, [r1, #0]
    ant_moder       = GPIOC->MODER;
 80087dc:	6813      	ldr	r3, [r2, #0]
    ant_moder      &= ~((3 << (1*2)) | (3 << (2*2)));
 80087de:	213c      	movs	r1, #60	; 0x3c
 80087e0:	438b      	bics	r3, r1
    ant_moder      |= ((3 << (1*2)) | (3 << (2*2)));
 80087e2:	430b      	orrs	r3, r1
    GPIOC->MODER    = ant_moder;
 80087e4:	6013      	str	r3, [r2, #0]

void sx127x_antsw_off(void) {
#   if (defined(__SX127x_PABOOST__) || defined(__SX127x_TXSW__) || defined(__SX127x_RXSW__))
    BOARD_RFANT_OFF();
#   endif
}
 80087e6:	4770      	bx	lr
 80087e8:	50000800 	.word	0x50000800

080087ec <sx127x_antsw_on>:
    GPIOA->BSRR = ((1<<1) << 16);
 80087ec:	21a0      	movs	r1, #160	; 0xa0
 80087ee:	05c9      	lsls	r1, r1, #23
 80087f0:	2380      	movs	r3, #128	; 0x80
 80087f2:	029b      	lsls	r3, r3, #10
 80087f4:	618b      	str	r3, [r1, #24]
    GPIOC->BSRR = (((1<<1) | (1<<2)) << 16);
 80087f6:	4a08      	ldr	r2, [pc, #32]	; (8008818 <sx127x_antsw_on+0x2c>)
 80087f8:	23c0      	movs	r3, #192	; 0xc0
 80087fa:	02db      	lsls	r3, r3, #11
 80087fc:	6193      	str	r3, [r2, #24]
    ant_moder       = GPIOA->MODER;
 80087fe:	680b      	ldr	r3, [r1, #0]
    ant_moder      &= ~((3 << (1*2)));
 8008800:	200c      	movs	r0, #12
 8008802:	4383      	bics	r3, r0
    ant_moder      |= ((1 << (1*2)));
 8008804:	3808      	subs	r0, #8
 8008806:	4303      	orrs	r3, r0
    GPIOA->MODER    = ant_moder;
 8008808:	600b      	str	r3, [r1, #0]
    ant_moder       = GPIOC->MODER;
 800880a:	6813      	ldr	r3, [r2, #0]
    ant_moder      &= ~((3 << (1*2)) | (3 << (2*2)));
 800880c:	213c      	movs	r1, #60	; 0x3c
 800880e:	438b      	bics	r3, r1
    ant_moder      |= ((1 << (1*2)) | (1 << (2*2)));
 8008810:	3928      	subs	r1, #40	; 0x28
 8008812:	430b      	orrs	r3, r1
    GPIOC->MODER    = ant_moder;
 8008814:	6013      	str	r3, [r2, #0]

void sx127x_antsw_on(void) {
#   if (defined(__SX127x_PABOOST__) || defined(__SX127x_TXSW__) || defined(__SX127x_RXSW__))
    BOARD_RFANT_ON();
#   endif
}
 8008816:	4770      	bx	lr
 8008818:	50000800 	.word	0x50000800

0800881c <sx127x_antsw_tx>:

void sx127x_antsw_tx(ot_bool use_paboost) {
 800881c:	b510      	push	{r4, lr}
 800881e:	0004      	movs	r4, r0
#   if (defined(__SX127x_PABOOST__) || defined(__SX127x_TXSW__))
    sx127x_antsw_on();
 8008820:	f7ff ffe4 	bl	80087ec <sx127x_antsw_on>
    GPIOC->BSRR = ((1<<2) >> (ot_u32)use_boost);
 8008824:	2304      	movs	r3, #4
 8008826:	4123      	asrs	r3, r4
 8008828:	4a01      	ldr	r2, [pc, #4]	; (8008830 <sx127x_antsw_tx+0x14>)
 800882a:	6193      	str	r3, [r2, #24]
    BOARD_RFANT_TX(use_paboost);
#   endif
}
 800882c:	bd10      	pop	{r4, pc}
 800882e:	46c0      	nop			; (mov r8, r8)
 8008830:	50000800 	.word	0x50000800

08008834 <sx127x_antsw_rx>:

void sx127x_antsw_rx(void) {
 8008834:	b510      	push	{r4, lr}
#   if defined(__SX127x_RXSW__)
    sx127x_antsw_on();
 8008836:	f7ff ffd9 	bl	80087ec <sx127x_antsw_on>
    GPIOA->BSRR = (1<<1);
 800883a:	23a0      	movs	r3, #160	; 0xa0
 800883c:	05db      	lsls	r3, r3, #23
 800883e:	2202      	movs	r2, #2
 8008840:	619a      	str	r2, [r3, #24]
    BOARD_RFANT_RX();
#   endif
}
 8008842:	bd10      	pop	{r4, pc}

08008844 <sx127x_int_config>:



void sx127x_int_config(ot_u32 ie_sel) {
    ot_u32 scratch;
    EXTI->PR    = (ot_u32)RFI_ALL;
 8008844:	4a04      	ldr	r2, [pc, #16]	; (8008858 <sx127x_int_config+0x14>)
 8008846:	4b05      	ldr	r3, [pc, #20]	; (800885c <sx127x_int_config+0x18>)
 8008848:	6153      	str	r3, [r2, #20]
    scratch     = EXTI->IMR;
 800884a:	6813      	ldr	r3, [r2, #0]
    scratch    &= ~((ot_u32)RFI_ALL);
 800884c:	4904      	ldr	r1, [pc, #16]	; (8008860 <sx127x_int_config+0x1c>)
 800884e:	400b      	ands	r3, r1
    scratch    |= ie_sel;
 8008850:	4318      	orrs	r0, r3
    EXTI->IMR   = scratch;
 8008852:	6010      	str	r0, [r2, #0]
}
 8008854:	4770      	bx	lr
 8008856:	46c0      	nop			; (mov r8, r8)
 8008858:	40010400 	.word	0x40010400
 800885c:	00002012 	.word	0x00002012
 8008860:	ffffdfed 	.word	0xffffdfed

08008864 <sx127x_int_clearall>:

inline void sx127x_int_clearall(void) {
    EXTI->PR = RFI_ALL;
 8008864:	4b01      	ldr	r3, [pc, #4]	; (800886c <sx127x_int_clearall+0x8>)
 8008866:	4a02      	ldr	r2, [pc, #8]	; (8008870 <sx127x_int_clearall+0xc>)
 8008868:	615a      	str	r2, [r3, #20]
}
 800886a:	4770      	bx	lr
 800886c:	40010400 	.word	0x40010400
 8008870:	00002012 	.word	0x00002012

08008874 <delay_ms>:


#ifndef EXTF_delay_ms
void delay_ms(ot_u16 n) {
    ot_long c;
    c   = (platform_ext.clock_hz[0]>>10);   // Set cycles per ms
 8008874:	4b03      	ldr	r3, [pc, #12]	; (8008884 <delay_ms+0x10>)
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	0a9b      	lsrs	r3, r3, #10
    c  *= n;                                // Multiply by number of ms
 800887a:	4358      	muls	r0, r3
    do {
        c -= 7;                         // 7 cycles per loop (measured)
 800887c:	3807      	subs	r0, #7
    } while (c > 0);
 800887e:	2800      	cmp	r0, #0
 8008880:	dcfc      	bgt.n	800887c <delay_ms+0x8>
}
 8008882:	4770      	bx	lr
 8008884:	20002df4 	.word	0x20002df4

08008888 <delay_ti>:
void delay_ti(ot_u16 n) {
 8008888:	b510      	push	{r4, lr}
    delay_ms(n);
 800888a:	f7ff fff3 	bl	8008874 <delay_ms>
}
 800888e:	bd10      	pop	{r4, pc}

08008890 <delay_us>:
#endif


#ifndef EXTF_delay_us
void delay_us(ot_u16 n) {
 8008890:	0003      	movs	r3, r0
    ot_long c;
    c   = (platform_ext.clock_hz[0]>>10);   // Set cycles per ms
 8008892:	4a04      	ldr	r2, [pc, #16]	; (80088a4 <delay_us+0x14>)
 8008894:	6850      	ldr	r0, [r2, #4]
 8008896:	0a80      	lsrs	r0, r0, #10
    c  *= n;                                // Multiply by number of us
 8008898:	4358      	muls	r0, r3
    c >>= 10;                               // Divide into cycles per us
 800889a:	1280      	asrs	r0, r0, #10
    do {
        c -= 7;                         // 7 cycles per loop (measured)
 800889c:	3807      	subs	r0, #7
    } while (c > 0);
 800889e:	2800      	cmp	r0, #0
 80088a0:	dcfc      	bgt.n	800889c <delay_us+0xc>
}
 80088a2:	4770      	bx	lr
 80088a4:	20002df4 	.word	0x20002df4

080088a8 <sub_memcpy_dma>:


#if MCU_CONFIG(MEMCPYDMA)
#   define MEMCPY_DMA_INT  (1 << ((MEMCPY_DMA_CHAN_ID-1)*4))

void sub_memcpy_dma(ot_u8* dest, ot_u8* src, ot_uint length) {
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	0004      	movs	r4, r0
 80088ac:	000e      	movs	r6, r1
 80088ae:	0015      	movs	r5, r2
/// Use 8, 16, or 32 bit chunks based on detected alignment
    static const ot_u16 ccr[4]      = { 0x4AD1, 0x40D1, 0x45D1, 0x40D1 };
    static const ot_u16 len_div[4]  = { 2, 0, 1, 0 };
    ot_int align;

    platform_disable_interrupts();
 80088b0:	f7ff fca4 	bl	80081fc <platform_disable_interrupts>

    MEMCPY_DMACHAN->CCR     = 0;
 80088b4:	4a0f      	ldr	r2, [pc, #60]	; (80088f4 <sub_memcpy_dma+0x4c>)
 80088b6:	2300      	movs	r3, #0
 80088b8:	6013      	str	r3, [r2, #0]
    MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;
 80088ba:	4b0f      	ldr	r3, [pc, #60]	; (80088f8 <sub_memcpy_dma+0x50>)
 80088bc:	2180      	movs	r1, #128	; 0x80
 80088be:	0449      	lsls	r1, r1, #17
 80088c0:	6059      	str	r1, [r3, #4]
    MEMCPY_DMACHAN->CPAR    = (ot_u32)dest;
 80088c2:	6094      	str	r4, [r2, #8]
    MEMCPY_DMACHAN->CMAR    = (ot_u32)src;
 80088c4:	60d6      	str	r6, [r2, #12]
    align                   = ((ot_u32)dest | (ot_u32)src | (ot_u32)length) & 3;
 80088c6:	4334      	orrs	r4, r6
 80088c8:	b2a4      	uxth	r4, r4
 80088ca:	432c      	orrs	r4, r5
 80088cc:	b224      	sxth	r4, r4
 80088ce:	2303      	movs	r3, #3
 80088d0:	401c      	ands	r4, r3
    length                >>= len_div[align];
 80088d2:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <sub_memcpy_dma+0x54>)
 80088d4:	0064      	lsls	r4, r4, #1
 80088d6:	5ae1      	ldrh	r1, [r4, r3]
 80088d8:	410d      	asrs	r5, r1
    MEMCPY_DMACHAN->CNDTR   = length;
 80088da:	042d      	lsls	r5, r5, #16
 80088dc:	0c2d      	lsrs	r5, r5, #16
 80088de:	6055      	str	r5, [r2, #4]
    MEMCPY_DMACHAN->CCR     = ccr[align];
 80088e0:	191c      	adds	r4, r3, r4
 80088e2:	8923      	ldrh	r3, [r4, #8]
 80088e4:	6013      	str	r3, [r2, #0]
    while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 80088e6:	4b04      	ldr	r3, [pc, #16]	; (80088f8 <sub_memcpy_dma+0x50>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	01db      	lsls	r3, r3, #7
 80088ec:	d5fb      	bpl.n	80088e6 <sub_memcpy_dma+0x3e>

    platform_enable_interrupts();
 80088ee:	f7ff fc87 	bl	8008200 <platform_enable_interrupts>
}
 80088f2:	bd70      	pop	{r4, r5, r6, pc}
 80088f4:	40020080 	.word	0x40020080
 80088f8:	40020000 	.word	0x40020000
 80088fc:	0800b450 	.word	0x0800b450

08008900 <sub_memcpy4_dma>:

    platform_enable_interrupts();
}


void sub_memcpy4_dma(ot_u32* dest, ot_u32* src, ot_uint length) {
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	0006      	movs	r6, r0
 8008904:	000d      	movs	r5, r1
 8008906:	0014      	movs	r4, r2
/// 32 bit chunks based on detected alignment
    platform_disable_interrupts();
 8008908:	f7ff fc78 	bl	80081fc <platform_disable_interrupts>

    MEMCPY_DMACHAN->CCR     = 0;
 800890c:	4b09      	ldr	r3, [pc, #36]	; (8008934 <sub_memcpy4_dma+0x34>)
 800890e:	2200      	movs	r2, #0
 8008910:	601a      	str	r2, [r3, #0]
    MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;
 8008912:	4a09      	ldr	r2, [pc, #36]	; (8008938 <sub_memcpy4_dma+0x38>)
 8008914:	2180      	movs	r1, #128	; 0x80
 8008916:	0449      	lsls	r1, r1, #17
 8008918:	6051      	str	r1, [r2, #4]
    MEMCPY_DMACHAN->CPAR    = (ot_u32)dest;
 800891a:	609e      	str	r6, [r3, #8]
    MEMCPY_DMACHAN->CMAR    = (ot_u32)src;
 800891c:	60dd      	str	r5, [r3, #12]
    MEMCPY_DMACHAN->CNDTR   = length;
 800891e:	605c      	str	r4, [r3, #4]
    MEMCPY_DMACHAN->CCR     = 0x4AD1;
 8008920:	4a06      	ldr	r2, [pc, #24]	; (800893c <sub_memcpy4_dma+0x3c>)
 8008922:	601a      	str	r2, [r3, #0]
    while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 8008924:	4b04      	ldr	r3, [pc, #16]	; (8008938 <sub_memcpy4_dma+0x38>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	01db      	lsls	r3, r3, #7
 800892a:	d5fb      	bpl.n	8008924 <sub_memcpy4_dma+0x24>

    platform_enable_interrupts();
 800892c:	f7ff fc68 	bl	8008200 <platform_enable_interrupts>
}
 8008930:	bd70      	pop	{r4, r5, r6, pc}
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	40020080 	.word	0x40020080
 8008938:	40020000 	.word	0x40020000
 800893c:	00004ad1 	.word	0x00004ad1

08008940 <ot_memcpy>:
#endif  //MCU_CONFIG(MEMCPYDMA)




void ot_memcpy(ot_u8* dst, ot_u8* src, ot_uint length) {
 8008940:	b510      	push	{r4, lr}
    if (length != 0) {
 8008942:	2a00      	cmp	r2, #0
 8008944:	d100      	bne.n	8008948 <ot_memcpy+0x8>
        sub_memcpy_dma(dst, src, length);
#       else
        DUFF_DEVICE_8(*dst++, *src++, length);
#       endif
    }
}
 8008946:	bd10      	pop	{r4, pc}
        sub_memcpy_dma(dst, src, length);
 8008948:	f7ff ffae 	bl	80088a8 <sub_memcpy_dma>
}
 800894c:	e7fb      	b.n	8008946 <ot_memcpy+0x6>

0800894e <ot_memcpy_4>:
        ot_memcpy((ot_u8*)dst, (ot_u8*)src, length<<1);
#       endif
    }
}

void ot_memcpy_4(ot_u32* dst, ot_u32* src, ot_uint length) {
 800894e:	b510      	push	{r4, lr}
    if (length != 0) {
 8008950:	2a00      	cmp	r2, #0
 8008952:	d100      	bne.n	8008956 <ot_memcpy_4+0x8>
        sub_memcpy4_dma( dst, src, length);
#       else
        ot_memcpy((ot_u8*)dst, (ot_u8*)src, length<<2);
#       endif
    }
}
 8008954:	bd10      	pop	{r4, pc}
        sub_memcpy4_dma( dst, src, length);
 8008956:	f7ff ffd3 	bl	8008900 <sub_memcpy4_dma>
}
 800895a:	e7fb      	b.n	8008954 <ot_memcpy_4+0x6>

0800895c <ot_memset>:


void ot_memset(ot_u8* dst, ot_u8 value, ot_uint length) {
 800895c:	b530      	push	{r4, r5, lr}
 800895e:	b083      	sub	sp, #12
 8008960:	0005      	movs	r5, r0
 8008962:	1e14      	subs	r4, r2, #0
 8008964:	466b      	mov	r3, sp
 8008966:	71d9      	strb	r1, [r3, #7]
    if (length != 0) {
 8008968:	d101      	bne.n	800896e <ot_memset+0x12>
#       else
        DUFF_DEVICE_8(*dst++, value, length);
#       endif
        platform_enable_interrupts();
    }
}
 800896a:	b003      	add	sp, #12
 800896c:	bd30      	pop	{r4, r5, pc}
        platform_disable_interrupts();
 800896e:	f7ff fc45 	bl	80081fc <platform_disable_interrupts>
        MEMCPY_DMACHAN->CCR     = 0;
 8008972:	4b0a      	ldr	r3, [pc, #40]	; (800899c <ot_memset+0x40>)
 8008974:	2200      	movs	r2, #0
 8008976:	601a      	str	r2, [r3, #0]
        MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;       ///@todo see if this can be globalized
 8008978:	4a09      	ldr	r2, [pc, #36]	; (80089a0 <ot_memset+0x44>)
 800897a:	2180      	movs	r1, #128	; 0x80
 800897c:	0449      	lsls	r1, r1, #17
 800897e:	6051      	str	r1, [r2, #4]
        MEMCPY_DMACHAN->CPAR    = (ot_u32)dst;
 8008980:	609d      	str	r5, [r3, #8]
        MEMCPY_DMACHAN->CMAR    = (ot_u32)&value;
 8008982:	466a      	mov	r2, sp
 8008984:	3207      	adds	r2, #7
 8008986:	60da      	str	r2, [r3, #12]
        MEMCPY_DMACHAN->CNDTR   = length;
 8008988:	605c      	str	r4, [r3, #4]
        MEMCPY_DMACHAN->CCR     = DMA_CCR_DIR      | DMA_CCR_PINC     | \
 800898a:	4a06      	ldr	r2, [pc, #24]	; (80089a4 <ot_memset+0x48>)
 800898c:	601a      	str	r2, [r3, #0]
        while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 800898e:	4b04      	ldr	r3, [pc, #16]	; (80089a0 <ot_memset+0x44>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	01db      	lsls	r3, r3, #7
 8008994:	d5fb      	bpl.n	800898e <ot_memset+0x32>
        platform_enable_interrupts();
 8008996:	f7ff fc33 	bl	8008200 <platform_enable_interrupts>
}
 800899a:	e7e6      	b.n	800896a <ot_memset+0xe>
 800899c:	40020080 	.word	0x40020080
 80089a0:	40020000 	.word	0x40020000
 80089a4:	00004051 	.word	0x00004051

080089a8 <ot_memset_4>:

void ot_memset_2(ot_u16* dst, ot_u16 value, ot_uint length) {
    ot_memset( (ot_u8*)dst, (ot_u8)value, length<<1 );
}

void ot_memset_4(ot_u32* dst, ot_u32 value, ot_uint length) {
 80089a8:	b510      	push	{r4, lr}
    ot_memset( (ot_u8*)dst, (ot_u8)value, length<<2 );
 80089aa:	0092      	lsls	r2, r2, #2
 80089ac:	b292      	uxth	r2, r2
 80089ae:	b2c9      	uxtb	r1, r1
 80089b0:	f7ff ffd4 	bl	800895c <ot_memset>
}
 80089b4:	bd10      	pop	{r4, pc}
	...

080089b8 <rand_prn16>:
    return (ot_u8)rand_prn16();
}



ot_u16 rand_prn16() {
 80089b8:	b510      	push	{r4, lr}
    static ot_u16 _prn_freg;
    _prn_freg ^= LPTIM1->CNT;
 80089ba:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <rand_prn16+0x18>)
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	4805      	ldr	r0, [pc, #20]	; (80089d4 <rand_prn16+0x1c>)
 80089c0:	8802      	ldrh	r2, [r0, #0]
 80089c2:	405a      	eors	r2, r3
 80089c4:	b292      	uxth	r2, r2
 80089c6:	8002      	strh	r2, [r0, #0]
    return crc16drv_block_manual( (ot_u8*)&_prn_freg, 2, _prn_freg );
 80089c8:	2102      	movs	r1, #2
 80089ca:	f7fe fa8f 	bl	8006eec <crc16drv_block_manual>
}
 80089ce:	bd10      	pop	{r4, pc}
 80089d0:	40007c00 	.word	0x40007c00
 80089d4:	200011f4 	.word	0x200011f4

080089d8 <rand_prn8>:
ot_u8 rand_prn8() {
 80089d8:	b510      	push	{r4, lr}
    return (ot_u8)rand_prn16();
 80089da:	f7ff ffed 	bl	80089b8 <rand_prn16>
 80089de:	b2c0      	uxtb	r0, r0
}
 80089e0:	bd10      	pop	{r4, pc}
	...

080089e4 <sub_mpipe_open>:


void sub_mpipe_open() {
    ot_u32 scratch;
    __SYS_CLKON();
    __UART_CLKON();
 80089e4:	4a07      	ldr	r2, [pc, #28]	; (8008a04 <sub_mpipe_open+0x20>)
 80089e6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80089e8:	2380      	movs	r3, #128	; 0x80
 80089ea:	01db      	lsls	r3, r3, #7
 80089ec:	430b      	orrs	r3, r1
 80089ee:	6353      	str	r3, [r2, #52]	; 0x34

    scratch                 = BOARD_UART_PORT->MODER;
 80089f0:	21a0      	movs	r1, #160	; 0xa0
 80089f2:	05c9      	lsls	r1, r1, #23
 80089f4:	680b      	ldr	r3, [r1, #0]
    scratch                &= ~((3 << (BOARD_UART_TXPINNUM*2)) | (3 << (BOARD_UART_RXPINNUM*2)));
 80089f6:	4a04      	ldr	r2, [pc, #16]	; (8008a08 <sub_mpipe_open+0x24>)
 80089f8:	401a      	ands	r2, r3
    scratch                |= (2 << (BOARD_UART_TXPINNUM*2)) | (2 << (BOARD_UART_RXPINNUM*2));
 80089fa:	23a0      	movs	r3, #160	; 0xa0
 80089fc:	039b      	lsls	r3, r3, #14
 80089fe:	4313      	orrs	r3, r2
    BOARD_UART_PORT->MODER  = scratch;
 8008a00:	600b      	str	r3, [r1, #0]
}
 8008a02:	4770      	bx	lr
 8008a04:	40021000 	.word	0x40021000
 8008a08:	ffc3ffff 	.word	0xffc3ffff

08008a0c <sub_mpipe_close>:

void sub_mpipe_close() {
    ot_u32 scratch          = BOARD_UART_PORT->MODER;
 8008a0c:	21a0      	movs	r1, #160	; 0xa0
 8008a0e:	05c9      	lsls	r1, r1, #23
 8008a10:	680b      	ldr	r3, [r1, #0]
    scratch                &= ~((3 << (BOARD_UART_TXPINNUM*2)) | (3 << (BOARD_UART_RXPINNUM*2)));
 8008a12:	4a10      	ldr	r2, [pc, #64]	; (8008a54 <sub_mpipe_close+0x48>)
 8008a14:	401a      	ands	r2, r3
    scratch                |= (1 << (BOARD_UART_TXPINNUM*2)) | (0 << (BOARD_UART_RXPINNUM*2));
 8008a16:	2380      	movs	r3, #128	; 0x80
 8008a18:	02db      	lsls	r3, r3, #11
 8008a1a:	4313      	orrs	r3, r2
    BOARD_UART_PORT->MODER  = scratch;
 8008a1c:	600b      	str	r3, [r1, #0]

    __DMA_ALL_CLOSE();
 8008a1e:	4a0e      	ldr	r2, [pc, #56]	; (8008a58 <sub_mpipe_close+0x4c>)
 8008a20:	6813      	ldr	r3, [r2, #0]
 8008a22:	490e      	ldr	r1, [pc, #56]	; (8008a5c <sub_mpipe_close+0x50>)
 8008a24:	400b      	ands	r3, r1
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	2300      	movs	r3, #0
 8008a2a:	4a0d      	ldr	r2, [pc, #52]	; (8008a60 <sub_mpipe_close+0x54>)
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	4a0d      	ldr	r2, [pc, #52]	; (8008a64 <sub_mpipe_close+0x58>)
 8008a30:	6013      	str	r3, [r2, #0]
    __DMA_ALL_CLEAR();
 8008a32:	4a0d      	ldr	r2, [pc, #52]	; (8008a68 <sub_mpipe_close+0x5c>)
 8008a34:	21ff      	movs	r1, #255	; 0xff
 8008a36:	0309      	lsls	r1, r1, #12
 8008a38:	6051      	str	r1, [r2, #4]
    __DMA_CLKOFF();
    __UART_CLOSE();
 8008a3a:	4a0c      	ldr	r2, [pc, #48]	; (8008a6c <sub_mpipe_close+0x60>)
 8008a3c:	6013      	str	r3, [r2, #0]
    __UART_CLEAR();
 8008a3e:	490c      	ldr	r1, [pc, #48]	; (8008a70 <sub_mpipe_close+0x64>)
 8008a40:	6211      	str	r1, [r2, #32]
    __UART_CLKOFF();
 8008a42:	490c      	ldr	r1, [pc, #48]	; (8008a74 <sub_mpipe_close+0x68>)
 8008a44:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8008a46:	480c      	ldr	r0, [pc, #48]	; (8008a78 <sub_mpipe_close+0x6c>)
 8008a48:	4002      	ands	r2, r0
 8008a4a:	634a      	str	r2, [r1, #52]	; 0x34

    //__DISMISS_FULL_SPEED();
    __CLR_MPIPE();
 8008a4c:	4a0b      	ldr	r2, [pc, #44]	; (8008a7c <sub_mpipe_close+0x70>)
 8008a4e:	7013      	strb	r3, [r2, #0]
}
 8008a50:	4770      	bx	lr
 8008a52:	46c0      	nop			; (mov r8, r8)
 8008a54:	ffc3ffff 	.word	0xffc3ffff
 8008a58:	400200a8 	.word	0x400200a8
 8008a5c:	fff00fff 	.word	0xfff00fff
 8008a60:	40020044 	.word	0x40020044
 8008a64:	40020058 	.word	0x40020058
 8008a68:	40020000 	.word	0x40020000
 8008a6c:	40013800 	.word	0x40013800
 8008a70:	00121b5f 	.word	0x00121b5f
 8008a74:	40021000 	.word	0x40021000
 8008a78:	ffffbfff 	.word	0xffffbfff
 8008a7c:	20002d90 	.word	0x20002d90

08008a80 <mpipe_rxsync_isr>:
  * These are DMA ISRs.  They are macros which are defined in this file, above.
  * In STM32, each DMA channel has its own IRQ, and each peripheral has mapping
  * to different channels.
  */

void mpipe_rxsync_isr(void) {
 8008a80:	b510      	push	{r4, lr}
    // Falling edge ISR on RX line, which can wakeup from stop
    EXTI->IMR  &= ~MPIPE_UART_RXPIN;
#   endif

    // Open UART for character-RX
    mpipe.state = MPIPE_Idle;
 8008a82:	2400      	movs	r4, #0
 8008a84:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <mpipe_rxsync_isr+0x1c>)
 8008a86:	701c      	strb	r4, [r3, #0]
    // mpipeevt_rxinit();       ///@todo see if there's a point here
    sub_mpipe_open();
 8008a88:	f7ff ffac 	bl	80089e4 <sub_mpipe_open>
    __UART_RXOPEN();
 8008a8c:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <mpipe_rxsync_isr+0x20>)
 8008a8e:	601c      	str	r4, [r3, #0]
 8008a90:	4a04      	ldr	r2, [pc, #16]	; (8008aa4 <mpipe_rxsync_isr+0x24>)
 8008a92:	621a      	str	r2, [r3, #32]
 8008a94:	2225      	movs	r2, #37	; 0x25
 8008a96:	601a      	str	r2, [r3, #0]
}
 8008a98:	bd10      	pop	{r4, pc}
 8008a9a:	46c0      	nop			; (mov r8, r8)
 8008a9c:	20002d90 	.word	0x20002d90
 8008aa0:	40013800 	.word	0x40013800
 8008aa4:	00121b5f 	.word	0x00121b5f

08008aa8 <mpipedrv_init>:
}
#endif


#ifndef EXTF_mpipedrv_init
ot_int mpipedrv_init(void* port_id, mpipe_speed baud_rate) {
 8008aa8:	b570      	push	{r4, r5, r6, lr}
/// 1. "port_id" is unused in this impl, and it may be NULL
/// 2. Prepare the HW, which in this case is a UART
/// 3. Set default speed, which in this case is 115200 bps

    /// Basic setup for MPIPE-UART, with preset bps and sync detection
    mpipe.state     = MPIPE_Null;
 8008aaa:	4b29      	ldr	r3, [pc, #164]	; (8008b50 <mpipedrv_init+0xa8>)
 8008aac:	22ff      	movs	r2, #255	; 0xff
 8008aae:	701a      	strb	r2, [r3, #0]
    uart.baudrate   = (baud_rate == MPIPE_default) ? _DEF_MPIPEBAUD : baud_rate;
 8008ab0:	1c4b      	adds	r3, r1, #1
 8008ab2:	d04b      	beq.n	8008b4c <mpipedrv_init+0xa4>
 8008ab4:	4c27      	ldr	r4, [pc, #156]	; (8008b54 <mpipedrv_init+0xac>)
 8008ab6:	7021      	strb	r1, [r4, #0]

    /// UART Setup (RX & TX setup takes place at time of startup)
    __UART_CLKON();
 8008ab8:	4d27      	ldr	r5, [pc, #156]	; (8008b58 <mpipedrv_init+0xb0>)
 8008aba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008abc:	2380      	movs	r3, #128	; 0x80
 8008abe:	01db      	lsls	r3, r3, #7
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	636b      	str	r3, [r5, #52]	; 0x34
    MPIPE_UART->BRR = __UART_CLKHZ() / _brtable[uart.baudrate];
 8008ac4:	2002      	movs	r0, #2
 8008ac6:	f7ff fb61 	bl	800818c <platform_get_clockhz>
 8008aca:	2300      	movs	r3, #0
 8008acc:	56e3      	ldrsb	r3, [r4, r3]
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4a22      	ldr	r2, [pc, #136]	; (8008b5c <mpipedrv_init+0xb4>)
 8008ad2:	5899      	ldr	r1, [r3, r2]
 8008ad4:	f7f7 fb18 	bl	8000108 <__udivsi3>
 8008ad8:	4b21      	ldr	r3, [pc, #132]	; (8008b60 <mpipedrv_init+0xb8>)
 8008ada:	60d8      	str	r0, [r3, #12]
    MPIPE_UART->CR3 = USART_CR3_DMAR | USART_CR3_DMAT;
 8008adc:	22c0      	movs	r2, #192	; 0xc0
 8008ade:	609a      	str	r2, [r3, #8]
    MPIPE_UART->CR2 = 0;
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	605a      	str	r2, [r3, #4]
    MPIPE_UART->CR1 = 0;
 8008ae4:	601a      	str	r2, [r3, #0]
    __UART_CLKOFF();
 8008ae6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008ae8:	4a1e      	ldr	r2, [pc, #120]	; (8008b64 <mpipedrv_init+0xbc>)
 8008aea:	4013      	ands	r3, r2
 8008aec:	636b      	str	r3, [r5, #52]	; 0x34

    /// Set up DMA channels for RX and TX
    _DMARX->CPAR    = (uint32_t)&(MPIPE_UART->RDR);
 8008aee:	4b1e      	ldr	r3, [pc, #120]	; (8008b68 <mpipedrv_init+0xc0>)
 8008af0:	4a1e      	ldr	r2, [pc, #120]	; (8008b6c <mpipedrv_init+0xc4>)
 8008af2:	609a      	str	r2, [r3, #8]
    _DMATX->CPAR    = (uint32_t)&(MPIPE_UART->TDR);
 8008af4:	4b1e      	ldr	r3, [pc, #120]	; (8008b70 <mpipedrv_init+0xc8>)
 8008af6:	4a1f      	ldr	r2, [pc, #124]	; (8008b74 <mpipedrv_init+0xcc>)
 8008af8:	609a      	str	r2, [r3, #8]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008afa:	4b1f      	ldr	r3, [pc, #124]	; (8008b78 <mpipedrv_init+0xd0>)
 8008afc:	20c2      	movs	r0, #194	; 0xc2
 8008afe:	0080      	lsls	r0, r0, #2
 8008b00:	581a      	ldr	r2, [r3, r0]
 8008b02:	0212      	lsls	r2, r2, #8
 8008b04:	0a12      	lsrs	r2, r2, #8
 8008b06:	2180      	movs	r1, #128	; 0x80
 8008b08:	05c9      	lsls	r1, r1, #23
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b0e:	2580      	movs	r5, #128	; 0x80
 8008b10:	012d      	lsls	r5, r5, #4
 8008b12:	601d      	str	r5, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008b14:	581a      	ldr	r2, [r3, r0]
 8008b16:	0212      	lsls	r2, r2, #8
 8008b18:	0a12      	lsrs	r2, r2, #8
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b1e:	601d      	str	r5, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008b20:	3010      	adds	r0, #16
 8008b22:	581a      	ldr	r2, [r3, r0]
 8008b24:	0212      	lsls	r2, r2, #8
 8008b26:	0a12      	lsrs	r2, r2, #8
 8008b28:	4311      	orrs	r1, r2
 8008b2a:	5019      	str	r1, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b2c:	2280      	movs	r2, #128	; 0x80
 8008b2e:	0512      	lsls	r2, r2, #20
 8008b30:	601a      	str	r2, [r3, #0]
        EXTI->RTSR |= MPIPE_UART_RXPIN;
#   endif

    /// Configure MPipe Queues
    /// @todo this will need to be adjusted in the final version
    alp_init(&mpipe.alp, &otmpin, &otmpout);
 8008b32:	4a12      	ldr	r2, [pc, #72]	; (8008b7c <mpipedrv_init+0xd4>)
 8008b34:	4912      	ldr	r1, [pc, #72]	; (8008b80 <mpipedrv_init+0xd8>)
 8008b36:	4813      	ldr	r0, [pc, #76]	; (8008b84 <mpipedrv_init+0xdc>)
 8008b38:	f7fe f8cc 	bl	8006cd4 <alp_init>
    
    /// Initial values for Ring Buffer
    memset(&uart.tlist, 0, sizeof(uart_rb_t));
 8008b3c:	0020      	movs	r0, r4
 8008b3e:	305c      	adds	r0, #92	; 0x5c
 8008b40:	2244      	movs	r2, #68	; 0x44
 8008b42:	2100      	movs	r1, #0
 8008b44:	f7ff ff0a 	bl	800895c <ot_memset>
    
    return 255;
}
 8008b48:	20ff      	movs	r0, #255	; 0xff
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
    uart.baudrate   = (baud_rate == MPIPE_default) ? _DEF_MPIPEBAUD : baud_rate;
 8008b4c:	3104      	adds	r1, #4
 8008b4e:	e7b1      	b.n	8008ab4 <mpipedrv_init+0xc>
 8008b50:	20002d90 	.word	0x20002d90
 8008b54:	20003208 	.word	0x20003208
 8008b58:	40021000 	.word	0x40021000
 8008b5c:	0800b48c 	.word	0x0800b48c
 8008b60:	40013800 	.word	0x40013800
 8008b64:	ffffbfff 	.word	0xffffbfff
 8008b68:	40020058 	.word	0x40020058
 8008b6c:	40013824 	.word	0x40013824
 8008b70:	40020044 	.word	0x40020044
 8008b74:	40013828 	.word	0x40013828
 8008b78:	e000e100 	.word	0xe000e100
 8008b7c:	20002740 	.word	0x20002740
 8008b80:	20002d7c 	.word	0x20002d7c
 8008b84:	20002d94 	.word	0x20002d94

08008b88 <mpipedrv_getpwrcode>:


#ifndef EXTF_mpipedrv_getpwrcode
ot_u8 mpipedrv_getpwrcode() {
/// Power code: 0-3.  For this MPipe impl it's always 1 or 2
    return 1 + (mpipe.state < 0);
 8008b88:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <mpipedrv_getpwrcode+0x14>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	b25b      	sxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	db01      	blt.n	8008b96 <mpipedrv_getpwrcode+0xe>
 8008b92:	2001      	movs	r0, #1
}
 8008b94:	4770      	bx	lr
    return 1 + (mpipe.state < 0);
 8008b96:	2002      	movs	r0, #2
 8008b98:	e7fc      	b.n	8008b94 <mpipedrv_getpwrcode+0xc>
 8008b9a:	46c0      	nop			; (mov r8, r8)
 8008b9c:	20002d90 	.word	0x20002d90

08008ba0 <mpipedrv_standby>:
#endif


#ifndef EXTF_mpipedrv_standby
void mpipedrv_standby() {
}
 8008ba0:	4770      	bx	lr
	...

08008ba4 <mpipedrv_unblock>:


#ifndef EXTF_mpipedrv_unblock
///@todo Check if this function gets used, and how.
void mpipedrv_unblock() {
    if (mpipe.state == MPIPE_Null) {
 8008ba4:	4b04      	ldr	r3, [pc, #16]	; (8008bb8 <mpipedrv_unblock+0x14>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	b25b      	sxtb	r3, r3
 8008baa:	3301      	adds	r3, #1
 8008bac:	d000      	beq.n	8008bb0 <mpipedrv_unblock+0xc>
        mpipe.state = MPIPE_Idle;
    }
}
 8008bae:	4770      	bx	lr
        mpipe.state = MPIPE_Idle;
 8008bb0:	4b01      	ldr	r3, [pc, #4]	; (8008bb8 <mpipedrv_unblock+0x14>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	701a      	strb	r2, [r3, #0]
}
 8008bb6:	e7fa      	b.n	8008bae <mpipedrv_unblock+0xa>
 8008bb8:	20002d90 	.word	0x20002d90

08008bbc <mpipedrv_kill>:
#endif


#ifndef EXTF_mpipedrv_kill
void mpipedrv_kill() {
 8008bbc:	b510      	push	{r4, lr}
    // Close down the peripheral
    sub_mpipe_close();
 8008bbe:	f7ff ff25 	bl	8008a0c <sub_mpipe_close>

    // Clear the TX queue
    ///@note I just commented-out this on 20 Sept
	//q_empty(mpipe.alp.outq);
}
 8008bc2:	bd10      	pop	{r4, pc}

08008bc4 <sub_txopen>:
#endif




void sub_txopen() {
 8008bc4:	b570      	push	{r4, r5, r6, lr}
    uart_element_t*  txpayload;
    
    txpayload           = &uart.tlist.rb[uart.tlist.i];
 8008bc6:	4c21      	ldr	r4, [pc, #132]	; (8008c4c <sub_txopen+0x88>)
 8008bc8:	239e      	movs	r3, #158	; 0x9e
 8008bca:	5ce5      	ldrb	r5, [r4, r3]

    /// Build Header
    uart.header.syncFF  = 0xff;
 8008bcc:	3361      	adds	r3, #97	; 0x61
 8008bce:	7423      	strb	r3, [r4, #16]
    uart.header.sync55  = 0x55;
 8008bd0:	3baa      	subs	r3, #170	; 0xaa
 8008bd2:	7463      	strb	r3, [r4, #17]
    
    // Always include CRC on TX
    uart.header.plen    = PLATFORM_ENDIAN16(txpayload->length);
 8008bd4:	350b      	adds	r5, #11
 8008bd6:	00ed      	lsls	r5, r5, #3
 8008bd8:	1965      	adds	r5, r4, r5
 8008bda:	892b      	ldrh	r3, [r5, #8]
  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8008bdc:	ba5b      	rev16	r3, r3
 8008bde:	82a3      	strh	r3, [r4, #20]
    uart.header.ctl     = 0;
 8008be0:	2600      	movs	r6, #0
 8008be2:	75e6      	strb	r6, [r4, #23]
    uart.header.seq    += 1;
 8008be4:	7da3      	ldrb	r3, [r4, #22]
 8008be6:	3301      	adds	r3, #1
 8008be8:	75a3      	strb	r3, [r4, #22]
    
    uart.header.crc16   = crc16drv_block_manual((ot_u8*)&uart.header.plen, 4, 0xFFFF);
 8008bea:	0020      	movs	r0, r4
 8008bec:	3014      	adds	r0, #20
 8008bee:	4a18      	ldr	r2, [pc, #96]	; (8008c50 <sub_txopen+0x8c>)
 8008bf0:	2104      	movs	r1, #4
 8008bf2:	f7fe f97b 	bl	8006eec <crc16drv_block_manual>
 8008bf6:	0002      	movs	r2, r0
 8008bf8:	8260      	strh	r0, [r4, #18]
    uart.header.crc16   = crc16drv_block_manual(txpayload->front, txpayload->length, uart.header.crc16);
 8008bfa:	2308      	movs	r3, #8
 8008bfc:	5ee9      	ldrsh	r1, [r5, r3]
 8008bfe:	6868      	ldr	r0, [r5, #4]
 8008c00:	f7fe f974 	bl	8006eec <crc16drv_block_manual>
 8008c04:	ba40      	rev16	r0, r0
    uart.header.crc16   = PLATFORM_ENDIAN16(uart.header.crc16);
 8008c06:	8260      	strh	r0, [r4, #18]

    sub_mpipe_close();
 8008c08:	f7ff ff00 	bl	8008a0c <sub_mpipe_close>
    sub_mpipe_open();
 8008c0c:	f7ff feea 	bl	80089e4 <sub_mpipe_open>
    mpipe.state = MPIPE_Tx_Wait;
 8008c10:	4b10      	ldr	r3, [pc, #64]	; (8008c54 <sub_txopen+0x90>)
 8008c12:	2205      	movs	r2, #5
 8008c14:	701a      	strb	r2, [r3, #0]
    __UART_TXOPEN();
 8008c16:	4b10      	ldr	r3, [pc, #64]	; (8008c58 <sub_txopen+0x94>)
 8008c18:	601e      	str	r6, [r3, #0]
 8008c1a:	4a10      	ldr	r2, [pc, #64]	; (8008c5c <sub_txopen+0x98>)
 8008c1c:	621a      	str	r2, [r3, #32]
 8008c1e:	2209      	movs	r2, #9
 8008c20:	601a      	str	r2, [r3, #0]
    __DMA_TXOPEN(&uart.header.syncFF, 8);
 8008c22:	4b0f      	ldr	r3, [pc, #60]	; (8008c60 <sub_txopen+0x9c>)
 8008c24:	601e      	str	r6, [r3, #0]
 8008c26:	3410      	adds	r4, #16
 8008c28:	60dc      	str	r4, [r3, #12]
 8008c2a:	3a01      	subs	r2, #1
 8008c2c:	605a      	str	r2, [r3, #4]
 8008c2e:	4a0d      	ldr	r2, [pc, #52]	; (8008c64 <sub_txopen+0xa0>)
 8008c30:	21ff      	movs	r1, #255	; 0xff
 8008c32:	0309      	lsls	r1, r1, #12
 8008c34:	6051      	str	r1, [r2, #4]
 8008c36:	480c      	ldr	r0, [pc, #48]	; (8008c68 <sub_txopen+0xa4>)
 8008c38:	6802      	ldr	r2, [r0, #0]
 8008c3a:	490c      	ldr	r1, [pc, #48]	; (8008c6c <sub_txopen+0xa8>)
 8008c3c:	4011      	ands	r1, r2
 8008c3e:	22c0      	movs	r2, #192	; 0xc0
 8008c40:	0192      	lsls	r2, r2, #6
 8008c42:	430a      	orrs	r2, r1
 8008c44:	6002      	str	r2, [r0, #0]
 8008c46:	4a0a      	ldr	r2, [pc, #40]	; (8008c70 <sub_txopen+0xac>)
 8008c48:	601a      	str	r2, [r3, #0]
}
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}
 8008c4c:	20003208 	.word	0x20003208
 8008c50:	0000ffff 	.word	0x0000ffff
 8008c54:	20002d90 	.word	0x20002d90
 8008c58:	40013800 	.word	0x40013800
 8008c5c:	00121b5f 	.word	0x00121b5f
 8008c60:	40020044 	.word	0x40020044
 8008c64:	40020000 	.word	0x40020000
 8008c68:	400200a8 	.word	0x400200a8
 8008c6c:	fff00fff 	.word	0xfff00fff
 8008c70:	00002093 	.word	0x00002093

08008c74 <sub_txcont>:


void sub_txcont() {
    uart_element_t* txpayload;
    txpayload           = &uart.tlist.rb[uart.tlist.i];
 8008c74:	4b0f      	ldr	r3, [pc, #60]	; (8008cb4 <sub_txcont+0x40>)
 8008c76:	229e      	movs	r2, #158	; 0x9e
 8008c78:	5c9a      	ldrb	r2, [r3, r2]
    _DMATX->CCR         = 0;
 8008c7a:	490f      	ldr	r1, [pc, #60]	; (8008cb8 <sub_txcont+0x44>)
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	6008      	str	r0, [r1, #0]
    _DMATX->CMAR        = (uint32_t)txpayload->front;   
 8008c80:	320b      	adds	r2, #11
 8008c82:	00d2      	lsls	r2, r2, #3
 8008c84:	189b      	adds	r3, r3, r2
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	60ca      	str	r2, [r1, #12]
    _DMATX->CNDTR       = txpayload->length + MPIPE_DMAFLUFF;
 8008c8a:	891b      	ldrh	r3, [r3, #8]
 8008c8c:	604b      	str	r3, [r1, #4]
    DMA1->IFCR          = (_DMARX_IFG | _DMATX_IFG);
 8008c8e:	4b0b      	ldr	r3, [pc, #44]	; (8008cbc <sub_txcont+0x48>)
 8008c90:	22ff      	movs	r2, #255	; 0xff
 8008c92:	0312      	lsls	r2, r2, #12
 8008c94:	605a      	str	r2, [r3, #4]
    DMA1_CSELR->CSELR   = (DMA1_CSELR->CSELR & ~_DMA_CSEL_MASK) | _DMATX_CSEL;
 8008c96:	480a      	ldr	r0, [pc, #40]	; (8008cc0 <sub_txcont+0x4c>)
 8008c98:	6803      	ldr	r3, [r0, #0]
 8008c9a:	4a0a      	ldr	r2, [pc, #40]	; (8008cc4 <sub_txcont+0x50>)
 8008c9c:	401a      	ands	r2, r3
 8008c9e:	23c0      	movs	r3, #192	; 0xc0
 8008ca0:	019b      	lsls	r3, r3, #6
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	6003      	str	r3, [r0, #0]
    __UART_CLEAR();
 8008ca6:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <sub_txcont+0x54>)
 8008ca8:	4a08      	ldr	r2, [pc, #32]	; (8008ccc <sub_txcont+0x58>)
 8008caa:	621a      	str	r2, [r3, #32]
    _DMATX->CCR         = (DMA_CCR_DIR | DMA_CCR_MINC | (2<<DMA_CCR_PL_Pos) | DMA_CCR_TCIE | DMA_CCR_EN);
 8008cac:	4b08      	ldr	r3, [pc, #32]	; (8008cd0 <sub_txcont+0x5c>)
 8008cae:	600b      	str	r3, [r1, #0]
}
 8008cb0:	4770      	bx	lr
 8008cb2:	46c0      	nop			; (mov r8, r8)
 8008cb4:	20003208 	.word	0x20003208
 8008cb8:	40020044 	.word	0x40020044
 8008cbc:	40020000 	.word	0x40020000
 8008cc0:	400200a8 	.word	0x400200a8
 8008cc4:	fff00fff 	.word	0xfff00fff
 8008cc8:	40013800 	.word	0x40013800
 8008ccc:	00121b5f 	.word	0x00121b5f
 8008cd0:	00002093 	.word	0x00002093

08008cd4 <mpipedrv_tx>:



#ifndef EXTF_mpipedrv_tx
ot_int mpipedrv_tx(ot_bool blocking, mpipe_priority data_priority) {
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	0005      	movs	r5, r0
        goto mpipedrv_tx_GO;
    }
    ///@todo In this space, swap to the standard mpipe queue
#   endif

    holdtime = q_blocktime(mpipe.alp.outq);
 8008cd8:	4b20      	ldr	r3, [pc, #128]	; (8008d5c <mpipedrv_tx+0x88>)
 8008cda:	6918      	ldr	r0, [r3, #16]
 8008cdc:	f7fe f9cd 	bl	800707a <q_blocktime>
    if (holdtime != 0) {
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d002      	beq.n	8008cea <mpipedrv_tx+0x16>
        return -holdtime;
 8008ce4:	4240      	negs	r0, r0
 8008ce6:	b200      	sxth	r0, r0
    /// Purpose here is to continue blocking the queue until the
    /// most recently added packet (last packet) is sent.
    q_blockwrite(mpipe.alp.outq, blocking ? holdtime : 0);
    
    return holdtime;
}
 8008ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    holdtime                    = __MPIPE_TIMEOUT(q_length(mpipe.alp.outq));
 8008cea:	4e1c      	ldr	r6, [pc, #112]	; (8008d5c <mpipedrv_tx+0x88>)
 8008cec:	6930      	ldr	r0, [r6, #16]
 8008cee:	f7fe f9b0 	bl	8007052 <q_length>
 8008cf2:	3008      	adds	r0, #8
 8008cf4:	10c0      	asrs	r0, r0, #3
 8008cf6:	b280      	uxth	r0, r0
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	b284      	uxth	r4, r0
    uart.tlist.size            += 1;
 8008cfc:	4f18      	ldr	r7, [pc, #96]	; (8008d60 <mpipedrv_tx+0x8c>)
 8008cfe:	219d      	movs	r1, #157	; 0x9d
 8008d00:	5c7b      	ldrb	r3, [r7, r1]
 8008d02:	3301      	adds	r3, #1
 8008d04:	547b      	strb	r3, [r7, r1]
    uart.tlist.j                = (uart.tlist.j + 1) & (UART_RB_MAX-1);
 8008d06:	3102      	adds	r1, #2
 8008d08:	5c7b      	ldrb	r3, [r7, r1]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	2007      	movs	r0, #7
 8008d0e:	4003      	ands	r3, r0
 8008d10:	547b      	strb	r3, [r7, r1]
    txpayload->front            = mpipe.alp.outq->getcursor;
 8008d12:	6930      	ldr	r0, [r6, #16]
 8008d14:	330b      	adds	r3, #11
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	18ff      	adds	r7, r7, r3
 8008d1a:	6843      	ldr	r3, [r0, #4]
 8008d1c:	607b      	str	r3, [r7, #4]
    txpayload->length           = q_span(mpipe.alp.outq);
 8008d1e:	f7fe f99d 	bl	800705c <q_span>
 8008d22:	8138      	strh	r0, [r7, #8]
    mpipe.alp.outq->getcursor   = mpipe.alp.outq->putcursor;
 8008d24:	6933      	ldr	r3, [r6, #16]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	605a      	str	r2, [r3, #4]
    if (mpipe.state == MPIPE_Idle) {
 8008d2a:	7833      	ldrb	r3, [r6, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d008      	beq.n	8008d42 <mpipedrv_tx+0x6e>
    q_blockwrite(mpipe.alp.outq, blocking ? holdtime : 0);
 8008d30:	4b0a      	ldr	r3, [pc, #40]	; (8008d5c <mpipedrv_tx+0x88>)
 8008d32:	6918      	ldr	r0, [r3, #16]
 8008d34:	2d00      	cmp	r5, #0
 8008d36:	d00e      	beq.n	8008d56 <mpipedrv_tx+0x82>
 8008d38:	0021      	movs	r1, r4
 8008d3a:	f7fe f9a0 	bl	800707e <q_blockwrite>
    return holdtime;
 8008d3e:	b220      	sxth	r0, r4
 8008d40:	e7d2      	b.n	8008ce8 <mpipedrv_tx+0x14>
        uart.tlist.i = (uart.tlist.i + 1) & (UART_RB_MAX-1);
 8008d42:	4907      	ldr	r1, [pc, #28]	; (8008d60 <mpipedrv_tx+0x8c>)
 8008d44:	229e      	movs	r2, #158	; 0x9e
 8008d46:	5c8b      	ldrb	r3, [r1, r2]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	2007      	movs	r0, #7
 8008d4c:	4003      	ands	r3, r0
 8008d4e:	548b      	strb	r3, [r1, r2]
        sub_txopen();
 8008d50:	f7ff ff38 	bl	8008bc4 <sub_txopen>
 8008d54:	e7ec      	b.n	8008d30 <mpipedrv_tx+0x5c>
    q_blockwrite(mpipe.alp.outq, blocking ? holdtime : 0);
 8008d56:	2100      	movs	r1, #0
 8008d58:	e7ef      	b.n	8008d3a <mpipedrv_tx+0x66>
 8008d5a:	46c0      	nop			; (mov r8, r8)
 8008d5c:	20002d90 	.word	0x20002d90
 8008d60:	20003208 	.word	0x20003208

08008d64 <mpipedrv_rx>:




#ifndef EXTF_mpipedrv_rx
void mpipedrv_rx(ot_bool blocking, mpipe_priority data_priority) {
 8008d64:	b510      	push	{r4, lr}
    /// Wait for Line Sync.  Sync interrupt will call sub_rx()
    sub_mpipe_close();
    EXTI->IMR  |= MPIPE_UART_RXPIN;
#else
    /// Wait for character Sync.
    mpipe_rxsync_isr();
 8008d66:	f7ff fe8b 	bl	8008a80 <mpipe_rxsync_isr>
#endif

    //MPIPE_UART->CR1   = (USART_CR1_UE | USART_CR1_RE);
    //__DMA_RXOPEN(&uart.rxbuffer[0], uart.rxbuffer[0]+2);   //
}
 8008d6a:	bd10      	pop	{r4, pc}

08008d6c <platform_isr_usart1>:
void __UART_ISR(void) {
 8008d6c:	b510      	push	{r4, lr}
    uart_isr = MPIPE_UART->ISR;
 8008d6e:	4b26      	ldr	r3, [pc, #152]	; (8008e08 <platform_isr_usart1+0x9c>)
 8008d70:	69da      	ldr	r2, [r3, #28]
    __UART_CLEAR();
 8008d72:	4926      	ldr	r1, [pc, #152]	; (8008e0c <platform_isr_usart1+0xa0>)
 8008d74:	6219      	str	r1, [r3, #32]
    if (uart_isr & USART_ISR_RXNE) {
 8008d76:	0693      	lsls	r3, r2, #26
 8008d78:	d52a      	bpl.n	8008dd0 <platform_isr_usart1+0x64>
        uart.rxbuffer[0] = MPIPE_UART->RDR;
 8008d7a:	4b23      	ldr	r3, [pc, #140]	; (8008e08 <platform_isr_usart1+0x9c>)
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	4a23      	ldr	r2, [pc, #140]	; (8008e10 <platform_isr_usart1+0xa4>)
 8008d82:	7613      	strb	r3, [r2, #24]
        mpipe.state     += (uart.rxbuffer[0] == 0x55);  // Progress to MPIPE_RxHeader
 8008d84:	4a23      	ldr	r2, [pc, #140]	; (8008e14 <platform_isr_usart1+0xa8>)
 8008d86:	7811      	ldrb	r1, [r2, #0]
 8008d88:	b249      	sxtb	r1, r1
 8008d8a:	3b55      	subs	r3, #85	; 0x55
 8008d8c:	4258      	negs	r0, r3
 8008d8e:	4143      	adcs	r3, r0
 8008d90:	185b      	adds	r3, r3, r1
 8008d92:	b25b      	sxtb	r3, r3
 8008d94:	7013      	strb	r3, [r2, #0]
        if (mpipe.state > MPIPE_Idle) {
 8008d96:	7813      	ldrb	r3, [r2, #0]
 8008d98:	b25b      	sxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	dd17      	ble.n	8008dce <platform_isr_usart1+0x62>
            MPIPE_UART->CR1 = (USART_CR1_UE | USART_CR1_RE);
 8008d9e:	4b1a      	ldr	r3, [pc, #104]	; (8008e08 <platform_isr_usart1+0x9c>)
 8008da0:	2205      	movs	r2, #5
 8008da2:	601a      	str	r2, [r3, #0]
            __DMA_RXOPEN(_HEADER_RXPTR, MPIPE_HEADERBYTES-_HEADER_RXOFFSET);
 8008da4:	4b1c      	ldr	r3, [pc, #112]	; (8008e18 <platform_isr_usart1+0xac>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	4a1c      	ldr	r2, [pc, #112]	; (8008e1c <platform_isr_usart1+0xb0>)
 8008dac:	60da      	str	r2, [r3, #12]
 8008dae:	2207      	movs	r2, #7
 8008db0:	605a      	str	r2, [r3, #4]
 8008db2:	4a1b      	ldr	r2, [pc, #108]	; (8008e20 <platform_isr_usart1+0xb4>)
 8008db4:	21ff      	movs	r1, #255	; 0xff
 8008db6:	0309      	lsls	r1, r1, #12
 8008db8:	6051      	str	r1, [r2, #4]
 8008dba:	481a      	ldr	r0, [pc, #104]	; (8008e24 <platform_isr_usart1+0xb8>)
 8008dbc:	6802      	ldr	r2, [r0, #0]
 8008dbe:	491a      	ldr	r1, [pc, #104]	; (8008e28 <platform_isr_usart1+0xbc>)
 8008dc0:	4011      	ands	r1, r2
 8008dc2:	22c0      	movs	r2, #192	; 0xc0
 8008dc4:	0292      	lsls	r2, r2, #10
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	6002      	str	r2, [r0, #0]
 8008dca:	4a18      	ldr	r2, [pc, #96]	; (8008e2c <platform_isr_usart1+0xc0>)
 8008dcc:	601a      	str	r2, [r3, #0]
}
 8008dce:	bd10      	pop	{r4, pc}
    else if (uart_isr & USART_ISR_TC) {
 8008dd0:	0653      	lsls	r3, r2, #25
 8008dd2:	d5fc      	bpl.n	8008dce <platform_isr_usart1+0x62>
        if (--uart.tlist.size != 0) {
 8008dd4:	490e      	ldr	r1, [pc, #56]	; (8008e10 <platform_isr_usart1+0xa4>)
 8008dd6:	229d      	movs	r2, #157	; 0x9d
 8008dd8:	5c8b      	ldrb	r3, [r1, r2]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	548b      	strb	r3, [r1, r2]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d107      	bne.n	8008df4 <platform_isr_usart1+0x88>
            mpipedrv_rx(False, 0);
 8008de4:	2100      	movs	r1, #0
 8008de6:	2000      	movs	r0, #0
 8008de8:	f7ff ffbc 	bl	8008d64 <mpipedrv_rx>
            mpipeevt_txdone(0);
 8008dec:	2000      	movs	r0, #0
 8008dee:	f7fe fd88 	bl	8007902 <mpipeevt_txdone>
}
 8008df2:	e7ec      	b.n	8008dce <platform_isr_usart1+0x62>
            uart.tlist.i = (uart.tlist.i + 1) & (UART_RB_MAX-1);
 8008df4:	3201      	adds	r2, #1
 8008df6:	5c8b      	ldrb	r3, [r1, r2]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	2007      	movs	r0, #7
 8008dfc:	4003      	ands	r3, r0
 8008dfe:	548b      	strb	r3, [r1, r2]
            sub_txopen();
 8008e00:	f7ff fee0 	bl	8008bc4 <sub_txopen>
 8008e04:	e7e3      	b.n	8008dce <platform_isr_usart1+0x62>
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	40013800 	.word	0x40013800
 8008e0c:	00121b5f 	.word	0x00121b5f
 8008e10:	20003208 	.word	0x20003208
 8008e14:	20002d90 	.word	0x20002d90
 8008e18:	40020058 	.word	0x40020058
 8008e1c:	20003219 	.word	0x20003219
 8008e20:	40020000 	.word	0x40020000
 8008e24:	400200a8 	.word	0x400200a8
 8008e28:	fff00fff 	.word	0xfff00fff
 8008e2c:	00002083 	.word	0x00002083

08008e30 <mpipedrv_isr>:




#ifndef EXTF_mpipedrv_isr
void mpipedrv_isr() {
 8008e30:	b570      	push	{r4, r5, r6, lr}
///      Acks.  In this case, a complete TX process also requires RX'ing an
///      Ack, and a complete RX process requires TX'ing an Ack. </LI>
    //ot_bool tx_process = False;
    ot_int  error_code = -1;

    __DMA_ALL_CLOSE();
 8008e32:	4a7e      	ldr	r2, [pc, #504]	; (800902c <mpipedrv_isr+0x1fc>)
 8008e34:	6813      	ldr	r3, [r2, #0]
 8008e36:	497e      	ldr	r1, [pc, #504]	; (8009030 <mpipedrv_isr+0x200>)
 8008e38:	400b      	ands	r3, r1
 8008e3a:	6013      	str	r3, [r2, #0]
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4a7d      	ldr	r2, [pc, #500]	; (8009034 <mpipedrv_isr+0x204>)
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	4a7d      	ldr	r2, [pc, #500]	; (8009038 <mpipedrv_isr+0x208>)
 8008e44:	6013      	str	r3, [r2, #0]
    __DMA_ALL_CLEAR();
 8008e46:	4b7d      	ldr	r3, [pc, #500]	; (800903c <mpipedrv_isr+0x20c>)
 8008e48:	22ff      	movs	r2, #255	; 0xff
 8008e4a:	0312      	lsls	r2, r2, #12
 8008e4c:	605a      	str	r2, [r3, #4]

    switch (mpipe.state) {
 8008e4e:	4b7c      	ldr	r3, [pc, #496]	; (8009040 <mpipedrv_isr+0x210>)
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	b25b      	sxtb	r3, r3
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	2a06      	cmp	r2, #6
 8008e58:	d900      	bls.n	8008e5c <mpipedrv_isr+0x2c>
 8008e5a:	e0e1      	b.n	8009020 <mpipedrv_isr+0x1f0>
 8008e5c:	0093      	lsls	r3, r2, #2
 8008e5e:	4a79      	ldr	r2, [pc, #484]	; (8009044 <mpipedrv_isr+0x214>)
 8008e60:	58d3      	ldr	r3, [r2, r3]
 8008e62:	469f      	mov	pc, r3
        case MPIPE_RxHeader: {
            ot_u16 blockticks;
            
            // If there is no payload or if the input queue is being used by 
            // someone else, this packet is registered as an error.
            uart.rxplen = PLATFORM_ENDIAN16(uart.header.plen);
 8008e64:	4a78      	ldr	r2, [pc, #480]	; (8009048 <mpipedrv_isr+0x218>)
 8008e66:	8a93      	ldrh	r3, [r2, #20]
 8008e68:	ba5b      	rev16	r3, r3
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	215a      	movs	r1, #90	; 0x5a
 8008e6e:	5253      	strh	r3, [r2, r1]
            if (uart.rxplen == 0)                           error_code = -1;
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10d      	bne.n	8008e90 <mpipedrv_isr+0x60>
 8008e74:	2401      	movs	r4, #1
 8008e76:	4264      	negs	r4, r4

    // The RX process is complete, including and ACKing.
    // - Close MPipe and call rxdone event handler from MPipe Task
    // - If RX CRC matters, then make sure to compute it.
    mpipedrv_isr_RXSIG:
    mpipedrv_rx(False, 0);
 8008e78:	2100      	movs	r1, #0
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	f7ff ff72 	bl	8008d64 <mpipedrv_rx>

    q_unlock(mpipe.alp.inq);
 8008e80:	4b6f      	ldr	r3, [pc, #444]	; (8009040 <mpipedrv_isr+0x210>)
 8008e82:	68d8      	ldr	r0, [r3, #12]
 8008e84:	f7fe f908 	bl	8007098 <q_unlock>
    mpipeevt_rxdone(error_code);
 8008e88:	0020      	movs	r0, r4
 8008e8a:	f7fe fd4c 	bl	8007926 <mpipeevt_rxdone>
}
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}
            else if (q_blocktime(mpipe.alp.inq))            error_code = -11;
 8008e90:	4b6b      	ldr	r3, [pc, #428]	; (8009040 <mpipedrv_isr+0x210>)
 8008e92:	68d8      	ldr	r0, [r3, #12]
 8008e94:	f7fe f8f1 	bl	800707a <q_blocktime>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d002      	beq.n	8008ea2 <mpipedrv_isr+0x72>
 8008e9c:	240b      	movs	r4, #11
 8008e9e:	4264      	negs	r4, r4
 8008ea0:	e7ea      	b.n	8008e78 <mpipedrv_isr+0x48>
            else if (q_writespace(mpipe.alp.inq) < uart.rxplen)  error_code = -7;
 8008ea2:	4b67      	ldr	r3, [pc, #412]	; (8009040 <mpipedrv_isr+0x210>)
 8008ea4:	68d8      	ldr	r0, [r3, #12]
 8008ea6:	f7fe f8de 	bl	8007066 <q_writespace>
 8008eaa:	4a67      	ldr	r2, [pc, #412]	; (8009048 <mpipedrv_isr+0x218>)
 8008eac:	235a      	movs	r3, #90	; 0x5a
 8008eae:	5ad4      	ldrh	r4, [r2, r3]
 8008eb0:	42a0      	cmp	r0, r4
 8008eb2:	da02      	bge.n	8008eba <mpipedrv_isr+0x8a>
 8008eb4:	2407      	movs	r4, #7
 8008eb6:	4264      	negs	r4, r4
 8008eb8:	e7de      	b.n	8008e78 <mpipedrv_isr+0x48>
                blockticks = __MPIPE_TIMEOUT(uart.rxplen);
 8008eba:	3408      	adds	r4, #8
 8008ebc:	08e4      	lsrs	r4, r4, #3
 8008ebe:	3401      	adds	r4, #1
                q_blockwrite(mpipe.alp.inq, blockticks);
 8008ec0:	4b5f      	ldr	r3, [pc, #380]	; (8009040 <mpipedrv_isr+0x210>)
 8008ec2:	68d8      	ldr	r0, [r3, #12]
 8008ec4:	0021      	movs	r1, r4
 8008ec6:	f7fe f8da 	bl	800707e <q_blockwrite>
                uart.rxframelen = (uart.rxplen <= MPIPE_BUFFER_SIZE) ? uart.rxplen : MPIPE_BUFFER_SIZE;
 8008eca:	4a5f      	ldr	r2, [pc, #380]	; (8009048 <mpipedrv_isr+0x218>)
 8008ecc:	235a      	movs	r3, #90	; 0x5a
 8008ece:	5ad2      	ldrh	r2, [r2, r3]
 8008ed0:	1c13      	adds	r3, r2, #0
 8008ed2:	2a40      	cmp	r2, #64	; 0x40
 8008ed4:	d900      	bls.n	8008ed8 <mpipedrv_isr+0xa8>
 8008ed6:	2340      	movs	r3, #64	; 0x40
 8008ed8:	4d5b      	ldr	r5, [pc, #364]	; (8009048 <mpipedrv_isr+0x218>)
 8008eda:	2258      	movs	r2, #88	; 0x58
 8008edc:	52ab      	strh	r3, [r5, r2]
                __DMA_RXOPEN(uart.rxbuffer, uart.rxframelen);
 8008ede:	4a56      	ldr	r2, [pc, #344]	; (8009038 <mpipedrv_isr+0x208>)
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	6011      	str	r1, [r2, #0]
 8008ee4:	0029      	movs	r1, r5
 8008ee6:	3118      	adds	r1, #24
 8008ee8:	60d1      	str	r1, [r2, #12]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	6053      	str	r3, [r2, #4]
 8008eee:	4b53      	ldr	r3, [pc, #332]	; (800903c <mpipedrv_isr+0x20c>)
 8008ef0:	21ff      	movs	r1, #255	; 0xff
 8008ef2:	0309      	lsls	r1, r1, #12
 8008ef4:	6059      	str	r1, [r3, #4]
 8008ef6:	484d      	ldr	r0, [pc, #308]	; (800902c <mpipedrv_isr+0x1fc>)
 8008ef8:	6803      	ldr	r3, [r0, #0]
 8008efa:	494d      	ldr	r1, [pc, #308]	; (8009030 <mpipedrv_isr+0x200>)
 8008efc:	4019      	ands	r1, r3
 8008efe:	23c0      	movs	r3, #192	; 0xc0
 8008f00:	029b      	lsls	r3, r3, #10
 8008f02:	430b      	orrs	r3, r1
 8008f04:	6003      	str	r3, [r0, #0]
 8008f06:	4b51      	ldr	r3, [pc, #324]	; (800904c <mpipedrv_isr+0x21c>)
 8008f08:	6013      	str	r3, [r2, #0]
                mpipeevt_rxdetect(blockticks);
 8008f0a:	b220      	sxth	r0, r4
 8008f0c:	f7fe fd04 	bl	8007918 <mpipeevt_rxdetect>
                mpipe.state = MPIPE_RxPayload;
 8008f10:	4b4b      	ldr	r3, [pc, #300]	; (8009040 <mpipedrv_isr+0x210>)
 8008f12:	2202      	movs	r2, #2
 8008f14:	701a      	strb	r2, [r3, #0]
                uart.crc.count  = uart.rxplen;
 8008f16:	235a      	movs	r3, #90	; 0x5a
 8008f18:	5eeb      	ldrsh	r3, [r5, r3]
 8008f1a:	812b      	strh	r3, [r5, #8]
                uart.crc.val    = crc16drv_init();
 8008f1c:	f7fd ffe2 	bl	8006ee4 <crc16drv_init>
 8008f20:	81a8      	strh	r0, [r5, #12]
                if ((uart.header.ctl & MPIPE_CTL_NOCRC) == 0) {
 8008f22:	7deb      	ldrb	r3, [r5, #23]
 8008f24:	07db      	lsls	r3, r3, #31
 8008f26:	d4b2      	bmi.n	8008e8e <mpipedrv_isr+0x5e>
                    uart.crc.writeout   = False;
 8008f28:	4c47      	ldr	r4, [pc, #284]	; (8009048 <mpipedrv_isr+0x218>)
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	72a3      	strb	r3, [r4, #10]
                    uart.crc.cursor     = (ot_u8*)&uart.header.plen;
 8008f2e:	0023      	movs	r3, r4
 8008f30:	3314      	adds	r3, #20
 8008f32:	6063      	str	r3, [r4, #4]
                    uart.crc.count     += 4;
 8008f34:	8923      	ldrh	r3, [r4, #8]
 8008f36:	3304      	adds	r3, #4
 8008f38:	8123      	strh	r3, [r4, #8]
                    crc_calc_nstream(&uart.crc, 4);
 8008f3a:	1d20      	adds	r0, r4, #4
 8008f3c:	2104      	movs	r1, #4
 8008f3e:	f7fd ffe9 	bl	8006f14 <crc_calc_nstream>
                    uart.crc.cursor     = mpipe.alp.inq->putcursor;
 8008f42:	4b3f      	ldr	r3, [pc, #252]	; (8009040 <mpipedrv_isr+0x210>)
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	6063      	str	r3, [r4, #4]
 8008f4a:	e7a0      	b.n	8008e8e <mpipedrv_isr+0x5e>
            if (uart.crc.count > MPIPE_BUFFER_SIZE) {
 8008f4c:	4b3e      	ldr	r3, [pc, #248]	; (8009048 <mpipedrv_isr+0x218>)
 8008f4e:	2208      	movs	r2, #8
 8008f50:	5e9b      	ldrsh	r3, [r3, r2]
 8008f52:	2b40      	cmp	r3, #64	; 0x40
 8008f54:	dd1c      	ble.n	8008f90 <mpipedrv_isr+0x160>
                nextframe = uart.crc.count - uart.rxframelen;
 8008f56:	b29c      	uxth	r4, r3
 8008f58:	4a3b      	ldr	r2, [pc, #236]	; (8009048 <mpipedrv_isr+0x218>)
 8008f5a:	2358      	movs	r3, #88	; 0x58
 8008f5c:	5ad3      	ldrh	r3, [r2, r3]
 8008f5e:	1ae4      	subs	r4, r4, r3
 8008f60:	b2a4      	uxth	r4, r4
                if (nextframe > MPIPE_BUFFER_SIZE) {
 8008f62:	2c40      	cmp	r4, #64	; 0x40
 8008f64:	d900      	bls.n	8008f68 <mpipedrv_isr+0x138>
                    nextframe = MPIPE_BUFFER_SIZE;
 8008f66:	2440      	movs	r4, #64	; 0x40
                __DMA_RXOPEN(&uart.rxbuffer, nextframe);
 8008f68:	4b33      	ldr	r3, [pc, #204]	; (8009038 <mpipedrv_isr+0x208>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	4a38      	ldr	r2, [pc, #224]	; (8009050 <mpipedrv_isr+0x220>)
 8008f70:	60da      	str	r2, [r3, #12]
 8008f72:	605c      	str	r4, [r3, #4]
 8008f74:	4a31      	ldr	r2, [pc, #196]	; (800903c <mpipedrv_isr+0x20c>)
 8008f76:	21ff      	movs	r1, #255	; 0xff
 8008f78:	0309      	lsls	r1, r1, #12
 8008f7a:	6051      	str	r1, [r2, #4]
 8008f7c:	482b      	ldr	r0, [pc, #172]	; (800902c <mpipedrv_isr+0x1fc>)
 8008f7e:	6802      	ldr	r2, [r0, #0]
 8008f80:	492b      	ldr	r1, [pc, #172]	; (8009030 <mpipedrv_isr+0x200>)
 8008f82:	4011      	ands	r1, r2
 8008f84:	22c0      	movs	r2, #192	; 0xc0
 8008f86:	0292      	lsls	r2, r2, #10
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	6002      	str	r2, [r0, #0]
 8008f8c:	4a2f      	ldr	r2, [pc, #188]	; (800904c <mpipedrv_isr+0x21c>)
 8008f8e:	601a      	str	r2, [r3, #0]
            q_writestring(mpipe.alp.inq, uart.rxbuffer, uart.rxframelen);
 8008f90:	4d2d      	ldr	r5, [pc, #180]	; (8009048 <mpipedrv_isr+0x218>)
 8008f92:	2358      	movs	r3, #88	; 0x58
 8008f94:	5eea      	ldrsh	r2, [r5, r3]
 8008f96:	0029      	movs	r1, r5
 8008f98:	3118      	adds	r1, #24
 8008f9a:	4b29      	ldr	r3, [pc, #164]	; (8009040 <mpipedrv_isr+0x210>)
 8008f9c:	68d8      	ldr	r0, [r3, #12]
 8008f9e:	f7fe f904 	bl	80071aa <q_writestring>
            if ((uart.header.ctl & MPIPE_CTL_NOCRC) == 0) {
 8008fa2:	7deb      	ldrb	r3, [r5, #23]
 8008fa4:	07db      	lsls	r3, r3, #31
 8008fa6:	d528      	bpl.n	8008ffa <mpipedrv_isr+0x1ca>
                uart.crc.count -= uart.rxframelen;
 8008fa8:	4b27      	ldr	r3, [pc, #156]	; (8009048 <mpipedrv_isr+0x218>)
 8008faa:	2258      	movs	r2, #88	; 0x58
 8008fac:	5a99      	ldrh	r1, [r3, r2]
 8008fae:	891a      	ldrh	r2, [r3, #8]
 8008fb0:	1a52      	subs	r2, r2, r1
 8008fb2:	811a      	strh	r2, [r3, #8]
            uart.rxframelen = nextframe;
 8008fb4:	4d24      	ldr	r5, [pc, #144]	; (8009048 <mpipedrv_isr+0x218>)
 8008fb6:	2358      	movs	r3, #88	; 0x58
 8008fb8:	52ec      	strh	r4, [r5, r3]
            q_blockwrite(mpipe.alp.inq, __MPIPE_TIMEOUT(uart.crc.count));
 8008fba:	2308      	movs	r3, #8
 8008fbc:	5ee9      	ldrsh	r1, [r5, r3]
 8008fbe:	3108      	adds	r1, #8
 8008fc0:	10c9      	asrs	r1, r1, #3
 8008fc2:	3101      	adds	r1, #1
 8008fc4:	b289      	uxth	r1, r1
 8008fc6:	4b1e      	ldr	r3, [pc, #120]	; (8009040 <mpipedrv_isr+0x210>)
 8008fc8:	68d8      	ldr	r0, [r3, #12]
 8008fca:	f7fe f858 	bl	800707e <q_blockwrite>
            if (uart.crc.count > 0) {
 8008fce:	2208      	movs	r2, #8
 8008fd0:	5eab      	ldrsh	r3, [r5, r2]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	dd00      	ble.n	8008fd8 <mpipedrv_isr+0x1a8>
 8008fd6:	e75a      	b.n	8008e8e <mpipedrv_isr+0x5e>
            if (PLATFORM_ENDIAN16(uart.crc.val) == uart.header.crc16) {
 8008fd8:	4a1b      	ldr	r2, [pc, #108]	; (8009048 <mpipedrv_isr+0x218>)
 8008fda:	8993      	ldrh	r3, [r2, #12]
 8008fdc:	ba5b      	rev16	r3, r3
 8008fde:	8a52      	ldrh	r2, [r2, #18]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d020      	beq.n	8009026 <mpipedrv_isr+0x1f6>
                mpipe.alp.inq->putcursor -= uart.rxplen;
 8008fe4:	4b16      	ldr	r3, [pc, #88]	; (8009040 <mpipedrv_isr+0x210>)
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	4917      	ldr	r1, [pc, #92]	; (8009048 <mpipedrv_isr+0x218>)
 8008fea:	235a      	movs	r3, #90	; 0x5a
 8008fec:	5acb      	ldrh	r3, [r1, r3]
 8008fee:	6891      	ldr	r1, [r2, #8]
 8008ff0:	1acb      	subs	r3, r1, r3
 8008ff2:	6093      	str	r3, [r2, #8]
                error_code = -2;
 8008ff4:	2402      	movs	r4, #2
 8008ff6:	4264      	negs	r4, r4
 8008ff8:	e73e      	b.n	8008e78 <mpipedrv_isr+0x48>
                crc_calc_nstream(&uart.crc, uart.rxframelen);
 8008ffa:	4813      	ldr	r0, [pc, #76]	; (8009048 <mpipedrv_isr+0x218>)
 8008ffc:	2358      	movs	r3, #88	; 0x58
 8008ffe:	5ac1      	ldrh	r1, [r0, r3]
 8009000:	3004      	adds	r0, #4
 8009002:	f7fd ff87 	bl	8006f14 <crc_calc_nstream>
 8009006:	e7d5      	b.n	8008fb4 <mpipedrv_isr+0x184>
            mpipe.state = MPIPE_Tx_Done;
 8009008:	4b0d      	ldr	r3, [pc, #52]	; (8009040 <mpipedrv_isr+0x210>)
 800900a:	2206      	movs	r2, #6
 800900c:	701a      	strb	r2, [r3, #0]
            sub_txcont();
 800900e:	f7ff fe31 	bl	8008c74 <sub_txcont>
            return;
 8009012:	e73c      	b.n	8008e8e <mpipedrv_isr+0x5e>
            __UART_CLEAR();
 8009014:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <mpipedrv_isr+0x224>)
 8009016:	4a10      	ldr	r2, [pc, #64]	; (8009058 <mpipedrv_isr+0x228>)
 8009018:	621a      	str	r2, [r3, #32]
            MPIPE_UART->CR1 = (USART_CR1_UE | USART_CR1_TE | USART_CR1_TCIE);
 800901a:	2249      	movs	r2, #73	; 0x49
 800901c:	601a      	str	r2, [r3, #0]
            return; 
 800901e:	e736      	b.n	8008e8e <mpipedrv_isr+0x5e>
    ot_int  error_code = -1;
 8009020:	2401      	movs	r4, #1
 8009022:	4264      	negs	r4, r4
 8009024:	e728      	b.n	8008e78 <mpipedrv_isr+0x48>
                error_code = 0;   
 8009026:	2400      	movs	r4, #0
 8009028:	e726      	b.n	8008e78 <mpipedrv_isr+0x48>
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	400200a8 	.word	0x400200a8
 8009030:	fff00fff 	.word	0xfff00fff
 8009034:	40020044 	.word	0x40020044
 8009038:	40020058 	.word	0x40020058
 800903c:	40020000 	.word	0x40020000
 8009040:	20002d90 	.word	0x20002d90
 8009044:	0800b470 	.word	0x0800b470
 8009048:	20003208 	.word	0x20003208
 800904c:	00002083 	.word	0x00002083
 8009050:	20003220 	.word	0x20003220
 8009054:	40013800 	.word	0x40013800
 8009058:	00121b5f 	.word	0x00121b5f

0800905c <platform_isr_dma1ch5>:
void __DMARX_ISR(void) {
 800905c:	b510      	push	{r4, lr}
    mpipedrv_isr();
 800905e:	f7ff fee7 	bl	8008e30 <mpipedrv_isr>
}
 8009062:	bd10      	pop	{r4, pc}

08009064 <platform_isr_dma1ch4>:
void __DMATX_ISR(void) {
 8009064:	b510      	push	{r4, lr}
    mpipedrv_isr();
 8009066:	f7ff fee3 	bl	8008e30 <mpipedrv_isr>
}
 800906a:	bd10      	pop	{r4, pc}

0800906c <vworm_init>:
}
#endif


#ifndef EXTF_vworm_init
ot_u8 vworm_init() {
 800906c:	b510      	push	{r4, lr}
    ot_memcpy_4(fsram, (ot_u32*)FLASH_FS_ADDR, sizeof(fsram)/4);
 800906e:	2280      	movs	r2, #128	; 0x80
 8009070:	00d2      	lsls	r2, r2, #3
 8009072:	4903      	ldr	r1, [pc, #12]	; (8009080 <vworm_init+0x14>)
 8009074:	4803      	ldr	r0, [pc, #12]	; (8009084 <vworm_init+0x18>)
 8009076:	f7ff fc6a 	bl	800894e <ot_memcpy_4>
    return 0;
}
 800907a:	2000      	movs	r0, #0
 800907c:	bd10      	pop	{r4, pc}
 800907e:	46c0      	nop			; (mov r8, r8)
 8009080:	08017000 	.word	0x08017000
 8009084:	200011f8 	.word	0x200011f8

08009088 <vworm_read>:

#ifndef EXTF_vworm_read
ot_u16 vworm_read(vaddr addr) {
    ot_u16* data;
    addr   -= VWORM_BASE_VADDR;
    addr   &= ~1;
 8009088:	2301      	movs	r3, #1
 800908a:	4398      	bics	r0, r3
    data    = (ot_u16*)((ot_u8*)fsram + addr);
    return *data;
 800908c:	4b01      	ldr	r3, [pc, #4]	; (8009094 <vworm_read+0xc>)
 800908e:	5a18      	ldrh	r0, [r3, r0]
}
 8009090:	4770      	bx	lr
 8009092:	46c0      	nop			; (mov r8, r8)
 8009094:	200011f8 	.word	0x200011f8

08009098 <vworm_write>:

#ifndef EXTF_vworm_write
ot_u8 vworm_write(vaddr addr, ot_u16 data) {
    ot_u16* aptr;
    addr   -= VWORM_BASE_VADDR;
    addr   &= ~1;
 8009098:	2301      	movs	r3, #1
 800909a:	4398      	bics	r0, r3
    aptr    = (ot_u16*)((ot_u8*)fsram + addr);
    *aptr   = data;
 800909c:	4b01      	ldr	r3, [pc, #4]	; (80090a4 <vworm_write+0xc>)
 800909e:	5219      	strh	r1, [r3, r0]
    return 0;
}
 80090a0:	2000      	movs	r0, #0
 80090a2:	4770      	bx	lr
 80090a4:	200011f8 	.word	0x200011f8

080090a8 <vworm_mark>:
#endif
    


#ifndef EXTF_vworm_mark
ot_u8 vworm_mark(vaddr addr, ot_u16 value) {
 80090a8:	b510      	push	{r4, lr}
    return vworm_write(addr, value);
 80090aa:	f7ff fff5 	bl	8009098 <vworm_write>
}
 80090ae:	bd10      	pop	{r4, pc}

080090b0 <vworm_wipeblock>:
#endif

#ifndef EXTF_vworm_wipeblock
ot_u8 vworm_wipeblock(vaddr addr, ot_uint wipe_span) {
    return 0;
}
 80090b0:	2000      	movs	r0, #0
 80090b2:	4770      	bx	lr

080090b4 <vsram_read>:
  * ========================================================================<BR>
  * SRAM version of Veelite doesn't utilize VSRAM
  */

#ifndef EXTF_vsram_read
ot_u16 vsram_read(vaddr addr) {
 80090b4:	b510      	push	{r4, lr}
    return vworm_read(addr);
 80090b6:	f7ff ffe7 	bl	8009088 <vworm_read>
}
 80090ba:	bd10      	pop	{r4, pc}

080090bc <vsram_mark>:
#endif

#ifndef EXTF_vsram_mark
ot_u8 vsram_mark(vaddr addr, ot_u16 value) {
 80090bc:	b510      	push	{r4, lr}
    return vworm_mark(addr, value);
 80090be:	f7ff fff3 	bl	80090a8 <vworm_mark>
}
 80090c2:	bd10      	pop	{r4, pc}

080090c4 <__assert_func>:
 80090c4:	b530      	push	{r4, r5, lr}
 80090c6:	001c      	movs	r4, r3
 80090c8:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <__assert_func+0x2c>)
 80090ca:	0005      	movs	r5, r0
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	b085      	sub	sp, #20
 80090d0:	68d8      	ldr	r0, [r3, #12]
 80090d2:	4b08      	ldr	r3, [pc, #32]	; (80090f4 <__assert_func+0x30>)
 80090d4:	2a00      	cmp	r2, #0
 80090d6:	d101      	bne.n	80090dc <__assert_func+0x18>
 80090d8:	4b07      	ldr	r3, [pc, #28]	; (80090f8 <__assert_func+0x34>)
 80090da:	001a      	movs	r2, r3
 80090dc:	9202      	str	r2, [sp, #8]
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	9100      	str	r1, [sp, #0]
 80090e2:	002b      	movs	r3, r5
 80090e4:	0022      	movs	r2, r4
 80090e6:	4905      	ldr	r1, [pc, #20]	; (80090fc <__assert_func+0x38>)
 80090e8:	f000 f80a 	bl	8009100 <fiprintf>
 80090ec:	f000 fbc8 	bl	8009880 <abort>
 80090f0:	20000148 	.word	0x20000148
 80090f4:	0800b554 	.word	0x0800b554
 80090f8:	0800b58f 	.word	0x0800b58f
 80090fc:	0800b561 	.word	0x0800b561

08009100 <fiprintf>:
 8009100:	b40e      	push	{r1, r2, r3}
 8009102:	b503      	push	{r0, r1, lr}
 8009104:	0001      	movs	r1, r0
 8009106:	ab03      	add	r3, sp, #12
 8009108:	4804      	ldr	r0, [pc, #16]	; (800911c <fiprintf+0x1c>)
 800910a:	cb04      	ldmia	r3!, {r2}
 800910c:	6800      	ldr	r0, [r0, #0]
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	f000 f83e 	bl	8009190 <_vfiprintf_r>
 8009114:	b002      	add	sp, #8
 8009116:	bc08      	pop	{r3}
 8009118:	b003      	add	sp, #12
 800911a:	4718      	bx	r3
 800911c:	20000148 	.word	0x20000148

08009120 <memcpy>:
 8009120:	2300      	movs	r3, #0
 8009122:	b510      	push	{r4, lr}
 8009124:	429a      	cmp	r2, r3
 8009126:	d100      	bne.n	800912a <memcpy+0xa>
 8009128:	bd10      	pop	{r4, pc}
 800912a:	5ccc      	ldrb	r4, [r1, r3]
 800912c:	54c4      	strb	r4, [r0, r3]
 800912e:	3301      	adds	r3, #1
 8009130:	e7f8      	b.n	8009124 <memcpy+0x4>

08009132 <memset>:
 8009132:	0003      	movs	r3, r0
 8009134:	1812      	adds	r2, r2, r0
 8009136:	4293      	cmp	r3, r2
 8009138:	d100      	bne.n	800913c <memset+0xa>
 800913a:	4770      	bx	lr
 800913c:	7019      	strb	r1, [r3, #0]
 800913e:	3301      	adds	r3, #1
 8009140:	e7f9      	b.n	8009136 <memset+0x4>

08009142 <__sfputc_r>:
 8009142:	6893      	ldr	r3, [r2, #8]
 8009144:	b510      	push	{r4, lr}
 8009146:	3b01      	subs	r3, #1
 8009148:	6093      	str	r3, [r2, #8]
 800914a:	2b00      	cmp	r3, #0
 800914c:	da04      	bge.n	8009158 <__sfputc_r+0x16>
 800914e:	6994      	ldr	r4, [r2, #24]
 8009150:	42a3      	cmp	r3, r4
 8009152:	db07      	blt.n	8009164 <__sfputc_r+0x22>
 8009154:	290a      	cmp	r1, #10
 8009156:	d005      	beq.n	8009164 <__sfputc_r+0x22>
 8009158:	6813      	ldr	r3, [r2, #0]
 800915a:	1c58      	adds	r0, r3, #1
 800915c:	6010      	str	r0, [r2, #0]
 800915e:	7019      	strb	r1, [r3, #0]
 8009160:	0008      	movs	r0, r1
 8009162:	bd10      	pop	{r4, pc}
 8009164:	f000 fac0 	bl	80096e8 <__swbuf_r>
 8009168:	0001      	movs	r1, r0
 800916a:	e7f9      	b.n	8009160 <__sfputc_r+0x1e>

0800916c <__sfputs_r>:
 800916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916e:	0006      	movs	r6, r0
 8009170:	000f      	movs	r7, r1
 8009172:	0014      	movs	r4, r2
 8009174:	18d5      	adds	r5, r2, r3
 8009176:	42ac      	cmp	r4, r5
 8009178:	d101      	bne.n	800917e <__sfputs_r+0x12>
 800917a:	2000      	movs	r0, #0
 800917c:	e007      	b.n	800918e <__sfputs_r+0x22>
 800917e:	7821      	ldrb	r1, [r4, #0]
 8009180:	003a      	movs	r2, r7
 8009182:	0030      	movs	r0, r6
 8009184:	f7ff ffdd 	bl	8009142 <__sfputc_r>
 8009188:	3401      	adds	r4, #1
 800918a:	1c43      	adds	r3, r0, #1
 800918c:	d1f3      	bne.n	8009176 <__sfputs_r+0xa>
 800918e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009190 <_vfiprintf_r>:
 8009190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009192:	b0a1      	sub	sp, #132	; 0x84
 8009194:	9003      	str	r0, [sp, #12]
 8009196:	000f      	movs	r7, r1
 8009198:	0016      	movs	r6, r2
 800919a:	001d      	movs	r5, r3
 800919c:	2800      	cmp	r0, #0
 800919e:	d005      	beq.n	80091ac <_vfiprintf_r+0x1c>
 80091a0:	6983      	ldr	r3, [r0, #24]
 80091a2:	9305      	str	r3, [sp, #20]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <_vfiprintf_r+0x1c>
 80091a8:	f000 fc6a 	bl	8009a80 <__sinit>
 80091ac:	4b7b      	ldr	r3, [pc, #492]	; (800939c <_vfiprintf_r+0x20c>)
 80091ae:	429f      	cmp	r7, r3
 80091b0:	d15c      	bne.n	800926c <_vfiprintf_r+0xdc>
 80091b2:	9b03      	ldr	r3, [sp, #12]
 80091b4:	685f      	ldr	r7, [r3, #4]
 80091b6:	89bb      	ldrh	r3, [r7, #12]
 80091b8:	071b      	lsls	r3, r3, #28
 80091ba:	d563      	bpl.n	8009284 <_vfiprintf_r+0xf4>
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d060      	beq.n	8009284 <_vfiprintf_r+0xf4>
 80091c2:	2300      	movs	r3, #0
 80091c4:	ac08      	add	r4, sp, #32
 80091c6:	6163      	str	r3, [r4, #20]
 80091c8:	3320      	adds	r3, #32
 80091ca:	7663      	strb	r3, [r4, #25]
 80091cc:	3310      	adds	r3, #16
 80091ce:	76a3      	strb	r3, [r4, #26]
 80091d0:	9507      	str	r5, [sp, #28]
 80091d2:	0035      	movs	r5, r6
 80091d4:	782b      	ldrb	r3, [r5, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <_vfiprintf_r+0x4e>
 80091da:	2b25      	cmp	r3, #37	; 0x25
 80091dc:	d15c      	bne.n	8009298 <_vfiprintf_r+0x108>
 80091de:	1bab      	subs	r3, r5, r6
 80091e0:	9305      	str	r3, [sp, #20]
 80091e2:	d00c      	beq.n	80091fe <_vfiprintf_r+0x6e>
 80091e4:	0032      	movs	r2, r6
 80091e6:	0039      	movs	r1, r7
 80091e8:	9803      	ldr	r0, [sp, #12]
 80091ea:	f7ff ffbf 	bl	800916c <__sfputs_r>
 80091ee:	1c43      	adds	r3, r0, #1
 80091f0:	d100      	bne.n	80091f4 <_vfiprintf_r+0x64>
 80091f2:	e0c4      	b.n	800937e <_vfiprintf_r+0x1ee>
 80091f4:	6962      	ldr	r2, [r4, #20]
 80091f6:	9b05      	ldr	r3, [sp, #20]
 80091f8:	4694      	mov	ip, r2
 80091fa:	4463      	add	r3, ip
 80091fc:	6163      	str	r3, [r4, #20]
 80091fe:	782b      	ldrb	r3, [r5, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d100      	bne.n	8009206 <_vfiprintf_r+0x76>
 8009204:	e0bb      	b.n	800937e <_vfiprintf_r+0x1ee>
 8009206:	2201      	movs	r2, #1
 8009208:	2300      	movs	r3, #0
 800920a:	4252      	negs	r2, r2
 800920c:	6062      	str	r2, [r4, #4]
 800920e:	a904      	add	r1, sp, #16
 8009210:	3254      	adds	r2, #84	; 0x54
 8009212:	1852      	adds	r2, r2, r1
 8009214:	1c6e      	adds	r6, r5, #1
 8009216:	6023      	str	r3, [r4, #0]
 8009218:	60e3      	str	r3, [r4, #12]
 800921a:	60a3      	str	r3, [r4, #8]
 800921c:	7013      	strb	r3, [r2, #0]
 800921e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009220:	7831      	ldrb	r1, [r6, #0]
 8009222:	2205      	movs	r2, #5
 8009224:	485e      	ldr	r0, [pc, #376]	; (80093a0 <_vfiprintf_r+0x210>)
 8009226:	f000 fd2b 	bl	8009c80 <memchr>
 800922a:	1c75      	adds	r5, r6, #1
 800922c:	2800      	cmp	r0, #0
 800922e:	d135      	bne.n	800929c <_vfiprintf_r+0x10c>
 8009230:	6822      	ldr	r2, [r4, #0]
 8009232:	06d3      	lsls	r3, r2, #27
 8009234:	d504      	bpl.n	8009240 <_vfiprintf_r+0xb0>
 8009236:	2353      	movs	r3, #83	; 0x53
 8009238:	a904      	add	r1, sp, #16
 800923a:	185b      	adds	r3, r3, r1
 800923c:	2120      	movs	r1, #32
 800923e:	7019      	strb	r1, [r3, #0]
 8009240:	0713      	lsls	r3, r2, #28
 8009242:	d504      	bpl.n	800924e <_vfiprintf_r+0xbe>
 8009244:	2353      	movs	r3, #83	; 0x53
 8009246:	a904      	add	r1, sp, #16
 8009248:	185b      	adds	r3, r3, r1
 800924a:	212b      	movs	r1, #43	; 0x2b
 800924c:	7019      	strb	r1, [r3, #0]
 800924e:	7833      	ldrb	r3, [r6, #0]
 8009250:	2b2a      	cmp	r3, #42	; 0x2a
 8009252:	d02c      	beq.n	80092ae <_vfiprintf_r+0x11e>
 8009254:	0035      	movs	r5, r6
 8009256:	2100      	movs	r1, #0
 8009258:	200a      	movs	r0, #10
 800925a:	68e3      	ldr	r3, [r4, #12]
 800925c:	782a      	ldrb	r2, [r5, #0]
 800925e:	1c6e      	adds	r6, r5, #1
 8009260:	3a30      	subs	r2, #48	; 0x30
 8009262:	2a09      	cmp	r2, #9
 8009264:	d964      	bls.n	8009330 <_vfiprintf_r+0x1a0>
 8009266:	2900      	cmp	r1, #0
 8009268:	d02e      	beq.n	80092c8 <_vfiprintf_r+0x138>
 800926a:	e026      	b.n	80092ba <_vfiprintf_r+0x12a>
 800926c:	4b4d      	ldr	r3, [pc, #308]	; (80093a4 <_vfiprintf_r+0x214>)
 800926e:	429f      	cmp	r7, r3
 8009270:	d102      	bne.n	8009278 <_vfiprintf_r+0xe8>
 8009272:	9b03      	ldr	r3, [sp, #12]
 8009274:	689f      	ldr	r7, [r3, #8]
 8009276:	e79e      	b.n	80091b6 <_vfiprintf_r+0x26>
 8009278:	4b4b      	ldr	r3, [pc, #300]	; (80093a8 <_vfiprintf_r+0x218>)
 800927a:	429f      	cmp	r7, r3
 800927c:	d19b      	bne.n	80091b6 <_vfiprintf_r+0x26>
 800927e:	9b03      	ldr	r3, [sp, #12]
 8009280:	68df      	ldr	r7, [r3, #12]
 8009282:	e798      	b.n	80091b6 <_vfiprintf_r+0x26>
 8009284:	0039      	movs	r1, r7
 8009286:	9803      	ldr	r0, [sp, #12]
 8009288:	f000 fa84 	bl	8009794 <__swsetup_r>
 800928c:	2800      	cmp	r0, #0
 800928e:	d098      	beq.n	80091c2 <_vfiprintf_r+0x32>
 8009290:	2001      	movs	r0, #1
 8009292:	4240      	negs	r0, r0
 8009294:	b021      	add	sp, #132	; 0x84
 8009296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009298:	3501      	adds	r5, #1
 800929a:	e79b      	b.n	80091d4 <_vfiprintf_r+0x44>
 800929c:	4b40      	ldr	r3, [pc, #256]	; (80093a0 <_vfiprintf_r+0x210>)
 800929e:	6822      	ldr	r2, [r4, #0]
 80092a0:	1ac0      	subs	r0, r0, r3
 80092a2:	2301      	movs	r3, #1
 80092a4:	4083      	lsls	r3, r0
 80092a6:	4313      	orrs	r3, r2
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	002e      	movs	r6, r5
 80092ac:	e7b8      	b.n	8009220 <_vfiprintf_r+0x90>
 80092ae:	9b07      	ldr	r3, [sp, #28]
 80092b0:	1d19      	adds	r1, r3, #4
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	9107      	str	r1, [sp, #28]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	db01      	blt.n	80092be <_vfiprintf_r+0x12e>
 80092ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80092bc:	e004      	b.n	80092c8 <_vfiprintf_r+0x138>
 80092be:	425b      	negs	r3, r3
 80092c0:	60e3      	str	r3, [r4, #12]
 80092c2:	2302      	movs	r3, #2
 80092c4:	4313      	orrs	r3, r2
 80092c6:	6023      	str	r3, [r4, #0]
 80092c8:	782b      	ldrb	r3, [r5, #0]
 80092ca:	2b2e      	cmp	r3, #46	; 0x2e
 80092cc:	d10a      	bne.n	80092e4 <_vfiprintf_r+0x154>
 80092ce:	786b      	ldrb	r3, [r5, #1]
 80092d0:	2b2a      	cmp	r3, #42	; 0x2a
 80092d2:	d135      	bne.n	8009340 <_vfiprintf_r+0x1b0>
 80092d4:	9b07      	ldr	r3, [sp, #28]
 80092d6:	3502      	adds	r5, #2
 80092d8:	1d1a      	adds	r2, r3, #4
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	9207      	str	r2, [sp, #28]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	db2b      	blt.n	800933a <_vfiprintf_r+0x1aa>
 80092e2:	9309      	str	r3, [sp, #36]	; 0x24
 80092e4:	4e31      	ldr	r6, [pc, #196]	; (80093ac <_vfiprintf_r+0x21c>)
 80092e6:	7829      	ldrb	r1, [r5, #0]
 80092e8:	2203      	movs	r2, #3
 80092ea:	0030      	movs	r0, r6
 80092ec:	f000 fcc8 	bl	8009c80 <memchr>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d006      	beq.n	8009302 <_vfiprintf_r+0x172>
 80092f4:	2340      	movs	r3, #64	; 0x40
 80092f6:	1b80      	subs	r0, r0, r6
 80092f8:	4083      	lsls	r3, r0
 80092fa:	6822      	ldr	r2, [r4, #0]
 80092fc:	3501      	adds	r5, #1
 80092fe:	4313      	orrs	r3, r2
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	7829      	ldrb	r1, [r5, #0]
 8009304:	2206      	movs	r2, #6
 8009306:	482a      	ldr	r0, [pc, #168]	; (80093b0 <_vfiprintf_r+0x220>)
 8009308:	1c6e      	adds	r6, r5, #1
 800930a:	7621      	strb	r1, [r4, #24]
 800930c:	f000 fcb8 	bl	8009c80 <memchr>
 8009310:	2800      	cmp	r0, #0
 8009312:	d03a      	beq.n	800938a <_vfiprintf_r+0x1fa>
 8009314:	4b27      	ldr	r3, [pc, #156]	; (80093b4 <_vfiprintf_r+0x224>)
 8009316:	2b00      	cmp	r3, #0
 8009318:	d125      	bne.n	8009366 <_vfiprintf_r+0x1d6>
 800931a:	2207      	movs	r2, #7
 800931c:	9b07      	ldr	r3, [sp, #28]
 800931e:	3307      	adds	r3, #7
 8009320:	4393      	bics	r3, r2
 8009322:	3308      	adds	r3, #8
 8009324:	9307      	str	r3, [sp, #28]
 8009326:	6963      	ldr	r3, [r4, #20]
 8009328:	9a04      	ldr	r2, [sp, #16]
 800932a:	189b      	adds	r3, r3, r2
 800932c:	6163      	str	r3, [r4, #20]
 800932e:	e750      	b.n	80091d2 <_vfiprintf_r+0x42>
 8009330:	4343      	muls	r3, r0
 8009332:	2101      	movs	r1, #1
 8009334:	189b      	adds	r3, r3, r2
 8009336:	0035      	movs	r5, r6
 8009338:	e790      	b.n	800925c <_vfiprintf_r+0xcc>
 800933a:	2301      	movs	r3, #1
 800933c:	425b      	negs	r3, r3
 800933e:	e7d0      	b.n	80092e2 <_vfiprintf_r+0x152>
 8009340:	2300      	movs	r3, #0
 8009342:	200a      	movs	r0, #10
 8009344:	001a      	movs	r2, r3
 8009346:	3501      	adds	r5, #1
 8009348:	6063      	str	r3, [r4, #4]
 800934a:	7829      	ldrb	r1, [r5, #0]
 800934c:	1c6e      	adds	r6, r5, #1
 800934e:	3930      	subs	r1, #48	; 0x30
 8009350:	2909      	cmp	r1, #9
 8009352:	d903      	bls.n	800935c <_vfiprintf_r+0x1cc>
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0c5      	beq.n	80092e4 <_vfiprintf_r+0x154>
 8009358:	9209      	str	r2, [sp, #36]	; 0x24
 800935a:	e7c3      	b.n	80092e4 <_vfiprintf_r+0x154>
 800935c:	4342      	muls	r2, r0
 800935e:	2301      	movs	r3, #1
 8009360:	1852      	adds	r2, r2, r1
 8009362:	0035      	movs	r5, r6
 8009364:	e7f1      	b.n	800934a <_vfiprintf_r+0x1ba>
 8009366:	ab07      	add	r3, sp, #28
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	003a      	movs	r2, r7
 800936c:	4b12      	ldr	r3, [pc, #72]	; (80093b8 <_vfiprintf_r+0x228>)
 800936e:	0021      	movs	r1, r4
 8009370:	9803      	ldr	r0, [sp, #12]
 8009372:	e000      	b.n	8009376 <_vfiprintf_r+0x1e6>
 8009374:	bf00      	nop
 8009376:	9004      	str	r0, [sp, #16]
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	3301      	adds	r3, #1
 800937c:	d1d3      	bne.n	8009326 <_vfiprintf_r+0x196>
 800937e:	89bb      	ldrh	r3, [r7, #12]
 8009380:	065b      	lsls	r3, r3, #25
 8009382:	d500      	bpl.n	8009386 <_vfiprintf_r+0x1f6>
 8009384:	e784      	b.n	8009290 <_vfiprintf_r+0x100>
 8009386:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009388:	e784      	b.n	8009294 <_vfiprintf_r+0x104>
 800938a:	ab07      	add	r3, sp, #28
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	003a      	movs	r2, r7
 8009390:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <_vfiprintf_r+0x228>)
 8009392:	0021      	movs	r1, r4
 8009394:	9803      	ldr	r0, [sp, #12]
 8009396:	f000 f87f 	bl	8009498 <_printf_i>
 800939a:	e7ec      	b.n	8009376 <_vfiprintf_r+0x1e6>
 800939c:	0800b5e8 	.word	0x0800b5e8
 80093a0:	0800b594 	.word	0x0800b594
 80093a4:	0800b608 	.word	0x0800b608
 80093a8:	0800b5c8 	.word	0x0800b5c8
 80093ac:	0800b59a 	.word	0x0800b59a
 80093b0:	0800b59e 	.word	0x0800b59e
 80093b4:	00000000 	.word	0x00000000
 80093b8:	0800916d 	.word	0x0800916d

080093bc <_printf_common>:
 80093bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093be:	0015      	movs	r5, r2
 80093c0:	9301      	str	r3, [sp, #4]
 80093c2:	688a      	ldr	r2, [r1, #8]
 80093c4:	690b      	ldr	r3, [r1, #16]
 80093c6:	9000      	str	r0, [sp, #0]
 80093c8:	000c      	movs	r4, r1
 80093ca:	4293      	cmp	r3, r2
 80093cc:	da00      	bge.n	80093d0 <_printf_common+0x14>
 80093ce:	0013      	movs	r3, r2
 80093d0:	0022      	movs	r2, r4
 80093d2:	602b      	str	r3, [r5, #0]
 80093d4:	3243      	adds	r2, #67	; 0x43
 80093d6:	7812      	ldrb	r2, [r2, #0]
 80093d8:	2a00      	cmp	r2, #0
 80093da:	d001      	beq.n	80093e0 <_printf_common+0x24>
 80093dc:	3301      	adds	r3, #1
 80093de:	602b      	str	r3, [r5, #0]
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	069b      	lsls	r3, r3, #26
 80093e4:	d502      	bpl.n	80093ec <_printf_common+0x30>
 80093e6:	682b      	ldr	r3, [r5, #0]
 80093e8:	3302      	adds	r3, #2
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	2706      	movs	r7, #6
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	401f      	ands	r7, r3
 80093f2:	d027      	beq.n	8009444 <_printf_common+0x88>
 80093f4:	0023      	movs	r3, r4
 80093f6:	3343      	adds	r3, #67	; 0x43
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	1e5a      	subs	r2, r3, #1
 80093fc:	4193      	sbcs	r3, r2
 80093fe:	6822      	ldr	r2, [r4, #0]
 8009400:	0692      	lsls	r2, r2, #26
 8009402:	d430      	bmi.n	8009466 <_printf_common+0xaa>
 8009404:	0022      	movs	r2, r4
 8009406:	9901      	ldr	r1, [sp, #4]
 8009408:	3243      	adds	r2, #67	; 0x43
 800940a:	9800      	ldr	r0, [sp, #0]
 800940c:	9e08      	ldr	r6, [sp, #32]
 800940e:	47b0      	blx	r6
 8009410:	1c43      	adds	r3, r0, #1
 8009412:	d025      	beq.n	8009460 <_printf_common+0xa4>
 8009414:	2306      	movs	r3, #6
 8009416:	6820      	ldr	r0, [r4, #0]
 8009418:	682a      	ldr	r2, [r5, #0]
 800941a:	68e1      	ldr	r1, [r4, #12]
 800941c:	4003      	ands	r3, r0
 800941e:	2500      	movs	r5, #0
 8009420:	2b04      	cmp	r3, #4
 8009422:	d103      	bne.n	800942c <_printf_common+0x70>
 8009424:	1a8d      	subs	r5, r1, r2
 8009426:	43eb      	mvns	r3, r5
 8009428:	17db      	asrs	r3, r3, #31
 800942a:	401d      	ands	r5, r3
 800942c:	68a3      	ldr	r3, [r4, #8]
 800942e:	6922      	ldr	r2, [r4, #16]
 8009430:	4293      	cmp	r3, r2
 8009432:	dd01      	ble.n	8009438 <_printf_common+0x7c>
 8009434:	1a9b      	subs	r3, r3, r2
 8009436:	18ed      	adds	r5, r5, r3
 8009438:	2700      	movs	r7, #0
 800943a:	42bd      	cmp	r5, r7
 800943c:	d120      	bne.n	8009480 <_printf_common+0xc4>
 800943e:	2000      	movs	r0, #0
 8009440:	e010      	b.n	8009464 <_printf_common+0xa8>
 8009442:	3701      	adds	r7, #1
 8009444:	68e3      	ldr	r3, [r4, #12]
 8009446:	682a      	ldr	r2, [r5, #0]
 8009448:	1a9b      	subs	r3, r3, r2
 800944a:	42bb      	cmp	r3, r7
 800944c:	ddd2      	ble.n	80093f4 <_printf_common+0x38>
 800944e:	0022      	movs	r2, r4
 8009450:	2301      	movs	r3, #1
 8009452:	3219      	adds	r2, #25
 8009454:	9901      	ldr	r1, [sp, #4]
 8009456:	9800      	ldr	r0, [sp, #0]
 8009458:	9e08      	ldr	r6, [sp, #32]
 800945a:	47b0      	blx	r6
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	d1f0      	bne.n	8009442 <_printf_common+0x86>
 8009460:	2001      	movs	r0, #1
 8009462:	4240      	negs	r0, r0
 8009464:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009466:	2030      	movs	r0, #48	; 0x30
 8009468:	18e1      	adds	r1, r4, r3
 800946a:	3143      	adds	r1, #67	; 0x43
 800946c:	7008      	strb	r0, [r1, #0]
 800946e:	0021      	movs	r1, r4
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	3145      	adds	r1, #69	; 0x45
 8009474:	7809      	ldrb	r1, [r1, #0]
 8009476:	18a2      	adds	r2, r4, r2
 8009478:	3243      	adds	r2, #67	; 0x43
 800947a:	3302      	adds	r3, #2
 800947c:	7011      	strb	r1, [r2, #0]
 800947e:	e7c1      	b.n	8009404 <_printf_common+0x48>
 8009480:	0022      	movs	r2, r4
 8009482:	2301      	movs	r3, #1
 8009484:	321a      	adds	r2, #26
 8009486:	9901      	ldr	r1, [sp, #4]
 8009488:	9800      	ldr	r0, [sp, #0]
 800948a:	9e08      	ldr	r6, [sp, #32]
 800948c:	47b0      	blx	r6
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d0e6      	beq.n	8009460 <_printf_common+0xa4>
 8009492:	3701      	adds	r7, #1
 8009494:	e7d1      	b.n	800943a <_printf_common+0x7e>
	...

08009498 <_printf_i>:
 8009498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949a:	b089      	sub	sp, #36	; 0x24
 800949c:	9204      	str	r2, [sp, #16]
 800949e:	000a      	movs	r2, r1
 80094a0:	3243      	adds	r2, #67	; 0x43
 80094a2:	9305      	str	r3, [sp, #20]
 80094a4:	9003      	str	r0, [sp, #12]
 80094a6:	9202      	str	r2, [sp, #8]
 80094a8:	7e0a      	ldrb	r2, [r1, #24]
 80094aa:	000c      	movs	r4, r1
 80094ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094ae:	2a6e      	cmp	r2, #110	; 0x6e
 80094b0:	d100      	bne.n	80094b4 <_printf_i+0x1c>
 80094b2:	e086      	b.n	80095c2 <_printf_i+0x12a>
 80094b4:	d81f      	bhi.n	80094f6 <_printf_i+0x5e>
 80094b6:	2a63      	cmp	r2, #99	; 0x63
 80094b8:	d033      	beq.n	8009522 <_printf_i+0x8a>
 80094ba:	d808      	bhi.n	80094ce <_printf_i+0x36>
 80094bc:	2a00      	cmp	r2, #0
 80094be:	d100      	bne.n	80094c2 <_printf_i+0x2a>
 80094c0:	e08c      	b.n	80095dc <_printf_i+0x144>
 80094c2:	2a58      	cmp	r2, #88	; 0x58
 80094c4:	d04d      	beq.n	8009562 <_printf_i+0xca>
 80094c6:	0025      	movs	r5, r4
 80094c8:	3542      	adds	r5, #66	; 0x42
 80094ca:	702a      	strb	r2, [r5, #0]
 80094cc:	e030      	b.n	8009530 <_printf_i+0x98>
 80094ce:	2a64      	cmp	r2, #100	; 0x64
 80094d0:	d001      	beq.n	80094d6 <_printf_i+0x3e>
 80094d2:	2a69      	cmp	r2, #105	; 0x69
 80094d4:	d1f7      	bne.n	80094c6 <_printf_i+0x2e>
 80094d6:	6819      	ldr	r1, [r3, #0]
 80094d8:	6825      	ldr	r5, [r4, #0]
 80094da:	1d0a      	adds	r2, r1, #4
 80094dc:	0628      	lsls	r0, r5, #24
 80094de:	d529      	bpl.n	8009534 <_printf_i+0x9c>
 80094e0:	6808      	ldr	r0, [r1, #0]
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	2800      	cmp	r0, #0
 80094e6:	da03      	bge.n	80094f0 <_printf_i+0x58>
 80094e8:	232d      	movs	r3, #45	; 0x2d
 80094ea:	9a02      	ldr	r2, [sp, #8]
 80094ec:	4240      	negs	r0, r0
 80094ee:	7013      	strb	r3, [r2, #0]
 80094f0:	4e6b      	ldr	r6, [pc, #428]	; (80096a0 <_printf_i+0x208>)
 80094f2:	270a      	movs	r7, #10
 80094f4:	e04f      	b.n	8009596 <_printf_i+0xfe>
 80094f6:	2a73      	cmp	r2, #115	; 0x73
 80094f8:	d074      	beq.n	80095e4 <_printf_i+0x14c>
 80094fa:	d808      	bhi.n	800950e <_printf_i+0x76>
 80094fc:	2a6f      	cmp	r2, #111	; 0x6f
 80094fe:	d01f      	beq.n	8009540 <_printf_i+0xa8>
 8009500:	2a70      	cmp	r2, #112	; 0x70
 8009502:	d1e0      	bne.n	80094c6 <_printf_i+0x2e>
 8009504:	2220      	movs	r2, #32
 8009506:	6809      	ldr	r1, [r1, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	6022      	str	r2, [r4, #0]
 800950c:	e003      	b.n	8009516 <_printf_i+0x7e>
 800950e:	2a75      	cmp	r2, #117	; 0x75
 8009510:	d016      	beq.n	8009540 <_printf_i+0xa8>
 8009512:	2a78      	cmp	r2, #120	; 0x78
 8009514:	d1d7      	bne.n	80094c6 <_printf_i+0x2e>
 8009516:	0022      	movs	r2, r4
 8009518:	2178      	movs	r1, #120	; 0x78
 800951a:	3245      	adds	r2, #69	; 0x45
 800951c:	7011      	strb	r1, [r2, #0]
 800951e:	4e61      	ldr	r6, [pc, #388]	; (80096a4 <_printf_i+0x20c>)
 8009520:	e022      	b.n	8009568 <_printf_i+0xd0>
 8009522:	0025      	movs	r5, r4
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	3542      	adds	r5, #66	; 0x42
 8009528:	1d11      	adds	r1, r2, #4
 800952a:	6019      	str	r1, [r3, #0]
 800952c:	6813      	ldr	r3, [r2, #0]
 800952e:	702b      	strb	r3, [r5, #0]
 8009530:	2301      	movs	r3, #1
 8009532:	e065      	b.n	8009600 <_printf_i+0x168>
 8009534:	6808      	ldr	r0, [r1, #0]
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	0669      	lsls	r1, r5, #25
 800953a:	d5d3      	bpl.n	80094e4 <_printf_i+0x4c>
 800953c:	b200      	sxth	r0, r0
 800953e:	e7d1      	b.n	80094e4 <_printf_i+0x4c>
 8009540:	6819      	ldr	r1, [r3, #0]
 8009542:	6825      	ldr	r5, [r4, #0]
 8009544:	1d08      	adds	r0, r1, #4
 8009546:	6018      	str	r0, [r3, #0]
 8009548:	6808      	ldr	r0, [r1, #0]
 800954a:	062e      	lsls	r6, r5, #24
 800954c:	d505      	bpl.n	800955a <_printf_i+0xc2>
 800954e:	4e54      	ldr	r6, [pc, #336]	; (80096a0 <_printf_i+0x208>)
 8009550:	2708      	movs	r7, #8
 8009552:	2a6f      	cmp	r2, #111	; 0x6f
 8009554:	d01b      	beq.n	800958e <_printf_i+0xf6>
 8009556:	270a      	movs	r7, #10
 8009558:	e019      	b.n	800958e <_printf_i+0xf6>
 800955a:	066d      	lsls	r5, r5, #25
 800955c:	d5f7      	bpl.n	800954e <_printf_i+0xb6>
 800955e:	b280      	uxth	r0, r0
 8009560:	e7f5      	b.n	800954e <_printf_i+0xb6>
 8009562:	3145      	adds	r1, #69	; 0x45
 8009564:	4e4e      	ldr	r6, [pc, #312]	; (80096a0 <_printf_i+0x208>)
 8009566:	700a      	strb	r2, [r1, #0]
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	6822      	ldr	r2, [r4, #0]
 800956c:	1d01      	adds	r1, r0, #4
 800956e:	6800      	ldr	r0, [r0, #0]
 8009570:	6019      	str	r1, [r3, #0]
 8009572:	0615      	lsls	r5, r2, #24
 8009574:	d521      	bpl.n	80095ba <_printf_i+0x122>
 8009576:	07d3      	lsls	r3, r2, #31
 8009578:	d502      	bpl.n	8009580 <_printf_i+0xe8>
 800957a:	2320      	movs	r3, #32
 800957c:	431a      	orrs	r2, r3
 800957e:	6022      	str	r2, [r4, #0]
 8009580:	2710      	movs	r7, #16
 8009582:	2800      	cmp	r0, #0
 8009584:	d103      	bne.n	800958e <_printf_i+0xf6>
 8009586:	2320      	movs	r3, #32
 8009588:	6822      	ldr	r2, [r4, #0]
 800958a:	439a      	bics	r2, r3
 800958c:	6022      	str	r2, [r4, #0]
 800958e:	0023      	movs	r3, r4
 8009590:	2200      	movs	r2, #0
 8009592:	3343      	adds	r3, #67	; 0x43
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	6863      	ldr	r3, [r4, #4]
 8009598:	60a3      	str	r3, [r4, #8]
 800959a:	2b00      	cmp	r3, #0
 800959c:	db58      	blt.n	8009650 <_printf_i+0x1b8>
 800959e:	2204      	movs	r2, #4
 80095a0:	6821      	ldr	r1, [r4, #0]
 80095a2:	4391      	bics	r1, r2
 80095a4:	6021      	str	r1, [r4, #0]
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d154      	bne.n	8009654 <_printf_i+0x1bc>
 80095aa:	9d02      	ldr	r5, [sp, #8]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d05a      	beq.n	8009666 <_printf_i+0x1ce>
 80095b0:	0025      	movs	r5, r4
 80095b2:	7833      	ldrb	r3, [r6, #0]
 80095b4:	3542      	adds	r5, #66	; 0x42
 80095b6:	702b      	strb	r3, [r5, #0]
 80095b8:	e055      	b.n	8009666 <_printf_i+0x1ce>
 80095ba:	0655      	lsls	r5, r2, #25
 80095bc:	d5db      	bpl.n	8009576 <_printf_i+0xde>
 80095be:	b280      	uxth	r0, r0
 80095c0:	e7d9      	b.n	8009576 <_printf_i+0xde>
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	680d      	ldr	r5, [r1, #0]
 80095c6:	1d10      	adds	r0, r2, #4
 80095c8:	6949      	ldr	r1, [r1, #20]
 80095ca:	6018      	str	r0, [r3, #0]
 80095cc:	6813      	ldr	r3, [r2, #0]
 80095ce:	062e      	lsls	r6, r5, #24
 80095d0:	d501      	bpl.n	80095d6 <_printf_i+0x13e>
 80095d2:	6019      	str	r1, [r3, #0]
 80095d4:	e002      	b.n	80095dc <_printf_i+0x144>
 80095d6:	066d      	lsls	r5, r5, #25
 80095d8:	d5fb      	bpl.n	80095d2 <_printf_i+0x13a>
 80095da:	8019      	strh	r1, [r3, #0]
 80095dc:	2300      	movs	r3, #0
 80095de:	9d02      	ldr	r5, [sp, #8]
 80095e0:	6123      	str	r3, [r4, #16]
 80095e2:	e04f      	b.n	8009684 <_printf_i+0x1ec>
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	1d11      	adds	r1, r2, #4
 80095e8:	6019      	str	r1, [r3, #0]
 80095ea:	6815      	ldr	r5, [r2, #0]
 80095ec:	2100      	movs	r1, #0
 80095ee:	6862      	ldr	r2, [r4, #4]
 80095f0:	0028      	movs	r0, r5
 80095f2:	f000 fb45 	bl	8009c80 <memchr>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d001      	beq.n	80095fe <_printf_i+0x166>
 80095fa:	1b40      	subs	r0, r0, r5
 80095fc:	6060      	str	r0, [r4, #4]
 80095fe:	6863      	ldr	r3, [r4, #4]
 8009600:	6123      	str	r3, [r4, #16]
 8009602:	2300      	movs	r3, #0
 8009604:	9a02      	ldr	r2, [sp, #8]
 8009606:	7013      	strb	r3, [r2, #0]
 8009608:	e03c      	b.n	8009684 <_printf_i+0x1ec>
 800960a:	6923      	ldr	r3, [r4, #16]
 800960c:	002a      	movs	r2, r5
 800960e:	9904      	ldr	r1, [sp, #16]
 8009610:	9803      	ldr	r0, [sp, #12]
 8009612:	9d05      	ldr	r5, [sp, #20]
 8009614:	47a8      	blx	r5
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	d03e      	beq.n	8009698 <_printf_i+0x200>
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	079b      	lsls	r3, r3, #30
 800961e:	d415      	bmi.n	800964c <_printf_i+0x1b4>
 8009620:	9b07      	ldr	r3, [sp, #28]
 8009622:	68e0      	ldr	r0, [r4, #12]
 8009624:	4298      	cmp	r0, r3
 8009626:	da39      	bge.n	800969c <_printf_i+0x204>
 8009628:	0018      	movs	r0, r3
 800962a:	e037      	b.n	800969c <_printf_i+0x204>
 800962c:	0022      	movs	r2, r4
 800962e:	2301      	movs	r3, #1
 8009630:	3219      	adds	r2, #25
 8009632:	9904      	ldr	r1, [sp, #16]
 8009634:	9803      	ldr	r0, [sp, #12]
 8009636:	9e05      	ldr	r6, [sp, #20]
 8009638:	47b0      	blx	r6
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	d02c      	beq.n	8009698 <_printf_i+0x200>
 800963e:	3501      	adds	r5, #1
 8009640:	68e3      	ldr	r3, [r4, #12]
 8009642:	9a07      	ldr	r2, [sp, #28]
 8009644:	1a9b      	subs	r3, r3, r2
 8009646:	42ab      	cmp	r3, r5
 8009648:	dcf0      	bgt.n	800962c <_printf_i+0x194>
 800964a:	e7e9      	b.n	8009620 <_printf_i+0x188>
 800964c:	2500      	movs	r5, #0
 800964e:	e7f7      	b.n	8009640 <_printf_i+0x1a8>
 8009650:	2800      	cmp	r0, #0
 8009652:	d0ad      	beq.n	80095b0 <_printf_i+0x118>
 8009654:	9d02      	ldr	r5, [sp, #8]
 8009656:	0039      	movs	r1, r7
 8009658:	f7f6 fddc 	bl	8000214 <__aeabi_uidivmod>
 800965c:	5c73      	ldrb	r3, [r6, r1]
 800965e:	3d01      	subs	r5, #1
 8009660:	702b      	strb	r3, [r5, #0]
 8009662:	2800      	cmp	r0, #0
 8009664:	d1f7      	bne.n	8009656 <_printf_i+0x1be>
 8009666:	2f08      	cmp	r7, #8
 8009668:	d109      	bne.n	800967e <_printf_i+0x1e6>
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	07db      	lsls	r3, r3, #31
 800966e:	d506      	bpl.n	800967e <_printf_i+0x1e6>
 8009670:	6863      	ldr	r3, [r4, #4]
 8009672:	6922      	ldr	r2, [r4, #16]
 8009674:	4293      	cmp	r3, r2
 8009676:	dc02      	bgt.n	800967e <_printf_i+0x1e6>
 8009678:	2330      	movs	r3, #48	; 0x30
 800967a:	3d01      	subs	r5, #1
 800967c:	702b      	strb	r3, [r5, #0]
 800967e:	9b02      	ldr	r3, [sp, #8]
 8009680:	1b5b      	subs	r3, r3, r5
 8009682:	6123      	str	r3, [r4, #16]
 8009684:	9b05      	ldr	r3, [sp, #20]
 8009686:	aa07      	add	r2, sp, #28
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	0021      	movs	r1, r4
 800968c:	9b04      	ldr	r3, [sp, #16]
 800968e:	9803      	ldr	r0, [sp, #12]
 8009690:	f7ff fe94 	bl	80093bc <_printf_common>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d1b8      	bne.n	800960a <_printf_i+0x172>
 8009698:	2001      	movs	r0, #1
 800969a:	4240      	negs	r0, r0
 800969c:	b009      	add	sp, #36	; 0x24
 800969e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a0:	0800b5a5 	.word	0x0800b5a5
 80096a4:	0800b5b6 	.word	0x0800b5b6

080096a8 <siprintf>:
 80096a8:	b40e      	push	{r1, r2, r3}
 80096aa:	b500      	push	{lr}
 80096ac:	490b      	ldr	r1, [pc, #44]	; (80096dc <siprintf+0x34>)
 80096ae:	b09c      	sub	sp, #112	; 0x70
 80096b0:	ab1d      	add	r3, sp, #116	; 0x74
 80096b2:	9002      	str	r0, [sp, #8]
 80096b4:	9006      	str	r0, [sp, #24]
 80096b6:	9107      	str	r1, [sp, #28]
 80096b8:	9104      	str	r1, [sp, #16]
 80096ba:	4809      	ldr	r0, [pc, #36]	; (80096e0 <siprintf+0x38>)
 80096bc:	4909      	ldr	r1, [pc, #36]	; (80096e4 <siprintf+0x3c>)
 80096be:	cb04      	ldmia	r3!, {r2}
 80096c0:	9105      	str	r1, [sp, #20]
 80096c2:	6800      	ldr	r0, [r0, #0]
 80096c4:	a902      	add	r1, sp, #8
 80096c6:	9301      	str	r3, [sp, #4]
 80096c8:	f000 fc28 	bl	8009f1c <_svfiprintf_r>
 80096cc:	2300      	movs	r3, #0
 80096ce:	9a02      	ldr	r2, [sp, #8]
 80096d0:	7013      	strb	r3, [r2, #0]
 80096d2:	b01c      	add	sp, #112	; 0x70
 80096d4:	bc08      	pop	{r3}
 80096d6:	b003      	add	sp, #12
 80096d8:	4718      	bx	r3
 80096da:	46c0      	nop			; (mov r8, r8)
 80096dc:	7fffffff 	.word	0x7fffffff
 80096e0:	20000148 	.word	0x20000148
 80096e4:	ffff0208 	.word	0xffff0208

080096e8 <__swbuf_r>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	0005      	movs	r5, r0
 80096ec:	000e      	movs	r6, r1
 80096ee:	0014      	movs	r4, r2
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d004      	beq.n	80096fe <__swbuf_r+0x16>
 80096f4:	6983      	ldr	r3, [r0, #24]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <__swbuf_r+0x16>
 80096fa:	f000 f9c1 	bl	8009a80 <__sinit>
 80096fe:	4b22      	ldr	r3, [pc, #136]	; (8009788 <__swbuf_r+0xa0>)
 8009700:	429c      	cmp	r4, r3
 8009702:	d12d      	bne.n	8009760 <__swbuf_r+0x78>
 8009704:	686c      	ldr	r4, [r5, #4]
 8009706:	69a3      	ldr	r3, [r4, #24]
 8009708:	60a3      	str	r3, [r4, #8]
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	071b      	lsls	r3, r3, #28
 800970e:	d531      	bpl.n	8009774 <__swbuf_r+0x8c>
 8009710:	6923      	ldr	r3, [r4, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d02e      	beq.n	8009774 <__swbuf_r+0x8c>
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	6922      	ldr	r2, [r4, #16]
 800971a:	b2f7      	uxtb	r7, r6
 800971c:	1a98      	subs	r0, r3, r2
 800971e:	6963      	ldr	r3, [r4, #20]
 8009720:	b2f6      	uxtb	r6, r6
 8009722:	4283      	cmp	r3, r0
 8009724:	dc05      	bgt.n	8009732 <__swbuf_r+0x4a>
 8009726:	0021      	movs	r1, r4
 8009728:	0028      	movs	r0, r5
 800972a:	f000 f93b 	bl	80099a4 <_fflush_r>
 800972e:	2800      	cmp	r0, #0
 8009730:	d126      	bne.n	8009780 <__swbuf_r+0x98>
 8009732:	68a3      	ldr	r3, [r4, #8]
 8009734:	3001      	adds	r0, #1
 8009736:	3b01      	subs	r3, #1
 8009738:	60a3      	str	r3, [r4, #8]
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	6022      	str	r2, [r4, #0]
 8009740:	701f      	strb	r7, [r3, #0]
 8009742:	6963      	ldr	r3, [r4, #20]
 8009744:	4283      	cmp	r3, r0
 8009746:	d004      	beq.n	8009752 <__swbuf_r+0x6a>
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	07db      	lsls	r3, r3, #31
 800974c:	d51a      	bpl.n	8009784 <__swbuf_r+0x9c>
 800974e:	2e0a      	cmp	r6, #10
 8009750:	d118      	bne.n	8009784 <__swbuf_r+0x9c>
 8009752:	0021      	movs	r1, r4
 8009754:	0028      	movs	r0, r5
 8009756:	f000 f925 	bl	80099a4 <_fflush_r>
 800975a:	2800      	cmp	r0, #0
 800975c:	d012      	beq.n	8009784 <__swbuf_r+0x9c>
 800975e:	e00f      	b.n	8009780 <__swbuf_r+0x98>
 8009760:	4b0a      	ldr	r3, [pc, #40]	; (800978c <__swbuf_r+0xa4>)
 8009762:	429c      	cmp	r4, r3
 8009764:	d101      	bne.n	800976a <__swbuf_r+0x82>
 8009766:	68ac      	ldr	r4, [r5, #8]
 8009768:	e7cd      	b.n	8009706 <__swbuf_r+0x1e>
 800976a:	4b09      	ldr	r3, [pc, #36]	; (8009790 <__swbuf_r+0xa8>)
 800976c:	429c      	cmp	r4, r3
 800976e:	d1ca      	bne.n	8009706 <__swbuf_r+0x1e>
 8009770:	68ec      	ldr	r4, [r5, #12]
 8009772:	e7c8      	b.n	8009706 <__swbuf_r+0x1e>
 8009774:	0021      	movs	r1, r4
 8009776:	0028      	movs	r0, r5
 8009778:	f000 f80c 	bl	8009794 <__swsetup_r>
 800977c:	2800      	cmp	r0, #0
 800977e:	d0ca      	beq.n	8009716 <__swbuf_r+0x2e>
 8009780:	2601      	movs	r6, #1
 8009782:	4276      	negs	r6, r6
 8009784:	0030      	movs	r0, r6
 8009786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009788:	0800b5e8 	.word	0x0800b5e8
 800978c:	0800b608 	.word	0x0800b608
 8009790:	0800b5c8 	.word	0x0800b5c8

08009794 <__swsetup_r>:
 8009794:	4b36      	ldr	r3, [pc, #216]	; (8009870 <__swsetup_r+0xdc>)
 8009796:	b570      	push	{r4, r5, r6, lr}
 8009798:	681d      	ldr	r5, [r3, #0]
 800979a:	0006      	movs	r6, r0
 800979c:	000c      	movs	r4, r1
 800979e:	2d00      	cmp	r5, #0
 80097a0:	d005      	beq.n	80097ae <__swsetup_r+0x1a>
 80097a2:	69ab      	ldr	r3, [r5, #24]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d102      	bne.n	80097ae <__swsetup_r+0x1a>
 80097a8:	0028      	movs	r0, r5
 80097aa:	f000 f969 	bl	8009a80 <__sinit>
 80097ae:	4b31      	ldr	r3, [pc, #196]	; (8009874 <__swsetup_r+0xe0>)
 80097b0:	429c      	cmp	r4, r3
 80097b2:	d10f      	bne.n	80097d4 <__swsetup_r+0x40>
 80097b4:	686c      	ldr	r4, [r5, #4]
 80097b6:	230c      	movs	r3, #12
 80097b8:	5ee2      	ldrsh	r2, [r4, r3]
 80097ba:	b293      	uxth	r3, r2
 80097bc:	0719      	lsls	r1, r3, #28
 80097be:	d42d      	bmi.n	800981c <__swsetup_r+0x88>
 80097c0:	06d9      	lsls	r1, r3, #27
 80097c2:	d411      	bmi.n	80097e8 <__swsetup_r+0x54>
 80097c4:	2309      	movs	r3, #9
 80097c6:	2001      	movs	r0, #1
 80097c8:	6033      	str	r3, [r6, #0]
 80097ca:	3337      	adds	r3, #55	; 0x37
 80097cc:	4313      	orrs	r3, r2
 80097ce:	81a3      	strh	r3, [r4, #12]
 80097d0:	4240      	negs	r0, r0
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	4b28      	ldr	r3, [pc, #160]	; (8009878 <__swsetup_r+0xe4>)
 80097d6:	429c      	cmp	r4, r3
 80097d8:	d101      	bne.n	80097de <__swsetup_r+0x4a>
 80097da:	68ac      	ldr	r4, [r5, #8]
 80097dc:	e7eb      	b.n	80097b6 <__swsetup_r+0x22>
 80097de:	4b27      	ldr	r3, [pc, #156]	; (800987c <__swsetup_r+0xe8>)
 80097e0:	429c      	cmp	r4, r3
 80097e2:	d1e8      	bne.n	80097b6 <__swsetup_r+0x22>
 80097e4:	68ec      	ldr	r4, [r5, #12]
 80097e6:	e7e6      	b.n	80097b6 <__swsetup_r+0x22>
 80097e8:	075b      	lsls	r3, r3, #29
 80097ea:	d513      	bpl.n	8009814 <__swsetup_r+0x80>
 80097ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097ee:	2900      	cmp	r1, #0
 80097f0:	d008      	beq.n	8009804 <__swsetup_r+0x70>
 80097f2:	0023      	movs	r3, r4
 80097f4:	3344      	adds	r3, #68	; 0x44
 80097f6:	4299      	cmp	r1, r3
 80097f8:	d002      	beq.n	8009800 <__swsetup_r+0x6c>
 80097fa:	0030      	movs	r0, r6
 80097fc:	f000 fa5e 	bl	8009cbc <_free_r>
 8009800:	2300      	movs	r3, #0
 8009802:	6363      	str	r3, [r4, #52]	; 0x34
 8009804:	2224      	movs	r2, #36	; 0x24
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	4393      	bics	r3, r2
 800980a:	81a3      	strh	r3, [r4, #12]
 800980c:	2300      	movs	r3, #0
 800980e:	6063      	str	r3, [r4, #4]
 8009810:	6923      	ldr	r3, [r4, #16]
 8009812:	6023      	str	r3, [r4, #0]
 8009814:	2308      	movs	r3, #8
 8009816:	89a2      	ldrh	r2, [r4, #12]
 8009818:	4313      	orrs	r3, r2
 800981a:	81a3      	strh	r3, [r4, #12]
 800981c:	6923      	ldr	r3, [r4, #16]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10b      	bne.n	800983a <__swsetup_r+0xa6>
 8009822:	21a0      	movs	r1, #160	; 0xa0
 8009824:	2280      	movs	r2, #128	; 0x80
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	0089      	lsls	r1, r1, #2
 800982a:	0092      	lsls	r2, r2, #2
 800982c:	400b      	ands	r3, r1
 800982e:	4293      	cmp	r3, r2
 8009830:	d003      	beq.n	800983a <__swsetup_r+0xa6>
 8009832:	0021      	movs	r1, r4
 8009834:	0030      	movs	r0, r6
 8009836:	f000 f9df 	bl	8009bf8 <__smakebuf_r>
 800983a:	2301      	movs	r3, #1
 800983c:	89a2      	ldrh	r2, [r4, #12]
 800983e:	4013      	ands	r3, r2
 8009840:	d011      	beq.n	8009866 <__swsetup_r+0xd2>
 8009842:	2300      	movs	r3, #0
 8009844:	60a3      	str	r3, [r4, #8]
 8009846:	6963      	ldr	r3, [r4, #20]
 8009848:	425b      	negs	r3, r3
 800984a:	61a3      	str	r3, [r4, #24]
 800984c:	2000      	movs	r0, #0
 800984e:	6923      	ldr	r3, [r4, #16]
 8009850:	4283      	cmp	r3, r0
 8009852:	d1be      	bne.n	80097d2 <__swsetup_r+0x3e>
 8009854:	230c      	movs	r3, #12
 8009856:	5ee2      	ldrsh	r2, [r4, r3]
 8009858:	0613      	lsls	r3, r2, #24
 800985a:	d5ba      	bpl.n	80097d2 <__swsetup_r+0x3e>
 800985c:	2340      	movs	r3, #64	; 0x40
 800985e:	4313      	orrs	r3, r2
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	3801      	subs	r0, #1
 8009864:	e7b5      	b.n	80097d2 <__swsetup_r+0x3e>
 8009866:	0792      	lsls	r2, r2, #30
 8009868:	d400      	bmi.n	800986c <__swsetup_r+0xd8>
 800986a:	6963      	ldr	r3, [r4, #20]
 800986c:	60a3      	str	r3, [r4, #8]
 800986e:	e7ed      	b.n	800984c <__swsetup_r+0xb8>
 8009870:	20000148 	.word	0x20000148
 8009874:	0800b5e8 	.word	0x0800b5e8
 8009878:	0800b608 	.word	0x0800b608
 800987c:	0800b5c8 	.word	0x0800b5c8

08009880 <abort>:
 8009880:	b510      	push	{r4, lr}
 8009882:	2006      	movs	r0, #6
 8009884:	f000 fc84 	bl	800a190 <raise>
 8009888:	2001      	movs	r0, #1
 800988a:	f000 fdb9 	bl	800a400 <_exit>
	...

08009890 <__sflush_r>:
 8009890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009892:	898a      	ldrh	r2, [r1, #12]
 8009894:	0005      	movs	r5, r0
 8009896:	000c      	movs	r4, r1
 8009898:	0713      	lsls	r3, r2, #28
 800989a:	d460      	bmi.n	800995e <__sflush_r+0xce>
 800989c:	684b      	ldr	r3, [r1, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dc04      	bgt.n	80098ac <__sflush_r+0x1c>
 80098a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	dc01      	bgt.n	80098ac <__sflush_r+0x1c>
 80098a8:	2000      	movs	r0, #0
 80098aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80098ae:	2f00      	cmp	r7, #0
 80098b0:	d0fa      	beq.n	80098a8 <__sflush_r+0x18>
 80098b2:	2300      	movs	r3, #0
 80098b4:	682e      	ldr	r6, [r5, #0]
 80098b6:	602b      	str	r3, [r5, #0]
 80098b8:	2380      	movs	r3, #128	; 0x80
 80098ba:	015b      	lsls	r3, r3, #5
 80098bc:	6a21      	ldr	r1, [r4, #32]
 80098be:	401a      	ands	r2, r3
 80098c0:	d034      	beq.n	800992c <__sflush_r+0x9c>
 80098c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098c4:	89a3      	ldrh	r3, [r4, #12]
 80098c6:	075b      	lsls	r3, r3, #29
 80098c8:	d506      	bpl.n	80098d8 <__sflush_r+0x48>
 80098ca:	6863      	ldr	r3, [r4, #4]
 80098cc:	1ac0      	subs	r0, r0, r3
 80098ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <__sflush_r+0x48>
 80098d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098d6:	1ac0      	subs	r0, r0, r3
 80098d8:	0002      	movs	r2, r0
 80098da:	6a21      	ldr	r1, [r4, #32]
 80098dc:	2300      	movs	r3, #0
 80098de:	0028      	movs	r0, r5
 80098e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80098e2:	47b8      	blx	r7
 80098e4:	89a1      	ldrh	r1, [r4, #12]
 80098e6:	1c43      	adds	r3, r0, #1
 80098e8:	d106      	bne.n	80098f8 <__sflush_r+0x68>
 80098ea:	682b      	ldr	r3, [r5, #0]
 80098ec:	2b1d      	cmp	r3, #29
 80098ee:	d830      	bhi.n	8009952 <__sflush_r+0xc2>
 80098f0:	4a2b      	ldr	r2, [pc, #172]	; (80099a0 <__sflush_r+0x110>)
 80098f2:	40da      	lsrs	r2, r3
 80098f4:	07d3      	lsls	r3, r2, #31
 80098f6:	d52c      	bpl.n	8009952 <__sflush_r+0xc2>
 80098f8:	2300      	movs	r3, #0
 80098fa:	6063      	str	r3, [r4, #4]
 80098fc:	6923      	ldr	r3, [r4, #16]
 80098fe:	6023      	str	r3, [r4, #0]
 8009900:	04cb      	lsls	r3, r1, #19
 8009902:	d505      	bpl.n	8009910 <__sflush_r+0x80>
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	d102      	bne.n	800990e <__sflush_r+0x7e>
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d100      	bne.n	8009910 <__sflush_r+0x80>
 800990e:	6560      	str	r0, [r4, #84]	; 0x54
 8009910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009912:	602e      	str	r6, [r5, #0]
 8009914:	2900      	cmp	r1, #0
 8009916:	d0c7      	beq.n	80098a8 <__sflush_r+0x18>
 8009918:	0023      	movs	r3, r4
 800991a:	3344      	adds	r3, #68	; 0x44
 800991c:	4299      	cmp	r1, r3
 800991e:	d002      	beq.n	8009926 <__sflush_r+0x96>
 8009920:	0028      	movs	r0, r5
 8009922:	f000 f9cb 	bl	8009cbc <_free_r>
 8009926:	2000      	movs	r0, #0
 8009928:	6360      	str	r0, [r4, #52]	; 0x34
 800992a:	e7be      	b.n	80098aa <__sflush_r+0x1a>
 800992c:	2301      	movs	r3, #1
 800992e:	0028      	movs	r0, r5
 8009930:	47b8      	blx	r7
 8009932:	1c43      	adds	r3, r0, #1
 8009934:	d1c6      	bne.n	80098c4 <__sflush_r+0x34>
 8009936:	682b      	ldr	r3, [r5, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d0c3      	beq.n	80098c4 <__sflush_r+0x34>
 800993c:	2b1d      	cmp	r3, #29
 800993e:	d001      	beq.n	8009944 <__sflush_r+0xb4>
 8009940:	2b16      	cmp	r3, #22
 8009942:	d101      	bne.n	8009948 <__sflush_r+0xb8>
 8009944:	602e      	str	r6, [r5, #0]
 8009946:	e7af      	b.n	80098a8 <__sflush_r+0x18>
 8009948:	2340      	movs	r3, #64	; 0x40
 800994a:	89a2      	ldrh	r2, [r4, #12]
 800994c:	4313      	orrs	r3, r2
 800994e:	81a3      	strh	r3, [r4, #12]
 8009950:	e7ab      	b.n	80098aa <__sflush_r+0x1a>
 8009952:	2340      	movs	r3, #64	; 0x40
 8009954:	430b      	orrs	r3, r1
 8009956:	2001      	movs	r0, #1
 8009958:	81a3      	strh	r3, [r4, #12]
 800995a:	4240      	negs	r0, r0
 800995c:	e7a5      	b.n	80098aa <__sflush_r+0x1a>
 800995e:	690f      	ldr	r7, [r1, #16]
 8009960:	2f00      	cmp	r7, #0
 8009962:	d0a1      	beq.n	80098a8 <__sflush_r+0x18>
 8009964:	680b      	ldr	r3, [r1, #0]
 8009966:	600f      	str	r7, [r1, #0]
 8009968:	1bdb      	subs	r3, r3, r7
 800996a:	9301      	str	r3, [sp, #4]
 800996c:	2300      	movs	r3, #0
 800996e:	0792      	lsls	r2, r2, #30
 8009970:	d100      	bne.n	8009974 <__sflush_r+0xe4>
 8009972:	694b      	ldr	r3, [r1, #20]
 8009974:	60a3      	str	r3, [r4, #8]
 8009976:	9b01      	ldr	r3, [sp, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	dc00      	bgt.n	800997e <__sflush_r+0xee>
 800997c:	e794      	b.n	80098a8 <__sflush_r+0x18>
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	003a      	movs	r2, r7
 8009982:	6a21      	ldr	r1, [r4, #32]
 8009984:	0028      	movs	r0, r5
 8009986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009988:	47b0      	blx	r6
 800998a:	2800      	cmp	r0, #0
 800998c:	dc03      	bgt.n	8009996 <__sflush_r+0x106>
 800998e:	2340      	movs	r3, #64	; 0x40
 8009990:	89a2      	ldrh	r2, [r4, #12]
 8009992:	4313      	orrs	r3, r2
 8009994:	e7df      	b.n	8009956 <__sflush_r+0xc6>
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	183f      	adds	r7, r7, r0
 800999a:	1a1b      	subs	r3, r3, r0
 800999c:	9301      	str	r3, [sp, #4]
 800999e:	e7ea      	b.n	8009976 <__sflush_r+0xe6>
 80099a0:	20400001 	.word	0x20400001

080099a4 <_fflush_r>:
 80099a4:	690b      	ldr	r3, [r1, #16]
 80099a6:	b570      	push	{r4, r5, r6, lr}
 80099a8:	0005      	movs	r5, r0
 80099aa:	000c      	movs	r4, r1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d101      	bne.n	80099b4 <_fflush_r+0x10>
 80099b0:	2000      	movs	r0, #0
 80099b2:	bd70      	pop	{r4, r5, r6, pc}
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d004      	beq.n	80099c2 <_fflush_r+0x1e>
 80099b8:	6983      	ldr	r3, [r0, #24]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <_fflush_r+0x1e>
 80099be:	f000 f85f 	bl	8009a80 <__sinit>
 80099c2:	4b0b      	ldr	r3, [pc, #44]	; (80099f0 <_fflush_r+0x4c>)
 80099c4:	429c      	cmp	r4, r3
 80099c6:	d109      	bne.n	80099dc <_fflush_r+0x38>
 80099c8:	686c      	ldr	r4, [r5, #4]
 80099ca:	220c      	movs	r2, #12
 80099cc:	5ea3      	ldrsh	r3, [r4, r2]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0ee      	beq.n	80099b0 <_fflush_r+0xc>
 80099d2:	0021      	movs	r1, r4
 80099d4:	0028      	movs	r0, r5
 80099d6:	f7ff ff5b 	bl	8009890 <__sflush_r>
 80099da:	e7ea      	b.n	80099b2 <_fflush_r+0xe>
 80099dc:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <_fflush_r+0x50>)
 80099de:	429c      	cmp	r4, r3
 80099e0:	d101      	bne.n	80099e6 <_fflush_r+0x42>
 80099e2:	68ac      	ldr	r4, [r5, #8]
 80099e4:	e7f1      	b.n	80099ca <_fflush_r+0x26>
 80099e6:	4b04      	ldr	r3, [pc, #16]	; (80099f8 <_fflush_r+0x54>)
 80099e8:	429c      	cmp	r4, r3
 80099ea:	d1ee      	bne.n	80099ca <_fflush_r+0x26>
 80099ec:	68ec      	ldr	r4, [r5, #12]
 80099ee:	e7ec      	b.n	80099ca <_fflush_r+0x26>
 80099f0:	0800b5e8 	.word	0x0800b5e8
 80099f4:	0800b608 	.word	0x0800b608
 80099f8:	0800b5c8 	.word	0x0800b5c8

080099fc <std>:
 80099fc:	2300      	movs	r3, #0
 80099fe:	b510      	push	{r4, lr}
 8009a00:	0004      	movs	r4, r0
 8009a02:	6003      	str	r3, [r0, #0]
 8009a04:	6043      	str	r3, [r0, #4]
 8009a06:	6083      	str	r3, [r0, #8]
 8009a08:	8181      	strh	r1, [r0, #12]
 8009a0a:	6643      	str	r3, [r0, #100]	; 0x64
 8009a0c:	81c2      	strh	r2, [r0, #14]
 8009a0e:	6103      	str	r3, [r0, #16]
 8009a10:	6143      	str	r3, [r0, #20]
 8009a12:	6183      	str	r3, [r0, #24]
 8009a14:	0019      	movs	r1, r3
 8009a16:	2208      	movs	r2, #8
 8009a18:	305c      	adds	r0, #92	; 0x5c
 8009a1a:	f7ff fb8a 	bl	8009132 <memset>
 8009a1e:	4b05      	ldr	r3, [pc, #20]	; (8009a34 <std+0x38>)
 8009a20:	6224      	str	r4, [r4, #32]
 8009a22:	6263      	str	r3, [r4, #36]	; 0x24
 8009a24:	4b04      	ldr	r3, [pc, #16]	; (8009a38 <std+0x3c>)
 8009a26:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a28:	4b04      	ldr	r3, [pc, #16]	; (8009a3c <std+0x40>)
 8009a2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a2c:	4b04      	ldr	r3, [pc, #16]	; (8009a40 <std+0x44>)
 8009a2e:	6323      	str	r3, [r4, #48]	; 0x30
 8009a30:	bd10      	pop	{r4, pc}
 8009a32:	46c0      	nop			; (mov r8, r8)
 8009a34:	0800a1d1 	.word	0x0800a1d1
 8009a38:	0800a1f9 	.word	0x0800a1f9
 8009a3c:	0800a231 	.word	0x0800a231
 8009a40:	0800a25d 	.word	0x0800a25d

08009a44 <_cleanup_r>:
 8009a44:	b510      	push	{r4, lr}
 8009a46:	4902      	ldr	r1, [pc, #8]	; (8009a50 <_cleanup_r+0xc>)
 8009a48:	f000 f88c 	bl	8009b64 <_fwalk_reent>
 8009a4c:	bd10      	pop	{r4, pc}
 8009a4e:	46c0      	nop			; (mov r8, r8)
 8009a50:	080099a5 	.word	0x080099a5

08009a54 <__sfmoreglue>:
 8009a54:	b570      	push	{r4, r5, r6, lr}
 8009a56:	2568      	movs	r5, #104	; 0x68
 8009a58:	1e4a      	subs	r2, r1, #1
 8009a5a:	4355      	muls	r5, r2
 8009a5c:	000e      	movs	r6, r1
 8009a5e:	0029      	movs	r1, r5
 8009a60:	3174      	adds	r1, #116	; 0x74
 8009a62:	f000 f975 	bl	8009d50 <_malloc_r>
 8009a66:	1e04      	subs	r4, r0, #0
 8009a68:	d008      	beq.n	8009a7c <__sfmoreglue+0x28>
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	002a      	movs	r2, r5
 8009a6e:	6001      	str	r1, [r0, #0]
 8009a70:	6046      	str	r6, [r0, #4]
 8009a72:	300c      	adds	r0, #12
 8009a74:	60a0      	str	r0, [r4, #8]
 8009a76:	3268      	adds	r2, #104	; 0x68
 8009a78:	f7ff fb5b 	bl	8009132 <memset>
 8009a7c:	0020      	movs	r0, r4
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}

08009a80 <__sinit>:
 8009a80:	6983      	ldr	r3, [r0, #24]
 8009a82:	b513      	push	{r0, r1, r4, lr}
 8009a84:	0004      	movs	r4, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d128      	bne.n	8009adc <__sinit+0x5c>
 8009a8a:	6483      	str	r3, [r0, #72]	; 0x48
 8009a8c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8009a8e:	6503      	str	r3, [r0, #80]	; 0x50
 8009a90:	4b13      	ldr	r3, [pc, #76]	; (8009ae0 <__sinit+0x60>)
 8009a92:	4a14      	ldr	r2, [pc, #80]	; (8009ae4 <__sinit+0x64>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6282      	str	r2, [r0, #40]	; 0x28
 8009a98:	9301      	str	r3, [sp, #4]
 8009a9a:	4298      	cmp	r0, r3
 8009a9c:	d101      	bne.n	8009aa2 <__sinit+0x22>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	6183      	str	r3, [r0, #24]
 8009aa2:	0020      	movs	r0, r4
 8009aa4:	f000 f820 	bl	8009ae8 <__sfp>
 8009aa8:	6060      	str	r0, [r4, #4]
 8009aaa:	0020      	movs	r0, r4
 8009aac:	f000 f81c 	bl	8009ae8 <__sfp>
 8009ab0:	60a0      	str	r0, [r4, #8]
 8009ab2:	0020      	movs	r0, r4
 8009ab4:	f000 f818 	bl	8009ae8 <__sfp>
 8009ab8:	2200      	movs	r2, #0
 8009aba:	60e0      	str	r0, [r4, #12]
 8009abc:	2104      	movs	r1, #4
 8009abe:	6860      	ldr	r0, [r4, #4]
 8009ac0:	f7ff ff9c 	bl	80099fc <std>
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	2109      	movs	r1, #9
 8009ac8:	68a0      	ldr	r0, [r4, #8]
 8009aca:	f7ff ff97 	bl	80099fc <std>
 8009ace:	2202      	movs	r2, #2
 8009ad0:	2112      	movs	r1, #18
 8009ad2:	68e0      	ldr	r0, [r4, #12]
 8009ad4:	f7ff ff92 	bl	80099fc <std>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	61a3      	str	r3, [r4, #24]
 8009adc:	bd13      	pop	{r0, r1, r4, pc}
 8009ade:	46c0      	nop			; (mov r8, r8)
 8009ae0:	0800b590 	.word	0x0800b590
 8009ae4:	08009a45 	.word	0x08009a45

08009ae8 <__sfp>:
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	4b1c      	ldr	r3, [pc, #112]	; (8009b5c <__sfp+0x74>)
 8009aec:	0007      	movs	r7, r0
 8009aee:	681e      	ldr	r6, [r3, #0]
 8009af0:	69b3      	ldr	r3, [r6, #24]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d102      	bne.n	8009afc <__sfp+0x14>
 8009af6:	0030      	movs	r0, r6
 8009af8:	f7ff ffc2 	bl	8009a80 <__sinit>
 8009afc:	3648      	adds	r6, #72	; 0x48
 8009afe:	68b4      	ldr	r4, [r6, #8]
 8009b00:	6873      	ldr	r3, [r6, #4]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	d504      	bpl.n	8009b10 <__sfp+0x28>
 8009b06:	6833      	ldr	r3, [r6, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d007      	beq.n	8009b1c <__sfp+0x34>
 8009b0c:	6836      	ldr	r6, [r6, #0]
 8009b0e:	e7f6      	b.n	8009afe <__sfp+0x16>
 8009b10:	220c      	movs	r2, #12
 8009b12:	5ea5      	ldrsh	r5, [r4, r2]
 8009b14:	2d00      	cmp	r5, #0
 8009b16:	d00d      	beq.n	8009b34 <__sfp+0x4c>
 8009b18:	3468      	adds	r4, #104	; 0x68
 8009b1a:	e7f2      	b.n	8009b02 <__sfp+0x1a>
 8009b1c:	2104      	movs	r1, #4
 8009b1e:	0038      	movs	r0, r7
 8009b20:	f7ff ff98 	bl	8009a54 <__sfmoreglue>
 8009b24:	6030      	str	r0, [r6, #0]
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d1f0      	bne.n	8009b0c <__sfp+0x24>
 8009b2a:	230c      	movs	r3, #12
 8009b2c:	0004      	movs	r4, r0
 8009b2e:	603b      	str	r3, [r7, #0]
 8009b30:	0020      	movs	r0, r4
 8009b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b34:	0020      	movs	r0, r4
 8009b36:	4b0a      	ldr	r3, [pc, #40]	; (8009b60 <__sfp+0x78>)
 8009b38:	6665      	str	r5, [r4, #100]	; 0x64
 8009b3a:	6025      	str	r5, [r4, #0]
 8009b3c:	6065      	str	r5, [r4, #4]
 8009b3e:	60a5      	str	r5, [r4, #8]
 8009b40:	60e3      	str	r3, [r4, #12]
 8009b42:	6125      	str	r5, [r4, #16]
 8009b44:	6165      	str	r5, [r4, #20]
 8009b46:	61a5      	str	r5, [r4, #24]
 8009b48:	2208      	movs	r2, #8
 8009b4a:	0029      	movs	r1, r5
 8009b4c:	305c      	adds	r0, #92	; 0x5c
 8009b4e:	f7ff faf0 	bl	8009132 <memset>
 8009b52:	6365      	str	r5, [r4, #52]	; 0x34
 8009b54:	63a5      	str	r5, [r4, #56]	; 0x38
 8009b56:	64a5      	str	r5, [r4, #72]	; 0x48
 8009b58:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009b5a:	e7e9      	b.n	8009b30 <__sfp+0x48>
 8009b5c:	0800b590 	.word	0x0800b590
 8009b60:	ffff0001 	.word	0xffff0001

08009b64 <_fwalk_reent>:
 8009b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b66:	0004      	movs	r4, r0
 8009b68:	0007      	movs	r7, r0
 8009b6a:	2600      	movs	r6, #0
 8009b6c:	9101      	str	r1, [sp, #4]
 8009b6e:	3448      	adds	r4, #72	; 0x48
 8009b70:	2c00      	cmp	r4, #0
 8009b72:	d101      	bne.n	8009b78 <_fwalk_reent+0x14>
 8009b74:	0030      	movs	r0, r6
 8009b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b78:	6863      	ldr	r3, [r4, #4]
 8009b7a:	68a5      	ldr	r5, [r4, #8]
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	9b00      	ldr	r3, [sp, #0]
 8009b80:	3b01      	subs	r3, #1
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	d501      	bpl.n	8009b8a <_fwalk_reent+0x26>
 8009b86:	6824      	ldr	r4, [r4, #0]
 8009b88:	e7f2      	b.n	8009b70 <_fwalk_reent+0xc>
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d908      	bls.n	8009ba2 <_fwalk_reent+0x3e>
 8009b90:	220e      	movs	r2, #14
 8009b92:	5eab      	ldrsh	r3, [r5, r2]
 8009b94:	3301      	adds	r3, #1
 8009b96:	d004      	beq.n	8009ba2 <_fwalk_reent+0x3e>
 8009b98:	0029      	movs	r1, r5
 8009b9a:	0038      	movs	r0, r7
 8009b9c:	9b01      	ldr	r3, [sp, #4]
 8009b9e:	4798      	blx	r3
 8009ba0:	4306      	orrs	r6, r0
 8009ba2:	3568      	adds	r5, #104	; 0x68
 8009ba4:	e7eb      	b.n	8009b7e <_fwalk_reent+0x1a>
	...

08009ba8 <__swhatbuf_r>:
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	000e      	movs	r6, r1
 8009bac:	001d      	movs	r5, r3
 8009bae:	230e      	movs	r3, #14
 8009bb0:	5ec9      	ldrsh	r1, [r1, r3]
 8009bb2:	b096      	sub	sp, #88	; 0x58
 8009bb4:	0014      	movs	r4, r2
 8009bb6:	2900      	cmp	r1, #0
 8009bb8:	da07      	bge.n	8009bca <__swhatbuf_r+0x22>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	602b      	str	r3, [r5, #0]
 8009bbe:	89b3      	ldrh	r3, [r6, #12]
 8009bc0:	061b      	lsls	r3, r3, #24
 8009bc2:	d411      	bmi.n	8009be8 <__swhatbuf_r+0x40>
 8009bc4:	2380      	movs	r3, #128	; 0x80
 8009bc6:	00db      	lsls	r3, r3, #3
 8009bc8:	e00f      	b.n	8009bea <__swhatbuf_r+0x42>
 8009bca:	466a      	mov	r2, sp
 8009bcc:	f000 fb72 	bl	800a2b4 <_fstat_r>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	dbf2      	blt.n	8009bba <__swhatbuf_r+0x12>
 8009bd4:	22f0      	movs	r2, #240	; 0xf0
 8009bd6:	9b01      	ldr	r3, [sp, #4]
 8009bd8:	0212      	lsls	r2, r2, #8
 8009bda:	4013      	ands	r3, r2
 8009bdc:	4a05      	ldr	r2, [pc, #20]	; (8009bf4 <__swhatbuf_r+0x4c>)
 8009bde:	189b      	adds	r3, r3, r2
 8009be0:	425a      	negs	r2, r3
 8009be2:	4153      	adcs	r3, r2
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	e7ed      	b.n	8009bc4 <__swhatbuf_r+0x1c>
 8009be8:	2340      	movs	r3, #64	; 0x40
 8009bea:	2000      	movs	r0, #0
 8009bec:	6023      	str	r3, [r4, #0]
 8009bee:	b016      	add	sp, #88	; 0x58
 8009bf0:	bd70      	pop	{r4, r5, r6, pc}
 8009bf2:	46c0      	nop			; (mov r8, r8)
 8009bf4:	ffffe000 	.word	0xffffe000

08009bf8 <__smakebuf_r>:
 8009bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bfa:	2602      	movs	r6, #2
 8009bfc:	898b      	ldrh	r3, [r1, #12]
 8009bfe:	0005      	movs	r5, r0
 8009c00:	000c      	movs	r4, r1
 8009c02:	4233      	tst	r3, r6
 8009c04:	d006      	beq.n	8009c14 <__smakebuf_r+0x1c>
 8009c06:	0023      	movs	r3, r4
 8009c08:	3347      	adds	r3, #71	; 0x47
 8009c0a:	6023      	str	r3, [r4, #0]
 8009c0c:	6123      	str	r3, [r4, #16]
 8009c0e:	2301      	movs	r3, #1
 8009c10:	6163      	str	r3, [r4, #20]
 8009c12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009c14:	ab01      	add	r3, sp, #4
 8009c16:	466a      	mov	r2, sp
 8009c18:	f7ff ffc6 	bl	8009ba8 <__swhatbuf_r>
 8009c1c:	9900      	ldr	r1, [sp, #0]
 8009c1e:	0007      	movs	r7, r0
 8009c20:	0028      	movs	r0, r5
 8009c22:	f000 f895 	bl	8009d50 <_malloc_r>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d108      	bne.n	8009c3c <__smakebuf_r+0x44>
 8009c2a:	220c      	movs	r2, #12
 8009c2c:	5ea3      	ldrsh	r3, [r4, r2]
 8009c2e:	059a      	lsls	r2, r3, #22
 8009c30:	d4ef      	bmi.n	8009c12 <__smakebuf_r+0x1a>
 8009c32:	2203      	movs	r2, #3
 8009c34:	4393      	bics	r3, r2
 8009c36:	431e      	orrs	r6, r3
 8009c38:	81a6      	strh	r6, [r4, #12]
 8009c3a:	e7e4      	b.n	8009c06 <__smakebuf_r+0xe>
 8009c3c:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <__smakebuf_r+0x84>)
 8009c3e:	62ab      	str	r3, [r5, #40]	; 0x28
 8009c40:	2380      	movs	r3, #128	; 0x80
 8009c42:	89a2      	ldrh	r2, [r4, #12]
 8009c44:	6020      	str	r0, [r4, #0]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	81a3      	strh	r3, [r4, #12]
 8009c4a:	9b00      	ldr	r3, [sp, #0]
 8009c4c:	6120      	str	r0, [r4, #16]
 8009c4e:	6163      	str	r3, [r4, #20]
 8009c50:	9b01      	ldr	r3, [sp, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00d      	beq.n	8009c72 <__smakebuf_r+0x7a>
 8009c56:	230e      	movs	r3, #14
 8009c58:	5ee1      	ldrsh	r1, [r4, r3]
 8009c5a:	0028      	movs	r0, r5
 8009c5c:	f000 fb3c 	bl	800a2d8 <_isatty_r>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d006      	beq.n	8009c72 <__smakebuf_r+0x7a>
 8009c64:	2203      	movs	r2, #3
 8009c66:	89a3      	ldrh	r3, [r4, #12]
 8009c68:	4393      	bics	r3, r2
 8009c6a:	001a      	movs	r2, r3
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	81a3      	strh	r3, [r4, #12]
 8009c72:	89a0      	ldrh	r0, [r4, #12]
 8009c74:	4338      	orrs	r0, r7
 8009c76:	81a0      	strh	r0, [r4, #12]
 8009c78:	e7cb      	b.n	8009c12 <__smakebuf_r+0x1a>
 8009c7a:	46c0      	nop			; (mov r8, r8)
 8009c7c:	08009a45 	.word	0x08009a45

08009c80 <memchr>:
 8009c80:	b2c9      	uxtb	r1, r1
 8009c82:	1882      	adds	r2, r0, r2
 8009c84:	4290      	cmp	r0, r2
 8009c86:	d101      	bne.n	8009c8c <memchr+0xc>
 8009c88:	2000      	movs	r0, #0
 8009c8a:	4770      	bx	lr
 8009c8c:	7803      	ldrb	r3, [r0, #0]
 8009c8e:	428b      	cmp	r3, r1
 8009c90:	d0fb      	beq.n	8009c8a <memchr+0xa>
 8009c92:	3001      	adds	r0, #1
 8009c94:	e7f6      	b.n	8009c84 <memchr+0x4>

08009c96 <memmove>:
 8009c96:	b510      	push	{r4, lr}
 8009c98:	4288      	cmp	r0, r1
 8009c9a:	d902      	bls.n	8009ca2 <memmove+0xc>
 8009c9c:	188b      	adds	r3, r1, r2
 8009c9e:	4298      	cmp	r0, r3
 8009ca0:	d303      	bcc.n	8009caa <memmove+0x14>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	e007      	b.n	8009cb6 <memmove+0x20>
 8009ca6:	5c8b      	ldrb	r3, [r1, r2]
 8009ca8:	5483      	strb	r3, [r0, r2]
 8009caa:	3a01      	subs	r2, #1
 8009cac:	d2fb      	bcs.n	8009ca6 <memmove+0x10>
 8009cae:	bd10      	pop	{r4, pc}
 8009cb0:	5ccc      	ldrb	r4, [r1, r3]
 8009cb2:	54c4      	strb	r4, [r0, r3]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d1fa      	bne.n	8009cb0 <memmove+0x1a>
 8009cba:	e7f8      	b.n	8009cae <memmove+0x18>

08009cbc <_free_r>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	0005      	movs	r5, r0
 8009cc0:	2900      	cmp	r1, #0
 8009cc2:	d010      	beq.n	8009ce6 <_free_r+0x2a>
 8009cc4:	1f0c      	subs	r4, r1, #4
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	da00      	bge.n	8009cce <_free_r+0x12>
 8009ccc:	18e4      	adds	r4, r4, r3
 8009cce:	0028      	movs	r0, r5
 8009cd0:	f000 fb28 	bl	800a324 <__malloc_lock>
 8009cd4:	4a1d      	ldr	r2, [pc, #116]	; (8009d4c <_free_r+0x90>)
 8009cd6:	6813      	ldr	r3, [r2, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d105      	bne.n	8009ce8 <_free_r+0x2c>
 8009cdc:	6063      	str	r3, [r4, #4]
 8009cde:	6014      	str	r4, [r2, #0]
 8009ce0:	0028      	movs	r0, r5
 8009ce2:	f000 fb20 	bl	800a326 <__malloc_unlock>
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}
 8009ce8:	42a3      	cmp	r3, r4
 8009cea:	d909      	bls.n	8009d00 <_free_r+0x44>
 8009cec:	6821      	ldr	r1, [r4, #0]
 8009cee:	1860      	adds	r0, r4, r1
 8009cf0:	4283      	cmp	r3, r0
 8009cf2:	d1f3      	bne.n	8009cdc <_free_r+0x20>
 8009cf4:	6818      	ldr	r0, [r3, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	1841      	adds	r1, r0, r1
 8009cfa:	6021      	str	r1, [r4, #0]
 8009cfc:	e7ee      	b.n	8009cdc <_free_r+0x20>
 8009cfe:	0013      	movs	r3, r2
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	2a00      	cmp	r2, #0
 8009d04:	d001      	beq.n	8009d0a <_free_r+0x4e>
 8009d06:	42a2      	cmp	r2, r4
 8009d08:	d9f9      	bls.n	8009cfe <_free_r+0x42>
 8009d0a:	6819      	ldr	r1, [r3, #0]
 8009d0c:	1858      	adds	r0, r3, r1
 8009d0e:	42a0      	cmp	r0, r4
 8009d10:	d10b      	bne.n	8009d2a <_free_r+0x6e>
 8009d12:	6820      	ldr	r0, [r4, #0]
 8009d14:	1809      	adds	r1, r1, r0
 8009d16:	1858      	adds	r0, r3, r1
 8009d18:	6019      	str	r1, [r3, #0]
 8009d1a:	4282      	cmp	r2, r0
 8009d1c:	d1e0      	bne.n	8009ce0 <_free_r+0x24>
 8009d1e:	6810      	ldr	r0, [r2, #0]
 8009d20:	6852      	ldr	r2, [r2, #4]
 8009d22:	1841      	adds	r1, r0, r1
 8009d24:	6019      	str	r1, [r3, #0]
 8009d26:	605a      	str	r2, [r3, #4]
 8009d28:	e7da      	b.n	8009ce0 <_free_r+0x24>
 8009d2a:	42a0      	cmp	r0, r4
 8009d2c:	d902      	bls.n	8009d34 <_free_r+0x78>
 8009d2e:	230c      	movs	r3, #12
 8009d30:	602b      	str	r3, [r5, #0]
 8009d32:	e7d5      	b.n	8009ce0 <_free_r+0x24>
 8009d34:	6821      	ldr	r1, [r4, #0]
 8009d36:	1860      	adds	r0, r4, r1
 8009d38:	4282      	cmp	r2, r0
 8009d3a:	d103      	bne.n	8009d44 <_free_r+0x88>
 8009d3c:	6810      	ldr	r0, [r2, #0]
 8009d3e:	6852      	ldr	r2, [r2, #4]
 8009d40:	1841      	adds	r1, r0, r1
 8009d42:	6021      	str	r1, [r4, #0]
 8009d44:	6062      	str	r2, [r4, #4]
 8009d46:	605c      	str	r4, [r3, #4]
 8009d48:	e7ca      	b.n	8009ce0 <_free_r+0x24>
 8009d4a:	46c0      	nop			; (mov r8, r8)
 8009d4c:	200021f8 	.word	0x200021f8

08009d50 <_malloc_r>:
 8009d50:	2303      	movs	r3, #3
 8009d52:	b570      	push	{r4, r5, r6, lr}
 8009d54:	1ccd      	adds	r5, r1, #3
 8009d56:	439d      	bics	r5, r3
 8009d58:	3508      	adds	r5, #8
 8009d5a:	0006      	movs	r6, r0
 8009d5c:	2d0c      	cmp	r5, #12
 8009d5e:	d21e      	bcs.n	8009d9e <_malloc_r+0x4e>
 8009d60:	250c      	movs	r5, #12
 8009d62:	42a9      	cmp	r1, r5
 8009d64:	d81d      	bhi.n	8009da2 <_malloc_r+0x52>
 8009d66:	0030      	movs	r0, r6
 8009d68:	f000 fadc 	bl	800a324 <__malloc_lock>
 8009d6c:	4a25      	ldr	r2, [pc, #148]	; (8009e04 <_malloc_r+0xb4>)
 8009d6e:	6814      	ldr	r4, [r2, #0]
 8009d70:	0021      	movs	r1, r4
 8009d72:	2900      	cmp	r1, #0
 8009d74:	d119      	bne.n	8009daa <_malloc_r+0x5a>
 8009d76:	4c24      	ldr	r4, [pc, #144]	; (8009e08 <_malloc_r+0xb8>)
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d103      	bne.n	8009d86 <_malloc_r+0x36>
 8009d7e:	0030      	movs	r0, r6
 8009d80:	f000 f9ca 	bl	800a118 <_sbrk_r>
 8009d84:	6020      	str	r0, [r4, #0]
 8009d86:	0029      	movs	r1, r5
 8009d88:	0030      	movs	r0, r6
 8009d8a:	f000 f9c5 	bl	800a118 <_sbrk_r>
 8009d8e:	1c43      	adds	r3, r0, #1
 8009d90:	d12b      	bne.n	8009dea <_malloc_r+0x9a>
 8009d92:	230c      	movs	r3, #12
 8009d94:	0030      	movs	r0, r6
 8009d96:	6033      	str	r3, [r6, #0]
 8009d98:	f000 fac5 	bl	800a326 <__malloc_unlock>
 8009d9c:	e003      	b.n	8009da6 <_malloc_r+0x56>
 8009d9e:	2d00      	cmp	r5, #0
 8009da0:	dadf      	bge.n	8009d62 <_malloc_r+0x12>
 8009da2:	230c      	movs	r3, #12
 8009da4:	6033      	str	r3, [r6, #0]
 8009da6:	2000      	movs	r0, #0
 8009da8:	bd70      	pop	{r4, r5, r6, pc}
 8009daa:	680b      	ldr	r3, [r1, #0]
 8009dac:	1b5b      	subs	r3, r3, r5
 8009dae:	d419      	bmi.n	8009de4 <_malloc_r+0x94>
 8009db0:	2b0b      	cmp	r3, #11
 8009db2:	d903      	bls.n	8009dbc <_malloc_r+0x6c>
 8009db4:	600b      	str	r3, [r1, #0]
 8009db6:	18cc      	adds	r4, r1, r3
 8009db8:	6025      	str	r5, [r4, #0]
 8009dba:	e003      	b.n	8009dc4 <_malloc_r+0x74>
 8009dbc:	684b      	ldr	r3, [r1, #4]
 8009dbe:	428c      	cmp	r4, r1
 8009dc0:	d10d      	bne.n	8009dde <_malloc_r+0x8e>
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	0030      	movs	r0, r6
 8009dc6:	f000 faae 	bl	800a326 <__malloc_unlock>
 8009dca:	0020      	movs	r0, r4
 8009dcc:	2207      	movs	r2, #7
 8009dce:	300b      	adds	r0, #11
 8009dd0:	1d23      	adds	r3, r4, #4
 8009dd2:	4390      	bics	r0, r2
 8009dd4:	1ac3      	subs	r3, r0, r3
 8009dd6:	d0e7      	beq.n	8009da8 <_malloc_r+0x58>
 8009dd8:	425a      	negs	r2, r3
 8009dda:	50e2      	str	r2, [r4, r3]
 8009ddc:	e7e4      	b.n	8009da8 <_malloc_r+0x58>
 8009dde:	6063      	str	r3, [r4, #4]
 8009de0:	000c      	movs	r4, r1
 8009de2:	e7ef      	b.n	8009dc4 <_malloc_r+0x74>
 8009de4:	000c      	movs	r4, r1
 8009de6:	6849      	ldr	r1, [r1, #4]
 8009de8:	e7c3      	b.n	8009d72 <_malloc_r+0x22>
 8009dea:	2303      	movs	r3, #3
 8009dec:	1cc4      	adds	r4, r0, #3
 8009dee:	439c      	bics	r4, r3
 8009df0:	42a0      	cmp	r0, r4
 8009df2:	d0e1      	beq.n	8009db8 <_malloc_r+0x68>
 8009df4:	1a21      	subs	r1, r4, r0
 8009df6:	0030      	movs	r0, r6
 8009df8:	f000 f98e 	bl	800a118 <_sbrk_r>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d1db      	bne.n	8009db8 <_malloc_r+0x68>
 8009e00:	e7c7      	b.n	8009d92 <_malloc_r+0x42>
 8009e02:	46c0      	nop			; (mov r8, r8)
 8009e04:	200021f8 	.word	0x200021f8
 8009e08:	200021fc 	.word	0x200021fc

08009e0c <_realloc_r>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	0007      	movs	r7, r0
 8009e10:	000d      	movs	r5, r1
 8009e12:	0016      	movs	r6, r2
 8009e14:	2900      	cmp	r1, #0
 8009e16:	d105      	bne.n	8009e24 <_realloc_r+0x18>
 8009e18:	0011      	movs	r1, r2
 8009e1a:	f7ff ff99 	bl	8009d50 <_malloc_r>
 8009e1e:	0004      	movs	r4, r0
 8009e20:	0020      	movs	r0, r4
 8009e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e24:	2a00      	cmp	r2, #0
 8009e26:	d103      	bne.n	8009e30 <_realloc_r+0x24>
 8009e28:	f7ff ff48 	bl	8009cbc <_free_r>
 8009e2c:	0034      	movs	r4, r6
 8009e2e:	e7f7      	b.n	8009e20 <_realloc_r+0x14>
 8009e30:	f000 fa7a 	bl	800a328 <_malloc_usable_size_r>
 8009e34:	002c      	movs	r4, r5
 8009e36:	42b0      	cmp	r0, r6
 8009e38:	d2f2      	bcs.n	8009e20 <_realloc_r+0x14>
 8009e3a:	0031      	movs	r1, r6
 8009e3c:	0038      	movs	r0, r7
 8009e3e:	f7ff ff87 	bl	8009d50 <_malloc_r>
 8009e42:	1e04      	subs	r4, r0, #0
 8009e44:	d0ec      	beq.n	8009e20 <_realloc_r+0x14>
 8009e46:	0029      	movs	r1, r5
 8009e48:	0032      	movs	r2, r6
 8009e4a:	f7ff f969 	bl	8009120 <memcpy>
 8009e4e:	0029      	movs	r1, r5
 8009e50:	0038      	movs	r0, r7
 8009e52:	f7ff ff33 	bl	8009cbc <_free_r>
 8009e56:	e7e3      	b.n	8009e20 <_realloc_r+0x14>

08009e58 <__ssputs_r>:
 8009e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e5a:	688e      	ldr	r6, [r1, #8]
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	0007      	movs	r7, r0
 8009e60:	000c      	movs	r4, r1
 8009e62:	9203      	str	r2, [sp, #12]
 8009e64:	9301      	str	r3, [sp, #4]
 8009e66:	429e      	cmp	r6, r3
 8009e68:	d83c      	bhi.n	8009ee4 <__ssputs_r+0x8c>
 8009e6a:	2390      	movs	r3, #144	; 0x90
 8009e6c:	898a      	ldrh	r2, [r1, #12]
 8009e6e:	00db      	lsls	r3, r3, #3
 8009e70:	421a      	tst	r2, r3
 8009e72:	d034      	beq.n	8009ede <__ssputs_r+0x86>
 8009e74:	2503      	movs	r5, #3
 8009e76:	6909      	ldr	r1, [r1, #16]
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	1a5b      	subs	r3, r3, r1
 8009e7c:	9302      	str	r3, [sp, #8]
 8009e7e:	6963      	ldr	r3, [r4, #20]
 8009e80:	9802      	ldr	r0, [sp, #8]
 8009e82:	435d      	muls	r5, r3
 8009e84:	0feb      	lsrs	r3, r5, #31
 8009e86:	195d      	adds	r5, r3, r5
 8009e88:	9b01      	ldr	r3, [sp, #4]
 8009e8a:	106d      	asrs	r5, r5, #1
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	181b      	adds	r3, r3, r0
 8009e90:	42ab      	cmp	r3, r5
 8009e92:	d900      	bls.n	8009e96 <__ssputs_r+0x3e>
 8009e94:	001d      	movs	r5, r3
 8009e96:	0553      	lsls	r3, r2, #21
 8009e98:	d532      	bpl.n	8009f00 <__ssputs_r+0xa8>
 8009e9a:	0029      	movs	r1, r5
 8009e9c:	0038      	movs	r0, r7
 8009e9e:	f7ff ff57 	bl	8009d50 <_malloc_r>
 8009ea2:	1e06      	subs	r6, r0, #0
 8009ea4:	d109      	bne.n	8009eba <__ssputs_r+0x62>
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	603b      	str	r3, [r7, #0]
 8009eaa:	2340      	movs	r3, #64	; 0x40
 8009eac:	2001      	movs	r0, #1
 8009eae:	89a2      	ldrh	r2, [r4, #12]
 8009eb0:	4240      	negs	r0, r0
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	81a3      	strh	r3, [r4, #12]
 8009eb6:	b005      	add	sp, #20
 8009eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eba:	9a02      	ldr	r2, [sp, #8]
 8009ebc:	6921      	ldr	r1, [r4, #16]
 8009ebe:	f7ff f92f 	bl	8009120 <memcpy>
 8009ec2:	89a3      	ldrh	r3, [r4, #12]
 8009ec4:	4a14      	ldr	r2, [pc, #80]	; (8009f18 <__ssputs_r+0xc0>)
 8009ec6:	401a      	ands	r2, r3
 8009ec8:	2380      	movs	r3, #128	; 0x80
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	81a3      	strh	r3, [r4, #12]
 8009ece:	9b02      	ldr	r3, [sp, #8]
 8009ed0:	6126      	str	r6, [r4, #16]
 8009ed2:	18f6      	adds	r6, r6, r3
 8009ed4:	6026      	str	r6, [r4, #0]
 8009ed6:	6165      	str	r5, [r4, #20]
 8009ed8:	9e01      	ldr	r6, [sp, #4]
 8009eda:	1aed      	subs	r5, r5, r3
 8009edc:	60a5      	str	r5, [r4, #8]
 8009ede:	9b01      	ldr	r3, [sp, #4]
 8009ee0:	429e      	cmp	r6, r3
 8009ee2:	d900      	bls.n	8009ee6 <__ssputs_r+0x8e>
 8009ee4:	9e01      	ldr	r6, [sp, #4]
 8009ee6:	0032      	movs	r2, r6
 8009ee8:	9903      	ldr	r1, [sp, #12]
 8009eea:	6820      	ldr	r0, [r4, #0]
 8009eec:	f7ff fed3 	bl	8009c96 <memmove>
 8009ef0:	68a3      	ldr	r3, [r4, #8]
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	1b9b      	subs	r3, r3, r6
 8009ef6:	60a3      	str	r3, [r4, #8]
 8009ef8:	6823      	ldr	r3, [r4, #0]
 8009efa:	199e      	adds	r6, r3, r6
 8009efc:	6026      	str	r6, [r4, #0]
 8009efe:	e7da      	b.n	8009eb6 <__ssputs_r+0x5e>
 8009f00:	002a      	movs	r2, r5
 8009f02:	0038      	movs	r0, r7
 8009f04:	f7ff ff82 	bl	8009e0c <_realloc_r>
 8009f08:	1e06      	subs	r6, r0, #0
 8009f0a:	d1e0      	bne.n	8009ece <__ssputs_r+0x76>
 8009f0c:	6921      	ldr	r1, [r4, #16]
 8009f0e:	0038      	movs	r0, r7
 8009f10:	f7ff fed4 	bl	8009cbc <_free_r>
 8009f14:	e7c7      	b.n	8009ea6 <__ssputs_r+0x4e>
 8009f16:	46c0      	nop			; (mov r8, r8)
 8009f18:	fffffb7f 	.word	0xfffffb7f

08009f1c <_svfiprintf_r>:
 8009f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f1e:	b0a1      	sub	sp, #132	; 0x84
 8009f20:	9003      	str	r0, [sp, #12]
 8009f22:	001d      	movs	r5, r3
 8009f24:	898b      	ldrh	r3, [r1, #12]
 8009f26:	000f      	movs	r7, r1
 8009f28:	0016      	movs	r6, r2
 8009f2a:	061b      	lsls	r3, r3, #24
 8009f2c:	d511      	bpl.n	8009f52 <_svfiprintf_r+0x36>
 8009f2e:	690b      	ldr	r3, [r1, #16]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10e      	bne.n	8009f52 <_svfiprintf_r+0x36>
 8009f34:	2140      	movs	r1, #64	; 0x40
 8009f36:	f7ff ff0b 	bl	8009d50 <_malloc_r>
 8009f3a:	6038      	str	r0, [r7, #0]
 8009f3c:	6138      	str	r0, [r7, #16]
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d105      	bne.n	8009f4e <_svfiprintf_r+0x32>
 8009f42:	230c      	movs	r3, #12
 8009f44:	9a03      	ldr	r2, [sp, #12]
 8009f46:	3801      	subs	r0, #1
 8009f48:	6013      	str	r3, [r2, #0]
 8009f4a:	b021      	add	sp, #132	; 0x84
 8009f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f4e:	2340      	movs	r3, #64	; 0x40
 8009f50:	617b      	str	r3, [r7, #20]
 8009f52:	2300      	movs	r3, #0
 8009f54:	ac08      	add	r4, sp, #32
 8009f56:	6163      	str	r3, [r4, #20]
 8009f58:	3320      	adds	r3, #32
 8009f5a:	7663      	strb	r3, [r4, #25]
 8009f5c:	3310      	adds	r3, #16
 8009f5e:	76a3      	strb	r3, [r4, #26]
 8009f60:	9507      	str	r5, [sp, #28]
 8009f62:	0035      	movs	r5, r6
 8009f64:	782b      	ldrb	r3, [r5, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <_svfiprintf_r+0x52>
 8009f6a:	2b25      	cmp	r3, #37	; 0x25
 8009f6c:	d146      	bne.n	8009ffc <_svfiprintf_r+0xe0>
 8009f6e:	1bab      	subs	r3, r5, r6
 8009f70:	9305      	str	r3, [sp, #20]
 8009f72:	d00c      	beq.n	8009f8e <_svfiprintf_r+0x72>
 8009f74:	0032      	movs	r2, r6
 8009f76:	0039      	movs	r1, r7
 8009f78:	9803      	ldr	r0, [sp, #12]
 8009f7a:	f7ff ff6d 	bl	8009e58 <__ssputs_r>
 8009f7e:	1c43      	adds	r3, r0, #1
 8009f80:	d100      	bne.n	8009f84 <_svfiprintf_r+0x68>
 8009f82:	e0ae      	b.n	800a0e2 <_svfiprintf_r+0x1c6>
 8009f84:	6962      	ldr	r2, [r4, #20]
 8009f86:	9b05      	ldr	r3, [sp, #20]
 8009f88:	4694      	mov	ip, r2
 8009f8a:	4463      	add	r3, ip
 8009f8c:	6163      	str	r3, [r4, #20]
 8009f8e:	782b      	ldrb	r3, [r5, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d100      	bne.n	8009f96 <_svfiprintf_r+0x7a>
 8009f94:	e0a5      	b.n	800a0e2 <_svfiprintf_r+0x1c6>
 8009f96:	2201      	movs	r2, #1
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4252      	negs	r2, r2
 8009f9c:	6062      	str	r2, [r4, #4]
 8009f9e:	a904      	add	r1, sp, #16
 8009fa0:	3254      	adds	r2, #84	; 0x54
 8009fa2:	1852      	adds	r2, r2, r1
 8009fa4:	1c6e      	adds	r6, r5, #1
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	60e3      	str	r3, [r4, #12]
 8009faa:	60a3      	str	r3, [r4, #8]
 8009fac:	7013      	strb	r3, [r2, #0]
 8009fae:	65a3      	str	r3, [r4, #88]	; 0x58
 8009fb0:	7831      	ldrb	r1, [r6, #0]
 8009fb2:	2205      	movs	r2, #5
 8009fb4:	4853      	ldr	r0, [pc, #332]	; (800a104 <_svfiprintf_r+0x1e8>)
 8009fb6:	f7ff fe63 	bl	8009c80 <memchr>
 8009fba:	1c75      	adds	r5, r6, #1
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d11f      	bne.n	800a000 <_svfiprintf_r+0xe4>
 8009fc0:	6822      	ldr	r2, [r4, #0]
 8009fc2:	06d3      	lsls	r3, r2, #27
 8009fc4:	d504      	bpl.n	8009fd0 <_svfiprintf_r+0xb4>
 8009fc6:	2353      	movs	r3, #83	; 0x53
 8009fc8:	a904      	add	r1, sp, #16
 8009fca:	185b      	adds	r3, r3, r1
 8009fcc:	2120      	movs	r1, #32
 8009fce:	7019      	strb	r1, [r3, #0]
 8009fd0:	0713      	lsls	r3, r2, #28
 8009fd2:	d504      	bpl.n	8009fde <_svfiprintf_r+0xc2>
 8009fd4:	2353      	movs	r3, #83	; 0x53
 8009fd6:	a904      	add	r1, sp, #16
 8009fd8:	185b      	adds	r3, r3, r1
 8009fda:	212b      	movs	r1, #43	; 0x2b
 8009fdc:	7019      	strb	r1, [r3, #0]
 8009fde:	7833      	ldrb	r3, [r6, #0]
 8009fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8009fe2:	d016      	beq.n	800a012 <_svfiprintf_r+0xf6>
 8009fe4:	0035      	movs	r5, r6
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	200a      	movs	r0, #10
 8009fea:	68e3      	ldr	r3, [r4, #12]
 8009fec:	782a      	ldrb	r2, [r5, #0]
 8009fee:	1c6e      	adds	r6, r5, #1
 8009ff0:	3a30      	subs	r2, #48	; 0x30
 8009ff2:	2a09      	cmp	r2, #9
 8009ff4:	d94e      	bls.n	800a094 <_svfiprintf_r+0x178>
 8009ff6:	2900      	cmp	r1, #0
 8009ff8:	d018      	beq.n	800a02c <_svfiprintf_r+0x110>
 8009ffa:	e010      	b.n	800a01e <_svfiprintf_r+0x102>
 8009ffc:	3501      	adds	r5, #1
 8009ffe:	e7b1      	b.n	8009f64 <_svfiprintf_r+0x48>
 800a000:	4b40      	ldr	r3, [pc, #256]	; (800a104 <_svfiprintf_r+0x1e8>)
 800a002:	6822      	ldr	r2, [r4, #0]
 800a004:	1ac0      	subs	r0, r0, r3
 800a006:	2301      	movs	r3, #1
 800a008:	4083      	lsls	r3, r0
 800a00a:	4313      	orrs	r3, r2
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	002e      	movs	r6, r5
 800a010:	e7ce      	b.n	8009fb0 <_svfiprintf_r+0x94>
 800a012:	9b07      	ldr	r3, [sp, #28]
 800a014:	1d19      	adds	r1, r3, #4
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	9107      	str	r1, [sp, #28]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	db01      	blt.n	800a022 <_svfiprintf_r+0x106>
 800a01e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a020:	e004      	b.n	800a02c <_svfiprintf_r+0x110>
 800a022:	425b      	negs	r3, r3
 800a024:	60e3      	str	r3, [r4, #12]
 800a026:	2302      	movs	r3, #2
 800a028:	4313      	orrs	r3, r2
 800a02a:	6023      	str	r3, [r4, #0]
 800a02c:	782b      	ldrb	r3, [r5, #0]
 800a02e:	2b2e      	cmp	r3, #46	; 0x2e
 800a030:	d10a      	bne.n	800a048 <_svfiprintf_r+0x12c>
 800a032:	786b      	ldrb	r3, [r5, #1]
 800a034:	2b2a      	cmp	r3, #42	; 0x2a
 800a036:	d135      	bne.n	800a0a4 <_svfiprintf_r+0x188>
 800a038:	9b07      	ldr	r3, [sp, #28]
 800a03a:	3502      	adds	r5, #2
 800a03c:	1d1a      	adds	r2, r3, #4
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	9207      	str	r2, [sp, #28]
 800a042:	2b00      	cmp	r3, #0
 800a044:	db2b      	blt.n	800a09e <_svfiprintf_r+0x182>
 800a046:	9309      	str	r3, [sp, #36]	; 0x24
 800a048:	4e2f      	ldr	r6, [pc, #188]	; (800a108 <_svfiprintf_r+0x1ec>)
 800a04a:	7829      	ldrb	r1, [r5, #0]
 800a04c:	2203      	movs	r2, #3
 800a04e:	0030      	movs	r0, r6
 800a050:	f7ff fe16 	bl	8009c80 <memchr>
 800a054:	2800      	cmp	r0, #0
 800a056:	d006      	beq.n	800a066 <_svfiprintf_r+0x14a>
 800a058:	2340      	movs	r3, #64	; 0x40
 800a05a:	1b80      	subs	r0, r0, r6
 800a05c:	4083      	lsls	r3, r0
 800a05e:	6822      	ldr	r2, [r4, #0]
 800a060:	3501      	adds	r5, #1
 800a062:	4313      	orrs	r3, r2
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	7829      	ldrb	r1, [r5, #0]
 800a068:	2206      	movs	r2, #6
 800a06a:	4828      	ldr	r0, [pc, #160]	; (800a10c <_svfiprintf_r+0x1f0>)
 800a06c:	1c6e      	adds	r6, r5, #1
 800a06e:	7621      	strb	r1, [r4, #24]
 800a070:	f7ff fe06 	bl	8009c80 <memchr>
 800a074:	2800      	cmp	r0, #0
 800a076:	d03c      	beq.n	800a0f2 <_svfiprintf_r+0x1d6>
 800a078:	4b25      	ldr	r3, [pc, #148]	; (800a110 <_svfiprintf_r+0x1f4>)
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d125      	bne.n	800a0ca <_svfiprintf_r+0x1ae>
 800a07e:	2207      	movs	r2, #7
 800a080:	9b07      	ldr	r3, [sp, #28]
 800a082:	3307      	adds	r3, #7
 800a084:	4393      	bics	r3, r2
 800a086:	3308      	adds	r3, #8
 800a088:	9307      	str	r3, [sp, #28]
 800a08a:	6963      	ldr	r3, [r4, #20]
 800a08c:	9a04      	ldr	r2, [sp, #16]
 800a08e:	189b      	adds	r3, r3, r2
 800a090:	6163      	str	r3, [r4, #20]
 800a092:	e766      	b.n	8009f62 <_svfiprintf_r+0x46>
 800a094:	4343      	muls	r3, r0
 800a096:	2101      	movs	r1, #1
 800a098:	189b      	adds	r3, r3, r2
 800a09a:	0035      	movs	r5, r6
 800a09c:	e7a6      	b.n	8009fec <_svfiprintf_r+0xd0>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	425b      	negs	r3, r3
 800a0a2:	e7d0      	b.n	800a046 <_svfiprintf_r+0x12a>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	200a      	movs	r0, #10
 800a0a8:	001a      	movs	r2, r3
 800a0aa:	3501      	adds	r5, #1
 800a0ac:	6063      	str	r3, [r4, #4]
 800a0ae:	7829      	ldrb	r1, [r5, #0]
 800a0b0:	1c6e      	adds	r6, r5, #1
 800a0b2:	3930      	subs	r1, #48	; 0x30
 800a0b4:	2909      	cmp	r1, #9
 800a0b6:	d903      	bls.n	800a0c0 <_svfiprintf_r+0x1a4>
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d0c5      	beq.n	800a048 <_svfiprintf_r+0x12c>
 800a0bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0be:	e7c3      	b.n	800a048 <_svfiprintf_r+0x12c>
 800a0c0:	4342      	muls	r2, r0
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	1852      	adds	r2, r2, r1
 800a0c6:	0035      	movs	r5, r6
 800a0c8:	e7f1      	b.n	800a0ae <_svfiprintf_r+0x192>
 800a0ca:	ab07      	add	r3, sp, #28
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	003a      	movs	r2, r7
 800a0d0:	4b10      	ldr	r3, [pc, #64]	; (800a114 <_svfiprintf_r+0x1f8>)
 800a0d2:	0021      	movs	r1, r4
 800a0d4:	9803      	ldr	r0, [sp, #12]
 800a0d6:	e000      	b.n	800a0da <_svfiprintf_r+0x1be>
 800a0d8:	bf00      	nop
 800a0da:	9004      	str	r0, [sp, #16]
 800a0dc:	9b04      	ldr	r3, [sp, #16]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	d1d3      	bne.n	800a08a <_svfiprintf_r+0x16e>
 800a0e2:	89bb      	ldrh	r3, [r7, #12]
 800a0e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a0e6:	065b      	lsls	r3, r3, #25
 800a0e8:	d400      	bmi.n	800a0ec <_svfiprintf_r+0x1d0>
 800a0ea:	e72e      	b.n	8009f4a <_svfiprintf_r+0x2e>
 800a0ec:	2001      	movs	r0, #1
 800a0ee:	4240      	negs	r0, r0
 800a0f0:	e72b      	b.n	8009f4a <_svfiprintf_r+0x2e>
 800a0f2:	ab07      	add	r3, sp, #28
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	003a      	movs	r2, r7
 800a0f8:	4b06      	ldr	r3, [pc, #24]	; (800a114 <_svfiprintf_r+0x1f8>)
 800a0fa:	0021      	movs	r1, r4
 800a0fc:	9803      	ldr	r0, [sp, #12]
 800a0fe:	f7ff f9cb 	bl	8009498 <_printf_i>
 800a102:	e7ea      	b.n	800a0da <_svfiprintf_r+0x1be>
 800a104:	0800b594 	.word	0x0800b594
 800a108:	0800b59a 	.word	0x0800b59a
 800a10c:	0800b59e 	.word	0x0800b59e
 800a110:	00000000 	.word	0x00000000
 800a114:	08009e59 	.word	0x08009e59

0800a118 <_sbrk_r>:
 800a118:	2300      	movs	r3, #0
 800a11a:	b570      	push	{r4, r5, r6, lr}
 800a11c:	4c06      	ldr	r4, [pc, #24]	; (800a138 <_sbrk_r+0x20>)
 800a11e:	0005      	movs	r5, r0
 800a120:	0008      	movs	r0, r1
 800a122:	6023      	str	r3, [r4, #0]
 800a124:	f000 f954 	bl	800a3d0 <_sbrk>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d103      	bne.n	800a134 <_sbrk_r+0x1c>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d000      	beq.n	800a134 <_sbrk_r+0x1c>
 800a132:	602b      	str	r3, [r5, #0]
 800a134:	bd70      	pop	{r4, r5, r6, pc}
 800a136:	46c0      	nop			; (mov r8, r8)
 800a138:	200032a8 	.word	0x200032a8

0800a13c <_raise_r>:
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	0004      	movs	r4, r0
 800a140:	000d      	movs	r5, r1
 800a142:	291f      	cmp	r1, #31
 800a144:	d904      	bls.n	800a150 <_raise_r+0x14>
 800a146:	2316      	movs	r3, #22
 800a148:	6003      	str	r3, [r0, #0]
 800a14a:	2001      	movs	r0, #1
 800a14c:	4240      	negs	r0, r0
 800a14e:	bd70      	pop	{r4, r5, r6, pc}
 800a150:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a152:	2b00      	cmp	r3, #0
 800a154:	d004      	beq.n	800a160 <_raise_r+0x24>
 800a156:	008a      	lsls	r2, r1, #2
 800a158:	189b      	adds	r3, r3, r2
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	2a00      	cmp	r2, #0
 800a15e:	d108      	bne.n	800a172 <_raise_r+0x36>
 800a160:	0020      	movs	r0, r4
 800a162:	f000 f831 	bl	800a1c8 <_getpid_r>
 800a166:	002a      	movs	r2, r5
 800a168:	0001      	movs	r1, r0
 800a16a:	0020      	movs	r0, r4
 800a16c:	f000 f81a 	bl	800a1a4 <_kill_r>
 800a170:	e7ed      	b.n	800a14e <_raise_r+0x12>
 800a172:	2000      	movs	r0, #0
 800a174:	2a01      	cmp	r2, #1
 800a176:	d0ea      	beq.n	800a14e <_raise_r+0x12>
 800a178:	1c51      	adds	r1, r2, #1
 800a17a:	d103      	bne.n	800a184 <_raise_r+0x48>
 800a17c:	2316      	movs	r3, #22
 800a17e:	3001      	adds	r0, #1
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	e7e4      	b.n	800a14e <_raise_r+0x12>
 800a184:	2400      	movs	r4, #0
 800a186:	0028      	movs	r0, r5
 800a188:	601c      	str	r4, [r3, #0]
 800a18a:	4790      	blx	r2
 800a18c:	0020      	movs	r0, r4
 800a18e:	e7de      	b.n	800a14e <_raise_r+0x12>

0800a190 <raise>:
 800a190:	b510      	push	{r4, lr}
 800a192:	4b03      	ldr	r3, [pc, #12]	; (800a1a0 <raise+0x10>)
 800a194:	0001      	movs	r1, r0
 800a196:	6818      	ldr	r0, [r3, #0]
 800a198:	f7ff ffd0 	bl	800a13c <_raise_r>
 800a19c:	bd10      	pop	{r4, pc}
 800a19e:	46c0      	nop			; (mov r8, r8)
 800a1a0:	20000148 	.word	0x20000148

0800a1a4 <_kill_r>:
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	b570      	push	{r4, r5, r6, lr}
 800a1a8:	4c06      	ldr	r4, [pc, #24]	; (800a1c4 <_kill_r+0x20>)
 800a1aa:	0005      	movs	r5, r0
 800a1ac:	0008      	movs	r0, r1
 800a1ae:	0011      	movs	r1, r2
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	f000 f8f5 	bl	800a3a0 <_kill>
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	d103      	bne.n	800a1c2 <_kill_r+0x1e>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d000      	beq.n	800a1c2 <_kill_r+0x1e>
 800a1c0:	602b      	str	r3, [r5, #0]
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	200032a8 	.word	0x200032a8

0800a1c8 <_getpid_r>:
 800a1c8:	b510      	push	{r4, lr}
 800a1ca:	f000 f8d9 	bl	800a380 <_getpid>
 800a1ce:	bd10      	pop	{r4, pc}

0800a1d0 <__sread>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	000c      	movs	r4, r1
 800a1d4:	250e      	movs	r5, #14
 800a1d6:	5f49      	ldrsh	r1, [r1, r5]
 800a1d8:	f000 f8ae 	bl	800a338 <_read_r>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	db03      	blt.n	800a1e8 <__sread+0x18>
 800a1e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a1e2:	181b      	adds	r3, r3, r0
 800a1e4:	6563      	str	r3, [r4, #84]	; 0x54
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	4a02      	ldr	r2, [pc, #8]	; (800a1f4 <__sread+0x24>)
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	81a3      	strh	r3, [r4, #12]
 800a1f0:	e7f9      	b.n	800a1e6 <__sread+0x16>
 800a1f2:	46c0      	nop			; (mov r8, r8)
 800a1f4:	ffffefff 	.word	0xffffefff

0800a1f8 <__swrite>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	001f      	movs	r7, r3
 800a1fc:	898b      	ldrh	r3, [r1, #12]
 800a1fe:	0005      	movs	r5, r0
 800a200:	000c      	movs	r4, r1
 800a202:	0016      	movs	r6, r2
 800a204:	05db      	lsls	r3, r3, #23
 800a206:	d505      	bpl.n	800a214 <__swrite+0x1c>
 800a208:	230e      	movs	r3, #14
 800a20a:	5ec9      	ldrsh	r1, [r1, r3]
 800a20c:	2200      	movs	r2, #0
 800a20e:	2302      	movs	r3, #2
 800a210:	f000 f874 	bl	800a2fc <_lseek_r>
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	4a05      	ldr	r2, [pc, #20]	; (800a22c <__swrite+0x34>)
 800a218:	0028      	movs	r0, r5
 800a21a:	4013      	ands	r3, r2
 800a21c:	81a3      	strh	r3, [r4, #12]
 800a21e:	0032      	movs	r2, r6
 800a220:	230e      	movs	r3, #14
 800a222:	5ee1      	ldrsh	r1, [r4, r3]
 800a224:	003b      	movs	r3, r7
 800a226:	f000 f81f 	bl	800a268 <_write_r>
 800a22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a22c:	ffffefff 	.word	0xffffefff

0800a230 <__sseek>:
 800a230:	b570      	push	{r4, r5, r6, lr}
 800a232:	000c      	movs	r4, r1
 800a234:	250e      	movs	r5, #14
 800a236:	5f49      	ldrsh	r1, [r1, r5]
 800a238:	f000 f860 	bl	800a2fc <_lseek_r>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	1c42      	adds	r2, r0, #1
 800a240:	d103      	bne.n	800a24a <__sseek+0x1a>
 800a242:	4a05      	ldr	r2, [pc, #20]	; (800a258 <__sseek+0x28>)
 800a244:	4013      	ands	r3, r2
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	bd70      	pop	{r4, r5, r6, pc}
 800a24a:	2280      	movs	r2, #128	; 0x80
 800a24c:	0152      	lsls	r2, r2, #5
 800a24e:	4313      	orrs	r3, r2
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	6560      	str	r0, [r4, #84]	; 0x54
 800a254:	e7f8      	b.n	800a248 <__sseek+0x18>
 800a256:	46c0      	nop			; (mov r8, r8)
 800a258:	ffffefff 	.word	0xffffefff

0800a25c <__sclose>:
 800a25c:	b510      	push	{r4, lr}
 800a25e:	230e      	movs	r3, #14
 800a260:	5ec9      	ldrsh	r1, [r1, r3]
 800a262:	f000 f815 	bl	800a290 <_close_r>
 800a266:	bd10      	pop	{r4, pc}

0800a268 <_write_r>:
 800a268:	b570      	push	{r4, r5, r6, lr}
 800a26a:	0005      	movs	r5, r0
 800a26c:	0008      	movs	r0, r1
 800a26e:	0011      	movs	r1, r2
 800a270:	2200      	movs	r2, #0
 800a272:	4c06      	ldr	r4, [pc, #24]	; (800a28c <_write_r+0x24>)
 800a274:	6022      	str	r2, [r4, #0]
 800a276:	001a      	movs	r2, r3
 800a278:	f000 f8ba 	bl	800a3f0 <_write>
 800a27c:	1c43      	adds	r3, r0, #1
 800a27e:	d103      	bne.n	800a288 <_write_r+0x20>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d000      	beq.n	800a288 <_write_r+0x20>
 800a286:	602b      	str	r3, [r5, #0]
 800a288:	bd70      	pop	{r4, r5, r6, pc}
 800a28a:	46c0      	nop			; (mov r8, r8)
 800a28c:	200032a8 	.word	0x200032a8

0800a290 <_close_r>:
 800a290:	2300      	movs	r3, #0
 800a292:	b570      	push	{r4, r5, r6, lr}
 800a294:	4c06      	ldr	r4, [pc, #24]	; (800a2b0 <_close_r+0x20>)
 800a296:	0005      	movs	r5, r0
 800a298:	0008      	movs	r0, r1
 800a29a:	6023      	str	r3, [r4, #0]
 800a29c:	f000 f860 	bl	800a360 <_close>
 800a2a0:	1c43      	adds	r3, r0, #1
 800a2a2:	d103      	bne.n	800a2ac <_close_r+0x1c>
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d000      	beq.n	800a2ac <_close_r+0x1c>
 800a2aa:	602b      	str	r3, [r5, #0]
 800a2ac:	bd70      	pop	{r4, r5, r6, pc}
 800a2ae:	46c0      	nop			; (mov r8, r8)
 800a2b0:	200032a8 	.word	0x200032a8

0800a2b4 <_fstat_r>:
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	b570      	push	{r4, r5, r6, lr}
 800a2b8:	4c06      	ldr	r4, [pc, #24]	; (800a2d4 <_fstat_r+0x20>)
 800a2ba:	0005      	movs	r5, r0
 800a2bc:	0008      	movs	r0, r1
 800a2be:	0011      	movs	r1, r2
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	f000 f855 	bl	800a370 <_fstat>
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	d103      	bne.n	800a2d2 <_fstat_r+0x1e>
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d000      	beq.n	800a2d2 <_fstat_r+0x1e>
 800a2d0:	602b      	str	r3, [r5, #0]
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	200032a8 	.word	0x200032a8

0800a2d8 <_isatty_r>:
 800a2d8:	2300      	movs	r3, #0
 800a2da:	b570      	push	{r4, r5, r6, lr}
 800a2dc:	4c06      	ldr	r4, [pc, #24]	; (800a2f8 <_isatty_r+0x20>)
 800a2de:	0005      	movs	r5, r0
 800a2e0:	0008      	movs	r0, r1
 800a2e2:	6023      	str	r3, [r4, #0]
 800a2e4:	f000 f854 	bl	800a390 <_isatty>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d103      	bne.n	800a2f4 <_isatty_r+0x1c>
 800a2ec:	6823      	ldr	r3, [r4, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d000      	beq.n	800a2f4 <_isatty_r+0x1c>
 800a2f2:	602b      	str	r3, [r5, #0]
 800a2f4:	bd70      	pop	{r4, r5, r6, pc}
 800a2f6:	46c0      	nop			; (mov r8, r8)
 800a2f8:	200032a8 	.word	0x200032a8

0800a2fc <_lseek_r>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	0005      	movs	r5, r0
 800a300:	0008      	movs	r0, r1
 800a302:	0011      	movs	r1, r2
 800a304:	2200      	movs	r2, #0
 800a306:	4c06      	ldr	r4, [pc, #24]	; (800a320 <_lseek_r+0x24>)
 800a308:	6022      	str	r2, [r4, #0]
 800a30a:	001a      	movs	r2, r3
 800a30c:	f000 f850 	bl	800a3b0 <_lseek>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d103      	bne.n	800a31c <_lseek_r+0x20>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d000      	beq.n	800a31c <_lseek_r+0x20>
 800a31a:	602b      	str	r3, [r5, #0]
 800a31c:	bd70      	pop	{r4, r5, r6, pc}
 800a31e:	46c0      	nop			; (mov r8, r8)
 800a320:	200032a8 	.word	0x200032a8

0800a324 <__malloc_lock>:
 800a324:	4770      	bx	lr

0800a326 <__malloc_unlock>:
 800a326:	4770      	bx	lr

0800a328 <_malloc_usable_size_r>:
 800a328:	1f0b      	subs	r3, r1, #4
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	1f18      	subs	r0, r3, #4
 800a32e:	2b00      	cmp	r3, #0
 800a330:	da01      	bge.n	800a336 <_malloc_usable_size_r+0xe>
 800a332:	580b      	ldr	r3, [r1, r0]
 800a334:	18c0      	adds	r0, r0, r3
 800a336:	4770      	bx	lr

0800a338 <_read_r>:
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	0005      	movs	r5, r0
 800a33c:	0008      	movs	r0, r1
 800a33e:	0011      	movs	r1, r2
 800a340:	2200      	movs	r2, #0
 800a342:	4c06      	ldr	r4, [pc, #24]	; (800a35c <_read_r+0x24>)
 800a344:	6022      	str	r2, [r4, #0]
 800a346:	001a      	movs	r2, r3
 800a348:	f000 f83a 	bl	800a3c0 <_read>
 800a34c:	1c43      	adds	r3, r0, #1
 800a34e:	d103      	bne.n	800a358 <_read_r+0x20>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d000      	beq.n	800a358 <_read_r+0x20>
 800a356:	602b      	str	r3, [r5, #0]
 800a358:	bd70      	pop	{r4, r5, r6, pc}
 800a35a:	46c0      	nop			; (mov r8, r8)
 800a35c:	200032a8 	.word	0x200032a8

0800a360 <_close>:
 800a360:	2258      	movs	r2, #88	; 0x58
 800a362:	2001      	movs	r0, #1
 800a364:	4b01      	ldr	r3, [pc, #4]	; (800a36c <_close+0xc>)
 800a366:	4240      	negs	r0, r0
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	4770      	bx	lr
 800a36c:	200032a8 	.word	0x200032a8

0800a370 <_fstat>:
 800a370:	2258      	movs	r2, #88	; 0x58
 800a372:	2001      	movs	r0, #1
 800a374:	4b01      	ldr	r3, [pc, #4]	; (800a37c <_fstat+0xc>)
 800a376:	4240      	negs	r0, r0
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	4770      	bx	lr
 800a37c:	200032a8 	.word	0x200032a8

0800a380 <_getpid>:
 800a380:	2258      	movs	r2, #88	; 0x58
 800a382:	2001      	movs	r0, #1
 800a384:	4b01      	ldr	r3, [pc, #4]	; (800a38c <_getpid+0xc>)
 800a386:	4240      	negs	r0, r0
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	4770      	bx	lr
 800a38c:	200032a8 	.word	0x200032a8

0800a390 <_isatty>:
 800a390:	2258      	movs	r2, #88	; 0x58
 800a392:	4b02      	ldr	r3, [pc, #8]	; (800a39c <_isatty+0xc>)
 800a394:	2000      	movs	r0, #0
 800a396:	601a      	str	r2, [r3, #0]
 800a398:	4770      	bx	lr
 800a39a:	46c0      	nop			; (mov r8, r8)
 800a39c:	200032a8 	.word	0x200032a8

0800a3a0 <_kill>:
 800a3a0:	2258      	movs	r2, #88	; 0x58
 800a3a2:	2001      	movs	r0, #1
 800a3a4:	4b01      	ldr	r3, [pc, #4]	; (800a3ac <_kill+0xc>)
 800a3a6:	4240      	negs	r0, r0
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	4770      	bx	lr
 800a3ac:	200032a8 	.word	0x200032a8

0800a3b0 <_lseek>:
 800a3b0:	2258      	movs	r2, #88	; 0x58
 800a3b2:	2001      	movs	r0, #1
 800a3b4:	4b01      	ldr	r3, [pc, #4]	; (800a3bc <_lseek+0xc>)
 800a3b6:	4240      	negs	r0, r0
 800a3b8:	601a      	str	r2, [r3, #0]
 800a3ba:	4770      	bx	lr
 800a3bc:	200032a8 	.word	0x200032a8

0800a3c0 <_read>:
 800a3c0:	2258      	movs	r2, #88	; 0x58
 800a3c2:	2001      	movs	r0, #1
 800a3c4:	4b01      	ldr	r3, [pc, #4]	; (800a3cc <_read+0xc>)
 800a3c6:	4240      	negs	r0, r0
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	4770      	bx	lr
 800a3cc:	200032a8 	.word	0x200032a8

0800a3d0 <_sbrk>:
 800a3d0:	4b05      	ldr	r3, [pc, #20]	; (800a3e8 <_sbrk+0x18>)
 800a3d2:	0002      	movs	r2, r0
 800a3d4:	6819      	ldr	r1, [r3, #0]
 800a3d6:	2900      	cmp	r1, #0
 800a3d8:	d101      	bne.n	800a3de <_sbrk+0xe>
 800a3da:	4904      	ldr	r1, [pc, #16]	; (800a3ec <_sbrk+0x1c>)
 800a3dc:	6019      	str	r1, [r3, #0]
 800a3de:	6818      	ldr	r0, [r3, #0]
 800a3e0:	1882      	adds	r2, r0, r2
 800a3e2:	601a      	str	r2, [r3, #0]
 800a3e4:	4770      	bx	lr
 800a3e6:	46c0      	nop			; (mov r8, r8)
 800a3e8:	20002200 	.word	0x20002200
 800a3ec:	200032ac 	.word	0x200032ac

0800a3f0 <_write>:
 800a3f0:	2258      	movs	r2, #88	; 0x58
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	4b01      	ldr	r3, [pc, #4]	; (800a3fc <_write+0xc>)
 800a3f6:	4240      	negs	r0, r0
 800a3f8:	601a      	str	r2, [r3, #0]
 800a3fa:	4770      	bx	lr
 800a3fc:	200032a8 	.word	0x200032a8

0800a400 <_exit>:
 800a400:	e7fe      	b.n	800a400 <_exit>
 800a402:	0000      	movs	r0, r0
 800a404:	02810000 	.word	0x02810000
 800a408:	08000020 	.word	0x08000020
 800a40c:	50810080 	.word	0x50810080
 800a410:	80810308 	.word	0x80810308

0800a414 <appstr.8165>:
 800a414:	3d505041 65676150 74736554 00000000     APP=PageTest....

0800a424 <proc.6941>:
 800a424:	08006cd1 08006bf9 08006cd1 08006cd1     .l...k...l...l..
 800a434:	08006c69 08006cd1 08006cd1 08000e01     il...l...l......
 800a444:	08000435                                5...

0800a448 <base_std>:
 800a448:	0c0c0812 0e0e0a14 0a0a0a0a 0a0a0a0a     ................
 800a458:	06060606 06060606 06060606 06060606     ................

0800a468 <ext_std>:
 800a468:	07070100                                ....

0800a46c <m2tt_lut.7025>:
 800a46c:	40302020                                  0@

0800a470 <opcode_lut.7010>:
 800a470:	01000202 01000202 08060202 09070303     ................
 800a480:	01000404 01000404 08060404 09070505     ................
 800a490:	5f474552 00000000                       REG_....

0800a498 <defaults.5742>:
 800a498:	00030002 00050004 fe098001 120b090a     ................
 800a4a8:	000d230c 000f000e 701e971d 00204b1f     .#.........p.K .
 800a4b8:	06220a21 0024ff23 c3310426 0a372733     !.".#.$.&.1.3'7.
 800a4c8:	1d3bd739 0041a140 00000000              9.;.@.A.....

0800a4d4 <wdog_amount.5788>:
 800a4d4:	017d0a01 23a01996 23a01996 23a023a0     ..}....#...#.#.#
 800a4e4:	08001a12 0800192e 08001986 08001992     ................
 800a4f4:	080019ac 080019b8 080019c0 08001a62     ............b...
 800a504:	08001a82 08001a88 08001aa0 08001a8e     ................
 800a514:	08001a94 08001a9a                       ........

0800a51c <mdmcfg2.6524>:
 800a51c:	707090b0                                ..pp

0800a520 <detection.6532>:
 800a520:	0ac30ac3 0ac50ac4 0ac30ac3 0ac50ac4     ................
 800a530:	04c202c2 0ac407c4 04c202c2 0ac407c4     ................

0800a540 <flag_lut.6617>:
 800a540:	03020400                                ....

0800a544 <mdmcfg1.6667>:
 800a544:	00009193                                ....

0800a548 <preamblelen.6665>:
 800a548:	0a0a0606 00000a04                       ........

0800a550 <syncword.6664>:
 800a550:	14eb28d7 0000728d                       .(...r..

0800a558 <deflength.6666>:
 800a558:	20101006 00002010                       ... . ..

0800a560 <bg1init>:
 800a560:	009e0600 0000004b                       ....K...

0800a568 <fginit>:
 800a568:	039eff02 000000ff                       ........

0800a570 <pginit>:
 800a570:	039e1004 000000ff                       ........

0800a578 <bg2init>:
 800a578:	039e0600 000000ff                       ........

0800a580 <iterinit>:
 800a580:	05051144                                D...

0800a584 <ti_per_block.6606>:
 800a584:	02061133                                3...

0800a588 <mode_lut.6640>:
 800a588:	00020002 04040404                       ........

0800a590 <bandplan.6533>:
 800a590:	ed466c86 594e6c86 c5556c86 315d6c86     .lF..lNY.lU..l]1
 800a5a0:	9d646c86 096c6c86 75736c86 e17a6c86     .ld..ll..lsu.lz.
 800a5b0:	4d826c86 b9896c86 25916c86 91986c86     .l.M.l...l.%.l..
 800a5c0:	fd9f6c86 69a76c86 d5ae6c86 0048d886     .l...l.i.l....H.
 800a5d0:	0058d886 0068d886 0078d886 0088d886     ..X...h...x.....
 800a5e0:	0098d886 00a8d886 00b8d886 00c8d886     ................
 800a5f0:	00d8d886 00e8d886 00f8d886 0008d986     ................
 800a600:	0018d986 0028d986 77b7e186 6626e286     ......(....w..&f
 800a610:	5595e286 4404e386 3373e386 22e2e386     ...U...D..s3..."
 800a620:	1151e486 00c0e486 ef2ee586 de9de586     ..Q.............
 800a630:	cd0ce686 bc7be686 abeae686 9a59e786     ......{.......Y.
 800a640:	89c8e786                                ....

0800a644 <bgpkt_ti_lut.6527>:
 800a644:	02071962 00000000 03091c6f 00000000     b.......o.......

0800a654 <tgdti_lut.6531>:
 800a654:	06113578 00000000 091b54c0 00000000     x5.......T......

0800a664 <mitipersym_chan.6542>:
 800a664:	043210c7 0044010d                       ..2...D.

0800a66c <converter.6541>:
 800a66c:	08001b53 08001b3d 08001b27 08001b11     S...=...'.......

0800a67c <frparams.6549>:
 800a67c:	00000001 00010002 06020000 00000201     ................
 800a68c:	02010602 06020000                       ........

0800a694 <initial_bytes.6567>:
 800a694:	070f0507 1111050f                       ........

0800a69c <bits_per_lorablock.6566>:
 800a69c:	141c242c 08002ffc 08002c6e 08002c3c     ,$.../..n,..<,..
 800a6ac:	08002c32 08002ac0 08002ac0 08002caa     2,...*...*...,..
 800a6bc:	08002c1c 08002c18 08002c14 08002c10     .,...,...,...,..
 800a6cc:	08002c0c 08002b36 08002c20 08002bc6     .,..6+.. ,...+..
 800a6dc:	08002bbe 08002bb6 08002bae 08002ba6     .+...+...+...+..
 800a6ec:	08002b9e 08002b96 08004040 08003dc0     .+...+..@@...=..
 800a6fc:	08003d8e 08003d84 08003bf0 08003bf0     .=...=...;...;..
 800a70c:	08003dfc 08003d6e 08003d6a 08003d66     .=..n=..j=..f=..
 800a71c:	08003d62 08003d5e 08003c66 08003d72     b=..^=..f<..r=..
 800a72c:	08003d18 08003d10 08003d08 08003d00     .=...=...=...=..
 800a73c:	08003cf8 08003cf0 08003ce8              .<...<...<..

0800a748 <infobits_select.6116>:
 800a748:	0b0a0908 06060d0c                       ........

0800a750 <__func__.6128>:
 800a750:	5f637368 74696e69 00000000              hsc_init....

0800a75c <fbit_select.6127>:
 800a75c:	0800b01c 0800af9c 0800af1c 0800ae9c     ................
 800a76c:	0800ae1c 0800ad9c 0800b09c 0800b09c     ................

0800a77c <wordmask.6173>:
 800a77c:	ffffff00 ffff0000 ff000000 00000000     ................

0800a78c <wordload.6174>:
 800a78c:	00000000 00000100 00020100 03020100     ................

0800a79c <j1.6094>:
 800a79c:	02000000 00000102 00000100 00000000     ................

0800a7ac <j0.6095>:
 800a7ac:	03000000 03030303 02020202 00000101     ................

0800a7bc <maxlambda_lut>:
 800a7bc:	01010000 02020202 03030303 03030303     ................
 800a7cc:	04040404 04040404 04040404 04040404     ................
 800a7dc:	05050505 05050505 05050505 05050505     ................
 800a7ec:	05050505 05050505 05050505 05050505     ................
 800a7fc:	06060606 06060606 06060606 06060606     ................
 800a80c:	06060606 06060606 06060606 06060606     ................
 800a81c:	06060606 06060606 06060606 06060606     ................
 800a82c:	06060606 06060606 06060606 06060606     ................

0800a83c <eminlambda_lut>:
 800a83c:	04010201 08010201 04010201 10010201     ................
 800a84c:	04010201 08010201 04010201 20010201     ............... 
 800a85c:	04010201 08010201 04010201 10010201     ................
 800a86c:	04010201 08010201 04010201 40010201     ...............@
 800a87c:	04010201 08010201 04010201 10010201     ................
 800a88c:	04010201 08010201 04010201 20010201     ............... 
 800a89c:	04010201 08010201 04010201 10010201     ................
 800a8ac:	04010201 08010201 04010201 01010201     ................

0800a8bc <minlambda_lut>:
 800a8bc:	02000100 03000100 02000100 04000100     ................
 800a8cc:	02000100 03000100 02000100 05000100     ................
 800a8dc:	02000100 03000100 02000100 04000100     ................
 800a8ec:	02000100 03000100 02000100 06000100     ................
 800a8fc:	02000100 03000100 02000100 04000100     ................
 800a90c:	02000100 03000100 02000100 05000100     ................
 800a91c:	02000100 03000100 02000100 04000100     ................
 800a92c:	02000100 03000100 02000100 07000100     ................

0800a93c <lambda_lut>:
 800a93c:	00010006 00010002 00010003 00010002     ................
 800a94c:	00010004 00010002 00010003 00010002     ................
 800a95c:	00010005 00010002 00010003 00010002     ................
 800a96c:	00010004 00010002 00010003 00010002     ................
 800a97c:	00010006 00010002 00010003 00010002     ................
 800a98c:	00010004 00010002 00010003 00010002     ................
 800a99c:	00010005 00010002 00010003 00010002     ................
 800a9ac:	00010004 00010002 00010003 00010002     ................

0800a9bc <rseqbyte>:
 800a9bc:	010f000f 040f020f 000d000e 030f000b     ................
 800a9cc:	050f0007 010e060f 010d020e 020d040e     ................
 800a9dc:	040d010b 000c020b 070f0107 0207040b     ................
 800a9ec:	000a030e 0407050e 0009030d 0006060e     ................
 800a9fc:	0005050d 060d030b 050b010c 020c0003     ................
 800aa0c:	0307060b 040c010a 020a0507 070e0109     ................
 800aa1c:	040a0607 02090106 070d0206 01050409     ................
 800aa2c:	030c0406 00080205 070b0103 0405050c     ................
 800aa3c:	030a0203 060c0004 07070403 0309050a     ................
 800aa4c:	03060002 06090001 060a0506 01080305     ................
 800aa5c:	06060509 02080505 06050303 070c0408     ................
 800aa6c:	01020104 02040603 0503070a 02020404     ................
 800aa7c:	01010709 02010706 03080402 04010705     ................
 800aa8c:	00000508 07030304 03020504 06040608     ................
 800aa9c:	05020301 06020501 06010100 02000708     ................
 800aaac:	07040400 07010702 05000300 07000600     ................

0800aabc <rseq>:
 800aabc:	7b7d7e7f 7c5f6f77 76797a3f 6d736e75     .~}{wo_|?zyvunsm
 800aacc:	675d6b5e 3d5b783e 3b725774 37714f6c     ^k]g>x[=tWr;lOq7
 800aadc:	695c2f6a 651f5a66 63563c59 704e553a     j/\ifZ.eY<Vc:UNp
 800aaec:	4d365339 2e4b6835 472d6433 2b62581e     9S6M5hK.3d-G.Xb+
 800aafc:	6127541d 4c52381b 490f3417 462c5132     .T'a.8RL.4.I2Q,F
 800ab0c:	452a314a 6043291c 25191626 15231a50     J1*E.)C`&..%P.#.
 800ab1c:	0d300e48 0b284413 18240742 21411422     H.0..D(.B.$.".A!
 800ab2c:	110a120c 05400906 08102003 00010204     ......@.. ......

0800ab3c <rbyte>:
 800ab3c:	07080700 070c0704 070a0702 070e0706     ................
 800ab4c:	07090701 070d0705 070b0703 070f0707     ................
 800ab5c:	03080300 030c0304 030a0302 030e0306     ................
 800ab6c:	03090301 030d0305 030b0303 030f0307     ................
 800ab7c:	05080500 050c0504 050a0502 050e0506     ................
 800ab8c:	05090501 050d0505 050b0503 050f0507     ................
 800ab9c:	01080100 010c0104 010a0102 010e0106     ................
 800abac:	01090101 010d0105 010b0103 010f0107     ................
 800abbc:	06080600 060c0604 060a0602 060e0606     ................
 800abcc:	06090601 060d0605 060b0603 060f0607     ................
 800abdc:	02080200 020c0204 020a0202 020e0206     ................
 800abec:	02090201 020d0205 020b0203 020f0207     ................
 800abfc:	04080400 040c0404 040a0402 040e0406     ................
 800ac0c:	04090401 040d0405 040b0403 040f0407     ................
 800ac1c:	00080000 000c0004 000a0002 000e0006     ................
 800ac2c:	00090001 000d0005 000b0003 000f0007     ................

0800ac3c <crc7tab>:
 800ac3c:	36241200 7e6c5a48 a6b48290 eefccad8     ..$6HZl~........
 800ac4c:	04162032 4c5e687a 9486b0a2 dccef8ea     2 ..zh^L........
 800ac5c:	52407664 1a083e2c c2d0e6f4 8a98aebc     dv@R,>..........
 800ac6c:	60724456 283a0c1e f0e2d4c6 b8aa9c8e     VDr`..:(........
 800ac7c:	feecdac8 b6a49280 6e7c4a58 26340210     ........XJ|n..4&
 800ac8c:	ccdee8fa 8496a0b2 5c4e786a 14063022     ........jxN\"0..
 800ac9c:	9a88beac d2c0f6e4 0a182e3c 42506674     ........<...tfPB
 800acac:	a8ba8c9e e0f2c4d6 382a1c0e 70625446     ..........*8FTbp
 800acbc:	b4a69082 fceed8ca 24360012 6c7e485a     ..........6$ZH~l
 800accc:	8694a2b0 cedceaf8 16043220 5e4c7a68     ........ 2..hzL^
 800acdc:	d0c2f4e6 988abcae 40526476 081a2c3e     ........vdR@>,..
 800acec:	e2f0c6d4 aab88e9c 72605644 3a281e0c     ........DV`r..(:
 800acfc:	7c6e584a 34261002 ecfec8da a4b68092     JXn|..&4........
 800ad0c:	4e5c6a78 06142230 deccfae8 9684b2a0     xj\N0"..........
 800ad1c:	180a3c2e 50427466 889aacbe c0d2e4f6     .<..ftBP........
 800ad2c:	2a380e1c 62704654 baa89e8c f2e0d6c4     ..8*TFpb........

0800ad3c <wordmask.6271>:
 800ad3c:	ffffff00 ffff0000 ff000000 00000000     ................

0800ad4c <wordload.6272>:
 800ad4c:	00000000 00000100 00020100 03020100     ................

0800ad5c <bitify.6380>:
 800ad5c:	00000000 00000001 00000100 00000101     ................
 800ad6c:	00010000 00010001 00010100 00010101     ................
 800ad7c:	01000000 01000001 01000100 01000101     ................
 800ad8c:	01010000 01010001 01010100 01010101     ................

0800ad9c <fbit104>:
 800ad9c:	01010101 00010101 00010101 00000001     ................
 800adac:	00010101 00000000 00000000 00000000     ................
 800adbc:	00000101 00000000 00000000 00000000     ................
	...
 800addc:	00000001 00000000 00000000 00000000     ................
	...

0800ae1c <fbit96>:
 800ae1c:	01010101 01010101 01010101 00000001     ................
 800ae2c:	00010101 00000001 00000001 00000000     ................
 800ae3c:	00010101 00000001 00000000 00000000     ................
	...
 800ae5c:	00010101 00000000 00000000 00000000     ................
	...

0800ae9c <fbit88>:
 800ae9c:	01010101 01010101 01010101 00010101     ................
 800aeac:	01010101 00000101 00000001 00000000     ................
 800aebc:	00010101 00000001 00000001 00000000     ................
 800aecc:	00000001 00000000 00000000 00000000     ................
 800aedc:	00010101 00000001 00000001 00000000     ................
	...

0800af1c <fbit80>:
 800af1c:	01010101 01010101 01010101 00010101     ................
 800af2c:	01010101 00010101 00010101 00000000     ................
 800af3c:	01010101 00010101 00000001 00000000     ................
 800af4c:	00000001 00000000 00000000 00000000     ................
 800af5c:	00010101 00000001 00000001 00000000     ................
 800af6c:	00000001 00000000 00000000 00000000     ................
 800af7c:	00000001 00000000 00000000 00000000     ................
	...

0800af9c <fbit72>:
 800af9c:	01010101 01010101 01010101 00010101     ................
 800afac:	01010101 00010101 00010101 00000001     ................
 800afbc:	01010101 00010101 00010101 00000000     ................
 800afcc:	00000101 00000000 00000000 00000000     ................
 800afdc:	01010101 00010101 00010001 00000000     ................
 800afec:	00000001 00000000 00000000 00000000     ................
 800affc:	00000001 00000000 00000000 00000000     ................
	...

0800b01c <fbit64>:
 800b01c:	01010101 01010101 01010101 01010101     ................
 800b02c:	01010101 01010101 00010101 00000001     ................
 800b03c:	01010101 00010101 00010101 00000001     ................
 800b04c:	00010101 00000001 00000000 00000000     ................
 800b05c:	01010101 00010101 00010101 00000001     ................
 800b06c:	00000101 00000000 00000000 00000000     ................
 800b07c:	00000001 00000000 00000000 00000000     ................
	...

0800b09c <fbit48>:
 800b09c:	01010101 01010101 01010101 01010101     ................
 800b0ac:	01010101 01010101 01010101 00010101     ................
 800b0bc:	01010101 01010101 01010101 00010101     ................
 800b0cc:	01010101 00000001 00000001 00000000     ................
 800b0dc:	01010101 01010101 00010101 00000001     ................
 800b0ec:	00010101 00000001 00000001 00000000     ................
 800b0fc:	00010101 00000001 00000000 00000000     ................
	...

0800b11c <llrvrssi>:
 800b11c:	01430120 0198016b 020001c8 0286023e      .C.k.......>...
 800b12c:	032c02d3 03ff038f 0479043a 050604be     ..,.....:.y.....
 800b13c:	065305a5 0a0707f7 0fe50c9f 192f1400     ..S.........../.
 800b14c:	27e81fb6 3f3e323a 643b4f9e 77237723     ...':2>?.O;d#w#w

0800b15c <llroffset>:
	...

0800b16c <scan_events.6798>:
 800b16c:	05000000 00010004 08005688 08005694     .........V...V..
 800b17c:	080056ee 080056f2 080056fa 080056fe     .V...V...V...V..
 800b18c:	08005706 0800570a                       .W...W..

0800b194 <_idlen>:
 800b194:	00020008 0800625a 08006278 0800625e     ....Zb..xb..^b..
 800b1a4:	0800625e 08006266 08006266              ^b..fb..fb..

0800b1b0 <opgroup_proc>:
 800b1b0:	08005ef9 08005ef9 08005f19 080065dd     .^...^..._...e..
 800b1c0:	080065dd 08005e35 08005e37 08006045     .e..5^..7^..E`..

0800b1d0 <fixed_mask.6518>:
 800b1d0:	ffffffff ffffffff ffffffff ffffffff     ................

0800b1e0 <cmd_fn.6090>:
 800b1e0:	08006b1d 08006619 08006b1d 08006b1d     .k...f...k...k..
 800b1f0:	08006841 08006619 08006841 08006841     Ah...f..Ah..Ah..
 800b200:	08006783 08006619 0800671d 08006687     .g...f...g...f..
 800b210:	08006841 08006619 0800663d 08006619     Ah...f..=f...f..

0800b220 <crc16_table>:
 800b220:	80050000 000a800f 001e801b 80110014     ................
 800b230:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
 800b240:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
 800b250:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
 800b260:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
 800b270:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
 800b280:	80a500a0 00aa80af 00be80bb 80b100b4     ................
 800b290:	00968093 8099009c 808d0088 00828087     ................
 800b2a0:	01868183 8189018c 819d0198 01928197     ................
 800b2b0:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
 800b2c0:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
 800b2d0:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
 800b2e0:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
 800b2f0:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
 800b300:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
 800b310:	81150110 011a811f 010e810b 81010104     ................
 800b320:	03068303 8309030c 831d0318 03128317     ................
 800b330:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
 800b340:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
 800b350:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
 800b360:	83c503c0 03ca83cf 03de83db 83d103d4     ................
 800b370:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
 800b380:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
 800b390:	83950390 039a839f 038e838b 83810384     ................
 800b3a0:	82850280 028a828f 029e829b 82910294     ................
 800b3b0:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
 800b3c0:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
 800b3d0:	82d502d0 02da82df 02ce82cb 82c102c4     ................
 800b3e0:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
 800b3f0:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
 800b400:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
 800b410:	02168213 8219021c 820d0208 02028207     ................
 800b420:	08007950 08007966 08007984 080079a4     Py..fy...y...y..
 800b430:	080079b6 080079c6                       .y...y..

0800b438 <systask_call>:
 800b438:	08005391 0800793d 080053e1 08004e95     .S..=y...S...N..
 800b448:	08004e05 080006fd                       .N......

0800b450 <len_div.5340>:
 800b450:	00000002 00000001                       ........

0800b458 <ccr.5339>:
 800b458:	40d14ad1 40d145d1                       .J.@.E.@

0800b460 <len_div.5368>:
 800b460:	00000002 00000001                       ........

0800b468 <ccr.5367>:
 800b468:	40d14ad1 40d145d1 08008e64 08008e64     .J.@.E.@d...d...
 800b478:	08008f4c 08009020 08009020 08009008     L... ... .......
 800b488:	08009014                                ....

0800b48c <_brtable>:
 800b48c:	00002580 00007080 0000e100 0001c200     .%...p..........
 800b49c:	0003d090 0007a120 6774227b 74736574     .... ...{"tgtest
 800b4ac:	007b3a22 6b6f7422 3a226e65 38302522     ":{."token":"%08
 800b4bc:	202c2258 00000000 73737222 253a2269     X", ...."rssi":%
 800b4cc:	00202c69 61656d22 6e732d6e 253a2272     i, ."mean-snr":%
 800b4dc:	007d7d69 00504c41 5f535953 00004e4f     i}}.ALP.SYS_ON..
 800b4ec:	74737953 6f206d65 6e61206e 704d2064     System on and Mp
 800b4fc:	20657069 69746361 000a6576 00465457     ipe active..WTF.
 800b50c:	00000068 6573552f 6a2f7372 6f626e70     h.../Users/jpnbo
 800b51c:	532f6b6f 2f636e79 6f706552 6f746973     ok/Sync/Reposito
 800b52c:	4f2f7972 546e6570 485f6761 682f4f44     ry/OpenTag_HDO/h
 800b53c:	6c697562 2f726564 696c6268 73682f62     builder/hblib/hs
 800b54c:	65646f63 0000632e 7566202c 6974636e     code.c.., functi
 800b55c:	203a6e6f 73736100 69747265 22206e6f     on: .assertion "
 800b56c:	20227325 6c696166 203a6465 656c6966     %s" failed: file
 800b57c:	73252220 6c202c22 20656e69 73256425      "%s", line %d%s
 800b58c:	000a7325                                %s..

0800b590 <_global_impure_ptr>:
 800b590:	2000014c 2b302d23 6c680020 6665004c     L.. #-0+ .hlL.ef
 800b5a0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
 800b5b0:	45444342 31300046 35343332 39383736     BCDEF.0123456789
 800b5c0:	64636261 00006665                       abcdef..

0800b5c8 <__sf_fake_stderr>:
	...

0800b5e8 <__sf_fake_stdin>:
	...

0800b608 <__sf_fake_stdout>:
	...

0800b628 <_init>:
 800b628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62a:	46c0      	nop			; (mov r8, r8)
 800b62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b62e:	bc08      	pop	{r3}
 800b630:	469e      	mov	lr, r3
 800b632:	4770      	bx	lr

0800b634 <_fini>:
 800b634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b636:	46c0      	nop			; (mov r8, r8)
 800b638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b63a:	bc08      	pop	{r3}
 800b63c:	469e      	mov	lr, r3
 800b63e:	4770      	bx	lr

0800b640 <__init_array_start>:
 800b640:	080000e9 	.word	0x080000e9

0800b644 <__fini_array_start>:
 800b644:	080000c1 	.word	0x080000c1
