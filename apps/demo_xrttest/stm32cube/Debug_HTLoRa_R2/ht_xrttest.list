
ht_xrttest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flash_start  00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  2 .crp_patch    00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  3 .text         0000a72c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .flashpatch   00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  5 .endflash     00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  6 .config       00000000  1ff80000  1ff80000  000275fc  2**0
                  CONTENTS
  7 .optionbytes  00000000  1ff80000  1ff80000  000275fc  2**0
                  CONTENTS
  8 .config2      00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
  9 .optionbytes2 00000000  00000000  00000000  000275fc  2**0
                  CONTENTS
 10 .vl_ov        00000280  08017000  08017000  00027000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .vl_isfs      00000000  08017360  08017360  000275fc  2**0
                  CONTENTS
 12 .vl_isf       000001fc  08017400  08017400  00027400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .data         000001ac  20000000  0800a7ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00003040  200001ac  0800a998  000201ac  2**2
                  ALLOC
 15 ._usrstack    00000100  200031ec  0800d9d8  000201ac  2**0
                  ALLOC
 16 .ARM.attributes 00000028  00000000  00000000  000275fc  2**0
                  CONTENTS, READONLY
 17 .debug_info   00027252  00000000  00000000  00027624  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00006eda  00000000  00000000  0004e876  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00010d52  00000000  00000000  00055750  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 000019b8  00000000  00000000  000664a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00002898  00000000  00000000  00067e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   000142e5  00000000  00000000  0006a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00006441  00000000  00000000  0007e9dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  00084e1e  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000495c  00000000  00000000  00084e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 26 .stab         000000cc  00000000  00000000  000897f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 27 .stabstr      000001b9  00000000  00000000  000898c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ac 	.word	0x200001ac
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a7cc 	.word	0x0800a7cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001b0 	.word	0x200001b0
 8000104:	0800a7cc 	.word	0x0800a7cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <xrt_applet_fec>:

/** Communication Task Applets  <BR>
  * ========================================================================<BR>
  */

void xrt_applet_fec(m2session* active) {
 80003f4:	b500      	push	{lr}
 80003f6:	b083      	sub	sp, #12
/// This is a page operation, which gets buried directly onto the queue
	ot_u8 	payload[7];
	ot_u32  dev_token = ((ot_u32*)UID_BASE)[0];
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <xrt_applet_fec+0x38>)
 80003fa:	6818      	ldr	r0, [r3, #0]

	payload[0]	= 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	466a      	mov	r2, sp
 8000400:	7013      	strb	r3, [r2, #0]
	payload[1]	= 0x81;
 8000402:	2281      	movs	r2, #129	; 0x81
 8000404:	4669      	mov	r1, sp
 8000406:	704a      	strb	r2, [r1, #1]
	payload[2]	= 0;
 8000408:	708b      	strb	r3, [r1, #2]
	payload[3]	= (ot_u8)setup.page_count;
 800040a:	4a09      	ldr	r2, [pc, #36]	; (8000430 <xrt_applet_fec+0x3c>)
 800040c:	7912      	ldrb	r2, [r2, #4]
 800040e:	70ca      	strb	r2, [r1, #3]
	payload[4]	= 0;
 8000410:	466a      	mov	r2, sp
 8000412:	710b      	strb	r3, [r1, #4]
	payload[5]	= 0;
 8000414:	714b      	strb	r3, [r1, #5]
	payload[6]	= 0;
 8000416:	718b      	strb	r3, [r1, #6]

    otapi_new_telegram(dev_token, 2, payload);
 8000418:	2102      	movs	r1, #2
 800041a:	f004 f8a7 	bl	800456c <otapi_new_telegram>
    otapi_start_dialog(1024);
 800041e:	2080      	movs	r0, #128	; 0x80
 8000420:	00c0      	lsls	r0, r0, #3
 8000422:	f004 f90f 	bl	8004644 <otapi_start_dialog>
}
 8000426:	b003      	add	sp, #12
 8000428:	bd00      	pop	{pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	1ff80050 	.word	0x1ff80050
 8000430:	20000000 	.word	0x20000000

08000434 <alp_ext_proc>:
ot_bool alp_ext_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 8000434:	b570      	push	{r4, r5, r6, lr}
 8000436:	0004      	movs	r4, r0
    ot_u8 flags      	= INREC(alp, FLAGS);
 8000438:	2104      	movs	r1, #4
 800043a:	4249      	negs	r1, r1
 800043c:	6880      	ldr	r0, [r0, #8]
 800043e:	f006 fd7a 	bl	8006f36 <q_getcursor_val>
    ot_u8 payload_len 	= INREC(alp, PLEN);
 8000442:	2103      	movs	r1, #3
 8000444:	4249      	negs	r1, r1
 8000446:	68a0      	ldr	r0, [r4, #8]
 8000448:	f006 fd75 	bl	8006f36 <q_getcursor_val>
    ot_u8 alp_id      	= INREC(alp, ID);
 800044c:	2102      	movs	r1, #2
 800044e:	4249      	negs	r1, r1
 8000450:	68a0      	ldr	r0, [r4, #8]
 8000452:	f006 fd70 	bl	8006f36 <q_getcursor_val>
 8000456:	0005      	movs	r5, r0
    ot_u8 alp_cmd     	= INREC(alp, CMD);
 8000458:	2101      	movs	r1, #1
 800045a:	4249      	negs	r1, r1
 800045c:	68a0      	ldr	r0, [r4, #8]
 800045e:	f006 fd6a 	bl	8006f36 <q_getcursor_val>
    switch (alp_id) {
 8000462:	2d10      	cmp	r5, #16
 8000464:	d001      	beq.n	800046a <alp_ext_proc+0x36>
}
 8000466:	2001      	movs	r0, #1
 8000468:	bd70      	pop	{r4, r5, r6, pc}
		radio_snr_t* snrdata = radio_getlinkinfo();
 800046a:	f001 fb51 	bl	8001b10 <radio_getlinkinfo>
		setup.page_received = True;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <alp_ext_proc+0x74>)
 8000470:	2201      	movs	r2, #1
 8000472:	705a      	strb	r2, [r3, #1]
		tx_eirp	= q_readbyte(alp->inq);
 8000474:	68a0      	ldr	r0, [r4, #8]
 8000476:	f006 fdc8 	bl	800700a <q_readbyte>
		subnet  = q_readbyte(alp->inq);
 800047a:	68a0      	ldr	r0, [r4, #8]
 800047c:	f006 fdc5 	bl	800700a <q_readbyte>
		token   = q_readlong(alp->inq);
 8000480:	68a0      	ldr	r0, [r4, #8]
 8000482:	f006 fddc 	bl	800703e <q_readlong>
		ptype   = q_readbyte(alp->inq);
 8000486:	68a0      	ldr	r0, [r4, #8]
 8000488:	f006 fdbf 	bl	800700a <q_readbyte>
		dtype.ubyte[UPPER] 	= q_readbyte(alp->inq);
 800048c:	68a0      	ldr	r0, [r4, #8]
 800048e:	f006 fdbc 	bl	800700a <q_readbyte>
		dtype.ubyte[LOWER] 	= q_readbyte(alp->inq);
 8000492:	68a0      	ldr	r0, [r4, #8]
 8000494:	f006 fdb9 	bl	800700a <q_readbyte>
		pcnt.ubyte[UPPER] 	= q_readbyte(alp->inq);
 8000498:	68a0      	ldr	r0, [r4, #8]
 800049a:	f006 fdb6 	bl	800700a <q_readbyte>
		pcnt.ubyte[LOWER] 	= q_readbyte(alp->inq);
 800049e:	68a0      	ldr	r0, [r4, #8]
 80004a0:	f006 fdb3 	bl	800700a <q_readbyte>
	} break;
 80004a4:	e7df      	b.n	8000466 <alp_ext_proc+0x32>
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	20000000 	.word	0x20000000

080004ac <xrt_invoke>:
  * Then, the kernel will call the DLL session task as soon as necessary
  * resources are available to run that task (by default DLL task is top
  * priority, so it should get called right away).
  */

void xrt_invoke(ot_u8 state) {
 80004ac:	b510      	push	{r4, lr}
 80004ae:	0001      	movs	r1, r0
    sys_task_setevent(XRTTEST_TASK, state);
 80004b0:	4c08      	ldr	r4, [pc, #32]	; (80004d4 <xrt_invoke+0x28>)
 80004b2:	0020      	movs	r0, r4
 80004b4:	f007 f9bc 	bl	8007830 <sys_task_setevent>
    sys_task_setreserve(XRTTEST_TASK, 1);
 80004b8:	2101      	movs	r1, #1
 80004ba:	0020      	movs	r0, r4
 80004bc:	f007 f9ba 	bl	8007834 <sys_task_setreserve>
    sys_task_setlatency(XRTTEST_TASK, 255);
 80004c0:	21ff      	movs	r1, #255	; 0xff
 80004c2:	0020      	movs	r0, r4
 80004c4:	f007 f9b8 	bl	8007838 <sys_task_setlatency>
    sys_preempt(XRTTEST_TASK, 0);
 80004c8:	2100      	movs	r1, #0
 80004ca:	0020      	movs	r0, r4
 80004cc:	f007 fa2e 	bl	800792c <sys_preempt>
}
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	20002db4 	.word	0x20002db4

080004d8 <app_set_txpwr>:


/** Function for modulating power <BR>
  * ==================================================================<BR>
  */
void app_set_txpwr(ot_int dBm) {
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	0004      	movs	r4, r0
    vlFILE* fp;
    ot_uni16 pwr_flt;

    fp = ISF_open_su(0x02);
 80004dc:	2002      	movs	r0, #2
 80004de:	f007 f8f2 	bl	80076c6 <ISF_open_su>
 80004e2:	1e05      	subs	r5, r0, #0
    if (fp != NULL) {
 80004e4:	d02b      	beq.n	800053e <app_set_txpwr+0x66>
        ot_uint offset;

        // Replace existing power levels for each of three channel groups
        // with new power spec.
        offset              = 6+2;
        pwr_flt.ushort      = vl_read(fp, offset);
 80004e6:	2108      	movs	r1, #8
 80004e8:	f007 f836 	bl	8007558 <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 80004ec:	3428      	adds	r4, #40	; 0x28
 80004ee:	0064      	lsls	r4, r4, #1
 80004f0:	b2e4      	uxtb	r4, r4
 80004f2:	26ff      	movs	r6, #255	; 0xff
 80004f4:	0002      	movs	r2, r0
 80004f6:	43b2      	bics	r2, r6
 80004f8:	4322      	orrs	r2, r4
        vl_write(fp, offset, pwr_flt.ushort);
 80004fa:	b292      	uxth	r2, r2
 80004fc:	2108      	movs	r1, #8
 80004fe:	0028      	movs	r0, r5
 8000500:	f007 f831 	bl	8007566 <vl_write>

        offset              = 6+6+2;
        pwr_flt.ushort      = vl_read(fp, offset);
 8000504:	210e      	movs	r1, #14
 8000506:	0028      	movs	r0, r5
 8000508:	f007 f826 	bl	8007558 <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 800050c:	0002      	movs	r2, r0
 800050e:	43b2      	bics	r2, r6
 8000510:	4322      	orrs	r2, r4
        vl_write(fp, offset, pwr_flt.ushort);
 8000512:	b292      	uxth	r2, r2
 8000514:	210e      	movs	r1, #14
 8000516:	0028      	movs	r0, r5
 8000518:	f007 f825 	bl	8007566 <vl_write>

        offset              = 6+6+6+2;
        pwr_flt.ushort      = vl_read(fp, offset);
 800051c:	2114      	movs	r1, #20
 800051e:	0028      	movs	r0, r5
 8000520:	f007 f81a 	bl	8007558 <vl_read>
        pwr_flt.ubyte[0]    = (ot_u8)( (dBm + 40) * 2 );
 8000524:	0002      	movs	r2, r0
 8000526:	43b2      	bics	r2, r6
 8000528:	4322      	orrs	r2, r4
        vl_write(fp, offset, pwr_flt.ushort);
 800052a:	b292      	uxth	r2, r2
 800052c:	2114      	movs	r1, #20
 800052e:	0028      	movs	r0, r5
 8000530:	f007 f819 	bl	8007566 <vl_write>

        vl_close(fp);
 8000534:	0028      	movs	r0, r5
 8000536:	f007 f891 	bl	800765c <vl_close>
        // This block of code resets the channel status, forcing the
        // radio module to update the channel information.
        // It's a hack, but this whole app is a hack.
        //phymac[0].channel   = 0xF0;
        //phymac[0].tx_eirp   = 0x7F;
        rm2_channel_refresh();
 800053a:	f005 fa81 	bl	8005a40 <rm2_channel_refresh>
    }

}
 800053e:	bd70      	pop	{r4, r5, r6, pc}

08000540 <setup_init>:
  * any of the kernel & system features are initialized.  It's a good
  * place to put features that control which drivers or apps get 
  * activated.
  */
  
void setup_init() {
 8000540:	b510      	push	{r4, lr}
    
    // Set it up as gateway by default (switch open, if there is a switch at all)
#   if defined(__FORCE_GATEWAY)
    setup.is_gateway = 1;
#   elif !defined(OT_SWITCH1_ISR)
    setup.is_gateway = 0;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <setup_init+0x48>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
#   endif
    
    /// Blink the board LEDs to show that it is starting up.
    {   ot_u8 i;

        i=4;
 8000548:	2404      	movs	r4, #4
        while (i != 0) {
 800054a:	e011      	b.n	8000570 <setup_init+0x30>
#	endif

	static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
	static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
	static inline void BOARD_led1_toggle(void)  { OT_TRIG1_TOG(); }
	static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 800054c:	23a0      	movs	r3, #160	; 0xa0
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	00d2      	lsls	r2, r2, #3
 8000554:	629a      	str	r2, [r3, #40]	; 0x28
            if (i&1)    BOARD_led1_on();
            else        BOARD_led2_on();

            delay_ti(60);
 8000556:	203c      	movs	r0, #60	; 0x3c
 8000558:	f007 ffa8 	bl	80084ac <delay_ti>
	static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 800055c:	23a0      	movs	r3, #160	; 0xa0
 800055e:	05db      	lsls	r3, r3, #23
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	00d2      	lsls	r2, r2, #3
 8000564:	619a      	str	r2, [r3, #24]
	static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	0092      	lsls	r2, r2, #2
 800056a:	619a      	str	r2, [r3, #24]
            BOARD_led2_off();
            BOARD_led1_off();
            i--;
 800056c:	3c01      	subs	r4, #1
 800056e:	b2e4      	uxtb	r4, r4
        while (i != 0) {
 8000570:	2c00      	cmp	r4, #0
 8000572:	d007      	beq.n	8000584 <setup_init+0x44>
            if (i&1)    BOARD_led1_on();
 8000574:	07e3      	lsls	r3, r4, #31
 8000576:	d5e9      	bpl.n	800054c <setup_init+0xc>
	static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
 8000578:	23a0      	movs	r3, #160	; 0xa0
 800057a:	05db      	lsls	r3, r3, #23
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	0092      	lsls	r2, r2, #2
 8000580:	629a      	str	r2, [r3, #40]	; 0x28
 8000582:	e7e8      	b.n	8000556 <setup_init+0x16>
    // Setup Button for interrupt
#	ifdef OT_SWITCH1_PIN
    EXTI->RTSR |= OT_SWITCH1_PIN;
    EXTI->IMR  |= OT_SWITCH1_PIN;
#	endif
}
 8000584:	bd10      	pop	{r4, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	20000000 	.word	0x20000000

0800058c <setup_beacons>:





ot_int setup_beacons(ot_u16 interval, ot_u8 channel) {
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	b083      	sub	sp, #12
	ot_u8 beacon_list[8] = {0x00, 0x00, TG_CHANNEL, 0x02, 0x20, 0x00, 0x00, 0x08};
 8000590:	466a      	mov	r2, sp
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <setup_beacons+0x6c>)
 8000594:	cb30      	ldmia	r3!, {r4, r5}
 8000596:	c230      	stmia	r2!, {r4, r5}
    vlFILE* fp;
    ot_int 	output = -1;

    if (interval == 0) {
 8000598:	2800      	cmp	r0, #0
 800059a:	d110      	bne.n	80005be <setup_beacons+0x32>
    	fp = ISF_open_su(0);
 800059c:	f007 f893 	bl	80076c6 <ISF_open_su>
 80005a0:	1e05      	subs	r5, r0, #0
		if (fp != NULL) {
 80005a2:	d022      	beq.n	80005ea <setup_beacons+0x5e>
			output = vl_write(fp, 6, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2106      	movs	r1, #6
 80005a8:	f006 ffdd 	bl	8007566 <vl_write>
 80005ac:	b204      	sxth	r4, r0
			vl_close(fp);
 80005ae:	0028      	movs	r0, r5
 80005b0:	f007 f854 	bl	800765c <vl_close>
			dll_refresh();
 80005b4:	f004 fed0 	bl	8005358 <dll_refresh>
			dll_refresh();
		}
    }

    return output;
}
 80005b8:	0020      	movs	r0, r4
 80005ba:	b003      	add	sp, #12
 80005bc:	bd30      	pop	{r4, r5, pc}
    	beacon_list[2] = channel;
 80005be:	466b      	mov	r3, sp
 80005c0:	7099      	strb	r1, [r3, #2]
    	beacon_list[6] = (ot_u8)(interval >> 8);
 80005c2:	0a03      	lsrs	r3, r0, #8
 80005c4:	466a      	mov	r2, sp
 80005c6:	7193      	strb	r3, [r2, #6]
    	beacon_list[7] = (ot_u8)(interval);
 80005c8:	71d0      	strb	r0, [r2, #7]
    	fp = ISF_open_su(6);
 80005ca:	2006      	movs	r0, #6
 80005cc:	f007 f87b 	bl	80076c6 <ISF_open_su>
 80005d0:	1e05      	subs	r5, r0, #0
		if (fp != NULL) {
 80005d2:	d00d      	beq.n	80005f0 <setup_beacons+0x64>
			output = vl_store(fp, 8, beacon_list);
 80005d4:	466a      	mov	r2, sp
 80005d6:	2108      	movs	r1, #8
 80005d8:	f007 f808 	bl	80075ec <vl_store>
 80005dc:	b204      	sxth	r4, r0
			vl_close(fp);
 80005de:	0028      	movs	r0, r5
 80005e0:	f007 f83c 	bl	800765c <vl_close>
			dll_refresh();
 80005e4:	f004 feb8 	bl	8005358 <dll_refresh>
 80005e8:	e7e6      	b.n	80005b8 <setup_beacons+0x2c>
    ot_int 	output = -1;
 80005ea:	2401      	movs	r4, #1
 80005ec:	4264      	negs	r4, r4
 80005ee:	e7e3      	b.n	80005b8 <setup_beacons+0x2c>
 80005f0:	2401      	movs	r4, #1
 80005f2:	4264      	negs	r4, r4
 80005f4:	e7e0      	b.n	80005b8 <setup_beacons+0x2c>
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	08009610 	.word	0x08009610

080005fc <setup_listen>:


void setup_listen(bool is_gateway, ot_u8 channel) {
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	0006      	movs	r6, r0
 8000602:	000d      	movs	r5, r1
	ot_u8 sleep_gateway[4] = { SPLIT_TIME16(2,0,0), TG_CHANNEL, 0x50 };
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <setup_listen+0x40>)
 8000606:	689a      	ldr	r2, [r3, #8]
 8000608:	9201      	str	r2, [sp, #4]
	ot_u8 sleep_endpoint[4]= { SPLIT_TIME16(0,2,3), TG_CHANNEL, 0x80 };
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	9300      	str	r3, [sp, #0]
    vlFILE* fp;
    ot_u8* data;

    fp = ISF_open_su(5);
 800060e:	2005      	movs	r0, #5
 8000610:	f007 f859 	bl	80076c6 <ISF_open_su>
 8000614:	1e04      	subs	r4, r0, #0
    if (fp != NULL) {
 8000616:	d00c      	beq.n	8000632 <setup_listen+0x36>
        data = is_gateway ? (ot_u8*)sleep_gateway : (ot_u8*)sleep_endpoint;
 8000618:	2e00      	cmp	r6, #0
 800061a:	d00c      	beq.n	8000636 <setup_listen+0x3a>
 800061c:	aa01      	add	r2, sp, #4
        data[2] = channel;
 800061e:	7095      	strb	r5, [r2, #2]
        vl_store(fp, 4, data);
 8000620:	2104      	movs	r1, #4
 8000622:	0020      	movs	r0, r4
 8000624:	f006 ffe2 	bl	80075ec <vl_store>
        vl_close(fp);
 8000628:	0020      	movs	r0, r4
 800062a:	f007 f817 	bl	800765c <vl_close>
        dll_refresh();
 800062e:	f004 fe93 	bl	8005358 <dll_refresh>
    }
}
 8000632:	b002      	add	sp, #8
 8000634:	bd70      	pop	{r4, r5, r6, pc}
        data = is_gateway ? (ot_u8*)sleep_gateway : (ot_u8*)sleep_endpoint;
 8000636:	466a      	mov	r2, sp
 8000638:	e7f1      	b.n	800061e <setup_listen+0x22>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	08009610 	.word	0x08009610

08000640 <xrttest_systask>:
void xrttest_systask(void* arg) {
 8000640:	b510      	push	{r4, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	0004      	movs	r4, r0
    switch (task->event) {
 8000646:	7803      	ldrb	r3, [r0, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d02f      	beq.n	80006ac <xrttest_systask+0x6c>
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <xrttest_systask+0x1a>
 8000650:	2b02      	cmp	r3, #2
 8000652:	d01c      	beq.n	800068e <xrttest_systask+0x4e>
        task->event = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	7003      	strb	r3, [r0, #0]
}
 8000658:	e036      	b.n	80006c8 <xrttest_systask+0x88>
    	setup.page_count = __PAGE_NUMBURST__;
 800065a:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <xrttest_systask+0x90>)
 800065c:	2201      	movs	r2, #1
 800065e:	809a      	strh	r2, [r3, #4]
    	setup.page_received = False;
 8000660:	2200      	movs	r2, #0
 8000662:	705a      	strb	r2, [r3, #1]
    	setup.page_type = 0;
 8000664:	805a      	strh	r2, [r3, #2]
    	break;
 8000666:	e02f      	b.n	80006c8 <xrttest_systask+0x88>
				s_tmpl.channel 	= (TG_CHANNEL);
 8000668:	2389      	movs	r3, #137	; 0x89
 800066a:	466a      	mov	r2, sp
 800066c:	7053      	strb	r3, [r2, #1]
			s_tmpl.flagmask     = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	7153      	strb	r3, [r2, #5]
			s_tmpl.subnetmask   = 0;
 8000672:	70d3      	strb	r3, [r2, #3]
			m2task_telegram(&s_tmpl, applet);
 8000674:	4917      	ldr	r1, [pc, #92]	; (80006d4 <xrttest_systask+0x94>)
 8000676:	4668      	mov	r0, sp
 8000678:	f004 ff7c 	bl	8005574 <m2task_telegram>
			setup.page_type 	= (setup.page_type == 0);
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <xrttest_systask+0x90>)
 800067e:	2102      	movs	r1, #2
 8000680:	5e53      	ldrsh	r3, [r2, r1]
 8000682:	4259      	negs	r1, r3
 8000684:	414b      	adcs	r3, r1
 8000686:	8053      	strh	r3, [r2, #2]
			nextevent_ti = __PAGE_PERIOD_TI__;
 8000688:	2180      	movs	r1, #128	; 0x80
 800068a:	00c9      	lsls	r1, r1, #3
 800068c:	e017      	b.n	80006be <xrttest_systask+0x7e>
    	if (setup.is_gateway) {
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <xrttest_systask+0x90>)
 8000690:	7818      	ldrb	r0, [r3, #0]
 8000692:	2800      	cmp	r0, #0
 8000694:	d00a      	beq.n	80006ac <xrttest_systask+0x6c>
    		ot_u8 chan = (setup.page_count == 0) ? (0x80|TG_CHANNEL) : ((~0x80)&TG_CHANNEL);
 8000696:	2204      	movs	r2, #4
 8000698:	5e9b      	ldrsh	r3, [r3, r2]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d116      	bne.n	80006cc <xrttest_systask+0x8c>
 800069e:	2189      	movs	r1, #137	; 0x89
    		setup.page_count = (setup.page_count == 0);
 80006a0:	425a      	negs	r2, r3
 80006a2:	4153      	adcs	r3, r2
 80006a4:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <xrttest_systask+0x90>)
 80006a6:	8093      	strh	r3, [r2, #4]
    		setup_listen(setup.is_gateway, chan);
 80006a8:	f7ff ffa8 	bl	80005fc <setup_listen>
    	if (setup.is_gateway) {
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <xrttest_systask+0x90>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d0d9      	beq.n	8000668 <xrttest_systask+0x28>
    		setup.page_received	= False;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <xrttest_systask+0x90>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	705a      	strb	r2, [r3, #1]
    		nextevent_ti		= __PAGE_PERIOD_TI__*3;
 80006ba:	21c0      	movs	r1, #192	; 0xc0
 80006bc:	0109      	lsls	r1, r1, #4
    	task->event = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	7023      	strb	r3, [r4, #0]
    	sys_task_setnext(task, nextevent_ti);
 80006c2:	0020      	movs	r0, r4
 80006c4:	f007 f8c2 	bl	800784c <sys_task_setnext>
}
 80006c8:	b002      	add	sp, #8
 80006ca:	bd10      	pop	{r4, pc}
    		ot_u8 chan = (setup.page_count == 0) ? (0x80|TG_CHANNEL) : ((~0x80)&TG_CHANNEL);
 80006cc:	2109      	movs	r1, #9
 80006ce:	e7e7      	b.n	80006a0 <xrttest_systask+0x60>
 80006d0:	20000000 	.word	0x20000000
 80006d4:	080003f5 	.word	0x080003f5

080006d8 <main>:
	return (ot_int)crcreg;
}
#endif


void main(void) {
 80006d8:	b510      	push	{r4, lr}
    ///1. Standard Power-on routine (Clocks, Timers, IRQ's, etc)
    ///2. Standard OpenTag Init (most stuff actually will not be used)
    platform_poweron();
 80006da:	f007 fd2b 	bl	8008134 <platform_poweron>
    platform_init_OT();
 80006de:	f007 fc07 	bl	8007ef0 <platform_init_OT>

    // 3. Preparing this application (local functions)
    setup_init();
 80006e2:	f7ff ff2d 	bl	8000540 <setup_init>
    app_set_txpwr((ot_int)(__DBM_DEFAULT));
 80006e6:	2014      	movs	r0, #20
 80006e8:	f7ff fef6 	bl	80004d8 <app_set_txpwr>
    setup_listen(setup.is_gateway, TG_CHANNEL);
 80006ec:	4c10      	ldr	r4, [pc, #64]	; (8000730 <main+0x58>)
 80006ee:	7820      	ldrb	r0, [r4, #0]
 80006f0:	2189      	movs	r1, #137	; 0x89
 80006f2:	f7ff ff83 	bl	80005fc <setup_listen>
    setup_beacons(0, TG_CHANNEL);
 80006f6:	2189      	movs	r1, #137	; 0x89
 80006f8:	2000      	movs	r0, #0
 80006fa:	f7ff ff47 	bl	800058c <setup_beacons>

    if (setup.is_gateway) {
 80006fe:	7823      	ldrb	r3, [r4, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d112      	bne.n	800072a <main+0x52>
    	asapi_init_srv();
    }

    xrt_invoke(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f7ff fed1 	bl	80004ac <xrt_invoke>
    
    ///4. Set the app name (PageTest) as a cookie in the User-ID.
    ///   This is used for query filtering
    {   static const ot_u8 appstr[] = "APP=PageTest";
        vlFILE* fp;
        fp = ISF_open_su(ISF_ID(user_id));
 800070a:	2011      	movs	r0, #17
 800070c:	f006 ffdb 	bl	80076c6 <ISF_open_su>
 8000710:	1e04      	subs	r4, r0, #0
        if (fp != NULL) {
 8000712:	d004      	beq.n	800071e <main+0x46>
            vl_store(fp, sizeof(appstr), appstr);
 8000714:	4a07      	ldr	r2, [pc, #28]	; (8000734 <main+0x5c>)
 8000716:	3210      	adds	r2, #16
 8000718:	210d      	movs	r1, #13
 800071a:	f006 ff67 	bl	80075ec <vl_store>
        }
        vl_close(fp);
 800071e:	0020      	movs	r0, r4
 8000720:	f006 ff9c 	bl	800765c <vl_close>
    ///<LI> You could put code before or after platform_ot_run, which will
    ///     run before or after the (task + kernel).  If you do, keep the code
    ///     very short or else you are risking timing glitches.</LI>
    ///<LI> To run any significant amount of user code, use tasks. </LI>
    while(1) {
        platform_ot_run();
 8000724:	f007 fda4 	bl	8008270 <platform_ot_run>
 8000728:	e7fc      	b.n	8000724 <main+0x4c>
    	asapi_init_srv();
 800072a:	f000 f8f5 	bl	8000918 <asapi_init_srv>
 800072e:	e7e9      	b.n	8000704 <main+0x2c>
 8000730:	20000000 	.word	0x20000000
 8000734:	08009610 	.word	0x08009610

08000738 <dll_sig_rfinit>:
/// 2 = Session invocation (rfinit() not called here)
/// 3 = RX initialization (!)
/// 4 = TX CSMA init (!)
/// 5 = TX watchdog (rfinit() not called here)

    if (pcode == 3) BOARD_led2_on();    // Orange (preferred) / Yellow / Red lamp
 8000738:	2803      	cmp	r0, #3
 800073a:	d005      	beq.n	8000748 <dll_sig_rfinit+0x10>
 800073c:	23a0      	movs	r3, #160	; 0xa0
 800073e:	05db      	lsls	r3, r3, #23
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	0092      	lsls	r2, r2, #2
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
    else            BOARD_led1_on();    // Green lamp
}
 8000746:	4770      	bx	lr
	static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 8000748:	23a0      	movs	r3, #160	; 0xa0
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	00d2      	lsls	r2, r2, #3
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
 8000752:	e7f8      	b.n	8000746 <dll_sig_rfinit+0xe>

08000754 <dll_sig_rfterminate>:
	static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 8000754:	23a0      	movs	r3, #160	; 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	00d2      	lsls	r2, r2, #3
 800075c:	619a      	str	r2, [r3, #24]
	static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	0092      	lsls	r2, r2, #2
 8000762:	619a      	str	r2, [r3, #24]

#ifdef EXTF_dll_sig_rfterminate
void dll_sig_rfterminate(ot_int pcode, ot_int scode) {
    BOARD_led2_off();   //Orange LED off
    BOARD_led1_off();   //Green LED off
}
 8000764:	4770      	bx	lr

08000766 <sys_sig_panic>:
#ifdef EXTF_sys_sig_panic
void sys_sig_panic(ot_int code) {
#   if (OT_FEATURE(MPIPE))
    logger_code(3, (ot_u8*)"WTF", (ot_u16)code);
#   endif
}
 8000766:	4770      	bx	lr

08000768 <sys_sig_powerdown>:
    SCB->SCR    = scbscr_save;
}


//#ifdef EXTF_sys_sig_powerdown
void sys_sig_powerdown(ot_int code) {
 8000768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076a:	46ce      	mov	lr, r9
 800076c:	4647      	mov	r7, r8
 800076e:	b580      	push	{r7, lr}
    // - FWU option (L0, L1) is superfluous unless ULP is set
    // - In STM32L1 implementations we must kill the chrono timer before STOP.
    // - In all STM32L impls, we must clear EXTI's before stop.  In very rare cases,
    //   an EXTI might be missed, but there is nothing that can be done about this.
#   if _USE_STOP
    if (code & 2) {
 8000770:	0783      	lsls	r3, r0, #30
 8000772:	d410      	bmi.n	8000796 <sys_sig_powerdown+0x2e>
        BOARD_STOP(code);
    }   
    else 
#   endif
    {   // Normal Sleeping mode (not deep sleep)
        SCB->SCR   &= ~((ot_u32)SCB_SCR_SLEEPDEEP_Msk);
 8000774:	4a1f      	ldr	r2, [pc, #124]	; (80007f4 <sys_sig_powerdown+0x8c>)
 8000776:	6913      	ldr	r3, [r2, #16]
 8000778:	2104      	movs	r1, #4
 800077a:	438b      	bics	r3, r1
 800077c:	6113      	str	r3, [r2, #16]
#       if defined(__STM32L4xx__)
        // Nothing do to here for L4
#       else
        PWR->CR    &= ~(PWR_CR_PDDS | PWR_CR_LPSDSR | PWR_CR_FWU | PWR_CR_ULP);
 800077e:	4a1e      	ldr	r2, [pc, #120]	; (80007f8 <sys_sig_powerdown+0x90>)
 8000780:	6813      	ldr	r3, [r2, #0]
 8000782:	491e      	ldr	r1, [pc, #120]	; (80007fc <sys_sig_powerdown+0x94>)
 8000784:	400b      	ands	r3, r1
 8000786:	6013      	str	r3, [r2, #0]
#       endif
        platform_enable_interrupts();
 8000788:	f007 fbb0 	bl	8007eec <platform_enable_interrupts>
        __WFI();
 800078c:	bf30      	wfi
    }

}
 800078e:	bc0c      	pop	{r2, r3}
 8000790:	4690      	mov	r8, r2
 8000792:	4699      	mov	r9, r3
 8000794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    code &= 1;
 8000796:	2301      	movs	r3, #1
 8000798:	4018      	ands	r0, r3
    RCC->IOPENR     = rcc_flags[code];
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <sys_sig_powerdown+0x98>)
 800079c:	4699      	mov	r9, r3
 800079e:	0083      	lsls	r3, r0, #2
 80007a0:	464a      	mov	r2, r9
 80007a2:	589b      	ldr	r3, [r3, r2]
 80007a4:	4e17      	ldr	r6, [pc, #92]	; (8000804 <sys_sig_powerdown+0x9c>)
 80007a6:	62f3      	str	r3, [r6, #44]	; 0x2c
    SysTick->CTRL   = 0;
 80007a8:	2100      	movs	r1, #0
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <sys_sig_powerdown+0xa0>)
 80007ac:	6019      	str	r1, [r3, #0]
    SCB->SCR       |= SCB_SCR_SLEEPDEEP_Msk;
 80007ae:	4c11      	ldr	r4, [pc, #68]	; (80007f4 <sys_sig_powerdown+0x8c>)
 80007b0:	6923      	ldr	r3, [r4, #16]
 80007b2:	2704      	movs	r7, #4
 80007b4:	433b      	orrs	r3, r7
 80007b6:	6123      	str	r3, [r4, #16]
    scratch         = PWR->CR;
 80007b8:	4d0f      	ldr	r5, [pc, #60]	; (80007f8 <sys_sig_powerdown+0x90>)
 80007ba:	682b      	ldr	r3, [r5, #0]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4698      	mov	r8, r3
    scratch        &= ~(PWR_CR_DBP | PWR_CR_PDDS | PWR_CR_LPSDSR);
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <sys_sig_powerdown+0xa4>)
 80007c2:	4642      	mov	r2, r8
 80007c4:	401a      	ands	r2, r3
 80007c6:	0013      	movs	r3, r2
    scratch        |= stop_flags[code];
 80007c8:	0040      	lsls	r0, r0, #1
 80007ca:	4448      	add	r0, r9
 80007cc:	8902      	ldrh	r2, [r0, #8]
 80007ce:	4313      	orrs	r3, r2
    PWR->CR         = scratch;
 80007d0:	602b      	str	r3, [r5, #0]
    EXTI->PR        = 0;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <sys_sig_powerdown+0xa8>)
 80007d4:	6159      	str	r1, [r3, #20]
    platform_enable_interrupts();
 80007d6:	f007 fb89 	bl	8007eec <platform_enable_interrupts>
    __WFI();
 80007da:	bf30      	wfi
    PWR->CR        |= (PWR_CR_DBP | PWR_CR_CWUF | PWR_CR_CSBF);
 80007dc:	682a      	ldr	r2, [r5, #0]
 80007de:	2386      	movs	r3, #134	; 0x86
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4313      	orrs	r3, r2
 80007e4:	602b      	str	r3, [r5, #0]
    SCB->SCR       &= ~((ot_u32)SCB_SCR_SLEEPDEEP_Msk);
 80007e6:	6923      	ldr	r3, [r4, #16]
 80007e8:	43bb      	bics	r3, r7
 80007ea:	6123      	str	r3, [r4, #16]
    RCC->IOPENR     = _IOPENR_RUNTIME;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <sys_sig_powerdown+0xac>)
 80007ee:	62f3      	str	r3, [r6, #44]	; 0x2c
 80007f0:	e7cd      	b.n	800078e <sys_sig_powerdown+0x26>
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	e000ed00 	.word	0xe000ed00
 80007f8:	40007000 	.word	0x40007000
 80007fc:	fffff9fc 	.word	0xfffff9fc
 8000800:	08009630 	.word	0x08009630
 8000804:	40021000 	.word	0x40021000
 8000808:	e000e010 	.word	0xe000e010
 800080c:	fffffefc 	.word	0xfffffefc
 8000810:	40010400 	.word	0x40010400
 8000814:	00001107 	.word	0x00001107

08000818 <alp_proc>:




#ifdef EXTF_alp_proc
ot_bool alp_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	0005      	movs	r5, r0
 800081c:	000c      	movs	r4, r1
    };

    ot_u8 alp_handle;

    // Always flush payload length of output before any data is written
    alp->outrec.plength = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	70c3      	strb	r3, [r0, #3]

    /// <LI> IDs in range 0-to-ALP_FUNCTIONS are standardized, or psuedo-standardized </LI>
    /// <LI> IDs in range 128-to-(128+ALP_API) are mapped OTAPI functions </LI>
    /// <LI> IDs outside this range get pushed to ALP_EXT </LI>
    //alp_handle = alp->inq->getcursor[2];
    alp_handle = INREC(alp, ID);
 8000822:	2102      	movs	r1, #2
 8000824:	4249      	negs	r1, r1
 8000826:	6880      	ldr	r0, [r0, #8]
 8000828:	f006 fb85 	bl	8006f36 <q_getcursor_val>

    //ASAPI section
    if (alp_handle > 7) {
 800082c:	2807      	cmp	r0, #7
 800082e:	d900      	bls.n	8000832 <alp_proc+0x1a>
        alp_handle = 8;
 8000830:	2008      	movs	r0, #8
    }
    alp_handle = (ot_u8)proc[alp_handle](alp, user_id);
 8000832:	0080      	lsls	r0, r0, #2
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <alp_proc+0x30>)
 8000836:	58c3      	ldr	r3, [r0, r3]
 8000838:	0021      	movs	r1, r4
 800083a:	0028      	movs	r0, r5
 800083c:	4798      	blx	r3
    /// If the output bookmark is non-Null, there is output chunking.  Else,
    /// the output message is complete (ended)
    ///@todo Bookmarked has been refactored, and is not currently supported... sort it.
    //alp->OUTREC(_FLAGS)   &= ~ALP_FLAG_ME;
    //alp->OUTREC(_FLAGS)   |= (alp->BOOKMARK_OUT) ? ALP_FLAG_CF : ALP_FLAG_ME;
    alp->OUTREC(FLAGS)   |= ALP_FLAG_ME;   //Temporary fix
 800083e:	78ab      	ldrb	r3, [r5, #2]
 8000840:	2240      	movs	r2, #64	; 0x40
 8000842:	4313      	orrs	r3, r2
 8000844:	70ab      	strb	r3, [r5, #2]

    // Return True (atomic) or False (non-atomic)
    return (ot_bool)alp_handle;
}
 8000846:	bd70      	pop	{r4, r5, r6, pc}
 8000848:	0800963c 	.word	0x0800963c

0800084c <sub_release_record>:
    }
}


static void sub_release_record(ot_queue* appq) {
    appq->front    += appq->front[1] + 4;
 800084c:	68c3      	ldr	r3, [r0, #12]
 800084e:	785a      	ldrb	r2, [r3, #1]
 8000850:	3204      	adds	r2, #4
 8000852:	189b      	adds	r3, r3, r2
 8000854:	60c3      	str	r3, [r0, #12]
    appq->getcursor = appq->front;
 8000856:	6043      	str	r3, [r0, #4]
}
 8000858:	4770      	bx	lr
	...

0800085c <sub_q_purge>:
static void sub_q_purge(ot_queue* q) {
 800085c:	b510      	push	{r4, lr}
    if (q_length(q) <= 0) {
 800085e:	f006 fb6d 	bl	8006f3c <q_length>
 8000862:	2800      	cmp	r0, #0
 8000864:	dd00      	ble.n	8000868 <sub_q_purge+0xc>
}
 8000866:	bd10      	pop	{r4, pc}
        q_init(&srv.q, srv_buffer, 256);
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	4803      	ldr	r0, [pc, #12]	; (8000878 <sub_q_purge+0x1c>)
 800086c:	0052      	lsls	r2, r2, #1
 800086e:	4903      	ldr	r1, [pc, #12]	; (800087c <sub_q_purge+0x20>)
 8000870:	3008      	adds	r0, #8
 8000872:	f006 fb8e 	bl	8006f92 <q_init>
}
 8000876:	e7f6      	b.n	8000866 <sub_q_purge+0xa>
 8000878:	200001c8 	.word	0x200001c8
 800087c:	200001e4 	.word	0x200001e4

08000880 <sub_retrieve_record>:


static ot_u8* sub_retrieve_record(alp_record* apprec, ot_queue* appq) {
 8000880:	b510      	push	{r4, lr}
 8000882:	000c      	movs	r4, r1
    memcpy((ot_u8*)&apprec->flags, appq->getcursor, 4);
 8000884:	2204      	movs	r2, #4
 8000886:	6849      	ldr	r1, [r1, #4]
 8000888:	f007 fe6c 	bl	8008564 <ot_memcpy>
    appq->getcursor    += 4;
 800088c:	6863      	ldr	r3, [r4, #4]
 800088e:	3304      	adds	r3, #4
 8000890:	6063      	str	r3, [r4, #4]
    return appq->front;
 8000892:	68e0      	ldr	r0, [r4, #12]
}
 8000894:	bd10      	pop	{r4, pc}

08000896 <sub_check_more_records>:

static ot_u8 sub_check_more_records(ot_queue* appq) {
 8000896:	b510      	push	{r4, lr}
    return (q_span(appq) > 0);
 8000898:	f006 fb55 	bl	8006f46 <q_span>
 800089c:	17c3      	asrs	r3, r0, #31
 800089e:	1a18      	subs	r0, r3, r0
 80008a0:	0fc0      	lsrs	r0, r0, #31
}
 80008a2:	bd10      	pop	{r4, pc}

080008a4 <sub_test_stream>:
ot_int sub_test_stream(ot_u8* msg, ot_u8 cmd, ot_u8 ext) {
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	b082      	sub	sp, #8
    test_len    = base_std[cmd&31];
 80008a8:	231f      	movs	r3, #31
 80008aa:	400b      	ands	r3, r1
 80008ac:	4c19      	ldr	r4, [pc, #100]	; (8000914 <sub_test_stream+0x70>)
 80008ae:	5ce3      	ldrb	r3, [r4, r3]
    test_len   += ext_std[(ext>>5) & 3];
 80008b0:	0956      	lsrs	r6, r2, #5
 80008b2:	2503      	movs	r5, #3
 80008b4:	4035      	ands	r5, r6
 80008b6:	1964      	adds	r4, r4, r5
 80008b8:	2520      	movs	r5, #32
 80008ba:	5d64      	ldrb	r4, [r4, r5]
 80008bc:	191b      	adds	r3, r3, r4
    msg_curs    = msg + test_len;
 80008be:	18c3      	adds	r3, r0, r3
    if (cmd & ASAPI_CMD_DLLS) {
 80008c0:	074c      	lsls	r4, r1, #29
 80008c2:	d504      	bpl.n	80008ce <sub_test_stream+0x2a>
        test_len    = 2 + ((msg_curs[0] == 0) << 4);
 80008c4:	781c      	ldrb	r4, [r3, #0]
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d113      	bne.n	80008f2 <sub_test_stream+0x4e>
 80008ca:	3412      	adds	r4, #18
        msg_curs   += test_len;  
 80008cc:	191b      	adds	r3, r3, r4
    if (cmd & ASAPI_CMD_ANYCAST) {
 80008ce:	078c      	lsls	r4, r1, #30
 80008d0:	d41a      	bmi.n	8000908 <sub_test_stream+0x64>
    if (ext & ASAPI_EXT_UDP) {
 80008d2:	0692      	lsls	r2, r2, #26
 80008d4:	d509      	bpl.n	80008ea <sub_test_stream+0x46>
        ((ot_u8*)&test_len)[UPPER]  = msg_curs[0];
 80008d6:	7819      	ldrb	r1, [r3, #0]
 80008d8:	466a      	mov	r2, sp
 80008da:	71d1      	strb	r1, [r2, #7]
        ((ot_u8*)&test_len)[LOWER]  = msg_curs[1];
 80008dc:	7859      	ldrb	r1, [r3, #1]
 80008de:	7191      	strb	r1, [r2, #6]
        ((ot_u8*)&test_len)[UPPER]  = msg_curs[0];
 80008e0:	3206      	adds	r2, #6
        test_len                   += ASAPI_UDP_SIZE;
 80008e2:	8812      	ldrh	r2, [r2, #0]
 80008e4:	3204      	adds	r2, #4
 80008e6:	b292      	uxth	r2, r2
        msg_curs                   += test_len;
 80008e8:	189b      	adds	r3, r3, r2
    return (ot_int)(msg_curs - msg);
 80008ea:	1a18      	subs	r0, r3, r0
 80008ec:	b200      	sxth	r0, r0
}
 80008ee:	b002      	add	sp, #8
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
        test_len    = 2 + ((msg_curs[0] == 0) << 4);
 80008f2:	2402      	movs	r4, #2
 80008f4:	e7ea      	b.n	80008cc <sub_test_stream+0x28>
        test_len    = (msg_curs[0] & 0x80) ? msg_curs[1]<<1 : msg_curs[1];
 80008f6:	785c      	ldrb	r4, [r3, #1]
 80008f8:	0064      	lsls	r4, r4, #1
        test_len   += 2;
 80008fa:	3402      	adds	r4, #2
        msg_curs   += test_len;
 80008fc:	191b      	adds	r3, r3, r4
 80008fe:	240b      	movs	r4, #11
 8000900:	400c      	ands	r4, r1
            cmd = 0;
 8000902:	2100      	movs	r1, #0
        if ((cmd & (ASAPI_CMD_MULTICAST+ASAPI_CMD_INIT)) == (ASAPI_CMD_MULTICAST+ASAPI_CMD_INIT)) {
 8000904:	2c0b      	cmp	r4, #11
 8000906:	d1e4      	bne.n	80008d2 <sub_test_stream+0x2e>
        test_len    = (msg_curs[0] & 0x80) ? msg_curs[1]<<1 : msg_curs[1];
 8000908:	2400      	movs	r4, #0
 800090a:	571c      	ldrsb	r4, [r3, r4]
 800090c:	2c00      	cmp	r4, #0
 800090e:	dbf2      	blt.n	80008f6 <sub_test_stream+0x52>
 8000910:	785c      	ldrb	r4, [r3, #1]
 8000912:	e7f2      	b.n	80008fa <sub_test_stream+0x56>
 8000914:	08009660 	.word	0x08009660

08000918 <asapi_init_srv>:
void asapi_init_srv() {
 8000918:	b510      	push	{r4, lr}
    srv.alp         = NULL;
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <asapi_init_srv+0x18>)
 800091c:	2300      	movs	r3, #0
 800091e:	6003      	str	r3, [r0, #0]
    q_init(&srv.q, srv_buffer, 256);
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	3008      	adds	r0, #8
 8000924:	0052      	lsls	r2, r2, #1
 8000926:	4903      	ldr	r1, [pc, #12]	; (8000934 <asapi_init_srv+0x1c>)
 8000928:	f006 fb33 	bl	8006f92 <q_init>
}
 800092c:	bd10      	pop	{r4, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	200001c8 	.word	0x200001c8
 8000934:	200001e4 	.word	0x200001e4

08000938 <sub_stop_srv>:
static void sub_stop_srv() {
 8000938:	b510      	push	{r4, lr}
    session_app_purge(&asapi_applet);
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <sub_stop_srv+0x10>)
 800093c:	f005 f9d6 	bl	8005cec <session_app_purge>
    asapi_init_srv();
 8000940:	f7ff ffea 	bl	8000918 <asapi_init_srv>
}
 8000944:	bd10      	pop	{r4, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	08000a19 	.word	0x08000a19

0800094c <sub_start_session>:





static ot_int sub_start_session(alp_tmpl* alp) {
 800094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094e:	b087      	sub	sp, #28
    alp_record      rec;
    advert_tmpl     adv;

    /// 1. Start with a blank session creation template.  It will get updated
    ///    later, either in the advertising setup or the applet itself.
    memset((ot_u8*)&s_tmpl, 0, sizeof(session_tmpl));
 8000950:	2206      	movs	r2, #6
 8000952:	2100      	movs	r1, #0
 8000954:	a804      	add	r0, sp, #16
 8000956:	f007 fe13 	bl	8008580 <ot_memset>
    ///      advertising request that follows.
    
    /// 2. The first record must be an initialization record.  Advertising can
    ///    be used with init.type_code = 1.  With init.type_code = 0, no 
    ///    advertising is performed, simply a following request is processed.
    sub_retrieve_record(&rec, &srv.q);
 800095a:	492d      	ldr	r1, [pc, #180]	; (8000a10 <sub_start_session+0xc4>)
 800095c:	ac03      	add	r4, sp, #12
 800095e:	3108      	adds	r1, #8
 8000960:	0020      	movs	r0, r4
 8000962:	f7ff ff8d 	bl	8000880 <sub_retrieve_record>
    if ((rec.cmd & ASAPI_CMD_INIT) == 0) {
 8000966:	78e2      	ldrb	r2, [r4, #3]
 8000968:	0713      	lsls	r3, r2, #28
 800096a:	d549      	bpl.n	8000a00 <sub_start_session+0xb4>
    }
    
    /// 3. If the message contains INIT, there are no further templates in the
    ///    message (by design).  Load the INIT template and then release this
    ///    ASAPI record.
    srv.q.getcursor+= (rec.cmd & ASAPI_CMD_EXT) ? 3 : 2;    //Ext byte & transid
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <sub_start_session+0xc4>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0692      	lsls	r2, r2, #26
 8000972:	d53b      	bpl.n	80009ec <sub_start_session+0xa0>
 8000974:	2203      	movs	r2, #3
 8000976:	4c26      	ldr	r4, [pc, #152]	; (8000a10 <sub_start_session+0xc4>)
 8000978:	189b      	adds	r3, r3, r2
 800097a:	60e3      	str	r3, [r4, #12]
    type_code       = q_readbyte(&srv.q);
 800097c:	3408      	adds	r4, #8
 800097e:	0020      	movs	r0, r4
 8000980:	f006 fb43 	bl	800700a <q_readbyte>
 8000984:	0006      	movs	r6, r0
    s_tmpl.flags    = q_readbyte(&srv.q);       // link_flags byte
 8000986:	0020      	movs	r0, r4
 8000988:	f006 fb3f 	bl	800700a <q_readbyte>
 800098c:	af04      	add	r7, sp, #16
 800098e:	7138      	strb	r0, [r7, #4]
    s_tmpl.flagmask = (1<<3) | (1<<4);          // RS coding flag & VID flag    ///@todo VID usage might need extra attention
 8000990:	2318      	movs	r3, #24
 8000992:	717b      	strb	r3, [r7, #5]
    adv.duty_off    = q_readbyte(&srv.q);
 8000994:	0020      	movs	r0, r4
 8000996:	f006 fb38 	bl	800700a <q_readbyte>
 800099a:	ad01      	add	r5, sp, #4
 800099c:	7028      	strb	r0, [r5, #0]
    adv.duty_on     = q_readbyte(&srv.q);
 800099e:	0020      	movs	r0, r4
 80009a0:	f006 fb33 	bl	800700a <q_readbyte>
 80009a4:	7068      	strb	r0, [r5, #1]
    adv.subnet      = q_readbyte(&srv.q);
 80009a6:	0020      	movs	r0, r4
 80009a8:	f006 fb2f 	bl	800700a <q_readbyte>
 80009ac:	70a8      	strb	r0, [r5, #2]
    adv.channel     = q_readbyte(&srv.q);
 80009ae:	0020      	movs	r0, r4
 80009b0:	f006 fb2b 	bl	800700a <q_readbyte>
 80009b4:	70e8      	strb	r0, [r5, #3]
    s_tmpl.channel  = adv.channel;
 80009b6:	7078      	strb	r0, [r7, #1]
    adv.duration    = q_readshort(&srv.q);
 80009b8:	0020      	movs	r0, r4
 80009ba:	f006 fb2b 	bl	8007014 <q_readshort>
 80009be:	80a8      	strh	r0, [r5, #4]
    sub_release_record(&srv.q);                 // We are done with init record
 80009c0:	0020      	movs	r0, r4
 80009c2:	f7ff ff43 	bl	800084c <sub_release_record>
    ///    should be performed.
    ///    <LI> 0: no explicity connection initialization, just a "naked 
    ///             request" that is specified in the next record. </LI>
    ///    <LI> 1: Standard advertising followed by request in next record</LI>
    ///    <LI> 255: Strobing, no follow-on request required. </LI>
    if (type_code > 1) {
 80009c6:	2e01      	cmp	r6, #1
 80009c8:	d81e      	bhi.n	8000a08 <sub_start_session+0xbc>
        hb_run_strobe(adv.channel, s_tmpl.flags, adv.subnet, adv.duration, adv.duty_on);
#       endif
        //srv.inprogress = False;
        return -1;
    }
    else if (sub_check_more_records(&srv.q) == 0) {
 80009ca:	4811      	ldr	r0, [pc, #68]	; (8000a10 <sub_start_session+0xc4>)
 80009cc:	3008      	adds	r0, #8
 80009ce:	f7ff ff62 	bl	8000896 <sub_check_more_records>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d014      	beq.n	8000a00 <sub_start_session+0xb4>
        goto sub_start_session_SESSION_ERR;
    }
    else if (type_code == 0) {  
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d10a      	bne.n	80009f0 <sub_start_session+0xa4>
        // Naked Request
        ///@todo this doesn't seem to work
        active = m2task_immediate(&s_tmpl, &asapi_applet);
 80009da:	490e      	ldr	r1, [pc, #56]	; (8000a14 <sub_start_session+0xc8>)
 80009dc:	a804      	add	r0, sp, #16
 80009de:	f004 fd9b 	bl	8005518 <m2task_immediate>
        active = m2task_advertise(&adv, &s_tmpl, &asapi_applet);
    }
    
    /// 5. Report error if the session stack was too full to initialize the new
    ///    session.
    if (active == NULL) {
 80009e2:	2800      	cmp	r0, #0
 80009e4:	d00a      	beq.n	80009fc <sub_start_session+0xb0>
    }
    
    ///@note removing this flag, replaced with session_app_isloaded() calls, which
    ///      are direct checks to the underlying session stack, adding reliability.
    //srv.inprogress  = True;
    return 0;
 80009e6:	2000      	movs	r0, #0
    
    sub_start_session_SESSION_ERR:
    sub_stop_srv();
    return ASAPI_ERR_NOSESSION;
}
 80009e8:	b007      	add	sp, #28
 80009ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    srv.q.getcursor+= (rec.cmd & ASAPI_CMD_EXT) ? 3 : 2;    //Ext byte & transid
 80009ec:	2202      	movs	r2, #2
 80009ee:	e7c2      	b.n	8000976 <sub_start_session+0x2a>
        active = m2task_advertise(&adv, &s_tmpl, &asapi_applet);
 80009f0:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <sub_start_session+0xc8>)
 80009f2:	a904      	add	r1, sp, #16
 80009f4:	a801      	add	r0, sp, #4
 80009f6:	f004 fd95 	bl	8005524 <m2task_advertise>
 80009fa:	e7f2      	b.n	80009e2 <sub_start_session+0x96>
        return ASAPI_ERR_STACKFULL;
 80009fc:	3009      	adds	r0, #9
 80009fe:	e7f3      	b.n	80009e8 <sub_start_session+0x9c>
    sub_stop_srv();
 8000a00:	f7ff ff9a 	bl	8000938 <sub_stop_srv>
    return ASAPI_ERR_NOSESSION;
 8000a04:	200b      	movs	r0, #11
 8000a06:	e7ef      	b.n	80009e8 <sub_start_session+0x9c>
        return -1;
 8000a08:	2001      	movs	r0, #1
 8000a0a:	4240      	negs	r0, r0
 8000a0c:	e7ec      	b.n	80009e8 <sub_start_session+0x9c>
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	200001c8 	.word	0x200001c8
 8000a14:	08000a19 	.word	0x08000a19

08000a18 <asapi_applet>:

///@todo make sure that hold periods start getting clocked immedately after
/// valid REQUEST is processed.  This way, the delay period shall be front- 
/// chained from the point following the request transmission.

void asapi_applet(m2session* active) {
 8000a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1a:	46de      	mov	lr, fp
 8000a1c:	4657      	mov	r7, sl
 8000a1e:	4646      	mov	r6, r8
 8000a20:	b5c0      	push	{r6, r7, lr}
 8000a22:	b090      	sub	sp, #64	; 0x40
 8000a24:	0004      	movs	r4, r0
    ot_u8           scratch;

    /// 1. Preliminary operations
    ///@note check to session_app_isloaded() is redundant, because asapi_applet()
    ///      is only called from the session stack.
    if ((srv.alp == NULL) /*|| (session_app_isloaded(&asapi_applet) == False) */ ) {
 8000a26:	4bd3      	ldr	r3, [pc, #844]	; (8000d74 <asapi_applet+0x35c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d007      	beq.n	8000a3e <asapi_applet+0x26>

    /// 2. Move to the next record that matches this ID.  If it returns False,
    ///    there are no more records of this type, so ASAPI is no longer in
    ///    in progress.
    ///    Else, store the command and move past the header
    if (sub_check_more_records(&srv.q) == 0) {
 8000a2e:	48d1      	ldr	r0, [pc, #836]	; (8000d74 <asapi_applet+0x35c>)
 8000a30:	3008      	adds	r0, #8
 8000a32:	f7ff ff30 	bl	8000896 <sub_check_more_records>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	d109      	bne.n	8000a4e <asapi_applet+0x36>
        sub_stop_srv();
 8000a3a:	f7ff ff7d 	bl	8000938 <sub_stop_srv>
    return;

    /// 9. the server is closed, yet this applet was invoked.  Scrap it,
    ///    which will cause no communication to occur.
    asapi_applet_CLOSED:
    active->netstate = M2_NETSTATE_SCRAP;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	71e3      	strb	r3, [r4, #7]
}
 8000a42:	b010      	add	sp, #64	; 0x40
 8000a44:	bc1c      	pop	{r2, r3, r4}
 8000a46:	4690      	mov	r8, r2
 8000a48:	469a      	mov	sl, r3
 8000a4a:	46a3      	mov	fp, r4
 8000a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sub_retrieve_record(&rec, &srv.q);
 8000a4e:	49c9      	ldr	r1, [pc, #804]	; (8000d74 <asapi_applet+0x35c>)
 8000a50:	3108      	adds	r1, #8
 8000a52:	a80a      	add	r0, sp, #40	; 0x28
 8000a54:	f7ff ff14 	bl	8000880 <sub_retrieve_record>
    if (active->netstate & M2_NETSTATE_SCRAP) {
 8000a58:	79e3      	ldrb	r3, [r4, #7]
 8000a5a:	075b      	lsls	r3, r3, #29
 8000a5c:	d500      	bpl.n	8000a60 <asapi_applet+0x48>
 8000a5e:	e0d6      	b.n	8000c0e <asapi_applet+0x1f6>
    srv.q.getcursor    += ASAPI_TRANSID_SIZE;
 8000a60:	4ac4      	ldr	r2, [pc, #784]	; (8000d74 <asapi_applet+0x35c>)
 8000a62:	68d3      	ldr	r3, [r2, #12]
 8000a64:	3302      	adds	r3, #2
 8000a66:	60d3      	str	r3, [r2, #12]
    ext                 = (rec.cmd & ASAPI_CMD_EXT) ? q_readbyte(&srv.q) : 0;
 8000a68:	ab0a      	add	r3, sp, #40	; 0x28
 8000a6a:	78db      	ldrb	r3, [r3, #3]
 8000a6c:	069b      	lsls	r3, r3, #26
 8000a6e:	d412      	bmi.n	8000a96 <asapi_applet+0x7e>
 8000a70:	2300      	movs	r3, #0
 8000a72:	4698      	mov	r8, r3
    if (rec.cmd & ASAPI_CMD_INIT) {
 8000a74:	ab0a      	add	r3, sp, #40	; 0x28
 8000a76:	78db      	ldrb	r3, [r3, #3]
 8000a78:	071b      	lsls	r3, r3, #28
 8000a7a:	d538      	bpl.n	8000aee <asapi_applet+0xd6>
        if (q_readbyte(&srv.q) != 1) { 
 8000a7c:	48bd      	ldr	r0, [pc, #756]	; (8000d74 <asapi_applet+0x35c>)
 8000a7e:	3008      	adds	r0, #8
 8000a80:	f006 fac3 	bl	800700a <q_readbyte>
 8000a84:	2801      	cmp	r0, #1
 8000a86:	d00c      	beq.n	8000aa2 <asapi_applet+0x8a>
            active->netstate = M2_NETSTATE_SCRAP;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	71e3      	strb	r3, [r4, #7]
        sub_release_record(&srv.q);
 8000a8c:	48b9      	ldr	r0, [pc, #740]	; (8000d74 <asapi_applet+0x35c>)
 8000a8e:	3008      	adds	r0, #8
 8000a90:	f7ff fedc 	bl	800084c <sub_release_record>
        return;
 8000a94:	e7d5      	b.n	8000a42 <asapi_applet+0x2a>
    ext                 = (rec.cmd & ASAPI_CMD_EXT) ? q_readbyte(&srv.q) : 0;
 8000a96:	0010      	movs	r0, r2
 8000a98:	3008      	adds	r0, #8
 8000a9a:	f006 fab6 	bl	800700a <q_readbyte>
 8000a9e:	4680      	mov	r8, r0
 8000aa0:	e7e8      	b.n	8000a74 <asapi_applet+0x5c>
            active->netstate    = (M2_NETFLAG_BG | M2_NETFLAG_STREAM | M2_NETSTATE_REQTX | M2_NETSTATE_INIT);
 8000aa2:	23c8      	movs	r3, #200	; 0xc8
 8000aa4:	71e3      	strb	r3, [r4, #7]
            active->flags      |= (3<<3) & q_readbyte(&srv.q);      // lc flags
 8000aa6:	4eb3      	ldr	r6, [pc, #716]	; (8000d74 <asapi_applet+0x35c>)
 8000aa8:	0035      	movs	r5, r6
 8000aaa:	3508      	adds	r5, #8
 8000aac:	0028      	movs	r0, r5
 8000aae:	f006 faac 	bl	800700a <q_readbyte>
 8000ab2:	2318      	movs	r3, #24
 8000ab4:	4003      	ands	r3, r0
 8000ab6:	7ae0      	ldrb	r0, [r4, #11]
 8000ab8:	4318      	orrs	r0, r3
 8000aba:	72e0      	strb	r0, [r4, #11]
            srv.q.getcursor    += 2;                                // go past duty-cycle flags (not supported)
 8000abc:	68f3      	ldr	r3, [r6, #12]
 8000abe:	3302      	adds	r3, #2
 8000ac0:	60f3      	str	r3, [r6, #12]
            active->subnet      = q_readbyte(&srv.q);
 8000ac2:	0028      	movs	r0, r5
 8000ac4:	f006 faa1 	bl	800700a <q_readbyte>
 8000ac8:	72a0      	strb	r0, [r4, #10]
            active->channel     = q_readbyte(&srv.q);
 8000aca:	0028      	movs	r0, r5
 8000acc:	f006 fa9d 	bl	800700a <q_readbyte>
 8000ad0:	71a0      	strb	r0, [r4, #6]
            adv_duration        = q_readshort(&srv.q);
 8000ad2:	0028      	movs	r0, r5
 8000ad4:	f006 fa9e 	bl	8007014 <q_readshort>
 8000ad8:	0005      	movs	r5, r0
            dll_set_defaults(active);
 8000ada:	0020      	movs	r0, r4
 8000adc:	f004 fb3a 	bl	8005154 <dll_set_defaults>
            active = session_extend(&asapi_applet, adv_duration, active->channel, M2_NETSTATE_REQTX);
 8000ae0:	79a2      	ldrb	r2, [r4, #6]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	0029      	movs	r1, r5
 8000ae6:	48a4      	ldr	r0, [pc, #656]	; (8000d78 <asapi_applet+0x360>)
 8000ae8:	f005 f8d4 	bl	8005c94 <session_extend>
 8000aec:	e7ce      	b.n	8000a8c <asapi_applet+0x74>
    active->subnet  = q_readbyte(&srv.q);
 8000aee:	4ea1      	ldr	r6, [pc, #644]	; (8000d74 <asapi_applet+0x35c>)
 8000af0:	0035      	movs	r5, r6
 8000af2:	3508      	adds	r5, #8
 8000af4:	0028      	movs	r0, r5
 8000af6:	f006 fa88 	bl	800700a <q_readbyte>
 8000afa:	72a0      	strb	r0, [r4, #10]
    active->channel = q_readbyte(&srv.q);   // req channel
 8000afc:	0028      	movs	r0, r5
 8000afe:	f006 fa84 	bl	800700a <q_readbyte>
 8000b02:	71a0      	strb	r0, [r4, #6]
    dialog.chanlist = srv.q.getcursor;
 8000b04:	68f3      	ldr	r3, [r6, #12]
 8000b06:	ae0e      	add	r6, sp, #56	; 0x38
 8000b08:	930f      	str	r3, [sp, #60]	; 0x3c
    scratch         = q_readbyte(&srv.q);   // resp channel
 8000b0a:	0028      	movs	r0, r5
 8000b0c:	f006 fa7d 	bl	800700a <q_readbyte>
    dialog.channels = (scratch != active->channel);
 8000b10:	79a3      	ldrb	r3, [r4, #6]
 8000b12:	1a18      	subs	r0, r3, r0
 8000b14:	1e43      	subs	r3, r0, #1
 8000b16:	4198      	sbcs	r0, r3
 8000b18:	7070      	strb	r0, [r6, #1]
    dialog.timeout  = q_readbyte(&srv.q);   // timeout code
 8000b1a:	0028      	movs	r0, r5
 8000b1c:	f006 fa75 	bl	800700a <q_readbyte>
 8000b20:	7030      	strb	r0, [r6, #0]
    next_wait       = q_readshort(&srv.q);
 8000b22:	0028      	movs	r0, r5
 8000b24:	f006 fa76 	bl	8007014 <q_readshort>
 8000b28:	0002      	movs	r2, r0
 8000b2a:	9001      	str	r0, [sp, #4]
    active->flags  |= (next_wait == 0) << 7;          // M2_FLAG_LISTEN
 8000b2c:	230b      	movs	r3, #11
 8000b2e:	56e3      	ldrsb	r3, [r4, r3]
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d000      	beq.n	8000b36 <asapi_applet+0x11e>
 8000b34:	e07e      	b.n	8000c34 <asapi_applet+0x21c>
 8000b36:	3a80      	subs	r2, #128	; 0x80
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	72e3      	strb	r3, [r4, #11]
    if (rec.cmd & ASAPI_CMD_DLLS) {
 8000b3e:	aa0a      	add	r2, sp, #40	; 0x28
 8000b40:	78d2      	ldrb	r2, [r2, #3]
 8000b42:	0752      	lsls	r2, r2, #29
 8000b44:	d478      	bmi.n	8000c38 <asapi_applet+0x220>
        addressing   = (rec.cmd & ASAPI_CMD_ADDRMASK);
 8000b46:	ab0a      	add	r3, sp, #40	; 0x28
 8000b48:	78db      	ldrb	r3, [r3, #3]
        if (addressing == ASAPI_CMD_UNICAST) {
 8000b4a:	079b      	lsls	r3, r3, #30
 8000b4c:	d100      	bne.n	8000b50 <asapi_applet+0x138>
 8000b4e:	e084      	b.n	8000c5a <asapi_applet+0x242>
            addressing          = ADDR_broadcast;
 8000b50:	2001      	movs	r0, #1
        routing.hop_code    = 0;    //override hop code value
 8000b52:	2300      	movs	r3, #0
 8000b54:	aa02      	add	r2, sp, #8
 8000b56:	7013      	strb	r3, [r2, #0]
        otapi_open_request((ADDR_Type)addressing, &routing);
 8000b58:	0011      	movs	r1, r2
 8000b5a:	f003 fd47 	bl	80045ec <otapi_open_request>
    if (rec.cmd & ASAPI_CMD_FILECOMP) {
 8000b5e:	ab0a      	add	r3, sp, #40	; 0x28
 8000b60:	78db      	ldrb	r3, [r3, #3]
 8000b62:	079b      	lsls	r3, r3, #30
 8000b64:	d500      	bpl.n	8000b68 <asapi_applet+0x150>
 8000b66:	e094      	b.n	8000c92 <asapi_applet+0x27a>
    scratch = 0;
 8000b68:	2600      	movs	r6, #0
 8000b6a:	2540      	movs	r5, #64	; 0x40
 8000b6c:	4643      	mov	r3, r8
 8000b6e:	401d      	ands	r5, r3
    if (ext & ASAPI_EXT_FILECALL) {
 8000b70:	d000      	beq.n	8000b74 <asapi_applet+0x15c>
 8000b72:	e09b      	b.n	8000cac <asapi_applet+0x294>
    else if (ext & ASAPI_EXT_UDP) {
 8000b74:	069b      	lsls	r3, r3, #26
 8000b76:	d501      	bpl.n	8000b7c <asapi_applet+0x164>
        scratch |= (1<<4);
 8000b78:	2310      	movs	r3, #16
 8000b7a:	431e      	orrs	r6, r3
        cmd.type        = m2tt_lut[(rec.cmd & ASAPI_CMD_ADDRMASK)];
 8000b7c:	af0a      	add	r7, sp, #40	; 0x28
 8000b7e:	78fb      	ldrb	r3, [r7, #3]
 8000b80:	2203      	movs	r2, #3
 8000b82:	4692      	mov	sl, r2
 8000b84:	4013      	ands	r3, r2
 8000b86:	4a7d      	ldr	r2, [pc, #500]	; (8000d7c <asapi_applet+0x364>)
 8000b88:	18d3      	adds	r3, r2, r3
 8000b8a:	2124      	movs	r1, #36	; 0x24
 8000b8c:	5c5b      	ldrb	r3, [r3, r1]
 8000b8e:	a902      	add	r1, sp, #8
 8000b90:	700b      	strb	r3, [r1, #0]
        cmd.opcode      = opcode_lut[scratch];
 8000b92:	1996      	adds	r6, r2, r6
 8000b94:	2328      	movs	r3, #40	; 0x28
 8000b96:	5cf3      	ldrb	r3, [r6, r3]
 8000b98:	704b      	strb	r3, [r1, #1]
        cmd.extension   = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	708b      	strb	r3, [r1, #2]
        otapi_put_command_tmpl(&local_status, &cmd);
 8000b9e:	331e      	adds	r3, #30
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	4463      	add	r3, ip
 8000ba4:	469b      	mov	fp, r3
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f003 fd54 	bl	8004654 <otapi_put_command_tmpl>
        otapi_put_dialog_tmpl(&status, &dialog);
 8000bac:	261f      	movs	r6, #31
 8000bae:	ab02      	add	r3, sp, #8
 8000bb0:	469c      	mov	ip, r3
 8000bb2:	4466      	add	r6, ip
 8000bb4:	a90e      	add	r1, sp, #56	; 0x38
 8000bb6:	0030      	movs	r0, r6
 8000bb8:	f003 fd8c 	bl	80046d4 <otapi_put_dialog_tmpl>
        status &= local_status;
 8000bbc:	7832      	ldrb	r2, [r6, #0]
 8000bbe:	465b      	mov	r3, fp
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	7033      	strb	r3, [r6, #0]
    if ((rec.cmd & ASAPI_CMD_ADDRMASK) == ASAPI_CMD_MULTICAST) {
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	4652      	mov	r2, sl
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	d07a      	beq.n	8000cc6 <asapi_applet+0x2ae>
    if (rec.cmd & ASAPI_CMD_LQUERY) {
 8000bd0:	ab0a      	add	r3, sp, #40	; 0x28
 8000bd2:	78db      	ldrb	r3, [r3, #3]
 8000bd4:	079b      	lsls	r3, r3, #30
 8000bd6:	d500      	bpl.n	8000bda <asapi_applet+0x1c2>
 8000bd8:	e08b      	b.n	8000cf2 <asapi_applet+0x2da>
    if (rec.cmd & ASAPI_CMD_FILECOMP) {
 8000bda:	ab0a      	add	r3, sp, #40	; 0x28
 8000bdc:	78db      	ldrb	r3, [r3, #3]
 8000bde:	079b      	lsls	r3, r3, #30
 8000be0:	d500      	bpl.n	8000be4 <asapi_applet+0x1cc>
 8000be2:	e09c      	b.n	8000d1e <asapi_applet+0x306>
    if (ext & ASAPI_EXT_FILECALL) {
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d000      	beq.n	8000bea <asapi_applet+0x1d2>
 8000be8:	e0aa      	b.n	8000d40 <asapi_applet+0x328>
    else if (ext & ASAPI_EXT_UDP) {
 8000bea:	4643      	mov	r3, r8
 8000bec:	069b      	lsls	r3, r3, #26
 8000bee:	d500      	bpl.n	8000bf2 <asapi_applet+0x1da>
 8000bf0:	e0ae      	b.n	8000d50 <asapi_applet+0x338>
    status &= local_status;
 8000bf2:	221f      	movs	r2, #31
 8000bf4:	ab02      	add	r3, sp, #8
 8000bf6:	469c      	mov	ip, r3
 8000bf8:	4462      	add	r2, ip
 8000bfa:	7811      	ldrb	r1, [r2, #0]
 8000bfc:	231e      	movs	r3, #30
 8000bfe:	4463      	add	r3, ip
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	400b      	ands	r3, r1
 8000c04:	7013      	strb	r3, [r2, #0]
    if (status == 0) {
 8000c06:	d000      	beq.n	8000c0a <asapi_applet+0x1f2>
 8000c08:	e0ae      	b.n	8000d68 <asapi_applet+0x350>
        active->netstate = M2_NETSTATE_SCRAP;
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	71e3      	strb	r3, [r4, #7]
    sub_release_record(&srv.q);
 8000c0e:	4859      	ldr	r0, [pc, #356]	; (8000d74 <asapi_applet+0x35c>)
 8000c10:	3008      	adds	r0, #8
 8000c12:	f7ff fe1b 	bl	800084c <sub_release_record>
    if (active->netstate & M2_NETSTATE_SCRAP) {
 8000c16:	79e3      	ldrb	r3, [r4, #7]
 8000c18:	075b      	lsls	r3, r3, #29
 8000c1a:	d500      	bpl.n	8000c1e <asapi_applet+0x206>
 8000c1c:	e0a7      	b.n	8000d6e <asapi_applet+0x356>
    else if (rec.cmd & ASAPI_CMD_HOLDOPEN) {
 8000c1e:	ab0a      	add	r3, sp, #40	; 0x28
 8000c20:	78db      	ldrb	r3, [r3, #3]
 8000c22:	065b      	lsls	r3, r3, #25
 8000c24:	d400      	bmi.n	8000c28 <asapi_applet+0x210>
 8000c26:	e70c      	b.n	8000a42 <asapi_applet+0x2a>
        session_continue(active->applet, M2_NETSTATE_REQTX, next_wait);
 8000c28:	6820      	ldr	r0, [r4, #0]
 8000c2a:	9a01      	ldr	r2, [sp, #4]
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f005 f8ad 	bl	8005d8c <session_continue>
 8000c32:	e706      	b.n	8000a42 <asapi_applet+0x2a>
    active->flags  |= (next_wait == 0) << 7;          // M2_FLAG_LISTEN
 8000c34:	2200      	movs	r2, #0
 8000c36:	e77f      	b.n	8000b38 <asapi_applet+0x120>
        active->flags  |= M2_FLAG_DLLS;
 8000c38:	2240      	movs	r2, #64	; 0x40
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	72e3      	strb	r3, [r4, #11]
        active->extra   = q_readbyte(&srv.q);           // Key-Index to use for encryption
 8000c3e:	4e4d      	ldr	r6, [pc, #308]	; (8000d74 <asapi_applet+0x35c>)
 8000c40:	3608      	adds	r6, #8
 8000c42:	0030      	movs	r0, r6
 8000c44:	f006 f9e1 	bl	800700a <q_readbyte>
 8000c48:	7220      	strb	r0, [r4, #8]
        active->extra  |= (q_readbyte(&srv.q) << 7);    // User=1, Root=0
 8000c4a:	0030      	movs	r0, r6
 8000c4c:	f006 f9dd 	bl	800700a <q_readbyte>
 8000c50:	01c3      	lsls	r3, r0, #7
 8000c52:	7a20      	ldrb	r0, [r4, #8]
 8000c54:	4318      	orrs	r0, r3
 8000c56:	7220      	strb	r0, [r4, #8]
 8000c58:	e775      	b.n	8000b46 <asapi_applet+0x12e>
            routing.hop_code    = q_readbyte(&srv.q);
 8000c5a:	4e46      	ldr	r6, [pc, #280]	; (8000d74 <asapi_applet+0x35c>)
 8000c5c:	3608      	adds	r6, #8
 8000c5e:	0030      	movs	r0, r6
 8000c60:	f006 f9d3 	bl	800700a <q_readbyte>
 8000c64:	ab02      	add	r3, sp, #8
 8000c66:	7018      	strb	r0, [r3, #0]
            routing.hop_ext     = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	aa02      	add	r2, sp, #8
 8000c6c:	7053      	strb	r3, [r2, #1]
            routing.dlog.length = q_readbyte(&srv.q);
 8000c6e:	0030      	movs	r0, r6
 8000c70:	f006 f9cb 	bl	800700a <q_readbyte>
 8000c74:	ab02      	add	r3, sp, #8
 8000c76:	7118      	strb	r0, [r3, #4]
            routing.dlog.value  = q_markbyte(&srv.q, routing.dlog.length);
 8000c78:	b201      	sxth	r1, r0
 8000c7a:	0030      	movs	r0, r6
 8000c7c:	f006 f991 	bl	8006fa2 <q_markbyte>
 8000c80:	9004      	str	r0, [sp, #16]
            addressing         |= (routing.dlog.length == 2);   // Unicast with VID Target (3)
 8000c82:	ab02      	add	r3, sp, #8
 8000c84:	7918      	ldrb	r0, [r3, #4]
 8000c86:	3802      	subs	r0, #2
 8000c88:	4243      	negs	r3, r0
 8000c8a:	4158      	adcs	r0, r3
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	4318      	orrs	r0, r3
 8000c90:	e75f      	b.n	8000b52 <asapi_applet+0x13a>
        alp_breakdown_isfcomp_tmpl(&srv.q, (void*)&comp);
 8000c92:	ae0d      	add	r6, sp, #52	; 0x34
 8000c94:	4837      	ldr	r0, [pc, #220]	; (8000d74 <asapi_applet+0x35c>)
 8000c96:	0031      	movs	r1, r6
 8000c98:	3008      	adds	r0, #8
 8000c9a:	f006 f8b5 	bl	8006e08 <alp_breakdown_isfcomp_tmpl>
        scratch  = (2 | (comp.is_series & 1) << 2);
 8000c9e:	7833      	ldrb	r3, [r6, #0]
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	2604      	movs	r6, #4
 8000ca4:	401e      	ands	r6, r3
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	431e      	orrs	r6, r3
 8000caa:	e75e      	b.n	8000b6a <asapi_applet+0x152>
        alp_breakdown_isfcall_tmpl(&srv.q, (void*)&call);
 8000cac:	af0b      	add	r7, sp, #44	; 0x2c
 8000cae:	4831      	ldr	r0, [pc, #196]	; (8000d74 <asapi_applet+0x35c>)
 8000cb0:	0039      	movs	r1, r7
 8000cb2:	3008      	adds	r0, #8
 8000cb4:	f006 f8b7 	bl	8006e26 <alp_breakdown_isfcall_tmpl>
        scratch |= (2 | (call.is_series & 1));
 8000cb8:	783a      	ldrb	r2, [r7, #0]
 8000cba:	2301      	movs	r3, #1
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	431e      	orrs	r6, r3
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	431e      	orrs	r6, r3
 8000cc4:	e75a      	b.n	8000b7c <asapi_applet+0x164>
        alp_breakdown_query_tmpl(&srv.q, (void*)&query);
 8000cc6:	482b      	ldr	r0, [pc, #172]	; (8000d74 <asapi_applet+0x35c>)
 8000cc8:	a902      	add	r1, sp, #8
 8000cca:	3008      	adds	r0, #8
 8000ccc:	f006 f86c 	bl	8006da8 <alp_breakdown_query_tmpl>
        otapi_put_query_tmpl(&local_status, &query);
 8000cd0:	261e      	movs	r6, #30
 8000cd2:	ab02      	add	r3, sp, #8
 8000cd4:	469c      	mov	ip, r3
 8000cd6:	4466      	add	r6, ip
 8000cd8:	0019      	movs	r1, r3
 8000cda:	0030      	movs	r0, r6
 8000cdc:	f003 fd3a 	bl	8004754 <otapi_put_query_tmpl>
        status &= local_status;
 8000ce0:	221f      	movs	r2, #31
 8000ce2:	ab02      	add	r3, sp, #8
 8000ce4:	469c      	mov	ip, r3
 8000ce6:	4462      	add	r2, ip
 8000ce8:	7811      	ldrb	r1, [r2, #0]
 8000cea:	7833      	ldrb	r3, [r6, #0]
 8000cec:	400b      	ands	r3, r1
 8000cee:	7013      	strb	r3, [r2, #0]
 8000cf0:	e76e      	b.n	8000bd0 <asapi_applet+0x1b8>
        alp_breakdown_query_tmpl(&srv.q, (void*)&query);
 8000cf2:	4820      	ldr	r0, [pc, #128]	; (8000d74 <asapi_applet+0x35c>)
 8000cf4:	a902      	add	r1, sp, #8
 8000cf6:	3008      	adds	r0, #8
 8000cf8:	f006 f856 	bl	8006da8 <alp_breakdown_query_tmpl>
        otapi_put_query_tmpl(&local_status, &query);
 8000cfc:	261e      	movs	r6, #30
 8000cfe:	ab02      	add	r3, sp, #8
 8000d00:	469c      	mov	ip, r3
 8000d02:	4466      	add	r6, ip
 8000d04:	0019      	movs	r1, r3
 8000d06:	0030      	movs	r0, r6
 8000d08:	f003 fd24 	bl	8004754 <otapi_put_query_tmpl>
        status &= local_status;
 8000d0c:	221f      	movs	r2, #31
 8000d0e:	ab02      	add	r3, sp, #8
 8000d10:	469c      	mov	ip, r3
 8000d12:	4462      	add	r2, ip
 8000d14:	7811      	ldrb	r1, [r2, #0]
 8000d16:	7833      	ldrb	r3, [r6, #0]
 8000d18:	400b      	ands	r3, r1
 8000d1a:	7013      	strb	r3, [r2, #0]
 8000d1c:	e75d      	b.n	8000bda <asapi_applet+0x1c2>
        otapi_put_isf_comp(&local_status, &comp);
 8000d1e:	261e      	movs	r6, #30
 8000d20:	ab02      	add	r3, sp, #8
 8000d22:	469c      	mov	ip, r3
 8000d24:	4466      	add	r6, ip
 8000d26:	a90d      	add	r1, sp, #52	; 0x34
 8000d28:	0030      	movs	r0, r6
 8000d2a:	f003 fd53 	bl	80047d4 <otapi_put_isf_comp>
        status &= local_status;
 8000d2e:	221f      	movs	r2, #31
 8000d30:	ab02      	add	r3, sp, #8
 8000d32:	469c      	mov	ip, r3
 8000d34:	4462      	add	r2, ip
 8000d36:	7811      	ldrb	r1, [r2, #0]
 8000d38:	7833      	ldrb	r3, [r6, #0]
 8000d3a:	400b      	ands	r3, r1
 8000d3c:	7013      	strb	r3, [r2, #0]
 8000d3e:	e751      	b.n	8000be4 <asapi_applet+0x1cc>
        otapi_put_isf_call(&local_status, &call);
 8000d40:	a90b      	add	r1, sp, #44	; 0x2c
 8000d42:	201e      	movs	r0, #30
 8000d44:	ab02      	add	r3, sp, #8
 8000d46:	469c      	mov	ip, r3
 8000d48:	4460      	add	r0, ip
 8000d4a:	f003 fd59 	bl	8004800 <otapi_put_isf_call>
 8000d4e:	e750      	b.n	8000bf2 <asapi_applet+0x1da>
        alp_breakdown_udp_tmpl(&srv.q, (void*)&udp);
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <asapi_applet+0x35c>)
 8000d52:	a902      	add	r1, sp, #8
 8000d54:	3008      	adds	r0, #8
 8000d56:	f006 f842 	bl	8006dde <alp_breakdown_udp_tmpl>
        otapi_put_udp_tmpl(&local_status, &udp);
 8000d5a:	a902      	add	r1, sp, #8
 8000d5c:	201e      	movs	r0, #30
 8000d5e:	468c      	mov	ip, r1
 8000d60:	4460      	add	r0, ip
 8000d62:	f003 fd67 	bl	8004834 <otapi_put_udp_tmpl>
 8000d66:	e744      	b.n	8000bf2 <asapi_applet+0x1da>
        otapi_close_request();
 8000d68:	f003 fc60 	bl	800462c <otapi_close_request>
 8000d6c:	e74f      	b.n	8000c0e <asapi_applet+0x1f6>
        sub_stop_srv();
 8000d6e:	f7ff fde3 	bl	8000938 <sub_stop_srv>
 8000d72:	e666      	b.n	8000a42 <asapi_applet+0x2a>
 8000d74:	200001c8 	.word	0x200001c8
 8000d78:	08000a19 	.word	0x08000a19
 8000d7c:	08009660 	.word	0x08009660

08000d80 <asapi_open_srv>:
    if (srv.alp == NULL) {
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <asapi_open_srv+0x10>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d000      	beq.n	8000d8a <asapi_open_srv+0xa>
}
 8000d88:	4770      	bx	lr
        srv.alp         = alp;
 8000d8a:	4b01      	ldr	r3, [pc, #4]	; (8000d90 <asapi_open_srv+0x10>)
 8000d8c:	6018      	str	r0, [r3, #0]
}
 8000d8e:	e7fb      	b.n	8000d88 <asapi_open_srv+0x8>
 8000d90:	200001c8 	.word	0x200001c8

08000d94 <asapi_proc>:
ot_bool asapi_proc(alp_tmpl* alp, const id_tmpl* user_id) {
 8000d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d96:	46ce      	mov	lr, r9
 8000d98:	b500      	push	{lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	0004      	movs	r4, r0
    if (srv.alp != alp) {
 8000d9e:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <asapi_proc+0x128>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4283      	cmp	r3, r0
 8000da4:	d00b      	beq.n	8000dbe <asapi_proc+0x2a>
        if (srv.alp == NULL) {
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d007      	beq.n	8000dba <asapi_proc+0x26>
            errcode = ASAPI_ERR_SERVERBUSY;
 8000daa:	2501      	movs	r5, #1
    if (inrec_cmd & ASAPI_CMD_RESPONSE) {
 8000dac:	063b      	lsls	r3, r7, #24
 8000dae:	d468      	bmi.n	8000e82 <asapi_proc+0xee>
}
 8000db0:	2001      	movs	r0, #1
 8000db2:	b002      	add	sp, #8
 8000db4:	bc04      	pop	{r2}
 8000db6:	4691      	mov	r9, r2
 8000db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            asapi_open_srv(alp);
 8000dba:	f7ff ffe1 	bl	8000d80 <asapi_open_srv>
    inrec_plen  = INREC(alp, PLEN);
 8000dbe:	2103      	movs	r1, #3
 8000dc0:	4249      	negs	r1, r1
 8000dc2:	68a0      	ldr	r0, [r4, #8]
 8000dc4:	f006 f8b7 	bl	8006f36 <q_getcursor_val>
 8000dc8:	0005      	movs	r5, r0
    inrec_cmd   = INREC(alp, CMD);
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4249      	negs	r1, r1
 8000dce:	68a0      	ldr	r0, [r4, #8]
 8000dd0:	f006 f8b1 	bl	8006f36 <q_getcursor_val>
 8000dd4:	0006      	movs	r6, r0
 8000dd6:	0007      	movs	r7, r0
    if (inrec_cmd & ASAPI_CMD_STATUS) {
 8000dd8:	06c3      	lsls	r3, r0, #27
 8000dda:	d509      	bpl.n	8000df0 <asapi_proc+0x5c>
        if (inrec_cmd & ASAPI_CMD_INIT) {  // KILL
 8000ddc:	0703      	lsls	r3, r0, #28
 8000dde:	d401      	bmi.n	8000de4 <asapi_proc+0x50>
        errcode = ASAPI_ERR_FLUSH;
 8000de0:	25ff      	movs	r5, #255	; 0xff
 8000de2:	e7e3      	b.n	8000dac <asapi_proc+0x18>
            dll_refresh();
 8000de4:	f004 fab8 	bl	8005358 <dll_refresh>
            sub_stop_srv();
 8000de8:	f7ff fda6 	bl	8000938 <sub_stop_srv>
        errcode = ASAPI_ERR_FLUSH;
 8000dec:	25ff      	movs	r5, #255	; 0xff
 8000dee:	e7dd      	b.n	8000dac <asapi_proc+0x18>
    payload             = &alp->inq->getcursor[0];
 8000df0:	68a3      	ldr	r3, [r4, #8]
 8000df2:	6858      	ldr	r0, [r3, #4]
    tid.ubyte[UPPER]    = payload[0];
 8000df4:	7801      	ldrb	r1, [r0, #0]
    tid.ubyte[LOWER]    = payload[1];
 8000df6:	7843      	ldrb	r3, [r0, #1]
 8000df8:	0209      	lsls	r1, r1, #8
 8000dfa:	430b      	orrs	r3, r1
 8000dfc:	466a      	mov	r2, sp
 8000dfe:	8093      	strh	r3, [r2, #4]
    ext_value           = (inrec_cmd & ASAPI_CMD_EXT) ? payload[2] : 0;
 8000e00:	06b3      	lsls	r3, r6, #26
 8000e02:	d514      	bpl.n	8000e2e <asapi_proc+0x9a>
 8000e04:	7882      	ldrb	r2, [r0, #2]
    len_check           = sub_test_stream(payload, inrec_cmd, ext_value);
 8000e06:	0031      	movs	r1, r6
 8000e08:	f7ff fd4c 	bl	80008a4 <sub_test_stream>
    len_check          -= (ot_int)inrec_plen;
 8000e0c:	b2ab      	uxth	r3, r5
 8000e0e:	4699      	mov	r9, r3
 8000e10:	1ac0      	subs	r0, r0, r3
 8000e12:	b200      	sxth	r0, r0
    len_check           = (len_check < 0) - (len_check > 0);
 8000e14:	0fc3      	lsrs	r3, r0, #31
 8000e16:	17c5      	asrs	r5, r0, #31
 8000e18:	1a2d      	subs	r5, r5, r0
 8000e1a:	0fed      	lsrs	r5, r5, #31
 8000e1c:	1b5d      	subs	r5, r3, r5
 8000e1e:	b2ad      	uxth	r5, r5
 8000e20:	b22b      	sxth	r3, r5
    if (len_check) {
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d005      	beq.n	8000e32 <asapi_proc+0x9e>
        errcode = ASAPI_ERR_BADDATA + len_check;
 8000e26:	b2ed      	uxtb	r5, r5
 8000e28:	3506      	adds	r5, #6
 8000e2a:	b2ed      	uxtb	r5, r5
        goto asapi_proc_END;
 8000e2c:	e7be      	b.n	8000dac <asapi_proc+0x18>
    ext_value           = (inrec_cmd & ASAPI_CMD_EXT) ? payload[2] : 0;
 8000e2e:	2200      	movs	r2, #0
 8000e30:	e7e9      	b.n	8000e06 <asapi_proc+0x72>
    sub_q_purge(&srv.q);
 8000e32:	4d22      	ldr	r5, [pc, #136]	; (8000ebc <asapi_proc+0x128>)
 8000e34:	3508      	adds	r5, #8
 8000e36:	0028      	movs	r0, r5
 8000e38:	f7ff fd10 	bl	800085c <sub_q_purge>
    len_check = 4 + inrec_plen;
 8000e3c:	464b      	mov	r3, r9
 8000e3e:	3304      	adds	r3, #4
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4699      	mov	r9, r3
    if (q_writespace(&srv.q) < len_check) {
 8000e44:	0028      	movs	r0, r5
 8000e46:	f006 f883 	bl	8006f50 <q_writespace>
 8000e4a:	4548      	cmp	r0, r9
 8000e4c:	da01      	bge.n	8000e52 <asapi_proc+0xbe>
        errcode = ASAPI_ERR_STACKFULL;
 8000e4e:	2509      	movs	r5, #9
 8000e50:	e7ac      	b.n	8000dac <asapi_proc+0x18>
    q_writestring(&srv.q, &alp->inq->getcursor[-4], len_check);
 8000e52:	68a3      	ldr	r3, [r4, #8]
 8000e54:	6859      	ldr	r1, [r3, #4]
 8000e56:	3904      	subs	r1, #4
 8000e58:	4818      	ldr	r0, [pc, #96]	; (8000ebc <asapi_proc+0x128>)
 8000e5a:	464a      	mov	r2, r9
 8000e5c:	3008      	adds	r0, #8
 8000e5e:	f006 f904 	bl	800706a <q_writestring>
    if ((inrec_cmd & ASAPI_CMD_HOLDOPEN) == 0) {
 8000e62:	0673      	lsls	r3, r6, #25
 8000e64:	d501      	bpl.n	8000e6a <asapi_proc+0xd6>
    ot_u8       errcode     = 0;
 8000e66:	2500      	movs	r5, #0
 8000e68:	e7a0      	b.n	8000dac <asapi_proc+0x18>
        if (session_app_isloaded(&asapi_applet) == False) {
 8000e6a:	4815      	ldr	r0, [pc, #84]	; (8000ec0 <asapi_proc+0x12c>)
 8000e6c:	f004 ff54 	bl	8005d18 <session_app_isloaded>
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d001      	beq.n	8000e78 <asapi_proc+0xe4>
    ot_u8       errcode     = 0;
 8000e74:	2500      	movs	r5, #0
 8000e76:	e799      	b.n	8000dac <asapi_proc+0x18>
            errcode = sub_start_session(alp);
 8000e78:	0020      	movs	r0, r4
 8000e7a:	f7ff fd67 	bl	800094c <sub_start_session>
 8000e7e:	b2c5      	uxtb	r5, r0
 8000e80:	e794      	b.n	8000dac <asapi_proc+0x18>
        alp->OUTREC(CMD) |= ASAPI_CMD_STATUS;
 8000e82:	7963      	ldrb	r3, [r4, #5]
 8000e84:	2210      	movs	r2, #16
 8000e86:	4313      	orrs	r3, r2
 8000e88:	7163      	strb	r3, [r4, #5]
        alp->OUTREC(PLEN) = 6;
 8000e8a:	2306      	movs	r3, #6
 8000e8c:	70e3      	strb	r3, [r4, #3]
        q_writeshort(alp->outq, tid.ushort);                // Write transaction ID
 8000e8e:	466b      	mov	r3, sp
 8000e90:	8899      	ldrh	r1, [r3, #4]
 8000e92:	68e0      	ldr	r0, [r4, #12]
 8000e94:	f006 f88f 	bl	8006fb6 <q_writeshort>
        q_writebyte(alp->outq, 0);                          // RFU byte
 8000e98:	2100      	movs	r1, #0
 8000e9a:	68e0      	ldr	r0, [r4, #12]
 8000e9c:	f006 f886 	bl	8006fac <q_writebyte>
        q_writebyte(alp->outq, errcode);                    // Write Error code
 8000ea0:	0029      	movs	r1, r5
 8000ea2:	68e0      	ldr	r0, [r4, #12]
 8000ea4:	f006 f882 	bl	8006fac <q_writebyte>
        q_writeshort(alp->outq, q_writespace(&srv.q));      // Space remaining in ALP queue
 8000ea8:	68e4      	ldr	r4, [r4, #12]
 8000eaa:	4804      	ldr	r0, [pc, #16]	; (8000ebc <asapi_proc+0x128>)
 8000eac:	3008      	adds	r0, #8
 8000eae:	f006 f84f 	bl	8006f50 <q_writespace>
 8000eb2:	b281      	uxth	r1, r0
 8000eb4:	0020      	movs	r0, r4
 8000eb6:	f006 f87e 	bl	8006fb6 <q_writeshort>
 8000eba:	e779      	b.n	8000db0 <asapi_proc+0x1c>
 8000ebc:	200001c8 	.word	0x200001c8
 8000ec0:	08000a19 	.word	0x08000a19

08000ec4 <sx127x_get_bandplan>:
};



const ot_u8* sx127x_get_bandplan(ot_u8 region_code) {
    region_code &= 3;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	4018      	ands	r0, r3
    return channel_map[region_code];
 8000ec8:	0080      	lsls	r0, r0, #2
 8000eca:	4b01      	ldr	r3, [pc, #4]	; (8000ed0 <sx127x_get_bandplan+0xc>)
 8000ecc:	58c0      	ldr	r0, [r0, r3]
}
 8000ece:	4770      	bx	lr
 8000ed0:	080096a8 	.word	0x080096a8

08000ed4 <sx127x_get_chanregs>:


const ot_u8* sx127x_get_chanregs(ot_u8 region_code, ot_u8 chan_ordinal) {
 8000ed4:	b510      	push	{r4, lr}
 8000ed6:	000c      	movs	r4, r1
    const ot_u8* channel    = sx127x_get_bandplan(region_code);
 8000ed8:	f7ff fff4 	bl	8000ec4 <sx127x_get_bandplan>
    const ot_u8* chanregs   = &channel[chan_ordinal * FREQ_SIZE];
 8000edc:	00a4      	lsls	r4, r4, #2
 8000ede:	1900      	adds	r0, r0, r4
    return chanregs;
}
 8000ee0:	bd10      	pop	{r4, pc}

08000ee2 <sx127x_configure_chan>:


void sx127x_configure_chan(ot_u8 region_code, ot_u8 chan_ordinal) {
 8000ee2:	b510      	push	{r4, lr}
    const ot_u8* chanregs = sx127x_get_chanregs(region_code, chan_ordinal);
 8000ee4:	f7ff fff6 	bl	8000ed4 <sx127x_get_chanregs>
 8000ee8:	0002      	movs	r2, r0
    sx127x_spibus_io(4, 0, chanregs);
 8000eea:	2100      	movs	r1, #0
 8000eec:	2004      	movs	r0, #4
 8000eee:	f007 fa37 	bl	8008360 <sx127x_spibus_io>
}
 8000ef2:	bd10      	pop	{r4, pc}

08000ef4 <sx127x_get_bw>:


ot_u8 sx127x_get_bw(ot_u8 region_code) {
    region_code &= 3;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	4003      	ands	r3, r0

    return bandwidth_lut[region_code];
 8000ef8:	4801      	ldr	r0, [pc, #4]	; (8000f00 <sx127x_get_bw+0xc>)
 8000efa:	18c0      	adds	r0, r0, r3
 8000efc:	7c00      	ldrb	r0, [r0, #16]
}
 8000efe:	4770      	bx	lr
 8000f00:	080096a8 	.word	0x080096a8

08000f04 <sx127x_symbol_miti>:


///@todo this is subject to change
ot_u16 sx127x_symbol_miti(ot_u8 region_code, ot_u8 rate_code) {
    const ot_u16* mitipersym;
    region_code &= 3;
 8000f04:	2303      	movs	r3, #3
 8000f06:	4018      	ands	r0, r3
    rate_code   &= 3;
 8000f08:	400b      	ands	r3, r1

    mitipersym = mitipersym_lut[region_code];
 8000f0a:	0080      	lsls	r0, r0, #2
 8000f0c:	4a02      	ldr	r2, [pc, #8]	; (8000f18 <sx127x_symbol_miti+0x14>)
 8000f0e:	1810      	adds	r0, r2, r0
 8000f10:	6942      	ldr	r2, [r0, #20]

    return mitipersym[rate_code];
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	5ad0      	ldrh	r0, [r2, r3]
}
 8000f16:	4770      	bx	lr
 8000f18:	080096a8 	.word	0x080096a8

08000f1c <sx127x_block_miti>:
    const phymac_struct* pm = phy_handle;
    ot_u8 regime;
    ot_u8 rcode;
    ot_u16 miti;

    regime  = pm->flags & 3;
 8000f1c:	7802      	ldrb	r2, [r0, #0]
 8000f1e:	2303      	movs	r3, #3
 8000f20:	401a      	ands	r2, r3
    rcode   = (pm->channel >> 4) & 3;
 8000f22:	7881      	ldrb	r1, [r0, #2]
 8000f24:	0908      	lsrs	r0, r1, #4
 8000f26:	4003      	ands	r3, r0
    miti    = (mitipersym_lut[regime])[rcode];
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <sx127x_block_miti+0x2c>)
 8000f2c:	1882      	adds	r2, r0, r2
 8000f2e:	6952      	ldr	r2, [r2, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	5ad0      	ldrh	r0, [r2, r3]
    miti   *= (pm->channel & 0x80) ? 4 : 5;
 8000f34:	b249      	sxtb	r1, r1
 8000f36:	2900      	cmp	r1, #0
 8000f38:	db03      	blt.n	8000f42 <sx127x_block_miti+0x26>
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	4358      	muls	r0, r3
 8000f3e:	b280      	uxth	r0, r0

    return miti;
}
 8000f40:	4770      	bx	lr
    miti   *= (pm->channel & 0x80) ? 4 : 5;
 8000f42:	2304      	movs	r3, #4
 8000f44:	e7fa      	b.n	8000f3c <sx127x_block_miti+0x20>
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	080096a8 	.word	0x080096a8

08000f4c <sx127x_hscblock_ti>:
ot_u16 sx127x_hscblock_ti(const void* phy_handle) {
    const phymac_struct* pm = phy_handle;
    ot_u8 regime;
    ot_u8 rcode;

    regime  = pm->flags & 3;
 8000f4c:	7802      	ldrb	r2, [r0, #0]
 8000f4e:	2303      	movs	r3, #3
 8000f50:	401a      	ands	r2, r3
    rcode   = (pm->channel >> 4) & 3;
 8000f52:	7881      	ldrb	r1, [r0, #2]
 8000f54:	0909      	lsrs	r1, r1, #4
 8000f56:	400b      	ands	r3, r1
    return (tiperhsc_lut[regime])[rcode];
 8000f58:	0092      	lsls	r2, r2, #2
 8000f5a:	4903      	ldr	r1, [pc, #12]	; (8000f68 <sx127x_hscblock_ti+0x1c>)
 8000f5c:	188a      	adds	r2, r1, r2
 8000f5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	5ad0      	ldrh	r0, [r2, r3]
}
 8000f64:	4770      	bx	lr
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	080096a8 	.word	0x080096a8

08000f6c <sx127x_int_off>:
  * <LI> sx127x_int_clearall() </LI>
  * <LI> sx127x_int_force() </LI>
  * <LI> sx127x_int_turnon() </LI>
  * <LI> sx127x_int_turnoff() </LI>
  */
OT_WEAK void sx127x_int_off() {
 8000f6c:	b510      	push	{r4, lr}
    sx127x_int_config(0);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f007 fa7a 	bl	8008468 <sx127x_int_config>
}
 8000f74:	bd10      	pop	{r4, pc}
	...

08000f78 <sx127x_int_listen>:
inline void sx127x_iocfg_tx()  {
    sx127x_int_clearall();
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_TX);
}

inline void sx127x_int_listen() {
 8000f78:	b510      	push	{r4, lr}
    sx127x.imode = MODE_Listen;
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <sx127x_int_listen+0x14>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_LISTEN);
 8000f80:	2080      	movs	r0, #128	; 0x80
 8000f82:	0140      	lsls	r0, r0, #5
 8000f84:	f007 fa70 	bl	8008468 <sx127x_int_config>
}
 8000f88:	bd10      	pop	{r4, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	20002204 	.word	0x20002204

08000f90 <sx127x_int_rxdata>:

inline void sx127x_int_rxdata() {
 8000f90:	b510      	push	{r4, lr}
    sx127x.imode = MODE_RXData;
 8000f92:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <sx127x_int_rxdata+0x10>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_RXDATA);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <sx127x_int_rxdata+0x14>)
 8000f9a:	f007 fa65 	bl	8008468 <sx127x_int_config>
}
 8000f9e:	bd10      	pop	{r4, pc}
 8000fa0:	20002204 	.word	0x20002204
 8000fa4:	00000802 	.word	0x00000802

08000fa8 <sx127x_int_rxend>:

inline void sx127x_int_rxend() {
 8000fa8:	b510      	push	{r4, lr}
    sx127x.imode = MODE_RXData;
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <sx127x_int_rxend+0x14>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_RXEND);
 8000fb0:	20c0      	movs	r0, #192	; 0xc0
 8000fb2:	0140      	lsls	r0, r0, #5
 8000fb4:	f007 fa58 	bl	8008468 <sx127x_int_config>
}
 8000fb8:	bd10      	pop	{r4, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	20002204 	.word	0x20002204

08000fc0 <sx127x_int_csma>:

inline void sx127x_int_csma() {
 8000fc0:	b510      	push	{r4, lr}
    sx127x.imode = MODE_CSMA;
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <sx127x_int_csma+0x14>)
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_CSMA);
 8000fc8:	2080      	movs	r0, #128	; 0x80
 8000fca:	0140      	lsls	r0, r0, #5
 8000fcc:	f007 fa4c 	bl	8008468 <sx127x_int_config>
}
 8000fd0:	bd10      	pop	{r4, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	20002204 	.word	0x20002204

08000fd8 <sx127x_int_txdata>:

inline void sx127x_int_txdata() {
 8000fd8:	b510      	push	{r4, lr}
    sx127x.imode = MODE_TXData;
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <sx127x_int_txdata+0x14>)
 8000fdc:	2206      	movs	r2, #6
 8000fde:	701a      	strb	r2, [r3, #0]
    sx127x_int_config(RFI_TXDONE);
 8000fe0:	2080      	movs	r0, #128	; 0x80
 8000fe2:	0140      	lsls	r0, r0, #5
 8000fe4:	f007 fa40 	bl	8008468 <sx127x_int_config>
}
 8000fe8:	bd10      	pop	{r4, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	20002204 	.word	0x20002204

08000ff0 <sx127x_irq0_isr>:


void sx127x_irq0_isr() {   sx127x_virtual_isr(sx127x.imode);     }
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <sx127x_irq0_isr+0xc>)
 8000ff4:	7818      	ldrb	r0, [r3, #0]
 8000ff6:	f000 fd3d 	bl	8001a74 <sx127x_virtual_isr>
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	20002204 	.word	0x20002204

08001000 <sx127x_irq1_isr>:
void sx127x_irq1_isr() {   sx127x_virtual_isr(sx127x.imode + 1); }
 8001000:	b510      	push	{r4, lr}
 8001002:	4b03      	ldr	r3, [pc, #12]	; (8001010 <sx127x_irq1_isr+0x10>)
 8001004:	7818      	ldrb	r0, [r3, #0]
 8001006:	3001      	adds	r0, #1
 8001008:	b2c0      	uxtb	r0, r0
 800100a:	f000 fd33 	bl	8001a74 <sx127x_virtual_isr>
 800100e:	bd10      	pop	{r4, pc}
 8001010:	20002204 	.word	0x20002204

08001014 <sx127x_irq3_isr>:
void sx127x_irq2_isr() {   sx127x_virtual_isr(sx127x.imode + 2); }
void sx127x_irq3_isr() {   sx127x_virtual_isr(sx127x.imode + 3); }
 8001014:	b510      	push	{r4, lr}
 8001016:	4b03      	ldr	r3, [pc, #12]	; (8001024 <sx127x_irq3_isr+0x10>)
 8001018:	7818      	ldrb	r0, [r3, #0]
 800101a:	3003      	adds	r0, #3
 800101c:	b2c0      	uxtb	r0, r0
 800101e:	f000 fd29 	bl	8001a74 <sx127x_virtual_isr>
 8001022:	bd10      	pop	{r4, pc}
 8001024:	20002204 	.word	0x20002204

08001028 <sx127x_check_cadpin>:
//            return;
//        }
//    }
}
*/
ot_bool sx127x_check_cadpin() {
 8001028:	b510      	push	{r4, lr}
    return (ot_bool)(sx127x_cadpin_ishigh() != 0);
 800102a:	f007 f94c 	bl	80082c6 <sx127x_cadpin_ishigh>
 800102e:	1e43      	subs	r3, r0, #1
 8001030:	4198      	sbcs	r0, r3
 8001032:	b2c0      	uxtb	r0, r0
}
 8001034:	bd10      	pop	{r4, pc}
	...

08001038 <sx127x_read>:
            } while (old_mode != new_mode);
        }
    }
}

ot_u8 sx127x_read(ot_u8 addr) {
 8001038:	b500      	push	{lr}
 800103a:	b083      	sub	sp, #12
 800103c:	466b      	mov	r3, sp
 800103e:	1dda      	adds	r2, r3, #7
 8001040:	7010      	strb	r0, [r2, #0]
    sx127x_spibus_io(1, 1, &addr);
 8001042:	2101      	movs	r1, #1
 8001044:	2001      	movs	r0, #1
 8001046:	f007 f98b 	bl	8008360 <sx127x_spibus_io>
    return sx127x.busrx[0];
 800104a:	4b02      	ldr	r3, [pc, #8]	; (8001054 <sx127x_read+0x1c>)
 800104c:	78d8      	ldrb	r0, [r3, #3]
}
 800104e:	b003      	add	sp, #12
 8001050:	bd00      	pop	{pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	20002204 	.word	0x20002204

08001058 <sx127x_mode>:
ot_u8 sx127x_mode() {
 8001058:	b510      	push	{r4, lr}
    return sx127x_read(RFREG_LR_OPMODE) & _OPMODE;
 800105a:	2001      	movs	r0, #1
 800105c:	f7ff ffec 	bl	8001038 <sx127x_read>
 8001060:	2307      	movs	r3, #7
 8001062:	4018      	ands	r0, r3
}
 8001064:	bd10      	pop	{r4, pc}
	...

08001068 <sx127x_burstread>:

void sx127x_burstread(ot_u8 start_addr, ot_u8 length, ot_u8* data) {
 8001068:	b530      	push	{r4, r5, lr}
 800106a:	b083      	sub	sp, #12
 800106c:	000c      	movs	r4, r1
 800106e:	0015      	movs	r5, r2
 8001070:	466b      	mov	r3, sp
 8001072:	1dda      	adds	r2, r3, #7
 8001074:	7010      	strb	r0, [r2, #0]
    sx127x_spibus_io(1, length, &start_addr);
 8001076:	2001      	movs	r0, #1
 8001078:	f007 f972 	bl	8008360 <sx127x_spibus_io>
    memcpy(data, sx127x.busrx, length);
 800107c:	b2a2      	uxth	r2, r4
 800107e:	4903      	ldr	r1, [pc, #12]	; (800108c <sx127x_burstread+0x24>)
 8001080:	0028      	movs	r0, r5
 8001082:	f007 fa6f 	bl	8008564 <ot_memcpy>
}
 8001086:	b003      	add	sp, #12
 8001088:	bd30      	pop	{r4, r5, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	20002207 	.word	0x20002207

08001090 <sx127x_write>:

void sx127x_write(ot_u8 addr, ot_u8 data) {
 8001090:	b500      	push	{lr}
 8001092:	b083      	sub	sp, #12
    ot_u8 cmd[2];
    cmd[0]  = 0x80 | addr;
 8001094:	aa01      	add	r2, sp, #4
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	425b      	negs	r3, r3
 800109a:	4318      	orrs	r0, r3
 800109c:	7010      	strb	r0, [r2, #0]
    cmd[1]  = data;
 800109e:	7051      	strb	r1, [r2, #1]
    sx127x_spibus_io(2, 0, cmd);
 80010a0:	2100      	movs	r1, #0
 80010a2:	2002      	movs	r0, #2
 80010a4:	f007 f95c 	bl	8008360 <sx127x_spibus_io>
}
 80010a8:	b003      	add	sp, #12
 80010aa:	bd00      	pop	{pc}

080010ac <sx127x_iocfg_cad>:
inline void sx127x_iocfg_cad()  {
 80010ac:	b510      	push	{r4, lr}
    sx127x_int_clearall();
 80010ae:	f007 f9eb 	bl	8008488 <sx127x_int_clearall>
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_CAD);
 80010b2:	21a1      	movs	r1, #161	; 0xa1
 80010b4:	2040      	movs	r0, #64	; 0x40
 80010b6:	f7ff ffeb 	bl	8001090 <sx127x_write>
}
 80010ba:	bd10      	pop	{r4, pc}

080010bc <sx127x_iocfg_rx>:
inline void sx127x_iocfg_rx()  {
 80010bc:	b510      	push	{r4, lr}
    sx127x_int_clearall();
 80010be:	f007 f9e3 	bl	8008488 <sx127x_int_clearall>
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_RX);
 80010c2:	2101      	movs	r1, #1
 80010c4:	2040      	movs	r0, #64	; 0x40
 80010c6:	f7ff ffe3 	bl	8001090 <sx127x_write>
}
 80010ca:	bd10      	pop	{r4, pc}

080010cc <sx127x_iocfg_tx>:
inline void sx127x_iocfg_tx()  {
 80010cc:	b510      	push	{r4, lr}
    sx127x_int_clearall();
 80010ce:	f007 f9db 	bl	8008488 <sx127x_int_clearall>
    sx127x_write(RFREG_LR_DIOMAPPING1, _DIOMAPPING1_TX);
 80010d2:	2140      	movs	r1, #64	; 0x40
 80010d4:	2040      	movs	r0, #64	; 0x40
 80010d6:	f7ff ffdb 	bl	8001090 <sx127x_write>
}
 80010da:	bd10      	pop	{r4, pc}

080010dc <sx127x_load_defaults>:
void sx127x_load_defaults() {
 80010dc:	b510      	push	{r4, lr}
    cursor = (ot_u8*)defaults;
 80010de:	4c05      	ldr	r4, [pc, #20]	; (80010f4 <sx127x_load_defaults+0x18>)
 80010e0:	3408      	adds	r4, #8
    while (*cursor != 0) {
 80010e2:	e003      	b.n	80010ec <sx127x_load_defaults+0x10>
        sx127x_write(cursor[0], cursor[1]);
 80010e4:	7861      	ldrb	r1, [r4, #1]
 80010e6:	f7ff ffd3 	bl	8001090 <sx127x_write>
        cursor += 2;
 80010ea:	3402      	adds	r4, #2
    while (*cursor != 0) {
 80010ec:	7820      	ldrb	r0, [r4, #0]
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d1f8      	bne.n	80010e4 <sx127x_load_defaults+0x8>
}
 80010f2:	bd10      	pop	{r4, pc}
 80010f4:	080097c0 	.word	0x080097c0

080010f8 <sx127x_strobe>:
void sx127x_strobe(ot_u8 new_mode, ot_bool blocking) {
 80010f8:	b570      	push	{r4, r5, r6, lr}
 80010fa:	0005      	movs	r5, r0
    if (!blocking) {
 80010fc:	2900      	cmp	r1, #0
 80010fe:	d01c      	beq.n	800113a <sx127x_strobe+0x42>
        ot_u8 old_mode = sx127x_mode();
 8001100:	f7ff ffaa 	bl	8001058 <sx127x_mode>
 8001104:	0004      	movs	r4, r0
        if (old_mode != new_mode) {
 8001106:	42a8      	cmp	r0, r5
 8001108:	d01d      	beq.n	8001146 <sx127x_strobe+0x4e>
            sx127x_write(RFREG_LR_OPMODE, _LORAMODE|new_mode);
 800110a:	2180      	movs	r1, #128	; 0x80
 800110c:	4249      	negs	r1, r1
 800110e:	4329      	orrs	r1, r5
 8001110:	b2c9      	uxtb	r1, r1
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff ffbc 	bl	8001090 <sx127x_write>
            wdog = wdog_amount[(new_mode<<1) + (old_mode!=0)];
 8001118:	006b      	lsls	r3, r5, #1
 800111a:	1e62      	subs	r2, r4, #1
 800111c:	4194      	sbcs	r4, r2
 800111e:	191c      	adds	r4, r3, r4
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <sx127x_strobe+0x64>)
 8001122:	191c      	adds	r4, r3, r4
 8001124:	2340      	movs	r3, #64	; 0x40
 8001126:	5ce4      	ldrb	r4, [r4, r3]
                if (--wdog == 0) {
 8001128:	3c01      	subs	r4, #1
 800112a:	b2a4      	uxth	r4, r4
 800112c:	2c00      	cmp	r4, #0
 800112e:	d00b      	beq.n	8001148 <sx127x_strobe+0x50>
                old_mode = sx127x_mode();
 8001130:	f7ff ff92 	bl	8001058 <sx127x_mode>
            } while (old_mode != new_mode);
 8001134:	4285      	cmp	r5, r0
 8001136:	d1f7      	bne.n	8001128 <sx127x_strobe+0x30>
 8001138:	e005      	b.n	8001146 <sx127x_strobe+0x4e>
        sx127x_write(RFREG_LR_OPMODE, _LORAMODE|new_mode);
 800113a:	3980      	subs	r1, #128	; 0x80
 800113c:	4301      	orrs	r1, r0
 800113e:	b2c9      	uxtb	r1, r1
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff ffa5 	bl	8001090 <sx127x_write>
}
 8001146:	bd70      	pop	{r4, r5, r6, pc}
                    sx127x_reset();
 8001148:	f007 f8c6 	bl	80082d8 <sx127x_reset>
                    delay_us(400);
 800114c:	20c8      	movs	r0, #200	; 0xc8
 800114e:	0040      	lsls	r0, r0, #1
 8001150:	f007 f9b0 	bl	80084b4 <delay_us>
                    dll_init();
 8001154:	f004 f926 	bl	80053a4 <dll_init>
                    return;
 8001158:	e7f5      	b.n	8001146 <sx127x_strobe+0x4e>
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	080097c0 	.word	0x080097c0

08001160 <sx127x_burstwrite>:

void sx127x_burstwrite(ot_u8 start_addr, ot_u8 length, ot_u8* cmd_data) {
 8001160:	b570      	push	{r4, r5, r6, lr}
    ot_u8 save;
    cmd_data--;
 8001162:	1e54      	subs	r4, r2, #1
    save        = *cmd_data;
 8001164:	7825      	ldrb	r5, [r4, #0]
    *cmd_data   = 0x80 | start_addr;
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	425b      	negs	r3, r3
 800116a:	4318      	orrs	r0, r3
 800116c:	7020      	strb	r0, [r4, #0]
    sx127x_spibus_io(1+length, 0, cmd_data);
 800116e:	3101      	adds	r1, #1
 8001170:	b2c8      	uxtb	r0, r1
 8001172:	0022      	movs	r2, r4
 8001174:	2100      	movs	r1, #0
 8001176:	f007 f8f3 	bl	8008360 <sx127x_spibus_io>
    *cmd_data   = save;
 800117a:	7025      	strb	r5, [r4, #0]
}
 800117c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001180 <sx127x_start_counter>:
  * internal timers of the SX127x, we instead use the more reliable interval
  * timer feature of OpenTag.
  */
static ot_u32 macstamp;

void sx127x_start_counter() {
 8001180:	b510      	push	{r4, lr}
    macstamp = systim_chronstamp(NULL);
 8001182:	2000      	movs	r0, #0
 8001184:	f006 fd9c 	bl	8007cc0 <systim_chronstamp>
 8001188:	4b01      	ldr	r3, [pc, #4]	; (8001190 <sx127x_start_counter+0x10>)
 800118a:	6018      	str	r0, [r3, #0]
}
 800118c:	bd10      	pop	{r4, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	200002e4 	.word	0x200002e4

08001194 <sx127x_stop_counter>:

void sx127x_stop_counter() {
}
 8001194:	4770      	bx	lr
	...

08001198 <sx127x_get_counter>:

ot_u16 sx127x_get_counter() {
 8001198:	b510      	push	{r4, lr}
    ot_u16 value;
    value = dll.counter - (ot_u16)systim_chronstamp(&macstamp);
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <sx127x_get_counter+0x14>)
 800119c:	885c      	ldrh	r4, [r3, #2]
 800119e:	4804      	ldr	r0, [pc, #16]	; (80011b0 <sx127x_get_counter+0x18>)
 80011a0:	f006 fd8e 	bl	8007cc0 <systim_chronstamp>
 80011a4:	b280      	uxth	r0, r0
 80011a6:	1a20      	subs	r0, r4, r0
 80011a8:	b280      	uxth	r0, r0
    return value;
}
 80011aa:	bd10      	pop	{r4, pc}
 80011ac:	20002648 	.word	0x20002648
 80011b0:	200002e4 	.word	0x200002e4

080011b4 <sx127x_calc_rssi>:
  */
ot_int sx127x_calc_rssi(ot_u8 encoded_value, ot_s8 packet_snr) {
    ot_int rssi;
    
#   if defined(__SX1272__) || defined(__SX1273__)
        rssi = -125 + (ot_int)encoded_value;
 80011b4:	387d      	subs	r0, #125	; 0x7d
            rssi += -157;
#       endif
#   endif
            
    return rssi;
}
 80011b6:	4770      	bx	lr

080011b8 <sx127x_calc_rssithr>:
#   if defined(__SX1272__) || defined(__SX1273__)
    // SX1272/3 uses -125 as baseline, DASH7 -140
    // Clip baseline at 0
    ///@todo SATURATION INSTRUCTION: 0 minimum
    rssi_thr = (ot_int)input - (140-125);
    if (rssi_thr < 0)
 80011b8:	380f      	subs	r0, #15
 80011ba:	d401      	bmi.n	80011c0 <sx127x_calc_rssithr+0x8>
#   else
        rssi_thr = (157 - 140) + input;
#   endif
#   endif
        
    return (ot_u8)rssi_thr;
 80011bc:	b2c0      	uxtb	r0, r0
}
 80011be:	4770      	bx	lr
        rssi_thr = 0;
 80011c0:	2000      	movs	r0, #0
 80011c2:	e7fb      	b.n	80011bc <sx127x_calc_rssithr+0x4>

080011c4 <sx127x_clip_txeirp>:
#   define _MIN_DBM_EIRP (((2*2) - RF_HDB_ATTEN) + 80)
#else
#   define _MAX_DBM_EIRP (((14*2) - RF_HDB_ATTEN) + 80)
#   define _MIN_DBM_EIRP (((-1*2) - RF_HDB_ATTEN) + 80)
#endif
    if (input_eirp > _MAX_DBM_EIRP) {
 80011c4:	2872      	cmp	r0, #114	; 0x72
 80011c6:	d802      	bhi.n	80011ce <sx127x_clip_txeirp+0xa>
        input_eirp = _MAX_DBM_EIRP;
    }
    else if (input_eirp < _MIN_DBM_EIRP) {
 80011c8:	2853      	cmp	r0, #83	; 0x53
 80011ca:	d902      	bls.n	80011d2 <sx127x_clip_txeirp+0xe>
    
    return input_eirp;
    
#   undef _MAX_DBM_EIRP
#   undef _MIN_DBM_EIRP
}
 80011cc:	4770      	bx	lr
        input_eirp = _MAX_DBM_EIRP;
 80011ce:	2072      	movs	r0, #114	; 0x72
 80011d0:	e7fc      	b.n	80011cc <sx127x_clip_txeirp+0x8>
        input_eirp = _MIN_DBM_EIRP;
 80011d2:	2054      	movs	r0, #84	; 0x54
 80011d4:	e7fa      	b.n	80011cc <sx127x_clip_txeirp+0x8>

080011d6 <sx127x_set_txpwr>:


void sx127x_set_txpwr(ot_u8 pwr_code) {
 80011d6:	b510      	push	{r4, lr}
/// i.e. eirp_code=0 => -40 dBm, eirp_code=80 => 0 dBm, etc
    ot_int dBm;
    ot_u8 padac;
    
    // get dBm
    dBm = (((ot_int)pwr_code + RF_HDB_ATTEN) >> 1) - 40;
 80011d8:	3006      	adds	r0, #6
 80011da:	0840      	lsrs	r0, r0, #1
 80011dc:	0003      	movs	r3, r0
 80011de:	3b28      	subs	r3, #40	; 0x28

#if (defined(__SX1272__) || defined(__SX1273__))
#   if defined(__SX127x_PABOOST__) && defined(__SX127x_20dBm__)
    // Convert to SX1272/3 units (PA Boost on, max 20dBm)
    // Convert to SX1272/3 units (PA Boost ON)
    if (dBm > 17) {
 80011e0:	2b11      	cmp	r3, #17
 80011e2:	dc0f      	bgt.n	8001204 <sx127x_set_txpwr+0x2e>
		padac   = _PADAC_20DBM_ON;
		dBm    -= 5;
	}
	else {
		padac   = _PADAC_20DBM_OFF;
		dBm    -= 2;
 80011e4:	382a      	subs	r0, #42	; 0x2a
 80011e6:	b204      	sxth	r4, r0
		padac   = _PADAC_20DBM_OFF;
 80011e8:	2184      	movs	r1, #132	; 0x84
	}
    sx127x_write(RFREG_LR_PADAC, padac);
 80011ea:	205a      	movs	r0, #90	; 0x5a
 80011ec:	f7ff ff50 	bl	8001090 <sx127x_write>
    pwr_code = (1<<7) | (ot_u8)dBm & 0x0F;
 80011f0:	b264      	sxtb	r4, r4
 80011f2:	210f      	movs	r1, #15
 80011f4:	400c      	ands	r4, r1
 80011f6:	398f      	subs	r1, #143	; 0x8f
 80011f8:	4321      	orrs	r1, r4
 80011fa:	b2c9      	uxtb	r1, r1
#	error "Unsupported LoRa device"

#endif

    // Write new PA Table to device
    sx127x_write(RFREG_LR_PACONFIG, pwr_code);
 80011fc:	2009      	movs	r0, #9
 80011fe:	f7ff ff47 	bl	8001090 <sx127x_write>
}
 8001202:	bd10      	pop	{r4, pc}
		dBm    -= 5;
 8001204:	382d      	subs	r0, #45	; 0x2d
 8001206:	b204      	sxth	r4, r0
		padac   = _PADAC_20DBM_ON;
 8001208:	2187      	movs	r1, #135	; 0x87
 800120a:	e7ee      	b.n	80011ea <sx127x_set_txpwr+0x14>

0800120c <sub_initcad>:
    ///@todo why is this commented-out?  Does it matter?
    //dll_offset_rxtimeout();
    rm2_reenter_rx(radio.evtdone);
}

void sub_initcad(void) {
 800120c:	b510      	push	{r4, lr}
    // Set I/O for CAD detect
    sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);  
 800120e:	21ff      	movs	r1, #255	; 0xff
 8001210:	2012      	movs	r0, #18
 8001212:	f7ff ff3d 	bl	8001090 <sx127x_write>
    sx127x_iocfg_cad();
 8001216:	f7ff ff49 	bl	80010ac <sx127x_iocfg_cad>
    sx127x_int_listen();
 800121a:	f7ff fead 	bl	8000f78 <sx127x_int_listen>
    
    radio.state = RADIO_Listening;
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <sub_initcad+0x28>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
    /// time for CAD->RSSI is dependent on SF and BW
    /// - SF7:500kHZ = 320us
    /// - SF7:125kHZ = 1280us
    //radio_set_mactimer(?);
    
    sx127x_antsw_rx();
 8001224:	f007 f91f 	bl	8008466 <sx127x_antsw_rx>
    sx127x_strobe(_OPMODE_CAD, False);  //non-blocking call
 8001228:	2100      	movs	r1, #0
 800122a:	2007      	movs	r0, #7
 800122c:	f7ff ff64 	bl	80010f8 <sx127x_strobe>
}
 8001230:	bd10      	pop	{r4, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	200026b8 	.word	0x200026b8

08001238 <radio_init>:
OT_WEAK void radio_init(void) {
 8001238:	b510      	push	{r4, lr}
    rfctl.flags     = 0;
 800123a:	2200      	movs	r2, #0
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <radio_init+0x20>)
 800123e:	705a      	strb	r2, [r3, #1]
    radio.state     = RADIO_Idle;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <radio_init+0x24>)
 8001242:	701a      	strb	r2, [r3, #0]
    radio.evtdone   = &otutils_sig2_null;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <radio_init+0x28>)
 8001246:	609a      	str	r2, [r3, #8]
    sx127x_init_bus();
 8001248:	f007 f860 	bl	800830c <sx127x_init_bus>
    sx127x_load_defaults();
 800124c:	f7ff ff46 	bl	80010dc <sx127x_load_defaults>
    rm2_init();
 8001250:	f004 fc7a 	bl	8005b48 <rm2_init>
}
 8001254:	bd10      	pop	{r4, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	20002644 	.word	0x20002644
 800125c:	200026b8 	.word	0x200026b8
 8001260:	080070df 	.word	0x080070df

08001264 <radio_set_mactimer>:
OT_WEAK void radio_set_mactimer(ot_u16 clocks) {
 8001264:	b510      	push	{r4, lr}
 8001266:	0004      	movs	r4, r0
    systim_enable_insertion();
 8001268:	f006 fd08 	bl	8007c7c <systim_enable_insertion>
    systim_set_insertion(clocks);
 800126c:	0020      	movs	r0, r4
 800126e:	f006 fcf1 	bl	8007c54 <systim_set_insertion>
}
 8001272:	bd10      	pop	{r4, pc}

08001274 <radio_activate_queue>:
    q->options.ubyte[UPPER]    += 1;
 8001274:	78c3      	ldrb	r3, [r0, #3]
 8001276:	3301      	adds	r3, #1
 8001278:	70c3      	strb	r3, [r0, #3]
    q->options.ubyte[LOWER]     = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	7083      	strb	r3, [r0, #2]
}
 800127e:	4770      	bx	lr

08001280 <rm2_clip_txeirp>:
OT_INLINE ot_u8 rm2_clip_txeirp(ot_u8 m2_txeirp) {
 8001280:	b510      	push	{r4, lr}
    return sx127x_clip_txeirp(m2_txeirp & 0x7f);
 8001282:	237f      	movs	r3, #127	; 0x7f
 8001284:	4018      	ands	r0, r3
 8001286:	f7ff ff9d 	bl	80011c4 <sx127x_clip_txeirp>
}
 800128a:	bd10      	pop	{r4, pc}

0800128c <rm2_calc_rssithr>:
OT_INLINE ot_u8 rm2_calc_rssithr(ot_u8 m2_rssithr) {
 800128c:	b510      	push	{r4, lr}
    return sx127x_calc_rssithr(m2_rssithr);
 800128e:	f7ff ff93 	bl	80011b8 <sx127x_calc_rssithr>
}
 8001292:	bd10      	pop	{r4, pc}

08001294 <rm2_channel_fastcheck>:
    if (radio.flags & RADIO_FLAG_REFRESH) {
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <rm2_channel_fastcheck+0x2c>)
 8001296:	785b      	ldrb	r3, [r3, #1]
 8001298:	07da      	lsls	r2, r3, #31
 800129a:	d407      	bmi.n	80012ac <rm2_channel_fastcheck+0x18>
    if ((chan_id == 0) || (chan_id == phymac[0].channel)) {
 800129c:	2800      	cmp	r0, #0
 800129e:	d00d      	beq.n	80012bc <rm2_channel_fastcheck+0x28>
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <rm2_channel_fastcheck+0x30>)
 80012a2:	789b      	ldrb	r3, [r3, #2]
 80012a4:	4283      	cmp	r3, r0
 80012a6:	d007      	beq.n	80012b8 <rm2_channel_fastcheck+0x24>
    return False;
 80012a8:	2000      	movs	r0, #0
 80012aa:	e004      	b.n	80012b6 <rm2_channel_fastcheck+0x22>
        radio.flags ^= RADIO_FLAG_REFRESH;
 80012ac:	2201      	movs	r2, #1
 80012ae:	4053      	eors	r3, r2
 80012b0:	4a03      	ldr	r2, [pc, #12]	; (80012c0 <rm2_channel_fastcheck+0x2c>)
 80012b2:	7053      	strb	r3, [r2, #1]
        return False;
 80012b4:	2000      	movs	r0, #0
}
 80012b6:	4770      	bx	lr
        return True;
 80012b8:	2001      	movs	r0, #1
 80012ba:	e7fc      	b.n	80012b6 <rm2_channel_fastcheck+0x22>
 80012bc:	2001      	movs	r0, #1
 80012be:	e7fa      	b.n	80012b6 <rm2_channel_fastcheck+0x22>
 80012c0:	200026b8 	.word	0x200026b8
 80012c4:	200026c4 	.word	0x200026c4

080012c8 <rm2_enter_channel>:
OT_WEAK void rm2_enter_channel(ot_u8 old_chan_id, ot_u8 old_tx_eirp) {
 80012c8:	b570      	push	{r4, r5, r6, lr}
 80012ca:	0004      	movs	r4, r0
    if (old_tx_eirp != phymac[0].tx_eirp) {
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <rm2_enter_channel+0x54>)
 80012ce:	7918      	ldrb	r0, [r3, #4]
 80012d0:	4288      	cmp	r0, r1
 80012d2:	d109      	bne.n	80012e8 <rm2_enter_channel+0x20>
    old_chan_id ^= phymac[0].channel;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <rm2_enter_channel+0x54>)
 80012d6:	789b      	ldrb	r3, [r3, #2]
 80012d8:	405c      	eors	r4, r3
    if (old_chan_id & 0xF0) {
 80012da:	220f      	movs	r2, #15
 80012dc:	0021      	movs	r1, r4
 80012de:	4391      	bics	r1, r2
 80012e0:	d105      	bne.n	80012ee <rm2_enter_channel+0x26>
    if (old_chan_id & 0x0F) {
 80012e2:	0723      	lsls	r3, r4, #28
 80012e4:	d110      	bne.n	8001308 <rm2_enter_channel+0x40>
}
 80012e6:	bd70      	pop	{r4, r5, r6, pc}
        sx127x_set_txpwr( phymac[0].tx_eirp );
 80012e8:	f7ff ff75 	bl	80011d6 <sx127x_set_txpwr>
 80012ec:	e7f2      	b.n	80012d4 <rm2_enter_channel+0xc>
        const ot_u8* detect_regs = detection[phymac[0].channel>>4];
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4d0b      	ldr	r5, [pc, #44]	; (8001320 <rm2_enter_channel+0x58>)
 80012f4:	18ed      	adds	r5, r5, r3
        sx127x_write(RFREG_LR_DETECTOPTIMIZE, detect_regs[0]);
 80012f6:	7829      	ldrb	r1, [r5, #0]
 80012f8:	2031      	movs	r0, #49	; 0x31
 80012fa:	f7ff fec9 	bl	8001090 <sx127x_write>
        sx127x_write(RFREG_LR_DETECTIONTHRESHOLD, detect_regs[1]);
 80012fe:	7869      	ldrb	r1, [r5, #1]
 8001300:	2037      	movs	r0, #55	; 0x37
 8001302:	f7ff fec5 	bl	8001090 <sx127x_write>
 8001306:	e7ec      	b.n	80012e2 <rm2_enter_channel+0x1a>
        sx127x_configure_chan(phymac[0].flags, (phymac[0].channel & 0x0F)-1);
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <rm2_enter_channel+0x54>)
 800130a:	789a      	ldrb	r2, [r3, #2]
 800130c:	210f      	movs	r1, #15
 800130e:	4011      	ands	r1, r2
 8001310:	3901      	subs	r1, #1
 8001312:	b2c9      	uxtb	r1, r1
 8001314:	7818      	ldrb	r0, [r3, #0]
 8001316:	f7ff fde4 	bl	8000ee2 <sx127x_configure_chan>
}
 800131a:	e7e4      	b.n	80012e6 <rm2_enter_channel+0x1e>
 800131c:	200026c4 	.word	0x200026c4
 8001320:	08009848 	.word	0x08009848

08001324 <rm2_mac_configure>:
}
 8001324:	4770      	bx	lr
	...

08001328 <rm2_calc_link>:
OT_WEAK void rm2_calc_link(void) {
 8001328:	b510      	push	{r4, lr}
	prssi_code			= sx127x_read(RFREG_LR_PKTRSSIVALUE);
 800132a:	201a      	movs	r0, #26
 800132c:	f7ff fe84 	bl	8001038 <sx127x_read>
 8001330:	0004      	movs	r4, r0
	psnr_code           = sx127x_read(RFREG_LR_PKTSNRVALUE);
 8001332:	2019      	movs	r0, #25
 8001334:	f7ff fe80 	bl	8001038 <sx127x_read>
 8001338:	b241      	sxtb	r1, r0
	loralink.mean_snr   = (ot_s16)psnr_code;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <rm2_calc_link+0x38>)
 800133c:	8099      	strh	r1, [r3, #4]
    radio.last_rssi     = sx127x_calc_rssi(prssi_code, psnr_code);
 800133e:	0020      	movs	r0, r4
 8001340:	f7ff ff38 	bl	80011b4 <sx127x_calc_rssi>
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <rm2_calc_link+0x3c>)
 8001346:	8090      	strh	r0, [r2, #4]
    radio.last_linkloss = (ot_int)(rxq.front[2] & 0x7F) - 80 - RF_HDB_RXATTEN;
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <rm2_calc_link+0x40>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	7899      	ldrb	r1, [r3, #2]
 800134e:	237f      	movs	r3, #127	; 0x7f
 8001350:	400b      	ands	r3, r1
 8001352:	3b56      	subs	r3, #86	; 0x56
    radio.last_linkloss = (radio.last_linkloss - radio.last_rssi*2) >> 1;
 8001354:	0040      	lsls	r0, r0, #1
 8001356:	1a18      	subs	r0, r3, r0
 8001358:	1040      	asrs	r0, r0, #1
 800135a:	80d0      	strh	r0, [r2, #6]
}
 800135c:	bd10      	pop	{r4, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	2000263c 	.word	0x2000263c
 8001364:	200026b8 	.word	0x200026b8
 8001368:	20002d54 	.word	0x20002d54

0800136c <rm2_flood_getcounter>:
OT_WEAK ot_int rm2_flood_getcounter(void) {
 800136c:	b510      	push	{r4, lr}
    offset_count    = (ot_int)sx127x_get_counter();
 800136e:	f7ff ff13 	bl	8001198 <sx127x_get_counter>
    offset_count   -= 7; //rm2_scale_codec(phymac[0].channel, 29);
 8001372:	3807      	subs	r0, #7
 8001374:	b200      	sxth	r0, r0
}
 8001376:	bd10      	pop	{r4, pc}

08001378 <rm2_flood_txstop>:
OT_WEAK void rm2_flood_txstop(void) {
 8001378:	b510      	push	{r4, lr}
    rfctl.state = RADIO_STATE_TXDONE;
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <rm2_flood_txstop+0x14>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
    sx127x_stop_counter();
 8001380:	f7ff ff08 	bl	8001194 <sx127x_stop_counter>
    sx127x_int_txdata();
 8001384:	f7ff fe28 	bl	8000fd8 <sx127x_int_txdata>
}
 8001388:	bd10      	pop	{r4, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	20002644 	.word	0x20002644

08001390 <rm2_flood_txstart>:
OT_WEAK void rm2_flood_txstart(void) {
 8001390:	b510      	push	{r4, lr}
    sx127x_start_counter();
 8001392:	f7ff fef5 	bl	8001180 <sx127x_start_counter>
}
 8001396:	bd10      	pop	{r4, pc}

08001398 <rm2_rxsync_isr>:
}
#endif


#ifndef EXTF_rm2_rxsync_isr
OT_WEAK void rm2_rxsync_isr(void) {
 8001398:	b510      	push	{r4, lr}
/// - Multiframe packets are not possible in LoRa, so FRAME-CONT bit always 0
/// - LoRa packet reception is done with a manually-timed buffer interval,
///   via the mactimer.  LoRa's built-in packet engine is too dogmatic to be
///   useful for advanced applications (like this one)

    __DEBUG_ERRCODE_EVAL(=210); 
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <rm2_rxsync_isr+0x34>)
 800139c:	2200      	movs	r2, #0
 800139e:	801a      	strh	r2, [r3, #0]
 80013a0:	32d2      	adds	r2, #210	; 0xd2
 80013a2:	805a      	strh	r2, [r3, #2]
    
    radio.state = RADIO_DataRX;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <rm2_rxsync_isr+0x38>)
 80013a6:	3acd      	subs	r2, #205	; 0xcd
 80013a8:	701a      	strb	r2, [r3, #0]
    dll_block();
 80013aa:	f003 fce9 	bl	8004d80 <dll_block>

    // Manual download timing.
    // Either wait for the end of the packet (iter_ti=0: unencoded BG and PG frames)
    // or setup a timer interrupt.
    if (rfctl.iter_ti != 0) {
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <rm2_rxsync_isr+0x3c>)
 80013b0:	78d8      	ldrb	r0, [r3, #3]
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d106      	bne.n	80013c4 <rm2_rxsync_isr+0x2c>
    	radio_set_mactimer(rfctl.iter_ti);
    }
    sx127x_int_rxend();
 80013b6:	f7ff fdf7 	bl	8000fa8 <sx127x_int_rxend>

    em2_decode_newpacket();
 80013ba:	f000 fd2d 	bl	8001e18 <em2_decode_newpacket>
    em2_decode_newframe();
 80013be:	f000 fd2d 	bl	8001e1c <em2_decode_newframe>

}
 80013c2:	bd10      	pop	{r4, pc}
    	radio_set_mactimer(rfctl.iter_ti);
 80013c4:	b280      	uxth	r0, r0
 80013c6:	f7ff ff4d 	bl	8001264 <radio_set_mactimer>
 80013ca:	e7f4      	b.n	80013b6 <rm2_rxsync_isr+0x1e>
 80013cc:	20002dd0 	.word	0x20002dd0
 80013d0:	200026b8 	.word	0x200026b8
 80013d4:	20002644 	.word	0x20002644

080013d8 <rm2_txinit>:
/** Radio TX Functions  <BR>
  * ========================================================================<BR>
  */

#ifndef EXTF_rm2_txinit
OT_WEAK void rm2_txinit(ot_u8 psettings, ot_sig2 callback) {
 80013d8:	b510      	push	{r4, lr}
            RADIO_FLAG_PG,
            RADIO_FLAG_CONT,
            (RADIO_FLAG_BG | RADIO_FLAG_CONT)
    };

    rfctl.flags    &= ~(RADIO_FLAG_BG | RADIO_FLAG_PG | RADIO_FLAG_CONT);
 80013da:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <rm2_txinit+0x38>)
 80013dc:	7853      	ldrb	r3, [r2, #1]
 80013de:	2407      	movs	r4, #7
 80013e0:	43a3      	bics	r3, r4
    //rfctl.flags    |= (psettings & (M2_NETFLAG_BG | M2_NETFLAG_STREAM)) >> 6;

    ///@todo temporary method until PG mode refined
    rfctl.flags |= flag_lut[(psettings & (M2_NETFLAG_STREAM | M2_NETFLAG_BG)) >> 6];
 80013e2:	0984      	lsrs	r4, r0, #6
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <rm2_txinit+0x3c>)
 80013e6:	1900      	adds	r0, r0, r4
 80013e8:	2420      	movs	r4, #32
 80013ea:	5d00      	ldrb	r0, [r0, r4]
 80013ec:	4303      	orrs	r3, r0
 80013ee:	7053      	strb	r3, [r2, #1]

    radio.evtdone   = callback;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <rm2_txinit+0x40>)
 80013f2:	6099      	str	r1, [r3, #8]
    radio.state     = RADIO_Csma;
 80013f4:	2102      	movs	r1, #2
 80013f6:	7019      	strb	r1, [r3, #0]
    rfctl.state     = RADIO_STATE_TXINIT;
 80013f8:	2308      	movs	r3, #8
 80013fa:	7013      	strb	r3, [r2, #0]

    /// If 0, it's a retransmission, no re-encoding necessary
    /// This value is revised later.
    txq.options.ubyte[UPPER] = 0;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <rm2_txinit+0x44>)
 80013fe:	2200      	movs	r2, #0
 8001400:	70da      	strb	r2, [r3, #3]

    /// CSMA-CA interrupt based and fully pre-emptive.  This is
    /// possible using CC1 on the GPTIM to clock the intervals.
    radio_set_mactimer( (ot_uint)dll.comm.tca << 3 );
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <rm2_txinit+0x48>)
 8001404:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8001406:	00c0      	lsls	r0, r0, #3
 8001408:	b280      	uxth	r0, r0
 800140a:	f7ff ff2b 	bl	8001264 <radio_set_mactimer>
}
 800140e:	bd10      	pop	{r4, pc}
 8001410:	20002644 	.word	0x20002644
 8001414:	08009848 	.word	0x08009848
 8001418:	200026b8 	.word	0x200026b8
 800141c:	20002d68 	.word	0x20002d68
 8001420:	20002648 	.word	0x20002648

08001424 <rm2_resend>:
#endif



#ifndef EXTF_rm2_resend
OT_WEAK void rm2_resend(ot_sig2 callback) {
 8001424:	b510      	push	{r4, lr}
    radio.evtdone               = callback;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <rm2_resend+0x20>)
 8001428:	6098      	str	r0, [r3, #8]
    radio.state                 = RADIO_Csma;
 800142a:	2202      	movs	r2, #2
 800142c:	701a      	strb	r2, [r3, #0]
    rfctl.state                 = RADIO_STATE_TXINIT;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <rm2_resend+0x24>)
 8001430:	3206      	adds	r2, #6
 8001432:	701a      	strb	r2, [r3, #0]
    txq.options.ubyte[UPPER]    = 255;
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <rm2_resend+0x28>)
 8001436:	32f7      	adds	r2, #247	; 0xf7
 8001438:	70da      	strb	r2, [r3, #3]
    radio_set_mactimer(0);
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff ff12 	bl	8001264 <radio_set_mactimer>
}
 8001440:	bd10      	pop	{r4, pc}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	200026b8 	.word	0x200026b8
 8001448:	20002644 	.word	0x20002644
 800144c:	20002d68 	.word	0x20002d68

08001450 <sub_cca_isfail>:
    sx127x_antsw_rx();
    sx127x_strobe(_OPMODE_CAD, False);  //non-blocking call
    radio.state = RADIO_Csma;
}

ot_bool sub_cca_isfail(void) {
 8001450:	b510      	push	{r4, lr}
    ot_bool test;
    test = sx127x_check_cadpin();
 8001452:	f7ff fde9 	bl	8001028 <sx127x_check_cadpin>
 8001456:	1e04      	subs	r4, r0, #0
    if (test) {
 8001458:	d101      	bne.n	800145e <sub_cca_isfail+0xe>
        
        // This calls CSMA loop
        radio.evtdone(1, 0);
    }
    return test;
}
 800145a:	0020      	movs	r0, r4
 800145c:	bd10      	pop	{r4, pc}
        sx127x_int_off();
 800145e:	f7ff fd85 	bl	8000f6c <sx127x_int_off>
        rfctl.state = RADIO_STATE_TXCAD1;
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <sub_cca_isfail+0x24>)
 8001464:	2210      	movs	r2, #16
 8001466:	701a      	strb	r2, [r3, #0]
        radio.evtdone(1, 0);
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <sub_cca_isfail+0x28>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2100      	movs	r1, #0
 800146e:	2001      	movs	r0, #1
 8001470:	4798      	blx	r3
 8001472:	e7f2      	b.n	800145a <sub_cca_isfail+0xa>
 8001474:	20002644 	.word	0x20002644
 8001478:	200026b8 	.word	0x200026b8

0800147c <sx127xdrv_mdmconfig>:

void sx127xdrv_null(ot_int arg1, ot_int arg2) { }


#ifndef EXTF_sx127xdrv_mdmconfig
OT_WEAK void sx127xdrv_mdmconfig(MODE_enum mode, ot_u8 mdmcfg2_val, ot_u8 symtimeout_def, ot_u16 param) {
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	46ce      	mov	lr, r9
 8001480:	4647      	mov	r7, r8
 8001482:	b580      	push	{r7, lr}
 8001484:	b083      	sub	sp, #12
 8001486:	4688      	mov	r8, r1
 8001488:	4691      	mov	r9, r2
 800148a:	001e      	movs	r6, r3
        (0 | _CODINGRATE_4_5 | _IMPLICITHEADER_ON | _RXPAYLOADCRC_OFF | _LOWDATARATEOPTIMIZE_OFF),
        (0 | _CODINGRATE_4_4 | _IMPLICITHEADER_ON | _RXPAYLOADCRC_OFF | _LOWDATARATEOPTIMIZE_OFF)
    };

    // spibus command buffer
    ot_u8 mdmregs[7] = {
 800148c:	239d      	movs	r3, #157	; 0x9d
 800148e:	466a      	mov	r2, sp
 8001490:	7013      	strb	r3, [r2, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	7053      	strb	r3, [r2, #1]
 8001496:	7093      	strb	r3, [r2, #2]
 8001498:	70d3      	strb	r3, [r2, #3]
 800149a:	7113      	strb	r3, [r2, #4]
 800149c:	7153      	strb	r3, [r2, #5]
 800149e:	7193      	strb	r3, [r2, #6]
        0,                                  // Preamble MSB
        0,                                  // Preamble LSB
        0,                                  // Packet Length
    };

    usefec      = (phymac[0].channel >> 7);
 80014a0:	4f1e      	ldr	r7, [pc, #120]	; (800151c <sx127xdrv_mdmconfig+0xa0>)
 80014a2:	78bd      	ldrb	r5, [r7, #2]
 80014a4:	09ed      	lsrs	r5, r5, #7
    offset      = (ot_u8)mode + usefec;
 80014a6:	1828      	adds	r0, r5, r0
 80014a8:	b2c4      	uxtb	r4, r0

    // Prepare the modem configuration registers (mdmcfg1, mdmcfg2)
    mdmregs[1]  = sx127x_get_bw(phymac[0].flags) | mdmcfg1_lut[usefec];
 80014aa:	7838      	ldrb	r0, [r7, #0]
 80014ac:	f7ff fd22 	bl	8000ef4 <sx127x_get_bw>
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <sx127xdrv_mdmconfig+0xa4>)
 80014b2:	195d      	adds	r5, r3, r5
 80014b4:	2224      	movs	r2, #36	; 0x24
 80014b6:	5caa      	ldrb	r2, [r5, r2]
 80014b8:	4310      	orrs	r0, r2
 80014ba:	466a      	mov	r2, sp
 80014bc:	7050      	strb	r0, [r2, #1]
    mdmregs[2]  = mdmcfg2_sf[(phymac[0].channel>>4)&3] | mdmcfg2_val;
 80014be:	78b9      	ldrb	r1, [r7, #2]
 80014c0:	0909      	lsrs	r1, r1, #4
 80014c2:	2203      	movs	r2, #3
 80014c4:	400a      	ands	r2, r1
 80014c6:	189a      	adds	r2, r3, r2
 80014c8:	2128      	movs	r1, #40	; 0x28
 80014ca:	5c52      	ldrb	r2, [r2, r1]
 80014cc:	4641      	mov	r1, r8
 80014ce:	430a      	orrs	r2, r1
 80014d0:	4669      	mov	r1, sp
 80014d2:	708a      	strb	r2, [r1, #2]

    // Prepare the symbol timeout value (only relevant on RX)
    mdmregs[3]  = symtimeout_def;
 80014d4:	466a      	mov	r2, sp
 80014d6:	4649      	mov	r1, r9
 80014d8:	70d1      	strb	r1, [r2, #3]

    // Prepare the preamble length, which is only done via the LSB
    mdmregs[5]  = preamblelen[offset];
 80014da:	191b      	adds	r3, r3, r4
 80014dc:	222c      	movs	r2, #44	; 0x2c
 80014de:	5c9b      	ldrb	r3, [r3, r2]
 80014e0:	466a      	mov	r2, sp
 80014e2:	7153      	strb	r3, [r2, #5]

    // Prepare the packet length, which in TX is known and in RX is the size of an initial header chunk
    ///@todo Param manipulation must take into account the variable coding rate
    mdmregs[6]  = (param == 0) ? deflength[offset] : param;
 80014e4:	2e00      	cmp	r6, #0
 80014e6:	d013      	beq.n	8001510 <sx127xdrv_mdmconfig+0x94>
 80014e8:	b2f6      	uxtb	r6, r6
 80014ea:	466b      	mov	r3, sp
 80014ec:	719e      	strb	r6, [r3, #6]

    // Store in a single SPI write operation
    sx127x_spibus_io(7, 0, mdmregs);
 80014ee:	466a      	mov	r2, sp
 80014f0:	2100      	movs	r1, #0
 80014f2:	2007      	movs	r0, #7
 80014f4:	f006 ff34 	bl	8008360 <sx127x_spibus_io>

    // Sync word is too far away to be done in a single write
    sx127x_write(RFREG_LR_SYNCWORD, syncword[offset]);
 80014f8:	4809      	ldr	r0, [pc, #36]	; (8001520 <sx127xdrv_mdmconfig+0xa4>)
 80014fa:	1904      	adds	r4, r0, r4
 80014fc:	233c      	movs	r3, #60	; 0x3c
 80014fe:	5ce1      	ldrb	r1, [r4, r3]
 8001500:	2039      	movs	r0, #57	; 0x39
 8001502:	f7ff fdc5 	bl	8001090 <sx127x_write>

}
 8001506:	b003      	add	sp, #12
 8001508:	bc0c      	pop	{r2, r3}
 800150a:	4690      	mov	r8, r2
 800150c:	4699      	mov	r9, r3
 800150e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mdmregs[6]  = (param == 0) ? deflength[offset] : param;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <sx127xdrv_mdmconfig+0xa4>)
 8001512:	191b      	adds	r3, r3, r4
 8001514:	2234      	movs	r2, #52	; 0x34
 8001516:	5c9e      	ldrb	r6, [r3, r2]
 8001518:	e7e7      	b.n	80014ea <sx127xdrv_mdmconfig+0x6e>
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	200026c4 	.word	0x200026c4
 8001520:	08009848 	.word	0x08009848

08001524 <radio_gag>:
   radio_sleep();
}
#endif

#ifndef EXTF_radio_gag
OT_WEAK void radio_gag(void) {
 8001524:	b510      	push	{r4, lr}
    sx127x_int_off();                       // Disable pin interrutps on MCU
 8001526:	f7ff fd21 	bl	8000f6c <sx127x_int_off>
    sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);  // Clear Register IRQ Flags on SX127x
 800152a:	21ff      	movs	r1, #255	; 0xff
 800152c:	2012      	movs	r0, #18
 800152e:	f7ff fdaf 	bl	8001090 <sx127x_write>
}
 8001532:	bd10      	pop	{r4, pc}

08001534 <radio_finish>:
OT_WEAK void radio_finish(ot_int main_err, ot_int frame_err) {
 8001534:	b570      	push	{r4, r5, r6, lr}
 8001536:	0004      	movs	r4, r0
 8001538:	000d      	movs	r5, r1
    radio_gag();                            // redundant, but here for robustness
 800153a:	f7ff fff3 	bl	8001524 <radio_gag>
    dll_unblock();                          // also redundant and here for robustness
 800153e:	f003 fc25 	bl	8004d8c <dll_unblock>
    rfctl.state     = 0;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <radio_finish+0x2c>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
    rfctl.flags    &= (RADIO_FLAG_XOON);    //clear all other flags
 8001548:	7859      	ldrb	r1, [r3, #1]
 800154a:	3240      	adds	r2, #64	; 0x40
 800154c:	400a      	ands	r2, r1
 800154e:	705a      	strb	r2, [r3, #1]
    callback        = radio.evtdone;
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <radio_finish+0x30>)
 8001552:	689a      	ldr	r2, [r3, #8]
    radio.evtdone   = &otutils_sig2_null;
 8001554:	4904      	ldr	r1, [pc, #16]	; (8001568 <radio_finish+0x34>)
 8001556:	6099      	str	r1, [r3, #8]
    callback(main_err, frame_err);
 8001558:	0029      	movs	r1, r5
 800155a:	0020      	movs	r0, r4
 800155c:	4790      	blx	r2
}
 800155e:	bd70      	pop	{r4, r5, r6, pc}
 8001560:	20002644 	.word	0x20002644
 8001564:	200026b8 	.word	0x200026b8
 8001568:	080070df 	.word	0x080070df

0800156c <sub_hwtimeout_isr>:
void sub_hwtimeout_isr(void) {
 800156c:	b510      	push	{r4, lr}
    if (rfctl.flags & RADIO_FLAG_BG) {
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <sub_hwtimeout_isr+0x38>)
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	07db      	lsls	r3, r3, #31
 8001574:	d506      	bpl.n	8001584 <sub_hwtimeout_isr+0x18>
        if (--rfctl.tries <= 0) {
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <sub_hwtimeout_isr+0x38>)
 8001578:	7893      	ldrb	r3, [r2, #2]
 800157a:	3b01      	subs	r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	7093      	strb	r3, [r2, #2]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <sub_hwtimeout_isr+0x2a>
    sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);
 8001584:	21ff      	movs	r1, #255	; 0xff
 8001586:	2012      	movs	r0, #18
 8001588:	f7ff fd82 	bl	8001090 <sx127x_write>
    sx127x_strobe(_OPMODE_RXSINGLE, False);
 800158c:	2100      	movs	r1, #0
 800158e:	2006      	movs	r0, #6
 8001590:	f7ff fdb2 	bl	80010f8 <sx127x_strobe>
}
 8001594:	bd10      	pop	{r4, pc}
            radio_finish(RM2_ERR_TIMEOUT, 1 /*radio.link.sqi*/);
 8001596:	2004      	movs	r0, #4
 8001598:	2101      	movs	r1, #1
 800159a:	4240      	negs	r0, r0
 800159c:	f7ff ffca 	bl	8001534 <radio_finish>
            return;
 80015a0:	e7f8      	b.n	8001594 <sub_hwtimeout_isr+0x28>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	20002644 	.word	0x20002644

080015a8 <rm2_rxinit>:
OT_WEAK void rm2_rxinit(ot_u8 channel, ot_u8 psettings, ot_sig2 callback) {
 80015a8:	b570      	push	{r4, r5, r6, lr}
    __DEBUG_ERRCODE_EVAL(=200);
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <rm2_rxinit+0x9c>)
 80015ac:	2400      	movs	r4, #0
 80015ae:	801c      	strh	r4, [r3, #0]
 80015b0:	34c8      	adds	r4, #200	; 0xc8
 80015b2:	805c      	strh	r4, [r3, #2]
    radio.evtdone   = callback;
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <rm2_rxinit+0xa0>)
 80015b6:	609a      	str	r2, [r3, #8]
    rfctl.flags    &= ~(RADIO_FLAG_CONT | RADIO_FLAG_BG | RADIO_FLAG_PG);
 80015b8:	4a24      	ldr	r2, [pc, #144]	; (800164c <rm2_rxinit+0xa4>)
 80015ba:	7853      	ldrb	r3, [r2, #1]
 80015bc:	3cc1      	subs	r4, #193	; 0xc1
 80015be:	43a3      	bics	r3, r4
 80015c0:	7053      	strb	r3, [r2, #1]
    rfctl.tries 	= 1;
 80015c2:	3c06      	subs	r4, #6
 80015c4:	7094      	strb	r4, [r2, #2]
    if (psettings & (M2_NETFLAG_BG)) {
 80015c6:	064a      	lsls	r2, r1, #25
 80015c8:	d51e      	bpl.n	8001608 <rm2_rxinit+0x60>
        if ((psettings & M2_NETFLAG_STREAM) == 0) {
 80015ca:	b24a      	sxtb	r2, r1
 80015cc:	2a00      	cmp	r2, #0
 80015ce:	db07      	blt.n	80015e0 <rm2_rxinit+0x38>
            rfctl.flags |= RADIO_FLAG_PG;
 80015d0:	2204      	movs	r2, #4
 80015d2:	4313      	orrs	r3, r2
 80015d4:	4a1d      	ldr	r2, [pc, #116]	; (800164c <rm2_rxinit+0xa4>)
 80015d6:	7053      	strb	r3, [r2, #1]
        	sub_init = &sub_initrx;
 80015d8:	4d1d      	ldr	r5, [pc, #116]	; (8001650 <rm2_rxinit+0xa8>)
        	initvals = (ot_u8*)pginit;
 80015da:	4c1e      	ldr	r4, [pc, #120]	; (8001654 <rm2_rxinit+0xac>)
 80015dc:	344c      	adds	r4, #76	; 0x4c
 80015de:	e016      	b.n	800160e <rm2_rxinit+0x66>
        else if (psettings & M2_NETSTATE_INIT) {
 80015e0:	070a      	lsls	r2, r1, #28
 80015e2:	d509      	bpl.n	80015f8 <rm2_rxinit+0x50>
            rfctl.flags |= RADIO_FLAG_BG;
 80015e4:	4a19      	ldr	r2, [pc, #100]	; (800164c <rm2_rxinit+0xa4>)
 80015e6:	2101      	movs	r1, #1
 80015e8:	430b      	orrs	r3, r1
 80015ea:	7053      	strb	r3, [r2, #1]
            rfctl.tries = 3;
 80015ec:	2303      	movs	r3, #3
 80015ee:	7093      	strb	r3, [r2, #2]
		    sub_init 	= &sub_initcad;
 80015f0:	4d19      	ldr	r5, [pc, #100]	; (8001658 <rm2_rxinit+0xb0>)
		    initvals 	= (ot_u8*)bg1init;
 80015f2:	4c18      	ldr	r4, [pc, #96]	; (8001654 <rm2_rxinit+0xac>)
 80015f4:	3444      	adds	r4, #68	; 0x44
 80015f6:	e00a      	b.n	800160e <rm2_rxinit+0x66>
		    rfctl.flags |= RADIO_FLAG_BG;
 80015f8:	2201      	movs	r2, #1
 80015fa:	4313      	orrs	r3, r2
 80015fc:	4a13      	ldr	r2, [pc, #76]	; (800164c <rm2_rxinit+0xa4>)
 80015fe:	7053      	strb	r3, [r2, #1]
            sub_init = &sub_initrx;
 8001600:	4d13      	ldr	r5, [pc, #76]	; (8001650 <rm2_rxinit+0xa8>)
            initvals = (ot_u8*)bg2init;
 8001602:	4c14      	ldr	r4, [pc, #80]	; (8001654 <rm2_rxinit+0xac>)
 8001604:	3450      	adds	r4, #80	; 0x50
 8001606:	e002      	b.n	800160e <rm2_rxinit+0x66>
        sub_init    = &sub_initrx;
 8001608:	4d11      	ldr	r5, [pc, #68]	; (8001650 <rm2_rxinit+0xa8>)
        initvals    = (ot_u8*)fginit;
 800160a:	4c12      	ldr	r4, [pc, #72]	; (8001654 <rm2_rxinit+0xac>)
 800160c:	3448      	adds	r4, #72	; 0x48
    if (rm2_test_channel(channel) == False) {
 800160e:	f004 fabd 	bl	8005b8c <rm2_test_channel>
 8001612:	2800      	cmp	r0, #0
 8001614:	d00f      	beq.n	8001636 <rm2_rxinit+0x8e>
    sx127xdrv_mdmconfig(initvals[0], initvals[1], initvals[2], 0);
 8001616:	78a2      	ldrb	r2, [r4, #2]
 8001618:	7861      	ldrb	r1, [r4, #1]
 800161a:	7820      	ldrb	r0, [r4, #0]
 800161c:	2300      	movs	r3, #0
 800161e:	f7ff ff2d 	bl	800147c <sx127xdrv_mdmconfig>
    rfctl.iter_ti = (ot_u8)(sx127x_block_miti(&phymac[0]) >> 8) + 1;
 8001622:	480e      	ldr	r0, [pc, #56]	; (800165c <rm2_rxinit+0xb4>)
 8001624:	f7ff fc7a 	bl	8000f1c <sx127x_block_miti>
 8001628:	0a00      	lsrs	r0, r0, #8
 800162a:	b2c0      	uxtb	r0, r0
 800162c:	3001      	adds	r0, #1
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <rm2_rxinit+0xa4>)
 8001630:	70d8      	strb	r0, [r3, #3]
    sub_init();
 8001632:	47a8      	blx	r5
}
 8001634:	bd70      	pop	{r4, r5, r6, pc}
        radio_finish(RM2_ERR_BADCHANNEL, 0);
 8001636:	3003      	adds	r0, #3
 8001638:	2100      	movs	r1, #0
 800163a:	4240      	negs	r0, r0
 800163c:	f7ff ff7a 	bl	8001534 <radio_finish>
        return;
 8001640:	e7f8      	b.n	8001634 <rm2_rxinit+0x8c>
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	20002dd0 	.word	0x20002dd0
 8001648:	200026b8 	.word	0x200026b8
 800164c:	20002644 	.word	0x20002644
 8001650:	08001899 	.word	0x08001899
 8001654:	08009848 	.word	0x08009848
 8001658:	0800120d 	.word	0x0800120d
 800165c:	200026c4 	.word	0x200026c4

08001660 <rm2_decode_s2>:
void rm2_decode_s2(void) {
 8001660:	b510      	push	{r4, lr}
        llrbits = lorallr_getblock(&lorallr, rxq.getcursor);
 8001662:	4c21      	ldr	r4, [pc, #132]	; (80016e8 <rm2_decode_s2+0x88>)
 8001664:	6861      	ldr	r1, [r4, #4]
 8001666:	4821      	ldr	r0, [pc, #132]	; (80016ec <rm2_decode_s2+0x8c>)
 8001668:	f002 fefc 	bl	8004464 <lorallr_getblock>
 800166c:	0002      	movs	r2, r0
        blockcrc = hsc_decode(&hsc, rxq.putcursor, llrbits);
 800166e:	68a1      	ldr	r1, [r4, #8]
 8001670:	481f      	ldr	r0, [pc, #124]	; (80016f0 <rm2_decode_s2+0x90>)
 8001672:	f000 fe43 	bl	80022fc <hsc_decode>
        if (blockcrc != 0) {
 8001676:	2800      	cmp	r0, #0
 8001678:	d127      	bne.n	80016ca <rm2_decode_s2+0x6a>
        lorallr_popblock(&lorallr);
 800167a:	481c      	ldr	r0, [pc, #112]	; (80016ec <rm2_decode_s2+0x8c>)
 800167c:	f002 ff30 	bl	80044e0 <lorallr_popblock>
        rxq.putcursor += hsc.infobytes;
 8001680:	481b      	ldr	r0, [pc, #108]	; (80016f0 <rm2_decode_s2+0x90>)
 8001682:	88c3      	ldrh	r3, [r0, #6]
 8001684:	4c18      	ldr	r4, [pc, #96]	; (80016e8 <rm2_decode_s2+0x88>)
 8001686:	68a2      	ldr	r2, [r4, #8]
 8001688:	4694      	mov	ip, r2
 800168a:	4463      	add	r3, ip
 800168c:	60a3      	str	r3, [r4, #8]
        hsc_init(&hsc, (hscrate_t)(rxq.front[1] & 7));
 800168e:	68e3      	ldr	r3, [r4, #12]
 8001690:	785b      	ldrb	r3, [r3, #1]
 8001692:	2107      	movs	r1, #7
 8001694:	4019      	ands	r1, r3
 8001696:	f000 fd0d 	bl	80020b4 <hsc_init>
        rxq.getcursor      += 16;
 800169a:	6863      	ldr	r3, [r4, #4]
 800169c:	3310      	adds	r3, #16
 800169e:	6063      	str	r3, [r4, #4]
        unprocessed_bytes   = em2.bytes - (rxq.getcursor - (rxq.front + rxq.options.ushort));
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <rm2_decode_s2+0x94>)
 80016a2:	8852      	ldrh	r2, [r2, #2]
 80016a4:	68e1      	ldr	r1, [r4, #12]
 80016a6:	8860      	ldrh	r0, [r4, #2]
 80016a8:	1809      	adds	r1, r1, r0
 80016aa:	1a5b      	subs	r3, r3, r1
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	b21b      	sxth	r3, r3
    } while (unprocessed_bytes >= 16);
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	dcd6      	bgt.n	8001662 <rm2_decode_s2+0x2>
    if (rfctl.state == RADIO_STATE_RXDONE) {
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <rm2_decode_s2+0x98>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d10c      	bne.n	80016d6 <rm2_decode_s2+0x76>
        radio_finish(0, em2_decode_endframe());
 80016bc:	f000 fc9e 	bl	8001ffc <em2_decode_endframe>
 80016c0:	b201      	sxth	r1, r0
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff ff36 	bl	8001534 <radio_finish>
        return;
 80016c8:	e00c      	b.n	80016e4 <rm2_decode_s2+0x84>
            rxq.options.ushort  = 0;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <rm2_decode_s2+0x88>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	805a      	strh	r2, [r3, #2]
            em2.state           = -1;
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <rm2_decode_s2+0x94>)
 80016d2:	3a01      	subs	r2, #1
 80016d4:	809a      	strh	r2, [r3, #4]
    sys.task_RFA.event      = 5;
 80016d6:	4c09      	ldr	r4, [pc, #36]	; (80016fc <rm2_decode_s2+0x9c>)
 80016d8:	2305      	movs	r3, #5
 80016da:	7123      	strb	r3, [r4, #4]
    sys.task_RFA.nextevent  = (ot_uint)sx127x_hscblock_ti(&phymac[0]);
 80016dc:	4808      	ldr	r0, [pc, #32]	; (8001700 <rm2_decode_s2+0xa0>)
 80016de:	f7ff fc35 	bl	8000f4c <sx127x_hscblock_ti>
 80016e2:	60a0      	str	r0, [r4, #8]
}
 80016e4:	bd10      	pop	{r4, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	20002d54 	.word	0x20002d54
 80016ec:	20002230 	.word	0x20002230
 80016f0:	20002228 	.word	0x20002228
 80016f4:	20002684 	.word	0x20002684
 80016f8:	20002644 	.word	0x20002644
 80016fc:	20002d90 	.word	0x20002d90
 8001700:	200026c4 	.word	0x200026c4

08001704 <rm2_rxtimeout_isr>:
OT_WEAK void rm2_rxtimeout_isr(void) {
 8001704:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=280);
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <rm2_rxtimeout_isr+0x20>)
 8001708:	2200      	movs	r2, #0
 800170a:	801a      	strh	r2, [r3, #0]
 800170c:	3219      	adds	r2, #25
 800170e:	32ff      	adds	r2, #255	; 0xff
 8001710:	805a      	strh	r2, [r3, #2]
    radio_gag();
 8001712:	f7ff ff07 	bl	8001524 <radio_gag>
    radio_finish(RM2_ERR_TIMEOUT, 1 /*radio.link.sqi*/);
 8001716:	2004      	movs	r0, #4
 8001718:	2101      	movs	r1, #1
 800171a:	4240      	negs	r0, r0
 800171c:	f7ff ff0a 	bl	8001534 <radio_finish>
}
 8001720:	bd10      	pop	{r4, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	20002dd0 	.word	0x20002dd0

08001728 <rm2_rxend_isr>:
OT_WEAK void rm2_rxend_isr(void) {
 8001728:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=230);
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <rm2_rxend_isr+0x38>)
 800172c:	2200      	movs	r2, #0
 800172e:	801a      	strh	r2, [r3, #0]
 8001730:	32e6      	adds	r2, #230	; 0xe6
 8001732:	805a      	strh	r2, [r3, #2]
    systim_disable_insertion();					// Here for safety purposes
 8001734:	f006 faaa 	bl	8007c8c <systim_disable_insertion>
    radio_gag();                                // No more Radio interrupts!
 8001738:	f7ff fef4 	bl	8001524 <radio_gag>
    rm2_calc_link();                            // Calculate relative link info
 800173c:	f7ff fdf4 	bl	8001328 <rm2_calc_link>
    rfctl.state = RADIO_STATE_RXDONE;           // Make sure in DONE State, for decoding
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <rm2_rxend_isr+0x3c>)
 8001742:	2202      	movs	r2, #2
 8001744:	701a      	strb	r2, [r3, #0]
    em2_decode_data();                          // decode any leftover data
 8001746:	f000 fbcf 	bl	8001ee8 <em2_decode_data>
    if (sys.task_RFA.event != 6) {
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <rm2_rxend_isr+0x40>)
 800174c:	791b      	ldrb	r3, [r3, #4]
 800174e:	2b06      	cmp	r3, #6
 8001750:	d005      	beq.n	800175e <rm2_rxend_isr+0x36>
        ot_u16 integrity = em2_decode_endframe();
 8001752:	f000 fc53 	bl	8001ffc <em2_decode_endframe>
        radio_finish(0, integrity);
 8001756:	b201      	sxth	r1, r0
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff feeb 	bl	8001534 <radio_finish>
}
 800175e:	bd10      	pop	{r4, pc}
 8001760:	20002dd0 	.word	0x20002dd0
 8001764:	20002644 	.word	0x20002644
 8001768:	20002d90 	.word	0x20002d90

0800176c <radio_sleep>:
    }
}
#endif

#ifndef EXTF_radio_sleep
OT_WEAK void radio_sleep(void) {
 800176c:	b510      	push	{r4, lr}
    sx127x_antsw_off();
 800176e:	f006 fe77 	bl	8008460 <sx127x_antsw_off>
    sx127x_strobe(_OPMODE_SLEEP, True);
 8001772:	2101      	movs	r1, #1
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fcbf 	bl	80010f8 <sx127x_strobe>
//        radio.state  = RADIO_Idle;
//        rfctl.flags &= ~RADIO_FLAG_PWRMASK;
//        sx127x_strobe(_OPMODE_SLEEP);
//        sx127x_waitfor_sleep();
//    }
}
 800177a:	bd10      	pop	{r4, pc}

0800177c <radio_idle>:
#endif

#ifndef EXTF_radio_idle
OT_WEAK void radio_idle(void) {
 800177c:	b510      	push	{r4, lr}
    sx127x_antsw_on();                    ///@todo see if this matters
 800177e:	f006 fe70 	bl	8008462 <sx127x_antsw_on>
    sx127x_strobe(_OPMODE_STANDBY, True);
 8001782:	2101      	movs	r1, #1
 8001784:	2001      	movs	r0, #1
 8001786:	f7ff fcb7 	bl	80010f8 <sx127x_strobe>
//    if (!test) {
//        radio.state  = RADIO_Idle;
//        rfctl.flags |= RADIO_FLAG_XOON;
//        sx127xdrv_force_standby();
//    }
}
 800178a:	bd10      	pop	{r4, pc}

0800178c <rm2_kill>:
OT_WEAK void rm2_kill(void) {
 800178c:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=290);
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <rm2_kill+0x28>)
 8001790:	2200      	movs	r2, #0
 8001792:	801a      	strh	r2, [r3, #0]
 8001794:	3223      	adds	r2, #35	; 0x23
 8001796:	32ff      	adds	r2, #255	; 0xff
 8001798:	805a      	strh	r2, [r3, #2]
    radio_gag();
 800179a:	f7ff fec3 	bl	8001524 <radio_gag>
    radio_idle();
 800179e:	f7ff ffed 	bl	800177c <radio_idle>
    dll_unblock();
 80017a2:	f003 faf3 	bl	8004d8c <dll_unblock>
    radio_finish(RM2_ERR_KILL, 0);
 80017a6:	2001      	movs	r0, #1
 80017a8:	2100      	movs	r1, #0
 80017aa:	4240      	negs	r0, r0
 80017ac:	f7ff fec2 	bl	8001534 <radio_finish>
}
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	20002dd0 	.word	0x20002dd0

080017b8 <sub_cad_csma>:
void sub_cad_csma(void) {
 80017b8:	b510      	push	{r4, lr}
    radio_gag(); 
 80017ba:	f7ff feb3 	bl	8001524 <radio_gag>
    sx127x_iocfg_cad();
 80017be:	f7ff fc75 	bl	80010ac <sx127x_iocfg_cad>
    sx127x_int_csma();
 80017c2:	f7ff fbfd 	bl	8000fc0 <sx127x_int_csma>
    radio_idle();
 80017c6:	f7ff ffd9 	bl	800177c <radio_idle>
    sx127x_antsw_rx();
 80017ca:	f006 fe4c 	bl	8008466 <sx127x_antsw_rx>
    sx127x_strobe(_OPMODE_CAD, False);  //non-blocking call
 80017ce:	2100      	movs	r1, #0
 80017d0:	2007      	movs	r0, #7
 80017d2:	f7ff fc91 	bl	80010f8 <sx127x_strobe>
    radio.state = RADIO_Csma;
 80017d6:	4b02      	ldr	r3, [pc, #8]	; (80017e0 <sub_cad_csma+0x28>)
 80017d8:	2202      	movs	r2, #2
 80017da:	701a      	strb	r2, [r3, #0]
}
 80017dc:	bd10      	pop	{r4, pc}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	200026b8 	.word	0x200026b8

080017e4 <rm2_txdata_isr>:
OT_WEAK void rm2_txdata_isr(void) {
 80017e4:	b510      	push	{r4, lr}
    if ((rfctl.flags & RADIO_FLAG_BGFLOOD) == RADIO_FLAG_BGFLOOD) {
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <rm2_txdata_isr+0x64>)
 80017e8:	785a      	ldrb	r2, [r3, #1]
 80017ea:	2303      	movs	r3, #3
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d10a      	bne.n	8001808 <rm2_txdata_isr+0x24>
        radio.evtdone(RADIO_FLAG_CONT, 0);
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <rm2_txdata_isr+0x68>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2100      	movs	r1, #0
 80017f8:	2002      	movs	r0, #2
 80017fa:	4798      	blx	r3
        if ((rfctl.state & RADIO_STATE_TXMASK) == RADIO_STATE_TXDATA) {
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <rm2_txdata_isr+0x64>)
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	2338      	movs	r3, #56	; 0x38
 8001802:	4013      	ands	r3, r2
 8001804:	2b38      	cmp	r3, #56	; 0x38
 8001806:	d00b      	beq.n	8001820 <rm2_txdata_isr+0x3c>
    radio_gag();
 8001808:	f7ff fe8c 	bl	8001524 <radio_gag>
    radio_idle();
 800180c:	f7ff ffb6 	bl	800177c <radio_idle>
    radio_finish((rfctl.flags & (RADIO_FLAG_PG | RADIO_FLAG_BG | RADIO_FLAG_CONT)), 0);
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <rm2_txdata_isr+0x64>)
 8001812:	785b      	ldrb	r3, [r3, #1]
 8001814:	2007      	movs	r0, #7
 8001816:	4018      	ands	r0, r3
 8001818:	2100      	movs	r1, #0
 800181a:	f7ff fe8b 	bl	8001534 <radio_finish>
}
 800181e:	bd10      	pop	{r4, pc}
            bgcrc8_put(&txq.front[2]);
 8001820:	4c0b      	ldr	r4, [pc, #44]	; (8001850 <rm2_txdata_isr+0x6c>)
 8001822:	68e3      	ldr	r3, [r4, #12]
 8001824:	1c98      	adds	r0, r3, #2
 8001826:	f002 fe9a 	bl	800455e <bgcrc8_put>
            sx127x_write(RFREG_LR_IRQFLAGS, 0xFF);
 800182a:	21ff      	movs	r1, #255	; 0xff
 800182c:	2012      	movs	r0, #18
 800182e:	f7ff fc2f 	bl	8001090 <sx127x_write>
            sx127x_burstwrite(RFREG_LR_FIFO, 6, &txq.front[2]);
 8001832:	68e2      	ldr	r2, [r4, #12]
 8001834:	3202      	adds	r2, #2
 8001836:	2106      	movs	r1, #6
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fc91 	bl	8001160 <sx127x_burstwrite>
            sx127x_strobe(_OPMODE_TX, False);   //non-blocking call
 800183e:	2100      	movs	r1, #0
 8001840:	2003      	movs	r0, #3
 8001842:	f7ff fc59 	bl	80010f8 <sx127x_strobe>
            return;
 8001846:	e7ea      	b.n	800181e <rm2_txdata_isr+0x3a>
 8001848:	20002644 	.word	0x20002644
 800184c:	200026b8 	.word	0x200026b8
 8001850:	20002d68 	.word	0x20002d68

08001854 <radio_flush_rx>:
/// Unused in SX127x
}
#endif

#ifndef EXTF_radio_flush_rx
OT_WEAK void radio_flush_rx(void) {
 8001854:	b510      	push	{r4, lr}
    sx127x_write(RFREG_LR_FIFOADDRPTR, 0);
 8001856:	2100      	movs	r1, #0
 8001858:	200d      	movs	r0, #13
 800185a:	f7ff fc19 	bl	8001090 <sx127x_write>
}
 800185e:	bd10      	pop	{r4, pc}

08001860 <rm2_reenter_rx>:
OT_WEAK void rm2_reenter_rx(ot_sig2 callback) {
 8001860:	b510      	push	{r4, lr}
    radio.evtdone   = callback;
 8001862:	4c0b      	ldr	r4, [pc, #44]	; (8001890 <rm2_reenter_rx+0x30>)
 8001864:	60a0      	str	r0, [r4, #8]
    rfctl.state     = RADIO_STATE_RXAUTO;
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <rm2_reenter_rx+0x34>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
    radio_gag();                            
 800186c:	f7ff fe5a 	bl	8001524 <radio_gag>
    radio_flush_rx();
 8001870:	f7ff fff0 	bl	8001854 <radio_flush_rx>
    sx127x_antsw_rx();
 8001874:	f006 fdf7 	bl	8008466 <sx127x_antsw_rx>
    sx127x_strobe(_OPMODE_RXSINGLE, False);  //sx127x_strobe(opmode, False);   //non-blocking call
 8001878:	2100      	movs	r1, #0
 800187a:	2006      	movs	r0, #6
 800187c:	f7ff fc3c 	bl	80010f8 <sx127x_strobe>
    sx127x_int_rxdata();
 8001880:	f7ff fb86 	bl	8000f90 <sx127x_int_rxdata>
    radio.state = RADIO_Listening;
 8001884:	2301      	movs	r3, #1
 8001886:	7023      	strb	r3, [r4, #0]
    dll_unblock();
 8001888:	f003 fa80 	bl	8004d8c <dll_unblock>
}
 800188c:	bd10      	pop	{r4, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	200026b8 	.word	0x200026b8
 8001894:	20002644 	.word	0x20002644

08001898 <sub_initrx>:
void sub_initrx(void) {
 8001898:	b510      	push	{r4, lr}
    sx127x_iocfg_rx();
 800189a:	f7ff fc0f 	bl	80010bc <sx127x_iocfg_rx>
    rm2_reenter_rx(radio.evtdone);
 800189e:	4b02      	ldr	r3, [pc, #8]	; (80018a8 <sub_initrx+0x10>)
 80018a0:	6898      	ldr	r0, [r3, #8]
 80018a2:	f7ff ffdd 	bl	8001860 <rm2_reenter_rx>
}
 80018a6:	bd10      	pop	{r4, pc}
 80018a8:	200026b8 	.word	0x200026b8

080018ac <rm2_rxdata_isr>:
OT_WEAK void rm2_rxdata_isr() {
 80018ac:	b510      	push	{r4, lr}
    em2_decode_data();
 80018ae:	f000 fb1b 	bl	8001ee8 <em2_decode_data>
    if (em2.state < 0) {
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <rm2_rxdata_isr+0x78>)
 80018b4:	2204      	movs	r2, #4
 80018b6:	5e9b      	ldrsh	r3, [r3, r2]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db04      	blt.n	80018c6 <rm2_rxdata_isr+0x1a>
    else if ((em2.crc5 == 1) && ((rfctl.flags & 7) == 0)) {
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <rm2_rxdata_isr+0x78>)
 80018be:	785b      	ldrb	r3, [r3, #1]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d00d      	beq.n	80018e0 <rm2_rxdata_isr+0x34>
}
 80018c4:	bd10      	pop	{r4, pc}
        systim_disable_insertion();
 80018c6:	f006 f9e1 	bl	8007c8c <systim_disable_insertion>
        radio.state = RADIO_Idle;
 80018ca:	4c17      	ldr	r4, [pc, #92]	; (8001928 <rm2_rxdata_isr+0x7c>)
 80018cc:	2300      	movs	r3, #0
 80018ce:	7023      	strb	r3, [r4, #0]
        radio_gag();
 80018d0:	f7ff fe28 	bl	8001524 <radio_gag>
        radio_idle();
 80018d4:	f7ff ff52 	bl	800177c <radio_idle>
        rm2_reenter_rx(radio.evtdone);
 80018d8:	68a0      	ldr	r0, [r4, #8]
 80018da:	f7ff ffc1 	bl	8001860 <rm2_reenter_rx>
 80018de:	e7f1      	b.n	80018c4 <rm2_rxdata_isr+0x18>
    else if ((em2.crc5 == 1) && ((rfctl.flags & 7) == 0)) {
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <rm2_rxdata_isr+0x80>)
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	075b      	lsls	r3, r3, #29
 80018e6:	d1ed      	bne.n	80018c4 <rm2_rxdata_isr+0x18>
        if (phymac[0].channel & 0x80) {
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <rm2_rxdata_isr+0x84>)
 80018ea:	789b      	ldrb	r3, [r3, #2]
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0a      	blt.n	8001908 <rm2_rxdata_isr+0x5c>
            rx_octets = rxq.front[0]+1;
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <rm2_rxdata_isr+0x88>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	781c      	ldrb	r4, [r3, #0]
 80018f8:	3401      	adds	r4, #1
            systim_disable_insertion();
 80018fa:	f006 f9c7 	bl	8007c8c <systim_disable_insertion>
        sx127x_write(RFREG_LR_PAYLOADLENGTH, (ot_u8)rx_octets);
 80018fe:	b2e1      	uxtb	r1, r4
 8001900:	2022      	movs	r0, #34	; 0x22
 8001902:	f7ff fbc5 	bl	8001090 <sx127x_write>
}
 8001906:	e7dd      	b.n	80018c4 <rm2_rxdata_isr+0x18>
            rx_octets   = (ot_uint)hsc_octetsinframe((hscrate_t)(rxq.front[1]&7), rxq.front[0]-7);
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <rm2_rxdata_isr+0x88>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	785a      	ldrb	r2, [r3, #1]
 800190e:	2007      	movs	r0, #7
 8001910:	4010      	ands	r0, r2
 8001912:	7819      	ldrb	r1, [r3, #0]
 8001914:	3907      	subs	r1, #7
 8001916:	b2c9      	uxtb	r1, r1
 8001918:	f000 fbbe 	bl	8002098 <hsc_octetsinframe>
            rx_octets  += 16;
 800191c:	3010      	adds	r0, #16
 800191e:	b284      	uxth	r4, r0
 8001920:	e7ed      	b.n	80018fe <rm2_rxdata_isr+0x52>
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	20002684 	.word	0x20002684
 8001928:	200026b8 	.word	0x200026b8
 800192c:	20002644 	.word	0x20002644
 8001930:	200026c4 	.word	0x200026c4
 8001934:	20002d54 	.word	0x20002d54

08001938 <radio_flush_tx>:
#endif

#ifndef EXTF_radio_flush_tx
OT_WEAK void radio_flush_tx(void) {
 8001938:	b510      	push	{r4, lr}
    sx127x_write(RFREG_LR_FIFOADDRPTR, 0);
 800193a:	2100      	movs	r1, #0
 800193c:	200d      	movs	r0, #13
 800193e:	f7ff fba7 	bl	8001090 <sx127x_write>
}
 8001942:	bd10      	pop	{r4, pc}

08001944 <rm2_txcsma_isr>:
OT_WEAK void rm2_txcsma_isr(void) {
 8001944:	b510      	push	{r4, lr}
    switch ( (rfctl.state >> RADIO_STATE_TXSHIFT) & (RADIO_STATE_TXMASK >> RADIO_STATE_TXSHIFT) ) {
 8001946:	4b44      	ldr	r3, [pc, #272]	; (8001a58 <rm2_txcsma_isr+0x114>)
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	08d2      	lsrs	r2, r2, #3
 800194c:	2307      	movs	r3, #7
 800194e:	4013      	ands	r3, r2
 8001950:	b2da      	uxtb	r2, r3
 8001952:	2a06      	cmp	r2, #6
 8001954:	d86c      	bhi.n	8001a30 <rm2_txcsma_isr+0xec>
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4a40      	ldr	r2, [pc, #256]	; (8001a5c <rm2_txcsma_isr+0x118>)
 800195a:	58d3      	ldr	r3, [r2, r3]
 800195c:	469f      	mov	pc, r3
            if (rm2_test_chanlist() == False) {
 800195e:	f004 f92b 	bl	8005bb8 <rm2_test_chanlist>
 8001962:	2800      	cmp	r0, #0
 8001964:	d106      	bne.n	8001974 <rm2_txcsma_isr+0x30>
                radio.evtdone(RM2_ERR_BADCHANNEL, 0);
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <rm2_txcsma_isr+0x11c>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	3003      	adds	r0, #3
 800196c:	2100      	movs	r1, #0
 800196e:	4240      	negs	r0, r0
 8001970:	4798      	blx	r3
                break;
 8001972:	e05d      	b.n	8001a30 <rm2_txcsma_isr+0xec>
            radio_activate_queue(&txq);
 8001974:	483b      	ldr	r0, [pc, #236]	; (8001a64 <rm2_txcsma_isr+0x120>)
 8001976:	f7ff fc7d 	bl	8001274 <radio_activate_queue>
            em2_encode_newpacket();
 800197a:	f000 f955 	bl	8001c28 <em2_encode_newpacket>
            em2_encode_newframe();
 800197e:	f000 f955 	bl	8001c2c <em2_encode_newframe>
            type = mode_lut[rfctl.flags & 7];
 8001982:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <rm2_txcsma_isr+0x114>)
 8001984:	785a      	ldrb	r2, [r3, #1]
 8001986:	2307      	movs	r3, #7
 8001988:	401a      	ands	r2, r3
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <rm2_txcsma_isr+0x124>)
 800198c:	189b      	adds	r3, r3, r2
 800198e:	2258      	movs	r2, #88	; 0x58
 8001990:	5c98      	ldrb	r0, [r3, r2]
            sx127xdrv_mdmconfig(type, (DRF_LR_MODEMCONFIG2 & 0x0F), (0), em2.bytes);
 8001992:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <rm2_txcsma_isr+0x128>)
 8001994:	885b      	ldrh	r3, [r3, #2]
 8001996:	2200      	movs	r2, #0
 8001998:	2104      	movs	r1, #4
 800199a:	f7ff fd6f 	bl	800147c <sx127xdrv_mdmconfig>
            sx127x_int_off();
 800199e:	f7ff fae5 	bl	8000f6c <sx127x_int_off>
                goto rm2_txcsma_START;
 80019a2:	e01c      	b.n	80019de <rm2_txcsma_isr+0x9a>
            rfctl.state = RADIO_STATE_TXCCA1;
 80019a4:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <rm2_txcsma_isr+0x114>)
 80019a6:	2218      	movs	r2, #24
 80019a8:	701a      	strb	r2, [r3, #0]
            sub_cad_csma();
 80019aa:	f7ff ff05 	bl	80017b8 <sub_cad_csma>
            break;
 80019ae:	e03f      	b.n	8001a30 <rm2_txcsma_isr+0xec>
            if (sub_cca_isfail() == False) {
 80019b0:	f7ff fd4e 	bl	8001450 <sub_cca_isfail>
 80019b4:	2800      	cmp	r0, #0
 80019b6:	d13b      	bne.n	8001a30 <rm2_txcsma_isr+0xec>
                radio_sleep();
 80019b8:	f7ff fed8 	bl	800176c <radio_sleep>
                rfctl.state = RADIO_STATE_TXCAD2;
 80019bc:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <rm2_txcsma_isr+0x114>)
 80019be:	2220      	movs	r2, #32
 80019c0:	701a      	strb	r2, [r3, #0]
                radio_set_mactimer(0 /*phymac[0].tg */);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fc4e 	bl	8001264 <radio_set_mactimer>
 80019c8:	e032      	b.n	8001a30 <rm2_txcsma_isr+0xec>
            rfctl.state = RADIO_STATE_TXCCA2;
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <rm2_txcsma_isr+0x114>)
 80019cc:	2228      	movs	r2, #40	; 0x28
 80019ce:	701a      	strb	r2, [r3, #0]
            sub_cad_csma();
 80019d0:	f7ff fef2 	bl	80017b8 <sub_cad_csma>
            break;
 80019d4:	e02c      	b.n	8001a30 <rm2_txcsma_isr+0xec>
            if (sub_cca_isfail()) {
 80019d6:	f7ff fd3b 	bl	8001450 <sub_cca_isfail>
 80019da:	2800      	cmp	r0, #0
 80019dc:	d128      	bne.n	8001a30 <rm2_txcsma_isr+0xec>
            rfctl.state = RADIO_STATE_TXSTART;
 80019de:	4c1e      	ldr	r4, [pc, #120]	; (8001a58 <rm2_txcsma_isr+0x114>)
 80019e0:	2330      	movs	r3, #48	; 0x30
 80019e2:	7023      	strb	r3, [r4, #0]
            radio.evtdone(0, (rfctl.flags & (RADIO_FLAG_PG | RADIO_FLAG_CONT | RADIO_FLAG_BG)));
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <rm2_txcsma_isr+0x11c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	7862      	ldrb	r2, [r4, #1]
 80019ea:	2107      	movs	r1, #7
 80019ec:	4011      	ands	r1, r2
 80019ee:	2000      	movs	r0, #0
 80019f0:	4798      	blx	r3
            radio_gag();
 80019f2:	f7ff fd97 	bl	8001524 <radio_gag>
            txq.front[2] = phymac[0].tx_eirp;
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <rm2_txcsma_isr+0x120>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <rm2_txcsma_isr+0x12c>)
 80019fc:	7912      	ldrb	r2, [r2, #4]
 80019fe:	709a      	strb	r2, [r3, #2]
            if (rfctl.flags & RADIO_FLAG_BG) {
 8001a00:	7863      	ldrb	r3, [r4, #1]
 8001a02:	07db      	lsls	r3, r3, #31
 8001a04:	d415      	bmi.n	8001a32 <rm2_txcsma_isr+0xee>
            radio_flush_tx();
 8001a06:	f7ff ff97 	bl	8001938 <radio_flush_tx>
            em2_encode_data();
 8001a0a:	f000 f9a7 	bl	8001d5c <em2_encode_data>
            radio.state = RADIO_DataTX;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <rm2_txcsma_isr+0x11c>)
 8001a10:	2206      	movs	r2, #6
 8001a12:	701a      	strb	r2, [r3, #0]
            rfctl.state = RADIO_STATE_TXDATA;
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <rm2_txcsma_isr+0x114>)
 8001a16:	3232      	adds	r2, #50	; 0x32
 8001a18:	701a      	strb	r2, [r3, #0]
            sx127x_iocfg_tx();
 8001a1a:	f7ff fb57 	bl	80010cc <sx127x_iocfg_tx>
            sx127x_antsw_tx((ot_bool)BOARD_FEATURE(RF_PABOOST));
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f006 fd20 	bl	8008464 <sx127x_antsw_tx>
            sx127x_int_txdata();
 8001a24:	f7ff fad8 	bl	8000fd8 <sx127x_int_txdata>
            sx127x_strobe(_OPMODE_TX, False);   //non-blocking call
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2003      	movs	r0, #3
 8001a2c:	f7ff fb64 	bl	80010f8 <sx127x_strobe>
}
 8001a30:	bd10      	pop	{r4, pc}
                radio_idle();
 8001a32:	f7ff fea3 	bl	800177c <radio_idle>
                if (rfctl.flags & RADIO_FLAG_CONT) {
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <rm2_txcsma_isr+0x114>)
 8001a38:	785b      	ldrb	r3, [r3, #1]
 8001a3a:	079b      	lsls	r3, r3, #30
 8001a3c:	d408      	bmi.n	8001a50 <rm2_txcsma_isr+0x10c>
                radio.evtdone((rfctl.flags & RADIO_FLAG_CONT), 0);
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <rm2_txcsma_isr+0x11c>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <rm2_txcsma_isr+0x114>)
 8001a44:	7852      	ldrb	r2, [r2, #1]
 8001a46:	2002      	movs	r0, #2
 8001a48:	4010      	ands	r0, r2
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4798      	blx	r3
 8001a4e:	e7da      	b.n	8001a06 <rm2_txcsma_isr+0xc2>
                    rm2_flood_txstart();
 8001a50:	f7ff fc9e 	bl	8001390 <rm2_flood_txstart>
 8001a54:	e7f3      	b.n	8001a3e <rm2_txcsma_isr+0xfa>
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	20002644 	.word	0x20002644
 8001a5c:	08009810 	.word	0x08009810
 8001a60:	200026b8 	.word	0x200026b8
 8001a64:	20002d68 	.word	0x20002d68
 8001a68:	08009848 	.word	0x08009848
 8001a6c:	20002684 	.word	0x20002684
 8001a70:	200026c4 	.word	0x200026c4

08001a74 <sx127x_virtual_isr>:
void sx127x_virtual_isr(ot_u8 code) {
 8001a74:	b510      	push	{r4, lr}
    switch (code) {
 8001a76:	2806      	cmp	r0, #6
 8001a78:	d822      	bhi.n	8001ac0 <sx127x_virtual_isr+0x4c>
 8001a7a:	0080      	lsls	r0, r0, #2
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <sx127x_virtual_isr+0x54>)
 8001a7e:	581b      	ldr	r3, [r3, r0]
 8001a80:	469f      	mov	pc, r3
            ot_uint test = sx127x_check_cadpin();
 8001a82:	f7ff fad1 	bl	8001028 <sx127x_check_cadpin>
            if (test) {
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d008      	beq.n	8001a9c <sx127x_virtual_isr+0x28>
                radio_gag();
 8001a8a:	f7ff fd4b 	bl	8001524 <radio_gag>
                sx127x_strobe(_OPMODE_STANDBY, True);
 8001a8e:	2101      	movs	r1, #1
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff fb31 	bl	80010f8 <sx127x_strobe>
                sub_initrx();
 8001a96:	f7ff feff 	bl	8001898 <sub_initrx>
 8001a9a:	e004      	b.n	8001aa6 <sx127x_virtual_isr+0x32>
                rm2_kill();
 8001a9c:	f7ff fe76 	bl	800178c <rm2_kill>
 8001aa0:	e001      	b.n	8001aa6 <sx127x_virtual_isr+0x32>
        case RFIV_RXDONE:       rm2_rxend_isr();        break;
 8001aa2:	f7ff fe41 	bl	8001728 <rm2_rxend_isr>
}
 8001aa6:	bd10      	pop	{r4, pc}
        case RFIV_RXTIMEOUT:    sub_hwtimeout_isr();    break; 
 8001aa8:	f7ff fd60 	bl	800156c <sub_hwtimeout_isr>
 8001aac:	e7fb      	b.n	8001aa6 <sx127x_virtual_isr+0x32>
        case RFIV_RXHEADER:     rm2_rxsync_isr();       break;
 8001aae:	f7ff fc73 	bl	8001398 <rm2_rxsync_isr>
 8001ab2:	e7f8      	b.n	8001aa6 <sx127x_virtual_isr+0x32>
        case RFIV_CCA:          rm2_txcsma_isr();       break;
 8001ab4:	f7ff ff46 	bl	8001944 <rm2_txcsma_isr>
 8001ab8:	e7f5      	b.n	8001aa6 <sx127x_virtual_isr+0x32>
        case RFIV_TXDONE:       rm2_txdata_isr();       break;
 8001aba:	f7ff fe93 	bl	80017e4 <rm2_txdata_isr>
 8001abe:	e7f2      	b.n	8001aa6 <sx127x_virtual_isr+0x32>
        default:                rm2_kill();             break;
 8001ac0:	f7ff fe64 	bl	800178c <rm2_kill>
}
 8001ac4:	e7ef      	b.n	8001aa6 <sx127x_virtual_isr+0x32>
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	0800982c 	.word	0x0800982c

08001acc <radio_mac_isr>:
OT_WEAK void radio_mac_isr(void) {
 8001acc:	b510      	push	{r4, lr}
	if (radio.state == RADIO_DataRX) {
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <radio_mac_isr+0x3c>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b05      	cmp	r3, #5
 8001ad4:	d00a      	beq.n	8001aec <radio_mac_isr+0x20>
	systim_disable_insertion();
 8001ad6:	f006 f8d9 	bl	8007c8c <systim_disable_insertion>
    if (radio.state == RADIO_Csma) {
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <radio_mac_isr+0x3c>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d007      	beq.n	8001af2 <radio_mac_isr+0x26>
    if (radio.state == RADIO_Listening) {
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d008      	beq.n	8001af8 <radio_mac_isr+0x2c>
	rm2_kill();
 8001ae6:	f7ff fe51 	bl	800178c <rm2_kill>
}
 8001aea:	bd10      	pop	{r4, pc}
		rm2_rxdata_isr();
 8001aec:	f7ff fede 	bl	80018ac <rm2_rxdata_isr>
		return;
 8001af0:	e7fb      	b.n	8001aea <radio_mac_isr+0x1e>
    	rm2_txcsma_isr();
 8001af2:	f7ff ff27 	bl	8001944 <rm2_txcsma_isr>
    	return;
 8001af6:	e7f8      	b.n	8001aea <radio_mac_isr+0x1e>
    	chan_rssi = sx127x_read(RFREG_LR_RSSIVALUE);
 8001af8:	201b      	movs	r0, #27
 8001afa:	f7ff fa9d 	bl	8001038 <sx127x_read>
    	if (chan_rssi >= phymac[0].cs_thr) {
 8001afe:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <radio_mac_isr+0x40>)
 8001b00:	799b      	ldrb	r3, [r3, #6]
 8001b02:	4283      	cmp	r3, r0
 8001b04:	d8ef      	bhi.n	8001ae6 <radio_mac_isr+0x1a>
 8001b06:	e7f0      	b.n	8001aea <radio_mac_isr+0x1e>
 8001b08:	200026b8 	.word	0x200026b8
 8001b0c:	200026c4 	.word	0x200026c4

08001b10 <radio_getlinkinfo>:
#   if (M2_FEATURE_HSCODE)
    return &loralink;
#   else
    return NULL;
#   endif
}
 8001b10:	4800      	ldr	r0, [pc, #0]	; (8001b14 <radio_getlinkinfo+0x4>)
 8001b12:	4770      	bx	lr
 8001b14:	2000263c 	.word	0x2000263c

08001b18 <radio_getpwrcode>:
#endif

#ifndef EXTF_radio_getpwrcode
OT_WEAK ot_u8 radio_getpwrcode(void) {
 8001b18:	b510      	push	{r4, lr}
/// Power code: 0-3.  sx127x_getbasepwr() typically returns 3 on most platforms
    return sx127x_getbasepwr() - (radio.state > RADIO_Idle);
 8001b1a:	f006 fbdb 	bl	80082d4 <sx127x_getbasepwr>
 8001b1e:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <radio_getpwrcode+0x14>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	1e5a      	subs	r2, r3, #1
 8001b24:	4193      	sbcs	r3, r2
 8001b26:	1ac0      	subs	r0, r0, r3
 8001b28:	b2c0      	uxtb	r0, r0
}
 8001b2a:	bd10      	pop	{r4, pc}
 8001b2c:	200026b8 	.word	0x200026b8

08001b30 <sub_bytes_to_symbols_sf5>:
  * rm2_scale_codec
  */

typedef ot_uint (*converter_fn)(ot_int, ot_int);

static ot_uint sub_bytes_to_symbols_sf5(ot_int pkt_bytes, ot_int codesize) {
 8001b30:	b510      	push	{r4, lr}
 8001b32:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 12 + 19) / 20) * codesize );
 8001b34:	00c0      	lsls	r0, r0, #3
 8001b36:	3007      	adds	r0, #7
 8001b38:	2114      	movs	r1, #20
 8001b3a:	f7fe fb6f 	bl	800021c <__divsi3>
 8001b3e:	4360      	muls	r0, r4
 8001b40:	3008      	adds	r0, #8
 8001b42:	b280      	uxth	r0, r0
}
 8001b44:	bd10      	pop	{r4, pc}

08001b46 <sub_bytes_to_symbols_sf7>:
static ot_uint sub_bytes_to_symbols_sf7(ot_int pkt_bytes, ot_int codesize) {
 8001b46:	b510      	push	{r4, lr}
 8001b48:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 20 + 27) / 28) * codesize );
 8001b4a:	00c0      	lsls	r0, r0, #3
 8001b4c:	3007      	adds	r0, #7
 8001b4e:	211c      	movs	r1, #28
 8001b50:	f7fe fb64 	bl	800021c <__divsi3>
 8001b54:	4360      	muls	r0, r4
 8001b56:	3008      	adds	r0, #8
 8001b58:	b280      	uxth	r0, r0
}
 8001b5a:	bd10      	pop	{r4, pc}

08001b5c <sub_bytes_to_symbols_sf9>:
static ot_uint sub_bytes_to_symbols_sf9(ot_int pkt_bytes, ot_int codesize) {
 8001b5c:	b510      	push	{r4, lr}
 8001b5e:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 28 + 35) / 36) * codesize );
 8001b60:	00c0      	lsls	r0, r0, #3
 8001b62:	3007      	adds	r0, #7
 8001b64:	2124      	movs	r1, #36	; 0x24
 8001b66:	f7fe fb59 	bl	800021c <__divsi3>
 8001b6a:	4360      	muls	r0, r4
 8001b6c:	3008      	adds	r0, #8
 8001b6e:	b280      	uxth	r0, r0
}
 8001b70:	bd10      	pop	{r4, pc}

08001b72 <sub_bytes_to_symbols_sf11>:
static ot_uint sub_bytes_to_symbols_sf11(ot_int pkt_bytes, ot_int codesize) {
 8001b72:	b510      	push	{r4, lr}
 8001b74:	000c      	movs	r4, r1
    return 8 + ( ((8*pkt_bytes - 36 + 43) / 44) * codesize );
 8001b76:	00c0      	lsls	r0, r0, #3
 8001b78:	3007      	adds	r0, #7
 8001b7a:	212c      	movs	r1, #44	; 0x2c
 8001b7c:	f7fe fb4e 	bl	800021c <__divsi3>
 8001b80:	4360      	muls	r0, r4
 8001b82:	3008      	adds	r0, #8
 8001b84:	b280      	uxth	r0, r0
}
 8001b86:	bd10      	pop	{r4, pc}

08001b88 <sub_symbols_to_ti>:



static ot_uint sub_symbols_to_ti(ot_int symbols, ot_uint miti_per_sym) {
    ot_ulong miti;
    miti    = symbols * miti_per_sym;
 8001b88:	4348      	muls	r0, r1
    miti   += 1023;
 8001b8a:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <sub_symbols_to_ti+0x10>)
 8001b8c:	469c      	mov	ip, r3
 8001b8e:	4460      	add	r0, ip
    return (ot_uint)(miti >> 10);
 8001b90:	0a80      	lsrs	r0, r0, #10
 8001b92:	b280      	uxth	r0, r0
}
 8001b94:	4770      	bx	lr
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	000003ff 	.word	0x000003ff

08001b9c <rm2_rxtimeout_floor>:
                0, // 1100: FEC, extra coding, PAGE         (presently unspecified)
                0, // 1101: FEC, extra coding, SF9          (presently unspecified)
                0, // 1110: FEC, extra coding, SF7          (presently unspecified)
                0, // 1111: FEC, extra coding, SF5          (presently unspecified)
        };
    return (ot_uint)bgpkt_ti_lut[ (chan_id>>4) & 0x0F ];
 8001b9c:	0900      	lsrs	r0, r0, #4
 8001b9e:	4b01      	ldr	r3, [pc, #4]	; (8001ba4 <rm2_rxtimeout_floor+0x8>)
 8001ba0:	5c18      	ldrb	r0, [r3, r0]
}
 8001ba2:	4770      	bx	lr
 8001ba4:	080098a8 	.word	0x080098a8

08001ba8 <rm2_default_tgd>:
            0, // 1101: FEC, extra coding, SF9          (presently unspecified)
            0, // 1110: FEC, extra coding, SF7          (presently unspecified)
            0, // 1111: FEC, extra coding, SF5          (presently unspecified)
    };
    
    return (ot_uint)tgdti_lut[ (chan_id>>4) & 0x0F ];
 8001ba8:	0903      	lsrs	r3, r0, #4
 8001baa:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <rm2_default_tgd+0xc>)
 8001bac:	18c0      	adds	r0, r0, r3
 8001bae:	7c00      	ldrb	r0, [r0, #16]
}
 8001bb0:	4770      	bx	lr
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	080098a8 	.word	0x080098a8

08001bb8 <rm2_bgpkt_duration>:
    ///@note this is a little bit of a hack, using em2.state, but it's OK for this hacky implementation
    return rm2_scale_codec( phymac[0].channel, em2.state );
}


ot_uint rm2_bgpkt_duration() {
 8001bb8:	b510      	push	{r4, lr}
    return rm2_rxtimeout_floor(phymac[0].channel);
 8001bba:	4b02      	ldr	r3, [pc, #8]	; (8001bc4 <rm2_bgpkt_duration+0xc>)
 8001bbc:	7898      	ldrb	r0, [r3, #2]
 8001bbe:	f7ff ffed 	bl	8001b9c <rm2_rxtimeout_floor>
}
 8001bc2:	bd10      	pop	{r4, pc}
 8001bc4:	200026c4 	.word	0x200026c4

08001bc8 <rm2_scale_codec>:


///@todo this entire function might be done in a direct lookup table, even if in blocks.
ot_uint rm2_scale_codec(ot_u8 channel_code, ot_uint buf_bytes) {
 8001bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bca:	000e      	movs	r6, r1
    };

    ot_int codesize;
    ot_uint miti_per_sym;

    codesize        = (channel_code & 0x80) ? 4 : 5;
 8001bcc:	b243      	sxtb	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db18      	blt.n	8001c04 <rm2_scale_codec+0x3c>
 8001bd2:	2705      	movs	r7, #5
    channel_code    = (channel_code >> 4) & 3;
 8001bd4:	0900      	lsrs	r0, r0, #4
 8001bd6:	2503      	movs	r5, #3
 8001bd8:	4005      	ands	r5, r0
    miti_per_sym    = sx127x_symbol_miti(phymac[0].flags, channel_code);
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <rm2_scale_codec+0x40>)
 8001bdc:	7818      	ldrb	r0, [r3, #0]
 8001bde:	0029      	movs	r1, r5
 8001be0:	f7ff f990 	bl	8000f04 <sx127x_symbol_miti>
 8001be4:	0004      	movs	r4, r0
    buf_bytes       = converter[channel_code](buf_bytes, codesize);
 8001be6:	00ad      	lsls	r5, r5, #2
 8001be8:	4808      	ldr	r0, [pc, #32]	; (8001c0c <rm2_scale_codec+0x44>)
 8001bea:	1945      	adds	r5, r0, r5
 8001bec:	6a2b      	ldr	r3, [r5, #32]
 8001bee:	b230      	sxth	r0, r6
 8001bf0:	0039      	movs	r1, r7
 8001bf2:	4798      	blx	r3
    
    // + Also add Preamble & Sync Overhead
    // + Also add 4 or 5 symbols because LoRa TX-END is late-arriving by one symbol group
    buf_bytes  += RF_PARAM_PKT_OVERHEAD + codesize;
 8001bf4:	19c0      	adds	r0, r0, r7
 8001bf6:	b280      	uxth	r0, r0
 8001bf8:	300f      	adds	r0, #15
    
    return sub_symbols_to_ti(buf_bytes, miti_per_sym);
 8001bfa:	b200      	sxth	r0, r0
 8001bfc:	0021      	movs	r1, r4
 8001bfe:	f7ff ffc3 	bl	8001b88 <sub_symbols_to_ti>
}
 8001c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    codesize        = (channel_code & 0x80) ? 4 : 5;
 8001c04:	2704      	movs	r7, #4
 8001c06:	e7e5      	b.n	8001bd4 <rm2_scale_codec+0xc>
 8001c08:	200026c4 	.word	0x200026c4
 8001c0c:	080098a8 	.word	0x080098a8

08001c10 <rm2_txpkt_duration>:
ot_uint rm2_txpkt_duration(ot_queue* pkt_q) {
 8001c10:	b510      	push	{r4, lr}
    return rm2_scale_codec( phymac[0].channel, em2.state );
 8001c12:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <rm2_txpkt_duration+0x10>)
 8001c14:	8899      	ldrh	r1, [r3, #4]
 8001c16:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <rm2_txpkt_duration+0x14>)
 8001c18:	7898      	ldrb	r0, [r3, #2]
 8001c1a:	f7ff ffd5 	bl	8001bc8 <rm2_scale_codec>
}
 8001c1e:	bd10      	pop	{r4, pc}
 8001c20:	20002684 	.word	0x20002684
 8001c24:	200026c4 	.word	0x200026c4

08001c28 <em2_encode_newpacket>:
  * has these optimized encode and decode functions.
  *
  */

void em2_encode_newpacket() {
}
 8001c28:	4770      	bx	lr
	...

08001c2c <em2_encode_newframe>:





void em2_encode_newframe() {
 8001c2c:	b570      	push	{r4, r5, r6, lr}
        {0, 2},             // b111 : PG/BG encoded (impossible)
        };
#   endif
    ///@todo this retransmission case is broken since state was reassigned to bit counter
    /// Case where this is a retransmission.  Don't re-encode.
    if (txq.options.ubyte[UPPER] == 0) {
 8001c2e:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <em2_encode_newframe+0x114>)
 8001c30:	78db      	ldrb	r3, [r3, #3]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d104      	bne.n	8001c40 <em2_encode_newframe+0x14>
        em2.bytes = em2.state;
 8001c36:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <em2_encode_newframe+0x118>)
 8001c38:	2104      	movs	r1, #4
 8001c3a:	5e5a      	ldrsh	r2, [r3, r1]
 8001c3c:	805a      	strh	r2, [r3, #2]
#       endif

		/// Save amount of encoded bytes for this frame (last frame) in state
		em2.state = em2.bytes;
    }
}
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}
        selector = (rfctl.flags & 5) | ((phymac[0].channel >> 6) & 2);
 8001c40:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <em2_encode_newframe+0x11c>)
 8001c42:	785b      	ldrb	r3, [r3, #1]
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	2405      	movs	r4, #5
 8001c48:	4023      	ands	r3, r4
 8001c4a:	4a40      	ldr	r2, [pc, #256]	; (8001d4c <em2_encode_newframe+0x120>)
 8001c4c:	7892      	ldrb	r2, [r2, #2]
 8001c4e:	0992      	lsrs	r2, r2, #6
 8001c50:	3c03      	subs	r4, #3
 8001c52:	4014      	ands	r4, r2
 8001c54:	431c      	orrs	r4, r3
        txq.options.ubyte[LOWER]= frparams[selector][0];
 8001c56:	0062      	lsls	r2, r4, #1
 8001c58:	1912      	adds	r2, r2, r4
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	; (8001d50 <em2_encode_newframe+0x124>)
 8001c5c:	189b      	adds	r3, r3, r2
 8001c5e:	2230      	movs	r2, #48	; 0x30
 8001c60:	5c9d      	ldrb	r5, [r3, r2]
 8001c62:	4e37      	ldr	r6, [pc, #220]	; (8001d40 <em2_encode_newframe+0x114>)
 8001c64:	70b5      	strb	r5, [r6, #2]
        txq.getcursor           = txq.front + frparams[selector][1];
 8001c66:	3331      	adds	r3, #49	; 0x31
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	68f2      	ldr	r2, [r6, #12]
 8001c6c:	4694      	mov	ip, r2
 8001c6e:	4463      	add	r3, ip
 8001c70:	6073      	str	r3, [r6, #4]
        bytes_to_crc            = q_span(&txq);
 8001c72:	0030      	movs	r0, r6
 8001c74:	f005 f967 	bl	8006f46 <q_span>
 8001c78:	b282      	uxth	r2, r0
        txq.front[0]            = bytes_to_crc + frparams[selector][0];
 8001c7a:	182b      	adds	r3, r5, r0
 8001c7c:	68f1      	ldr	r1, [r6, #12]
 8001c7e:	700b      	strb	r3, [r1, #0]
        txq.front[1]            = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	68f1      	ldr	r1, [r6, #12]
 8001c84:	704b      	strb	r3, [r1, #1]
        txq.putcursor          += (frparams[selector][0] + 1);
 8001c86:	1c6b      	adds	r3, r5, #1
 8001c88:	68b1      	ldr	r1, [r6, #8]
 8001c8a:	468c      	mov	ip, r1
 8001c8c:	4463      	add	r3, ip
 8001c8e:	60b3      	str	r3, [r6, #8]
        em2.bytes               = bytes_to_crc + (frparams[selector][0] + 1);
 8001c90:	18ad      	adds	r5, r5, r2
 8001c92:	3501      	adds	r5, #1
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <em2_encode_newframe+0x118>)
 8001c96:	805d      	strh	r5, [r3, #2]
 8001c98:	2501      	movs	r5, #1
 8001c9a:	4025      	ands	r5, r4
        if ((selector & 1) == 0) {
 8001c9c:	d01f      	beq.n	8001cde <em2_encode_newframe+0xb2>
        if (selector == 0) {
 8001c9e:	2c00      	cmp	r4, #0
 8001ca0:	d025      	beq.n	8001cee <em2_encode_newframe+0xc2>
		else if (selector & 2) {
 8001ca2:	07a3      	lsls	r3, r4, #30
 8001ca4:	d516      	bpl.n	8001cd4 <em2_encode_newframe+0xa8>
		    if (selector & 1) {
 8001ca6:	2d00      	cmp	r5, #0
 8001ca8:	d024      	beq.n	8001cf4 <em2_encode_newframe+0xc8>
		        txq.front[1]= frparams[selector][2];
 8001caa:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <em2_encode_newframe+0x114>)
 8001cac:	68d9      	ldr	r1, [r3, #12]
 8001cae:	0062      	lsls	r2, r4, #1
 8001cb0:	1912      	adds	r2, r2, r4
 8001cb2:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <em2_encode_newframe+0x124>)
 8001cb4:	189b      	adds	r3, r3, r2
 8001cb6:	3332      	adds	r3, #50	; 0x32
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	704b      	strb	r3, [r1, #1]
		        em2.bytes   = 16;
 8001cbc:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <em2_encode_newframe+0x118>)
 8001cbe:	2210      	movs	r2, #16
 8001cc0:	805a      	strh	r2, [r3, #2]
		    hsc_init(&hsc, frparams[selector][2]);
 8001cc2:	0063      	lsls	r3, r4, #1
 8001cc4:	191b      	adds	r3, r3, r4
 8001cc6:	4c22      	ldr	r4, [pc, #136]	; (8001d50 <em2_encode_newframe+0x124>)
 8001cc8:	18e4      	adds	r4, r4, r3
 8001cca:	3432      	adds	r4, #50	; 0x32
 8001ccc:	7821      	ldrb	r1, [r4, #0]
 8001cce:	4821      	ldr	r0, [pc, #132]	; (8001d54 <em2_encode_newframe+0x128>)
 8001cd0:	f000 f9f0 	bl	80020b4 <hsc_init>
		em2.state = em2.bytes;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <em2_encode_newframe+0x118>)
 8001cd6:	2102      	movs	r1, #2
 8001cd8:	5e5a      	ldrsh	r2, [r3, r1]
 8001cda:	809a      	strh	r2, [r3, #4]
}
 8001cdc:	e7af      	b.n	8001c3e <em2_encode_newframe+0x12>
            crc_init_stream(&em2.crc, True, bytes_to_crc, txq.getcursor);
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <em2_encode_newframe+0x114>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	481c      	ldr	r0, [pc, #112]	; (8001d58 <em2_encode_newframe+0x12c>)
 8001ce8:	f005 f8d6 	bl	8006e98 <crc_init_stream>
 8001cec:	e7d7      	b.n	8001c9e <em2_encode_newframe+0x72>
            em2_add_crc5();
 8001cee:	f003 fbc1 	bl	8005474 <em2_add_crc5>
 8001cf2:	e7ef      	b.n	8001cd4 <em2_encode_newframe+0xa8>
		    else if (selector & 4) {
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	4223      	tst	r3, r4
 8001cf8:	d00c      	beq.n	8001d14 <em2_encode_newframe+0xe8>
		        txq.front[1]= frparams[selector][2];
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <em2_encode_newframe+0x114>)
 8001cfc:	68d9      	ldr	r1, [r3, #12]
 8001cfe:	0062      	lsls	r2, r4, #1
 8001d00:	1912      	adds	r2, r2, r4
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <em2_encode_newframe+0x124>)
 8001d04:	189b      	adds	r3, r3, r2
 8001d06:	3332      	adds	r3, #50	; 0x32
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	704b      	strb	r3, [r1, #1]
		        em2.bytes   = 32;
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <em2_encode_newframe+0x118>)
 8001d0e:	2220      	movs	r2, #32
 8001d10:	805a      	strh	r2, [r3, #2]
 8001d12:	e7d6      	b.n	8001cc2 <em2_encode_newframe+0x96>
		        txq.front[1]= RATE64;
 8001d14:	480a      	ldr	r0, [pc, #40]	; (8001d40 <em2_encode_newframe+0x114>)
 8001d16:	2300      	movs	r3, #0
 8001d18:	68c2      	ldr	r2, [r0, #12]
 8001d1a:	7053      	strb	r3, [r2, #1]
		        em2.bytes   = 16;
 8001d1c:	4d09      	ldr	r5, [pc, #36]	; (8001d44 <em2_encode_newframe+0x118>)
 8001d1e:	3310      	adds	r3, #16
 8001d20:	806b      	strh	r3, [r5, #2]
		        em2.bytes  += hsc_octetsinframe(txq.front[1], q_span(&txq)-8);
 8001d22:	68c3      	ldr	r3, [r0, #12]
 8001d24:	785e      	ldrb	r6, [r3, #1]
 8001d26:	f005 f90e 	bl	8006f46 <q_span>
 8001d2a:	0001      	movs	r1, r0
 8001d2c:	3908      	subs	r1, #8
 8001d2e:	b2c9      	uxtb	r1, r1
 8001d30:	0030      	movs	r0, r6
 8001d32:	f000 f9b1 	bl	8002098 <hsc_octetsinframe>
 8001d36:	886b      	ldrh	r3, [r5, #2]
 8001d38:	18c0      	adds	r0, r0, r3
 8001d3a:	8068      	strh	r0, [r5, #2]
 8001d3c:	e7c1      	b.n	8001cc2 <em2_encode_newframe+0x96>
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	20002d68 	.word	0x20002d68
 8001d44:	20002684 	.word	0x20002684
 8001d48:	20002644 	.word	0x20002644
 8001d4c:	200026c4 	.word	0x200026c4
 8001d50:	080098a8 	.word	0x080098a8
 8001d54:	20002228 	.word	0x20002228
 8001d58:	2000268c 	.word	0x2000268c

08001d5c <em2_encode_data>:


void em2_encode_data(void) {
 8001d5c:	b570      	push	{r4, r5, r6, lr}
/// Only encode if this if not a retransmission
    if (txq.options.ubyte[UPPER] != 0) {
 8001d5e:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <em2_encode_data+0xa8>)
 8001d60:	78db      	ldrb	r3, [r3, #3]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d035      	beq.n	8001dd2 <em2_encode_data+0x76>

        /// Do CRC of the long frame (FG/PG) or the short frame (BG)
        if (txq.options.ubyte[LOWER] != 0) {
 8001d66:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <em2_encode_data+0xa8>)
 8001d68:	789b      	ldrb	r3, [r3, #2]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <em2_encode_data+0x28>
            crc_calc_nstream(&em2.crc, em2.crc.count);
 8001d6e:	4826      	ldr	r0, [pc, #152]	; (8001e08 <em2_encode_data+0xac>)
 8001d70:	8981      	ldrh	r1, [r0, #12]
 8001d72:	3008      	adds	r0, #8
 8001d74:	f005 f8ac 	bl	8006ed0 <crc_calc_nstream>
        else {
            bgcrc8_put(txq.getcursor);
        }

#       if (M2_FEATURE(HSCODE))
        if (phymac[0].channel & 0x80) {
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <em2_encode_data+0xb0>)
 8001d7a:	789b      	ldrb	r3, [r3, #2]
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	da35      	bge.n	8001dee <em2_encode_data+0x92>
 8001d82:	e021      	b.n	8001dc8 <em2_encode_data+0x6c>
            bgcrc8_put(txq.getcursor);
 8001d84:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <em2_encode_data+0xa8>)
 8001d86:	6858      	ldr	r0, [r3, #4]
 8001d88:	f002 fbe9 	bl	800455e <bgcrc8_put>
 8001d8c:	e7f4      	b.n	8001d78 <em2_encode_data+0x1c>
            while (em2.bytes > 0) {
                hsc_encode(&hsc, hsc_iobuf, q_markbyte(&txq, hsc.infobytes));
 8001d8e:	4c20      	ldr	r4, [pc, #128]	; (8001e10 <em2_encode_data+0xb4>)
 8001d90:	2306      	movs	r3, #6
 8001d92:	5ee1      	ldrsh	r1, [r4, r3]
 8001d94:	4e1b      	ldr	r6, [pc, #108]	; (8001e04 <em2_encode_data+0xa8>)
 8001d96:	0030      	movs	r0, r6
 8001d98:	f005 f903 	bl	8006fa2 <q_markbyte>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	4d1d      	ldr	r5, [pc, #116]	; (8001e14 <em2_encode_data+0xb8>)
 8001da0:	0029      	movs	r1, r5
 8001da2:	0020      	movs	r0, r4
 8001da4:	f000 f9a2 	bl	80020ec <hsc_encode>
                hsc_init(&hsc, txq.front[1]&7);
 8001da8:	68f3      	ldr	r3, [r6, #12]
 8001daa:	785b      	ldrb	r3, [r3, #1]
 8001dac:	2107      	movs	r1, #7
 8001dae:	4019      	ands	r1, r3
 8001db0:	0020      	movs	r0, r4
 8001db2:	f000 f97f 	bl	80020b4 <hsc_init>
                sx127x_burstwrite(RFREG_LR_FIFO, 16, hsc_iobuf);
 8001db6:	002a      	movs	r2, r5
 8001db8:	2110      	movs	r1, #16
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff f9d0 	bl	8001160 <sx127x_burstwrite>
                em2.bytes -= 16;
 8001dc0:	4a11      	ldr	r2, [pc, #68]	; (8001e08 <em2_encode_data+0xac>)
 8001dc2:	8853      	ldrh	r3, [r2, #2]
 8001dc4:	3b10      	subs	r3, #16
 8001dc6:	8053      	strh	r3, [r2, #2]
            while (em2.bytes > 0) {
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <em2_encode_data+0xac>)
 8001dca:	2202      	movs	r2, #2
 8001dcc:	5e9b      	ldrsh	r3, [r3, r2]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	dcdd      	bgt.n	8001d8e <em2_encode_data+0x32>
                em2.bytes  -= fill;
                sx127x_burstwrite(RFREG_LR_FIFO, fill, q_markbyte(&txq, fill));
            }
        }
    }
}
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
                ot_int fill = (em2.bytes > 32) ? 32 : em2.bytes;
 8001dd4:	b214      	sxth	r4, r2
                em2.bytes  -= fill;
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <em2_encode_data+0xac>)
 8001dda:	8053      	strh	r3, [r2, #2]
                sx127x_burstwrite(RFREG_LR_FIFO, fill, q_markbyte(&txq, fill));
 8001ddc:	0021      	movs	r1, r4
 8001dde:	4809      	ldr	r0, [pc, #36]	; (8001e04 <em2_encode_data+0xa8>)
 8001de0:	f005 f8df 	bl	8006fa2 <q_markbyte>
 8001de4:	0002      	movs	r2, r0
 8001de6:	b2e1      	uxtb	r1, r4
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff f9b9 	bl	8001160 <sx127x_burstwrite>
            while (em2.bytes > 0) {
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <em2_encode_data+0xac>)
 8001df0:	2202      	movs	r2, #2
 8001df2:	5e9b      	ldrsh	r3, [r3, r2]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	ddec      	ble.n	8001dd2 <em2_encode_data+0x76>
                ot_int fill = (em2.bytes > 32) ? 32 : em2.bytes;
 8001df8:	1c1a      	adds	r2, r3, #0
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	ddea      	ble.n	8001dd4 <em2_encode_data+0x78>
 8001dfe:	2220      	movs	r2, #32
 8001e00:	e7e8      	b.n	8001dd4 <em2_encode_data+0x78>
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	20002d68 	.word	0x20002d68
 8001e08:	20002684 	.word	0x20002684
 8001e0c:	200026c4 	.word	0x200026c4
 8001e10:	20002228 	.word	0x20002228
 8001e14:	200002e8 	.word	0x200002e8

08001e18 <em2_decode_newpacket>:


void em2_decode_newpacket() {
/// Lora cannot support multiframe packets, so there is no difference between
/// packet and frame
}
 8001e18:	4770      	bx	lr
	...

08001e1c <em2_decode_newframe>:

void em2_decode_newframe() {
 8001e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1e:	b083      	sub	sp, #12
            5, // b101 : PG/BG (impossible)
            17, // b110 : PG, encoded
            17  // b111 : PG/BG encoded (impossible)
    };
    uint8_t selector;
    lorasf_t chansf = (phymac[0].channel >> 4) & 3;
 8001e20:	4e2a      	ldr	r6, [pc, #168]	; (8001ecc <em2_decode_newframe+0xb0>)
 8001e22:	78b2      	ldrb	r2, [r6, #2]
 8001e24:	0912      	lsrs	r2, r2, #4
 8001e26:	2503      	movs	r5, #3
 8001e28:	4015      	ands	r5, r2
#   ifdef __DECODER_DEBUG__
    hits_sv = 0;
#   endif

    /// 1. Prepare the RX Queue to receive a new frame.
    q_empty(&rxq);
 8001e2a:	4829      	ldr	r0, [pc, #164]	; (8001ed0 <em2_decode_newframe+0xb4>)
 8001e2c:	f005 f8a8 	bl	8006f80 <q_empty>

    /// The selector value is
    selector = (rfctl.flags & 5) | ((phymac[0].channel >> 6) & 2);
 8001e30:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <em2_decode_newframe+0xb8>)
 8001e32:	785b      	ldrb	r3, [r3, #1]
 8001e34:	b25b      	sxtb	r3, r3
 8001e36:	2405      	movs	r4, #5
 8001e38:	401c      	ands	r4, r3
 8001e3a:	78b3      	ldrb	r3, [r6, #2]
 8001e3c:	099b      	lsrs	r3, r3, #6
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	431c      	orrs	r4, r3
    /// provide seed information for the LLR interpolator.  Also, we need to provide
    /// default decoding setup -- lower 3 bits of front[1] are used for variable
    /// rate information.  The first frame is always RATE64, unless it's a BG frame
    /// in which case it's RATE48.
#   if (M2_FEATURE(HSCODE))
    if (selector & 2) {
 8001e44:	4222      	tst	r2, r4
 8001e46:	d125      	bne.n	8001e94 <em2_decode_newframe+0x78>
    	rxq.front[1] = rate; // initial encoding rate
    }
    else
#   endif
    {
        rxq.front[1] = 0;
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <em2_decode_newframe+0xb4>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	705a      	strb	r2, [r3, #1]
    }

    rxq.front[0]    = initial_bytes[selector];
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <em2_decode_newframe+0xb4>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4a20      	ldr	r2, [pc, #128]	; (8001ed8 <em2_decode_newframe+0xbc>)
 8001e56:	1910      	adds	r0, r2, r4
 8001e58:	2148      	movs	r1, #72	; 0x48
 8001e5a:	5c41      	ldrb	r1, [r0, r1]
 8001e5c:	7019      	strb	r1, [r3, #0]
    em2.bytes       = 0;
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <em2_decode_newframe+0xc0>)
 8001e60:	2100      	movs	r1, #0
 8001e62:	8059      	strh	r1, [r3, #2]
    em2.state       = 0;
 8001e64:	8099      	strh	r1, [r3, #4]
    em2.lctl        = bits_per_lorablock[chansf];
 8001e66:	1952      	adds	r2, r2, r5
 8001e68:	3150      	adds	r1, #80	; 0x50
 8001e6a:	5c52      	ldrb	r2, [r2, r1]
 8001e6c:	701a      	strb	r2, [r3, #0]
    em2.crc5        = 0;
 8001e6e:	2200      	movs	r2, #0
 8001e70:	705a      	strb	r2, [r3, #1]

    /// BG and PG frames are fixed-length, and they are shoehorned into the
    /// generic header structure via a special operation, here.
    if (selector & (RADIO_FLAG_BG | RADIO_FLAG_PG)) {
 8001e72:	2305      	movs	r3, #5
 8001e74:	4223      	tst	r3, r4
 8001e76:	d00b      	beq.n	8001e90 <em2_decode_newframe+0x74>
        rxq.front[1]       |= 0x20;
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <em2_decode_newframe+0xb4>)
 8001e7a:	68d9      	ldr	r1, [r3, #12]
 8001e7c:	784a      	ldrb	r2, [r1, #1]
 8001e7e:	2020      	movs	r0, #32
 8001e80:	4302      	orrs	r2, r0
 8001e82:	704a      	strb	r2, [r1, #1]
        rxq.options.ushort  = 2;
 8001e84:	2202      	movs	r2, #2
 8001e86:	805a      	strh	r2, [r3, #2]
        rxq.putcursor       = &rxq.front[2];
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	3202      	adds	r2, #2
 8001e8c:	609a      	str	r2, [r3, #8]
        rxq.getcursor       = &rxq.front[2];
 8001e8e:	605a      	str	r2, [r3, #4]
    }
}
 8001e90:	b003      	add	sp, #12
 8001e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ot_u8 rssi_nb   = sx127x_read(RFREG_LR_RSSIVALUE);
 8001e94:	201b      	movs	r0, #27
 8001e96:	f7ff f8cf 	bl	8001038 <sx127x_read>
 8001e9a:	0007      	movs	r7, r0
        ot_u8 rssi_wb   = sx127x_read(RFREG_LR_RSSIWIDEBAND);
 8001e9c:	202c      	movs	r0, #44	; 0x2c
 8001e9e:	f7ff f8cb 	bl	8001038 <sx127x_read>
    	hscrate_t rate  = (selector & RADIO_FLAG_BG) ? RATE48 : RATE64;
 8001ea2:	07e3      	lsls	r3, r4, #31
 8001ea4:	d50f      	bpl.n	8001ec6 <em2_decode_newframe+0xaa>
 8001ea6:	2606      	movs	r6, #6
    	lorallr_init(&lorallr, rate, chansf, rssi_nb, rssi_wb);
 8001ea8:	9000      	str	r0, [sp, #0]
 8001eaa:	003b      	movs	r3, r7
 8001eac:	002a      	movs	r2, r5
 8001eae:	0031      	movs	r1, r6
 8001eb0:	480b      	ldr	r0, [pc, #44]	; (8001ee0 <em2_decode_newframe+0xc4>)
 8001eb2:	f002 fa61 	bl	8004378 <lorallr_init>
    	hsc_init(&hsc, rate);
 8001eb6:	0031      	movs	r1, r6
 8001eb8:	480a      	ldr	r0, [pc, #40]	; (8001ee4 <em2_decode_newframe+0xc8>)
 8001eba:	f000 f8fb 	bl	80020b4 <hsc_init>
    	rxq.front[1] = rate; // initial encoding rate
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <em2_decode_newframe+0xb4>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	705e      	strb	r6, [r3, #1]
 8001ec4:	e7c4      	b.n	8001e50 <em2_decode_newframe+0x34>
    	hscrate_t rate  = (selector & RADIO_FLAG_BG) ? RATE48 : RATE64;
 8001ec6:	2600      	movs	r6, #0
 8001ec8:	e7ee      	b.n	8001ea8 <em2_decode_newframe+0x8c>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	200026c4 	.word	0x200026c4
 8001ed0:	20002d54 	.word	0x20002d54
 8001ed4:	20002644 	.word	0x20002644
 8001ed8:	080098a8 	.word	0x080098a8
 8001edc:	20002684 	.word	0x20002684
 8001ee0:	20002230 	.word	0x20002230
 8001ee4:	20002228 	.word	0x20002228

08001ee8 <em2_decode_data>:




void em2_decode_data(void) {
 8001ee8:	b570      	push	{r4, r5, r6, lr}
    int newbytes;
    int grab;
    ot_u8* data;

    /// Live encoder needs to track the predicted bit position over the air
    em2.state += em2.lctl;
 8001eea:	4b3f      	ldr	r3, [pc, #252]	; (8001fe8 <em2_decode_data+0x100>)
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	8899      	ldrh	r1, [r3, #4]
 8001ef0:	1852      	adds	r2, r2, r1
 8001ef2:	809a      	strh	r2, [r3, #4]

    /// 1. When using HSCODE FEC, we need to take the RSSI and SNR values and log them.
    ///    It's important to do this as close to the time of reception as possible.
#	if (M2_FEATURE(HSCODE))
    if (phymac[0].channel & 0x80) {
 8001ef4:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <em2_decode_data+0x104>)
 8001ef6:	789b      	ldrb	r3, [r3, #2]
 8001ef8:	b25b      	sxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db12      	blt.n	8001f24 <em2_decode_data+0x3c>
#   endif

    /// 2. Just download whatever fresh data is in the LoRa radio and put it
    ///    on the rx queue.  After data is on the rx queue, it will be reprocessed
    ///    if it needs to be.  The implementation here has a 32 byte SPI buffer.
    rxbytes     = sx127x_read(RFREG_LR_FIFORXBYTEADDR);
 8001efe:	2025      	movs	r0, #37	; 0x25
 8001f00:	f7ff f89a 	bl	8001038 <sx127x_read>
 8001f04:	0004      	movs	r4, r0
    rxptr       = sx127x_read(RFREG_LR_FIFOADDRPTR);
 8001f06:	200d      	movs	r0, #13
 8001f08:	f7ff f896 	bl	8001038 <sx127x_read>
    newbytes    = (int)rxbytes - (int)rxptr;
 8001f0c:	1a24      	subs	r4, r4, r0
    tim_sv[hits_sv] = LPTIM1->CNT;
    bits_sv[hits_sv] = em2.state;
    hits_sv++;
#   endif

    if (newbytes <= 0) {
 8001f0e:	2c00      	cmp	r4, #0
 8001f10:	dd40      	ble.n	8001f94 <em2_decode_data+0xac>
    }

    // rxbyte-addr is at the last loaded byte, not ahead of the last loaded byte,
    // so need to increment newbytes.
    //newbytes++;
    data = rxq.front + rxq.options.ushort + em2.bytes;
 8001f12:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <em2_decode_data+0x108>)
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	885b      	ldrh	r3, [r3, #2]
 8001f18:	4933      	ldr	r1, [pc, #204]	; (8001fe8 <em2_decode_data+0x100>)
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	5e09      	ldrsh	r1, [r1, r0]
 8001f1e:	185b      	adds	r3, r3, r1
 8001f20:	18d2      	adds	r2, r2, r3
	while (newbytes > 0) {
 8001f22:	e019      	b.n	8001f58 <em2_decode_data+0x70>
        ot_u8 rssi_wb  = sx127x_read(RFREG_LR_RSSIWIDEBAND);
 8001f24:	202c      	movs	r0, #44	; 0x2c
 8001f26:	f7ff f887 	bl	8001038 <sx127x_read>
 8001f2a:	0004      	movs	r4, r0
        ot_u8 rssi_nb  = sx127x_read(RFREG_LR_RSSIVALUE);
 8001f2c:	201b      	movs	r0, #27
 8001f2e:	f7ff f883 	bl	8001038 <sx127x_read>
 8001f32:	0001      	movs	r1, r0
        lorallr_pushsample(&lorallr, rssi_nb, rssi_wb, em2.lctl);
 8001f34:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <em2_decode_data+0x100>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	0022      	movs	r2, r4
 8001f3a:	482e      	ldr	r0, [pc, #184]	; (8001ff4 <em2_decode_data+0x10c>)
 8001f3c:	f002 fa52 	bl	80043e4 <lorallr_pushsample>
 8001f40:	e7dd      	b.n	8001efe <em2_decode_data+0x16>
	    ot_u8* loadptr;
		grab        = (newbytes > 32) ? 32 : newbytes;
		newbytes   -= grab;
 8001f42:	1a64      	subs	r4, r4, r1
		em2.bytes  += grab;
 8001f44:	4828      	ldr	r0, [pc, #160]	; (8001fe8 <em2_decode_data+0x100>)
 8001f46:	8843      	ldrh	r3, [r0, #2]
 8001f48:	185b      	adds	r3, r3, r1
 8001f4a:	8043      	strh	r3, [r0, #2]
		loadptr     = data;
		data       += grab;
 8001f4c:	1855      	adds	r5, r2, r1
		sx127x_burstread(RFREG_LR_FIFO, grab, loadptr);
 8001f4e:	b2c9      	uxtb	r1, r1
 8001f50:	2000      	movs	r0, #0
 8001f52:	f7ff f889 	bl	8001068 <sx127x_burstread>
		data       += grab;
 8001f56:	002a      	movs	r2, r5
	while (newbytes > 0) {
 8001f58:	2c00      	cmp	r4, #0
 8001f5a:	dd04      	ble.n	8001f66 <em2_decode_data+0x7e>
		grab        = (newbytes > 32) ? 32 : newbytes;
 8001f5c:	0021      	movs	r1, r4
 8001f5e:	2c20      	cmp	r4, #32
 8001f60:	ddef      	ble.n	8001f42 <em2_decode_data+0x5a>
 8001f62:	2120      	movs	r1, #32
 8001f64:	e7ed      	b.n	8001f42 <em2_decode_data+0x5a>
    /// 3. Raw data is in the queue.  If frame is unencoded, nothing more to do.
    ///    Encoded frames, on the other hand, require a substantial amount of
    ///    processing.  Decoding is block-based and occurs when a block is
    ///    available in the queue.  Blocks are 16 bytes.
#   if (M2_FEATURE(HSCODE))
	if (phymac[0].channel & 0x80) {
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <em2_decode_data+0x104>)
 8001f68:	789b      	ldrb	r3, [r3, #2]
 8001f6a:	b25b      	sxtb	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db12      	blt.n	8001f96 <em2_decode_data+0xae>
		}
	}
	else
#   endif
	{
	    rxq.putcursor   = rxq.getcursor + em2.bytes;
 8001f70:	491f      	ldr	r1, [pc, #124]	; (8001ff0 <em2_decode_data+0x108>)
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <em2_decode_data+0x100>)
 8001f74:	2202      	movs	r2, #2
 8001f76:	5e9a      	ldrsh	r2, [r3, r2]
 8001f78:	684b      	ldr	r3, [r1, #4]
 8001f7a:	189b      	adds	r3, r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
	    em2.crc5       += (em2.bytes >= 2);
 8001f7e:	2301      	movs	r3, #1
 8001f80:	2a01      	cmp	r2, #1
 8001f82:	dd26      	ble.n	8001fd2 <em2_decode_data+0xea>
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	4a18      	ldr	r2, [pc, #96]	; (8001fe8 <em2_decode_data+0x100>)
 8001f88:	7851      	ldrb	r1, [r2, #1]
 8001f8a:	185b      	adds	r3, r3, r1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	7053      	strb	r3, [r2, #1]
	    if (em2.crc5 == 1) {
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d020      	beq.n	8001fd6 <em2_decode_data+0xee>
	        if (em2_check_crc5() != 0) {
	            em2.state = -1;
	        }
	    }
	}
}
 8001f94:	bd70      	pop	{r4, r5, r6, pc}
		blcursor    = rxq.getcursor - (rxq.front + rxq.options.ushort);
 8001f96:	4916      	ldr	r1, [pc, #88]	; (8001ff0 <em2_decode_data+0x108>)
 8001f98:	684b      	ldr	r3, [r1, #4]
 8001f9a:	68ca      	ldr	r2, [r1, #12]
 8001f9c:	8849      	ldrh	r1, [r1, #2]
 8001f9e:	1852      	adds	r2, r2, r1
 8001fa0:	1a9a      	subs	r2, r3, r2
 8001fa2:	b212      	sxth	r2, r2
		em2.crc5   += (em2.bytes >= 16);
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <em2_decode_data+0x100>)
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	5e59      	ldrsh	r1, [r3, r1]
 8001faa:	2301      	movs	r3, #1
 8001fac:	290f      	cmp	r1, #15
 8001fae:	dc00      	bgt.n	8001fb2 <em2_decode_data+0xca>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <em2_decode_data+0x100>)
 8001fb6:	7844      	ldrb	r4, [r0, #1]
 8001fb8:	191b      	adds	r3, r3, r4
 8001fba:	7043      	strb	r3, [r0, #1]
		if ((em2.bytes-blcursor) >= 16) {
 8001fbc:	1a8a      	subs	r2, r1, r2
 8001fbe:	2a0f      	cmp	r2, #15
 8001fc0:	dde8      	ble.n	8001f94 <em2_decode_data+0xac>
		    sys.task_RFA.event = 6;
 8001fc2:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <em2_decode_data+0x110>)
 8001fc4:	2306      	movs	r3, #6
 8001fc6:	7103      	strb	r3, [r0, #4]
		    sys_preempt(&sys.task_RFA, 0);
 8001fc8:	3004      	adds	r0, #4
 8001fca:	2100      	movs	r1, #0
 8001fcc:	f005 fcae 	bl	800792c <sys_preempt>
 8001fd0:	e7e0      	b.n	8001f94 <em2_decode_data+0xac>
	    em2.crc5       += (em2.bytes >= 2);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e7d6      	b.n	8001f84 <em2_decode_data+0x9c>
	        if (em2_check_crc5() != 0) {
 8001fd6:	f003 fa5f 	bl	8005498 <em2_check_crc5>
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	d0da      	beq.n	8001f94 <em2_decode_data+0xac>
	            em2.state = -1;
 8001fde:	4b02      	ldr	r3, [pc, #8]	; (8001fe8 <em2_decode_data+0x100>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	4252      	negs	r2, r2
 8001fe4:	809a      	strh	r2, [r3, #4]
 8001fe6:	e7d5      	b.n	8001f94 <em2_decode_data+0xac>
 8001fe8:	20002684 	.word	0x20002684
 8001fec:	200026c4 	.word	0x200026c4
 8001ff0:	20002d54 	.word	0x20002d54
 8001ff4:	20002230 	.word	0x20002230
 8001ff8:	20002d90 	.word	0x20002d90

08001ffc <em2_decode_endframe>:
//    0xCC, 0xA0, 0x2E, 0x42, 0x65, 0x9F, 0xDD, 0xD7, 0x27, 0xDD, 0x9F, 0x95, 0x17, 0xB7, 0x5F, 0xFF
//};
//static ot_u8 rawdata_sv[32];
//#endif

ot_u16 em2_decode_endframe() {
 8001ffc:	b510      	push	{r4, lr}
/// Perform block-code error correction if available, strip blockcoding if its
/// there (after processing), and strip CRC
    ot_u16 crc_invalid;

    /// Decoder state errors (state < 1)
    if (em2.state < 1) {
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <em2_decode_endframe+0x7c>)
 8002000:	2204      	movs	r2, #4
 8002002:	5e9b      	ldrsh	r3, [r3, r2]
 8002004:	2b00      	cmp	r3, #0
 8002006:	dd35      	ble.n	8002074 <em2_decode_endframe+0x78>
        crc_invalid = 1;
    }
    else {
        /// In FEC mode, need to clean-up rxq after successful packet received
#       if (M2_FEATURE(HSCODE))
        if (phymac[0].channel & 0x80) {
 8002008:	4b1c      	ldr	r3, [pc, #112]	; (800207c <em2_decode_endframe+0x80>)
 800200a:	789b      	ldrb	r3, [r3, #2]
 800200c:	b25b      	sxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	db14      	blt.n	800203c <em2_decode_endframe+0x40>
#       endif
        {
        }

        /// BG Frame has CRC8
        if (rfctl.flags & RADIO_FLAG_BG) {
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <em2_decode_endframe+0x84>)
 8002014:	785b      	ldrb	r3, [r3, #1]
 8002016:	07db      	lsls	r3, r3, #31
 8002018:	d51a      	bpl.n	8002050 <em2_decode_endframe+0x54>
            crc_invalid = bgcrc8_check(rxq.getcursor);
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <em2_decode_endframe+0x88>)
 800201c:	6858      	ldr	r0, [r3, #4]
 800201e:	f002 fa97 	bl	8004550 <bgcrc8_check>
 8002022:	b280      	uxth	r0, r0
            /// PG, FG frames have CRC16
            crc_invalid     = crc_block(&em2.crc, False, q_span(&rxq), rxq.getcursor);
            rxq.front[0]   -= 2;
            rxq.putcursor  -= 2;
        }
        rxq.back = rxq.putcursor;
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <em2_decode_endframe+0x88>)
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	611a      	str	r2, [r3, #16]

        ///@note marker that shows packet is successfully read into driver.
        rxq.front[1] |= 0x20;
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	7853      	ldrb	r3, [r2, #1]
 800202e:	2120      	movs	r1, #32
 8002030:	430b      	orrs	r3, r1
 8002032:	7053      	strb	r3, [r2, #1]
//        errs   += ((diffbits & 0x01) != 0);
//        loralink.max_ebn0 += errs;
//    }
//#   endif

    rxq.options.ushort = 0;
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <em2_decode_endframe+0x88>)
 8002036:	2200      	movs	r2, #0
 8002038:	805a      	strh	r2, [r3, #2]
    return crc_invalid;
}
 800203a:	bd10      	pop	{r4, pc}
            rxq.getcursor   = rxq.front + rxq.options.ushort;
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <em2_decode_endframe+0x88>)
 800203e:	68d3      	ldr	r3, [r2, #12]
 8002040:	8851      	ldrh	r1, [r2, #2]
 8002042:	1859      	adds	r1, r3, r1
 8002044:	6051      	str	r1, [r2, #4]
            rxq.putcursor   = rxq.front + rxq.front[0] + 1;
 8002046:	7819      	ldrb	r1, [r3, #0]
 8002048:	3101      	adds	r1, #1
 800204a:	185b      	adds	r3, r3, r1
 800204c:	6093      	str	r3, [r2, #8]
 800204e:	e7e0      	b.n	8002012 <em2_decode_endframe+0x16>
            crc_invalid     = crc_block(&em2.crc, False, q_span(&rxq), rxq.getcursor);
 8002050:	4c0c      	ldr	r4, [pc, #48]	; (8002084 <em2_decode_endframe+0x88>)
 8002052:	0020      	movs	r0, r4
 8002054:	f004 ff77 	bl	8006f46 <q_span>
 8002058:	0002      	movs	r2, r0
 800205a:	6863      	ldr	r3, [r4, #4]
 800205c:	2100      	movs	r1, #0
 800205e:	480a      	ldr	r0, [pc, #40]	; (8002088 <em2_decode_endframe+0x8c>)
 8002060:	f004 ff5e 	bl	8006f20 <crc_block>
            rxq.front[0]   -= 2;
 8002064:	68e2      	ldr	r2, [r4, #12]
 8002066:	7813      	ldrb	r3, [r2, #0]
 8002068:	3b02      	subs	r3, #2
 800206a:	7013      	strb	r3, [r2, #0]
            rxq.putcursor  -= 2;
 800206c:	68a3      	ldr	r3, [r4, #8]
 800206e:	3b02      	subs	r3, #2
 8002070:	60a3      	str	r3, [r4, #8]
 8002072:	e7d7      	b.n	8002024 <em2_decode_endframe+0x28>
        crc_invalid = 1;
 8002074:	2001      	movs	r0, #1
 8002076:	e7dd      	b.n	8002034 <em2_decode_endframe+0x38>
 8002078:	20002684 	.word	0x20002684
 800207c:	200026c4 	.word	0x200026c4
 8002080:	20002644 	.word	0x20002644
 8002084:	20002d54 	.word	0x20002d54
 8002088:	2000268c 	.word	0x2000268c

0800208c <hsc_bytesperblock>:

uint8_t hsc_bytesperblock(hscrate_t rate) {
	static const uint8_t infobits_select[8] = {
	        8, 9, 10, 11, 12, 13, 6, 6
	};
	return infobits_select[rate];
 800208c:	4b01      	ldr	r3, [pc, #4]	; (8002094 <hsc_bytesperblock+0x8>)
 800208e:	5c18      	ldrb	r0, [r3, r0]
}
 8002090:	4770      	bx	lr
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	080099a4 	.word	0x080099a4

08002098 <hsc_octetsinframe>:
	return infobits_select[rate];
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <hsc_octetsinframe+0x18>)

uint16_t hsc_octetsinframe(hscrate_t rate, uint8_t databytes) {
 800209a:	b510      	push	{r4, lr}
	uint16_t foctets;
	uint16_t block;

	block	= (uint16_t)hsc_bytesperblock(rate);
	foctets = ((uint16_t)databytes + (block-1)) / block;
 800209c:	5c1b      	ldrb	r3, [r3, r0]
 800209e:	1e58      	subs	r0, r3, #1
 80020a0:	1840      	adds	r0, r0, r1
 80020a2:	0019      	movs	r1, r3
 80020a4:	f7fe f8ba 	bl	800021c <__divsi3>

	return (foctets << 4);
 80020a8:	0100      	lsls	r0, r0, #4
 80020aa:	b280      	uxth	r0, r0
}
 80020ac:	bd10      	pop	{r4, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	080099a4 	.word	0x080099a4

080020b4 <hsc_init>:



void hsc_init(hsc_t* h, hscrate_t rate) {
 80020b4:	b510      	push	{r4, lr}
    static const uint8_t* const fbit_select[8] = {
        fbit64, fbit72, fbit80, fbit88, fbit96, fbit104, fbit48, fbit48
    };

    assert(h);
 80020b6:	2800      	cmp	r0, #0
 80020b8:	d009      	beq.n	80020ce <hsc_init+0x1a>
    
    h->fbit        = fbit_select[rate];
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <hsc_init+0x2c>)
 80020bc:	008a      	lsls	r2, r1, #2
 80020be:	189a      	adds	r2, r3, r2
    h->infobytes   = hsc_bytesperblock(rate);
 80020c0:	5c5b      	ldrb	r3, [r3, r1]
    h->fbit        = fbit_select[rate];
 80020c2:	6951      	ldr	r1, [r2, #20]
    h->infobits    = h->infobytes << 3;
 80020c4:	00da      	lsls	r2, r3, #3
    h->fbit        = fbit_select[rate];
 80020c6:	6001      	str	r1, [r0, #0]
    h->infobytes   = hsc_bytesperblock(rate);
 80020c8:	80c3      	strh	r3, [r0, #6]
    h->infobits    = h->infobytes << 3;
 80020ca:	8082      	strh	r2, [r0, #4]
}
 80020cc:	bd10      	pop	{r4, pc}
    assert(h);
 80020ce:	218c      	movs	r1, #140	; 0x8c
 80020d0:	4a03      	ldr	r2, [pc, #12]	; (80020e0 <hsc_init+0x2c>)
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <hsc_init+0x30>)
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <hsc_init+0x34>)
 80020d6:	3208      	adds	r2, #8
 80020d8:	0089      	lsls	r1, r1, #2
 80020da:	f006 fac1 	bl	8008660 <__assert_func>
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	080099a4 	.word	0x080099a4
 80020e4:	0800a6b0 	.word	0x0800a6b0
 80020e8:	0800a6b4 	.word	0x0800a6b4

080020ec <hsc_encode>:
}




void hsc_encode(hsc_t* h, void* output, const uint8_t* input) {
 80020ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ee:	46de      	mov	lr, fp
 80020f0:	464e      	mov	r6, r9
 80020f2:	4645      	mov	r5, r8
 80020f4:	4657      	mov	r7, sl
 80020f6:	b5e0      	push	{r5, r6, r7, lr}
 80020f8:	b087      	sub	sp, #28
 80020fa:	000c      	movs	r4, r1
 80020fc:	0006      	movs	r6, r0
 80020fe:	0015      	movs	r5, r2
    int i;
    int j;
    uint8_t x[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8002100:	2100      	movs	r1, #0
 8002102:	2210      	movs	r2, #16
 8002104:	a802      	add	r0, sp, #8
 8002106:	f006 fad9 	bl	80086bc <memset>
    uint8_t* y;
    
    /// Zero output, and copy input to output
    ((uint32_t*)output)[0]  = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	6023      	str	r3, [r4, #0]
    ((uint32_t*)output)[1]  = 0;
 800210e:	6063      	str	r3, [r4, #4]
    ((uint32_t*)output)[2]  = 0;
 8002110:	60a3      	str	r3, [r4, #8]
    ((uint32_t*)output)[3]  = 0;
 8002112:	60e3      	str	r3, [r4, #12]
    memcpy(output, input, h->infobytes);
 8002114:	0020      	movs	r0, r4
 8002116:	88f2      	ldrh	r2, [r6, #6]
 8002118:	0029      	movs	r1, r5
 800211a:	f006 fa23 	bl	8008564 <ot_memcpy>
    
    /// "y" variable is linked to output and only relevant for typing purposes.
    /// Copy input to the output, and add CRC
    y               = output;
    y[h->infobytes] = crccalc(y, h->infobytes);
 800211e:	88f3      	ldrh	r3, [r6, #6]
 8002120:	18e0      	adds	r0, r4, r3
    while (--len >= 0) {
 8002122:	2b00      	cmp	r3, #0
 8002124:	d100      	bne.n	8002128 <hsc_encode+0x3c>
 8002126:	e0d9      	b.n	80022dc <hsc_encode+0x1f0>
 8002128:	0021      	movs	r1, r4
    uint8_t reg = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	4d6c      	ldr	r5, [pc, #432]	; (80022e0 <hsc_encode+0x1f4>)
        reg = CRCTABLE[reg ^ *block++];
 800212e:	780a      	ldrb	r2, [r1, #0]
 8002130:	3101      	adds	r1, #1
 8002132:	4053      	eors	r3, r2
 8002134:	5ceb      	ldrb	r3, [r5, r3]
    while (--len >= 0) {
 8002136:	4288      	cmp	r0, r1
 8002138:	d1f9      	bne.n	800212e <hsc_encode+0x42>
    y[h->infobytes] = crccalc(y, h->infobytes);
 800213a:	7003      	strb	r3, [r0, #0]
    /// Polarization Stage 1: rate dependent
    ///@todo there is a bit relocation instruction on cortex M4 that can be used
    ///      to optimize this loop.  Basically, relocate a bit from y[i>>3] to
    ///      position from rseqbyte[i][1] in x[rseqbyte[i][0]]
    for (i=0; i<h->infobits+CRCBITS; i++) {
        uint8_t a = (y[i>>3] >> (7-(i&7))) & 1;
 800213c:	2207      	movs	r2, #7
    for (i=0; i<h->infobits+CRCBITS; i++) {
 800213e:	2300      	movs	r3, #0
 8002140:	88b6      	ldrh	r6, [r6, #4]
 8002142:	4868      	ldr	r0, [pc, #416]	; (80022e4 <hsc_encode+0x1f8>)
 8002144:	3606      	adds	r6, #6
 8002146:	250f      	movs	r5, #15
 8002148:	2100      	movs	r1, #0
        uint8_t a = (y[i>>3] >> (7-(i&7))) & 1;
 800214a:	4694      	mov	ip, r2
 800214c:	2701      	movs	r7, #1
 800214e:	4698      	mov	r8, r3
 8002150:	e003      	b.n	800215a <hsc_encode+0x6e>
 8002152:	7845      	ldrb	r5, [r0, #1]
 8002154:	3002      	adds	r0, #2
 8002156:	5d53      	ldrb	r3, [r2, r5]
 8002158:	4698      	mov	r8, r3
 800215a:	4662      	mov	r2, ip
 800215c:	10cb      	asrs	r3, r1, #3
 800215e:	5ce3      	ldrb	r3, [r4, r3]
 8002160:	438a      	bics	r2, r1
 8002162:	4113      	asrs	r3, r2
        x[rseqbyte[i][0]] |= a << rseqbyte[i][1];
 8002164:	7802      	ldrb	r2, [r0, #0]
 8002166:	403b      	ands	r3, r7
 8002168:	4093      	lsls	r3, r2
 800216a:	4642      	mov	r2, r8
    for (i=0; i<h->infobits+CRCBITS; i++) {
 800216c:	3101      	adds	r1, #1
        x[rseqbyte[i][0]] |= a << rseqbyte[i][1];
 800216e:	4313      	orrs	r3, r2
 8002170:	aa02      	add	r2, sp, #8
 8002172:	5553      	strb	r3, [r2, r5]
    for (i=0; i<h->infobits+CRCBITS; i++) {
 8002174:	42b1      	cmp	r1, r6
 8002176:	ddec      	ble.n	8002152 <hsc_encode+0x66>
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002178:	2301      	movs	r3, #1
 800217a:	469a      	mov	sl, r3
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 800217c:	333f      	adds	r3, #63	; 0x3f
 800217e:	4699      	mov	r9, r3
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002180:	3b20      	subs	r3, #32
 8002182:	4698      	mov	r8, r3
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 8002184:	9b05      	ldr	r3, [sp, #20]
 8002186:	9e02      	ldr	r6, [sp, #8]
 8002188:	469c      	mov	ip, r3
 800218a:	4d57      	ldr	r5, [pc, #348]	; (80022e8 <hsc_encode+0x1fc>)
 800218c:	0073      	lsls	r3, r6, #1
 800218e:	402b      	ands	r3, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 8002190:	4f56      	ldr	r7, [pc, #344]	; (80022ec <hsc_encode+0x200>)
        ((uint32_t*)x)[i] ^= a;
 8002192:	405e      	eors	r6, r3
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 8002194:	00b3      	lsls	r3, r6, #2
 8002196:	403b      	ands	r3, r7
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 8002198:	9803      	ldr	r0, [sp, #12]
 800219a:	0021      	movs	r1, r4
        ((uint32_t*)x)[i] ^= a;
 800219c:	4073      	eors	r3, r6
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 800219e:	4c54      	ldr	r4, [pc, #336]	; (80022f0 <hsc_encode+0x204>)
 80021a0:	011e      	lsls	r6, r3, #4
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 80021a2:	9a04      	ldr	r2, [sp, #16]
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 80021a4:	4026      	ands	r6, r4
 80021a6:	46a3      	mov	fp, r4
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 80021a8:	0044      	lsls	r4, r0, #1
 80021aa:	402c      	ands	r4, r5
        ((uint32_t*)x)[i] ^= a;
 80021ac:	4044      	eors	r4, r0
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 80021ae:	0050      	lsls	r0, r2, #1
 80021b0:	4028      	ands	r0, r5
        ((uint32_t*)x)[i] ^= a;
 80021b2:	4050      	eors	r0, r2
        uint32_t a = (((uint32_t*)x)[i] & 0x55555555) << 1;
 80021b4:	4662      	mov	r2, ip
 80021b6:	0052      	lsls	r2, r2, #1
 80021b8:	402a      	ands	r2, r5
        ((uint32_t*)x)[i] ^= a;
 80021ba:	4665      	mov	r5, ip
 80021bc:	406a      	eors	r2, r5
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80021be:	4d4d      	ldr	r5, [pc, #308]	; (80022f4 <hsc_encode+0x208>)
        ((uint32_t*)x)[i] ^= a;
 80021c0:	4073      	eors	r3, r6
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80021c2:	46ac      	mov	ip, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 80021c4:	00a5      	lsls	r5, r4, #2
 80021c6:	403d      	ands	r5, r7
        ((uint32_t*)x)[i] ^= a;
 80021c8:	406c      	eors	r4, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 80021ca:	0085      	lsls	r5, r0, #2
 80021cc:	403d      	ands	r5, r7
        ((uint32_t*)x)[i] ^= a;
 80021ce:	4068      	eors	r0, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x33333333) << 2;
 80021d0:	0095      	lsls	r5, r2, #2
 80021d2:	403d      	ands	r5, r7
        ((uint32_t*)x)[i] ^= a;
 80021d4:	406a      	eors	r2, r5
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80021d6:	4665      	mov	r5, ip
 80021d8:	0a1e      	lsrs	r6, r3, #8
 80021da:	402e      	ands	r6, r5
        ((uint32_t*)x)[i] ^= a;
 80021dc:	4073      	eors	r3, r6
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 80021de:	465e      	mov	r6, fp
 80021e0:	0125      	lsls	r5, r4, #4
 80021e2:	4035      	ands	r5, r6
        ((uint32_t*)x)[i] ^= a;
 80021e4:	406c      	eors	r4, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 80021e6:	0105      	lsls	r5, r0, #4
 80021e8:	4035      	ands	r5, r6
        ((uint32_t*)x)[i] ^= a;
 80021ea:	4068      	eors	r0, r5
        uint32_t a = (((uint32_t*)x)[i] & 0x0F0F0F0F) << 4;
 80021ec:	0115      	lsls	r5, r2, #4
 80021ee:	4035      	ands	r5, r6
        ((uint32_t*)x)[i] ^= a;
 80021f0:	406a      	eors	r2, r5
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80021f2:	4665      	mov	r5, ip
        uint32_t a = (((uint32_t*)x)[i] & 0xFFFF0000) >> 16;
 80021f4:	0c1e      	lsrs	r6, r3, #16
        ((uint32_t*)x)[i] ^= a;
 80021f6:	405e      	eors	r6, r3
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 80021f8:	0a23      	lsrs	r3, r4, #8
 80021fa:	402b      	ands	r3, r5
        ((uint32_t*)x)[i] ^= a;
 80021fc:	405c      	eors	r4, r3
        uint32_t a = (((uint32_t*)x)[i] & 0xFFFF0000) >> 16;
 80021fe:	0c23      	lsrs	r3, r4, #16
        ((uint32_t*)x)[i] ^= a;
 8002200:	405c      	eors	r4, r3
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 8002202:	0a03      	lsrs	r3, r0, #8
 8002204:	402b      	ands	r3, r5
        ((uint32_t*)x)[i] ^= a;
 8002206:	4058      	eors	r0, r3
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 8002208:	4663      	mov	r3, ip
        uint32_t a = (((uint32_t*)x)[i] & 0xFFFF0000) >> 16;
 800220a:	0c07      	lsrs	r7, r0, #16
        ((uint32_t*)x)[i] ^= a;
 800220c:	4047      	eors	r7, r0
 800220e:	483a      	ldr	r0, [pc, #232]	; (80022f8 <hsc_encode+0x20c>)
        uint32_t a = (((uint32_t*)x)[i] & 0xFF00FF00) >> 8;
 8002210:	0a15      	lsrs	r5, r2, #8
 8002212:	401d      	ands	r5, r3
 8002214:	1c43      	adds	r3, r0, #1
 8002216:	33ff      	adds	r3, #255	; 0xff
 8002218:	469c      	mov	ip, r3
        ((uint32_t*)x)[i] ^= a;
 800221a:	406a      	eors	r2, r5
        uint32_t a = (((uint32_t*)x)[i] & 0xFFFF0000) >> 16;
 800221c:	0c15      	lsrs	r5, r2, #16
        ((uint32_t*)x)[i] ^= a;
 800221e:	406a      	eors	r2, r5
    ((uint32_t*)x)[0] ^= ((uint32_t*)x)[1];
 8002220:	4066      	eors	r6, r4
    ((uint32_t*)x)[2] ^= ((uint32_t*)x)[3];
 8002222:	4057      	eors	r7, r2
    ((uint32_t*)x)[1] ^= ((uint32_t*)x)[3];
 8002224:	4054      	eors	r4, r2
    ((uint32_t*)x)[0] ^= ((uint32_t*)x)[2];
 8002226:	407e      	eors	r6, r7
    ((uint32_t*)x)[1] ^= ((uint32_t*)x)[3];
 8002228:	9403      	str	r4, [sp, #12]
        ((uint32_t*)x)[i] ^= a;
 800222a:	9205      	str	r2, [sp, #20]
    ((uint32_t*)x)[0] ^= ((uint32_t*)x)[2];
 800222c:	9602      	str	r6, [sp, #8]
    ((uint32_t*)x)[2] ^= ((uint32_t*)x)[3];
 800222e:	9704      	str	r7, [sp, #16]
 8002230:	9101      	str	r1, [sp, #4]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 8002232:	7804      	ldrb	r4, [r0, #0]
 8002234:	a902      	add	r1, sp, #8
 8002236:	7845      	ldrb	r5, [r0, #1]
 8002238:	5d0f      	ldrb	r7, [r1, r4]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 800223a:	7b82      	ldrb	r2, [r0, #14]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 800223c:	412f      	asrs	r7, r5
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 800223e:	7883      	ldrb	r3, [r0, #2]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002240:	7906      	ldrb	r6, [r0, #4]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002242:	5c8c      	ldrb	r4, [r1, r2]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002244:	5cca      	ldrb	r2, [r1, r3]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002246:	5d8b      	ldrb	r3, [r1, r6]
        y[j]    = ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 7; i++;
 8002248:	01f9      	lsls	r1, r7, #7
 800224a:	468b      	mov	fp, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 800224c:	7bc5      	ldrb	r5, [r0, #15]
 800224e:	4651      	mov	r1, sl
 8002250:	412c      	asrs	r4, r5
 8002252:	465f      	mov	r7, fp
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002254:	78c5      	ldrb	r5, [r0, #3]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002256:	400c      	ands	r4, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002258:	412a      	asrs	r2, r5
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 800225a:	7985      	ldrb	r5, [r0, #6]
 800225c:	a902      	add	r1, sp, #8
 800225e:	5d4e      	ldrb	r6, [r1, r5]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002260:	7945      	ldrb	r5, [r0, #5]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002262:	4327      	orrs	r7, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002264:	412b      	asrs	r3, r5
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 8002266:	7a05      	ldrb	r5, [r0, #8]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002268:	46bb      	mov	fp, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 800226a:	5d4d      	ldrb	r5, [r1, r5]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 800226c:	4649      	mov	r1, r9
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 800226e:	79c4      	ldrb	r4, [r0, #7]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002270:	0192      	lsls	r2, r2, #6
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 8002272:	4126      	asrs	r6, r4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 8002274:	7a84      	ldrb	r4, [r0, #10]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 6; i++;
 8002276:	400a      	ands	r2, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 8002278:	a902      	add	r1, sp, #8
 800227a:	5d0c      	ldrb	r4, [r1, r4]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 800227c:	4659      	mov	r1, fp
 800227e:	4311      	orrs	r1, r2
 8002280:	468b      	mov	fp, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002282:	4641      	mov	r1, r8
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 8002284:	7b02      	ldrb	r2, [r0, #12]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 5; i++;
 8002286:	015b      	lsls	r3, r3, #5
 8002288:	400b      	ands	r3, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 800228a:	a902      	add	r1, sp, #8
 800228c:	5c8a      	ldrb	r2, [r1, r2]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 800228e:	4659      	mov	r1, fp
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 8002290:	7a47      	ldrb	r7, [r0, #9]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 8002292:	430b      	orrs	r3, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 8002294:	413d      	asrs	r5, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 8002296:	7ac7      	ldrb	r7, [r0, #11]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 8002298:	2110      	movs	r1, #16
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 800229a:	413c      	asrs	r4, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 800229c:	7b47      	ldrb	r7, [r0, #13]
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 800229e:	0136      	lsls	r6, r6, #4
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 80022a0:	413a      	asrs	r2, r7
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 4; i++;
 80022a2:	400e      	ands	r6, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 3; i++;
 80022a4:	00ed      	lsls	r5, r5, #3
 80022a6:	3908      	subs	r1, #8
 80022a8:	400d      	ands	r5, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80022aa:	4333      	orrs	r3, r6
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 2; i++;
 80022ac:	3904      	subs	r1, #4
 80022ae:	00a4      	lsls	r4, r4, #2
 80022b0:	400c      	ands	r4, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80022b2:	432b      	orrs	r3, r5
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 1; i++;
 80022b4:	0052      	lsls	r2, r2, #1
 80022b6:	3902      	subs	r1, #2
 80022b8:	400a      	ands	r2, r1
        y[j]   |= ((x[rbyte[i][0]] >> rbyte[i][1]) & 1) << 0; i++;
 80022ba:	4323      	orrs	r3, r4
 80022bc:	4313      	orrs	r3, r2
 80022be:	9a01      	ldr	r2, [sp, #4]
 80022c0:	3010      	adds	r0, #16
 80022c2:	7013      	strb	r3, [r2, #0]
 80022c4:	0013      	movs	r3, r2
 80022c6:	3301      	adds	r3, #1
 80022c8:	9301      	str	r3, [sp, #4]
    for (i=0, j=0; i<BLOCKLENGTH; j++) {
 80022ca:	4560      	cmp	r0, ip
 80022cc:	d1b1      	bne.n	8002232 <hsc_encode+0x146>
    }

    /// The encoding is written to "output" via "y"
}
 80022ce:	b007      	add	sp, #28
 80022d0:	bc3c      	pop	{r2, r3, r4, r5}
 80022d2:	4690      	mov	r8, r2
 80022d4:	4699      	mov	r9, r3
 80022d6:	46a2      	mov	sl, r4
 80022d8:	46ab      	mov	fp, r5
 80022da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t reg = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	e72c      	b.n	800213a <hsc_encode+0x4e>
 80022e0:	08009e98 	.word	0x08009e98
 80022e4:	08009c19 	.word	0x08009c19
 80022e8:	aaaaaaaa 	.word	0xaaaaaaaa
 80022ec:	cccccccc 	.word	0xcccccccc
 80022f0:	f0f0f0f0 	.word	0xf0f0f0f0
 80022f4:	00ff00ff 	.word	0x00ff00ff
 80022f8:	08009d98 	.word	0x08009d98

080022fc <hsc_decode>:



uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 80022fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fe:	46de      	mov	lr, fp
 8002300:	4657      	mov	r7, sl
 8002302:	464e      	mov	r6, r9
 8002304:	4645      	mov	r5, r8
 8002306:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t crcreg;
    int i;
    int num_paths;
    
    /// Zero intermediate buffers
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 8002308:	4f8b      	ldr	r7, [pc, #556]	; (8002538 <hsc_decode+0x23c>)
uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 800230a:	b099      	sub	sp, #100	; 0x64
 800230c:	9008      	str	r0, [sp, #32]
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 800230e:	0038      	movs	r0, r7
uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 8002310:	910b      	str	r1, [sp, #44]	; 0x2c
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 8002312:	301c      	adds	r0, #28
uint8_t hsc_decode(hsc_t* h, uint8_t* output, const llr_t* llrinput) {
 8002314:	920c      	str	r2, [sp, #48]	; 0x30
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 8002316:	2100      	movs	r1, #0
 8002318:	2207      	movs	r2, #7
 800231a:	f006 f957 	bl	80085cc <ot_memset_4>
    ot_memset_4(PRIBIT(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 800231e:	0038      	movs	r0, r7
 8002320:	2207      	movs	r2, #7
 8002322:	2100      	movs	r1, #0
 8002324:	f006 f952 	bl	80085cc <ot_memset_4>
    ot_memset_4(PM(h), 0, LISTSIZE/4);
 8002328:	0038      	movs	r0, r7
 800232a:	2201      	movs	r2, #1
 800232c:	2100      	movs	r1, #0
 800232e:	3038      	adds	r0, #56	; 0x38
 8002330:	f006 f94c 	bl	80085cc <ot_memset_4>
    /// num_paths intializes as 1, will expand to LISTSIZE
    num_paths = 1;

    /// Outer Decoding Loop.
    /// Runs once per each bit in the Block (128 iteration)
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 8002334:	2100      	movs	r1, #0
 8002336:	9105      	str	r1, [sp, #20]
    num_paths = 1;
 8002338:	3101      	adds	r1, #1
 800233a:	468a      	mov	sl, r1
    PRIORITY(h)[0] = 0;
 800233c:	2348      	movs	r3, #72	; 0x48
 800233e:	2200      	movs	r2, #0
                // update new paths dependencies
                // - deepest layers are taken from parent
                // - all bits are copied
                if (l != lr) {
                    int lmd = max_lmd;
                    switch (max_lmd-min_lmd) {
 8002340:	46d3      	mov	fp, sl
 8002342:	497e      	ldr	r1, [pc, #504]	; (800253c <hsc_decode+0x240>)
    PRIORITY(h)[0] = 0;
 8002344:	54fa      	strb	r2, [r7, r3]
 8002346:	910a      	str	r1, [sp, #40]	; 0x28
 8002348:	497d      	ldr	r1, [pc, #500]	; (8002540 <hsc_decode+0x244>)
                    switch (max_lmd-min_lmd) {
 800234a:	4b7e      	ldr	r3, [pc, #504]	; (8002544 <hsc_decode+0x248>)
 800234c:	9102      	str	r1, [sp, #8]
 800234e:	497e      	ldr	r1, [pc, #504]	; (8002548 <hsc_decode+0x24c>)
 8002350:	9312      	str	r3, [sp, #72]	; 0x48
 8002352:	9106      	str	r1, [sp, #24]
 8002354:	497d      	ldr	r1, [pc, #500]	; (800254c <hsc_decode+0x250>)
 8002356:	9109      	str	r1, [sp, #36]	; 0x24
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 8002358:	497d      	ldr	r1, [pc, #500]	; (8002550 <hsc_decode+0x254>)
 800235a:	910d      	str	r1, [sp, #52]	; 0x34
            int min_lmd = minlambda_lut[phi];
 800235c:	497d      	ldr	r1, [pc, #500]	; (8002554 <hsc_decode+0x258>)
 800235e:	9110      	str	r1, [sp, #64]	; 0x40
                        case 1: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
                        case 0: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];
                       default: break;
                    }
                    lmd = max_lmd;
                    switch (max_lmd) {
 8002360:	497d      	ldr	r1, [pc, #500]	; (8002558 <hsc_decode+0x25c>)
 8002362:	9111      	str	r1, [sp, #68]	; 0x44
        int next_pt     = (1 << lmd0);
 8002364:	2201      	movs	r2, #1
        int lmd0        = lambda_lut[phi];
 8002366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002368:	9905      	ldr	r1, [sp, #20]
 800236a:	5c58      	ldrb	r0, [r3, r1]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 800236c:	2302      	movs	r3, #2
        int next_pt     = (1 << lmd0);
 800236e:	4082      	lsls	r2, r0
        bool use_gfunc  = (bool)(phi & next_pt);
 8002370:	4011      	ands	r1, r2
        int next_pt     = (1 << lmd0);
 8002372:	4694      	mov	ip, r2
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8002374:	4083      	lsls	r3, r0
        bool use_gfunc  = (bool)(phi & next_pt);
 8002376:	1e4a      	subs	r2, r1, #1
 8002378:	4191      	sbcs	r1, r2
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 800237a:	1e5a      	subs	r2, r3, #1
        bool use_gfunc  = (bool)(phi & next_pt);
 800237c:	b2c9      	uxtb	r1, r1
        int lmd0        = lambda_lut[phi];
 800237e:	9004      	str	r0, [sp, #16]
        bool use_gfunc  = (bool)(phi & next_pt);
 8002380:	9103      	str	r1, [sp, #12]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8002382:	2a00      	cmp	r2, #0
 8002384:	dc00      	bgt.n	8002388 <hsc_decode+0x8c>
 8002386:	e0f0      	b.n	800256a <hsc_decode+0x26e>
 8002388:	4974      	ldr	r1, [pc, #464]	; (800255c <hsc_decode+0x260>)
 800238a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800238c:	4688      	mov	r8, r1
 800238e:	4443      	add	r3, r8
 8002390:	46a8      	mov	r8, r5
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 8002392:	4659      	mov	r1, fp
 8002394:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	4443      	add	r3, r8
 800239a:	46a8      	mov	r8, r5
 800239c:	1e4c      	subs	r4, r1, #1
 800239e:	4970      	ldr	r1, [pc, #448]	; (8002560 <hsc_decode+0x264>)
 80023a0:	00d0      	lsls	r0, r2, #3
 80023a2:	9d02      	ldr	r5, [sp, #8]
 80023a4:	1841      	adds	r1, r0, r1
 80023a6:	4441      	add	r1, r8
 80023a8:	46a8      	mov	r8, r5
 80023aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80023ac:	4440      	add	r0, r8
 80023ae:	46a8      	mov	r8, r5
 80023b0:	4665      	mov	r5, ip
 80023b2:	00a4      	lsls	r4, r4, #2
 80023b4:	4444      	add	r4, r8
 80023b6:	9407      	str	r4, [sp, #28]
 80023b8:	0054      	lsls	r4, r2, #1
 80023ba:	9400      	str	r4, [sp, #0]
 80023bc:	9501      	str	r5, [sp, #4]
 80023be:	46bc      	mov	ip, r7
 80023c0:	9c00      	ldr	r4, [sp, #0]
 80023c2:	e031      	b.n	8002428 <hsc_decode+0x12c>
    llr_t a_inv = -llr_layer_a;
 80023c4:	426f      	negs	r7, r5
 80023c6:	46b8      	mov	r8, r7
    llr_t b_inv = -llr_layer_b;
 80023c8:	4277      	negs	r7, r6
 80023ca:	46b9      	mov	r9, r7
    if (llr_layer_a < llr_layer_b) {
 80023cc:	42b5      	cmp	r5, r6
 80023ce:	da00      	bge.n	80023d2 <hsc_decode+0xd6>
 80023d0:	e094      	b.n	80024fc <hsc_decode+0x200>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 80023d2:	0035      	movs	r5, r6
 80023d4:	4546      	cmp	r6, r8
 80023d6:	da00      	bge.n	80023da <hsc_decode+0xde>
 80023d8:	4645      	mov	r5, r8
				for (int l=0; l<num_paths; l++) {
 80023da:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80023dc:	601d      	str	r5, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 80023de:	2c01      	cmp	r4, #1
 80023e0:	d015      	beq.n	800240e <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 80023e2:	0035      	movs	r5, r6
 80023e4:	4546      	cmp	r6, r8
 80023e6:	da00      	bge.n	80023ea <hsc_decode+0xee>
 80023e8:	4645      	mov	r5, r8
				for (int l=0; l<num_paths; l++) {
 80023ea:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80023ec:	605d      	str	r5, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 80023ee:	2c02      	cmp	r4, #2
 80023f0:	d00d      	beq.n	800240e <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 80023f2:	0035      	movs	r5, r6
 80023f4:	4546      	cmp	r6, r8
 80023f6:	da00      	bge.n	80023fa <hsc_decode+0xfe>
 80023f8:	4645      	mov	r5, r8
				for (int l=0; l<num_paths; l++) {
 80023fa:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80023fc:	609d      	str	r5, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 80023fe:	2c03      	cmp	r4, #3
 8002400:	d005      	beq.n	800240e <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 8002402:	46b1      	mov	r9, r6
 8002404:	4546      	cmp	r6, r8
 8002406:	da00      	bge.n	800240a <hsc_decode+0x10e>
 8002408:	46c1      	mov	r9, r8
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 800240a:	464c      	mov	r4, r9
 800240c:	60dc      	str	r4, [r3, #12]
            if (beta == next_pt) {
 800240e:	9c01      	ldr	r4, [sp, #4]
 8002410:	4294      	cmp	r4, r2
 8002412:	d056      	beq.n	80024c2 <hsc_decode+0x1c6>
 8002414:	9c00      	ldr	r4, [sp, #0]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8002416:	3a01      	subs	r2, #1
 8002418:	3c02      	subs	r4, #2
 800241a:	9400      	str	r4, [sp, #0]
 800241c:	3b10      	subs	r3, #16
 800241e:	3808      	subs	r0, #8
 8002420:	3908      	subs	r1, #8
 8002422:	2a00      	cmp	r2, #0
 8002424:	d100      	bne.n	8002428 <hsc_decode+0x12c>
 8002426:	e09f      	b.n	8002568 <hsc_decode+0x26c>
			if (beta_x2 >= BLOCKLENGTH) {
 8002428:	2c7f      	cmp	r4, #127	; 0x7f
 800242a:	dc01      	bgt.n	8002430 <hsc_decode+0x134>
 800242c:	f000 fd10 	bl	8002e50 <hsc_decode+0xb54>
					if (use_gfunc) {
 8002430:	9f03      	ldr	r7, [sp, #12]
				llr_t llr0  = llrinput[beta_e];
 8002432:	680d      	ldr	r5, [r1, #0]
				llr_t llr1  = llrinput[beta_e+1];
 8002434:	684e      	ldr	r6, [r1, #4]
					if (use_gfunc) {
 8002436:	2f00      	cmp	r7, #0
 8002438:	d0c4      	beq.n	80023c4 <hsc_decode+0xc8>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800243a:	9f04      	ldr	r7, [sp, #16]
 800243c:	00bf      	lsls	r7, r7, #2
 800243e:	46b8      	mov	r8, r7
 8002440:	4667      	mov	r7, ip
 8002442:	4644      	mov	r4, r8
 8002444:	5d3c      	ldrb	r4, [r7, r4]
 8002446:	46a2      	mov	sl, r4
        llr_layer_a = -llr_layer_a;
 8002448:	426c      	negs	r4, r5
 800244a:	46a1      	mov	r9, r4
    if (bit_layer) {
 800244c:	4654      	mov	r4, sl
 800244e:	5d04      	ldrb	r4, [r0, r4]
 8002450:	2c00      	cmp	r4, #0
 8002452:	d100      	bne.n	8002456 <hsc_decode+0x15a>
				llr_t llr0  = llrinput[beta_e];
 8002454:	46a9      	mov	r9, r5
    return (llr_layer_b + llr_layer_a);
 8002456:	44b1      	add	r9, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002458:	464c      	mov	r4, r9
 800245a:	601c      	str	r4, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 800245c:	465c      	mov	r4, fp
 800245e:	2c01      	cmp	r4, #1
 8002460:	d0d5      	beq.n	800240e <hsc_decode+0x112>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002462:	46e1      	mov	r9, ip
 8002464:	44c1      	add	r9, r8
 8002466:	464c      	mov	r4, r9
 8002468:	7864      	ldrb	r4, [r4, #1]
 800246a:	46a2      	mov	sl, r4
        llr_layer_a = -llr_layer_a;
 800246c:	426c      	negs	r4, r5
 800246e:	46a1      	mov	r9, r4
    if (bit_layer) {
 8002470:	4654      	mov	r4, sl
 8002472:	5d04      	ldrb	r4, [r0, r4]
 8002474:	2c00      	cmp	r4, #0
 8002476:	d100      	bne.n	800247a <hsc_decode+0x17e>
				llr_t llr0  = llrinput[beta_e];
 8002478:	46a9      	mov	r9, r5
    return (llr_layer_b + llr_layer_a);
 800247a:	44b1      	add	r9, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800247c:	464c      	mov	r4, r9
 800247e:	605c      	str	r4, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 8002480:	465c      	mov	r4, fp
 8002482:	2c02      	cmp	r4, #2
 8002484:	d0c3      	beq.n	800240e <hsc_decode+0x112>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002486:	46e1      	mov	r9, ip
 8002488:	44c1      	add	r9, r8
 800248a:	464c      	mov	r4, r9
 800248c:	78a4      	ldrb	r4, [r4, #2]
 800248e:	46a2      	mov	sl, r4
        llr_layer_a = -llr_layer_a;
 8002490:	426c      	negs	r4, r5
 8002492:	46a1      	mov	r9, r4
    if (bit_layer) {
 8002494:	4654      	mov	r4, sl
 8002496:	5d04      	ldrb	r4, [r0, r4]
 8002498:	2c00      	cmp	r4, #0
 800249a:	d100      	bne.n	800249e <hsc_decode+0x1a2>
				llr_t llr0  = llrinput[beta_e];
 800249c:	46a9      	mov	r9, r5
    return (llr_layer_b + llr_layer_a);
 800249e:	44b1      	add	r9, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80024a0:	464c      	mov	r4, r9
 80024a2:	609c      	str	r4, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 80024a4:	465c      	mov	r4, fp
 80024a6:	2c03      	cmp	r4, #3
 80024a8:	d0b1      	beq.n	800240e <hsc_decode+0x112>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80024aa:	44e0      	add	r8, ip
 80024ac:	4644      	mov	r4, r8
 80024ae:	78e4      	ldrb	r4, [r4, #3]
    if (bit_layer) {
 80024b0:	5d04      	ldrb	r4, [r0, r4]
 80024b2:	2c00      	cmp	r4, #0
 80024b4:	d000      	beq.n	80024b8 <hsc_decode+0x1bc>
        llr_layer_a = -llr_layer_a;
 80024b6:	426d      	negs	r5, r5
    return (llr_layer_b + llr_layer_a);
 80024b8:	1975      	adds	r5, r6, r5
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80024ba:	60dd      	str	r5, [r3, #12]
            if (beta == next_pt) {
 80024bc:	9c01      	ldr	r4, [sp, #4]
 80024be:	4294      	cmp	r4, r2
 80024c0:	d1a8      	bne.n	8002414 <hsc_decode+0x118>
                use_gfunc   = phi & next_pt;
 80024c2:	9d05      	ldr	r5, [sp, #20]
                next_pt   >>= 1;
 80024c4:	1064      	asrs	r4, r4, #1
                use_gfunc   = phi & next_pt;
 80024c6:	4025      	ands	r5, r4
 80024c8:	1e6e      	subs	r6, r5, #1
 80024ca:	41b5      	sbcs	r5, r6
                next_pt   >>= 1;
 80024cc:	9401      	str	r4, [sp, #4]
                use_gfunc   = phi & next_pt;
 80024ce:	b2ec      	uxtb	r4, r5
 80024d0:	9403      	str	r4, [sp, #12]
                if (--lmd0 >= 0) {
 80024d2:	9c04      	ldr	r4, [sp, #16]
 80024d4:	3c01      	subs	r4, #1
 80024d6:	9404      	str	r4, [sp, #16]
 80024d8:	d49c      	bmi.n	8002414 <hsc_decode+0x118>
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 80024da:	9c04      	ldr	r4, [sp, #16]
 80024dc:	00a5      	lsls	r5, r4, #2
 80024de:	4c21      	ldr	r4, [pc, #132]	; (8002564 <hsc_decode+0x268>)
 80024e0:	46a0      	mov	r8, r4
 80024e2:	44a8      	add	r8, r5
 80024e4:	4644      	mov	r4, r8
 80024e6:	6824      	ldr	r4, [r4, #0]
 80024e8:	46a1      	mov	r9, r4
 80024ea:	9c07      	ldr	r4, [sp, #28]
 80024ec:	6b65      	ldr	r5, [r4, #52]	; 0x34
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 80024ee:	6c66      	ldr	r6, [r4, #68]	; 0x44
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 80024f0:	464c      	mov	r4, r9
 80024f2:	4025      	ands	r5, r4
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 80024f4:	4644      	mov	r4, r8
 80024f6:	4335      	orrs	r5, r6
 80024f8:	6025      	str	r5, [r4, #0]
 80024fa:	e78b      	b.n	8002414 <hsc_decode+0x118>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 80024fc:	46aa      	mov	sl, r5
 80024fe:	4546      	cmp	r6, r8
 8002500:	dc00      	bgt.n	8002504 <hsc_decode+0x208>
    llr_t b_inv = -llr_layer_b;
 8002502:	46ba      	mov	sl, r7
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8002504:	4654      	mov	r4, sl
 8002506:	601c      	str	r4, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 8002508:	465c      	mov	r4, fp
 800250a:	2c01      	cmp	r4, #1
 800250c:	d100      	bne.n	8002510 <hsc_decode+0x214>
 800250e:	e77e      	b.n	800240e <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002510:	46aa      	mov	sl, r5
 8002512:	4546      	cmp	r6, r8
 8002514:	dc00      	bgt.n	8002518 <hsc_decode+0x21c>
    llr_t b_inv = -llr_layer_b;
 8002516:	46ca      	mov	sl, r9
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8002518:	4654      	mov	r4, sl
 800251a:	605c      	str	r4, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 800251c:	465c      	mov	r4, fp
 800251e:	2c02      	cmp	r4, #2
 8002520:	d100      	bne.n	8002524 <hsc_decode+0x228>
 8002522:	e774      	b.n	800240e <hsc_decode+0x112>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002524:	4546      	cmp	r6, r8
 8002526:	dc00      	bgt.n	800252a <hsc_decode+0x22e>
 8002528:	e212      	b.n	8002950 <hsc_decode+0x654>
				for (int l=0; l<num_paths; l++) {
 800252a:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 800252c:	609d      	str	r5, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 800252e:	46a9      	mov	r9, r5
 8002530:	2c03      	cmp	r4, #3
 8002532:	d000      	beq.n	8002536 <hsc_decode+0x23a>
 8002534:	e769      	b.n	800240a <hsc_decode+0x10e>
 8002536:	e76a      	b.n	800240e <hsc_decode+0x112>
 8002538:	200002f8 	.word	0x200002f8
 800253c:	08009b98 	.word	0x08009b98
 8002540:	20000570 	.word	0x20000570
 8002544:	08009918 	.word	0x08009918
 8002548:	20000370 	.word	0x20000370
 800254c:	20000970 	.word	0x20000970
 8002550:	080099a4 	.word	0x080099a4
 8002554:	08009b18 	.word	0x08009b18
 8002558:	08009934 	.word	0x08009934
 800255c:	0fffffff 	.word	0x0fffffff
 8002560:	fffffe00 	.word	0xfffffe00
 8002564:	20000314 	.word	0x20000314
 8002568:	4667      	mov	r7, ip
        if (h->fbit[phi]) {
 800256a:	9b08      	ldr	r3, [sp, #32]
 800256c:	9a05      	ldr	r2, [sp, #20]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	5c9b      	ldrb	r3, [r3, r2]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d100      	bne.n	8002578 <hsc_decode+0x27c>
 8002576:	e1f2      	b.n	800295e <hsc_decode+0x662>
            switch (num_paths-1) {
 8002578:	465b      	mov	r3, fp
 800257a:	3b01      	subs	r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <hsc_decode+0x288>
 8002580:	f000 fc63 	bl	8002e4a <hsc_decode+0xb4e>
 8002584:	dc01      	bgt.n	800258a <hsc_decode+0x28e>
 8002586:	f000 fc49 	bl	8002e1c <hsc_decode+0xb20>
 800258a:	2b02      	cmp	r3, #2
 800258c:	d101      	bne.n	8002592 <hsc_decode+0x296>
 800258e:	f000 fc59 	bl	8002e44 <hsc_decode+0xb48>
 8002592:	2b03      	cmp	r3, #3
 8002594:	d118      	bne.n	80025c8 <hsc_decode+0x2cc>
                case 3: if (LLR(h)[1][3] < 0) { PM(h)[3] -= LLR(h)[1][3]; }
 8002596:	4a58      	ldr	r2, [pc, #352]	; (80026f8 <hsc_decode+0x3fc>)
 8002598:	69d3      	ldr	r3, [r2, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	da02      	bge.n	80025a4 <hsc_decode+0x2a8>
 800259e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80025a0:	1acb      	subs	r3, r1, r3
 80025a2:	647b      	str	r3, [r7, #68]	; 0x44
                case 2: if (LLR(h)[1][2] < 0) { PM(h)[2] -= LLR(h)[1][2]; }
 80025a4:	6993      	ldr	r3, [r2, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	da02      	bge.n	80025b0 <hsc_decode+0x2b4>
 80025aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025ac:	1acb      	subs	r3, r1, r3
 80025ae:	643b      	str	r3, [r7, #64]	; 0x40
                case 1: if (LLR(h)[1][1] < 0) { PM(h)[1] -= LLR(h)[1][1]; }
 80025b0:	6953      	ldr	r3, [r2, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da02      	bge.n	80025bc <hsc_decode+0x2c0>
 80025b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025b8:	1acb      	subs	r3, r1, r3
 80025ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                case 0: if (LLR(h)[1][0] < 0) { PM(h)[0] -= LLR(h)[1][0]; }
 80025bc:	6913      	ldr	r3, [r2, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	da02      	bge.n	80025c8 <hsc_decode+0x2cc>
 80025c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	63bb      	str	r3, [r7, #56]	; 0x38
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 80025c8:	2601      	movs	r6, #1
 80025ca:	9c02      	ldr	r4, [sp, #8]
 80025cc:	2100      	movs	r1, #0
 80025ce:	46a4      	mov	ip, r4
 80025d0:	9805      	ldr	r0, [sp, #20]
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 80025d2:	4a4a      	ldr	r2, [pc, #296]	; (80026fc <hsc_decode+0x400>)
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 80025d4:	4006      	ands	r6, r0
 80025d6:	1cb3      	adds	r3, r6, #2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4463      	add	r3, ip
 80025dc:	6019      	str	r1, [r3, #0]
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 80025de:	9906      	ldr	r1, [sp, #24]
 80025e0:	0083      	lsls	r3, r0, #2
 80025e2:	50ca      	str	r2, [r1, r3]
            }
        }


        // update bit tree
        if ((phi & 1) == 0) {
 80025e4:	2e00      	cmp	r6, #0
 80025e6:	d000      	beq.n	80025ea <hsc_decode+0x2ee>
 80025e8:	e396      	b.n	8002d18 <hsc_decode+0xa1c>
#           if WORDIFY && (LISTSIZE==4)
            *(uint32_t*)PRIBIT(h)[0] = 0x03020100;
 80025ea:	4b44      	ldr	r3, [pc, #272]	; (80026fc <hsc_decode+0x400>)
 80025ec:	603b      	str	r3, [r7, #0]
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 80025ee:	9b05      	ldr	r3, [sp, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	9305      	str	r3, [sp, #20]
 80025f4:	2b80      	cmp	r3, #128	; 0x80
 80025f6:	d000      	beq.n	80025fa <hsc_decode+0x2fe>
 80025f8:	e6b4      	b.n	8002364 <hsc_decode+0x68>
 80025fa:	46da      	mov	sl, fp
    *(uint32_t*)&indexOut[4] = 0x07060504;
 80025fc:	4658      	mov	r0, fp
    *(uint32_t*)&indexOut[0] = 0x03020100;
 80025fe:	4a3f      	ldr	r2, [pc, #252]	; (80026fc <hsc_decode+0x400>)
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8002600:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <hsc_decode+0x404>)
    *(uint32_t*)&indexOut[0] = 0x03020100;
 8002602:	677a      	str	r2, [r7, #116]	; 0x74
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8002604:	67bb      	str	r3, [r7, #120]	; 0x78
        gap    -= (gap > 1);
 8002606:	2301      	movs	r3, #1
 8002608:	2801      	cmp	r0, #1
 800260a:	dc00      	bgt.n	800260e <hsc_decode+0x312>
 800260c:	2300      	movs	r3, #0
 800260e:	1ac0      	subs	r0, r0, r3
        sorted  = (gap == 1);
 8002610:	1e43      	subs	r3, r0, #1
 8002612:	425a      	negs	r2, r3
 8002614:	4153      	adcs	r3, r2
 8002616:	b2db      	uxtb	r3, r3
 8002618:	469c      	mov	ip, r3
        for (i=0, j=gap; j<length; i++, j++) {
 800261a:	4582      	cmp	sl, r0
 800261c:	dd15      	ble.n	800264a <hsc_decode+0x34e>
 800261e:	003b      	movs	r3, r7
 8002620:	4652      	mov	r2, sl
 8002622:	3374      	adds	r3, #116	; 0x74
 8002624:	18d6      	adds	r6, r2, r3
 8002626:	1a36      	subs	r6, r6, r0
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 8002628:	781c      	ldrb	r4, [r3, #0]
 800262a:	5c1d      	ldrb	r5, [r3, r0]
 800262c:	00a1      	lsls	r1, r4, #2
 800262e:	00aa      	lsls	r2, r5, #2
 8002630:	1879      	adds	r1, r7, r1
 8002632:	18ba      	adds	r2, r7, r2
 8002634:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8002636:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002638:	4291      	cmp	r1, r2
 800263a:	dd03      	ble.n	8002644 <hsc_decode+0x348>
                sorted      = false;
 800263c:	2200      	movs	r2, #0
 800263e:	4694      	mov	ip, r2
                indexOut[i] = indexOut[j];
 8002640:	701d      	strb	r5, [r3, #0]
                indexOut[j] = k;
 8002642:	541c      	strb	r4, [r3, r0]
 8002644:	3301      	adds	r3, #1
        for (i=0, j=gap; j<length; i++, j++) {
 8002646:	42b3      	cmp	r3, r6
 8002648:	d1ee      	bne.n	8002628 <hsc_decode+0x32c>
    } while (!sorted);
 800264a:	4663      	mov	r3, ip
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0da      	beq.n	8002606 <hsc_decode+0x30a>

    /// CRC Path Check process
    /// The BITMEM buffer is reused here.  It is not needed anymore.
    ///@note DECMSG(h) replaced with BITMEM(h)
    crcreg = 0;
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 8002650:	2300      	movs	r3, #0
 8002652:	9315      	str	r3, [sp, #84]	; 0x54
        reg = CRCTABLE[reg ^ *block++];
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <hsc_decode+0x408>)
        int lp = INDEX(h)[correct_path];
        int phi;

        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
            DECMSG(h)[phi]    = MAP(h)[phi][lp] >> 7;
            lp                  = MAP(h)[phi][lp] & 0x7F;
 8002656:	267f      	movs	r6, #127	; 0x7f
        reg = CRCTABLE[reg ^ *block++];
 8002658:	9310      	str	r3, [sp, #64]	; 0x40
        int lp = INDEX(h)[correct_path];
 800265a:	4653      	mov	r3, sl
 800265c:	3774      	adds	r7, #116	; 0x74
 800265e:	9317      	str	r3, [sp, #92]	; 0x5c
 8002660:	9b02      	ldr	r3, [sp, #8]
 8002662:	9716      	str	r7, [sp, #88]	; 0x58
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 8002664:	207f      	movs	r0, #127	; 0x7f
        int lp = INDEX(h)[correct_path];
 8002666:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002668:	9915      	ldr	r1, [sp, #84]	; 0x54
 800266a:	5c89      	ldrb	r1, [r1, r2]
 800266c:	9a06      	ldr	r2, [sp, #24]
            DECMSG(h)[phi]    = MAP(h)[phi][lp] >> 7;
 800266e:	0084      	lsls	r4, r0, #2
 8002670:	1914      	adds	r4, r2, r4
 8002672:	5c61      	ldrb	r1, [r4, r1]
 8002674:	09cc      	lsrs	r4, r1, #7
 8002676:	541c      	strb	r4, [r3, r0]
            lp                  = MAP(h)[phi][lp] & 0x7F;
 8002678:	4031      	ands	r1, r6
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 800267a:	3801      	subs	r0, #1
 800267c:	d2f7      	bcs.n	800266e <hsc_decode+0x372>
        }
        
        /// Bytewise CRC compute.
        /// Requires loading the bit data into a byte buffer.
        /// On success, the successful bytewise decoding is in the output[]
        for (i=0, phi=0; phi<h->infobits; i++) {
 800267e:	9a08      	ldr	r2, [sp, #32]
 8002680:	8891      	ldrh	r1, [r2, #4]
 8002682:	2900      	cmp	r1, #0
 8002684:	d101      	bne.n	800268a <hsc_decode+0x38e>
 8002686:	f000 fe2d 	bl	80032e4 <hsc_decode+0xfe8>
 800268a:	223f      	movs	r2, #63	; 0x3f
 800268c:	2479      	movs	r4, #121	; 0x79
 800268e:	920d      	str	r2, [sp, #52]	; 0x34
 8002690:	3240      	adds	r2, #64	; 0x40
 8002692:	4691      	mov	r9, r2
 8002694:	3a05      	subs	r2, #5
 8002696:	920c      	str	r2, [sp, #48]	; 0x30
 8002698:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <hsc_decode+0x40c>)
 800269a:	940a      	str	r4, [sp, #40]	; 0x28
 800269c:	9200      	str	r2, [sp, #0]
 800269e:	2201      	movs	r2, #1
 80026a0:	3404      	adds	r4, #4
 80026a2:	9404      	str	r4, [sp, #16]
 80026a4:	3c07      	subs	r4, #7
 80026a6:	9409      	str	r4, [sp, #36]	; 0x24
 80026a8:	3405      	adds	r4, #5
 80026aa:	9402      	str	r4, [sp, #8]
 80026ac:	3c06      	subs	r4, #6
 80026ae:	9407      	str	r4, [sp, #28]
 80026b0:	3402      	adds	r4, #2
 80026b2:	9401      	str	r4, [sp, #4]
 80026b4:	3c09      	subs	r4, #9
 80026b6:	940f      	str	r4, [sp, #60]	; 0x3c
 80026b8:	3401      	adds	r4, #1
 80026ba:	9405      	str	r4, [sp, #20]
 80026bc:	3404      	adds	r4, #4
 80026be:	940e      	str	r4, [sp, #56]	; 0x38
 80026c0:	3c14      	subs	r4, #20
 80026c2:	4812      	ldr	r0, [pc, #72]	; (800270c <hsc_decode+0x410>)
 80026c4:	9403      	str	r4, [sp, #12]
 80026c6:	3414      	adds	r4, #20
 80026c8:	46a0      	mov	r8, r4
 80026ca:	3c05      	subs	r4, #5
 80026cc:	46a4      	mov	ip, r4
 80026ce:	1a12      	subs	r2, r2, r0
 80026d0:	207e      	movs	r0, #126	; 0x7e
 80026d2:	257a      	movs	r5, #122	; 0x7a
 80026d4:	9214      	str	r2, [sp, #80]	; 0x50
 80026d6:	464a      	mov	r2, r9
 80026d8:	4681      	mov	r9, r0
 80026da:	4660      	mov	r0, ip
 80026dc:	3407      	adds	r4, #7
 80026de:	46a2      	mov	sl, r4
 80026e0:	3401      	adds	r4, #1
 80026e2:	46a3      	mov	fp, r4
 80026e4:	3c37      	subs	r4, #55	; 0x37
 80026e6:	46a4      	mov	ip, r4
 80026e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80026ea:	4644      	mov	r4, r8
 80026ec:	2779      	movs	r7, #121	; 0x79
 80026ee:	46a8      	mov	r8, r5
 80026f0:	9311      	str	r3, [sp, #68]	; 0x44
 80026f2:	0005      	movs	r5, r0
 80026f4:	0018      	movs	r0, r3
 80026f6:	e033      	b.n	8002760 <hsc_decode+0x464>
 80026f8:	20000970 	.word	0x20000970
 80026fc:	03020100 	.word	0x03020100
 8002700:	07060504 	.word	0x07060504
 8002704:	08009e98 	.word	0x08009e98
 8002708:	08009d1f 	.word	0x08009d1f
 800270c:	08009d18 	.word	0x08009d18
 8002710:	9b00      	ldr	r3, [sp, #0]
 8002712:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002714:	785b      	ldrb	r3, [r3, #1]
 8002716:	469c      	mov	ip, r3
 8002718:	9b00      	ldr	r3, [sp, #0]
 800271a:	789b      	ldrb	r3, [r3, #2]
 800271c:	4698      	mov	r8, r3
 800271e:	9b00      	ldr	r3, [sp, #0]
 8002720:	78df      	ldrb	r7, [r3, #3]
 8002722:	791b      	ldrb	r3, [r3, #4]
 8002724:	469b      	mov	fp, r3
 8002726:	9b00      	ldr	r3, [sp, #0]
 8002728:	795b      	ldrb	r3, [r3, #5]
 800272a:	469a      	mov	sl, r3
 800272c:	9b00      	ldr	r3, [sp, #0]
 800272e:	799d      	ldrb	r5, [r3, #6]
 8002730:	79dc      	ldrb	r4, [r3, #7]
 8002732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002734:	940e      	str	r4, [sp, #56]	; 0x38
 8002736:	9303      	str	r3, [sp, #12]
 8002738:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800273a:	950f      	str	r5, [sp, #60]	; 0x3c
 800273c:	9305      	str	r3, [sp, #20]
 800273e:	9b07      	ldr	r3, [sp, #28]
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002744:	9302      	str	r3, [sp, #8]
 8002746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002748:	970a      	str	r7, [sp, #40]	; 0x28
 800274a:	9304      	str	r3, [sp, #16]
 800274c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800274e:	4699      	mov	r9, r3
 8002750:	4643      	mov	r3, r8
 8002752:	930c      	str	r3, [sp, #48]	; 0x30
 8002754:	4663      	mov	r3, ip
 8002756:	930d      	str	r3, [sp, #52]	; 0x34
 8002758:	465b      	mov	r3, fp
 800275a:	9309      	str	r3, [sp, #36]	; 0x24
 800275c:	4653      	mov	r3, sl
 800275e:	9307      	str	r3, [sp, #28]
 8002760:	4663      	mov	r3, ip
 8002762:	9312      	str	r3, [sp, #72]	; 0x48
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 8002764:	464b      	mov	r3, r9
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
 8002766:	5c82      	ldrb	r2, [r0, r2]
 8002768:	01d2      	lsls	r2, r2, #7
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 800276e:	5cc3      	ldrb	r3, [r0, r3]
 8002770:	469c      	mov	ip, r3
 8002772:	4643      	mov	r3, r8
 8002774:	9313      	str	r3, [sp, #76]	; 0x4c
 8002776:	4663      	mov	r3, ip
 8002778:	019b      	lsls	r3, r3, #6
 800277a:	431a      	orrs	r2, r3
 800277c:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 800277e:	9b04      	ldr	r3, [sp, #16]
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 8002780:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 8002782:	5cc3      	ldrb	r3, [r0, r3]
 8002784:	469c      	mov	ip, r3
 8002786:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002788:	4699      	mov	r9, r3
 800278a:	9b00      	ldr	r3, [sp, #0]
 800278c:	4698      	mov	r8, r3
 800278e:	4663      	mov	r3, ip
 8002790:	015b      	lsls	r3, r3, #5
 8002792:	431a      	orrs	r2, r3
 8002794:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 8002796:	9b02      	ldr	r3, [sp, #8]
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 8002798:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 800279a:	5cc3      	ldrb	r3, [r0, r3]
 800279c:	44c1      	add	r9, r8
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	431a      	orrs	r2, r3
 80027a2:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 80027a4:	9b01      	ldr	r3, [sp, #4]
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 80027a6:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 80027a8:	5cc3      	ldrb	r3, [r0, r3]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	431a      	orrs	r2, r3
 80027ae:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 80027b0:	9b05      	ldr	r3, [sp, #20]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 80027b2:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 80027b4:	5cc3      	ldrb	r3, [r0, r3]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	431a      	orrs	r2, r3
 80027ba:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 80027bc:	9b03      	ldr	r3, [sp, #12]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 80027be:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 80027c0:	5cc3      	ldrb	r3, [r0, r3]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	431a      	orrs	r2, r3
 80027c6:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 80027c8:	9b00      	ldr	r3, [sp, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 80027ca:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	5cc3      	ldrb	r3, [r0, r3]
 80027d0:	469c      	mov	ip, r3
 80027d2:	9b00      	ldr	r3, [sp, #0]
 80027d4:	3308      	adds	r3, #8
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	4663      	mov	r3, ip
 80027da:	431a      	orrs	r2, r3
        for (i=0, phi=0; phi<h->infobits; i++) {
 80027dc:	9b08      	ldr	r3, [sp, #32]
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 80027de:	700a      	strb	r2, [r1, #0]
        for (i=0, phi=0; phi<h->infobits; i++) {
 80027e0:	889a      	ldrh	r2, [r3, #4]
 80027e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80027e4:	1acb      	subs	r3, r1, r3
 80027e6:	469c      	mov	ip, r3
 80027e8:	3101      	adds	r1, #1
 80027ea:	454a      	cmp	r2, r9
 80027ec:	dc90      	bgt.n	8002710 <hsc_decode+0x414>
 80027ee:	46a0      	mov	r8, r4
 80027f0:	4664      	mov	r4, ip
        reg = CRCTABLE[reg ^ *block++];
 80027f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027f4:	46d9      	mov	r9, fp
 80027f6:	7811      	ldrb	r1, [r2, #0]
 80027f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80027fa:	46ac      	mov	ip, r5
 80027fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80027fe:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002800:	2c00      	cmp	r4, #0
 8002802:	dc01      	bgt.n	8002808 <hsc_decode+0x50c>
 8002804:	f000 fc0b 	bl	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 8002808:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800280a:	7850      	ldrb	r0, [r2, #1]
 800280c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800280e:	4041      	eors	r1, r0
 8002810:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002812:	2c01      	cmp	r4, #1
 8002814:	d101      	bne.n	800281a <hsc_decode+0x51e>
 8002816:	f000 fc02 	bl	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800281a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800281c:	7890      	ldrb	r0, [r2, #2]
 800281e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002820:	4041      	eors	r1, r0
 8002822:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002824:	2c02      	cmp	r4, #2
 8002826:	d101      	bne.n	800282c <hsc_decode+0x530>
 8002828:	f000 fbf9 	bl	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800282c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800282e:	78d0      	ldrb	r0, [r2, #3]
 8002830:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002832:	4041      	eors	r1, r0
 8002834:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002836:	2c03      	cmp	r4, #3
 8002838:	d101      	bne.n	800283e <hsc_decode+0x542>
 800283a:	f000 fbf0 	bl	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800283e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002840:	7910      	ldrb	r0, [r2, #4]
 8002842:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002844:	4041      	eors	r1, r0
 8002846:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002848:	2c04      	cmp	r4, #4
 800284a:	d100      	bne.n	800284e <hsc_decode+0x552>
 800284c:	e3e7      	b.n	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800284e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002850:	7950      	ldrb	r0, [r2, #5]
 8002852:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002854:	4041      	eors	r1, r0
 8002856:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002858:	2c05      	cmp	r4, #5
 800285a:	d100      	bne.n	800285e <hsc_decode+0x562>
 800285c:	e3df      	b.n	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800285e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002860:	7990      	ldrb	r0, [r2, #6]
 8002862:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002864:	4041      	eors	r1, r0
 8002866:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002868:	2c06      	cmp	r4, #6
 800286a:	d100      	bne.n	800286e <hsc_decode+0x572>
 800286c:	e3d7      	b.n	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800286e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002870:	79d0      	ldrb	r0, [r2, #7]
 8002872:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002874:	4041      	eors	r1, r0
 8002876:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002878:	2c07      	cmp	r4, #7
 800287a:	d100      	bne.n	800287e <hsc_decode+0x582>
 800287c:	e3cf      	b.n	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800287e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002880:	7a10      	ldrb	r0, [r2, #8]
 8002882:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002884:	4041      	eors	r1, r0
 8002886:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002888:	2c08      	cmp	r4, #8
 800288a:	d100      	bne.n	800288e <hsc_decode+0x592>
 800288c:	e3c7      	b.n	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800288e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002890:	7a50      	ldrb	r0, [r2, #9]
 8002892:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002894:	4041      	eors	r1, r0
 8002896:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8002898:	2c09      	cmp	r4, #9
 800289a:	d100      	bne.n	800289e <hsc_decode+0x5a2>
 800289c:	e3bf      	b.n	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 800289e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80028a0:	7a90      	ldrb	r0, [r2, #10]
 80028a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80028a4:	4041      	eors	r1, r0
 80028a6:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80028a8:	2c0a      	cmp	r4, #10
 80028aa:	d100      	bne.n	80028ae <hsc_decode+0x5b2>
 80028ac:	e3b7      	b.n	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80028ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80028b0:	7ad0      	ldrb	r0, [r2, #11]
 80028b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80028b4:	4041      	eors	r1, r0
 80028b6:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80028b8:	2c0b      	cmp	r4, #11
 80028ba:	d100      	bne.n	80028be <hsc_decode+0x5c2>
 80028bc:	e3af      	b.n	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80028be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80028c0:	7b10      	ldrb	r0, [r2, #12]
 80028c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80028c4:	4041      	eors	r1, r0
 80028c6:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80028c8:	2c0c      	cmp	r4, #12
 80028ca:	d100      	bne.n	80028ce <hsc_decode+0x5d2>
 80028cc:	e3a7      	b.n	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80028ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80028d0:	7b50      	ldrb	r0, [r2, #13]
 80028d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80028d4:	4041      	eors	r1, r0
 80028d6:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80028d8:	2c0d      	cmp	r4, #13
 80028da:	d100      	bne.n	80028de <hsc_decode+0x5e2>
 80028dc:	e39f      	b.n	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80028de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80028e0:	7b90      	ldrb	r0, [r2, #14]
 80028e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80028e4:	4041      	eors	r1, r0
 80028e6:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80028e8:	2c0f      	cmp	r4, #15
 80028ea:	d000      	beq.n	80028ee <hsc_decode+0x5f2>
 80028ec:	e397      	b.n	800301e <hsc_decode+0xd22>
        reg = CRCTABLE[reg ^ *block++];
 80028ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80028f0:	7bd0      	ldrb	r0, [r2, #15]
 80028f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80028f4:	4041      	eors	r1, r0
 80028f6:	5651      	ldrsb	r1, [r2, r1]
 80028f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
        }
            
        crcreg  = crccalc(output, i);
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 80028fa:	5c98      	ldrb	r0, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 80028fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 80028fe:	5ddd      	ldrb	r5, [r3, r7]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 8002900:	5c9c      	ldrb	r4, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 8002902:	464a      	mov	r2, r9
 8002904:	5c9f      	ldrb	r7, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8002906:	4652      	mov	r2, sl
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 8002908:	01c0      	lsls	r0, r0, #7
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 800290a:	01a4      	lsls	r4, r4, #6
 800290c:	4060      	eors	r0, r4
 800290e:	4041      	eors	r1, r0
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8002910:	5c98      	ldrb	r0, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 8002912:	4662      	mov	r2, ip
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 8002914:	016d      	lsls	r5, r5, #5
 8002916:	4069      	eors	r1, r5
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 8002918:	5c9d      	ldrb	r5, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 800291a:	4642      	mov	r2, r8
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 800291c:	013f      	lsls	r7, r7, #4
 800291e:	4079      	eors	r1, r7
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8002920:	00c0      	lsls	r0, r0, #3
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 8002922:	5c9f      	ldrb	r7, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8002924:	4048      	eors	r0, r1
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 8002926:	00ad      	lsls	r5, r5, #2
 8002928:	4068      	eors	r0, r5
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 800292a:	007f      	lsls	r7, r7, #1
 800292c:	4078      	eors	r0, r7
 800292e:	b2c0      	uxtb	r0, r0
        if (crcreg == 0) {
 8002930:	2800      	cmp	r0, #0
 8002932:	d006      	beq.n	8002942 <hsc_decode+0x646>
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 8002934:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002936:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002938:	3201      	adds	r2, #1
 800293a:	9215      	str	r2, [sp, #84]	; 0x54
 800293c:	4291      	cmp	r1, r2
 800293e:	d000      	beq.n	8002942 <hsc_decode+0x646>
 8002940:	e690      	b.n	8002664 <hsc_decode+0x368>
    }
    /// CRC Path Check Process Over

    /// Decoded Bytewise data stored in output[].
    return crcreg;
}
 8002942:	b019      	add	sp, #100	; 0x64
 8002944:	bc3c      	pop	{r2, r3, r4, r5}
 8002946:	4690      	mov	r8, r2
 8002948:	4699      	mov	r9, r3
 800294a:	46a2      	mov	sl, r4
 800294c:	46ab      	mov	fp, r5
 800294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8002950:	464c      	mov	r4, r9
 8002952:	609c      	str	r4, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 8002954:	465c      	mov	r4, fp
 8002956:	2c03      	cmp	r4, #3
 8002958:	d000      	beq.n	800295c <hsc_decode+0x660>
 800295a:	e556      	b.n	800240a <hsc_decode+0x10e>
 800295c:	e557      	b.n	800240e <hsc_decode+0x112>
 800295e:	0010      	movs	r0, r2
            int max_lmd = maxlambda_lut[phi];
 8002960:	4be5      	ldr	r3, [pc, #916]	; (8002cf8 <hsc_decode+0x9fc>)
                if (LLR(h)[1][l] < 0) {
 8002962:	4ae6      	ldr	r2, [pc, #920]	; (8002cfc <hsc_decode+0xa00>)
            int max_lmd = maxlambda_lut[phi];
 8002964:	5c1b      	ldrb	r3, [r3, r0]
                if (LLR(h)[1][l] < 0) {
 8002966:	6911      	ldr	r1, [r2, #16]
            int max_lmd = maxlambda_lut[phi];
 8002968:	9303      	str	r3, [sp, #12]
            int min_lmd = minlambda_lut[phi];
 800296a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800296c:	5c1b      	ldrb	r3, [r3, r0]
 800296e:	469a      	mov	sl, r3
 8002970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                if (LLR(h)[1][l] < 0) {
 8002972:	2900      	cmp	r1, #0
 8002974:	da00      	bge.n	8002978 <hsc_decode+0x67c>
 8002976:	e2e1      	b.n	8002f3c <hsc_decode+0xc40>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8002978:	18c9      	adds	r1, r1, r3
 800297a:	6539      	str	r1, [r7, #80]	; 0x50
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 800297c:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (int l=0; l<num_paths; l++) {
 800297e:	465b      	mov	r3, fp
 8002980:	2b01      	cmp	r3, #1
 8002982:	d01d      	beq.n	80029c0 <hsc_decode+0x6c4>
                if (LLR(h)[1][l] < 0) {
 8002984:	6953      	ldr	r3, [r2, #20]
 8002986:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002988:	2b00      	cmp	r3, #0
 800298a:	da00      	bge.n	800298e <hsc_decode+0x692>
 800298c:	e2fb      	b.n	8002f86 <hsc_decode+0xc8a>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 800298e:	185b      	adds	r3, r3, r1
 8002990:	65bb      	str	r3, [r7, #88]	; 0x58
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8002992:	6579      	str	r1, [r7, #84]	; 0x54
            for (int l=0; l<num_paths; l++) {
 8002994:	465b      	mov	r3, fp
 8002996:	2b02      	cmp	r3, #2
 8002998:	d012      	beq.n	80029c0 <hsc_decode+0x6c4>
                if (LLR(h)[1][l] < 0) {
 800299a:	6993      	ldr	r3, [r2, #24]
 800299c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	da00      	bge.n	80029a4 <hsc_decode+0x6a8>
 80029a2:	e2f4      	b.n	8002f8e <hsc_decode+0xc92>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 80029a4:	185b      	adds	r3, r3, r1
 80029a6:	663b      	str	r3, [r7, #96]	; 0x60
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 80029a8:	65f9      	str	r1, [r7, #92]	; 0x5c
            for (int l=0; l<num_paths; l++) {
 80029aa:	465b      	mov	r3, fp
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d007      	beq.n	80029c0 <hsc_decode+0x6c4>
                if (LLR(h)[1][l] < 0) {
 80029b0:	69d3      	ldr	r3, [r2, #28]
 80029b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	da00      	bge.n	80029ba <hsc_decode+0x6be>
 80029b8:	e334      	b.n	8003024 <hsc_decode+0xd28>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 80029ba:	189b      	adds	r3, r3, r2
 80029bc:	66bb      	str	r3, [r7, #104]	; 0x68
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 80029be:	667a      	str	r2, [r7, #100]	; 0x64
            num_paths = num_paths * 2;
 80029c0:	465b      	mov	r3, fp
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	469b      	mov	fp, r3
 80029c6:	0018      	movs	r0, r3
 80029c8:	236c      	movs	r3, #108	; 0x6c
    *(uint32_t*)&indexOut[0] = 0x03020100;
 80029ca:	4acd      	ldr	r2, [pc, #820]	; (8002d00 <hsc_decode+0xa04>)
 80029cc:	469c      	mov	ip, r3
    *(uint32_t*)&indexOut[4] = 0x07060504;
 80029ce:	4bcd      	ldr	r3, [pc, #820]	; (8002d04 <hsc_decode+0xa08>)
    *(uint32_t*)&indexOut[0] = 0x03020100;
 80029d0:	66fa      	str	r2, [r7, #108]	; 0x6c
    *(uint32_t*)&indexOut[4] = 0x07060504;
 80029d2:	673b      	str	r3, [r7, #112]	; 0x70
        gap    -= (gap > 1);
 80029d4:	2301      	movs	r3, #1
 80029d6:	2801      	cmp	r0, #1
 80029d8:	dc00      	bgt.n	80029dc <hsc_decode+0x6e0>
 80029da:	2300      	movs	r3, #0
 80029dc:	1ac0      	subs	r0, r0, r3
        sorted  = (gap == 1);
 80029de:	1e46      	subs	r6, r0, #1
 80029e0:	4273      	negs	r3, r6
 80029e2:	415e      	adcs	r6, r3
 80029e4:	b2f6      	uxtb	r6, r6
        for (i=0, j=gap; j<length; i++, j++) {
 80029e6:	4583      	cmp	fp, r0
 80029e8:	ddf4      	ble.n	80029d4 <hsc_decode+0x6d8>
 80029ea:	003b      	movs	r3, r7
 80029ec:	465a      	mov	r2, fp
 80029ee:	336c      	adds	r3, #108	; 0x6c
 80029f0:	18d2      	adds	r2, r2, r3
 80029f2:	1a12      	subs	r2, r2, r0
 80029f4:	46b0      	mov	r8, r6
 80029f6:	0016      	movs	r6, r2
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 80029f8:	781c      	ldrb	r4, [r3, #0]
 80029fa:	5c1d      	ldrb	r5, [r3, r0]
 80029fc:	00a1      	lsls	r1, r4, #2
 80029fe:	00aa      	lsls	r2, r5, #2
 8002a00:	1879      	adds	r1, r7, r1
 8002a02:	18ba      	adds	r2, r7, r2
 8002a04:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002a06:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a08:	4291      	cmp	r1, r2
 8002a0a:	dd03      	ble.n	8002a14 <hsc_decode+0x718>
                sorted      = false;
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	4690      	mov	r8, r2
                indexOut[i] = indexOut[j];
 8002a10:	701d      	strb	r5, [r3, #0]
                indexOut[j] = k;
 8002a12:	541c      	strb	r4, [r3, r0]
 8002a14:	3301      	adds	r3, #1
        for (i=0, j=gap; j<length; i++, j++) {
 8002a16:	429e      	cmp	r6, r3
 8002a18:	d1ee      	bne.n	80029f8 <hsc_decode+0x6fc>
 8002a1a:	4663      	mov	r3, ip
 8002a1c:	4646      	mov	r6, r8
 8002a1e:	5cfa      	ldrb	r2, [r7, r3]
    } while (!sorted);
 8002a20:	2e00      	cmp	r6, #0
 8002a22:	d0d7      	beq.n	80029d4 <hsc_decode+0x6d8>
            if (num_paths > LISTSIZE) {
 8002a24:	465b      	mov	r3, fp
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	dd00      	ble.n	8002a2c <hsc_decode+0x730>
 8002a2a:	e1fe      	b.n	8002e2a <hsc_decode+0xb2e>
 8002a2c:	1e9d      	subs	r5, r3, #2
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8002a2e:	1e5c      	subs	r4, r3, #1
           chk2       |= (1<<k);
 8002a30:	2301      	movs	r3, #1
       k = idx_a[i] >> 1;
 8002a32:	0850      	lsrs	r0, r2, #1
           chk2       |= (1<<k);
 8002a34:	469c      	mov	ip, r3
 8002a36:	4083      	lsls	r3, r0
 8002a38:	4699      	mov	r9, r3
       k = idx_a[i] >> 1;
 8002a3a:	003b      	movs	r3, r7
 8002a3c:	336c      	adds	r3, #108	; 0x6c
 8002a3e:	7859      	ldrb	r1, [r3, #1]
       if ((chk2 & (1<<k)) == 0) {
 8002a40:	26ff      	movs	r6, #255	; 0xff
 8002a42:	464b      	mov	r3, r9
 8002a44:	401e      	ands	r6, r3
       k = idx_a[i] >> 1;
 8002a46:	084b      	lsrs	r3, r1, #1
 8002a48:	9307      	str	r3, [sp, #28]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	4698      	mov	r8, r3
       if ((chk2 & (1<<k)) == 0) {
 8002a4e:	411e      	asrs	r6, r3
 8002a50:	4663      	mov	r3, ip
           pri[p_i--]  = k;
 8002a52:	193c      	adds	r4, r7, r4
 8002a54:	3448      	adds	r4, #72	; 0x48
 8002a56:	7020      	strb	r0, [r4, #0]
           idx_b[k]    = idx_a[i];
 8002a58:	1838      	adds	r0, r7, r0
 8002a5a:	3074      	adds	r0, #116	; 0x74
 8002a5c:	7002      	strb	r2, [r0, #0]
       if ((chk2 & (1<<k)) == 0) {
 8002a5e:	4233      	tst	r3, r6
 8002a60:	d000      	beq.n	8002a64 <hsc_decode+0x768>
 8002a62:	e1e7      	b.n	8002e34 <hsc_decode+0xb38>
           chk2       |= (1<<k);
 8002a64:	4643      	mov	r3, r8
 8002a66:	4660      	mov	r0, ip
 8002a68:	4098      	lsls	r0, r3
           chk1       |= (1<<i);
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	9300      	str	r3, [sp, #0]
           chk2       |= (1<<k);
 8002a6e:	464b      	mov	r3, r9
 8002a70:	4318      	orrs	r0, r3
 8002a72:	b2c3      	uxtb	r3, r0
 8002a74:	4699      	mov	r9, r3
           pri[p_i--]  = k;
 8002a76:	4643      	mov	r3, r8
 8002a78:	197d      	adds	r5, r7, r5
 8002a7a:	3548      	adds	r5, #72	; 0x48
 8002a7c:	702b      	strb	r3, [r5, #0]
           idx_b[k]    = idx_a[i];
 8002a7e:	18f8      	adds	r0, r7, r3
           pri[p_i--]  = k;
 8002a80:	465b      	mov	r3, fp
 8002a82:	2201      	movs	r2, #1
 8002a84:	2407      	movs	r4, #7
           idx_b[k]    = idx_a[i];
 8002a86:	3074      	adds	r0, #116	; 0x74
 8002a88:	7001      	strb	r1, [r0, #0]
           pri[p_i--]  = k;
 8002a8a:	1edd      	subs	r5, r3, #3
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8002a8c:	465b      	mov	r3, fp
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d029      	beq.n	8002ae6 <hsc_decode+0x7ea>
       k = idx_a[i] >> 1;
 8002a92:	003a      	movs	r2, r7
       if ((chk2 & (1<<k)) == 0) {
 8002a94:	4648      	mov	r0, r9
       k = idx_a[i] >> 1;
 8002a96:	326c      	adds	r2, #108	; 0x6c
 8002a98:	7893      	ldrb	r3, [r2, #2]
       if ((chk2 & (1<<k)) == 0) {
 8002a9a:	2201      	movs	r2, #1
       k = idx_a[i] >> 1;
 8002a9c:	085e      	lsrs	r6, r3, #1
       if ((chk2 & (1<<k)) == 0) {
 8002a9e:	4130      	asrs	r0, r6
       k = idx_a[i] >> 1;
 8002aa0:	469c      	mov	ip, r3
       if ((chk2 & (1<<k)) == 0) {
 8002aa2:	4202      	tst	r2, r0
 8002aa4:	d10e      	bne.n	8002ac4 <hsc_decode+0x7c8>
           chk2       |= (1<<k);
 8002aa6:	40b2      	lsls	r2, r6
 8002aa8:	464b      	mov	r3, r9
 8002aaa:	0010      	movs	r0, r2
 8002aac:	4318      	orrs	r0, r3
 8002aae:	b2c3      	uxtb	r3, r0
 8002ab0:	4699      	mov	r9, r3
           idx_b[k]    = idx_a[i];
 8002ab2:	4663      	mov	r3, ip
           pri[p_i--]  = k;
 8002ab4:	197a      	adds	r2, r7, r5
           chk1       |= (1<<i);
 8002ab6:	9400      	str	r4, [sp, #0]
           idx_b[k]    = idx_a[i];
 8002ab8:	19bc      	adds	r4, r7, r6
 8002aba:	3474      	adds	r4, #116	; 0x74
           pri[p_i--]  = k;
 8002abc:	3248      	adds	r2, #72	; 0x48
           idx_b[k]    = idx_a[i];
 8002abe:	7023      	strb	r3, [r4, #0]
           pri[p_i--]  = k;
 8002ac0:	7016      	strb	r6, [r2, #0]
 8002ac2:	3d01      	subs	r5, #1
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8002ac4:	465b      	mov	r3, fp
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d000      	beq.n	8002acc <hsc_decode+0x7d0>
 8002aca:	e3de      	b.n	800328a <hsc_decode+0xf8e>
       k = idx_a[i] >> 1;
 8002acc:	003a      	movs	r2, r7
 8002ace:	326c      	adds	r2, #108	; 0x6c
 8002ad0:	78d6      	ldrb	r6, [r2, #3]
       if ((chk2 & (1<<k)) == 0) {
 8002ad2:	464a      	mov	r2, r9
       k = idx_a[i] >> 1;
 8002ad4:	0874      	lsrs	r4, r6, #1
       if ((chk2 & (1<<k)) == 0) {
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	4122      	asrs	r2, r4
 8002ada:	4210      	tst	r0, r2
 8002adc:	d100      	bne.n	8002ae0 <hsc_decode+0x7e4>
 8002ade:	e231      	b.n	8002f44 <hsc_decode+0xc48>
 8002ae0:	9b00      	ldr	r3, [sp, #0]
 8002ae2:	085a      	lsrs	r2, r3, #1
 8002ae4:	b2d2      	uxtb	r2, r2
    switch ((chk1>>1) & 7) {
 8002ae6:	2a06      	cmp	r2, #6
 8002ae8:	d900      	bls.n	8002aec <hsc_decode+0x7f0>
 8002aea:	e244      	b.n	8002f76 <hsc_decode+0xc7a>
 8002aec:	4886      	ldr	r0, [pc, #536]	; (8002d08 <hsc_decode+0xa0c>)
 8002aee:	0092      	lsls	r2, r2, #2
 8002af0:	5882      	ldr	r2, [r0, r2]
 8002af2:	4697      	mov	pc, r2
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8002af4:	003b      	movs	r3, r7
 8002af6:	2464      	movs	r4, #100	; 0x64
 8002af8:	336c      	adds	r3, #108	; 0x6c
 8002afa:	789b      	ldrb	r3, [r3, #2]
                pri[0]          = j0[chk2];
 8002afc:	2248      	movs	r2, #72	; 0x48
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8002afe:	4883      	ldr	r0, [pc, #524]	; (8002d0c <hsc_decode+0xa10>)
 8002b00:	0019      	movs	r1, r3
 8002b02:	4448      	add	r0, r9
 8002b04:	5d00      	ldrb	r0, [r0, r4]
                pri[0]          = j0[chk2];
 8002b06:	54b8      	strb	r0, [r7, r2]
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8002b08:	1838      	adds	r0, r7, r0
 8002b0a:	3074      	adds	r0, #116	; 0x74
 8002b0c:	7003      	strb	r3, [r0, #0]
 8002b0e:	085b      	lsrs	r3, r3, #1
 8002b10:	9307      	str	r3, [sp, #28]
                    switch (max_lmd-min_lmd) {
 8002b12:	4654      	mov	r4, sl
 8002b14:	2601      	movs	r6, #1
 8002b16:	9803      	ldr	r0, [sp, #12]
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8002b18:	2500      	movs	r5, #0
                    switch (max_lmd-min_lmd) {
 8002b1a:	1b03      	subs	r3, r0, r4
 8002b1c:	9c05      	ldr	r4, [sp, #20]
 8002b1e:	0098      	lsls	r0, r3, #2
 8002b20:	4026      	ands	r6, r4
 8002b22:	1cb4      	adds	r4, r6, #2
 8002b24:	00a4      	lsls	r4, r4, #2
 8002b26:	9400      	str	r4, [sp, #0]
 8002b28:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8002b2a:	9304      	str	r3, [sp, #16]
 8002b2c:	46a2      	mov	sl, r4
                    switch (max_lmd) {
 8002b2e:	9b03      	ldr	r3, [sp, #12]
                    switch (max_lmd-min_lmd) {
 8002b30:	4482      	add	sl, r0
                    switch (max_lmd) {
 8002b32:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4698      	mov	r8, r3
 8002b38:	4684      	mov	ip, r0
 8002b3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b3c:	9b03      	ldr	r3, [sp, #12]
 8002b3e:	44c4      	add	ip, r8
 8002b40:	2248      	movs	r2, #72	; 0x48
 8002b42:	4698      	mov	r8, r3
 8002b44:	000b      	movs	r3, r1
 8002b46:	4661      	mov	r1, ip
 8002b48:	960e      	str	r6, [sp, #56]	; 0x38
 8002b4a:	002e      	movs	r6, r5
 8002b4c:	9c05      	ldr	r4, [sp, #20]
 8002b4e:	5cba      	ldrb	r2, [r7, r2]
 8002b50:	00a4      	lsls	r4, r4, #2
 8002b52:	9807      	ldr	r0, [sp, #28]
 8002b54:	9401      	str	r4, [sp, #4]
 8002b56:	9103      	str	r1, [sp, #12]
                int lr  = INDEX(h)[l] >> 1;
 8002b58:	b2c0      	uxtb	r0, r0
                if (l != lr) {
 8002b5a:	4282      	cmp	r2, r0
 8002b5c:	d04f      	beq.n	8002bfe <hsc_decode+0x902>
                    switch (max_lmd-min_lmd) {
 8002b5e:	9904      	ldr	r1, [sp, #16]
 8002b60:	2906      	cmp	r1, #6
 8002b62:	d82c      	bhi.n	8002bbe <hsc_decode+0x8c2>
 8002b64:	4651      	mov	r1, sl
 8002b66:	6809      	ldr	r1, [r1, #0]
 8002b68:	468f      	mov	pc, r1
            int max_lmd = maxlambda_lut[phi];
 8002b6a:	4641      	mov	r1, r8
                        case 5: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b6c:	008c      	lsls	r4, r1, #2
 8002b6e:	193c      	adds	r4, r7, r4
 8002b70:	1825      	adds	r5, r4, r0
 8002b72:	7f2d      	ldrb	r5, [r5, #28]
 8002b74:	18a4      	adds	r4, r4, r2
 8002b76:	3901      	subs	r1, #1
 8002b78:	7725      	strb	r5, [r4, #28]
                        case 4: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b7a:	008c      	lsls	r4, r1, #2
 8002b7c:	193c      	adds	r4, r7, r4
 8002b7e:	1825      	adds	r5, r4, r0
 8002b80:	7f2d      	ldrb	r5, [r5, #28]
 8002b82:	18a4      	adds	r4, r4, r2
 8002b84:	3901      	subs	r1, #1
 8002b86:	7725      	strb	r5, [r4, #28]
                        case 3: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b88:	008c      	lsls	r4, r1, #2
 8002b8a:	193c      	adds	r4, r7, r4
 8002b8c:	1825      	adds	r5, r4, r0
 8002b8e:	7f2d      	ldrb	r5, [r5, #28]
 8002b90:	18a4      	adds	r4, r4, r2
 8002b92:	3901      	subs	r1, #1
 8002b94:	7725      	strb	r5, [r4, #28]
                        case 2: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002b96:	008c      	lsls	r4, r1, #2
 8002b98:	193c      	adds	r4, r7, r4
 8002b9a:	1825      	adds	r5, r4, r0
 8002b9c:	7f2d      	ldrb	r5, [r5, #28]
 8002b9e:	18a4      	adds	r4, r4, r2
 8002ba0:	3901      	subs	r1, #1
 8002ba2:	7725      	strb	r5, [r4, #28]
                        case 1: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002ba4:	008c      	lsls	r4, r1, #2
 8002ba6:	193c      	adds	r4, r7, r4
 8002ba8:	1825      	adds	r5, r4, r0
 8002baa:	7f2d      	ldrb	r5, [r5, #28]
 8002bac:	18a4      	adds	r4, r4, r2
 8002bae:	3901      	subs	r1, #1
 8002bb0:	7725      	strb	r5, [r4, #28]
                        case 0: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];
 8002bb2:	0089      	lsls	r1, r1, #2
 8002bb4:	1879      	adds	r1, r7, r1
 8002bb6:	180c      	adds	r4, r1, r0
 8002bb8:	7f24      	ldrb	r4, [r4, #28]
 8002bba:	1889      	adds	r1, r1, r2
 8002bbc:	770c      	strb	r4, [r1, #28]
                    switch (max_lmd) {
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	2906      	cmp	r1, #6
 8002bc2:	d81c      	bhi.n	8002bfe <hsc_decode+0x902>
 8002bc4:	9903      	ldr	r1, [sp, #12]
 8002bc6:	6809      	ldr	r1, [r1, #0]
 8002bc8:	468f      	mov	pc, r1
                        case 6: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002bca:	1839      	adds	r1, r7, r0
 8002bcc:	7e0c      	ldrb	r4, [r1, #24]
 8002bce:	18b9      	adds	r1, r7, r2
 8002bd0:	760c      	strb	r4, [r1, #24]
                        case 5: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002bd2:	1839      	adds	r1, r7, r0
 8002bd4:	7d0c      	ldrb	r4, [r1, #20]
 8002bd6:	18b9      	adds	r1, r7, r2
 8002bd8:	750c      	strb	r4, [r1, #20]
                        case 4: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002bda:	1839      	adds	r1, r7, r0
 8002bdc:	7c0c      	ldrb	r4, [r1, #16]
 8002bde:	18b9      	adds	r1, r7, r2
 8002be0:	740c      	strb	r4, [r1, #16]
                        case 3: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002be2:	1839      	adds	r1, r7, r0
 8002be4:	7b0c      	ldrb	r4, [r1, #12]
 8002be6:	18b9      	adds	r1, r7, r2
 8002be8:	730c      	strb	r4, [r1, #12]
                        case 2: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002bea:	1839      	adds	r1, r7, r0
 8002bec:	7a0c      	ldrb	r4, [r1, #8]
 8002bee:	18b9      	adds	r1, r7, r2
 8002bf0:	720c      	strb	r4, [r1, #8]
                        case 1: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8002bf2:	1839      	adds	r1, r7, r0
 8002bf4:	790c      	ldrb	r4, [r1, #4]
 8002bf6:	18b9      	adds	r1, r7, r2
 8002bf8:	710c      	strb	r4, [r1, #4]
                        case 0: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];
 8002bfa:	5c39      	ldrb	r1, [r7, r0]
 8002bfc:	54b9      	strb	r1, [r7, r2]
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002bfe:	2401      	movs	r4, #1
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8002c00:	0099      	lsls	r1, r3, #2
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002c02:	401c      	ands	r4, r3
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002c04:	01db      	lsls	r3, r3, #7
 8002c06:	4303      	orrs	r3, r0
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002c08:	9802      	ldr	r0, [sp, #8]
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8002c0a:	1879      	adds	r1, r7, r1
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002c0c:	4684      	mov	ip, r0
 8002c0e:	9800      	ldr	r0, [sp, #0]
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8002c10:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002c12:	4681      	mov	r9, r0
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8002c14:	0095      	lsls	r5, r2, #2
 8002c16:	197d      	adds	r5, r7, r5
 8002c18:	63a9      	str	r1, [r5, #56]	; 0x38
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002c1a:	9d01      	ldr	r5, [sp, #4]
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002c1c:	44cc      	add	ip, r9
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002c1e:	46a9      	mov	r9, r5
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002c20:	4660      	mov	r0, ip
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002c22:	9906      	ldr	r1, [sp, #24]
            for (int ll=0; ll<num_paths; ll++) {
 8002c24:	3601      	adds	r6, #1
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002c26:	4449      	add	r1, r9
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8002c28:	5484      	strb	r4, [r0, r2]
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8002c2a:	548b      	strb	r3, [r1, r2]
            for (int ll=0; ll<num_paths; ll++) {
 8002c2c:	455e      	cmp	r6, fp
 8002c2e:	d06f      	beq.n	8002d10 <hsc_decode+0xa14>
 8002c30:	003a      	movs	r2, r7
 8002c32:	2374      	movs	r3, #116	; 0x74
 8002c34:	3248      	adds	r2, #72	; 0x48
 8002c36:	5cb2      	ldrb	r2, [r6, r2]
 8002c38:	18b9      	adds	r1, r7, r2
 8002c3a:	5ccb      	ldrb	r3, [r1, r3]
 8002c3c:	0858      	lsrs	r0, r3, #1
 8002c3e:	e78b      	b.n	8002b58 <hsc_decode+0x85c>
            int max_lmd = maxlambda_lut[phi];
 8002c40:	4641      	mov	r1, r8
 8002c42:	e79a      	b.n	8002b7a <hsc_decode+0x87e>
 8002c44:	4641      	mov	r1, r8
 8002c46:	e79f      	b.n	8002b88 <hsc_decode+0x88c>
 8002c48:	4641      	mov	r1, r8
 8002c4a:	e7a4      	b.n	8002b96 <hsc_decode+0x89a>
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	e7a9      	b.n	8002ba4 <hsc_decode+0x8a8>
 8002c50:	4641      	mov	r1, r8
 8002c52:	e7ae      	b.n	8002bb2 <hsc_decode+0x8b6>
                        case 6: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8002c54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002c56:	1879      	adds	r1, r7, r1
 8002c58:	180c      	adds	r4, r1, r0
 8002c5a:	7f24      	ldrb	r4, [r4, #28]
 8002c5c:	1889      	adds	r1, r1, r2
 8002c5e:	770c      	strb	r4, [r1, #28]
 8002c60:	4641      	mov	r1, r8
 8002c62:	3901      	subs	r1, #1
 8002c64:	e782      	b.n	8002b6c <hsc_decode+0x870>
        case 3: idx_b[j0[chk2]] = idx_a[3]; 
 8002c66:	003b      	movs	r3, r7
 8002c68:	336c      	adds	r3, #108	; 0x6c
 8002c6a:	2464      	movs	r4, #100	; 0x64
 8002c6c:	78db      	ldrb	r3, [r3, #3]
 8002c6e:	e745      	b.n	8002afc <hsc_decode+0x800>
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8002c70:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <hsc_decode+0xa10>)
 8002c72:	2254      	movs	r2, #84	; 0x54
 8002c74:	0018      	movs	r0, r3
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c76:	003b      	movs	r3, r7
 8002c78:	2664      	movs	r6, #100	; 0x64
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8002c7a:	4448      	add	r0, r9
 8002c7c:	5c82      	ldrb	r2, [r0, r2]
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c7e:	336c      	adds	r3, #108	; 0x6c
 8002c80:	78dd      	ldrb	r5, [r3, #3]
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8002c82:	18bb      	adds	r3, r7, r2
 8002c84:	3374      	adds	r3, #116	; 0x74
 8002c86:	7019      	strb	r1, [r3, #0]
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c88:	5d83      	ldrb	r3, [r0, r6]
                pri[1]          = j1[chk2];
 8002c8a:	0038      	movs	r0, r7
 8002c8c:	2448      	movs	r4, #72	; 0x48
 8002c8e:	3048      	adds	r0, #72	; 0x48
 8002c90:	7042      	strb	r2, [r0, #1]
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c92:	18fa      	adds	r2, r7, r3
 8002c94:	3274      	adds	r2, #116	; 0x74
                pri[0]          = j0[chk2];
 8002c96:	553b      	strb	r3, [r7, r4]
 8002c98:	086b      	lsrs	r3, r5, #1
 8002c9a:	0029      	movs	r1, r5
                idx_b[j0[chk2]] = idx_a[3]; 
 8002c9c:	7015      	strb	r5, [r2, #0]
 8002c9e:	9307      	str	r3, [sp, #28]
 8002ca0:	e737      	b.n	8002b12 <hsc_decode+0x816>
                pri[1]          = j1[chk2];
 8002ca2:	2348      	movs	r3, #72	; 0x48
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002ca4:	003a      	movs	r2, r7
                pri[1]          = j1[chk2];
 8002ca6:	4698      	mov	r8, r3
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002ca8:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <hsc_decode+0xa10>)
 8002caa:	2554      	movs	r5, #84	; 0x54
 8002cac:	0018      	movs	r0, r3
                idx_b[j0[chk2]] = idx_a[3]; 
 8002cae:	2664      	movs	r6, #100	; 0x64
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002cb0:	326c      	adds	r2, #108	; 0x6c
                idx_b[j0[chk2]] = idx_a[3]; 
 8002cb2:	78d4      	ldrb	r4, [r2, #3]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002cb4:	7892      	ldrb	r2, [r2, #2]
 8002cb6:	4448      	add	r0, r9
                idx_b[j0[chk2]] = idx_a[3]; 
 8002cb8:	5d83      	ldrb	r3, [r0, r6]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002cba:	4694      	mov	ip, r2
 8002cbc:	5d42      	ldrb	r2, [r0, r5]
                pri[1]          = j1[chk2];
 8002cbe:	0038      	movs	r0, r7
 8002cc0:	3048      	adds	r0, #72	; 0x48
 8002cc2:	7042      	strb	r2, [r0, #1]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8002cc4:	4660      	mov	r0, ip
 8002cc6:	18ba      	adds	r2, r7, r2
 8002cc8:	3274      	adds	r2, #116	; 0x74
 8002cca:	7010      	strb	r0, [r2, #0]
                pri[0]          = j0[chk2];
 8002ccc:	4640      	mov	r0, r8
                idx_b[j0[chk2]] = idx_a[3]; 
 8002cce:	18fa      	adds	r2, r7, r3
 8002cd0:	3274      	adds	r2, #116	; 0x74
                pri[0]          = j0[chk2];
 8002cd2:	543b      	strb	r3, [r7, r0]
 8002cd4:	0863      	lsrs	r3, r4, #1
 8002cd6:	0021      	movs	r1, r4
                idx_b[j0[chk2]] = idx_a[3]; 
 8002cd8:	7014      	strb	r4, [r2, #0]
 8002cda:	9307      	str	r3, [sp, #28]
 8002cdc:	e719      	b.n	8002b12 <hsc_decode+0x816>
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8002cde:	2364      	movs	r3, #100	; 0x64
                pri[0]          = j0[chk2];
 8002ce0:	2248      	movs	r2, #72	; 0x48
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8002ce2:	480a      	ldr	r0, [pc, #40]	; (8002d0c <hsc_decode+0xa10>)
 8002ce4:	4448      	add	r0, r9
 8002ce6:	5cc0      	ldrb	r0, [r0, r3]
 8002ce8:	084b      	lsrs	r3, r1, #1
                pri[0]          = j0[chk2];
 8002cea:	54b8      	strb	r0, [r7, r2]
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8002cec:	1838      	adds	r0, r7, r0
 8002cee:	3074      	adds	r0, #116	; 0x74
 8002cf0:	9307      	str	r3, [sp, #28]
 8002cf2:	7001      	strb	r1, [r0, #0]
 8002cf4:	e70d      	b.n	8002b12 <hsc_decode+0x816>
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	08009a18 	.word	0x08009a18
 8002cfc:	20000970 	.word	0x20000970
 8002d00:	03020100 	.word	0x03020100
 8002d04:	07060504 	.word	0x07060504
 8002d08:	080098fc 	.word	0x080098fc
 8002d0c:	080099a4 	.word	0x080099a4
 8002d10:	9e0e      	ldr	r6, [sp, #56]	; 0x38
        if ((phi & 1) == 0) {
 8002d12:	2e00      	cmp	r6, #0
 8002d14:	d100      	bne.n	8002d18 <hsc_decode+0xa1c>
 8002d16:	e468      	b.n	80025ea <hsc_decode+0x2ee>
            beta_laststage  = eminlambda_lut[phi];
 8002d18:	4bc9      	ldr	r3, [pc, #804]	; (8003040 <hsc_decode+0xd44>)
 8002d1a:	9a05      	ldr	r2, [sp, #20]
 8002d1c:	5c9b      	ldrb	r3, [r3, r2]
 8002d1e:	9301      	str	r3, [sp, #4]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	9303      	str	r3, [sp, #12]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	dc00      	bgt.n	8002d2a <hsc_decode+0xa2e>
 8002d28:	e180      	b.n	800302c <hsc_decode+0xd30>
 8002d2a:	465b      	mov	r3, fp
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d100      	bne.n	8002d32 <hsc_decode+0xa36>
 8002d30:	e138      	b.n	8002fa4 <hsc_decode+0xca8>
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d100      	bne.n	8002d38 <hsc_decode+0xa3c>
 8002d36:	e18b      	b.n	8003050 <hsc_decode+0xd54>
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d100      	bne.n	8002d3e <hsc_decode+0xa42>
 8002d3c:	e245      	b.n	80031ca <hsc_decode+0xece>
 8002d3e:	2306      	movs	r3, #6
 8002d40:	4698      	mov	r8, r3
            next_pt         = 2;
 8002d42:	3b04      	subs	r3, #4
 8002d44:	9307      	str	r3, [sp, #28]
            lmd0            = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	9304      	str	r3, [sp, #16]
 8002d4a:	469c      	mov	ip, r3
 8002d4c:	465b      	mov	r3, fp
 8002d4e:	930e      	str	r3, [sp, #56]	; 0x38
 8002d50:	4643      	mov	r3, r8
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002d52:	2002      	movs	r0, #2
 8002d54:	46b9      	mov	r9, r7
 8002d56:	4abb      	ldr	r2, [pc, #748]	; (8003044 <hsc_decode+0xd48>)
 8002d58:	9300      	str	r3, [sp, #0]
                int incval  = (beta < beta_laststage);
 8002d5a:	9901      	ldr	r1, [sp, #4]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	4281      	cmp	r1, r0
 8002d60:	dc00      	bgt.n	8002d64 <hsc_decode+0xa68>
 8002d62:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002d64:	9f02      	ldr	r7, [sp, #8]
 8002d66:	4665      	mov	r5, ip
 8002d68:	4649      	mov	r1, r9
 8002d6a:	46b8      	mov	r8, r7
 8002d6c:	5d49      	ldrb	r1, [r1, r5]
 8002d6e:	0084      	lsls	r4, r0, #2
 8002d70:	4444      	add	r4, r8
 8002d72:	5c65      	ldrb	r5, [r4, r1]
 8002d74:	7816      	ldrb	r6, [r2, #0]
                int bit0_i  = (beta*2) + incval;
 8002d76:	0041      	lsls	r1, r0, #1
 8002d78:	4688      	mov	r8, r1
 8002d7a:	18c9      	adds	r1, r1, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002d7c:	4075      	eors	r5, r6
 8002d7e:	0089      	lsls	r1, r1, #2
 8002d80:	547d      	strb	r5, [r7, r1]
                int bit1_i  = ((beta+1)*2) + incval;
 8002d82:	9d00      	ldr	r5, [sp, #0]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002d84:	7816      	ldrb	r6, [r2, #0]
                int bit1_i  = ((beta+1)*2) + incval;
 8002d86:	46aa      	mov	sl, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002d88:	464d      	mov	r5, r9
 8002d8a:	4465      	add	r5, ip
 8002d8c:	786f      	ldrb	r7, [r5, #1]
                int bit1_i  = ((beta+1)*2) + incval;
 8002d8e:	4453      	add	r3, sl
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002d90:	46ba      	mov	sl, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002d92:	9f02      	ldr	r7, [sp, #8]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	54fe      	strb	r6, [r7, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002d98:	7857      	ldrb	r7, [r2, #1]
 8002d9a:	4656      	mov	r6, sl
 8002d9c:	46ba      	mov	sl, r7
 8002d9e:	9f02      	ldr	r7, [sp, #8]
 8002da0:	5da6      	ldrb	r6, [r4, r6]
 8002da2:	46bb      	mov	fp, r7
 8002da4:	4657      	mov	r7, sl
 8002da6:	4459      	add	r1, fp
 8002da8:	407e      	eors	r6, r7
 8002daa:	704e      	strb	r6, [r1, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002dac:	7856      	ldrb	r6, [r2, #1]
 8002dae:	445b      	add	r3, fp
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002db0:	78af      	ldrb	r7, [r5, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002db2:	705e      	strb	r6, [r3, #1]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002db4:	5de6      	ldrb	r6, [r4, r7]
 8002db6:	7897      	ldrb	r7, [r2, #2]
 8002db8:	78ed      	ldrb	r5, [r5, #3]
 8002dba:	407e      	eors	r6, r7
 8002dbc:	708e      	strb	r6, [r1, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002dbe:	7896      	ldrb	r6, [r2, #2]
 8002dc0:	709e      	strb	r6, [r3, #2]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002dc2:	5d64      	ldrb	r4, [r4, r5]
 8002dc4:	78d5      	ldrb	r5, [r2, #3]
 8002dc6:	406c      	eors	r4, r5
 8002dc8:	70cc      	strb	r4, [r1, #3]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002dca:	78d1      	ldrb	r1, [r2, #3]
 8002dcc:	70d9      	strb	r1, [r3, #3]
                if (beta == next_pt) {
 8002dce:	9b07      	ldr	r3, [sp, #28]
 8002dd0:	4298      	cmp	r0, r3
 8002dd2:	d010      	beq.n	8002df6 <hsc_decode+0xafa>
 8002dd4:	9b00      	ldr	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002dd6:	3002      	adds	r0, #2
 8002dd8:	3304      	adds	r3, #4
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	9b03      	ldr	r3, [sp, #12]
 8002dde:	3208      	adds	r2, #8
 8002de0:	4283      	cmp	r3, r0
 8002de2:	dcba      	bgt.n	8002d5a <hsc_decode+0xa5e>
 8002de4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002de6:	464f      	mov	r7, r9
 8002de8:	469b      	mov	fp, r3
 8002dea:	4663      	mov	r3, ip
 8002dec:	18fb      	adds	r3, r7, r3
            *(uint32_t*)PRIBIT(h)[lmd0] = 0x03020100;
 8002dee:	4a96      	ldr	r2, [pc, #600]	; (8003048 <hsc_decode+0xd4c>)
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f7ff fbfc 	bl	80025ee <hsc_decode+0x2f2>
                    next_pt = (next_pt << 1) + 2;
 8002df6:	4643      	mov	r3, r8
 8002df8:	3302      	adds	r3, #2
 8002dfa:	9307      	str	r3, [sp, #28]
                    lmd0++;
 8002dfc:	9b04      	ldr	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002dfe:	3002      	adds	r0, #2
                    lmd0++;
 8002e00:	3301      	adds	r3, #1
 8002e02:	9304      	str	r3, [sp, #16]
 8002e04:	9b00      	ldr	r3, [sp, #0]
 8002e06:	3208      	adds	r2, #8
 8002e08:	3304      	adds	r3, #4
 8002e0a:	9300      	str	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002e0c:	9b03      	ldr	r3, [sp, #12]
 8002e0e:	4298      	cmp	r0, r3
 8002e10:	db00      	blt.n	8002e14 <hsc_decode+0xb18>
 8002e12:	e0c0      	b.n	8002f96 <hsc_decode+0xc9a>
 8002e14:	9b04      	ldr	r3, [sp, #16]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	469c      	mov	ip, r3
 8002e1a:	e79e      	b.n	8002d5a <hsc_decode+0xa5e>
            switch (num_paths-1) {
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <hsc_decode+0xb28>
 8002e20:	f7ff fbd2 	bl	80025c8 <hsc_decode+0x2cc>
 8002e24:	4a89      	ldr	r2, [pc, #548]	; (800304c <hsc_decode+0xd50>)
 8002e26:	f7ff fbc9 	bl	80025bc <hsc_decode+0x2c0>
                num_paths = LISTSIZE;
 8002e2a:	2304      	movs	r3, #4
 8002e2c:	2403      	movs	r4, #3
 8002e2e:	2502      	movs	r5, #2
 8002e30:	469b      	mov	fp, r3
 8002e32:	e5fd      	b.n	8002a30 <hsc_decode+0x734>
           chk2       |= (1<<k);
 8002e34:	464b      	mov	r3, r9
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4699      	mov	r9, r3
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2405      	movs	r4, #5
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	e623      	b.n	8002a8c <hsc_decode+0x790>
 8002e44:	4a81      	ldr	r2, [pc, #516]	; (800304c <hsc_decode+0xd50>)
 8002e46:	f7ff fbad 	bl	80025a4 <hsc_decode+0x2a8>
 8002e4a:	4a80      	ldr	r2, [pc, #512]	; (800304c <hsc_decode+0xd50>)
 8002e4c:	f7ff fbb0 	bl	80025b0 <hsc_decode+0x2b4>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e50:	9c04      	ldr	r4, [sp, #16]
 8002e52:	4665      	mov	r5, ip
 8002e54:	00a4      	lsls	r4, r4, #2
 8002e56:	46a0      	mov	r8, r4
 8002e58:	9c00      	ldr	r4, [sp, #0]
 8002e5a:	4445      	add	r5, r8
 8002e5c:	7f2e      	ldrb	r6, [r5, #28]
 8002e5e:	1c65      	adds	r5, r4, #1
 8002e60:	00a4      	lsls	r4, r4, #2
 8002e62:	46a2      	mov	sl, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e64:	00ac      	lsls	r4, r5, #2
 8002e66:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e68:	4655      	mov	r5, sl
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e6a:	940e      	str	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e6c:	19ad      	adds	r5, r5, r6
 8002e6e:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e70:	444e      	add	r6, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e72:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e74:	00b6      	lsls	r6, r6, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e76:	5965      	ldr	r5, [r4, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002e78:	59a6      	ldr	r6, [r4, r6]
					if (use_gfunc) {
 8002e7a:	9c03      	ldr	r4, [sp, #12]
 8002e7c:	2c00      	cmp	r4, #0
 8002e7e:	d000      	beq.n	8002e82 <hsc_decode+0xb86>
 8002e80:	e143      	b.n	800310a <hsc_decode+0xe0e>
    llr_t a_inv = -llr_layer_a;
 8002e82:	426c      	negs	r4, r5
    if (llr_layer_a < llr_layer_b) {
 8002e84:	42b5      	cmp	r5, r6
 8002e86:	db00      	blt.n	8002e8a <hsc_decode+0xb8e>
 8002e88:	e205      	b.n	8003296 <hsc_decode+0xf9a>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002e8a:	42a6      	cmp	r6, r4
 8002e8c:	dc00      	bgt.n	8002e90 <hsc_decode+0xb94>
    llr_t b_inv = -llr_layer_b;
 8002e8e:	4275      	negs	r5, r6
				for (int l=0; l<num_paths; l++) {
 8002e90:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8002e92:	601d      	str	r5, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 8002e94:	2c01      	cmp	r4, #1
 8002e96:	d101      	bne.n	8002e9c <hsc_decode+0xba0>
 8002e98:	f7ff fab9 	bl	800240e <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002e9c:	4665      	mov	r5, ip
 8002e9e:	4654      	mov	r4, sl
 8002ea0:	4445      	add	r5, r8
 8002ea2:	7f6e      	ldrb	r6, [r5, #29]
 8002ea4:	19a5      	adds	r5, r4, r6
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002ea6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002ea8:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002eaa:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002eac:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002eae:	444e      	add	r6, r9
 8002eb0:	00b6      	lsls	r6, r6, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002eb2:	5965      	ldr	r5, [r4, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002eb4:	59a6      	ldr	r6, [r4, r6]
    llr_t a_inv = -llr_layer_a;
 8002eb6:	426c      	negs	r4, r5
 8002eb8:	46a1      	mov	r9, r4
    if (llr_layer_a < llr_layer_b) {
 8002eba:	42b5      	cmp	r5, r6
 8002ebc:	db00      	blt.n	8002ec0 <hsc_decode+0xbc4>
 8002ebe:	e1f0      	b.n	80032a2 <hsc_decode+0xfa6>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002ec0:	454e      	cmp	r6, r9
 8002ec2:	dc00      	bgt.n	8002ec6 <hsc_decode+0xbca>
    llr_t b_inv = -llr_layer_b;
 8002ec4:	4275      	negs	r5, r6
				for (int l=0; l<num_paths; l++) {
 8002ec6:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8002ec8:	605d      	str	r5, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 8002eca:	2c02      	cmp	r4, #2
 8002ecc:	d101      	bne.n	8002ed2 <hsc_decode+0xbd6>
 8002ece:	f7ff fa9e 	bl	800240e <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002ed2:	4665      	mov	r5, ip
 8002ed4:	4654      	mov	r4, sl
 8002ed6:	4445      	add	r5, r8
 8002ed8:	7fae      	ldrb	r6, [r5, #30]
 8002eda:	19a5      	adds	r5, r4, r6
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002edc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002ede:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002ee0:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002ee2:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002ee4:	444e      	add	r6, r9
 8002ee6:	00b6      	lsls	r6, r6, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002ee8:	5965      	ldr	r5, [r4, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002eea:	59a6      	ldr	r6, [r4, r6]
    llr_t a_inv = -llr_layer_a;
 8002eec:	426c      	negs	r4, r5
 8002eee:	46a1      	mov	r9, r4
    if (llr_layer_a < llr_layer_b) {
 8002ef0:	42ae      	cmp	r6, r5
 8002ef2:	dc00      	bgt.n	8002ef6 <hsc_decode+0xbfa>
 8002ef4:	e1e7      	b.n	80032c6 <hsc_decode+0xfca>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002ef6:	454e      	cmp	r6, r9
 8002ef8:	dc00      	bgt.n	8002efc <hsc_decode+0xc00>
    llr_t b_inv = -llr_layer_b;
 8002efa:	4275      	negs	r5, r6
				for (int l=0; l<num_paths; l++) {
 8002efc:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8002efe:	609d      	str	r5, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 8002f00:	2c03      	cmp	r4, #3
 8002f02:	d101      	bne.n	8002f08 <hsc_decode+0xc0c>
 8002f04:	f7ff fa83 	bl	800240e <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002f08:	4645      	mov	r5, r8
 8002f0a:	4654      	mov	r4, sl
 8002f0c:	4465      	add	r5, ip
 8002f0e:	7fee      	ldrb	r6, [r5, #31]
 8002f10:	19a5      	adds	r5, r4, r6
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002f12:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002f14:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002f16:	46a0      	mov	r8, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002f18:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002f1a:	4446      	add	r6, r8
 8002f1c:	00b6      	lsls	r6, r6, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8002f1e:	5965      	ldr	r5, [r4, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8002f20:	59a6      	ldr	r6, [r4, r6]
    llr_t a_inv = -llr_layer_a;
 8002f22:	426c      	negs	r4, r5
 8002f24:	46a0      	mov	r8, r4
    if (llr_layer_a < llr_layer_b) {
 8002f26:	42ae      	cmp	r6, r5
 8002f28:	dc00      	bgt.n	8002f2c <hsc_decode+0xc30>
 8002f2a:	e1d2      	b.n	80032d2 <hsc_decode+0xfd6>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8002f2c:	4546      	cmp	r6, r8
 8002f2e:	dd01      	ble.n	8002f34 <hsc_decode+0xc38>
 8002f30:	f7ff fac3 	bl	80024ba <hsc_decode+0x1be>
    llr_t b_inv = -llr_layer_b;
 8002f34:	4275      	negs	r5, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8002f36:	60dd      	str	r5, [r3, #12]
 8002f38:	f7ff fac0 	bl	80024bc <hsc_decode+0x1c0>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8002f3c:	1a59      	subs	r1, r3, r1
 8002f3e:	64f9      	str	r1, [r7, #76]	; 0x4c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8002f40:	653b      	str	r3, [r7, #80]	; 0x50
 8002f42:	e51c      	b.n	800297e <hsc_decode+0x682>
 8002f44:	2304      	movs	r3, #4
 8002f46:	469c      	mov	ip, r3
 8002f48:	9b00      	ldr	r3, [sp, #0]
           chk2       |= (1<<k);
 8002f4a:	40a0      	lsls	r0, r4
 8002f4c:	085a      	lsrs	r2, r3, #1
 8002f4e:	464b      	mov	r3, r9
 8002f50:	4318      	orrs	r0, r3
           idx_b[k]    = idx_a[i];
 8002f52:	193b      	adds	r3, r7, r4
 8002f54:	4698      	mov	r8, r3
 8002f56:	2374      	movs	r3, #116	; 0x74
 8002f58:	4699      	mov	r9, r3
 8002f5a:	4663      	mov	r3, ip
 8002f5c:	44c8      	add	r8, r9
 8002f5e:	431a      	orrs	r2, r3
           chk2       |= (1<<k);
 8002f60:	b2c3      	uxtb	r3, r0
 8002f62:	4699      	mov	r9, r3
           idx_b[k]    = idx_a[i];
 8002f64:	4643      	mov	r3, r8
           pri[p_i--]  = k;
 8002f66:	197d      	adds	r5, r7, r5
 8002f68:	3548      	adds	r5, #72	; 0x48
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	702c      	strb	r4, [r5, #0]
           idx_b[k]    = idx_a[i];
 8002f6e:	701e      	strb	r6, [r3, #0]
    switch ((chk1>>1) & 7) {
 8002f70:	2a06      	cmp	r2, #6
 8002f72:	d800      	bhi.n	8002f76 <hsc_decode+0xc7a>
 8002f74:	e5ba      	b.n	8002aec <hsc_decode+0x7f0>
 8002f76:	2348      	movs	r3, #72	; 0x48
 8002f78:	003a      	movs	r2, r7
 8002f7a:	5cfb      	ldrb	r3, [r7, r3]
 8002f7c:	3274      	adds	r2, #116	; 0x74
 8002f7e:	5cd1      	ldrb	r1, [r2, r3]
 8002f80:	084b      	lsrs	r3, r1, #1
 8002f82:	9307      	str	r3, [sp, #28]
 8002f84:	e5c5      	b.n	8002b12 <hsc_decode+0x816>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8002f86:	1acb      	subs	r3, r1, r3
 8002f88:	657b      	str	r3, [r7, #84]	; 0x54
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8002f8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f8c:	e502      	b.n	8002994 <hsc_decode+0x698>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8002f8e:	1acb      	subs	r3, r1, r3
 8002f90:	65fb      	str	r3, [r7, #92]	; 0x5c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8002f92:	6639      	str	r1, [r7, #96]	; 0x60
 8002f94:	e509      	b.n	80029aa <hsc_decode+0x6ae>
 8002f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f98:	464f      	mov	r7, r9
 8002f9a:	469b      	mov	fp, r3
 8002f9c:	9b04      	ldr	r3, [sp, #16]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	469c      	mov	ip, r3
 8002fa2:	e722      	b.n	8002dea <hsc_decode+0xaee>
            next_pt         = 2;
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	4699      	mov	r9, r3
            lmd0            = 0;
 8002fa8:	2300      	movs	r3, #0
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002faa:	2606      	movs	r6, #6
 8002fac:	2202      	movs	r2, #2
 8002fae:	469c      	mov	ip, r3
 8002fb0:	46ba      	mov	sl, r7
 8002fb2:	4c24      	ldr	r4, [pc, #144]	; (8003044 <hsc_decode+0xd48>)
            lmd0            = 0;
 8002fb4:	9304      	str	r3, [sp, #16]
                int incval  = (beta < beta_laststage);
 8002fb6:	9901      	ldr	r1, [sp, #4]
 8002fb8:	2301      	movs	r3, #1
 8002fba:	4291      	cmp	r1, r2
 8002fbc:	dc00      	bgt.n	8002fc0 <hsc_decode+0xcc4>
 8002fbe:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8002fc0:	4660      	mov	r0, ip
 8002fc2:	4655      	mov	r5, sl
 8002fc4:	5c2d      	ldrb	r5, [r5, r0]
 8002fc6:	9802      	ldr	r0, [sp, #8]
 8002fc8:	0091      	lsls	r1, r2, #2
 8002fca:	4680      	mov	r8, r0
 8002fcc:	4441      	add	r1, r8
 8002fce:	5d49      	ldrb	r1, [r1, r5]
 8002fd0:	7820      	ldrb	r0, [r4, #0]
 8002fd2:	4688      	mov	r8, r1
 8002fd4:	4647      	mov	r7, r8
 8002fd6:	0055      	lsls	r5, r2, #1
 8002fd8:	18e9      	adds	r1, r5, r3
 8002fda:	4047      	eors	r7, r0
 8002fdc:	9802      	ldr	r0, [sp, #8]
 8002fde:	0089      	lsls	r1, r1, #2
 8002fe0:	5447      	strb	r7, [r0, r1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8002fe2:	18f3      	adds	r3, r6, r3
 8002fe4:	7821      	ldrb	r1, [r4, #0]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	54c1      	strb	r1, [r0, r3]
                if (beta == next_pt) {
 8002fea:	4591      	cmp	r9, r2
 8002fec:	d007      	beq.n	8002ffe <hsc_decode+0xd02>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8002fee:	9b03      	ldr	r3, [sp, #12]
 8002ff0:	3202      	adds	r2, #2
 8002ff2:	3604      	adds	r6, #4
 8002ff4:	3408      	adds	r4, #8
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	dcdd      	bgt.n	8002fb6 <hsc_decode+0xcba>
 8002ffa:	4657      	mov	r7, sl
 8002ffc:	e6f5      	b.n	8002dea <hsc_decode+0xaee>
                    next_pt = (next_pt << 1) + 2;
 8002ffe:	1cab      	adds	r3, r5, #2
 8003000:	4699      	mov	r9, r3
                    lmd0++;
 8003002:	9b04      	ldr	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003004:	3202      	adds	r2, #2
                    lmd0++;
 8003006:	3301      	adds	r3, #1
 8003008:	9304      	str	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800300a:	9b03      	ldr	r3, [sp, #12]
 800300c:	3604      	adds	r6, #4
 800300e:	3408      	adds	r4, #8
 8003010:	429a      	cmp	r2, r3
 8003012:	db00      	blt.n	8003016 <hsc_decode+0xd1a>
 8003014:	e14b      	b.n	80032ae <hsc_decode+0xfb2>
 8003016:	9b04      	ldr	r3, [sp, #16]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	469c      	mov	ip, r3
 800301c:	e7cb      	b.n	8002fb6 <hsc_decode+0xcba>
 800301e:	b249      	sxtb	r1, r1
 8003020:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003022:	e46a      	b.n	80028fa <hsc_decode+0x5fe>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	667b      	str	r3, [r7, #100]	; 0x64
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8003028:	66ba      	str	r2, [r7, #104]	; 0x68
 800302a:	e4c9      	b.n	80029c0 <hsc_decode+0x6c4>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800302c:	003b      	movs	r3, r7
 800302e:	e6de      	b.n	8002dee <hsc_decode+0xaf2>
        case 0: idx_b[1]    = idx_a[1]; 
 8003030:	003a      	movs	r2, r7
                pri[0]      = 1;
 8003032:	2048      	movs	r0, #72	; 0x48
 8003034:	2401      	movs	r4, #1
        case 0: idx_b[1]    = idx_a[1]; 
 8003036:	3274      	adds	r2, #116	; 0x74
                pri[0]      = 1;
 8003038:	543c      	strb	r4, [r7, r0]
        case 0: idx_b[1]    = idx_a[1]; 
 800303a:	7051      	strb	r1, [r2, #1]
 800303c:	e569      	b.n	8002b12 <hsc_decode+0x816>
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	08009a98 	.word	0x08009a98
 8003044:	2000057c 	.word	0x2000057c
 8003048:	03020100 	.word	0x03020100
 800304c:	20000970 	.word	0x20000970
            lmd0            = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	469c      	mov	ip, r3
 8003054:	9304      	str	r3, [sp, #16]
 8003056:	465b      	mov	r3, fp
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003058:	2606      	movs	r6, #6
 800305a:	930e      	str	r3, [sp, #56]	; 0x38
 800305c:	4663      	mov	r3, ip
 800305e:	2102      	movs	r1, #2
            next_pt         = 2;
 8003060:	46da      	mov	sl, fp
 8003062:	46b8      	mov	r8, r7
 8003064:	4ca7      	ldr	r4, [pc, #668]	; (8003304 <hsc_decode+0x1008>)
 8003066:	9600      	str	r6, [sp, #0]
 8003068:	9307      	str	r3, [sp, #28]
                int incval  = (beta < beta_laststage);
 800306a:	9a01      	ldr	r2, [sp, #4]
 800306c:	2301      	movs	r3, #1
 800306e:	428a      	cmp	r2, r1
 8003070:	dc00      	bgt.n	8003074 <hsc_decode+0xd78>
 8003072:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003074:	4642      	mov	r2, r8
 8003076:	9f07      	ldr	r7, [sp, #28]
 8003078:	0088      	lsls	r0, r1, #2
 800307a:	5dd2      	ldrb	r2, [r2, r7]
 800307c:	9f02      	ldr	r7, [sp, #8]
 800307e:	7825      	ldrb	r5, [r4, #0]
 8003080:	46bc      	mov	ip, r7
 8003082:	4460      	add	r0, ip
 8003084:	5c82      	ldrb	r2, [r0, r2]
 8003086:	4691      	mov	r9, r2
 8003088:	464e      	mov	r6, r9
                int bit0_i  = (beta*2) + incval;
 800308a:	004a      	lsls	r2, r1, #1
 800308c:	4694      	mov	ip, r2
 800308e:	18d2      	adds	r2, r2, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003090:	4075      	eors	r5, r6
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	54bd      	strb	r5, [r7, r2]
                int bit1_i  = ((beta+1)*2) + incval;
 8003096:	9d00      	ldr	r5, [sp, #0]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003098:	003e      	movs	r6, r7
                int bit1_i  = ((beta+1)*2) + incval;
 800309a:	46a9      	mov	r9, r5
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800309c:	7825      	ldrb	r5, [r4, #0]
                int bit1_i  = ((beta+1)*2) + incval;
 800309e:	444b      	add	r3, r9
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80030a0:	46a9      	mov	r9, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80030a2:	9f07      	ldr	r7, [sp, #28]
 80030a4:	4645      	mov	r5, r8
 80030a6:	46bb      	mov	fp, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80030a8:	464f      	mov	r7, r9
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80030aa:	46b1      	mov	r9, r6
 80030ac:	445d      	add	r5, fp
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80030ae:	009b      	lsls	r3, r3, #2
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80030b0:	786d      	ldrb	r5, [r5, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80030b2:	54f7      	strb	r7, [r6, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80030b4:	5d40      	ldrb	r0, [r0, r5]
 80030b6:	7865      	ldrb	r5, [r4, #1]
 80030b8:	444a      	add	r2, r9
 80030ba:	4068      	eors	r0, r5
 80030bc:	7050      	strb	r0, [r2, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80030be:	7862      	ldrb	r2, [r4, #1]
 80030c0:	444b      	add	r3, r9
 80030c2:	705a      	strb	r2, [r3, #1]
                if (beta == next_pt) {
 80030c4:	4551      	cmp	r1, sl
 80030c6:	d00d      	beq.n	80030e4 <hsc_decode+0xde8>
 80030c8:	9b00      	ldr	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80030ca:	3102      	adds	r1, #2
 80030cc:	3304      	adds	r3, #4
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	9b03      	ldr	r3, [sp, #12]
 80030d2:	3408      	adds	r4, #8
 80030d4:	428b      	cmp	r3, r1
 80030d6:	dcc8      	bgt.n	800306a <hsc_decode+0xd6e>
 80030d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030da:	4647      	mov	r7, r8
 80030dc:	469b      	mov	fp, r3
 80030de:	9b07      	ldr	r3, [sp, #28]
 80030e0:	469c      	mov	ip, r3
 80030e2:	e682      	b.n	8002dea <hsc_decode+0xaee>
                    next_pt = (next_pt << 1) + 2;
 80030e4:	2302      	movs	r3, #2
 80030e6:	4463      	add	r3, ip
 80030e8:	469a      	mov	sl, r3
                    lmd0++;
 80030ea:	9b04      	ldr	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80030ec:	3102      	adds	r1, #2
                    lmd0++;
 80030ee:	3301      	adds	r3, #1
 80030f0:	9304      	str	r3, [sp, #16]
 80030f2:	9b00      	ldr	r3, [sp, #0]
 80030f4:	3408      	adds	r4, #8
 80030f6:	3304      	adds	r3, #4
 80030f8:	9300      	str	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80030fa:	9b03      	ldr	r3, [sp, #12]
 80030fc:	4299      	cmp	r1, r3
 80030fe:	db00      	blt.n	8003102 <hsc_decode+0xe06>
 8003100:	e0da      	b.n	80032b8 <hsc_decode+0xfbc>
 8003102:	9b04      	ldr	r3, [sp, #16]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	9307      	str	r3, [sp, #28]
 8003108:	e7af      	b.n	800306a <hsc_decode+0xd6e>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800310a:	4664      	mov	r4, ip
 800310c:	4647      	mov	r7, r8
 800310e:	5de4      	ldrb	r4, [r4, r7]
    if (bit_layer) {
 8003110:	5d04      	ldrb	r4, [r0, r4]
 8003112:	2c00      	cmp	r4, #0
 8003114:	d000      	beq.n	8003118 <hsc_decode+0xe1c>
        llr_layer_a = -llr_layer_a;
 8003116:	426d      	negs	r5, r5
				for (int l=0; l<num_paths; l++) {
 8003118:	465c      	mov	r4, fp
    return (llr_layer_b + llr_layer_a);
 800311a:	1975      	adds	r5, r6, r5
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800311c:	601d      	str	r5, [r3, #0]
				for (int l=0; l<num_paths; l++) {
 800311e:	2c01      	cmp	r4, #1
 8003120:	d101      	bne.n	8003126 <hsc_decode+0xe2a>
 8003122:	f7ff f974 	bl	800240e <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003126:	4666      	mov	r6, ip
 8003128:	4446      	add	r6, r8
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800312a:	7874      	ldrb	r4, [r6, #1]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800312c:	7f75      	ldrb	r5, [r6, #29]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800312e:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003130:	4654      	mov	r4, sl
 8003132:	1966      	adds	r6, r4, r5
    if (bit_layer) {
 8003134:	464c      	mov	r4, r9
 8003136:	5d04      	ldrb	r4, [r0, r4]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003138:	00b6      	lsls	r6, r6, #2
    if (bit_layer) {
 800313a:	0027      	movs	r7, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800313c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800313e:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003140:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003142:	444d      	add	r5, r9
 8003144:	00ad      	lsls	r5, r5, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003146:	59a6      	ldr	r6, [r4, r6]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003148:	5965      	ldr	r5, [r4, r5]
    if (bit_layer) {
 800314a:	2f00      	cmp	r7, #0
 800314c:	d000      	beq.n	8003150 <hsc_decode+0xe54>
        llr_layer_a = -llr_layer_a;
 800314e:	4276      	negs	r6, r6
				for (int l=0; l<num_paths; l++) {
 8003150:	465c      	mov	r4, fp
    return (llr_layer_b + llr_layer_a);
 8003152:	19ae      	adds	r6, r5, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003154:	605e      	str	r6, [r3, #4]
				for (int l=0; l<num_paths; l++) {
 8003156:	2c02      	cmp	r4, #2
 8003158:	d101      	bne.n	800315e <hsc_decode+0xe62>
 800315a:	f7ff f958 	bl	800240e <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800315e:	4666      	mov	r6, ip
 8003160:	4446      	add	r6, r8
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003162:	78b4      	ldrb	r4, [r6, #2]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003164:	7fb5      	ldrb	r5, [r6, #30]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003166:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003168:	4654      	mov	r4, sl
 800316a:	1966      	adds	r6, r4, r5
    if (bit_layer) {
 800316c:	464c      	mov	r4, r9
 800316e:	5d04      	ldrb	r4, [r0, r4]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003170:	00b6      	lsls	r6, r6, #2
    if (bit_layer) {
 8003172:	0027      	movs	r7, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003174:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003176:	46a1      	mov	r9, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003178:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800317a:	444d      	add	r5, r9
 800317c:	00ad      	lsls	r5, r5, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800317e:	59a6      	ldr	r6, [r4, r6]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003180:	5965      	ldr	r5, [r4, r5]
    if (bit_layer) {
 8003182:	2f00      	cmp	r7, #0
 8003184:	d000      	beq.n	8003188 <hsc_decode+0xe8c>
        llr_layer_a = -llr_layer_a;
 8003186:	4276      	negs	r6, r6
				for (int l=0; l<num_paths; l++) {
 8003188:	465c      	mov	r4, fp
    return (llr_layer_b + llr_layer_a);
 800318a:	19ae      	adds	r6, r5, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800318c:	609e      	str	r6, [r3, #8]
				for (int l=0; l<num_paths; l++) {
 800318e:	2c03      	cmp	r4, #3
 8003190:	d101      	bne.n	8003196 <hsc_decode+0xe9a>
 8003192:	f7ff f93c 	bl	800240e <hsc_decode+0x112>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003196:	4646      	mov	r6, r8
 8003198:	4466      	add	r6, ip
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800319a:	78f4      	ldrb	r4, [r6, #3]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800319c:	7ff5      	ldrb	r5, [r6, #31]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800319e:	46a0      	mov	r8, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80031a0:	4654      	mov	r4, sl
 80031a2:	1966      	adds	r6, r4, r5
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80031a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80031a6:	00b6      	lsls	r6, r6, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80031a8:	46a1      	mov	r9, r4
    if (bit_layer) {
 80031aa:	4644      	mov	r4, r8
 80031ac:	5d04      	ldrb	r4, [r0, r4]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80031ae:	444d      	add	r5, r9
    if (bit_layer) {
 80031b0:	46a0      	mov	r8, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80031b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80031b4:	00ad      	lsls	r5, r5, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80031b6:	59a6      	ldr	r6, [r4, r6]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80031b8:	5965      	ldr	r5, [r4, r5]
    if (bit_layer) {
 80031ba:	4644      	mov	r4, r8
 80031bc:	2c00      	cmp	r4, #0
 80031be:	d000      	beq.n	80031c2 <hsc_decode+0xec6>
        llr_layer_a = -llr_layer_a;
 80031c0:	4276      	negs	r6, r6
    return (llr_layer_b + llr_layer_a);
 80031c2:	19ae      	adds	r6, r5, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80031c4:	60de      	str	r6, [r3, #12]
 80031c6:	f7ff f922 	bl	800240e <hsc_decode+0x112>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80031ca:	3303      	adds	r3, #3
 80031cc:	469a      	mov	sl, r3
            next_pt         = 2;
 80031ce:	3b04      	subs	r3, #4
 80031d0:	9307      	str	r3, [sp, #28]
            lmd0            = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	9304      	str	r3, [sp, #16]
 80031d6:	469c      	mov	ip, r3
 80031d8:	465b      	mov	r3, fp
 80031da:	930e      	str	r3, [sp, #56]	; 0x38
 80031dc:	4653      	mov	r3, sl
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80031de:	2402      	movs	r4, #2
 80031e0:	46b9      	mov	r9, r7
 80031e2:	4948      	ldr	r1, [pc, #288]	; (8003304 <hsc_decode+0x1008>)
 80031e4:	9300      	str	r3, [sp, #0]
                int incval  = (beta < beta_laststage);
 80031e6:	9a01      	ldr	r2, [sp, #4]
 80031e8:	2301      	movs	r3, #1
 80031ea:	42a2      	cmp	r2, r4
 80031ec:	dc00      	bgt.n	80031f0 <hsc_decode+0xef4>
 80031ee:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80031f0:	9f02      	ldr	r7, [sp, #8]
 80031f2:	4665      	mov	r5, ip
 80031f4:	464a      	mov	r2, r9
 80031f6:	46b8      	mov	r8, r7
 80031f8:	5d52      	ldrb	r2, [r2, r5]
 80031fa:	00a0      	lsls	r0, r4, #2
 80031fc:	4440      	add	r0, r8
 80031fe:	5c85      	ldrb	r5, [r0, r2]
 8003200:	780e      	ldrb	r6, [r1, #0]
                int bit0_i  = (beta*2) + incval;
 8003202:	0062      	lsls	r2, r4, #1
 8003204:	4690      	mov	r8, r2
 8003206:	18d2      	adds	r2, r2, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003208:	4075      	eors	r5, r6
 800320a:	0092      	lsls	r2, r2, #2
 800320c:	464e      	mov	r6, r9
 800320e:	54bd      	strb	r5, [r7, r2]
                int bit1_i  = ((beta+1)*2) + incval;
 8003210:	9d00      	ldr	r5, [sp, #0]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003212:	4466      	add	r6, ip
                int bit1_i  = ((beta+1)*2) + incval;
 8003214:	46aa      	mov	sl, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003216:	7877      	ldrb	r7, [r6, #1]
                int bit1_i  = ((beta+1)*2) + incval;
 8003218:	4453      	add	r3, sl
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800321a:	46ba      	mov	sl, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800321c:	780d      	ldrb	r5, [r1, #0]
 800321e:	9f02      	ldr	r7, [sp, #8]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	54fd      	strb	r5, [r7, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003224:	784f      	ldrb	r7, [r1, #1]
 8003226:	4655      	mov	r5, sl
 8003228:	46ba      	mov	sl, r7
 800322a:	9f02      	ldr	r7, [sp, #8]
 800322c:	5d45      	ldrb	r5, [r0, r5]
 800322e:	46bb      	mov	fp, r7
 8003230:	4657      	mov	r7, sl
 8003232:	445a      	add	r2, fp
 8003234:	407d      	eors	r5, r7
 8003236:	7055      	strb	r5, [r2, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003238:	784d      	ldrb	r5, [r1, #1]
 800323a:	445b      	add	r3, fp
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800323c:	78b6      	ldrb	r6, [r6, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800323e:	705d      	strb	r5, [r3, #1]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003240:	5d80      	ldrb	r0, [r0, r6]
 8003242:	788d      	ldrb	r5, [r1, #2]
 8003244:	4068      	eors	r0, r5
 8003246:	7090      	strb	r0, [r2, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003248:	788a      	ldrb	r2, [r1, #2]
 800324a:	709a      	strb	r2, [r3, #2]
                if (beta == next_pt) {
 800324c:	9b07      	ldr	r3, [sp, #28]
 800324e:	429c      	cmp	r4, r3
 8003250:	d008      	beq.n	8003264 <hsc_decode+0xf68>
 8003252:	9b00      	ldr	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003254:	3402      	adds	r4, #2
 8003256:	3304      	adds	r3, #4
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	9b03      	ldr	r3, [sp, #12]
 800325c:	3108      	adds	r1, #8
 800325e:	42a3      	cmp	r3, r4
 8003260:	dcc1      	bgt.n	80031e6 <hsc_decode+0xeea>
 8003262:	e5bf      	b.n	8002de4 <hsc_decode+0xae8>
                    next_pt = (next_pt << 1) + 2;
 8003264:	4643      	mov	r3, r8
 8003266:	3302      	adds	r3, #2
 8003268:	9307      	str	r3, [sp, #28]
                    lmd0++;
 800326a:	9b04      	ldr	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800326c:	3402      	adds	r4, #2
                    lmd0++;
 800326e:	3301      	adds	r3, #1
 8003270:	9304      	str	r3, [sp, #16]
 8003272:	9b00      	ldr	r3, [sp, #0]
 8003274:	3108      	adds	r1, #8
 8003276:	3304      	adds	r3, #4
 8003278:	9300      	str	r3, [sp, #0]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800327a:	9b03      	ldr	r3, [sp, #12]
 800327c:	429c      	cmp	r4, r3
 800327e:	db00      	blt.n	8003282 <hsc_decode+0xf86>
 8003280:	e689      	b.n	8002f96 <hsc_decode+0xc9a>
 8003282:	9b04      	ldr	r3, [sp, #16]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	469c      	mov	ip, r3
 8003288:	e7ad      	b.n	80031e6 <hsc_decode+0xeea>
 800328a:	9b00      	ldr	r3, [sp, #0]
 800328c:	085a      	lsrs	r2, r3, #1
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 800328e:	2303      	movs	r3, #3
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	469b      	mov	fp, r3
 8003294:	e427      	b.n	8002ae6 <hsc_decode+0x7ea>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 8003296:	0035      	movs	r5, r6
 8003298:	42a6      	cmp	r6, r4
 800329a:	db00      	blt.n	800329e <hsc_decode+0xfa2>
 800329c:	e5f8      	b.n	8002e90 <hsc_decode+0xb94>
 800329e:	0025      	movs	r5, r4
 80032a0:	e5f6      	b.n	8002e90 <hsc_decode+0xb94>
 80032a2:	0035      	movs	r5, r6
 80032a4:	454e      	cmp	r6, r9
 80032a6:	db00      	blt.n	80032aa <hsc_decode+0xfae>
 80032a8:	e60d      	b.n	8002ec6 <hsc_decode+0xbca>
 80032aa:	464d      	mov	r5, r9
 80032ac:	e60b      	b.n	8002ec6 <hsc_decode+0xbca>
 80032ae:	9b04      	ldr	r3, [sp, #16]
 80032b0:	4657      	mov	r7, sl
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	469c      	mov	ip, r3
 80032b6:	e598      	b.n	8002dea <hsc_decode+0xaee>
 80032b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032ba:	4647      	mov	r7, r8
 80032bc:	469b      	mov	fp, r3
 80032be:	9b04      	ldr	r3, [sp, #16]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	469c      	mov	ip, r3
 80032c4:	e591      	b.n	8002dea <hsc_decode+0xaee>
 80032c6:	0035      	movs	r5, r6
 80032c8:	454e      	cmp	r6, r9
 80032ca:	db00      	blt.n	80032ce <hsc_decode+0xfd2>
 80032cc:	e616      	b.n	8002efc <hsc_decode+0xc00>
 80032ce:	464d      	mov	r5, r9
 80032d0:	e614      	b.n	8002efc <hsc_decode+0xc00>
 80032d2:	0035      	movs	r5, r6
 80032d4:	4546      	cmp	r6, r8
 80032d6:	db01      	blt.n	80032dc <hsc_decode+0xfe0>
 80032d8:	f7ff f8ef 	bl	80024ba <hsc_decode+0x1be>
 80032dc:	4645      	mov	r5, r8
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80032de:	60dd      	str	r5, [r3, #12]
 80032e0:	f7ff f8ec 	bl	80024bc <hsc_decode+0x1c0>
        for (i=0, phi=0; phi<h->infobits; i++) {
 80032e4:	225f      	movs	r2, #95	; 0x5f
 80032e6:	4690      	mov	r8, r2
 80032e8:	3210      	adds	r2, #16
 80032ea:	4694      	mov	ip, r2
 80032ec:	3208      	adds	r2, #8
 80032ee:	4692      	mov	sl, r2
 80032f0:	3204      	adds	r2, #4
 80032f2:	4691      	mov	r9, r2
 80032f4:	3203      	adds	r2, #3
 80032f6:	9213      	str	r2, [sp, #76]	; 0x4c
 80032f8:	3201      	adds	r2, #1
 80032fa:	277d      	movs	r7, #125	; 0x7d
 80032fc:	2100      	movs	r1, #0
 80032fe:	9212      	str	r2, [sp, #72]	; 0x48
 8003300:	f7ff fafb 	bl	80028fa <hsc_decode+0x5fe>
 8003304:	2000057c 	.word	0x2000057c

08003308 <hsc_decode_blockllr>:




uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 8003308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330a:	46de      	mov	lr, fp
 800330c:	4657      	mov	r7, sl
 800330e:	464e      	mov	r6, r9
 8003310:	4645      	mov	r5, r8
 8003312:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t crcreg;
    int i;
    int num_paths;

    /// Zero intermediate buffers
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 8003314:	4fc2      	ldr	r7, [pc, #776]	; (8003620 <hsc_decode_blockllr+0x318>)
uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 8003316:	b099      	sub	sp, #100	; 0x64
 8003318:	900f      	str	r0, [sp, #60]	; 0x3c
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 800331a:	0038      	movs	r0, r7
uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 800331c:	9112      	str	r1, [sp, #72]	; 0x48
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 800331e:	301c      	adds	r0, #28
uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 8003320:	920a      	str	r2, [sp, #40]	; 0x28
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 8003322:	2100      	movs	r1, #0
 8003324:	2207      	movs	r2, #7
uint8_t hsc_decode_blockllr(hsc_t* h, uint8_t* output, const uint8_t* inbytes, const llr_t blockllr) {
 8003326:	001c      	movs	r4, r3
 8003328:	9300      	str	r3, [sp, #0]
    ot_memset_4(PRILLR(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 800332a:	f005 f94f 	bl	80085cc <ot_memset_4>
    ot_memset_4(PRIBIT(h), 0, (LISTSIZE*NLAYER)*sizeof(uint8_t)/4);
 800332e:	0038      	movs	r0, r7
 8003330:	2207      	movs	r2, #7
 8003332:	2100      	movs	r1, #0
 8003334:	f005 f94a 	bl	80085cc <ot_memset_4>
    ot_memset_4(PM(h), 0, LISTSIZE/4);
 8003338:	0038      	movs	r0, r7
 800333a:	2201      	movs	r2, #1
 800333c:	3038      	adds	r0, #56	; 0x38
 800333e:	2100      	movs	r1, #0
 8003340:	f005 f944 	bl	80085cc <ot_memset_4>
    /// num_paths intializes as 1, will expand to LISTSIZE
    num_paths = 1;

    /// Outer Decoding Loop.
    /// Runs once per each bit in the Block (128 iteration)
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 8003344:	2100      	movs	r1, #0
    PRIORITY(h)[0] = 0;
 8003346:	2348      	movs	r3, #72	; 0x48
 8003348:	2200      	movs	r2, #0
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 800334a:	9106      	str	r1, [sp, #24]
    num_paths = 1;
 800334c:	3101      	adds	r1, #1
				int ibit	= beta_e & 7;
				int ibyte	= beta_e >> 3;
				uint8_t bit1= (inbytes[ibyte] >> ibit);
				uint8_t bit0= b1 & 1;
				bit1		= (bit1>>1) & 1;
				llr0 		= bit0 ? -blockllr : blockllr;
 800334e:	468b      	mov	fp, r1
 8003350:	48b4      	ldr	r0, [pc, #720]	; (8003624 <hsc_decode_blockllr+0x31c>)
    PRIORITY(h)[0] = 0;
 8003352:	54fa      	strb	r2, [r7, r3]
 8003354:	9011      	str	r0, [sp, #68]	; 0x44
 8003356:	48b4      	ldr	r0, [pc, #720]	; (8003628 <hsc_decode_blockllr+0x320>)
				llr0 		= bit0 ? -blockllr : blockllr;
 8003358:	4263      	negs	r3, r4
 800335a:	9003      	str	r0, [sp, #12]
 800335c:	48b3      	ldr	r0, [pc, #716]	; (800362c <hsc_decode_blockllr+0x324>)
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	900b      	str	r0, [sp, #44]	; 0x2c
 8003362:	48b3      	ldr	r0, [pc, #716]	; (8003630 <hsc_decode_blockllr+0x328>)
 8003364:	9b06      	ldr	r3, [sp, #24]
 8003366:	9010      	str	r0, [sp, #64]	; 0x40
                next_pt   >>= 1;
                use_gfunc   = phi & next_pt;

                if (--lmd0 >= 0) {
#                   if WORDIFY && (LISTSIZE==4)
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 8003368:	48b2      	ldr	r0, [pc, #712]	; (8003634 <hsc_decode_blockllr+0x32c>)
 800336a:	900c      	str	r0, [sp, #48]	; 0x30
#           endif

        }
        else {
            // calculate llr of each fork path
            int min_lmd = minlambda_lut[phi];
 800336c:	48b2      	ldr	r0, [pc, #712]	; (8003638 <hsc_decode_blockllr+0x330>)
 800336e:	9013      	str	r0, [sp, #76]	; 0x4c
                        case 1: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
                        case 0: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];
                       default: break;
                    }
                    lmd = max_lmd;
                    switch (max_lmd) {
 8003370:	48b2      	ldr	r0, [pc, #712]	; (800363c <hsc_decode_blockllr+0x334>)
 8003372:	9014      	str	r0, [sp, #80]	; 0x50
                    switch (max_lmd-min_lmd) {
 8003374:	48b2      	ldr	r0, [pc, #712]	; (8003640 <hsc_decode_blockllr+0x338>)
 8003376:	9015      	str	r0, [sp, #84]	; 0x54
        int next_pt     = (1 << lmd0);
 8003378:	2401      	movs	r4, #1
        int lmd0        = lambda_lut[phi];
 800337a:	9a11      	ldr	r2, [sp, #68]	; 0x44
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 800337c:	2102      	movs	r1, #2
        int lmd0        = lambda_lut[phi];
 800337e:	5cd0      	ldrb	r0, [r2, r3]
        int next_pt     = (1 << lmd0);
 8003380:	4084      	lsls	r4, r0
        bool use_gfunc  = (bool)(phi & next_pt);
 8003382:	4023      	ands	r3, r4
 8003384:	001a      	movs	r2, r3
 8003386:	1e53      	subs	r3, r2, #1
 8003388:	419a      	sbcs	r2, r3
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 800338a:	4081      	lsls	r1, r0
        bool use_gfunc  = (bool)(phi & next_pt);
 800338c:	b2d3      	uxtb	r3, r2
        int lmd0        = lambda_lut[phi];
 800338e:	9005      	str	r0, [sp, #20]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8003390:	4688      	mov	r8, r1
        bool use_gfunc  = (bool)(phi & next_pt);
 8003392:	9304      	str	r3, [sp, #16]
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 8003394:	2901      	cmp	r1, #1
 8003396:	dd7b      	ble.n	8003490 <hsc_decode_blockllr+0x188>
 8003398:	9810      	ldr	r0, [sp, #64]	; 0x40
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 800339a:	465b      	mov	r3, fp
 800339c:	4684      	mov	ip, r0
 800339e:	49a9      	ldr	r1, [pc, #676]	; (8003644 <hsc_decode_blockllr+0x33c>)
 80033a0:	3b01      	subs	r3, #1
 80033a2:	4441      	add	r1, r8
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	0109      	lsls	r1, r1, #4
 80033a8:	930d      	str	r3, [sp, #52]	; 0x34
 80033aa:	4461      	add	r1, ip
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 80033ac:	469c      	mov	ip, r3
 80033ae:	4643      	mov	r3, r8
 80033b0:	1e5d      	subs	r5, r3, #1
 80033b2:	4ba5      	ldr	r3, [pc, #660]	; (8003648 <hsc_decode_blockllr+0x340>)
 80033b4:	9702      	str	r7, [sp, #8]
 80033b6:	4443      	add	r3, r8
 80033b8:	9308      	str	r3, [sp, #32]
 80033ba:	4ba4      	ldr	r3, [pc, #656]	; (800364c <hsc_decode_blockllr+0x344>)
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 80033bc:	2200      	movs	r2, #0
 80033be:	4443      	add	r3, r8
 80033c0:	9307      	str	r3, [sp, #28]
 80033c2:	4643      	mov	r3, r8
 80033c4:	0027      	movs	r7, r4
 80033c6:	46a8      	mov	r8, r5
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 80033c8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80033ca:	9309      	str	r3, [sp, #36]	; 0x24
 80033cc:	4460      	add	r0, ip
 80033ce:	900e      	str	r0, [sp, #56]	; 0x38
 80033d0:	4d9f      	ldr	r5, [pc, #636]	; (8003650 <hsc_decode_blockllr+0x348>)
 80033d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033d4:	46ac      	mov	ip, r5
 80033d6:	1a9c      	subs	r4, r3, r2
 80033d8:	9b08      	ldr	r3, [sp, #32]
 80033da:	00e0      	lsls	r0, r4, #3
 80033dc:	1a9e      	subs	r6, r3, r2
 80033de:	0075      	lsls	r5, r6, #1
 80033e0:	4460      	add	r0, ip
 80033e2:	46ac      	mov	ip, r5
 80033e4:	4645      	mov	r5, r8
 80033e6:	1aad      	subs	r5, r5, r2
 80033e8:	46aa      	mov	sl, r5
			if (beta_x2 >= BLOCKLENGTH) {
 80033ea:	4665      	mov	r5, ip
 80033ec:	9b07      	ldr	r3, [sp, #28]
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	2d7f      	cmp	r5, #127	; 0x7f
 80033f4:	dc01      	bgt.n	80033fa <hsc_decode_blockllr+0xf2>
 80033f6:	f000 fd57 	bl	8003ea8 <hsc_decode_blockllr+0xba0>
				uint8_t bit1= (inbytes[ibyte] >> ibit);
 80033fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
				int ibyte	= beta_e >> 3;
 80033fc:	10dc      	asrs	r4, r3, #3
				uint8_t bit1= (inbytes[ibyte] >> ibit);
 80033fe:	5d2c      	ldrb	r4, [r5, r4]
				int ibit	= beta_e & 7;
 8003400:	2507      	movs	r5, #7
 8003402:	402b      	ands	r3, r5
				uint8_t bit1= (inbytes[ibyte] >> ibit);
 8003404:	411c      	asrs	r4, r3
				llr1		= bit1 ? -blockllr : blockllr;
 8003406:	2302      	movs	r3, #2
 8003408:	4223      	tst	r3, r4
 800340a:	d100      	bne.n	800340e <hsc_decode_blockllr+0x106>
 800340c:	e258      	b.n	80038c0 <hsc_decode_blockllr+0x5b8>
					if (use_gfunc) {
 800340e:	9d01      	ldr	r5, [sp, #4]
 8003410:	9c04      	ldr	r4, [sp, #16]
 8003412:	002b      	movs	r3, r5
 8003414:	2c00      	cmp	r4, #0
 8003416:	d100      	bne.n	800341a <hsc_decode_blockllr+0x112>
 8003418:	e29c      	b.n	8003954 <hsc_decode_blockllr+0x64c>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800341a:	9c05      	ldr	r4, [sp, #20]
 800341c:	00a5      	lsls	r5, r4, #2
 800341e:	9c02      	ldr	r4, [sp, #8]
 8003420:	5d66      	ldrb	r6, [r4, r5]
    if (bit_layer) {
 8003422:	9c00      	ldr	r4, [sp, #0]
 8003424:	5d86      	ldrb	r6, [r0, r6]
 8003426:	2e00      	cmp	r6, #0
 8003428:	d100      	bne.n	800342c <hsc_decode_blockllr+0x124>
 800342a:	9c01      	ldr	r4, [sp, #4]
    return (llr_layer_b + llr_layer_a);
 800342c:	191c      	adds	r4, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800342e:	600c      	str	r4, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 8003430:	465c      	mov	r4, fp
 8003432:	2c01      	cmp	r4, #1
 8003434:	d024      	beq.n	8003480 <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003436:	9c02      	ldr	r4, [sp, #8]
 8003438:	1964      	adds	r4, r4, r5
 800343a:	7866      	ldrb	r6, [r4, #1]
    if (bit_layer) {
 800343c:	9c00      	ldr	r4, [sp, #0]
 800343e:	5d86      	ldrb	r6, [r0, r6]
 8003440:	2e00      	cmp	r6, #0
 8003442:	d100      	bne.n	8003446 <hsc_decode_blockllr+0x13e>
 8003444:	9c01      	ldr	r4, [sp, #4]
    return (llr_layer_b + llr_layer_a);
 8003446:	191c      	adds	r4, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003448:	604c      	str	r4, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 800344a:	465c      	mov	r4, fp
 800344c:	2c02      	cmp	r4, #2
 800344e:	d017      	beq.n	8003480 <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003450:	9c02      	ldr	r4, [sp, #8]
 8003452:	1964      	adds	r4, r4, r5
 8003454:	78a6      	ldrb	r6, [r4, #2]
    if (bit_layer) {
 8003456:	9c00      	ldr	r4, [sp, #0]
 8003458:	5d86      	ldrb	r6, [r0, r6]
 800345a:	2e00      	cmp	r6, #0
 800345c:	d100      	bne.n	8003460 <hsc_decode_blockllr+0x158>
 800345e:	9c01      	ldr	r4, [sp, #4]
    return (llr_layer_b + llr_layer_a);
 8003460:	191c      	adds	r4, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8003462:	608c      	str	r4, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 8003464:	465c      	mov	r4, fp
 8003466:	2c03      	cmp	r4, #3
 8003468:	d00a      	beq.n	8003480 <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800346a:	9c02      	ldr	r4, [sp, #8]
 800346c:	46a4      	mov	ip, r4
 800346e:	4465      	add	r5, ip
 8003470:	78ed      	ldrb	r5, [r5, #3]
    if (bit_layer) {
 8003472:	9c00      	ldr	r4, [sp, #0]
 8003474:	5d40      	ldrb	r0, [r0, r5]
 8003476:	2800      	cmp	r0, #0
 8003478:	d100      	bne.n	800347c <hsc_decode_blockllr+0x174>
 800347a:	9c01      	ldr	r4, [sp, #4]
    return (llr_layer_b + llr_layer_a);
 800347c:	191b      	adds	r3, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800347e:	60cb      	str	r3, [r1, #12]
            if (beta == next_pt) {
 8003480:	4557      	cmp	r7, sl
 8003482:	d100      	bne.n	8003486 <hsc_decode_blockllr+0x17e>
 8003484:	e249      	b.n	800391a <hsc_decode_blockllr+0x612>
 8003486:	3201      	adds	r2, #1
 8003488:	3910      	subs	r1, #16
        for (int beta=((next_pt*2)-1); beta>0; beta--) {
 800348a:	4590      	cmp	r8, r2
 800348c:	d1a0      	bne.n	80033d0 <hsc_decode_blockllr+0xc8>
 800348e:	9f02      	ldr	r7, [sp, #8]
        if (h->fbit[phi]) {
 8003490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003492:	9a06      	ldr	r2, [sp, #24]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	5c9b      	ldrb	r3, [r3, r2]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d100      	bne.n	800349e <hsc_decode_blockllr+0x196>
 800349c:	e2f6      	b.n	8003a8c <hsc_decode_blockllr+0x784>
            switch (num_paths-1) {
 800349e:	465b      	mov	r3, fp
 80034a0:	3b01      	subs	r3, #1
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <hsc_decode_blockllr+0x1a2>
 80034a6:	f000 fcfc 	bl	8003ea2 <hsc_decode_blockllr+0xb9a>
 80034aa:	dc01      	bgt.n	80034b0 <hsc_decode_blockllr+0x1a8>
 80034ac:	f000 fce2 	bl	8003e74 <hsc_decode_blockllr+0xb6c>
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d101      	bne.n	80034b8 <hsc_decode_blockllr+0x1b0>
 80034b4:	f000 fcf2 	bl	8003e9c <hsc_decode_blockllr+0xb94>
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d118      	bne.n	80034ee <hsc_decode_blockllr+0x1e6>
                case 3: if (LLR(h)[1][3] < 0) { PM(h)[3] -= LLR(h)[1][3]; }
 80034bc:	4a5c      	ldr	r2, [pc, #368]	; (8003630 <hsc_decode_blockllr+0x328>)
 80034be:	69d3      	ldr	r3, [r2, #28]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	da02      	bge.n	80034ca <hsc_decode_blockllr+0x1c2>
 80034c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034c6:	1acb      	subs	r3, r1, r3
 80034c8:	647b      	str	r3, [r7, #68]	; 0x44
                case 2: if (LLR(h)[1][2] < 0) { PM(h)[2] -= LLR(h)[1][2]; }
 80034ca:	6993      	ldr	r3, [r2, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da02      	bge.n	80034d6 <hsc_decode_blockllr+0x1ce>
 80034d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034d2:	1acb      	subs	r3, r1, r3
 80034d4:	643b      	str	r3, [r7, #64]	; 0x40
                case 1: if (LLR(h)[1][1] < 0) { PM(h)[1] -= LLR(h)[1][1]; }
 80034d6:	6953      	ldr	r3, [r2, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	da02      	bge.n	80034e2 <hsc_decode_blockllr+0x1da>
 80034dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034de:	1acb      	subs	r3, r1, r3
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                case 0: if (LLR(h)[1][0] < 0) { PM(h)[0] -= LLR(h)[1][0]; }
 80034e2:	6913      	ldr	r3, [r2, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	da02      	bge.n	80034ee <hsc_decode_blockllr+0x1e6>
 80034e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	63bb      	str	r3, [r7, #56]	; 0x38
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 80034ee:	2601      	movs	r6, #1
 80034f0:	9c03      	ldr	r4, [sp, #12]
 80034f2:	2100      	movs	r1, #0
 80034f4:	46a4      	mov	ip, r4
 80034f6:	9806      	ldr	r0, [sp, #24]
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 80034f8:	4a56      	ldr	r2, [pc, #344]	; (8003654 <hsc_decode_blockllr+0x34c>)
            *(uint32_t*)BITMEM(h)[2+(phi&1)]    = 0;
 80034fa:	4006      	ands	r6, r0
 80034fc:	1cb3      	adds	r3, r6, #2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4463      	add	r3, ip
 8003502:	6019      	str	r1, [r3, #0]
            *(uint32_t*)MAP(h)[phi]             = 0x03020100;
 8003504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003506:	0083      	lsls	r3, r0, #2
 8003508:	50ca      	str	r2, [r1, r3]
            }
        }


        // update bit tree
        if ((phi & 1) == 0) {
 800350a:	2e00      	cmp	r6, #0
 800350c:	d000      	beq.n	8003510 <hsc_decode_blockllr+0x208>
 800350e:	e24d      	b.n	80039ac <hsc_decode_blockllr+0x6a4>
#           if WORDIFY && (LISTSIZE==4)
            *(uint32_t*)PRIBIT(h)[0] = 0x03020100;
 8003510:	4b50      	ldr	r3, [pc, #320]	; (8003654 <hsc_decode_blockllr+0x34c>)
 8003512:	603b      	str	r3, [r7, #0]
    for (int phi=0; phi<BLOCKLENGTH; phi++) {
 8003514:	9b06      	ldr	r3, [sp, #24]
 8003516:	3301      	adds	r3, #1
 8003518:	9306      	str	r3, [sp, #24]
 800351a:	2b80      	cmp	r3, #128	; 0x80
 800351c:	d000      	beq.n	8003520 <hsc_decode_blockllr+0x218>
 800351e:	e72b      	b.n	8003378 <hsc_decode_blockllr+0x70>
 8003520:	4658      	mov	r0, fp
    *(uint32_t*)&indexOut[0] = 0x03020100;
 8003522:	4a4c      	ldr	r2, [pc, #304]	; (8003654 <hsc_decode_blockllr+0x34c>)
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8003524:	4b4c      	ldr	r3, [pc, #304]	; (8003658 <hsc_decode_blockllr+0x350>)
 8003526:	9016      	str	r0, [sp, #88]	; 0x58
    *(uint32_t*)&indexOut[0] = 0x03020100;
 8003528:	677a      	str	r2, [r7, #116]	; 0x74
    *(uint32_t*)&indexOut[4] = 0x07060504;
 800352a:	67bb      	str	r3, [r7, #120]	; 0x78
        gap    -= (gap > 1);
 800352c:	2301      	movs	r3, #1
 800352e:	2801      	cmp	r0, #1
 8003530:	dc00      	bgt.n	8003534 <hsc_decode_blockllr+0x22c>
 8003532:	2300      	movs	r3, #0
 8003534:	1ac0      	subs	r0, r0, r3
        sorted  = (gap == 1);
 8003536:	1e43      	subs	r3, r0, #1
 8003538:	425a      	negs	r2, r3
 800353a:	4153      	adcs	r3, r2
        for (i=0, j=gap; j<length; i++, j++) {
 800353c:	9a16      	ldr	r2, [sp, #88]	; 0x58
        sorted  = (gap == 1);
 800353e:	b2de      	uxtb	r6, r3
        for (i=0, j=gap; j<length; i++, j++) {
 8003540:	4282      	cmp	r2, r0
 8003542:	dd17      	ble.n	8003574 <hsc_decode_blockllr+0x26c>
 8003544:	003b      	movs	r3, r7
 8003546:	3374      	adds	r3, #116	; 0x74
 8003548:	18d2      	adds	r2, r2, r3
 800354a:	1a12      	subs	r2, r2, r0
 800354c:	46b4      	mov	ip, r6
 800354e:	0016      	movs	r6, r2
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 8003550:	781c      	ldrb	r4, [r3, #0]
 8003552:	5c1d      	ldrb	r5, [r3, r0]
 8003554:	00a1      	lsls	r1, r4, #2
 8003556:	00aa      	lsls	r2, r5, #2
 8003558:	1879      	adds	r1, r7, r1
 800355a:	18ba      	adds	r2, r7, r2
 800355c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800355e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003560:	4291      	cmp	r1, r2
 8003562:	dd03      	ble.n	800356c <hsc_decode_blockllr+0x264>
                sorted      = false;
 8003564:	2200      	movs	r2, #0
 8003566:	4694      	mov	ip, r2
                indexOut[i] = indexOut[j];
 8003568:	701d      	strb	r5, [r3, #0]
                indexOut[j] = k;
 800356a:	541c      	strb	r4, [r3, r0]
 800356c:	3301      	adds	r3, #1
        for (i=0, j=gap; j<length; i++, j++) {
 800356e:	42b3      	cmp	r3, r6
 8003570:	d1ee      	bne.n	8003550 <hsc_decode_blockllr+0x248>
 8003572:	4666      	mov	r6, ip
    } while (!sorted);
 8003574:	2e00      	cmp	r6, #0
 8003576:	d0d9      	beq.n	800352c <hsc_decode_blockllr+0x224>

    /// CRC Path Check process
    /// The BITMEM buffer is reused here.  It is not needed anymore.
    ///@note DECMSG(h) replaced with BITMEM(h)
    crcreg = 0;
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 8003578:	2300      	movs	r3, #0
        int lp = INDEX(h)[correct_path];
        int phi;

        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
            DECMSG(h)[phi]    = MAP(h)[phi][lp] >> 7;
            lp                  = MAP(h)[phi][lp] & 0x7F;
 800357a:	267f      	movs	r6, #127	; 0x7f
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 800357c:	9315      	str	r3, [sp, #84]	; 0x54
        reg = CRCTABLE[reg ^ *block++];
 800357e:	4b37      	ldr	r3, [pc, #220]	; (800365c <hsc_decode_blockllr+0x354>)
        int lp = INDEX(h)[correct_path];
 8003580:	3774      	adds	r7, #116	; 0x74
        reg = CRCTABLE[reg ^ *block++];
 8003582:	930e      	str	r3, [sp, #56]	; 0x38
        int lp = INDEX(h)[correct_path];
 8003584:	9b03      	ldr	r3, [sp, #12]
 8003586:	9717      	str	r7, [sp, #92]	; 0x5c
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 8003588:	207f      	movs	r0, #127	; 0x7f
        int lp = INDEX(h)[correct_path];
 800358a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800358c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800358e:	5c89      	ldrb	r1, [r1, r2]
 8003590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            DECMSG(h)[phi]    = MAP(h)[phi][lp] >> 7;
 8003592:	0084      	lsls	r4, r0, #2
 8003594:	1914      	adds	r4, r2, r4
 8003596:	5c61      	ldrb	r1, [r4, r1]
 8003598:	09cc      	lsrs	r4, r1, #7
 800359a:	541c      	strb	r4, [r3, r0]
            lp                  = MAP(h)[phi][lp] & 0x7F;
 800359c:	4031      	ands	r1, r6
        for (phi=BLOCKLENGTH-1; phi>=0; phi--)  {
 800359e:	3801      	subs	r0, #1
 80035a0:	d2f7      	bcs.n	8003592 <hsc_decode_blockllr+0x28a>
        }

        /// Bytewise CRC compute.
        /// Requires loading the bit data into a byte buffer.
        /// On success, the successful bytewise decoding is in the output[]
        for (i=0, phi=0; phi<h->infobits; i++) {
 80035a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80035a4:	8891      	ldrh	r1, [r2, #4]
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d101      	bne.n	80035ae <hsc_decode_blockllr+0x2a6>
 80035aa:	f000 feb4 	bl	8004316 <hsc_decode_blockllr+0x100e>
 80035ae:	223f      	movs	r2, #63	; 0x3f
 80035b0:	2479      	movs	r4, #121	; 0x79
 80035b2:	920a      	str	r2, [sp, #40]	; 0x28
 80035b4:	3240      	adds	r2, #64	; 0x40
 80035b6:	4691      	mov	r9, r2
 80035b8:	3a05      	subs	r2, #5
 80035ba:	9209      	str	r2, [sp, #36]	; 0x24
 80035bc:	4a28      	ldr	r2, [pc, #160]	; (8003660 <hsc_decode_blockllr+0x358>)
 80035be:	9408      	str	r4, [sp, #32]
 80035c0:	9200      	str	r2, [sp, #0]
 80035c2:	2201      	movs	r2, #1
 80035c4:	3404      	adds	r4, #4
 80035c6:	9404      	str	r4, [sp, #16]
 80035c8:	3c07      	subs	r4, #7
 80035ca:	9407      	str	r4, [sp, #28]
 80035cc:	3405      	adds	r4, #5
 80035ce:	9401      	str	r4, [sp, #4]
 80035d0:	3c06      	subs	r4, #6
 80035d2:	9406      	str	r4, [sp, #24]
 80035d4:	3402      	adds	r4, #2
 80035d6:	9402      	str	r4, [sp, #8]
 80035d8:	3c09      	subs	r4, #9
 80035da:	940d      	str	r4, [sp, #52]	; 0x34
 80035dc:	3401      	adds	r4, #1
 80035de:	9403      	str	r4, [sp, #12]
 80035e0:	3404      	adds	r4, #4
 80035e2:	4820      	ldr	r0, [pc, #128]	; (8003664 <hsc_decode_blockllr+0x35c>)
 80035e4:	940c      	str	r4, [sp, #48]	; 0x30
 80035e6:	3c14      	subs	r4, #20
 80035e8:	9405      	str	r4, [sp, #20]
 80035ea:	3414      	adds	r4, #20
 80035ec:	46a0      	mov	r8, r4
 80035ee:	1a12      	subs	r2, r2, r0
 80035f0:	207e      	movs	r0, #126	; 0x7e
 80035f2:	3c05      	subs	r4, #5
 80035f4:	46a4      	mov	ip, r4
 80035f6:	257a      	movs	r5, #122	; 0x7a
 80035f8:	9310      	str	r3, [sp, #64]	; 0x40
 80035fa:	9214      	str	r2, [sp, #80]	; 0x50
 80035fc:	233f      	movs	r3, #63	; 0x3f
 80035fe:	464a      	mov	r2, r9
 8003600:	4681      	mov	r9, r0
 8003602:	4640      	mov	r0, r8
 8003604:	3407      	adds	r4, #7
 8003606:	46a2      	mov	sl, r4
 8003608:	3401      	adds	r4, #1
 800360a:	46a3      	mov	fp, r4
 800360c:	3c37      	subs	r4, #55	; 0x37
 800360e:	9411      	str	r4, [sp, #68]	; 0x44
 8003610:	46a8      	mov	r8, r5
 8003612:	4664      	mov	r4, ip
 8003614:	0005      	movs	r5, r0
 8003616:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003618:	2779      	movs	r7, #121	; 0x79
 800361a:	469c      	mov	ip, r3
 800361c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800361e:	e04b      	b.n	80036b8 <hsc_decode_blockllr+0x3b0>
 8003620:	200002f8 	.word	0x200002f8
 8003624:	08009b98 	.word	0x08009b98
 8003628:	20000570 	.word	0x20000570
 800362c:	20000370 	.word	0x20000370
 8003630:	20000970 	.word	0x20000970
 8003634:	08009f98 	.word	0x08009f98
 8003638:	08009b18 	.word	0x08009b18
 800363c:	08009988 	.word	0x08009988
 8003640:	0800996c 	.word	0x0800996c
 8003644:	0fffffff 	.word	0x0fffffff
 8003648:	7fffffff 	.word	0x7fffffff
 800364c:	7fffffbf 	.word	0x7fffffbf
 8003650:	20000568 	.word	0x20000568
 8003654:	03020100 	.word	0x03020100
 8003658:	07060504 	.word	0x07060504
 800365c:	08009e98 	.word	0x08009e98
 8003660:	08009d1f 	.word	0x08009d1f
 8003664:	08009d18 	.word	0x08009d18
 8003668:	9b00      	ldr	r3, [sp, #0]
 800366a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800366c:	785b      	ldrb	r3, [r3, #1]
 800366e:	469c      	mov	ip, r3
 8003670:	9b00      	ldr	r3, [sp, #0]
 8003672:	789b      	ldrb	r3, [r3, #2]
 8003674:	4698      	mov	r8, r3
 8003676:	9b00      	ldr	r3, [sp, #0]
 8003678:	78df      	ldrb	r7, [r3, #3]
 800367a:	791b      	ldrb	r3, [r3, #4]
 800367c:	469b      	mov	fp, r3
 800367e:	9b00      	ldr	r3, [sp, #0]
 8003680:	795b      	ldrb	r3, [r3, #5]
 8003682:	469a      	mov	sl, r3
 8003684:	9b00      	ldr	r3, [sp, #0]
 8003686:	799c      	ldrb	r4, [r3, #6]
 8003688:	79dd      	ldrb	r5, [r3, #7]
 800368a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800368c:	950c      	str	r5, [sp, #48]	; 0x30
 800368e:	9305      	str	r3, [sp, #20]
 8003690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003692:	940d      	str	r4, [sp, #52]	; 0x34
 8003694:	9303      	str	r3, [sp, #12]
 8003696:	9b06      	ldr	r3, [sp, #24]
 8003698:	9302      	str	r3, [sp, #8]
 800369a:	9b07      	ldr	r3, [sp, #28]
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	9b08      	ldr	r3, [sp, #32]
 80036a0:	9708      	str	r7, [sp, #32]
 80036a2:	9304      	str	r3, [sp, #16]
 80036a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036a6:	4699      	mov	r9, r3
 80036a8:	4643      	mov	r3, r8
 80036aa:	9309      	str	r3, [sp, #36]	; 0x24
 80036ac:	4663      	mov	r3, ip
 80036ae:	930a      	str	r3, [sp, #40]	; 0x28
 80036b0:	465b      	mov	r3, fp
 80036b2:	9307      	str	r3, [sp, #28]
 80036b4:	4653      	mov	r3, sl
 80036b6:	9306      	str	r3, [sp, #24]
 80036b8:	4663      	mov	r3, ip
 80036ba:	9311      	str	r3, [sp, #68]	; 0x44
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 80036bc:	464b      	mov	r3, r9
            output[i]  = DECMSG(h)[rseq[phi++]] << 7;
 80036be:	5c82      	ldrb	r2, [r0, r2]
 80036c0:	01d2      	lsls	r2, r2, #7
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 80036c6:	5cc3      	ldrb	r3, [r0, r3]
 80036c8:	469c      	mov	ip, r3
 80036ca:	4643      	mov	r3, r8
 80036cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80036ce:	4663      	mov	r3, ip
 80036d0:	019b      	lsls	r3, r3, #6
 80036d2:	431a      	orrs	r2, r3
 80036d4:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 80036d6:	9b04      	ldr	r3, [sp, #16]
            output[i] |= DECMSG(h)[rseq[phi++]] << 6;
 80036d8:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 80036da:	5cc3      	ldrb	r3, [r0, r3]
 80036dc:	469c      	mov	ip, r3
 80036de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80036e0:	4699      	mov	r9, r3
 80036e2:	9b00      	ldr	r3, [sp, #0]
 80036e4:	4698      	mov	r8, r3
 80036e6:	4663      	mov	r3, ip
 80036e8:	015b      	lsls	r3, r3, #5
 80036ea:	431a      	orrs	r2, r3
 80036ec:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 80036ee:	9b01      	ldr	r3, [sp, #4]
            output[i] |= DECMSG(h)[rseq[phi++]] << 5;
 80036f0:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 80036f2:	5cc3      	ldrb	r3, [r0, r3]
 80036f4:	44c1      	add	r9, r8
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	431a      	orrs	r2, r3
 80036fa:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 80036fc:	9b02      	ldr	r3, [sp, #8]
            output[i] |= DECMSG(h)[rseq[phi++]] << 4;
 80036fe:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 8003700:	5cc3      	ldrb	r3, [r0, r3]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	431a      	orrs	r2, r3
 8003706:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 8003708:	9b03      	ldr	r3, [sp, #12]
            output[i] |= DECMSG(h)[rseq[phi++]] << 3;
 800370a:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 800370c:	5cc3      	ldrb	r3, [r0, r3]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	431a      	orrs	r2, r3
 8003712:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 8003714:	9b05      	ldr	r3, [sp, #20]
            output[i] |= DECMSG(h)[rseq[phi++]] << 2;
 8003716:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 8003718:	5cc3      	ldrb	r3, [r0, r3]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	431a      	orrs	r2, r3
 800371e:	b252      	sxtb	r2, r2
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 8003720:	9b00      	ldr	r3, [sp, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 1;
 8003722:	700a      	strb	r2, [r1, #0]
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	5cc3      	ldrb	r3, [r0, r3]
 8003728:	469c      	mov	ip, r3
 800372a:	9b00      	ldr	r3, [sp, #0]
 800372c:	3308      	adds	r3, #8
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4663      	mov	r3, ip
 8003732:	431a      	orrs	r2, r3
        for (i=0, phi=0; phi<h->infobits; i++) {
 8003734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            output[i] |= DECMSG(h)[rseq[phi++]] << 0;
 8003736:	700a      	strb	r2, [r1, #0]
        for (i=0, phi=0; phi<h->infobits; i++) {
 8003738:	889a      	ldrh	r2, [r3, #4]
 800373a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800373c:	1acb      	subs	r3, r1, r3
 800373e:	469c      	mov	ip, r3
 8003740:	3101      	adds	r1, #1
 8003742:	454a      	cmp	r2, r9
 8003744:	dc90      	bgt.n	8003668 <hsc_decode_blockllr+0x360>
 8003746:	4662      	mov	r2, ip
 8003748:	46a4      	mov	ip, r4
 800374a:	0014      	movs	r4, r2
        reg = CRCTABLE[reg ^ *block++];
 800374c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800374e:	46d9      	mov	r9, fp
 8003750:	7811      	ldrb	r1, [r2, #0]
 8003752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003754:	46a8      	mov	r8, r5
 8003756:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003758:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 800375a:	2c00      	cmp	r4, #0
 800375c:	dc01      	bgt.n	8003762 <hsc_decode_blockllr+0x45a>
 800375e:	f000 fc83 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003762:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003764:	7850      	ldrb	r0, [r2, #1]
 8003766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003768:	4041      	eors	r1, r0
 800376a:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 800376c:	2c01      	cmp	r4, #1
 800376e:	d101      	bne.n	8003774 <hsc_decode_blockllr+0x46c>
 8003770:	f000 fc7a 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003774:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003776:	7890      	ldrb	r0, [r2, #2]
 8003778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800377a:	4041      	eors	r1, r0
 800377c:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 800377e:	2c02      	cmp	r4, #2
 8003780:	d101      	bne.n	8003786 <hsc_decode_blockllr+0x47e>
 8003782:	f000 fc71 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003786:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003788:	78d0      	ldrb	r0, [r2, #3]
 800378a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800378c:	4041      	eors	r1, r0
 800378e:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003790:	2c03      	cmp	r4, #3
 8003792:	d101      	bne.n	8003798 <hsc_decode_blockllr+0x490>
 8003794:	f000 fc68 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003798:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800379a:	7910      	ldrb	r0, [r2, #4]
 800379c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800379e:	4041      	eors	r1, r0
 80037a0:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80037a2:	2c04      	cmp	r4, #4
 80037a4:	d101      	bne.n	80037aa <hsc_decode_blockllr+0x4a2>
 80037a6:	f000 fc5f 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80037aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037ac:	7950      	ldrb	r0, [r2, #5]
 80037ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037b0:	4041      	eors	r1, r0
 80037b2:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80037b4:	2c05      	cmp	r4, #5
 80037b6:	d101      	bne.n	80037bc <hsc_decode_blockllr+0x4b4>
 80037b8:	f000 fc56 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80037bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037be:	7990      	ldrb	r0, [r2, #6]
 80037c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037c2:	4041      	eors	r1, r0
 80037c4:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80037c6:	2c06      	cmp	r4, #6
 80037c8:	d101      	bne.n	80037ce <hsc_decode_blockllr+0x4c6>
 80037ca:	f000 fc4d 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80037ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037d0:	79d0      	ldrb	r0, [r2, #7]
 80037d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037d4:	4041      	eors	r1, r0
 80037d6:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80037d8:	2c07      	cmp	r4, #7
 80037da:	d101      	bne.n	80037e0 <hsc_decode_blockllr+0x4d8>
 80037dc:	f000 fc44 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80037e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037e2:	7a10      	ldrb	r0, [r2, #8]
 80037e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037e6:	4041      	eors	r1, r0
 80037e8:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80037ea:	2c08      	cmp	r4, #8
 80037ec:	d101      	bne.n	80037f2 <hsc_decode_blockllr+0x4ea>
 80037ee:	f000 fc3b 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 80037f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037f4:	7a50      	ldrb	r0, [r2, #9]
 80037f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037f8:	4041      	eors	r1, r0
 80037fa:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 80037fc:	2c09      	cmp	r4, #9
 80037fe:	d101      	bne.n	8003804 <hsc_decode_blockllr+0x4fc>
 8003800:	f000 fc32 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003806:	7a90      	ldrb	r0, [r2, #10]
 8003808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800380a:	4041      	eors	r1, r0
 800380c:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 800380e:	2c0a      	cmp	r4, #10
 8003810:	d101      	bne.n	8003816 <hsc_decode_blockllr+0x50e>
 8003812:	f000 fc29 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003816:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003818:	7ad0      	ldrb	r0, [r2, #11]
 800381a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800381c:	4041      	eors	r1, r0
 800381e:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003820:	2c0b      	cmp	r4, #11
 8003822:	d101      	bne.n	8003828 <hsc_decode_blockllr+0x520>
 8003824:	f000 fc20 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 8003828:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800382a:	7b10      	ldrb	r0, [r2, #12]
 800382c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800382e:	4041      	eors	r1, r0
 8003830:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003832:	2c0c      	cmp	r4, #12
 8003834:	d101      	bne.n	800383a <hsc_decode_blockllr+0x532>
 8003836:	f000 fc17 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 800383a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800383c:	7b50      	ldrb	r0, [r2, #13]
 800383e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003840:	4041      	eors	r1, r0
 8003842:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003844:	2c0d      	cmp	r4, #13
 8003846:	d101      	bne.n	800384c <hsc_decode_blockllr+0x544>
 8003848:	f000 fc0e 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 800384c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800384e:	7b90      	ldrb	r0, [r2, #14]
 8003850:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003852:	4041      	eors	r1, r0
 8003854:	5c51      	ldrb	r1, [r2, r1]
    while (--len >= 0) {
 8003856:	2c0f      	cmp	r4, #15
 8003858:	d001      	beq.n	800385e <hsc_decode_blockllr+0x556>
 800385a:	f000 fc05 	bl	8004068 <hsc_decode_blockllr+0xd60>
        reg = CRCTABLE[reg ^ *block++];
 800385e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003860:	7bd0      	ldrb	r0, [r2, #15]
 8003862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003864:	4041      	eors	r1, r0
 8003866:	5651      	ldrsb	r1, [r2, r1]
 8003868:	9a11      	ldr	r2, [sp, #68]	; 0x44
        }

        crcreg  = crccalc(output, i);
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 800386a:	5c98      	ldrb	r0, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 800386c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 800386e:	5ddd      	ldrb	r5, [r3, r7]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 8003870:	5c9c      	ldrb	r4, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 8003872:	464a      	mov	r2, r9
 8003874:	5c9f      	ldrb	r7, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8003876:	4652      	mov	r2, sl
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 8003878:	01a4      	lsls	r4, r4, #6
        crcreg ^= DECMSG(h)[rseq[phi++]] << 7;
 800387a:	01c0      	lsls	r0, r0, #7
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 800387c:	4060      	eors	r0, r4
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 800387e:	5c9c      	ldrb	r4, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 8003880:	4662      	mov	r2, ip
        crcreg ^= DECMSG(h)[rseq[phi++]] << 6;
 8003882:	4041      	eors	r1, r0
        crcreg ^= DECMSG(h)[rseq[phi++]] << 5;
 8003884:	016d      	lsls	r5, r5, #5
 8003886:	4069      	eors	r1, r5
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 8003888:	5c9d      	ldrb	r5, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 800388a:	4642      	mov	r2, r8
        crcreg ^= DECMSG(h)[rseq[phi++]] << 4;
 800388c:	0138      	lsls	r0, r7, #4
 800388e:	4048      	eors	r0, r1
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8003890:	00e4      	lsls	r4, r4, #3
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 8003892:	5c99      	ldrb	r1, [r3, r2]
        crcreg ^= DECMSG(h)[rseq[phi++]] << 3;
 8003894:	4060      	eors	r0, r4
        crcreg ^= DECMSG(h)[rseq[phi++]] << 2;
 8003896:	00ad      	lsls	r5, r5, #2
 8003898:	4068      	eors	r0, r5
        crcreg ^= DECMSG(h)[rseq[phi++]] << 1;  // 7 bit CRC, no 8th bit
 800389a:	0049      	lsls	r1, r1, #1
 800389c:	4048      	eors	r0, r1
 800389e:	b2c0      	uxtb	r0, r0
        if (crcreg == 0) {
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d006      	beq.n	80038b2 <hsc_decode_blockllr+0x5aa>
    for (int correct_path=0; correct_path<num_paths; correct_path++)  {
 80038a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80038a6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80038a8:	3201      	adds	r2, #1
 80038aa:	9215      	str	r2, [sp, #84]	; 0x54
 80038ac:	4291      	cmp	r1, r2
 80038ae:	d000      	beq.n	80038b2 <hsc_decode_blockllr+0x5aa>
 80038b0:	e66a      	b.n	8003588 <hsc_decode_blockllr+0x280>
    }
    /// CRC Path Check Process Over

    /// Decoded Bytewise data stored in output[].
    return crcreg;
}
 80038b2:	b019      	add	sp, #100	; 0x64
 80038b4:	bc3c      	pop	{r2, r3, r4, r5}
 80038b6:	4690      	mov	r8, r2
 80038b8:	4699      	mov	r9, r3
 80038ba:	46a2      	mov	sl, r4
 80038bc:	46ab      	mov	fp, r5
 80038be:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (use_gfunc) {
 80038c0:	9b04      	ldr	r3, [sp, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d144      	bne.n	8003950 <hsc_decode_blockllr+0x648>
    if (llr_layer_a < llr_layer_b) {
 80038c6:	9b00      	ldr	r3, [sp, #0]
 80038c8:	9801      	ldr	r0, [sp, #4]
 80038ca:	4283      	cmp	r3, r0
 80038cc:	dc01      	bgt.n	80038d2 <hsc_decode_blockllr+0x5ca>
 80038ce:	f000 fd32 	bl	8004336 <hsc_decode_blockllr+0x102e>
				for (int l=0; l<num_paths; l++) {
 80038d2:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80038d4:	6008      	str	r0, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d100      	bne.n	80038dc <hsc_decode_blockllr+0x5d4>
 80038da:	e5d1      	b.n	8003480 <hsc_decode_blockllr+0x178>
    llr_t b_inv = -llr_layer_b;
 80038dc:	9b00      	ldr	r3, [sp, #0]
 80038de:	9c01      	ldr	r4, [sp, #4]
 80038e0:	0018      	movs	r0, r3
 80038e2:	001d      	movs	r5, r3
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 80038e4:	429d      	cmp	r5, r3
 80038e6:	da52      	bge.n	800398e <hsc_decode_blockllr+0x686>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80038e8:	9d01      	ldr	r5, [sp, #4]
 80038ea:	604d      	str	r5, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 80038ec:	465d      	mov	r5, fp
 80038ee:	2d02      	cmp	r5, #2
 80038f0:	d100      	bne.n	80038f4 <hsc_decode_blockllr+0x5ec>
 80038f2:	e5c5      	b.n	8003480 <hsc_decode_blockllr+0x178>
    if (llr_layer_a < llr_layer_b) {
 80038f4:	9d01      	ldr	r5, [sp, #4]
 80038f6:	429d      	cmp	r5, r3
 80038f8:	db01      	blt.n	80038fe <hsc_decode_blockllr+0x5f6>
 80038fa:	f000 fd22 	bl	8004342 <hsc_decode_blockllr+0x103a>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 80038fe:	9800      	ldr	r0, [sp, #0]
 8003900:	4298      	cmp	r0, r3
 8003902:	da4c      	bge.n	800399e <hsc_decode_blockllr+0x696>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003904:	9b01      	ldr	r3, [sp, #4]
 8003906:	608b      	str	r3, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 8003908:	001c      	movs	r4, r3
 800390a:	465b      	mov	r3, fp
 800390c:	2b03      	cmp	r3, #3
 800390e:	d100      	bne.n	8003912 <hsc_decode_blockllr+0x60a>
 8003910:	e5b6      	b.n	8003480 <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003912:	60cc      	str	r4, [r1, #12]
            if (beta == next_pt) {
 8003914:	4557      	cmp	r7, sl
 8003916:	d000      	beq.n	800391a <hsc_decode_blockllr+0x612>
 8003918:	e5b5      	b.n	8003486 <hsc_decode_blockllr+0x17e>
                use_gfunc   = phi & next_pt;
 800391a:	9806      	ldr	r0, [sp, #24]
                next_pt   >>= 1;
 800391c:	107f      	asrs	r7, r7, #1
                use_gfunc   = phi & next_pt;
 800391e:	4038      	ands	r0, r7
 8003920:	1e43      	subs	r3, r0, #1
 8003922:	4198      	sbcs	r0, r3
 8003924:	b2c3      	uxtb	r3, r0
 8003926:	9304      	str	r3, [sp, #16]
                if (--lmd0 >= 0) {
 8003928:	9b05      	ldr	r3, [sp, #20]
 800392a:	3b01      	subs	r3, #1
 800392c:	9305      	str	r3, [sp, #20]
 800392e:	d500      	bpl.n	8003932 <hsc_decode_blockllr+0x62a>
 8003930:	e5a9      	b.n	8003486 <hsc_decode_blockllr+0x17e>
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 8003932:	9c02      	ldr	r4, [sp, #8]
 8003934:	9b05      	ldr	r3, [sp, #20]
 8003936:	341c      	adds	r4, #28
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	18e4      	adds	r4, r4, r3
 800393c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800393e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003940:	6825      	ldr	r5, [r4, #0]
 8003942:	58c3      	ldr	r3, [r0, r3]
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 8003944:	980e      	ldr	r0, [sp, #56]	; 0x38
                    *(uint32_t*)PRILLR(h)[lmd0] &= wordmask[num_paths-1];
 8003946:	402b      	ands	r3, r5
                    *(uint32_t*)PRILLR(h)[lmd0] |= wordload[num_paths-1];
 8003948:	6900      	ldr	r0, [r0, #16]
 800394a:	4303      	orrs	r3, r0
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	e59a      	b.n	8003486 <hsc_decode_blockllr+0x17e>
					if (use_gfunc) {
 8003950:	9b00      	ldr	r3, [sp, #0]
 8003952:	e562      	b.n	800341a <hsc_decode_blockllr+0x112>
 8003954:	9c00      	ldr	r4, [sp, #0]
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 8003956:	0018      	movs	r0, r3
 8003958:	42a3      	cmp	r3, r4
 800395a:	da00      	bge.n	800395e <hsc_decode_blockllr+0x656>
 800395c:	0020      	movs	r0, r4
				for (int l=0; l<num_paths; l++) {
 800395e:	465c      	mov	r4, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003960:	6008      	str	r0, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 8003962:	2c01      	cmp	r4, #1
 8003964:	d100      	bne.n	8003968 <hsc_decode_blockllr+0x660>
 8003966:	e58b      	b.n	8003480 <hsc_decode_blockllr+0x178>
    if (llr_layer_a < llr_layer_b) {
 8003968:	9d01      	ldr	r5, [sp, #4]
    llr_t b_inv = -llr_layer_b;
 800396a:	425c      	negs	r4, r3
    if (llr_layer_a < llr_layer_b) {
 800396c:	42ab      	cmp	r3, r5
 800396e:	dd01      	ble.n	8003974 <hsc_decode_blockllr+0x66c>
 8003970:	f000 fce4 	bl	800433c <hsc_decode_blockllr+0x1034>
				for (int l=0; l<num_paths; l++) {
 8003974:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003976:	6048      	str	r0, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 8003978:	0004      	movs	r4, r0
 800397a:	2b02      	cmp	r3, #2
 800397c:	d100      	bne.n	8003980 <hsc_decode_blockllr+0x678>
 800397e:	e57f      	b.n	8003480 <hsc_decode_blockllr+0x178>
 8003980:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003982:	6088      	str	r0, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 8003984:	2b03      	cmp	r3, #3
 8003986:	d100      	bne.n	800398a <hsc_decode_blockllr+0x682>
 8003988:	e57a      	b.n	8003480 <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 800398a:	60cc      	str	r4, [r1, #12]
 800398c:	e7c2      	b.n	8003914 <hsc_decode_blockllr+0x60c>
				for (int l=0; l<num_paths; l++) {
 800398e:	4658      	mov	r0, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003990:	604c      	str	r4, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 8003992:	2802      	cmp	r0, #2
 8003994:	d100      	bne.n	8003998 <hsc_decode_blockllr+0x690>
 8003996:	e573      	b.n	8003480 <hsc_decode_blockllr+0x178>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003998:	9800      	ldr	r0, [sp, #0]
 800399a:	4298      	cmp	r0, r3
 800399c:	dbb2      	blt.n	8003904 <hsc_decode_blockllr+0x5fc>
				for (int l=0; l<num_paths; l++) {
 800399e:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80039a0:	608c      	str	r4, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d100      	bne.n	80039a8 <hsc_decode_blockllr+0x6a0>
 80039a6:	e56b      	b.n	8003480 <hsc_decode_blockllr+0x178>
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 80039a8:	60cc      	str	r4, [r1, #12]
 80039aa:	e7b3      	b.n	8003914 <hsc_decode_blockllr+0x60c>
            beta_laststage  = eminlambda_lut[phi];
 80039ac:	4bd3      	ldr	r3, [pc, #844]	; (8003cfc <hsc_decode_blockllr+0x9f4>)
 80039ae:	9a06      	ldr	r2, [sp, #24]
 80039b0:	5c9b      	ldrb	r3, [r3, r2]
 80039b2:	9304      	str	r3, [sp, #16]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	9305      	str	r3, [sp, #20]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	dc00      	bgt.n	80039be <hsc_decode_blockllr+0x6b6>
 80039bc:	e358      	b.n	8004070 <hsc_decode_blockllr+0xd68>
 80039be:	465b      	mov	r3, fp
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d100      	bne.n	80039c6 <hsc_decode_blockllr+0x6be>
 80039c4:	e30f      	b.n	8003fe6 <hsc_decode_blockllr+0xcde>
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d100      	bne.n	80039cc <hsc_decode_blockllr+0x6c4>
 80039ca:	e35a      	b.n	8004082 <hsc_decode_blockllr+0xd7a>
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d101      	bne.n	80039d4 <hsc_decode_blockllr+0x6cc>
 80039d0:	f000 fc12 	bl	80041f8 <hsc_decode_blockllr+0xef0>
 80039d4:	2306      	movs	r3, #6
 80039d6:	4698      	mov	r8, r3
            next_pt         = 2;
 80039d8:	3b04      	subs	r3, #4
 80039da:	9308      	str	r3, [sp, #32]
            lmd0            = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	9307      	str	r3, [sp, #28]
 80039e0:	469c      	mov	ip, r3
 80039e2:	465b      	mov	r3, fp
 80039e4:	9309      	str	r3, [sp, #36]	; 0x24
 80039e6:	4643      	mov	r3, r8
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80039e8:	2002      	movs	r0, #2
 80039ea:	46b9      	mov	r9, r7
 80039ec:	4ac4      	ldr	r2, [pc, #784]	; (8003d00 <hsc_decode_blockllr+0x9f8>)
 80039ee:	9302      	str	r3, [sp, #8]
                int incval  = (beta < beta_laststage);
 80039f0:	9904      	ldr	r1, [sp, #16]
 80039f2:	2301      	movs	r3, #1
 80039f4:	4281      	cmp	r1, r0
 80039f6:	dc00      	bgt.n	80039fa <hsc_decode_blockllr+0x6f2>
 80039f8:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80039fa:	9f03      	ldr	r7, [sp, #12]
 80039fc:	4665      	mov	r5, ip
 80039fe:	4649      	mov	r1, r9
 8003a00:	46b8      	mov	r8, r7
 8003a02:	5d49      	ldrb	r1, [r1, r5]
 8003a04:	0084      	lsls	r4, r0, #2
 8003a06:	4444      	add	r4, r8
 8003a08:	5c65      	ldrb	r5, [r4, r1]
 8003a0a:	7816      	ldrb	r6, [r2, #0]
                int bit0_i  = (beta*2) + incval;
 8003a0c:	0041      	lsls	r1, r0, #1
 8003a0e:	4688      	mov	r8, r1
 8003a10:	18c9      	adds	r1, r1, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003a12:	4075      	eors	r5, r6
 8003a14:	0089      	lsls	r1, r1, #2
 8003a16:	547d      	strb	r5, [r7, r1]
                int bit1_i  = ((beta+1)*2) + incval;
 8003a18:	9d02      	ldr	r5, [sp, #8]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003a1a:	7816      	ldrb	r6, [r2, #0]
                int bit1_i  = ((beta+1)*2) + incval;
 8003a1c:	46aa      	mov	sl, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003a1e:	464d      	mov	r5, r9
 8003a20:	4465      	add	r5, ip
 8003a22:	786f      	ldrb	r7, [r5, #1]
                int bit1_i  = ((beta+1)*2) + incval;
 8003a24:	4453      	add	r3, sl
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003a26:	46ba      	mov	sl, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003a28:	9f03      	ldr	r7, [sp, #12]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	54fe      	strb	r6, [r7, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003a2e:	7857      	ldrb	r7, [r2, #1]
 8003a30:	4656      	mov	r6, sl
 8003a32:	46ba      	mov	sl, r7
 8003a34:	9f03      	ldr	r7, [sp, #12]
 8003a36:	5da6      	ldrb	r6, [r4, r6]
 8003a38:	46bb      	mov	fp, r7
 8003a3a:	4657      	mov	r7, sl
 8003a3c:	4459      	add	r1, fp
 8003a3e:	407e      	eors	r6, r7
 8003a40:	704e      	strb	r6, [r1, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003a42:	7856      	ldrb	r6, [r2, #1]
 8003a44:	445b      	add	r3, fp
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003a46:	78af      	ldrb	r7, [r5, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003a48:	705e      	strb	r6, [r3, #1]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003a4a:	5de6      	ldrb	r6, [r4, r7]
 8003a4c:	7897      	ldrb	r7, [r2, #2]
 8003a4e:	78ed      	ldrb	r5, [r5, #3]
 8003a50:	407e      	eors	r6, r7
 8003a52:	708e      	strb	r6, [r1, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003a54:	7896      	ldrb	r6, [r2, #2]
 8003a56:	709e      	strb	r6, [r3, #2]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8003a58:	5d64      	ldrb	r4, [r4, r5]
 8003a5a:	78d5      	ldrb	r5, [r2, #3]
 8003a5c:	406c      	eors	r4, r5
 8003a5e:	70cc      	strb	r4, [r1, #3]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8003a60:	78d1      	ldrb	r1, [r2, #3]
 8003a62:	70d9      	strb	r1, [r3, #3]
                if (beta == next_pt) {
 8003a64:	9b08      	ldr	r3, [sp, #32]
 8003a66:	4298      	cmp	r0, r3
 8003a68:	d100      	bne.n	8003a6c <hsc_decode_blockllr+0x764>
 8003a6a:	e1f0      	b.n	8003e4e <hsc_decode_blockllr+0xb46>
 8003a6c:	9b02      	ldr	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003a6e:	3002      	adds	r0, #2
 8003a70:	3304      	adds	r3, #4
 8003a72:	9302      	str	r3, [sp, #8]
 8003a74:	9b05      	ldr	r3, [sp, #20]
 8003a76:	3208      	adds	r2, #8
 8003a78:	4283      	cmp	r3, r0
 8003a7a:	dcb9      	bgt.n	80039f0 <hsc_decode_blockllr+0x6e8>
 8003a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a7e:	464f      	mov	r7, r9
 8003a80:	469b      	mov	fp, r3
 8003a82:	4663      	mov	r3, ip
 8003a84:	18fb      	adds	r3, r7, r3
            *(uint32_t*)PRIBIT(h)[lmd0] = 0x03020100;
 8003a86:	4a9f      	ldr	r2, [pc, #636]	; (8003d04 <hsc_decode_blockllr+0x9fc>)
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e543      	b.n	8003514 <hsc_decode_blockllr+0x20c>
 8003a8c:	0010      	movs	r0, r2
            int max_lmd = maxlambda_lut[phi];
 8003a8e:	4b9e      	ldr	r3, [pc, #632]	; (8003d08 <hsc_decode_blockllr+0xa00>)
                if (LLR(h)[1][l] < 0) {
 8003a90:	4a9e      	ldr	r2, [pc, #632]	; (8003d0c <hsc_decode_blockllr+0xa04>)
            int max_lmd = maxlambda_lut[phi];
 8003a92:	5c1b      	ldrb	r3, [r3, r0]
                if (LLR(h)[1][l] < 0) {
 8003a94:	6911      	ldr	r1, [r2, #16]
            int max_lmd = maxlambda_lut[phi];
 8003a96:	9305      	str	r3, [sp, #20]
            int min_lmd = minlambda_lut[phi];
 8003a98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a9a:	5c1b      	ldrb	r3, [r3, r0]
 8003a9c:	469a      	mov	sl, r3
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                if (LLR(h)[1][l] < 0) {
 8003aa0:	2900      	cmp	r1, #0
 8003aa2:	da00      	bge.n	8003aa6 <hsc_decode_blockllr+0x79e>
 8003aa4:	e26b      	b.n	8003f7e <hsc_decode_blockllr+0xc76>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8003aa6:	18c9      	adds	r1, r1, r3
 8003aa8:	6539      	str	r1, [r7, #80]	; 0x50
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8003aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (int l=0; l<num_paths; l++) {
 8003aac:	465b      	mov	r3, fp
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d01d      	beq.n	8003aee <hsc_decode_blockllr+0x7e6>
                if (LLR(h)[1][l] < 0) {
 8003ab2:	6953      	ldr	r3, [r2, #20]
 8003ab4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	da00      	bge.n	8003abc <hsc_decode_blockllr+0x7b4>
 8003aba:	e285      	b.n	8003fc8 <hsc_decode_blockllr+0xcc0>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8003abc:	185b      	adds	r3, r3, r1
 8003abe:	65bb      	str	r3, [r7, #88]	; 0x58
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8003ac0:	6579      	str	r1, [r7, #84]	; 0x54
            for (int l=0; l<num_paths; l++) {
 8003ac2:	465b      	mov	r3, fp
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d012      	beq.n	8003aee <hsc_decode_blockllr+0x7e6>
                if (LLR(h)[1][l] < 0) {
 8003ac8:	6993      	ldr	r3, [r2, #24]
 8003aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	da00      	bge.n	8003ad2 <hsc_decode_blockllr+0x7ca>
 8003ad0:	e27e      	b.n	8003fd0 <hsc_decode_blockllr+0xcc8>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8003ad2:	185b      	adds	r3, r3, r1
 8003ad4:	663b      	str	r3, [r7, #96]	; 0x60
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8003ad6:	65f9      	str	r1, [r7, #92]	; 0x5c
            for (int l=0; l<num_paths; l++) {
 8003ad8:	465b      	mov	r3, fp
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d007      	beq.n	8003aee <hsc_decode_blockllr+0x7e6>
                if (LLR(h)[1][l] < 0) {
 8003ade:	69d3      	ldr	r3, [r2, #28]
 8003ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	da00      	bge.n	8003ae8 <hsc_decode_blockllr+0x7e0>
 8003ae6:	e2bb      	b.n	8004060 <hsc_decode_blockllr+0xd58>
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + LLR(h)[1][l];
 8003ae8:	189b      	adds	r3, r3, r2
 8003aea:	66bb      	str	r3, [r7, #104]	; 0x68
                    PATHLLR(h)[2*l]      = PM(h)[l] - 0;
 8003aec:	667a      	str	r2, [r7, #100]	; 0x64
            num_paths = num_paths * 2;
 8003aee:	465b      	mov	r3, fp
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	469b      	mov	fp, r3
 8003af4:	0018      	movs	r0, r3
 8003af6:	236c      	movs	r3, #108	; 0x6c
    *(uint32_t*)&indexOut[0] = 0x03020100;
 8003af8:	4a82      	ldr	r2, [pc, #520]	; (8003d04 <hsc_decode_blockllr+0x9fc>)
 8003afa:	469c      	mov	ip, r3
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8003afc:	4b84      	ldr	r3, [pc, #528]	; (8003d10 <hsc_decode_blockllr+0xa08>)
    *(uint32_t*)&indexOut[0] = 0x03020100;
 8003afe:	66fa      	str	r2, [r7, #108]	; 0x6c
    *(uint32_t*)&indexOut[4] = 0x07060504;
 8003b00:	673b      	str	r3, [r7, #112]	; 0x70
        gap    -= (gap > 1);
 8003b02:	2301      	movs	r3, #1
 8003b04:	2801      	cmp	r0, #1
 8003b06:	dc00      	bgt.n	8003b0a <hsc_decode_blockllr+0x802>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	1ac0      	subs	r0, r0, r3
        sorted  = (gap == 1);
 8003b0c:	1e46      	subs	r6, r0, #1
 8003b0e:	4273      	negs	r3, r6
 8003b10:	415e      	adcs	r6, r3
 8003b12:	b2f6      	uxtb	r6, r6
        for (i=0, j=gap; j<length; i++, j++) {
 8003b14:	4583      	cmp	fp, r0
 8003b16:	ddf4      	ble.n	8003b02 <hsc_decode_blockllr+0x7fa>
 8003b18:	003b      	movs	r3, r7
 8003b1a:	465a      	mov	r2, fp
 8003b1c:	336c      	adds	r3, #108	; 0x6c
 8003b1e:	18d2      	adds	r2, r2, r3
 8003b20:	1a12      	subs	r2, r2, r0
 8003b22:	46b0      	mov	r8, r6
 8003b24:	0016      	movs	r6, r2
            if (valueIn[indexOut[i]] > valueIn[indexOut[j]]) {
 8003b26:	781c      	ldrb	r4, [r3, #0]
 8003b28:	5c1d      	ldrb	r5, [r3, r0]
 8003b2a:	00a1      	lsls	r1, r4, #2
 8003b2c:	00aa      	lsls	r2, r5, #2
 8003b2e:	1879      	adds	r1, r7, r1
 8003b30:	18ba      	adds	r2, r7, r2
 8003b32:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003b34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b36:	4291      	cmp	r1, r2
 8003b38:	dd03      	ble.n	8003b42 <hsc_decode_blockllr+0x83a>
                sorted      = false;
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	4690      	mov	r8, r2
                indexOut[i] = indexOut[j];
 8003b3e:	701d      	strb	r5, [r3, #0]
                indexOut[j] = k;
 8003b40:	541c      	strb	r4, [r3, r0]
 8003b42:	3301      	adds	r3, #1
        for (i=0, j=gap; j<length; i++, j++) {
 8003b44:	429e      	cmp	r6, r3
 8003b46:	d1ee      	bne.n	8003b26 <hsc_decode_blockllr+0x81e>
 8003b48:	4663      	mov	r3, ip
 8003b4a:	4646      	mov	r6, r8
 8003b4c:	5cfa      	ldrb	r2, [r7, r3]
    } while (!sorted);
 8003b4e:	2e00      	cmp	r6, #0
 8003b50:	d0d7      	beq.n	8003b02 <hsc_decode_blockllr+0x7fa>
            if (num_paths > LISTSIZE) {
 8003b52:	465b      	mov	r3, fp
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	dd00      	ble.n	8003b5a <hsc_decode_blockllr+0x852>
 8003b58:	e193      	b.n	8003e82 <hsc_decode_blockllr+0xb7a>
 8003b5a:	1e9d      	subs	r5, r3, #2
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8003b5c:	1e5c      	subs	r4, r3, #1
           chk2       |= (1<<k);
 8003b5e:	2301      	movs	r3, #1
       k = idx_a[i] >> 1;
 8003b60:	0850      	lsrs	r0, r2, #1
           chk2       |= (1<<k);
 8003b62:	469c      	mov	ip, r3
 8003b64:	4083      	lsls	r3, r0
 8003b66:	4699      	mov	r9, r3
       k = idx_a[i] >> 1;
 8003b68:	003b      	movs	r3, r7
 8003b6a:	336c      	adds	r3, #108	; 0x6c
 8003b6c:	7859      	ldrb	r1, [r3, #1]
       if ((chk2 & (1<<k)) == 0) {
 8003b6e:	26ff      	movs	r6, #255	; 0xff
 8003b70:	464b      	mov	r3, r9
 8003b72:	401e      	ands	r6, r3
       k = idx_a[i] >> 1;
 8003b74:	084b      	lsrs	r3, r1, #1
 8003b76:	9308      	str	r3, [sp, #32]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	4698      	mov	r8, r3
       if ((chk2 & (1<<k)) == 0) {
 8003b7c:	411e      	asrs	r6, r3
 8003b7e:	4663      	mov	r3, ip
           pri[p_i--]  = k;
 8003b80:	193c      	adds	r4, r7, r4
 8003b82:	3448      	adds	r4, #72	; 0x48
 8003b84:	7020      	strb	r0, [r4, #0]
           idx_b[k]    = idx_a[i];
 8003b86:	1838      	adds	r0, r7, r0
 8003b88:	3074      	adds	r0, #116	; 0x74
 8003b8a:	7002      	strb	r2, [r0, #0]
       if ((chk2 & (1<<k)) == 0) {
 8003b8c:	4233      	tst	r3, r6
 8003b8e:	d000      	beq.n	8003b92 <hsc_decode_blockllr+0x88a>
 8003b90:	e17c      	b.n	8003e8c <hsc_decode_blockllr+0xb84>
           chk2       |= (1<<k);
 8003b92:	4643      	mov	r3, r8
 8003b94:	4660      	mov	r0, ip
 8003b96:	4098      	lsls	r0, r3
           chk1       |= (1<<i);
 8003b98:	2303      	movs	r3, #3
 8003b9a:	9302      	str	r3, [sp, #8]
           chk2       |= (1<<k);
 8003b9c:	464b      	mov	r3, r9
 8003b9e:	4318      	orrs	r0, r3
 8003ba0:	b2c3      	uxtb	r3, r0
 8003ba2:	4699      	mov	r9, r3
           pri[p_i--]  = k;
 8003ba4:	4643      	mov	r3, r8
 8003ba6:	197d      	adds	r5, r7, r5
 8003ba8:	3548      	adds	r5, #72	; 0x48
 8003baa:	702b      	strb	r3, [r5, #0]
           idx_b[k]    = idx_a[i];
 8003bac:	18f8      	adds	r0, r7, r3
           pri[p_i--]  = k;
 8003bae:	465b      	mov	r3, fp
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	2407      	movs	r4, #7
           idx_b[k]    = idx_a[i];
 8003bb4:	3074      	adds	r0, #116	; 0x74
 8003bb6:	7001      	strb	r1, [r0, #0]
           pri[p_i--]  = k;
 8003bb8:	1edd      	subs	r5, r3, #3
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8003bba:	465b      	mov	r3, fp
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d02a      	beq.n	8003c16 <hsc_decode_blockllr+0x90e>
       k = idx_a[i] >> 1;
 8003bc0:	003a      	movs	r2, r7
       if ((chk2 & (1<<k)) == 0) {
 8003bc2:	464b      	mov	r3, r9
       k = idx_a[i] >> 1;
 8003bc4:	326c      	adds	r2, #108	; 0x6c
 8003bc6:	7890      	ldrb	r0, [r2, #2]
       if ((chk2 & (1<<k)) == 0) {
 8003bc8:	2201      	movs	r2, #1
       k = idx_a[i] >> 1;
 8003bca:	0846      	lsrs	r6, r0, #1
       if ((chk2 & (1<<k)) == 0) {
 8003bcc:	4133      	asrs	r3, r6
 8003bce:	421a      	tst	r2, r3
 8003bd0:	d110      	bne.n	8003bf4 <hsc_decode_blockllr+0x8ec>
           chk2       |= (1<<k);
 8003bd2:	464b      	mov	r3, r9
 8003bd4:	40b2      	lsls	r2, r6
 8003bd6:	431a      	orrs	r2, r3
           pri[p_i--]  = k;
 8003bd8:	197b      	adds	r3, r7, r5
 8003bda:	469c      	mov	ip, r3
 8003bdc:	2348      	movs	r3, #72	; 0x48
 8003bde:	4698      	mov	r8, r3
           chk2       |= (1<<k);
 8003be0:	b2d3      	uxtb	r3, r2
           pri[p_i--]  = k;
 8003be2:	44c4      	add	ip, r8
           chk2       |= (1<<k);
 8003be4:	4699      	mov	r9, r3
           pri[p_i--]  = k;
 8003be6:	4663      	mov	r3, ip
           chk1       |= (1<<i);
 8003be8:	9402      	str	r4, [sp, #8]
           idx_b[k]    = idx_a[i];
 8003bea:	19bc      	adds	r4, r7, r6
 8003bec:	3474      	adds	r4, #116	; 0x74
 8003bee:	7020      	strb	r0, [r4, #0]
           pri[p_i--]  = k;
 8003bf0:	701e      	strb	r6, [r3, #0]
 8003bf2:	3d01      	subs	r5, #1
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8003bf4:	465b      	mov	r3, fp
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d000      	beq.n	8003bfc <hsc_decode_blockllr+0x8f4>
 8003bfa:	e35e      	b.n	80042ba <hsc_decode_blockllr+0xfb2>
       k = idx_a[i] >> 1;
 8003bfc:	003a      	movs	r2, r7
 8003bfe:	326c      	adds	r2, #108	; 0x6c
 8003c00:	78d6      	ldrb	r6, [r2, #3]
       if ((chk2 & (1<<k)) == 0) {
 8003c02:	464a      	mov	r2, r9
       k = idx_a[i] >> 1;
 8003c04:	0874      	lsrs	r4, r6, #1
       if ((chk2 & (1<<k)) == 0) {
 8003c06:	2001      	movs	r0, #1
 8003c08:	4122      	asrs	r2, r4
 8003c0a:	4210      	tst	r0, r2
 8003c0c:	d100      	bne.n	8003c10 <hsc_decode_blockllr+0x908>
 8003c0e:	e1ba      	b.n	8003f86 <hsc_decode_blockllr+0xc7e>
 8003c10:	9b02      	ldr	r3, [sp, #8]
 8003c12:	085a      	lsrs	r2, r3, #1
 8003c14:	b2d2      	uxtb	r2, r2
    switch ((chk1>>1) & 7) {
 8003c16:	2a06      	cmp	r2, #6
 8003c18:	d900      	bls.n	8003c1c <hsc_decode_blockllr+0x914>
 8003c1a:	e1cd      	b.n	8003fb8 <hsc_decode_blockllr+0xcb0>
 8003c1c:	483d      	ldr	r0, [pc, #244]	; (8003d14 <hsc_decode_blockllr+0xa0c>)
 8003c1e:	0092      	lsls	r2, r2, #2
 8003c20:	5882      	ldr	r2, [r0, r2]
 8003c22:	4697      	mov	pc, r2
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8003c24:	003b      	movs	r3, r7
 8003c26:	2564      	movs	r5, #100	; 0x64
 8003c28:	336c      	adds	r3, #108	; 0x6c
 8003c2a:	789b      	ldrb	r3, [r3, #2]
                pri[0]          = j0[chk2];
 8003c2c:	2448      	movs	r4, #72	; 0x48
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8003c2e:	483a      	ldr	r0, [pc, #232]	; (8003d18 <hsc_decode_blockllr+0xa10>)
 8003c30:	0019      	movs	r1, r3
 8003c32:	4448      	add	r0, r9
 8003c34:	5d42      	ldrb	r2, [r0, r5]
                pri[0]          = j0[chk2];
 8003c36:	553a      	strb	r2, [r7, r4]
        case 5: idx_b[j0[chk2]] = idx_a[2]; 
 8003c38:	18ba      	adds	r2, r7, r2
 8003c3a:	3274      	adds	r2, #116	; 0x74
 8003c3c:	7013      	strb	r3, [r2, #0]
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	9308      	str	r3, [sp, #32]
                    switch (max_lmd-min_lmd) {
 8003c42:	4654      	mov	r4, sl
 8003c44:	2601      	movs	r6, #1
 8003c46:	9805      	ldr	r0, [sp, #20]
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 8003c48:	2500      	movs	r5, #0
                    switch (max_lmd-min_lmd) {
 8003c4a:	1b03      	subs	r3, r0, r4
 8003c4c:	9c06      	ldr	r4, [sp, #24]
 8003c4e:	0098      	lsls	r0, r3, #2
 8003c50:	4026      	ands	r6, r4
 8003c52:	1cb4      	adds	r4, r6, #2
 8003c54:	00a4      	lsls	r4, r4, #2
 8003c56:	9404      	str	r4, [sp, #16]
 8003c58:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8003c5a:	9307      	str	r3, [sp, #28]
 8003c5c:	46a2      	mov	sl, r4
                    switch (max_lmd) {
 8003c5e:	9b05      	ldr	r3, [sp, #20]
                    switch (max_lmd-min_lmd) {
 8003c60:	4482      	add	sl, r0
                    switch (max_lmd) {
 8003c62:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4698      	mov	r8, r3
 8003c68:	4684      	mov	ip, r0
 8003c6a:	930d      	str	r3, [sp, #52]	; 0x34
 8003c6c:	9b05      	ldr	r3, [sp, #20]
 8003c6e:	44c4      	add	ip, r8
 8003c70:	2248      	movs	r2, #72	; 0x48
 8003c72:	4698      	mov	r8, r3
 8003c74:	000b      	movs	r3, r1
 8003c76:	4661      	mov	r1, ip
 8003c78:	9609      	str	r6, [sp, #36]	; 0x24
 8003c7a:	002e      	movs	r6, r5
 8003c7c:	9c06      	ldr	r4, [sp, #24]
 8003c7e:	5cba      	ldrb	r2, [r7, r2]
 8003c80:	00a4      	lsls	r4, r4, #2
 8003c82:	9808      	ldr	r0, [sp, #32]
 8003c84:	9402      	str	r4, [sp, #8]
 8003c86:	9105      	str	r1, [sp, #20]
                int lr  = INDEX(h)[l] >> 1;
 8003c88:	b2c0      	uxtb	r0, r0
                if (l != lr) {
 8003c8a:	4282      	cmp	r2, r0
 8003c8c:	d060      	beq.n	8003d50 <hsc_decode_blockllr+0xa48>
                    switch (max_lmd-min_lmd) {
 8003c8e:	9907      	ldr	r1, [sp, #28]
 8003c90:	2906      	cmp	r1, #6
 8003c92:	d82c      	bhi.n	8003cee <hsc_decode_blockllr+0x9e6>
 8003c94:	4651      	mov	r1, sl
 8003c96:	6809      	ldr	r1, [r1, #0]
 8003c98:	468f      	mov	pc, r1
            int max_lmd = maxlambda_lut[phi];
 8003c9a:	4641      	mov	r1, r8
                        case 5: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003c9c:	008c      	lsls	r4, r1, #2
 8003c9e:	193c      	adds	r4, r7, r4
 8003ca0:	1825      	adds	r5, r4, r0
 8003ca2:	7f2d      	ldrb	r5, [r5, #28]
 8003ca4:	18a4      	adds	r4, r4, r2
 8003ca6:	3901      	subs	r1, #1
 8003ca8:	7725      	strb	r5, [r4, #28]
                        case 4: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003caa:	008c      	lsls	r4, r1, #2
 8003cac:	193c      	adds	r4, r7, r4
 8003cae:	1825      	adds	r5, r4, r0
 8003cb0:	7f2d      	ldrb	r5, [r5, #28]
 8003cb2:	18a4      	adds	r4, r4, r2
 8003cb4:	3901      	subs	r1, #1
 8003cb6:	7725      	strb	r5, [r4, #28]
                        case 3: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003cb8:	008c      	lsls	r4, r1, #2
 8003cba:	193c      	adds	r4, r7, r4
 8003cbc:	1825      	adds	r5, r4, r0
 8003cbe:	7f2d      	ldrb	r5, [r5, #28]
 8003cc0:	18a4      	adds	r4, r4, r2
 8003cc2:	3901      	subs	r1, #1
 8003cc4:	7725      	strb	r5, [r4, #28]
                        case 2: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003cc6:	008c      	lsls	r4, r1, #2
 8003cc8:	193c      	adds	r4, r7, r4
 8003cca:	1825      	adds	r5, r4, r0
 8003ccc:	7f2d      	ldrb	r5, [r5, #28]
 8003cce:	18a4      	adds	r4, r4, r2
 8003cd0:	3901      	subs	r1, #1
 8003cd2:	7725      	strb	r5, [r4, #28]
                        case 1: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003cd4:	008c      	lsls	r4, r1, #2
 8003cd6:	193c      	adds	r4, r7, r4
 8003cd8:	1825      	adds	r5, r4, r0
 8003cda:	7f2d      	ldrb	r5, [r5, #28]
 8003cdc:	18a4      	adds	r4, r4, r2
 8003cde:	3901      	subs	r1, #1
 8003ce0:	7725      	strb	r5, [r4, #28]
                        case 0: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];
 8003ce2:	0089      	lsls	r1, r1, #2
 8003ce4:	1879      	adds	r1, r7, r1
 8003ce6:	180c      	adds	r4, r1, r0
 8003ce8:	7f24      	ldrb	r4, [r4, #28]
 8003cea:	1889      	adds	r1, r1, r2
 8003cec:	770c      	strb	r4, [r1, #28]
                    switch (max_lmd) {
 8003cee:	4641      	mov	r1, r8
 8003cf0:	2906      	cmp	r1, #6
 8003cf2:	d82d      	bhi.n	8003d50 <hsc_decode_blockllr+0xa48>
 8003cf4:	9905      	ldr	r1, [sp, #20]
 8003cf6:	6809      	ldr	r1, [r1, #0]
 8003cf8:	468f      	mov	pc, r1
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	08009a98 	.word	0x08009a98
 8003d00:	2000057c 	.word	0x2000057c
 8003d04:	03020100 	.word	0x03020100
 8003d08:	08009a18 	.word	0x08009a18
 8003d0c:	20000970 	.word	0x20000970
 8003d10:	07060504 	.word	0x07060504
 8003d14:	08009950 	.word	0x08009950
 8003d18:	080099a4 	.word	0x080099a4
                        case 6: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003d1c:	1839      	adds	r1, r7, r0
 8003d1e:	7e0c      	ldrb	r4, [r1, #24]
 8003d20:	18b9      	adds	r1, r7, r2
 8003d22:	760c      	strb	r4, [r1, #24]
                        case 5: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003d24:	1839      	adds	r1, r7, r0
 8003d26:	7d0c      	ldrb	r4, [r1, #20]
 8003d28:	18b9      	adds	r1, r7, r2
 8003d2a:	750c      	strb	r4, [r1, #20]
                        case 4: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003d2c:	1839      	adds	r1, r7, r0
 8003d2e:	7c0c      	ldrb	r4, [r1, #16]
 8003d30:	18b9      	adds	r1, r7, r2
 8003d32:	740c      	strb	r4, [r1, #16]
                        case 3: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003d34:	1839      	adds	r1, r7, r0
 8003d36:	7b0c      	ldrb	r4, [r1, #12]
 8003d38:	18b9      	adds	r1, r7, r2
 8003d3a:	730c      	strb	r4, [r1, #12]
                        case 2: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003d3c:	1839      	adds	r1, r7, r0
 8003d3e:	7a0c      	ldrb	r4, [r1, #8]
 8003d40:	18b9      	adds	r1, r7, r2
 8003d42:	720c      	strb	r4, [r1, #8]
                        case 1: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];  lmd--;
 8003d44:	1839      	adds	r1, r7, r0
 8003d46:	790c      	ldrb	r4, [r1, #4]
 8003d48:	18b9      	adds	r1, r7, r2
 8003d4a:	710c      	strb	r4, [r1, #4]
                        case 0: PRIBIT(h)[lmd][l] = PRIBIT(h)[lmd][lr];
 8003d4c:	5c39      	ldrb	r1, [r7, r0]
 8003d4e:	54b9      	strb	r1, [r7, r2]
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d50:	2401      	movs	r4, #1
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8003d52:	0099      	lsls	r1, r3, #2
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d54:	401c      	ands	r4, r3
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d56:	01db      	lsls	r3, r3, #7
 8003d58:	4303      	orrs	r3, r0
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d5a:	9803      	ldr	r0, [sp, #12]
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8003d5c:	1879      	adds	r1, r7, r1
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d5e:	4684      	mov	ip, r0
 8003d60:	9804      	ldr	r0, [sp, #16]
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8003d62:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d64:	4681      	mov	r9, r0
                PM(h)[l]                = PATHLLR(h)[INDEX(h)[l]];
 8003d66:	0095      	lsls	r5, r2, #2
 8003d68:	197d      	adds	r5, r7, r5
 8003d6a:	63a9      	str	r1, [r5, #56]	; 0x38
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d6c:	9d02      	ldr	r5, [sp, #8]
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d6e:	44cc      	add	ip, r9
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d70:	46a9      	mov	r9, r5
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d72:	4660      	mov	r0, ip
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d74:	990b      	ldr	r1, [sp, #44]	; 0x2c
            for (int ll=0; ll<num_paths; ll++) {
 8003d76:	3601      	adds	r6, #1
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d78:	4449      	add	r1, r9
                BITMEM(h)[2+(phi&1)][l] = INDEX(h)[l] & 1;
 8003d7a:	5484      	strb	r4, [r0, r2]
                MAP(h)[phi][l]          = lr | ((INDEX(h)[l] & 1) << 7);
 8003d7c:	548b      	strb	r3, [r1, r2]
            for (int ll=0; ll<num_paths; ll++) {
 8003d7e:	455e      	cmp	r6, fp
 8003d80:	d062      	beq.n	8003e48 <hsc_decode_blockllr+0xb40>
 8003d82:	003a      	movs	r2, r7
 8003d84:	2374      	movs	r3, #116	; 0x74
 8003d86:	3248      	adds	r2, #72	; 0x48
 8003d88:	5cb2      	ldrb	r2, [r6, r2]
 8003d8a:	18b9      	adds	r1, r7, r2
 8003d8c:	5ccb      	ldrb	r3, [r1, r3]
 8003d8e:	0858      	lsrs	r0, r3, #1
 8003d90:	e77a      	b.n	8003c88 <hsc_decode_blockllr+0x980>
            int max_lmd = maxlambda_lut[phi];
 8003d92:	4641      	mov	r1, r8
 8003d94:	e789      	b.n	8003caa <hsc_decode_blockllr+0x9a2>
 8003d96:	4641      	mov	r1, r8
 8003d98:	e78e      	b.n	8003cb8 <hsc_decode_blockllr+0x9b0>
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	e793      	b.n	8003cc6 <hsc_decode_blockllr+0x9be>
 8003d9e:	4641      	mov	r1, r8
 8003da0:	e798      	b.n	8003cd4 <hsc_decode_blockllr+0x9cc>
 8003da2:	4641      	mov	r1, r8
 8003da4:	e79d      	b.n	8003ce2 <hsc_decode_blockllr+0x9da>
                        case 6: PRILLR(h)[lmd][l] = PRILLR(h)[lmd][lr];  lmd--;
 8003da6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003da8:	1879      	adds	r1, r7, r1
 8003daa:	180c      	adds	r4, r1, r0
 8003dac:	7f24      	ldrb	r4, [r4, #28]
 8003dae:	1889      	adds	r1, r1, r2
 8003db0:	770c      	strb	r4, [r1, #28]
 8003db2:	4641      	mov	r1, r8
 8003db4:	3901      	subs	r1, #1
 8003db6:	e771      	b.n	8003c9c <hsc_decode_blockllr+0x994>
        case 3: idx_b[j0[chk2]] = idx_a[3]; 
 8003db8:	003b      	movs	r3, r7
 8003dba:	336c      	adds	r3, #108	; 0x6c
 8003dbc:	2564      	movs	r5, #100	; 0x64
 8003dbe:	78db      	ldrb	r3, [r3, #3]
 8003dc0:	e734      	b.n	8003c2c <hsc_decode_blockllr+0x924>
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8003dc2:	4bde      	ldr	r3, [pc, #888]	; (800413c <hsc_decode_blockllr+0xe34>)
 8003dc4:	2454      	movs	r4, #84	; 0x54
 8003dc6:	0018      	movs	r0, r3
                idx_b[j0[chk2]] = idx_a[3]; 
 8003dc8:	003b      	movs	r3, r7
 8003dca:	2664      	movs	r6, #100	; 0x64
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8003dcc:	4448      	add	r0, r9
 8003dce:	5d02      	ldrb	r2, [r0, r4]
                idx_b[j0[chk2]] = idx_a[3]; 
 8003dd0:	336c      	adds	r3, #108	; 0x6c
 8003dd2:	78dd      	ldrb	r5, [r3, #3]
        case 2: idx_b[j1[chk2]] = idx_a[1]; 
 8003dd4:	18bb      	adds	r3, r7, r2
 8003dd6:	3374      	adds	r3, #116	; 0x74
 8003dd8:	7019      	strb	r1, [r3, #0]
                idx_b[j0[chk2]] = idx_a[3]; 
 8003dda:	5d83      	ldrb	r3, [r0, r6]
                pri[1]          = j1[chk2];
 8003ddc:	0038      	movs	r0, r7
 8003dde:	3048      	adds	r0, #72	; 0x48
 8003de0:	7042      	strb	r2, [r0, #1]
 8003de2:	3c0c      	subs	r4, #12
                idx_b[j0[chk2]] = idx_a[3]; 
 8003de4:	18fa      	adds	r2, r7, r3
                pri[0]          = j0[chk2];
 8003de6:	553b      	strb	r3, [r7, r4]
                idx_b[j0[chk2]] = idx_a[3]; 
 8003de8:	3274      	adds	r2, #116	; 0x74
 8003dea:	086b      	lsrs	r3, r5, #1
 8003dec:	7015      	strb	r5, [r2, #0]
 8003dee:	0029      	movs	r1, r5
 8003df0:	9308      	str	r3, [sp, #32]
 8003df2:	e726      	b.n	8003c42 <hsc_decode_blockllr+0x93a>
                pri[1]          = j1[chk2];
 8003df4:	2348      	movs	r3, #72	; 0x48
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003df6:	003a      	movs	r2, r7
                pri[1]          = j1[chk2];
 8003df8:	4698      	mov	r8, r3
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003dfa:	4bd0      	ldr	r3, [pc, #832]	; (800413c <hsc_decode_blockllr+0xe34>)
 8003dfc:	326c      	adds	r2, #108	; 0x6c
                idx_b[j0[chk2]] = idx_a[3]; 
 8003dfe:	78d5      	ldrb	r5, [r2, #3]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003e00:	0018      	movs	r0, r3
 8003e02:	7892      	ldrb	r2, [r2, #2]
 8003e04:	2454      	movs	r4, #84	; 0x54
 8003e06:	4694      	mov	ip, r2
                pri[1]          = j1[chk2];
 8003e08:	003a      	movs	r2, r7
                idx_b[j0[chk2]] = idx_a[3]; 
 8003e0a:	2664      	movs	r6, #100	; 0x64
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003e0c:	4448      	add	r0, r9
 8003e0e:	5d04      	ldrb	r4, [r0, r4]
                pri[1]          = j1[chk2];
 8003e10:	3248      	adds	r2, #72	; 0x48
 8003e12:	7054      	strb	r4, [r2, #1]
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003e14:	4662      	mov	r2, ip
                idx_b[j0[chk2]] = idx_a[3]; 
 8003e16:	5d83      	ldrb	r3, [r0, r6]
                pri[0]          = j0[chk2];
 8003e18:	4640      	mov	r0, r8
        case 1: idx_b[j1[chk2]] = idx_a[2]; 
 8003e1a:	193c      	adds	r4, r7, r4
 8003e1c:	3474      	adds	r4, #116	; 0x74
 8003e1e:	7022      	strb	r2, [r4, #0]
                idx_b[j0[chk2]] = idx_a[3]; 
 8003e20:	18fa      	adds	r2, r7, r3
                pri[0]          = j0[chk2];
 8003e22:	543b      	strb	r3, [r7, r0]
                idx_b[j0[chk2]] = idx_a[3]; 
 8003e24:	3274      	adds	r2, #116	; 0x74
 8003e26:	086b      	lsrs	r3, r5, #1
 8003e28:	7015      	strb	r5, [r2, #0]
 8003e2a:	0029      	movs	r1, r5
 8003e2c:	9308      	str	r3, [sp, #32]
 8003e2e:	e708      	b.n	8003c42 <hsc_decode_blockllr+0x93a>
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8003e30:	2364      	movs	r3, #100	; 0x64
                pri[0]          = j0[chk2];
 8003e32:	2448      	movs	r4, #72	; 0x48
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8003e34:	48c1      	ldr	r0, [pc, #772]	; (800413c <hsc_decode_blockllr+0xe34>)
 8003e36:	4448      	add	r0, r9
 8003e38:	5cc2      	ldrb	r2, [r0, r3]
 8003e3a:	084b      	lsrs	r3, r1, #1
                pri[0]          = j0[chk2];
 8003e3c:	553a      	strb	r2, [r7, r4]
        case 6: idx_b[j0[chk2]] = idx_a[1]; 
 8003e3e:	18ba      	adds	r2, r7, r2
 8003e40:	3274      	adds	r2, #116	; 0x74
 8003e42:	9308      	str	r3, [sp, #32]
 8003e44:	7011      	strb	r1, [r2, #0]
 8003e46:	e6fc      	b.n	8003c42 <hsc_decode_blockllr+0x93a>
 8003e48:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003e4a:	f7ff fb5e 	bl	800350a <hsc_decode_blockllr+0x202>
                    next_pt = (next_pt << 1) + 2;
 8003e4e:	4643      	mov	r3, r8
 8003e50:	3302      	adds	r3, #2
 8003e52:	9308      	str	r3, [sp, #32]
                    lmd0++;
 8003e54:	9b07      	ldr	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003e56:	3002      	adds	r0, #2
                    lmd0++;
 8003e58:	3301      	adds	r3, #1
 8003e5a:	9307      	str	r3, [sp, #28]
 8003e5c:	9b02      	ldr	r3, [sp, #8]
 8003e5e:	3208      	adds	r2, #8
 8003e60:	3304      	adds	r3, #4
 8003e62:	9302      	str	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003e64:	9b05      	ldr	r3, [sp, #20]
 8003e66:	4298      	cmp	r0, r3
 8003e68:	db00      	blt.n	8003e6c <hsc_decode_blockllr+0xb64>
 8003e6a:	e0b5      	b.n	8003fd8 <hsc_decode_blockllr+0xcd0>
 8003e6c:	9b07      	ldr	r3, [sp, #28]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	469c      	mov	ip, r3
 8003e72:	e5bd      	b.n	80039f0 <hsc_decode_blockllr+0x6e8>
            switch (num_paths-1) {
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <hsc_decode_blockllr+0xb74>
 8003e78:	f7ff fb39 	bl	80034ee <hsc_decode_blockllr+0x1e6>
 8003e7c:	4ab0      	ldr	r2, [pc, #704]	; (8004140 <hsc_decode_blockllr+0xe38>)
 8003e7e:	f7ff fb30 	bl	80034e2 <hsc_decode_blockllr+0x1da>
                num_paths = LISTSIZE;
 8003e82:	2304      	movs	r3, #4
 8003e84:	2403      	movs	r4, #3
 8003e86:	2502      	movs	r5, #2
 8003e88:	469b      	mov	fp, r3
 8003e8a:	e668      	b.n	8003b5e <hsc_decode_blockllr+0x856>
           chk2       |= (1<<k);
 8003e8c:	464b      	mov	r3, r9
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	4699      	mov	r9, r3
 8003e92:	2301      	movs	r3, #1
 8003e94:	2200      	movs	r2, #0
 8003e96:	2405      	movs	r4, #5
 8003e98:	9302      	str	r3, [sp, #8]
 8003e9a:	e68e      	b.n	8003bba <hsc_decode_blockllr+0x8b2>
 8003e9c:	4aa8      	ldr	r2, [pc, #672]	; (8004140 <hsc_decode_blockllr+0xe38>)
 8003e9e:	f7ff fb14 	bl	80034ca <hsc_decode_blockllr+0x1c2>
 8003ea2:	4aa7      	ldr	r2, [pc, #668]	; (8004140 <hsc_decode_blockllr+0xe38>)
 8003ea4:	f7ff fb17 	bl	80034d6 <hsc_decode_blockllr+0x1ce>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003ea8:	9b05      	ldr	r3, [sp, #20]
 8003eaa:	00f6      	lsls	r6, r6, #3
 8003eac:	009d      	lsls	r5, r3, #2
 8003eae:	0063      	lsls	r3, r4, #1
 8003eb0:	3b01      	subs	r3, #1
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4699      	mov	r9, r3
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003eb6:	9c02      	ldr	r4, [sp, #8]
 8003eb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003eba:	1964      	adds	r4, r4, r5
 8003ebc:	7f24      	ldrb	r4, [r4, #28]
 8003ebe:	1936      	adds	r6, r6, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003ec0:	444c      	add	r4, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003ec2:	00b6      	lsls	r6, r6, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003ec4:	00a4      	lsls	r4, r4, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003ec6:	599e      	ldr	r6, [r3, r6]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003ec8:	591c      	ldr	r4, [r3, r4]
					if (use_gfunc) {
 8003eca:	9b04      	ldr	r3, [sp, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d000      	beq.n	8003ed2 <hsc_decode_blockllr+0xbca>
 8003ed0:	e13a      	b.n	8004148 <hsc_decode_blockllr+0xe40>
    llr_t a_inv = -llr_layer_a;
 8003ed2:	4273      	negs	r3, r6
    if (llr_layer_a < llr_layer_b) {
 8003ed4:	42a6      	cmp	r6, r4
 8003ed6:	db00      	blt.n	8003eda <hsc_decode_blockllr+0xbd2>
 8003ed8:	e1f5      	b.n	80042c6 <hsc_decode_blockllr+0xfbe>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003eda:	429c      	cmp	r4, r3
 8003edc:	dc00      	bgt.n	8003ee0 <hsc_decode_blockllr+0xbd8>
    llr_t b_inv = -llr_layer_b;
 8003ede:	4266      	negs	r6, r4
				for (int l=0; l<num_paths; l++) {
 8003ee0:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003ee2:	600e      	str	r6, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <hsc_decode_blockllr+0xbe4>
 8003ee8:	f7ff faca 	bl	8003480 <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003eec:	4660      	mov	r0, ip
 8003eee:	9b02      	ldr	r3, [sp, #8]
 8003ef0:	0080      	lsls	r0, r0, #2
 8003ef2:	195b      	adds	r3, r3, r5
 8003ef4:	7f5b      	ldrb	r3, [r3, #29]
 8003ef6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003ef8:	9016      	str	r0, [sp, #88]	; 0x58
 8003efa:	18c0      	adds	r0, r0, r3
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003efc:	444b      	add	r3, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003efe:	0080      	lsls	r0, r0, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f00:	009b      	lsls	r3, r3, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f02:	5820      	ldr	r0, [r4, r0]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f04:	58e3      	ldr	r3, [r4, r3]
    llr_t a_inv = -llr_layer_a;
 8003f06:	4244      	negs	r4, r0
    if (llr_layer_a < llr_layer_b) {
 8003f08:	4298      	cmp	r0, r3
 8003f0a:	db00      	blt.n	8003f0e <hsc_decode_blockllr+0xc06>
 8003f0c:	e1e7      	b.n	80042de <hsc_decode_blockllr+0xfd6>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003f0e:	42a3      	cmp	r3, r4
 8003f10:	dc00      	bgt.n	8003f14 <hsc_decode_blockllr+0xc0c>
    llr_t b_inv = -llr_layer_b;
 8003f12:	4258      	negs	r0, r3
				for (int l=0; l<num_paths; l++) {
 8003f14:	465b      	mov	r3, fp
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003f16:	6048      	str	r0, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d101      	bne.n	8003f20 <hsc_decode_blockllr+0xc18>
 8003f1c:	f7ff fab0 	bl	8003480 <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f20:	9b02      	ldr	r3, [sp, #8]
 8003f22:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003f24:	195b      	adds	r3, r3, r5
 8003f26:	7f98      	ldrb	r0, [r3, #30]
 8003f28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003f2a:	181b      	adds	r3, r3, r0
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f2c:	4448      	add	r0, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f2e:	009b      	lsls	r3, r3, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f30:	0080      	lsls	r0, r0, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f32:	58e3      	ldr	r3, [r4, r3]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f34:	5820      	ldr	r0, [r4, r0]
    llr_t a_inv = -llr_layer_a;
 8003f36:	425c      	negs	r4, r3
    if (llr_layer_a < llr_layer_b) {
 8003f38:	4298      	cmp	r0, r3
 8003f3a:	dc00      	bgt.n	8003f3e <hsc_decode_blockllr+0xc36>
 8003f3c:	e1dd      	b.n	80042fa <hsc_decode_blockllr+0xff2>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003f3e:	42a0      	cmp	r0, r4
 8003f40:	dc00      	bgt.n	8003f44 <hsc_decode_blockllr+0xc3c>
    llr_t b_inv = -llr_layer_b;
 8003f42:	4243      	negs	r3, r0
						LLR(h)[beta][l] = f_fn(llr0, llr1);
 8003f44:	608b      	str	r3, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 8003f46:	465b      	mov	r3, fp
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d101      	bne.n	8003f50 <hsc_decode_blockllr+0xc48>
 8003f4c:	f7ff fa98 	bl	8003480 <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f50:	9b02      	ldr	r3, [sp, #8]
 8003f52:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003f54:	469c      	mov	ip, r3
 8003f56:	4465      	add	r5, ip
 8003f58:	7fe8      	ldrb	r0, [r5, #31]
 8003f5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003f5c:	181b      	adds	r3, r3, r0
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f5e:	4448      	add	r0, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f60:	009b      	lsls	r3, r3, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f62:	0080      	lsls	r0, r0, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8003f64:	58e3      	ldr	r3, [r4, r3]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8003f66:	5820      	ldr	r0, [r4, r0]
    llr_t a_inv = -llr_layer_a;
 8003f68:	425c      	negs	r4, r3
    if (llr_layer_a < llr_layer_b) {
 8003f6a:	4298      	cmp	r0, r3
 8003f6c:	dc00      	bgt.n	8003f70 <hsc_decode_blockllr+0xc68>
 8003f6e:	e1ca      	b.n	8004306 <hsc_decode_blockllr+0xffe>
        output = (a_inv < llr_layer_b) ? llr_layer_a : b_inv;
 8003f70:	42a0      	cmp	r0, r4
 8003f72:	dd01      	ble.n	8003f78 <hsc_decode_blockllr+0xc70>
 8003f74:	f7ff fa83 	bl	800347e <hsc_decode_blockllr+0x176>
    llr_t b_inv = -llr_layer_b;
 8003f78:	4243      	negs	r3, r0
 8003f7a:	f7ff fa80 	bl	800347e <hsc_decode_blockllr+0x176>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8003f7e:	1a59      	subs	r1, r3, r1
 8003f80:	64f9      	str	r1, [r7, #76]	; 0x4c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8003f82:	653b      	str	r3, [r7, #80]	; 0x50
 8003f84:	e592      	b.n	8003aac <hsc_decode_blockllr+0x7a4>
 8003f86:	2304      	movs	r3, #4
 8003f88:	469c      	mov	ip, r3
 8003f8a:	9b02      	ldr	r3, [sp, #8]
           chk2       |= (1<<k);
 8003f8c:	40a0      	lsls	r0, r4
 8003f8e:	085a      	lsrs	r2, r3, #1
 8003f90:	464b      	mov	r3, r9
 8003f92:	4318      	orrs	r0, r3
           idx_b[k]    = idx_a[i];
 8003f94:	193b      	adds	r3, r7, r4
 8003f96:	4698      	mov	r8, r3
 8003f98:	2374      	movs	r3, #116	; 0x74
 8003f9a:	4699      	mov	r9, r3
 8003f9c:	4663      	mov	r3, ip
 8003f9e:	44c8      	add	r8, r9
 8003fa0:	431a      	orrs	r2, r3
           chk2       |= (1<<k);
 8003fa2:	b2c3      	uxtb	r3, r0
 8003fa4:	4699      	mov	r9, r3
           idx_b[k]    = idx_a[i];
 8003fa6:	4643      	mov	r3, r8
           pri[p_i--]  = k;
 8003fa8:	197d      	adds	r5, r7, r5
 8003faa:	3548      	adds	r5, #72	; 0x48
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	702c      	strb	r4, [r5, #0]
           idx_b[k]    = idx_a[i];
 8003fb0:	701e      	strb	r6, [r3, #0]
    switch ((chk1>>1) & 7) {
 8003fb2:	2a06      	cmp	r2, #6
 8003fb4:	d800      	bhi.n	8003fb8 <hsc_decode_blockllr+0xcb0>
 8003fb6:	e631      	b.n	8003c1c <hsc_decode_blockllr+0x914>
 8003fb8:	2348      	movs	r3, #72	; 0x48
 8003fba:	003a      	movs	r2, r7
 8003fbc:	5cfb      	ldrb	r3, [r7, r3]
 8003fbe:	3274      	adds	r2, #116	; 0x74
 8003fc0:	5cd1      	ldrb	r1, [r2, r3]
 8003fc2:	084b      	lsrs	r3, r1, #1
 8003fc4:	9308      	str	r3, [sp, #32]
 8003fc6:	e63c      	b.n	8003c42 <hsc_decode_blockllr+0x93a>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8003fc8:	1acb      	subs	r3, r1, r3
 8003fca:	657b      	str	r3, [r7, #84]	; 0x54
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8003fcc:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fce:	e578      	b.n	8003ac2 <hsc_decode_blockllr+0x7ba>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8003fd0:	1acb      	subs	r3, r1, r3
 8003fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8003fd4:	6639      	str	r1, [r7, #96]	; 0x60
 8003fd6:	e57f      	b.n	8003ad8 <hsc_decode_blockllr+0x7d0>
 8003fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fda:	464f      	mov	r7, r9
 8003fdc:	469b      	mov	fp, r3
 8003fde:	9b07      	ldr	r3, [sp, #28]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	469c      	mov	ip, r3
 8003fe4:	e54d      	b.n	8003a82 <hsc_decode_blockllr+0x77a>
            next_pt         = 2;
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	4699      	mov	r9, r3
            lmd0            = 0;
 8003fea:	2300      	movs	r3, #0
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8003fec:	2606      	movs	r6, #6
 8003fee:	2202      	movs	r2, #2
 8003ff0:	469c      	mov	ip, r3
 8003ff2:	46ba      	mov	sl, r7
 8003ff4:	4c53      	ldr	r4, [pc, #332]	; (8004144 <hsc_decode_blockllr+0xe3c>)
            lmd0            = 0;
 8003ff6:	9307      	str	r3, [sp, #28]
                int incval  = (beta < beta_laststage);
 8003ff8:	9904      	ldr	r1, [sp, #16]
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4291      	cmp	r1, r2
 8003ffe:	dc00      	bgt.n	8004002 <hsc_decode_blockllr+0xcfa>
 8004000:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004002:	4660      	mov	r0, ip
 8004004:	4655      	mov	r5, sl
 8004006:	5c2d      	ldrb	r5, [r5, r0]
 8004008:	9803      	ldr	r0, [sp, #12]
 800400a:	0091      	lsls	r1, r2, #2
 800400c:	4680      	mov	r8, r0
 800400e:	4441      	add	r1, r8
 8004010:	5d49      	ldrb	r1, [r1, r5]
 8004012:	7820      	ldrb	r0, [r4, #0]
 8004014:	4688      	mov	r8, r1
 8004016:	4647      	mov	r7, r8
 8004018:	0055      	lsls	r5, r2, #1
 800401a:	18e9      	adds	r1, r5, r3
 800401c:	4047      	eors	r7, r0
 800401e:	9803      	ldr	r0, [sp, #12]
 8004020:	0089      	lsls	r1, r1, #2
 8004022:	5447      	strb	r7, [r0, r1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004024:	18f3      	adds	r3, r6, r3
 8004026:	7821      	ldrb	r1, [r4, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	54c1      	strb	r1, [r0, r3]
                if (beta == next_pt) {
 800402c:	4591      	cmp	r9, r2
 800402e:	d007      	beq.n	8004040 <hsc_decode_blockllr+0xd38>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004030:	9b05      	ldr	r3, [sp, #20]
 8004032:	3202      	adds	r2, #2
 8004034:	3604      	adds	r6, #4
 8004036:	3408      	adds	r4, #8
 8004038:	4293      	cmp	r3, r2
 800403a:	dcdd      	bgt.n	8003ff8 <hsc_decode_blockllr+0xcf0>
 800403c:	4657      	mov	r7, sl
 800403e:	e520      	b.n	8003a82 <hsc_decode_blockllr+0x77a>
                    next_pt = (next_pt << 1) + 2;
 8004040:	1cab      	adds	r3, r5, #2
 8004042:	4699      	mov	r9, r3
                    lmd0++;
 8004044:	9b07      	ldr	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004046:	3202      	adds	r2, #2
                    lmd0++;
 8004048:	3301      	adds	r3, #1
 800404a:	9307      	str	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800404c:	9b05      	ldr	r3, [sp, #20]
 800404e:	3604      	adds	r6, #4
 8004050:	3408      	adds	r4, #8
 8004052:	4293      	cmp	r3, r2
 8004054:	dc00      	bgt.n	8004058 <hsc_decode_blockllr+0xd50>
 8004056:	e13c      	b.n	80042d2 <hsc_decode_blockllr+0xfca>
 8004058:	9b07      	ldr	r3, [sp, #28]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	469c      	mov	ip, r3
 800405e:	e7cb      	b.n	8003ff8 <hsc_decode_blockllr+0xcf0>
                    PATHLLR(h)[2*l]      = PM(h)[l] - LLR(h)[1][l];
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	667b      	str	r3, [r7, #100]	; 0x64
                    PATHLLR(h)[2*l+1]    = PM(h)[l] + 0;
 8004064:	66ba      	str	r2, [r7, #104]	; 0x68
 8004066:	e542      	b.n	8003aee <hsc_decode_blockllr+0x7e6>
 8004068:	b249      	sxtb	r1, r1
 800406a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800406c:	f7ff fbfd 	bl	800386a <hsc_decode_blockllr+0x562>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004070:	003b      	movs	r3, r7
 8004072:	e508      	b.n	8003a86 <hsc_decode_blockllr+0x77e>
        case 0: idx_b[1]    = idx_a[1]; 
 8004074:	003a      	movs	r2, r7
                pri[0]      = 1;
 8004076:	2048      	movs	r0, #72	; 0x48
 8004078:	2401      	movs	r4, #1
        case 0: idx_b[1]    = idx_a[1]; 
 800407a:	3274      	adds	r2, #116	; 0x74
                pri[0]      = 1;
 800407c:	543c      	strb	r4, [r7, r0]
        case 0: idx_b[1]    = idx_a[1]; 
 800407e:	7051      	strb	r1, [r2, #1]
 8004080:	e5df      	b.n	8003c42 <hsc_decode_blockllr+0x93a>
            lmd0            = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	469c      	mov	ip, r3
 8004086:	9307      	str	r3, [sp, #28]
 8004088:	465b      	mov	r3, fp
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800408a:	2606      	movs	r6, #6
 800408c:	9309      	str	r3, [sp, #36]	; 0x24
 800408e:	4663      	mov	r3, ip
 8004090:	2102      	movs	r1, #2
            next_pt         = 2;
 8004092:	46da      	mov	sl, fp
 8004094:	46b8      	mov	r8, r7
 8004096:	4c2b      	ldr	r4, [pc, #172]	; (8004144 <hsc_decode_blockllr+0xe3c>)
 8004098:	9602      	str	r6, [sp, #8]
 800409a:	9308      	str	r3, [sp, #32]
                int incval  = (beta < beta_laststage);
 800409c:	9a04      	ldr	r2, [sp, #16]
 800409e:	2301      	movs	r3, #1
 80040a0:	428a      	cmp	r2, r1
 80040a2:	dc00      	bgt.n	80040a6 <hsc_decode_blockllr+0xd9e>
 80040a4:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80040a6:	4642      	mov	r2, r8
 80040a8:	9f08      	ldr	r7, [sp, #32]
 80040aa:	0088      	lsls	r0, r1, #2
 80040ac:	5dd2      	ldrb	r2, [r2, r7]
 80040ae:	9f03      	ldr	r7, [sp, #12]
 80040b0:	7825      	ldrb	r5, [r4, #0]
 80040b2:	46bc      	mov	ip, r7
 80040b4:	4460      	add	r0, ip
 80040b6:	5c82      	ldrb	r2, [r0, r2]
 80040b8:	4691      	mov	r9, r2
 80040ba:	464e      	mov	r6, r9
                int bit0_i  = (beta*2) + incval;
 80040bc:	004a      	lsls	r2, r1, #1
 80040be:	4694      	mov	ip, r2
 80040c0:	18d2      	adds	r2, r2, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80040c2:	4075      	eors	r5, r6
 80040c4:	0092      	lsls	r2, r2, #2
 80040c6:	54bd      	strb	r5, [r7, r2]
                int bit1_i  = ((beta+1)*2) + incval;
 80040c8:	9d02      	ldr	r5, [sp, #8]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80040ca:	003e      	movs	r6, r7
                int bit1_i  = ((beta+1)*2) + incval;
 80040cc:	46a9      	mov	r9, r5
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80040ce:	7825      	ldrb	r5, [r4, #0]
                int bit1_i  = ((beta+1)*2) + incval;
 80040d0:	444b      	add	r3, r9
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80040d2:	46a9      	mov	r9, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80040d4:	9f08      	ldr	r7, [sp, #32]
 80040d6:	4645      	mov	r5, r8
 80040d8:	46bb      	mov	fp, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80040da:	464f      	mov	r7, r9
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80040dc:	46b1      	mov	r9, r6
 80040de:	445d      	add	r5, fp
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80040e0:	009b      	lsls	r3, r3, #2
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80040e2:	786d      	ldrb	r5, [r5, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80040e4:	54f7      	strb	r7, [r6, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 80040e6:	5d40      	ldrb	r0, [r0, r5]
 80040e8:	7865      	ldrb	r5, [r4, #1]
 80040ea:	444a      	add	r2, r9
 80040ec:	4068      	eors	r0, r5
 80040ee:	7050      	strb	r0, [r2, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 80040f0:	7862      	ldrb	r2, [r4, #1]
 80040f2:	444b      	add	r3, r9
 80040f4:	705a      	strb	r2, [r3, #1]
                if (beta == next_pt) {
 80040f6:	4551      	cmp	r1, sl
 80040f8:	d00d      	beq.n	8004116 <hsc_decode_blockllr+0xe0e>
 80040fa:	9b02      	ldr	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80040fc:	3102      	adds	r1, #2
 80040fe:	3304      	adds	r3, #4
 8004100:	9302      	str	r3, [sp, #8]
 8004102:	9b05      	ldr	r3, [sp, #20]
 8004104:	3408      	adds	r4, #8
 8004106:	428b      	cmp	r3, r1
 8004108:	dcc8      	bgt.n	800409c <hsc_decode_blockllr+0xd94>
 800410a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800410c:	4647      	mov	r7, r8
 800410e:	469b      	mov	fp, r3
 8004110:	9b08      	ldr	r3, [sp, #32]
 8004112:	469c      	mov	ip, r3
 8004114:	e4b5      	b.n	8003a82 <hsc_decode_blockllr+0x77a>
                    next_pt = (next_pt << 1) + 2;
 8004116:	2302      	movs	r3, #2
 8004118:	4463      	add	r3, ip
 800411a:	469a      	mov	sl, r3
                    lmd0++;
 800411c:	9b07      	ldr	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800411e:	3102      	adds	r1, #2
                    lmd0++;
 8004120:	3301      	adds	r3, #1
 8004122:	9307      	str	r3, [sp, #28]
 8004124:	9b02      	ldr	r3, [sp, #8]
 8004126:	3408      	adds	r4, #8
 8004128:	3304      	adds	r3, #4
 800412a:	9302      	str	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800412c:	9b05      	ldr	r3, [sp, #20]
 800412e:	428b      	cmp	r3, r1
 8004130:	dc00      	bgt.n	8004134 <hsc_decode_blockllr+0xe2c>
 8004132:	e0da      	b.n	80042ea <hsc_decode_blockllr+0xfe2>
 8004134:	9b07      	ldr	r3, [sp, #28]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	9308      	str	r3, [sp, #32]
 800413a:	e7af      	b.n	800409c <hsc_decode_blockllr+0xd94>
 800413c:	080099a4 	.word	0x080099a4
 8004140:	20000970 	.word	0x20000970
 8004144:	2000057c 	.word	0x2000057c
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004148:	9b02      	ldr	r3, [sp, #8]
 800414a:	5d5b      	ldrb	r3, [r3, r5]
    if (bit_layer) {
 800414c:	5cc3      	ldrb	r3, [r0, r3]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d000      	beq.n	8004154 <hsc_decode_blockllr+0xe4c>
        llr_layer_a = -llr_layer_a;
 8004152:	4276      	negs	r6, r6
				for (int l=0; l<num_paths; l++) {
 8004154:	465b      	mov	r3, fp
    return (llr_layer_b + llr_layer_a);
 8004156:	19a4      	adds	r4, r4, r6
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 8004158:	600c      	str	r4, [r1, #0]
				for (int l=0; l<num_paths; l++) {
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <hsc_decode_blockllr+0xe5a>
 800415e:	f7ff f98f 	bl	8003480 <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004162:	9b02      	ldr	r3, [sp, #8]
 8004164:	4666      	mov	r6, ip
 8004166:	195b      	adds	r3, r3, r5
 8004168:	7f5c      	ldrb	r4, [r3, #29]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800416a:	785b      	ldrb	r3, [r3, #1]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800416c:	00b6      	lsls	r6, r6, #2
    if (bit_layer) {
 800416e:	5cc3      	ldrb	r3, [r0, r3]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004170:	9616      	str	r6, [sp, #88]	; 0x58
    if (bit_layer) {
 8004172:	469c      	mov	ip, r3
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004174:	464b      	mov	r3, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004176:	1936      	adds	r6, r6, r4
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004178:	191b      	adds	r3, r3, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800417a:	00b4      	lsls	r4, r6, #2
 800417c:	9e10      	ldr	r6, [sp, #64]	; 0x40
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 800417e:	009b      	lsls	r3, r3, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 8004180:	5934      	ldr	r4, [r6, r4]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 8004182:	58f3      	ldr	r3, [r6, r3]
    if (bit_layer) {
 8004184:	4666      	mov	r6, ip
 8004186:	2e00      	cmp	r6, #0
 8004188:	d000      	beq.n	800418c <hsc_decode_blockllr+0xe84>
        llr_layer_a = -llr_layer_a;
 800418a:	4264      	negs	r4, r4
    return (llr_layer_b + llr_layer_a);
 800418c:	191b      	adds	r3, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 800418e:	604b      	str	r3, [r1, #4]
				for (int l=0; l<num_paths; l++) {
 8004190:	465b      	mov	r3, fp
 8004192:	2b02      	cmp	r3, #2
 8004194:	d101      	bne.n	800419a <hsc_decode_blockllr+0xe92>
 8004196:	f7ff f973 	bl	8003480 <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 800419a:	9b02      	ldr	r3, [sp, #8]
 800419c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800419e:	195b      	adds	r3, r3, r5
 80041a0:	7f9c      	ldrb	r4, [r3, #30]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80041a2:	789b      	ldrb	r3, [r3, #2]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80041a4:	1936      	adds	r6, r6, r4
    if (bit_layer) {
 80041a6:	5cc3      	ldrb	r3, [r0, r3]
 80041a8:	469c      	mov	ip, r3
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80041aa:	464b      	mov	r3, r9
 80041ac:	191b      	adds	r3, r3, r4
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80041ae:	00b4      	lsls	r4, r6, #2
 80041b0:	9e10      	ldr	r6, [sp, #64]	; 0x40
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80041b2:	009b      	lsls	r3, r3, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80041b4:	5934      	ldr	r4, [r6, r4]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80041b6:	58f3      	ldr	r3, [r6, r3]
    if (bit_layer) {
 80041b8:	4666      	mov	r6, ip
 80041ba:	2e00      	cmp	r6, #0
 80041bc:	d000      	beq.n	80041c0 <hsc_decode_blockllr+0xeb8>
        llr_layer_a = -llr_layer_a;
 80041be:	4264      	negs	r4, r4
    return (llr_layer_b + llr_layer_a);
 80041c0:	191b      	adds	r3, r3, r4
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80041c2:	608b      	str	r3, [r1, #8]
				for (int l=0; l<num_paths; l++) {
 80041c4:	465b      	mov	r3, fp
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d101      	bne.n	80041ce <hsc_decode_blockllr+0xec6>
 80041ca:	f7ff f959 	bl	8003480 <hsc_decode_blockllr+0x178>
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80041ce:	9b02      	ldr	r3, [sp, #8]
 80041d0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80041d2:	469c      	mov	ip, r3
 80041d4:	4465      	add	r5, ip
 80041d6:	7feb      	ldrb	r3, [r5, #31]
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80041d8:	78ec      	ldrb	r4, [r5, #3]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80041da:	9d16      	ldr	r5, [sp, #88]	; 0x58
    if (bit_layer) {
 80041dc:	5d04      	ldrb	r4, [r0, r4]
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80041de:	18ed      	adds	r5, r5, r3
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80041e0:	444b      	add	r3, r9
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80041e2:	00ad      	lsls	r5, r5, #2
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80041e4:	009b      	lsls	r3, r3, #2
					llr_t llr0  = LLR(h)[beta_x2][PRILLR(h)[lmd0][l]];
 80041e6:	5970      	ldr	r0, [r6, r5]
					llr_t llr1  = LLR(h)[beta_x2+1][PRILLR(h)[lmd0][l]];
 80041e8:	58f3      	ldr	r3, [r6, r3]
    if (bit_layer) {
 80041ea:	2c00      	cmp	r4, #0
 80041ec:	d000      	beq.n	80041f0 <hsc_decode_blockllr+0xee8>
        llr_layer_a = -llr_layer_a;
 80041ee:	4240      	negs	r0, r0
    return (llr_layer_b + llr_layer_a);
 80041f0:	181b      	adds	r3, r3, r0
						LLR(h)[beta][l] = g_fn(bit[PRIBIT(h)[lmd0][l]], llr0, llr1);
 80041f2:	60cb      	str	r3, [r1, #12]
 80041f4:	f7ff f944 	bl	8003480 <hsc_decode_blockllr+0x178>
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80041f8:	3303      	adds	r3, #3
 80041fa:	469a      	mov	sl, r3
            next_pt         = 2;
 80041fc:	3b04      	subs	r3, #4
 80041fe:	9308      	str	r3, [sp, #32]
            lmd0            = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	9307      	str	r3, [sp, #28]
 8004204:	469c      	mov	ip, r3
 8004206:	465b      	mov	r3, fp
 8004208:	9309      	str	r3, [sp, #36]	; 0x24
 800420a:	4653      	mov	r3, sl
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800420c:	2402      	movs	r4, #2
 800420e:	46b9      	mov	r9, r7
 8004210:	494d      	ldr	r1, [pc, #308]	; (8004348 <hsc_decode_blockllr+0x1040>)
 8004212:	9302      	str	r3, [sp, #8]
                int incval  = (beta < beta_laststage);
 8004214:	9a04      	ldr	r2, [sp, #16]
 8004216:	2301      	movs	r3, #1
 8004218:	42a2      	cmp	r2, r4
 800421a:	dc00      	bgt.n	800421e <hsc_decode_blockllr+0xf16>
 800421c:	2300      	movs	r3, #0
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800421e:	9f03      	ldr	r7, [sp, #12]
 8004220:	4665      	mov	r5, ip
 8004222:	464a      	mov	r2, r9
 8004224:	46b8      	mov	r8, r7
 8004226:	5d52      	ldrb	r2, [r2, r5]
 8004228:	00a0      	lsls	r0, r4, #2
 800422a:	4440      	add	r0, r8
 800422c:	5c85      	ldrb	r5, [r0, r2]
 800422e:	780e      	ldrb	r6, [r1, #0]
                int bit0_i  = (beta*2) + incval;
 8004230:	0062      	lsls	r2, r4, #1
 8004232:	4690      	mov	r8, r2
 8004234:	18d2      	adds	r2, r2, r3
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004236:	4075      	eors	r5, r6
 8004238:	0092      	lsls	r2, r2, #2
 800423a:	464e      	mov	r6, r9
 800423c:	54bd      	strb	r5, [r7, r2]
                int bit1_i  = ((beta+1)*2) + incval;
 800423e:	9d02      	ldr	r5, [sp, #8]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004240:	4466      	add	r6, ip
                int bit1_i  = ((beta+1)*2) + incval;
 8004242:	46aa      	mov	sl, r5
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004244:	7877      	ldrb	r7, [r6, #1]
                int bit1_i  = ((beta+1)*2) + incval;
 8004246:	4453      	add	r3, sl
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004248:	46ba      	mov	sl, r7
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800424a:	780d      	ldrb	r5, [r1, #0]
 800424c:	9f03      	ldr	r7, [sp, #12]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	54fd      	strb	r5, [r7, r3]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 8004252:	784f      	ldrb	r7, [r1, #1]
 8004254:	4655      	mov	r5, sl
 8004256:	46ba      	mov	sl, r7
 8004258:	9f03      	ldr	r7, [sp, #12]
 800425a:	5d45      	ldrb	r5, [r0, r5]
 800425c:	46bb      	mov	fp, r7
 800425e:	4657      	mov	r7, sl
 8004260:	445a      	add	r2, fp
 8004262:	407d      	eors	r5, r7
 8004264:	7055      	strb	r5, [r2, #1]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004266:	784d      	ldrb	r5, [r1, #1]
 8004268:	445b      	add	r3, fp
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800426a:	78b6      	ldrb	r6, [r6, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 800426c:	705d      	strb	r5, [r3, #1]
                    BITMEM(h)[bit0_i][l] = BITMEM(h)[beta+1][l] ^ BITMEM(h)[beta][PRIBIT(h)[lmd0][l]];
 800426e:	5d80      	ldrb	r0, [r0, r6]
 8004270:	788d      	ldrb	r5, [r1, #2]
 8004272:	4068      	eors	r0, r5
 8004274:	7090      	strb	r0, [r2, #2]
                    BITMEM(h)[bit1_i][l] = BITMEM(h)[beta+1][l];
 8004276:	788a      	ldrb	r2, [r1, #2]
 8004278:	709a      	strb	r2, [r3, #2]
                if (beta == next_pt) {
 800427a:	9b08      	ldr	r3, [sp, #32]
 800427c:	429c      	cmp	r4, r3
 800427e:	d009      	beq.n	8004294 <hsc_decode_blockllr+0xf8c>
 8004280:	9b02      	ldr	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 8004282:	3402      	adds	r4, #2
 8004284:	3304      	adds	r3, #4
 8004286:	9302      	str	r3, [sp, #8]
 8004288:	9b05      	ldr	r3, [sp, #20]
 800428a:	3108      	adds	r1, #8
 800428c:	42a3      	cmp	r3, r4
 800428e:	dcc1      	bgt.n	8004214 <hsc_decode_blockllr+0xf0c>
 8004290:	f7ff fbf4 	bl	8003a7c <hsc_decode_blockllr+0x774>
                    next_pt = (next_pt << 1) + 2;
 8004294:	4643      	mov	r3, r8
 8004296:	3302      	adds	r3, #2
 8004298:	9308      	str	r3, [sp, #32]
                    lmd0++;
 800429a:	9b07      	ldr	r3, [sp, #28]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 800429c:	3402      	adds	r4, #2
                    lmd0++;
 800429e:	3301      	adds	r3, #1
 80042a0:	9307      	str	r3, [sp, #28]
 80042a2:	9b02      	ldr	r3, [sp, #8]
 80042a4:	3108      	adds	r1, #8
 80042a6:	3304      	adds	r3, #4
 80042a8:	9302      	str	r3, [sp, #8]
            for (int beta=2; beta<(beta_laststage*2); beta+=2) {
 80042aa:	9b05      	ldr	r3, [sp, #20]
 80042ac:	429c      	cmp	r4, r3
 80042ae:	db00      	blt.n	80042b2 <hsc_decode_blockllr+0xfaa>
 80042b0:	e692      	b.n	8003fd8 <hsc_decode_blockllr+0xcd0>
 80042b2:	9b07      	ldr	r3, [sp, #28]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	469c      	mov	ip, r3
 80042b8:	e7ac      	b.n	8004214 <hsc_decode_blockllr+0xf0c>
 80042ba:	9b02      	ldr	r3, [sp, #8]
 80042bc:	085a      	lsrs	r2, r3, #1
    for (i=0, p_i=(num_paths-1); i<num_paths; i++) {
 80042be:	2303      	movs	r3, #3
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	469b      	mov	fp, r3
 80042c4:	e4a7      	b.n	8003c16 <hsc_decode_blockllr+0x90e>
        output = (a_inv < llr_layer_b) ? llr_layer_b : a_inv;
 80042c6:	0026      	movs	r6, r4
 80042c8:	429c      	cmp	r4, r3
 80042ca:	db00      	blt.n	80042ce <hsc_decode_blockllr+0xfc6>
 80042cc:	e608      	b.n	8003ee0 <hsc_decode_blockllr+0xbd8>
 80042ce:	001e      	movs	r6, r3
 80042d0:	e606      	b.n	8003ee0 <hsc_decode_blockllr+0xbd8>
 80042d2:	9b07      	ldr	r3, [sp, #28]
 80042d4:	4657      	mov	r7, sl
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	469c      	mov	ip, r3
 80042da:	f7ff fbd2 	bl	8003a82 <hsc_decode_blockllr+0x77a>
 80042de:	0018      	movs	r0, r3
 80042e0:	42a3      	cmp	r3, r4
 80042e2:	db00      	blt.n	80042e6 <hsc_decode_blockllr+0xfde>
 80042e4:	e616      	b.n	8003f14 <hsc_decode_blockllr+0xc0c>
 80042e6:	0020      	movs	r0, r4
 80042e8:	e614      	b.n	8003f14 <hsc_decode_blockllr+0xc0c>
 80042ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ec:	4647      	mov	r7, r8
 80042ee:	469b      	mov	fp, r3
 80042f0:	9b07      	ldr	r3, [sp, #28]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	469c      	mov	ip, r3
 80042f6:	f7ff fbc4 	bl	8003a82 <hsc_decode_blockllr+0x77a>
 80042fa:	0003      	movs	r3, r0
 80042fc:	42a0      	cmp	r0, r4
 80042fe:	db00      	blt.n	8004302 <hsc_decode_blockllr+0xffa>
 8004300:	e620      	b.n	8003f44 <hsc_decode_blockllr+0xc3c>
 8004302:	0023      	movs	r3, r4
 8004304:	e61e      	b.n	8003f44 <hsc_decode_blockllr+0xc3c>
 8004306:	0003      	movs	r3, r0
 8004308:	42a0      	cmp	r0, r4
 800430a:	db01      	blt.n	8004310 <hsc_decode_blockllr+0x1008>
 800430c:	f7ff f8b7 	bl	800347e <hsc_decode_blockllr+0x176>
 8004310:	0023      	movs	r3, r4
 8004312:	f7ff f8b4 	bl	800347e <hsc_decode_blockllr+0x176>
        for (i=0, phi=0; phi<h->infobits; i++) {
 8004316:	225f      	movs	r2, #95	; 0x5f
 8004318:	4690      	mov	r8, r2
 800431a:	3210      	adds	r2, #16
 800431c:	4694      	mov	ip, r2
 800431e:	3208      	adds	r2, #8
 8004320:	4692      	mov	sl, r2
 8004322:	3204      	adds	r2, #4
 8004324:	4691      	mov	r9, r2
 8004326:	3203      	adds	r2, #3
 8004328:	9213      	str	r2, [sp, #76]	; 0x4c
 800432a:	3201      	adds	r2, #1
 800432c:	277d      	movs	r7, #125	; 0x7d
 800432e:	2100      	movs	r1, #0
 8004330:	9211      	str	r2, [sp, #68]	; 0x44
 8004332:	f7ff fa9a 	bl	800386a <hsc_decode_blockllr+0x562>
 8004336:	001c      	movs	r4, r3
 8004338:	f7ff fb0d 	bl	8003956 <hsc_decode_blockllr+0x64e>
 800433c:	9d00      	ldr	r5, [sp, #0]
 800433e:	f7ff fad1 	bl	80038e4 <hsc_decode_blockllr+0x5dc>
    if (llr_layer_a < llr_layer_b) {
 8004342:	0004      	movs	r4, r0
 8004344:	f7ff fb1c 	bl	8003980 <hsc_decode_blockllr+0x678>
 8004348:	2000057c 	.word	0x2000057c

0800434c <sub_calc_llrindex>:
    else if (index < 0)     index = 0;
    else                    index >>= 8;

#   elif (LLRMODEL == LLRMODEL_NBRSSI)
    index = (int)lora_nrssi - 40;
    if (index < 0)          index = 0;
 800434c:	2328      	movs	r3, #40	; 0x28
 800434e:	425b      	negs	r3, r3
 8004350:	18c8      	adds	r0, r1, r3
 8004352:	d404      	bmi.n	800435e <sub_calc_llrindex+0x12>
    else if (index >= 31)   index = 31;
 8004354:	281e      	cmp	r0, #30
 8004356:	dd00      	ble.n	800435a <sub_calc_llrindex+0xe>
 8004358:	201f      	movs	r0, #31

#   endif

    return (uint8_t)index;
 800435a:	b2c0      	uxtb	r0, r0
}
 800435c:	4770      	bx	lr
    if (index < 0)          index = 0;
 800435e:	2000      	movs	r0, #0
 8004360:	e7fb      	b.n	800435a <sub_calc_llrindex+0xe>
	...

08004364 <sub_scale_llrmag>:
#   if (LLRMODEL == LLRMODEL_SPOTSNR)
    llrmag = llrvsnr[index];
#   elif (LLRMODEL == LLRMODEL_WBRSSI)
    llrmag = (int32_t)llrvebn0_0dB2[index];
#   elif (LLRMODEL == LLRMODEL_NBRSSI)
    llrmag = (int32_t)llrvrssi[index];
 8004364:	0040      	lsls	r0, r0, #1
 8004366:	4b03      	ldr	r3, [pc, #12]	; (8004374 <sub_scale_llrmag+0x10>)
 8004368:	5ac0      	ldrh	r0, [r0, r3]
#   endif

    llrmag *= bytesperblock;
 800436a:	4348      	muls	r0, r1
 800436c:	b280      	uxth	r0, r0
    llrmag>>= 3;
 800436e:	08c0      	lsrs	r0, r0, #3
    return llrmag;
}
 8004370:	4770      	bx	lr
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	0800a378 	.word	0x0800a378

08004378 <lorallr_init>:



void lorallr_init(lorallr_t* obj, hscrate_t coderate, lorasf_t lora_sf, uint8_t lora_nrssi, uint8_t lora_wrssi) {
 8004378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800437a:	46c6      	mov	lr, r8
 800437c:	b500      	push	{lr}
 800437e:	0004      	movs	r4, r0
 8004380:	001d      	movs	r5, r3
 8004382:	ab06      	add	r3, sp, #24
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	4698      	mov	r8, r3
    ///@note no input checking
    obj->buffer_bits    = 0;
 8004388:	4b10      	ldr	r3, [pc, #64]	; (80043cc <lorallr_init+0x54>)
 800438a:	2000      	movs	r0, #0
 800438c:	52e0      	strh	r0, [r4, r3]
    obj->bufput         = obj->buf;
 800438e:	3b04      	subs	r3, #4
 8004390:	50e4      	str	r4, [r4, r3]
    obj->llr_offset     = llroffset[lora_sf];
 8004392:	0093      	lsls	r3, r2, #2
 8004394:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <lorallr_init+0x58>)
 8004396:	18d2      	adds	r2, r2, r3
 8004398:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800439a:	4e0e      	ldr	r6, [pc, #56]	; (80043d4 <lorallr_init+0x5c>)
 800439c:	55a3      	strb	r3, [r4, r6]
    obj->bytesperblock  = hsc_bytesperblock(coderate);
 800439e:	0008      	movs	r0, r1
 80043a0:	f7fd fe74 	bl	800208c <hsc_bytesperblock>
 80043a4:	0007      	movs	r7, r0
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <lorallr_init+0x60>)
 80043a8:	54e0      	strb	r0, [r4, r3]

    obj->last_nrssi     = lora_nrssi;
 80043aa:	3301      	adds	r3, #1
 80043ac:	54e5      	strb	r5, [r4, r3]

#   if (LLRMODEL != LLRMODEL_FIXEDVAL)
    obj->last_index     = sub_calc_llrindex(obj->llr_offset, lora_nrssi, lora_wrssi);
 80043ae:	5da0      	ldrb	r0, [r4, r6]
 80043b0:	4642      	mov	r2, r8
 80043b2:	0029      	movs	r1, r5
 80043b4:	f7ff ffca 	bl	800434c <sub_calc_llrindex>
 80043b8:	4b08      	ldr	r3, [pc, #32]	; (80043dc <lorallr_init+0x64>)
 80043ba:	54e0      	strb	r0, [r4, r3]
#   else
    obj->last_index     = 0;
#   endif

    obj->last_llr = sub_scale_llrmag(obj->last_index, obj->bytesperblock);
 80043bc:	0039      	movs	r1, r7
 80043be:	f7ff ffd1 	bl	8004364 <sub_scale_llrmag>
 80043c2:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <lorallr_init+0x68>)
 80043c4:	52e0      	strh	r0, [r4, r3]
}
 80043c6:	bc04      	pop	{r2}
 80043c8:	4690      	mov	r8, r2
 80043ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043cc:	00000404 	.word	0x00000404
 80043d0:	0800a378 	.word	0x0800a378
 80043d4:	00000406 	.word	0x00000406
 80043d8:	00000407 	.word	0x00000407
 80043dc:	00000409 	.word	0x00000409
 80043e0:	0000040a 	.word	0x0000040a

080043e4 <lorallr_pushsample>:

///@note pushsample is not threadsafe when used with popblock (it is threadsafe with getblock, though).
///      Since pushsample is generally used in an ISR, if popblock is not used within the same ISR
///      call (i.e. it's in a thread/task), popblock must be protected with interrupt halting or a
///      mutex (if mutex exists).
void lorallr_pushsample(lorallr_t* obj, uint8_t lora_nrssi, uint8_t lora_wrssi, int16_t new_bits) {
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	0005      	movs	r5, r0
 80043e8:	1e1c      	subs	r4, r3, #0
    uint16_t next_mag;
    uint8_t index;

    /// Exit if no new information, or if too much
    if (new_bits <= 0) {
 80043ea:	dd2f      	ble.n	800444c <lorallr_pushsample+0x68>
        return;
    }
    obj->buffer_bits += new_bits;
 80043ec:	4818      	ldr	r0, [pc, #96]	; (8004450 <lorallr_pushsample+0x6c>)
 80043ee:	5a2b      	ldrh	r3, [r5, r0]
 80043f0:	191b      	adds	r3, r3, r4
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	522b      	strh	r3, [r5, r0]
    if (obj->buffer_bits > 256) {
 80043f6:	2080      	movs	r0, #128	; 0x80
 80043f8:	0040      	lsls	r0, r0, #1
 80043fa:	4283      	cmp	r3, r0
 80043fc:	d826      	bhi.n	800444c <lorallr_pushsample+0x68>
#   if (LLRMODEL == LLRMODEL_FIXEDVAL)
    index = 0;
#   else
    /// The rssi can have sharp deviations (sometimes).  If it's more than 6 dB more or less than last
    /// value, clip it.
    if (lora_nrssi > (obj->last_nrssi + 6)) {
 80043fe:	2381      	movs	r3, #129	; 0x81
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	5ceb      	ldrb	r3, [r5, r3]
 8004404:	1d98      	adds	r0, r3, #6
 8004406:	4281      	cmp	r1, r0
 8004408:	dd12      	ble.n	8004430 <lorallr_pushsample+0x4c>
        lora_nrssi = obj->last_nrssi + 6;
 800440a:	b2c1      	uxtb	r1, r0
    else if (lora_nrssi < (obj->last_nrssi - 6)) {
        lora_nrssi = obj->last_nrssi - 6;
    }

    /// Get the next index value, and average it with the last value.
    index   = sub_calc_llrindex(obj->llr_offset, lora_nrssi, lora_wrssi);
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <lorallr_pushsample+0x70>)
 800440e:	5ce8      	ldrb	r0, [r5, r3]
 8004410:	f7ff ff9c 	bl	800434c <sub_calc_llrindex>
    index   = (obj->last_index + index) >> 1;
 8004414:	4b10      	ldr	r3, [pc, #64]	; (8004458 <lorallr_pushsample+0x74>)
 8004416:	5ceb      	ldrb	r3, [r5, r3]
 8004418:	18c0      	adds	r0, r0, r3
 800441a:	1040      	asrs	r0, r0, #1
 800441c:	b2c0      	uxtb	r0, r0
#   endif

    next_mag = sub_scale_llrmag(index, obj->bytesperblock);
 800441e:	4b0f      	ldr	r3, [pc, #60]	; (800445c <lorallr_pushsample+0x78>)
 8004420:	5ce9      	ldrb	r1, [r5, r3]
 8004422:	f7ff ff9f 	bl	8004364 <sub_scale_llrmag>

    ///@note this last-llr might go away
    obj->last_llr = next_mag;
 8004426:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <lorallr_pushsample+0x7c>)
 8004428:	52e8      	strh	r0, [r5, r3]

    // Variant that just averages across the block
    {   register llr_t* bit = obj->bufput;
 800442a:	3b0a      	subs	r3, #10
 800442c:	58eb      	ldr	r3, [r5, r3]
        register llr_t mag  = next_mag;
        while (--new_bits >= 0) {
 800442e:	e006      	b.n	800443e <lorallr_pushsample+0x5a>
    else if (lora_nrssi < (obj->last_nrssi - 6)) {
 8004430:	1f98      	subs	r0, r3, #6
 8004432:	4281      	cmp	r1, r0
 8004434:	daea      	bge.n	800440c <lorallr_pushsample+0x28>
        lora_nrssi = obj->last_nrssi - 6;
 8004436:	b2c1      	uxtb	r1, r0
 8004438:	e7e8      	b.n	800440c <lorallr_pushsample+0x28>
            *bit++  = mag;
 800443a:	6018      	str	r0, [r3, #0]
 800443c:	3304      	adds	r3, #4
        while (--new_bits >= 0) {
 800443e:	3c01      	subs	r4, #1
 8004440:	b224      	sxth	r4, r4
 8004442:	2c00      	cmp	r4, #0
 8004444:	daf9      	bge.n	800443a <lorallr_pushsample+0x56>
        }
        obj->bufput = bit;
 8004446:	2280      	movs	r2, #128	; 0x80
 8004448:	00d2      	lsls	r2, r2, #3
 800444a:	50ab      	str	r3, [r5, r2]
    }
}
 800444c:	bd70      	pop	{r4, r5, r6, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	00000404 	.word	0x00000404
 8004454:	00000406 	.word	0x00000406
 8004458:	00000409 	.word	0x00000409
 800445c:	00000407 	.word	0x00000407
 8004460:	0000040a 	.word	0x0000040a

08004464 <lorallr_getblock>:


llr_t* lorallr_getblock(lorallr_t* obj, const uint8_t* blockbytes) {
 8004464:	b510      	push	{r4, lr}
//            return NULL;
//        }
//    }

    ///@todo this could be done with multiplication and/or SIMD on Cortex M4
    end     = &blockbytes[16];
 8004466:	000c      	movs	r4, r1
 8004468:	3410      	adds	r4, #16
    bitptr  = obj->buf;
 800446a:	0003      	movs	r3, r0
    while (blockbytes < end) {
 800446c:	e005      	b.n	800447a <lorallr_getblock+0x16>
        if (*blockbytes & 0x80) *bitptr = 0 - *bitptr;
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4252      	negs	r2, r2
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	e007      	b.n	8004486 <lorallr_getblock+0x22>
        if (*blockbytes & 0x04) *bitptr = 0 - *bitptr;
        bitptr++;
        if (*blockbytes & 0x02) *bitptr = 0 - *bitptr;
        bitptr++;
        if (*blockbytes & 0x01) *bitptr = 0 - *bitptr;
        bitptr++;
 8004476:	3320      	adds	r3, #32
        blockbytes++;
 8004478:	3101      	adds	r1, #1
    while (blockbytes < end) {
 800447a:	42a1      	cmp	r1, r4
 800447c:	d22e      	bcs.n	80044dc <lorallr_getblock+0x78>
        if (*blockbytes & 0x80) *bitptr = 0 - *bitptr;
 800447e:	2200      	movs	r2, #0
 8004480:	568a      	ldrsb	r2, [r1, r2]
 8004482:	2a00      	cmp	r2, #0
 8004484:	dbf3      	blt.n	800446e <lorallr_getblock+0xa>
        if (*blockbytes & 0x40) *bitptr = 0 - *bitptr;
 8004486:	780a      	ldrb	r2, [r1, #0]
 8004488:	0652      	lsls	r2, r2, #25
 800448a:	d502      	bpl.n	8004492 <lorallr_getblock+0x2e>
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	4252      	negs	r2, r2
 8004490:	605a      	str	r2, [r3, #4]
        if (*blockbytes & 0x20) *bitptr = 0 - *bitptr;
 8004492:	780a      	ldrb	r2, [r1, #0]
 8004494:	0692      	lsls	r2, r2, #26
 8004496:	d502      	bpl.n	800449e <lorallr_getblock+0x3a>
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	4252      	negs	r2, r2
 800449c:	609a      	str	r2, [r3, #8]
        if (*blockbytes & 0x10) *bitptr = 0 - *bitptr;
 800449e:	780a      	ldrb	r2, [r1, #0]
 80044a0:	06d2      	lsls	r2, r2, #27
 80044a2:	d502      	bpl.n	80044aa <lorallr_getblock+0x46>
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	4252      	negs	r2, r2
 80044a8:	60da      	str	r2, [r3, #12]
        if (*blockbytes & 0x08) *bitptr = 0 - *bitptr;
 80044aa:	780a      	ldrb	r2, [r1, #0]
 80044ac:	0712      	lsls	r2, r2, #28
 80044ae:	d502      	bpl.n	80044b6 <lorallr_getblock+0x52>
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	4252      	negs	r2, r2
 80044b4:	611a      	str	r2, [r3, #16]
        if (*blockbytes & 0x04) *bitptr = 0 - *bitptr;
 80044b6:	780a      	ldrb	r2, [r1, #0]
 80044b8:	0752      	lsls	r2, r2, #29
 80044ba:	d502      	bpl.n	80044c2 <lorallr_getblock+0x5e>
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	4252      	negs	r2, r2
 80044c0:	615a      	str	r2, [r3, #20]
        if (*blockbytes & 0x02) *bitptr = 0 - *bitptr;
 80044c2:	780a      	ldrb	r2, [r1, #0]
 80044c4:	0792      	lsls	r2, r2, #30
 80044c6:	d502      	bpl.n	80044ce <lorallr_getblock+0x6a>
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	4252      	negs	r2, r2
 80044cc:	619a      	str	r2, [r3, #24]
        if (*blockbytes & 0x01) *bitptr = 0 - *bitptr;
 80044ce:	780a      	ldrb	r2, [r1, #0]
 80044d0:	07d2      	lsls	r2, r2, #31
 80044d2:	d5d0      	bpl.n	8004476 <lorallr_getblock+0x12>
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	4252      	negs	r2, r2
 80044d8:	61da      	str	r2, [r3, #28]
 80044da:	e7cc      	b.n	8004476 <lorallr_getblock+0x12>
    }

    return obj->buf;
}
 80044dc:	bd10      	pop	{r4, pc}
	...

080044e0 <lorallr_popblock>:


void lorallr_popblock(lorallr_t* obj) {
 80044e0:	b510      	push	{r4, lr}
 80044e2:	0004      	movs	r4, r0
    ot_int cpy_units;

    cpy_units = ((void*)obj->bufput - (void*)&obj->buf[128]) / 4;
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	58c3      	ldr	r3, [r0, r3]
 80044ea:	2280      	movs	r2, #128	; 0x80
 80044ec:	0092      	lsls	r2, r2, #2
 80044ee:	1881      	adds	r1, r0, r2
 80044f0:	1a5b      	subs	r3, r3, r1
 80044f2:	17d8      	asrs	r0, r3, #31
 80044f4:	3afe      	subs	r2, #254	; 0xfe
 80044f6:	3aff      	subs	r2, #255	; 0xff
 80044f8:	4002      	ands	r2, r0
 80044fa:	18d2      	adds	r2, r2, r3
 80044fc:	1092      	asrs	r2, r2, #2
 80044fe:	b213      	sxth	r3, r2
    if (cpy_units > 0) {
 8004500:	2b00      	cmp	r3, #0
 8004502:	dd0e      	ble.n	8004522 <lorallr_popblock+0x42>
        ot_memcpy_4(obj->buf, &obj->buf[128], cpy_units);
 8004504:	b292      	uxth	r2, r2
 8004506:	0020      	movs	r0, r4
 8004508:	f004 f833 	bl	8008572 <ot_memcpy_4>
        obj->bufput        -= 128;
 800450c:	2280      	movs	r2, #128	; 0x80
 800450e:	00d2      	lsls	r2, r2, #3
 8004510:	58a3      	ldr	r3, [r4, r2]
 8004512:	4904      	ldr	r1, [pc, #16]	; (8004524 <lorallr_popblock+0x44>)
 8004514:	468c      	mov	ip, r1
 8004516:	4463      	add	r3, ip
 8004518:	50a3      	str	r3, [r4, r2]
        obj->buffer_bits   -= 128;
 800451a:	4a03      	ldr	r2, [pc, #12]	; (8004528 <lorallr_popblock+0x48>)
 800451c:	5aa3      	ldrh	r3, [r4, r2]
 800451e:	3b80      	subs	r3, #128	; 0x80
 8004520:	52a3      	strh	r3, [r4, r2]
    }
}
 8004522:	bd10      	pop	{r4, pc}
 8004524:	fffffe00 	.word	0xfffffe00
 8004528:	00000404 	.word	0x00000404

0800452c <bgcrc8_block>:
    0x33, 0x1C, 0x6D, 0x42
};



ot_u8 bgcrc8_block(ot_u8* block_addr) {
 800452c:	b510      	push	{r4, lr}
 800452e:	0002      	movs	r2, r0
    ot_int  cnt = 5;
    ot_u8   reg = 0xFF;
 8004530:	20ff      	movs	r0, #255	; 0xff
    ot_int  cnt = 5;
 8004532:	2305      	movs	r3, #5
    
    while (--cnt >= 0) {
 8004534:	e004      	b.n	8004540 <bgcrc8_block+0x14>
        reg = *block_addr ^ crc8tab[reg];
 8004536:	7811      	ldrb	r1, [r2, #0]
 8004538:	4c04      	ldr	r4, [pc, #16]	; (800454c <bgcrc8_block+0x20>)
 800453a:	5c20      	ldrb	r0, [r4, r0]
 800453c:	4048      	eors	r0, r1
        block_addr++;
 800453e:	3201      	adds	r2, #1
    while (--cnt >= 0) {
 8004540:	3b01      	subs	r3, #1
 8004542:	b21b      	sxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	daf6      	bge.n	8004536 <bgcrc8_block+0xa>
    }
    return reg;
}
 8004548:	bd10      	pop	{r4, pc}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	20000008 	.word	0x20000008

08004550 <bgcrc8_check>:

ot_u8 bgcrc8_check(ot_u8* block_addr) {
 8004550:	b510      	push	{r4, lr}
    return (block_addr[5] ^ bgcrc8_block(block_addr));
 8004552:	7944      	ldrb	r4, [r0, #5]
 8004554:	f7ff ffea 	bl	800452c <bgcrc8_block>
 8004558:	4060      	eors	r0, r4
 800455a:	b2c0      	uxtb	r0, r0
}
 800455c:	bd10      	pop	{r4, pc}

0800455e <bgcrc8_put>:

void bgcrc8_put(ot_u8* block_addr) {
 800455e:	b510      	push	{r4, lr}
 8004560:	0004      	movs	r4, r0
    block_addr[5] = bgcrc8_block(block_addr);
 8004562:	f7ff ffe3 	bl	800452c <bgcrc8_block>
 8004566:	7160      	strb	r0, [r4, #5]
}
 8004568:	bd10      	pop	{r4, pc}
	...

0800456c <otapi_new_telegram>:
#endif
}


///@todo this function is experimental, and it is subject to change
ot_u16 otapi_new_telegram(ot_u32 token, ot_u8 data_id, const ot_u8* data) {
 800456c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800456e:	b083      	sub	sp, #12
 8004570:	0006      	movs	r6, r0
 8004572:	000d      	movs	r5, r1
 8004574:	9201      	str	r2, [sp, #4]
///         +---------+--------+-------+-------+---------+--------+
/// </PRE>
// ========================================================================
/// Set the header if the session is valid.  Also conditionally write the header
/// depending on the address type (a parameter).
    if (session_notempty()) {
 8004576:	f001 fc37 	bl	8005de8 <session_notempty>
 800457a:	2800      	cmp	r0, #0
 800457c:	d102      	bne.n	8004584 <otapi_new_telegram+0x18>
        q_writebyte(&txq, data_id);
        q_writestring(&txq, data, 7);

        return 1;
    }
    return 0;
 800457e:	2000      	movs	r0, #0
}
 8004580:	b003      	add	sp, #12
 8004582:	bdf0      	pop	{r4, r5, r6, r7, pc}
        s_active = session_top();
 8004584:	f001 fbfc 	bl	8005d80 <session_top>
 8004588:	0007      	movs	r7, r0
        dll_set_defaults(s_active);
 800458a:	f000 fde3 	bl	8005154 <dll_set_defaults>
        dll.comm.rx_timeout = 0;
 800458e:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <otapi_new_telegram+0x78>)
 8004590:	2200      	movs	r2, #0
 8004592:	629a      	str	r2, [r3, #40]	; 0x28
        q_empty(&txq);
 8004594:	4c14      	ldr	r4, [pc, #80]	; (80045e8 <otapi_new_telegram+0x7c>)
 8004596:	0020      	movs	r0, r4
 8004598:	f002 fcf2 	bl	8006f80 <q_empty>
        txq.getcursor += 2;         // Bypass unused length and Link CTL bytes
 800459c:	6863      	ldr	r3, [r4, #4]
 800459e:	3302      	adds	r3, #2
 80045a0:	6063      	str	r3, [r4, #4]
        q_writebyte(&txq, 14);      // Dummy Length value (not actually sent)
 80045a2:	210e      	movs	r1, #14
 80045a4:	0020      	movs	r0, r4
 80045a6:	f002 fd01 	bl	8006fac <q_writebyte>
        q_writebyte(&txq, 0);       // Dummy Link-Control (not actually sent)
 80045aa:	2100      	movs	r1, #0
 80045ac:	0020      	movs	r0, r4
 80045ae:	f002 fcfd 	bl	8006fac <q_writebyte>
        q_writebyte(&txq, 0);                           // Dummy TX-EIRP (updated by RF driver)
 80045b2:	2100      	movs	r1, #0
 80045b4:	0020      	movs	r0, r4
 80045b6:	f002 fcf9 	bl	8006fac <q_writebyte>
        q_writebyte(&txq, (s_active->subnet | 0x01));   // This byte is two nibbles: Subnet specifier and Page ID (1)
 80045ba:	7ab9      	ldrb	r1, [r7, #10]
 80045bc:	2301      	movs	r3, #1
 80045be:	4319      	orrs	r1, r3
 80045c0:	0020      	movs	r0, r4
 80045c2:	f002 fcf3 	bl	8006fac <q_writebyte>
        q_writelong(&txq, token);                       // Application Token (32 bits)
 80045c6:	0031      	movs	r1, r6
 80045c8:	0020      	movs	r0, r4
 80045ca:	f002 fd08 	bl	8006fde <q_writelong>
        q_writebyte(&txq, data_id);
 80045ce:	0029      	movs	r1, r5
 80045d0:	0020      	movs	r0, r4
 80045d2:	f002 fceb 	bl	8006fac <q_writebyte>
        q_writestring(&txq, data, 7);
 80045d6:	2207      	movs	r2, #7
 80045d8:	9901      	ldr	r1, [sp, #4]
 80045da:	0020      	movs	r0, r4
 80045dc:	f002 fd45 	bl	800706a <q_writestring>
        return 1;
 80045e0:	2001      	movs	r0, #1
 80045e2:	e7cd      	b.n	8004580 <otapi_new_telegram+0x14>
 80045e4:	20002648 	.word	0x20002648
 80045e8:	20002d68 	.word	0x20002d68

080045ec <otapi_open_request>:



ot_u16 otapi_open_request(addr_type addr, routing_tmpl* routing) {
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	0004      	movs	r4, r0
 80045f0:	000d      	movs	r5, r1
/// Set the header if the session is valid.  Also conditionally write the header
/// depending on the address type (a parameter).  
    if (session_notempty()) {
 80045f2:	f001 fbf9 	bl	8005de8 <session_notempty>
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d101      	bne.n	80045fe <otapi_open_request+0x12>

        // Load the header
        m2np_header(s_active, (ot_u8)addr, M2FI_FRDIALOG);
        return 1;
    }
    return 0;
 80045fa:	2000      	movs	r0, #0
}
 80045fc:	bd70      	pop	{r4, r5, r6, pc}
        s_active = session_top();
 80045fe:	f001 fbbf 	bl	8005d80 <session_top>
 8004602:	0006      	movs	r6, r0
        dll_set_defaults(s_active);
 8004604:	f000 fda6 	bl	8005154 <dll_set_defaults>
        if (addr & M2FI_UCAST) {
 8004608:	07a3      	lsls	r3, r4, #30
 800460a:	d406      	bmi.n	800461a <otapi_open_request+0x2e>
        m2np_header(s_active, (ot_u8)addr, M2FI_FRDIALOG);
 800460c:	2200      	movs	r2, #0
 800460e:	0021      	movs	r1, r4
 8004610:	0030      	movs	r0, r6
 8004612:	f000 ffd3 	bl	80055bc <m2np_header>
        return 1;
 8004616:	2001      	movs	r0, #1
 8004618:	e7f0      	b.n	80045fc <otapi_open_request+0x10>
            ot_memcpy((ot_u8*)&m2np.rt, (ot_u8*)routing, sizeof(routing_tmpl));
 800461a:	221c      	movs	r2, #28
 800461c:	0029      	movs	r1, r5
 800461e:	4802      	ldr	r0, [pc, #8]	; (8004628 <otapi_open_request+0x3c>)
 8004620:	f003 ffa0 	bl	8008564 <ot_memcpy>
 8004624:	e7f2      	b.n	800460c <otapi_open_request+0x20>
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	20002698 	.word	0x20002698

0800462c <otapi_close_request>:


ot_u16 otapi_close_request() {
 800462c:	b510      	push	{r4, lr}
/// Set the footer if the session is valid
    if (session_notempty()) {
 800462e:	f001 fbdb 	bl	8005de8 <session_notempty>
 8004632:	2800      	cmp	r0, #0
 8004634:	d101      	bne.n	800463a <otapi_close_request+0xe>
        m2np_footer( /* session_top() */ );
        return 1;
    }
    return 0;
 8004636:	2000      	movs	r0, #0
}
 8004638:	bd10      	pop	{r4, pc}
        m2np_footer( /* session_top() */ );
 800463a:	f001 f889 	bl	8005750 <m2np_footer>
        return 1;
 800463e:	2001      	movs	r0, #1
 8004640:	e7fa      	b.n	8004638 <otapi_close_request+0xc>
	...

08004644 <otapi_start_dialog>:
//    if (radio.state != RADIO_Idle) {
//    	rm2_kill();
//    }
//#   endif

    if (timeout != 0) {
 8004644:	2800      	cmp	r0, #0
 8004646:	d001      	beq.n	800464c <otapi_start_dialog+0x8>
        dll.comm.tc = TI2CLK(timeout);
 8004648:	4b01      	ldr	r3, [pc, #4]	; (8004650 <otapi_start_dialog+0xc>)
 800464a:	6218      	str	r0, [r3, #32]
//    sys.task_RFA.event = 0;
//    sys_preempt(&sys.task_RFA, 0);
//#   endif
    
    return 1;
}
 800464c:	2001      	movs	r0, #1
 800464e:	4770      	bx	lr
 8004650:	20002648 	.word	0x20002648

08004654 <otapi_put_command_tmpl>:




#ifndef EXTF_otapi_put_command_tmpl
ot_u16 otapi_put_command_tmpl(ot_u8* status, command_tmpl* command) {    
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	0004      	movs	r4, r0
    /// Check Opcodes to make sure this one is supported
    /// @todo base this on app_config.h settings.  Currently this is rudimentary
    ///       and hard-coded.  It just filters out Datastream and non-existing codes
    if (command->opcode > 15) {
 8004658:	784b      	ldrb	r3, [r1, #1]
 800465a:	2b0f      	cmp	r3, #15
 800465c:	d823      	bhi.n	80046a6 <otapi_put_command_tmpl+0x52>
        // command extension, not present at the moment
        *status = 0;
        return 0;
    }
    
    dll.comm.csmaca_params |= command->type & M2_CSMACA_A2P;
 800465e:	2200      	movs	r2, #0
 8004660:	568a      	ldrsb	r2, [r1, r2]
 8004662:	2340      	movs	r3, #64	; 0x40
 8004664:	4013      	ands	r3, r2
 8004666:	4818      	ldr	r0, [pc, #96]	; (80046c8 <otapi_put_command_tmpl+0x74>)
 8004668:	222e      	movs	r2, #46	; 0x2e
 800466a:	5c85      	ldrb	r5, [r0, r2]
 800466c:	432b      	orrs	r3, r5
 800466e:	5483      	strb	r3, [r0, r2]
    m2qp.cmd.code           = command->type | command->opcode;
 8004670:	780b      	ldrb	r3, [r1, #0]
 8004672:	784a      	ldrb	r2, [r1, #1]
 8004674:	4313      	orrs	r3, r2
    m2qp.cmd.code          |= (command->extension != 0) << 7;
 8004676:	b25b      	sxtb	r3, r3
 8004678:	788a      	ldrb	r2, [r1, #2]
 800467a:	2a00      	cmp	r2, #0
 800467c:	d017      	beq.n	80046ae <otapi_put_command_tmpl+0x5a>
 800467e:	2180      	movs	r1, #128	; 0x80
 8004680:	4249      	negs	r1, r1
 8004682:	4319      	orrs	r1, r3
 8004684:	b2c9      	uxtb	r1, r1
 8004686:	4d11      	ldr	r5, [pc, #68]	; (80046cc <otapi_put_command_tmpl+0x78>)
 8004688:	7029      	strb	r1, [r5, #0]
    m2qp.cmd.ext            = command->extension;
 800468a:	706a      	strb	r2, [r5, #1]
    q_writebyte(&txq, m2qp.cmd.code);
 800468c:	4810      	ldr	r0, [pc, #64]	; (80046d0 <otapi_put_command_tmpl+0x7c>)
 800468e:	f002 fc8d 	bl	8006fac <q_writebyte>
    
    if (m2qp.cmd.ext != 0) {
 8004692:	7869      	ldrb	r1, [r5, #1]
 8004694:	2900      	cmp	r1, #0
 8004696:	d10c      	bne.n	80046b2 <otapi_put_command_tmpl+0x5e>
        if (m2qp.cmd.ext & 2) {
            dll.comm.rx_timeout = 0;
        }
    }
    
    *status = 1;
 8004698:	2301      	movs	r3, #1
 800469a:	7023      	strb	r3, [r4, #0]
    return q_length(&txq);
 800469c:	480c      	ldr	r0, [pc, #48]	; (80046d0 <otapi_put_command_tmpl+0x7c>)
 800469e:	f002 fc4d 	bl	8006f3c <q_length>
 80046a2:	b280      	uxth	r0, r0
}
 80046a4:	bd70      	pop	{r4, r5, r6, pc}
        *status = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	7003      	strb	r3, [r0, #0]
        return 0;
 80046aa:	2000      	movs	r0, #0
 80046ac:	e7fa      	b.n	80046a4 <otapi_put_command_tmpl+0x50>
    m2qp.cmd.code          |= (command->extension != 0) << 7;
 80046ae:	2100      	movs	r1, #0
 80046b0:	e7e7      	b.n	8004682 <otapi_put_command_tmpl+0x2e>
        q_writebyte(&txq, m2qp.cmd.ext);
 80046b2:	4807      	ldr	r0, [pc, #28]	; (80046d0 <otapi_put_command_tmpl+0x7c>)
 80046b4:	f002 fc7a 	bl	8006fac <q_writebyte>
        if (m2qp.cmd.ext & 2) {
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <otapi_put_command_tmpl+0x78>)
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	079b      	lsls	r3, r3, #30
 80046be:	d5eb      	bpl.n	8004698 <otapi_put_command_tmpl+0x44>
            dll.comm.rx_timeout = 0;
 80046c0:	4b01      	ldr	r3, [pc, #4]	; (80046c8 <otapi_put_command_tmpl+0x74>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	629a      	str	r2, [r3, #40]	; 0x28
 80046c6:	e7e7      	b.n	8004698 <otapi_put_command_tmpl+0x44>
 80046c8:	20002648 	.word	0x20002648
 80046cc:	20002700 	.word	0x20002700
 80046d0:	20002d68 	.word	0x20002d68

080046d4 <otapi_put_dialog_tmpl>:
#endif


#ifndef EXTF_otapi_put_dialog_tmpl
ot_u16 otapi_put_dialog_tmpl(ot_u8* status, dialog_tmpl* dialog) {
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	0005      	movs	r5, r0
 80046d8:	1e0c      	subs	r4, r1, #0
    if (dialog == NULL) {
 80046da:	d01f      	beq.n	800471c <otapi_put_dialog_tmpl+0x48>
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
        q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
    }
    else {
        // Place dialog with timeout
        dll.comm.rx_timeout = otutils_calc_timeout(dialog->timeout);
 80046dc:	7808      	ldrb	r0, [r1, #0]
 80046de:	f002 fd0a 	bl	80070f6 <otutils_calc_timeout>
 80046e2:	4b19      	ldr	r3, [pc, #100]	; (8004748 <otapi_put_dialog_tmpl+0x74>)
 80046e4:	6298      	str	r0, [r3, #40]	; 0x28
        dialog->timeout    |= (dialog->channels != 0) << 7;     // 0 or 0x80
 80046e6:	2100      	movs	r1, #0
 80046e8:	5661      	ldrsb	r1, [r4, r1]
 80046ea:	7863      	ldrb	r3, [r4, #1]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d029      	beq.n	8004744 <otapi_put_dialog_tmpl+0x70>
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	425b      	negs	r3, r3
 80046f4:	4319      	orrs	r1, r3
 80046f6:	b2c9      	uxtb	r1, r1
 80046f8:	7021      	strb	r1, [r4, #0]
        q_writebyte(&txq, dialog->timeout);
 80046fa:	4814      	ldr	r0, [pc, #80]	; (800474c <otapi_put_dialog_tmpl+0x78>)
 80046fc:	f002 fc56 	bl	8006fac <q_writebyte>
    
        // Write response list
        if (dialog->channels != 0) {
 8004700:	7863      	ldrb	r3, [r4, #1]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d015      	beq.n	8004732 <otapi_put_dialog_tmpl+0x5e>
            dll.comm.rx_channels = dialog->channels;
 8004706:	4a10      	ldr	r2, [pc, #64]	; (8004748 <otapi_put_dialog_tmpl+0x74>)
 8004708:	2131      	movs	r1, #49	; 0x31
 800470a:	5453      	strb	r3, [r2, r1]
            dll.comm.rx_chanlist = dialog->chanlist;
 800470c:	6863      	ldr	r3, [r4, #4]
 800470e:	6393      	str	r3, [r2, #56]	; 0x38
            q_writestring(&txq, dialog->chanlist, dialog->channels);
 8004710:	7862      	ldrb	r2, [r4, #1]
 8004712:	6861      	ldr	r1, [r4, #4]
 8004714:	480d      	ldr	r0, [pc, #52]	; (800474c <otapi_put_dialog_tmpl+0x78>)
 8004716:	f002 fca8 	bl	800706a <q_writestring>
 800471a:	e00a      	b.n	8004732 <otapi_put_dialog_tmpl+0x5e>
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
 800471c:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <otapi_put_dialog_tmpl+0x7c>)
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	079b      	lsls	r3, r3, #30
 8004722:	d40d      	bmi.n	8004740 <otapi_put_dialog_tmpl+0x6c>
 8004724:	210f      	movs	r1, #15
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <otapi_put_dialog_tmpl+0x74>)
 8004728:	6299      	str	r1, [r3, #40]	; 0x28
        q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
 800472a:	b2c9      	uxtb	r1, r1
 800472c:	4807      	ldr	r0, [pc, #28]	; (800474c <otapi_put_dialog_tmpl+0x78>)
 800472e:	f002 fc3d 	bl	8006fac <q_writebyte>
        }
    }

    *status = 1;
 8004732:	2301      	movs	r3, #1
 8004734:	702b      	strb	r3, [r5, #0]
    return q_length(&txq);
 8004736:	4805      	ldr	r0, [pc, #20]	; (800474c <otapi_put_dialog_tmpl+0x78>)
 8004738:	f002 fc00 	bl	8006f3c <q_length>
 800473c:	b280      	uxth	r0, r0
}
 800473e:	bd70      	pop	{r4, r5, r6, pc}
        dll.comm.rx_timeout = (m2qp.cmd.ext & 2) ? 0 : 15;
 8004740:	2100      	movs	r1, #0
 8004742:	e7f0      	b.n	8004726 <otapi_put_dialog_tmpl+0x52>
        dialog->timeout    |= (dialog->channels != 0) << 7;     // 0 or 0x80
 8004744:	2300      	movs	r3, #0
 8004746:	e7d5      	b.n	80046f4 <otapi_put_dialog_tmpl+0x20>
 8004748:	20002648 	.word	0x20002648
 800474c:	20002d68 	.word	0x20002d68
 8004750:	20002700 	.word	0x20002700

08004754 <otapi_put_query_tmpl>:
#endif


#ifndef EXTF_otapi_put_query_tmpl
ot_u16 otapi_put_query_tmpl(ot_u8* status, query_tmpl* query) {
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	0005      	movs	r5, r0
 8004758:	000c      	movs	r4, r1
    /// Test for Anycast and Multicast addressing (query needs one of these)    

    if ((m2qp.cmd.code & M2TT_MASK) > M2TT_REQ_UB) {
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <otapi_put_query_tmpl+0x5c>)
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	2370      	movs	r3, #112	; 0x70
 8004760:	4013      	ands	r3, r2
 8004762:	2b20      	cmp	r3, #32
 8004764:	d803      	bhi.n	800476e <otapi_put_query_tmpl+0x1a>
        q_writestring(&txq, query->value, query->length);
    
        *status = 1;
        return q_length(&txq);
    }
    *status = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	7003      	strb	r3, [r0, #0]
    return 0;
 800476a:	2000      	movs	r0, #0
}
 800476c:	bd70      	pop	{r4, r5, r6, pc}
        q_writebyte(&txq, query->length);
 800476e:	7849      	ldrb	r1, [r1, #1]
 8004770:	4e10      	ldr	r6, [pc, #64]	; (80047b4 <otapi_put_query_tmpl+0x60>)
 8004772:	0030      	movs	r0, r6
 8004774:	f002 fc1a 	bl	8006fac <q_writebyte>
        q_writebyte(&txq, query->code);
 8004778:	7821      	ldrb	r1, [r4, #0]
 800477a:	0030      	movs	r0, r6
 800477c:	f002 fc16 	bl	8006fac <q_writebyte>
        if (query->code & 0x80) {
 8004780:	2300      	movs	r3, #0
 8004782:	56e3      	ldrsb	r3, [r4, r3]
 8004784:	2b00      	cmp	r3, #0
 8004786:	db0c      	blt.n	80047a2 <otapi_put_query_tmpl+0x4e>
        q_writestring(&txq, query->value, query->length);
 8004788:	7862      	ldrb	r2, [r4, #1]
 800478a:	68a1      	ldr	r1, [r4, #8]
 800478c:	4c09      	ldr	r4, [pc, #36]	; (80047b4 <otapi_put_query_tmpl+0x60>)
 800478e:	0020      	movs	r0, r4
 8004790:	f002 fc6b 	bl	800706a <q_writestring>
        *status = 1;
 8004794:	2301      	movs	r3, #1
 8004796:	702b      	strb	r3, [r5, #0]
        return q_length(&txq);
 8004798:	0020      	movs	r0, r4
 800479a:	f002 fbcf 	bl	8006f3c <q_length>
 800479e:	b280      	uxth	r0, r0
 80047a0:	e7e4      	b.n	800476c <otapi_put_query_tmpl+0x18>
            q_writestring(&txq, query->mask, query->length);
 80047a2:	7862      	ldrb	r2, [r4, #1]
 80047a4:	6861      	ldr	r1, [r4, #4]
 80047a6:	4803      	ldr	r0, [pc, #12]	; (80047b4 <otapi_put_query_tmpl+0x60>)
 80047a8:	f002 fc5f 	bl	800706a <q_writestring>
 80047ac:	e7ec      	b.n	8004788 <otapi_put_query_tmpl+0x34>
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	20002700 	.word	0x20002700
 80047b4:	20002d68 	.word	0x20002d68

080047b8 <sub_put_isf_offset>:
}
#endif


#ifndef EXTF_otapi_put_isf_offset
void sub_put_isf_offset(ot_u8 is_series, ot_u16 offset) {
 80047b8:	b510      	push	{r4, lr}
    if (is_series) {
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d104      	bne.n	80047c8 <sub_put_isf_offset+0x10>
        q_writeshort(&txq, offset);
    }
    else {
        q_writebyte(&txq, (ot_u8)offset);
 80047be:	b2c9      	uxtb	r1, r1
 80047c0:	4803      	ldr	r0, [pc, #12]	; (80047d0 <sub_put_isf_offset+0x18>)
 80047c2:	f002 fbf3 	bl	8006fac <q_writebyte>
    }
}
 80047c6:	bd10      	pop	{r4, pc}
        q_writeshort(&txq, offset);
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <sub_put_isf_offset+0x18>)
 80047ca:	f002 fbf4 	bl	8006fb6 <q_writeshort>
 80047ce:	e7fa      	b.n	80047c6 <sub_put_isf_offset+0xe>
 80047d0:	20002d68 	.word	0x20002d68

080047d4 <otapi_put_isf_comp>:
#endif


#ifndef EXTF_otapi_put_isf_comp
ot_u16 otapi_put_isf_comp(ot_u8* status, isfcomp_tmpl* isfcomp) {
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	0006      	movs	r6, r0
 80047d8:	000c      	movs	r4, r1
    q_writebyte(&txq, isfcomp->isf_id);
 80047da:	7849      	ldrb	r1, [r1, #1]
 80047dc:	4d07      	ldr	r5, [pc, #28]	; (80047fc <otapi_put_isf_comp+0x28>)
 80047de:	0028      	movs	r0, r5
 80047e0:	f002 fbe4 	bl	8006fac <q_writebyte>
    sub_put_isf_offset(isfcomp->is_series, isfcomp->offset);
 80047e4:	8861      	ldrh	r1, [r4, #2]
 80047e6:	7820      	ldrb	r0, [r4, #0]
 80047e8:	f7ff ffe6 	bl	80047b8 <sub_put_isf_offset>
    
    *status = 1;
 80047ec:	2301      	movs	r3, #1
 80047ee:	7033      	strb	r3, [r6, #0]
    return q_length(&txq);
 80047f0:	0028      	movs	r0, r5
 80047f2:	f002 fba3 	bl	8006f3c <q_length>
 80047f6:	b280      	uxth	r0, r0
}
 80047f8:	bd70      	pop	{r4, r5, r6, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	20002d68 	.word	0x20002d68

08004800 <otapi_put_isf_call>:
#endif


#ifndef EXTF_otapi_put_isf_call
ot_u16 otapi_put_isf_call(ot_u8* status, isfcall_tmpl* isfcall) {
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	0006      	movs	r6, r0
 8004804:	000c      	movs	r4, r1
    q_writebyte(&txq, isfcall->max_return);
 8004806:	7909      	ldrb	r1, [r1, #4]
 8004808:	4d09      	ldr	r5, [pc, #36]	; (8004830 <otapi_put_isf_call+0x30>)
 800480a:	0028      	movs	r0, r5
 800480c:	f002 fbce 	bl	8006fac <q_writebyte>
    q_writebyte(&txq, isfcall->isf_id);
 8004810:	7861      	ldrb	r1, [r4, #1]
 8004812:	0028      	movs	r0, r5
 8004814:	f002 fbca 	bl	8006fac <q_writebyte>
    sub_put_isf_offset(isfcall->is_series, isfcall->offset);
 8004818:	8861      	ldrh	r1, [r4, #2]
 800481a:	7820      	ldrb	r0, [r4, #0]
 800481c:	f7ff ffcc 	bl	80047b8 <sub_put_isf_offset>
    
    *status = 1;
 8004820:	2301      	movs	r3, #1
 8004822:	7033      	strb	r3, [r6, #0]
    return q_length(&txq);
 8004824:	0028      	movs	r0, r5
 8004826:	f002 fb89 	bl	8006f3c <q_length>
 800482a:	b280      	uxth	r0, r0
}
 800482c:	bd70      	pop	{r4, r5, r6, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	20002d68 	.word	0x20002d68

08004834 <otapi_put_udp_tmpl>:
}
#endif


#ifndef EXTF_otapi_put_udp_tmpl
ot_u16 otapi_put_udp_tmpl(ot_u8* status, udp_tmpl* udp) {
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	0007      	movs	r7, r0
 8004838:	000e      	movs	r6, r1
    ot_u16 space;
    vlFILE* fp = NULL;
    
    space = q_writespace(&txq);
 800483a:	4825      	ldr	r0, [pc, #148]	; (80048d0 <otapi_put_udp_tmpl+0x9c>)
 800483c:	f002 fb88 	bl	8006f50 <q_writespace>
 8004840:	b284      	uxth	r4, r0
    ///      detect boundaries across the packet rather than simply across the
    ///      frame.  It will probably require a network-layer function to 
    ///      determine the overhead when supplied payload length.
#   else
        
        if (udp->data == NULL) {
 8004842:	6873      	ldr	r3, [r6, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00f      	beq.n	8004868 <otapi_put_udp_tmpl+0x34>
    vlFILE* fp = NULL;
 8004848:	2500      	movs	r5, #0
        	///@todo add a user to UDP type for access control
        	fp              = ISF_open(udp->src_port, VL_ACCESS_R, AUTH_GUEST );
        	udp->data_length= (fp != NULL) ? fp->length : 0;
        }
        
        space -= 4;
 800484a:	3c04      	subs	r4, #4
 800484c:	b2a4      	uxth	r4, r4
        if (space < udp->data_length) {
 800484e:	8833      	ldrh	r3, [r6, #0]
 8004850:	42a3      	cmp	r3, r4
 8004852:	d915      	bls.n	8004880 <otapi_put_udp_tmpl+0x4c>
            *status = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	703b      	strb	r3, [r7, #0]
            else {
            	q_writestring(&txq, udp->data, udp->data_length);
            }
        }
        
        vl_close(fp);
 8004858:	0028      	movs	r0, r5
 800485a:	f002 feff 	bl	800765c <vl_close>
#   endif

    return q_length(&txq);
 800485e:	481c      	ldr	r0, [pc, #112]	; (80048d0 <otapi_put_udp_tmpl+0x9c>)
 8004860:	f002 fb6c 	bl	8006f3c <q_length>
 8004864:	b280      	uxth	r0, r0
}
 8004866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	fp              = ISF_open(udp->src_port, VL_ACCESS_R, AUTH_GUEST );
 8004868:	78f0      	ldrb	r0, [r6, #3]
 800486a:	4a1a      	ldr	r2, [pc, #104]	; (80048d4 <otapi_put_udp_tmpl+0xa0>)
 800486c:	2124      	movs	r1, #36	; 0x24
 800486e:	f002 ff3a 	bl	80076e6 <ISF_open>
 8004872:	1e05      	subs	r5, r0, #0
        	udp->data_length= (fp != NULL) ? fp->length : 0;
 8004874:	d002      	beq.n	800487c <otapi_put_udp_tmpl+0x48>
 8004876:	8903      	ldrh	r3, [r0, #8]
 8004878:	8033      	strh	r3, [r6, #0]
 800487a:	e7e6      	b.n	800484a <otapi_put_udp_tmpl+0x16>
 800487c:	2300      	movs	r3, #0
 800487e:	e7fb      	b.n	8004878 <otapi_put_udp_tmpl+0x44>
            *status = 1;
 8004880:	2301      	movs	r3, #1
 8004882:	703b      	strb	r3, [r7, #0]
            q_writebyte(&txq, (ALP_FLAG_MB | ALP_FLAG_ME));
 8004884:	4c12      	ldr	r4, [pc, #72]	; (80048d0 <otapi_put_udp_tmpl+0x9c>)
 8004886:	21c0      	movs	r1, #192	; 0xc0
 8004888:	0020      	movs	r0, r4
 800488a:	f002 fb8f 	bl	8006fac <q_writebyte>
            q_writebyte(&txq, (ot_u8)udp->data_length);
 800488e:	7831      	ldrb	r1, [r6, #0]
 8004890:	0020      	movs	r0, r4
 8004892:	f002 fb8b 	bl	8006fac <q_writebyte>
            q_writebyte(&txq, udp->dst_port);
 8004896:	78b1      	ldrb	r1, [r6, #2]
 8004898:	0020      	movs	r0, r4
 800489a:	f002 fb87 	bl	8006fac <q_writebyte>
            q_writebyte(&txq, udp->src_port);
 800489e:	78f1      	ldrb	r1, [r6, #3]
 80048a0:	0020      	movs	r0, r4
 80048a2:	f002 fb83 	bl	8006fac <q_writebyte>
            if (udp->data == NULL) {
 80048a6:	6871      	ldr	r1, [r6, #4]
 80048a8:	2900      	cmp	r1, #0
 80048aa:	d005      	beq.n	80048b8 <otapi_put_udp_tmpl+0x84>
            	q_writestring(&txq, udp->data, udp->data_length);
 80048ac:	2300      	movs	r3, #0
 80048ae:	5ef2      	ldrsh	r2, [r6, r3]
 80048b0:	4807      	ldr	r0, [pc, #28]	; (80048d0 <otapi_put_udp_tmpl+0x9c>)
 80048b2:	f002 fbda 	bl	800706a <q_writestring>
 80048b6:	e7cf      	b.n	8004858 <otapi_put_udp_tmpl+0x24>
                txq.putcursor += vl_load(fp, udp->data_length, txq.putcursor);
 80048b8:	4c05      	ldr	r4, [pc, #20]	; (80048d0 <otapi_put_udp_tmpl+0x9c>)
 80048ba:	8831      	ldrh	r1, [r6, #0]
 80048bc:	68a2      	ldr	r2, [r4, #8]
 80048be:	0028      	movs	r0, r5
 80048c0:	f002 fe6b 	bl	800759a <vl_load>
 80048c4:	68a3      	ldr	r3, [r4, #8]
 80048c6:	469c      	mov	ip, r3
 80048c8:	4460      	add	r0, ip
 80048ca:	60a0      	str	r0, [r4, #8]
 80048cc:	e7c4      	b.n	8004858 <otapi_put_udp_tmpl+0x24>
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	20002d68 	.word	0x20002d68
 80048d4:	20002738 	.word	0x20002738

080048d8 <dll_response_applet>:

/** Internal DLL applets <BR>
  * ========================================================================<BR>
  */

OT_WEAK void dll_response_applet(m2session* active) {
 80048d8:	b510      	push	{r4, lr}
/// If this is a response transmission of a session with "Listen" active, it
/// means the contention period (Tc) is followed immediately with a subsequent
/// request.  We must not overlap that request with the tail-end of our own
/// response.  Therefore, we subtract from Tc the duration of this response.
    if (active->flags & M2_FLAG_LISTEN) {
 80048da:	230b      	movs	r3, #11
 80048dc:	56c3      	ldrsb	r3, [r0, r3]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	db00      	blt.n	80048e4 <dll_response_applet+0xc>
            sys.task_HSS.cursor     = 0;
            sys.task_HSS.nextevent  = TI2CLK(dll.comm.rx_timeout);
            dll.comm.rx_timeout     = rm2_default_tgd(active->channel);
        }
    }
}
 80048e2:	bd10      	pop	{r4, pc}
        ot_u8 substate = active->netstate & M2_NETSTATE_TMASK;
 80048e4:	79c2      	ldrb	r2, [r0, #7]
 80048e6:	2370      	movs	r3, #112	; 0x70
 80048e8:	4013      	ands	r3, r2
        if (substate == M2_NETSTATE_RESPTX) {
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d00c      	beq.n	8004908 <dll_response_applet+0x30>
        else if (substate == M2_NETSTATE_REQRX) {
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d1f7      	bne.n	80048e2 <dll_response_applet+0xa>
            sys.task_HSS.cursor     = 0;
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <dll_response_applet+0x40>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	735a      	strb	r2, [r3, #13]
            sys.task_HSS.nextevent  = TI2CLK(dll.comm.rx_timeout);
 80048f8:	4c08      	ldr	r4, [pc, #32]	; (800491c <dll_response_applet+0x44>)
 80048fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80048fc:	611a      	str	r2, [r3, #16]
            dll.comm.rx_timeout     = rm2_default_tgd(active->channel);
 80048fe:	7980      	ldrb	r0, [r0, #6]
 8004900:	f7fd f952 	bl	8001ba8 <rm2_default_tgd>
 8004904:	62a0      	str	r0, [r4, #40]	; 0x28
}
 8004906:	e7ec      	b.n	80048e2 <dll_response_applet+0xa>
            dll.comm.tc -= rm2_txpkt_duration(&txq);  //TI2CLK(rm2_txpkt_duration(&txq));
 8004908:	4805      	ldr	r0, [pc, #20]	; (8004920 <dll_response_applet+0x48>)
 800490a:	f7fd f981 	bl	8001c10 <rm2_txpkt_duration>
 800490e:	4b03      	ldr	r3, [pc, #12]	; (800491c <dll_response_applet+0x44>)
 8004910:	6a1a      	ldr	r2, [r3, #32]
 8004912:	1a10      	subs	r0, r2, r0
 8004914:	6218      	str	r0, [r3, #32]
 8004916:	e7e4      	b.n	80048e2 <dll_response_applet+0xa>
 8004918:	20002d90 	.word	0x20002d90
 800491c:	20002648 	.word	0x20002648
 8004920:	20002d68 	.word	0x20002d68

08004924 <sub_csma_scramble>:





void sub_csma_scramble(void) {
 8004924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004926:	b083      	sub	sp, #12
/// Sort of optional: Go through the channel list and scramble the channel
/// entries randomly in order to improve band utilization, as multiple devices
/// will scramble the list differently.
    ot_u8 txchans = dll.comm.tx_channels - 1;
 8004928:	4a1a      	ldr	r2, [pc, #104]	; (8004994 <sub_csma_scramble+0x70>)
 800492a:	2330      	movs	r3, #48	; 0x30
 800492c:	5cd4      	ldrb	r4, [r2, r3]
 800492e:	3c01      	subs	r4, #1
 8004930:	b2e4      	uxtb	r4, r4

    if (txchans) {
 8004932:	2c00      	cmp	r4, #0
 8004934:	d101      	bne.n	800493a <sub_csma_scramble+0x16>

            rot.ushort     &= ~0x0101;   //Shift each byte right 1 bit
            rot.ushort    >>= 1;
        }
    }
}
 8004936:	b003      	add	sp, #12
 8004938:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rot.ushort = rand_prn16();
 800493a:	f003 fe4f 	bl	80085dc <rand_prn16>
 800493e:	1c06      	adds	r6, r0, #0
        for (i=0; i<txchans; i++) {
 8004940:	2200      	movs	r2, #0
 8004942:	e023      	b.n	800498c <sub_csma_scramble+0x68>
            j = i + ((rot.ubyte[0] & 1) != 0);
 8004944:	2301      	movs	r3, #1
 8004946:	0019      	movs	r1, r3
 8004948:	4031      	ands	r1, r6
 800494a:	1889      	adds	r1, r1, r2
 800494c:	b2c9      	uxtb	r1, r1
            k = txchans * ((rot.ubyte[1] & 1) != 0);
 800494e:	0435      	lsls	r5, r6, #16
 8004950:	0e2d      	lsrs	r5, r5, #24
 8004952:	402b      	ands	r3, r5
 8004954:	4363      	muls	r3, r4
 8004956:	b2db      	uxtb	r3, r3
            scratch                 = dll.comm.tx_chanlist[i];
 8004958:	4d0e      	ldr	r5, [pc, #56]	; (8004994 <sub_csma_scramble+0x70>)
 800495a:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800495c:	9701      	str	r7, [sp, #4]
 800495e:	18b8      	adds	r0, r7, r2
 8004960:	7807      	ldrb	r7, [r0, #0]
 8004962:	46bc      	mov	ip, r7
            dll.comm.tx_chanlist[i] = dll.comm.tx_chanlist[k];
 8004964:	9f01      	ldr	r7, [sp, #4]
 8004966:	5cff      	ldrb	r7, [r7, r3]
 8004968:	7007      	strb	r7, [r0, #0]
            dll.comm.tx_chanlist[k] = scratch;
 800496a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800496c:	4667      	mov	r7, ip
 800496e:	54c7      	strb	r7, [r0, r3]
            scratch                 = dll.comm.tx_chanlist[i];
 8004970:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004972:	1883      	adds	r3, r0, r2
 8004974:	781f      	ldrb	r7, [r3, #0]
            dll.comm.tx_chanlist[i] = dll.comm.tx_chanlist[j];
 8004976:	5c40      	ldrb	r0, [r0, r1]
 8004978:	7018      	strb	r0, [r3, #0]
            dll.comm.tx_chanlist[j] = scratch;
 800497a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800497c:	545f      	strb	r7, [r3, r1]
            rot.ushort     &= ~0x0101;   //Shift each byte right 1 bit
 800497e:	4806      	ldr	r0, [pc, #24]	; (8004998 <sub_csma_scramble+0x74>)
 8004980:	4030      	ands	r0, r6
 8004982:	b280      	uxth	r0, r0
            rot.ushort    >>= 1;
 8004984:	0840      	lsrs	r0, r0, #1
 8004986:	1c06      	adds	r6, r0, #0
        for (i=0; i<txchans; i++) {
 8004988:	3201      	adds	r2, #1
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	42a2      	cmp	r2, r4
 800498e:	d3d9      	bcc.n	8004944 <sub_csma_scramble+0x20>
 8004990:	e7d1      	b.n	8004936 <sub_csma_scramble+0x12>
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	20002648 	.word	0x20002648
 8004998:	fffffefe 	.word	0xfffffefe

0800499c <sub_rigd_newslot>:
    }
}



CLK_UNIT sub_rigd_newslot(void) {
 800499c:	b510      	push	{r4, lr}
/// halve tc from previous value and offset a random within that duration
    dll.comm.tc >>= 1;
 800499e:	4a07      	ldr	r2, [pc, #28]	; (80049bc <sub_rigd_newslot+0x20>)
 80049a0:	6a13      	ldr	r3, [r2, #32]
 80049a2:	105b      	asrs	r3, r3, #1
 80049a4:	6213      	str	r3, [r2, #32]
    if (dll.comm.tc == 0)
 80049a6:	d101      	bne.n	80049ac <sub_rigd_newslot+0x10>
        return 0;
 80049a8:	2000      	movs	r0, #0
    
    //return (TI2CLK(rand_prn16()) % (CLK_UNIT)dll.comm.tc);
    return (rand_prn16() % (CLK_UNIT)dll.comm.tc);
}
 80049aa:	bd10      	pop	{r4, pc}
    return (rand_prn16() % (CLK_UNIT)dll.comm.tc);
 80049ac:	f003 fe16 	bl	80085dc <rand_prn16>
 80049b0:	4b02      	ldr	r3, [pc, #8]	; (80049bc <sub_rigd_newslot+0x20>)
 80049b2:	8c19      	ldrh	r1, [r3, #32]
 80049b4:	f7fb fc2e 	bl	8000214 <__aeabi_uidivmod>
 80049b8:	b288      	uxth	r0, r1
 80049ba:	e7f6      	b.n	80049aa <sub_rigd_newslot+0xe>
 80049bc:	20002648 	.word	0x20002648

080049c0 <sub_fcloop>:
CLK_UNIT sub_fcloop(void) {
 80049c0:	b510      	push	{r4, lr}
    if (dll.comm.csmaca_params & 0x20) {    //NO CA
 80049c2:	4a0d      	ldr	r2, [pc, #52]	; (80049f8 <sub_fcloop+0x38>)
 80049c4:	232e      	movs	r3, #46	; 0x2e
 80049c6:	5cd3      	ldrb	r3, [r2, r3]
 80049c8:	069a      	lsls	r2, r3, #26
 80049ca:	d40c      	bmi.n	80049e6 <sub_fcloop+0x26>
    if (dll.comm.csmaca_params & 0x18) {    //RAIND, AIND
 80049cc:	2218      	movs	r2, #24
 80049ce:	421a      	tst	r2, r3
 80049d0:	d10c      	bne.n	80049ec <sub_fcloop+0x2c>
        wait    = (dll.comm.tc - dll.comm.tca);
 80049d2:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <sub_fcloop+0x38>)
 80049d4:	6a18      	ldr	r0, [r3, #32]
 80049d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80049d8:	1b04      	subs	r4, r0, r4
        wait   += sub_rigd_newslot();
 80049da:	f7ff ffdf 	bl	800499c <sub_rigd_newslot>
        return (wait < 0) ? 0 : (CLK_UNIT)wait;
 80049de:	1900      	adds	r0, r0, r4
 80049e0:	d408      	bmi.n	80049f4 <sub_fcloop+0x34>
 80049e2:	b280      	uxth	r0, r0
 80049e4:	e001      	b.n	80049ea <sub_fcloop+0x2a>
        return phymac[0].tg; //TI2CLK(phymac[0].tg);
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <sub_fcloop+0x3c>)
 80049e8:	7858      	ldrb	r0, [r3, #1]
}
 80049ea:	bd10      	pop	{r4, pc}
        return rm2_txpkt_duration(&txq); //TI2CLK(rm2_txpkt_duration(&txq));
 80049ec:	4804      	ldr	r0, [pc, #16]	; (8004a00 <sub_fcloop+0x40>)
 80049ee:	f7fd f90f 	bl	8001c10 <rm2_txpkt_duration>
 80049f2:	e7fa      	b.n	80049ea <sub_fcloop+0x2a>
        return (wait < 0) ? 0 : (CLK_UNIT)wait;
 80049f4:	2000      	movs	r0, #0
 80049f6:	e7f8      	b.n	80049ea <sub_fcloop+0x2a>
 80049f8:	20002648 	.word	0x20002648
 80049fc:	200026c4 	.word	0x200026c4
 8004a00:	20002d68 	.word	0x20002d68

08004a04 <sub_fcinit>:
CLK_UNIT sub_fcinit(void) {
 8004a04:	b570      	push	{r4, r5, r6, lr}
    sub_csma_scramble();
 8004a06:	f7ff ff8d 	bl	8004924 <sub_csma_scramble>
    if (dll.comm.csmaca_params & M2_CSMACA_AIND) {
 8004a0a:	4a0d      	ldr	r2, [pc, #52]	; (8004a40 <sub_fcinit+0x3c>)
 8004a0c:	232e      	movs	r3, #46	; 0x2e
 8004a0e:	5cd3      	ldrb	r3, [r2, r3]
 8004a10:	06da      	lsls	r2, r3, #27
 8004a12:	d412      	bmi.n	8004a3a <sub_fcinit+0x36>
    if (dll.comm.csmaca_params & M2_CSMACA_RAIND) {
 8004a14:	071b      	lsls	r3, r3, #28
 8004a16:	d402      	bmi.n	8004a1e <sub_fcinit+0x1a>
    return sub_rigd_newslot();
 8004a18:	f7ff ffc0 	bl	800499c <sub_rigd_newslot>
 8004a1c:	e00e      	b.n	8004a3c <sub_fcinit+0x38>
        random  = rand_prn16();
 8004a1e:	f003 fddd 	bl	80085dc <rand_prn16>
 8004a22:	0005      	movs	r5, r0
        random %= dll.comm.tc - rm2_txpkt_duration(&txq);
 8004a24:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <sub_fcinit+0x3c>)
 8004a26:	6a1c      	ldr	r4, [r3, #32]
 8004a28:	4806      	ldr	r0, [pc, #24]	; (8004a44 <sub_fcinit+0x40>)
 8004a2a:	f7fd f8f1 	bl	8001c10 <rm2_txpkt_duration>
 8004a2e:	1a21      	subs	r1, r4, r0
 8004a30:	0028      	movs	r0, r5
 8004a32:	f7fb fcd9 	bl	80003e8 <__aeabi_idivmod>
 8004a36:	b288      	uxth	r0, r1
        return random;
 8004a38:	e000      	b.n	8004a3c <sub_fcinit+0x38>
        return 0;
 8004a3a:	2000      	movs	r0, #0
}
 8004a3c:	bd70      	pop	{r4, r5, r6, pc}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	20002648 	.word	0x20002648
 8004a44:	20002d68 	.word	0x20002d68

08004a48 <dll_block_idletasks>:
    sys.task_HSS.event  = 0;
 8004a48:	4b02      	ldr	r3, [pc, #8]	; (8004a54 <dll_block_idletasks+0xc>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	731a      	strb	r2, [r3, #12]
    sys.task_BTS.event  = 0;
 8004a4e:	751a      	strb	r2, [r3, #20]
    sys.task_SSS.event  = 0;
 8004a50:	771a      	strb	r2, [r3, #28]
}
 8004a52:	4770      	bx	lr
 8004a54:	20002d90 	.word	0x20002d90

08004a58 <dll_refresh_rts>:
}
 8004a58:	4770      	bx	lr
	...

08004a5c <dll_idle>:
OT_WEAK void dll_idle(void) {
 8004a5c:	b570      	push	{r4, r5, r6, lr}
	radio_gag();
 8004a5e:	f7fc fd61 	bl	8001524 <radio_gag>
    radio_sleep();
 8004a62:	f7fc fe83 	bl	800176c <radio_sleep>
    sys.task_RFA.event  = 0;
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <dll_idle+0x3c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	711a      	strb	r2, [r3, #4]
    scan_evt_ptr        = (ot_u8*)&scan_events[dll.idle_state<<1];
 8004a6c:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <dll_idle+0x40>)
 8004a6e:	7814      	ldrb	r4, [r2, #0]
 8004a70:	0061      	lsls	r1, r4, #1
 8004a72:	480b      	ldr	r0, [pc, #44]	; (8004aa0 <dll_idle+0x44>)
 8004a74:	1845      	adds	r5, r0, r1
    sys.task_HSS.event  = *scan_evt_ptr;
 8004a76:	5c41      	ldrb	r1, [r0, r1]
 8004a78:	7319      	strb	r1, [r3, #12]
    sys.task_SSS.event  = *(++scan_evt_ptr);
 8004a7a:	7869      	ldrb	r1, [r5, #1]
 8004a7c:	7719      	strb	r1, [r3, #28]
    sys.task_BTS.event  = ((dll.netconf.b_attempts != 0) \
 8004a7e:	7f53      	ldrb	r3, [r2, #29]
    		            && (dll.idle_state != M2_DLLIDLE_OFF));
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <dll_idle+0x30>
 8004a84:	2c00      	cmp	r4, #0
 8004a86:	d105      	bne.n	8004a94 <dll_idle+0x38>
 8004a88:	2200      	movs	r2, #0
 8004a8a:	e000      	b.n	8004a8e <dll_idle+0x32>
 8004a8c:	2200      	movs	r2, #0
    sys.task_BTS.event  = ((dll.netconf.b_attempts != 0) \
 8004a8e:	4b02      	ldr	r3, [pc, #8]	; (8004a98 <dll_idle+0x3c>)
 8004a90:	751a      	strb	r2, [r3, #20]
}
 8004a92:	bd70      	pop	{r4, r5, r6, pc}
    		            && (dll.idle_state != M2_DLLIDLE_OFF));
 8004a94:	2201      	movs	r2, #1
 8004a96:	e7fa      	b.n	8004a8e <dll_idle+0x32>
 8004a98:	20002d90 	.word	0x20002d90
 8004a9c:	20002648 	.word	0x20002648
 8004aa0:	0800a3c8 	.word	0x0800a3c8

08004aa4 <dll_rfevt_brx>:
OT_WEAK void dll_rfevt_brx(ot_int scode, ot_int fcode) {
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=100);
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <dll_rfevt_brx+0x74>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	801a      	strh	r2, [r3, #0]
 8004aae:	3264      	adds	r2, #100	; 0x64
 8004ab0:	805a      	strh	r2, [r3, #2]
    if (fcode != 0) {
 8004ab2:	2900      	cmp	r1, #0
 8004ab4:	d01a      	beq.n	8004aec <dll_rfevt_brx+0x48>
    	__DEBUG_ERRCODE_EVAL(=101);
 8004ab6:	3201      	adds	r2, #1
 8004ab8:	805a      	strh	r2, [r3, #2]
    	if (dll.comm.redundants != 0) {
 8004aba:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <dll_rfevt_brx+0x78>)
 8004abc:	232f      	movs	r3, #47	; 0x2f
 8004abe:	5cd3      	ldrb	r3, [r2, r3]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10f      	bne.n	8004ae4 <dll_rfevt_brx+0x40>
    session_pop();
 8004ac4:	f001 f950 	bl	8005d68 <session_pop>
    dll_idle();
 8004ac8:	f7ff ffc8 	bl	8004a5c <dll_idle>
    DLL_SIG_RFTERMINATE(3, scode);
 8004acc:	0021      	movs	r1, r4
 8004ace:	2003      	movs	r0, #3
 8004ad0:	f7fb fe40 	bl	8000754 <dll_sig_rfterminate>
    sys.task_RFA.event = 0;
 8004ad4:	4812      	ldr	r0, [pc, #72]	; (8004b20 <dll_rfevt_brx+0x7c>)
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	7103      	strb	r3, [r0, #4]
    sys_preempt(&sys.task_RFA, 0);
 8004ada:	3004      	adds	r0, #4
 8004adc:	2100      	movs	r1, #0
 8004ade:	f002 ff25 	bl	800792c <sys_preempt>
}
 8004ae2:	bd10      	pop	{r4, pc}
    		rm2_reenter_rx(&dll_rfevt_brx);   //non-blocking
 8004ae4:	480f      	ldr	r0, [pc, #60]	; (8004b24 <dll_rfevt_brx+0x80>)
 8004ae6:	f7fc febb 	bl	8001860 <rm2_reenter_rx>
    		return;
 8004aea:	e7fa      	b.n	8004ae2 <dll_rfevt_brx+0x3e>
    if (scode < 0) {
 8004aec:	2800      	cmp	r0, #0
 8004aee:	da05      	bge.n	8004afc <dll_rfevt_brx+0x58>
        __DEBUG_ERRCODE_EVAL(=102);
 8004af0:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <dll_rfevt_brx+0x74>)
 8004af2:	2266      	movs	r2, #102	; 0x66
 8004af4:	805a      	strh	r2, [r3, #2]
        scode = RM2_ERR_GENERIC;
 8004af6:	2406      	movs	r4, #6
 8004af8:	4264      	negs	r4, r4
    	goto dll_rfevt_FAILURE;
 8004afa:	e7e3      	b.n	8004ac4 <dll_rfevt_brx+0x20>
    if (rm2_mac_filter()) {
 8004afc:	f000 ff72 	bl	80059e4 <rm2_mac_filter>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d0df      	beq.n	8004ac4 <dll_rfevt_brx+0x20>
        __DEBUG_ERRCODE_EVAL(=103);
 8004b04:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <dll_rfevt_brx+0x74>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	801a      	strh	r2, [r3, #0]
 8004b0a:	3267      	adds	r2, #103	; 0x67
 8004b0c:	805a      	strh	r2, [r3, #2]
        if (network_parse_bf()) {
 8004b0e:	f000 ff55 	bl	80059bc <network_parse_bf>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d1da      	bne.n	8004acc <dll_rfevt_brx+0x28>
    dll_rfevt_FAILURE:
 8004b16:	e7d5      	b.n	8004ac4 <dll_rfevt_brx+0x20>
 8004b18:	20002dd0 	.word	0x20002dd0
 8004b1c:	20002648 	.word	0x20002648
 8004b20:	20002d90 	.word	0x20002d90
 8004b24:	08004aa5 	.word	0x08004aa5

08004b28 <dll_rfevt_frx>:
OT_WEAK void dll_rfevt_frx(ot_int pcode, ot_int fcode) {
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	0005      	movs	r5, r0
 8004b2c:	000c      	movs	r4, r1
    m2session*  active  = session_top();
 8004b2e:	f001 f927 	bl	8005d80 <session_top>
 8004b32:	0006      	movs	r6, r0
    __DEBUG_ERRCODE_EVAL(=110);
 8004b34:	4b39      	ldr	r3, [pc, #228]	; (8004c1c <dll_rfevt_frx+0xf4>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	801a      	strh	r2, [r3, #0]
    if (pcode < 0) {
 8004b3a:	2d00      	cmp	r5, #0
 8004b3c:	db1f      	blt.n	8004b7e <dll_rfevt_frx+0x56>
        __DEBUG_ERRCODE_EVAL(=113);
 8004b3e:	4b37      	ldr	r3, [pc, #220]	; (8004c1c <dll_rfevt_frx+0xf4>)
 8004b40:	2271      	movs	r2, #113	; 0x71
 8004b42:	805a      	strh	r2, [r3, #2]
    	if (fcode != 0) {
 8004b44:	2c00      	cmp	r4, #0
 8004b46:	d03e      	beq.n	8004bc6 <dll_rfevt_frx+0x9e>
    		frx_code = -1;
 8004b48:	2401      	movs	r4, #1
 8004b4a:	4264      	negs	r4, r4
        if (pcode == 0) {
 8004b4c:	2d00      	cmp	r5, #0
 8004b4e:	d14d      	bne.n	8004bec <dll_rfevt_frx+0xc4>
            ot_bool rx_isresp = (active->netstate & M2_NETSTATE_RESP);
 8004b50:	79f2      	ldrb	r2, [r6, #7]
 8004b52:	2310      	movs	r3, #16
 8004b54:	4013      	ands	r3, r2
            if (frx_code == 0) {
 8004b56:	2c00      	cmp	r4, #0
 8004b58:	d104      	bne.n	8004b64 <dll_rfevt_frx+0x3c>
                sys.task_RFA.reserve = 20;  ///@todo Could have quick evaluator here
 8004b5a:	4a31      	ldr	r2, [pc, #196]	; (8004c20 <dll_rfevt_frx+0xf8>)
 8004b5c:	2114      	movs	r1, #20
 8004b5e:	7191      	strb	r1, [r2, #6]
                sys.task_RFA.event   = 1;   ///Process the packet!!!
 8004b60:	3913      	subs	r1, #19
 8004b62:	7111      	strb	r1, [r2, #4]
            if (rx_isresp) {
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <dll_rfevt_frx+0x4a>
                dll.counter     = dll.netconf.hold_limit;
 8004b68:	4a2e      	ldr	r2, [pc, #184]	; (8004c24 <dll_rfevt_frx+0xfc>)
 8004b6a:	8bd1      	ldrh	r1, [r2, #30]
 8004b6c:	8051      	strh	r1, [r2, #2]
                dll.idle_state  = M2_DLLIDLE_HOLD;
 8004b6e:	2102      	movs	r1, #2
 8004b70:	7011      	strb	r1, [r2, #0]
            re_init = (frx_code || rx_isresp);
 8004b72:	2c00      	cmp	r4, #0
 8004b74:	d12e      	bne.n	8004bd4 <dll_rfevt_frx+0xac>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d033      	beq.n	8004be2 <dll_rfevt_frx+0xba>
 8004b7a:	2501      	movs	r5, #1
 8004b7c:	e02b      	b.n	8004bd6 <dll_rfevt_frx+0xae>
        __DEBUG_ERRCODE_EVAL(=111);
 8004b7e:	326f      	adds	r2, #111	; 0x6f
 8004b80:	805a      	strh	r2, [r3, #2]
        sys.task_RFA.event  = 0;
 8004b82:	4b27      	ldr	r3, [pc, #156]	; (8004c20 <dll_rfevt_frx+0xf8>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	711a      	strb	r2, [r3, #4]
        if (dll.comm.redundants) {
 8004b88:	4a26      	ldr	r2, [pc, #152]	; (8004c24 <dll_rfevt_frx+0xfc>)
 8004b8a:	232f      	movs	r3, #47	; 0x2f
 8004b8c:	5cd3      	ldrb	r3, [r2, r3]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d004      	beq.n	8004b9c <dll_rfevt_frx+0x74>
            active->netstate   = (M2_NETSTATE_REQTX | M2_NETSTATE_INIT | M2_NETFLAG_FIRSTRX);
 8004b92:	230a      	movs	r3, #10
 8004b94:	71c3      	strb	r3, [r0, #7]
    ot_bool     re_init = False;
 8004b96:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 8004b98:	2400      	movs	r4, #0
 8004b9a:	e028      	b.n	8004bee <dll_rfevt_frx+0xc6>
        else if (((active->netstate & M2_NETSTATE_TMASK) == M2_NETSTATE_RESPRX) \
 8004b9c:	79c2      	ldrb	r2, [r0, #7]
 8004b9e:	2370      	movs	r3, #112	; 0x70
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b30      	cmp	r3, #48	; 0x30
 8004ba4:	d108      	bne.n	8004bb8 <dll_rfevt_frx+0x90>
               && (active->applet != NULL)) {
 8004ba6:	6803      	ldr	r3, [r0, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <dll_rfevt_frx+0x90>
            active->netstate  &= ~M2_NETSTATE_TMASK;   // Default to Request-TX
 8004bac:	2370      	movs	r3, #112	; 0x70
 8004bae:	439a      	bics	r2, r3
 8004bb0:	71c2      	strb	r2, [r0, #7]
    ot_bool     re_init = False;
 8004bb2:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 8004bb4:	2400      	movs	r4, #0
            active->netstate  &= ~M2_NETSTATE_TMASK;   // Default to Request-TX
 8004bb6:	e01a      	b.n	8004bee <dll_rfevt_frx+0xc6>
            session_pop();
 8004bb8:	f001 f8d6 	bl	8005d68 <session_pop>
            dll_idle();
 8004bbc:	f7ff ff4e 	bl	8004a5c <dll_idle>
    ot_bool     re_init = False;
 8004bc0:	2500      	movs	r5, #0
    ot_int      frx_code= 0;
 8004bc2:	2400      	movs	r4, #0
 8004bc4:	e013      	b.n	8004bee <dll_rfevt_frx+0xc6>
        else if (rm2_mac_filter() == False) {
 8004bc6:	f000 ff0d 	bl	80059e4 <rm2_mac_filter>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d1be      	bne.n	8004b4c <dll_rfevt_frx+0x24>
            frx_code = -4;
 8004bce:	2404      	movs	r4, #4
 8004bd0:	4264      	negs	r4, r4
 8004bd2:	e7bb      	b.n	8004b4c <dll_rfevt_frx+0x24>
            re_init = (frx_code || rx_isresp);
 8004bd4:	2501      	movs	r5, #1
            if (re_init) {
 8004bd6:	2d00      	cmp	r5, #0
 8004bd8:	d005      	beq.n	8004be6 <dll_rfevt_frx+0xbe>
                rm2_reenter_rx(&dll_rfevt_frx);
 8004bda:	4813      	ldr	r0, [pc, #76]	; (8004c28 <dll_rfevt_frx+0x100>)
 8004bdc:	f7fc fe40 	bl	8001860 <rm2_reenter_rx>
 8004be0:	e005      	b.n	8004bee <dll_rfevt_frx+0xc6>
            re_init = (frx_code || rx_isresp);
 8004be2:	2500      	movs	r5, #0
 8004be4:	e7f7      	b.n	8004bd6 <dll_rfevt_frx+0xae>
                radio_sleep();
 8004be6:	f7fc fdc1 	bl	800176c <radio_sleep>
 8004bea:	e000      	b.n	8004bee <dll_rfevt_frx+0xc6>
    ot_bool     re_init = False;
 8004bec:	2500      	movs	r5, #0
    DLL_SIG_RFTERMINATE(3, frx_code);
 8004bee:	0021      	movs	r1, r4
 8004bf0:	2003      	movs	r0, #3
 8004bf2:	f7fb fdaf 	bl	8000754 <dll_sig_rfterminate>
    if (re_init) {
 8004bf6:	2d00      	cmp	r5, #0
 8004bf8:	d102      	bne.n	8004c00 <dll_rfevt_frx+0xd8>
    if (frx_code == 0) {
 8004bfa:	2c00      	cmp	r4, #0
 8004bfc:	d009      	beq.n	8004c12 <dll_rfevt_frx+0xea>
}
 8004bfe:	bd70      	pop	{r4, r5, r6, pc}
        __DEBUG_ERRCODE_EVAL(=114);
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <dll_rfevt_frx+0xf4>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	801a      	strh	r2, [r3, #0]
 8004c06:	3272      	adds	r2, #114	; 0x72
 8004c08:	805a      	strh	r2, [r3, #2]
        DLL_SIG_RFINIT(3);
 8004c0a:	2003      	movs	r0, #3
 8004c0c:	f7fb fd94 	bl	8000738 <dll_sig_rfinit>
 8004c10:	e7f3      	b.n	8004bfa <dll_rfevt_frx+0xd2>
        sys_preempt(&sys.task_RFA, 0);
 8004c12:	2100      	movs	r1, #0
 8004c14:	4805      	ldr	r0, [pc, #20]	; (8004c2c <dll_rfevt_frx+0x104>)
 8004c16:	f002 fe89 	bl	800792c <sys_preempt>
}
 8004c1a:	e7f0      	b.n	8004bfe <dll_rfevt_frx+0xd6>
 8004c1c:	20002dd0 	.word	0x20002dd0
 8004c20:	20002d90 	.word	0x20002d90
 8004c24:	20002648 	.word	0x20002648
 8004c28:	08004b29 	.word	0x08004b29
 8004c2c:	20002d94 	.word	0x20002d94

08004c30 <dll_rfevt_txcsma>:
OT_WEAK void dll_rfevt_txcsma(ot_int pcode, ot_int tcode) {
 8004c30:	b510      	push	{r4, lr}
    __DEBUG_ERRCODE_EVAL(=120);
 8004c32:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <dll_rfevt_txcsma+0x98>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	801a      	strh	r2, [r3, #0]
    if (pcode == 0) {
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d120      	bne.n	8004c7e <dll_rfevt_txcsma+0x4e>
        __DEBUG_ERRCODE_EVAL(=121);
 8004c3c:	3279      	adds	r2, #121	; 0x79
 8004c3e:	805a      	strh	r2, [r3, #2]
        sys.task_RFA.latency    = 0;
 8004c40:	4b22      	ldr	r3, [pc, #136]	; (8004ccc <dll_rfevt_txcsma+0x9c>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	71da      	strb	r2, [r3, #7]
        sys.task_RFA.event      = 5;
 8004c46:	3205      	adds	r2, #5
 8004c48:	711a      	strb	r2, [r3, #4]
        radio.evtdone   = (tcode & 1) ? &dll_rfevt_btx : &dll_rfevt_ftx;
 8004c4a:	b289      	uxth	r1, r1
 8004c4c:	07cb      	lsls	r3, r1, #31
 8004c4e:	d50f      	bpl.n	8004c70 <dll_rfevt_txcsma+0x40>
 8004c50:	4a1f      	ldr	r2, [pc, #124]	; (8004cd0 <dll_rfevt_txcsma+0xa0>)
 8004c52:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <dll_rfevt_txcsma+0xa4>)
 8004c54:	609a      	str	r2, [r3, #8]
        event_ticks     = (tcode & 2) ? dll.counter+20 : (ot_uint)(rm2_txpkt_duration(&txq));
 8004c56:	078b      	lsls	r3, r1, #30
 8004c58:	d50c      	bpl.n	8004c74 <dll_rfevt_txcsma+0x44>
 8004c5a:	4b1f      	ldr	r3, [pc, #124]	; (8004cd8 <dll_rfevt_txcsma+0xa8>)
 8004c5c:	885c      	ldrh	r4, [r3, #2]
 8004c5e:	3414      	adds	r4, #20
 8004c60:	b2a4      	uxth	r4, r4
        radio_idle();
 8004c62:	f7fc fd8b 	bl	800177c <radio_idle>
    sys_preempt(&sys.task_RFA, event_ticks);
 8004c66:	0021      	movs	r1, r4
 8004c68:	481c      	ldr	r0, [pc, #112]	; (8004cdc <dll_rfevt_txcsma+0xac>)
 8004c6a:	f002 fe5f 	bl	800792c <sys_preempt>
}
 8004c6e:	bd10      	pop	{r4, pc}
        radio.evtdone   = (tcode & 1) ? &dll_rfevt_btx : &dll_rfevt_ftx;
 8004c70:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <dll_rfevt_txcsma+0xb0>)
 8004c72:	e7ee      	b.n	8004c52 <dll_rfevt_txcsma+0x22>
        event_ticks     = (tcode & 2) ? dll.counter+20 : (ot_uint)(rm2_txpkt_duration(&txq));
 8004c74:	481b      	ldr	r0, [pc, #108]	; (8004ce4 <dll_rfevt_txcsma+0xb4>)
 8004c76:	f7fc ffcb 	bl	8001c10 <rm2_txpkt_duration>
 8004c7a:	0004      	movs	r4, r0
 8004c7c:	e7f1      	b.n	8004c62 <dll_rfevt_txcsma+0x32>
    else if (pcode > 0) {
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	dd10      	ble.n	8004ca4 <dll_rfevt_txcsma+0x74>
        __DEBUG_ERRCODE_EVAL(=122);
 8004c82:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <dll_rfevt_txcsma+0x98>)
 8004c84:	227a      	movs	r2, #122	; 0x7a
 8004c86:	805a      	strh	r2, [r3, #2]
        nextcsma = (ot_uint)sub_fcloop();
 8004c88:	f7ff fe9a 	bl	80049c0 <sub_fcloop>
 8004c8c:	0004      	movs	r4, r0
        if (nextcsma < 2) 
 8004c8e:	2801      	cmp	r0, #1
 8004c90:	d905      	bls.n	8004c9e <dll_rfevt_txcsma+0x6e>
            radio_sleep();
 8004c92:	f7fc fd6b 	bl	800176c <radio_sleep>
        radio_set_mactimer( nextcsma );
 8004c96:	0020      	movs	r0, r4
 8004c98:	f7fc fae4 	bl	8001264 <radio_set_mactimer>
        return;
 8004c9c:	e7e7      	b.n	8004c6e <dll_rfevt_txcsma+0x3e>
            radio_idle();
 8004c9e:	f7fc fd6d 	bl	800177c <radio_idle>
 8004ca2:	e7f8      	b.n	8004c96 <dll_rfevt_txcsma+0x66>
        __DEBUG_ERRCODE_EVAL(=123);
 8004ca4:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <dll_rfevt_txcsma+0x98>)
 8004ca6:	227b      	movs	r2, #123	; 0x7b
 8004ca8:	805a      	strh	r2, [r3, #2]
        DLL_SIG_RFTERMINATE(sys.task_RFA.event, pcode);
 8004caa:	4c08      	ldr	r4, [pc, #32]	; (8004ccc <dll_rfevt_txcsma+0x9c>)
 8004cac:	7923      	ldrb	r3, [r4, #4]
 8004cae:	0001      	movs	r1, r0
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f7fb fd4f 	bl	8000754 <dll_sig_rfterminate>
        session_pop();
 8004cb6:	f001 f857 	bl	8005d68 <session_pop>
        dll_idle();
 8004cba:	f7ff fecf 	bl	8004a5c <dll_idle>
        sys.task_RFA.event  = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	7123      	strb	r3, [r4, #4]
        event_ticks         = 0;
 8004cc2:	2400      	movs	r4, #0
 8004cc4:	e7cf      	b.n	8004c66 <dll_rfevt_txcsma+0x36>
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	20002dd0 	.word	0x20002dd0
 8004ccc:	20002d90 	.word	0x20002d90
 8004cd0:	080050c9 	.word	0x080050c9
 8004cd4:	200026b8 	.word	0x200026b8
 8004cd8:	20002648 	.word	0x20002648
 8004cdc:	20002d94 	.word	0x20002d94
 8004ce0:	08004ce9 	.word	0x08004ce9
 8004ce4:	20002d68 	.word	0x20002d68

08004ce8 <dll_rfevt_ftx>:
OT_WEAK void dll_rfevt_ftx(ot_int pcode, ot_int scratch) {
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=140);
 8004cec:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <dll_rfevt_ftx+0x88>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	801a      	strh	r2, [r3, #0]
 8004cf2:	328c      	adds	r2, #140	; 0x8c
 8004cf4:	805a      	strh	r2, [r3, #2]
    if (pcode == 1) {
 8004cf6:	2801      	cmp	r0, #1
 8004cf8:	d02d      	beq.n	8004d56 <dll_rfevt_ftx+0x6e>
        __DEBUG_ERRCODE_EVAL(=141);
 8004cfa:	3201      	adds	r2, #1
 8004cfc:	805a      	strh	r2, [r3, #2]
        active = session_top();
 8004cfe:	f001 f83f 	bl	8005d80 <session_top>
        scratch = ((active->netstate & M2_NETSTATE_RESPTX) \
 8004d02:	79c3      	ldrb	r3, [r0, #7]
        		|| (dll.comm.rx_timeout <= 0));
 8004d04:	06db      	lsls	r3, r3, #27
 8004d06:	d407      	bmi.n	8004d18 <dll_rfevt_ftx+0x30>
 8004d08:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <dll_rfevt_ftx+0x8c>)
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	dd01      	ble.n	8004d14 <dll_rfevt_ftx+0x2c>
 8004d10:	2200      	movs	r2, #0
 8004d12:	e002      	b.n	8004d1a <dll_rfevt_ftx+0x32>
 8004d14:	2201      	movs	r2, #1
 8004d16:	e000      	b.n	8004d1a <dll_rfevt_ftx+0x32>
 8004d18:	2201      	movs	r2, #1
        scratch = ((active->netstate & M2_NETSTATE_RESPTX) \
 8004d1a:	b212      	sxth	r2, r2
        dll.comm.redundants--;
 8004d1c:	4d15      	ldr	r5, [pc, #84]	; (8004d74 <dll_rfevt_ftx+0x8c>)
 8004d1e:	212f      	movs	r1, #47	; 0x2f
 8004d20:	5c6b      	ldrb	r3, [r5, r1]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	546b      	strb	r3, [r5, r1]
        if ((dll.comm.redundants != 0) && scratch) {
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <dll_rfevt_ftx+0x48>
 8004d2c:	2a00      	cmp	r2, #0
 8004d2e:	d113      	bne.n	8004d58 <dll_rfevt_ftx+0x70>
        if (scratch || pcode) {
 8004d30:	4322      	orrs	r2, r4
 8004d32:	d118      	bne.n	8004d66 <dll_rfevt_ftx+0x7e>
            active->netstate  &= ~M2_NETSTATE_TMASK;
 8004d34:	79c3      	ldrb	r3, [r0, #7]
 8004d36:	2270      	movs	r2, #112	; 0x70
 8004d38:	4393      	bics	r3, r2
            active->netstate  |= M2_NETSTATE_RESPRX;
 8004d3a:	2230      	movs	r2, #48	; 0x30
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	71c3      	strb	r3, [r0, #7]
        DLL_SIG_RFTERMINATE(sys.task_RFA.event, pcode);
 8004d40:	4d0d      	ldr	r5, [pc, #52]	; (8004d78 <dll_rfevt_ftx+0x90>)
 8004d42:	7928      	ldrb	r0, [r5, #4]
 8004d44:	0021      	movs	r1, r4
 8004d46:	f7fb fd05 	bl	8000754 <dll_sig_rfterminate>
        sys.task_RFA.event = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	712b      	strb	r3, [r5, #4]
        sys_preempt(&sys.task_RFA, 0);
 8004d4e:	1d28      	adds	r0, r5, #4
 8004d50:	2100      	movs	r1, #0
 8004d52:	f002 fdeb 	bl	800792c <sys_preempt>
}
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
            dll.comm.csmaca_params = (M2_CSMACA_NOCSMA | M2_CSMACA_MACCA);
 8004d58:	232e      	movs	r3, #46	; 0x2e
 8004d5a:	310d      	adds	r1, #13
 8004d5c:	54e9      	strb	r1, [r5, r3]
            rm2_resend( (ot_sig2)&dll_rfevt_txcsma );
 8004d5e:	4807      	ldr	r0, [pc, #28]	; (8004d7c <dll_rfevt_ftx+0x94>)
 8004d60:	f7fc fb60 	bl	8001424 <rm2_resend>
            return;
 8004d64:	e7f7      	b.n	8004d56 <dll_rfevt_ftx+0x6e>
            session_pop();
 8004d66:	f000 ffff 	bl	8005d68 <session_pop>
            dll_idle();
 8004d6a:	f7ff fe77 	bl	8004a5c <dll_idle>
 8004d6e:	e7e7      	b.n	8004d40 <dll_rfevt_ftx+0x58>
 8004d70:	20002dd0 	.word	0x20002dd0
 8004d74:	20002648 	.word	0x20002648
 8004d78:	20002d90 	.word	0x20002d90
 8004d7c:	08004c31 	.word	0x08004c31

08004d80 <dll_block>:
	sys.task_RFA.latency = 0;
 8004d80:	4b01      	ldr	r3, [pc, #4]	; (8004d88 <dll_block+0x8>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	71da      	strb	r2, [r3, #7]
}
 8004d86:	4770      	bx	lr
 8004d88:	20002d90 	.word	0x20002d90

08004d8c <dll_unblock>:
	sys.task_RFA.latency = _REQRX_LATENCY;
 8004d8c:	4b01      	ldr	r3, [pc, #4]	; (8004d94 <dll_unblock+0x8>)
 8004d8e:	2228      	movs	r2, #40	; 0x28
 8004d90:	71da      	strb	r2, [r3, #7]
}
 8004d92:	4770      	bx	lr
 8004d94:	20002d90 	.word	0x20002d90

08004d98 <dll_clock>:
OT_WEAK void dll_clock(ot_uint clocks) {
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	0004      	movs	r4, r0
    if (sys.task_RFA.event != 0) {
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <dll_clock+0x34>)
 8004d9e:	791b      	ldrb	r3, [r3, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d004      	beq.n	8004dae <dll_clock+0x16>
    	dll.comm.rx_timeout -= CLK2TI(clocks);
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <dll_clock+0x38>)
 8004da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004da8:	1a14      	subs	r4, r2, r0
 8004daa:	629c      	str	r4, [r3, #40]	; 0x28
}
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
    else if (session_notempty()) {
 8004dae:	f001 f81b 	bl	8005de8 <session_notempty>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d0fa      	beq.n	8004dac <dll_clock+0x14>
        sys.task_RFA.event      = 2;
 8004db6:	4d05      	ldr	r5, [pc, #20]	; (8004dcc <dll_clock+0x34>)
 8004db8:	2302      	movs	r3, #2
 8004dba:	712b      	strb	r3, [r5, #4]
        sys.task_RFA.nextevent  = clocks + TI2CLK(session_getnext());
 8004dbc:	f000 ff3c 	bl	8005c38 <session_getnext>
 8004dc0:	1820      	adds	r0, r4, r0
 8004dc2:	60a8      	str	r0, [r5, #8]
        dll_block_idletasks();
 8004dc4:	f7ff fe40 	bl	8004a48 <dll_block_idletasks>
}
 8004dc8:	e7f0      	b.n	8004dac <dll_clock+0x14>
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	20002d90 	.word	0x20002d90
 8004dd0:	20002648 	.word	0x20002648

08004dd4 <dll_processing>:
void dll_processing(void) {
 8004dd4:	b570      	push	{r4, r5, r6, lr}
    sys.task_RFA.event  = 0;                // Only run processing once
 8004dd6:	2500      	movs	r5, #0
 8004dd8:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <dll_processing+0x54>)
 8004dda:	711d      	strb	r5, [r3, #4]
    active              = session_top();
 8004ddc:	f000 ffd0 	bl	8005d80 <session_top>
 8004de0:	0004      	movs	r4, r0
    active->counter     = 0;
 8004de2:	8085      	strh	r5, [r0, #4]
    proc_score          = network_route_ff(active);
 8004de4:	f000 fcc0 	bl	8005768 <network_route_ff>
    if (proc_score >= 0) {
 8004de8:	2800      	cmp	r0, #0
 8004dea:	db19      	blt.n	8004e20 <dll_processing+0x4c>
        sys.task_HSS.cursor = 0;
 8004dec:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <dll_processing+0x54>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	735a      	strb	r2, [r3, #13]
        dll.counter         = dll.netconf.hold_limit;
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <dll_processing+0x58>)
 8004df4:	8bda      	ldrh	r2, [r3, #30]
 8004df6:	805a      	strh	r2, [r3, #2]
        dll.idle_state      = M2_DLLIDLE_HOLD;
 8004df8:	2202      	movs	r2, #2
 8004dfa:	701a      	strb	r2, [r3, #0]
        if (active->flags & M2_FLAG_LISTEN) {
 8004dfc:	230b      	movs	r3, #11
 8004dfe:	56e3      	ldrsb	r3, [r4, r3]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	db07      	blt.n	8004e14 <dll_processing+0x40>
    if (active->netstate & M2_NETSTATE_SCRAP) {
 8004e04:	79e3      	ldrb	r3, [r4, #7]
 8004e06:	075b      	lsls	r3, r3, #29
 8004e08:	d503      	bpl.n	8004e12 <dll_processing+0x3e>
        session_pop();
 8004e0a:	f000 ffad 	bl	8005d68 <session_pop>
        dll_idle();
 8004e0e:	f7ff fe25 	bl	8004a5c <dll_idle>
}
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
            session_continue(active->applet, M2_NETSTATE_REQRX, 0);
 8004e14:	2200      	movs	r2, #0
 8004e16:	2120      	movs	r1, #32
 8004e18:	6820      	ldr	r0, [r4, #0]
 8004e1a:	f000 ffb7 	bl	8005d8c <session_continue>
 8004e1e:	e7f1      	b.n	8004e04 <dll_processing+0x30>
    else if ((active->netstate & M2_NETSTATE_RESP) == 0) {
 8004e20:	79e3      	ldrb	r3, [r4, #7]
 8004e22:	06db      	lsls	r3, r3, #27
 8004e24:	d5f1      	bpl.n	8004e0a <dll_processing+0x36>
 8004e26:	e7ed      	b.n	8004e04 <dll_processing+0x30>
 8004e28:	20002d90 	.word	0x20002d90
 8004e2c:	20002648 	.word	0x20002648

08004e30 <dll_systask_sleepscan>:
OT_WEAK void dll_systask_sleepscan(ot_task task) {
 8004e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e32:	46c6      	mov	lr, r8
 8004e34:	b500      	push	{lr}
 8004e36:	0004      	movs	r4, r0
    if (task->event == 0) {
 8004e38:	7800      	ldrb	r0, [r0, #0]
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d102      	bne.n	8004e44 <dll_systask_sleepscan+0x14>
}
 8004e3e:	bc04      	pop	{r2}
 8004e40:	4690      	mov	r8, r2
 8004e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fp = ISF_open_su( task->event );
 8004e44:	f002 fc3f 	bl	80076c6 <ISF_open_su>
 8004e48:	0007      	movs	r7, r0
    scratch.ushort  = PLATFORM_ENDIAN16( vl_read(fp, task->cursor) );
 8004e4a:	7861      	ldrb	r1, [r4, #1]
 8004e4c:	f002 fb84 	bl	8007558 <vl_read>
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8004e50:	ba40      	rev16	r0, r0
 8004e52:	b280      	uxth	r0, r0
 8004e54:	0a03      	lsrs	r3, r0, #8
 8004e56:	4698      	mov	r8, r3
    sys_task_setnext(task, (ot_u32)otutils_calc_longtimeout(scratch.ushort));
 8004e58:	f002 f942 	bl	80070e0 <otutils_calc_longtimeout>
 8004e5c:	0001      	movs	r1, r0
 8004e5e:	0020      	movs	r0, r4
 8004e60:	f002 fcf4 	bl	800784c <sys_task_setnext>
    task->cursor   += 2;
 8004e64:	7861      	ldrb	r1, [r4, #1]
 8004e66:	3102      	adds	r1, #2
 8004e68:	b2c9      	uxtb	r1, r1
 8004e6a:	7061      	strb	r1, [r4, #1]
    scratch.ushort  = vl_read(fp, task->cursor);
 8004e6c:	b289      	uxth	r1, r1
 8004e6e:	0038      	movs	r0, r7
 8004e70:	f002 fb72 	bl	8007558 <vl_read>
 8004e74:	b2c6      	uxtb	r6, r0
 8004e76:	0400      	lsls	r0, r0, #16
 8004e78:	0e05      	lsrs	r5, r0, #24
    task->cursor   += 2;
 8004e7a:	7863      	ldrb	r3, [r4, #1]
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	7063      	strb	r3, [r4, #1]
    task->cursor    = (task->cursor >= fp->length) ? 0 : task->cursor;
 8004e82:	b299      	uxth	r1, r3
 8004e84:	893a      	ldrh	r2, [r7, #8]
 8004e86:	4291      	cmp	r1, r2
 8004e88:	d216      	bcs.n	8004eb8 <dll_systask_sleepscan+0x88>
 8004e8a:	7063      	strb	r3, [r4, #1]
    vl_close(fp);
 8004e8c:	0038      	movs	r0, r7
 8004e8e:	f002 fbe5 	bl	800765c <vl_close>
    	s_type          = (s_type >> 1) | (s_code & 0x80);
 8004e92:	237f      	movs	r3, #127	; 0x7f
 8004e94:	002a      	movs	r2, r5
 8004e96:	439a      	bics	r2, r3
 8004e98:	b253      	sxtb	r3, r2
 8004e9a:	4642      	mov	r2, r8
 8004e9c:	0851      	lsrs	r1, r2, #1
 8004e9e:	2240      	movs	r2, #64	; 0x40
 8004ea0:	400a      	ands	r2, r1
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	b2db      	uxtb	r3, r3
    	netstate        = s_type | (M2_NETSTATE_REQRX | M2_NETSTATE_INIT);
 8004ea6:	2228      	movs	r2, #40	; 0x28
 8004ea8:	4313      	orrs	r3, r2
		s_new           = session_new(&dll_scan_applet, 0, s_channel, netstate);
 8004eaa:	0032      	movs	r2, r6
 8004eac:	2100      	movs	r1, #0
 8004eae:	4803      	ldr	r0, [pc, #12]	; (8004ebc <dll_systask_sleepscan+0x8c>)
 8004eb0:	f000 feca 	bl	8005c48 <session_new>
		s_new->extra    = s_code;
 8004eb4:	7205      	strb	r5, [r0, #8]
 8004eb6:	e7c2      	b.n	8004e3e <dll_systask_sleepscan+0xe>
    task->cursor    = (task->cursor >= fp->length) ? 0 : task->cursor;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e7e6      	b.n	8004e8a <dll_systask_sleepscan+0x5a>
 8004ebc:	080051ad 	.word	0x080051ad

08004ec0 <dll_systask_beacon>:
OT_WEAK void dll_systask_beacon(ot_task task) {
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	0004      	movs	r4, r0
    if ((task->event == 0) || (dll.netconf.b_attempts == 0)) {
 8004ec4:	7803      	ldrb	r3, [r0, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d03b      	beq.n	8004f42 <dll_systask_beacon+0x82>
 8004eca:	4b22      	ldr	r3, [pc, #136]	; (8004f54 <dll_systask_beacon+0x94>)
 8004ecc:	7f5b      	ldrb	r3, [r3, #29]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d037      	beq.n	8004f42 <dll_systask_beacon+0x82>
    if (dll.netconf.dd_flags == 0) {
 8004ed2:	4b20      	ldr	r3, [pc, #128]	; (8004f54 <dll_systask_beacon+0x94>)
 8004ed4:	7f1b      	ldrb	r3, [r3, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d11e      	bne.n	8004f18 <dll_systask_beacon+0x58>
        fp = ISF_open_su( ISF_ID(beacon_transmit_sequence) );
 8004eda:	2006      	movs	r0, #6
 8004edc:	f002 fbf3 	bl	80076c6 <ISF_open_su>
 8004ee0:	1e05      	subs	r5, r0, #0
        if (fp == NULL) {
 8004ee2:	d035      	beq.n	8004f50 <dll_systask_beacon+0x90>
        if (fp->length == 0)    {
 8004ee4:	8903      	ldrh	r3, [r0, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d02e      	beq.n	8004f48 <dll_systask_beacon+0x88>
        scratch     = fp->start;
 8004eea:	8846      	ldrh	r6, [r0, #2]
        fp->start  += task->cursor;
 8004eec:	7863      	ldrb	r3, [r4, #1]
 8004eee:	199b      	adds	r3, r3, r6
 8004ef0:	8043      	strh	r3, [r0, #2]
        task->cursor += 8;
 8004ef2:	7863      	ldrb	r3, [r4, #1]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	7063      	strb	r3, [r4, #1]
        if (task->cursor >= fp->length) {
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	8902      	ldrh	r2, [r0, #8]
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d301      	bcc.n	8004f06 <dll_systask_beacon+0x46>
        	task->cursor = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	7063      	strb	r3, [r4, #1]
        vl_load(fp, 8, dll.netconf.btemp);
 8004f06:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <dll_systask_beacon+0x98>)
 8004f08:	2108      	movs	r1, #8
 8004f0a:	0028      	movs	r0, r5
 8004f0c:	f002 fb45 	bl	800759a <vl_load>
        fp->start = scratch;
 8004f10:	806e      	strh	r6, [r5, #2]
        vl_close(fp);
 8004f12:	0028      	movs	r0, r5
 8004f14:	f002 fba2 	bl	800765c <vl_close>
		b_session           = session_new(  &dll_beacon_applet, 0, dll.netconf.btemp[2], b_flags);
 8004f18:	4d0e      	ldr	r5, [pc, #56]	; (8004f54 <dll_systask_beacon+0x94>)
 8004f1a:	7a2a      	ldrb	r2, [r5, #8]
 8004f1c:	230a      	movs	r3, #10
 8004f1e:	2100      	movs	r1, #0
 8004f20:	480e      	ldr	r0, [pc, #56]	; (8004f5c <dll_systask_beacon+0x9c>)
 8004f22:	f000 fe91 	bl	8005c48 <session_new>
		b_session->subnet   = dll.netconf.b_subnet;
 8004f26:	7e6b      	ldrb	r3, [r5, #25]
 8004f28:	7283      	strb	r3, [r0, #10]
		b_session->extra    = dll.netconf.btemp[3];
 8004f2a:	7a6b      	ldrb	r3, [r5, #9]
 8004f2c:	7203      	strb	r3, [r0, #8]
    nextbeacon = otutils_calc_longtimeout( PLATFORM_ENDIAN16(*(ot_u16*)&dll.netconf.btemp[0]) );
 8004f2e:	88e8      	ldrh	r0, [r5, #6]
 8004f30:	ba40      	rev16	r0, r0
 8004f32:	b280      	uxth	r0, r0
 8004f34:	f002 f8d4 	bl	80070e0 <otutils_calc_longtimeout>
 8004f38:	b281      	uxth	r1, r0
    sys_task_setnext(task, (ot_u32)nextbeacon);
 8004f3a:	0020      	movs	r0, r4
 8004f3c:	f002 fc86 	bl	800784c <sys_task_setnext>
 8004f40:	e001      	b.n	8004f46 <dll_systask_beacon+0x86>
        dll_idle();
 8004f42:	f7ff fd8b 	bl	8004a5c <dll_idle>
}
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
            vl_close(fp);
 8004f48:	f002 fb88 	bl	800765c <vl_close>
    nextbeacon = 10;
 8004f4c:	210a      	movs	r1, #10
            goto dll_systask_beacon_END;
 8004f4e:	e7f4      	b.n	8004f3a <dll_systask_beacon+0x7a>
    nextbeacon = 10;
 8004f50:	210a      	movs	r1, #10
 8004f52:	e7f2      	b.n	8004f3a <dll_systask_beacon+0x7a>
 8004f54:	20002648 	.word	0x20002648
 8004f58:	2000264e 	.word	0x2000264e
 8004f5c:	080051d9 	.word	0x080051d9

08004f60 <dll_init_rx>:
OT_WEAK void dll_init_rx(m2session* active) {
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	0004      	movs	r4, r0
    sys.task_RFA.event      = 3;
 8004f64:	4b13      	ldr	r3, [pc, #76]	; (8004fb4 <dll_init_rx+0x54>)
 8004f66:	2203      	movs	r2, #3
 8004f68:	711a      	strb	r2, [r3, #4]
    sys.task_RFA.latency    = (active->netstate & M2_NETSTATE_RESP) ? \
 8004f6a:	79c3      	ldrb	r3, [r0, #7]
 8004f6c:	06db      	lsls	r3, r3, #27
 8004f6e:	d51c      	bpl.n	8004faa <dll_init_rx+0x4a>
 8004f70:	3a01      	subs	r2, #1
 8004f72:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <dll_init_rx+0x54>)
 8004f74:	71da      	strb	r2, [r3, #7]
    min_timeout = rm2_rxtimeout_floor(active->channel);
 8004f76:	79a0      	ldrb	r0, [r4, #6]
 8004f78:	f7fc fe10 	bl	8001b9c <rm2_rxtimeout_floor>
    if (dll.comm.rx_timeout < min_timeout) {
 8004f7c:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <dll_init_rx+0x58>)
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	4283      	cmp	r3, r0
 8004f82:	da01      	bge.n	8004f88 <dll_init_rx+0x28>
        dll.comm.rx_timeout = min_timeout;
 8004f84:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <dll_init_rx+0x58>)
 8004f86:	6298      	str	r0, [r3, #40]	; 0x28
	sys_task_setnext(&sys.task[TASK_radio], (ot_u32)dll.comm.rx_timeout);
 8004f88:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <dll_init_rx+0x58>)
 8004f8a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004f8c:	4d0b      	ldr	r5, [pc, #44]	; (8004fbc <dll_init_rx+0x5c>)
 8004f8e:	0028      	movs	r0, r5
 8004f90:	f002 fc5c 	bl	800784c <sys_task_setnext>
    DLL_SIG_RFINIT(sys.task_RFA.event);
 8004f94:	7828      	ldrb	r0, [r5, #0]
 8004f96:	f7fb fbcf 	bl	8000738 <dll_sig_rfinit>
    callback = (active->netstate & M2_NETFLAG_BG) ? &dll_rfevt_brx : &dll_rfevt_frx;
 8004f9a:	79e1      	ldrb	r1, [r4, #7]
 8004f9c:	064b      	lsls	r3, r1, #25
 8004f9e:	d406      	bmi.n	8004fae <dll_init_rx+0x4e>
 8004fa0:	4a07      	ldr	r2, [pc, #28]	; (8004fc0 <dll_init_rx+0x60>)
    rm2_rxinit(active->channel, active->netstate, callback);
 8004fa2:	79a0      	ldrb	r0, [r4, #6]
 8004fa4:	f7fc fb00 	bl	80015a8 <rm2_rxinit>
}
 8004fa8:	bd70      	pop	{r4, r5, r6, pc}
    sys.task_RFA.latency    = (active->netstate & M2_NETSTATE_RESP) ? \
 8004faa:	2228      	movs	r2, #40	; 0x28
 8004fac:	e7e1      	b.n	8004f72 <dll_init_rx+0x12>
    callback = (active->netstate & M2_NETFLAG_BG) ? &dll_rfevt_brx : &dll_rfevt_frx;
 8004fae:	4a05      	ldr	r2, [pc, #20]	; (8004fc4 <dll_init_rx+0x64>)
 8004fb0:	e7f7      	b.n	8004fa2 <dll_init_rx+0x42>
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	20002d90 	.word	0x20002d90
 8004fb8:	20002648 	.word	0x20002648
 8004fbc:	20002d94 	.word	0x20002d94
 8004fc0:	08004b29 	.word	0x08004b29
 8004fc4:	08004aa5 	.word	0x08004aa5

08004fc8 <dll_init_tx>:
OT_WEAK void dll_init_tx(m2session* active) {
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	0005      	movs	r5, r0
    sys_task_setnext(&sys.task[TASK_radio], (ot_u32)dll.comm.tc);
 8004fcc:	4e0f      	ldr	r6, [pc, #60]	; (800500c <dll_init_tx+0x44>)
 8004fce:	4c10      	ldr	r4, [pc, #64]	; (8005010 <dll_init_tx+0x48>)
 8004fd0:	6a31      	ldr	r1, [r6, #32]
 8004fd2:	0020      	movs	r0, r4
 8004fd4:	f002 fc3a 	bl	800784c <sys_task_setnext>
    dll.comm.tca            = sub_fcinit();
 8004fd8:	f7ff fd14 	bl	8004a04 <sub_fcinit>
 8004fdc:	6270      	str	r0, [r6, #36]	; 0x24
    sys.task_RFA.latency    = 1;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	70e3      	strb	r3, [r4, #3]
    sys.task_RFA.event      = 4;
 8004fe2:	3303      	adds	r3, #3
 8004fe4:	7023      	strb	r3, [r4, #0]
    DLL_SIG_RFINIT(sys.task_RFA.event);
 8004fe6:	2004      	movs	r0, #4
 8004fe8:	f7fb fba6 	bl	8000738 <dll_sig_rfinit>
    if (active->netstate & M2_NETFLAG_BG) {
 8004fec:	79eb      	ldrb	r3, [r5, #7]
 8004fee:	065a      	lsls	r2, r3, #25
 8004ff0:	d502      	bpl.n	8004ff8 <dll_init_tx+0x30>
    	if (active->netstate & M2_NETFLAG_STREAM) {
 8004ff2:	b25b      	sxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	db04      	blt.n	8005002 <dll_init_tx+0x3a>
    rm2_txinit(active->netstate, &dll_rfevt_txcsma);
 8004ff8:	79e8      	ldrb	r0, [r5, #7]
 8004ffa:	4906      	ldr	r1, [pc, #24]	; (8005014 <dll_init_tx+0x4c>)
 8004ffc:	f7fc f9ec 	bl	80013d8 <rm2_txinit>
}
 8005000:	bd70      	pop	{r4, r5, r6, pc}
    		m2advp_open(session_follower());
 8005002:	f000 ff0d 	bl	8005e20 <session_follower>
 8005006:	f000 fc75 	bl	80058f4 <m2advp_open>
 800500a:	e7f5      	b.n	8004ff8 <dll_init_tx+0x30>
 800500c:	20002648 	.word	0x20002648
 8005010:	20002d94 	.word	0x20002d94
 8005014:	08004c31 	.word	0x08004c31

08005018 <dll_activate>:
OT_WEAK void dll_activate(void) {
 8005018:	b510      	push	{r4, lr}
    s_active            = session_top();
 800501a:	f000 feb1 	bl	8005d80 <session_top>
 800501e:	0004      	movs	r4, r0
    s_applet            = (s_active->applet == NULL) ? \
 8005020:	6803      	ldr	r3, [r0, #0]
                            &dll_response_applet : s_active->applet;
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00c      	beq.n	8005040 <dll_activate+0x28>
    s_active->applet    = NULL;
 8005026:	2200      	movs	r2, #0
 8005028:	6022      	str	r2, [r4, #0]
    s_applet(s_active);
 800502a:	0020      	movs	r0, r4
 800502c:	4798      	blx	r3
    if (s_active->netstate & M2_NETSTATE_SCRAP) {
 800502e:	79e3      	ldrb	r3, [r4, #7]
 8005030:	075a      	lsls	r2, r3, #29
 8005032:	d407      	bmi.n	8005044 <dll_activate+0x2c>
    else if (s_active->netstate & M2_NETSTATE_RX) {
 8005034:	069b      	lsls	r3, r3, #26
 8005036:	d40a      	bmi.n	800504e <dll_activate+0x36>
        dll_init_tx(s_active);
 8005038:	0020      	movs	r0, r4
 800503a:	f7ff ffc5 	bl	8004fc8 <dll_init_tx>
}
 800503e:	bd10      	pop	{r4, pc}
                            &dll_response_applet : s_active->applet;
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <dll_activate+0x40>)
 8005042:	e7f0      	b.n	8005026 <dll_activate+0xe>
        session_pop();
 8005044:	f000 fe90 	bl	8005d68 <session_pop>
        dll_idle();
 8005048:	f7ff fd08 	bl	8004a5c <dll_idle>
 800504c:	e7f7      	b.n	800503e <dll_activate+0x26>
        dll_init_rx(s_active);
 800504e:	0020      	movs	r0, r4
 8005050:	f7ff ff86 	bl	8004f60 <dll_init_rx>
 8005054:	e7f3      	b.n	800503e <dll_activate+0x26>
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	080048d9 	.word	0x080048d9

0800505c <dll_scan_timeout>:
OT_WEAK void dll_scan_timeout(void) {
 800505c:	b510      	push	{r4, lr}
    if ((radio.state != RADIO_DataRX) || (dll.comm.csmaca_params & M2_CSMACA_A2P)) {    ///@todo change to LISTEN
 800505e:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <dll_scan_timeout+0x2c>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b05      	cmp	r3, #5
 8005064:	d104      	bne.n	8005070 <dll_scan_timeout+0x14>
 8005066:	4a09      	ldr	r2, [pc, #36]	; (800508c <dll_scan_timeout+0x30>)
 8005068:	3329      	adds	r3, #41	; 0x29
 800506a:	5cd3      	ldrb	r3, [r2, r3]
 800506c:	065b      	lsls	r3, r3, #25
 800506e:	d502      	bpl.n	8005076 <dll_scan_timeout+0x1a>
        rm2_rxtimeout_isr();
 8005070:	f7fc fb48 	bl	8001704 <rm2_rxtimeout_isr>
}
 8005074:	bd10      	pop	{r4, pc}
        sys.task[TASK_radio].event = 5;
 8005076:	4806      	ldr	r0, [pc, #24]	; (8005090 <dll_scan_timeout+0x34>)
 8005078:	2305      	movs	r3, #5
 800507a:	7103      	strb	r3, [r0, #4]
        sys_task_setnext(&sys.task[TASK_radio], 128);
 800507c:	3004      	adds	r0, #4
 800507e:	2180      	movs	r1, #128	; 0x80
 8005080:	f002 fbe4 	bl	800784c <sys_task_setnext>
}
 8005084:	e7f6      	b.n	8005074 <dll_scan_timeout+0x18>
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	200026b8 	.word	0x200026b8
 800508c:	20002648 	.word	0x20002648
 8005090:	20002d90 	.word	0x20002d90

08005094 <dll_m2advp_refresh>:
OT_WEAK void dll_m2advp_refresh(void) {
 8005094:	b570      	push	{r4, r5, r6, lr}
    countdown = rm2_flood_getcounter();
 8005096:	f7fc f969 	bl	800136c <rm2_flood_getcounter>
 800509a:	0004      	movs	r4, r0
    if (countdown < rm2_bgpkt_duration()) {
 800509c:	f7fc fd8c 	bl	8001bb8 <rm2_bgpkt_duration>
 80050a0:	4284      	cmp	r4, r0
 80050a2:	db03      	blt.n	80050ac <dll_m2advp_refresh+0x18>
        m2advp_update(countdown);
 80050a4:	b2a0      	uxth	r0, r4
 80050a6:	f000 fc4f 	bl	8005948 <m2advp_update>
}
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
        dll.counter = (countdown < 0) ? 0 : countdown;
 80050ac:	1c23      	adds	r3, r4, #0
 80050ae:	0422      	lsls	r2, r4, #16
 80050b0:	d406      	bmi.n	80050c0 <dll_m2advp_refresh+0x2c>
 80050b2:	4a04      	ldr	r2, [pc, #16]	; (80050c4 <dll_m2advp_refresh+0x30>)
 80050b4:	8053      	strh	r3, [r2, #2]
        m2advp_close();
 80050b6:	f000 fc57 	bl	8005968 <m2advp_close>
        rm2_flood_txstop();
 80050ba:	f7fc f95d 	bl	8001378 <rm2_flood_txstop>
 80050be:	e7f4      	b.n	80050aa <dll_m2advp_refresh+0x16>
        dll.counter = (countdown < 0) ? 0 : countdown;
 80050c0:	2300      	movs	r3, #0
 80050c2:	e7f6      	b.n	80050b2 <dll_m2advp_refresh+0x1e>
 80050c4:	20002648 	.word	0x20002648

080050c8 <dll_rfevt_btx>:
OT_WEAK void dll_rfevt_btx(ot_int flcode, ot_int scratch) {
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	0004      	movs	r4, r0
    __DEBUG_ERRCODE_EVAL(=130);
 80050cc:	4b1e      	ldr	r3, [pc, #120]	; (8005148 <dll_rfevt_btx+0x80>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	801a      	strh	r2, [r3, #0]
 80050d2:	3282      	adds	r2, #130	; 0x82
 80050d4:	805a      	strh	r2, [r3, #2]
    switch (flcode) {
 80050d6:	2802      	cmp	r0, #2
 80050d8:	d012      	beq.n	8005100 <dll_rfevt_btx+0x38>
 80050da:	2803      	cmp	r0, #3
 80050dc:	d016      	beq.n	800510c <dll_rfevt_btx+0x44>
 80050de:	2800      	cmp	r0, #0
 80050e0:	d031      	beq.n	8005146 <dll_rfevt_btx+0x7e>
            __DEBUG_ERRCODE_EVAL(=133);
 80050e2:	4b19      	ldr	r3, [pc, #100]	; (8005148 <dll_rfevt_btx+0x80>)
 80050e4:	2285      	movs	r2, #133	; 0x85
 80050e6:	805a      	strh	r2, [r3, #2]
            dll_idle();
 80050e8:	f7ff fcb8 	bl	8004a5c <dll_idle>
            dirty_adv_check = (session_netstate() & M2_NETFLAG_STREAM);
 80050ec:	f000 feb2 	bl	8005e54 <session_netstate>
 80050f0:	0005      	movs	r5, r0
            session_pop();// pop the BG session
 80050f2:	f000 fe39 	bl	8005d68 <session_pop>
            if (dirty_adv_check) {
 80050f6:	062b      	lsls	r3, r5, #24
 80050f8:	d51a      	bpl.n	8005130 <dll_rfevt_btx+0x68>
                session_scrap();
 80050fa:	f000 fe21 	bl	8005d40 <session_scrap>
 80050fe:	e017      	b.n	8005130 <dll_rfevt_btx+0x68>
            __DEBUG_ERRCODE_EVAL(=131);
 8005100:	4b11      	ldr	r3, [pc, #68]	; (8005148 <dll_rfevt_btx+0x80>)
 8005102:	2283      	movs	r2, #131	; 0x83
 8005104:	805a      	strh	r2, [r3, #2]
            dll_m2advp_refresh();
 8005106:	f7ff ffc5 	bl	8005094 <dll_m2advp_refresh>
        } return; // skip termination section
 800510a:	e01c      	b.n	8005146 <dll_rfevt_btx+0x7e>
            __DEBUG_ERRCODE_EVAL(=132);
 800510c:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <dll_rfevt_btx+0x80>)
 800510e:	2284      	movs	r2, #132	; 0x84
 8005110:	805a      	strh	r2, [r3, #2]
            follower                = session_follower();
 8005112:	f000 fe85 	bl	8005e20 <session_follower>
            follower->counter       = dll.counter;
 8005116:	4b0d      	ldr	r3, [pc, #52]	; (800514c <dll_rfevt_btx+0x84>)
 8005118:	885a      	ldrh	r2, [r3, #2]
 800511a:	8082      	strh	r2, [r0, #4]
            sys.task_RFA.event      = 0;
 800511c:	4a0c      	ldr	r2, [pc, #48]	; (8005150 <dll_rfevt_btx+0x88>)
 800511e:	2100      	movs	r1, #0
 8005120:	7111      	strb	r1, [r2, #4]
            dll.comm.tc             = 2;    //TI2CLK(2);
 8005122:	2202      	movs	r2, #2
 8005124:	621a      	str	r2, [r3, #32]
            dll.comm.csmaca_params  = (M2_CSMACA_NOCSMA | M2_CSMACA_MACCA);
 8005126:	322c      	adds	r2, #44	; 0x2c
 8005128:	313c      	adds	r1, #60	; 0x3c
 800512a:	5499      	strb	r1, [r3, r2]
            session_pop();
 800512c:	f000 fe1c 	bl	8005d68 <session_pop>
    DLL_SIG_RFTERMINATE(sys.task_RFA.event, flcode);
 8005130:	4d07      	ldr	r5, [pc, #28]	; (8005150 <dll_rfevt_btx+0x88>)
 8005132:	7928      	ldrb	r0, [r5, #4]
 8005134:	0021      	movs	r1, r4
 8005136:	f7fb fb0d 	bl	8000754 <dll_sig_rfterminate>
    sys.task_RFA.event = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	712b      	strb	r3, [r5, #4]
    sys_preempt(&sys.task_RFA, 0);
 800513e:	1d28      	adds	r0, r5, #4
 8005140:	2100      	movs	r1, #0
 8005142:	f002 fbf3 	bl	800792c <sys_preempt>
}
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	20002dd0 	.word	0x20002dd0
 800514c:	20002648 	.word	0x20002648
 8005150:	20002d90 	.word	0x20002d90

08005154 <dll_set_defaults>:
OT_WEAK void dll_set_defaults(m2session* s_active) {
 8005154:	b510      	push	{r4, lr}
 8005156:	0004      	movs	r4, r0
    ot_u16 follower         = session_follower_wait();
 8005158:	f000 fe6e 	bl	8005e38 <session_follower_wait>
    dll.comm.tc             = follower >> 3;
 800515c:	08c2      	lsrs	r2, r0, #3
 800515e:	b292      	uxth	r2, r2
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <dll_set_defaults+0x4c>)
 8005162:	621a      	str	r2, [r3, #32]
    dll.comm.rx_timeout     = follower;
 8005164:	6298      	str	r0, [r3, #40]	; 0x28
    dll.comm.csmaca_params  = M2_CSMACA_MACCA;
 8005166:	222e      	movs	r2, #46	; 0x2e
 8005168:	2138      	movs	r1, #56	; 0x38
 800516a:	5499      	strb	r1, [r3, r2]
    dll.comm.redundants     = ((s_active->netstate & M2_NETSTATE_RX) == 0);
 800516c:	79e2      	ldrb	r2, [r4, #7]
 800516e:	0952      	lsrs	r2, r2, #5
 8005170:	2001      	movs	r0, #1
 8005172:	2101      	movs	r1, #1
 8005174:	404a      	eors	r2, r1
 8005176:	2101      	movs	r1, #1
 8005178:	400a      	ands	r2, r1
 800517a:	312e      	adds	r1, #46	; 0x2e
 800517c:	545a      	strb	r2, [r3, r1]
    dll.comm.tx_channels    = 1;
 800517e:	2230      	movs	r2, #48	; 0x30
 8005180:	5498      	strb	r0, [r3, r2]
    dll.comm.rx_channels    = 1;
 8005182:	3201      	adds	r2, #1
 8005184:	5498      	strb	r0, [r3, r2]
    dll.comm.tx_chanlist    = &dll.comm.scratch[0];
 8005186:	001a      	movs	r2, r3
 8005188:	322c      	adds	r2, #44	; 0x2c
 800518a:	635a      	str	r2, [r3, #52]	; 0x34
    dll.comm.rx_chanlist    = &dll.comm.scratch[1];
 800518c:	001a      	movs	r2, r3
 800518e:	322d      	adds	r2, #45	; 0x2d
 8005190:	639a      	str	r2, [r3, #56]	; 0x38
    dll.comm.scratch[0]     = s_active->channel;
 8005192:	79a1      	ldrb	r1, [r4, #6]
 8005194:	222c      	movs	r2, #44	; 0x2c
 8005196:	5499      	strb	r1, [r3, r2]
    dll.comm.scratch[1]     = s_active->channel;
 8005198:	79a1      	ldrb	r1, [r4, #6]
 800519a:	3201      	adds	r2, #1
 800519c:	5499      	strb	r1, [r3, r2]
}
 800519e:	bd10      	pop	{r4, pc}
 80051a0:	20002648 	.word	0x20002648

080051a4 <dll_default_applet>:
OT_WEAK void dll_default_applet(m2session* active) {
 80051a4:	b510      	push	{r4, lr}
    dll_set_defaults(active);
 80051a6:	f7ff ffd5 	bl	8005154 <dll_set_defaults>
}
 80051aa:	bd10      	pop	{r4, pc}

080051ac <dll_scan_applet>:
OT_WEAK void dll_scan_applet(m2session* active) {
 80051ac:	b510      	push	{r4, lr}
 80051ae:	0004      	movs	r4, r0
    dll_set_defaults(active);
 80051b0:	f7ff ffd0 	bl	8005154 <dll_set_defaults>
    scan_code       = active->extra;
 80051b4:	7a20      	ldrb	r0, [r4, #8]
    active->extra   = 0;
 80051b6:	2300      	movs	r3, #0
 80051b8:	7223      	strb	r3, [r4, #8]
    timeout         = otutils_calc_timeout(scan_code);
 80051ba:	f001 ff9c 	bl	80070f6 <otutils_calc_timeout>
    if (timeout > 65535) {
 80051be:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <dll_scan_applet+0x24>)
 80051c0:	4298      	cmp	r0, r3
 80051c2:	dd00      	ble.n	80051c6 <dll_scan_applet+0x1a>
        timeout = 65535;
 80051c4:	0018      	movs	r0, r3
    dll.comm.rx_timeout = (ot_u16)timeout;
 80051c6:	0400      	lsls	r0, r0, #16
 80051c8:	0c00      	lsrs	r0, r0, #16
 80051ca:	4b02      	ldr	r3, [pc, #8]	; (80051d4 <dll_scan_applet+0x28>)
 80051cc:	6298      	str	r0, [r3, #40]	; 0x28
}
 80051ce:	bd10      	pop	{r4, pc}
 80051d0:	0000ffff 	.word	0x0000ffff
 80051d4:	20002648 	.word	0x20002648

080051d8 <dll_beacon_applet>:
OT_WEAK void dll_beacon_applet(m2session* active) {
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	0004      	movs	r4, r0
    b_params        = active->extra;
 80051de:	7a05      	ldrb	r5, [r0, #8]
    active->extra   = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	7203      	strb	r3, [r0, #8]
    dll_set_defaults(active);
 80051e4:	f7ff ffb6 	bl	8005154 <dll_set_defaults>
    dll.comm.tc             = M2_PARAM_BEACON_TCA;  //TI2CLK(M2_PARAM_BEACON_TCA);
 80051e8:	4b41      	ldr	r3, [pc, #260]	; (80052f0 <dll_beacon_applet+0x118>)
 80051ea:	220c      	movs	r2, #12
 80051ec:	621a      	str	r2, [r3, #32]
    dll.comm.rx_timeout     = (b_params & 0x02) ? 0 : rm2_default_tgd(active->channel);
 80051ee:	07ab      	lsls	r3, r5, #30
 80051f0:	d549      	bpl.n	8005286 <dll_beacon_applet+0xae>
 80051f2:	2000      	movs	r0, #0
 80051f4:	4b3e      	ldr	r3, [pc, #248]	; (80052f0 <dll_beacon_applet+0x118>)
 80051f6:	6298      	str	r0, [r3, #40]	; 0x28
    dll.comm.csmaca_params |= (b_params & 0x04) | M2_CSMACA_NA2P | M2_CSMACA_MACCA;
 80051f8:	202e      	movs	r0, #46	; 0x2e
 80051fa:	2104      	movs	r1, #4
 80051fc:	4029      	ands	r1, r5
 80051fe:	5c1a      	ldrb	r2, [r3, r0]
 8005200:	430a      	orrs	r2, r1
 8005202:	2138      	movs	r1, #56	; 0x38
 8005204:	430a      	orrs	r2, r1
 8005206:	541a      	strb	r2, [r3, r0]
    dll.comm.redundants     = dll.netconf.b_attempts;
 8005208:	7f59      	ldrb	r1, [r3, #29]
 800520a:	222f      	movs	r2, #47	; 0x2f
 800520c:	5499      	strb	r1, [r3, r2]
    if (dll.netconf.btemp[0] & 0x80) {
 800520e:	799b      	ldrb	r3, [r3, #6]
 8005210:	b25b      	sxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	db3b      	blt.n	800528e <dll_beacon_applet+0xb6>
		m2np_header(active, M2RT_BROADCAST, M2FI_FRDIALOG);
 8005216:	2200      	movs	r2, #0
 8005218:	2101      	movs	r1, #1
 800521a:	0020      	movs	r0, r4
 800521c:	f000 f9ce 	bl	80055bc <m2np_header>
		cmd_ext     = (b_params & 0x06);                            // Normal extension bits
 8005220:	2606      	movs	r6, #6
 8005222:	402e      	ands	r6, r5
		cmd_ext    |= (dll.netconf.btemp[4] == 0) << 6;             // Announcement No-File bit
 8005224:	4b32      	ldr	r3, [pc, #200]	; (80052f0 <dll_beacon_applet+0x118>)
 8005226:	7a9b      	ldrb	r3, [r3, #10]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d157      	bne.n	80052dc <dll_beacon_applet+0x104>
 800522c:	3340      	adds	r3, #64	; 0x40
 800522e:	431e      	orrs	r6, r3
		cmd_code    = 0x20 | (b_params & 1) | ((cmd_ext!=0) << 7);
 8005230:	2401      	movs	r4, #1
 8005232:	402c      	ands	r4, r5
 8005234:	2320      	movs	r3, #32
 8005236:	431c      	orrs	r4, r3
 8005238:	2e00      	cmp	r6, #0
 800523a:	d051      	beq.n	80052e0 <dll_beacon_applet+0x108>
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	425b      	negs	r3, r3
 8005240:	431c      	orrs	r4, r3
 8005242:	b264      	sxtb	r4, r4
 8005244:	b2e4      	uxtb	r4, r4
		q_writebyte(&txq, cmd_code);
 8005246:	0021      	movs	r1, r4
 8005248:	482a      	ldr	r0, [pc, #168]	; (80052f4 <dll_beacon_applet+0x11c>)
 800524a:	f001 feaf 	bl	8006fac <q_writebyte>
		if (cmd_code) {
 800524e:	2c00      	cmp	r4, #0
 8005250:	d148      	bne.n	80052e4 <dll_beacon_applet+0x10c>
		q_writebyte(&txq, (ot_u8)dll.comm.rx_timeout);
 8005252:	4c27      	ldr	r4, [pc, #156]	; (80052f0 <dll_beacon_applet+0x118>)
 8005254:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005256:	b2d9      	uxtb	r1, r3
 8005258:	4826      	ldr	r0, [pc, #152]	; (80052f4 <dll_beacon_applet+0x11c>)
 800525a:	f001 fea7 	bl	8006fac <q_writebyte>
		if (dll.netconf.btemp[4] != 0) {
 800525e:	7aa3      	ldrb	r3, [r4, #10]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00c      	beq.n	800527e <dll_beacon_applet+0xa6>
			q_init(&beacon_queue, &dll.netconf.btemp[4], 4);
 8005264:	2204      	movs	r2, #4
 8005266:	4924      	ldr	r1, [pc, #144]	; (80052f8 <dll_beacon_applet+0x120>)
 8005268:	a801      	add	r0, sp, #4
 800526a:	f001 fe92 	bl	8006f92 <q_init>
			if (m2qp_isf_call((b_params & 1), &beacon_queue, AUTH_GUEST) < 0) {
 800526e:	2001      	movs	r0, #1
 8005270:	4028      	ands	r0, r5
 8005272:	4a22      	ldr	r2, [pc, #136]	; (80052fc <dll_beacon_applet+0x124>)
 8005274:	a901      	add	r1, sp, #4
 8005276:	f001 f91d 	bl	80064b4 <m2qp_isf_call>
 800527a:	2800      	cmp	r0, #0
 800527c:	db29      	blt.n	80052d2 <dll_beacon_applet+0xfa>
		m2np_footer();
 800527e:	f000 fa67 	bl	8005750 <m2np_footer>
}
 8005282:	b006      	add	sp, #24
 8005284:	bd70      	pop	{r4, r5, r6, pc}
    dll.comm.rx_timeout     = (b_params & 0x02) ? 0 : rm2_default_tgd(active->channel);
 8005286:	79a0      	ldrb	r0, [r4, #6]
 8005288:	f7fc fc8e 	bl	8001ba8 <rm2_default_tgd>
 800528c:	e7b2      	b.n	80051f4 <dll_beacon_applet+0x1c>
    	ot_memset(beacon_tgram, 0, 8);
 800528e:	3a27      	subs	r2, #39	; 0x27
 8005290:	2100      	movs	r1, #0
 8005292:	a801      	add	r0, sp, #4
 8005294:	f003 f974 	bl	8008580 <ot_memset>
    	active->netstate |= M2_NETFLAG_BG;
 8005298:	79e3      	ldrb	r3, [r4, #7]
 800529a:	2240      	movs	r2, #64	; 0x40
 800529c:	4313      	orrs	r3, r2
 800529e:	71e3      	strb	r3, [r4, #7]
    	fp = vl_open(VL_ISF_BLOCKID, dll.netconf.btemp[5], VL_ACCESS_R, AUTH_GUEST);
 80052a0:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <dll_beacon_applet+0x118>)
 80052a2:	7ad9      	ldrb	r1, [r3, #11]
 80052a4:	4b15      	ldr	r3, [pc, #84]	; (80052fc <dll_beacon_applet+0x124>)
 80052a6:	2224      	movs	r2, #36	; 0x24
 80052a8:	2003      	movs	r0, #3
 80052aa:	f002 f91b 	bl	80074e4 <vl_open>
 80052ae:	1e04      	subs	r4, r0, #0
    	if (fp != NULL) {
 80052b0:	d007      	beq.n	80052c2 <dll_beacon_applet+0xea>
    		vl_load(fp, dll.netconf.btemp[4], beacon_tgram);
 80052b2:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <dll_beacon_applet+0x118>)
 80052b4:	7a99      	ldrb	r1, [r3, #10]
 80052b6:	aa01      	add	r2, sp, #4
 80052b8:	f002 f96f 	bl	800759a <vl_load>
    		vl_close(fp);
 80052bc:	0020      	movs	r0, r4
 80052be:	f002 f9cd 	bl	800765c <vl_close>
    	if (otapi_new_telegram(token, dll.netconf.btemp[5], beacon_tgram) == 0) {
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <dll_beacon_applet+0x118>)
 80052c4:	7ad9      	ldrb	r1, [r3, #11]
 80052c6:	aa01      	add	r2, sp, #4
 80052c8:	480d      	ldr	r0, [pc, #52]	; (8005300 <dll_beacon_applet+0x128>)
 80052ca:	f7ff f94f 	bl	800456c <otapi_new_telegram>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d1d7      	bne.n	8005282 <dll_beacon_applet+0xaa>
	session_pop();
 80052d2:	f000 fd49 	bl	8005d68 <session_pop>
	dll_idle();
 80052d6:	f7ff fbc1 	bl	8004a5c <dll_idle>
	return;
 80052da:	e7d2      	b.n	8005282 <dll_beacon_applet+0xaa>
		cmd_ext    |= (dll.netconf.btemp[4] == 0) << 6;             // Announcement No-File bit
 80052dc:	2300      	movs	r3, #0
 80052de:	e7a6      	b.n	800522e <dll_beacon_applet+0x56>
		cmd_code    = 0x20 | (b_params & 1) | ((cmd_ext!=0) << 7);
 80052e0:	2300      	movs	r3, #0
 80052e2:	e7ad      	b.n	8005240 <dll_beacon_applet+0x68>
			q_writebyte(&txq, cmd_ext);
 80052e4:	0031      	movs	r1, r6
 80052e6:	4803      	ldr	r0, [pc, #12]	; (80052f4 <dll_beacon_applet+0x11c>)
 80052e8:	f001 fe60 	bl	8006fac <q_writebyte>
 80052ec:	e7b1      	b.n	8005252 <dll_beacon_applet+0x7a>
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	20002648 	.word	0x20002648
 80052f4:	20002d68 	.word	0x20002d68
 80052f8:	20002652 	.word	0x20002652
 80052fc:	20002738 	.word	0x20002738
 8005300:	01020304 	.word	0x01020304

08005304 <sub_default_idle>:
}
 8005304:	2001      	movs	r0, #1
 8005306:	4770      	bx	lr

08005308 <sub_dll_flush>:
void sub_dll_flush(void) {
 8005308:	b510      	push	{r4, lr}
	if (radio.state != RADIO_Idle) {
 800530a:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <sub_dll_flush+0x40>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d116      	bne.n	8005340 <sub_dll_flush+0x38>
    rm2_mac_configure();
 8005312:	f7fc f807 	bl	8001324 <rm2_mac_configure>
    task = &sys.task_HSS;
 8005316:	4b0d      	ldr	r3, [pc, #52]	; (800534c <sub_dll_flush+0x44>)
        task->cursor   = 0;
 8005318:	2200      	movs	r2, #0
 800531a:	705a      	strb	r2, [r3, #1]
        task->reserve  = 1;
 800531c:	2101      	movs	r1, #1
 800531e:	7099      	strb	r1, [r3, #2]
        task->latency  = 255;
 8005320:	31fe      	adds	r1, #254	; 0xfe
 8005322:	70d9      	strb	r1, [r3, #3]
        task->nextevent= 0;
 8005324:	605a      	str	r2, [r3, #4]
        task++;
 8005326:	3308      	adds	r3, #8
	} while (task < &sys.task[SSS_INDEX+1]);
 8005328:	4a09      	ldr	r2, [pc, #36]	; (8005350 <sub_dll_flush+0x48>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d3f4      	bcc.n	8005318 <sub_dll_flush+0x10>
    session_init();
 800532e:	f000 fc7b 	bl	8005c28 <session_init>
    dll.idle_state  = sub_default_idle();
 8005332:	f7ff ffe7 	bl	8005304 <sub_default_idle>
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <sub_dll_flush+0x4c>)
 8005338:	7018      	strb	r0, [r3, #0]
    dll_idle();
 800533a:	f7ff fb8f 	bl	8004a5c <dll_idle>
}
 800533e:	bd10      	pop	{r4, pc}
		rm2_kill();
 8005340:	f7fc fa24 	bl	800178c <rm2_kill>
 8005344:	e7e5      	b.n	8005312 <sub_dll_flush+0xa>
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	200026b8 	.word	0x200026b8
 800534c:	20002d9c 	.word	0x20002d9c
 8005350:	20002db4 	.word	0x20002db4
 8005354:	20002648 	.word	0x20002648

08005358 <dll_refresh>:
OT_WEAK void dll_refresh(void) {
 8005358:	b570      	push	{r4, r5, r6, lr}
    fp = ISF_open_su(0);
 800535a:	2000      	movs	r0, #0
 800535c:	f002 f9b3 	bl	80076c6 <ISF_open_su>
 8005360:	0005      	movs	r5, r0
    vl_load(fp, 10, dll.netconf.vid);
 8005362:	4c0f      	ldr	r4, [pc, #60]	; (80053a0 <dll_refresh+0x48>)
 8005364:	0022      	movs	r2, r4
 8005366:	210a      	movs	r1, #10
 8005368:	f002 f917 	bl	800759a <vl_load>
    dll.netconf.dd_flags    = 0;
 800536c:	3c16      	subs	r4, #22
 800536e:	2300      	movs	r3, #0
 8005370:	7723      	strb	r3, [r4, #28]
    dll.netconf.hold_limit  = PLATFORM_ENDIAN16(dll.netconf.hold_limit);
 8005372:	8be3      	ldrh	r3, [r4, #30]
 8005374:	ba5b      	rev16	r3, r3
 8005376:	83e3      	strh	r3, [r4, #30]
    vl_close(fp);
 8005378:	0028      	movs	r0, r5
 800537a:	f002 f96f 	bl	800765c <vl_close>
    fp = ISF_open_su(1);
 800537e:	2001      	movs	r0, #1
 8005380:	f002 f9a1 	bl	80076c6 <ISF_open_su>
 8005384:	0005      	movs	r5, r0
    vl_load(fp, 8, dll.netconf.uid);
 8005386:	0022      	movs	r2, r4
 8005388:	320e      	adds	r2, #14
 800538a:	2108      	movs	r1, #8
 800538c:	f002 f905 	bl	800759a <vl_load>
    vl_close(fp);
 8005390:	0028      	movs	r0, r5
 8005392:	f002 f963 	bl	800765c <vl_close>
    dll_refresh_rts();
 8005396:	f7ff fb5f 	bl	8004a58 <dll_refresh_rts>
    sub_dll_flush();
 800539a:	f7ff ffb5 	bl	8005308 <sub_dll_flush>
}
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	2000265e 	.word	0x2000265e

080053a4 <dll_init>:
OT_WEAK void dll_init(void) {
 80053a4:	b510      	push	{r4, lr}
    radio_init();
 80053a6:	f7fb ff47 	bl	8001238 <radio_init>
    network_init();
 80053aa:	f000 f8ef 	bl	800558c <network_init>
    m2qp_init();
 80053ae:	f000 fdeb 	bl	8005f88 <m2qp_init>
    auth_init();
 80053b2:	f001 fd42 	bl	8006e3a <auth_init>
    dll_refresh();
 80053b6:	f7ff ffcf 	bl	8005358 <dll_refresh>
}
 80053ba:	bd10      	pop	{r4, pc}

080053bc <dll_systask_rf>:
OT_WEAK void dll_systask_rf(ot_task task) {
 80053bc:	b510      	push	{r4, lr}
 80053be:	0004      	movs	r4, r0
        switch (sys.task_RFA.event) {
 80053c0:	4b11      	ldr	r3, [pc, #68]	; (8005408 <dll_systask_rf+0x4c>)
 80053c2:	791b      	ldrb	r3, [r3, #4]
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d015      	beq.n	80053f4 <dll_systask_rf+0x38>
 80053c8:	d805      	bhi.n	80053d6 <dll_systask_rf+0x1a>
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d00c      	beq.n	80053e8 <dll_systask_rf+0x2c>
 80053ce:	d80e      	bhi.n	80053ee <dll_systask_rf+0x32>
            case 0: dll_refresh();          break;
 80053d0:	f7ff ffc2 	bl	8005358 <dll_refresh>
}
 80053d4:	bd10      	pop	{r4, pc}
        switch (sys.task_RFA.event) {
 80053d6:	2b06      	cmp	r3, #6
 80053d8:	d012      	beq.n	8005400 <dll_systask_rf+0x44>
 80053da:	d30e      	bcc.n	80053fa <dll_systask_rf+0x3e>
 80053dc:	2bff      	cmp	r3, #255	; 0xff
 80053de:	d1f9      	bne.n	80053d4 <dll_systask_rf+0x18>
            case 255: task->cursor = radio_getpwrcode(); break;
 80053e0:	f7fc fb9a 	bl	8001b18 <radio_getpwrcode>
 80053e4:	7060      	strb	r0, [r4, #1]
}
 80053e6:	e7f5      	b.n	80053d4 <dll_systask_rf+0x18>
            case 1: dll_processing();       break;
 80053e8:	f7ff fcf4 	bl	8004dd4 <dll_processing>
 80053ec:	e7f2      	b.n	80053d4 <dll_systask_rf+0x18>
            case 2: dll_activate();         break;
 80053ee:	f7ff fe13 	bl	8005018 <dll_activate>
 80053f2:	e7ef      	b.n	80053d4 <dll_systask_rf+0x18>
            case 3: dll_scan_timeout();    break;
 80053f4:	f7ff fe32 	bl	800505c <dll_scan_timeout>
 80053f8:	e7ec      	b.n	80053d4 <dll_systask_rf+0x18>
            case 5: rm2_kill();             break;
 80053fa:	f7fc f9c7 	bl	800178c <rm2_kill>
 80053fe:	e7e9      	b.n	80053d4 <dll_systask_rf+0x18>
            case 6: rm2_decode_s2();        break;
 8005400:	f7fc f92e 	bl	8001660 <rm2_decode_s2>
 8005404:	e7e6      	b.n	80053d4 <dll_systask_rf+0x18>
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	20002d90 	.word	0x20002d90

0800540c <dll_systask_holdscan>:
OT_WEAK void dll_systask_holdscan(ot_task task) {
 800540c:	b510      	push	{r4, lr}
    if (task->event == 0) return;
 800540e:	7803      	ldrb	r3, [r0, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00d      	beq.n	8005430 <dll_systask_holdscan+0x24>
    if (dll.counter != 0) {
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <dll_systask_holdscan+0x3c>)
 8005416:	885b      	ldrh	r3, [r3, #2]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <dll_systask_holdscan+0x26>
        dll.idle_state      = sub_default_idle();
 800541c:	f7ff ff72 	bl	8005304 <sub_default_idle>
 8005420:	4b09      	ldr	r3, [pc, #36]	; (8005448 <dll_systask_holdscan+0x3c>)
 8005422:	7018      	strb	r0, [r3, #0]
        sys.task_HSS.event  = 0;
 8005424:	4b09      	ldr	r3, [pc, #36]	; (800544c <dll_systask_holdscan+0x40>)
 8005426:	2200      	movs	r2, #0
 8005428:	731a      	strb	r2, [r3, #12]
        sys.task_HSS.cursor = 0;
 800542a:	735a      	strb	r2, [r3, #13]
        sys.task_SSS.event  = 5;
 800542c:	3205      	adds	r2, #5
 800542e:	771a      	strb	r2, [r3, #28]
}
 8005430:	bd10      	pop	{r4, pc}
        dll.counter -= (sys.task_HSS.cursor == 0);
 8005432:	4a06      	ldr	r2, [pc, #24]	; (800544c <dll_systask_holdscan+0x40>)
 8005434:	7b52      	ldrb	r2, [r2, #13]
 8005436:	4251      	negs	r1, r2
 8005438:	414a      	adcs	r2, r1
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	4a02      	ldr	r2, [pc, #8]	; (8005448 <dll_systask_holdscan+0x3c>)
 800543e:	8053      	strh	r3, [r2, #2]
        dll_systask_sleepscan(task);
 8005440:	f7ff fcf6 	bl	8004e30 <dll_systask_sleepscan>
 8005444:	e7f4      	b.n	8005430 <dll_systask_holdscan+0x24>
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	20002648 	.word	0x20002648
 800544c:	20002d90 	.word	0x20002d90

08005450 <crc0B_table>:
    0x03, 0x08, 0x15, 0x1E, 0x04, 0x0F, 0x12, 0x19,
    0x0D, 0x06, 0x1B, 0x10, 0x0A, 0x01, 0x1C, 0x17
};

ot_u8 crc0B_table(ot_u8* data) {
    ot_u8 a = (data[0] >> 3);
 8005450:	7802      	ldrb	r2, [r0, #0]
 8005452:	08d1      	lsrs	r1, r2, #3
    ot_u8 b = ((data[1] >> 6) | (data[0] << 2)) & 0x1f;
 8005454:	7843      	ldrb	r3, [r0, #1]
 8005456:	0092      	lsls	r2, r2, #2
 8005458:	099b      	lsrs	r3, r3, #6
 800545a:	4313      	orrs	r3, r2
 800545c:	221f      	movs	r2, #31
 800545e:	4013      	ands	r3, r2
    return crc0B_5t5[ crc0B_0t5[a] ^ b ];
 8005460:	4a03      	ldr	r2, [pc, #12]	; (8005470 <crc0B_table+0x20>)
 8005462:	5c51      	ldrb	r1, [r2, r1]
 8005464:	404b      	eors	r3, r1
 8005466:	18d2      	adds	r2, r2, r3
 8005468:	2320      	movs	r3, #32
 800546a:	5cd0      	ldrb	r0, [r2, r3]
}
 800546c:	4770      	bx	lr
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	20000108 	.word	0x20000108

08005474 <em2_add_crc5>:

void em2_add_crc5() {
 8005474:	b510      	push	{r4, lr}
    txq.front[1] &= ~0x1f;
 8005476:	4a07      	ldr	r2, [pc, #28]	; (8005494 <em2_add_crc5+0x20>)
 8005478:	68d1      	ldr	r1, [r2, #12]
 800547a:	784b      	ldrb	r3, [r1, #1]
 800547c:	201f      	movs	r0, #31
 800547e:	4383      	bics	r3, r0
 8005480:	704b      	strb	r3, [r1, #1]
    txq.front[1] |= crc0B_table(txq.front);
 8005482:	68d4      	ldr	r4, [r2, #12]
 8005484:	0020      	movs	r0, r4
 8005486:	f7ff ffe3 	bl	8005450 <crc0B_table>
 800548a:	7863      	ldrb	r3, [r4, #1]
 800548c:	4318      	orrs	r0, r3
 800548e:	7060      	strb	r0, [r4, #1]
}
 8005490:	bd10      	pop	{r4, pc}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	20002d68 	.word	0x20002d68

08005498 <em2_check_crc5>:

ot_u8 em2_check_crc5() {
 8005498:	b510      	push	{r4, lr}
    ot_u8 crc5_val;
    crc5_val = crc0B_table(rxq.front);
 800549a:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <em2_check_crc5+0x18>)
 800549c:	68dc      	ldr	r4, [r3, #12]
 800549e:	0020      	movs	r0, r4
 80054a0:	f7ff ffd6 	bl	8005450 <crc0B_table>
    return ((rxq.front[1] & 0x1f) - crc5_val);
 80054a4:	7862      	ldrb	r2, [r4, #1]
 80054a6:	231f      	movs	r3, #31
 80054a8:	4013      	ands	r3, r2
 80054aa:	1a18      	subs	r0, r3, r0
 80054ac:	b2c0      	uxtb	r0, r0
}
 80054ae:	bd10      	pop	{r4, pc}
 80054b0:	20002d54 	.word	0x20002d54

080054b4 <sub_apply_subnet_flags>:
#include <m2/dll.h>
#include <m2/m2task.h>
#include <m2/session.h>


void sub_apply_subnet_flags(session_tmpl* s_tmpl) {
 80054b4:	b510      	push	{r4, lr}
    // Apply custom-masked subnet and flags to session (typically unused)
    s_tmpl->subnet  = (dll.netconf.subnet & ~s_tmpl->subnetmask) | \
 80054b6:	490a      	ldr	r1, [pc, #40]	; (80054e0 <sub_apply_subnet_flags+0x2c>)
 80054b8:	2318      	movs	r3, #24
 80054ba:	56cb      	ldrsb	r3, [r1, r3]
 80054bc:	78c4      	ldrb	r4, [r0, #3]
 80054be:	43a3      	bics	r3, r4
 80054c0:	b25b      	sxtb	r3, r3
                                        (s_tmpl->subnet & s_tmpl->subnetmask);
 80054c2:	7882      	ldrb	r2, [r0, #2]
    s_tmpl->subnet  = (dll.netconf.subnet & ~s_tmpl->subnetmask) | \
 80054c4:	4022      	ands	r2, r4
 80054c6:	4313      	orrs	r3, r2
 80054c8:	7083      	strb	r3, [r0, #2]
    s_tmpl->flags   = (dll.netconf.dd_flags & ~s_tmpl->flagmask) | \
 80054ca:	231c      	movs	r3, #28
 80054cc:	56cb      	ldrsb	r3, [r1, r3]
 80054ce:	7941      	ldrb	r1, [r0, #5]
 80054d0:	438b      	bics	r3, r1
 80054d2:	b25b      	sxtb	r3, r3
                                        (s_tmpl->flags & s_tmpl->flagmask);
 80054d4:	7902      	ldrb	r2, [r0, #4]
    s_tmpl->flags   = (dll.netconf.dd_flags & ~s_tmpl->flagmask) | \
 80054d6:	400a      	ands	r2, r1
 80054d8:	4313      	orrs	r3, r2
 80054da:	7103      	strb	r3, [r0, #4]
}
 80054dc:	bd10      	pop	{r4, pc}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	20002648 	.word	0x20002648

080054e4 <sub_newtask>:


m2session* sub_newtask(session_tmpl* s_tmpl, ot_app applet, ot_u16 offset) {
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	0004      	movs	r4, r0
 80054e8:	000d      	movs	r5, r1
 80054ea:	0016      	movs	r6, r2
    m2session* next;
    
    /// Make sure there is a free session... it is easiest this way
    if (session_numfree() < 1) {
 80054ec:	f000 fc6e 	bl	8005dcc <session_numfree>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	dd0f      	ble.n	8005514 <sub_newtask+0x30>
        return NULL;
    }
    
    /// Create new session (session always begins with req tx)
    next = session_new(applet, offset, s_tmpl->channel, (M2_NETSTATE_INIT | M2_NETSTATE_REQTX));
 80054f4:	7862      	ldrb	r2, [r4, #1]
 80054f6:	2308      	movs	r3, #8
 80054f8:	0031      	movs	r1, r6
 80054fa:	0028      	movs	r0, r5
 80054fc:	f000 fba4 	bl	8005c48 <session_new>
 8005500:	0005      	movs	r5, r0
    sub_apply_subnet_flags(s_tmpl);
 8005502:	0020      	movs	r0, r4
 8005504:	f7ff ffd6 	bl	80054b4 <sub_apply_subnet_flags>
    next->subnet    = s_tmpl->subnet;
 8005508:	78a3      	ldrb	r3, [r4, #2]
 800550a:	72ab      	strb	r3, [r5, #10]
    next->flags     = s_tmpl->flags;
 800550c:	7923      	ldrb	r3, [r4, #4]
 800550e:	72eb      	strb	r3, [r5, #11]

    return next;
}
 8005510:	0028      	movs	r0, r5
 8005512:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 8005514:	2500      	movs	r5, #0
 8005516:	e7fb      	b.n	8005510 <sub_newtask+0x2c>

08005518 <m2task_immediate>:



m2session* m2task_immediate(session_tmpl* s_tmpl, ot_app applet) {
 8005518:	b510      	push	{r4, lr}
/// This call doesn't actually cause the session to occur immediately,
/// but it will happen immediately following any sessions happenning 
/// at this very moment.
    return sub_newtask(s_tmpl, applet, 0);
 800551a:	2200      	movs	r2, #0
 800551c:	f7ff ffe2 	bl	80054e4 <sub_newtask>
}
 8005520:	bd10      	pop	{r4, pc}
	...

08005524 <m2task_advertise>:





m2session* m2task_advertise(advert_tmpl* adv_tmpl, session_tmpl* s_tmpl, ot_app applet) {
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	0005      	movs	r5, r0
 8005528:	000c      	movs	r4, r1
 800552a:	0016      	movs	r6, r2
/// creates two sessions: one for the flood and one for the request.
#   define _FLOOD_NETSTATE  (M2_NETFLAG_BG | M2_NETFLAG_STREAM | M2_NETSTATE_INIT | M2_NETSTATE_REQTX)
    m2session* next;
    
    /// Make sure there are at least two free sessions
    if (session_numfree() < 2) {
 800552c:	f000 fc4e 	bl	8005dcc <session_numfree>
 8005530:	2801      	cmp	r0, #1
 8005532:	dd1b      	ble.n	800556c <m2task_advertise+0x48>
        return NULL;
    }

    /// Apply session flags
    sub_apply_subnet_flags(s_tmpl);
 8005534:	0020      	movs	r0, r4
 8005536:	f7ff ffbd 	bl	80054b4 <sub_apply_subnet_flags>
    
    /// Only add the flood if the user isn't an idiot (or an algorithm of some sort)
    if (adv_tmpl->duration != 0) {
 800553a:	88ab      	ldrh	r3, [r5, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <m2task_advertise+0x32>
        next        = session_new(&dll_default_applet, 0, adv_tmpl->channel, _FLOOD_NETSTATE);
        next->subnet= s_tmpl->subnet;
        next->flags = s_tmpl->flags;
    }
    
    next        = session_new(applet, adv_tmpl->duration, s_tmpl->channel, M2_NETSTATE_REQTX);
 8005540:	88a9      	ldrh	r1, [r5, #4]
 8005542:	7862      	ldrb	r2, [r4, #1]
 8005544:	2300      	movs	r3, #0
 8005546:	0030      	movs	r0, r6
 8005548:	f000 fb7e 	bl	8005c48 <session_new>
    next->subnet= s_tmpl->subnet;
 800554c:	78a3      	ldrb	r3, [r4, #2]
 800554e:	7283      	strb	r3, [r0, #10]
    next->flags = s_tmpl->flags;
 8005550:	7923      	ldrb	r3, [r4, #4]
 8005552:	72c3      	strb	r3, [r0, #11]
    
    return next;
    
#   undef _FLOOD_NETSTATE
}
 8005554:	bd70      	pop	{r4, r5, r6, pc}
        next        = session_new(&dll_default_applet, 0, adv_tmpl->channel, _FLOOD_NETSTATE);
 8005556:	78ea      	ldrb	r2, [r5, #3]
 8005558:	23c8      	movs	r3, #200	; 0xc8
 800555a:	2100      	movs	r1, #0
 800555c:	4804      	ldr	r0, [pc, #16]	; (8005570 <m2task_advertise+0x4c>)
 800555e:	f000 fb73 	bl	8005c48 <session_new>
        next->subnet= s_tmpl->subnet;
 8005562:	78a3      	ldrb	r3, [r4, #2]
 8005564:	7283      	strb	r3, [r0, #10]
        next->flags = s_tmpl->flags;
 8005566:	7923      	ldrb	r3, [r4, #4]
 8005568:	72c3      	strb	r3, [r0, #11]
 800556a:	e7e9      	b.n	8005540 <m2task_advertise+0x1c>
        return NULL;
 800556c:	2000      	movs	r0, #0
 800556e:	e7f1      	b.n	8005554 <m2task_advertise+0x30>
 8005570:	080051a5 	.word	0x080051a5

08005574 <m2task_telegram>:




m2session* m2task_telegram(session_tmpl* s_tmpl, ot_app applet) {
 8005574:	b510      	push	{r4, lr}
 8005576:	0004      	movs	r4, r0
/// This is an experimental function
    m2session* next;
    next 			= sub_newtask(s_tmpl, applet, 0);
 8005578:	2200      	movs	r2, #0
 800557a:	f7ff ffb3 	bl	80054e4 <sub_newtask>
    next->netstate |= M2_NETFLAG_BG;
 800557e:	79c3      	ldrb	r3, [r0, #7]
 8005580:	2240      	movs	r2, #64	; 0x40
 8005582:	4313      	orrs	r3, r2
 8005584:	71c3      	strb	r3, [r0, #7]
    next->flags     = s_tmpl->flags;
 8005586:	7923      	ldrb	r3, [r4, #4]
 8005588:	72c3      	strb	r3, [r0, #11]

    return next;
}
 800558a:	bd10      	pop	{r4, pc}

0800558c <network_init>:
#   endif

    // Hop code should be explicitly set when producing an anycast or unicast 
    // transmission.  OTAPI will do this for you.
    //m2np.rt.hop_code  = 0;
}
 800558c:	4770      	bx	lr
	...

08005590 <m2np_put_deviceid>:
}




void m2np_put_deviceid(ot_bool use_vid) {
 8005590:	b510      	push	{r4, lr}
    if (use_vid) q_writeshort_be(&txq, *(ot_u16*)dll.netconf.vid);
 8005592:	2800      	cmp	r0, #0
 8005594:	d105      	bne.n	80055a2 <m2np_put_deviceid+0x12>
    else         q_writestring(&txq, dll.netconf.uid, 8);
 8005596:	2208      	movs	r2, #8
 8005598:	4905      	ldr	r1, [pc, #20]	; (80055b0 <m2np_put_deviceid+0x20>)
 800559a:	4806      	ldr	r0, [pc, #24]	; (80055b4 <m2np_put_deviceid+0x24>)
 800559c:	f001 fd65 	bl	800706a <q_writestring>
}
 80055a0:	bd10      	pop	{r4, pc}
    if (use_vid) q_writeshort_be(&txq, *(ot_u16*)dll.netconf.vid);
 80055a2:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <m2np_put_deviceid+0x28>)
 80055a4:	8ad9      	ldrh	r1, [r3, #22]
 80055a6:	4803      	ldr	r0, [pc, #12]	; (80055b4 <m2np_put_deviceid+0x24>)
 80055a8:	f001 fd0f 	bl	8006fca <q_writeshort_be>
 80055ac:	e7f8      	b.n	80055a0 <m2np_put_deviceid+0x10>
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	20002656 	.word	0x20002656
 80055b4:	20002d68 	.word	0x20002d68
 80055b8:	20002648 	.word	0x20002648

080055bc <m2np_header>:
void m2np_header(m2session* active, ot_u8 addressing, ot_u8 nack) {
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	0004      	movs	r4, r0
 80055c0:	000e      	movs	r6, r1
    q_empty(&txq);
 80055c2:	4d2e      	ldr	r5, [pc, #184]	; (800567c <m2np_header+0xc0>)
 80055c4:	0028      	movs	r0, r5
 80055c6:	f001 fcdb 	bl	8006f80 <q_empty>
        active->flags  &= ~M2_FLAG_RSCODE;
 80055ca:	7ae3      	ldrb	r3, [r4, #11]
 80055cc:	2208      	movs	r2, #8
 80055ce:	4393      	bics	r3, r2
 80055d0:	72e3      	strb	r3, [r4, #11]
        txq.back        = txq.getcursor + maxframe;
 80055d2:	686b      	ldr	r3, [r5, #4]
 80055d4:	33fe      	adds	r3, #254	; 0xfe
 80055d6:	612b      	str	r3, [r5, #16]
    q_writeshort(&txq, (ot_u16)((active->flags & M2_FLAG_RSCODE) << 3) );
 80055d8:	7ae3      	ldrb	r3, [r4, #11]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	2140      	movs	r1, #64	; 0x40
 80055de:	4019      	ands	r1, r3
 80055e0:	0028      	movs	r0, r5
 80055e2:	f001 fce8 	bl	8006fb6 <q_writeshort>
    q_writeshort(&txq, (ot_u16)active->subnet);
 80055e6:	7aa1      	ldrb	r1, [r4, #10]
 80055e8:	0028      	movs	r0, r5
 80055ea:	f001 fce4 	bl	8006fb6 <q_writeshort>
    active->flags &= M2_FLAG_ROUTE;
 80055ee:	7ae3      	ldrb	r3, [r4, #11]
 80055f0:	2104      	movs	r1, #4
 80055f2:	4019      	ands	r1, r3
 80055f4:	72e1      	strb	r1, [r4, #11]
    if (active->netstate & M2_NETSTATE_RESP) {
 80055f6:	79e2      	ldrb	r2, [r4, #7]
 80055f8:	06d3      	lsls	r3, r2, #27
 80055fa:	d526      	bpl.n	800564a <m2np_header+0x8e>
        vid_valid   = (*(ot_u16*)dll.netconf.vid != 0) | (active->flags & 1);
 80055fc:	4b20      	ldr	r3, [pc, #128]	; (8005680 <m2np_header+0xc4>)
 80055fe:	8ad9      	ldrh	r1, [r3, #22]
 8005600:	1e4b      	subs	r3, r1, #1
 8005602:	4199      	sbcs	r1, r3
        addressing |= vid_valid << 4;                           // Use Source VID if valid
 8005604:	0109      	lsls	r1, r1, #4
        addressing |= (active->flags & M2_FLAG_VID) >> 4;       // Use Target VID if Request source was VID
 8005606:	2302      	movs	r3, #2
 8005608:	4319      	orrs	r1, r3
    m2np.header.fr_info     = addressing;
 800560a:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <m2np_header+0xc8>)
 800560c:	7719      	strb	r1, [r3, #28]
    m2np.header.fr_info    |= ((active->extra & 0x0F) != 0) << 3;   //M2FI_EXT
 800560e:	b249      	sxtb	r1, r1
 8005610:	7a23      	ldrb	r3, [r4, #8]
 8005612:	071b      	lsls	r3, r3, #28
 8005614:	d022      	beq.n	800565c <m2np_header+0xa0>
 8005616:	2308      	movs	r3, #8
 8005618:	4319      	orrs	r1, r3
 800561a:	b2c9      	uxtb	r1, r1
 800561c:	4d19      	ldr	r5, [pc, #100]	; (8005684 <m2np_header+0xc8>)
 800561e:	7729      	strb	r1, [r5, #28]
    q_writebyte(&txq, m2np.header.fr_info);
 8005620:	4816      	ldr	r0, [pc, #88]	; (800567c <m2np_header+0xc0>)
 8005622:	f001 fcc3 	bl	8006fac <q_writebyte>
    if (m2np.header.fr_info & M2FI_EXT) {
 8005626:	7f2b      	ldrb	r3, [r5, #28]
 8005628:	071b      	lsls	r3, r3, #28
 800562a:	d419      	bmi.n	8005660 <m2np_header+0xa4>
    q_writebyte(&txq, active->dialog_id);
 800562c:	7a61      	ldrb	r1, [r4, #9]
 800562e:	4813      	ldr	r0, [pc, #76]	; (800567c <m2np_header+0xc0>)
 8005630:	f001 fcbc 	bl	8006fac <q_writebyte>
    m2np_put_deviceid( (ot_bool)(m2np.header.fr_info & M2FI_VID) );
 8005634:	4c13      	ldr	r4, [pc, #76]	; (8005684 <m2np_header+0xc8>)
 8005636:	7f23      	ldrb	r3, [r4, #28]
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	2001      	movs	r0, #1
 800563c:	4018      	ands	r0, r3
 800563e:	f7ff ffa7 	bl	8005590 <m2np_put_deviceid>
    if (m2np.header.fr_info & M2FI_UCAST) {
 8005642:	7f23      	ldrb	r3, [r4, #28]
 8005644:	079b      	lsls	r3, r3, #30
 8005646:	d410      	bmi.n	800566a <m2np_header+0xae>
}
 8005648:	bd70      	pop	{r4, r5, r6, pc}
        active->flags      |= addressing;
 800564a:	4331      	orrs	r1, r6
 800564c:	72e1      	strb	r1, [r4, #11]
        active->netstate   |= (addressing & M2FI_UCAST);    // M2_NETFLAG_FIRSTRX == M2FI_UCAST
 800564e:	2302      	movs	r3, #2
 8005650:	401e      	ands	r6, r3
 8005652:	4316      	orrs	r6, r2
 8005654:	71e6      	strb	r6, [r4, #7]
        addressing          = active->flags & ~M2_FLAG_RSCODE;
 8005656:	3306      	adds	r3, #6
 8005658:	4399      	bics	r1, r3
 800565a:	e7d6      	b.n	800560a <m2np_header+0x4e>
    m2np.header.fr_info    |= ((active->extra & 0x0F) != 0) << 3;   //M2FI_EXT
 800565c:	2300      	movs	r3, #0
 800565e:	e7db      	b.n	8005618 <m2np_header+0x5c>
        q_writebyte(&txq, active->extra);
 8005660:	7a21      	ldrb	r1, [r4, #8]
 8005662:	4806      	ldr	r0, [pc, #24]	; (800567c <m2np_header+0xc0>)
 8005664:	f001 fca2 	bl	8006fac <q_writebyte>
 8005668:	e7e0      	b.n	800562c <m2np_header+0x70>
        ot_u8* tmp_id       = m2np.rt.dlog.value;
 800566a:	4b06      	ldr	r3, [pc, #24]	; (8005684 <m2np_header+0xc8>)
 800566c:	6899      	ldr	r1, [r3, #8]
        m2np.rt.dlog.value  = txq.putcursor;
 800566e:	4803      	ldr	r0, [pc, #12]	; (800567c <m2np_header+0xc0>)
 8005670:	6882      	ldr	r2, [r0, #8]
 8005672:	609a      	str	r2, [r3, #8]
        q_writestring(&txq, tmp_id, m2np.rt.dlog.length);
 8005674:	791a      	ldrb	r2, [r3, #4]
 8005676:	f001 fcf8 	bl	800706a <q_writestring>
}
 800567a:	e7e5      	b.n	8005648 <m2np_header+0x8c>
 800567c:	20002d68 	.word	0x20002d68
 8005680:	20002648 	.word	0x20002648
 8005684:	20002698 	.word	0x20002698

08005688 <m2np_idcmp>:



ot_bool m2np_idcmp(ot_int length, ot_u8* id) {
 8005688:	b530      	push	{r4, r5, lr}
    ot_u8* stored_id;
    ot_u8  check;
    
    // Don't match on vid == 0, that is reserved as unassigned value
    if ((length == 2) && (*(ot_u16*)dll.netconf.vid == 0)) {
 800568a:	2802      	cmp	r0, #2
 800568c:	d00a      	beq.n	80056a4 <m2np_idcmp+0x1c>
        return False;
    }
    
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 800568e:	2808      	cmp	r0, #8
 8005690:	d00e      	beq.n	80056b0 <m2np_idcmp+0x28>
 8005692:	4a2b      	ldr	r2, [pc, #172]	; (8005740 <m2np_idcmp+0xb8>)
    length      = 8 - length;
 8005694:	2308      	movs	r3, #8
 8005696:	1a18      	subs	r0, r3, r0
    check       = 0;
    
    switch (length & 7) {
 8005698:	2307      	movs	r3, #7
 800569a:	4018      	ands	r0, r3
 800569c:	0080      	lsls	r0, r0, #2
 800569e:	4b29      	ldr	r3, [pc, #164]	; (8005744 <m2np_idcmp+0xbc>)
 80056a0:	581b      	ldr	r3, [r3, r0]
 80056a2:	469f      	mov	pc, r3
    if ((length == 2) && (*(ot_u16*)dll.netconf.vid == 0)) {
 80056a4:	4b28      	ldr	r3, [pc, #160]	; (8005748 <m2np_idcmp+0xc0>)
 80056a6:	8adb      	ldrh	r3, [r3, #22]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f0      	bne.n	800568e <m2np_idcmp+0x6>
        return False;
 80056ac:	2000      	movs	r0, #0
 80056ae:	e033      	b.n	8005718 <m2np_idcmp+0x90>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 80056b0:	4a26      	ldr	r2, [pc, #152]	; (800574c <m2np_idcmp+0xc4>)
 80056b2:	e7ef      	b.n	8005694 <m2np_idcmp+0xc>
        case 0: check |= *stored_id++ ^ *id++; 
 80056b4:	7813      	ldrb	r3, [r2, #0]
 80056b6:	7808      	ldrb	r0, [r1, #0]
 80056b8:	4043      	eors	r3, r0
 80056ba:	3201      	adds	r2, #1
 80056bc:	3101      	adds	r1, #1
 80056be:	e000      	b.n	80056c2 <m2np_idcmp+0x3a>
    check       = 0;
 80056c0:	2300      	movs	r3, #0
        case 1: check |= *stored_id++ ^ *id++; 
 80056c2:	7810      	ldrb	r0, [r2, #0]
 80056c4:	780c      	ldrb	r4, [r1, #0]
 80056c6:	4060      	eors	r0, r4
 80056c8:	4303      	orrs	r3, r0
 80056ca:	3201      	adds	r2, #1
 80056cc:	3101      	adds	r1, #1
        case 2: check |= *stored_id++ ^ *id++; 
 80056ce:	1c55      	adds	r5, r2, #1
 80056d0:	7810      	ldrb	r0, [r2, #0]
 80056d2:	1c4c      	adds	r4, r1, #1
 80056d4:	780a      	ldrb	r2, [r1, #0]
 80056d6:	4050      	eors	r0, r2
 80056d8:	4318      	orrs	r0, r3
        case 3: check |= *stored_id++ ^ *id++; 
 80056da:	1c6a      	adds	r2, r5, #1
 80056dc:	782b      	ldrb	r3, [r5, #0]
 80056de:	1c61      	adds	r1, r4, #1
 80056e0:	7824      	ldrb	r4, [r4, #0]
 80056e2:	4063      	eors	r3, r4
 80056e4:	4318      	orrs	r0, r3
        case 4: check |= *stored_id++ ^ *id++; 
 80056e6:	1c55      	adds	r5, r2, #1
 80056e8:	7813      	ldrb	r3, [r2, #0]
 80056ea:	1c4c      	adds	r4, r1, #1
 80056ec:	780a      	ldrb	r2, [r1, #0]
 80056ee:	4053      	eors	r3, r2
 80056f0:	4303      	orrs	r3, r0
        case 5: check |= *stored_id++ ^ *id++; 
 80056f2:	1c6a      	adds	r2, r5, #1
 80056f4:	7828      	ldrb	r0, [r5, #0]
 80056f6:	1c61      	adds	r1, r4, #1
 80056f8:	7824      	ldrb	r4, [r4, #0]
 80056fa:	4060      	eors	r0, r4
 80056fc:	4303      	orrs	r3, r0
        case 6: check |= *stored_id++ ^ *id++; 
 80056fe:	1c54      	adds	r4, r2, #1
 8005700:	7810      	ldrb	r0, [r2, #0]
 8005702:	1c4a      	adds	r2, r1, #1
 8005704:	7809      	ldrb	r1, [r1, #0]
 8005706:	4048      	eors	r0, r1
 8005708:	4318      	orrs	r0, r3
        case 7: check |= *stored_id ^ *id;
 800570a:	7823      	ldrb	r3, [r4, #0]
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	4053      	eors	r3, r2
 8005710:	4318      	orrs	r0, r3
                break;
    }
    
    return (ot_bool)(check == 0);
 8005712:	4243      	negs	r3, r0
 8005714:	4158      	adcs	r0, r3
 8005716:	b2c0      	uxtb	r0, r0
}
 8005718:	bd30      	pop	{r4, r5, pc}
    check       = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	e7d7      	b.n	80056ce <m2np_idcmp+0x46>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 800571e:	0015      	movs	r5, r2
    switch (length & 7) {
 8005720:	000c      	movs	r4, r1
    check       = 0;
 8005722:	2000      	movs	r0, #0
 8005724:	e7d9      	b.n	80056da <m2np_idcmp+0x52>
 8005726:	2000      	movs	r0, #0
 8005728:	e7dd      	b.n	80056e6 <m2np_idcmp+0x5e>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 800572a:	0015      	movs	r5, r2
    switch (length & 7) {
 800572c:	000c      	movs	r4, r1
    check       = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	e7df      	b.n	80056f2 <m2np_idcmp+0x6a>
 8005732:	2300      	movs	r3, #0
 8005734:	e7e3      	b.n	80056fe <m2np_idcmp+0x76>
    stored_id   = (length == 8) ? dll.netconf.uid : dll.netconf.vid;
 8005736:	0014      	movs	r4, r2
    switch (length & 7) {
 8005738:	000a      	movs	r2, r1
    check       = 0;
 800573a:	2000      	movs	r0, #0
 800573c:	e7e5      	b.n	800570a <m2np_idcmp+0x82>
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	2000265e 	.word	0x2000265e
 8005744:	0800a3d0 	.word	0x0800a3d0
 8005748:	20002648 	.word	0x20002648
 800574c:	20002656 	.word	0x20002656

08005750 <m2np_footer>:
#endif



#ifndef EXTF_m2np_footer
OT_WEAK void m2np_footer() {
 8005750:	b510      	push	{r4, lr}

    /// RS and CRC will be appended during encoding, and their extra length
    /// will be added to the frame length field.  -1 is because the length
    /// byte is not included in the length field.
    m2np_footer_END:
    txq.getcursor[0] = q_span(&txq) - 1;
 8005752:	4c04      	ldr	r4, [pc, #16]	; (8005764 <m2np_footer+0x14>)
 8005754:	0020      	movs	r0, r4
 8005756:	f001 fbf6 	bl	8006f46 <q_span>
 800575a:	6863      	ldr	r3, [r4, #4]
 800575c:	3801      	subs	r0, #1
 800575e:	7018      	strb	r0, [r3, #0]
}
 8005760:	bd10      	pop	{r4, pc}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	20002d68 	.word	0x20002d68

08005768 <network_route_ff>:
ot_int network_route_ff(m2session* active) {
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	0004      	movs	r4, r0
    active->flags       = (rxq.front[1] & M2LC_RSCODE) >> 3;
 800576c:	4a48      	ldr	r2, [pc, #288]	; (8005890 <network_route_ff+0x128>)
 800576e:	68d3      	ldr	r3, [r2, #12]
 8005770:	785b      	ldrb	r3, [r3, #1]
 8005772:	10db      	asrs	r3, r3, #3
 8005774:	2508      	movs	r5, #8
 8005776:	402b      	ands	r3, r5
 8005778:	72c3      	strb	r3, [r0, #11]
    rxq.getcursor       = &rxq.front[4];
 800577a:	68d1      	ldr	r1, [r2, #12]
    m2np.header.fr_info = *rxq.getcursor++;
 800577c:	1d48      	adds	r0, r1, #5
 800577e:	6050      	str	r0, [r2, #4]
 8005780:	790b      	ldrb	r3, [r1, #4]
 8005782:	4a44      	ldr	r2, [pc, #272]	; (8005894 <network_route_ff+0x12c>)
 8005784:	7713      	strb	r3, [r2, #28]
    active->flags      |= (m2np.header.fr_info & ~M2_FLAG_RSCODE);     
 8005786:	b25b      	sxtb	r3, r3
 8005788:	2608      	movs	r6, #8
 800578a:	43b3      	bics	r3, r6
 800578c:	7ae6      	ldrb	r6, [r4, #11]
 800578e:	4333      	orrs	r3, r6
 8005790:	72e3      	strb	r3, [r4, #11]
    m2np.header.ext_info = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	7753      	strb	r3, [r2, #29]
    if (m2np.header.fr_info & M2FI_EXT) {
 8005796:	7f13      	ldrb	r3, [r2, #28]
 8005798:	421d      	tst	r5, r3
 800579a:	d005      	beq.n	80057a8 <network_route_ff+0x40>
        m2np.header.ext_info = *rxq.getcursor++;
 800579c:	1d88      	adds	r0, r1, #6
 800579e:	4a3c      	ldr	r2, [pc, #240]	; (8005890 <network_route_ff+0x128>)
 80057a0:	6050      	str	r0, [r2, #4]
 80057a2:	7949      	ldrb	r1, [r1, #5]
 80057a4:	4a3b      	ldr	r2, [pc, #236]	; (8005894 <network_route_ff+0x12c>)
 80057a6:	7751      	strb	r1, [r2, #29]
 80057a8:	2503      	movs	r5, #3
 80057aa:	401d      	ands	r5, r3
    use_m2np = ((m2np.header.fr_info & M2FI_ADDRMASK) != 0);
 80057ac:	002b      	movs	r3, r5
 80057ae:	1e5a      	subs	r2, r3, #1
 80057b0:	4193      	sbcs	r3, r2
 80057b2:	b2db      	uxtb	r3, r3
    if (active->netstate & M2_NETSTATE_CONNECTED) {
 80057b4:	79e2      	ldrb	r2, [r4, #7]
 80057b6:	07d1      	lsls	r1, r2, #31
 80057b8:	d434      	bmi.n	8005824 <network_route_ff+0xbc>
    else if (use_m2np) {
 80057ba:	2d00      	cmp	r5, #0
 80057bc:	d058      	beq.n	8005870 <network_route_ff+0x108>
        active->netstate  |= M2_NETSTATE_CONNECTED;
 80057be:	2301      	movs	r3, #1
 80057c0:	431a      	orrs	r2, r3
 80057c2:	71e2      	strb	r2, [r4, #7]
        active->subnet     = rxq.front[3];
 80057c4:	4832      	ldr	r0, [pc, #200]	; (8005890 <network_route_ff+0x128>)
 80057c6:	68c3      	ldr	r3, [r0, #12]
 80057c8:	78db      	ldrb	r3, [r3, #3]
 80057ca:	72a3      	strb	r3, [r4, #10]
        active->dialog_id  = q_readbyte(&rxq);
 80057cc:	f001 fc1d 	bl	800700a <q_readbyte>
 80057d0:	7260      	strb	r0, [r4, #9]
    if (m2np.header.fr_info & M2FI_DLLS) {
 80057d2:	4b30      	ldr	r3, [pc, #192]	; (8005894 <network_route_ff+0x12c>)
 80057d4:	7f1a      	ldrb	r2, [r3, #28]
 80057d6:	0653      	lsls	r3, r2, #25
 80057d8:	d44d      	bmi.n	8005876 <network_route_ff+0x10e>
    if (use_m2np) {
 80057da:	2d00      	cmp	r5, #0
 80057dc:	d04e      	beq.n	800587c <network_route_ff+0x114>
        m2np.rt.dlog.length = _idlen[ ((m2np.header.fr_info & M2FI_VID) != 0) ];
 80057de:	0912      	lsrs	r2, r2, #4
 80057e0:	2301      	movs	r3, #1
 80057e2:	4013      	ands	r3, r2
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	4a2c      	ldr	r2, [pc, #176]	; (8005898 <network_route_ff+0x130>)
 80057e8:	5cd1      	ldrb	r1, [r2, r3]
 80057ea:	4d2a      	ldr	r5, [pc, #168]	; (8005894 <network_route_ff+0x12c>)
 80057ec:	7129      	strb	r1, [r5, #4]
        m2np.rt.dlog.value  = q_markbyte(&rxq, m2np.rt.dlog.length);
 80057ee:	b209      	sxth	r1, r1
 80057f0:	4827      	ldr	r0, [pc, #156]	; (8005890 <network_route_ff+0x128>)
 80057f2:	f001 fbd6 	bl	8006fa2 <q_markbyte>
 80057f6:	60a8      	str	r0, [r5, #8]
        if ((m2np.header.fr_info & M2_FLAG_CRYPTO) == M2_FLAG_NLS) {
 80057f8:	7f2a      	ldrb	r2, [r5, #28]
 80057fa:	2360      	movs	r3, #96	; 0x60
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d03f      	beq.n	8005882 <network_route_ff+0x11a>
        if (m2np.header.fr_info & M2FI_UCAST) {
 8005802:	0793      	lsls	r3, r2, #30
 8005804:	d41a      	bmi.n	800583c <network_route_ff+0xd4>
        m2np.rt.hop_code = 0;
 8005806:	4b23      	ldr	r3, [pc, #140]	; (8005894 <network_route_ff+0x12c>)
 8005808:	2200      	movs	r2, #0
 800580a:	701a      	strb	r2, [r3, #0]
        if (m2np.header.fr_info & M2FI_ROUTE) {
 800580c:	7f1b      	ldrb	r3, [r3, #28]
 800580e:	075b      	lsls	r3, r3, #29
 8005810:	d43a      	bmi.n	8005888 <network_route_ff+0x120>
            route_val = m2qp_parse_frame(active);
 8005812:	0020      	movs	r0, r4
 8005814:	f000 fe32 	bl	800647c <m2qp_parse_frame>
 8005818:	1e04      	subs	r4, r0, #0
    if (route_val >= 0) {
 800581a:	db01      	blt.n	8005820 <network_route_ff+0xb8>
        m2np_footer( /* active */);
 800581c:	f7ff ff98 	bl	8005750 <m2np_footer>
}
 8005820:	0020      	movs	r0, r4
 8005822:	bd70      	pop	{r4, r5, r6, pc}
        active->dialog_id += use_m2np;
 8005824:	7a66      	ldrb	r6, [r4, #9]
 8005826:	199e      	adds	r6, r3, r6
 8005828:	b2f6      	uxtb	r6, r6
 800582a:	7266      	strb	r6, [r4, #9]
        if (active->dialog_id != q_readbyte(&rxq)) {
 800582c:	4818      	ldr	r0, [pc, #96]	; (8005890 <network_route_ff+0x128>)
 800582e:	f001 fbec 	bl	800700a <q_readbyte>
 8005832:	4286      	cmp	r6, r0
 8005834:	d0cd      	beq.n	80057d2 <network_route_ff+0x6a>
            return -1;
 8005836:	2401      	movs	r4, #1
 8005838:	4264      	negs	r4, r4
 800583a:	e7f1      	b.n	8005820 <network_route_ff+0xb8>
            active->flags      |= (target_len << 4);        //sets M2_FLAG_VID (SRC)
 800583c:	2301      	movs	r3, #1
 800583e:	401a      	ands	r2, r3
 8005840:	0111      	lsls	r1, r2, #4
 8005842:	7ae3      	ldrb	r3, [r4, #11]
 8005844:	430b      	orrs	r3, r1
 8005846:	72e3      	strb	r3, [r4, #11]
            active->netstate   |= M2_NETFLAG_FIRSTRX;
 8005848:	79e3      	ldrb	r3, [r4, #7]
 800584a:	2102      	movs	r1, #2
 800584c:	430b      	orrs	r3, r1
 800584e:	71e3      	strb	r3, [r4, #7]
            target_len          = _idlen[ target_len ];
 8005850:	0052      	lsls	r2, r2, #1
 8005852:	4b11      	ldr	r3, [pc, #68]	; (8005898 <network_route_ff+0x130>)
 8005854:	5ed5      	ldrsh	r5, [r2, r3]
            if (m2np_idcmp(target_len, q_markbyte(&rxq, target_len)) == False) {
 8005856:	0029      	movs	r1, r5
 8005858:	480d      	ldr	r0, [pc, #52]	; (8005890 <network_route_ff+0x128>)
 800585a:	f001 fba2 	bl	8006fa2 <q_markbyte>
 800585e:	0001      	movs	r1, r0
 8005860:	0028      	movs	r0, r5
 8005862:	f7ff ff11 	bl	8005688 <m2np_idcmp>
 8005866:	2800      	cmp	r0, #0
 8005868:	d1cd      	bne.n	8005806 <network_route_ff+0x9e>
                return -1;
 800586a:	2401      	movs	r4, #1
 800586c:	4264      	negs	r4, r4
 800586e:	e7d7      	b.n	8005820 <network_route_ff+0xb8>
        return -1;  //M2DP cannot be first frame!
 8005870:	2401      	movs	r4, #1
 8005872:	4264      	negs	r4, r4
 8005874:	e7d4      	b.n	8005820 <network_route_ff+0xb8>
        return -1;
 8005876:	2401      	movs	r4, #1
 8005878:	4264      	negs	r4, r4
 800587a:	e7d1      	b.n	8005820 <network_route_ff+0xb8>
        route_val = -1;     // placeholder until multiframe implemented
 800587c:	2401      	movs	r4, #1
 800587e:	4264      	negs	r4, r4
 8005880:	e7ce      	b.n	8005820 <network_route_ff+0xb8>
            return -1;
 8005882:	2401      	movs	r4, #1
 8005884:	4264      	negs	r4, r4
 8005886:	e7cb      	b.n	8005820 <network_route_ff+0xb8>
                return -1;
 8005888:	2401      	movs	r4, #1
 800588a:	4264      	negs	r4, r4
 800588c:	e7c8      	b.n	8005820 <network_route_ff+0xb8>
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	20002d54 	.word	0x20002d54
 8005894:	20002698 	.word	0x20002698
 8005898:	0800a3f0 	.word	0x0800a3f0

0800589c <m2advp_parse>:
    //ot_u8   txadv_buffer[10];
#endif


#ifndef EXTF_m2advp_parse
OT_WEAK m2session* m2advp_parse(void) {
 800589c:	b570      	push	{r4, r5, r6, lr}
    ot_int      slop;
    m2session*	s_next;
    ot_u16      pkt_ti;

    // Get the counter-ETA information from the inbound frame
    count.ubyte[UPPER]  = rxq.getcursor[3];
 800589e:	4b13      	ldr	r3, [pc, #76]	; (80058ec <m2advp_parse+0x50>)
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	78d3      	ldrb	r3, [r2, #3]
    count.ubyte[LOWER]  = rxq.getcursor[4];
 80058a4:	7914      	ldrb	r4, [r2, #4]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	431c      	orrs	r4, r3
    count.ushort       &= 0x7FFF;
 80058aa:	0464      	lsls	r4, r4, #17
 80058ac:	0c64      	lsrs	r4, r4, #17

    // stores the bg packet duration of the active channel.  We need this
    // in order to deal with timing skew.
    pkt_ti  = rm2_bgpkt_duration();
 80058ae:	f7fc f983 	bl	8001bb8 <rm2_bgpkt_duration>

    // Account for "slop" due to clock deviation, process latency,
    // and other such things.  Thus the follow-up session is
    // either a second BG scan (if too much slop), or it is FG
    // listening for the request.
    slop = (count.ushort / OT_GPTIM_ERRDIV);
 80058b2:	2300      	movs	r3, #0
    if (slop <= pkt_ti) {
 80058b4:	4283      	cmp	r3, r0
 80058b6:	dd0f      	ble.n	80058d8 <m2advp_parse+0x3c>
        netstate    	= M2_NETSTATE_REQRX;
    }
    else {
    	count.ushort   -= slop;
        scancode        = 0x80;
        netstate        = M2_NETSTATE_REQRX | M2_NETFLAG_BG;
 80058b8:	2660      	movs	r6, #96	; 0x60
        scancode        = 0x80;
 80058ba:	2580      	movs	r5, #128	; 0x80
    }

    // ensure that count value is never negative.
    if (count.sshort < 0) {
 80058bc:	0423      	lsls	r3, r4, #16
 80058be:	d413      	bmi.n	80058e8 <m2advp_parse+0x4c>
        count.sshort = 0;
    }

    // The next session is written in-place of the current session
    s_next              = session_top();
 80058c0:	f000 fa5e 	bl	8005d80 <session_top>
    s_next->applet      = &dll_scan_applet;
 80058c4:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <m2advp_parse+0x54>)
 80058c6:	6003      	str	r3, [r0, #0]
    s_next->counter     = count.ushort;
 80058c8:	8084      	strh	r4, [r0, #4]
    s_next->channel     = rxq.getcursor[2];
 80058ca:	4b08      	ldr	r3, [pc, #32]	; (80058ec <m2advp_parse+0x50>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	789b      	ldrb	r3, [r3, #2]
 80058d0:	7183      	strb	r3, [r0, #6]
    s_next->netstate    = netstate;
 80058d2:	71c6      	strb	r6, [r0, #7]
    s_next->extra       = scancode;
 80058d4:	7205      	strb	r5, [r0, #8]

    return s_next;
}
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
    	count.ushort   -= pkt_ti;
 80058d8:	1a24      	subs	r4, r4, r0
    	scancode        = otutils_encode_timeout(pkt_ti<<1);
 80058da:	0040      	lsls	r0, r0, #1
 80058dc:	b280      	uxth	r0, r0
 80058de:	f001 fc15 	bl	800710c <otutils_encode_timeout>
 80058e2:	0005      	movs	r5, r0
        netstate    	= M2_NETSTATE_REQRX;
 80058e4:	2620      	movs	r6, #32
 80058e6:	e7e9      	b.n	80058bc <m2advp_parse+0x20>
        count.sshort = 0;
 80058e8:	2400      	movs	r4, #0
 80058ea:	e7e9      	b.n	80058c0 <m2advp_parse+0x24>
 80058ec:	20002d54 	.word	0x20002d54
 80058f0:	080051ad 	.word	0x080051ad

080058f4 <m2advp_open>:
#endif



#ifndef EXTF_m2advp_open
OT_WEAK void m2advp_open(m2session* follower) {
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	0005      	movs	r5, r0
    q_empty(&txq);
 80058f8:	4c11      	ldr	r4, [pc, #68]	; (8005940 <m2advp_open+0x4c>)
 80058fa:	0020      	movs	r0, r4
 80058fc:	f001 fb40 	bl	8006f80 <q_empty>
    txq.getcursor += 2;     //Bypass unused length and Link CTL bytes
 8005900:	6863      	ldr	r3, [r4, #4]
 8005902:	3302      	adds	r3, #2
 8005904:	6063      	str	r3, [r4, #4]
    
    q_writebyte(&txq, (BG_FRAMESIZE-1));    //Dummy Length value (not actually sent)
 8005906:	2105      	movs	r1, #5
 8005908:	0020      	movs	r0, r4
 800590a:	f001 fb4f 	bl	8006fac <q_writebyte>
    q_writebyte(&txq, 0);                   //Dummy Link-Control (not actually sent)
 800590e:	2100      	movs	r1, #0
 8005910:	0020      	movs	r0, r4
 8005912:	f001 fb4b 	bl	8006fac <q_writebyte>
    q_writebyte(&txq, 0);                   //Dummy TX-EIRP (updated by RF driver)
 8005916:	2100      	movs	r1, #0
 8005918:	0020      	movs	r0, r4
 800591a:	f001 fb47 	bl	8006fac <q_writebyte>
    
    // This byte is two nibbles: Subnet specifier and AdvP ID (F)
    q_writebyte(&txq, (follower->subnet | 0x0F));
 800591e:	7aa9      	ldrb	r1, [r5, #10]
 8005920:	230f      	movs	r3, #15
 8005922:	4319      	orrs	r1, r3
 8005924:	0020      	movs	r0, r4
 8005926:	f001 fb41 	bl	8006fac <q_writebyte>
    
    // Follower session channel
    q_writebyte(&txq, follower->channel);
 800592a:	79a9      	ldrb	r1, [r5, #6]
 800592c:	0020      	movs	r0, r4
 800592e:	f001 fb3d 	bl	8006fac <q_writebyte>
    
    // Follower wait time is set to dll counter
    dll.counter = follower->counter;
 8005932:	88a9      	ldrh	r1, [r5, #4]
 8005934:	4b03      	ldr	r3, [pc, #12]	; (8005944 <m2advp_open+0x50>)
 8005936:	8059      	strh	r1, [r3, #2]
    q_writeshort(&txq, follower->counter);
 8005938:	0020      	movs	r0, r4
 800593a:	f001 fb3c 	bl	8006fb6 <q_writeshort>
}
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	20002d68 	.word	0x20002d68
 8005944:	20002648 	.word	0x20002648

08005948 <m2advp_update>:
#ifndef EXTF_m2advp_update
OT_WEAK void m2advp_update(ot_u16 countdown) {
///@note In this function we manually reset the txq cursors to the places
///      they need to be for the encoder.  The encoder implementation may or
///      may not do this automatically, but it is safer to be redundant.
    txq.getcursor       = &txq.front[2];                //No length, link-CTL bytes in BG Frame
 8005948:	4b06      	ldr	r3, [pc, #24]	; (8005964 <m2advp_update+0x1c>)
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	1c91      	adds	r1, r2, #2
 800594e:	6059      	str	r1, [r3, #4]
    txq.putcursor       = txq.getcursor;
    txq.putcursor      += 3;                            //Skip EIRP, Subnet, Channel bytes
    *txq.putcursor++    = ((ot_u8*)&countdown)[UPPER];  //Countdown (upper 8 bits)
 8005950:	1d91      	adds	r1, r2, #6
 8005952:	6099      	str	r1, [r3, #8]
 8005954:	0a01      	lsrs	r1, r0, #8
 8005956:	7151      	strb	r1, [r2, #5]
    *txq.putcursor++    = ((ot_u8*)&countdown)[LOWER];  //Countdown (lower 8 bits)
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	1c51      	adds	r1, r2, #1
 800595c:	6099      	str	r1, [r3, #8]
 800595e:	7010      	strb	r0, [r2, #0]
}
 8005960:	4770      	bx	lr
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	20002d68 	.word	0x20002d68

08005968 <m2advp_close>:
#endif


#ifndef EXTF_m2advp_close
OT_WEAK void m2advp_close() {
}
 8005968:	4770      	bx	lr
	...

0800596c <m2tgram_parse>:

///@todo This is patchwork code, just to deliver basic functionality with
/// with existing buffer structure and M2QP impl.
extern alp_tmpl m2alp;

m2session* m2tgram_parse(void) {
 800596c:	b510      	push	{r4, lr}
/// Telegram format is made into an ALP frame and sent to telegram forwarder
/// ALP (ID = ???)
/// @todo ID currently set to 16, but subject to change

	// Shift 14 byte telegram by four bytes to make room for ALP header
	for (ot_int i=13; i>=0; i--) {
 800596e:	230d      	movs	r3, #13
 8005970:	e006      	b.n	8005980 <m2tgram_parse+0x14>
		rxq.getcursor[i+4] = rxq.getcursor[i];
 8005972:	4a0f      	ldr	r2, [pc, #60]	; (80059b0 <m2tgram_parse+0x44>)
 8005974:	6852      	ldr	r2, [r2, #4]
 8005976:	1d19      	adds	r1, r3, #4
 8005978:	5cd0      	ldrb	r0, [r2, r3]
 800597a:	5450      	strb	r0, [r2, r1]
	for (ot_int i=13; i>=0; i--) {
 800597c:	3b01      	subs	r3, #1
 800597e:	b21b      	sxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	daf6      	bge.n	8005972 <m2tgram_parse+0x6>
	}

	// Putcursor re-oriented to include only ALP header and telegram payload
	rxq.putcursor    = rxq.getcursor + 4 + 14;
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <m2tgram_parse+0x44>)
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	0011      	movs	r1, r2
 800598a:	3112      	adds	r1, #18
 800598c:	6099      	str	r1, [r3, #8]

	// Put ALP header
	rxq.getcursor[0] = 0xD0;
 800598e:	21d0      	movs	r1, #208	; 0xd0
 8005990:	7011      	strb	r1, [r2, #0]
	rxq.getcursor[1] = 14;
 8005992:	220e      	movs	r2, #14
 8005994:	6859      	ldr	r1, [r3, #4]
 8005996:	704a      	strb	r2, [r1, #1]
	rxq.getcursor[2] = 16;
 8005998:	3202      	adds	r2, #2
 800599a:	6859      	ldr	r1, [r3, #4]
 800599c:	708a      	strb	r2, [r1, #2]
	rxq.getcursor[3] = 0;
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	70da      	strb	r2, [r3, #3]

	alp_parse_message(&m2alp, AUTH_GUEST);
 80059a4:	4903      	ldr	r1, [pc, #12]	; (80059b4 <m2tgram_parse+0x48>)
 80059a6:	4804      	ldr	r0, [pc, #16]	; (80059b8 <m2tgram_parse+0x4c>)
 80059a8:	f001 f99a 	bl	8006ce0 <alp_parse_message>

	return NULL;
}
 80059ac:	2000      	movs	r0, #0
 80059ae:	bd10      	pop	{r4, pc}
 80059b0:	20002d54 	.word	0x20002d54
 80059b4:	20002738 	.word	0x20002738
 80059b8:	20002714 	.word	0x20002714

080059bc <network_parse_bf>:
OT_WEAK m2session* network_parse_bf(void) {
 80059bc:	b510      	push	{r4, lr}
	    switch (rxq.getcursor[1] & 15) {
 80059be:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <network_parse_bf+0x24>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	785a      	ldrb	r2, [r3, #1]
 80059c4:	230f      	movs	r3, #15
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d004      	beq.n	80059d6 <network_parse_bf+0x1a>
 80059cc:	2b0f      	cmp	r3, #15
 80059ce:	d105      	bne.n	80059dc <network_parse_bf+0x20>
	    case 15:    s_next = m2advp_parse();        break;
 80059d0:	f7ff ff64 	bl	800589c <m2advp_parse>
	}
 80059d4:	bd10      	pop	{r4, pc}
	    case 1:     s_next = m2tgram_parse();       break;
 80059d6:	f7ff ffc9 	bl	800596c <m2tgram_parse>
 80059da:	e7fb      	b.n	80059d4 <network_parse_bf+0x18>
	    s_next  = NULL;
 80059dc:	2000      	movs	r0, #0
	    return s_next;
 80059de:	e7f9      	b.n	80059d4 <network_parse_bf+0x18>
 80059e0:	20002d54 	.word	0x20002d54

080059e4 <rm2_mac_filter>:




#ifndef EXTF_rm2_mac_filter
OT_WEAK ot_bool rm2_mac_filter() {
 80059e4:	b530      	push	{r4, r5, lr}

    // TX EIRP encoded value    = (dBm + 40) * 2
    // TX EIRP dBm              = ((encoded value) / 2) - 40
    // Link Loss                = TX EIRP dBm - Detected RX dBm
    // Link Quality Filter      = (Link Loss <= Link Loss Limit)
    ot_u8 qualifier = (ot_u8)(radio.last_linkloss <= ((ot_int)phymac[0].link_qual)<<1);
 80059e6:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <rm2_mac_filter+0x4c>)
 80059e8:	2206      	movs	r2, #6
 80059ea:	5e9a      	ldrsh	r2, [r3, r2]
 80059ec:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <rm2_mac_filter+0x50>)
 80059ee:	795b      	ldrb	r3, [r3, #5]
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	0fd0      	lsrs	r0, r2, #31
 80059f4:	17d9      	asrs	r1, r3, #31
 80059f6:	4293      	cmp	r3, r2
 80059f8:	4148      	adcs	r0, r1
 80059fa:	b2c0      	uxtb	r0, r0
    {   ot_u8 fr_subnet, dsm, specifier, mask;
        fr_subnet   = rxq.front[3];
 80059fc:	4b0e      	ldr	r3, [pc, #56]	; (8005a38 <rm2_mac_filter+0x54>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	78da      	ldrb	r2, [r3, #3]
        dsm         = dll.netconf.subnet & 0x0F;
 8005a02:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <rm2_mac_filter+0x58>)
 8005a04:	7e1b      	ldrb	r3, [r3, #24]
 8005a06:	240f      	movs	r4, #15
 8005a08:	210f      	movs	r1, #15
 8005a0a:	4019      	ands	r1, r3
        mask        = fr_subnet & dsm;
 8005a0c:	000d      	movs	r5, r1
 8005a0e:	4015      	ands	r5, r2
        specifier   = (fr_subnet ^ dll.netconf.subnet) & 0xF0;
 8005a10:	4053      	eors	r3, r2
 8005a12:	43a3      	bics	r3, r4
        fr_subnet  &= 0xF0;
 8005a14:	43a2      	bics	r2, r4
        qualifier  &= (ot_bool)(((fr_subnet == 0xF0) || (specifier == 0)) && (mask == dsm));
 8005a16:	2af0      	cmp	r2, #240	; 0xf0
 8005a18:	d001      	beq.n	8005a1e <rm2_mac_filter+0x3a>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <rm2_mac_filter+0x44>
 8005a1e:	42a9      	cmp	r1, r5
 8005a20:	d004      	beq.n	8005a2c <rm2_mac_filter+0x48>
 8005a22:	2300      	movs	r3, #0
    }
    return qualifier;
 8005a24:	4018      	ands	r0, r3
}
 8005a26:	bd30      	pop	{r4, r5, pc}
        qualifier  &= (ot_bool)(((fr_subnet == 0xF0) || (specifier == 0)) && (mask == dsm));
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e7fb      	b.n	8005a24 <rm2_mac_filter+0x40>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e7f9      	b.n	8005a24 <rm2_mac_filter+0x40>
 8005a30:	200026b8 	.word	0x200026b8
 8005a34:	200026c4 	.word	0x200026c4
 8005a38:	20002d54 	.word	0x20002d54
 8005a3c:	20002648 	.word	0x20002648

08005a40 <rm2_channel_refresh>:
#endif


#ifndef EXTF_rm2_channel_refresh
OT_WEAK void rm2_channel_refresh(void) {
    radio.flags |= RADIO_FLAG_REFRESH;
 8005a40:	4a02      	ldr	r2, [pc, #8]	; (8005a4c <rm2_channel_refresh+0xc>)
 8005a42:	7853      	ldrb	r3, [r2, #1]
 8005a44:	2101      	movs	r1, #1
 8005a46:	430b      	orrs	r3, r1
 8005a48:	7053      	strb	r3, [r2, #1]
}
 8005a4a:	4770      	bx	lr
 8005a4c:	200026b8 	.word	0x200026b8

08005a50 <rm2_channel_lookup>:
}
#endif


#ifndef EXTF_rm2_channel_lookup
OT_WEAK ot_bool rm2_channel_lookup(ot_u8 chan_id, vlFILE* fp) {
 8005a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a52:	46d6      	mov	lr, sl
 8005a54:	464f      	mov	r7, r9
 8005a56:	4646      	mov	r6, r8
 8005a58:	b5c0      	push	{r6, r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	0007      	movs	r7, r0
 8005a5e:	000d      	movs	r5, r1
    ot_u8       spectrum_id;
    ot_int      i;
    volatile ot_uni16    scratch;

    // Strip the FEC & Spread bits
    spectrum_id = chan_id & 0x3F;
 8005a60:	263f      	movs	r6, #63	; 0x3f
 8005a62:	4006      	ands	r6, r0

    /// Populate the phymac flags: these are not frequently used
    /// @todo I might want to do this in radio_init() instead
    scratch.ushort  = vl_read(fp, 2);
 8005a64:	2102      	movs	r1, #2
 8005a66:	0028      	movs	r0, r5
 8005a68:	f001 fd76 	bl	8007558 <vl_read>
 8005a6c:	ab01      	add	r3, sp, #4
 8005a6e:	8018      	strh	r0, [r3, #0]
    phymac[0].flags = scratch.ubyte[0];
 8005a70:	781a      	ldrb	r2, [r3, #0]
 8005a72:	4b33      	ldr	r3, [pc, #204]	; (8005b40 <rm2_channel_lookup+0xf0>)
 8005a74:	701a      	strb	r2, [r3, #0]

    /// Look through the channel list to find the one with matching spectrum id.
    /// The channel list is not necessarily sorted.
    /// @todo might do this with vl_get() in the future
    for (i=6; i<fp->length; i+=6) {
 8005a76:	2406      	movs	r4, #6
 8005a78:	892b      	ldrh	r3, [r5, #8]
 8005a7a:	429c      	cmp	r4, r3
 8005a7c:	da5d      	bge.n	8005b3a <rm2_channel_lookup+0xea>
        scratch.ushort = vl_read(fp, i);
 8005a7e:	b2a4      	uxth	r4, r4
 8005a80:	0021      	movs	r1, r4
 8005a82:	0028      	movs	r0, r5
 8005a84:	f001 fd68 	bl	8007558 <vl_read>
 8005a88:	ab01      	add	r3, sp, #4
 8005a8a:	8018      	strh	r0, [r3, #0]

        if ((spectrum_id == scratch.ubyte[0]) \
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	42b3      	cmp	r3, r6
 8005a92:	d009      	beq.n	8005aa8 <rm2_channel_lookup+0x58>
        || ((spectrum_id & 0xF0) == scratch.ubyte[0])) {
 8005a94:	ab01      	add	r3, sp, #4
 8005a96:	781a      	ldrb	r2, [r3, #0]
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	2330      	movs	r3, #48	; 0x30
 8005a9c:	403b      	ands	r3, r7
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d002      	beq.n	8005aa8 <rm2_channel_lookup+0x58>
    for (i=6; i<fp->length; i+=6) {
 8005aa2:	3406      	adds	r4, #6
 8005aa4:	b224      	sxth	r4, r4
 8005aa6:	e7e7      	b.n	8005a78 <rm2_channel_lookup+0x28>
            ot_u8 old_chan_id   = phymac[0].channel;
 8005aa8:	4b25      	ldr	r3, [pc, #148]	; (8005b40 <rm2_channel_lookup+0xf0>)
 8005aaa:	4698      	mov	r8, r3
 8005aac:	789b      	ldrb	r3, [r3, #2]
 8005aae:	469a      	mov	sl, r3
            ot_u8 old_tx_eirp   = (phymac[0].tx_eirp & 0x7f);
 8005ab0:	4643      	mov	r3, r8
 8005ab2:	791b      	ldrb	r3, [r3, #4]
 8005ab4:	227f      	movs	r2, #127	; 0x7f
 8005ab6:	401a      	ands	r2, r3
 8005ab8:	4691      	mov	r9, r2

            phymac[0].tg        = rm2_default_tgd(chan_id);
 8005aba:	0038      	movs	r0, r7
 8005abc:	f7fc f874 	bl	8001ba8 <rm2_default_tgd>
 8005ac0:	4643      	mov	r3, r8
 8005ac2:	7058      	strb	r0, [r3, #1]
            phymac[0].channel   = chan_id;
 8005ac4:	709f      	strb	r7, [r3, #2]
          //phymac[0].autoscale = scratch.ubyte[1];

            scratch.ushort      = vl_read(fp, i+2);
 8005ac6:	1ca1      	adds	r1, r4, #2
 8005ac8:	b289      	uxth	r1, r1
 8005aca:	0028      	movs	r0, r5
 8005acc:	f001 fd44 	bl	8007558 <vl_read>
 8005ad0:	ae01      	add	r6, sp, #4
 8005ad2:	8030      	strh	r0, [r6, #0]
            phymac[0].tx_eirp   = scratch.ubyte[0] & 0x80;
 8005ad4:	7833      	ldrb	r3, [r6, #0]
 8005ad6:	227f      	movs	r2, #127	; 0x7f
 8005ad8:	4393      	bics	r3, r2
 8005ada:	4642      	mov	r2, r8
 8005adc:	7113      	strb	r3, [r2, #4]
            phymac[0].tx_eirp  |= rm2_clip_txeirp(scratch.ubyte[0]);
 8005ade:	7830      	ldrb	r0, [r6, #0]
 8005ae0:	b2c0      	uxtb	r0, r0
 8005ae2:	f7fb fbcd 	bl	8001280 <rm2_clip_txeirp>
 8005ae6:	4643      	mov	r3, r8
 8005ae8:	791b      	ldrb	r3, [r3, #4]
 8005aea:	4318      	orrs	r0, r3
 8005aec:	4643      	mov	r3, r8
 8005aee:	7118      	strb	r0, [r3, #4]
            phymac[0].link_qual = scratch.ubyte[1];
 8005af0:	7873      	ldrb	r3, [r6, #1]
 8005af2:	4642      	mov	r2, r8
 8005af4:	7153      	strb	r3, [r2, #5]

            ///@todo Try this: *(ot_u16*)&phymac[0].cs_thr = vl_read(fp, i+4);  
            ///it will need some rearrangement in phymac struct
            /// Convert thresholds from DASH7 numeric encoding to native encoding
            scratch.ushort      = vl_read(fp, i+4);
 8005af6:	1d21      	adds	r1, r4, #4
 8005af8:	b289      	uxth	r1, r1
 8005afa:	0028      	movs	r0, r5
 8005afc:	f001 fd2c 	bl	8007558 <vl_read>
 8005b00:	8030      	strh	r0, [r6, #0]
            //phymac[0].cs_thr    = __THR(scratch.ubyte[0]);
            //phymac[0].cca_thr   = scratch.ubyte[1];
            //phymac[0].cs_thr    = rm2_calc_rssithr(phymac[0].cs_thr);
            //phymac[0].cca_thr   = rm2_calc_rssithr(phymac[0].cca_thr);
            radio.threshold.raw = scratch.ubyte[0];
 8005b02:	7830      	ldrb	r0, [r6, #0]
 8005b04:	b2c0      	uxtb	r0, r0
 8005b06:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <rm2_channel_lookup+0xf4>)
 8005b08:	70d8      	strb	r0, [r3, #3]
            phymac[0].cs_thr    = rm2_calc_rssithr( (ot_u8)(radio.threshold.raw + radio.threshold.offset) );
 8005b0a:	789b      	ldrb	r3, [r3, #2]
 8005b0c:	18c0      	adds	r0, r0, r3
 8005b0e:	b2c0      	uxtb	r0, r0
 8005b10:	f7fb fbbc 	bl	800128c <rm2_calc_rssithr>
 8005b14:	4643      	mov	r3, r8
 8005b16:	7198      	strb	r0, [r3, #6]
            phymac[0].cca_thr   = rm2_calc_rssithr( scratch.ubyte[1] );
 8005b18:	7870      	ldrb	r0, [r6, #1]
 8005b1a:	b2c0      	uxtb	r0, r0
 8005b1c:	f7fb fbb6 	bl	800128c <rm2_calc_rssithr>
 8005b20:	4643      	mov	r3, r8
 8005b22:	71d8      	strb	r0, [r3, #7]
            
            rm2_enter_channel(old_chan_id, old_tx_eirp);
 8005b24:	4649      	mov	r1, r9
 8005b26:	4650      	mov	r0, sl
 8005b28:	f7fb fbce 	bl	80012c8 <rm2_enter_channel>
            return True;
 8005b2c:	2001      	movs	r0, #1
        }
    }
    return False;
}
 8005b2e:	b002      	add	sp, #8
 8005b30:	bc1c      	pop	{r2, r3, r4}
 8005b32:	4690      	mov	r8, r2
 8005b34:	4699      	mov	r9, r3
 8005b36:	46a2      	mov	sl, r4
 8005b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return False;
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	e7f7      	b.n	8005b2e <rm2_channel_lookup+0xde>
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	200026c4 	.word	0x200026c4
 8005b44:	200026b8 	.word	0x200026b8

08005b48 <rm2_init>:
OT_WEAK void rm2_init(void) {
 8005b48:	b510      	push	{r4, lr}
    radio.state     = RADIO_Idle;
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <rm2_init+0x38>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	701a      	strb	r2, [r3, #0]
    radio.flags     = RADIO_FLAG_REFRESH;
 8005b50:	2101      	movs	r1, #1
 8005b52:	7059      	strb	r1, [r3, #1]
    radio.evtdone   = &otutils_sig2_null;
 8005b54:	490b      	ldr	r1, [pc, #44]	; (8005b84 <rm2_init+0x3c>)
 8005b56:	6099      	str	r1, [r3, #8]
    radio.threshold.offset  = 0;
 8005b58:	709a      	strb	r2, [r3, #2]
    radio.threshold.raw     = 0;
 8005b5a:	70da      	strb	r2, [r3, #3]
    phymac[0].channel   = 0xF0;
 8005b5c:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <rm2_init+0x40>)
 8005b5e:	32f0      	adds	r2, #240	; 0xf0
 8005b60:	709a      	strb	r2, [r3, #2]
    phymac[0].tx_eirp   = 0x7F;
 8005b62:	3a71      	subs	r2, #113	; 0x71
 8005b64:	711a      	strb	r2, [r3, #4]
    fp                  = ISF_open_su( ISF_ID(channel_configuration) );
 8005b66:	2002      	movs	r0, #2
 8005b68:	f001 fdad 	bl	80076c6 <ISF_open_su>
 8005b6c:	0004      	movs	r4, r0
    rm2_channel_lookup(0x18, fp);
 8005b6e:	0001      	movs	r1, r0
 8005b70:	2018      	movs	r0, #24
 8005b72:	f7ff ff6d 	bl	8005a50 <rm2_channel_lookup>
    vl_close(fp);
 8005b76:	0020      	movs	r0, r4
 8005b78:	f001 fd70 	bl	800765c <vl_close>
}
 8005b7c:	bd10      	pop	{r4, pc}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	200026b8 	.word	0x200026b8
 8005b84:	080070df 	.word	0x080070df
 8005b88:	200026c4 	.word	0x200026c4

08005b8c <rm2_test_channel>:
OT_WEAK ot_bool rm2_test_channel(ot_u8 channel) {
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	0005      	movs	r5, r0
    test = rm2_channel_fastcheck(channel);
 8005b90:	f7fb fb80 	bl	8001294 <rm2_channel_fastcheck>
 8005b94:	1e04      	subs	r4, r0, #0
    if (test == False) {
 8005b96:	d001      	beq.n	8005b9c <rm2_test_channel+0x10>
}
 8005b98:	0020      	movs	r0, r4
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
        fp      = ISF_open_su( ISF_ID(channel_configuration) );
 8005b9c:	2002      	movs	r0, #2
 8005b9e:	f001 fd92 	bl	80076c6 <ISF_open_su>
 8005ba2:	0006      	movs	r6, r0
        test    = rm2_channel_lookup(channel, fp);
 8005ba4:	0001      	movs	r1, r0
 8005ba6:	0028      	movs	r0, r5
 8005ba8:	f7ff ff52 	bl	8005a50 <rm2_channel_lookup>
 8005bac:	0004      	movs	r4, r0
        vl_close(fp);
 8005bae:	0030      	movs	r0, r6
 8005bb0:	f001 fd54 	bl	800765c <vl_close>
 8005bb4:	e7f0      	b.n	8005b98 <rm2_test_channel+0xc>
	...

08005bb8 <rm2_test_chanlist>:
OT_WEAK ot_bool rm2_test_chanlist() {
 8005bb8:	b570      	push	{r4, r5, r6, lr}
    fp = ISF_open_su( ISF_ID(channel_configuration) );
 8005bba:	2002      	movs	r0, #2
 8005bbc:	f001 fd83 	bl	80076c6 <ISF_open_su>
 8005bc0:	0006      	movs	r6, r0
    for (i=0, test=False; i<dll.comm.tx_channels; i++) {
 8005bc2:	2400      	movs	r4, #0
 8005bc4:	4a0f      	ldr	r2, [pc, #60]	; (8005c04 <rm2_test_chanlist+0x4c>)
 8005bc6:	2330      	movs	r3, #48	; 0x30
 8005bc8:	5cd3      	ldrb	r3, [r2, r3]
 8005bca:	429c      	cmp	r4, r3
 8005bcc:	da10      	bge.n	8005bf0 <rm2_test_chanlist+0x38>
        next_channel = dll.comm.tx_chanlist[i];
 8005bce:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <rm2_test_chanlist+0x4c>)
 8005bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd2:	5d1d      	ldrb	r5, [r3, r4]
        if (rm2_channel_fastcheck(next_channel)) {
 8005bd4:	0028      	movs	r0, r5
 8005bd6:	f7fb fb5d 	bl	8001294 <rm2_channel_fastcheck>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d10e      	bne.n	8005bfc <rm2_test_chanlist+0x44>
        if (rm2_channel_lookup(next_channel, fp)) {
 8005bde:	0031      	movs	r1, r6
 8005be0:	0028      	movs	r0, r5
 8005be2:	f7ff ff35 	bl	8005a50 <rm2_channel_lookup>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d10a      	bne.n	8005c00 <rm2_test_chanlist+0x48>
    for (i=0, test=False; i<dll.comm.tx_channels; i++) {
 8005bea:	3401      	adds	r4, #1
 8005bec:	b224      	sxth	r4, r4
 8005bee:	e7e9      	b.n	8005bc4 <rm2_test_chanlist+0xc>
 8005bf0:	2400      	movs	r4, #0
    vl_close(fp);
 8005bf2:	0030      	movs	r0, r6
 8005bf4:	f001 fd32 	bl	800765c <vl_close>
}
 8005bf8:	0020      	movs	r0, r4
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
        	test = True;
 8005bfc:	2401      	movs	r4, #1
 8005bfe:	e7f8      	b.n	8005bf2 <rm2_test_chanlist+0x3a>
        	test = True;
 8005c00:	2401      	movs	r4, #1
 8005c02:	e7f6      	b.n	8005bf2 <rm2_test_chanlist+0x3a>
 8005c04:	20002648 	.word	0x20002648

08005c08 <session_applet_null>:

session_struct session;



void session_applet_null(m2session* a) { }
 8005c08:	4770      	bx	lr

08005c0a <sub_store_session>:



static m2session* sub_store_session(m2session* store, ot_app applet, ot_u16 wait, ot_u8 netstate, ot_u8 channel) {
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	0004      	movs	r4, r0
 8005c0e:	a802      	add	r0, sp, #8
 8005c10:	7800      	ldrb	r0, [r0, #0]
/// Attach session to location specified
    store->applet       = applet;
 8005c12:	6021      	str	r1, [r4, #0]
    store->counter      = wait;
 8005c14:	80a2      	strh	r2, [r4, #4]
    store->channel      = channel;
 8005c16:	71a0      	strb	r0, [r4, #6]
    store->netstate     = netstate;
 8005c18:	71e3      	strb	r3, [r4, #7]
    store->extra        = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	7223      	strb	r3, [r4, #8]
    store->dialog_id    = rand_prn8();
 8005c1e:	f002 fced 	bl	80085fc <rand_prn8>
 8005c22:	7260      	strb	r0, [r4, #9]
    return store;
}
 8005c24:	0020      	movs	r0, r4
 8005c26:	bd10      	pop	{r4, pc}

08005c28 <session_init>:



#ifndef EXTF_session_init
void session_init() {
    session.top = &session.heap[_END];
 8005c28:	4b02      	ldr	r3, [pc, #8]	; (8005c34 <session_init+0xc>)
 8005c2a:	001a      	movs	r2, r3
 8005c2c:	3234      	adds	r2, #52	; 0x34
 8005c2e:	601a      	str	r2, [r3, #0]
}
 8005c30:	4770      	bx	lr
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	200026cc 	.word	0x200026cc

08005c38 <session_getnext>:
#ifndef EXTF_session_getnext
OT_WEAK ot_uint session_getnext() {
/// Not idiot proof.  Do not call this unless you have already checked
/// session_notempty().
    ot_uint wait;
    wait                    = session.top->counter;
 8005c38:	4b02      	ldr	r3, [pc, #8]	; (8005c44 <session_getnext+0xc>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	8898      	ldrh	r0, [r3, #4]
    session.top->counter    = 0;
 8005c3e:	2200      	movs	r2, #0
 8005c40:	809a      	strh	r2, [r3, #4]
    return wait;
}
 8005c42:	4770      	bx	lr
 8005c44:	200026cc 	.word	0x200026cc

08005c48 <session_new>:
#endif



#ifndef EXTF_session_new
OT_WEAK m2session* session_new(ot_app applet, ot_u16 wait, ot_u8 channel, ot_u8 netstate) {
 8005c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	0004      	movs	r4, r0
 8005c4e:	000d      	movs	r5, r1
 8005c50:	0017      	movs	r7, r2
 8005c52:	001e      	movs	r6, r3
    ot_u8* src;
    ot_uint length;

    // Always reserve an extra session for extension.
    // i.e. There must be two or more free sessions to do session_new()
    if (session.top <= &session.heap[_2ND] ) {
 8005c54:	4b0d      	ldr	r3, [pc, #52]	; (8005c8c <session_new+0x44>)
 8005c56:	6819      	ldr	r1, [r3, #0]
 8005c58:	3310      	adds	r3, #16
 8005c5a:	4299      	cmp	r1, r3
 8005c5c:	d914      	bls.n	8005c88 <session_new+0x40>
        return NULL;
    }

    // We're adding a new session to the bottom of the heap/stack/queue...
    src         = (ot_u8*)session.top;
    session.top--;
 8005c5e:	0008      	movs	r0, r1
 8005c60:	380c      	subs	r0, #12
 8005c62:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <session_new+0x44>)
 8005c64:	6010      	str	r0, [r2, #0]
    length      = (ot_uint)((ot_u8*)&session.heap[_END] - src);
 8005c66:	3234      	adds	r2, #52	; 0x34
 8005c68:	1a52      	subs	r2, r2, r1
 8005c6a:	b292      	uxth	r2, r2

    // Only do the copy if the size is not zero
    if (length != 0) {
 8005c6c:	2a00      	cmp	r2, #0
 8005c6e:	d108      	bne.n	8005c82 <session_new+0x3a>
        memcpy( (ot_u8*)session.top, src, length);
    }

    return sub_store_session(&session.heap[_LAST], applet, wait, netstate, channel);
 8005c70:	9700      	str	r7, [sp, #0]
 8005c72:	0033      	movs	r3, r6
 8005c74:	002a      	movs	r2, r5
 8005c76:	0021      	movs	r1, r4
 8005c78:	4805      	ldr	r0, [pc, #20]	; (8005c90 <session_new+0x48>)
 8005c7a:	f7ff ffc6 	bl	8005c0a <sub_store_session>
}
 8005c7e:	b003      	add	sp, #12
 8005c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy( (ot_u8*)session.top, src, length);
 8005c82:	f002 fc6f 	bl	8008564 <ot_memcpy>
 8005c86:	e7f3      	b.n	8005c70 <session_new+0x28>
        return NULL;
 8005c88:	2000      	movs	r0, #0
 8005c8a:	e7f8      	b.n	8005c7e <session_new+0x36>
 8005c8c:	200026cc 	.word	0x200026cc
 8005c90:	200026f4 	.word	0x200026f4

08005c94 <session_extend>:
#endif



#ifndef EXTF_session_extend
OT_WEAK m2session* session_extend(ot_app applet, ot_u16 wait, ot_u8 channel, ot_u8 netstate) {
 8005c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c96:	b085      	sub	sp, #20
 8005c98:	9003      	str	r0, [sp, #12]
 8005c9a:	000e      	movs	r6, r1
 8005c9c:	0017      	movs	r7, r2
 8005c9e:	001d      	movs	r5, r3
    m2session* extend;

    // If not one free session, there's no room!
    if (session.top <= &session.heap[_1ST]) {
 8005ca0:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <session_extend+0x50>)
 8005ca2:	cb02      	ldmia	r3!, {r1}
 8005ca4:	4299      	cmp	r1, r3
 8005ca6:	d91b      	bls.n	8005ce0 <session_extend+0x4c>
        return NULL;
    }

    // We're adding a new session...
    session.top--;
 8005ca8:	0008      	movs	r0, r1
 8005caa:	380c      	subs	r0, #12
 8005cac:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <session_extend+0x50>)
 8005cae:	6018      	str	r0, [r3, #0]
    // If the new session is on the last spot, it means the heap is actually
    // empty, so no movement is necessary.  If heap is not empty and not full
    // (we know this by condition above and condition below), go through the
    // session heap to see where to put this extended session, and move all
    // higher data one spot up.
    if (extend < &session.heap[_LAST]) {
 8005cb0:	3328      	adds	r3, #40	; 0x28
 8005cb2:	4298      	cmp	r0, r3
 8005cb4:	d20c      	bcs.n	8005cd0 <session_extend+0x3c>
    extend = session.top;
 8005cb6:	0004      	movs	r4, r0
        do {
            // Increment session, noting that first increment simply counters
            // "session.top--" above.
            extend++;
 8005cb8:	340c      	adds	r4, #12

            // Inspect following session. If it is INIT, then we extend the
            // session sequence below this point.  Else, following session is
            // still part of the current session sequence, so keep looking.
            if (extend[1].netstate & M2_NETSTATE_INIT) {
 8005cba:	7ce3      	ldrb	r3, [r4, #19]
 8005cbc:	071b      	lsls	r3, r3, #28
 8005cbe:	d402      	bmi.n	8005cc6 <session_extend+0x32>
                break;
            }

            // The above "if (session.top <= &session.heap[_1ST])" make it OK
            // if we are at the 1st place in the session heap
        } while (extend < &session.heap[_LAST]);
 8005cc0:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <session_extend+0x54>)
 8005cc2:	429c      	cmp	r4, r3
 8005cc4:	d3f8      	bcc.n	8005cb8 <session_extend+0x24>

        // Shift the stack down one notch, from top to extension point.
        memcpy( (ot_u8*)session.top,
                (ot_u8*)&session.top[1],
                (ot_uint)((ot_u8*)extend - (ot_u8*)session.top) );
 8005cc6:	1a22      	subs	r2, r4, r0
        memcpy( (ot_u8*)session.top,
 8005cc8:	b292      	uxth	r2, r2
 8005cca:	f002 fc4b 	bl	8008564 <ot_memcpy>
            extend++;
 8005cce:	0020      	movs	r0, r4
    }

    return sub_store_session(extend, applet, wait, channel, netstate);
 8005cd0:	9500      	str	r5, [sp, #0]
 8005cd2:	003b      	movs	r3, r7
 8005cd4:	0032      	movs	r2, r6
 8005cd6:	9903      	ldr	r1, [sp, #12]
 8005cd8:	f7ff ff97 	bl	8005c0a <sub_store_session>
}
 8005cdc:	b005      	add	sp, #20
 8005cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NULL;
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	e7fb      	b.n	8005cdc <session_extend+0x48>
 8005ce4:	200026cc 	.word	0x200026cc
 8005ce8:	200026f4 	.word	0x200026f4

08005cec <session_app_purge>:
OT_WEAK void session_app_purge(ot_app applet) {
///@todo At present the purge leaves the session-session timing delays intact.
///      Need to determine what the right approach is: either set delays to 0
///      or leave as programmed.
    m2session* next;
    next = session.top;
 8005cec:	4b07      	ldr	r3, [pc, #28]	; (8005d0c <session_app_purge+0x20>)
 8005cee:	681b      	ldr	r3, [r3, #0]

    while (next < &session.heap[_END]) {
 8005cf0:	e000      	b.n	8005cf4 <session_app_purge+0x8>
        if (next->applet == applet) {
            next->applet    = &session_applet_null;
            next->netstate  = M2_NETSTATE_SCRAP;
        }
        next++;
 8005cf2:	330c      	adds	r3, #12
    while (next < &session.heap[_END]) {
 8005cf4:	4a06      	ldr	r2, [pc, #24]	; (8005d10 <session_app_purge+0x24>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d207      	bcs.n	8005d0a <session_app_purge+0x1e>
        if (next->applet == applet) {
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4282      	cmp	r2, r0
 8005cfe:	d1f8      	bne.n	8005cf2 <session_app_purge+0x6>
            next->applet    = &session_applet_null;
 8005d00:	4a04      	ldr	r2, [pc, #16]	; (8005d14 <session_app_purge+0x28>)
 8005d02:	601a      	str	r2, [r3, #0]
            next->netstate  = M2_NETSTATE_SCRAP;
 8005d04:	2204      	movs	r2, #4
 8005d06:	71da      	strb	r2, [r3, #7]
 8005d08:	e7f3      	b.n	8005cf2 <session_app_purge+0x6>
    }
}
 8005d0a:	4770      	bx	lr
 8005d0c:	200026cc 	.word	0x200026cc
 8005d10:	20002700 	.word	0x20002700
 8005d14:	08005c09 	.word	0x08005c09

08005d18 <session_app_isloaded>:


#ifndef EXTF_session_app_isloaded
OT_WEAK ot_bool session_app_isloaded(ot_app applet) {
    m2session* next;
    next = session.top;
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <session_app_isloaded+0x20>)
 8005d1a:	681b      	ldr	r3, [r3, #0]

    while ((next->applet != applet) && (next < &session.heap[_END])) {
 8005d1c:	e000      	b.n	8005d20 <session_app_isloaded+0x8>
        next++;
 8005d1e:	330c      	adds	r3, #12
    while ((next->applet != applet) && (next < &session.heap[_END])) {
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4282      	cmp	r2, r0
 8005d24:	d002      	beq.n	8005d2c <session_app_isloaded+0x14>
 8005d26:	4a05      	ldr	r2, [pc, #20]	; (8005d3c <session_app_isloaded+0x24>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d3f8      	bcc.n	8005d1e <session_app_isloaded+0x6>
    }
    return (ot_bool)(next < &session.heap[_END]);
 8005d2c:	4803      	ldr	r0, [pc, #12]	; (8005d3c <session_app_isloaded+0x24>)
 8005d2e:	4283      	cmp	r3, r0
 8005d30:	4180      	sbcs	r0, r0
 8005d32:	4240      	negs	r0, r0
}
 8005d34:	4770      	bx	lr
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	200026cc 	.word	0x200026cc
 8005d3c:	20002700 	.word	0x20002700

08005d40 <session_scrap>:
}
#endif


#ifndef EXTF_session_scrap
OT_WEAK void session_scrap(void) {
 8005d40:	b510      	push	{r4, lr}
    if (session.top != &session.heap[_END]) {
 8005d42:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <session_scrap+0x24>)
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	3334      	adds	r3, #52	; 0x34
 8005d48:	4298      	cmp	r0, r3
 8005d4a:	d009      	beq.n	8005d60 <session_scrap+0x20>
        m2session* old_top;
        old_top = session.top++;
 8005d4c:	0003      	movs	r3, r0
 8005d4e:	330c      	adds	r3, #12
 8005d50:	4a04      	ldr	r2, [pc, #16]	; (8005d64 <session_scrap+0x24>)
 8005d52:	6013      	str	r3, [r2, #0]

        if (old_top->applet != NULL) {
 8005d54:	6803      	ldr	r3, [r0, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <session_scrap+0x20>
            old_top->netstate = M2_NETSTATE_SCRAP;
 8005d5a:	2204      	movs	r2, #4
 8005d5c:	71c2      	strb	r2, [r0, #7]
            old_top->applet(old_top);
 8005d5e:	4798      	blx	r3
        }
    }
}
 8005d60:	bd10      	pop	{r4, pc}
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	200026cc 	.word	0x200026cc

08005d68 <session_pop>:
#ifndef EXTF_session_pop
OT_WEAK void session_pop() {
/// session.top++ will pop a session, but this routine includes protection
/// against less-than-perfect API usage by assuring that session.top is
/// only incremented when in bounds.
    if (session.top != &session.heap[_END])
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <session_pop+0x14>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	3334      	adds	r3, #52	; 0x34
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d002      	beq.n	8005d78 <session_pop+0x10>
        session.top++;
 8005d72:	320c      	adds	r2, #12
 8005d74:	4b01      	ldr	r3, [pc, #4]	; (8005d7c <session_pop+0x14>)
 8005d76:	601a      	str	r2, [r3, #0]
}
 8005d78:	4770      	bx	lr
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	200026cc 	.word	0x200026cc

08005d80 <session_top>:
#endif


#ifndef EXTF_session_top
OT_WEAK m2session* session_top() {
    return session.top;
 8005d80:	4b01      	ldr	r3, [pc, #4]	; (8005d88 <session_top+0x8>)
 8005d82:	6818      	ldr	r0, [r3, #0]
}
 8005d84:	4770      	bx	lr
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	200026cc 	.word	0x200026cc

08005d8c <session_continue>:
OT_WEAK m2session* session_continue(ot_app applet, ot_u8 next_state, ot_uint wait) {
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8e:	0006      	movs	r6, r0
 8005d90:	000d      	movs	r5, r1
 8005d92:	0017      	movs	r7, r2
    active      = session_top();
 8005d94:	f7ff fff4 	bl	8005d80 <session_top>
 8005d98:	0004      	movs	r4, r0
    netstate    = (active->netstate & 0x0F) | M2_NETSTATE_CONNECTED | next_state;
 8005d9a:	79c2      	ldrb	r2, [r0, #7]
 8005d9c:	230e      	movs	r3, #14
 8005d9e:	4013      	ands	r3, r2
 8005da0:	431d      	orrs	r5, r3
 8005da2:	2301      	movs	r3, #1
 8005da4:	432b      	orrs	r3, r5
    next = session_extend(applet, /*dll.comm.tc +*/ wait, active->channel, netstate);
 8005da6:	7982      	ldrb	r2, [r0, #6]
 8005da8:	0039      	movs	r1, r7
 8005daa:	0030      	movs	r0, r6
 8005dac:	f7ff ff72 	bl	8005c94 <session_extend>
    if (next) {
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d009      	beq.n	8005dc8 <session_continue+0x3c>
        next->extra     = active->extra;
 8005db4:	7a23      	ldrb	r3, [r4, #8]
 8005db6:	7203      	strb	r3, [r0, #8]
        next->dialog_id = active->dialog_id++;
 8005db8:	7a63      	ldrb	r3, [r4, #9]
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	7262      	strb	r2, [r4, #9]
 8005dbe:	7243      	strb	r3, [r0, #9]
        next->subnet    = active->subnet;
 8005dc0:	7aa3      	ldrb	r3, [r4, #10]
 8005dc2:	7283      	strb	r3, [r0, #10]
        next->flags     = active->flags;
 8005dc4:	7ae3      	ldrb	r3, [r4, #11]
 8005dc6:	72c3      	strb	r3, [r0, #11]
}
 8005dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005dcc <session_numfree>:
#endif


#ifndef EXTF_session_numfree
OT_WEAK ot_int session_numfree() {
 8005dcc:	b510      	push	{r4, lr}
    ot_uint block;
    block   = (ot_uint)((ot_u8*)session.top - (ot_u8*)&session.heap[_1ST]);
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <session_numfree+0x18>)
 8005dd0:	cb01      	ldmia	r3!, {r0}
 8005dd2:	1ac0      	subs	r0, r0, r3
 8005dd4:	b280      	uxth	r0, r0
    block  /= sizeof(m2session);
 8005dd6:	210c      	movs	r1, #12
 8005dd8:	f7fa f996 	bl	8000108 <__udivsi3>
 8005ddc:	b280      	uxth	r0, r0
    block  -= 1;            //because we always keep one free for extensions
 8005dde:	3801      	subs	r0, #1

    return (ot_int)block;
 8005de0:	b200      	sxth	r0, r0
}
 8005de2:	bd10      	pop	{r4, pc}
 8005de4:	200026cc 	.word	0x200026cc

08005de8 <session_notempty>:
#endif


#ifndef EXTF_session_notempty
OT_WEAK ot_bool session_notempty() {
    return (session.top < &session.heap[_END]);
 8005de8:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <session_notempty+0x10>)
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	3334      	adds	r3, #52	; 0x34
 8005dee:	4298      	cmp	r0, r3
 8005df0:	4180      	sbcs	r0, r0
 8005df2:	4240      	negs	r0, r0
}
 8005df4:	4770      	bx	lr
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	200026cc 	.word	0x200026cc

08005dfc <session_flush>:
OT_WEAK void session_flush() {
 8005dfc:	b510      	push	{r4, lr}
    while (session_notempty()) {
 8005dfe:	f7ff fff3 	bl	8005de8 <session_notempty>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d008      	beq.n	8005e18 <session_flush+0x1c>
        if (session.top->netstate & M2_NETSTATE_INIT) {
 8005e06:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <session_flush+0x20>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	79da      	ldrb	r2, [r3, #7]
 8005e0c:	0712      	lsls	r2, r2, #28
 8005e0e:	d403      	bmi.n	8005e18 <session_flush+0x1c>
        session.top++;      //session_pop();
 8005e10:	330c      	adds	r3, #12
 8005e12:	4a02      	ldr	r2, [pc, #8]	; (8005e1c <session_flush+0x20>)
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e7f2      	b.n	8005dfe <session_flush+0x2>
}
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	200026cc 	.word	0x200026cc

08005e20 <session_follower>:



#ifndef EXTF_session_follower
OT_WEAK m2session* session_follower() {
    if (session.top < &session.heap[_LAST]) {
 8005e20:	4b04      	ldr	r3, [pc, #16]	; (8005e34 <session_follower+0x14>)
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	3328      	adds	r3, #40	; 0x28
 8005e26:	4298      	cmp	r0, r3
 8005e28:	d201      	bcs.n	8005e2e <session_follower+0xe>
        return &session.top[1];
 8005e2a:	300c      	adds	r0, #12
    }
    return NULL;
}
 8005e2c:	4770      	bx	lr
    return NULL;
 8005e2e:	2000      	movs	r0, #0
 8005e30:	e7fc      	b.n	8005e2c <session_follower+0xc>
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	200026cc 	.word	0x200026cc

08005e38 <session_follower_wait>:
#endif


#ifndef EXTF_session_follower_wait
OT_WEAK ot_u16 session_follower_wait() {
    if (session.top < &session.heap[_LAST]) {
 8005e38:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <session_follower_wait+0x14>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	3328      	adds	r3, #40	; 0x28
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d201      	bcs.n	8005e46 <session_follower_wait+0xe>
        return session.top[1].counter;
 8005e42:	8a10      	ldrh	r0, [r2, #16]
    }
    return 65535;
}
 8005e44:	4770      	bx	lr
    return 65535;
 8005e46:	4802      	ldr	r0, [pc, #8]	; (8005e50 <session_follower_wait+0x18>)
 8005e48:	e7fc      	b.n	8005e44 <session_follower_wait+0xc>
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	200026cc 	.word	0x200026cc
 8005e50:	0000ffff 	.word	0x0000ffff

08005e54 <session_netstate>:



#ifndef EXTF_session_netstate
OT_WEAK ot_u8 session_netstate() {
    return session.top->netstate;
 8005e54:	4b01      	ldr	r3, [pc, #4]	; (8005e5c <session_netstate+0x8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	79d8      	ldrb	r0, [r3, #7]
}
 8005e5a:	4770      	bx	lr
 8005e5c:	200026cc 	.word	0x200026cc

08005e60 <sub_opgroup_scinit>:



void sub_opgroup_scinit(void) {
/// This is an SCTP command.  RFU
}
 8005e60:	4770      	bx	lr

08005e62 <sub_opgroup_sctransport>:



void sub_opgroup_sctransport(void) {
/// This is an SCTP command.  RFU
}
 8005e62:	4770      	bx	lr

08005e64 <sub_load_charcorrelation>:
/** Protocol File Loading Subroutines <BR>
  * ========================================================================<BR>
  * - Used as the load_function() argument to sub_load_isf()
  */

ot_int sub_load_charcorrelation(ot_int* cursor, ot_u8 data_byte) {
 8005e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ot_int c;
    ot_u8* local_buf;

    /// The datastream is buffered in an unused part of the data-queue.
    /// The LOCAL_U8() macro behaves similar to array nomenclature
    local_buf = &LOCAL_U8(0);
 8005e66:	4b1c      	ldr	r3, [pc, #112]	; (8005ed8 <sub_load_charcorrelation+0x74>)
 8005e68:	68dc      	ldr	r4, [r3, #12]
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	3b10      	subs	r3, #16
 8005e6e:	18e4      	adds	r4, r4, r3
    local_buf[*cursor] = data_byte;
 8005e70:	2200      	movs	r2, #0
 8005e72:	5e83      	ldrsh	r3, [r0, r2]
 8005e74:	54e1      	strb	r1, [r4, r3]

    /// If the datastream is *not* fully pre-buffered, return to the caller.
    /// If the datastream is fully pre-buffered, then proceed to correlation.
    if ( *cursor < (m2qp.qtmpl.length-1) ) {
 8005e76:	2300      	movs	r3, #0
 8005e78:	5ec2      	ldrsh	r2, [r0, r3]
 8005e7a:	4b18      	ldr	r3, [pc, #96]	; (8005edc <sub_load_charcorrelation+0x78>)
 8005e7c:	7a5b      	ldrb	r3, [r3, #9]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	429a      	cmp	r2, r3
 8005e82:	db02      	blt.n	8005e8a <sub_load_charcorrelation+0x26>
    /// Equality Correlation with data shifting of the buffer after each
    /// comparison operation.  The value c is the comparison score.  It is a
    /// bipolar accumulator, so a non-equality alters the score by -1 and an
    /// equality by +1.  It is implemented as c += (0 or 2) - 1
    else {
        for (i=0, c=0; i<m2qp.qtmpl.length; i++) {
 8005e84:	2700      	movs	r7, #0
 8005e86:	2300      	movs	r3, #0
 8005e88:	e00c      	b.n	8005ea4 <sub_load_charcorrelation+0x40>
        (*cursor)++;
 8005e8a:	3201      	adds	r2, #1
 8005e8c:	8002      	strh	r2, [r0, #0]
        return 0;
 8005e8e:	2000      	movs	r0, #0
 8005e90:	e021      	b.n	8005ed6 <sub_load_charcorrelation+0x72>
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 8005e92:	2200      	movs	r2, #0
 8005e94:	19d2      	adds	r2, r2, r7
 8005e96:	b292      	uxth	r2, r2
                   (m2qp.qtmpl.value[i] & m2qp.qtmpl.mask[i]) ) << 1;
            c -= 1;
 8005e98:	3a01      	subs	r2, #1
 8005e9a:	b217      	sxth	r7, r2

            local_buf[i-1] = local_buf[i];
 8005e9c:	3901      	subs	r1, #1
 8005e9e:	5465      	strb	r5, [r4, r1]
        for (i=0, c=0; i<m2qp.qtmpl.length; i++) {
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	b21b      	sxth	r3, r3
 8005ea4:	4a0d      	ldr	r2, [pc, #52]	; (8005edc <sub_load_charcorrelation+0x78>)
 8005ea6:	7a52      	ldrb	r2, [r2, #9]
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	da0b      	bge.n	8005ec4 <sub_load_charcorrelation+0x60>
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 8005eac:	0019      	movs	r1, r3
 8005eae:	5ce5      	ldrb	r5, [r4, r3]
                   (m2qp.qtmpl.value[i] & m2qp.qtmpl.mask[i]) ) << 1;
 8005eb0:	4e0a      	ldr	r6, [pc, #40]	; (8005edc <sub_load_charcorrelation+0x78>)
 8005eb2:	6932      	ldr	r2, [r6, #16]
 8005eb4:	5cd0      	ldrb	r0, [r2, r3]
            c += ( (local_buf[i] & m2qp.qtmpl.mask[i]) == \
 8005eb6:	68f2      	ldr	r2, [r6, #12]
 8005eb8:	5cd2      	ldrb	r2, [r2, r3]
 8005eba:	4068      	eors	r0, r5
 8005ebc:	4210      	tst	r0, r2
 8005ebe:	d1e8      	bne.n	8005e92 <sub_load_charcorrelation+0x2e>
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	e7e7      	b.n	8005e94 <sub_load_charcorrelation+0x30>

    /// One parameter of the correlation query is a correlation threshold.  It
    /// occupies the lower 5 bits of the query code.  It is an integer value.
    /// Scores higher than the threshold are passing scores.  The query score
    /// indicates the number of hits the query made on the file data.
    return (c >= (ot_int)(m2qp.qtmpl.code & 0x1F));
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <sub_load_charcorrelation+0x78>)
 8005ec6:	7a1a      	ldrb	r2, [r3, #8]
 8005ec8:	231f      	movs	r3, #31
 8005eca:	4013      	ands	r3, r2
 8005ecc:	17f8      	asrs	r0, r7, #31
 8005ece:	0fda      	lsrs	r2, r3, #31
 8005ed0:	429f      	cmp	r7, r3
 8005ed2:	4150      	adcs	r0, r2
 8005ed4:	b200      	sxth	r0, r0
}
 8005ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed8:	20002d68 	.word	0x20002d68
 8005edc:	20002700 	.word	0x20002700

08005ee0 <sub_load_comparison>:


ot_int sub_load_comparison(ot_int* cursor, ot_u8 data_byte) {
 8005ee0:	b530      	push	{r4, r5, lr}
/// Just loads comparison data, from the file system, into the local buffer.
/// Comparison is limited to16 bytes per the Mode 2 Spec.
    LOCAL_U8(*cursor) = data_byte;
 8005ee2:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <sub_load_comparison+0x20>)
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	3b10      	subs	r3, #16
 8005eea:	2500      	movs	r5, #0
 8005eec:	5f44      	ldrsh	r4, [r0, r5]
 8005eee:	191b      	adds	r3, r3, r4
 8005ef0:	54d1      	strb	r1, [r2, r3]
    (*cursor)++;
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	5e83      	ldrsh	r3, [r0, r2]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	8003      	strh	r3, [r0, #0]
    return 0;
}
 8005efa:	2000      	movs	r0, #0
 8005efc:	bd30      	pop	{r4, r5, pc}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	20002d68 	.word	0x20002d68

08005f04 <sub_load_return>:


ot_int sub_load_return(ot_int* cursor, ot_u8 data_byte) {
 8005f04:	b510      	push	{r4, lr}
 8005f06:	0004      	movs	r4, r0
/// Just loads file data into the TX queue.
    q_writebyte(&txq, data_byte);
 8005f08:	4804      	ldr	r0, [pc, #16]	; (8005f1c <sub_load_return+0x18>)
 8005f0a:	f001 f84f 	bl	8006fac <q_writebyte>
    (*cursor)++;
 8005f0e:	2200      	movs	r2, #0
 8005f10:	5ea3      	ldrsh	r3, [r4, r2]
 8005f12:	3301      	adds	r3, #1
 8005f14:	8023      	strh	r3, [r4, #0]
    return 0;
}
 8005f16:	2000      	movs	r0, #0
 8005f18:	bd10      	pop	{r4, pc}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	20002d68 	.word	0x20002d68

08005f20 <m2qp_sig_isf>:
OT_WEAK ot_bool m2qp_sig_isf(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 8005f20:	2000      	movs	r0, #0
 8005f22:	4770      	bx	lr

08005f24 <sub_opgroup_globalisf>:
void sub_opgroup_globalisf(void) {
 8005f24:	b510      	push	{r4, lr}
    M2QP_CB_ISF();
 8005f26:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <sub_opgroup_globalisf+0x18>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	210f      	movs	r1, #15
 8005f2c:	4019      	ands	r1, r3
 8005f2e:	2070      	movs	r0, #112	; 0x70
 8005f30:	4018      	ands	r0, r3
 8005f32:	4a03      	ldr	r2, [pc, #12]	; (8005f40 <sub_opgroup_globalisf+0x1c>)
 8005f34:	f7ff fff4 	bl	8005f20 <m2qp_sig_isf>
}
 8005f38:	bd10      	pop	{r4, pc}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	20002700 	.word	0x20002700
 8005f40:	2000269c 	.word	0x2000269c

08005f44 <sub_opgroup_udp>:
void sub_opgroup_udp(void) {
 8005f44:	b510      	push	{r4, lr}
    rxq.putcursor = rxq.back;
 8005f46:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <sub_opgroup_udp+0x2c>)
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	609a      	str	r2, [r3, #8]
    status  = alp_parse_message(&m2alp, &m2np.rt.dlog);
 8005f4c:	4909      	ldr	r1, [pc, #36]	; (8005f74 <sub_opgroup_udp+0x30>)
 8005f4e:	480a      	ldr	r0, [pc, #40]	; (8005f78 <sub_opgroup_udp+0x34>)
 8005f50:	f000 fec6 	bl	8006ce0 <alp_parse_message>
    if (status == MSG_Null) {
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d000      	beq.n	8005f5a <sub_opgroup_udp+0x16>
}
 8005f58:	bd10      	pop	{r4, pc}
        M2QP_CB_ISF();
 8005f5a:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <sub_opgroup_udp+0x38>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	210f      	movs	r1, #15
 8005f60:	4019      	ands	r1, r3
 8005f62:	3070      	adds	r0, #112	; 0x70
 8005f64:	4018      	ands	r0, r3
 8005f66:	4a03      	ldr	r2, [pc, #12]	; (8005f74 <sub_opgroup_udp+0x30>)
 8005f68:	f7ff ffda 	bl	8005f20 <m2qp_sig_isf>
}
 8005f6c:	e7f4      	b.n	8005f58 <sub_opgroup_udp+0x14>
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	20002d54 	.word	0x20002d54
 8005f74:	2000269c 	.word	0x2000269c
 8005f78:	20002714 	.word	0x20002714
 8005f7c:	20002700 	.word	0x20002700

08005f80 <m2qp_sig_ctl>:
OT_WEAK ot_bool m2qp_sig_ctl(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 8005f80:	2000      	movs	r0, #0
 8005f82:	4770      	bx	lr

08005f84 <m2qp_sig_a2p>:
OT_WEAK ot_bool m2qp_sig_a2p(ot_u8 type, ot_u8 opcode, id_tmpl* user_id) { return False; }
 8005f84:	2000      	movs	r0, #0
 8005f86:	4770      	bx	lr

08005f88 <m2qp_init>:
OT_WEAK void m2qp_init() {
 8005f88:	b510      	push	{r4, lr}
    m2qp.cmd.code = 0x1F;
 8005f8a:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <m2qp_init+0x14>)
 8005f8c:	221f      	movs	r2, #31
 8005f8e:	701a      	strb	r2, [r3, #0]
    alp_init(&m2alp, &rxq, &txq);
 8005f90:	4a03      	ldr	r2, [pc, #12]	; (8005fa0 <m2qp_init+0x18>)
 8005f92:	4904      	ldr	r1, [pc, #16]	; (8005fa4 <m2qp_init+0x1c>)
 8005f94:	4804      	ldr	r0, [pc, #16]	; (8005fa8 <m2qp_init+0x20>)
 8005f96:	f000 fe9c 	bl	8006cd2 <alp_init>
}
 8005f9a:	bd10      	pop	{r4, pc}
 8005f9c:	20002700 	.word	0x20002700
 8005fa0:	20002d68 	.word	0x20002d68
 8005fa4:	20002d54 	.word	0x20002d54
 8005fa8:	20002714 	.word	0x20002714

08005fac <sub_parse_response>:
ot_int sub_parse_response(m2session* active) {
 8005fac:	b570      	push	{r4, r5, r6, lr}
    req_cmdcode     = m2qp.cmd.code;
 8005fae:	4d17      	ldr	r5, [pc, #92]	; (800600c <sub_parse_response+0x60>)
 8005fb0:	782c      	ldrb	r4, [r5, #0]
    m2qp.cmd.code   = q_readbyte(&rxq);
 8005fb2:	4817      	ldr	r0, [pc, #92]	; (8006010 <sub_parse_response+0x64>)
 8005fb4:	f001 f829 	bl	800700a <q_readbyte>
 8005fb8:	7028      	strb	r0, [r5, #0]
    if (((req_cmdcode ^ m2qp.cmd.code) & 0x0F) == 0) {
 8005fba:	4060      	eors	r0, r4
 8005fbc:	0703      	lsls	r3, r0, #28
 8005fbe:	d10a      	bne.n	8005fd6 <sub_parse_response+0x2a>
        if (((req_cmdcode & 0x60) == M2TT_REQ_M_INIT) && (q_writespace(&txq) > 48)) {
 8005fc0:	2360      	movs	r3, #96	; 0x60
 8005fc2:	4023      	ands	r3, r4
 8005fc4:	2b40      	cmp	r3, #64	; 0x40
 8005fc6:	d009      	beq.n	8005fdc <sub_parse_response+0x30>
            opgroup_proc[((req_cmdcode>>1) & 7)]();
 8005fc8:	0864      	lsrs	r4, r4, #1
 8005fca:	2307      	movs	r3, #7
 8005fcc:	401c      	ands	r4, r3
 8005fce:	00a4      	lsls	r4, r4, #2
 8005fd0:	4b10      	ldr	r3, [pc, #64]	; (8006014 <sub_parse_response+0x68>)
 8005fd2:	58e3      	ldr	r3, [r4, r3]
 8005fd4:	4798      	blx	r3
    return -1; //(ot_int)test - 1;
 8005fd6:	2001      	movs	r0, #1
}
 8005fd8:	4240      	negs	r0, r0
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
        if (((req_cmdcode & 0x60) == M2TT_REQ_M_INIT) && (q_writespace(&txq) > 48)) {
 8005fdc:	480e      	ldr	r0, [pc, #56]	; (8006018 <sub_parse_response+0x6c>)
 8005fde:	f000 ffb7 	bl	8006f50 <q_writespace>
 8005fe2:	2830      	cmp	r0, #48	; 0x30
 8005fe4:	ddf0      	ble.n	8005fc8 <sub_parse_response+0x1c>
            txq.getcursor[0]++;
 8005fe6:	480c      	ldr	r0, [pc, #48]	; (8006018 <sub_parse_response+0x6c>)
 8005fe8:	6842      	ldr	r2, [r0, #4]
 8005fea:	7813      	ldrb	r3, [r2, #0]
 8005fec:	3301      	adds	r3, #1
 8005fee:	7013      	strb	r3, [r2, #0]
            q_writestring(&txq, m2np.rt.dlog.value, m2np.rt.dlog.length);
 8005ff0:	4d0a      	ldr	r5, [pc, #40]	; (800601c <sub_parse_response+0x70>)
 8005ff2:	792a      	ldrb	r2, [r5, #4]
 8005ff4:	68a9      	ldr	r1, [r5, #8]
 8005ff6:	f001 f838 	bl	800706a <q_writestring>
            test = (ot_u8)M2QP_CB_A2P();
 8005ffa:	1d2a      	adds	r2, r5, #4
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	2000      	movs	r0, #0
 8006000:	f7ff ffc0 	bl	8005f84 <m2qp_sig_a2p>
        if (test) {
 8006004:	2800      	cmp	r0, #0
 8006006:	d1df      	bne.n	8005fc8 <sub_parse_response+0x1c>
 8006008:	e7e5      	b.n	8005fd6 <sub_parse_response+0x2a>
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	20002700 	.word	0x20002700
 8006010:	20002d54 	.word	0x20002d54
 8006014:	0800a40c 	.word	0x0800a40c
 8006018:	20002d68 	.word	0x20002d68
 800601c:	20002698 	.word	0x20002698

08006020 <sub_parse_control>:
ot_int sub_parse_control(m2session* active) {
 8006020:	b570      	push	{r4, r5, r6, lr}
    code    = q_readbyte(&rxq);
 8006022:	4c07      	ldr	r4, [pc, #28]	; (8006040 <sub_parse_control+0x20>)
 8006024:	0020      	movs	r0, r4
 8006026:	f000 fff0 	bl	800700a <q_readbyte>
 800602a:	0005      	movs	r5, r0
    subcode = q_readbyte(&rxq);
 800602c:	0020      	movs	r0, r4
 800602e:	f000 ffec 	bl	800700a <q_readbyte>
 8006032:	0001      	movs	r1, r0
    return (ot_int)M2QP_CB_ERROR(code, subcode);
 8006034:	4a03      	ldr	r2, [pc, #12]	; (8006044 <sub_parse_control+0x24>)
 8006036:	0028      	movs	r0, r5
 8006038:	f7ff ffa2 	bl	8005f80 <m2qp_sig_ctl>
 800603c:	b200      	sxth	r0, r0
}
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	20002d54 	.word	0x20002d54
 8006044:	2000269c 	.word	0x2000269c

08006048 <sub_renack>:
void sub_renack(ot_int nack) {
 8006048:	b510      	push	{r4, lr}
 800604a:	0001      	movs	r1, r0
    txq.getcursor[-1]  |= 0x10;     //M2QP Nack Bit
 800604c:	4807      	ldr	r0, [pc, #28]	; (800606c <sub_renack+0x24>)
 800604e:	6843      	ldr	r3, [r0, #4]
 8006050:	3b01      	subs	r3, #1
 8006052:	781a      	ldrb	r2, [r3, #0]
 8006054:	2410      	movs	r4, #16
 8006056:	4322      	orrs	r2, r4
 8006058:	701a      	strb	r2, [r3, #0]
    txq.front[3]       |= 1;        //DLL Nack Bit ///@todo wrap into DLL layer
 800605a:	68c2      	ldr	r2, [r0, #12]
 800605c:	78d3      	ldrb	r3, [r2, #3]
 800605e:	2401      	movs	r4, #1
 8006060:	4323      	orrs	r3, r4
 8006062:	70d3      	strb	r3, [r2, #3]
    q_writebyte(&txq, (ot_u8)nack);
 8006064:	b2c9      	uxtb	r1, r1
 8006066:	f000 ffa1 	bl	8006fac <q_writebyte>
}
 800606a:	bd10      	pop	{r4, pc}
 800606c:	20002d68 	.word	0x20002d68

08006070 <sub_opgroup_rfu>:
void sub_opgroup_rfu(void) {
 8006070:	b510      	push	{r4, lr}
    sub_renack(1);
 8006072:	2001      	movs	r0, #1
 8006074:	f7ff ffe8 	bl	8006048 <sub_renack>
}
 8006078:	bd10      	pop	{r4, pc}
	...

0800607c <sub_load_query>:
void sub_load_query(void) {
 800607c:	b570      	push	{r4, r5, r6, lr}
    m2qp.qtmpl.length = q_readbyte(&rxq);
 800607e:	4d0f      	ldr	r5, [pc, #60]	; (80060bc <sub_load_query+0x40>)
 8006080:	0028      	movs	r0, r5
 8006082:	f000 ffc2 	bl	800700a <q_readbyte>
 8006086:	4c0e      	ldr	r4, [pc, #56]	; (80060c0 <sub_load_query+0x44>)
 8006088:	7260      	strb	r0, [r4, #9]
    m2qp.qtmpl.code   = q_readbyte(&rxq);
 800608a:	0028      	movs	r0, r5
 800608c:	f000 ffbd 	bl	800700a <q_readbyte>
 8006090:	7220      	strb	r0, [r4, #8]
    if ((m2qp.qtmpl.code & M2QC_MASKED) != 0) {
 8006092:	b240      	sxtb	r0, r0
 8006094:	2800      	cmp	r0, #0
 8006096:	db0a      	blt.n	80060ae <sub_load_query+0x32>
        m2qp.qtmpl.mask = (ot_u8*)fixed_mask;
 8006098:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <sub_load_query+0x48>)
 800609a:	4a09      	ldr	r2, [pc, #36]	; (80060c0 <sub_load_query+0x44>)
 800609c:	3320      	adds	r3, #32
 800609e:	60d3      	str	r3, [r2, #12]
    m2qp.qtmpl.value  = q_markbyte(&rxq, m2qp.qtmpl.length);
 80060a0:	4c07      	ldr	r4, [pc, #28]	; (80060c0 <sub_load_query+0x44>)
 80060a2:	7a61      	ldrb	r1, [r4, #9]
 80060a4:	4805      	ldr	r0, [pc, #20]	; (80060bc <sub_load_query+0x40>)
 80060a6:	f000 ff7c 	bl	8006fa2 <q_markbyte>
 80060aa:	6120      	str	r0, [r4, #16]
}
 80060ac:	bd70      	pop	{r4, r5, r6, pc}
        m2qp.qtmpl.mask = q_markbyte(&rxq, m2qp.qtmpl.length);
 80060ae:	4c04      	ldr	r4, [pc, #16]	; (80060c0 <sub_load_query+0x44>)
 80060b0:	7a61      	ldrb	r1, [r4, #9]
 80060b2:	4802      	ldr	r0, [pc, #8]	; (80060bc <sub_load_query+0x40>)
 80060b4:	f000 ff75 	bl	8006fa2 <q_markbyte>
 80060b8:	60e0      	str	r0, [r4, #12]
 80060ba:	e7f1      	b.n	80060a0 <sub_load_query+0x24>
 80060bc:	20002d54 	.word	0x20002d54
 80060c0:	20002700 	.word	0x20002700
 80060c4:	0800a40c 	.word	0x0800a40c

080060c8 <m2qp_load_isf>:
                                id_tmpl*    user_id ) {
 80060c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ca:	46de      	mov	lr, fp
 80060cc:	4657      	mov	r7, sl
 80060ce:	464e      	mov	r6, r9
 80060d0:	4645      	mov	r5, r8
 80060d2:	b5e0      	push	{r5, r6, r7, lr}
 80060d4:	b085      	sub	sp, #20
 80060d6:	4682      	mov	sl, r0
 80060d8:	0008      	movs	r0, r1
 80060da:	0014      	movs	r4, r2
 80060dc:	4699      	mov	r9, r3
    ot_int  j       = 0;
 80060de:	ab02      	add	r3, sp, #8
 80060e0:	2200      	movs	r2, #0
 80060e2:	805a      	strh	r2, [r3, #2]
    if (is_series) {
 80060e4:	4653      	mov	r3, sl
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <m2qp_load_isf+0x36>
        scratch.ubyte[0]    = isf_id;
 80060ea:	ab03      	add	r3, sp, #12
 80060ec:	7019      	strb	r1, [r3, #0]
        n_files             = 1;
 80060ee:	2301      	movs	r3, #1
 80060f0:	469b      	mov	fp, r3
    vlFILE* fp_s    = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	9301      	str	r3, [sp, #4]
    ot_int  output  = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	4698      	mov	r8, r3
    for (i=0; i<n_files; i++) {
 80060fa:	2600      	movs	r6, #0
 80060fc:	e01d      	b.n	800613a <m2qp_load_isf+0x72>
        fp_s = ISS_open( isf_id, VL_ACCESS_R, user_id );
 80060fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006100:	2124      	movs	r1, #36	; 0x24
 8006102:	f001 fae8 	bl	80076d6 <ISS_open>
 8006106:	9001      	str	r0, [sp, #4]
        if (fp_s == NULL) {
 8006108:	2800      	cmp	r0, #0
 800610a:	d059      	beq.n	80061c0 <m2qp_load_isf+0xf8>
        n_files = fp_s->length;
 800610c:	2208      	movs	r2, #8
 800610e:	5e83      	ldrsh	r3, [r0, r2]
 8006110:	469b      	mov	fp, r3
 8006112:	e7f0      	b.n	80060f6 <m2qp_load_isf+0x2e>
        fp_f = ISF_open( scratch.ubyte[align], VL_ACCESS_R, user_id );
 8006114:	ab03      	add	r3, sp, #12
 8006116:	5d58      	ldrb	r0, [r3, r5]
 8006118:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800611a:	2124      	movs	r1, #36	; 0x24
 800611c:	f001 fae3 	bl	80076e6 <ISF_open>
 8006120:	1e07      	subs	r7, r0, #0
        if (fp_f == NULL) {
 8006122:	d01a      	beq.n	800615a <m2qp_load_isf+0x92>
        offset -= fp_f->length;
 8006124:	8905      	ldrh	r5, [r0, #8]
 8006126:	1b65      	subs	r5, r4, r5
 8006128:	b22d      	sxth	r5, r5
        if (offset < 0) {
 800612a:	2d00      	cmp	r5, #0
 800612c:	db2c      	blt.n	8006188 <m2qp_load_isf+0xc0>
        vl_close(fp_f);
 800612e:	0038      	movs	r0, r7
 8006130:	f001 fa94 	bl	800765c <vl_close>
    for (i=0; i<n_files; i++) {
 8006134:	3601      	adds	r6, #1
 8006136:	b236      	sxth	r6, r6
 8006138:	002c      	movs	r4, r5
 800613a:	455e      	cmp	r6, fp
 800613c:	da35      	bge.n	80061aa <m2qp_load_isf+0xe2>
        ot_u8 align = (i & 1);
 800613e:	2501      	movs	r5, #1
 8006140:	4035      	ands	r5, r6
        if ((is_series) && (align == 0)) {
 8006142:	4653      	mov	r3, sl
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0e5      	beq.n	8006114 <m2qp_load_isf+0x4c>
 8006148:	2d00      	cmp	r5, #0
 800614a:	d1e3      	bne.n	8006114 <m2qp_load_isf+0x4c>
            scratch.ushort = vl_read(fp_s, i);
 800614c:	b2b1      	uxth	r1, r6
 800614e:	9801      	ldr	r0, [sp, #4]
 8006150:	f001 fa02 	bl	8007558 <vl_read>
 8006154:	ab03      	add	r3, sp, #12
 8006156:	8018      	strh	r0, [r3, #0]
 8006158:	e7dc      	b.n	8006114 <m2qp_load_isf+0x4c>
            vl_close(fp_s);
 800615a:	9801      	ldr	r0, [sp, #4]
 800615c:	f001 fa7e 	bl	800765c <vl_close>
            return -32768;
 8006160:	4b19      	ldr	r3, [pc, #100]	; (80061c8 <m2qp_load_isf+0x100>)
 8006162:	4698      	mov	r8, r3
 8006164:	e024      	b.n	80061b0 <m2qp_load_isf+0xe8>
                    ldata.ushort = vl_read(fp_f, offset);
 8006166:	b2a1      	uxth	r1, r4
 8006168:	0038      	movs	r0, r7
 800616a:	f001 f9f5 	bl	8007558 <vl_read>
 800616e:	ab02      	add	r3, sp, #8
 8006170:	8018      	strh	r0, [r3, #0]
                output += load_function( &j, ldata.ubyte[align] );
 8006172:	ab02      	add	r3, sp, #8
 8006174:	5d59      	ldrb	r1, [r3, r5]
 8006176:	1c98      	adds	r0, r3, #2
 8006178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800617a:	4798      	blx	r3
 800617c:	b280      	uxth	r0, r0
 800617e:	4440      	add	r0, r8
 8006180:	b203      	sxth	r3, r0
 8006182:	4698      	mov	r8, r3
                offset++;
 8006184:	3401      	adds	r4, #1
 8006186:	b224      	sxth	r4, r4
            while ( (j < window_bytes) && (offset < fp_f->length) ) {
 8006188:	ab02      	add	r3, sp, #8
 800618a:	3302      	adds	r3, #2
 800618c:	2200      	movs	r2, #0
 800618e:	5e9b      	ldrsh	r3, [r3, r2]
 8006190:	454b      	cmp	r3, r9
 8006192:	da08      	bge.n	80061a6 <m2qp_load_isf+0xde>
 8006194:	893b      	ldrh	r3, [r7, #8]
 8006196:	429c      	cmp	r4, r3
 8006198:	da03      	bge.n	80061a2 <m2qp_load_isf+0xda>
                align = offset & 1;
 800619a:	2501      	movs	r5, #1
 800619c:	4025      	ands	r5, r4
                if (align == 0) {
 800619e:	d1e8      	bne.n	8006172 <m2qp_load_isf+0xaa>
 80061a0:	e7e1      	b.n	8006166 <m2qp_load_isf+0x9e>
            offset = 0;
 80061a2:	2500      	movs	r5, #0
 80061a4:	e7c3      	b.n	800612e <m2qp_load_isf+0x66>
 80061a6:	2500      	movs	r5, #0
 80061a8:	e7c1      	b.n	800612e <m2qp_load_isf+0x66>
    vl_close(fp_s);
 80061aa:	9801      	ldr	r0, [sp, #4]
 80061ac:	f001 fa56 	bl	800765c <vl_close>
}
 80061b0:	4640      	mov	r0, r8
 80061b2:	b005      	add	sp, #20
 80061b4:	bc3c      	pop	{r2, r3, r4, r5}
 80061b6:	4690      	mov	r8, r2
 80061b8:	4699      	mov	r9, r3
 80061ba:	46a2      	mov	sl, r4
 80061bc:	46ab      	mov	fp, r5
 80061be:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -32768;
 80061c0:	4b01      	ldr	r3, [pc, #4]	; (80061c8 <m2qp_load_isf+0x100>)
 80061c2:	4698      	mov	r8, r3
 80061c4:	e7f4      	b.n	80061b0 <m2qp_load_isf+0xe8>
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	ffff8000 	.word	0xffff8000

080061cc <m2qp_isf_comp>:
OT_WEAK ot_int m2qp_isf_comp(ot_u8 is_series, id_tmpl* user_id) {
 80061cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ce:	b083      	sub	sp, #12
 80061d0:	0004      	movs	r4, r0
 80061d2:	000e      	movs	r6, r1
        m2qp.qtmpl.length   = (m2qp.qtmpl.code) ? m2qp.qtmpl.length : 0;
 80061d4:	4b38      	ldr	r3, [pc, #224]	; (80062b8 <m2qp_isf_comp+0xec>)
 80061d6:	7a1b      	ldrb	r3, [r3, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d03b      	beq.n	8006254 <m2qp_isf_comp+0x88>
 80061dc:	4a36      	ldr	r2, [pc, #216]	; (80062b8 <m2qp_isf_comp+0xec>)
 80061de:	7a51      	ldrb	r1, [r2, #9]
 80061e0:	4a35      	ldr	r2, [pc, #212]	; (80062b8 <m2qp_isf_comp+0xec>)
 80061e2:	7251      	strb	r1, [r2, #9]
                               &sub_load_charcorrelation : &sub_load_comparison;
 80061e4:	065b      	lsls	r3, r3, #25
 80061e6:	d537      	bpl.n	8006258 <m2qp_isf_comp+0x8c>
 80061e8:	4d34      	ldr	r5, [pc, #208]	; (80062bc <m2qp_isf_comp+0xf0>)
        m2qp.qdata.comp_id  = q_readbyte(&rxq);
 80061ea:	4835      	ldr	r0, [pc, #212]	; (80062c0 <m2qp_isf_comp+0xf4>)
 80061ec:	f000 ff0d 	bl	800700a <q_readbyte>
 80061f0:	4b31      	ldr	r3, [pc, #196]	; (80062b8 <m2qp_isf_comp+0xec>)
 80061f2:	7098      	strb	r0, [r3, #2]
        if (is_series)  m2qp.qdata.comp_offset  = q_readshort(&rxq);
 80061f4:	2c00      	cmp	r4, #0
 80061f6:	d031      	beq.n	800625c <m2qp_isf_comp+0x90>
 80061f8:	4831      	ldr	r0, [pc, #196]	; (80062c0 <m2qp_isf_comp+0xf4>)
 80061fa:	f000 ff0b 	bl	8007014 <q_readshort>
 80061fe:	4b2e      	ldr	r3, [pc, #184]	; (80062b8 <m2qp_isf_comp+0xec>)
 8006200:	8098      	strh	r0, [r3, #4]
        score   = m2qp_load_isf(is_series, m2qp.qdata.comp_id, m2qp.qdata.comp_offset,
 8006202:	4b2d      	ldr	r3, [pc, #180]	; (80062b8 <m2qp_isf_comp+0xec>)
 8006204:	7899      	ldrb	r1, [r3, #2]
 8006206:	2004      	movs	r0, #4
 8006208:	5e1a      	ldrsh	r2, [r3, r0]
 800620a:	7a5b      	ldrb	r3, [r3, #9]
 800620c:	9601      	str	r6, [sp, #4]
 800620e:	9500      	str	r5, [sp, #0]
 8006210:	0020      	movs	r0, r4
 8006212:	f7ff ff59 	bl	80060c8 <m2qp_load_isf>
 8006216:	1e03      	subs	r3, r0, #0
    if (score < 0) {
 8006218:	db2a      	blt.n	8006270 <m2qp_isf_comp+0xa4>
    else if (m2qp.qtmpl.code & M2QC_COR_SEARCH) {
 800621a:	4a27      	ldr	r2, [pc, #156]	; (80062b8 <m2qp_isf_comp+0xec>)
 800621c:	7a17      	ldrb	r7, [r2, #8]
 800621e:	067a      	lsls	r2, r7, #25
 8006220:	d422      	bmi.n	8006268 <m2qp_isf_comp+0x9c>
    else if (m2qp.qtmpl.code & M2QC_ALU) {
 8006222:	06bb      	lsls	r3, r7, #26
 8006224:	d524      	bpl.n	8006270 <m2qp_isf_comp+0xa4>
        for (i=0; i<m2qp.qtmpl.length; i++) {
 8006226:	2300      	movs	r3, #0
 8006228:	4a23      	ldr	r2, [pc, #140]	; (80062b8 <m2qp_isf_comp+0xec>)
 800622a:	7a52      	ldrb	r2, [r2, #9]
 800622c:	4293      	cmp	r3, r2
 800622e:	da34      	bge.n	800629a <m2qp_isf_comp+0xce>
            ot_u8* local_buf = &LOCAL_U8(0);
 8006230:	4a24      	ldr	r2, [pc, #144]	; (80062c4 <m2qp_isf_comp+0xf8>)
 8006232:	68d4      	ldr	r4, [r2, #12]
 8006234:	8815      	ldrh	r5, [r2, #0]
 8006236:	3d10      	subs	r5, #16
            j = m2qp.qtmpl.mask[i] & m2qp.qtmpl.value[i];
 8006238:	4a1f      	ldr	r2, [pc, #124]	; (80062b8 <m2qp_isf_comp+0xec>)
 800623a:	68d1      	ldr	r1, [r2, #12]
 800623c:	5cce      	ldrb	r6, [r1, r3]
 800623e:	6912      	ldr	r2, [r2, #16]
 8006240:	5cd1      	ldrb	r1, [r2, r3]
 8006242:	4031      	ands	r1, r6
            k = m2qp.qtmpl.mask[i] & local_buf[i];
 8006244:	1964      	adds	r4, r4, r5
 8006246:	5ce2      	ldrb	r2, [r4, r3]
 8006248:	4032      	ands	r2, r6
            if (j != k) {
 800624a:	4291      	cmp	r1, r2
 800624c:	d112      	bne.n	8006274 <m2qp_isf_comp+0xa8>
        for (i=0; i<m2qp.qtmpl.length; i++) {
 800624e:	3301      	adds	r3, #1
 8006250:	b21b      	sxth	r3, r3
 8006252:	e7e9      	b.n	8006228 <m2qp_isf_comp+0x5c>
        m2qp.qtmpl.length   = (m2qp.qtmpl.code) ? m2qp.qtmpl.length : 0;
 8006254:	0019      	movs	r1, r3
 8006256:	e7c3      	b.n	80061e0 <m2qp_isf_comp+0x14>
                               &sub_load_charcorrelation : &sub_load_comparison;
 8006258:	4d1b      	ldr	r5, [pc, #108]	; (80062c8 <m2qp_isf_comp+0xfc>)
 800625a:	e7c6      	b.n	80061ea <m2qp_isf_comp+0x1e>
        else            m2qp.qdata.comp_offset  = q_readbyte(&rxq);
 800625c:	4818      	ldr	r0, [pc, #96]	; (80062c0 <m2qp_isf_comp+0xf4>)
 800625e:	f000 fed4 	bl	800700a <q_readbyte>
 8006262:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <m2qp_isf_comp+0xec>)
 8006264:	8098      	strh	r0, [r3, #4]
 8006266:	e7cc      	b.n	8006202 <m2qp_isf_comp+0x36>
        score -= (score == 0);
 8006268:	4258      	negs	r0, r3
 800626a:	4158      	adcs	r0, r3
 800626c:	1a18      	subs	r0, r3, r0
 800626e:	b200      	sxth	r0, r0
}
 8006270:	b003      	add	sp, #12
 8006272:	bdf0      	pop	{r4, r5, r6, r7, pc}
                switch (m2qp.qtmpl.code & 0x1F) {
 8006274:	201f      	movs	r0, #31
 8006276:	4038      	ands	r0, r7
 8006278:	b2c3      	uxtb	r3, r0
 800627a:	2b05      	cmp	r3, #5
 800627c:	d812      	bhi.n	80062a4 <m2qp_isf_comp+0xd8>
 800627e:	0080      	lsls	r0, r0, #2
 8006280:	4b12      	ldr	r3, [pc, #72]	; (80062cc <m2qp_isf_comp+0x100>)
 8006282:	581b      	ldr	r3, [r3, r0]
 8006284:	469f      	mov	pc, r3
                    case 0: return 0;                   // !=
 8006286:	2000      	movs	r0, #0
 8006288:	e7f2      	b.n	8006270 <m2qp_isf_comp+0xa4>
                    case 3: return (j < k) - 1;         // <, <=
 800628a:	4291      	cmp	r1, r2
 800628c:	da0d      	bge.n	80062aa <m2qp_isf_comp+0xde>
 800628e:	2000      	movs	r0, #0
 8006290:	e7ee      	b.n	8006270 <m2qp_isf_comp+0xa4>
                    case 5: return (j > k) - 1;         // >, >=
 8006292:	4291      	cmp	r1, r2
 8006294:	dd0c      	ble.n	80062b0 <m2qp_isf_comp+0xe4>
 8006296:	2000      	movs	r0, #0
 8006298:	e7ea      	b.n	8006270 <m2qp_isf_comp+0xa4>
        return ((ot_int)m2qp.qtmpl.code & 1) - 1;
 800629a:	2001      	movs	r0, #1
 800629c:	4038      	ands	r0, r7
 800629e:	3801      	subs	r0, #1
 80062a0:	b200      	sxth	r0, r0
 80062a2:	e7e5      	b.n	8006270 <m2qp_isf_comp+0xa4>
                    case 1: return -1;                  // ==
 80062a4:	2001      	movs	r0, #1
 80062a6:	4240      	negs	r0, r0
 80062a8:	e7e2      	b.n	8006270 <m2qp_isf_comp+0xa4>
                    case 3: return (j < k) - 1;         // <, <=
 80062aa:	2001      	movs	r0, #1
 80062ac:	4240      	negs	r0, r0
 80062ae:	e7df      	b.n	8006270 <m2qp_isf_comp+0xa4>
                    case 5: return (j > k) - 1;         // >, >=
 80062b0:	2001      	movs	r0, #1
 80062b2:	4240      	negs	r0, r0
 80062b4:	e7dc      	b.n	8006270 <m2qp_isf_comp+0xa4>
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	20002700 	.word	0x20002700
 80062bc:	08005e65 	.word	0x08005e65
 80062c0:	20002d54 	.word	0x20002d54
 80062c4:	20002d68 	.word	0x20002d68
 80062c8:	08005ee1 	.word	0x08005ee1
 80062cc:	0800a3f4 	.word	0x0800a3f4

080062d0 <sub_process_query>:
ot_int sub_process_query(m2session* active) {
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	0005      	movs	r5, r0
    ot_u8 cmd_type = m2qp.cmd.code & 0x70;
 80062d4:	4b26      	ldr	r3, [pc, #152]	; (8006370 <sub_process_query+0xa0>)
 80062d6:	781f      	ldrb	r7, [r3, #0]
 80062d8:	2370      	movs	r3, #112	; 0x70
 80062da:	403b      	ands	r3, r7
    if (cmd_type > M2TT_REQ_M_INIT) {     ///@todo future update code
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d915      	bls.n	800630c <sub_process_query+0x3c>
        ot_int  number_of_acks  = (ot_int)q_readbyte(&rxq);
 80062e0:	4824      	ldr	r0, [pc, #144]	; (8006374 <sub_process_query+0xa4>)
 80062e2:	f000 fe92 	bl	800700a <q_readbyte>
 80062e6:	b204      	sxth	r4, r0
            id_test = m2np_idcmp(m2np.rt.dlog.length, q_markbyte(&rxq, m2np.rt.dlog.length));
 80062e8:	4b23      	ldr	r3, [pc, #140]	; (8006378 <sub_process_query+0xa8>)
 80062ea:	791e      	ldrb	r6, [r3, #4]
 80062ec:	0031      	movs	r1, r6
 80062ee:	4821      	ldr	r0, [pc, #132]	; (8006374 <sub_process_query+0xa4>)
 80062f0:	f000 fe57 	bl	8006fa2 <q_markbyte>
 80062f4:	0001      	movs	r1, r0
 80062f6:	0030      	movs	r0, r6
 80062f8:	f7ff f9c6 	bl	8005688 <m2np_idcmp>
            number_of_acks--;
 80062fc:	3c01      	subs	r4, #1
 80062fe:	b224      	sxth	r4, r4
        while ((number_of_acks >= 0) && (id_test == False));
 8006300:	2c00      	cmp	r4, #0
 8006302:	db01      	blt.n	8006308 <sub_process_query+0x38>
 8006304:	2800      	cmp	r0, #0
 8006306:	d0ef      	beq.n	80062e8 <sub_process_query+0x18>
        if (number_of_acks != 0) {
 8006308:	2c00      	cmp	r4, #0
 800630a:	d129      	bne.n	8006360 <sub_process_query+0x90>
    sub_load_query();
 800630c:	f7ff feb6 	bl	800607c <sub_load_query>
    if (cmd_type & M2TT_REQ_M) {  ///@todo future update code
 8006310:	067b      	lsls	r3, r7, #25
 8006312:	d51d      	bpl.n	8006350 <sub_process_query+0x80>
        local_ptr       = rxq.getcursor;
 8006314:	4c17      	ldr	r4, [pc, #92]	; (8006374 <sub_process_query+0xa4>)
 8006316:	6867      	ldr	r7, [r4, #4]
        query_size      = q_readbyte(&rxq);                 //token
 8006318:	0020      	movs	r0, r4
 800631a:	f000 fe76 	bl	800700a <q_readbyte>
 800631e:	0006      	movs	r6, r0
        query_size    <<= ((q_readbyte(&rxq) & 0x80) != 0);  //mask
 8006320:	0020      	movs	r0, r4
 8006322:	f000 fe72 	bl	800700a <q_readbyte>
 8006326:	b240      	sxtb	r0, r0
 8006328:	0fc0      	lsrs	r0, r0, #31
 800632a:	4086      	lsls	r6, r0
 800632c:	b236      	sxth	r6, r6
        rxq.getcursor  += query_size;
 800632e:	6863      	ldr	r3, [r4, #4]
 8006330:	469c      	mov	ip, r3
 8006332:	4466      	add	r6, ip
 8006334:	6066      	str	r6, [r4, #4]
        if (m2qp_isf_comp((m2qp.cmd.code & 1), &m2np.rt.dlog) < 0) {
 8006336:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <sub_process_query+0xa0>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2001      	movs	r0, #1
 800633c:	4018      	ands	r0, r3
 800633e:	490f      	ldr	r1, [pc, #60]	; (800637c <sub_process_query+0xac>)
 8006340:	f7ff ff44 	bl	80061cc <m2qp_isf_comp>
 8006344:	2800      	cmp	r0, #0
 8006346:	db0b      	blt.n	8006360 <sub_process_query+0x90>
        rxq.getcursor   = local_ptr;
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <sub_process_query+0xa4>)
 800634a:	605f      	str	r7, [r3, #4]
        sub_load_query();
 800634c:	f7ff fe96 	bl	800607c <sub_load_query>
    return m2qp_isf_comp((m2qp.cmd.code & 1), &m2np.rt.dlog);
 8006350:	4b07      	ldr	r3, [pc, #28]	; (8006370 <sub_process_query+0xa0>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2001      	movs	r0, #1
 8006356:	4018      	ands	r0, r3
 8006358:	4908      	ldr	r1, [pc, #32]	; (800637c <sub_process_query+0xac>)
 800635a:	f7ff ff37 	bl	80061cc <m2qp_isf_comp>
}
 800635e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    active->flags &= ~M2FI_LISTEN;
 8006360:	7aea      	ldrb	r2, [r5, #11]
 8006362:	237f      	movs	r3, #127	; 0x7f
 8006364:	4013      	ands	r3, r2
 8006366:	72eb      	strb	r3, [r5, #11]
    return -1;
 8006368:	2001      	movs	r0, #1
 800636a:	4240      	negs	r0, r0
 800636c:	e7f7      	b.n	800635e <sub_process_query+0x8e>
 800636e:	46c0      	nop			; (mov r8, r8)
 8006370:	20002700 	.word	0x20002700
 8006374:	20002d54 	.word	0x20002d54
 8006378:	20002698 	.word	0x20002698
 800637c:	2000269c 	.word	0x2000269c

08006380 <sub_parse_request>:
ot_int sub_parse_request(m2session* active) {
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006382:	0006      	movs	r6, r0
    active->netstate      &= ~M2_NETSTATE_TMASK;
 8006384:	79c3      	ldrb	r3, [r0, #7]
 8006386:	2270      	movs	r2, #112	; 0x70
 8006388:	4393      	bics	r3, r2
 800638a:	71c3      	strb	r3, [r0, #7]
    m2qp.cmd.code           = q_readbyte(&rxq);
 800638c:	4836      	ldr	r0, [pc, #216]	; (8006468 <sub_parse_request+0xe8>)
 800638e:	f000 fe3c 	bl	800700a <q_readbyte>
 8006392:	4b36      	ldr	r3, [pc, #216]	; (800646c <sub_parse_request+0xec>)
 8006394:	7018      	strb	r0, [r3, #0]
    m2qp.cmd.ext            = (m2qp.cmd.code & 0x80) ? q_readbyte(&rxq) : 0;
 8006396:	b240      	sxtb	r0, r0
 8006398:	2800      	cmp	r0, #0
 800639a:	db31      	blt.n	8006400 <sub_parse_request+0x80>
 800639c:	2300      	movs	r3, #0
 800639e:	4a33      	ldr	r2, [pc, #204]	; (800646c <sub_parse_request+0xec>)
 80063a0:	7053      	strb	r3, [r2, #1]
    dll.comm.redundants     = 1;
 80063a2:	4d33      	ldr	r5, [pc, #204]	; (8006470 <sub_parse_request+0xf0>)
 80063a4:	212f      	movs	r1, #47	; 0x2f
 80063a6:	2001      	movs	r0, #1
 80063a8:	5468      	strb	r0, [r5, r1]
    dll.comm.csmaca_params  = m2qp.cmd.ext & (M2_CSMACA_CAMASK | M2_CSMACA_NOCSMA);
 80063aa:	303b      	adds	r0, #59	; 0x3b
 80063ac:	4003      	ands	r3, r0
    dll.comm.csmaca_params |= m2qp.cmd.code & M2_CSMACA_ARBMASK;
 80063ae:	7812      	ldrb	r2, [r2, #0]
 80063b0:	b251      	sxtb	r1, r2
 80063b2:	3004      	adds	r0, #4
 80063b4:	4008      	ands	r0, r1
 80063b6:	4318      	orrs	r0, r3
 80063b8:	232e      	movs	r3, #46	; 0x2e
 80063ba:	54e8      	strb	r0, [r5, r3]
    cmd_opcode              = m2qp.cmd.code & M2OP_MASK;
 80063bc:	240f      	movs	r4, #15
 80063be:	4014      	ands	r4, r2
    {   ot_u8 timeout_code  = q_readbyte(&rxq);
 80063c0:	4829      	ldr	r0, [pc, #164]	; (8006468 <sub_parse_request+0xe8>)
 80063c2:	f000 fe22 	bl	800700a <q_readbyte>
 80063c6:	0007      	movs	r7, r0
        dll.comm.rx_timeout = otutils_calc_timeout(timeout_code);   // original contention period
 80063c8:	f000 fe95 	bl	80070f6 <otutils_calc_timeout>
 80063cc:	62a8      	str	r0, [r5, #40]	; 0x28
        dll.comm.tc         = dll.comm.rx_timeout;                  // contention period counter
 80063ce:	6228      	str	r0, [r5, #32]
        if (timeout_code & 0x80) {
 80063d0:	063b      	lsls	r3, r7, #24
 80063d2:	d41a      	bmi.n	800640a <sub_parse_request+0x8a>
            dll.comm.tx_channels    = 1;
 80063d4:	4b26      	ldr	r3, [pc, #152]	; (8006470 <sub_parse_request+0xf0>)
 80063d6:	2230      	movs	r2, #48	; 0x30
 80063d8:	2101      	movs	r1, #1
 80063da:	5499      	strb	r1, [r3, r2]
            dll.comm.tx_chanlist    = &dll.comm.scratch[0];
 80063dc:	001a      	movs	r2, r3
 80063de:	322c      	adds	r2, #44	; 0x2c
 80063e0:	635a      	str	r2, [r3, #52]	; 0x34
            dll.comm.scratch[0]     = active->channel;
 80063e2:	79b1      	ldrb	r1, [r6, #6]
 80063e4:	222c      	movs	r2, #44	; 0x2c
 80063e6:	5499      	strb	r1, [r3, r2]
    if ((m2qp.cmd.code & 0x70) > M2TT_REQ_UB) {
 80063e8:	4b20      	ldr	r3, [pc, #128]	; (800646c <sub_parse_request+0xec>)
 80063ea:	781a      	ldrb	r2, [r3, #0]
 80063ec:	2370      	movs	r3, #112	; 0x70
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d917      	bls.n	8006424 <sub_parse_request+0xa4>
        score = sub_process_query(active);
 80063f4:	0030      	movs	r0, r6
 80063f6:	f7ff ff6b 	bl	80062d0 <sub_process_query>
 80063fa:	1e05      	subs	r5, r0, #0
    if (score >= 0) {
 80063fc:	da13      	bge.n	8006426 <sub_parse_request+0xa6>
 80063fe:	e022      	b.n	8006446 <sub_parse_request+0xc6>
    m2qp.cmd.ext            = (m2qp.cmd.code & 0x80) ? q_readbyte(&rxq) : 0;
 8006400:	4819      	ldr	r0, [pc, #100]	; (8006468 <sub_parse_request+0xe8>)
 8006402:	f000 fe02 	bl	800700a <q_readbyte>
 8006406:	0003      	movs	r3, r0
 8006408:	e7c9      	b.n	800639e <sub_parse_request+0x1e>
            dll.comm.tx_channels    = q_readbyte(&rxq);
 800640a:	4d17      	ldr	r5, [pc, #92]	; (8006468 <sub_parse_request+0xe8>)
 800640c:	0028      	movs	r0, r5
 800640e:	f000 fdfc 	bl	800700a <q_readbyte>
 8006412:	4f17      	ldr	r7, [pc, #92]	; (8006470 <sub_parse_request+0xf0>)
 8006414:	2330      	movs	r3, #48	; 0x30
 8006416:	54f8      	strb	r0, [r7, r3]
            dll.comm.tx_chanlist    = q_markbyte(&rxq, dll.comm.tx_channels);
 8006418:	b201      	sxth	r1, r0
 800641a:	0028      	movs	r0, r5
 800641c:	f000 fdc1 	bl	8006fa2 <q_markbyte>
 8006420:	6378      	str	r0, [r7, #52]	; 0x34
 8006422:	e7e1      	b.n	80063e8 <sub_parse_request+0x68>
    ot_int  score   = 0;
 8006424:	2500      	movs	r5, #0
        q_empty(&txq); // Flush TX ot_queue
 8006426:	4813      	ldr	r0, [pc, #76]	; (8006474 <sub_parse_request+0xf4>)
 8006428:	f000 fdaa 	bl	8006f80 <q_empty>
        if (m2qp.cmd.ext & M2CE_NORESP) {
 800642c:	4b0f      	ldr	r3, [pc, #60]	; (800646c <sub_parse_request+0xec>)
 800642e:	785b      	ldrb	r3, [r3, #1]
 8006430:	079b      	lsls	r3, r3, #30
 8006432:	d50a      	bpl.n	800644a <sub_parse_request+0xca>
            active->netstate |= M2_NETSTATE_SCRAP;
 8006434:	79f3      	ldrb	r3, [r6, #7]
 8006436:	2204      	movs	r2, #4
 8006438:	4313      	orrs	r3, r2
 800643a:	71f3      	strb	r3, [r6, #7]
        opgroup_proc[((cmd_opcode>>1) & 7)]();
 800643c:	0864      	lsrs	r4, r4, #1
 800643e:	00a4      	lsls	r4, r4, #2
 8006440:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <sub_parse_request+0xf8>)
 8006442:	58e3      	ldr	r3, [r4, r3]
 8006444:	4798      	blx	r3
}
 8006446:	0028      	movs	r0, r5
 8006448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            active->netstate |= M2_NETSTATE_RESPTX;
 800644a:	79f3      	ldrb	r3, [r6, #7]
 800644c:	2210      	movs	r2, #16
 800644e:	4313      	orrs	r3, r2
 8006450:	71f3      	strb	r3, [r6, #7]
            m2np_header(active, 0, M2FI_FRDIALOG); ///@todo Future Update Code, Can use 0 in addressing for Response
 8006452:	2200      	movs	r2, #0
 8006454:	2100      	movs	r1, #0
 8006456:	0030      	movs	r0, r6
 8006458:	f7ff f8b0 	bl	80055bc <m2np_header>
            q_writebyte(&txq, (M2TT_RESPONSE | cmd_opcode));            // Write Cmd code byte
 800645c:	0021      	movs	r1, r4
 800645e:	4805      	ldr	r0, [pc, #20]	; (8006474 <sub_parse_request+0xf4>)
 8006460:	f000 fda4 	bl	8006fac <q_writebyte>
 8006464:	e7ea      	b.n	800643c <sub_parse_request+0xbc>
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	20002d54 	.word	0x20002d54
 800646c:	20002700 	.word	0x20002700
 8006470:	20002648 	.word	0x20002648
 8006474:	20002d68 	.word	0x20002d68
 8006478:	0800a40c 	.word	0x0800a40c

0800647c <m2qp_parse_frame>:
OT_WEAK ot_int m2qp_parse_frame(m2session* active) {
 800647c:	b510      	push	{r4, lr}
    ot_u8 cmd_type = (*rxq.getcursor >> 4) & 7;
 800647e:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <m2qp_parse_frame+0x34>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	781a      	ldrb	r2, [r3, #0]
 8006484:	0912      	lsrs	r2, r2, #4
 8006486:	2307      	movs	r3, #7
 8006488:	4013      	ands	r3, r2
    if (cmd_type == 0)  return sub_parse_response(active);
 800648a:	d007      	beq.n	800649c <m2qp_parse_frame+0x20>
    if (cmd_type == 1)  return sub_parse_control(active);
 800648c:	2b01      	cmp	r3, #1
 800648e:	d008      	beq.n	80064a2 <m2qp_parse_frame+0x26>
    if (active->netstate & M2_NETSTATE_RESP) return -1;
 8006490:	79c3      	ldrb	r3, [r0, #7]
 8006492:	06db      	lsls	r3, r3, #27
 8006494:	d408      	bmi.n	80064a8 <m2qp_parse_frame+0x2c>
    return sub_parse_request(active);
 8006496:	f7ff ff73 	bl	8006380 <sub_parse_request>
}
 800649a:	bd10      	pop	{r4, pc}
    if (cmd_type == 0)  return sub_parse_response(active);
 800649c:	f7ff fd86 	bl	8005fac <sub_parse_response>
 80064a0:	e7fb      	b.n	800649a <m2qp_parse_frame+0x1e>
    if (cmd_type == 1)  return sub_parse_control(active);
 80064a2:	f7ff fdbd 	bl	8006020 <sub_parse_control>
 80064a6:	e7f8      	b.n	800649a <m2qp_parse_frame+0x1e>
    if (active->netstate & M2_NETSTATE_RESP) return -1;
 80064a8:	2001      	movs	r0, #1
 80064aa:	4240      	negs	r0, r0
 80064ac:	e7f5      	b.n	800649a <m2qp_parse_frame+0x1e>
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	20002d54 	.word	0x20002d54

080064b4 <m2qp_isf_call>:
OT_WEAK ot_int m2qp_isf_call( ot_u8 is_series, ot_queue* input_q, id_tmpl* user_id ) {
 80064b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064b6:	46d6      	mov	lr, sl
 80064b8:	464f      	mov	r7, r9
 80064ba:	4646      	mov	r6, r8
 80064bc:	b5c0      	push	{r6, r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	0006      	movs	r6, r0
 80064c2:	9005      	str	r0, [sp, #20]
 80064c4:	000c      	movs	r4, r1
 80064c6:	0017      	movs	r7, r2
 80064c8:	9203      	str	r2, [sp, #12]
    max_bytes   = (ot_int)q_readbyte(input_q);
 80064ca:	0008      	movs	r0, r1
 80064cc:	f000 fd9d 	bl	800700a <q_readbyte>
 80064d0:	b203      	sxth	r3, r0
 80064d2:	4698      	mov	r8, r3
    isf_id      = q_readbyte(input_q);
 80064d4:	0020      	movs	r0, r4
 80064d6:	f000 fd98 	bl	800700a <q_readbyte>
 80064da:	0005      	movs	r5, r0
 80064dc:	9004      	str	r0, [sp, #16]
    q_writebyte(&txq, isf_id);
 80064de:	0001      	movs	r1, r0
 80064e0:	4847      	ldr	r0, [pc, #284]	; (8006600 <m2qp_isf_call+0x14c>)
 80064e2:	f000 fd63 	bl	8006fac <q_writebyte>
    if (is_series) {
 80064e6:	2e00      	cmp	r6, #0
 80064e8:	d069      	beq.n	80065be <m2qp_isf_call+0x10a>
        fp_s = ISS_open( isf_id, VL_ACCESS_R, user_id );
 80064ea:	003a      	movs	r2, r7
 80064ec:	2124      	movs	r1, #36	; 0x24
 80064ee:	0028      	movs	r0, r5
 80064f0:	f001 f8f1 	bl	80076d6 <ISS_open>
 80064f4:	1e07      	subs	r7, r0, #0
        if (fp_s == NULL) {
 80064f6:	d100      	bne.n	80064fa <m2qp_isf_call+0x46>
 80064f8:	e07c      	b.n	80065f4 <m2qp_isf_call+0x140>
        offset = q_readshort(input_q);
 80064fa:	0020      	movs	r0, r4
 80064fc:	f000 fd8a 	bl	8007014 <q_readshort>
 8006500:	0006      	movs	r6, r0
 8006502:	b203      	sxth	r3, r0
 8006504:	4699      	mov	r9, r3
        q_writebyte( &txq, (ot_u8)fp_s->length );
 8006506:	7a39      	ldrb	r1, [r7, #8]
 8006508:	4c3d      	ldr	r4, [pc, #244]	; (8006600 <m2qp_isf_call+0x14c>)
 800650a:	0020      	movs	r0, r4
 800650c:	f000 fd4e 	bl	8006fac <q_writebyte>
        q_writeshort(&txq, offset );
 8006510:	0031      	movs	r1, r6
 8006512:	0020      	movs	r0, r4
 8006514:	f000 fd4f 	bl	8006fb6 <q_writeshort>
        clength_ptr     = txq.putcursor;
 8006518:	68a3      	ldr	r3, [r4, #8]
 800651a:	469a      	mov	sl, r3
        txq.putcursor  += 2;
 800651c:	3302      	adds	r3, #2
 800651e:	60a3      	str	r3, [r4, #8]
        for (i=0; i<fp_s->length; i++) {
 8006520:	2400      	movs	r4, #0
    ot_int  total_length = 0;
 8006522:	2500      	movs	r5, #0
        for (i=0; i<fp_s->length; i++) {
 8006524:	e00b      	b.n	800653e <m2qp_isf_call+0x8a>
                scratch.ushort = vl_read(fp_s, i);
 8006526:	0021      	movs	r1, r4
 8006528:	0038      	movs	r0, r7
 800652a:	f001 f815 	bl	8007558 <vl_read>
 800652e:	ab07      	add	r3, sp, #28
 8006530:	8018      	strh	r0, [r3, #0]
 8006532:	e00b      	b.n	800654c <m2qp_isf_call+0x98>
            vl_close(fp_f);
 8006534:	0030      	movs	r0, r6
 8006536:	f001 f891 	bl	800765c <vl_close>
        for (i=0; i<fp_s->length; i++) {
 800653a:	3401      	adds	r4, #1
 800653c:	b224      	sxth	r4, r4
 800653e:	893b      	ldrh	r3, [r7, #8]
 8006540:	429c      	cmp	r4, r3
 8006542:	da17      	bge.n	8006574 <m2qp_isf_call+0xc0>
            if ( (i&1) == 0 ) {
 8006544:	b2a4      	uxth	r4, r4
 8006546:	2601      	movs	r6, #1
 8006548:	4026      	ands	r6, r4
 800654a:	d0ec      	beq.n	8006526 <m2qp_isf_call+0x72>
            fp_f = ISF_open(scratch.ubyte[i&1], VL_ACCESS_R, user_id);
 800654c:	ab07      	add	r3, sp, #28
 800654e:	5d98      	ldrb	r0, [r3, r6]
 8006550:	9a03      	ldr	r2, [sp, #12]
 8006552:	2124      	movs	r1, #36	; 0x24
 8006554:	f001 f8c7 	bl	80076e6 <ISF_open>
 8006558:	1e06      	subs	r6, r0, #0
            if (fp_f != NULL) {
 800655a:	d0eb      	beq.n	8006534 <m2qp_isf_call+0x80>
                q_writebyte(&txq, GET_B0_U16(fp_f->idmod) );
 800655c:	7981      	ldrb	r1, [r0, #6]
 800655e:	4828      	ldr	r0, [pc, #160]	; (8006600 <m2qp_isf_call+0x14c>)
 8006560:	f000 fd24 	bl	8006fac <q_writebyte>
                q_writebyte(&txq, (ot_u8)fp_f->length );
 8006564:	7a31      	ldrb	r1, [r6, #8]
 8006566:	4826      	ldr	r0, [pc, #152]	; (8006600 <m2qp_isf_call+0x14c>)
 8006568:	f000 fd20 	bl	8006fac <q_writebyte>
                total_length += fp_f->length;
 800656c:	8933      	ldrh	r3, [r6, #8]
 800656e:	195d      	adds	r5, r3, r5
 8006570:	b22d      	sxth	r5, r5
 8006572:	e7df      	b.n	8006534 <m2qp_isf_call+0x80>
        vl_close(fp_s);
 8006574:	0038      	movs	r0, r7
 8006576:	f001 f871 	bl	800765c <vl_close>
        clength_ptr[0]  = scratch.ubyte[UPPER];
 800657a:	042b      	lsls	r3, r5, #16
 800657c:	0e1b      	lsrs	r3, r3, #24
 800657e:	4652      	mov	r2, sl
 8006580:	7013      	strb	r3, [r2, #0]
        clength_ptr[1]  = scratch.ubyte[LOWER];
 8006582:	7055      	strb	r5, [r2, #1]
    scratch.sshort = (txq.back - txq.putcursor);
 8006584:	4b1e      	ldr	r3, [pc, #120]	; (8006600 <m2qp_isf_call+0x14c>)
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	1ad2      	subs	r2, r2, r3
 800658c:	b212      	sxth	r2, r2
    if (max_bytes > scratch.sshort) {
 800658e:	4542      	cmp	r2, r8
 8006590:	db00      	blt.n	8006594 <m2qp_isf_call+0xe0>
    max_bytes   = (ot_int)q_readbyte(input_q);
 8006592:	4642      	mov	r2, r8
    scratch.sshort = (total_length - offset);
 8006594:	464b      	mov	r3, r9
 8006596:	1aeb      	subs	r3, r5, r3
 8006598:	b21b      	sxth	r3, r3
    if (max_bytes > scratch.sshort) {
 800659a:	4293      	cmp	r3, r2
 800659c:	db00      	blt.n	80065a0 <m2qp_isf_call+0xec>
 800659e:	0013      	movs	r3, r2
    return m2qp_load_isf(is_series, isf_id, offset, max_bytes, &sub_load_return, user_id);
 80065a0:	9a03      	ldr	r2, [sp, #12]
 80065a2:	9201      	str	r2, [sp, #4]
 80065a4:	4a17      	ldr	r2, [pc, #92]	; (8006604 <m2qp_isf_call+0x150>)
 80065a6:	9200      	str	r2, [sp, #0]
 80065a8:	464a      	mov	r2, r9
 80065aa:	9904      	ldr	r1, [sp, #16]
 80065ac:	9805      	ldr	r0, [sp, #20]
 80065ae:	f7ff fd8b 	bl	80060c8 <m2qp_load_isf>
}
 80065b2:	b008      	add	sp, #32
 80065b4:	bc1c      	pop	{r2, r3, r4}
 80065b6:	4690      	mov	r8, r2
 80065b8:	4699      	mov	r9, r3
 80065ba:	46a2      	mov	sl, r4
 80065bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        fp_f = ISF_open( isf_id, VL_ACCESS_R, user_id );
 80065be:	9a03      	ldr	r2, [sp, #12]
 80065c0:	2124      	movs	r1, #36	; 0x24
 80065c2:	9804      	ldr	r0, [sp, #16]
 80065c4:	f001 f88f 	bl	80076e6 <ISF_open>
 80065c8:	1e06      	subs	r6, r0, #0
        if (fp_f == NULL) {
 80065ca:	d016      	beq.n	80065fa <m2qp_isf_call+0x146>
        offset          = q_readbyte(input_q);
 80065cc:	0020      	movs	r0, r4
 80065ce:	f000 fd1c 	bl	800700a <q_readbyte>
 80065d2:	0001      	movs	r1, r0
 80065d4:	b203      	sxth	r3, r0
 80065d6:	4699      	mov	r9, r3
        total_length    = fp_f->length;
 80065d8:	8934      	ldrh	r4, [r6, #8]
 80065da:	b225      	sxth	r5, r4
        q_writebyte(&txq, (ot_u8)offset );
 80065dc:	4f08      	ldr	r7, [pc, #32]	; (8006600 <m2qp_isf_call+0x14c>)
 80065de:	0038      	movs	r0, r7
 80065e0:	f000 fce4 	bl	8006fac <q_writebyte>
        q_writebyte(&txq, (ot_u8)total_length );
 80065e4:	b2e1      	uxtb	r1, r4
 80065e6:	0038      	movs	r0, r7
 80065e8:	f000 fce0 	bl	8006fac <q_writebyte>
        vl_close(fp_f);
 80065ec:	0030      	movs	r0, r6
 80065ee:	f001 f835 	bl	800765c <vl_close>
 80065f2:	e7c7      	b.n	8006584 <m2qp_isf_call+0xd0>
            return -2;
 80065f4:	2002      	movs	r0, #2
 80065f6:	4240      	negs	r0, r0
 80065f8:	e7db      	b.n	80065b2 <m2qp_isf_call+0xfe>
            return -2;
 80065fa:	2002      	movs	r0, #2
 80065fc:	4240      	negs	r0, r0
 80065fe:	e7d8      	b.n	80065b2 <m2qp_isf_call+0xfe>
 8006600:	20002d68 	.word	0x20002d68
 8006604:	08005f05 	.word	0x08005f05

08006608 <sub_opgroup_collection>:
void sub_opgroup_collection(void) {
 8006608:	b510      	push	{r4, lr}
    if ( (*(ot_u16*)&m2qp.cmd & ((0x0070<<8)|M2CE_NORESP)) == 0 ) {
 800660a:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <sub_opgroup_collection+0x2c>)
 800660c:	881a      	ldrh	r2, [r3, #0]
 800660e:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <sub_opgroup_collection+0x30>)
 8006610:	421a      	tst	r2, r3
 8006612:	d002      	beq.n	800661a <sub_opgroup_collection+0x12>
    sub_opgroup_globalisf();
 8006614:	f7ff fc86 	bl	8005f24 <sub_opgroup_globalisf>
}
 8006618:	bd10      	pop	{r4, pc}
            nack = m2qp_isf_call((m2qp.cmd.code & 1), &rxq, &m2np.rt.dlog);
 800661a:	4b06      	ldr	r3, [pc, #24]	; (8006634 <sub_opgroup_collection+0x2c>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2001      	movs	r0, #1
 8006620:	4018      	ands	r0, r3
 8006622:	4a06      	ldr	r2, [pc, #24]	; (800663c <sub_opgroup_collection+0x34>)
 8006624:	4906      	ldr	r1, [pc, #24]	; (8006640 <sub_opgroup_collection+0x38>)
 8006626:	f7ff ff45 	bl	80064b4 <m2qp_isf_call>
            if (nack != 0) {
 800662a:	2800      	cmp	r0, #0
 800662c:	d0f2      	beq.n	8006614 <sub_opgroup_collection+0xc>
                sub_renack(nack);
 800662e:	f7ff fd0b 	bl	8006048 <sub_renack>
 8006632:	e7ef      	b.n	8006614 <sub_opgroup_collection+0xc>
 8006634:	20002700 	.word	0x20002700
 8006638:	00007002 	.word	0x00007002
 800663c:	2000269c 	.word	0x2000269c
 8006640:	20002d54 	.word	0x20002d54

08006644 <sub_return>:


// Return functions are not handled by the server (ignore)
static ot_int sub_return(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
    return 0;
}
 8006644:	2000      	movs	r0, #0
 8006646:	4770      	bx	lr

08006648 <sub_qnotfull>:
}



/// This is a form of overwrite protection
static ot_bool sub_qnotfull(ot_u8 write, ot_u8 write_size, ot_queue* q) {
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	0005      	movs	r5, r0
 800664c:	000c      	movs	r4, r1
    return (ot_bool)((write_size <= q_writespace(q)) || (write == 0));
 800664e:	0010      	movs	r0, r2
 8006650:	f000 fc7e 	bl	8006f50 <q_writespace>
 8006654:	4284      	cmp	r4, r0
 8006656:	dd05      	ble.n	8006664 <sub_qnotfull+0x1c>
 8006658:	2d00      	cmp	r5, #0
 800665a:	d001      	beq.n	8006660 <sub_qnotfull+0x18>
 800665c:	2000      	movs	r0, #0
 800665e:	e002      	b.n	8006666 <sub_qnotfull+0x1e>
 8006660:	2001      	movs	r0, #1
 8006662:	e000      	b.n	8006666 <sub_qnotfull+0x1e>
 8006664:	2001      	movs	r0, #1

    ///@note impl used prior to q_space()
    //return (ot_bool)(((q->putcursor+write_size) < q->back) || (write == 0));
}
 8006666:	bd70      	pop	{r4, r5, r6, pc}

08006668 <sub_filerestore>:




/// Not currently supported, always returns "unrestorable" error
static ot_int sub_filerestore(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	0005      	movs	r5, r0
 800666c:	0016      	movs	r6, r2
 800666e:	ab06      	add	r3, sp, #24
 8006670:	2400      	movs	r4, #0
 8006672:	5f1c      	ldrsh	r4, [r3, r4]
    ot_int  data_out    = 0;
 8006674:	2700      	movs	r7, #0
    //vlBLOCK file_block  = ((cmd_in >> 4) & 0x07);

    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8006676:	e009      	b.n	800668c <sub_filerestore+0x24>
        ot_u8   err_code    = 0x03;
        ot_u8   file_id     = q_readbyte(alp->inq);
        data_in            -= 1;

        if (respond) {
            q_writebyte(alp->outq, file_id);
 8006678:	0001      	movs	r1, r0
 800667a:	68e8      	ldr	r0, [r5, #12]
 800667c:	f000 fc96 	bl	8006fac <q_writebyte>
            q_writebyte(alp->outq, err_code);
 8006680:	2103      	movs	r1, #3
 8006682:	68e8      	ldr	r0, [r5, #12]
 8006684:	f000 fc92 	bl	8006fac <q_writebyte>
            data_out += 2;
 8006688:	3702      	adds	r7, #2
 800668a:	b23f      	sxth	r7, r7
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 800668c:	2c00      	cmp	r4, #0
 800668e:	dd0e      	ble.n	80066ae <sub_filerestore+0x46>
 8006690:	68ea      	ldr	r2, [r5, #12]
 8006692:	2102      	movs	r1, #2
 8006694:	0030      	movs	r0, r6
 8006696:	f7ff ffd7 	bl	8006648 <sub_qnotfull>
 800669a:	2800      	cmp	r0, #0
 800669c:	d007      	beq.n	80066ae <sub_filerestore+0x46>
        ot_u8   file_id     = q_readbyte(alp->inq);
 800669e:	68a8      	ldr	r0, [r5, #8]
 80066a0:	f000 fcb3 	bl	800700a <q_readbyte>
        data_in            -= 1;
 80066a4:	3c01      	subs	r4, #1
 80066a6:	b224      	sxth	r4, r4
        if (respond) {
 80066a8:	2e00      	cmp	r6, #0
 80066aa:	d0ef      	beq.n	800668c <sub_filerestore+0x24>
 80066ac:	e7e4      	b.n	8006678 <sub_filerestore+0x10>
        }
    }

    return data_out;
}
 80066ae:	0038      	movs	r0, r7
 80066b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080066b2 <sub_filecreate>:
static ot_int sub_filecreate(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
 80066b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066b4:	46d6      	mov	lr, sl
 80066b6:	b500      	push	{lr}
 80066b8:	b088      	sub	sp, #32
 80066ba:	0004      	movs	r4, r0
 80066bc:	468a      	mov	sl, r1
 80066be:	0017      	movs	r7, r2
 80066c0:	aa0e      	add	r2, sp, #56	; 0x38
 80066c2:	2500      	movs	r5, #0
 80066c4:	5f55      	ldrsh	r5, [r2, r5]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 80066c6:	091b      	lsrs	r3, r3, #4
 80066c8:	2207      	movs	r2, #7
 80066ca:	401a      	ands	r2, r3
 80066cc:	9205      	str	r2, [sp, #20]
    ot_int  data_out    = 0;
 80066ce:	2600      	movs	r6, #0
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 80066d0:	e00c      	b.n	80066ec <sub_filecreate+0x3a>
            q_writebyte(alp->outq, id);
 80066d2:	9903      	ldr	r1, [sp, #12]
 80066d4:	68e0      	ldr	r0, [r4, #12]
 80066d6:	f000 fc69 	bl	8006fac <q_writebyte>
            q_writebyte(alp->outq, err_code);
 80066da:	9904      	ldr	r1, [sp, #16]
 80066dc:	68e0      	ldr	r0, [r4, #12]
 80066de:	f000 fc65 	bl	8006fac <q_writebyte>
            data_out += 2;
 80066e2:	3602      	adds	r6, #2
 80066e4:	b236      	sxth	r6, r6
        vl_close(fp);
 80066e6:	9807      	ldr	r0, [sp, #28]
 80066e8:	f000 ffb8 	bl	800765c <vl_close>
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 80066ec:	2d00      	cmp	r5, #0
 80066ee:	dd26      	ble.n	800673e <sub_filecreate+0x8c>
 80066f0:	68e2      	ldr	r2, [r4, #12]
 80066f2:	2102      	movs	r1, #2
 80066f4:	0038      	movs	r0, r7
 80066f6:	f7ff ffa7 	bl	8006648 <sub_qnotfull>
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d01f      	beq.n	800673e <sub_filecreate+0x8c>
        vlFILE*     fp = NULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	9307      	str	r3, [sp, #28]
        data_in            -= 6;
 8006702:	3d06      	subs	r5, #6
 8006704:	b22d      	sxth	r5, r5
        id                  = q_readbyte(alp->inq);
 8006706:	68a0      	ldr	r0, [r4, #8]
 8006708:	f000 fc7f 	bl	800700a <q_readbyte>
 800670c:	9003      	str	r0, [sp, #12]
        mod                 = q_readbyte(alp->inq);
 800670e:	68a0      	ldr	r0, [r4, #8]
 8006710:	f000 fc7b 	bl	800700a <q_readbyte>
 8006714:	9004      	str	r0, [sp, #16]
        alp->inq->getcursor+= 2;           
 8006716:	68a2      	ldr	r2, [r4, #8]
 8006718:	6851      	ldr	r1, [r2, #4]
 800671a:	1c8b      	adds	r3, r1, #2
 800671c:	6053      	str	r3, [r2, #4]
        alloc               = q_readshort(alp->inq);
 800671e:	68a0      	ldr	r0, [r4, #8]
 8006720:	f000 fc78 	bl	8007014 <q_readshort>
        err_code            = vl_new(&fp, file_block, id, mod, alloc, user_id);
 8006724:	4651      	mov	r1, sl
 8006726:	9101      	str	r1, [sp, #4]
 8006728:	9000      	str	r0, [sp, #0]
 800672a:	9b04      	ldr	r3, [sp, #16]
 800672c:	9a03      	ldr	r2, [sp, #12]
 800672e:	9905      	ldr	r1, [sp, #20]
 8006730:	a807      	add	r0, sp, #28
 8006732:	f000 fdb1 	bl	8007298 <vl_new>
 8006736:	9004      	str	r0, [sp, #16]
        if (respond) {
 8006738:	2f00      	cmp	r7, #0
 800673a:	d0d4      	beq.n	80066e6 <sub_filecreate+0x34>
 800673c:	e7c9      	b.n	80066d2 <sub_filecreate+0x20>
}
 800673e:	0030      	movs	r0, r6
 8006740:	b008      	add	sp, #32
 8006742:	bc04      	pop	{r2}
 8006744:	4692      	mov	sl, r2
 8006746:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006748 <sub_filedelete>:
static ot_int sub_filedelete( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 8006748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800674a:	b085      	sub	sp, #20
 800674c:	0005      	movs	r5, r0
 800674e:	9103      	str	r1, [sp, #12]
 8006750:	0014      	movs	r4, r2
 8006752:	aa0a      	add	r2, sp, #40	; 0x28
 8006754:	2600      	movs	r6, #0
 8006756:	5f96      	ldrsh	r6, [r2, r6]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 8006758:	091b      	lsrs	r3, r3, #4
 800675a:	2207      	movs	r2, #7
 800675c:	401a      	ands	r2, r3
 800675e:	9202      	str	r2, [sp, #8]
    ot_int  data_out    = 0;
 8006760:	2700      	movs	r7, #0
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8006762:	e009      	b.n	8006778 <sub_filedelete+0x30>
            q_writebyte(alp->outq, file_id);
 8006764:	9900      	ldr	r1, [sp, #0]
 8006766:	68e8      	ldr	r0, [r5, #12]
 8006768:	f000 fc20 	bl	8006fac <q_writebyte>
            q_writebyte(alp->outq, err_code);
 800676c:	9901      	ldr	r1, [sp, #4]
 800676e:	68e8      	ldr	r0, [r5, #12]
 8006770:	f000 fc1c 	bl	8006fac <q_writebyte>
            data_out += 2;
 8006774:	3702      	adds	r7, #2
 8006776:	b23f      	sxth	r7, r7
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8006778:	2e00      	cmp	r6, #0
 800677a:	dd15      	ble.n	80067a8 <sub_filedelete+0x60>
 800677c:	68ea      	ldr	r2, [r5, #12]
 800677e:	2102      	movs	r1, #2
 8006780:	0020      	movs	r0, r4
 8006782:	f7ff ff61 	bl	8006648 <sub_qnotfull>
 8006786:	2800      	cmp	r0, #0
 8006788:	d00e      	beq.n	80067a8 <sub_filedelete+0x60>
        data_in--;
 800678a:	3e01      	subs	r6, #1
 800678c:	b236      	sxth	r6, r6
        file_id     = q_readbyte(alp->inq);
 800678e:	68a8      	ldr	r0, [r5, #8]
 8006790:	f000 fc3b 	bl	800700a <q_readbyte>
 8006794:	0001      	movs	r1, r0
 8006796:	9000      	str	r0, [sp, #0]
        err_code    = vl_delete(file_block, file_id, user_id);
 8006798:	9a03      	ldr	r2, [sp, #12]
 800679a:	9802      	ldr	r0, [sp, #8]
 800679c:	f000 fdd4 	bl	8007348 <vl_delete>
 80067a0:	9001      	str	r0, [sp, #4]
        if (respond) {
 80067a2:	2c00      	cmp	r4, #0
 80067a4:	d0e8      	beq.n	8006778 <sub_filedelete+0x30>
 80067a6:	e7dd      	b.n	8006764 <sub_filedelete+0x1c>
}
 80067a8:	0038      	movs	r0, r7
 80067aa:	b005      	add	sp, #20
 80067ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067ae <sub_fileheaders>:
static ot_int sub_fileheaders( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 80067ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067b0:	46d6      	mov	lr, sl
 80067b2:	4647      	mov	r7, r8
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b087      	sub	sp, #28
 80067b8:	0006      	movs	r6, r0
 80067ba:	0011      	movs	r1, r2
 80067bc:	9203      	str	r2, [sp, #12]
 80067be:	aa0e      	add	r2, sp, #56	; 0x38
 80067c0:	2400      	movs	r4, #0
 80067c2:	5f14      	ldrsh	r4, [r2, r4]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 80067c4:	091b      	lsrs	r3, r3, #4
 80067c6:	2507      	movs	r5, #7
 80067c8:	401d      	ands	r5, r3
    if (respond) {
 80067ca:	2900      	cmp	r1, #0
 80067cc:	d002      	beq.n	80067d4 <sub_fileheaders+0x26>
    ot_int  data_out    = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	4698      	mov	r8, r3
 80067d2:	e02e      	b.n	8006832 <sub_fileheaders+0x84>
 80067d4:	2300      	movs	r3, #0
 80067d6:	4698      	mov	r8, r3
}
 80067d8:	4640      	mov	r0, r8
 80067da:	b007      	add	sp, #28
 80067dc:	bc0c      	pop	{r2, r3}
 80067de:	4690      	mov	r8, r2
 80067e0:	469a      	mov	sl, r3
 80067e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                q_writeshort_be(alp->outq, vworm_read(header + 4)); // id & mod
 80067e4:	68f3      	ldr	r3, [r6, #12]
 80067e6:	469a      	mov	sl, r3
 80067e8:	270e      	movs	r7, #14
 80067ea:	ab02      	add	r3, sp, #8
 80067ec:	469c      	mov	ip, r3
 80067ee:	4467      	add	r7, ip
 80067f0:	8838      	ldrh	r0, [r7, #0]
 80067f2:	3004      	adds	r0, #4
 80067f4:	b280      	uxth	r0, r0
 80067f6:	f001 ff15 	bl	8008624 <vworm_read>
 80067fa:	0001      	movs	r1, r0
 80067fc:	4650      	mov	r0, sl
 80067fe:	f000 fbe4 	bl	8006fca <q_writeshort_be>
                q_writeshort(alp->outq, vworm_read(header + 0)); // length
 8006802:	68f3      	ldr	r3, [r6, #12]
 8006804:	469a      	mov	sl, r3
 8006806:	8838      	ldrh	r0, [r7, #0]
 8006808:	f001 ff0c 	bl	8008624 <vworm_read>
 800680c:	0001      	movs	r1, r0
 800680e:	4650      	mov	r0, sl
 8006810:	f000 fbd1 	bl	8006fb6 <q_writeshort>
                q_writeshort(alp->outq, vworm_read(header + 2)); // alloc
 8006814:	68f3      	ldr	r3, [r6, #12]
 8006816:	469a      	mov	sl, r3
 8006818:	8838      	ldrh	r0, [r7, #0]
 800681a:	3002      	adds	r0, #2
 800681c:	b280      	uxth	r0, r0
 800681e:	f001 ff01 	bl	8008624 <vworm_read>
 8006822:	0001      	movs	r1, r0
 8006824:	4650      	mov	r0, sl
 8006826:	f000 fbc6 	bl	8006fb6 <q_writeshort>
                data_out += 6;
 800682a:	4643      	mov	r3, r8
 800682c:	3306      	adds	r3, #6
 800682e:	b21b      	sxth	r3, r3
 8006830:	4698      	mov	r8, r3
        while ((data_in > 0) && sub_qnotfull(respond, 6, alp->outq)) {
 8006832:	2c00      	cmp	r4, #0
 8006834:	ddd0      	ble.n	80067d8 <sub_fileheaders+0x2a>
 8006836:	68f2      	ldr	r2, [r6, #12]
 8006838:	2106      	movs	r1, #6
 800683a:	9803      	ldr	r0, [sp, #12]
 800683c:	f7ff ff04 	bl	8006648 <sub_qnotfull>
 8006840:	2800      	cmp	r0, #0
 8006842:	d0c9      	beq.n	80067d8 <sub_fileheaders+0x2a>
            data_in--;  // one for the file id
 8006844:	3c01      	subs	r4, #1
 8006846:	b224      	sxth	r4, r4
            allow_output = (ot_bool)(vl_getheader_vaddr(&header, file_block, \
 8006848:	68b0      	ldr	r0, [r6, #8]
 800684a:	f000 fbde 	bl	800700a <q_readbyte>
 800684e:	0002      	movs	r2, r0
 8006850:	2300      	movs	r3, #0
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	3324      	adds	r3, #36	; 0x24
 8006856:	0029      	movs	r1, r5
 8006858:	200e      	movs	r0, #14
 800685a:	af02      	add	r7, sp, #8
 800685c:	46bc      	mov	ip, r7
 800685e:	4460      	add	r0, ip
 8006860:	f000 fdca 	bl	80073f8 <vl_getheader_vaddr>
            if (allow_output) {
 8006864:	2800      	cmp	r0, #0
 8006866:	d1e4      	bne.n	8006832 <sub_fileheaders+0x84>
 8006868:	e7bc      	b.n	80067e4 <sub_fileheaders+0x36>
	...

0800686c <sub_filedata>:
static ot_int sub_filedata(alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in) {
 800686c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686e:	46de      	mov	lr, fp
 8006870:	4657      	mov	r7, sl
 8006872:	464e      	mov	r6, r9
 8006874:	4645      	mov	r5, r8
 8006876:	b5e0      	push	{r5, r6, r7, lr}
 8006878:	b093      	sub	sp, #76	; 0x4c
 800687a:	900c      	str	r0, [sp, #48]	; 0x30
 800687c:	9109      	str	r1, [sp, #36]	; 0x24
 800687e:	920a      	str	r2, [sp, #40]	; 0x28
 8006880:	aa1c      	add	r2, sp, #112	; 0x70
 8006882:	2100      	movs	r1, #0
 8006884:	5e52      	ldrsh	r2, [r2, r1]
 8006886:	4692      	mov	sl, r2
 8006888:	220f      	movs	r2, #15
 800688a:	401a      	ands	r2, r3
 800688c:	920b      	str	r2, [sp, #44]	; 0x2c
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 800688e:	091a      	lsrs	r2, r3, #4
 8006890:	2107      	movs	r1, #7
 8006892:	4011      	ands	r1, r2
 8006894:	9108      	str	r1, [sp, #32]
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 8006896:	079a      	lsls	r2, r3, #30
 8006898:	d511      	bpl.n	80068be <sub_filedata+0x52>
 800689a:	2212      	movs	r2, #18
 800689c:	9205      	str	r2, [sp, #20]
    ot_u8   insert_mode = (cmd_in & 0x01);
 800689e:	2201      	movs	r2, #1
 80068a0:	401a      	ands	r2, r3
 80068a2:	920e      	str	r2, [sp, #56]	; 0x38
    ot_queue*  inq      = alp->inq;
 80068a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068a6:	689e      	ldr	r6, [r3, #8]
    ot_queue*  outq     = alp->outq;
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	9304      	str	r3, [sp, #16]
    ot_qcur outq_marker = alp->outq->putcursor;
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	930f      	str	r3, [sp, #60]	; 0x3c
    vlFILE* fp          = NULL;
 80068b0:	2300      	movs	r3, #0
 80068b2:	9303      	str	r3, [sp, #12]
    ot_int  data_out    = 0;
 80068b4:	2700      	movs	r7, #0
 80068b6:	9607      	str	r6, [sp, #28]
 80068b8:	46bb      	mov	fp, r7
 80068ba:	4654      	mov	r4, sl
    while (data_in > 0) {
 80068bc:	e0c1      	b.n	8006a42 <sub_filedata+0x1d6>
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 80068be:	2224      	movs	r2, #36	; 0x24
 80068c0:	9205      	str	r2, [sp, #20]
 80068c2:	e7ec      	b.n	800689e <sub_filedata+0x32>
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 80068c4:	4b9f      	ldr	r3, [pc, #636]	; (8006b44 <sub_filedata+0x2d8>)
 80068c6:	469a      	mov	sl, r3
 80068c8:	e0d3      	b.n	8006a72 <sub_filedata+0x206>
            if (limit > fp->alloc) {
 80068ca:	4556      	cmp	r6, sl
 80068cc:	d324      	bcc.n	8006918 <sub_filedata+0xac>
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 80068ce:	4656      	mov	r6, sl
            if (insert_mode == 0) {
 80068d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d122      	bne.n	800691c <sub_filedata+0xb0>
                fp->length = 0;
 80068d6:	9a03      	ldr	r2, [sp, #12]
 80068d8:	8113      	strh	r3, [r2, #8]
 80068da:	4643      	mov	r3, r8
 80068dc:	46b0      	mov	r8, r6
 80068de:	46ba      	mov	sl, r7
 80068e0:	9f07      	ldr	r7, [sp, #28]
 80068e2:	001e      	movs	r6, r3
            for (; offset<limit; offset+=2, span-=2, data_in-=2) {
 80068e4:	4545      	cmp	r5, r8
 80068e6:	d21f      	bcs.n	8006928 <sub_filedata+0xbc>
                if (inq->getcursor >= inq->back) {
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d300      	bcc.n	80068f2 <sub_filedata+0x86>
 80068f0:	e114      	b.n	8006b1c <sub_filedata+0x2b0>
                err_code |= vl_write(fp, offset, q_readshort_be(inq));
 80068f2:	0038      	movs	r0, r7
 80068f4:	f000 fb99 	bl	800702a <q_readshort_be>
 80068f8:	0002      	movs	r2, r0
 80068fa:	0029      	movs	r1, r5
 80068fc:	9803      	ldr	r0, [sp, #12]
 80068fe:	f000 fe32 	bl	8007566 <vl_write>
 8006902:	4653      	mov	r3, sl
 8006904:	4303      	orrs	r3, r0
 8006906:	b2db      	uxtb	r3, r3
 8006908:	469a      	mov	sl, r3
            for (; offset<limit; offset+=2, span-=2, data_in-=2) {
 800690a:	3502      	adds	r5, #2
 800690c:	b2ad      	uxth	r5, r5
 800690e:	3e02      	subs	r6, #2
 8006910:	b2b6      	uxth	r6, r6
 8006912:	3c02      	subs	r4, #2
 8006914:	b224      	sxth	r4, r4
 8006916:	e7e5      	b.n	80068e4 <sub_filedata+0x78>
                err_code    = 0x08;
 8006918:	2708      	movs	r7, #8
 800691a:	e7d9      	b.n	80068d0 <sub_filedata+0x64>
 800691c:	4643      	mov	r3, r8
 800691e:	46b0      	mov	r8, r6
 8006920:	46ba      	mov	sl, r7
 8006922:	9f07      	ldr	r7, [sp, #28]
 8006924:	001e      	movs	r6, r3
 8006926:	e7dd      	b.n	80068e4 <sub_filedata+0x78>
 8006928:	46b0      	mov	r8, r6
 800692a:	4657      	mov	r7, sl
 800692c:	e079      	b.n	8006a22 <sub_filedata+0x1b6>
            ot_u8 overhead = 5 << (inc_header != 0);
 800692e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006930:	2b0c      	cmp	r3, #12
 8006932:	d026      	beq.n	8006982 <sub_filedata+0x116>
 8006934:	2305      	movs	r3, #5
 8006936:	930d      	str	r3, [sp, #52]	; 0x34
            if (overhead >= q_writespace(outq)) {
 8006938:	9804      	ldr	r0, [sp, #16]
 800693a:	f000 fb09 	bl	8006f50 <q_writespace>
 800693e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006940:	4283      	cmp	r3, r0
 8006942:	db00      	blt.n	8006946 <sub_filedata+0xda>
 8006944:	e0ec      	b.n	8006b20 <sub_filedata+0x2b4>
            data_out += overhead;
 8006946:	445b      	add	r3, fp
 8006948:	b21b      	sxth	r3, r3
 800694a:	469b      	mov	fp, r3
            if (inc_header) {
 800694c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800694e:	2b0c      	cmp	r3, #12
 8006950:	d01a      	beq.n	8006988 <sub_filedata+0x11c>
                q_writebyte(outq, (vworm_read(header+4) & 0x00ff) );
 8006952:	230e      	movs	r3, #14
 8006954:	aa0e      	add	r2, sp, #56	; 0x38
 8006956:	4694      	mov	ip, r2
 8006958:	4463      	add	r3, ip
 800695a:	8818      	ldrh	r0, [r3, #0]
 800695c:	3004      	adds	r0, #4
 800695e:	b280      	uxth	r0, r0
 8006960:	f001 fe60 	bl	8008624 <vworm_read>
 8006964:	b2c1      	uxtb	r1, r0
 8006966:	9804      	ldr	r0, [sp, #16]
 8006968:	f000 fb20 	bl	8006fac <q_writebyte>
            if (offset >= fp->length) {
 800696c:	9b03      	ldr	r3, [sp, #12]
 800696e:	891b      	ldrh	r3, [r3, #8]
 8006970:	42ab      	cmp	r3, r5
 8006972:	d926      	bls.n	80069c2 <sub_filedata+0x156>
            else if (limit > fp->length) {
 8006974:	4553      	cmp	r3, sl
 8006976:	d227      	bcs.n	80069c8 <sub_filedata+0x15c>
                span    = fp->length - offset;
 8006978:	1b9a      	subs	r2, r3, r6
 800697a:	b292      	uxth	r2, r2
 800697c:	4690      	mov	r8, r2
                limit   = fp->length;
 800697e:	469a      	mov	sl, r3
 8006980:	e022      	b.n	80069c8 <sub_filedata+0x15c>
            ot_u8 overhead = 5 << (inc_header != 0);
 8006982:	3b02      	subs	r3, #2
 8006984:	930d      	str	r3, [sp, #52]	; 0x34
 8006986:	e7d7      	b.n	8006938 <sub_filedata+0xcc>
                q_writeshort_be(outq, vworm_read(header + 4));
 8006988:	ab0e      	add	r3, sp, #56	; 0x38
 800698a:	89d8      	ldrh	r0, [r3, #14]
 800698c:	3004      	adds	r0, #4
 800698e:	b280      	uxth	r0, r0
 8006990:	f001 fe48 	bl	8008624 <vworm_read>
 8006994:	0001      	movs	r1, r0
 8006996:	9804      	ldr	r0, [sp, #16]
 8006998:	f000 fb17 	bl	8006fca <q_writeshort_be>
                q_writeshort(outq, vworm_read(header + 0));    // length
 800699c:	ab0e      	add	r3, sp, #56	; 0x38
 800699e:	89d8      	ldrh	r0, [r3, #14]
 80069a0:	f001 fe40 	bl	8008624 <vworm_read>
 80069a4:	0001      	movs	r1, r0
 80069a6:	9804      	ldr	r0, [sp, #16]
 80069a8:	f000 fb05 	bl	8006fb6 <q_writeshort>
                q_writeshort(outq, vworm_read(header + 2));    // alloc
 80069ac:	ab0e      	add	r3, sp, #56	; 0x38
 80069ae:	89d8      	ldrh	r0, [r3, #14]
 80069b0:	3002      	adds	r0, #2
 80069b2:	b280      	uxth	r0, r0
 80069b4:	f001 fe36 	bl	8008624 <vworm_read>
 80069b8:	0001      	movs	r1, r0
 80069ba:	9804      	ldr	r0, [sp, #16]
 80069bc:	f000 fafb 	bl	8006fb6 <q_writeshort>
 80069c0:	e7d4      	b.n	800696c <sub_filedata+0x100>
                limit   = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	469a      	mov	sl, r3
                span    = 0;
 80069c6:	4698      	mov	r8, r3
            q_writeshort(outq, offset);
 80069c8:	0031      	movs	r1, r6
 80069ca:	9e04      	ldr	r6, [sp, #16]
 80069cc:	0030      	movs	r0, r6
 80069ce:	f000 faf2 	bl	8006fb6 <q_writeshort>
            q_writeshort(outq, span);
 80069d2:	4641      	mov	r1, r8
 80069d4:	0030      	movs	r0, r6
 80069d6:	f000 faee 	bl	8006fb6 <q_writeshort>
 80069da:	4646      	mov	r6, r8
 80069dc:	46b8      	mov	r8, r7
 80069de:	4657      	mov	r7, sl
 80069e0:	0023      	movs	r3, r4
 80069e2:	465c      	mov	r4, fp
 80069e4:	469b      	mov	fp, r3
            for (; offset<limit; offset+=2, span-=2, data_out+=2) {
 80069e6:	42bd      	cmp	r5, r7
 80069e8:	d214      	bcs.n	8006a14 <sub_filedata+0x1a8>
                if (2 >= q_writespace(outq)) {
 80069ea:	9804      	ldr	r0, [sp, #16]
 80069ec:	f000 fab0 	bl	8006f50 <q_writespace>
 80069f0:	2802      	cmp	r0, #2
 80069f2:	dc00      	bgt.n	80069f6 <sub_filedata+0x18a>
 80069f4:	e096      	b.n	8006b24 <sub_filedata+0x2b8>
                q_writeshort_be(outq, vl_read(fp, offset));
 80069f6:	0029      	movs	r1, r5
 80069f8:	9803      	ldr	r0, [sp, #12]
 80069fa:	f000 fdad 	bl	8007558 <vl_read>
 80069fe:	0001      	movs	r1, r0
 8006a00:	9804      	ldr	r0, [sp, #16]
 8006a02:	f000 fae2 	bl	8006fca <q_writeshort_be>
            for (; offset<limit; offset+=2, span-=2, data_out+=2) {
 8006a06:	3502      	adds	r5, #2
 8006a08:	b2ad      	uxth	r5, r5
 8006a0a:	3e02      	subs	r6, #2
 8006a0c:	b2b6      	uxth	r6, r6
 8006a0e:	3402      	adds	r4, #2
 8006a10:	b224      	sxth	r4, r4
 8006a12:	e7e8      	b.n	80069e6 <sub_filedata+0x17a>
 8006a14:	4647      	mov	r7, r8
 8006a16:	46b0      	mov	r8, r6
 8006a18:	465b      	mov	r3, fp
 8006a1a:	46a3      	mov	fp, r4
 8006a1c:	001c      	movs	r4, r3
 8006a1e:	e000      	b.n	8006a22 <sub_filedata+0x1b6>
            err_code = 0xFF;
 8006a20:	27ff      	movs	r7, #255	; 0xff
            app_err = vl_close(fp);
 8006a22:	9803      	ldr	r0, [sp, #12]
 8006a24:	f000 fe1a 	bl	800765c <vl_close>
            if ((app_err != 0) && (err_code == 0)) {
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d002      	beq.n	8006a32 <sub_filedata+0x1c6>
 8006a2c:	2f00      	cmp	r7, #0
 8006a2e:	d100      	bne.n	8006a32 <sub_filedata+0x1c6>
                err_code = 0x09;    
 8006a30:	3709      	adds	r7, #9
        if (respond) {
 8006a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d148      	bne.n	8006aca <sub_filedata+0x25e>
        data_in -= 5;       // 5 bytes input header
 8006a38:	3c05      	subs	r4, #5
 8006a3a:	b2a4      	uxth	r4, r4
        data_in -= span;    // Bypass data payload
 8006a3c:	4643      	mov	r3, r8
 8006a3e:	1ae4      	subs	r4, r4, r3
 8006a40:	b224      	sxth	r4, r4
    while (data_in > 0) {
 8006a42:	2c00      	cmp	r4, #0
 8006a44:	dc00      	bgt.n	8006a48 <sub_filedata+0x1dc>
 8006a46:	e07b      	b.n	8006b40 <sub_filedata+0x2d4>
        file_id     = q_readbyte(inq);
 8006a48:	9f07      	ldr	r7, [sp, #28]
 8006a4a:	0038      	movs	r0, r7
 8006a4c:	f000 fadd 	bl	800700a <q_readbyte>
 8006a50:	9006      	str	r0, [sp, #24]
        offset      = q_readshort(inq);
 8006a52:	0038      	movs	r0, r7
 8006a54:	f000 fade 	bl	8007014 <q_readshort>
 8006a58:	0006      	movs	r6, r0
 8006a5a:	0005      	movs	r5, r0
        span        = q_readshort(inq);
 8006a5c:	0038      	movs	r0, r7
 8006a5e:	f000 fad9 	bl	8007014 <q_readshort>
 8006a62:	4680      	mov	r8, r0
        lim_check   = (ot_long)offset + (ot_long)span;
 8006a64:	1832      	adds	r2, r6, r0
        limit       = (lim_check > 65535) ? 65535 : (ot_u16)lim_check;
 8006a66:	4b37      	ldr	r3, [pc, #220]	; (8006b44 <sub_filedata+0x2d8>)
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	dd00      	ble.n	8006a6e <sub_filedata+0x202>
 8006a6c:	e72a      	b.n	80068c4 <sub_filedata+0x58>
 8006a6e:	b293      	uxth	r3, r2
 8006a70:	469a      	mov	sl, r3
        err_code    = vl_getheader_vaddr(&header, file_block, file_id, file_mod, user_id);
 8006a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	9b05      	ldr	r3, [sp, #20]
 8006a78:	4699      	mov	r9, r3
 8006a7a:	9a06      	ldr	r2, [sp, #24]
 8006a7c:	9908      	ldr	r1, [sp, #32]
 8006a7e:	200e      	movs	r0, #14
 8006a80:	af0e      	add	r7, sp, #56	; 0x38
 8006a82:	46bc      	mov	ip, r7
 8006a84:	4460      	add	r0, ip
 8006a86:	f000 fcb7 	bl	80073f8 <vl_getheader_vaddr>
 8006a8a:	0007      	movs	r7, r0
 8006a8c:	2312      	movs	r3, #18
 8006a8e:	464a      	mov	r2, r9
 8006a90:	401a      	ands	r2, r3
 8006a92:	4691      	mov	r9, r2
        file_mod    = ((file_mod & VL_ACCESS_W) != 0);
 8006a94:	0013      	movs	r3, r2
 8006a96:	1e5a      	subs	r2, r3, #1
 8006a98:	4193      	sbcs	r3, r2
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	9305      	str	r3, [sp, #20]
        if (err_code != 0) {
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d1bf      	bne.n	8006a22 <sub_filedata+0x1b6>
        fp = vl_open_file(header);
 8006aa2:	230e      	movs	r3, #14
 8006aa4:	aa0e      	add	r2, sp, #56	; 0x38
 8006aa6:	4694      	mov	ip, r2
 8006aa8:	4463      	add	r3, ip
 8006aaa:	8818      	ldrh	r0, [r3, #0]
 8006aac:	f000 fcda 	bl	8007464 <vl_open_file>
 8006ab0:	9003      	str	r0, [sp, #12]
        if (fp == NULL) {
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d0b4      	beq.n	8006a20 <sub_filedata+0x1b4>
        if (file_mod) {
 8006ab6:	464a      	mov	r2, r9
 8006ab8:	2a00      	cmp	r2, #0
 8006aba:	d100      	bne.n	8006abe <sub_filedata+0x252>
 8006abc:	e737      	b.n	800692e <sub_filedata+0xc2>
            if (offset >= fp->alloc) {
 8006abe:	8886      	ldrh	r6, [r0, #4]
 8006ac0:	42ae      	cmp	r6, r5
 8006ac2:	d900      	bls.n	8006ac6 <sub_filedata+0x25a>
 8006ac4:	e701      	b.n	80068ca <sub_filedata+0x5e>
                err_code = 0x07;
 8006ac6:	2707      	movs	r7, #7
 8006ac8:	e7ab      	b.n	8006a22 <sub_filedata+0x1b6>
            if (2 >= q_writespace(outq)) {
 8006aca:	9d04      	ldr	r5, [sp, #16]
 8006acc:	0028      	movs	r0, r5
 8006ace:	f000 fa3f 	bl	8006f50 <q_writespace>
 8006ad2:	2802      	cmp	r0, #2
 8006ad4:	dd32      	ble.n	8006b3c <sub_filedata+0x2d0>
            if (file_mod | err_code) {
 8006ad6:	9b05      	ldr	r3, [sp, #20]
 8006ad8:	433b      	orrs	r3, r7
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0ab      	beq.n	8006a38 <sub_filedata+0x1cc>
                if (file_mod == 0) {
 8006ae0:	464b      	mov	r3, r9
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d107      	bne.n	8006af6 <sub_filedata+0x28a>
                    outq->putcursor     = outq_marker;
 8006ae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ae8:	60ab      	str	r3, [r5, #8]
                    alp->OUTREC(CMD)   |= 0x0F;
 8006aea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006aec:	794b      	ldrb	r3, [r1, #5]
 8006aee:	220f      	movs	r2, #15
 8006af0:	4313      	orrs	r3, r2
 8006af2:	714b      	strb	r3, [r1, #5]
                    data_in             = 0;
 8006af4:	2400      	movs	r4, #0
                q_writebyte(outq, file_id);
 8006af6:	9906      	ldr	r1, [sp, #24]
 8006af8:	9d04      	ldr	r5, [sp, #16]
 8006afa:	0028      	movs	r0, r5
 8006afc:	f000 fa56 	bl	8006fac <q_writebyte>
                q_writebyte(outq, err_code);
 8006b00:	0039      	movs	r1, r7
 8006b02:	0028      	movs	r0, r5
 8006b04:	f000 fa52 	bl	8006fac <q_writebyte>
                q_markbyte(inq, span);         // go past any leftover input data
 8006b08:	4643      	mov	r3, r8
 8006b0a:	b219      	sxth	r1, r3
 8006b0c:	9807      	ldr	r0, [sp, #28]
 8006b0e:	f000 fa48 	bl	8006fa2 <q_markbyte>
                data_out += 2;
 8006b12:	465b      	mov	r3, fp
 8006b14:	3302      	adds	r3, #2
 8006b16:	b21b      	sxth	r3, r3
 8006b18:	469b      	mov	fp, r3
 8006b1a:	e78d      	b.n	8006a38 <sub_filedata+0x1cc>
 8006b1c:	465f      	mov	r7, fp
 8006b1e:	e002      	b.n	8006b26 <sub_filedata+0x2ba>
 8006b20:	465f      	mov	r7, fp
 8006b22:	e000      	b.n	8006b26 <sub_filedata+0x2ba>
 8006b24:	0027      	movs	r7, r4
    vl_close(fp);
 8006b26:	9803      	ldr	r0, [sp, #12]
 8006b28:	f000 fd98 	bl	800765c <vl_close>
}
 8006b2c:	0038      	movs	r0, r7
 8006b2e:	b013      	add	sp, #76	; 0x4c
 8006b30:	bc3c      	pop	{r2, r3, r4, r5}
 8006b32:	4690      	mov	r8, r2
 8006b34:	4699      	mov	r9, r3
 8006b36:	46a2      	mov	sl, r4
 8006b38:	46ab      	mov	fp, r5
 8006b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b3c:	465f      	mov	r7, fp
 8006b3e:	e7f2      	b.n	8006b26 <sub_filedata+0x2ba>
 8006b40:	465f      	mov	r7, fp
 8006b42:	e7f3      	b.n	8006b2c <sub_filedata+0x2c0>
 8006b44:	0000ffff 	.word	0x0000ffff

08006b48 <sub_fileperms>:
static ot_int sub_fileperms( alp_tmpl* alp, const id_tmpl* user_id, ot_u8 respond, ot_u8 cmd_in, ot_int data_in ) {
 8006b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b4a:	46ce      	mov	lr, r9
 8006b4c:	4647      	mov	r7, r8
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b089      	sub	sp, #36	; 0x24
 8006b52:	0006      	movs	r6, r0
 8006b54:	9105      	str	r1, [sp, #20]
 8006b56:	4691      	mov	r9, r2
 8006b58:	aa10      	add	r2, sp, #64	; 0x40
 8006b5a:	2400      	movs	r4, #0
 8006b5c:	5f14      	ldrsh	r4, [r2, r4]
    vlBLOCK file_block  = (vlBLOCK)((cmd_in >> 4) & 0x07);
 8006b5e:	091a      	lsrs	r2, r3, #4
 8006b60:	2707      	movs	r7, #7
 8006b62:	4017      	ands	r7, r2
 8006b64:	9704      	str	r7, [sp, #16]
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 8006b66:	079b      	lsls	r3, r3, #30
 8006b68:	d453      	bmi.n	8006c12 <sub_fileperms+0xca>
 8006b6a:	2724      	movs	r7, #36	; 0x24
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4698      	mov	r8, r3
 8006b70:	e00d      	b.n	8006b8e <sub_fileperms+0x46>
            data_in--;  // two for the new mod
 8006b72:	3b02      	subs	r3, #2
 8006b74:	b21c      	sxth	r4, r3
            file_mod = vl_chmod(file_block, file_id, q_readbyte(alp->inq), user_id);
 8006b76:	68b0      	ldr	r0, [r6, #8]
 8006b78:	f000 fa47 	bl	800700a <q_readbyte>
 8006b7c:	0002      	movs	r2, r0
 8006b7e:	9b05      	ldr	r3, [sp, #20]
 8006b80:	9903      	ldr	r1, [sp, #12]
 8006b82:	9804      	ldr	r0, [sp, #16]
 8006b84:	f000 fcc7 	bl	8007516 <vl_chmod>
 8006b88:	0007      	movs	r7, r0
        if (allow_write) {
 8006b8a:	2d00      	cmp	r5, #0
 8006b8c:	d134      	bne.n	8006bf8 <sub_fileperms+0xb0>
    while ((data_in > 0) && sub_qnotfull(respond, 2, alp->outq)) {
 8006b8e:	2c00      	cmp	r4, #0
 8006b90:	dd41      	ble.n	8006c16 <sub_fileperms+0xce>
 8006b92:	68f2      	ldr	r2, [r6, #12]
 8006b94:	2102      	movs	r1, #2
 8006b96:	4648      	mov	r0, r9
 8006b98:	f7ff fd56 	bl	8006648 <sub_qnotfull>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d03a      	beq.n	8006c16 <sub_fileperms+0xce>
        ot_u8   file_id         = q_readbyte(alp->inq);
 8006ba0:	68b0      	ldr	r0, [r6, #8]
 8006ba2:	f000 fa32 	bl	800700a <q_readbyte>
 8006ba6:	9003      	str	r0, [sp, #12]
        ot_bool allow_write     = respond;
 8006ba8:	464d      	mov	r5, r9
 8006baa:	1e6b      	subs	r3, r5, #1
 8006bac:	419d      	sbcs	r5, r3
 8006bae:	b2ed      	uxtb	r5, r5
        data_in--;  // one for the file id
 8006bb0:	b2a3      	uxth	r3, r4
 8006bb2:	1e5c      	subs	r4, r3, #1
 8006bb4:	b224      	sxth	r4, r4
        if (file_mod == VL_ACCESS_W ) {
 8006bb6:	2f12      	cmp	r7, #18
 8006bb8:	d0db      	beq.n	8006b72 <sub_fileperms+0x2a>
        else if (allow_write) {
 8006bba:	464b      	mov	r3, r9
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0e4      	beq.n	8006b8a <sub_fileperms+0x42>
            allow_write = (ot_bool)(vl_getheader_vaddr(&header, file_block, file_id, \
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	3324      	adds	r3, #36	; 0x24
 8006bc6:	9a03      	ldr	r2, [sp, #12]
 8006bc8:	9904      	ldr	r1, [sp, #16]
 8006bca:	200e      	movs	r0, #14
 8006bcc:	ad04      	add	r5, sp, #16
 8006bce:	46ac      	mov	ip, r5
 8006bd0:	4460      	add	r0, ip
 8006bd2:	f000 fc11 	bl	80073f8 <vl_getheader_vaddr>
 8006bd6:	4245      	negs	r5, r0
 8006bd8:	4145      	adcs	r5, r0
 8006bda:	b2ed      	uxtb	r5, r5
            if (allow_write) {
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d1d4      	bne.n	8006b8a <sub_fileperms+0x42>
                file_idmod  = vworm_read(header + 4);   //shortcut to idmod, hack-ish but fast
 8006be0:	230e      	movs	r3, #14
 8006be2:	aa04      	add	r2, sp, #16
 8006be4:	4694      	mov	ip, r2
 8006be6:	4463      	add	r3, ip
 8006be8:	8818      	ldrh	r0, [r3, #0]
 8006bea:	3004      	adds	r0, #4
 8006bec:	b280      	uxth	r0, r0
 8006bee:	f001 fd19 	bl	8008624 <vworm_read>
                file_mod    = file_idmod >> 8;          ///@todo this might be endian dependent
 8006bf2:	0a00      	lsrs	r0, r0, #8
 8006bf4:	b2c7      	uxtb	r7, r0
 8006bf6:	e7c8      	b.n	8006b8a <sub_fileperms+0x42>
            q_writebyte(alp->outq, file_id);
 8006bf8:	9903      	ldr	r1, [sp, #12]
 8006bfa:	68f0      	ldr	r0, [r6, #12]
 8006bfc:	f000 f9d6 	bl	8006fac <q_writebyte>
            q_writebyte(alp->outq, file_mod);
 8006c00:	0039      	movs	r1, r7
 8006c02:	68f0      	ldr	r0, [r6, #12]
 8006c04:	f000 f9d2 	bl	8006fac <q_writebyte>
            data_out += 2;
 8006c08:	4643      	mov	r3, r8
 8006c0a:	3302      	adds	r3, #2
 8006c0c:	b21b      	sxth	r3, r3
 8006c0e:	4698      	mov	r8, r3
 8006c10:	e7bd      	b.n	8006b8e <sub_fileperms+0x46>
    ot_u8   file_mod    = ((cmd_in & 0x02) ? VL_ACCESS_W : VL_ACCESS_R);
 8006c12:	2712      	movs	r7, #18
 8006c14:	e7aa      	b.n	8006b6c <sub_fileperms+0x24>
}
 8006c16:	4640      	mov	r0, r8
 8006c18:	b009      	add	sp, #36	; 0x24
 8006c1a:	bc0c      	pop	{r2, r3}
 8006c1c:	4690      	mov	r8, r2
 8006c1e:	4699      	mov	r9, r3
 8006c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006c24 <alp_proc_filedata>:
OT_WEAK ot_bool alp_proc_filedata(alp_tmpl* alp, const id_tmpl* user_id) {
 8006c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c26:	b085      	sub	sp, #20
 8006c28:	0004      	movs	r4, r0
 8006c2a:	9103      	str	r1, [sp, #12]
    ot_int  data_in     = INREC(alp, PLEN);     //alp->INREC(PLEN);
 8006c2c:	2103      	movs	r1, #3
 8006c2e:	4249      	negs	r1, r1
 8006c30:	6880      	ldr	r0, [r0, #8]
 8006c32:	f000 f980 	bl	8006f36 <q_getcursor_val>
 8006c36:	b207      	sxth	r7, r0
    ot_u8   cmd_in      = INREC(alp, CMD);      //alp->INREC(CMD);
 8006c38:	2101      	movs	r1, #1
 8006c3a:	4249      	negs	r1, r1
 8006c3c:	68a0      	ldr	r0, [r4, #8]
 8006c3e:	f000 f97a 	bl	8006f36 <q_getcursor_val>
 8006c42:	0006      	movs	r6, r0
    alp->OUTREC(PLEN) = cmd_fn[cmd_in & 0x0F](alp, user_id, (cmd_in & 0x80), cmd_in, data_in);
 8006c44:	230f      	movs	r3, #15
 8006c46:	4003      	ands	r3, r0
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4a11      	ldr	r2, [pc, #68]	; (8006c90 <alp_proc_filedata+0x6c>)
 8006c4c:	589d      	ldr	r5, [r3, r2]
 8006c4e:	237f      	movs	r3, #127	; 0x7f
 8006c50:	0002      	movs	r2, r0
 8006c52:	439a      	bics	r2, r3
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	9700      	str	r7, [sp, #0]
 8006c58:	0003      	movs	r3, r0
 8006c5a:	9903      	ldr	r1, [sp, #12]
 8006c5c:	0020      	movs	r0, r4
 8006c5e:	47a8      	blx	r5
 8006c60:	b2c0      	uxtb	r0, r0
 8006c62:	70e0      	strb	r0, [r4, #3]
    if (cmd_in & 0x80) {
 8006c64:	0633      	lsls	r3, r6, #24
 8006c66:	d406      	bmi.n	8006c76 <alp_proc_filedata+0x52>
        alp->outq->putcursor   -= alp->OUTREC(PLEN);
 8006c68:	68e3      	ldr	r3, [r4, #12]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	1a10      	subs	r0, r2, r0
 8006c6e:	6098      	str	r0, [r3, #8]
}
 8006c70:	2001      	movs	r0, #1
 8006c72:	b005      	add	sp, #20
 8006c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        alp->OUTREC(CMD)  ^= 0x80;
 8006c76:	7962      	ldrb	r2, [r4, #5]
 8006c78:	2380      	movs	r3, #128	; 0x80
 8006c7a:	425b      	negs	r3, r3
 8006c7c:	4053      	eors	r3, r2
        alp->OUTREC(CMD)  |= (cmd_in & 0x02) ? 0x0F : 0x01;
 8006c7e:	b25b      	sxtb	r3, r3
 8006c80:	07b2      	lsls	r2, r6, #30
 8006c82:	d403      	bmi.n	8006c8c <alp_proc_filedata+0x68>
 8006c84:	2201      	movs	r2, #1
 8006c86:	4313      	orrs	r3, r2
 8006c88:	7163      	strb	r3, [r4, #5]
 8006c8a:	e7f1      	b.n	8006c70 <alp_proc_filedata+0x4c>
 8006c8c:	220f      	movs	r2, #15
 8006c8e:	e7fa      	b.n	8006c86 <alp_proc_filedata+0x62>
 8006c90:	0800a43c 	.word	0x0800a43c

08006c94 <alp_proc_logger>:
#include <otlib/auth.h>
#include <otlib/queue.h>

///@todo replace INREC calls with direct access from input

OT_WEAK ot_bool alp_proc_logger(alp_tmpl* alp, const id_tmpl* user_id) {
 8006c94:	b510      	push	{r4, lr}
 8006c96:	0004      	movs	r4, r0
/// Logger ALP is like ECHO.  The input is copied to the output.

    // Only root can log directly (this is an important security firewall)
    if (auth_isroot(user_id)) {
 8006c98:	0008      	movs	r0, r1
 8006c9a:	f000 f8cf 	bl	8006e3c <auth_isroot>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d101      	bne.n	8006ca6 <alp_proc_logger+0x12>
        if (alp->inq != alp->outq) {
            q_movedata(alp->outq, alp->inq, alp->OUTREC(PLEN));
        }
    }
    return True;
}
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	bd10      	pop	{r4, pc}
        alp->OUTREC(FLAGS)  = q_readbyte(alp->inq);
 8006ca6:	68a0      	ldr	r0, [r4, #8]
 8006ca8:	f000 f9af 	bl	800700a <q_readbyte>
 8006cac:	70a0      	strb	r0, [r4, #2]
        alp->OUTREC(PLEN)   = q_readbyte(alp->inq);
 8006cae:	68a0      	ldr	r0, [r4, #8]
 8006cb0:	f000 f9ab 	bl	800700a <q_readbyte>
 8006cb4:	70e0      	strb	r0, [r4, #3]
        alp->inq->getcursor+= 2;
 8006cb6:	68a2      	ldr	r2, [r4, #8]
 8006cb8:	6853      	ldr	r3, [r2, #4]
 8006cba:	3302      	adds	r3, #2
 8006cbc:	6053      	str	r3, [r2, #4]
        if (alp->inq != alp->outq) {
 8006cbe:	68a1      	ldr	r1, [r4, #8]
 8006cc0:	68e0      	ldr	r0, [r4, #12]
 8006cc2:	4281      	cmp	r1, r0
 8006cc4:	d0ed      	beq.n	8006ca2 <alp_proc_logger+0xe>
            q_movedata(alp->outq, alp->inq, alp->OUTREC(PLEN));
 8006cc6:	78e2      	ldrb	r2, [r4, #3]
 8006cc8:	f000 f9e6 	bl	8007098 <q_movedata>
 8006ccc:	e7e9      	b.n	8006ca2 <alp_proc_logger+0xe>

08006cce <alp_proc_null>:
 * The Null Processor is implemented here.  The rest of the processors are
 * implemented in separate C files, named alp_...c
 */
OT_WEAK ot_bool alp_proc_null(alp_tmpl* a0, const id_tmpl* a1) {
    return True;   // Atomic, with no payload data
}
 8006cce:	2001      	movs	r0, #1
 8006cd0:	4770      	bx	lr

08006cd2 <alp_init>:
 * ========================================================================<BR>
 */

#ifndef EXTF_alp_init
void alp_init(alp_tmpl* alp, ot_queue* inq, ot_queue* outq) {
    alp->purge_id       = 1;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	8003      	strh	r3, [r0, #0]
    alp->OUTREC(FLAGS)  = (ALP_FLAG_MB | ALP_FLAG_ME | ALP_FLAG_SR);   ///@todo this will need to be removed soon
 8006cd6:	33cf      	adds	r3, #207	; 0xcf
 8006cd8:	7083      	strb	r3, [r0, #2]
    alp->inq            = inq;
 8006cda:	6081      	str	r1, [r0, #8]
    alp->outq           = outq;
 8006cdc:	60c2      	str	r2, [r0, #12]
}
 8006cde:	4770      	bx	lr

08006ce0 <alp_parse_message>:
///@todo To be completed when transformation of ALP is complete
}



ALP_status alp_parse_message(alp_tmpl* alp, const id_tmpl* user_id) {
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	0004      	movs	r4, r0
 8006ce4:	000d      	movs	r5, r1
    //ot_u8       hdr_len;
    ot_int      proc_output;
    //ot_int      bytes;

    /// Lock the ot_queues while ALP is parsing/processing
    q_lock(alp->inq);
 8006ce6:	6880      	ldr	r0, [r0, #8]
 8006ce8:	f000 f93c 	bl	8006f64 <q_lock>
    q_lock(alp->outq);
 8006cec:	68e0      	ldr	r0, [r4, #12]
 8006cee:	f000 f939 	bl	8006f64 <q_lock>
 8006cf2:	e027      	b.n	8006d44 <alp_parse_message+0x64>
    /// previous message.  If new input record header does not match
    /// OpenTag requirement, bypass it and go to the next.  Else, copy
    /// the input record to the output record.  alp_proc() will adjust
    /// the output payload length and flags, as necessary.
    if (alp->OUTREC(FLAGS) & ALP_FLAG_ME) {
        alp->OUTREC(FLAGS)  = q_getcursor_val(alp->inq, 0);
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	68a0      	ldr	r0, [r4, #8]
 8006cf8:	f000 f91d 	bl	8006f36 <q_getcursor_val>
 8006cfc:	70a0      	strb	r0, [r4, #2]
        alp->OUTREC(PLEN)   = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	70e3      	strb	r3, [r4, #3]
        alp->OUTREC(ID)     = q_getcursor_val(alp->inq, 2);
 8006d02:	2102      	movs	r1, #2
 8006d04:	68a0      	ldr	r0, [r4, #8]
 8006d06:	f000 f916 	bl	8006f36 <q_getcursor_val>
 8006d0a:	7120      	strb	r0, [r4, #4]
        alp->OUTREC(CMD)    = q_getcursor_val(alp->inq, 3);
 8006d0c:	2103      	movs	r1, #3
 8006d0e:	68a0      	ldr	r0, [r4, #8]
 8006d10:	f000 f911 	bl	8006f36 <q_getcursor_val>
 8006d14:	7160      	strb	r0, [r4, #5]
 8006d16:	e022      	b.n	8006d5e <alp_parse_message+0x7e>
        // Also, remove output chunking flag
        alp->outq->putcursor   = hdr_position;
        alp->OUTREC(FLAGS)    &= ~NDEF_CF;
    }
    else {
        memcpy(hdr_position, &alp->OUTREC(FLAGS), 4);
 8006d18:	1ca1      	adds	r1, r4, #2
 8006d1a:	2204      	movs	r2, #4
 8006d1c:	0038      	movs	r0, r7
 8006d1e:	f001 fc21 	bl	8008564 <ot_memcpy>
        alp->OUTREC(FLAGS)  &= ~ALP_FLAG_MB;
 8006d22:	78a2      	ldrb	r2, [r4, #2]
 8006d24:	237f      	movs	r3, #127	; 0x7f
 8006d26:	4013      	ands	r3, r2
 8006d28:	70a3      	strb	r3, [r4, #2]
    }
    
    ///@note Added from old sources to handle batched ALP inputs
    {   ot_u8* nextrecord;
        nextrecord = input_position + input_position[1] + 4;
 8006d2a:	7873      	ldrb	r3, [r6, #1]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	18f3      	adds	r3, r6, r3
        if (nextrecord == alp->inq->putcursor) {
 8006d30:	68a2      	ldr	r2, [r4, #8]
 8006d32:	6891      	ldr	r1, [r2, #8]
 8006d34:	4299      	cmp	r1, r3
 8006d36:	d028      	beq.n	8006d8a <alp_parse_message+0xaa>
            /// The input record, now treated, shall be rewound
            alp->inq->putcursor = input_position;
            alp->inq->getcursor = input_position;
        }
        else {
            alp->inq->getcursor = nextrecord;
 8006d38:	6053      	str	r3, [r2, #4]

            ///@note HACK
            /// should be put into a loop
            if (alp->inq->putcursor > alp->inq->getcursor) {
 8006d3a:	68a3      	ldr	r3, [r4, #8]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d925      	bls.n	8006d90 <alp_parse_message+0xb0>
    if ((q_readspace(alp->inq) < 4) || (q_writespace(alp->outq) < 4)) {
 8006d44:	68a0      	ldr	r0, [r4, #8]
 8006d46:	f000 f908 	bl	8006f5a <q_readspace>
 8006d4a:	2803      	cmp	r0, #3
 8006d4c:	dd28      	ble.n	8006da0 <alp_parse_message+0xc0>
 8006d4e:	68e0      	ldr	r0, [r4, #12]
 8006d50:	f000 f8fe 	bl	8006f50 <q_writespace>
 8006d54:	2803      	cmp	r0, #3
 8006d56:	dd25      	ble.n	8006da4 <alp_parse_message+0xc4>
    if (alp->OUTREC(FLAGS) & ALP_FLAG_ME) {
 8006d58:	78a3      	ldrb	r3, [r4, #2]
 8006d5a:	065b      	lsls	r3, r3, #25
 8006d5c:	d4ca      	bmi.n	8006cf4 <alp_parse_message+0x14>
    input_position          = alp->inq->getcursor;
 8006d5e:	68a3      	ldr	r3, [r4, #8]
 8006d60:	685e      	ldr	r6, [r3, #4]
    alp->inq->getcursor    += 4;
 8006d62:	1d32      	adds	r2, r6, #4
 8006d64:	605a      	str	r2, [r3, #4]
    hdr_position            = alp->outq->putcursor;
 8006d66:	68e3      	ldr	r3, [r4, #12]
 8006d68:	689f      	ldr	r7, [r3, #8]
    alp->outq->putcursor   += 4;
 8006d6a:	1d3a      	adds	r2, r7, #4
 8006d6c:	609a      	str	r2, [r3, #8]
    proc_output = alp_proc(alp, user_id);
 8006d6e:	0029      	movs	r1, r5
 8006d70:	0020      	movs	r0, r4
 8006d72:	f7f9 fd51 	bl	8000818 <alp_proc>
    if (alp->OUTREC(PLEN) == 0) {
 8006d76:	78e3      	ldrb	r3, [r4, #3]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1cd      	bne.n	8006d18 <alp_parse_message+0x38>
        alp->outq->putcursor   = hdr_position;
 8006d7c:	68e3      	ldr	r3, [r4, #12]
 8006d7e:	609f      	str	r7, [r3, #8]
        alp->OUTREC(FLAGS)    &= ~NDEF_CF;
 8006d80:	78a3      	ldrb	r3, [r4, #2]
 8006d82:	2220      	movs	r2, #32
 8006d84:	4393      	bics	r3, r2
 8006d86:	70a3      	strb	r3, [r4, #2]
 8006d88:	e7cf      	b.n	8006d2a <alp_parse_message+0x4a>
            alp->inq->putcursor = input_position;
 8006d8a:	6096      	str	r6, [r2, #8]
            alp->inq->getcursor = input_position;
 8006d8c:	68a3      	ldr	r3, [r4, #8]
 8006d8e:	605e      	str	r6, [r3, #4]
            }
        }
    }
    
    /// Unlock the ot_queues after ALP is parsing/processing
    q_unlock(alp->inq);
 8006d90:	68a0      	ldr	r0, [r4, #8]
 8006d92:	f000 f8f2 	bl	8006f7a <q_unlock>
    q_unlock(alp->outq);
 8006d96:	68e0      	ldr	r0, [r4, #12]
 8006d98:	f000 f8ef 	bl	8006f7a <q_unlock>
    
    exit_code = MSG_End;
 8006d9c:	2006      	movs	r0, #6

    alp_parse_message_END:
    return exit_code;
}
 8006d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        exit_code = MSG_Null;
 8006da0:	2000      	movs	r0, #0
 8006da2:	e7fc      	b.n	8006d9e <alp_parse_message+0xbe>
 8006da4:	2000      	movs	r0, #0
 8006da6:	e7fa      	b.n	8006d9e <alp_parse_message+0xbe>

08006da8 <alp_breakdown_query_tmpl>:





OT_WEAK void alp_breakdown_query_tmpl(ot_queue* in_q, void* data_type) {
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	0006      	movs	r6, r0
 8006dac:	000d      	movs	r5, r1
    ot_u8   query_length;
    ot_u8   query_code;
    ot_u8*  query_mask;
    
    query_code      = q_readbyte(in_q);
 8006dae:	f000 f92c 	bl	800700a <q_readbyte>
 8006db2:	0007      	movs	r7, r0
    query_length    = q_readbyte(in_q);
 8006db4:	0030      	movs	r0, r6
 8006db6:	f000 f928 	bl	800700a <q_readbyte>
 8006dba:	0004      	movs	r4, r0
    query_mask      = NULL;
    
    if (query_code & 0x80) {
 8006dbc:	063b      	lsls	r3, r7, #24
 8006dbe:	d409      	bmi.n	8006dd4 <alp_breakdown_query_tmpl+0x2c>
    query_mask      = NULL;
 8006dc0:	2000      	movs	r0, #0
        query_mask  = q_markbyte(in_q, query_length);
    }
    
    ((query_tmpl*)data_type)->code      = query_code;
 8006dc2:	702f      	strb	r7, [r5, #0]
    ((query_tmpl*)data_type)->length    = query_length;
 8006dc4:	706c      	strb	r4, [r5, #1]
    ((query_tmpl*)data_type)->mask      = query_mask;
 8006dc6:	6068      	str	r0, [r5, #4]
    ((query_tmpl*)data_type)->value     = q_markbyte(in_q, query_length);
 8006dc8:	b221      	sxth	r1, r4
 8006dca:	0030      	movs	r0, r6
 8006dcc:	f000 f8e9 	bl	8006fa2 <q_markbyte>
 8006dd0:	60a8      	str	r0, [r5, #8]
}
 8006dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        query_mask  = q_markbyte(in_q, query_length);
 8006dd4:	b201      	sxth	r1, r0
 8006dd6:	0030      	movs	r0, r6
 8006dd8:	f000 f8e3 	bl	8006fa2 <q_markbyte>
 8006ddc:	e7f1      	b.n	8006dc2 <alp_breakdown_query_tmpl+0x1a>

08006dde <alp_breakdown_udp_tmpl>:





OT_WEAK void alp_breakdown_udp_tmpl(ot_queue* in_q, void* data_type) {
 8006dde:	b570      	push	{r4, r5, r6, lr}
 8006de0:	0005      	movs	r5, r0
 8006de2:	000c      	movs	r4, r1
    ot_int udp_data_length;
    udp_data_length                       = q_readshort(in_q);
 8006de4:	f000 f916 	bl	8007014 <q_readshort>
 8006de8:	b206      	sxth	r6, r0
    ((udp_tmpl*)data_type)->data_length   = udp_data_length;
 8006dea:	8020      	strh	r0, [r4, #0]
    ((udp_tmpl*)data_type)->dst_port      = q_readbyte(in_q);
 8006dec:	0028      	movs	r0, r5
 8006dee:	f000 f90c 	bl	800700a <q_readbyte>
 8006df2:	70a0      	strb	r0, [r4, #2]
    ((udp_tmpl*)data_type)->src_port      = q_readbyte(in_q);
 8006df4:	0028      	movs	r0, r5
 8006df6:	f000 f908 	bl	800700a <q_readbyte>
 8006dfa:	70e0      	strb	r0, [r4, #3]
    ((udp_tmpl*)data_type)->data          = q_markbyte(in_q, udp_data_length);
 8006dfc:	0031      	movs	r1, r6
 8006dfe:	0028      	movs	r0, r5
 8006e00:	f000 f8cf 	bl	8006fa2 <q_markbyte>
 8006e04:	6060      	str	r0, [r4, #4]
}
 8006e06:	bd70      	pop	{r4, r5, r6, pc}

08006e08 <alp_breakdown_isfcomp_tmpl>:





OT_WEAK void alp_breakdown_isfcomp_tmpl(ot_queue* in_q, void* data_type) {
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	0005      	movs	r5, r0
 8006e0c:	000c      	movs	r4, r1
    ((isfcomp_tmpl*)data_type)->is_series   = q_readbyte(in_q);
 8006e0e:	f000 f8fc 	bl	800700a <q_readbyte>
 8006e12:	7020      	strb	r0, [r4, #0]
    ((isfcomp_tmpl*)data_type)->isf_id      = q_readbyte(in_q);
 8006e14:	0028      	movs	r0, r5
 8006e16:	f000 f8f8 	bl	800700a <q_readbyte>
 8006e1a:	7060      	strb	r0, [r4, #1]
    ((isfcomp_tmpl*)data_type)->offset      = q_readshort(in_q);
 8006e1c:	0028      	movs	r0, r5
 8006e1e:	f000 f8f9 	bl	8007014 <q_readshort>
 8006e22:	8060      	strh	r0, [r4, #2]
}
 8006e24:	bd70      	pop	{r4, r5, r6, pc}

08006e26 <alp_breakdown_isfcall_tmpl>:





OT_WEAK void alp_breakdown_isfcall_tmpl(ot_queue* in_q, void* data_type) {
 8006e26:	b570      	push	{r4, r5, r6, lr}
 8006e28:	0005      	movs	r5, r0
 8006e2a:	000c      	movs	r4, r1
    alp_breakdown_isfcomp_tmpl(in_q, data_type);
 8006e2c:	f7ff ffec 	bl	8006e08 <alp_breakdown_isfcomp_tmpl>
    ((isfcall_tmpl*)data_type)->max_return  = q_readshort(in_q);
 8006e30:	0028      	movs	r0, r5
 8006e32:	f000 f8ef 	bl	8007014 <q_readshort>
 8006e36:	80a0      	strh	r0, [r4, #4]
}
 8006e38:	bd70      	pop	{r4, r5, r6, pc}

08006e3a <auth_init>:
#endif

#if (_SEC_NLS)
    ///@todo
#endif
}
 8006e3a:	4770      	bx	lr

08006e3c <auth_isroot>:
#if (_SEC_ANY)
    return sub_ismask(user_id, b00000000);
#else
    return False;
#endif
}
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	4770      	bx	lr

08006e40 <auth_check>:

    return 0;

#else
    // Try guest access
    return (0x07 & req_mod & rw_mod);
 8006e40:	4001      	ands	r1, r0
 8006e42:	2007      	movs	r0, #7
 8006e44:	4008      	ands	r0, r1
#endif
}
 8006e46:	4770      	bx	lr

08006e48 <buffers_init>:
#endif



#ifndef EXTF_buffers_init
void buffers_init() {
 8006e48:	b570      	push	{r4, r5, r6, lr}
#   if (OT_FEATURE(SERVER) == ENABLED)
    q_init(&rxq,    otbuf,              TXRX_SIZE);
 8006e4a:	2580      	movs	r5, #128	; 0x80
 8006e4c:	006d      	lsls	r5, r5, #1
 8006e4e:	4c0d      	ldr	r4, [pc, #52]	; (8006e84 <buffers_init+0x3c>)
 8006e50:	002a      	movs	r2, r5
 8006e52:	0021      	movs	r1, r4
 8006e54:	480c      	ldr	r0, [pc, #48]	; (8006e88 <buffers_init+0x40>)
 8006e56:	f000 f89c 	bl	8006f92 <q_init>
    q_init(&txq,    otbuf+TXRX_SIZE,    TXRX_SIZE);    
 8006e5a:	1961      	adds	r1, r4, r5
 8006e5c:	002a      	movs	r2, r5
 8006e5e:	480b      	ldr	r0, [pc, #44]	; (8006e8c <buffers_init+0x44>)
 8006e60:	f000 f897 	bl	8006f92 <q_init>
#   endif
#   if (ALP_ENABLED)
    q_init(&otmpin,     otbuf+(TXRX_SIZE*2),            ALP_SIZE );
 8006e64:	3501      	adds	r5, #1
 8006e66:	35ff      	adds	r5, #255	; 0xff
 8006e68:	1961      	adds	r1, r4, r5
 8006e6a:	002a      	movs	r2, r5
 8006e6c:	4808      	ldr	r0, [pc, #32]	; (8006e90 <buffers_init+0x48>)
 8006e6e:	f000 f890 	bl	8006f92 <q_init>
    q_init(&otmpout,    otbuf+(TXRX_SIZE*2)+ALP_SIZE,   ALP_SIZE );
 8006e72:	2380      	movs	r3, #128	; 0x80
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	18e1      	adds	r1, r4, r3
 8006e78:	002a      	movs	r2, r5
 8006e7a:	4806      	ldr	r0, [pc, #24]	; (8006e94 <buffers_init+0x4c>)
 8006e7c:	f000 f889 	bl	8006f92 <q_init>
#   endif
}
 8006e80:	bd70      	pop	{r4, r5, r6, pc}
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	20002754 	.word	0x20002754
 8006e88:	20002d54 	.word	0x20002d54
 8006e8c:	20002d68 	.word	0x20002d68
 8006e90:	20002d7c 	.word	0x20002d7c
 8006e94:	20002740 	.word	0x20002740

08006e98 <crc_init_stream>:

//crc_struct crc;


void crc_init_stream(crcstream_t* stream, ot_bool writeout, ot_int size, ot_u8* data) {
    stream->writeout    = writeout;
 8006e98:	7181      	strb	r1, [r0, #6]
    stream->cursor      = data;
 8006e9a:	6003      	str	r3, [r0, #0]
    stream->count       = size;
 8006e9c:	8082      	strh	r2, [r0, #4]
    stream->val         = crc16drv_init();
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	425b      	negs	r3, r3
 8006ea2:	8103      	strh	r3, [r0, #8]
}
 8006ea4:	4770      	bx	lr
	...

08006ea8 <crc16drv_block_manual>:
}
#endif


#ifndef EXTF_crc16drv_block_manual
OT_WEAK ot_u16 crc16drv_block_manual(ot_u8* block_addr, ot_int block_size, ot_u16 init) {
 8006ea8:	b510      	push	{r4, lr}
/// One nice thing about the software-only CRC16 method is that it doesn't
/// require any sort of interrupt blocking.  In practice, interrupt blocking
/// by CRC isn't much of an issue, but if you are getting weird CRC errors
/// when using streams, try comparing against this software implemetation.

    while (--block_size >= 0) {
 8006eaa:	e009      	b.n	8006ec0 <crc16drv_block_manual+0x18>
        ot_u8 index = ((ot_u8*)&init)[UPPER] ^ *block_addr++;       //((crc_val>>8) & 0xff) ^ *block_addr++;
 8006eac:	0a13      	lsrs	r3, r2, #8
 8006eae:	7804      	ldrb	r4, [r0, #0]
 8006eb0:	4063      	eors	r3, r4
        init        = (init<<8) ^ crc16_table[index];
 8006eb2:	0212      	lsls	r2, r2, #8
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	4c05      	ldr	r4, [pc, #20]	; (8006ecc <crc16drv_block_manual+0x24>)
 8006eb8:	5f1b      	ldrsh	r3, [r3, r4]
 8006eba:	405a      	eors	r2, r3
 8006ebc:	b292      	uxth	r2, r2
        ot_u8 index = ((ot_u8*)&init)[UPPER] ^ *block_addr++;       //((crc_val>>8) & 0xff) ^ *block_addr++;
 8006ebe:	3001      	adds	r0, #1
    while (--block_size >= 0) {
 8006ec0:	3901      	subs	r1, #1
 8006ec2:	b209      	sxth	r1, r1
 8006ec4:	2900      	cmp	r1, #0
 8006ec6:	daf1      	bge.n	8006eac <crc16drv_block_manual+0x4>
    }
    return init;
}
 8006ec8:	0010      	movs	r0, r2
 8006eca:	bd10      	pop	{r4, pc}
 8006ecc:	0800a47c 	.word	0x0800a47c

08006ed0 <crc_calc_nstream>:
void crc_calc_nstream(crcstream_t* stream, ot_u16 n) {
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	0004      	movs	r4, r0
    if (stream->count > 0) {
 8006ed4:	2204      	movs	r2, #4
 8006ed6:	5e83      	ldrsh	r3, [r0, r2]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	dd0c      	ble.n	8006ef6 <crc_calc_nstream+0x26>
        if (n > stream->count) {
 8006edc:	4299      	cmp	r1, r3
 8006ede:	dd00      	ble.n	8006ee2 <crc_calc_nstream+0x12>
            n = stream->count;
 8006ee0:	b299      	uxth	r1, r3
        stream->count  -= n;
 8006ee2:	1a5b      	subs	r3, r3, r1
 8006ee4:	80a3      	strh	r3, [r4, #4]
        data            = stream->cursor;
 8006ee6:	6820      	ldr	r0, [r4, #0]
        stream->cursor += n;
 8006ee8:	1843      	adds	r3, r0, r1
 8006eea:	6023      	str	r3, [r4, #0]
        stream->val     = crc16drv_block_manual(data, n, stream->val);
 8006eec:	8922      	ldrh	r2, [r4, #8]
 8006eee:	b209      	sxth	r1, r1
 8006ef0:	f7ff ffda 	bl	8006ea8 <crc16drv_block_manual>
 8006ef4:	8120      	strh	r0, [r4, #8]
    if ((stream->count == 0) && (stream->writeout)) {
 8006ef6:	2204      	movs	r2, #4
 8006ef8:	5ea3      	ldrsh	r3, [r4, r2]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10f      	bne.n	8006f1e <crc_calc_nstream+0x4e>
 8006efe:	79a3      	ldrb	r3, [r4, #6]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00c      	beq.n	8006f1e <crc_calc_nstream+0x4e>
        stream->writeout    = False;
 8006f04:	2300      	movs	r3, #0
 8006f06:	71a3      	strb	r3, [r4, #6]
        *stream->cursor++   = (ot_u8)(stream->val >> 8);
 8006f08:	8923      	ldrh	r3, [r4, #8]
 8006f0a:	6822      	ldr	r2, [r4, #0]
 8006f0c:	1c51      	adds	r1, r2, #1
 8006f0e:	6021      	str	r1, [r4, #0]
 8006f10:	0a1b      	lsrs	r3, r3, #8
 8006f12:	7013      	strb	r3, [r2, #0]
        *stream->cursor++   = (ot_u8)(stream->val);
 8006f14:	8922      	ldrh	r2, [r4, #8]
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	1c59      	adds	r1, r3, #1
 8006f1a:	6021      	str	r1, [r4, #0]
 8006f1c:	701a      	strb	r2, [r3, #0]
}
 8006f1e:	bd10      	pop	{r4, pc}

08006f20 <crc_block>:
ot_u16 crc_block(crcstream_t* stream, ot_bool writeout, ot_int size, ot_u8* data) {
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	0005      	movs	r5, r0
 8006f24:	0014      	movs	r4, r2
    crc_init_stream(stream, writeout, size, data);
 8006f26:	f7ff ffb7 	bl	8006e98 <crc_init_stream>
    crc_calc_nstream(stream, size);
 8006f2a:	b2a1      	uxth	r1, r4
 8006f2c:	0028      	movs	r0, r5
 8006f2e:	f7ff ffcf 	bl	8006ed0 <crc_calc_nstream>
    return stream->val;
 8006f32:	8928      	ldrh	r0, [r5, #8]
}
 8006f34:	bd70      	pop	{r4, r5, r6, pc}

08006f36 <q_getcursor_val>:
  * ==================
  */

#ifndef EXTF_q_intrinsics
OT_INLINE ot_u8 q_getcursor_val(ot_queue* q, ot_int offset) {
    return q->getcursor[offset];
 8006f36:	6843      	ldr	r3, [r0, #4]
 8006f38:	5c58      	ldrb	r0, [r3, r1]
}
 8006f3a:	4770      	bx	lr

08006f3c <q_length>:
  * ====================
  */

#ifndef EXTF_q_length
ot_int q_length(ot_queue* q) {
    return (q->putcursor - q->front);
 8006f3c:	6883      	ldr	r3, [r0, #8]
 8006f3e:	68c0      	ldr	r0, [r0, #12]
 8006f40:	1a18      	subs	r0, r3, r0
 8006f42:	b200      	sxth	r0, r0
}
 8006f44:	4770      	bx	lr

08006f46 <q_span>:
#endif


#ifndef EXTF_q_span
ot_int q_span(ot_queue* q) {
    return (q->putcursor - q->getcursor);
 8006f46:	6883      	ldr	r3, [r0, #8]
 8006f48:	6840      	ldr	r0, [r0, #4]
 8006f4a:	1a18      	subs	r0, r3, r0
 8006f4c:	b200      	sxth	r0, r0
}
 8006f4e:	4770      	bx	lr

08006f50 <q_writespace>:
#endif


#ifndef EXTF_q_writespace
ot_int q_writespace(ot_queue* q) {
    return (q->back - q->putcursor);
 8006f50:	6903      	ldr	r3, [r0, #16]
 8006f52:	6880      	ldr	r0, [r0, #8]
 8006f54:	1a18      	subs	r0, r3, r0
 8006f56:	b200      	sxth	r0, r0
}
 8006f58:	4770      	bx	lr

08006f5a <q_readspace>:
#endif


#ifndef EXTF_q_readspace
ot_int q_readspace(ot_queue* q) {
    return (q->back - q->getcursor);
 8006f5a:	6903      	ldr	r3, [r0, #16]
 8006f5c:	6840      	ldr	r0, [r0, #4]
 8006f5e:	1a18      	subs	r0, r3, r0
 8006f60:	b200      	sxth	r0, r0
}
 8006f62:	4770      	bx	lr

08006f64 <q_lock>:
    q->options.ushort = blocktime;
}
#endif

#ifndef EXTF_q_lock
void q_lock(ot_queue* q) {
 8006f64:	b510      	push	{r4, lr}
 8006f66:	0004      	movs	r4, r0
    while (q->options.ushort != 0) {
 8006f68:	e001      	b.n	8006f6e <q_lock+0xa>
        //    otthread_set_tmask( &(q->tmask), thandle );
        //    otthread_wait();
        //    otthread_clear_tmask( &(q->tmask), thandle );
        //}
        //else 
        {   delay_ti(q->options.ushort);
 8006f6a:	f001 fa9f 	bl	80084ac <delay_ti>
    while (q->options.ushort != 0) {
 8006f6e:	8860      	ldrh	r0, [r4, #2]
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d1fa      	bne.n	8006f6a <q_lock+0x6>
        }
    }
    q->options.ushort = 1;
 8006f74:	2301      	movs	r3, #1
 8006f76:	8063      	strh	r3, [r4, #2]
}
 8006f78:	bd10      	pop	{r4, pc}

08006f7a <q_unlock>:
#endif

#ifndef EXTF_q_unlock
void q_unlock(ot_queue* q) {
    // otthread_release_any( &(q->tmask) );
    q->options.ushort = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	8043      	strh	r3, [r0, #2]
}
 8006f7e:	4770      	bx	lr

08006f80 <q_empty>:



#ifndef EXTF_q_empty
void q_empty(ot_queue* q) {
    q->options.ushort   = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	8043      	strh	r3, [r0, #2]
    q->back             = q->front + q->alloc;
 8006f84:	68c3      	ldr	r3, [r0, #12]
 8006f86:	8802      	ldrh	r2, [r0, #0]
 8006f88:	189a      	adds	r2, r3, r2
 8006f8a:	6102      	str	r2, [r0, #16]
    q->putcursor        = q->front;
 8006f8c:	6083      	str	r3, [r0, #8]
    q->getcursor        = q->front;
 8006f8e:	6043      	str	r3, [r0, #4]
}
 8006f90:	4770      	bx	lr

08006f92 <q_init>:
void q_init(ot_queue* q, void* buffer, ot_u16 alloc) {
 8006f92:	b510      	push	{r4, lr}
    q->alloc    = alloc;
 8006f94:	8002      	strh	r2, [r0, #0]
    q->front    = buffer;
 8006f96:	60c1      	str	r1, [r0, #12]
    q->back     = buffer+alloc;
 8006f98:	1889      	adds	r1, r1, r2
 8006f9a:	6101      	str	r1, [r0, #16]
    q_empty(q);
 8006f9c:	f7ff fff0 	bl	8006f80 <q_empty>
}
 8006fa0:	bd10      	pop	{r4, pc}

08006fa2 <q_markbyte>:


#ifndef EXTF_q_markbyte
ot_qcur q_markbyte(ot_queue* q, ot_int shift) {
    ot_qcur output;
    output          = q->getcursor;
 8006fa2:	6843      	ldr	r3, [r0, #4]
    q->getcursor   += shift;
 8006fa4:	1859      	adds	r1, r3, r1
 8006fa6:	6041      	str	r1, [r0, #4]
    return output;
}
 8006fa8:	0018      	movs	r0, r3
 8006faa:	4770      	bx	lr

08006fac <q_writebyte>:
#endif


#ifndef EXTF_q_writebyte
void q_writebyte(ot_queue* q, ot_u8 byte_in) {
    *q->putcursor++ = byte_in;
 8006fac:	6883      	ldr	r3, [r0, #8]
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	6082      	str	r2, [r0, #8]
 8006fb2:	7019      	strb	r1, [r3, #0]
}
 8006fb4:	4770      	bx	lr

08006fb6 <q_writeshort>:
#   if defined(__UNALIGNED_ACCESS__)
        *(ot_u16*)q->putcursor  = PLATFORM_ENDIAN16(short_in);
        q->putcursor           += 2;
#   else
        ot_u8* data     = (ot_u8*)&short_in;
        *q->putcursor++ = data[UPPER];
 8006fb6:	6883      	ldr	r3, [r0, #8]
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	6082      	str	r2, [r0, #8]
 8006fbc:	0a0a      	lsrs	r2, r1, #8
 8006fbe:	701a      	strb	r2, [r3, #0]
        *q->putcursor++ = data[LOWER];
 8006fc0:	6883      	ldr	r3, [r0, #8]
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	6082      	str	r2, [r0, #8]
 8006fc6:	7019      	strb	r1, [r3, #0]
#   endif
}
 8006fc8:	4770      	bx	lr

08006fca <q_writeshort_be>:
#   elif defined(__UNALIGNED_ACCESS__)
        *(ot_u16*)q->putcursor = short_in;
        q->putcursor          += 4;
#   else
        ot_u8* data     = (ot_u8*)&short_in;
        *q->putcursor++ = data[0];
 8006fca:	6883      	ldr	r3, [r0, #8]
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	6082      	str	r2, [r0, #8]
 8006fd0:	7019      	strb	r1, [r3, #0]
        *q->putcursor++ = data[1];
 8006fd2:	6883      	ldr	r3, [r0, #8]
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	6082      	str	r2, [r0, #8]
 8006fd8:	0a09      	lsrs	r1, r1, #8
 8006fda:	7019      	strb	r1, [r3, #0]
#   endif
}
 8006fdc:	4770      	bx	lr

08006fde <q_writelong>:
        *(ot_u32*)q->putcursor = PLATFORM_ENDIAN32(long_in);
        q->putcursor          += 4;
#   else
        ot_u8* data;
        data = (ot_u8*)&long_in;
        *q->putcursor++ = data[_B3];
 8006fde:	6883      	ldr	r3, [r0, #8]
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	6082      	str	r2, [r0, #8]
 8006fe4:	0e0a      	lsrs	r2, r1, #24
 8006fe6:	701a      	strb	r2, [r3, #0]
        *q->putcursor++ = data[_B2];
 8006fe8:	6882      	ldr	r2, [r0, #8]
 8006fea:	1c53      	adds	r3, r2, #1
 8006fec:	6083      	str	r3, [r0, #8]
 8006fee:	020b      	lsls	r3, r1, #8
 8006ff0:	0e1b      	lsrs	r3, r3, #24
 8006ff2:	7013      	strb	r3, [r2, #0]
        *q->putcursor++ = data[_B1];
 8006ff4:	6882      	ldr	r2, [r0, #8]
 8006ff6:	1c53      	adds	r3, r2, #1
 8006ff8:	6083      	str	r3, [r0, #8]
 8006ffa:	040b      	lsls	r3, r1, #16
 8006ffc:	0e1b      	lsrs	r3, r3, #24
 8006ffe:	7013      	strb	r3, [r2, #0]
        *q->putcursor++ = data[_B0];
 8007000:	6883      	ldr	r3, [r0, #8]
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	6082      	str	r2, [r0, #8]
 8007006:	7019      	strb	r1, [r3, #0]
#   endif
}
 8007008:	4770      	bx	lr

0800700a <q_readbyte>:
#endif


#ifndef EXTF_q_readbyte
ot_u8 q_readbyte(ot_queue* q) {
    return *q->getcursor++;
 800700a:	6843      	ldr	r3, [r0, #4]
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	6042      	str	r2, [r0, #4]
 8007010:	7818      	ldrb	r0, [r3, #0]
}
 8007012:	4770      	bx	lr

08007014 <q_readshort>:
#endif



#ifndef EXTF_q_readshort
ot_u16 q_readshort(ot_queue* q) {
 8007014:	0001      	movs	r1, r0
        ot_u16 data     = *(ot_u16*)q->getcursor;
        q->getcursor   += 2;
        return PLATFORM_ENDIAN16(data);
#   else
        ot_uni16 data;
        data.ubyte[UPPER] = *q->getcursor++;
 8007016:	6842      	ldr	r2, [r0, #4]
 8007018:	1c53      	adds	r3, r2, #1
 800701a:	6043      	str	r3, [r0, #4]
 800701c:	7810      	ldrb	r0, [r2, #0]
        data.ubyte[LOWER] = *q->getcursor++;
 800701e:	1c93      	adds	r3, r2, #2
 8007020:	604b      	str	r3, [r1, #4]
 8007022:	7853      	ldrb	r3, [r2, #1]
 8007024:	0200      	lsls	r0, r0, #8
        return data.ushort;
 8007026:	4318      	orrs	r0, r3
#   endif
}
 8007028:	4770      	bx	lr

0800702a <q_readshort_be>:
        ot_u16 data     = *(ot_u16*)q->getcursor;
        q->getcursor   += 2
        return data;
#   else
        ot_uni16 data;
        data.ubyte[0]   = *q->getcursor++;
 800702a:	6841      	ldr	r1, [r0, #4]
 800702c:	1c4b      	adds	r3, r1, #1
 800702e:	6043      	str	r3, [r0, #4]
 8007030:	780a      	ldrb	r2, [r1, #0]
        data.ubyte[1]   = *q->getcursor++;
 8007032:	1c8b      	adds	r3, r1, #2
 8007034:	6043      	str	r3, [r0, #4]
 8007036:	7848      	ldrb	r0, [r1, #1]
 8007038:	0200      	lsls	r0, r0, #8
        return data.ushort;
 800703a:	4310      	orrs	r0, r2
#   endif
}
 800703c:	4770      	bx	lr

0800703e <q_readlong>:
#endif


#ifndef EXTF_q_readlong
ot_u32 q_readlong(ot_queue* q)  {
 800703e:	b530      	push	{r4, r5, lr}
 8007040:	0002      	movs	r2, r0
        ot_u32 data     = *(ot_u32*)q->getcursor;
        q->getcursor   += 4;
        return PLATFORM_ENDIAN32(data);
#   else
        ot_uni32 data;
        data.ubyte[_B3]  = *q->getcursor++;
 8007042:	6841      	ldr	r1, [r0, #4]
 8007044:	1c48      	adds	r0, r1, #1
 8007046:	6050      	str	r0, [r2, #4]
 8007048:	780b      	ldrb	r3, [r1, #0]
        data.ubyte[_B2]  = *q->getcursor++;
 800704a:	1c8c      	adds	r4, r1, #2
 800704c:	6054      	str	r4, [r2, #4]
 800704e:	784d      	ldrb	r5, [r1, #1]
 8007050:	042d      	lsls	r5, r5, #16
 8007052:	061b      	lsls	r3, r3, #24
        data.ubyte[_B1]  = *q->getcursor++;
 8007054:	3103      	adds	r1, #3
 8007056:	6051      	str	r1, [r2, #4]
 8007058:	7840      	ldrb	r0, [r0, #1]
 800705a:	0200      	lsls	r0, r0, #8
 800705c:	432b      	orrs	r3, r5
        data.ubyte[_B0]  = *q->getcursor++;
 800705e:	1ca1      	adds	r1, r4, #2
 8007060:	6051      	str	r1, [r2, #4]
 8007062:	7862      	ldrb	r2, [r4, #1]
 8007064:	4318      	orrs	r0, r3
 8007066:	4310      	orrs	r0, r2
        return data.ulong;
#   endif
}
 8007068:	bd30      	pop	{r4, r5, pc}

0800706a <q_writestring>:
}
#endif


#ifndef EXTF_q_writestring
ot_int q_writestring(ot_queue* q, ot_u8* string, ot_int length) {
 800706a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706c:	0005      	movs	r5, r0
 800706e:	000f      	movs	r7, r1
 8007070:	1e16      	subs	r6, r2, #0
    ot_int limit;
    
    if (length <= 0) {
 8007072:	dd0f      	ble.n	8007094 <q_writestring+0x2a>
        return 0;
    }
    
    limit = q_writespace(q);
 8007074:	f7ff ff6c 	bl	8006f50 <q_writespace>
 8007078:	0004      	movs	r4, r0
    if (limit < length) {
 800707a:	4286      	cmp	r6, r0
 800707c:	dc00      	bgt.n	8007080 <q_writestring+0x16>
 800707e:	0034      	movs	r4, r6
        length = limit;
    } 

    ot_memcpy(q->putcursor, string, length);
 8007080:	b2a2      	uxth	r2, r4
 8007082:	0039      	movs	r1, r7
 8007084:	68a8      	ldr	r0, [r5, #8]
 8007086:	f001 fa6d 	bl	8008564 <ot_memcpy>
    q->putcursor += length;
 800708a:	68ab      	ldr	r3, [r5, #8]
 800708c:	191b      	adds	r3, r3, r4
 800708e:	60ab      	str	r3, [r5, #8]
    
    return length;
}
 8007090:	0020      	movs	r0, r4
 8007092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8007094:	2400      	movs	r4, #0
 8007096:	e7fb      	b.n	8007090 <q_writestring+0x26>

08007098 <q_movedata>:
#endif



#ifndef EXTF_q_movedata
ot_int q_movedata(ot_queue* qdst, ot_queue* qsrc, ot_int length) {
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	0007      	movs	r7, r0
 800709c:	000d      	movs	r5, r1
 800709e:	1e14      	subs	r4, r2, #0
    ot_int writespace, readspace, limit;
    ot_u8* dst;
    ot_u8* src;

    if (length <= 0) {
 80070a0:	dd1b      	ble.n	80070da <q_movedata+0x42>
        return 0;
    }
    
    writespace  = q_writespace(qdst);
 80070a2:	f7ff ff55 	bl	8006f50 <q_writespace>
 80070a6:	0006      	movs	r6, r0
    readspace   = q_readspace(qsrc);
 80070a8:	0028      	movs	r0, r5
 80070aa:	f7ff ff56 	bl	8006f5a <q_readspace>
    limit       = (writespace < readspace) ? writespace : readspace;
 80070ae:	1c33      	adds	r3, r6, #0
 80070b0:	4286      	cmp	r6, r0
 80070b2:	dd00      	ble.n	80070b6 <q_movedata+0x1e>
 80070b4:	1c03      	adds	r3, r0, #0
 80070b6:	b21a      	sxth	r2, r3
    if (limit < length) {
 80070b8:	4294      	cmp	r4, r2
 80070ba:	dd02      	ble.n	80070c2 <q_movedata+0x2a>
        return length - limit;
 80070bc:	1ae4      	subs	r4, r4, r3
 80070be:	b220      	sxth	r0, r4
    qdst->putcursor    += length;
    qsrc->getcursor    += length;
    ot_memcpy(dst, src, length);
    
    return length;
}
 80070c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dst                 = qdst->putcursor;
 80070c2:	68b8      	ldr	r0, [r7, #8]
    src                 = qsrc->getcursor;
 80070c4:	6869      	ldr	r1, [r5, #4]
    qdst->putcursor    += length;
 80070c6:	1903      	adds	r3, r0, r4
 80070c8:	60bb      	str	r3, [r7, #8]
    qsrc->getcursor    += length;
 80070ca:	686b      	ldr	r3, [r5, #4]
 80070cc:	191b      	adds	r3, r3, r4
 80070ce:	606b      	str	r3, [r5, #4]
    ot_memcpy(dst, src, length);
 80070d0:	b2a2      	uxth	r2, r4
 80070d2:	f001 fa47 	bl	8008564 <ot_memcpy>
    return length;
 80070d6:	0020      	movs	r0, r4
 80070d8:	e7f2      	b.n	80070c0 <q_movedata+0x28>
        return 0;
 80070da:	2000      	movs	r0, #0
 80070dc:	e7f0      	b.n	80070c0 <q_movedata+0x28>

080070de <otutils_sig2_null>:


// Null Signals
void otutils_null(void)                     { }
void otutils_sig_null(ot_int a)             { }
void otutils_sig2_null(ot_int a, ot_int b)  { }
 80070de:	4770      	bx	lr

080070e0 <otutils_calc_longtimeout>:

#ifndef EXTF_otutils_calc_longtimeout
ot_ulong otutils_calc_longtimeout(ot_u16 timeout_code) {
	ot_uint 	shift;
	ot_ulong    timeout;
	shift       = (timeout_code >> 8) & 0x001C;
 80070e0:	0a03      	lsrs	r3, r0, #8
 80070e2:	221c      	movs	r2, #28
 80070e4:	401a      	ands	r2, r3
	timeout     = (timeout_code & 0x3FF);
 80070e6:	0580      	lsls	r0, r0, #22
 80070e8:	0d80      	lsrs	r0, r0, #22
	timeout    += (shift != 0);
 80070ea:	0013      	movs	r3, r2
 80070ec:	1e59      	subs	r1, r3, #1
 80070ee:	418b      	sbcs	r3, r1
 80070f0:	1818      	adds	r0, r3, r0
	timeout    *= (1 << shift);
 80070f2:	4090      	lsls	r0, r2
	return timeout;
}
 80070f4:	4770      	bx	lr

080070f6 <otutils_calc_timeout>:

#ifndef EXTF_otutils_calc_timeout
ot_ulong otutils_calc_timeout(ot_u8 timeout_code) {
	ot_uint		shift;
	ot_ulong    timeout;
	shift       = (timeout_code >> 3) & 0x000E;
 80070f6:	08c2      	lsrs	r2, r0, #3
 80070f8:	210e      	movs	r1, #14
 80070fa:	400a      	ands	r2, r1
 80070fc:	b293      	uxth	r3, r2
	timeout     = (timeout_code & 0x0E);
 80070fe:	4001      	ands	r1, r0
	timeout    += (shift != 0);
 8007100:	0018      	movs	r0, r3
 8007102:	1e43      	subs	r3, r0, #1
 8007104:	4198      	sbcs	r0, r3
 8007106:	1840      	adds	r0, r0, r1
	timeout    *= (1 << shift);
 8007108:	4090      	lsls	r0, r2
	return timeout;
}
 800710a:	4770      	bx	lr

0800710c <otutils_encode_timeout>:

#ifndef EXTF_otutils_encode_timeout
ot_u8 otutils_encode_timeout(ot_u16 timeout_ticks) {
	ot_uint exp;

	if (timeout_ticks < 0x10) {
 800710c:	280f      	cmp	r0, #15
 800710e:	d902      	bls.n	8007116 <otutils_encode_timeout+0xa>
		return (ot_u8)timeout_ticks;
	}

	exp 			= 1;
	timeout_ticks >>= 2;
 8007110:	0880      	lsrs	r0, r0, #2
	exp 			= 1;
 8007112:	2301      	movs	r3, #1

	while (timeout_ticks > 0x10) {
 8007114:	e004      	b.n	8007120 <otutils_encode_timeout+0x14>
		return (ot_u8)timeout_ticks;
 8007116:	b2c0      	uxtb	r0, r0
 8007118:	e00a      	b.n	8007130 <otutils_encode_timeout+0x24>
		exp += 2;
 800711a:	3302      	adds	r3, #2
 800711c:	b29b      	uxth	r3, r3
		timeout_ticks >>= 4;
 800711e:	0900      	lsrs	r0, r0, #4
	while (timeout_ticks > 0x10) {
 8007120:	2810      	cmp	r0, #16
 8007122:	d8fa      	bhi.n	800711a <otutils_encode_timeout+0xe>
	}
	timeout_ticks--;
 8007124:	1e42      	subs	r2, r0, #1

	return (exp << 4) + (ot_u8)timeout_ticks;
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	b2d8      	uxtb	r0, r3
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	1880      	adds	r0, r0, r2
 800712e:	b2c0      	uxtb	r0, r0
}
 8007130:	4770      	bx	lr

08007132 <sub_gfb_new>:
                        GFB_Header_START_USER,
                        GFB_NUM_USER_FILES   );
#else
    return NULL;
#endif
}
 8007132:	2000      	movs	r0, #0
 8007134:	4770      	bx	lr

08007136 <sub_iss_new>:
                        ISS_Header_START_USER,
                        ISS_NUM_USER_CODES   );
#else
    return NULL;
#endif
}
 8007136:	2000      	movs	r0, #0
 8007138:	4770      	bx	lr

0800713a <sub_isf_new>:
                        ISF_Header_START_USER,
                        ISF_NUM_USER_FILES );
#else
    return NULL;
#endif
}
 800713a:	2000      	movs	r0, #0
 800713c:	4770      	bx	lr

0800713e <sub_gfb_delete_check>:
#if ((OT_FEATURE(VLNEW) == ENABLED) && ((GFB_HEAP_BYTES > 0) && (GFB_NUM_USER_FILES > 0)))
    return ( id > GFB_NUM_STOCK_FILES );
#else
    return 0;
#endif
}
 800713e:	2000      	movs	r0, #0
 8007140:	4770      	bx	lr

08007142 <sub_iss_delete_check>:
#if ((OT_FEATURE(VLNEW) == ENABLED) && (ISS_NUM_USER_CODES > 0))
    return ( id >= ISS_ID_extended_service);
#else
    return 0;
#endif
}
 8007142:	2000      	movs	r0, #0
 8007144:	4770      	bx	lr

08007146 <sub_isf_delete_check>:
    return ((id >= (ISF_NUM_M1_FILES+ISF_NUM_M2_FILES)) && \
            (id < (256-ISF_NUM_EXT_FILES)) );
#else
    return 0;
#endif
}
 8007146:	2000      	movs	r0, #0
 8007148:	4770      	bx	lr
	...

0800714c <sub_new_fp>:

static vlFILE* sub_new_fp() {
#if (OT_PARAM(VLFPS) < 8)
    ot_int fd;

    for (fd=0; fd<OT_PARAM(VLFPS); fd++) {
 800714c:	2300      	movs	r3, #0
 800714e:	2b02      	cmp	r3, #2
 8007150:	dc0d      	bgt.n	800716e <sub_new_fp+0x22>
        if (vlfile[fd].read == NULL)
 8007152:	009a      	lsls	r2, r3, #2
 8007154:	18d2      	adds	r2, r2, r3
 8007156:	0091      	lsls	r1, r2, #2
 8007158:	4a06      	ldr	r2, [pc, #24]	; (8007174 <sub_new_fp+0x28>)
 800715a:	1852      	adds	r2, r2, r1
 800715c:	68d2      	ldr	r2, [r2, #12]
 800715e:	2a00      	cmp	r2, #0
 8007160:	d002      	beq.n	8007168 <sub_new_fp+0x1c>
    for (fd=0; fd<OT_PARAM(VLFPS); fd++) {
 8007162:	3301      	adds	r3, #1
 8007164:	b21b      	sxth	r3, r3
 8007166:	e7f2      	b.n	800714e <sub_new_fp+0x2>
            return &vlfile[fd];
 8007168:	4802      	ldr	r0, [pc, #8]	; (8007174 <sub_new_fp+0x28>)
 800716a:	1840      	adds	r0, r0, r1
 800716c:	e000      	b.n	8007170 <sub_new_fp+0x24>
    }
#else
        ///@todo do a binary search
#endif

    return NULL;
 800716e:	2000      	movs	r0, #0
}
 8007170:	4770      	bx	lr
 8007172:	46c0      	nop			; (mov r8, r8)
 8007174:	20001170 	.word	0x20001170

08007178 <sub_write_header>:
        header += 2;
    }
}


static void sub_write_header(vaddr header, ot_u16* data, ot_uint length ) {
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	0007      	movs	r7, r0
 800717c:	000d      	movs	r5, r1
 800717e:	0016      	movs	r6, r2
    ot_int i;

    for (i=0; i<length; i+=2, data++) {
 8007180:	2300      	movs	r3, #0
 8007182:	e008      	b.n	8007196 <sub_write_header+0x1e>
        vworm_write( (header+i), *data);
 8007184:	b29c      	uxth	r4, r3
 8007186:	8829      	ldrh	r1, [r5, #0]
 8007188:	19e0      	adds	r0, r4, r7
 800718a:	b280      	uxth	r0, r0
 800718c:	f001 fa52 	bl	8008634 <vworm_write>
    for (i=0; i<length; i+=2, data++) {
 8007190:	3402      	adds	r4, #2
 8007192:	b223      	sxth	r3, r4
 8007194:	3502      	adds	r5, #2
 8007196:	42b3      	cmp	r3, r6
 8007198:	dbf4      	blt.n	8007184 <sub_write_header+0xc>
    }
}
 800719a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800719c <sub_header_search>:
static vaddr sub_header_search(vaddr header, ot_u8 search_id, ot_int num_headers) {
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	0004      	movs	r4, r0
 80071a0:	000f      	movs	r7, r1
 80071a2:	0016      	movs	r6, r2
    for (; num_headers > 0; num_headers--) {
 80071a4:	e003      	b.n	80071ae <sub_header_search+0x12>
        header += OCTETS_IN_vl_header_t;
 80071a6:	3410      	adds	r4, #16
 80071a8:	b2a4      	uxth	r4, r4
    for (; num_headers > 0; num_headers--) {
 80071aa:	3e01      	subs	r6, #1
 80071ac:	b236      	sxth	r6, r6
 80071ae:	2e00      	cmp	r6, #0
 80071b0:	dd12      	ble.n	80071d8 <sub_header_search+0x3c>
        ot_u16 base     = vworm_read(header + 6);
 80071b2:	1da0      	adds	r0, r4, #6
 80071b4:	b280      	uxth	r0, r0
 80071b6:	f001 fa35 	bl	8008624 <vworm_read>
 80071ba:	0005      	movs	r5, r0
        idmod.ushort    = vworm_read(header + 4);
 80071bc:	1d20      	adds	r0, r4, #4
 80071be:	b280      	uxth	r0, r0
 80071c0:	f001 fa30 	bl	8008624 <vworm_read>
        if ( base != 0 && base != 0xFFFF) {
 80071c4:	3d01      	subs	r5, #1
 80071c6:	b2ad      	uxth	r5, r5
 80071c8:	4b04      	ldr	r3, [pc, #16]	; (80071dc <sub_header_search+0x40>)
 80071ca:	429d      	cmp	r5, r3
 80071cc:	d8eb      	bhi.n	80071a6 <sub_header_search+0xa>
            if (idmod.ubyte[0] == search_id)
 80071ce:	b2c0      	uxtb	r0, r0
 80071d0:	4287      	cmp	r7, r0
 80071d2:	d1e8      	bne.n	80071a6 <sub_header_search+0xa>
                return header;
 80071d4:	0020      	movs	r0, r4
 80071d6:	e000      	b.n	80071da <sub_header_search+0x3e>
    return NULL_vaddr;
 80071d8:	4801      	ldr	r0, [pc, #4]	; (80071e0 <sub_header_search+0x44>)
}
 80071da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071dc:	0000fffd 	.word	0x0000fffd
 80071e0:	0000ffff 	.word	0x0000ffff

080071e4 <sub_isf_search>:
static vaddr sub_isf_search(ot_u8 id) {
 80071e4:	b510      	push	{r4, lr}
    if ( (id >= ISF_NUM_STOCK_FILES) && (id < (256-ISF_NUM_EXT_FILES)) ) {
 80071e6:	0003      	movs	r3, r0
 80071e8:	3b19      	subs	r3, #25
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2be5      	cmp	r3, #229	; 0xe5
 80071ee:	d905      	bls.n	80071fc <sub_isf_search+0x18>
    if (id > (255-ISF_NUM_EXT_FILES)) {
 80071f0:	28ff      	cmp	r0, #255	; 0xff
 80071f2:	d00a      	beq.n	800720a <sub_isf_search+0x26>
    return (OCTETS_IN_vl_header_t * id) + ISF_Header_START;
 80071f4:	300e      	adds	r0, #14
 80071f6:	0100      	lsls	r0, r0, #4
 80071f8:	b280      	uxth	r0, r0
}
 80071fa:	bd10      	pop	{r4, pc}
        return sub_header_search(ISF_Header_START_USER, id, ISF_NUM_USER_FILES);
 80071fc:	239c      	movs	r3, #156	; 0x9c
 80071fe:	2200      	movs	r2, #0
 8007200:	0001      	movs	r1, r0
 8007202:	0098      	lsls	r0, r3, #2
 8007204:	f7ff ffca 	bl	800719c <sub_header_search>
 8007208:	e7f7      	b.n	80071fa <sub_isf_search+0x16>
        id = (ot_u8)((ot_int)ISF_NUM_STOCK_FILES + (255-id));
 800720a:	2118      	movs	r1, #24
 800720c:	1a08      	subs	r0, r1, r0
 800720e:	b2c0      	uxtb	r0, r0
 8007210:	e7f0      	b.n	80071f4 <sub_isf_search+0x10>

08007212 <sub_iss_search>:
static vaddr sub_iss_search(ot_u8 id) {
 8007212:	b510      	push	{r4, lr}
 8007214:	0001      	movs	r1, r0
    return sub_header_search( ISS_Header_START, id, ISS_NUM_FILES );
 8007216:	220c      	movs	r2, #12
 8007218:	2020      	movs	r0, #32
 800721a:	f7ff ffbf 	bl	800719c <sub_header_search>
}
 800721e:	bd10      	pop	{r4, pc}

08007220 <sub_gfb_search>:
static vaddr sub_gfb_search(ot_u8 id) {
 8007220:	b510      	push	{r4, lr}
 8007222:	0001      	movs	r1, r0
    return sub_header_search( GFB_Header_START, id, GFB_NUM_USER_FILES );
 8007224:	2200      	movs	r2, #0
 8007226:	2020      	movs	r0, #32
 8007228:	f7ff ffb8 	bl	800719c <sub_header_search>
}
 800722c:	bd10      	pop	{r4, pc}
	...

08007230 <sub_action>:
static ot_u8 sub_action(vlFILE* fp) {
 8007230:	b510      	push	{r4, lr}
 8007232:	0004      	movs	r4, r0
    select = vworm_read(fp->header+10) >> 8;        ///@todo this is little endian only
 8007234:	8800      	ldrh	r0, [r0, #0]
 8007236:	300a      	adds	r0, #10
 8007238:	b280      	uxth	r0, r0
 800723a:	f001 f9f3 	bl	8008624 <vworm_read>
 800723e:	0a00      	lsrs	r0, r0, #8
 8007240:	b280      	uxth	r0, r0
    if (select < OT_PARAM(VLACTIONS)) {
 8007242:	2807      	cmp	r0, #7
 8007244:	d807      	bhi.n	8007256 <sub_action+0x26>
        retval = vlaction[select](fp);
 8007246:	0080      	lsls	r0, r0, #2
 8007248:	4b04      	ldr	r3, [pc, #16]	; (800725c <sub_action+0x2c>)
 800724a:	1818      	adds	r0, r3, r0
 800724c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800724e:	0020      	movs	r0, r4
 8007250:	4798      	blx	r3
 8007252:	b2c0      	uxtb	r0, r0
}
 8007254:	bd10      	pop	{r4, pc}
    ot_u8 retval = 0;
 8007256:	2000      	movs	r0, #0
 8007258:	e7fc      	b.n	8007254 <sub_action+0x24>
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	20001170 	.word	0x20001170

08007260 <sub_delete_file>:
static void sub_delete_file(vaddr del_header) {
 8007260:	b570      	push	{r4, r5, r6, lr}
 8007262:	0004      	movs	r4, r0
    header_alloc    = (ot_u16)vworm_read(del_header+2);
 8007264:	1c85      	adds	r5, r0, #2
 8007266:	b2ad      	uxth	r5, r5
 8007268:	0028      	movs	r0, r5
 800726a:	f001 f9db 	bl	8008624 <vworm_read>
 800726e:	0006      	movs	r6, r0
    header_base     = (vaddr)vworm_read(del_header+6);
 8007270:	3406      	adds	r4, #6
 8007272:	b2a4      	uxth	r4, r4
 8007274:	0020      	movs	r0, r4
 8007276:	f001 f9d5 	bl	8008624 <vworm_read>
    vworm_wipeblock(header_base, header_alloc);
 800727a:	0031      	movs	r1, r6
 800727c:	f001 f9e6 	bl	800864c <vworm_wipeblock>
    vworm_mark((del_header+2), 0);                //alloc
 8007280:	2100      	movs	r1, #0
 8007282:	0028      	movs	r0, r5
 8007284:	f001 f9de 	bl	8008644 <vworm_mark>
    vworm_mark((del_header+6), NULL_vaddr);       //base
 8007288:	4902      	ldr	r1, [pc, #8]	; (8007294 <sub_delete_file+0x34>)
 800728a:	0020      	movs	r0, r4
 800728c:	f001 f9da 	bl	8008644 <vworm_mark>
}
 8007290:	bd70      	pop	{r4, r5, r6, pc}
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	0000ffff 	.word	0x0000ffff

08007298 <vl_new>:
OT_WEAK ot_u8 vl_new(vlFILE** fp_new, vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, ot_uint max_length, const id_tmpl* user_id) {
 8007298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800729a:	b083      	sub	sp, #12
 800729c:	0006      	movs	r6, r0
 800729e:	000c      	movs	r4, r1
 80072a0:	9200      	str	r2, [sp, #0]
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	ab08      	add	r3, sp, #32
 80072a6:	881f      	ldrh	r7, [r3, #0]
    if (user_id != NULL) {
 80072a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d006      	beq.n	80072bc <vl_new+0x24>
        if ( auth_check(VL_ACCESS_USER, VL_ACCESS_W, user_id) == 0 ) {
 80072ae:	001a      	movs	r2, r3
 80072b0:	2112      	movs	r1, #18
 80072b2:	2038      	movs	r0, #56	; 0x38
 80072b4:	f7ff fdc4 	bl	8006e40 <auth_check>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d02f      	beq.n	800731c <vl_new+0x84>
    block_id--;
 80072bc:	3c01      	subs	r4, #1
 80072be:	b2e4      	uxtb	r4, r4
    switch (block_id) {
 80072c0:	2c01      	cmp	r4, #1
 80072c2:	d028      	beq.n	8007316 <vl_new+0x7e>
 80072c4:	2c00      	cmp	r4, #0
 80072c6:	d003      	beq.n	80072d0 <vl_new+0x38>
 80072c8:	2c02      	cmp	r4, #2
 80072ca:	d021      	beq.n	8007310 <vl_new+0x78>
       default: return 0xFF;
 80072cc:	20ff      	movs	r0, #255	; 0xff
 80072ce:	e01d      	b.n	800730c <vl_new+0x74>
                new_fn      = &sub_gfb_new;
 80072d0:	4d15      	ldr	r5, [pc, #84]	; (8007328 <vl_new+0x90>)
        case 0: search_fn   = &sub_gfb_search;
 80072d2:	4b16      	ldr	r3, [pc, #88]	; (800732c <vl_new+0x94>)
    header = search_fn(data_id);
 80072d4:	9800      	ldr	r0, [sp, #0]
 80072d6:	4798      	blx	r3
    if (header != NULL_vaddr) {
 80072d8:	4b15      	ldr	r3, [pc, #84]	; (8007330 <vl_new+0x98>)
 80072da:	4298      	cmp	r0, r3
 80072dc:	d120      	bne.n	8007320 <vl_new+0x88>
    *fp_new = new_fn(data_id, mod, max_length);
 80072de:	b2fa      	uxtb	r2, r7
 80072e0:	9901      	ldr	r1, [sp, #4]
 80072e2:	9800      	ldr	r0, [sp, #0]
 80072e4:	47a8      	blx	r5
 80072e6:	6030      	str	r0, [r6, #0]
    if (*fp_new == NULL) {
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d01b      	beq.n	8007324 <vl_new+0x8c>
        block[block_id].files  += 1;
 80072ec:	4a11      	ldr	r2, [pc, #68]	; (8007334 <vl_new+0x9c>)
 80072ee:	3262      	adds	r2, #98	; 0x62
 80072f0:	0063      	lsls	r3, r4, #1
 80072f2:	191c      	adds	r4, r3, r4
 80072f4:	0063      	lsls	r3, r4, #1
 80072f6:	18d2      	adds	r2, r2, r3
 80072f8:	7911      	ldrb	r1, [r2, #4]
 80072fa:	7953      	ldrb	r3, [r2, #5]
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	430b      	orrs	r3, r1
 8007300:	3301      	adds	r3, #1
 8007302:	b29b      	uxth	r3, r3
 8007304:	7113      	strb	r3, [r2, #4]
 8007306:	0a1b      	lsrs	r3, r3, #8
 8007308:	7153      	strb	r3, [r2, #5]
    return 0;
 800730a:	2000      	movs	r0, #0
}
 800730c:	b003      	add	sp, #12
 800730e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                new_fn      = &sub_isf_new;
 8007310:	4d09      	ldr	r5, [pc, #36]	; (8007338 <vl_new+0xa0>)
        case 2: search_fn   = &sub_isf_search;
 8007312:	4b0a      	ldr	r3, [pc, #40]	; (800733c <vl_new+0xa4>)
                break;
 8007314:	e7de      	b.n	80072d4 <vl_new+0x3c>
                new_fn      = &sub_iss_new;
 8007316:	4d0a      	ldr	r5, [pc, #40]	; (8007340 <vl_new+0xa8>)
        case 1: search_fn   = &sub_iss_search;
 8007318:	4b0a      	ldr	r3, [pc, #40]	; (8007344 <vl_new+0xac>)
 800731a:	e7db      	b.n	80072d4 <vl_new+0x3c>
            return 0x04;
 800731c:	2004      	movs	r0, #4
 800731e:	e7f5      	b.n	800730c <vl_new+0x74>
        return 0x02;
 8007320:	2002      	movs	r0, #2
 8007322:	e7f3      	b.n	800730c <vl_new+0x74>
        return 0x06;
 8007324:	2006      	movs	r0, #6
 8007326:	e7f1      	b.n	800730c <vl_new+0x74>
 8007328:	08007133 	.word	0x08007133
 800732c:	08007221 	.word	0x08007221
 8007330:	0000ffff 	.word	0x0000ffff
 8007334:	20001170 	.word	0x20001170
 8007338:	0800713b 	.word	0x0800713b
 800733c:	080071e5 	.word	0x080071e5
 8007340:	08007137 	.word	0x08007137
 8007344:	08007213 	.word	0x08007213

08007348 <vl_delete>:
OT_WEAK ot_u8 vl_delete(vlBLOCK block_id, ot_u8 data_id, const id_tmpl* user_id) {
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	000d      	movs	r5, r1
 800734c:	0016      	movs	r6, r2
    block_id--;
 800734e:	3801      	subs	r0, #1
 8007350:	b2c4      	uxtb	r4, r0
    switch (block_id) {
 8007352:	2c01      	cmp	r4, #1
 8007354:	d036      	beq.n	80073c4 <vl_delete+0x7c>
 8007356:	2c00      	cmp	r4, #0
 8007358:	d003      	beq.n	8007362 <vl_delete+0x1a>
 800735a:	2c02      	cmp	r4, #2
 800735c:	d02f      	beq.n	80073be <vl_delete+0x76>
       default: return 255;
 800735e:	20ff      	movs	r0, #255	; 0xff
 8007360:	e02c      	b.n	80073bc <vl_delete+0x74>
        case 0: check_fn    = &sub_gfb_delete_check;
 8007362:	4b1d      	ldr	r3, [pc, #116]	; (80073d8 <vl_delete+0x90>)
                search_fn   = &sub_gfb_search;
 8007364:	4f1d      	ldr	r7, [pc, #116]	; (80073dc <vl_delete+0x94>)
    if (check_fn(data_id) != 0) {
 8007366:	0028      	movs	r0, r5
 8007368:	4798      	blx	r3
 800736a:	2800      	cmp	r0, #0
 800736c:	d02d      	beq.n	80073ca <vl_delete+0x82>
        header = search_fn(data_id);
 800736e:	0028      	movs	r0, r5
 8007370:	47b8      	blx	r7
 8007372:	0005      	movs	r5, r0
    if (header == NULL_vaddr) {
 8007374:	4b1a      	ldr	r3, [pc, #104]	; (80073e0 <vl_delete+0x98>)
 8007376:	4298      	cmp	r0, r3
 8007378:	d029      	beq.n	80073ce <vl_delete+0x86>
    if (user_id != NULL) {
 800737a:	2e00      	cmp	r6, #0
 800737c:	d00b      	beq.n	8007396 <vl_delete+0x4e>
        filemod.ushort = vworm_read(header + 4);
 800737e:	3004      	adds	r0, #4
 8007380:	b280      	uxth	r0, r0
 8007382:	f001 f94f 	bl	8008624 <vworm_read>
        if ( auth_check(filemod.ubyte[1], VL_ACCESS_RW, user_id) == 0 ) {
 8007386:	0400      	lsls	r0, r0, #16
 8007388:	0e00      	lsrs	r0, r0, #24
 800738a:	0032      	movs	r2, r6
 800738c:	2136      	movs	r1, #54	; 0x36
 800738e:	f7ff fd57 	bl	8006e40 <auth_check>
 8007392:	2800      	cmp	r0, #0
 8007394:	d01d      	beq.n	80073d2 <vl_delete+0x8a>
    sub_delete_file(header);
 8007396:	0028      	movs	r0, r5
 8007398:	f7ff ff62 	bl	8007260 <sub_delete_file>
        block[block_id].files  -= 1;
 800739c:	4a11      	ldr	r2, [pc, #68]	; (80073e4 <vl_delete+0x9c>)
 800739e:	3262      	adds	r2, #98	; 0x62
 80073a0:	0060      	lsls	r0, r4, #1
 80073a2:	1904      	adds	r4, r0, r4
 80073a4:	0063      	lsls	r3, r4, #1
 80073a6:	18d2      	adds	r2, r2, r3
 80073a8:	7911      	ldrb	r1, [r2, #4]
 80073aa:	7953      	ldrb	r3, [r2, #5]
 80073ac:	021b      	lsls	r3, r3, #8
 80073ae:	430b      	orrs	r3, r1
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	7113      	strb	r3, [r2, #4]
 80073b6:	0a1b      	lsrs	r3, r3, #8
 80073b8:	7153      	strb	r3, [r2, #5]
    return 0;
 80073ba:	2000      	movs	r0, #0
}
 80073bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 2: check_fn    = &sub_isf_delete_check;
 80073be:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <vl_delete+0xa0>)
                search_fn   = &sub_isf_search;
 80073c0:	4f0a      	ldr	r7, [pc, #40]	; (80073ec <vl_delete+0xa4>)
                break;
 80073c2:	e7d0      	b.n	8007366 <vl_delete+0x1e>
        case 1: check_fn    = &sub_iss_delete_check;
 80073c4:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <vl_delete+0xa8>)
                search_fn   = &sub_iss_search;
 80073c6:	4f0b      	ldr	r7, [pc, #44]	; (80073f4 <vl_delete+0xac>)
 80073c8:	e7cd      	b.n	8007366 <vl_delete+0x1e>
        return 0x01;
 80073ca:	2001      	movs	r0, #1
 80073cc:	e7f6      	b.n	80073bc <vl_delete+0x74>
 80073ce:	2001      	movs	r0, #1
 80073d0:	e7f4      	b.n	80073bc <vl_delete+0x74>
            return 0x04;
 80073d2:	2004      	movs	r0, #4
 80073d4:	e7f2      	b.n	80073bc <vl_delete+0x74>
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	0800713f 	.word	0x0800713f
 80073dc:	08007221 	.word	0x08007221
 80073e0:	0000ffff 	.word	0x0000ffff
 80073e4:	20001170 	.word	0x20001170
 80073e8:	08007147 	.word	0x08007147
 80073ec:	080071e5 	.word	0x080071e5
 80073f0:	08007143 	.word	0x08007143
 80073f4:	08007213 	.word	0x08007213

080073f8 <vl_getheader_vaddr>:
OT_WEAK ot_u8 vl_getheader_vaddr(vaddr* header, vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	0005      	movs	r5, r0
 80073fc:	001c      	movs	r4, r3
    switch (block_id) {
 80073fe:	2902      	cmp	r1, #2
 8007400:	d01e      	beq.n	8007440 <vl_getheader_vaddr+0x48>
 8007402:	2903      	cmp	r1, #3
 8007404:	d021      	beq.n	800744a <vl_getheader_vaddr+0x52>
 8007406:	2901      	cmp	r1, #1
 8007408:	d001      	beq.n	800740e <vl_getheader_vaddr+0x16>
        default:                return 255;
 800740a:	20ff      	movs	r0, #255	; 0xff
}
 800740c:	bd70      	pop	{r4, r5, r6, pc}
        case VL_GFB_BLOCKID:    *header = sub_gfb_search(data_id);      break;
 800740e:	0010      	movs	r0, r2
 8007410:	f7ff ff06 	bl	8007220 <sub_gfb_search>
 8007414:	8028      	strh	r0, [r5, #0]
    if (*header == NULL_vaddr) {
 8007416:	8828      	ldrh	r0, [r5, #0]
 8007418:	4b11      	ldr	r3, [pc, #68]	; (8007460 <vl_getheader_vaddr+0x68>)
 800741a:	4298      	cmp	r0, r3
 800741c:	d01c      	beq.n	8007458 <vl_getheader_vaddr+0x60>
    if (user_id != NULL) {
 800741e:	9b04      	ldr	r3, [sp, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01b      	beq.n	800745c <vl_getheader_vaddr+0x64>
        filemod.ushort = vworm_read(*header + 4);
 8007424:	3004      	adds	r0, #4
 8007426:	b280      	uxth	r0, r0
 8007428:	f001 f8fc 	bl	8008624 <vworm_read>
        if ( auth_check(filemod.ubyte[1], mod, user_id) == 0 ) {
 800742c:	0400      	lsls	r0, r0, #16
 800742e:	0e00      	lsrs	r0, r0, #24
 8007430:	9a04      	ldr	r2, [sp, #16]
 8007432:	0021      	movs	r1, r4
 8007434:	f7ff fd04 	bl	8006e40 <auth_check>
 8007438:	2800      	cmp	r0, #0
 800743a:	d00b      	beq.n	8007454 <vl_getheader_vaddr+0x5c>
    return 0;
 800743c:	2000      	movs	r0, #0
 800743e:	e7e5      	b.n	800740c <vl_getheader_vaddr+0x14>
        case VL_ISS_BLOCKID:    *header = sub_iss_search(data_id);     break;
 8007440:	0010      	movs	r0, r2
 8007442:	f7ff fee6 	bl	8007212 <sub_iss_search>
 8007446:	8028      	strh	r0, [r5, #0]
 8007448:	e7e5      	b.n	8007416 <vl_getheader_vaddr+0x1e>
        case VL_ISF_BLOCKID:    *header = sub_isf_search(data_id);      break;
 800744a:	0010      	movs	r0, r2
 800744c:	f7ff feca 	bl	80071e4 <sub_isf_search>
 8007450:	8028      	strh	r0, [r5, #0]
 8007452:	e7e0      	b.n	8007416 <vl_getheader_vaddr+0x1e>
            return 0x04;
 8007454:	3004      	adds	r0, #4
 8007456:	e7d9      	b.n	800740c <vl_getheader_vaddr+0x14>
        return 0x01;
 8007458:	2001      	movs	r0, #1
 800745a:	e7d7      	b.n	800740c <vl_getheader_vaddr+0x14>
    return 0;
 800745c:	2000      	movs	r0, #0
 800745e:	e7d5      	b.n	800740c <vl_getheader_vaddr+0x14>
 8007460:	0000ffff 	.word	0x0000ffff

08007464 <vl_open_file>:
OT_WEAK vlFILE* vl_open_file(vaddr header) {
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	0005      	movs	r5, r0
    fp = sub_new_fp();
 8007468:	f7ff fe70 	bl	800714c <sub_new_fp>
 800746c:	1e04      	subs	r4, r0, #0
    if (fp != NULL) {
 800746e:	d01e      	beq.n	80074ae <vl_open_file+0x4a>
        fp->header  = header;
 8007470:	8005      	strh	r5, [r0, #0]
        fp->alloc   = vworm_read(header + 2);               //alloc
 8007472:	1ca8      	adds	r0, r5, #2
 8007474:	b280      	uxth	r0, r0
 8007476:	f001 f8d5 	bl	8008624 <vworm_read>
 800747a:	80a0      	strh	r0, [r4, #4]
        fp->idmod   = vworm_read(header + 4);
 800747c:	1d28      	adds	r0, r5, #4
 800747e:	b280      	uxth	r0, r0
 8007480:	f001 f8d0 	bl	8008624 <vworm_read>
 8007484:	80e0      	strh	r0, [r4, #6]
        fp->start   = vworm_read(header + 8);               //mirror base addr
 8007486:	0028      	movs	r0, r5
 8007488:	3008      	adds	r0, #8
 800748a:	b280      	uxth	r0, r0
 800748c:	f001 f8ca 	bl	8008624 <vworm_read>
 8007490:	8060      	strh	r0, [r4, #2]
        fp->flags   = VL_FLAG_OPENED;
 8007492:	2301      	movs	r3, #1
 8007494:	8163      	strh	r3, [r4, #10]
        if (fp->start != NULL_vaddr) {
 8007496:	4b0e      	ldr	r3, [pc, #56]	; (80074d0 <vl_open_file+0x6c>)
 8007498:	4298      	cmp	r0, r3
 800749a:	d00a      	beq.n	80074b2 <vl_open_file+0x4e>
            fp->start  += 2;
 800749c:	1c83      	adds	r3, r0, #2
 800749e:	8063      	strh	r3, [r4, #2]
            fp->write   = &vsram_mark;
 80074a0:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <vl_open_file+0x70>)
 80074a2:	6123      	str	r3, [r4, #16]
            fp->read    = &vsram_read;
 80074a4:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <vl_open_file+0x74>)
 80074a6:	60e3      	str	r3, [r4, #12]
            fp->length  = vsram_read(mlen);
 80074a8:	f001 f8d2 	bl	8008650 <vsram_read>
 80074ac:	8120      	strh	r0, [r4, #8]
}
 80074ae:	0020      	movs	r0, r4
 80074b0:	bd70      	pop	{r4, r5, r6, pc}
            fp->write   = &vworm_write;
 80074b2:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <vl_open_file+0x78>)
 80074b4:	6123      	str	r3, [r4, #16]
            fp->read    = &vworm_read;
 80074b6:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <vl_open_file+0x7c>)
 80074b8:	60e3      	str	r3, [r4, #12]
            fp->length  = vworm_read(header + 0);           //length
 80074ba:	0028      	movs	r0, r5
 80074bc:	f001 f8b2 	bl	8008624 <vworm_read>
 80074c0:	8120      	strh	r0, [r4, #8]
            fp->start   = vworm_read(header + 6);           //vworm base addr
 80074c2:	3506      	adds	r5, #6
 80074c4:	b2a8      	uxth	r0, r5
 80074c6:	f001 f8ad 	bl	8008624 <vworm_read>
 80074ca:	8060      	strh	r0, [r4, #2]
    return fp;
 80074cc:	e7ef      	b.n	80074ae <vl_open_file+0x4a>
 80074ce:	46c0      	nop			; (mov r8, r8)
 80074d0:	0000ffff 	.word	0x0000ffff
 80074d4:	08008659 	.word	0x08008659
 80074d8:	08008651 	.word	0x08008651
 80074dc:	08008635 	.word	0x08008635
 80074e0:	08008625 	.word	0x08008625

080074e4 <vl_open>:
OT_WEAK vlFILE* vl_open(vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 80074e4:	b530      	push	{r4, r5, lr}
 80074e6:	b085      	sub	sp, #20
 80074e8:	0004      	movs	r4, r0
    vaddr header = NULL_vaddr;
 80074ea:	200e      	movs	r0, #14
 80074ec:	4468      	add	r0, sp
 80074ee:	2501      	movs	r5, #1
 80074f0:	426d      	negs	r5, r5
 80074f2:	8005      	strh	r5, [r0, #0]
    if (vl_getheader_vaddr(&header, block_id, data_id, mod, user_id) == 0) {
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	0013      	movs	r3, r2
 80074f8:	000a      	movs	r2, r1
 80074fa:	0021      	movs	r1, r4
 80074fc:	f7ff ff7c 	bl	80073f8 <vl_getheader_vaddr>
 8007500:	2800      	cmp	r0, #0
 8007502:	d106      	bne.n	8007512 <vl_open+0x2e>
        return vl_open_file(header);
 8007504:	230e      	movs	r3, #14
 8007506:	446b      	add	r3, sp
 8007508:	8818      	ldrh	r0, [r3, #0]
 800750a:	f7ff ffab 	bl	8007464 <vl_open_file>
}
 800750e:	b005      	add	sp, #20
 8007510:	bd30      	pop	{r4, r5, pc}
    return NULL;
 8007512:	2000      	movs	r0, #0
 8007514:	e7fb      	b.n	800750e <vl_open+0x2a>

08007516 <vl_chmod>:
OT_WEAK ot_u8 vl_chmod(vlBLOCK block_id, ot_u8 data_id, ot_u8 mod, const id_tmpl* user_id) {
 8007516:	b570      	push	{r4, r5, r6, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	0004      	movs	r4, r0
 800751c:	000d      	movs	r5, r1
 800751e:	0016      	movs	r6, r2
    vaddr header = NULL_vaddr;
 8007520:	200e      	movs	r0, #14
 8007522:	4468      	add	r0, sp
 8007524:	2201      	movs	r2, #1
 8007526:	4252      	negs	r2, r2
 8007528:	8002      	strh	r2, [r0, #0]
    output = vl_getheader_vaddr(&header, block_id, data_id, VL_ACCESS_RW, user_id);
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	2336      	movs	r3, #54	; 0x36
 800752e:	000a      	movs	r2, r1
 8007530:	0021      	movs	r1, r4
 8007532:	f7ff ff61 	bl	80073f8 <vl_getheader_vaddr>
 8007536:	1e04      	subs	r4, r0, #0
    if (output == 0) {
 8007538:	d002      	beq.n	8007540 <vl_chmod+0x2a>
}
 800753a:	0020      	movs	r0, r4
 800753c:	b004      	add	sp, #16
 800753e:	bd70      	pop	{r4, r5, r6, pc}
        idmod.ubyte[0]  = data_id;
 8007540:	a903      	add	r1, sp, #12
 8007542:	700d      	strb	r5, [r1, #0]
        idmod.ubyte[1]  = mod;
 8007544:	704e      	strb	r6, [r1, #1]
        sub_write_header((header+4), &idmod.ushort, 2);
 8007546:	230e      	movs	r3, #14
 8007548:	446b      	add	r3, sp
 800754a:	8818      	ldrh	r0, [r3, #0]
 800754c:	3004      	adds	r0, #4
 800754e:	b280      	uxth	r0, r0
 8007550:	2202      	movs	r2, #2
 8007552:	f7ff fe11 	bl	8007178 <sub_write_header>
 8007556:	e7f0      	b.n	800753a <vl_chmod+0x24>

08007558 <vl_read>:
OT_WEAK ot_u16 vl_read( vlFILE* fp, ot_uint offset ) {
 8007558:	b510      	push	{r4, lr}
    return fp->read( (ot_uint)(offset+fp->start) );
 800755a:	68c3      	ldr	r3, [r0, #12]
 800755c:	8840      	ldrh	r0, [r0, #2]
 800755e:	1840      	adds	r0, r0, r1
 8007560:	b280      	uxth	r0, r0
 8007562:	4798      	blx	r3
}
 8007564:	bd10      	pop	{r4, pc}

08007566 <vl_write>:
OT_WEAK ot_u8 vl_write( vlFILE* fp, ot_uint offset, ot_u16 data ) {
 8007566:	b510      	push	{r4, lr}
    if (offset >= fp->alloc) {
 8007568:	8883      	ldrh	r3, [r0, #4]
 800756a:	428b      	cmp	r3, r1
 800756c:	d913      	bls.n	8007596 <vl_write+0x30>
    if (offset >= fp->length) {
 800756e:	8903      	ldrh	r3, [r0, #8]
 8007570:	428b      	cmp	r3, r1
 8007572:	d805      	bhi.n	8007580 <vl_write+0x1a>
        fp->length  = offset+2;
 8007574:	1c8b      	adds	r3, r1, #2
 8007576:	8103      	strh	r3, [r0, #8]
        fp->flags  |= VL_FLAG_RESIZED;
 8007578:	8943      	ldrh	r3, [r0, #10]
 800757a:	2404      	movs	r4, #4
 800757c:	4323      	orrs	r3, r4
 800757e:	8143      	strh	r3, [r0, #10]
    fp->flags |= VL_FLAG_MODDED;
 8007580:	8943      	ldrh	r3, [r0, #10]
 8007582:	2402      	movs	r4, #2
 8007584:	4323      	orrs	r3, r4
 8007586:	8143      	strh	r3, [r0, #10]
    return fp->write( (offset+fp->start), data);
 8007588:	6903      	ldr	r3, [r0, #16]
 800758a:	8840      	ldrh	r0, [r0, #2]
 800758c:	1840      	adds	r0, r0, r1
 800758e:	b280      	uxth	r0, r0
 8007590:	0011      	movs	r1, r2
 8007592:	4798      	blx	r3
}
 8007594:	bd10      	pop	{r4, pc}
        return 255;
 8007596:	20ff      	movs	r0, #255	; 0xff
 8007598:	e7fc      	b.n	8007594 <vl_write+0x2e>

0800759a <vl_load>:
OT_WEAK ot_uint vl_load( vlFILE* fp, ot_uint length, ot_u8* data ) {
 800759a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800759c:	46c6      	mov	lr, r8
 800759e:	b500      	push	{lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	4680      	mov	r8, r0
 80075a4:	0017      	movs	r7, r2
    if (length > fp->length) {
 80075a6:	8900      	ldrh	r0, [r0, #8]
 80075a8:	4288      	cmp	r0, r1
 80075aa:	d300      	bcc.n	80075ae <vl_load+0x14>
 80075ac:	0008      	movs	r0, r1
    cursor      = fp->start;        // guaranteed to be 16 bit aligned
 80075ae:	4643      	mov	r3, r8
 80075b0:	885c      	ldrh	r4, [r3, #2]
    length      = cursor+length;
 80075b2:	1900      	adds	r0, r0, r4
 80075b4:	b286      	uxth	r6, r0
    for (; cursor<length; cursor++) {
 80075b6:	e005      	b.n	80075c4 <vl_load+0x2a>
        *data++ = scratch.ubyte[align];
 80075b8:	ab01      	add	r3, sp, #4
 80075ba:	5d5b      	ldrb	r3, [r3, r5]
 80075bc:	703b      	strb	r3, [r7, #0]
    for (; cursor<length; cursor++) {
 80075be:	3401      	adds	r4, #1
 80075c0:	b2a4      	uxth	r4, r4
        *data++ = scratch.ubyte[align];
 80075c2:	3701      	adds	r7, #1
    for (; cursor<length; cursor++) {
 80075c4:	42b4      	cmp	r4, r6
 80075c6:	d209      	bcs.n	80075dc <vl_load+0x42>
        ot_u8 align = (cursor & 1);
 80075c8:	2501      	movs	r5, #1
 80075ca:	4025      	ands	r5, r4
        if (align == 0) {
 80075cc:	d1f4      	bne.n	80075b8 <vl_load+0x1e>
            scratch.ushort = fp->read(cursor);
 80075ce:	0020      	movs	r0, r4
 80075d0:	4643      	mov	r3, r8
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	4798      	blx	r3
 80075d6:	ab01      	add	r3, sp, #4
 80075d8:	8018      	strh	r0, [r3, #0]
 80075da:	e7ed      	b.n	80075b8 <vl_load+0x1e>
    return (length - fp->start);
 80075dc:	4643      	mov	r3, r8
 80075de:	8858      	ldrh	r0, [r3, #2]
 80075e0:	1a30      	subs	r0, r6, r0
 80075e2:	b280      	uxth	r0, r0
}
 80075e4:	b002      	add	sp, #8
 80075e6:	bc04      	pop	{r2}
 80075e8:	4690      	mov	r8, r2
 80075ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075ec <vl_store>:
OT_WEAK ot_u8 vl_store( vlFILE* fp, ot_uint length, const ot_u8* data ) {
 80075ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ee:	46ce      	mov	lr, r9
 80075f0:	b500      	push	{lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	0005      	movs	r5, r0
    if (length > fp->alloc) {
 80075f6:	8886      	ldrh	r6, [r0, #4]
 80075f8:	428e      	cmp	r6, r1
 80075fa:	d300      	bcc.n	80075fe <vl_store+0x12>
 80075fc:	000e      	movs	r6, r1
    fp->flags  |= (length != fp->length) ? (VL_FLAG_RESIZED|VL_FLAG_MODDED) : VL_FLAG_MODDED;
 80075fe:	210a      	movs	r1, #10
 8007600:	5e6b      	ldrsh	r3, [r5, r1]
 8007602:	8929      	ldrh	r1, [r5, #8]
 8007604:	42b1      	cmp	r1, r6
 8007606:	d008      	beq.n	800761a <vl_store+0x2e>
 8007608:	2106      	movs	r1, #6
 800760a:	430b      	orrs	r3, r1
 800760c:	816b      	strh	r3, [r5, #10]
    fp->length  = length;
 800760e:	812e      	strh	r6, [r5, #8]
    cursor      = fp->start;
 8007610:	886c      	ldrh	r4, [r5, #2]
    length      = cursor+length;
 8007612:	1936      	adds	r6, r6, r4
 8007614:	b2b6      	uxth	r6, r6
    for (test=0; cursor<length; cursor+=2) {
 8007616:	2700      	movs	r7, #0
 8007618:	e019      	b.n	800764e <vl_store+0x62>
    fp->flags  |= (length != fp->length) ? (VL_FLAG_RESIZED|VL_FLAG_MODDED) : VL_FLAG_MODDED;
 800761a:	2102      	movs	r1, #2
 800761c:	e7f5      	b.n	800760a <vl_store+0x1e>
        scratch.ubyte[0]    = *data++;
 800761e:	7813      	ldrb	r3, [r2, #0]
 8007620:	21ff      	movs	r1, #255	; 0xff
 8007622:	4668      	mov	r0, sp
 8007624:	8880      	ldrh	r0, [r0, #4]
 8007626:	4388      	bics	r0, r1
 8007628:	4303      	orrs	r3, r0
        scratch.ubyte[1]    = *data++;
 800762a:	1c91      	adds	r1, r2, #2
 800762c:	4689      	mov	r9, r1
 800762e:	7852      	ldrb	r2, [r2, #1]
 8007630:	0212      	lsls	r2, r2, #8
 8007632:	21ff      	movs	r1, #255	; 0xff
 8007634:	4019      	ands	r1, r3
 8007636:	4311      	orrs	r1, r2
 8007638:	466b      	mov	r3, sp
 800763a:	8099      	strh	r1, [r3, #4]
        test               |= fp->write(cursor, scratch.ushort);
 800763c:	b289      	uxth	r1, r1
 800763e:	0020      	movs	r0, r4
 8007640:	692b      	ldr	r3, [r5, #16]
 8007642:	4798      	blx	r3
 8007644:	4307      	orrs	r7, r0
 8007646:	b2ff      	uxtb	r7, r7
    for (test=0; cursor<length; cursor+=2) {
 8007648:	3402      	adds	r4, #2
 800764a:	b2a4      	uxth	r4, r4
        scratch.ubyte[1]    = *data++;
 800764c:	464a      	mov	r2, r9
    for (test=0; cursor<length; cursor+=2) {
 800764e:	42b4      	cmp	r4, r6
 8007650:	d3e5      	bcc.n	800761e <vl_store+0x32>
}
 8007652:	0038      	movs	r0, r7
 8007654:	b002      	add	sp, #8
 8007656:	bc04      	pop	{r2}
 8007658:	4691      	mov	r9, r2
 800765a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800765c <vl_close>:
OT_WEAK ot_u8 vl_close( vlFILE* fp ) {
 800765c:	b510      	push	{r4, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	1e04      	subs	r4, r0, #0
    if (FP_ISVALID(fp)) {
 8007662:	d02e      	beq.n	80076c2 <vl_close+0x66>
        if (vworm_read(fp->header+0) != fp->length) {
 8007664:	8800      	ldrh	r0, [r0, #0]
 8007666:	f000 ffdd 	bl	8008624 <vworm_read>
 800766a:	8923      	ldrh	r3, [r4, #8]
 800766c:	4298      	cmp	r0, r3
 800766e:	d115      	bne.n	800769c <vl_close+0x40>
        epoch_s = time_get_utc();
 8007670:	f000 f9b1 	bl	80079d6 <time_get_utc>
 8007674:	9001      	str	r0, [sp, #4]
        if (fp->flags & VL_FLAG_MODDED) {
 8007676:	8963      	ldrh	r3, [r4, #10]
 8007678:	079b      	lsls	r3, r3, #30
 800767a:	d416      	bmi.n	80076aa <vl_close+0x4e>
            action.ushort       = vworm_read(fp->header+10);    ///@todo make offset constant instead of 10
 800767c:	8820      	ldrh	r0, [r4, #0]
 800767e:	300a      	adds	r0, #10
 8007680:	b280      	uxth	r0, r0
 8007682:	f000 ffcf 	bl	8008624 <vworm_read>
            action.ubyte[0]    &= (ot_u8)fp->flags;
 8007686:	7aa3      	ldrb	r3, [r4, #10]
 8007688:	4018      	ands	r0, r3
            if (action.ubyte[0] != 0) {
 800768a:	d116      	bne.n	80076ba <vl_close+0x5e>
        fp->start   = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	8063      	strh	r3, [r4, #2]
        fp->length  = 0;
 8007690:	8123      	strh	r3, [r4, #8]
        fp->flags   = 0;
 8007692:	8163      	strh	r3, [r4, #10]
        fp->read    = NULL;
 8007694:	60e3      	str	r3, [r4, #12]
        fp->write   = NULL;
 8007696:	6123      	str	r3, [r4, #16]
}
 8007698:	b002      	add	sp, #8
 800769a:	bd10      	pop	{r4, pc}
            sub_write_header( (fp->header+0), &(fp->length), 2);
 800769c:	0021      	movs	r1, r4
 800769e:	3108      	adds	r1, #8
 80076a0:	8820      	ldrh	r0, [r4, #0]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f7ff fd68 	bl	8007178 <sub_write_header>
 80076a8:	e7e2      	b.n	8007670 <vl_close+0x14>
            sub_write_header( (fp->header+12), (ot_u16*)&epoch_s, 4);    ///@todo make offset constant instead of 12
 80076aa:	8820      	ldrh	r0, [r4, #0]
 80076ac:	300c      	adds	r0, #12
 80076ae:	b280      	uxth	r0, r0
 80076b0:	2204      	movs	r2, #4
 80076b2:	a901      	add	r1, sp, #4
 80076b4:	f7ff fd60 	bl	8007178 <sub_write_header>
 80076b8:	e7e0      	b.n	800767c <vl_close+0x20>
                retval = sub_action(fp);
 80076ba:	0020      	movs	r0, r4
 80076bc:	f7ff fdb8 	bl	8007230 <sub_action>
 80076c0:	e7e4      	b.n	800768c <vl_close+0x30>
        retval = 255;
 80076c2:	20ff      	movs	r0, #255	; 0xff
 80076c4:	e7e8      	b.n	8007698 <vl_close+0x3c>

080076c6 <ISF_open_su>:
OT_WEAK vlFILE* ISF_open_su( ot_u8 id ) {
 80076c6:	b510      	push	{r4, lr}
 80076c8:	0001      	movs	r1, r0
    return vl_open(VL_ISF_BLOCKID, id, VL_ACCESS_SU, NULL);
 80076ca:	2300      	movs	r3, #0
 80076cc:	223f      	movs	r2, #63	; 0x3f
 80076ce:	2003      	movs	r0, #3
 80076d0:	f7ff ff08 	bl	80074e4 <vl_open>
}
 80076d4:	bd10      	pop	{r4, pc}

080076d6 <ISS_open>:
OT_WEAK vlFILE* ISS_open( ot_u8 id, ot_u8 mod, const id_tmpl* user_id ) {
 80076d6:	b510      	push	{r4, lr}
 80076d8:	0013      	movs	r3, r2
    return vl_open(VL_ISS_BLOCKID, id, mod, user_id);
 80076da:	000a      	movs	r2, r1
 80076dc:	0001      	movs	r1, r0
 80076de:	2002      	movs	r0, #2
 80076e0:	f7ff ff00 	bl	80074e4 <vl_open>
}
 80076e4:	bd10      	pop	{r4, pc}

080076e6 <ISF_open>:
OT_WEAK vlFILE* ISF_open( ot_u8 id, ot_u8 mod, const id_tmpl* user_id ) {
 80076e6:	b510      	push	{r4, lr}
 80076e8:	0013      	movs	r3, r2
    return vl_open(VL_ISF_BLOCKID, id, mod, user_id);
 80076ea:	000a      	movs	r2, r1
 80076ec:	0001      	movs	r1, r0
 80076ee:	2003      	movs	r0, #3
 80076f0:	f7ff fef8 	bl	80074e4 <vl_open>
}
 80076f4:	bd10      	pop	{r4, pc}

080076f6 <ISF_loadmirror>:
}
 80076f6:	2000      	movs	r0, #0
 80076f8:	4770      	bx	lr
	...

080076fc <vl_init>:
OT_WEAK ot_u8 vl_init(void) {
 80076fc:	b510      	push	{r4, lr}
    memset(vlaction, 0, sizeof(vlaction));
 80076fe:	4c11      	ldr	r4, [pc, #68]	; (8007744 <vl_init+0x48>)
 8007700:	0020      	movs	r0, r4
 8007702:	303c      	adds	r0, #60	; 0x3c
 8007704:	2220      	movs	r2, #32
 8007706:	2100      	movs	r1, #0
 8007708:	f000 ff3a 	bl	8008580 <ot_memset>
    memset(vlaction_users, 0, sizeof(vlaction_users));
 800770c:	0020      	movs	r0, r4
 800770e:	307c      	adds	r0, #124	; 0x7c
 8007710:	2208      	movs	r2, #8
 8007712:	2100      	movs	r1, #0
 8007714:	f000 ff34 	bl	8008580 <ot_memset>
    memset(vlfile, 0, sizeof(vlfile));
 8007718:	223c      	movs	r2, #60	; 0x3c
 800771a:	2100      	movs	r1, #0
 800771c:	0020      	movs	r0, r4
 800771e:	f000 ff2f 	bl	8008580 <ot_memset>
    for (i=0; i<OT_PARAM(VLFPS); i++) {
 8007722:	2300      	movs	r3, #0
 8007724:	e008      	b.n	8007738 <vl_init+0x3c>
        vlfile[i].header   = NULL_vaddr;
 8007726:	009a      	lsls	r2, r3, #2
 8007728:	18d2      	adds	r2, r2, r3
 800772a:	0091      	lsls	r1, r2, #2
 800772c:	4a05      	ldr	r2, [pc, #20]	; (8007744 <vl_init+0x48>)
 800772e:	2001      	movs	r0, #1
 8007730:	4240      	negs	r0, r0
 8007732:	5288      	strh	r0, [r1, r2]
    for (i=0; i<OT_PARAM(VLFPS); i++) {
 8007734:	3301      	adds	r3, #1
 8007736:	b21b      	sxth	r3, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	ddf4      	ble.n	8007726 <vl_init+0x2a>
    ISF_loadmirror();
 800773c:	f7ff ffdb 	bl	80076f6 <ISF_loadmirror>
}
 8007740:	2000      	movs	r0, #0
 8007742:	bd10      	pop	{r4, pc}
 8007744:	20001170 	.word	0x20001170

08007748 <sub_init_task>:
#endif
};



ot_u8 sub_init_task(Task_Index i, ot_u8 is_restart) {
 8007748:	b570      	push	{r4, r5, r6, lr}
    ot_u8 task_event;
    task_event          = sys.task[i].event;
 800774a:	00c3      	lsls	r3, r0, #3
 800774c:	4c07      	ldr	r4, [pc, #28]	; (800776c <sub_init_task+0x24>)
 800774e:	18e4      	adds	r4, r4, r3
 8007750:	1d22      	adds	r2, r4, #4
 8007752:	7926      	ldrb	r6, [r4, #4]
    sys.task[i].event   = 0;
 8007754:	2500      	movs	r5, #0
 8007756:	7125      	strb	r5, [r4, #4]
    sys.task[i].cursor  = is_restart;
 8007758:	7161      	strb	r1, [r4, #5]
    TASK_INDEXED_CALL(i);
 800775a:	0080      	lsls	r0, r0, #2
 800775c:	4904      	ldr	r1, [pc, #16]	; (8007770 <sub_init_task+0x28>)
 800775e:	5843      	ldr	r3, [r0, r1]
 8007760:	0010      	movs	r0, r2
 8007762:	4798      	blx	r3
    sys.task[i].cursor  = 0;
 8007764:	7165      	strb	r5, [r4, #5]
    return task_event;
}
 8007766:	0030      	movs	r0, r6
 8007768:	bd70      	pop	{r4, r5, r6, pc}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	20002d90 	.word	0x20002d90
 8007770:	0800a67c 	.word	0x0800a67c

08007774 <sys_init>:
/** System Core Functions
  * ============================================================================
  */

#ifndef EXTF_sys_init
OT_WEAK void sys_init() {
 8007774:	b510      	push	{r4, lr}
#   endif

    /// Set default values in system tasks.  At a minimum, this is doing a
    /// memset on the task struct to 0.  If dynamic task callbacks are enabled,
    /// also set theses callbacks to the default values.
    memset((ot_u8*)sys.task, 0, sizeof(task_marker)*SYS_TASKS);
 8007776:	4c0b      	ldr	r4, [pc, #44]	; (80077a4 <sys_init+0x30>)
 8007778:	2228      	movs	r2, #40	; 0x28
 800777a:	2100      	movs	r1, #0
 800777c:	0020      	movs	r0, r4
 800777e:	f000 feff 	bl	8008580 <ot_memset>
            sys_task->call  = default_call;
        }
    }
#   endif

    sys.active = TASK_MAX;
 8007782:	3c04      	subs	r4, #4
 8007784:	2300      	movs	r3, #0
 8007786:	7023      	strb	r3, [r4, #0]
//#   endif

    /// Initialize DLL, which also initializes the rest of the protocol stack.
    /// In some HW, the radio must be initialized before MPipe.
#   if (OT_FEATURE(M2))
        dll_init();
 8007788:	f7fd fe0c 	bl	80053a4 <dll_init>
//        mpipe_connect(NULL);
//#   endif
        
    ///@todo change these manual calls into normal task calls using event=0,
    ///      which is the initialization/kill state.
    i = TASK_terminus;
 800778c:	2405      	movs	r4, #5
    while (i > 1) {
 800778e:	e006      	b.n	800779e <sys_init+0x2a>
        sub_init_task(--i, 1);
 8007790:	3c01      	subs	r4, #1
 8007792:	b2a0      	uxth	r0, r4
 8007794:	b204      	sxth	r4, r0
 8007796:	b240      	sxtb	r0, r0
 8007798:	2101      	movs	r1, #1
 800779a:	f7ff ffd5 	bl	8007748 <sub_init_task>
    while (i > 1) {
 800779e:	2c01      	cmp	r4, #1
 80077a0:	dcf6      	bgt.n	8007790 <sys_init+0x1c>
    }
}
 80077a2:	bd10      	pop	{r4, pc}
 80077a4:	20002d94 	.word	0x20002d94

080077a8 <sys_panic>:
#endif



#ifndef EXTF_sys_panic
OT_WEAK void sys_panic(ot_u8 err_code) {
 80077a8:	b510      	push	{r4, lr}
 80077aa:	0004      	movs	r4, r0
/// Go to OFF state
#   if (OT_FEATURE(M2))
        dll.idle_state = 0;
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <sys_panic+0x20>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]
        session_flush();
 80077b2:	f7fe fb23 	bl	8005dfc <session_flush>
        dll_idle();
 80077b6:	f7fd f951 	bl	8004a5c <dll_idle>
#   endif

    systim_disable();
 80077ba:	f000 f9f7 	bl	8007bac <systim_disable>

#   if defined(EXTF_sys_sig_panic)
        sys_sig_panic(err_code);
 80077be:	b220      	sxth	r0, r4
 80077c0:	f7f8 ffd1 	bl	8000766 <sys_sig_panic>
#   elif (OT_FEATURE(SYSKERN_CALLBACKS) == ENABLED)
        sys.panic(err_code);
#   endif
}
 80077c4:	bd10      	pop	{r4, pc}
 80077c6:	46c0      	nop			; (mov r8, r8)
 80077c8:	20002648 	.word	0x20002648

080077cc <sys_powerdown>:
#endif



#ifndef EXTF_sys_powerdown
OT_WEAK void sys_powerdown() {
 80077cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ce:	46ce      	mov	lr, r9
 80077d0:	4647      	mov	r7, r8
 80077d2:	b580      	push	{r7, lr}
    ot_uint code = 3;
    ot_int i;

    ///@todo This call-model is kludgey, but for now it is OK in practice.
    ///      Better to have a second status call for exotasks.
    for (i=0; i<_NUM_EXOTASKS; i++) {
 80077d4:	2400      	movs	r4, #0
    ot_uint code = 3;
 80077d6:	2603      	movs	r6, #3
    for (i=0; i<_NUM_EXOTASKS; i++) {
 80077d8:	2c00      	cmp	r4, #0
 80077da:	dd08      	ble.n	80077ee <sys_powerdown+0x22>
        sys.task[i].event   = task_event;
        sys.task[i].cursor  = task_cursor;
    }

    // Shut down the clocker: a task isn't running during powerdown
    systim_stop_clocker();
 80077dc:	f000 fa6a 	bl	8007cb4 <systim_stop_clocker>

#   if defined(EXTF_sys_sig_powerdown)
        sys_sig_powerdown(code);
 80077e0:	b230      	sxth	r0, r6
 80077e2:	f7f8 ffc1 	bl	8000768 <sys_sig_powerdown>
#   elif (OT_FEATURE(SYSKERN_CALLBACKS))
        sys.powerdown(code);
#   else
#       error "powerdown applet (sys_sig_powerdown) is not available."
#   endif
}
 80077e6:	bc0c      	pop	{r2, r3}
 80077e8:	4690      	mov	r8, r2
 80077ea:	4699      	mov	r9, r3
 80077ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ot_u8 task_event    = sys.task[i].event;
 80077ee:	0027      	movs	r7, r4
 80077f0:	00e3      	lsls	r3, r4, #3
 80077f2:	4d0d      	ldr	r5, [pc, #52]	; (8007828 <sys_powerdown+0x5c>)
 80077f4:	18ed      	adds	r5, r5, r3
 80077f6:	1d28      	adds	r0, r5, #4
 80077f8:	792b      	ldrb	r3, [r5, #4]
 80077fa:	4699      	mov	r9, r3
        ot_u8 task_cursor   = sys.task[i].cursor;
 80077fc:	796b      	ldrb	r3, [r5, #5]
 80077fe:	4698      	mov	r8, r3
        sys.task[i].event   = 255;
 8007800:	23ff      	movs	r3, #255	; 0xff
 8007802:	712b      	strb	r3, [r5, #4]
        TASK_INDEXED_CALL(i);
 8007804:	00a3      	lsls	r3, r4, #2
 8007806:	4a09      	ldr	r2, [pc, #36]	; (800782c <sys_powerdown+0x60>)
 8007808:	589b      	ldr	r3, [r3, r2]
 800780a:	4798      	blx	r3
        if (sys.task[i].cursor < code) {
 800780c:	796b      	ldrb	r3, [r5, #5]
 800780e:	42b3      	cmp	r3, r6
 8007810:	d200      	bcs.n	8007814 <sys_powerdown+0x48>
            code = sys.task[i].cursor;
 8007812:	001e      	movs	r6, r3
        sys.task[i].event   = task_event;
 8007814:	00ff      	lsls	r7, r7, #3
 8007816:	4b04      	ldr	r3, [pc, #16]	; (8007828 <sys_powerdown+0x5c>)
 8007818:	19db      	adds	r3, r3, r7
 800781a:	464a      	mov	r2, r9
 800781c:	711a      	strb	r2, [r3, #4]
        sys.task[i].cursor  = task_cursor;
 800781e:	4642      	mov	r2, r8
 8007820:	715a      	strb	r2, [r3, #5]
    for (i=0; i<_NUM_EXOTASKS; i++) {
 8007822:	3401      	adds	r4, #1
 8007824:	b224      	sxth	r4, r4
 8007826:	e7d7      	b.n	80077d8 <sys_powerdown+0xc>
 8007828:	20002d90 	.word	0x20002d90
 800782c:	0800a67c 	.word	0x0800a67c

08007830 <sys_task_setevent>:




void sys_task_setevent(ot_task task, ot_u8 event) {
    task->event = event;
 8007830:	7001      	strb	r1, [r0, #0]
}
 8007832:	4770      	bx	lr

08007834 <sys_task_setreserve>:
void sys_task_setcursor(ot_task task, ot_u8 cursor) {
    task->cursor = cursor;
}

void sys_task_setreserve(ot_task task, ot_u8 reserve) {
    task->reserve = reserve;
 8007834:	7081      	strb	r1, [r0, #2]
}
 8007836:	4770      	bx	lr

08007838 <sys_task_setlatency>:

void sys_task_setlatency(ot_task task, ot_u8 latency) {
    task->latency = latency;
 8007838:	70c1      	strb	r1, [r0, #3]
}
 800783a:	4770      	bx	lr

0800783c <sys_task_setnext_clocks>:

void sys_task_setnext(ot_task task, ot_u32 nextevent_ti) {
    sys_task_setnext_clocks(task, (ot_long)TI2CLK(nextevent_ti));
}

void sys_task_setnext_clocks(ot_task task, ot_long nextevent_clocks) {
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	0004      	movs	r4, r0
 8007840:	000d      	movs	r5, r1
    task->nextevent = nextevent_clocks + (ot_long)systim_get();
 8007842:	f000 f9a7 	bl	8007b94 <systim_get>
 8007846:	1940      	adds	r0, r0, r5
 8007848:	6060      	str	r0, [r4, #4]
}
 800784a:	bd70      	pop	{r4, r5, r6, pc}

0800784c <sys_task_setnext>:
void sys_task_setnext(ot_task task, ot_u32 nextevent_ti) {
 800784c:	b510      	push	{r4, lr}
    sys_task_setnext_clocks(task, (ot_long)TI2CLK(nextevent_ti));
 800784e:	f7ff fff5 	bl	800783c <sys_task_setnext_clocks>
}
 8007852:	bd10      	pop	{r4, pc}

08007854 <sys_event_manager>:
  * The Event Manager is multiplexed in order to work with dynamic task calls
  * or static task calls.  Some platforms work better with dynamic, and some
  * better with static.
  */
#ifndef EXTF_sys_event_manager
OT_WEAK ot_uint sys_event_manager() {
 8007854:	b570      	push	{r4, r5, r6, lr}
    Task_Index  i;
#   endif

    /// 1. Get the elapsed time since the scheduler last run.  We also update
    ///    the time, which does nothing unless time is enabled.
    elapsed = systim_get();
 8007856:	f000 f99d 	bl	8007b94 <systim_get>
 800785a:	b284      	uxth	r4, r0
 800785c:	0400      	lsls	r0, r0, #16
 800785e:	0c06      	lsrs	r6, r0, #16
    time_add(elapsed); 
 8007860:	0030      	movs	r0, r6
 8007862:	f000 f8c5 	bl	80079f0 <time_add>
    systim_flush();
 8007866:	f000 f9a3 	bl	8007bb0 <systim_flush>
    ///      nearest task (nextevent), which loads into timer on exit </LI>
    /// <LI> If a pending task is selected, loop through higher priority
    ///      tasks than the one selected to find if they need to block the
    ///      invocation of the pending task. </LI>
#   if (OT_FEATURE(M2))
    dll_clock(elapsed);
 800786a:	0020      	movs	r0, r4
 800786c:	f7fd fa94 	bl	8004d98 <dll_clock>

    nextevent   = OT_GPTIM_LIMIT;
    task_i      = &sys.task[TASK_terminus];
    select      = TASK_MAX; //TASK_terminus;
#   if (OT_FEATURE(SYSTASK_CALLBACKS) != ENABLED)
    i           = TASK_terminus;
 8007870:	2105      	movs	r1, #5
    select      = TASK_MAX; //TASK_terminus;
 8007872:	2500      	movs	r5, #0
    task_i      = &sys.task[TASK_terminus];
 8007874:	4a1c      	ldr	r2, [pc, #112]	; (80078e8 <sys_event_manager+0x94>)
    nextevent   = OT_GPTIM_LIMIT;
 8007876:	4c1d      	ldr	r4, [pc, #116]	; (80078ec <sys_event_manager+0x98>)
#   endif

    // Select the highest priority task that is active and pending
    // Note that nextevent is always clocked, allowing task blocking without
    // losing synchronization.
    while (task_i != &sys.task[0]) {
 8007878:	e001      	b.n	800787e <sys_event_manager+0x2a>
            if (task_i->nextevent <= nextevent) {
#               if (OT_PARAM_SYSTHREADS != 0)
                nextnext  = nextevent;
#               endif
                nextevent = task_i->nextevent;
                select    = TASK_SELECT(task_i, i);
 800787a:	000d      	movs	r5, r1
                nextevent = task_i->nextevent;
 800787c:	001c      	movs	r4, r3
    while (task_i != &sys.task[0]) {
 800787e:	4b1c      	ldr	r3, [pc, #112]	; (80078f0 <sys_event_manager+0x9c>)
 8007880:	429a      	cmp	r2, r3
 8007882:	d011      	beq.n	80078a8 <sys_event_manager+0x54>
        TASK_DECREMENT(task_i, i);
 8007884:	3a08      	subs	r2, #8
 8007886:	3901      	subs	r1, #1
 8007888:	b249      	sxtb	r1, r1
        task_i->nextevent -= elapsed;
 800788a:	6853      	ldr	r3, [r2, #4]
 800788c:	1b9b      	subs	r3, r3, r6
 800788e:	6053      	str	r3, [r2, #4]
        if (task_i->event != 0) {
 8007890:	7810      	ldrb	r0, [r2, #0]
 8007892:	2800      	cmp	r0, #0
 8007894:	d0f3      	beq.n	800787e <sys_event_manager+0x2a>
            if (task_i->nextevent <= nextevent) {
 8007896:	42a3      	cmp	r3, r4
 8007898:	ddef      	ble.n	800787a <sys_event_manager+0x26>
            }
            // Sometime nextevent can be negative, due to a long-waiting task.
            // higher priority tasks will always take precedent.
            else if (task_i->nextevent <= 0) {
 800789a:	2b00      	cmp	r3, #0
 800789c:	dcef      	bgt.n	800787e <sys_event_manager+0x2a>
                select = TASK_SELECT(task_i, i);
 800789e:	000d      	movs	r5, r1
 80078a0:	e7ed      	b.n	800787e <sys_event_manager+0x2a>
                nextevent   = task_i->nextevent;
                select      = TASK_SELECT(task_i, i);
                break;
            }
        }
        TASK_INCREMENT(task_i, i);
 80078a2:	3208      	adds	r2, #8
 80078a4:	3101      	adds	r1, #1
 80078a6:	b249      	sxtb	r1, r1
    while (task_i < TASK(select)) {
 80078a8:	0028      	movs	r0, r5
 80078aa:	00eb      	lsls	r3, r5, #3
 80078ac:	4e11      	ldr	r6, [pc, #68]	; (80078f4 <sys_event_manager+0xa0>)
 80078ae:	199b      	adds	r3, r3, r6
 80078b0:	3304      	adds	r3, #4
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d90e      	bls.n	80078d4 <sys_event_manager+0x80>
        if (task_i->event != 0) {
 80078b6:	7813      	ldrb	r3, [r2, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0f2      	beq.n	80078a2 <sys_event_manager+0x4e>
            if ((task_i->latency < TASK(select)->reserve) || \
 80078bc:	78d6      	ldrb	r6, [r2, #3]
 80078be:	00c0      	lsls	r0, r0, #3
 80078c0:	4b0c      	ldr	r3, [pc, #48]	; (80078f4 <sys_event_manager+0xa0>)
 80078c2:	1818      	adds	r0, r3, r0
 80078c4:	7983      	ldrb	r3, [r0, #6]
 80078c6:	429e      	cmp	r6, r3
 80078c8:	d302      	bcc.n	80078d0 <sys_event_manager+0x7c>
 80078ca:	6850      	ldr	r0, [r2, #4]
 80078cc:	4298      	cmp	r0, r3
 80078ce:	dae8      	bge.n	80078a2 <sys_event_manager+0x4e>
                nextevent   = task_i->nextevent;
 80078d0:	6854      	ldr	r4, [r2, #4]
                select      = TASK_SELECT(task_i, i);
 80078d2:	000d      	movs	r5, r1
    }

    /// 3. Set the active task callback to the selected
    sys.active = select;
 80078d4:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <sys_event_manager+0xa0>)
 80078d6:	701d      	strb	r5, [r3, #0]

    /// 4. The event manager is done here.  systim_schedule() will
    ///    make sure that the task hasn't been pended during the scheduler
    ///    runtime.
    return systim_schedule(nextevent, systim_get());
 80078d8:	f000 f95c 	bl	8007b94 <systim_get>
 80078dc:	0001      	movs	r1, r0
 80078de:	0020      	movs	r0, r4
 80078e0:	f000 f96e 	bl	8007bc0 <systim_schedule>
//
//        }
//        platform_set_ktim(interval);
//        return retval;
//    }
}
 80078e4:	bd70      	pop	{r4, r5, r6, pc}
 80078e6:	46c0      	nop			; (mov r8, r8)
 80078e8:	20002dbc 	.word	0x20002dbc
 80078ec:	00001efc 	.word	0x00001efc
 80078f0:	20002d94 	.word	0x20002d94
 80078f4:	20002d90 	.word	0x20002d90

080078f8 <sys_run_task>:
#endif



#ifndef EXTF_sys_run_task
OT_INLINE void sys_run_task() {
 80078f8:	b510      	push	{r4, lr}
    }
#   endif

    ///@todo integrate any necessary systim suppression into the
    ///      task clocker feature
    systim_disable();
 80078fa:	f000 f957 	bl	8007bac <systim_disable>
    systim_start_clocker();
 80078fe:	f000 f9d1 	bl	8007ca4 <systim_start_clocker>
    
    sys_run_task_CALL:
    if (TASK(sys.active)->event != 0) {
 8007902:	4b08      	ldr	r3, [pc, #32]	; (8007924 <sys_run_task+0x2c>)
 8007904:	2000      	movs	r0, #0
 8007906:	5618      	ldrsb	r0, [r3, r0]
 8007908:	00c2      	lsls	r2, r0, #3
 800790a:	189b      	adds	r3, r3, r2
 800790c:	791b      	ldrb	r3, [r3, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d007      	beq.n	8007922 <sys_run_task+0x2a>
        TASK_CALL(sys.active);
 8007912:	0082      	lsls	r2, r0, #2
 8007914:	4b04      	ldr	r3, [pc, #16]	; (8007928 <sys_run_task+0x30>)
 8007916:	58d3      	ldr	r3, [r2, r3]
 8007918:	00c0      	lsls	r0, r0, #3
 800791a:	4a02      	ldr	r2, [pc, #8]	; (8007924 <sys_run_task+0x2c>)
 800791c:	1880      	adds	r0, r0, r2
 800791e:	3004      	adds	r0, #4
 8007920:	4798      	blx	r3
    }
}
 8007922:	bd10      	pop	{r4, pc}
 8007924:	20002d90 	.word	0x20002d90
 8007928:	0800a67c 	.word	0x0800a67c

0800792c <sys_preempt>:





OT_WEAK void sys_preempt(ot_task task, ot_uint nextevent_ti) {
 800792c:	b510      	push	{r4, lr}
/// Pre-empting will "pend" the timer.  In device terms, this is implemented
/// by manually setting the timer interrupt flag.  If a task is running while
/// this function is called (typical usage), first the task will finish and then
/// the scheduler will run anyway.
    sys_task_setnext(task, (ot_u32)nextevent_ti);
 800792e:	f7ff ff8d 	bl	800784c <sys_task_setnext>
    platform_ot_preempt();
 8007932:	f000 fc8d 	bl	8008250 <platform_ot_preempt>
}
 8007936:	bd10      	pop	{r4, pc}

08007938 <time_load_now>:
/** Driver functions
  * The following functions are sometimes implemented in the platform driver.
  * They do the low-level work for the system time module.
  */
#ifndef EXTF_time_load_now
OT_WEAK void time_load_now(ot_time* now) {
 8007938:	b510      	push	{r4, lr}
 800793a:	0004      	movs	r4, r0
    ot_u32 clocks;
    ot_u32 scratch;
    *now        = time_sys;
 800793c:	4b08      	ldr	r3, [pc, #32]	; (8007960 <time_load_now+0x28>)
 800793e:	0002      	movs	r2, r0
 8007940:	cb03      	ldmia	r3!, {r0, r1}
 8007942:	c203      	stmia	r2!, {r0, r1}
    clocks      = systim_get();
 8007944:	f000 f926 	bl	8007b94 <systim_get>
    scratch     = clocks + now->clocks;
 8007948:	6863      	ldr	r3, [r4, #4]
 800794a:	181b      	adds	r3, r3, r0
    now->upper += (scratch < clocks);       ///@note changed this
 800794c:	4283      	cmp	r3, r0
 800794e:	4180      	sbcs	r0, r0
 8007950:	4240      	negs	r0, r0
 8007952:	6822      	ldr	r2, [r4, #0]
 8007954:	4694      	mov	ip, r2
 8007956:	4460      	add	r0, ip
 8007958:	6020      	str	r0, [r4, #0]
    now->clocks = scratch;
 800795a:	6063      	str	r3, [r4, #4]
}
 800795c:	bd10      	pop	{r4, pc}
 800795e:	46c0      	nop			; (mov r8, r8)
 8007960:	20002dbc 	.word	0x20002dbc

08007964 <time_set>:
}
#endif


#ifndef EXTF_time_set
OT_WEAK void time_set(ot_time set_time) {
 8007964:	b530      	push	{r4, r5, lr}
 8007966:	b085      	sub	sp, #20
 8007968:	466c      	mov	r4, sp
 800796a:	9000      	str	r0, [sp, #0]
 800796c:	6061      	str	r1, [r4, #4]
    ot_time delta;
    time_load_now(&delta);
 800796e:	a802      	add	r0, sp, #8
 8007970:	f7ff ffe2 	bl	8007938 <time_load_now>
    
    /// 1. Set time_sys to new value.
    time_sys = set_time;
 8007974:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <time_set+0x4c>)
 8007976:	001a      	movs	r2, r3
 8007978:	0021      	movs	r1, r4
 800797a:	c921      	ldmia	r1!, {r0, r5}
 800797c:	c221      	stmia	r2!, {r0, r5}
    
    /// 2. determine delta between previous time and new time
    delta.upper     = (time_sys.upper - delta.upper) + (time_sys.clocks < delta.clocks);
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	9a02      	ldr	r2, [sp, #8]
 8007982:	1a9b      	subs	r3, r3, r2
 8007984:	6862      	ldr	r2, [r4, #4]
 8007986:	9803      	ldr	r0, [sp, #12]
 8007988:	4282      	cmp	r2, r0
 800798a:	4189      	sbcs	r1, r1
 800798c:	4249      	negs	r1, r1
 800798e:	1859      	adds	r1, r3, r1
    delta.clocks    = (time_sys.clocks - delta.clocks);
 8007990:	1a12      	subs	r2, r2, r0
    
    /// 3. Apply Delta to time_start
    ///    This is necessary to maintain relative uptime figure
    time_start.clocks   += delta.clocks;
 8007992:	4808      	ldr	r0, [pc, #32]	; (80079b4 <time_set+0x50>)
 8007994:	6843      	ldr	r3, [r0, #4]
 8007996:	18d3      	adds	r3, r2, r3
 8007998:	6043      	str	r3, [r0, #4]
    time_start.upper    += delta.upper + (time_start.clocks < delta.clocks);
 800799a:	4293      	cmp	r3, r2
 800799c:	419b      	sbcs	r3, r3
 800799e:	425b      	negs	r3, r3
 80079a0:	18cb      	adds	r3, r1, r3
 80079a2:	6802      	ldr	r2, [r0, #0]
 80079a4:	4694      	mov	ip, r2
 80079a6:	4463      	add	r3, ip
 80079a8:	6003      	str	r3, [r0, #0]
}
 80079aa:	b005      	add	sp, #20
 80079ac:	bd30      	pop	{r4, r5, pc}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	20002dbc 	.word	0x20002dbc
 80079b4:	20002dc4 	.word	0x20002dc4

080079b8 <time_set_utcprecise>:
#endif



#ifndef EXTF_time_set_utcprecise
OT_WEAK void time_set_utcprecise(ot_u32 utc, ot_u32 subseconds) {
 80079b8:	b500      	push	{lr}
 80079ba:	b083      	sub	sp, #12
 80079bc:	0003      	movs	r3, r0
	ot_time set_time;
    set_time.upper   = (utc >> _UPPER_SHIFT);
 80079be:	0d80      	lsrs	r0, r0, #22
    set_time.clocks  = (utc << _LOWER_SHIFT);
 80079c0:	029b      	lsls	r3, r3, #10
    set_time.clocks |= subseconds;
 80079c2:	4319      	orrs	r1, r3
    
    time_set(set_time);
 80079c4:	f7ff ffce 	bl	8007964 <time_set>
}
 80079c8:	b003      	add	sp, #12
 80079ca:	bd00      	pop	{pc}

080079cc <time_set_utc>:
#endif


#ifndef EXTF_time_set_utc
OT_WEAK void time_set_utc(ot_u32 utc) {
 80079cc:	b510      	push	{r4, lr}
    time_set_utcprecise(utc, 0);
 80079ce:	2100      	movs	r1, #0
 80079d0:	f7ff fff2 	bl	80079b8 <time_set_utcprecise>
}
 80079d4:	bd10      	pop	{r4, pc}

080079d6 <time_get_utc>:
    *get_time = time_sys;
}
#endif

#ifndef EXTF_time_get_utc
OT_WEAK ot_u32 time_get_utc(void) {
 80079d6:	b500      	push	{lr}
 80079d8:	b083      	sub	sp, #12
    ot_time now;
    time_load_now(&now);
 80079da:	4668      	mov	r0, sp
 80079dc:	f7ff ffac 	bl	8007938 <time_load_now>
    now.upper  <<= _UPPER_SHIFT;
 80079e0:	9b00      	ldr	r3, [sp, #0]
 80079e2:	0598      	lsls	r0, r3, #22
    now.clocks >>= _LOWER_SHIFT;
 80079e4:	9b01      	ldr	r3, [sp, #4]
 80079e6:	0a9b      	lsrs	r3, r3, #10
    return (now.upper | now.clocks);
 80079e8:	4318      	orrs	r0, r3
}
 80079ea:	b003      	add	sp, #12
 80079ec:	bd00      	pop	{pc}
	...

080079f0 <time_add>:


#ifndef EXTF_time_add
OT_WEAK void time_add(ot_u32 clocks) {
    ot_u32 scratch;
    scratch         = clocks + time_sys.clocks;
 80079f0:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <time_add+0x18>)
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	1812      	adds	r2, r2, r0
    time_sys.upper  += (scratch < clocks);
 80079f6:	4282      	cmp	r2, r0
 80079f8:	4180      	sbcs	r0, r0
 80079fa:	4240      	negs	r0, r0
 80079fc:	6819      	ldr	r1, [r3, #0]
 80079fe:	468c      	mov	ip, r1
 8007a00:	4460      	add	r0, ip
 8007a02:	6018      	str	r0, [r3, #0]
    time_sys.clocks  = scratch;
 8007a04:	605a      	str	r2, [r3, #4]
}
 8007a06:	4770      	bx	lr
 8007a08:	20002dbc 	.word	0x20002dbc

08007a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8007a0c:	480b      	ldr	r0, [pc, #44]	; (8007a3c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8007a0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8007a10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007a12:	e003      	b.n	8007a1c <LoopCopyDataInit>

08007a14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007a14:	4b0a      	ldr	r3, [pc, #40]	; (8007a40 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8007a16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007a18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007a1a:	3104      	adds	r1, #4

08007a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8007a1c:	4809      	ldr	r0, [pc, #36]	; (8007a44 <LoopForever+0xa>)
  ldr  r3, =_edata
 8007a1e:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <LoopForever+0xe>)
  adds  r2, r0, r1
 8007a20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007a22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007a24:	d3f6      	bcc.n	8007a14 <CopyDataInit>
  ldr  r2, =_sbss
 8007a26:	4a09      	ldr	r2, [pc, #36]	; (8007a4c <LoopForever+0x12>)
  b  LoopFillZerobss
 8007a28:	e002      	b.n	8007a30 <LoopFillZerobss>

08007a2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8007a2a:	2300      	movs	r3, #0
  str  r3, [r2]
 8007a2c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007a2e:	3204      	adds	r2, #4

08007a30 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <LoopForever+0x16>)
  cmp  r2, r3
 8007a32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007a34:	d3f9      	bcc.n	8007a2a <FillZerobss>
/* Call the clock system intitialization function.
  bl  SystemInit*/
/* Call static constructors 
    bl __libc_init_array*/
/* Call the application's entry point.*/
  bl  main
 8007a36:	f7f8 fe4f 	bl	80006d8 <main>

08007a3a <LoopForever>:

LoopForever:
    b LoopForever
 8007a3a:	e7fe      	b.n	8007a3a <LoopForever>
   ldr   r0, =_estack
 8007a3c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8007a40:	0800a7ec 	.word	0x0800a7ec
  ldr  r0, =_sdata
 8007a44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007a48:	200001ac 	.word	0x200001ac
  ldr  r2, =_sbss
 8007a4c:	200001ac 	.word	0x200001ac
  ldr  r3, = _ebss
 8007a50:	200031ec 	.word	0x200031ec

08007a54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a54:	e7fe      	b.n	8007a54 <ADC1_COMP_IRQHandler>
	...

08007a58 <NMI_Handler>:
}



/// The NMI is triggerable by software.  It is used to manage runtime errors.
void NMI_Handler(void) {
 8007a58:	b510      	push	{r4, lr}
    ot_int code;

#   ifdef __DEBUG__
    if (platform.error_code == 0)
 8007a5a:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <NMI_Handler+0x1c>)
 8007a5c:	2002      	movs	r0, #2
 8007a5e:	5e18      	ldrsh	r0, [r3, r0]
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d100      	bne.n	8007a66 <NMI_Handler+0xe>
 8007a64:	e7fe      	b.n	8007a64 <NMI_Handler+0xc>
        while(1);
#   endif

    code                = platform.error_code;
    platform.error_code = 0;
 8007a66:	4b03      	ldr	r3, [pc, #12]	; (8007a74 <NMI_Handler+0x1c>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	805a      	strh	r2, [r3, #2]
    sys_panic(code);
 8007a6c:	b2c0      	uxtb	r0, r0
 8007a6e:	f7ff fe9b 	bl	80077a8 <sys_panic>
}
 8007a72:	bd10      	pop	{r4, pc}
 8007a74:	20002dd0 	.word	0x20002dd0

08007a78 <HardFault_Handler>:


void HardFault_Handler(void) {
 8007a78:	b570      	push	{r4, r5, r6, lr}
	static inline void BOARD_led1_on(void)      { OT_TRIG1_ON(); }
 8007a7a:	24a0      	movs	r4, #160	; 0xa0
 8007a7c:	05e4      	lsls	r4, r4, #23
 8007a7e:	2680      	movs	r6, #128	; 0x80
 8007a80:	00b6      	lsls	r6, r6, #2
 8007a82:	62a6      	str	r6, [r4, #40]	; 0x28
	static inline void BOARD_led2_off(void)     { OT_TRIG2_OFF(); }
 8007a84:	2580      	movs	r5, #128	; 0x80
 8007a86:	00ed      	lsls	r5, r5, #3
 8007a88:	61a5      	str	r5, [r4, #24]
/// other serious problem (possibly interrupt storm)
#if defined(__DEBUG__) || defined(__PROTO__)
    while (1) {
        BOARD_led1_on();
        BOARD_led2_off();
        delay_ti(100);
 8007a8a:	2064      	movs	r0, #100	; 0x64
 8007a8c:	f000 fd0e 	bl	80084ac <delay_ti>
	static inline void BOARD_led1_off(void)     { OT_TRIG1_OFF(); }
 8007a90:	61a6      	str	r6, [r4, #24]
	static inline void BOARD_led2_on(void)      { OT_TRIG2_ON(); }
 8007a92:	62a5      	str	r5, [r4, #40]	; 0x28
        BOARD_led1_off();
        BOARD_led2_on();
        delay_ti(100);
 8007a94:	2064      	movs	r0, #100	; 0x64
 8007a96:	f000 fd09 	bl	80084ac <delay_ti>
 8007a9a:	e7ee      	b.n	8007a7a <HardFault_Handler+0x2>

08007a9c <__read_lptim_cnt>:
  *        STM320 reference manual recommends reading the CNT in a loop until
  *        two successive reads match.  That is the purpose of this function.
  */
ot_u16 __read_lptim_cnt() {
    ot_u16 a, b;
    b = LPTIM1->CNT;
 8007a9c:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <__read_lptim_cnt+0x18>)
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	e000      	b.n	8007aa6 <__read_lptim_cnt+0xa>
    do {
        a = b;
        b = LPTIM1->CNT;
 8007aa4:	0003      	movs	r3, r0
 8007aa6:	4a03      	ldr	r2, [pc, #12]	; (8007ab4 <__read_lptim_cnt+0x18>)
 8007aa8:	69d0      	ldr	r0, [r2, #28]
 8007aaa:	b280      	uxth	r0, r0
    } while (b != a);
 8007aac:	4283      	cmp	r3, r0
 8007aae:	d1f9      	bne.n	8007aa4 <__read_lptim_cnt+0x8>

    return b;
}
 8007ab0:	4770      	bx	lr
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	40007c00 	.word	0x40007c00

08007ab8 <__write_lptim_cmp>:

void __write_lptim_cmp(ot_u16 new_cmp) {
// Clear the CMPOK bit ahead of setting CMP
// Set the CMP to the new value
// Assure that CMP was successfully written 
    LPTIM1->ICR = LPTIM_ICR_CMPOKCF;
 8007ab8:	4b04      	ldr	r3, [pc, #16]	; (8007acc <__write_lptim_cmp+0x14>)
 8007aba:	2208      	movs	r2, #8
 8007abc:	605a      	str	r2, [r3, #4]
    LPTIM1->CMP = new_cmp;
 8007abe:	6158      	str	r0, [r3, #20]
    while ((LPTIM1->ISR & LPTIM_ISR_CMPOK) == 0) {
 8007ac0:	4b02      	ldr	r3, [pc, #8]	; (8007acc <__write_lptim_cmp+0x14>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	071b      	lsls	r3, r3, #28
 8007ac6:	d5fb      	bpl.n	8007ac0 <__write_lptim_cmp+0x8>
        //test_cmp++;
    }
}
 8007ac8:	4770      	bx	lr
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	40007c00 	.word	0x40007c00

08007ad0 <__write_lptim_arr>:


void __write_lptim_arr(ot_u16 new_arr) {
    LPTIM1->ICR = LPTIM_ICR_ARROKCF;
 8007ad0:	4b04      	ldr	r3, [pc, #16]	; (8007ae4 <__write_lptim_arr+0x14>)
 8007ad2:	2210      	movs	r2, #16
 8007ad4:	605a      	str	r2, [r3, #4]
    LPTIM1->ARR = new_arr;
 8007ad6:	6198      	str	r0, [r3, #24]
    while ((LPTIM1->ISR & LPTIM_ISR_ARROK) == 0);
 8007ad8:	4b02      	ldr	r3, [pc, #8]	; (8007ae4 <__write_lptim_arr+0x14>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	06db      	lsls	r3, r3, #27
 8007ade:	d5fb      	bpl.n	8007ad8 <__write_lptim_arr+0x8>
}
 8007ae0:	4770      	bx	lr
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	40007c00 	.word	0x40007c00

08007ae8 <platform_isr_lptim1>:
    
    //volatile ot_u16 test;
    //test = __read_lptim_cnt();
    
    // Clear interrupt flags
    lptim_flags = LPTIM1->ISR;
 8007ae8:	4905      	ldr	r1, [pc, #20]	; (8007b00 <platform_isr_lptim1+0x18>)
 8007aea:	680a      	ldr	r2, [r1, #0]
 8007aec:	23ff      	movs	r3, #255	; 0xff
 8007aee:	4013      	ands	r3, r2
    LPTIM1->ICR = lptim_flags;
 8007af0:	604b      	str	r3, [r1, #4]

    // Kernel Timer Compare Interrupt: clear the sleep flag that prevents the
    // scheduler from running
    if (lptim_flags & LPTIM_ISR_CMPM) {
 8007af2:	07d3      	lsls	r3, r2, #31
 8007af4:	d502      	bpl.n	8007afc <platform_isr_lptim1+0x14>
        systim.flags = 0;
 8007af6:	4b03      	ldr	r3, [pc, #12]	; (8007b04 <platform_isr_lptim1+0x1c>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	701a      	strb	r2, [r3, #0]
    }
    
    //test = 0;
}
 8007afc:	4770      	bx	lr
 8007afe:	46c0      	nop			; (mov r8, r8)
 8007b00:	40007c00 	.word	0x40007c00
 8007b04:	20002dcc 	.word	0x20002dcc

08007b08 <platform_isr_rtcwakeup>:

/// Used for Insertor & Ticker:
/// - The ticker doesn't do a damn thing except wakeup from sleep 
/// - The Insertor manually vectors to radio_mac_isr(), although this should be
///   changed in the future to a dynamic callback.
void platform_isr_rtcwakeup() { 
 8007b08:	b510      	push	{r4, lr}
#if (RF_FEATURE(CSMATIMER) != ENABLED)
    //if (systim.opt & SYSTIM_INSERTION_ON) {
        //systim.opt ^= SYSTIM_INSERTION_ON;
        //RTC->ISR    = ~RTC_ISR_WUTF;
        //RTC->CR    &= ~RTC_CR_WUTE;
        radio_mac_isr();
 8007b0a:	f7f9 ffdf 	bl	8001acc <radio_mac_isr>
    //}
#endif
#endif
}
 8007b0e:	bd10      	pop	{r4, pc}

08007b10 <systim_init>:




#ifndef EXTF_systim_init
void systim_init(void* tim_init) {
 8007b10:	b570      	push	{r4, r5, r6, lr}
    ///    MAC Timer.  We must:
    ///    <LI> Unlock RTC as a whole </LI>
    ///    <LI> put into INIT mode </LI>
    ///    <LI> Use a prescaler to match the clock used.  For LSE, this is 1.
    ///         (set to 0).  For LSI, this is...
    RTC->WPR    = 0xCA;
 8007b12:	4b1a      	ldr	r3, [pc, #104]	; (8007b7c <systim_init+0x6c>)
 8007b14:	22ca      	movs	r2, #202	; 0xca
 8007b16:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR    = 0x53;
 8007b18:	3a77      	subs	r2, #119	; 0x77
 8007b1a:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->CR     = 0;    //(1<<5);
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	609a      	str	r2, [r3, #8]
    RTC->ISR    = 0xFFFFFFFF;
 8007b20:	3a01      	subs	r2, #1
 8007b22:	60da      	str	r2, [r3, #12]
    while ((RTC->ISR & RTC_ISR_INITF) == 0);
 8007b24:	4b15      	ldr	r3, [pc, #84]	; (8007b7c <systim_init+0x6c>)
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	065b      	lsls	r3, r3, #25
 8007b2a:	d5fb      	bpl.n	8007b24 <systim_init+0x14>
    RTC->TR     = 0;
 8007b2c:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <systim_init+0x6c>)
 8007b2e:	2400      	movs	r4, #0
 8007b30:	601c      	str	r4, [r3, #0]
        RTC->PRER               = (127 << 16) | lsi_hz >> 7;
    }
#   endif

    // Clear any ISRs
    RTC->ISR = 0;
 8007b32:	60dc      	str	r4, [r3, #12]

    /// 2. Set LPTIM1 to use LSE/32 (or LSI/32)
    
    // IER and CFGR must be set with LPTIM disabled
    LPTIM1->CR      = 0;            // disable timer
 8007b34:	4d12      	ldr	r5, [pc, #72]	; (8007b80 <systim_init+0x70>)
 8007b36:	612c      	str	r4, [r5, #16]
    LPTIM1->IER     = LPTIM_IER_CMPMIE;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	60ab      	str	r3, [r5, #8]
    LPTIM1->CFGR    = ((5-MCU_PRESCALER_SHIFT) << 9);    // generally div32, 16, 8
 8007b3c:	2280      	movs	r2, #128	; 0x80
 8007b3e:	00d2      	lsls	r2, r2, #3
 8007b40:	60ea      	str	r2, [r5, #12]
    
    // ARR and CMP must be set with LPTIM enabled
    LPTIM1->CR      = LPTIM_CR_ENABLE;
 8007b42:	612b      	str	r3, [r5, #16]
    __write_lptim_arr(65535);
 8007b44:	4e0f      	ldr	r6, [pc, #60]	; (8007b84 <systim_init+0x74>)
 8007b46:	0030      	movs	r0, r6
 8007b48:	f7ff ffc2 	bl	8007ad0 <__write_lptim_arr>
    __write_lptim_cmp(65535);
 8007b4c:	0030      	movs	r0, r6
 8007b4e:	f7ff ffb3 	bl	8007ab8 <__write_lptim_cmp>
    LPTIM1->ICR     = 0x7F;         // clear all interrupt flags
 8007b52:	237f      	movs	r3, #127	; 0x7f
 8007b54:	606b      	str	r3, [r5, #4]
    
    // Start Timer
    LPTIM1->CR      = LPTIM_CR_CNTSTRT | LPTIM_CR_ENABLE;
 8007b56:	3b7a      	subs	r3, #122	; 0x7a
 8007b58:	612b      	str	r3, [r5, #16]
    

    /// 3. Clear flags and stamps
    systim.flags    = 0;
 8007b5a:	4b0b      	ldr	r3, [pc, #44]	; (8007b88 <systim_init+0x78>)
 8007b5c:	701c      	strb	r4, [r3, #0]
    systim.stamp1   = 0;
 8007b5e:	805c      	strh	r4, [r3, #2]
    
    
    /// 4. Clocker initialization.  OpenTag doesn't really care about Clocker
    ///    so we also need a way to configure if it should be enabled or not.
    RCC->APB1ENR   |= (RCC_APB1ENR_TIM6EN); 
 8007b60:	490a      	ldr	r1, [pc, #40]	; (8007b8c <systim_init+0x7c>)
 8007b62:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8007b64:	2210      	movs	r2, #16
 8007b66:	4313      	orrs	r3, r2
 8007b68:	638b      	str	r3, [r1, #56]	; 0x38
    TIM6->CR1       = 0;
 8007b6a:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <systim_init+0x80>)
 8007b6c:	601c      	str	r4, [r3, #0]
    TIM6->CR2       = (b001 << 4);
 8007b6e:	605a      	str	r2, [r3, #4]
    TIM6->DIER      = 0;
 8007b70:	60dc      	str	r4, [r3, #12]
    TIM6->ARR       = 65535;
 8007b72:	62de      	str	r6, [r3, #44]	; 0x2c
    TIM6->PSC       = ((PLATFORM_HSCLOCK_HZ / BOARD_PARAM_APB1CLKDIV) / 32768);
 8007b74:	32d9      	adds	r2, #217	; 0xd9
 8007b76:	32ff      	adds	r2, #255	; 0xff
 8007b78:	629a      	str	r2, [r3, #40]	; 0x28
    //TIM6->EGR   = TIM_EGR_UG;
}
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	40002800 	.word	0x40002800
 8007b80:	40007c00 	.word	0x40007c00
 8007b84:	0000ffff 	.word	0x0000ffff
 8007b88:	20002dcc 	.word	0x20002dcc
 8007b8c:	40021000 	.word	0x40021000
 8007b90:	40001000 	.word	0x40001000

08007b94 <systim_get>:





ot_u32 systim_get() {
 8007b94:	b510      	push	{r4, lr}
    ot_u16 timer_cnt;
    timer_cnt   = __read_lptim_cnt();
 8007b96:	f7ff ff81 	bl	8007a9c <__read_lptim_cnt>
    timer_cnt  -= (ot_u16)systim.stamp1;
 8007b9a:	4b03      	ldr	r3, [pc, #12]	; (8007ba8 <systim_get+0x14>)
 8007b9c:	885b      	ldrh	r3, [r3, #2]
 8007b9e:	1ac0      	subs	r0, r0, r3
 8007ba0:	b280      	uxth	r0, r0
    return (ot_u32)(timer_cnt >> OT_GPTIM_OVERSAMPLE);
 8007ba2:	08c0      	lsrs	r0, r0, #3
}
 8007ba4:	bd10      	pop	{r4, pc}
 8007ba6:	46c0      	nop			; (mov r8, r8)
 8007ba8:	20002dcc 	.word	0x20002dcc

08007bac <systim_disable>:
}

void systim_disable() {
/// systim_enable and systim_disable are empty on STM32L0
    //LPTIM1->IER = 0;
}
 8007bac:	4770      	bx	lr
	...

08007bb0 <systim_flush>:
    systim.stamp1 = __read_lptim_cnt();
    __write_lptim_cmp(systim.stamp1);
    EXTI->SWIER = (1<<29);
}

void systim_flush() {
 8007bb0:	b510      	push	{r4, lr}
    //systim_disable();
    systim.stamp1 = __read_lptim_cnt();
 8007bb2:	f7ff ff73 	bl	8007a9c <__read_lptim_cnt>
 8007bb6:	4b01      	ldr	r3, [pc, #4]	; (8007bbc <systim_flush+0xc>)
 8007bb8:	8058      	strh	r0, [r3, #2]
}
 8007bba:	bd10      	pop	{r4, pc}
 8007bbc:	20002dcc 	.word	0x20002dcc

08007bc0 <systim_schedule>:

ot_u16 systim_schedule(ot_u32 nextevent, ot_u32 overhead) {
 8007bc0:	b570      	push	{r4, r5, r6, lr}
/// This should only be called from the scheduler.

    /// Subtracting the overhead of the scheduler runtime yields the true time
    /// to schedule the nextevent.
    nextevent = (ot_long)nextevent - (ot_long)overhead;
 8007bc2:	1a44      	subs	r4, r0, r1
    
    /// If the task to be scheduled is already due return 0.
    /// This will ignore the sleep process and go straight to the task.
    if ((ot_long)nextevent <= 0) {
 8007bc4:	2c00      	cmp	r4, #0
 8007bc6:	dd0f      	ble.n	8007be8 <systim_schedule+0x28>
    
    /// Program the scheduled time into the timer, in ticks.
    /// Oversampling is done at the driver level, versus shifting which is done
    /// at the kernel level.  Oversampling can help timers without synchronized 
    /// updates whereas shifting can improve scheduling precision.
    systim.flags    = GPTIM_FLAG_SLEEP;
 8007bc8:	4e0a      	ldr	r6, [pc, #40]	; (8007bf4 <systim_schedule+0x34>)
 8007bca:	2301      	movs	r3, #1
 8007bcc:	7033      	strb	r3, [r6, #0]
    LPTIM1->ICR     = 0x7f;     //LPTIM_ICR_CMPMCF;                 // Clear compare match
 8007bce:	4d0a      	ldr	r5, [pc, #40]	; (8007bf8 <systim_schedule+0x38>)
 8007bd0:	337e      	adds	r3, #126	; 0x7e
 8007bd2:	606b      	str	r3, [r5, #4]
    systim.stamp1   = __read_lptim_cnt();
 8007bd4:	f7ff ff62 	bl	8007a9c <__read_lptim_cnt>
 8007bd8:	0003      	movs	r3, r0
 8007bda:	8070      	strh	r0, [r6, #2]
    
    LPTIM1->CMP     = _LPTIM_OVERHEAD_HACK + systim.stamp1 + (ot_u16)(nextevent << OT_GPTIM_OVERSAMPLE);
 8007bdc:	b2a0      	uxth	r0, r4
 8007bde:	00c2      	lsls	r2, r0, #3
 8007be0:	b292      	uxth	r2, r2
 8007be2:	189b      	adds	r3, r3, r2
 8007be4:	616b      	str	r3, [r5, #20]
    //__write_lptim_cmp(_LPTIM_OVERHEAD_HACK + systim.stamp1 + (ot_u16)(nextevent << OT_GPTIM_OVERSAMPLE) );

    return (ot_u16)nextevent;
}
 8007be6:	bd70      	pop	{r4, r5, r6, pc}
        systim.flags = 0;
 8007be8:	4b02      	ldr	r3, [pc, #8]	; (8007bf4 <systim_schedule+0x34>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	701a      	strb	r2, [r3, #0]
        return 0;
 8007bee:	2000      	movs	r0, #0
 8007bf0:	e7f9      	b.n	8007be6 <systim_schedule+0x26>
 8007bf2:	46c0      	nop			; (mov r8, r8)
 8007bf4:	20002dcc 	.word	0x20002dcc
 8007bf8:	40007c00 	.word	0x40007c00

08007bfc <sub_disable_wkuptim>:
/// <LI> Wakeup Timer interrupt is always enabled (see systim_init()) </LI>
/// <LI> Make sure Wakeup Timer is off </LI>
/// <LI> Make sure RTC is off (if required, sometimes it is always on) </LI>
    ot_u32 scratch;
    
    scratch = RTC->CR;
 8007bfc:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <sub_disable_wkuptim+0x14>)
 8007bfe:	689b      	ldr	r3, [r3, #8]
    if (scratch & RTC_CR_WUTE) {
 8007c00:	055a      	lsls	r2, r3, #21
 8007c02:	d503      	bpl.n	8007c0c <sub_disable_wkuptim+0x10>
        RTC->CR = scratch & ~(RTC_CR_WUTE|RTC_CR_WUTIE);
 8007c04:	4a03      	ldr	r2, [pc, #12]	; (8007c14 <sub_disable_wkuptim+0x18>)
 8007c06:	4013      	ands	r3, r2
 8007c08:	4a01      	ldr	r2, [pc, #4]	; (8007c10 <sub_disable_wkuptim+0x14>)
 8007c0a:	6093      	str	r3, [r2, #8]
    }
}
 8007c0c:	4770      	bx	lr
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	40002800 	.word	0x40002800
 8007c14:	ffffbbff 	.word	0xffffbbff

08007c18 <sub_set_wkuptim>:
void sub_set_wkuptim(ot_uint period) {
    ot_u32 rtc_cr;
    ot_uint wdog;

    // Ensure Wakeup Timer is off
    rtc_cr  = RTC->CR;
 8007c18:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <sub_set_wkuptim+0x2c>)
 8007c1a:	6899      	ldr	r1, [r3, #8]
    RTC->CR = rtc_cr & ~RTC_CR_WUTE;
 8007c1c:	4a0a      	ldr	r2, [pc, #40]	; (8007c48 <sub_set_wkuptim+0x30>)
 8007c1e:	400a      	ands	r2, r1
 8007c20:	609a      	str	r2, [r3, #8]

    // Poll WUTWF until it is set, afterwhich WUTR can be set
    // SW watchdog assumes 10 clocks per loop, to yield ~80us at 32MHz
    wdog = 256; // ~70 us at 32 MHz 
 8007c22:	2380      	movs	r3, #128	; 0x80
 8007c24:	005b      	lsls	r3, r3, #1
    while ((RTC->ISR & RTC_ISR_WUTWF) == 0) {
 8007c26:	4a07      	ldr	r2, [pc, #28]	; (8007c44 <sub_set_wkuptim+0x2c>)
 8007c28:	68d2      	ldr	r2, [r2, #12]
 8007c2a:	0752      	lsls	r2, r2, #29
 8007c2c:	d403      	bmi.n	8007c36 <sub_set_wkuptim+0x1e>
        if (--wdog == 0) {
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f7      	bne.n	8007c26 <sub_set_wkuptim+0xe>
        }
    }
    
    // Ticks interval to run wakeup.
    //RTC->WUTR = (period << _TICKER_SHIFT);
    RTC->WUTR = period;
 8007c36:	4a03      	ldr	r2, [pc, #12]	; (8007c44 <sub_set_wkuptim+0x2c>)
 8007c38:	6150      	str	r0, [r2, #20]

    // Enable Wakeup with interrupt
    // This will do nothing more than wake-up the chip from STOP at the set
    // interval.  The default ISR in platform_isr_STM32L.c is sufficient.
    RTC->CR = rtc_cr | RTC_CR_WUTIE | RTC_CR_WUTE | b001;
 8007c3a:	4b04      	ldr	r3, [pc, #16]	; (8007c4c <sub_set_wkuptim+0x34>)
 8007c3c:	430b      	orrs	r3, r1
 8007c3e:	6093      	str	r3, [r2, #8]
}
 8007c40:	4770      	bx	lr
 8007c42:	46c0      	nop			; (mov r8, r8)
 8007c44:	40002800 	.word	0x40002800
 8007c48:	fffffbff 	.word	0xfffffbff
 8007c4c:	00004401 	.word	0x00004401

08007c50 <systim_stop_ticker>:

#ifndef EXTF_systim_stop_ticker
void systim_stop_ticker() {
/// Ticker is not used on STM32L0 implementation
    //sub_disable_wkuptim();
}
 8007c50:	4770      	bx	lr
	...

08007c54 <systim_set_insertion>:
  * @note On STM32L0, the insertor utilizes the ticker, therefore you can only
  * use one or the other safely.  Also, in OpenTag, the Mode 2 MAC timer needs
  * the insertor, so if Mode 2 is being used then you can't really use either
  * except for special cases (e.g. during bootup).
  */
void systim_set_insertion(ot_u16 value) {
 8007c54:	b510      	push	{r4, lr}
    if (systim.opt & SYSTIM_INSERTION_ON) {
 8007c56:	4b07      	ldr	r3, [pc, #28]	; (8007c74 <systim_set_insertion+0x20>)
 8007c58:	785b      	ldrb	r3, [r3, #1]
 8007c5a:	07db      	lsls	r3, r3, #31
 8007c5c:	d505      	bpl.n	8007c6a <systim_set_insertion+0x16>
        if (value == 0) {
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d104      	bne.n	8007c6c <systim_set_insertion+0x18>
            EXTI->SWIER = (1<<20);
 8007c62:	4b05      	ldr	r3, [pc, #20]	; (8007c78 <systim_set_insertion+0x24>)
 8007c64:	2280      	movs	r2, #128	; 0x80
 8007c66:	0352      	lsls	r2, r2, #13
 8007c68:	611a      	str	r2, [r3, #16]
        }
        else {
            sub_set_wkuptim(value);
        }
    }
}
 8007c6a:	bd10      	pop	{r4, pc}
            sub_set_wkuptim(value);
 8007c6c:	f7ff ffd4 	bl	8007c18 <sub_set_wkuptim>
}
 8007c70:	e7fb      	b.n	8007c6a <systim_set_insertion+0x16>
 8007c72:	46c0      	nop			; (mov r8, r8)
 8007c74:	20002dcc 	.word	0x20002dcc
 8007c78:	40010400 	.word	0x40010400

08007c7c <systim_enable_insertion>:

OT_INLINE void systim_enable_insertion() {
    systim.opt |= SYSTIM_INSERTION_ON;
 8007c7c:	4a02      	ldr	r2, [pc, #8]	; (8007c88 <systim_enable_insertion+0xc>)
 8007c7e:	7853      	ldrb	r3, [r2, #1]
 8007c80:	2101      	movs	r1, #1
 8007c82:	430b      	orrs	r3, r1
 8007c84:	7053      	strb	r3, [r2, #1]
    //sub_enable_wkuptim();
}
 8007c86:	4770      	bx	lr
 8007c88:	20002dcc 	.word	0x20002dcc

08007c8c <systim_disable_insertion>:

OT_INLINE void systim_disable_insertion() {
 8007c8c:	b510      	push	{r4, lr}
    systim.opt &= ~SYSTIM_INSERTION_ON;
 8007c8e:	4a04      	ldr	r2, [pc, #16]	; (8007ca0 <systim_disable_insertion+0x14>)
 8007c90:	7853      	ldrb	r3, [r2, #1]
 8007c92:	2101      	movs	r1, #1
 8007c94:	438b      	bics	r3, r1
 8007c96:	7053      	strb	r3, [r2, #1]
    sub_disable_wkuptim();
 8007c98:	f7ff ffb0 	bl	8007bfc <sub_disable_wkuptim>
}
 8007c9c:	bd10      	pop	{r4, pc}
 8007c9e:	46c0      	nop			; (mov r8, r8)
 8007ca0:	20002dcc 	.word	0x20002dcc

08007ca4 <systim_start_clocker>:

///@todo clocker implementation.  OpenTag doesn't really care about clocker, so
/// we also need a way to configure if it should be enabled or not.

void systim_start_clocker() {
    TIM6->CR1 = TIM_CR1_CEN;
 8007ca4:	4b02      	ldr	r3, [pc, #8]	; (8007cb0 <systim_start_clocker+0xc>)
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]
    TIM6->EGR = TIM_EGR_UG;
 8007caa:	615a      	str	r2, [r3, #20]
}
 8007cac:	4770      	bx	lr
 8007cae:	46c0      	nop			; (mov r8, r8)
 8007cb0:	40001000 	.word	0x40001000

08007cb4 <systim_stop_clocker>:
ot_u16 systim_get_clocker() {
    return TIM6->CNT;
}

void systim_stop_clocker() {
    TIM6->CR1 = 0;
 8007cb4:	4b01      	ldr	r3, [pc, #4]	; (8007cbc <systim_stop_clocker+0x8>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
}
 8007cba:	4770      	bx	lr
 8007cbc:	40001000 	.word	0x40001000

08007cc0 <systim_chronstamp>:
  * and it needs the timer to run through STOP mode.  So, LPTIM is the perfect
  * choice.  Since LPTIM is already set-up as a free-running counter as the
  * kernel timer, all we need to do in this implementation is to read it.
  */

ot_u32 systim_chronstamp(ot_u32* timestamp) {
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	0004      	movs	r4, r0
    ot_u16 timer_cnt = __read_lptim_cnt();
 8007cc4:	f7ff feea 	bl	8007a9c <__read_lptim_cnt>
    timer_cnt >>= OT_GPTIM_OVERSAMPLE;
 8007cc8:	08c0      	lsrs	r0, r0, #3
 8007cca:	b280      	uxth	r0, r0
    
    if (timestamp != NULL) {
 8007ccc:	2c00      	cmp	r4, #0
 8007cce:	d002      	beq.n	8007cd6 <systim_chronstamp+0x16>
        timer_cnt -= (ot_u16)*timestamp;
 8007cd0:	8823      	ldrh	r3, [r4, #0]
 8007cd2:	1ac0      	subs	r0, r0, r3
 8007cd4:	b280      	uxth	r0, r0
    }
    return (ot_u32)timer_cnt;
}
 8007cd6:	bd10      	pop	{r4, pc}

08007cd8 <RTC_IRQHandler>:
#define _RTCALARM   (defined(__ISR_RTC_Alarm) && !defined(__N_ISR_RTC_Alarm))
#define _RTCWKUP    (defined(__ISR_RTC_WKUP) && !defined(__N_ISR_RTC_WKUP)) 
#define _TAMPER     (defined(__ISR_TAMPER_STAMP) && !defined(__N_ISR_TAMPER_STAMP))
#define _CSSLSE     (defined(__ISR_CSSLSE) && !defined(__N_ISR_CSSLSE))
#if (_RTCALARM || _RTCWKUP || _TAMPER || CSSLSE)
void RTC_IRQHandler(void) {
 8007cd8:	b510      	push	{r4, lr}
    ot_u32 exti_pr;
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    exti_pr     = EXTI->PR;
 8007cda:	4b08      	ldr	r3, [pc, #32]	; (8007cfc <RTC_IRQHandler+0x24>)
 8007cdc:	6959      	ldr	r1, [r3, #20]
    EXTI->PR    = (1<<17) | (1<<19) | (1<<20);
 8007cde:	22d0      	movs	r2, #208	; 0xd0
 8007ce0:	0352      	lsls	r2, r2, #13
 8007ce2:	615a      	str	r2, [r3, #20]
    RTC->ISR   &= ~(RTC_ISR_RSF | RTC_ISR_WUTF);
 8007ce4:	4a06      	ldr	r2, [pc, #24]	; (8007d00 <RTC_IRQHandler+0x28>)
 8007ce6:	68d3      	ldr	r3, [r2, #12]
 8007ce8:	4806      	ldr	r0, [pc, #24]	; (8007d04 <RTC_IRQHandler+0x2c>)
 8007cea:	4003      	ands	r3, r0
 8007cec:	60d3      	str	r3, [r2, #12]
    if (RCC->CIER & RCC->CIFR & RCC_CIFR_CSSLSEF) {
        platform_isr_csslse();
    }
#   endif
#   if (_RTCWKUP)
    if (exti_pr & (1<<20)) 
 8007cee:	02cb      	lsls	r3, r1, #11
 8007cf0:	d400      	bmi.n	8007cf4 <RTC_IRQHandler+0x1c>
        // platform_isr_tamperstamp must clear its own flags in RTC->ISR
        platform_isr_tamperstamp();
#   endif

    __ISR_EXIT_HOOK();
}
 8007cf2:	bd10      	pop	{r4, pc}
        platform_isr_rtcwakeup();
 8007cf4:	f7ff ff08 	bl	8007b08 <platform_isr_rtcwakeup>
}
 8007cf8:	e7fb      	b.n	8007cf2 <RTC_IRQHandler+0x1a>
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	40010400 	.word	0x40010400
 8007d00:	40002800 	.word	0x40002800
 8007d04:	fffffbdf 	.word	0xfffffbdf

08007d08 <EXTI0_1_IRQHandler>:



#if (  ((defined(__ISR_EXTI0) || defined(__USE_EXTI0)) && !defined(__N_ISR_EXTI0)) \
    || ((defined(__ISR_EXTI1) || defined(__USE_EXTI1)) && !defined(__N_ISR_EXTI1)) )
void EXTI0_1_IRQHandler(void) {
 8007d08:	b510      	push	{r4, lr}
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    
#   if ((defined(__ISR_EXTI0) || defined(__USE_EXTI0)) && !defined(__N_ISR_EXTI0))
    __EXTI_MACRO(0);
 8007d0a:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <EXTI0_1_IRQHandler+0x28>)
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	07db      	lsls	r3, r3, #31
 8007d10:	d502      	bpl.n	8007d18 <EXTI0_1_IRQHandler+0x10>
 8007d12:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <EXTI0_1_IRQHandler+0x28>)
 8007d14:	2201      	movs	r2, #1
 8007d16:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI1) || defined(__USE_EXTI1)) && !defined(__N_ISR_EXTI1))
    __EXTI_MACRO(1);
 8007d18:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <EXTI0_1_IRQHandler+0x28>)
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	079b      	lsls	r3, r3, #30
 8007d1e:	d400      	bmi.n	8007d22 <EXTI0_1_IRQHandler+0x1a>
#   endif
    { } //to terminate "else"

    __ISR_EXIT_HOOK();
}
 8007d20:	bd10      	pop	{r4, pc}
    __EXTI_MACRO(1);
 8007d22:	4b03      	ldr	r3, [pc, #12]	; (8007d30 <EXTI0_1_IRQHandler+0x28>)
 8007d24:	2202      	movs	r2, #2
 8007d26:	615a      	str	r2, [r3, #20]
 8007d28:	f7f9 f974 	bl	8001014 <sx127x_irq3_isr>
}
 8007d2c:	e7f8      	b.n	8007d20 <EXTI0_1_IRQHandler+0x18>
 8007d2e:	46c0      	nop			; (mov r8, r8)
 8007d30:	40010400 	.word	0x40010400

08007d34 <EXTI2_3_IRQHandler>:
void EXTI2_3_IRQHandler(void) {
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();
    
#   if ((defined(__ISR_EXTI2) || defined(__USE_EXTI2)) && !defined(__N_ISR_EXTI2))
    __EXTI_MACRO(2);
 8007d34:	4b07      	ldr	r3, [pc, #28]	; (8007d54 <EXTI2_3_IRQHandler+0x20>)
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	075b      	lsls	r3, r3, #29
 8007d3a:	d502      	bpl.n	8007d42 <EXTI2_3_IRQHandler+0xe>
 8007d3c:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <EXTI2_3_IRQHandler+0x20>)
 8007d3e:	2204      	movs	r2, #4
 8007d40:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI3) || defined(__USE_EXTI3)) && !defined(__N_ISR_EXTI3))
    __EXTI_MACRO(3);
 8007d42:	4b04      	ldr	r3, [pc, #16]	; (8007d54 <EXTI2_3_IRQHandler+0x20>)
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	071b      	lsls	r3, r3, #28
 8007d48:	d502      	bpl.n	8007d50 <EXTI2_3_IRQHandler+0x1c>
 8007d4a:	4b02      	ldr	r3, [pc, #8]	; (8007d54 <EXTI2_3_IRQHandler+0x20>)
 8007d4c:	2208      	movs	r2, #8
 8007d4e:	615a      	str	r2, [r3, #20]
#   endif
    { } //to terminate "else"

    __ISR_EXIT_HOOK();
}
 8007d50:	4770      	bx	lr
 8007d52:	46c0      	nop			; (mov r8, r8)
 8007d54:	40010400 	.word	0x40010400

08007d58 <EXTI4_15_IRQHandler>:
    || ((defined(__ISR_EXTI11) || defined(__USE_EXTI11)) && !defined(__N_ISR_EXTI11)) \
    || ((defined(__ISR_EXTI12) || defined(__USE_EXTI12)) && !defined(__N_ISR_EXTI12)) \
    || ((defined(__ISR_EXTI13) || defined(__USE_EXTI13)) && !defined(__N_ISR_EXTI13)) \
    || ((defined(__ISR_EXTI14) || defined(__USE_EXTI14)) && !defined(__N_ISR_EXTI14)) \
    || ((defined(__ISR_EXTI15) || defined(__USE_EXTI15)) && !defined(__N_ISR_EXTI15)) )
void EXTI4_15_IRQHandler(void) {
 8007d58:	b510      	push	{r4, lr}
    __ISR_ENTRY_HOOK();
    __ISR_WAKEUP_HOOK();

#   if ((defined(__ISR_EXTI4) || defined(__USE_EXTI4)) && !defined(__N_ISR_EXTI4))
    __EXTI_MACRO(4);
 8007d5a:	4b31      	ldr	r3, [pc, #196]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	06db      	lsls	r3, r3, #27
 8007d60:	d502      	bpl.n	8007d68 <EXTI4_15_IRQHandler+0x10>
 8007d62:	4b2f      	ldr	r3, [pc, #188]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007d64:	2210      	movs	r2, #16
 8007d66:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI5) || defined(__USE_EXTI5)) && !defined(__N_ISR_EXTI5))
    __EXTI_MACRO(5);
 8007d68:	4b2d      	ldr	r3, [pc, #180]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	069b      	lsls	r3, r3, #26
 8007d6e:	d502      	bpl.n	8007d76 <EXTI4_15_IRQHandler+0x1e>
 8007d70:	4b2b      	ldr	r3, [pc, #172]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007d72:	2220      	movs	r2, #32
 8007d74:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI6) || defined(__USE_EXTI6)) && !defined(__N_ISR_EXTI6))
    __EXTI_MACRO(6);
 8007d76:	4b2a      	ldr	r3, [pc, #168]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	065b      	lsls	r3, r3, #25
 8007d7c:	d502      	bpl.n	8007d84 <EXTI4_15_IRQHandler+0x2c>
 8007d7e:	4b28      	ldr	r3, [pc, #160]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007d80:	2240      	movs	r2, #64	; 0x40
 8007d82:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI7) || defined(__USE_EXTI7)) && !defined(__N_ISR_EXTI7))
    __EXTI_MACRO(7);
 8007d84:	4b26      	ldr	r3, [pc, #152]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	061b      	lsls	r3, r3, #24
 8007d8a:	d502      	bpl.n	8007d92 <EXTI4_15_IRQHandler+0x3a>
 8007d8c:	4b24      	ldr	r3, [pc, #144]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007d8e:	2280      	movs	r2, #128	; 0x80
 8007d90:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI8) || defined(__USE_EXTI8)) && !defined(__N_ISR_EXTI8))
    __EXTI_MACRO(8);
 8007d92:	4b23      	ldr	r3, [pc, #140]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	05db      	lsls	r3, r3, #23
 8007d98:	d503      	bpl.n	8007da2 <EXTI4_15_IRQHandler+0x4a>
 8007d9a:	4b21      	ldr	r3, [pc, #132]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007d9c:	2280      	movs	r2, #128	; 0x80
 8007d9e:	0052      	lsls	r2, r2, #1
 8007da0:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI9) || defined(__USE_EXTI9)) && !defined(__N_ISR_EXTI9))
    __EXTI_MACRO(9);
 8007da2:	4b1f      	ldr	r3, [pc, #124]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	059b      	lsls	r3, r3, #22
 8007da8:	d503      	bpl.n	8007db2 <EXTI4_15_IRQHandler+0x5a>
 8007daa:	4b1d      	ldr	r3, [pc, #116]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007dac:	2280      	movs	r2, #128	; 0x80
 8007dae:	0092      	lsls	r2, r2, #2
 8007db0:	615a      	str	r2, [r3, #20]
#   endif    
#   if ((defined(__ISR_EXTI10) || defined(__USE_EXTI10)) && !defined(__N_ISR_EXTI10))
    __EXTI_MACRO(10);
 8007db2:	4b1b      	ldr	r3, [pc, #108]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	055b      	lsls	r3, r3, #21
 8007db8:	d503      	bpl.n	8007dc2 <EXTI4_15_IRQHandler+0x6a>
 8007dba:	4b19      	ldr	r3, [pc, #100]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007dbc:	2280      	movs	r2, #128	; 0x80
 8007dbe:	00d2      	lsls	r2, r2, #3
 8007dc0:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI11) || defined(__USE_EXTI11)) && !defined(__N_ISR_EXTI11))
    __EXTI_MACRO(11);
 8007dc2:	4b17      	ldr	r3, [pc, #92]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	051b      	lsls	r3, r3, #20
 8007dc8:	d41c      	bmi.n	8007e04 <EXTI4_15_IRQHandler+0xac>
#   endif
#   if ((defined(__ISR_EXTI12) || defined(__USE_EXTI12)) && !defined(__N_ISR_EXTI12))
    __EXTI_MACRO(12);
 8007dca:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	04db      	lsls	r3, r3, #19
 8007dd0:	d41f      	bmi.n	8007e12 <EXTI4_15_IRQHandler+0xba>
#   endif
#   if ((defined(__ISR_EXTI13) || defined(__USE_EXTI13)) && !defined(__N_ISR_EXTI13))
    __EXTI_MACRO(13);
 8007dd2:	4b13      	ldr	r3, [pc, #76]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	049b      	lsls	r3, r3, #18
 8007dd8:	d503      	bpl.n	8007de2 <EXTI4_15_IRQHandler+0x8a>
 8007dda:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007ddc:	2280      	movs	r2, #128	; 0x80
 8007dde:	0192      	lsls	r2, r2, #6
 8007de0:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI14) || defined(__USE_EXTI14)) && !defined(__N_ISR_EXTI14))
    __EXTI_MACRO(14);
 8007de2:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	045b      	lsls	r3, r3, #17
 8007de8:	d503      	bpl.n	8007df2 <EXTI4_15_IRQHandler+0x9a>
 8007dea:	4b0d      	ldr	r3, [pc, #52]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007dec:	2280      	movs	r2, #128	; 0x80
 8007dee:	01d2      	lsls	r2, r2, #7
 8007df0:	615a      	str	r2, [r3, #20]
#   endif
#   if ((defined(__ISR_EXTI15) || defined(__USE_EXTI15)) && !defined(__N_ISR_EXTI15))
    __EXTI_MACRO(15);
 8007df2:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	041b      	lsls	r3, r3, #16
 8007df8:	d503      	bpl.n	8007e02 <EXTI4_15_IRQHandler+0xaa>
 8007dfa:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007dfc:	2280      	movs	r2, #128	; 0x80
 8007dfe:	0212      	lsls	r2, r2, #8
 8007e00:	615a      	str	r2, [r3, #20]
#   endif
    { } //to terminate "else"

    __ISR_EXIT_HOOK();
}
 8007e02:	bd10      	pop	{r4, pc}
    __EXTI_MACRO(11);
 8007e04:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007e06:	2280      	movs	r2, #128	; 0x80
 8007e08:	0112      	lsls	r2, r2, #4
 8007e0a:	615a      	str	r2, [r3, #20]
 8007e0c:	f7f9 f8f8 	bl	8001000 <sx127x_irq1_isr>
 8007e10:	e7db      	b.n	8007dca <EXTI4_15_IRQHandler+0x72>
    __EXTI_MACRO(12);
 8007e12:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <EXTI4_15_IRQHandler+0xc8>)
 8007e14:	2280      	movs	r2, #128	; 0x80
 8007e16:	0152      	lsls	r2, r2, #5
 8007e18:	615a      	str	r2, [r3, #20]
 8007e1a:	f7f9 f8e9 	bl	8000ff0 <sx127x_irq0_isr>
 8007e1e:	e7d8      	b.n	8007dd2 <EXTI4_15_IRQHandler+0x7a>
 8007e20:	40010400 	.word	0x40010400

08007e24 <LPTIM1_IRQHandler>:



/// Open LPTIM Interrupt
#if defined(__ISR_LPTIM1) && !defined(__N_ISR_LPTIM1)
void LPTIM1_IRQHandler(void) {
 8007e24:	b510      	push	{r4, lr}
    
    ///@todo Not certain this PR clear is necessary or good
    //EXTI->PR = (1<<29);         
    
    __ISR_KTIM_WAKEUP_HOOK();
    platform_isr_lptim1();
 8007e26:	f7ff fe5f 	bl	8007ae8 <platform_isr_lptim1>
    __ISR_EXIT_HOOK();
}
 8007e2a:	bd10      	pop	{r4, pc}

08007e2c <sub_osc_startup>:

void sub_osc_startup(ot_u16 counter, ot_u32 osc_mask) {
    ///@todo figure out a way to do this with WFE
    
    // Wait for Oscillator to get ready, counter goes to 0 on failure
    RCC->CR    |= osc_mask;
 8007e2c:	4a08      	ldr	r2, [pc, #32]	; (8007e50 <sub_osc_startup+0x24>)
 8007e2e:	6813      	ldr	r3, [r2, #0]
 8007e30:	430b      	orrs	r3, r1
 8007e32:	6013      	str	r3, [r2, #0]
    osc_mask  <<= (osc_mask & 1);   // hack for STM32L0 HSI
 8007e34:	2301      	movs	r3, #1
 8007e36:	400b      	ands	r3, r1
 8007e38:	4099      	lsls	r1, r3
    osc_mask  <<= 1;
 8007e3a:	0049      	lsls	r1, r1, #1
    while ( ((RCC->CR & osc_mask) == 0) && (--counter) );
 8007e3c:	4b04      	ldr	r3, [pc, #16]	; (8007e50 <sub_osc_startup+0x24>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4219      	tst	r1, r3
 8007e42:	d103      	bne.n	8007e4c <sub_osc_startup+0x20>
 8007e44:	3801      	subs	r0, #1
 8007e46:	b280      	uxth	r0, r0
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d1f7      	bne.n	8007e3c <sub_osc_startup+0x10>

    /// Test if oscillator failed to startup
    if (counter == 0) {
        ///@todo Death message / Death Blinkly
    }
}
 8007e4c:	4770      	bx	lr
 8007e4e:	46c0      	nop			; (mov r8, r8)
 8007e50:	40021000 	.word	0x40021000

08007e54 <sub_osc_setclock>:


void sub_osc_setclock(ot_u32 clock_mask) {
    ///@todo have this fail into hardware fault
    ot_u32 scratch;
    scratch         = RCC->CFGR & ~(3 | RCC_CFGR_STOPWUCK);
 8007e54:	4907      	ldr	r1, [pc, #28]	; (8007e74 <sub_osc_setclock+0x20>)
 8007e56:	68cb      	ldr	r3, [r1, #12]
 8007e58:	4a07      	ldr	r2, [pc, #28]	; (8007e78 <sub_osc_setclock+0x24>)
 8007e5a:	4013      	ands	r3, r2
    scratch        |= clock_mask;
 8007e5c:	4303      	orrs	r3, r0
    clock_mask      = (clock_mask & 3) << 2;
 8007e5e:	0082      	lsls	r2, r0, #2
 8007e60:	200c      	movs	r0, #12
 8007e62:	4010      	ands	r0, r2
    RCC->CFGR       = scratch;
 8007e64:	60cb      	str	r3, [r1, #12]
    while ( (RCC->CFGR & (3<<2)) != clock_mask);
 8007e66:	4b03      	ldr	r3, [pc, #12]	; (8007e74 <sub_osc_setclock+0x20>)
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	230c      	movs	r3, #12
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	4283      	cmp	r3, r0
 8007e70:	d1f9      	bne.n	8007e66 <sub_osc_setclock+0x12>
}
 8007e72:	4770      	bx	lr
 8007e74:	40021000 	.word	0x40021000
 8007e78:	ffff7ffc 	.word	0xffff7ffc

08007e7c <sub_set_clockhz>:

void sub_set_clockhz(ot_ulong cpu_clock_hz) {
/// In interest of speed and size, you need to setup your clock dividers as
/// constants in the board configuration file.
    ///@todo Additional argument for changing the clock dividers.
    platform_ext.clock_hz[0]    = cpu_clock_hz >> (BOARD_PARAM_AHBCLKDIV-1);    //AHB
 8007e7c:	4b02      	ldr	r3, [pc, #8]	; (8007e88 <sub_set_clockhz+0xc>)
 8007e7e:	6058      	str	r0, [r3, #4]
    platform_ext.clock_hz[1]    = cpu_clock_hz >> (BOARD_PARAM_APB1CLKDIV-1);    //APB1
 8007e80:	6098      	str	r0, [r3, #8]
    platform_ext.clock_hz[2]    = cpu_clock_hz >> (BOARD_PARAM_APB2CLKDIV-1);    //APB2
 8007e82:	60d8      	str	r0, [r3, #12]
}
 8007e84:	4770      	bx	lr
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	20002dd4 	.word	0x20002dd4

08007e8c <platform_full_speed>:




#ifndef EXTF_platform_full_speed
void platform_full_speed() {
 8007e8c:	b510      	push	{r4, lr}
/// Only go through the process of entering Full Speed if it is not activated
/// already.  Also, in Multispeed systems, we need to make sure there are no
/// active full speed or flank speed requests.

#if BOARD_FEATURE(FULLSPEED)
    if ( _FULLSPEED_OFF() /* && !_FLANKRQ() */ ) {
 8007e8e:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <platform_full_speed+0x44>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b10      	ldr	r3, [pc, #64]	; (8007ed4 <platform_full_speed+0x48>)
 8007e94:	421a      	tst	r2, r3
 8007e96:	d100      	bne.n	8007e9a <platform_full_speed+0xe>
        RCC->CR    &= ~(RCC_CR_MSION | RCC_CR_PLLON);
        sub_set_clockhz(PLATFORM_HSCLOCK_HZ);
        platform_enable_interrupts();
    }
#endif
}
 8007e98:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8007e9a:	b672      	cpsid	i
        sub_osc_startup(_FULLOSC_TIMEOUT, _FULLOSC_ONBIT);
 8007e9c:	2096      	movs	r0, #150	; 0x96
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	0040      	lsls	r0, r0, #1
 8007ea2:	f7ff ffc3 	bl	8007e2c <sub_osc_startup>
            FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY;
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	; (8007ed8 <platform_full_speed+0x4c>)
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	601a      	str	r2, [r3, #0]
            sub_osc_setclock(_FULLOSC_CLOCKBIT);    ///@todo FIXED TO HSI
 8007eac:	480b      	ldr	r0, [pc, #44]	; (8007edc <platform_full_speed+0x50>)
 8007eae:	f7ff ffd1 	bl	8007e54 <sub_osc_setclock>
        RCC->CFGR  |= RCC_CFGR_STOPWUCK;
 8007eb2:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <platform_full_speed+0x44>)
 8007eb4:	68d9      	ldr	r1, [r3, #12]
 8007eb6:	2280      	movs	r2, #128	; 0x80
 8007eb8:	0212      	lsls	r2, r2, #8
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	60da      	str	r2, [r3, #12]
        RCC->CR    &= ~(RCC_CR_MSION | RCC_CR_PLLON);
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	4907      	ldr	r1, [pc, #28]	; (8007ee0 <platform_full_speed+0x54>)
 8007ec2:	400a      	ands	r2, r1
 8007ec4:	601a      	str	r2, [r3, #0]
        sub_set_clockhz(PLATFORM_HSCLOCK_HZ);
 8007ec6:	4807      	ldr	r0, [pc, #28]	; (8007ee4 <platform_full_speed+0x58>)
 8007ec8:	f7ff ffd8 	bl	8007e7c <sub_set_clockhz>
  __ASM volatile ("cpsie i" : : : "memory");
 8007ecc:	b662      	cpsie	i
}
 8007ece:	e7e3      	b.n	8007e98 <platform_full_speed+0xc>
 8007ed0:	40021000 	.word	0x40021000
 8007ed4:	01000100 	.word	0x01000100
 8007ed8:	40022000 	.word	0x40022000
 8007edc:	00008001 	.word	0x00008001
 8007ee0:	fefffeff 	.word	0xfefffeff
 8007ee4:	00f42400 	.word	0x00f42400

08007ee8 <platform_disable_interrupts>:
  __ASM volatile ("cpsid i" : : : "memory");
 8007ee8:	b672      	cpsid	i
  */

#ifndef EXTF_platform_disable_interrupts
OT_INLINE void platform_disable_interrupts(void) {
    __disable_irq();    // CMSIS intrinsic
}
 8007eea:	4770      	bx	lr

08007eec <platform_enable_interrupts>:
  __ASM volatile ("cpsie i" : : : "memory");
 8007eec:	b662      	cpsie	i


#ifndef EXTF_platform_enable_interrupts
OT_INLINE void platform_enable_interrupts(void) {
    __enable_irq();     // CMSIS intrinsic
}
 8007eee:	4770      	bx	lr

08007ef0 <platform_init_OT>:
#endif



#ifndef EXTF_platform_init_OT
void platform_init_OT() {
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	b084      	sub	sp, #16
    /// 1. Initialize Data sources required by basically all OT features
    ///    - Buffers module allocates the data queues, used by all I/O
    ///    - Veelite module allocates and prepares the filesystem
    buffers_init();
 8007ef4:	f7fe ffa8 	bl	8006e48 <buffers_init>
    vl_init();
 8007ef8:	f7ff fc00 	bl	80076fc <vl_init>

    /// 2. Initialize the System Time.  If the build does not support time,
    ///    then this will do nothing.
    time_set_utc(364489200);
 8007efc:	4836      	ldr	r0, [pc, #216]	; (8007fd8 <platform_init_OT+0xe8>)
 8007efe:	f7ff fd65 	bl	80079cc <time_set_utc>

    /// 3. Look for errors, report them, and make sure to clear the error RAM.
    /// @note This is a decent place to put a breakpoint when debugging.
    if (RTC->BKP2R != 0) {
 8007f02:	4b36      	ldr	r3, [pc, #216]	; (8007fdc <platform_init_OT+0xec>)
 8007f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d117      	bne.n	8007f3a <platform_init_OT+0x4a>
            ot_u16 halfw[6];
        } generated_id;
        ot_u16* hwid;
        ot_int  i;

        generated_id.word[0]    = *((ot_u32*)(0x1FF80050));
 8007f0a:	4b35      	ldr	r3, [pc, #212]	; (8007fe0 <platform_init_OT+0xf0>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	ac01      	add	r4, sp, #4
 8007f10:	9301      	str	r3, [sp, #4]
        generated_id.halfw[1]  ^= *((ot_u16*)(0x1FF80064));
 8007f12:	4a34      	ldr	r2, [pc, #208]	; (8007fe4 <platform_init_OT+0xf4>)
 8007f14:	8812      	ldrh	r2, [r2, #0]
 8007f16:	0c1b      	lsrs	r3, r3, #16
 8007f18:	4053      	eors	r3, r2
 8007f1a:	8063      	strh	r3, [r4, #2]
        generated_id.halfw[2]   = *((ot_u16*)(0x1FF80066));
 8007f1c:	4b32      	ldr	r3, [pc, #200]	; (8007fe8 <platform_init_OT+0xf8>)
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	80a3      	strh	r3, [r4, #4]
        generated_id.word[0]   ^= *((ot_u32*)(0x1FF80054));
 8007f22:	4b32      	ldr	r3, [pc, #200]	; (8007fec <platform_init_OT+0xfc>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	9a01      	ldr	r2, [sp, #4]
 8007f28:	4053      	eors	r3, r2
 8007f2a:	9301      	str	r3, [sp, #4]
        
        fpid    = ISF_open_su(ISF_ID(device_features));
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	f7ff fbca 	bl	80076c6 <ISF_open_su>
 8007f32:	0005      	movs	r5, r0
        hwid    = &generated_id.halfw[0];
        for (i=6; i!=0; i-=2) {
 8007f34:	2106      	movs	r1, #6
        hwid    = &generated_id.halfw[0];
 8007f36:	0023      	movs	r3, r4
        for (i=6; i!=0; i-=2) {
 8007f38:	e045      	b.n	8007fc6 <platform_init_OT+0xd6>
        error.ulong     = RTC->BKP2R;
 8007f3a:	4b28      	ldr	r3, [pc, #160]	; (8007fdc <platform_init_OT+0xec>)
 8007f3c:	6d9c      	ldr	r4, [r3, #88]	; 0x58
        RTC->BKP2R      = 0;
 8007f3e:	2200      	movs	r2, #0
 8007f40:	659a      	str	r2, [r3, #88]	; 0x58
        fp              = ISF_open_su(ISF_ID(hardware_fault_status));
 8007f42:	2016      	movs	r0, #22
 8007f44:	f7ff fbbf 	bl	80076c6 <ISF_open_su>
 8007f48:	0005      	movs	r5, r0
        resets.ushort   = vl_read(fp, 0);
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	f7ff fb04 	bl	8007558 <vl_read>
 8007f50:	0006      	movs	r6, r0
        faults.ushort   = vl_read(fp, 2);
 8007f52:	2102      	movs	r1, #2
 8007f54:	0028      	movs	r0, r5
 8007f56:	f7ff faff 	bl	8007558 <vl_read>
 8007f5a:	b2a1      	uxth	r1, r4
        resets.ubyte[0]+= (error.ushort[LOWER] != 0);
 8007f5c:	000b      	movs	r3, r1
 8007f5e:	1e5a      	subs	r2, r3, #1
 8007f60:	4193      	sbcs	r3, r2
 8007f62:	199b      	adds	r3, r3, r6
        resets.ubyte[1]+= (error.ushort[UPPER] != 0);
 8007f64:	0c24      	lsrs	r4, r4, #16
 8007f66:	0022      	movs	r2, r4
 8007f68:	1e54      	subs	r4, r2, #1
 8007f6a:	41a2      	sbcs	r2, r4
 8007f6c:	0436      	lsls	r6, r6, #16
 8007f6e:	0e36      	lsrs	r6, r6, #24
 8007f70:	1992      	adds	r2, r2, r6
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	0212      	lsls	r2, r2, #8
 8007f76:	24ff      	movs	r4, #255	; 0xff
 8007f78:	4023      	ands	r3, r4
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	0403      	lsls	r3, r0, #16
 8007f7e:	0e1b      	lsrs	r3, r3, #24
        faults.ubyte[1]+= (error.ushort[LOWER] == 11) << 1; //Memory Fault
 8007f80:	290b      	cmp	r1, #11
 8007f82:	d014      	beq.n	8007fae <platform_init_OT+0xbe>
 8007f84:	2400      	movs	r4, #0
 8007f86:	18e3      	adds	r3, r4, r3
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	24ff      	movs	r4, #255	; 0xff
 8007f8e:	4004      	ands	r4, r0
 8007f90:	431c      	orrs	r4, r3
        vl_write(fp, 0, resets.ushort);
 8007f92:	b292      	uxth	r2, r2
 8007f94:	2100      	movs	r1, #0
 8007f96:	0028      	movs	r0, r5
 8007f98:	f7ff fae5 	bl	8007566 <vl_write>
        vl_write(fp, 2, faults.ushort);
 8007f9c:	b2a2      	uxth	r2, r4
 8007f9e:	2102      	movs	r1, #2
 8007fa0:	0028      	movs	r0, r5
 8007fa2:	f7ff fae0 	bl	8007566 <vl_write>
        vl_close(fp);
 8007fa6:	0028      	movs	r0, r5
 8007fa8:	f7ff fb58 	bl	800765c <vl_close>
 8007fac:	e7ad      	b.n	8007f0a <platform_init_OT+0x1a>
        faults.ubyte[1]+= (error.ushort[LOWER] == 11) << 1; //Memory Fault
 8007fae:	3cfd      	subs	r4, #253	; 0xfd
 8007fb0:	e7e9      	b.n	8007f86 <platform_init_OT+0x96>
            vl_write(fpid, i, *hwid++);
 8007fb2:	b28c      	uxth	r4, r1
 8007fb4:	1c9e      	adds	r6, r3, #2
 8007fb6:	881a      	ldrh	r2, [r3, #0]
 8007fb8:	0021      	movs	r1, r4
 8007fba:	0028      	movs	r0, r5
 8007fbc:	f7ff fad3 	bl	8007566 <vl_write>
        for (i=6; i!=0; i-=2) {
 8007fc0:	3c02      	subs	r4, #2
 8007fc2:	b221      	sxth	r1, r4
            vl_write(fpid, i, *hwid++);
 8007fc4:	0033      	movs	r3, r6
        for (i=6; i!=0; i-=2) {
 8007fc6:	2900      	cmp	r1, #0
 8007fc8:	d1f3      	bne.n	8007fb2 <platform_init_OT+0xc2>
        }
        vl_close(fpid);
 8007fca:	0028      	movs	r0, r5
 8007fcc:	f7ff fb46 	bl	800765c <vl_close>
#   endif
    
    /// 5. Initialize the System (Kernel & more).  The System initializer must
    ///    initialize all modules that are built onto the kernel.  These include
    ///    the DLL and MPipe.
    sys_init();
 8007fd0:	f7ff fbd0 	bl	8007774 <sys_init>
}
 8007fd4:	b004      	add	sp, #16
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	15b9a9f0 	.word	0x15b9a9f0
 8007fdc:	40002800 	.word	0x40002800
 8007fe0:	1ff80050 	.word	0x1ff80050
 8007fe4:	1ff80064 	.word	0x1ff80064
 8007fe8:	1ff80066 	.word	0x1ff80066
 8007fec:	1ff80054 	.word	0x1ff80054

08007ff0 <platform_init_busclk>:
#endif



#ifndef EXTF_platform_init_busclk
void platform_init_busclk() {
 8007ff0:	b510      	push	{r4, lr}

    ///1. RESET System Clocks
    ///@todo This may not be necessary.  These settings should be reset default settings.

    // Assure MSI bit is on (it should be, by default)
    RCC->CR    |= (uint32_t)0x00000100;
 8007ff2:	4c0c      	ldr	r4, [pc, #48]	; (8008024 <platform_init_busclk+0x34>)
 8007ff4:	6822      	ldr	r2, [r4, #0]
 8007ff6:	2380      	movs	r3, #128	; 0x80
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	6023      	str	r3, [r4, #0]

    // Configure dividers and PLL information (even if not used) and keep 
    // active clock via MSI (these fields are 0)
    RCC->CFGR   = ( _PLL_SRC | _PLL_MULT | _PLL_DIV | _AHB_DIV | _APB1_DIV | _APB2_DIV );
 8007ffe:	2300      	movs	r3, #0
 8008000:	60e3      	str	r3, [r4, #12]

    // Reset HSION, HSEON, HSEBYP, CSSON and PLLON bits
    // Disable all clocker interrupts (default)
    RCC->CR    &= 0xFEF0FFF6;   // 0xEEFAFFFE;
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	4a08      	ldr	r2, [pc, #32]	; (8008028 <platform_init_busclk+0x38>)
 8008006:	4013      	ands	r3, r2
 8008008:	6023      	str	r3, [r4, #0]
#   elif BOARD_FEATURE(FULLSPEED)
#       if ((_FULLSPEED_VOLTAGE != POWER_1V5) && (_FULL_UPVOLT() == 0))
            sub_voltage_config(_FULLSPEED_VOLTAGE | _RTC_PROTECTION);   ///@note This isn't running
#       endif
        // Basic Flash setup, then run normal routine
        FLASH->ACR = FLASH_ACR_PRFTEN;
 800800a:	4b08      	ldr	r3, [pc, #32]	; (800802c <platform_init_busclk+0x3c>)
 800800c:	2202      	movs	r2, #2
 800800e:	601a      	str	r2, [r3, #0]
        platform_full_speed();
 8008010:	f7ff ff3c 	bl	8007e8c <platform_full_speed>
#       error "At least one of BOARD_FEATURE_STDSPEED, _FULLSPEED, or _FLANKSPEED must be ENABLED"
#   endif

    
    ///4. Clock selection for special buses
    RCC->CCIPR  = ((BOARD_FEATURE(USBPLL)!=ENABLED) << 26)  /* HSI48MSEL */ \
 8008014:	4b06      	ldr	r3, [pc, #24]	; (8008030 <platform_init_busclk+0x40>)
 8008016:	64e3      	str	r3, [r4, #76]	; 0x4c
    /// X. Vector Table Relocation in Internal SRAM or FLASH.
#   ifdef VECT_TAB_SRAM
#       error "Silly rabbit! SRAM is for DATA!"
        SCB->VTOR   = SRAM_BASE;
#   else
        SCB->VTOR   = FLASH_BASE;
 8008018:	4b06      	ldr	r3, [pc, #24]	; (8008034 <platform_init_busclk+0x44>)
 800801a:	2280      	movs	r2, #128	; 0x80
 800801c:	0512      	lsls	r2, r2, #20
 800801e:	609a      	str	r2, [r3, #8]
#   endif
}
 8008020:	bd10      	pop	{r4, pc}
 8008022:	46c0      	nop			; (mov r8, r8)
 8008024:	40021000 	.word	0x40021000
 8008028:	fef0fff6 	.word	0xfef0fff6
 800802c:	40022000 	.word	0x40022000
 8008030:	040c0c00 	.word	0x040c0c00
 8008034:	e000ed00 	.word	0xe000ed00

08008038 <platform_init_periphclk>:

#define CR_OFFSET                (PWR_OFFSET + 0x00)
#define DBP_BitNumber            0x08
#define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
*/
    ot_u32  pwr_cr_save = (PWR->CR | PWR_CR_DBP);
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <platform_init_periphclk+0x2c>)
 800803a:	6819      	ldr	r1, [r3, #0]
 800803c:	2280      	movs	r2, #128	; 0x80
 800803e:	0052      	lsls	r2, r2, #1
 8008040:	430a      	orrs	r2, r1

#   if BOARD_FEATURE(LFXTAL)
    PWR->CR     = ((1 << 11) | PWR_CR_DBP);
 8008042:	2190      	movs	r1, #144	; 0x90
 8008044:	0109      	lsls	r1, r1, #4
 8008046:	6019      	str	r1, [r3, #0]
    RCC->CSR    = RCC_CSR_RMVF | RCC_CSR_RTCRST;
 8008048:	4b07      	ldr	r3, [pc, #28]	; (8008068 <platform_init_periphclk+0x30>)
 800804a:	2188      	movs	r1, #136	; 0x88
 800804c:	0409      	lsls	r1, r1, #16
 800804e:	6519      	str	r1, [r3, #80]	; 0x50
    RCC->CSR    = RCC_CSR_LSEON | RCC_CSR_RTCEN | RCC_CSR_RTCSEL_LSE;
 8008050:	4906      	ldr	r1, [pc, #24]	; (800806c <platform_init_periphclk+0x34>)
 8008052:	6519      	str	r1, [r3, #80]	; 0x50
    while ((RCC->CSR & RCC_CSR_LSERDY) == 0);
 8008054:	4b04      	ldr	r3, [pc, #16]	; (8008068 <platform_init_periphclk+0x30>)
 8008056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008058:	059b      	lsls	r3, r3, #22
 800805a:	d5fb      	bpl.n	8008054 <platform_init_periphclk+0x1c>
    RCC->CSR    = RCC_CSR_LSION | RCC_CSR_RTCEN | RCC_CSR_RTCSEL_LSI;
    while ((RCC->CSR & RCC_CSR_LSIRDY) == 0);

#   endif

   PWR->CR = (pwr_cr_save);
 800805c:	4b01      	ldr	r3, [pc, #4]	; (8008064 <platform_init_periphclk+0x2c>)
 800805e:	601a      	str	r2, [r3, #0]
}
 8008060:	4770      	bx	lr
 8008062:	46c0      	nop			; (mov r8, r8)
 8008064:	40007000 	.word	0x40007000
 8008068:	40021000 	.word	0x40021000
 800806c:	00050100 	.word	0x00050100

08008070 <platform_init_interruptor>:
/** OpenTag Resource Initializers <BR>
  * ========================================================================<BR>
  */

#ifndef EXTF_platform_init_interruptor
void platform_init_interruptor() {
 8008070:	b5f0      	push	{r4, r5, r6, r7, lr}
    SYSCFG->EXTICR[0]   = (BOARD_GNSS_INT0PORTNUM << 0) \
 8008072:	4b29      	ldr	r3, [pc, #164]	; (8008118 <platform_init_interruptor+0xa8>)
 8008074:	2210      	movs	r2, #16
 8008076:	609a      	str	r2, [r3, #8]
    SYSCFG->EXTICR[1]   = (1 << 0) \
 8008078:	3201      	adds	r2, #1
 800807a:	60da      	str	r2, [r3, #12]
    SYSCFG->EXTICR[2]   = (0 << 0) \
 800807c:	2200      	movs	r2, #0
 800807e:	611a      	str	r2, [r3, #16]
    SYSCFG->EXTICR[3]   = (BOARD_RFGPIO_0PORTNUM << 0) \
 8008080:	615a      	str	r2, [r3, #20]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008082:	4a26      	ldr	r2, [pc, #152]	; (800811c <platform_init_interruptor+0xac>)
 8008084:	69d3      	ldr	r3, [r2, #28]
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	0a1b      	lsrs	r3, r3, #8
 800808a:	61d3      	str	r3, [r2, #28]
 800808c:	6a10      	ldr	r0, [r2, #32]
 800808e:	4924      	ldr	r1, [pc, #144]	; (8008120 <platform_init_interruptor+0xb0>)
 8008090:	4008      	ands	r0, r1
 8008092:	23c0      	movs	r3, #192	; 0xc0
 8008094:	041b      	lsls	r3, r3, #16
 8008096:	4303      	orrs	r3, r0
 8008098:	6213      	str	r3, [r2, #32]
    // Line 25: USART1-wakeup
    // Line 26: USART2-wakeup
    // Line 28: LPUART1-wakeup
    // Line 29: LPTIM-wakeup

    EXTI->PR    = (1<<20) | (1<<29);
 800809a:	4b22      	ldr	r3, [pc, #136]	; (8008124 <platform_init_interruptor+0xb4>)
 800809c:	4a22      	ldr	r2, [pc, #136]	; (8008128 <platform_init_interruptor+0xb8>)
 800809e:	615a      	str	r2, [r3, #20]
    EXTI->IMR  |= (1<<20) | (1<<29);
 80080a0:	6818      	ldr	r0, [r3, #0]
 80080a2:	4310      	orrs	r0, r2
 80080a4:	6018      	str	r0, [r3, #0]
    EXTI->RTSR |= (1<<20) | (1<<29);
 80080a6:	6898      	ldr	r0, [r3, #8]
 80080a8:	4302      	orrs	r2, r0
 80080aa:	609a      	str	r2, [r3, #8]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80080ac:	4b1f      	ldr	r3, [pc, #124]	; (800812c <platform_init_interruptor+0xbc>)
 80080ae:	20c0      	movs	r0, #192	; 0xc0
 80080b0:	0080      	lsls	r0, r0, #2
 80080b2:	581a      	ldr	r2, [r3, r0]
 80080b4:	400a      	ands	r2, r1
 80080b6:	2480      	movs	r4, #128	; 0x80
 80080b8:	03e4      	lsls	r4, r4, #15
 80080ba:	4322      	orrs	r2, r4
 80080bc:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080be:	2204      	movs	r2, #4
 80080c0:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80080c2:	300c      	adds	r0, #12
 80080c4:	581a      	ldr	r2, [r3, r0]
 80080c6:	4f1a      	ldr	r7, [pc, #104]	; (8008130 <platform_init_interruptor+0xc0>)
 80080c8:	403a      	ands	r2, r7
 80080ca:	2580      	movs	r5, #128	; 0x80
 80080cc:	01ed      	lsls	r5, r5, #7
 80080ce:	432a      	orrs	r2, r5
 80080d0:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080d2:	2280      	movs	r2, #128	; 0x80
 80080d4:	0192      	lsls	r2, r2, #6
 80080d6:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80080d8:	22c1      	movs	r2, #193	; 0xc1
 80080da:	0092      	lsls	r2, r2, #2
 80080dc:	589e      	ldr	r6, [r3, r2]
 80080de:	403e      	ands	r6, r7
 80080e0:	4335      	orrs	r5, r6
 80080e2:	509d      	str	r5, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080e4:	2520      	movs	r5, #32
 80080e6:	601d      	str	r5, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80080e8:	589d      	ldr	r5, [r3, r2]
 80080ea:	4029      	ands	r1, r5
 80080ec:	430c      	orrs	r4, r1
 80080ee:	509c      	str	r4, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080f0:	2140      	movs	r1, #64	; 0x40
 80080f2:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80080f4:	5899      	ldr	r1, [r3, r2]
 80080f6:	0209      	lsls	r1, r1, #8
 80080f8:	0a09      	lsrs	r1, r1, #8
 80080fa:	2480      	movs	r4, #128	; 0x80
 80080fc:	05e4      	lsls	r4, r4, #23
 80080fe:	4321      	orrs	r1, r4
 8008100:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008102:	2180      	movs	r1, #128	; 0x80
 8008104:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008106:	581a      	ldr	r2, [r3, r0]
 8008108:	24ff      	movs	r4, #255	; 0xff
 800810a:	43a2      	bics	r2, r4
 800810c:	430a      	orrs	r2, r1
 800810e:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008110:	2280      	movs	r2, #128	; 0x80
 8008112:	0152      	lsls	r2, r2, #5
 8008114:	601a      	str	r2, [r3, #0]
//#   if defined(__USE_ADC1)
    NVIC_SetPriority(ADC1_COMP_IRQn, _HIPRI_GROUP);
    NVIC_EnableIRQ(ADC1_COMP_IRQn);
//#   endif

}
 8008116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008118:	40010000 	.word	0x40010000
 800811c:	e000ed00 	.word	0xe000ed00
 8008120:	ff00ffff 	.word	0xff00ffff
 8008124:	40010400 	.word	0x40010400
 8008128:	20100000 	.word	0x20100000
 800812c:	e000e100 	.word	0xe000e100
 8008130:	ffff00ff 	.word	0xffff00ff

08008134 <platform_poweron>:
void platform_poweron() {
 8008134:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8008136:	f3ef 8308 	mrs	r3, MSP
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800813a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800813e:	2302      	movs	r3, #2
 8008140:	f383 8814 	msr	CONTROL, r3
    __set_MSP( (ot_u32)&platform_ext.sstack[(OT_PARAM_SSTACK_ALLOC/4)-1] );
 8008144:	4c29      	ldr	r4, [pc, #164]	; (80081ec <platform_poweron+0xb8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8008146:	f384 8808 	msr	MSP, r4
    RCC->AHBENR     = (_CRYPCLK_N | _RNGCLK_N | _TOUCHCLK_N | _CRCCLK_N | _MIFCLK_N | _DMACLK_N);
 800814a:	4b29      	ldr	r3, [pc, #164]	; (80081f0 <platform_poweron+0xbc>)
 800814c:	4a29      	ldr	r2, [pc, #164]	; (80081f4 <platform_poweron+0xc0>)
 800814e:	631a      	str	r2, [r3, #48]	; 0x30
    RCC->AHBSMENR   = (_CRYPCLK_LP| _RNGCLK_LP| _TOUCHCLK_LP| _CRCCLK_LP| _MIFCLK_LP| _DMACLK_LP);
 8008150:	4a29      	ldr	r2, [pc, #164]	; (80081f8 <platform_poweron+0xc4>)
 8008152:	641a      	str	r2, [r3, #64]	; 0x40
    RCC->IOPENR     = _IOPENR_STARTUP;
 8008154:	4a29      	ldr	r2, [pc, #164]	; (80081fc <platform_poweron+0xc8>)
 8008156:	62da      	str	r2, [r3, #44]	; 0x2c
    RCC->APB2ENR   = (RCC_APB2ENR_DBGMCUEN | RCC_APB2ENR_SYSCFGEN);
 8008158:	4a29      	ldr	r2, [pc, #164]	; (8008200 <platform_poweron+0xcc>)
 800815a:	635a      	str	r2, [r3, #52]	; 0x34
    RCC->APB1ENR   = (RCC_APB1ENR_LPTIM1EN | RCC_APB1ENR_PWREN); 
 800815c:	2290      	movs	r2, #144	; 0x90
 800815e:	0612      	lsls	r2, r2, #24
 8008160:	639a      	str	r2, [r3, #56]	; 0x38
    PWR->CR    |= PWR_CR_PLS_LEV0 | PWR_CR_PVDE;  
 8008162:	4a28      	ldr	r2, [pc, #160]	; (8008204 <platform_poweron+0xd0>)
 8008164:	6813      	ldr	r3, [r2, #0]
 8008166:	2110      	movs	r1, #16
 8008168:	430b      	orrs	r3, r1
 800816a:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR     = (BOARD_EXTUART_TXPIN \
 800816c:	23a0      	movs	r3, #160	; 0xa0
 800816e:	05db      	lsls	r3, r3, #23
 8008170:	2285      	movs	r2, #133	; 0x85
 8008172:	0092      	lsls	r2, r2, #2
 8008174:	619a      	str	r2, [r3, #24]
    GPIOA->OTYPER   = (1 << (BOARD_LEDO_PINNUM)) \
 8008176:	22c0      	movs	r2, #192	; 0xc0
 8008178:	00d2      	lsls	r2, r2, #3
 800817a:	605a      	str	r2, [r3, #4]
    GPIOA->PUPDR    = (1 << (3*2)) \
 800817c:	4a22      	ldr	r2, [pc, #136]	; (8008208 <platform_poweron+0xd4>)
 800817e:	60da      	str	r2, [r3, #12]
    GPIOA->OSPEEDR  = (GPIO_OSPEEDR_10MHz << (0*2)) \
 8008180:	4a22      	ldr	r2, [pc, #136]	; (800820c <platform_poweron+0xd8>)
 8008182:	609a      	str	r2, [r3, #8]
    GPIOA->MODER    = (GPIO_MODER_ANALOG << (0*2)) \
 8008184:	4a22      	ldr	r2, [pc, #136]	; (8008210 <platform_poweron+0xdc>)
 8008186:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[0]   = (4 << (BOARD_EXTUART_TXPINNUM*4)) \
 8008188:	2288      	movs	r2, #136	; 0x88
 800818a:	01d2      	lsls	r2, r2, #7
 800818c:	621a      	str	r2, [r3, #32]
    GPIOB->BSRR     = (1 << (BOARD_I2C_SCLPINNUM)) | (1 << (BOARD_I2C_SDAPINNUM));
 800818e:	4b21      	ldr	r3, [pc, #132]	; (8008214 <platform_poweron+0xe0>)
 8008190:	22c0      	movs	r2, #192	; 0xc0
 8008192:	619a      	str	r2, [r3, #24]
    GPIOB->OTYPER   = (1 << (BOARD_I2C_SCLPINNUM)) | (1 << (BOARD_I2C_SDAPINNUM));
 8008194:	605a      	str	r2, [r3, #4]
    GPIOB->PUPDR    = (2 << (0*2)) \
 8008196:	3ab6      	subs	r2, #182	; 0xb6
 8008198:	60da      	str	r2, [r3, #12]
    GPIOB->OSPEEDR  = (GPIO_OSPEEDR_10MHz << (0*2)) \
 800819a:	4a1f      	ldr	r2, [pc, #124]	; (8008218 <platform_poweron+0xe4>)
 800819c:	609a      	str	r2, [r3, #8]
    GPIOB->MODER    = (GPIO_MODER_IN     << (0*2)) \
 800819e:	4a1f      	ldr	r2, [pc, #124]	; (800821c <platform_poweron+0xe8>)
 80081a0:	601a      	str	r2, [r3, #0]
	GPIOB->AFR[0]   = (1 << ((BOARD_I2C_SCLPINNUM)*4)) \
 80081a2:	2288      	movs	r2, #136	; 0x88
 80081a4:	0552      	lsls	r2, r2, #21
 80081a6:	621a      	str	r2, [r3, #32]
    GPIOC->MODER    = (GPIO_MODER_ANALOG << (0*2)) \
 80081a8:	4b1d      	ldr	r3, [pc, #116]	; (8008220 <platform_poweron+0xec>)
 80081aa:	4a1e      	ldr	r2, [pc, #120]	; (8008224 <platform_poweron+0xf0>)
 80081ac:	601a      	str	r2, [r3, #0]
    platform_init_periphclk();
 80081ae:	f7ff ff43 	bl	8008038 <platform_init_periphclk>
    platform_init_busclk();
 80081b2:	f7ff ff1d 	bl	8007ff0 <platform_init_busclk>
    DBGMCU->CR     |= ( DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
 80081b6:	4b1c      	ldr	r3, [pc, #112]	; (8008228 <platform_poweron+0xf4>)
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	2107      	movs	r1, #7
 80081bc:	430a      	orrs	r2, r1
 80081be:	605a      	str	r2, [r3, #4]
    DBGMCU->APB1FZ |= ( DBGMCU_APB1_FZ_DBG_TIM2_STOP \
 80081c0:	6899      	ldr	r1, [r3, #8]
 80081c2:	4a1a      	ldr	r2, [pc, #104]	; (800822c <platform_poweron+0xf8>)
 80081c4:	430a      	orrs	r2, r1
 80081c6:	609a      	str	r2, [r3, #8]
    DBGMCU->APB2FZ |= ( DBGMCU_APB2_FZ_DBG_TIM22_STOP \
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	2124      	movs	r1, #36	; 0x24
 80081cc:	430a      	orrs	r2, r1
 80081ce:	60da      	str	r2, [r3, #12]
    platform_init_interruptor();    // Interrupts OpenTag cares about
 80081d0:	f7ff ff4e 	bl	8008070 <platform_init_interruptor>
    systim_init(NULL);         // Initialize GPTIM (to 1024 Hz)
 80081d4:	2000      	movs	r0, #0
 80081d6:	f7ff fc9b 	bl	8007b10 <systim_init>
    vworm_init();
 80081da:	f000 fa15 	bl	8008608 <vworm_init>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80081de:	f3ef 8309 	mrs	r3, PSP
    platform_ext.task_exit = (void*)__get_PSP();
 80081e2:	4a13      	ldr	r2, [pc, #76]	; (8008230 <platform_poweron+0xfc>)
 80081e4:	4694      	mov	ip, r2
 80081e6:	4464      	add	r4, ip
 80081e8:	6023      	str	r3, [r4, #0]
}
 80081ea:	bd10      	pop	{r4, pc}
 80081ec:	200031e4 	.word	0x200031e4
 80081f0:	40021000 	.word	0x40021000
 80081f4:	00101101 	.word	0x00101101
 80081f8:	00100101 	.word	0x00100101
 80081fc:	00001187 	.word	0x00001187
 8008200:	00400001 	.word	0x00400001
 8008204:	40007000 	.word	0x40007000
 8008208:	02800040 	.word	0x02800040
 800820c:	3c28faaa 	.word	0x3c28faaa
 8008210:	e814a9a7 	.word	0xe814a9a7
 8008214:	50000400 	.word	0x50000400
 8008218:	0000aa0a 	.word	0x0000aa0a
 800821c:	ffffaff0 	.word	0xffffaff0
 8008220:	50000800 	.word	0x50000800
 8008224:	0fffffff 	.word	0x0fffffff
 8008228:	40015800 	.word	0x40015800
 800822c:	80601c11 	.word	0x80601c11
 8008230:	fffffbf0 	.word	0xfffffbf0

08008234 <SVC_Handler>:


/** KERNEL INTERRUPTS
  * =================
  */
void SVC_Handler(void) {
 8008234:	b510      	push	{r4, lr}
/// At present, the only protected system call is the call to the scheduler.
/// (sys_event_manager()).  Future system calls might make-use of the SVC
/// vectoring, however.
    sys_event_manager();
 8008236:	f7ff fb0d 	bl	8007854 <sys_event_manager>
       default: //sys_notify();
                break;  //goto SVC_Handler_eventmgr;
    }

#endif
}
 800823a:	bd10      	pop	{r4, pc}

0800823c <PendSV_Handler>:
/// PendSV ISR is issued if and only if some task or event is asynchronously
/// pre-empting the kernel.  It is invoked __only__ through platform_ot_preempt().
/// @note SV is for "Supervisor," not "Sport Veloce"

    // There is an erratum that PendSV bit is not adequately cleared in HW
    __CLR_PENDSV();
 800823c:	4a03      	ldr	r2, [pc, #12]	; (800824c <PendSV_Handler+0x10>)
 800823e:	6851      	ldr	r1, [r2, #4]
 8008240:	2380      	movs	r3, #128	; 0x80
 8008242:	051b      	lsls	r3, r3, #20
 8008244:	430b      	orrs	r3, r1
 8008246:	6053      	str	r3, [r2, #4]

    // SVC(0) runs the scheduler runtime in protected context
    __SEND_SVC(0);
 8008248:	df00      	svc	0
}
 800824a:	4770      	bx	lr
 800824c:	e000ed00 	.word	0xe000ed00

08008250 <platform_ot_preempt>:
/// Run the kernel scheduler by using system call.  If running a kernel task,
/// do not run the scheduler (we check this by inspecting the KTIM interrupt
/// enabler bit), as the ktask will run to completion and do the call in its
/// own context (platform_ot_run()).

    if (platform_ext.task_exit == NULL)
 8008250:	4b05      	ldr	r3, [pc, #20]	; (8008268 <platform_ot_preempt+0x18>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d000      	beq.n	800825a <platform_ot_preempt+0xa>
        __SET_PENDSV();
}
 8008258:	4770      	bx	lr
        __SET_PENDSV();
 800825a:	4a04      	ldr	r2, [pc, #16]	; (800826c <platform_ot_preempt+0x1c>)
 800825c:	6851      	ldr	r1, [r2, #4]
 800825e:	2380      	movs	r3, #128	; 0x80
 8008260:	055b      	lsls	r3, r3, #21
 8008262:	430b      	orrs	r3, r1
 8008264:	6053      	str	r3, [r2, #4]
}
 8008266:	e7f7      	b.n	8008258 <platform_ot_preempt+0x8>
 8008268:	20002dd4 	.word	0x20002dd4
 800826c:	e000ed00 	.word	0xe000ed00

08008270 <platform_ot_run>:
#endif



#ifndef EXTF_platform_ot_run
OT_INLINE void platform_ot_run() {
 8008270:	b510      	push	{r4, lr}

    /// 1. Run the Scheduler.  The scheduler will issue a PendSV if there is a
    /// threaded task, in which case the P-stack will get changed to that
    /// thread, and the code after this call will not run until all threads are
    /// dormant.
    platform_enable_interrupts();
 8008272:	f7ff fe3b 	bl	8007eec <platform_enable_interrupts>
    __SEND_SVC(0);
 8008276:	df00      	svc	0

    /// 2. When the PC is here, it means that a kernel task has been scheduled
    ///    or that no task is scheduled.  If no task is scheduled, then it is
    ///    time to go to sleep.  sys_powerdown() MUST re-enable interrupts
    ///    immediately before issuing WFI instruction.
    while (systim.flags & GPTIM_FLAG_SLEEP) {
 8008278:	e004      	b.n	8008284 <platform_ot_run+0x14>
        platform_disable_interrupts();
 800827a:	f7ff fe35 	bl	8007ee8 <platform_disable_interrupts>
        //systim_enable();                // LPTIM must be always running
        sys_powerdown();
 800827e:	f7ff faa5 	bl	80077cc <sys_powerdown>
        
        // At this point, system has just woke-up from sleep.  
        // The wakeup ISR must clear GPTIM_FLAG_SLEEP if task scheduling is to continue
        __NOP();
 8008282:	46c0      	nop			; (mov r8, r8)
    while (systim.flags & GPTIM_FLAG_SLEEP) {
 8008284:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <platform_ot_run+0x48>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	07db      	lsls	r3, r3, #31
 800828a:	d4f6      	bmi.n	800827a <platform_ot_run+0xa>
    }
    
    /// 3. Stop the backup timer, which is used as a kernel watchdog.
    platform_disable_interrupts();
 800828c:	f7ff fe2c 	bl	8007ee8 <platform_disable_interrupts>
    systim_stop_ticker();
 8008290:	f7ff fcde 	bl	8007c50 <systim_stop_ticker>
 8008294:	f3ef 8309 	mrs	r3, PSP
    ///    onto this position.  If the task is killed during its runtime, this
    ///    data will be used to reset the P-stack and PC.
    ///@note this code only works with GCC-based compilers.  The && operator
    /// ahead of the label is a label-reference, and it is a GCC feature.
    {   register ot_u32 return_from_task;
        platform_ext.task_exit  = (void*)__get_PSP();
 8008298:	4c08      	ldr	r4, [pc, #32]	; (80082bc <platform_ot_run+0x4c>)
 800829a:	6023      	str	r3, [r4, #0]
        return_from_task        = (ot_u32)&&RETURN_FROM_TASK;
 800829c:	4b08      	ldr	r3, [pc, #32]	; (80082c0 <platform_ot_run+0x50>)
        asm volatile ("PUSH {%0}" : : "r"(return_from_task) );
 800829e:	b408      	push	{r3}
    }

    /// 5. Run the Tasking Engine.  It will call the ktask or switch to the
    /// thread, as needed based on what is scheduled.
    platform_enable_interrupts();
 80082a0:	f7ff fe24 	bl	8007eec <platform_enable_interrupts>
    sys_run_task();
 80082a4:	f7ff fb28 	bl	80078f8 <sys_run_task>

    /// 6. In any condition, retract the stack to a known, stable condition.
    /// If the task/thread exited cleanly, this changes nothing.  If killed,
    /// this will flush the stack.
    RETURN_FROM_TASK:
    platform_disable_interrupts();
 80082a8:	f7ff fe1e 	bl	8007ee8 <platform_disable_interrupts>
    __set_PSP( (ot_u32)platform_ext.task_exit );
 80082ac:	6823      	ldr	r3, [r4, #0]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80082ae:	f383 8809 	msr	PSP, r3
    platform_ext.task_exit = NULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	6023      	str	r3, [r4, #0]
}
 80082b6:	bd10      	pop	{r4, pc}
 80082b8:	20002dcc 	.word	0x20002dcc
 80082bc:	20002dd4 	.word	0x20002dd4
 80082c0:	080082a8 	.word	0x080082a8

080082c4 <WWDG_IRQHandler>:



#ifndef EXTF_WWDG_IRQHandler
void WWDG_IRQHandler(void) {
}
 80082c4:	4770      	bx	lr

080082c6 <sx127x_cadpin_ishigh>:
#if defined(_READY_PIN)
inline ot_uint sx127x_readypin_ishigh(void)   { return (_READY_PORT->IDR & _READY_PIN); }
#endif

// CAD-Detect may be implemented on DIO1
inline ot_uint sx127x_cadpin_ishigh(void)     { return (_CAD_DETECT_PORT->IDR & _CAD_DETECT_PIN); }
 80082c6:	23a0      	movs	r3, #160	; 0xa0
 80082c8:	05db      	lsls	r3, r3, #23
 80082ca:	6918      	ldr	r0, [r3, #16]
 80082cc:	2380      	movs	r3, #128	; 0x80
 80082ce:	011b      	lsls	r3, r3, #4
 80082d0:	4018      	ands	r0, r3
 80082d2:	4770      	bx	lr

080082d4 <sx127x_getbasepwr>:


ot_u8 sx127x_getbasepwr() {
/// Base Power code: 0-3.  For this SX127x impl it's always 3.
    return 3;
}
 80082d4:	2003      	movs	r0, #3
 80082d6:	4770      	bx	lr

080082d8 <sx127x_reset>:


/** Bus interface (SPI + 2x GPIO) <BR>
  * ========================================================================
  */
void sx127x_reset() {
 80082d8:	b570      	push	{r4, r5, r6, lr}
/// - this sequence is taken from Semtech's implementation
/// - it doesn't agree 100% with documentation, namely how output/input shift occurs

    // Set Reset pin to Output, and set high
    {   ot_u32 moder;
        moder   = BOARD_RFCTL_RESETPORT->MODER;  
 80082da:	24a0      	movs	r4, #160	; 0xa0
 80082dc:	05e4      	lsls	r4, r4, #23
 80082de:	6822      	ldr	r2, [r4, #0]
        moder  &= ~(3 << (BOARD_RFCTL_RESETPINNUM*2));
 80082e0:	4d09      	ldr	r5, [pc, #36]	; (8008308 <sx127x_reset+0x30>)
 80082e2:	402a      	ands	r2, r5
        moder  |= (GPIO_MODER_OUT << (BOARD_RFCTL_RESETPINNUM*2));
 80082e4:	2380      	movs	r3, #128	; 0x80
 80082e6:	025b      	lsls	r3, r3, #9
 80082e8:	4313      	orrs	r3, r2
        
        BOARD_RFCTL_RESETPORT->MODER    = moder;
 80082ea:	6023      	str	r3, [r4, #0]
        BOARD_RFCTL_RESETPORT->BSRR     = BOARD_RFCTL_RESETPIN;
 80082ec:	2380      	movs	r3, #128	; 0x80
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	61a3      	str	r3, [r4, #24]
    }
    delay_us(1200);   //wait ~120 us
 80082f2:	2096      	movs	r0, #150	; 0x96
 80082f4:	00c0      	lsls	r0, r0, #3
 80082f6:	f000 f8dd 	bl	80084b4 <delay_us>
    
    // Set Reset pin to Input, floating
    BOARD_RFCTL_RESETPORT->MODER &= ~(3 << (BOARD_RFCTL_RESETPINNUM*2));
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	402b      	ands	r3, r5
 80082fe:	6023      	str	r3, [r4, #0]

    // wait ~6ms
    delay_ti(6);    // wait ~6ms 
 8008300:	2006      	movs	r0, #6
 8008302:	f000 f8d3 	bl	80084ac <delay_ti>
}
 8008306:	bd70      	pop	{r4, r5, r6, pc}
 8008308:	fffcffff 	.word	0xfffcffff

0800830c <sx127x_init_bus>:


void sx127x_init_bus() {
 800830c:	b510      	push	{r4, lr}
    sx127x.clkreq = False;
#   endif

    ///1. Do a Reset.  
    ///@todo precede this with POR
    sx127x_reset();
 800830e:	f7ff ffe3 	bl	80082d8 <sx127x_reset>
    ///2. Set-up DMA to work with SPI.  The DMA is bound to the SPI and it is
    ///   used for Duplex TX+RX.  The DMA RX Channel is used as an EVENT.  The
    ///   STM32L can do in-context naps using EVENTS.  To enable the EVENT, we
    ///   enable the DMA RX interrupt bit, but not the NVIC.
    BOARD_DMA_CLKON();
    _DMARX->CMAR    = (ot_u32)&sx127x.busrx[-1];
 8008312:	4a0c      	ldr	r2, [pc, #48]	; (8008344 <sx127x_init_bus+0x38>)
 8008314:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <sx127x_init_bus+0x3c>)
 8008316:	60d3      	str	r3, [r2, #12]
    _DMARX->CPAR    = (ot_u32)&RADIO_SPI->DR;
 8008318:	4b0c      	ldr	r3, [pc, #48]	; (800834c <sx127x_init_bus+0x40>)
 800831a:	6093      	str	r3, [r2, #8]
    _DMATX->CPAR    = (ot_u32)&RADIO_SPI->DR;
 800831c:	4a0c      	ldr	r2, [pc, #48]	; (8008350 <sx127x_init_bus+0x44>)
 800831e:	6093      	str	r3, [r2, #8]
    ///
    /// However, here we set the EXTI lines to the rising edge triggers we need
    /// and configure the NVIC.  Eventually, the NVIC stuff might be done in
    /// the platform module JUST FOR EXTI interrupts though.

    EXTI->PR    =  RFI_ALL;         //clear flag bits
 8008320:	4b0c      	ldr	r3, [pc, #48]	; (8008354 <sx127x_init_bus+0x48>)
 8008322:	4a0d      	ldr	r2, [pc, #52]	; (8008358 <sx127x_init_bus+0x4c>)
 8008324:	615a      	str	r2, [r3, #20]
    EXTI->IMR  &= ~RFI_ALL;         //clear interrupt enablers
 8008326:	6818      	ldr	r0, [r3, #0]
 8008328:	4c0c      	ldr	r4, [pc, #48]	; (800835c <sx127x_init_bus+0x50>)
 800832a:	4020      	ands	r0, r4
 800832c:	6018      	str	r0, [r3, #0]
    EXTI->EMR  &= ~RFI_ALL;         //clear event enablers
 800832e:	6859      	ldr	r1, [r3, #4]
 8008330:	4021      	ands	r1, r4
 8008332:	6059      	str	r1, [r3, #4]

    // All IRQ pins are rising edge detect
    EXTI->RTSR |= (RFI_SOURCE0 | RFI_SOURCE1 | RFI_SOURCE2 | RFI_SOURCE3);
 8008334:	6899      	ldr	r1, [r3, #8]
 8008336:	430a      	orrs	r2, r1
 8008338:	609a      	str	r2, [r3, #8]
#       endif
#   endif
    
    /// 4. Put SX127x to sleep
    //delay_ti(6);    // wait ~6ms 
    sx127x_strobe(_OPMODE_SLEEP, True);
 800833a:	2101      	movs	r1, #1
 800833c:	2000      	movs	r0, #0
 800833e:	f7f8 fedb 	bl	80010f8 <sx127x_strobe>
}
 8008342:	bd10      	pop	{r4, pc}
 8008344:	4002001c 	.word	0x4002001c
 8008348:	20002206 	.word	0x20002206
 800834c:	4001300c 	.word	0x4001300c
 8008350:	40020030 	.word	0x40020030
 8008354:	40010400 	.word	0x40010400
 8008358:	00001802 	.word	0x00001802
 800835c:	ffffe7fd 	.word	0xffffe7fd

08008360 <sx127x_spibus_io>:
}




void sx127x_spibus_io(ot_u8 cmd_len, ot_u8 resp_len, const ot_u8* cmd) {
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	0004      	movs	r4, r0
 8008364:	000e      	movs	r6, r1
 8008366:	0015      	movs	r5, r2
///@note BOARD_DMA_CLKON() must be defined in the board support header as a
/// macro or inline function.  As the board may be using DMA for numerous
/// peripherals, we cannot assume in this module if it is appropriate to turn-
/// off the DMA for all other modules.

    platform_disable_interrupts();
 8008368:	f7ff fdbe 	bl	8007ee8 <platform_disable_interrupts>
    __SPI_CLKON();
 800836c:	4a30      	ldr	r2, [pc, #192]	; (8008430 <sx127x_spibus_io+0xd0>)
 800836e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8008370:	2380      	movs	r3, #128	; 0x80
 8008372:	015b      	lsls	r3, r3, #5
 8008374:	430b      	orrs	r3, r1
 8008376:	6353      	str	r3, [r2, #52]	; 0x34
    __SPI_ENABLE();
 8008378:	4b2e      	ldr	r3, [pc, #184]	; (8008434 <sx127x_spibus_io+0xd4>)
 800837a:	2203      	movs	r2, #3
 800837c:	605a      	str	r2, [r3, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	609a      	str	r2, [r3, #8]
 8008382:	22d1      	movs	r2, #209	; 0xd1
 8008384:	0092      	lsls	r2, r2, #2
 8008386:	601a      	str	r2, [r3, #0]
    __SPI_CS_ON();
 8008388:	23a0      	movs	r3, #160	; 0xa0
 800838a:	05db      	lsls	r3, r3, #23
 800838c:	2210      	movs	r2, #16
 800838e:	629a      	str	r2, [r3, #40]	; 0x28
    spi_moder   = GPIOA->MODER;
 8008390:	681a      	ldr	r2, [r3, #0]
    spi_moder  &= ~((3 << (BOARD_RFSPI_MISOPINNUM*2)) \
 8008392:	4929      	ldr	r1, [pc, #164]	; (8008438 <sx127x_spibus_io+0xd8>)
 8008394:	4011      	ands	r1, r2
    spi_moder  |= (GPIO_MODER_ALT << (BOARD_RFSPI_MISOPINNUM*2)) \
 8008396:	22a8      	movs	r2, #168	; 0xa8
 8008398:	0212      	lsls	r2, r2, #8
 800839a:	430a      	orrs	r2, r1
    GPIOA->MODER = spi_moder;
 800839c:	601a      	str	r2, [r3, #0]
    /// module buffer.  If doing a read, the garbage data getting duplexed onto
    /// TX doesn't affect the SX127x.  If doing a write, simply disregard the
    /// RX duplexed data.
    BOARD_RFSPI_CLKON();
    BOARD_DMA_CLKON();
    __DMA_CLEAR_IFG();
 800839e:	4b27      	ldr	r3, [pc, #156]	; (800843c <sx127x_spibus_io+0xdc>)
 80083a0:	22ff      	movs	r2, #255	; 0xff
 80083a2:	0112      	lsls	r2, r2, #4
 80083a4:	605a      	str	r2, [r3, #4]
    cmd_len        += resp_len;
 80083a6:	19a4      	adds	r4, r4, r6
 80083a8:	b2e4      	uxtb	r4, r4
    _DMARX->CNDTR   = cmd_len;
 80083aa:	4825      	ldr	r0, [pc, #148]	; (8008440 <sx127x_spibus_io+0xe0>)
 80083ac:	6044      	str	r4, [r0, #4]
    _DMATX->CNDTR   = cmd_len;
 80083ae:	4b25      	ldr	r3, [pc, #148]	; (8008444 <sx127x_spibus_io+0xe4>)
 80083b0:	605c      	str	r4, [r3, #4]
    _DMATX->CMAR    = (ot_u32)cmd;
 80083b2:	60dd      	str	r5, [r3, #12]
    __DMA_ENABLE();
 80083b4:	4c24      	ldr	r4, [pc, #144]	; (8008448 <sx127x_spibus_io+0xe8>)
 80083b6:	6822      	ldr	r2, [r4, #0]
 80083b8:	4924      	ldr	r1, [pc, #144]	; (800844c <sx127x_spibus_io+0xec>)
 80083ba:	4011      	ands	r1, r2
 80083bc:	2288      	movs	r2, #136	; 0x88
 80083be:	0052      	lsls	r2, r2, #1
 80083c0:	430a      	orrs	r2, r1
 80083c2:	6022      	str	r2, [r4, #0]
 80083c4:	4a22      	ldr	r2, [pc, #136]	; (8008450 <sx127x_spibus_io+0xf0>)
 80083c6:	6002      	str	r2, [r0, #0]
 80083c8:	6819      	ldr	r1, [r3, #0]
 80083ca:	4a22      	ldr	r2, [pc, #136]	; (8008454 <sx127x_spibus_io+0xf4>)
 80083cc:	430a      	orrs	r2, r1
 80083ce:	601a      	str	r2, [r3, #0]
    /// WFE only works on EXTI line interrupts, as far as I can test. 
    /// So do busywait until DMA is done RX-ing
    //do {
        //__WFE();
    //}
    while((DMA1->ISR & _DMARX_IFG) == 0);
 80083d0:	4b1a      	ldr	r3, [pc, #104]	; (800843c <sx127x_spibus_io+0xdc>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	069b      	lsls	r3, r3, #26
 80083d6:	d5fb      	bpl.n	80083d0 <sx127x_spibus_io+0x70>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083d8:	4a1f      	ldr	r2, [pc, #124]	; (8008458 <sx127x_spibus_io+0xf8>)
 80083da:	23c0      	movs	r3, #192	; 0xc0
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	2180      	movs	r1, #128	; 0x80
 80083e0:	00c9      	lsls	r1, r1, #3
 80083e2:	50d1      	str	r1, [r2, r3]
    __DMA_CLEAR_IRQ();
    __DMA_CLEAR_IFG();
 80083e4:	4b15      	ldr	r3, [pc, #84]	; (800843c <sx127x_spibus_io+0xdc>)
 80083e6:	22ff      	movs	r2, #255	; 0xff
 80083e8:	0112      	lsls	r2, r2, #4
 80083ea:	605a      	str	r2, [r3, #4]
    __DMA_DISABLE();
 80083ec:	4a16      	ldr	r2, [pc, #88]	; (8008448 <sx127x_spibus_io+0xe8>)
 80083ee:	6813      	ldr	r3, [r2, #0]
 80083f0:	4916      	ldr	r1, [pc, #88]	; (800844c <sx127x_spibus_io+0xec>)
 80083f2:	400b      	ands	r3, r1
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	2300      	movs	r3, #0
 80083f8:	4a11      	ldr	r2, [pc, #68]	; (8008440 <sx127x_spibus_io+0xe0>)
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	4a11      	ldr	r2, [pc, #68]	; (8008444 <sx127x_spibus_io+0xe4>)
 80083fe:	6013      	str	r3, [r2, #0]

    /// Turn-off and disable SPI to save energy
    __SPI_CS_OFF();
 8008400:	23a0      	movs	r3, #160	; 0xa0
 8008402:	05db      	lsls	r3, r3, #23
 8008404:	2210      	movs	r2, #16
 8008406:	619a      	str	r2, [r3, #24]
    __SPI_DISABLE();
 8008408:	4a0a      	ldr	r2, [pc, #40]	; (8008434 <sx127x_spibus_io+0xd4>)
 800840a:	21c1      	movs	r1, #193	; 0xc1
 800840c:	0089      	lsls	r1, r1, #2
 800840e:	6011      	str	r1, [r2, #0]
    __SPI_CLKOFF();
 8008410:	4907      	ldr	r1, [pc, #28]	; (8008430 <sx127x_spibus_io+0xd0>)
 8008412:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8008414:	4811      	ldr	r0, [pc, #68]	; (800845c <sx127x_spibus_io+0xfc>)
 8008416:	4002      	ands	r2, r0
 8008418:	634a      	str	r2, [r1, #52]	; 0x34
    spi_moder   = GPIOA->MODER;
 800841a:	681a      	ldr	r2, [r3, #0]
    spi_moder  &= ~((3 << (BOARD_RFSPI_MISOPINNUM*2)) \
 800841c:	4906      	ldr	r1, [pc, #24]	; (8008438 <sx127x_spibus_io+0xd8>)
 800841e:	4011      	ands	r1, r2
    spi_moder  |= (GPIO_MODER_IN << (BOARD_RFSPI_MISOPINNUM*2)) \
 8008420:	2288      	movs	r2, #136	; 0x88
 8008422:	01d2      	lsls	r2, r2, #7
 8008424:	430a      	orrs	r2, r1
    GPIOA->MODER = spi_moder;
 8008426:	601a      	str	r2, [r3, #0]
    BOARD_DMA_CLKOFF();
    BOARD_RFSPI_CLKOFF();
    platform_enable_interrupts();
 8008428:	f7ff fd60 	bl	8007eec <platform_enable_interrupts>
}
 800842c:	bd70      	pop	{r4, r5, r6, pc}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	40021000 	.word	0x40021000
 8008434:	40013000 	.word	0x40013000
 8008438:	ffff03ff 	.word	0xffff03ff
 800843c:	40020000 	.word	0x40020000
 8008440:	4002001c 	.word	0x4002001c
 8008444:	40020030 	.word	0x40020030
 8008448:	400200a8 	.word	0x400200a8
 800844c:	fffff00f 	.word	0xfffff00f
 8008450:	00003083 	.word	0x00003083
 8008454:	00003091 	.word	0x00003091
 8008458:	e000e100 	.word	0xe000e100
 800845c:	ffffefff 	.word	0xffffefff

08008460 <sx127x_antsw_off>:

void sx127x_antsw_off(void) {
#   if (defined(__SX127x_PABOOST__) || defined(__SX127x_TXSW__) || defined(__SX127x_RXSW__))
    BOARD_RFANT_OFF();
#   endif
}
 8008460:	4770      	bx	lr

08008462 <sx127x_antsw_on>:

void sx127x_antsw_on(void) {
#   if (defined(__SX127x_PABOOST__) || defined(__SX127x_TXSW__) || defined(__SX127x_RXSW__))
    BOARD_RFANT_ON();
#   endif
}
 8008462:	4770      	bx	lr

08008464 <sx127x_antsw_tx>:
void sx127x_antsw_tx(ot_bool use_paboost) {
#   if (defined(__SX127x_PABOOST__) || defined(__SX127x_TXSW__))
    sx127x_antsw_on();
    BOARD_RFANT_TX(use_paboost);
#   endif
}
 8008464:	4770      	bx	lr

08008466 <sx127x_antsw_rx>:
void sx127x_antsw_rx(void) {
#   if defined(__SX127x_RXSW__)
    sx127x_antsw_on();
    BOARD_RFANT_RX();
#   endif
}
 8008466:	4770      	bx	lr

08008468 <sx127x_int_config>:



void sx127x_int_config(ot_u32 ie_sel) {
    ot_u32 scratch;
    EXTI->PR    = (ot_u32)RFI_ALL;
 8008468:	4a04      	ldr	r2, [pc, #16]	; (800847c <sx127x_int_config+0x14>)
 800846a:	4b05      	ldr	r3, [pc, #20]	; (8008480 <sx127x_int_config+0x18>)
 800846c:	6153      	str	r3, [r2, #20]
    scratch     = EXTI->IMR;
 800846e:	6813      	ldr	r3, [r2, #0]
    scratch    &= ~((ot_u32)RFI_ALL);
 8008470:	4904      	ldr	r1, [pc, #16]	; (8008484 <sx127x_int_config+0x1c>)
 8008472:	400b      	ands	r3, r1
    scratch    |= ie_sel;
 8008474:	4318      	orrs	r0, r3
    EXTI->IMR   = scratch;
 8008476:	6010      	str	r0, [r2, #0]
}
 8008478:	4770      	bx	lr
 800847a:	46c0      	nop			; (mov r8, r8)
 800847c:	40010400 	.word	0x40010400
 8008480:	00001802 	.word	0x00001802
 8008484:	ffffe7fd 	.word	0xffffe7fd

08008488 <sx127x_int_clearall>:

inline void sx127x_int_clearall(void) {
    EXTI->PR = RFI_ALL;
 8008488:	4b01      	ldr	r3, [pc, #4]	; (8008490 <sx127x_int_clearall+0x8>)
 800848a:	4a02      	ldr	r2, [pc, #8]	; (8008494 <sx127x_int_clearall+0xc>)
 800848c:	615a      	str	r2, [r3, #20]
}
 800848e:	4770      	bx	lr
 8008490:	40010400 	.word	0x40010400
 8008494:	00001802 	.word	0x00001802

08008498 <delay_ms>:


#ifndef EXTF_delay_ms
void delay_ms(ot_u16 n) {
    ot_long c;
    c   = (platform_ext.clock_hz[0]>>10);   // Set cycles per ms
 8008498:	4b03      	ldr	r3, [pc, #12]	; (80084a8 <delay_ms+0x10>)
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	0a9b      	lsrs	r3, r3, #10
    c  *= n;                                // Multiply by number of ms
 800849e:	4358      	muls	r0, r3
    do {
        c -= 7;                         // 7 cycles per loop (measured)
 80084a0:	3807      	subs	r0, #7
    } while (c > 0);
 80084a2:	2800      	cmp	r0, #0
 80084a4:	dcfc      	bgt.n	80084a0 <delay_ms+0x8>
}
 80084a6:	4770      	bx	lr
 80084a8:	20002dd4 	.word	0x20002dd4

080084ac <delay_ti>:
void delay_ti(ot_u16 n) {
 80084ac:	b510      	push	{r4, lr}
    delay_ms(n);
 80084ae:	f7ff fff3 	bl	8008498 <delay_ms>
}
 80084b2:	bd10      	pop	{r4, pc}

080084b4 <delay_us>:
#endif


#ifndef EXTF_delay_us
void delay_us(ot_u16 n) {
 80084b4:	0003      	movs	r3, r0
    ot_long c;
    c   = (platform_ext.clock_hz[0]>>10);   // Set cycles per ms
 80084b6:	4a04      	ldr	r2, [pc, #16]	; (80084c8 <delay_us+0x14>)
 80084b8:	6850      	ldr	r0, [r2, #4]
 80084ba:	0a80      	lsrs	r0, r0, #10
    c  *= n;                                // Multiply by number of us
 80084bc:	4358      	muls	r0, r3
    c >>= 10;                               // Divide into cycles per us
 80084be:	1280      	asrs	r0, r0, #10
    do {
        c -= 7;                         // 7 cycles per loop (measured)
 80084c0:	3807      	subs	r0, #7
    } while (c > 0);
 80084c2:	2800      	cmp	r0, #0
 80084c4:	dcfc      	bgt.n	80084c0 <delay_us+0xc>
}
 80084c6:	4770      	bx	lr
 80084c8:	20002dd4 	.word	0x20002dd4

080084cc <sub_memcpy_dma>:


#if MCU_CONFIG(MEMCPYDMA)
#   define MEMCPY_DMA_INT  (1 << ((MEMCPY_DMA_CHAN_ID-1)*4))

void sub_memcpy_dma(ot_u8* dest, ot_u8* src, ot_uint length) {
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	0004      	movs	r4, r0
 80084d0:	000e      	movs	r6, r1
 80084d2:	0015      	movs	r5, r2
/// Use 8, 16, or 32 bit chunks based on detected alignment
    static const ot_u16 ccr[4]      = { 0x4AD1, 0x40D1, 0x45D1, 0x40D1 };
    static const ot_u16 len_div[4]  = { 2, 0, 1, 0 };
    ot_int align;

    platform_disable_interrupts();
 80084d4:	f7ff fd08 	bl	8007ee8 <platform_disable_interrupts>

    MEMCPY_DMACHAN->CCR     = 0;
 80084d8:	4a0f      	ldr	r2, [pc, #60]	; (8008518 <sub_memcpy_dma+0x4c>)
 80084da:	2300      	movs	r3, #0
 80084dc:	6013      	str	r3, [r2, #0]
    MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;
 80084de:	4b0f      	ldr	r3, [pc, #60]	; (800851c <sub_memcpy_dma+0x50>)
 80084e0:	2180      	movs	r1, #128	; 0x80
 80084e2:	0449      	lsls	r1, r1, #17
 80084e4:	6059      	str	r1, [r3, #4]
    MEMCPY_DMACHAN->CPAR    = (ot_u32)dest;
 80084e6:	6094      	str	r4, [r2, #8]
    MEMCPY_DMACHAN->CMAR    = (ot_u32)src;
 80084e8:	60d6      	str	r6, [r2, #12]
    align                   = ((ot_u32)dest | (ot_u32)src | (ot_u32)length) & 3;
 80084ea:	4334      	orrs	r4, r6
 80084ec:	b2a4      	uxth	r4, r4
 80084ee:	432c      	orrs	r4, r5
 80084f0:	b224      	sxth	r4, r4
 80084f2:	2303      	movs	r3, #3
 80084f4:	401c      	ands	r4, r3
    length                >>= len_div[align];
 80084f6:	4b0a      	ldr	r3, [pc, #40]	; (8008520 <sub_memcpy_dma+0x54>)
 80084f8:	0064      	lsls	r4, r4, #1
 80084fa:	5ae1      	ldrh	r1, [r4, r3]
 80084fc:	410d      	asrs	r5, r1
    MEMCPY_DMACHAN->CNDTR   = length;
 80084fe:	042d      	lsls	r5, r5, #16
 8008500:	0c2d      	lsrs	r5, r5, #16
 8008502:	6055      	str	r5, [r2, #4]
    MEMCPY_DMACHAN->CCR     = ccr[align];
 8008504:	191c      	adds	r4, r3, r4
 8008506:	8923      	ldrh	r3, [r4, #8]
 8008508:	6013      	str	r3, [r2, #0]
    while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 800850a:	4b04      	ldr	r3, [pc, #16]	; (800851c <sub_memcpy_dma+0x50>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	01db      	lsls	r3, r3, #7
 8008510:	d5fb      	bpl.n	800850a <sub_memcpy_dma+0x3e>

    platform_enable_interrupts();
 8008512:	f7ff fceb 	bl	8007eec <platform_enable_interrupts>
}
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	40020080 	.word	0x40020080
 800851c:	40020000 	.word	0x40020000
 8008520:	0800a690 	.word	0x0800a690

08008524 <sub_memcpy4_dma>:

    platform_enable_interrupts();
}


void sub_memcpy4_dma(ot_u32* dest, ot_u32* src, ot_uint length) {
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	0006      	movs	r6, r0
 8008528:	000d      	movs	r5, r1
 800852a:	0014      	movs	r4, r2
/// 32 bit chunks based on detected alignment
    platform_disable_interrupts();
 800852c:	f7ff fcdc 	bl	8007ee8 <platform_disable_interrupts>

    MEMCPY_DMACHAN->CCR     = 0;
 8008530:	4b09      	ldr	r3, [pc, #36]	; (8008558 <sub_memcpy4_dma+0x34>)
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]
    MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;
 8008536:	4a09      	ldr	r2, [pc, #36]	; (800855c <sub_memcpy4_dma+0x38>)
 8008538:	2180      	movs	r1, #128	; 0x80
 800853a:	0449      	lsls	r1, r1, #17
 800853c:	6051      	str	r1, [r2, #4]
    MEMCPY_DMACHAN->CPAR    = (ot_u32)dest;
 800853e:	609e      	str	r6, [r3, #8]
    MEMCPY_DMACHAN->CMAR    = (ot_u32)src;
 8008540:	60dd      	str	r5, [r3, #12]
    MEMCPY_DMACHAN->CNDTR   = length;
 8008542:	605c      	str	r4, [r3, #4]
    MEMCPY_DMACHAN->CCR     = 0x4AD1;
 8008544:	4a06      	ldr	r2, [pc, #24]	; (8008560 <sub_memcpy4_dma+0x3c>)
 8008546:	601a      	str	r2, [r3, #0]
    while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 8008548:	4b04      	ldr	r3, [pc, #16]	; (800855c <sub_memcpy4_dma+0x38>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	01db      	lsls	r3, r3, #7
 800854e:	d5fb      	bpl.n	8008548 <sub_memcpy4_dma+0x24>

    platform_enable_interrupts();
 8008550:	f7ff fccc 	bl	8007eec <platform_enable_interrupts>
}
 8008554:	bd70      	pop	{r4, r5, r6, pc}
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	40020080 	.word	0x40020080
 800855c:	40020000 	.word	0x40020000
 8008560:	00004ad1 	.word	0x00004ad1

08008564 <ot_memcpy>:
#endif  //MCU_CONFIG(MEMCPYDMA)




void ot_memcpy(ot_u8* dst, ot_u8* src, ot_uint length) {
 8008564:	b510      	push	{r4, lr}
    if (length != 0) {
 8008566:	2a00      	cmp	r2, #0
 8008568:	d100      	bne.n	800856c <ot_memcpy+0x8>
        sub_memcpy_dma(dst, src, length);
#       else
        DUFF_DEVICE_8(*dst++, *src++, length);
#       endif
    }
}
 800856a:	bd10      	pop	{r4, pc}
        sub_memcpy_dma(dst, src, length);
 800856c:	f7ff ffae 	bl	80084cc <sub_memcpy_dma>
}
 8008570:	e7fb      	b.n	800856a <ot_memcpy+0x6>

08008572 <ot_memcpy_4>:
        ot_memcpy((ot_u8*)dst, (ot_u8*)src, length<<1);
#       endif
    }
}

void ot_memcpy_4(ot_u32* dst, ot_u32* src, ot_uint length) {
 8008572:	b510      	push	{r4, lr}
    if (length != 0) {
 8008574:	2a00      	cmp	r2, #0
 8008576:	d100      	bne.n	800857a <ot_memcpy_4+0x8>
        sub_memcpy4_dma( dst, src, length);
#       else
        ot_memcpy((ot_u8*)dst, (ot_u8*)src, length<<2);
#       endif
    }
}
 8008578:	bd10      	pop	{r4, pc}
        sub_memcpy4_dma( dst, src, length);
 800857a:	f7ff ffd3 	bl	8008524 <sub_memcpy4_dma>
}
 800857e:	e7fb      	b.n	8008578 <ot_memcpy_4+0x6>

08008580 <ot_memset>:


void ot_memset(ot_u8* dst, ot_u8 value, ot_uint length) {
 8008580:	b530      	push	{r4, r5, lr}
 8008582:	b083      	sub	sp, #12
 8008584:	0005      	movs	r5, r0
 8008586:	1e14      	subs	r4, r2, #0
 8008588:	466b      	mov	r3, sp
 800858a:	71d9      	strb	r1, [r3, #7]
    if (length != 0) {
 800858c:	d101      	bne.n	8008592 <ot_memset+0x12>
#       else
        DUFF_DEVICE_8(*dst++, value, length);
#       endif
        platform_enable_interrupts();
    }
}
 800858e:	b003      	add	sp, #12
 8008590:	bd30      	pop	{r4, r5, pc}
        platform_disable_interrupts();
 8008592:	f7ff fca9 	bl	8007ee8 <platform_disable_interrupts>
        MEMCPY_DMACHAN->CCR     = 0;
 8008596:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <ot_memset+0x40>)
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
        MEMCPY_DMA->IFCR        = MEMCPY_DMA_INT;       ///@todo see if this can be globalized
 800859c:	4a09      	ldr	r2, [pc, #36]	; (80085c4 <ot_memset+0x44>)
 800859e:	2180      	movs	r1, #128	; 0x80
 80085a0:	0449      	lsls	r1, r1, #17
 80085a2:	6051      	str	r1, [r2, #4]
        MEMCPY_DMACHAN->CPAR    = (ot_u32)dst;
 80085a4:	609d      	str	r5, [r3, #8]
        MEMCPY_DMACHAN->CMAR    = (ot_u32)&value;
 80085a6:	466a      	mov	r2, sp
 80085a8:	3207      	adds	r2, #7
 80085aa:	60da      	str	r2, [r3, #12]
        MEMCPY_DMACHAN->CNDTR   = length;
 80085ac:	605c      	str	r4, [r3, #4]
        MEMCPY_DMACHAN->CCR     = DMA_CCR_DIR      | DMA_CCR_PINC     | \
 80085ae:	4a06      	ldr	r2, [pc, #24]	; (80085c8 <ot_memset+0x48>)
 80085b0:	601a      	str	r2, [r3, #0]
        while((MEMCPY_DMA->ISR & MEMCPY_DMA_INT) == 0);
 80085b2:	4b04      	ldr	r3, [pc, #16]	; (80085c4 <ot_memset+0x44>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	01db      	lsls	r3, r3, #7
 80085b8:	d5fb      	bpl.n	80085b2 <ot_memset+0x32>
        platform_enable_interrupts();
 80085ba:	f7ff fc97 	bl	8007eec <platform_enable_interrupts>
}
 80085be:	e7e6      	b.n	800858e <ot_memset+0xe>
 80085c0:	40020080 	.word	0x40020080
 80085c4:	40020000 	.word	0x40020000
 80085c8:	00004051 	.word	0x00004051

080085cc <ot_memset_4>:

void ot_memset_2(ot_u16* dst, ot_u16 value, ot_uint length) {
    ot_memset( (ot_u8*)dst, (ot_u8)value, length<<1 );
}

void ot_memset_4(ot_u32* dst, ot_u32 value, ot_uint length) {
 80085cc:	b510      	push	{r4, lr}
    ot_memset( (ot_u8*)dst, (ot_u8)value, length<<2 );
 80085ce:	0092      	lsls	r2, r2, #2
 80085d0:	b292      	uxth	r2, r2
 80085d2:	b2c9      	uxtb	r1, r1
 80085d4:	f7ff ffd4 	bl	8008580 <ot_memset>
}
 80085d8:	bd10      	pop	{r4, pc}
	...

080085dc <rand_prn16>:
    return (ot_u8)rand_prn16();
}



ot_u16 rand_prn16() {
 80085dc:	b510      	push	{r4, lr}
    static ot_u16 _prn_freg;
    _prn_freg ^= LPTIM1->CNT;
 80085de:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <rand_prn16+0x18>)
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	4805      	ldr	r0, [pc, #20]	; (80085f8 <rand_prn16+0x1c>)
 80085e4:	8802      	ldrh	r2, [r0, #0]
 80085e6:	405a      	eors	r2, r3
 80085e8:	b292      	uxth	r2, r2
 80085ea:	8002      	strh	r2, [r0, #0]
    return crc16drv_block_manual( (ot_u8*)&_prn_freg, 2, _prn_freg );
 80085ec:	2102      	movs	r1, #2
 80085ee:	f7fe fc5b 	bl	8006ea8 <crc16drv_block_manual>
}
 80085f2:	bd10      	pop	{r4, pc}
 80085f4:	40007c00 	.word	0x40007c00
 80085f8:	200011f4 	.word	0x200011f4

080085fc <rand_prn8>:
ot_u8 rand_prn8() {
 80085fc:	b510      	push	{r4, lr}
    return (ot_u8)rand_prn16();
 80085fe:	f7ff ffed 	bl	80085dc <rand_prn16>
 8008602:	b2c0      	uxtb	r0, r0
}
 8008604:	bd10      	pop	{r4, pc}
	...

08008608 <vworm_init>:
}
#endif


#ifndef EXTF_vworm_init
ot_u8 vworm_init() {
 8008608:	b510      	push	{r4, lr}
    ot_memcpy_4(fsram, (ot_u32*)FLASH_FS_ADDR, sizeof(fsram)/4);
 800860a:	2280      	movs	r2, #128	; 0x80
 800860c:	00d2      	lsls	r2, r2, #3
 800860e:	4903      	ldr	r1, [pc, #12]	; (800861c <vworm_init+0x14>)
 8008610:	4803      	ldr	r0, [pc, #12]	; (8008620 <vworm_init+0x18>)
 8008612:	f7ff ffae 	bl	8008572 <ot_memcpy_4>
    return 0;
}
 8008616:	2000      	movs	r0, #0
 8008618:	bd10      	pop	{r4, pc}
 800861a:	46c0      	nop			; (mov r8, r8)
 800861c:	08017000 	.word	0x08017000
 8008620:	200011f8 	.word	0x200011f8

08008624 <vworm_read>:

#ifndef EXTF_vworm_read
ot_u16 vworm_read(vaddr addr) {
    ot_u16* data;
    addr   -= VWORM_BASE_VADDR;
    addr   &= ~1;
 8008624:	2301      	movs	r3, #1
 8008626:	4398      	bics	r0, r3
    data    = (ot_u16*)((ot_u8*)fsram + addr);
    return *data;
 8008628:	4b01      	ldr	r3, [pc, #4]	; (8008630 <vworm_read+0xc>)
 800862a:	5a18      	ldrh	r0, [r3, r0]
}
 800862c:	4770      	bx	lr
 800862e:	46c0      	nop			; (mov r8, r8)
 8008630:	200011f8 	.word	0x200011f8

08008634 <vworm_write>:

#ifndef EXTF_vworm_write
ot_u8 vworm_write(vaddr addr, ot_u16 data) {
    ot_u16* aptr;
    addr   -= VWORM_BASE_VADDR;
    addr   &= ~1;
 8008634:	2301      	movs	r3, #1
 8008636:	4398      	bics	r0, r3
    aptr    = (ot_u16*)((ot_u8*)fsram + addr);
    *aptr   = data;
 8008638:	4b01      	ldr	r3, [pc, #4]	; (8008640 <vworm_write+0xc>)
 800863a:	5219      	strh	r1, [r3, r0]
    return 0;
}
 800863c:	2000      	movs	r0, #0
 800863e:	4770      	bx	lr
 8008640:	200011f8 	.word	0x200011f8

08008644 <vworm_mark>:
#endif
    


#ifndef EXTF_vworm_mark
ot_u8 vworm_mark(vaddr addr, ot_u16 value) {
 8008644:	b510      	push	{r4, lr}
    return vworm_write(addr, value);
 8008646:	f7ff fff5 	bl	8008634 <vworm_write>
}
 800864a:	bd10      	pop	{r4, pc}

0800864c <vworm_wipeblock>:
#endif

#ifndef EXTF_vworm_wipeblock
ot_u8 vworm_wipeblock(vaddr addr, ot_uint wipe_span) {
    return 0;
}
 800864c:	2000      	movs	r0, #0
 800864e:	4770      	bx	lr

08008650 <vsram_read>:
  * ========================================================================<BR>
  * SRAM version of Veelite doesn't utilize VSRAM
  */

#ifndef EXTF_vsram_read
ot_u16 vsram_read(vaddr addr) {
 8008650:	b510      	push	{r4, lr}
    return vworm_read(addr);
 8008652:	f7ff ffe7 	bl	8008624 <vworm_read>
}
 8008656:	bd10      	pop	{r4, pc}

08008658 <vsram_mark>:
#endif

#ifndef EXTF_vsram_mark
ot_u8 vsram_mark(vaddr addr, ot_u16 value) {
 8008658:	b510      	push	{r4, lr}
    return vworm_mark(addr, value);
 800865a:	f7ff fff3 	bl	8008644 <vworm_mark>
}
 800865e:	bd10      	pop	{r4, pc}

08008660 <__assert_func>:
 8008660:	b530      	push	{r4, r5, lr}
 8008662:	001c      	movs	r4, r3
 8008664:	4b09      	ldr	r3, [pc, #36]	; (800868c <__assert_func+0x2c>)
 8008666:	0005      	movs	r5, r0
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	b085      	sub	sp, #20
 800866c:	68d8      	ldr	r0, [r3, #12]
 800866e:	4b08      	ldr	r3, [pc, #32]	; (8008690 <__assert_func+0x30>)
 8008670:	2a00      	cmp	r2, #0
 8008672:	d101      	bne.n	8008678 <__assert_func+0x18>
 8008674:	4b07      	ldr	r3, [pc, #28]	; (8008694 <__assert_func+0x34>)
 8008676:	001a      	movs	r2, r3
 8008678:	9202      	str	r2, [sp, #8]
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	9100      	str	r1, [sp, #0]
 800867e:	002b      	movs	r3, r5
 8008680:	0022      	movs	r2, r4
 8008682:	4905      	ldr	r1, [pc, #20]	; (8008698 <__assert_func+0x38>)
 8008684:	f000 f80a 	bl	800869c <fiprintf>
 8008688:	f000 fba0 	bl	8008dcc <abort>
 800868c:	20000148 	.word	0x20000148
 8008690:	0800a6f8 	.word	0x0800a6f8
 8008694:	0800a733 	.word	0x0800a733
 8008698:	0800a705 	.word	0x0800a705

0800869c <fiprintf>:
 800869c:	b40e      	push	{r1, r2, r3}
 800869e:	b503      	push	{r0, r1, lr}
 80086a0:	0001      	movs	r1, r0
 80086a2:	ab03      	add	r3, sp, #12
 80086a4:	4804      	ldr	r0, [pc, #16]	; (80086b8 <fiprintf+0x1c>)
 80086a6:	cb04      	ldmia	r3!, {r2}
 80086a8:	6800      	ldr	r0, [r0, #0]
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	f000 f836 	bl	800871c <_vfiprintf_r>
 80086b0:	b002      	add	sp, #8
 80086b2:	bc08      	pop	{r3}
 80086b4:	b003      	add	sp, #12
 80086b6:	4718      	bx	r3
 80086b8:	20000148 	.word	0x20000148

080086bc <memset>:
 80086bc:	0003      	movs	r3, r0
 80086be:	1812      	adds	r2, r2, r0
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d100      	bne.n	80086c6 <memset+0xa>
 80086c4:	4770      	bx	lr
 80086c6:	7019      	strb	r1, [r3, #0]
 80086c8:	3301      	adds	r3, #1
 80086ca:	e7f9      	b.n	80086c0 <memset+0x4>

080086cc <__sfputc_r>:
 80086cc:	6893      	ldr	r3, [r2, #8]
 80086ce:	b510      	push	{r4, lr}
 80086d0:	3b01      	subs	r3, #1
 80086d2:	6093      	str	r3, [r2, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	da04      	bge.n	80086e2 <__sfputc_r+0x16>
 80086d8:	6994      	ldr	r4, [r2, #24]
 80086da:	42a3      	cmp	r3, r4
 80086dc:	db07      	blt.n	80086ee <__sfputc_r+0x22>
 80086de:	290a      	cmp	r1, #10
 80086e0:	d005      	beq.n	80086ee <__sfputc_r+0x22>
 80086e2:	6813      	ldr	r3, [r2, #0]
 80086e4:	1c58      	adds	r0, r3, #1
 80086e6:	6010      	str	r0, [r2, #0]
 80086e8:	7019      	strb	r1, [r3, #0]
 80086ea:	0008      	movs	r0, r1
 80086ec:	bd10      	pop	{r4, pc}
 80086ee:	f000 faa1 	bl	8008c34 <__swbuf_r>
 80086f2:	0001      	movs	r1, r0
 80086f4:	e7f9      	b.n	80086ea <__sfputc_r+0x1e>

080086f6 <__sfputs_r>:
 80086f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f8:	0006      	movs	r6, r0
 80086fa:	000f      	movs	r7, r1
 80086fc:	0014      	movs	r4, r2
 80086fe:	18d5      	adds	r5, r2, r3
 8008700:	42ac      	cmp	r4, r5
 8008702:	d101      	bne.n	8008708 <__sfputs_r+0x12>
 8008704:	2000      	movs	r0, #0
 8008706:	e007      	b.n	8008718 <__sfputs_r+0x22>
 8008708:	7821      	ldrb	r1, [r4, #0]
 800870a:	003a      	movs	r2, r7
 800870c:	0030      	movs	r0, r6
 800870e:	f7ff ffdd 	bl	80086cc <__sfputc_r>
 8008712:	3401      	adds	r4, #1
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	d1f3      	bne.n	8008700 <__sfputs_r+0xa>
 8008718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800871c <_vfiprintf_r>:
 800871c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800871e:	b0a1      	sub	sp, #132	; 0x84
 8008720:	9003      	str	r0, [sp, #12]
 8008722:	000f      	movs	r7, r1
 8008724:	0016      	movs	r6, r2
 8008726:	001d      	movs	r5, r3
 8008728:	2800      	cmp	r0, #0
 800872a:	d005      	beq.n	8008738 <_vfiprintf_r+0x1c>
 800872c:	6983      	ldr	r3, [r0, #24]
 800872e:	9305      	str	r3, [sp, #20]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <_vfiprintf_r+0x1c>
 8008734:	f000 fc4a 	bl	8008fcc <__sinit>
 8008738:	4b7b      	ldr	r3, [pc, #492]	; (8008928 <_vfiprintf_r+0x20c>)
 800873a:	429f      	cmp	r7, r3
 800873c:	d15c      	bne.n	80087f8 <_vfiprintf_r+0xdc>
 800873e:	9b03      	ldr	r3, [sp, #12]
 8008740:	685f      	ldr	r7, [r3, #4]
 8008742:	89bb      	ldrh	r3, [r7, #12]
 8008744:	071b      	lsls	r3, r3, #28
 8008746:	d563      	bpl.n	8008810 <_vfiprintf_r+0xf4>
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d060      	beq.n	8008810 <_vfiprintf_r+0xf4>
 800874e:	2300      	movs	r3, #0
 8008750:	ac08      	add	r4, sp, #32
 8008752:	6163      	str	r3, [r4, #20]
 8008754:	3320      	adds	r3, #32
 8008756:	7663      	strb	r3, [r4, #25]
 8008758:	3310      	adds	r3, #16
 800875a:	76a3      	strb	r3, [r4, #26]
 800875c:	9507      	str	r5, [sp, #28]
 800875e:	0035      	movs	r5, r6
 8008760:	782b      	ldrb	r3, [r5, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <_vfiprintf_r+0x4e>
 8008766:	2b25      	cmp	r3, #37	; 0x25
 8008768:	d15c      	bne.n	8008824 <_vfiprintf_r+0x108>
 800876a:	1bab      	subs	r3, r5, r6
 800876c:	9305      	str	r3, [sp, #20]
 800876e:	d00c      	beq.n	800878a <_vfiprintf_r+0x6e>
 8008770:	0032      	movs	r2, r6
 8008772:	0039      	movs	r1, r7
 8008774:	9803      	ldr	r0, [sp, #12]
 8008776:	f7ff ffbe 	bl	80086f6 <__sfputs_r>
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	d100      	bne.n	8008780 <_vfiprintf_r+0x64>
 800877e:	e0c4      	b.n	800890a <_vfiprintf_r+0x1ee>
 8008780:	6962      	ldr	r2, [r4, #20]
 8008782:	9b05      	ldr	r3, [sp, #20]
 8008784:	4694      	mov	ip, r2
 8008786:	4463      	add	r3, ip
 8008788:	6163      	str	r3, [r4, #20]
 800878a:	782b      	ldrb	r3, [r5, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d100      	bne.n	8008792 <_vfiprintf_r+0x76>
 8008790:	e0bb      	b.n	800890a <_vfiprintf_r+0x1ee>
 8008792:	2201      	movs	r2, #1
 8008794:	2300      	movs	r3, #0
 8008796:	4252      	negs	r2, r2
 8008798:	6062      	str	r2, [r4, #4]
 800879a:	a904      	add	r1, sp, #16
 800879c:	3254      	adds	r2, #84	; 0x54
 800879e:	1852      	adds	r2, r2, r1
 80087a0:	1c6e      	adds	r6, r5, #1
 80087a2:	6023      	str	r3, [r4, #0]
 80087a4:	60e3      	str	r3, [r4, #12]
 80087a6:	60a3      	str	r3, [r4, #8]
 80087a8:	7013      	strb	r3, [r2, #0]
 80087aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80087ac:	7831      	ldrb	r1, [r6, #0]
 80087ae:	2205      	movs	r2, #5
 80087b0:	485e      	ldr	r0, [pc, #376]	; (800892c <_vfiprintf_r+0x210>)
 80087b2:	f000 fd0b 	bl	80091cc <memchr>
 80087b6:	1c75      	adds	r5, r6, #1
 80087b8:	2800      	cmp	r0, #0
 80087ba:	d135      	bne.n	8008828 <_vfiprintf_r+0x10c>
 80087bc:	6822      	ldr	r2, [r4, #0]
 80087be:	06d3      	lsls	r3, r2, #27
 80087c0:	d504      	bpl.n	80087cc <_vfiprintf_r+0xb0>
 80087c2:	2353      	movs	r3, #83	; 0x53
 80087c4:	a904      	add	r1, sp, #16
 80087c6:	185b      	adds	r3, r3, r1
 80087c8:	2120      	movs	r1, #32
 80087ca:	7019      	strb	r1, [r3, #0]
 80087cc:	0713      	lsls	r3, r2, #28
 80087ce:	d504      	bpl.n	80087da <_vfiprintf_r+0xbe>
 80087d0:	2353      	movs	r3, #83	; 0x53
 80087d2:	a904      	add	r1, sp, #16
 80087d4:	185b      	adds	r3, r3, r1
 80087d6:	212b      	movs	r1, #43	; 0x2b
 80087d8:	7019      	strb	r1, [r3, #0]
 80087da:	7833      	ldrb	r3, [r6, #0]
 80087dc:	2b2a      	cmp	r3, #42	; 0x2a
 80087de:	d02c      	beq.n	800883a <_vfiprintf_r+0x11e>
 80087e0:	0035      	movs	r5, r6
 80087e2:	2100      	movs	r1, #0
 80087e4:	200a      	movs	r0, #10
 80087e6:	68e3      	ldr	r3, [r4, #12]
 80087e8:	782a      	ldrb	r2, [r5, #0]
 80087ea:	1c6e      	adds	r6, r5, #1
 80087ec:	3a30      	subs	r2, #48	; 0x30
 80087ee:	2a09      	cmp	r2, #9
 80087f0:	d964      	bls.n	80088bc <_vfiprintf_r+0x1a0>
 80087f2:	2900      	cmp	r1, #0
 80087f4:	d02e      	beq.n	8008854 <_vfiprintf_r+0x138>
 80087f6:	e026      	b.n	8008846 <_vfiprintf_r+0x12a>
 80087f8:	4b4d      	ldr	r3, [pc, #308]	; (8008930 <_vfiprintf_r+0x214>)
 80087fa:	429f      	cmp	r7, r3
 80087fc:	d102      	bne.n	8008804 <_vfiprintf_r+0xe8>
 80087fe:	9b03      	ldr	r3, [sp, #12]
 8008800:	689f      	ldr	r7, [r3, #8]
 8008802:	e79e      	b.n	8008742 <_vfiprintf_r+0x26>
 8008804:	4b4b      	ldr	r3, [pc, #300]	; (8008934 <_vfiprintf_r+0x218>)
 8008806:	429f      	cmp	r7, r3
 8008808:	d19b      	bne.n	8008742 <_vfiprintf_r+0x26>
 800880a:	9b03      	ldr	r3, [sp, #12]
 800880c:	68df      	ldr	r7, [r3, #12]
 800880e:	e798      	b.n	8008742 <_vfiprintf_r+0x26>
 8008810:	0039      	movs	r1, r7
 8008812:	9803      	ldr	r0, [sp, #12]
 8008814:	f000 fa64 	bl	8008ce0 <__swsetup_r>
 8008818:	2800      	cmp	r0, #0
 800881a:	d098      	beq.n	800874e <_vfiprintf_r+0x32>
 800881c:	2001      	movs	r0, #1
 800881e:	4240      	negs	r0, r0
 8008820:	b021      	add	sp, #132	; 0x84
 8008822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008824:	3501      	adds	r5, #1
 8008826:	e79b      	b.n	8008760 <_vfiprintf_r+0x44>
 8008828:	4b40      	ldr	r3, [pc, #256]	; (800892c <_vfiprintf_r+0x210>)
 800882a:	6822      	ldr	r2, [r4, #0]
 800882c:	1ac0      	subs	r0, r0, r3
 800882e:	2301      	movs	r3, #1
 8008830:	4083      	lsls	r3, r0
 8008832:	4313      	orrs	r3, r2
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	002e      	movs	r6, r5
 8008838:	e7b8      	b.n	80087ac <_vfiprintf_r+0x90>
 800883a:	9b07      	ldr	r3, [sp, #28]
 800883c:	1d19      	adds	r1, r3, #4
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	9107      	str	r1, [sp, #28]
 8008842:	2b00      	cmp	r3, #0
 8008844:	db01      	blt.n	800884a <_vfiprintf_r+0x12e>
 8008846:	930b      	str	r3, [sp, #44]	; 0x2c
 8008848:	e004      	b.n	8008854 <_vfiprintf_r+0x138>
 800884a:	425b      	negs	r3, r3
 800884c:	60e3      	str	r3, [r4, #12]
 800884e:	2302      	movs	r3, #2
 8008850:	4313      	orrs	r3, r2
 8008852:	6023      	str	r3, [r4, #0]
 8008854:	782b      	ldrb	r3, [r5, #0]
 8008856:	2b2e      	cmp	r3, #46	; 0x2e
 8008858:	d10a      	bne.n	8008870 <_vfiprintf_r+0x154>
 800885a:	786b      	ldrb	r3, [r5, #1]
 800885c:	2b2a      	cmp	r3, #42	; 0x2a
 800885e:	d135      	bne.n	80088cc <_vfiprintf_r+0x1b0>
 8008860:	9b07      	ldr	r3, [sp, #28]
 8008862:	3502      	adds	r5, #2
 8008864:	1d1a      	adds	r2, r3, #4
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	9207      	str	r2, [sp, #28]
 800886a:	2b00      	cmp	r3, #0
 800886c:	db2b      	blt.n	80088c6 <_vfiprintf_r+0x1aa>
 800886e:	9309      	str	r3, [sp, #36]	; 0x24
 8008870:	4e31      	ldr	r6, [pc, #196]	; (8008938 <_vfiprintf_r+0x21c>)
 8008872:	7829      	ldrb	r1, [r5, #0]
 8008874:	2203      	movs	r2, #3
 8008876:	0030      	movs	r0, r6
 8008878:	f000 fca8 	bl	80091cc <memchr>
 800887c:	2800      	cmp	r0, #0
 800887e:	d006      	beq.n	800888e <_vfiprintf_r+0x172>
 8008880:	2340      	movs	r3, #64	; 0x40
 8008882:	1b80      	subs	r0, r0, r6
 8008884:	4083      	lsls	r3, r0
 8008886:	6822      	ldr	r2, [r4, #0]
 8008888:	3501      	adds	r5, #1
 800888a:	4313      	orrs	r3, r2
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	7829      	ldrb	r1, [r5, #0]
 8008890:	2206      	movs	r2, #6
 8008892:	482a      	ldr	r0, [pc, #168]	; (800893c <_vfiprintf_r+0x220>)
 8008894:	1c6e      	adds	r6, r5, #1
 8008896:	7621      	strb	r1, [r4, #24]
 8008898:	f000 fc98 	bl	80091cc <memchr>
 800889c:	2800      	cmp	r0, #0
 800889e:	d03a      	beq.n	8008916 <_vfiprintf_r+0x1fa>
 80088a0:	4b27      	ldr	r3, [pc, #156]	; (8008940 <_vfiprintf_r+0x224>)
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d125      	bne.n	80088f2 <_vfiprintf_r+0x1d6>
 80088a6:	2207      	movs	r2, #7
 80088a8:	9b07      	ldr	r3, [sp, #28]
 80088aa:	3307      	adds	r3, #7
 80088ac:	4393      	bics	r3, r2
 80088ae:	3308      	adds	r3, #8
 80088b0:	9307      	str	r3, [sp, #28]
 80088b2:	6963      	ldr	r3, [r4, #20]
 80088b4:	9a04      	ldr	r2, [sp, #16]
 80088b6:	189b      	adds	r3, r3, r2
 80088b8:	6163      	str	r3, [r4, #20]
 80088ba:	e750      	b.n	800875e <_vfiprintf_r+0x42>
 80088bc:	4343      	muls	r3, r0
 80088be:	2101      	movs	r1, #1
 80088c0:	189b      	adds	r3, r3, r2
 80088c2:	0035      	movs	r5, r6
 80088c4:	e790      	b.n	80087e8 <_vfiprintf_r+0xcc>
 80088c6:	2301      	movs	r3, #1
 80088c8:	425b      	negs	r3, r3
 80088ca:	e7d0      	b.n	800886e <_vfiprintf_r+0x152>
 80088cc:	2300      	movs	r3, #0
 80088ce:	200a      	movs	r0, #10
 80088d0:	001a      	movs	r2, r3
 80088d2:	3501      	adds	r5, #1
 80088d4:	6063      	str	r3, [r4, #4]
 80088d6:	7829      	ldrb	r1, [r5, #0]
 80088d8:	1c6e      	adds	r6, r5, #1
 80088da:	3930      	subs	r1, #48	; 0x30
 80088dc:	2909      	cmp	r1, #9
 80088de:	d903      	bls.n	80088e8 <_vfiprintf_r+0x1cc>
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d0c5      	beq.n	8008870 <_vfiprintf_r+0x154>
 80088e4:	9209      	str	r2, [sp, #36]	; 0x24
 80088e6:	e7c3      	b.n	8008870 <_vfiprintf_r+0x154>
 80088e8:	4342      	muls	r2, r0
 80088ea:	2301      	movs	r3, #1
 80088ec:	1852      	adds	r2, r2, r1
 80088ee:	0035      	movs	r5, r6
 80088f0:	e7f1      	b.n	80088d6 <_vfiprintf_r+0x1ba>
 80088f2:	ab07      	add	r3, sp, #28
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	003a      	movs	r2, r7
 80088f8:	4b12      	ldr	r3, [pc, #72]	; (8008944 <_vfiprintf_r+0x228>)
 80088fa:	0021      	movs	r1, r4
 80088fc:	9803      	ldr	r0, [sp, #12]
 80088fe:	e000      	b.n	8008902 <_vfiprintf_r+0x1e6>
 8008900:	bf00      	nop
 8008902:	9004      	str	r0, [sp, #16]
 8008904:	9b04      	ldr	r3, [sp, #16]
 8008906:	3301      	adds	r3, #1
 8008908:	d1d3      	bne.n	80088b2 <_vfiprintf_r+0x196>
 800890a:	89bb      	ldrh	r3, [r7, #12]
 800890c:	065b      	lsls	r3, r3, #25
 800890e:	d500      	bpl.n	8008912 <_vfiprintf_r+0x1f6>
 8008910:	e784      	b.n	800881c <_vfiprintf_r+0x100>
 8008912:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008914:	e784      	b.n	8008820 <_vfiprintf_r+0x104>
 8008916:	ab07      	add	r3, sp, #28
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	003a      	movs	r2, r7
 800891c:	4b09      	ldr	r3, [pc, #36]	; (8008944 <_vfiprintf_r+0x228>)
 800891e:	0021      	movs	r1, r4
 8008920:	9803      	ldr	r0, [sp, #12]
 8008922:	f000 f87f 	bl	8008a24 <_printf_i>
 8008926:	e7ec      	b.n	8008902 <_vfiprintf_r+0x1e6>
 8008928:	0800a78c 	.word	0x0800a78c
 800892c:	0800a738 	.word	0x0800a738
 8008930:	0800a7ac 	.word	0x0800a7ac
 8008934:	0800a76c 	.word	0x0800a76c
 8008938:	0800a73e 	.word	0x0800a73e
 800893c:	0800a742 	.word	0x0800a742
 8008940:	00000000 	.word	0x00000000
 8008944:	080086f7 	.word	0x080086f7

08008948 <_printf_common>:
 8008948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800894a:	0015      	movs	r5, r2
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	688a      	ldr	r2, [r1, #8]
 8008950:	690b      	ldr	r3, [r1, #16]
 8008952:	9000      	str	r0, [sp, #0]
 8008954:	000c      	movs	r4, r1
 8008956:	4293      	cmp	r3, r2
 8008958:	da00      	bge.n	800895c <_printf_common+0x14>
 800895a:	0013      	movs	r3, r2
 800895c:	0022      	movs	r2, r4
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	3243      	adds	r2, #67	; 0x43
 8008962:	7812      	ldrb	r2, [r2, #0]
 8008964:	2a00      	cmp	r2, #0
 8008966:	d001      	beq.n	800896c <_printf_common+0x24>
 8008968:	3301      	adds	r3, #1
 800896a:	602b      	str	r3, [r5, #0]
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	069b      	lsls	r3, r3, #26
 8008970:	d502      	bpl.n	8008978 <_printf_common+0x30>
 8008972:	682b      	ldr	r3, [r5, #0]
 8008974:	3302      	adds	r3, #2
 8008976:	602b      	str	r3, [r5, #0]
 8008978:	2706      	movs	r7, #6
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	401f      	ands	r7, r3
 800897e:	d027      	beq.n	80089d0 <_printf_common+0x88>
 8008980:	0023      	movs	r3, r4
 8008982:	3343      	adds	r3, #67	; 0x43
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	1e5a      	subs	r2, r3, #1
 8008988:	4193      	sbcs	r3, r2
 800898a:	6822      	ldr	r2, [r4, #0]
 800898c:	0692      	lsls	r2, r2, #26
 800898e:	d430      	bmi.n	80089f2 <_printf_common+0xaa>
 8008990:	0022      	movs	r2, r4
 8008992:	9901      	ldr	r1, [sp, #4]
 8008994:	3243      	adds	r2, #67	; 0x43
 8008996:	9800      	ldr	r0, [sp, #0]
 8008998:	9e08      	ldr	r6, [sp, #32]
 800899a:	47b0      	blx	r6
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d025      	beq.n	80089ec <_printf_common+0xa4>
 80089a0:	2306      	movs	r3, #6
 80089a2:	6820      	ldr	r0, [r4, #0]
 80089a4:	682a      	ldr	r2, [r5, #0]
 80089a6:	68e1      	ldr	r1, [r4, #12]
 80089a8:	4003      	ands	r3, r0
 80089aa:	2500      	movs	r5, #0
 80089ac:	2b04      	cmp	r3, #4
 80089ae:	d103      	bne.n	80089b8 <_printf_common+0x70>
 80089b0:	1a8d      	subs	r5, r1, r2
 80089b2:	43eb      	mvns	r3, r5
 80089b4:	17db      	asrs	r3, r3, #31
 80089b6:	401d      	ands	r5, r3
 80089b8:	68a3      	ldr	r3, [r4, #8]
 80089ba:	6922      	ldr	r2, [r4, #16]
 80089bc:	4293      	cmp	r3, r2
 80089be:	dd01      	ble.n	80089c4 <_printf_common+0x7c>
 80089c0:	1a9b      	subs	r3, r3, r2
 80089c2:	18ed      	adds	r5, r5, r3
 80089c4:	2700      	movs	r7, #0
 80089c6:	42bd      	cmp	r5, r7
 80089c8:	d120      	bne.n	8008a0c <_printf_common+0xc4>
 80089ca:	2000      	movs	r0, #0
 80089cc:	e010      	b.n	80089f0 <_printf_common+0xa8>
 80089ce:	3701      	adds	r7, #1
 80089d0:	68e3      	ldr	r3, [r4, #12]
 80089d2:	682a      	ldr	r2, [r5, #0]
 80089d4:	1a9b      	subs	r3, r3, r2
 80089d6:	42bb      	cmp	r3, r7
 80089d8:	ddd2      	ble.n	8008980 <_printf_common+0x38>
 80089da:	0022      	movs	r2, r4
 80089dc:	2301      	movs	r3, #1
 80089de:	3219      	adds	r2, #25
 80089e0:	9901      	ldr	r1, [sp, #4]
 80089e2:	9800      	ldr	r0, [sp, #0]
 80089e4:	9e08      	ldr	r6, [sp, #32]
 80089e6:	47b0      	blx	r6
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d1f0      	bne.n	80089ce <_printf_common+0x86>
 80089ec:	2001      	movs	r0, #1
 80089ee:	4240      	negs	r0, r0
 80089f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089f2:	2030      	movs	r0, #48	; 0x30
 80089f4:	18e1      	adds	r1, r4, r3
 80089f6:	3143      	adds	r1, #67	; 0x43
 80089f8:	7008      	strb	r0, [r1, #0]
 80089fa:	0021      	movs	r1, r4
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	3145      	adds	r1, #69	; 0x45
 8008a00:	7809      	ldrb	r1, [r1, #0]
 8008a02:	18a2      	adds	r2, r4, r2
 8008a04:	3243      	adds	r2, #67	; 0x43
 8008a06:	3302      	adds	r3, #2
 8008a08:	7011      	strb	r1, [r2, #0]
 8008a0a:	e7c1      	b.n	8008990 <_printf_common+0x48>
 8008a0c:	0022      	movs	r2, r4
 8008a0e:	2301      	movs	r3, #1
 8008a10:	321a      	adds	r2, #26
 8008a12:	9901      	ldr	r1, [sp, #4]
 8008a14:	9800      	ldr	r0, [sp, #0]
 8008a16:	9e08      	ldr	r6, [sp, #32]
 8008a18:	47b0      	blx	r6
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	d0e6      	beq.n	80089ec <_printf_common+0xa4>
 8008a1e:	3701      	adds	r7, #1
 8008a20:	e7d1      	b.n	80089c6 <_printf_common+0x7e>
	...

08008a24 <_printf_i>:
 8008a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a26:	b089      	sub	sp, #36	; 0x24
 8008a28:	9204      	str	r2, [sp, #16]
 8008a2a:	000a      	movs	r2, r1
 8008a2c:	3243      	adds	r2, #67	; 0x43
 8008a2e:	9305      	str	r3, [sp, #20]
 8008a30:	9003      	str	r0, [sp, #12]
 8008a32:	9202      	str	r2, [sp, #8]
 8008a34:	7e0a      	ldrb	r2, [r1, #24]
 8008a36:	000c      	movs	r4, r1
 8008a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a3a:	2a6e      	cmp	r2, #110	; 0x6e
 8008a3c:	d100      	bne.n	8008a40 <_printf_i+0x1c>
 8008a3e:	e086      	b.n	8008b4e <_printf_i+0x12a>
 8008a40:	d81f      	bhi.n	8008a82 <_printf_i+0x5e>
 8008a42:	2a63      	cmp	r2, #99	; 0x63
 8008a44:	d033      	beq.n	8008aae <_printf_i+0x8a>
 8008a46:	d808      	bhi.n	8008a5a <_printf_i+0x36>
 8008a48:	2a00      	cmp	r2, #0
 8008a4a:	d100      	bne.n	8008a4e <_printf_i+0x2a>
 8008a4c:	e08c      	b.n	8008b68 <_printf_i+0x144>
 8008a4e:	2a58      	cmp	r2, #88	; 0x58
 8008a50:	d04d      	beq.n	8008aee <_printf_i+0xca>
 8008a52:	0025      	movs	r5, r4
 8008a54:	3542      	adds	r5, #66	; 0x42
 8008a56:	702a      	strb	r2, [r5, #0]
 8008a58:	e030      	b.n	8008abc <_printf_i+0x98>
 8008a5a:	2a64      	cmp	r2, #100	; 0x64
 8008a5c:	d001      	beq.n	8008a62 <_printf_i+0x3e>
 8008a5e:	2a69      	cmp	r2, #105	; 0x69
 8008a60:	d1f7      	bne.n	8008a52 <_printf_i+0x2e>
 8008a62:	6819      	ldr	r1, [r3, #0]
 8008a64:	6825      	ldr	r5, [r4, #0]
 8008a66:	1d0a      	adds	r2, r1, #4
 8008a68:	0628      	lsls	r0, r5, #24
 8008a6a:	d529      	bpl.n	8008ac0 <_printf_i+0x9c>
 8008a6c:	6808      	ldr	r0, [r1, #0]
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	2800      	cmp	r0, #0
 8008a72:	da03      	bge.n	8008a7c <_printf_i+0x58>
 8008a74:	232d      	movs	r3, #45	; 0x2d
 8008a76:	9a02      	ldr	r2, [sp, #8]
 8008a78:	4240      	negs	r0, r0
 8008a7a:	7013      	strb	r3, [r2, #0]
 8008a7c:	4e6b      	ldr	r6, [pc, #428]	; (8008c2c <_printf_i+0x208>)
 8008a7e:	270a      	movs	r7, #10
 8008a80:	e04f      	b.n	8008b22 <_printf_i+0xfe>
 8008a82:	2a73      	cmp	r2, #115	; 0x73
 8008a84:	d074      	beq.n	8008b70 <_printf_i+0x14c>
 8008a86:	d808      	bhi.n	8008a9a <_printf_i+0x76>
 8008a88:	2a6f      	cmp	r2, #111	; 0x6f
 8008a8a:	d01f      	beq.n	8008acc <_printf_i+0xa8>
 8008a8c:	2a70      	cmp	r2, #112	; 0x70
 8008a8e:	d1e0      	bne.n	8008a52 <_printf_i+0x2e>
 8008a90:	2220      	movs	r2, #32
 8008a92:	6809      	ldr	r1, [r1, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	6022      	str	r2, [r4, #0]
 8008a98:	e003      	b.n	8008aa2 <_printf_i+0x7e>
 8008a9a:	2a75      	cmp	r2, #117	; 0x75
 8008a9c:	d016      	beq.n	8008acc <_printf_i+0xa8>
 8008a9e:	2a78      	cmp	r2, #120	; 0x78
 8008aa0:	d1d7      	bne.n	8008a52 <_printf_i+0x2e>
 8008aa2:	0022      	movs	r2, r4
 8008aa4:	2178      	movs	r1, #120	; 0x78
 8008aa6:	3245      	adds	r2, #69	; 0x45
 8008aa8:	7011      	strb	r1, [r2, #0]
 8008aaa:	4e61      	ldr	r6, [pc, #388]	; (8008c30 <_printf_i+0x20c>)
 8008aac:	e022      	b.n	8008af4 <_printf_i+0xd0>
 8008aae:	0025      	movs	r5, r4
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	3542      	adds	r5, #66	; 0x42
 8008ab4:	1d11      	adds	r1, r2, #4
 8008ab6:	6019      	str	r1, [r3, #0]
 8008ab8:	6813      	ldr	r3, [r2, #0]
 8008aba:	702b      	strb	r3, [r5, #0]
 8008abc:	2301      	movs	r3, #1
 8008abe:	e065      	b.n	8008b8c <_printf_i+0x168>
 8008ac0:	6808      	ldr	r0, [r1, #0]
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	0669      	lsls	r1, r5, #25
 8008ac6:	d5d3      	bpl.n	8008a70 <_printf_i+0x4c>
 8008ac8:	b200      	sxth	r0, r0
 8008aca:	e7d1      	b.n	8008a70 <_printf_i+0x4c>
 8008acc:	6819      	ldr	r1, [r3, #0]
 8008ace:	6825      	ldr	r5, [r4, #0]
 8008ad0:	1d08      	adds	r0, r1, #4
 8008ad2:	6018      	str	r0, [r3, #0]
 8008ad4:	6808      	ldr	r0, [r1, #0]
 8008ad6:	062e      	lsls	r6, r5, #24
 8008ad8:	d505      	bpl.n	8008ae6 <_printf_i+0xc2>
 8008ada:	4e54      	ldr	r6, [pc, #336]	; (8008c2c <_printf_i+0x208>)
 8008adc:	2708      	movs	r7, #8
 8008ade:	2a6f      	cmp	r2, #111	; 0x6f
 8008ae0:	d01b      	beq.n	8008b1a <_printf_i+0xf6>
 8008ae2:	270a      	movs	r7, #10
 8008ae4:	e019      	b.n	8008b1a <_printf_i+0xf6>
 8008ae6:	066d      	lsls	r5, r5, #25
 8008ae8:	d5f7      	bpl.n	8008ada <_printf_i+0xb6>
 8008aea:	b280      	uxth	r0, r0
 8008aec:	e7f5      	b.n	8008ada <_printf_i+0xb6>
 8008aee:	3145      	adds	r1, #69	; 0x45
 8008af0:	4e4e      	ldr	r6, [pc, #312]	; (8008c2c <_printf_i+0x208>)
 8008af2:	700a      	strb	r2, [r1, #0]
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	6822      	ldr	r2, [r4, #0]
 8008af8:	1d01      	adds	r1, r0, #4
 8008afa:	6800      	ldr	r0, [r0, #0]
 8008afc:	6019      	str	r1, [r3, #0]
 8008afe:	0615      	lsls	r5, r2, #24
 8008b00:	d521      	bpl.n	8008b46 <_printf_i+0x122>
 8008b02:	07d3      	lsls	r3, r2, #31
 8008b04:	d502      	bpl.n	8008b0c <_printf_i+0xe8>
 8008b06:	2320      	movs	r3, #32
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	6022      	str	r2, [r4, #0]
 8008b0c:	2710      	movs	r7, #16
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d103      	bne.n	8008b1a <_printf_i+0xf6>
 8008b12:	2320      	movs	r3, #32
 8008b14:	6822      	ldr	r2, [r4, #0]
 8008b16:	439a      	bics	r2, r3
 8008b18:	6022      	str	r2, [r4, #0]
 8008b1a:	0023      	movs	r3, r4
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	3343      	adds	r3, #67	; 0x43
 8008b20:	701a      	strb	r2, [r3, #0]
 8008b22:	6863      	ldr	r3, [r4, #4]
 8008b24:	60a3      	str	r3, [r4, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	db58      	blt.n	8008bdc <_printf_i+0x1b8>
 8008b2a:	2204      	movs	r2, #4
 8008b2c:	6821      	ldr	r1, [r4, #0]
 8008b2e:	4391      	bics	r1, r2
 8008b30:	6021      	str	r1, [r4, #0]
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d154      	bne.n	8008be0 <_printf_i+0x1bc>
 8008b36:	9d02      	ldr	r5, [sp, #8]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d05a      	beq.n	8008bf2 <_printf_i+0x1ce>
 8008b3c:	0025      	movs	r5, r4
 8008b3e:	7833      	ldrb	r3, [r6, #0]
 8008b40:	3542      	adds	r5, #66	; 0x42
 8008b42:	702b      	strb	r3, [r5, #0]
 8008b44:	e055      	b.n	8008bf2 <_printf_i+0x1ce>
 8008b46:	0655      	lsls	r5, r2, #25
 8008b48:	d5db      	bpl.n	8008b02 <_printf_i+0xde>
 8008b4a:	b280      	uxth	r0, r0
 8008b4c:	e7d9      	b.n	8008b02 <_printf_i+0xde>
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	680d      	ldr	r5, [r1, #0]
 8008b52:	1d10      	adds	r0, r2, #4
 8008b54:	6949      	ldr	r1, [r1, #20]
 8008b56:	6018      	str	r0, [r3, #0]
 8008b58:	6813      	ldr	r3, [r2, #0]
 8008b5a:	062e      	lsls	r6, r5, #24
 8008b5c:	d501      	bpl.n	8008b62 <_printf_i+0x13e>
 8008b5e:	6019      	str	r1, [r3, #0]
 8008b60:	e002      	b.n	8008b68 <_printf_i+0x144>
 8008b62:	066d      	lsls	r5, r5, #25
 8008b64:	d5fb      	bpl.n	8008b5e <_printf_i+0x13a>
 8008b66:	8019      	strh	r1, [r3, #0]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	9d02      	ldr	r5, [sp, #8]
 8008b6c:	6123      	str	r3, [r4, #16]
 8008b6e:	e04f      	b.n	8008c10 <_printf_i+0x1ec>
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	1d11      	adds	r1, r2, #4
 8008b74:	6019      	str	r1, [r3, #0]
 8008b76:	6815      	ldr	r5, [r2, #0]
 8008b78:	2100      	movs	r1, #0
 8008b7a:	6862      	ldr	r2, [r4, #4]
 8008b7c:	0028      	movs	r0, r5
 8008b7e:	f000 fb25 	bl	80091cc <memchr>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d001      	beq.n	8008b8a <_printf_i+0x166>
 8008b86:	1b40      	subs	r0, r0, r5
 8008b88:	6060      	str	r0, [r4, #4]
 8008b8a:	6863      	ldr	r3, [r4, #4]
 8008b8c:	6123      	str	r3, [r4, #16]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	9a02      	ldr	r2, [sp, #8]
 8008b92:	7013      	strb	r3, [r2, #0]
 8008b94:	e03c      	b.n	8008c10 <_printf_i+0x1ec>
 8008b96:	6923      	ldr	r3, [r4, #16]
 8008b98:	002a      	movs	r2, r5
 8008b9a:	9904      	ldr	r1, [sp, #16]
 8008b9c:	9803      	ldr	r0, [sp, #12]
 8008b9e:	9d05      	ldr	r5, [sp, #20]
 8008ba0:	47a8      	blx	r5
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	d03e      	beq.n	8008c24 <_printf_i+0x200>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	079b      	lsls	r3, r3, #30
 8008baa:	d415      	bmi.n	8008bd8 <_printf_i+0x1b4>
 8008bac:	9b07      	ldr	r3, [sp, #28]
 8008bae:	68e0      	ldr	r0, [r4, #12]
 8008bb0:	4298      	cmp	r0, r3
 8008bb2:	da39      	bge.n	8008c28 <_printf_i+0x204>
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	e037      	b.n	8008c28 <_printf_i+0x204>
 8008bb8:	0022      	movs	r2, r4
 8008bba:	2301      	movs	r3, #1
 8008bbc:	3219      	adds	r2, #25
 8008bbe:	9904      	ldr	r1, [sp, #16]
 8008bc0:	9803      	ldr	r0, [sp, #12]
 8008bc2:	9e05      	ldr	r6, [sp, #20]
 8008bc4:	47b0      	blx	r6
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	d02c      	beq.n	8008c24 <_printf_i+0x200>
 8008bca:	3501      	adds	r5, #1
 8008bcc:	68e3      	ldr	r3, [r4, #12]
 8008bce:	9a07      	ldr	r2, [sp, #28]
 8008bd0:	1a9b      	subs	r3, r3, r2
 8008bd2:	42ab      	cmp	r3, r5
 8008bd4:	dcf0      	bgt.n	8008bb8 <_printf_i+0x194>
 8008bd6:	e7e9      	b.n	8008bac <_printf_i+0x188>
 8008bd8:	2500      	movs	r5, #0
 8008bda:	e7f7      	b.n	8008bcc <_printf_i+0x1a8>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d0ad      	beq.n	8008b3c <_printf_i+0x118>
 8008be0:	9d02      	ldr	r5, [sp, #8]
 8008be2:	0039      	movs	r1, r7
 8008be4:	f7f7 fb16 	bl	8000214 <__aeabi_uidivmod>
 8008be8:	5c73      	ldrb	r3, [r6, r1]
 8008bea:	3d01      	subs	r5, #1
 8008bec:	702b      	strb	r3, [r5, #0]
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d1f7      	bne.n	8008be2 <_printf_i+0x1be>
 8008bf2:	2f08      	cmp	r7, #8
 8008bf4:	d109      	bne.n	8008c0a <_printf_i+0x1e6>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	07db      	lsls	r3, r3, #31
 8008bfa:	d506      	bpl.n	8008c0a <_printf_i+0x1e6>
 8008bfc:	6863      	ldr	r3, [r4, #4]
 8008bfe:	6922      	ldr	r2, [r4, #16]
 8008c00:	4293      	cmp	r3, r2
 8008c02:	dc02      	bgt.n	8008c0a <_printf_i+0x1e6>
 8008c04:	2330      	movs	r3, #48	; 0x30
 8008c06:	3d01      	subs	r5, #1
 8008c08:	702b      	strb	r3, [r5, #0]
 8008c0a:	9b02      	ldr	r3, [sp, #8]
 8008c0c:	1b5b      	subs	r3, r3, r5
 8008c0e:	6123      	str	r3, [r4, #16]
 8008c10:	9b05      	ldr	r3, [sp, #20]
 8008c12:	aa07      	add	r2, sp, #28
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	0021      	movs	r1, r4
 8008c18:	9b04      	ldr	r3, [sp, #16]
 8008c1a:	9803      	ldr	r0, [sp, #12]
 8008c1c:	f7ff fe94 	bl	8008948 <_printf_common>
 8008c20:	1c43      	adds	r3, r0, #1
 8008c22:	d1b8      	bne.n	8008b96 <_printf_i+0x172>
 8008c24:	2001      	movs	r0, #1
 8008c26:	4240      	negs	r0, r0
 8008c28:	b009      	add	sp, #36	; 0x24
 8008c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c2c:	0800a749 	.word	0x0800a749
 8008c30:	0800a75a 	.word	0x0800a75a

08008c34 <__swbuf_r>:
 8008c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c36:	0005      	movs	r5, r0
 8008c38:	000e      	movs	r6, r1
 8008c3a:	0014      	movs	r4, r2
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d004      	beq.n	8008c4a <__swbuf_r+0x16>
 8008c40:	6983      	ldr	r3, [r0, #24]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <__swbuf_r+0x16>
 8008c46:	f000 f9c1 	bl	8008fcc <__sinit>
 8008c4a:	4b22      	ldr	r3, [pc, #136]	; (8008cd4 <__swbuf_r+0xa0>)
 8008c4c:	429c      	cmp	r4, r3
 8008c4e:	d12d      	bne.n	8008cac <__swbuf_r+0x78>
 8008c50:	686c      	ldr	r4, [r5, #4]
 8008c52:	69a3      	ldr	r3, [r4, #24]
 8008c54:	60a3      	str	r3, [r4, #8]
 8008c56:	89a3      	ldrh	r3, [r4, #12]
 8008c58:	071b      	lsls	r3, r3, #28
 8008c5a:	d531      	bpl.n	8008cc0 <__swbuf_r+0x8c>
 8008c5c:	6923      	ldr	r3, [r4, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d02e      	beq.n	8008cc0 <__swbuf_r+0x8c>
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	6922      	ldr	r2, [r4, #16]
 8008c66:	b2f7      	uxtb	r7, r6
 8008c68:	1a98      	subs	r0, r3, r2
 8008c6a:	6963      	ldr	r3, [r4, #20]
 8008c6c:	b2f6      	uxtb	r6, r6
 8008c6e:	4283      	cmp	r3, r0
 8008c70:	dc05      	bgt.n	8008c7e <__swbuf_r+0x4a>
 8008c72:	0021      	movs	r1, r4
 8008c74:	0028      	movs	r0, r5
 8008c76:	f000 f93b 	bl	8008ef0 <_fflush_r>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	d126      	bne.n	8008ccc <__swbuf_r+0x98>
 8008c7e:	68a3      	ldr	r3, [r4, #8]
 8008c80:	3001      	adds	r0, #1
 8008c82:	3b01      	subs	r3, #1
 8008c84:	60a3      	str	r3, [r4, #8]
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	1c5a      	adds	r2, r3, #1
 8008c8a:	6022      	str	r2, [r4, #0]
 8008c8c:	701f      	strb	r7, [r3, #0]
 8008c8e:	6963      	ldr	r3, [r4, #20]
 8008c90:	4283      	cmp	r3, r0
 8008c92:	d004      	beq.n	8008c9e <__swbuf_r+0x6a>
 8008c94:	89a3      	ldrh	r3, [r4, #12]
 8008c96:	07db      	lsls	r3, r3, #31
 8008c98:	d51a      	bpl.n	8008cd0 <__swbuf_r+0x9c>
 8008c9a:	2e0a      	cmp	r6, #10
 8008c9c:	d118      	bne.n	8008cd0 <__swbuf_r+0x9c>
 8008c9e:	0021      	movs	r1, r4
 8008ca0:	0028      	movs	r0, r5
 8008ca2:	f000 f925 	bl	8008ef0 <_fflush_r>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d012      	beq.n	8008cd0 <__swbuf_r+0x9c>
 8008caa:	e00f      	b.n	8008ccc <__swbuf_r+0x98>
 8008cac:	4b0a      	ldr	r3, [pc, #40]	; (8008cd8 <__swbuf_r+0xa4>)
 8008cae:	429c      	cmp	r4, r3
 8008cb0:	d101      	bne.n	8008cb6 <__swbuf_r+0x82>
 8008cb2:	68ac      	ldr	r4, [r5, #8]
 8008cb4:	e7cd      	b.n	8008c52 <__swbuf_r+0x1e>
 8008cb6:	4b09      	ldr	r3, [pc, #36]	; (8008cdc <__swbuf_r+0xa8>)
 8008cb8:	429c      	cmp	r4, r3
 8008cba:	d1ca      	bne.n	8008c52 <__swbuf_r+0x1e>
 8008cbc:	68ec      	ldr	r4, [r5, #12]
 8008cbe:	e7c8      	b.n	8008c52 <__swbuf_r+0x1e>
 8008cc0:	0021      	movs	r1, r4
 8008cc2:	0028      	movs	r0, r5
 8008cc4:	f000 f80c 	bl	8008ce0 <__swsetup_r>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d0ca      	beq.n	8008c62 <__swbuf_r+0x2e>
 8008ccc:	2601      	movs	r6, #1
 8008cce:	4276      	negs	r6, r6
 8008cd0:	0030      	movs	r0, r6
 8008cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cd4:	0800a78c 	.word	0x0800a78c
 8008cd8:	0800a7ac 	.word	0x0800a7ac
 8008cdc:	0800a76c 	.word	0x0800a76c

08008ce0 <__swsetup_r>:
 8008ce0:	4b36      	ldr	r3, [pc, #216]	; (8008dbc <__swsetup_r+0xdc>)
 8008ce2:	b570      	push	{r4, r5, r6, lr}
 8008ce4:	681d      	ldr	r5, [r3, #0]
 8008ce6:	0006      	movs	r6, r0
 8008ce8:	000c      	movs	r4, r1
 8008cea:	2d00      	cmp	r5, #0
 8008cec:	d005      	beq.n	8008cfa <__swsetup_r+0x1a>
 8008cee:	69ab      	ldr	r3, [r5, #24]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d102      	bne.n	8008cfa <__swsetup_r+0x1a>
 8008cf4:	0028      	movs	r0, r5
 8008cf6:	f000 f969 	bl	8008fcc <__sinit>
 8008cfa:	4b31      	ldr	r3, [pc, #196]	; (8008dc0 <__swsetup_r+0xe0>)
 8008cfc:	429c      	cmp	r4, r3
 8008cfe:	d10f      	bne.n	8008d20 <__swsetup_r+0x40>
 8008d00:	686c      	ldr	r4, [r5, #4]
 8008d02:	230c      	movs	r3, #12
 8008d04:	5ee2      	ldrsh	r2, [r4, r3]
 8008d06:	b293      	uxth	r3, r2
 8008d08:	0719      	lsls	r1, r3, #28
 8008d0a:	d42d      	bmi.n	8008d68 <__swsetup_r+0x88>
 8008d0c:	06d9      	lsls	r1, r3, #27
 8008d0e:	d411      	bmi.n	8008d34 <__swsetup_r+0x54>
 8008d10:	2309      	movs	r3, #9
 8008d12:	2001      	movs	r0, #1
 8008d14:	6033      	str	r3, [r6, #0]
 8008d16:	3337      	adds	r3, #55	; 0x37
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	4240      	negs	r0, r0
 8008d1e:	bd70      	pop	{r4, r5, r6, pc}
 8008d20:	4b28      	ldr	r3, [pc, #160]	; (8008dc4 <__swsetup_r+0xe4>)
 8008d22:	429c      	cmp	r4, r3
 8008d24:	d101      	bne.n	8008d2a <__swsetup_r+0x4a>
 8008d26:	68ac      	ldr	r4, [r5, #8]
 8008d28:	e7eb      	b.n	8008d02 <__swsetup_r+0x22>
 8008d2a:	4b27      	ldr	r3, [pc, #156]	; (8008dc8 <__swsetup_r+0xe8>)
 8008d2c:	429c      	cmp	r4, r3
 8008d2e:	d1e8      	bne.n	8008d02 <__swsetup_r+0x22>
 8008d30:	68ec      	ldr	r4, [r5, #12]
 8008d32:	e7e6      	b.n	8008d02 <__swsetup_r+0x22>
 8008d34:	075b      	lsls	r3, r3, #29
 8008d36:	d513      	bpl.n	8008d60 <__swsetup_r+0x80>
 8008d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d3a:	2900      	cmp	r1, #0
 8008d3c:	d008      	beq.n	8008d50 <__swsetup_r+0x70>
 8008d3e:	0023      	movs	r3, r4
 8008d40:	3344      	adds	r3, #68	; 0x44
 8008d42:	4299      	cmp	r1, r3
 8008d44:	d002      	beq.n	8008d4c <__swsetup_r+0x6c>
 8008d46:	0030      	movs	r0, r6
 8008d48:	f000 fa4c 	bl	80091e4 <_free_r>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	6363      	str	r3, [r4, #52]	; 0x34
 8008d50:	2224      	movs	r2, #36	; 0x24
 8008d52:	89a3      	ldrh	r3, [r4, #12]
 8008d54:	4393      	bics	r3, r2
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	6063      	str	r3, [r4, #4]
 8008d5c:	6923      	ldr	r3, [r4, #16]
 8008d5e:	6023      	str	r3, [r4, #0]
 8008d60:	2308      	movs	r3, #8
 8008d62:	89a2      	ldrh	r2, [r4, #12]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	81a3      	strh	r3, [r4, #12]
 8008d68:	6923      	ldr	r3, [r4, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10b      	bne.n	8008d86 <__swsetup_r+0xa6>
 8008d6e:	21a0      	movs	r1, #160	; 0xa0
 8008d70:	2280      	movs	r2, #128	; 0x80
 8008d72:	89a3      	ldrh	r3, [r4, #12]
 8008d74:	0089      	lsls	r1, r1, #2
 8008d76:	0092      	lsls	r2, r2, #2
 8008d78:	400b      	ands	r3, r1
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d003      	beq.n	8008d86 <__swsetup_r+0xa6>
 8008d7e:	0021      	movs	r1, r4
 8008d80:	0030      	movs	r0, r6
 8008d82:	f000 f9df 	bl	8009144 <__smakebuf_r>
 8008d86:	2301      	movs	r3, #1
 8008d88:	89a2      	ldrh	r2, [r4, #12]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	d011      	beq.n	8008db2 <__swsetup_r+0xd2>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60a3      	str	r3, [r4, #8]
 8008d92:	6963      	ldr	r3, [r4, #20]
 8008d94:	425b      	negs	r3, r3
 8008d96:	61a3      	str	r3, [r4, #24]
 8008d98:	2000      	movs	r0, #0
 8008d9a:	6923      	ldr	r3, [r4, #16]
 8008d9c:	4283      	cmp	r3, r0
 8008d9e:	d1be      	bne.n	8008d1e <__swsetup_r+0x3e>
 8008da0:	230c      	movs	r3, #12
 8008da2:	5ee2      	ldrsh	r2, [r4, r3]
 8008da4:	0613      	lsls	r3, r2, #24
 8008da6:	d5ba      	bpl.n	8008d1e <__swsetup_r+0x3e>
 8008da8:	2340      	movs	r3, #64	; 0x40
 8008daa:	4313      	orrs	r3, r2
 8008dac:	81a3      	strh	r3, [r4, #12]
 8008dae:	3801      	subs	r0, #1
 8008db0:	e7b5      	b.n	8008d1e <__swsetup_r+0x3e>
 8008db2:	0792      	lsls	r2, r2, #30
 8008db4:	d400      	bmi.n	8008db8 <__swsetup_r+0xd8>
 8008db6:	6963      	ldr	r3, [r4, #20]
 8008db8:	60a3      	str	r3, [r4, #8]
 8008dba:	e7ed      	b.n	8008d98 <__swsetup_r+0xb8>
 8008dbc:	20000148 	.word	0x20000148
 8008dc0:	0800a78c 	.word	0x0800a78c
 8008dc4:	0800a7ac 	.word	0x0800a7ac
 8008dc8:	0800a76c 	.word	0x0800a76c

08008dcc <abort>:
 8008dcc:	b510      	push	{r4, lr}
 8008dce:	2006      	movs	r0, #6
 8008dd0:	f000 faec 	bl	80093ac <raise>
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	f000 fc19 	bl	800960c <_exit>
	...

08008ddc <__sflush_r>:
 8008ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dde:	898a      	ldrh	r2, [r1, #12]
 8008de0:	0005      	movs	r5, r0
 8008de2:	000c      	movs	r4, r1
 8008de4:	0713      	lsls	r3, r2, #28
 8008de6:	d460      	bmi.n	8008eaa <__sflush_r+0xce>
 8008de8:	684b      	ldr	r3, [r1, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	dc04      	bgt.n	8008df8 <__sflush_r+0x1c>
 8008dee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	dc01      	bgt.n	8008df8 <__sflush_r+0x1c>
 8008df4:	2000      	movs	r0, #0
 8008df6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008df8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008dfa:	2f00      	cmp	r7, #0
 8008dfc:	d0fa      	beq.n	8008df4 <__sflush_r+0x18>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	682e      	ldr	r6, [r5, #0]
 8008e02:	602b      	str	r3, [r5, #0]
 8008e04:	2380      	movs	r3, #128	; 0x80
 8008e06:	015b      	lsls	r3, r3, #5
 8008e08:	6a21      	ldr	r1, [r4, #32]
 8008e0a:	401a      	ands	r2, r3
 8008e0c:	d034      	beq.n	8008e78 <__sflush_r+0x9c>
 8008e0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	075b      	lsls	r3, r3, #29
 8008e14:	d506      	bpl.n	8008e24 <__sflush_r+0x48>
 8008e16:	6863      	ldr	r3, [r4, #4]
 8008e18:	1ac0      	subs	r0, r0, r3
 8008e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <__sflush_r+0x48>
 8008e20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e22:	1ac0      	subs	r0, r0, r3
 8008e24:	0002      	movs	r2, r0
 8008e26:	6a21      	ldr	r1, [r4, #32]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	0028      	movs	r0, r5
 8008e2c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008e2e:	47b8      	blx	r7
 8008e30:	89a1      	ldrh	r1, [r4, #12]
 8008e32:	1c43      	adds	r3, r0, #1
 8008e34:	d106      	bne.n	8008e44 <__sflush_r+0x68>
 8008e36:	682b      	ldr	r3, [r5, #0]
 8008e38:	2b1d      	cmp	r3, #29
 8008e3a:	d830      	bhi.n	8008e9e <__sflush_r+0xc2>
 8008e3c:	4a2b      	ldr	r2, [pc, #172]	; (8008eec <__sflush_r+0x110>)
 8008e3e:	40da      	lsrs	r2, r3
 8008e40:	07d3      	lsls	r3, r2, #31
 8008e42:	d52c      	bpl.n	8008e9e <__sflush_r+0xc2>
 8008e44:	2300      	movs	r3, #0
 8008e46:	6063      	str	r3, [r4, #4]
 8008e48:	6923      	ldr	r3, [r4, #16]
 8008e4a:	6023      	str	r3, [r4, #0]
 8008e4c:	04cb      	lsls	r3, r1, #19
 8008e4e:	d505      	bpl.n	8008e5c <__sflush_r+0x80>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <__sflush_r+0x7e>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d100      	bne.n	8008e5c <__sflush_r+0x80>
 8008e5a:	6560      	str	r0, [r4, #84]	; 0x54
 8008e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e5e:	602e      	str	r6, [r5, #0]
 8008e60:	2900      	cmp	r1, #0
 8008e62:	d0c7      	beq.n	8008df4 <__sflush_r+0x18>
 8008e64:	0023      	movs	r3, r4
 8008e66:	3344      	adds	r3, #68	; 0x44
 8008e68:	4299      	cmp	r1, r3
 8008e6a:	d002      	beq.n	8008e72 <__sflush_r+0x96>
 8008e6c:	0028      	movs	r0, r5
 8008e6e:	f000 f9b9 	bl	80091e4 <_free_r>
 8008e72:	2000      	movs	r0, #0
 8008e74:	6360      	str	r0, [r4, #52]	; 0x34
 8008e76:	e7be      	b.n	8008df6 <__sflush_r+0x1a>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	0028      	movs	r0, r5
 8008e7c:	47b8      	blx	r7
 8008e7e:	1c43      	adds	r3, r0, #1
 8008e80:	d1c6      	bne.n	8008e10 <__sflush_r+0x34>
 8008e82:	682b      	ldr	r3, [r5, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d0c3      	beq.n	8008e10 <__sflush_r+0x34>
 8008e88:	2b1d      	cmp	r3, #29
 8008e8a:	d001      	beq.n	8008e90 <__sflush_r+0xb4>
 8008e8c:	2b16      	cmp	r3, #22
 8008e8e:	d101      	bne.n	8008e94 <__sflush_r+0xb8>
 8008e90:	602e      	str	r6, [r5, #0]
 8008e92:	e7af      	b.n	8008df4 <__sflush_r+0x18>
 8008e94:	2340      	movs	r3, #64	; 0x40
 8008e96:	89a2      	ldrh	r2, [r4, #12]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	81a3      	strh	r3, [r4, #12]
 8008e9c:	e7ab      	b.n	8008df6 <__sflush_r+0x1a>
 8008e9e:	2340      	movs	r3, #64	; 0x40
 8008ea0:	430b      	orrs	r3, r1
 8008ea2:	2001      	movs	r0, #1
 8008ea4:	81a3      	strh	r3, [r4, #12]
 8008ea6:	4240      	negs	r0, r0
 8008ea8:	e7a5      	b.n	8008df6 <__sflush_r+0x1a>
 8008eaa:	690f      	ldr	r7, [r1, #16]
 8008eac:	2f00      	cmp	r7, #0
 8008eae:	d0a1      	beq.n	8008df4 <__sflush_r+0x18>
 8008eb0:	680b      	ldr	r3, [r1, #0]
 8008eb2:	600f      	str	r7, [r1, #0]
 8008eb4:	1bdb      	subs	r3, r3, r7
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	0792      	lsls	r2, r2, #30
 8008ebc:	d100      	bne.n	8008ec0 <__sflush_r+0xe4>
 8008ebe:	694b      	ldr	r3, [r1, #20]
 8008ec0:	60a3      	str	r3, [r4, #8]
 8008ec2:	9b01      	ldr	r3, [sp, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dc00      	bgt.n	8008eca <__sflush_r+0xee>
 8008ec8:	e794      	b.n	8008df4 <__sflush_r+0x18>
 8008eca:	9b01      	ldr	r3, [sp, #4]
 8008ecc:	003a      	movs	r2, r7
 8008ece:	6a21      	ldr	r1, [r4, #32]
 8008ed0:	0028      	movs	r0, r5
 8008ed2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ed4:	47b0      	blx	r6
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	dc03      	bgt.n	8008ee2 <__sflush_r+0x106>
 8008eda:	2340      	movs	r3, #64	; 0x40
 8008edc:	89a2      	ldrh	r2, [r4, #12]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	e7df      	b.n	8008ea2 <__sflush_r+0xc6>
 8008ee2:	9b01      	ldr	r3, [sp, #4]
 8008ee4:	183f      	adds	r7, r7, r0
 8008ee6:	1a1b      	subs	r3, r3, r0
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	e7ea      	b.n	8008ec2 <__sflush_r+0xe6>
 8008eec:	20400001 	.word	0x20400001

08008ef0 <_fflush_r>:
 8008ef0:	690b      	ldr	r3, [r1, #16]
 8008ef2:	b570      	push	{r4, r5, r6, lr}
 8008ef4:	0005      	movs	r5, r0
 8008ef6:	000c      	movs	r4, r1
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <_fflush_r+0x10>
 8008efc:	2000      	movs	r0, #0
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d004      	beq.n	8008f0e <_fflush_r+0x1e>
 8008f04:	6983      	ldr	r3, [r0, #24]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <_fflush_r+0x1e>
 8008f0a:	f000 f85f 	bl	8008fcc <__sinit>
 8008f0e:	4b0b      	ldr	r3, [pc, #44]	; (8008f3c <_fflush_r+0x4c>)
 8008f10:	429c      	cmp	r4, r3
 8008f12:	d109      	bne.n	8008f28 <_fflush_r+0x38>
 8008f14:	686c      	ldr	r4, [r5, #4]
 8008f16:	220c      	movs	r2, #12
 8008f18:	5ea3      	ldrsh	r3, [r4, r2]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0ee      	beq.n	8008efc <_fflush_r+0xc>
 8008f1e:	0021      	movs	r1, r4
 8008f20:	0028      	movs	r0, r5
 8008f22:	f7ff ff5b 	bl	8008ddc <__sflush_r>
 8008f26:	e7ea      	b.n	8008efe <_fflush_r+0xe>
 8008f28:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <_fflush_r+0x50>)
 8008f2a:	429c      	cmp	r4, r3
 8008f2c:	d101      	bne.n	8008f32 <_fflush_r+0x42>
 8008f2e:	68ac      	ldr	r4, [r5, #8]
 8008f30:	e7f1      	b.n	8008f16 <_fflush_r+0x26>
 8008f32:	4b04      	ldr	r3, [pc, #16]	; (8008f44 <_fflush_r+0x54>)
 8008f34:	429c      	cmp	r4, r3
 8008f36:	d1ee      	bne.n	8008f16 <_fflush_r+0x26>
 8008f38:	68ec      	ldr	r4, [r5, #12]
 8008f3a:	e7ec      	b.n	8008f16 <_fflush_r+0x26>
 8008f3c:	0800a78c 	.word	0x0800a78c
 8008f40:	0800a7ac 	.word	0x0800a7ac
 8008f44:	0800a76c 	.word	0x0800a76c

08008f48 <std>:
 8008f48:	2300      	movs	r3, #0
 8008f4a:	b510      	push	{r4, lr}
 8008f4c:	0004      	movs	r4, r0
 8008f4e:	6003      	str	r3, [r0, #0]
 8008f50:	6043      	str	r3, [r0, #4]
 8008f52:	6083      	str	r3, [r0, #8]
 8008f54:	8181      	strh	r1, [r0, #12]
 8008f56:	6643      	str	r3, [r0, #100]	; 0x64
 8008f58:	81c2      	strh	r2, [r0, #14]
 8008f5a:	6103      	str	r3, [r0, #16]
 8008f5c:	6143      	str	r3, [r0, #20]
 8008f5e:	6183      	str	r3, [r0, #24]
 8008f60:	0019      	movs	r1, r3
 8008f62:	2208      	movs	r2, #8
 8008f64:	305c      	adds	r0, #92	; 0x5c
 8008f66:	f7ff fba9 	bl	80086bc <memset>
 8008f6a:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <std+0x38>)
 8008f6c:	6224      	str	r4, [r4, #32]
 8008f6e:	6263      	str	r3, [r4, #36]	; 0x24
 8008f70:	4b04      	ldr	r3, [pc, #16]	; (8008f84 <std+0x3c>)
 8008f72:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f74:	4b04      	ldr	r3, [pc, #16]	; (8008f88 <std+0x40>)
 8008f76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f78:	4b04      	ldr	r3, [pc, #16]	; (8008f8c <std+0x44>)
 8008f7a:	6323      	str	r3, [r4, #48]	; 0x30
 8008f7c:	bd10      	pop	{r4, pc}
 8008f7e:	46c0      	nop			; (mov r8, r8)
 8008f80:	080093ed 	.word	0x080093ed
 8008f84:	08009415 	.word	0x08009415
 8008f88:	0800944d 	.word	0x0800944d
 8008f8c:	08009479 	.word	0x08009479

08008f90 <_cleanup_r>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	4902      	ldr	r1, [pc, #8]	; (8008f9c <_cleanup_r+0xc>)
 8008f94:	f000 f88c 	bl	80090b0 <_fwalk_reent>
 8008f98:	bd10      	pop	{r4, pc}
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	08008ef1 	.word	0x08008ef1

08008fa0 <__sfmoreglue>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	2568      	movs	r5, #104	; 0x68
 8008fa4:	1e4a      	subs	r2, r1, #1
 8008fa6:	4355      	muls	r5, r2
 8008fa8:	000e      	movs	r6, r1
 8008faa:	0029      	movs	r1, r5
 8008fac:	3174      	adds	r1, #116	; 0x74
 8008fae:	f000 f963 	bl	8009278 <_malloc_r>
 8008fb2:	1e04      	subs	r4, r0, #0
 8008fb4:	d008      	beq.n	8008fc8 <__sfmoreglue+0x28>
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	002a      	movs	r2, r5
 8008fba:	6001      	str	r1, [r0, #0]
 8008fbc:	6046      	str	r6, [r0, #4]
 8008fbe:	300c      	adds	r0, #12
 8008fc0:	60a0      	str	r0, [r4, #8]
 8008fc2:	3268      	adds	r2, #104	; 0x68
 8008fc4:	f7ff fb7a 	bl	80086bc <memset>
 8008fc8:	0020      	movs	r0, r4
 8008fca:	bd70      	pop	{r4, r5, r6, pc}

08008fcc <__sinit>:
 8008fcc:	6983      	ldr	r3, [r0, #24]
 8008fce:	b513      	push	{r0, r1, r4, lr}
 8008fd0:	0004      	movs	r4, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d128      	bne.n	8009028 <__sinit+0x5c>
 8008fd6:	6483      	str	r3, [r0, #72]	; 0x48
 8008fd8:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008fda:	6503      	str	r3, [r0, #80]	; 0x50
 8008fdc:	4b13      	ldr	r3, [pc, #76]	; (800902c <__sinit+0x60>)
 8008fde:	4a14      	ldr	r2, [pc, #80]	; (8009030 <__sinit+0x64>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6282      	str	r2, [r0, #40]	; 0x28
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	4298      	cmp	r0, r3
 8008fe8:	d101      	bne.n	8008fee <__sinit+0x22>
 8008fea:	2301      	movs	r3, #1
 8008fec:	6183      	str	r3, [r0, #24]
 8008fee:	0020      	movs	r0, r4
 8008ff0:	f000 f820 	bl	8009034 <__sfp>
 8008ff4:	6060      	str	r0, [r4, #4]
 8008ff6:	0020      	movs	r0, r4
 8008ff8:	f000 f81c 	bl	8009034 <__sfp>
 8008ffc:	60a0      	str	r0, [r4, #8]
 8008ffe:	0020      	movs	r0, r4
 8009000:	f000 f818 	bl	8009034 <__sfp>
 8009004:	2200      	movs	r2, #0
 8009006:	60e0      	str	r0, [r4, #12]
 8009008:	2104      	movs	r1, #4
 800900a:	6860      	ldr	r0, [r4, #4]
 800900c:	f7ff ff9c 	bl	8008f48 <std>
 8009010:	2201      	movs	r2, #1
 8009012:	2109      	movs	r1, #9
 8009014:	68a0      	ldr	r0, [r4, #8]
 8009016:	f7ff ff97 	bl	8008f48 <std>
 800901a:	2202      	movs	r2, #2
 800901c:	2112      	movs	r1, #18
 800901e:	68e0      	ldr	r0, [r4, #12]
 8009020:	f7ff ff92 	bl	8008f48 <std>
 8009024:	2301      	movs	r3, #1
 8009026:	61a3      	str	r3, [r4, #24]
 8009028:	bd13      	pop	{r0, r1, r4, pc}
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	0800a734 	.word	0x0800a734
 8009030:	08008f91 	.word	0x08008f91

08009034 <__sfp>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	4b1c      	ldr	r3, [pc, #112]	; (80090a8 <__sfp+0x74>)
 8009038:	0007      	movs	r7, r0
 800903a:	681e      	ldr	r6, [r3, #0]
 800903c:	69b3      	ldr	r3, [r6, #24]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d102      	bne.n	8009048 <__sfp+0x14>
 8009042:	0030      	movs	r0, r6
 8009044:	f7ff ffc2 	bl	8008fcc <__sinit>
 8009048:	3648      	adds	r6, #72	; 0x48
 800904a:	68b4      	ldr	r4, [r6, #8]
 800904c:	6873      	ldr	r3, [r6, #4]
 800904e:	3b01      	subs	r3, #1
 8009050:	d504      	bpl.n	800905c <__sfp+0x28>
 8009052:	6833      	ldr	r3, [r6, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d007      	beq.n	8009068 <__sfp+0x34>
 8009058:	6836      	ldr	r6, [r6, #0]
 800905a:	e7f6      	b.n	800904a <__sfp+0x16>
 800905c:	220c      	movs	r2, #12
 800905e:	5ea5      	ldrsh	r5, [r4, r2]
 8009060:	2d00      	cmp	r5, #0
 8009062:	d00d      	beq.n	8009080 <__sfp+0x4c>
 8009064:	3468      	adds	r4, #104	; 0x68
 8009066:	e7f2      	b.n	800904e <__sfp+0x1a>
 8009068:	2104      	movs	r1, #4
 800906a:	0038      	movs	r0, r7
 800906c:	f7ff ff98 	bl	8008fa0 <__sfmoreglue>
 8009070:	6030      	str	r0, [r6, #0]
 8009072:	2800      	cmp	r0, #0
 8009074:	d1f0      	bne.n	8009058 <__sfp+0x24>
 8009076:	230c      	movs	r3, #12
 8009078:	0004      	movs	r4, r0
 800907a:	603b      	str	r3, [r7, #0]
 800907c:	0020      	movs	r0, r4
 800907e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009080:	0020      	movs	r0, r4
 8009082:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <__sfp+0x78>)
 8009084:	6665      	str	r5, [r4, #100]	; 0x64
 8009086:	6025      	str	r5, [r4, #0]
 8009088:	6065      	str	r5, [r4, #4]
 800908a:	60a5      	str	r5, [r4, #8]
 800908c:	60e3      	str	r3, [r4, #12]
 800908e:	6125      	str	r5, [r4, #16]
 8009090:	6165      	str	r5, [r4, #20]
 8009092:	61a5      	str	r5, [r4, #24]
 8009094:	2208      	movs	r2, #8
 8009096:	0029      	movs	r1, r5
 8009098:	305c      	adds	r0, #92	; 0x5c
 800909a:	f7ff fb0f 	bl	80086bc <memset>
 800909e:	6365      	str	r5, [r4, #52]	; 0x34
 80090a0:	63a5      	str	r5, [r4, #56]	; 0x38
 80090a2:	64a5      	str	r5, [r4, #72]	; 0x48
 80090a4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80090a6:	e7e9      	b.n	800907c <__sfp+0x48>
 80090a8:	0800a734 	.word	0x0800a734
 80090ac:	ffff0001 	.word	0xffff0001

080090b0 <_fwalk_reent>:
 80090b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090b2:	0004      	movs	r4, r0
 80090b4:	0007      	movs	r7, r0
 80090b6:	2600      	movs	r6, #0
 80090b8:	9101      	str	r1, [sp, #4]
 80090ba:	3448      	adds	r4, #72	; 0x48
 80090bc:	2c00      	cmp	r4, #0
 80090be:	d101      	bne.n	80090c4 <_fwalk_reent+0x14>
 80090c0:	0030      	movs	r0, r6
 80090c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090c4:	6863      	ldr	r3, [r4, #4]
 80090c6:	68a5      	ldr	r5, [r4, #8]
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	9b00      	ldr	r3, [sp, #0]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	d501      	bpl.n	80090d6 <_fwalk_reent+0x26>
 80090d2:	6824      	ldr	r4, [r4, #0]
 80090d4:	e7f2      	b.n	80090bc <_fwalk_reent+0xc>
 80090d6:	89ab      	ldrh	r3, [r5, #12]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d908      	bls.n	80090ee <_fwalk_reent+0x3e>
 80090dc:	220e      	movs	r2, #14
 80090de:	5eab      	ldrsh	r3, [r5, r2]
 80090e0:	3301      	adds	r3, #1
 80090e2:	d004      	beq.n	80090ee <_fwalk_reent+0x3e>
 80090e4:	0029      	movs	r1, r5
 80090e6:	0038      	movs	r0, r7
 80090e8:	9b01      	ldr	r3, [sp, #4]
 80090ea:	4798      	blx	r3
 80090ec:	4306      	orrs	r6, r0
 80090ee:	3568      	adds	r5, #104	; 0x68
 80090f0:	e7eb      	b.n	80090ca <_fwalk_reent+0x1a>
	...

080090f4 <__swhatbuf_r>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	000e      	movs	r6, r1
 80090f8:	001d      	movs	r5, r3
 80090fa:	230e      	movs	r3, #14
 80090fc:	5ec9      	ldrsh	r1, [r1, r3]
 80090fe:	b096      	sub	sp, #88	; 0x58
 8009100:	0014      	movs	r4, r2
 8009102:	2900      	cmp	r1, #0
 8009104:	da07      	bge.n	8009116 <__swhatbuf_r+0x22>
 8009106:	2300      	movs	r3, #0
 8009108:	602b      	str	r3, [r5, #0]
 800910a:	89b3      	ldrh	r3, [r6, #12]
 800910c:	061b      	lsls	r3, r3, #24
 800910e:	d411      	bmi.n	8009134 <__swhatbuf_r+0x40>
 8009110:	2380      	movs	r3, #128	; 0x80
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	e00f      	b.n	8009136 <__swhatbuf_r+0x42>
 8009116:	466a      	mov	r2, sp
 8009118:	f000 f9da 	bl	80094d0 <_fstat_r>
 800911c:	2800      	cmp	r0, #0
 800911e:	dbf2      	blt.n	8009106 <__swhatbuf_r+0x12>
 8009120:	22f0      	movs	r2, #240	; 0xf0
 8009122:	9b01      	ldr	r3, [sp, #4]
 8009124:	0212      	lsls	r2, r2, #8
 8009126:	4013      	ands	r3, r2
 8009128:	4a05      	ldr	r2, [pc, #20]	; (8009140 <__swhatbuf_r+0x4c>)
 800912a:	189b      	adds	r3, r3, r2
 800912c:	425a      	negs	r2, r3
 800912e:	4153      	adcs	r3, r2
 8009130:	602b      	str	r3, [r5, #0]
 8009132:	e7ed      	b.n	8009110 <__swhatbuf_r+0x1c>
 8009134:	2340      	movs	r3, #64	; 0x40
 8009136:	2000      	movs	r0, #0
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	b016      	add	sp, #88	; 0x58
 800913c:	bd70      	pop	{r4, r5, r6, pc}
 800913e:	46c0      	nop			; (mov r8, r8)
 8009140:	ffffe000 	.word	0xffffe000

08009144 <__smakebuf_r>:
 8009144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009146:	2602      	movs	r6, #2
 8009148:	898b      	ldrh	r3, [r1, #12]
 800914a:	0005      	movs	r5, r0
 800914c:	000c      	movs	r4, r1
 800914e:	4233      	tst	r3, r6
 8009150:	d006      	beq.n	8009160 <__smakebuf_r+0x1c>
 8009152:	0023      	movs	r3, r4
 8009154:	3347      	adds	r3, #71	; 0x47
 8009156:	6023      	str	r3, [r4, #0]
 8009158:	6123      	str	r3, [r4, #16]
 800915a:	2301      	movs	r3, #1
 800915c:	6163      	str	r3, [r4, #20]
 800915e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009160:	ab01      	add	r3, sp, #4
 8009162:	466a      	mov	r2, sp
 8009164:	f7ff ffc6 	bl	80090f4 <__swhatbuf_r>
 8009168:	9900      	ldr	r1, [sp, #0]
 800916a:	0007      	movs	r7, r0
 800916c:	0028      	movs	r0, r5
 800916e:	f000 f883 	bl	8009278 <_malloc_r>
 8009172:	2800      	cmp	r0, #0
 8009174:	d108      	bne.n	8009188 <__smakebuf_r+0x44>
 8009176:	220c      	movs	r2, #12
 8009178:	5ea3      	ldrsh	r3, [r4, r2]
 800917a:	059a      	lsls	r2, r3, #22
 800917c:	d4ef      	bmi.n	800915e <__smakebuf_r+0x1a>
 800917e:	2203      	movs	r2, #3
 8009180:	4393      	bics	r3, r2
 8009182:	431e      	orrs	r6, r3
 8009184:	81a6      	strh	r6, [r4, #12]
 8009186:	e7e4      	b.n	8009152 <__smakebuf_r+0xe>
 8009188:	4b0f      	ldr	r3, [pc, #60]	; (80091c8 <__smakebuf_r+0x84>)
 800918a:	62ab      	str	r3, [r5, #40]	; 0x28
 800918c:	2380      	movs	r3, #128	; 0x80
 800918e:	89a2      	ldrh	r2, [r4, #12]
 8009190:	6020      	str	r0, [r4, #0]
 8009192:	4313      	orrs	r3, r2
 8009194:	81a3      	strh	r3, [r4, #12]
 8009196:	9b00      	ldr	r3, [sp, #0]
 8009198:	6120      	str	r0, [r4, #16]
 800919a:	6163      	str	r3, [r4, #20]
 800919c:	9b01      	ldr	r3, [sp, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00d      	beq.n	80091be <__smakebuf_r+0x7a>
 80091a2:	230e      	movs	r3, #14
 80091a4:	5ee1      	ldrsh	r1, [r4, r3]
 80091a6:	0028      	movs	r0, r5
 80091a8:	f000 f9a4 	bl	80094f4 <_isatty_r>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d006      	beq.n	80091be <__smakebuf_r+0x7a>
 80091b0:	2203      	movs	r2, #3
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	4393      	bics	r3, r2
 80091b6:	001a      	movs	r2, r3
 80091b8:	2301      	movs	r3, #1
 80091ba:	4313      	orrs	r3, r2
 80091bc:	81a3      	strh	r3, [r4, #12]
 80091be:	89a0      	ldrh	r0, [r4, #12]
 80091c0:	4338      	orrs	r0, r7
 80091c2:	81a0      	strh	r0, [r4, #12]
 80091c4:	e7cb      	b.n	800915e <__smakebuf_r+0x1a>
 80091c6:	46c0      	nop			; (mov r8, r8)
 80091c8:	08008f91 	.word	0x08008f91

080091cc <memchr>:
 80091cc:	b2c9      	uxtb	r1, r1
 80091ce:	1882      	adds	r2, r0, r2
 80091d0:	4290      	cmp	r0, r2
 80091d2:	d101      	bne.n	80091d8 <memchr+0xc>
 80091d4:	2000      	movs	r0, #0
 80091d6:	4770      	bx	lr
 80091d8:	7803      	ldrb	r3, [r0, #0]
 80091da:	428b      	cmp	r3, r1
 80091dc:	d0fb      	beq.n	80091d6 <memchr+0xa>
 80091de:	3001      	adds	r0, #1
 80091e0:	e7f6      	b.n	80091d0 <memchr+0x4>
	...

080091e4 <_free_r>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	0005      	movs	r5, r0
 80091e8:	2900      	cmp	r1, #0
 80091ea:	d010      	beq.n	800920e <_free_r+0x2a>
 80091ec:	1f0c      	subs	r4, r1, #4
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	da00      	bge.n	80091f6 <_free_r+0x12>
 80091f4:	18e4      	adds	r4, r4, r3
 80091f6:	0028      	movs	r0, r5
 80091f8:	f000 f9a2 	bl	8009540 <__malloc_lock>
 80091fc:	4a1d      	ldr	r2, [pc, #116]	; (8009274 <_free_r+0x90>)
 80091fe:	6813      	ldr	r3, [r2, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d105      	bne.n	8009210 <_free_r+0x2c>
 8009204:	6063      	str	r3, [r4, #4]
 8009206:	6014      	str	r4, [r2, #0]
 8009208:	0028      	movs	r0, r5
 800920a:	f000 f99a 	bl	8009542 <__malloc_unlock>
 800920e:	bd70      	pop	{r4, r5, r6, pc}
 8009210:	42a3      	cmp	r3, r4
 8009212:	d909      	bls.n	8009228 <_free_r+0x44>
 8009214:	6821      	ldr	r1, [r4, #0]
 8009216:	1860      	adds	r0, r4, r1
 8009218:	4283      	cmp	r3, r0
 800921a:	d1f3      	bne.n	8009204 <_free_r+0x20>
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	1841      	adds	r1, r0, r1
 8009222:	6021      	str	r1, [r4, #0]
 8009224:	e7ee      	b.n	8009204 <_free_r+0x20>
 8009226:	0013      	movs	r3, r2
 8009228:	685a      	ldr	r2, [r3, #4]
 800922a:	2a00      	cmp	r2, #0
 800922c:	d001      	beq.n	8009232 <_free_r+0x4e>
 800922e:	42a2      	cmp	r2, r4
 8009230:	d9f9      	bls.n	8009226 <_free_r+0x42>
 8009232:	6819      	ldr	r1, [r3, #0]
 8009234:	1858      	adds	r0, r3, r1
 8009236:	42a0      	cmp	r0, r4
 8009238:	d10b      	bne.n	8009252 <_free_r+0x6e>
 800923a:	6820      	ldr	r0, [r4, #0]
 800923c:	1809      	adds	r1, r1, r0
 800923e:	1858      	adds	r0, r3, r1
 8009240:	6019      	str	r1, [r3, #0]
 8009242:	4282      	cmp	r2, r0
 8009244:	d1e0      	bne.n	8009208 <_free_r+0x24>
 8009246:	6810      	ldr	r0, [r2, #0]
 8009248:	6852      	ldr	r2, [r2, #4]
 800924a:	1841      	adds	r1, r0, r1
 800924c:	6019      	str	r1, [r3, #0]
 800924e:	605a      	str	r2, [r3, #4]
 8009250:	e7da      	b.n	8009208 <_free_r+0x24>
 8009252:	42a0      	cmp	r0, r4
 8009254:	d902      	bls.n	800925c <_free_r+0x78>
 8009256:	230c      	movs	r3, #12
 8009258:	602b      	str	r3, [r5, #0]
 800925a:	e7d5      	b.n	8009208 <_free_r+0x24>
 800925c:	6821      	ldr	r1, [r4, #0]
 800925e:	1860      	adds	r0, r4, r1
 8009260:	4282      	cmp	r2, r0
 8009262:	d103      	bne.n	800926c <_free_r+0x88>
 8009264:	6810      	ldr	r0, [r2, #0]
 8009266:	6852      	ldr	r2, [r2, #4]
 8009268:	1841      	adds	r1, r0, r1
 800926a:	6021      	str	r1, [r4, #0]
 800926c:	6062      	str	r2, [r4, #4]
 800926e:	605c      	str	r4, [r3, #4]
 8009270:	e7ca      	b.n	8009208 <_free_r+0x24>
 8009272:	46c0      	nop			; (mov r8, r8)
 8009274:	200021f8 	.word	0x200021f8

08009278 <_malloc_r>:
 8009278:	2303      	movs	r3, #3
 800927a:	b570      	push	{r4, r5, r6, lr}
 800927c:	1ccd      	adds	r5, r1, #3
 800927e:	439d      	bics	r5, r3
 8009280:	3508      	adds	r5, #8
 8009282:	0006      	movs	r6, r0
 8009284:	2d0c      	cmp	r5, #12
 8009286:	d21e      	bcs.n	80092c6 <_malloc_r+0x4e>
 8009288:	250c      	movs	r5, #12
 800928a:	42a9      	cmp	r1, r5
 800928c:	d81d      	bhi.n	80092ca <_malloc_r+0x52>
 800928e:	0030      	movs	r0, r6
 8009290:	f000 f956 	bl	8009540 <__malloc_lock>
 8009294:	4a25      	ldr	r2, [pc, #148]	; (800932c <_malloc_r+0xb4>)
 8009296:	6814      	ldr	r4, [r2, #0]
 8009298:	0021      	movs	r1, r4
 800929a:	2900      	cmp	r1, #0
 800929c:	d119      	bne.n	80092d2 <_malloc_r+0x5a>
 800929e:	4c24      	ldr	r4, [pc, #144]	; (8009330 <_malloc_r+0xb8>)
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d103      	bne.n	80092ae <_malloc_r+0x36>
 80092a6:	0030      	movs	r0, r6
 80092a8:	f000 f844 	bl	8009334 <_sbrk_r>
 80092ac:	6020      	str	r0, [r4, #0]
 80092ae:	0029      	movs	r1, r5
 80092b0:	0030      	movs	r0, r6
 80092b2:	f000 f83f 	bl	8009334 <_sbrk_r>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	d12b      	bne.n	8009312 <_malloc_r+0x9a>
 80092ba:	230c      	movs	r3, #12
 80092bc:	0030      	movs	r0, r6
 80092be:	6033      	str	r3, [r6, #0]
 80092c0:	f000 f93f 	bl	8009542 <__malloc_unlock>
 80092c4:	e003      	b.n	80092ce <_malloc_r+0x56>
 80092c6:	2d00      	cmp	r5, #0
 80092c8:	dadf      	bge.n	800928a <_malloc_r+0x12>
 80092ca:	230c      	movs	r3, #12
 80092cc:	6033      	str	r3, [r6, #0]
 80092ce:	2000      	movs	r0, #0
 80092d0:	bd70      	pop	{r4, r5, r6, pc}
 80092d2:	680b      	ldr	r3, [r1, #0]
 80092d4:	1b5b      	subs	r3, r3, r5
 80092d6:	d419      	bmi.n	800930c <_malloc_r+0x94>
 80092d8:	2b0b      	cmp	r3, #11
 80092da:	d903      	bls.n	80092e4 <_malloc_r+0x6c>
 80092dc:	600b      	str	r3, [r1, #0]
 80092de:	18cc      	adds	r4, r1, r3
 80092e0:	6025      	str	r5, [r4, #0]
 80092e2:	e003      	b.n	80092ec <_malloc_r+0x74>
 80092e4:	684b      	ldr	r3, [r1, #4]
 80092e6:	428c      	cmp	r4, r1
 80092e8:	d10d      	bne.n	8009306 <_malloc_r+0x8e>
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	0030      	movs	r0, r6
 80092ee:	f000 f928 	bl	8009542 <__malloc_unlock>
 80092f2:	0020      	movs	r0, r4
 80092f4:	2207      	movs	r2, #7
 80092f6:	300b      	adds	r0, #11
 80092f8:	1d23      	adds	r3, r4, #4
 80092fa:	4390      	bics	r0, r2
 80092fc:	1ac3      	subs	r3, r0, r3
 80092fe:	d0e7      	beq.n	80092d0 <_malloc_r+0x58>
 8009300:	425a      	negs	r2, r3
 8009302:	50e2      	str	r2, [r4, r3]
 8009304:	e7e4      	b.n	80092d0 <_malloc_r+0x58>
 8009306:	6063      	str	r3, [r4, #4]
 8009308:	000c      	movs	r4, r1
 800930a:	e7ef      	b.n	80092ec <_malloc_r+0x74>
 800930c:	000c      	movs	r4, r1
 800930e:	6849      	ldr	r1, [r1, #4]
 8009310:	e7c3      	b.n	800929a <_malloc_r+0x22>
 8009312:	2303      	movs	r3, #3
 8009314:	1cc4      	adds	r4, r0, #3
 8009316:	439c      	bics	r4, r3
 8009318:	42a0      	cmp	r0, r4
 800931a:	d0e1      	beq.n	80092e0 <_malloc_r+0x68>
 800931c:	1a21      	subs	r1, r4, r0
 800931e:	0030      	movs	r0, r6
 8009320:	f000 f808 	bl	8009334 <_sbrk_r>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d1db      	bne.n	80092e0 <_malloc_r+0x68>
 8009328:	e7c7      	b.n	80092ba <_malloc_r+0x42>
 800932a:	46c0      	nop			; (mov r8, r8)
 800932c:	200021f8 	.word	0x200021f8
 8009330:	200021fc 	.word	0x200021fc

08009334 <_sbrk_r>:
 8009334:	2300      	movs	r3, #0
 8009336:	b570      	push	{r4, r5, r6, lr}
 8009338:	4c06      	ldr	r4, [pc, #24]	; (8009354 <_sbrk_r+0x20>)
 800933a:	0005      	movs	r5, r0
 800933c:	0008      	movs	r0, r1
 800933e:	6023      	str	r3, [r4, #0]
 8009340:	f000 f94c 	bl	80095dc <_sbrk>
 8009344:	1c43      	adds	r3, r0, #1
 8009346:	d103      	bne.n	8009350 <_sbrk_r+0x1c>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d000      	beq.n	8009350 <_sbrk_r+0x1c>
 800934e:	602b      	str	r3, [r5, #0]
 8009350:	bd70      	pop	{r4, r5, r6, pc}
 8009352:	46c0      	nop			; (mov r8, r8)
 8009354:	200031e8 	.word	0x200031e8

08009358 <_raise_r>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	0004      	movs	r4, r0
 800935c:	000d      	movs	r5, r1
 800935e:	291f      	cmp	r1, #31
 8009360:	d904      	bls.n	800936c <_raise_r+0x14>
 8009362:	2316      	movs	r3, #22
 8009364:	6003      	str	r3, [r0, #0]
 8009366:	2001      	movs	r0, #1
 8009368:	4240      	negs	r0, r0
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800936e:	2b00      	cmp	r3, #0
 8009370:	d004      	beq.n	800937c <_raise_r+0x24>
 8009372:	008a      	lsls	r2, r1, #2
 8009374:	189b      	adds	r3, r3, r2
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	2a00      	cmp	r2, #0
 800937a:	d108      	bne.n	800938e <_raise_r+0x36>
 800937c:	0020      	movs	r0, r4
 800937e:	f000 f831 	bl	80093e4 <_getpid_r>
 8009382:	002a      	movs	r2, r5
 8009384:	0001      	movs	r1, r0
 8009386:	0020      	movs	r0, r4
 8009388:	f000 f81a 	bl	80093c0 <_kill_r>
 800938c:	e7ed      	b.n	800936a <_raise_r+0x12>
 800938e:	2000      	movs	r0, #0
 8009390:	2a01      	cmp	r2, #1
 8009392:	d0ea      	beq.n	800936a <_raise_r+0x12>
 8009394:	1c51      	adds	r1, r2, #1
 8009396:	d103      	bne.n	80093a0 <_raise_r+0x48>
 8009398:	2316      	movs	r3, #22
 800939a:	3001      	adds	r0, #1
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	e7e4      	b.n	800936a <_raise_r+0x12>
 80093a0:	2400      	movs	r4, #0
 80093a2:	0028      	movs	r0, r5
 80093a4:	601c      	str	r4, [r3, #0]
 80093a6:	4790      	blx	r2
 80093a8:	0020      	movs	r0, r4
 80093aa:	e7de      	b.n	800936a <_raise_r+0x12>

080093ac <raise>:
 80093ac:	b510      	push	{r4, lr}
 80093ae:	4b03      	ldr	r3, [pc, #12]	; (80093bc <raise+0x10>)
 80093b0:	0001      	movs	r1, r0
 80093b2:	6818      	ldr	r0, [r3, #0]
 80093b4:	f7ff ffd0 	bl	8009358 <_raise_r>
 80093b8:	bd10      	pop	{r4, pc}
 80093ba:	46c0      	nop			; (mov r8, r8)
 80093bc:	20000148 	.word	0x20000148

080093c0 <_kill_r>:
 80093c0:	2300      	movs	r3, #0
 80093c2:	b570      	push	{r4, r5, r6, lr}
 80093c4:	4c06      	ldr	r4, [pc, #24]	; (80093e0 <_kill_r+0x20>)
 80093c6:	0005      	movs	r5, r0
 80093c8:	0008      	movs	r0, r1
 80093ca:	0011      	movs	r1, r2
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	f000 f8ed 	bl	80095ac <_kill>
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	d103      	bne.n	80093de <_kill_r+0x1e>
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d000      	beq.n	80093de <_kill_r+0x1e>
 80093dc:	602b      	str	r3, [r5, #0]
 80093de:	bd70      	pop	{r4, r5, r6, pc}
 80093e0:	200031e8 	.word	0x200031e8

080093e4 <_getpid_r>:
 80093e4:	b510      	push	{r4, lr}
 80093e6:	f000 f8d1 	bl	800958c <_getpid>
 80093ea:	bd10      	pop	{r4, pc}

080093ec <__sread>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	000c      	movs	r4, r1
 80093f0:	250e      	movs	r5, #14
 80093f2:	5f49      	ldrsh	r1, [r1, r5]
 80093f4:	f000 f8a6 	bl	8009544 <_read_r>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	db03      	blt.n	8009404 <__sread+0x18>
 80093fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80093fe:	181b      	adds	r3, r3, r0
 8009400:	6563      	str	r3, [r4, #84]	; 0x54
 8009402:	bd70      	pop	{r4, r5, r6, pc}
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	4a02      	ldr	r2, [pc, #8]	; (8009410 <__sread+0x24>)
 8009408:	4013      	ands	r3, r2
 800940a:	81a3      	strh	r3, [r4, #12]
 800940c:	e7f9      	b.n	8009402 <__sread+0x16>
 800940e:	46c0      	nop			; (mov r8, r8)
 8009410:	ffffefff 	.word	0xffffefff

08009414 <__swrite>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	001f      	movs	r7, r3
 8009418:	898b      	ldrh	r3, [r1, #12]
 800941a:	0005      	movs	r5, r0
 800941c:	000c      	movs	r4, r1
 800941e:	0016      	movs	r6, r2
 8009420:	05db      	lsls	r3, r3, #23
 8009422:	d505      	bpl.n	8009430 <__swrite+0x1c>
 8009424:	230e      	movs	r3, #14
 8009426:	5ec9      	ldrsh	r1, [r1, r3]
 8009428:	2200      	movs	r2, #0
 800942a:	2302      	movs	r3, #2
 800942c:	f000 f874 	bl	8009518 <_lseek_r>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	4a05      	ldr	r2, [pc, #20]	; (8009448 <__swrite+0x34>)
 8009434:	0028      	movs	r0, r5
 8009436:	4013      	ands	r3, r2
 8009438:	81a3      	strh	r3, [r4, #12]
 800943a:	0032      	movs	r2, r6
 800943c:	230e      	movs	r3, #14
 800943e:	5ee1      	ldrsh	r1, [r4, r3]
 8009440:	003b      	movs	r3, r7
 8009442:	f000 f81f 	bl	8009484 <_write_r>
 8009446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009448:	ffffefff 	.word	0xffffefff

0800944c <__sseek>:
 800944c:	b570      	push	{r4, r5, r6, lr}
 800944e:	000c      	movs	r4, r1
 8009450:	250e      	movs	r5, #14
 8009452:	5f49      	ldrsh	r1, [r1, r5]
 8009454:	f000 f860 	bl	8009518 <_lseek_r>
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	1c42      	adds	r2, r0, #1
 800945c:	d103      	bne.n	8009466 <__sseek+0x1a>
 800945e:	4a05      	ldr	r2, [pc, #20]	; (8009474 <__sseek+0x28>)
 8009460:	4013      	ands	r3, r2
 8009462:	81a3      	strh	r3, [r4, #12]
 8009464:	bd70      	pop	{r4, r5, r6, pc}
 8009466:	2280      	movs	r2, #128	; 0x80
 8009468:	0152      	lsls	r2, r2, #5
 800946a:	4313      	orrs	r3, r2
 800946c:	81a3      	strh	r3, [r4, #12]
 800946e:	6560      	str	r0, [r4, #84]	; 0x54
 8009470:	e7f8      	b.n	8009464 <__sseek+0x18>
 8009472:	46c0      	nop			; (mov r8, r8)
 8009474:	ffffefff 	.word	0xffffefff

08009478 <__sclose>:
 8009478:	b510      	push	{r4, lr}
 800947a:	230e      	movs	r3, #14
 800947c:	5ec9      	ldrsh	r1, [r1, r3]
 800947e:	f000 f815 	bl	80094ac <_close_r>
 8009482:	bd10      	pop	{r4, pc}

08009484 <_write_r>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	0005      	movs	r5, r0
 8009488:	0008      	movs	r0, r1
 800948a:	0011      	movs	r1, r2
 800948c:	2200      	movs	r2, #0
 800948e:	4c06      	ldr	r4, [pc, #24]	; (80094a8 <_write_r+0x24>)
 8009490:	6022      	str	r2, [r4, #0]
 8009492:	001a      	movs	r2, r3
 8009494:	f000 f8b2 	bl	80095fc <_write>
 8009498:	1c43      	adds	r3, r0, #1
 800949a:	d103      	bne.n	80094a4 <_write_r+0x20>
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d000      	beq.n	80094a4 <_write_r+0x20>
 80094a2:	602b      	str	r3, [r5, #0]
 80094a4:	bd70      	pop	{r4, r5, r6, pc}
 80094a6:	46c0      	nop			; (mov r8, r8)
 80094a8:	200031e8 	.word	0x200031e8

080094ac <_close_r>:
 80094ac:	2300      	movs	r3, #0
 80094ae:	b570      	push	{r4, r5, r6, lr}
 80094b0:	4c06      	ldr	r4, [pc, #24]	; (80094cc <_close_r+0x20>)
 80094b2:	0005      	movs	r5, r0
 80094b4:	0008      	movs	r0, r1
 80094b6:	6023      	str	r3, [r4, #0]
 80094b8:	f000 f858 	bl	800956c <_close>
 80094bc:	1c43      	adds	r3, r0, #1
 80094be:	d103      	bne.n	80094c8 <_close_r+0x1c>
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d000      	beq.n	80094c8 <_close_r+0x1c>
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	bd70      	pop	{r4, r5, r6, pc}
 80094ca:	46c0      	nop			; (mov r8, r8)
 80094cc:	200031e8 	.word	0x200031e8

080094d0 <_fstat_r>:
 80094d0:	2300      	movs	r3, #0
 80094d2:	b570      	push	{r4, r5, r6, lr}
 80094d4:	4c06      	ldr	r4, [pc, #24]	; (80094f0 <_fstat_r+0x20>)
 80094d6:	0005      	movs	r5, r0
 80094d8:	0008      	movs	r0, r1
 80094da:	0011      	movs	r1, r2
 80094dc:	6023      	str	r3, [r4, #0]
 80094de:	f000 f84d 	bl	800957c <_fstat>
 80094e2:	1c43      	adds	r3, r0, #1
 80094e4:	d103      	bne.n	80094ee <_fstat_r+0x1e>
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d000      	beq.n	80094ee <_fstat_r+0x1e>
 80094ec:	602b      	str	r3, [r5, #0]
 80094ee:	bd70      	pop	{r4, r5, r6, pc}
 80094f0:	200031e8 	.word	0x200031e8

080094f4 <_isatty_r>:
 80094f4:	2300      	movs	r3, #0
 80094f6:	b570      	push	{r4, r5, r6, lr}
 80094f8:	4c06      	ldr	r4, [pc, #24]	; (8009514 <_isatty_r+0x20>)
 80094fa:	0005      	movs	r5, r0
 80094fc:	0008      	movs	r0, r1
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	f000 f84c 	bl	800959c <_isatty>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d103      	bne.n	8009510 <_isatty_r+0x1c>
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d000      	beq.n	8009510 <_isatty_r+0x1c>
 800950e:	602b      	str	r3, [r5, #0]
 8009510:	bd70      	pop	{r4, r5, r6, pc}
 8009512:	46c0      	nop			; (mov r8, r8)
 8009514:	200031e8 	.word	0x200031e8

08009518 <_lseek_r>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	0005      	movs	r5, r0
 800951c:	0008      	movs	r0, r1
 800951e:	0011      	movs	r1, r2
 8009520:	2200      	movs	r2, #0
 8009522:	4c06      	ldr	r4, [pc, #24]	; (800953c <_lseek_r+0x24>)
 8009524:	6022      	str	r2, [r4, #0]
 8009526:	001a      	movs	r2, r3
 8009528:	f000 f848 	bl	80095bc <_lseek>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	d103      	bne.n	8009538 <_lseek_r+0x20>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d000      	beq.n	8009538 <_lseek_r+0x20>
 8009536:	602b      	str	r3, [r5, #0]
 8009538:	bd70      	pop	{r4, r5, r6, pc}
 800953a:	46c0      	nop			; (mov r8, r8)
 800953c:	200031e8 	.word	0x200031e8

08009540 <__malloc_lock>:
 8009540:	4770      	bx	lr

08009542 <__malloc_unlock>:
 8009542:	4770      	bx	lr

08009544 <_read_r>:
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	0005      	movs	r5, r0
 8009548:	0008      	movs	r0, r1
 800954a:	0011      	movs	r1, r2
 800954c:	2200      	movs	r2, #0
 800954e:	4c06      	ldr	r4, [pc, #24]	; (8009568 <_read_r+0x24>)
 8009550:	6022      	str	r2, [r4, #0]
 8009552:	001a      	movs	r2, r3
 8009554:	f000 f83a 	bl	80095cc <_read>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d103      	bne.n	8009564 <_read_r+0x20>
 800955c:	6823      	ldr	r3, [r4, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d000      	beq.n	8009564 <_read_r+0x20>
 8009562:	602b      	str	r3, [r5, #0]
 8009564:	bd70      	pop	{r4, r5, r6, pc}
 8009566:	46c0      	nop			; (mov r8, r8)
 8009568:	200031e8 	.word	0x200031e8

0800956c <_close>:
 800956c:	2258      	movs	r2, #88	; 0x58
 800956e:	2001      	movs	r0, #1
 8009570:	4b01      	ldr	r3, [pc, #4]	; (8009578 <_close+0xc>)
 8009572:	4240      	negs	r0, r0
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	4770      	bx	lr
 8009578:	200031e8 	.word	0x200031e8

0800957c <_fstat>:
 800957c:	2258      	movs	r2, #88	; 0x58
 800957e:	2001      	movs	r0, #1
 8009580:	4b01      	ldr	r3, [pc, #4]	; (8009588 <_fstat+0xc>)
 8009582:	4240      	negs	r0, r0
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	4770      	bx	lr
 8009588:	200031e8 	.word	0x200031e8

0800958c <_getpid>:
 800958c:	2258      	movs	r2, #88	; 0x58
 800958e:	2001      	movs	r0, #1
 8009590:	4b01      	ldr	r3, [pc, #4]	; (8009598 <_getpid+0xc>)
 8009592:	4240      	negs	r0, r0
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	4770      	bx	lr
 8009598:	200031e8 	.word	0x200031e8

0800959c <_isatty>:
 800959c:	2258      	movs	r2, #88	; 0x58
 800959e:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <_isatty+0xc>)
 80095a0:	2000      	movs	r0, #0
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	4770      	bx	lr
 80095a6:	46c0      	nop			; (mov r8, r8)
 80095a8:	200031e8 	.word	0x200031e8

080095ac <_kill>:
 80095ac:	2258      	movs	r2, #88	; 0x58
 80095ae:	2001      	movs	r0, #1
 80095b0:	4b01      	ldr	r3, [pc, #4]	; (80095b8 <_kill+0xc>)
 80095b2:	4240      	negs	r0, r0
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	4770      	bx	lr
 80095b8:	200031e8 	.word	0x200031e8

080095bc <_lseek>:
 80095bc:	2258      	movs	r2, #88	; 0x58
 80095be:	2001      	movs	r0, #1
 80095c0:	4b01      	ldr	r3, [pc, #4]	; (80095c8 <_lseek+0xc>)
 80095c2:	4240      	negs	r0, r0
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	4770      	bx	lr
 80095c8:	200031e8 	.word	0x200031e8

080095cc <_read>:
 80095cc:	2258      	movs	r2, #88	; 0x58
 80095ce:	2001      	movs	r0, #1
 80095d0:	4b01      	ldr	r3, [pc, #4]	; (80095d8 <_read+0xc>)
 80095d2:	4240      	negs	r0, r0
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	4770      	bx	lr
 80095d8:	200031e8 	.word	0x200031e8

080095dc <_sbrk>:
 80095dc:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <_sbrk+0x18>)
 80095de:	0002      	movs	r2, r0
 80095e0:	6819      	ldr	r1, [r3, #0]
 80095e2:	2900      	cmp	r1, #0
 80095e4:	d101      	bne.n	80095ea <_sbrk+0xe>
 80095e6:	4904      	ldr	r1, [pc, #16]	; (80095f8 <_sbrk+0x1c>)
 80095e8:	6019      	str	r1, [r3, #0]
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	1882      	adds	r2, r0, r2
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	4770      	bx	lr
 80095f2:	46c0      	nop			; (mov r8, r8)
 80095f4:	20002200 	.word	0x20002200
 80095f8:	200031ec 	.word	0x200031ec

080095fc <_write>:
 80095fc:	2258      	movs	r2, #88	; 0x58
 80095fe:	2001      	movs	r0, #1
 8009600:	4b01      	ldr	r3, [pc, #4]	; (8009608 <_write+0xc>)
 8009602:	4240      	negs	r0, r0
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	4770      	bx	lr
 8009608:	200031e8 	.word	0x200031e8

0800960c <_exit>:
 800960c:	e7fe      	b.n	800960c <_exit>
 800960e:	0000      	movs	r0, r0
 8009610:	02890000 	.word	0x02890000
 8009614:	08000020 	.word	0x08000020
 8009618:	50890080 	.word	0x50890080
 800961c:	80890308 	.word	0x80890308

08009620 <appstr.8153>:
 8009620:	3d505041 65676150 74736554 00000000     APP=PageTest....

08009630 <rcc_flags.5115>:
 8009630:	00000007 00000001                       ........

08009638 <stop_flags.5114>:
 8009638:	06090009                                ....

0800963c <proc.6932>:
 800963c:	08006ccf 08006c25 08006ccf 08006ccf     .l..%l...l...l..
 800964c:	08006c95 08006ccf 08006ccf 08000d95     .l...l...l......
 800965c:	08000435                                5...

08009660 <base_std>:
 8009660:	0c0c0812 0e0e0a14 0a0a0a0a 0a0a0a0a     ................
 8009670:	06060606 06060606 06060606 06060606     ................

08009680 <ext_std>:
 8009680:	07070100                                ....

08009684 <m2tt_lut.7016>:
 8009684:	40302020                                  0@

08009688 <opcode_lut.7001>:
 8009688:	01000202 01000202 08060202 09070303     ................
 8009698:	01000404 01000404 08060404 09070505     ................

080096a8 <channel_map>:
 80096a8:	08009784 08009748 0800970c 08009784     ....H...........

080096b8 <bandwidth_lut>:
 80096b8:	80400080                                ..@.

080096bc <mitipersym_lut>:
 80096bc:	08009704 080096fc 080096f4 08009704     ................

080096cc <tiperhsc_lut>:
 80096cc:	080096ec 080096e4 080096dc 080096ec     ................

080096dc <tiperhsc_ISM433>:
 80096dc:	00220065 0004000b                       e.".....

080096e4 <tiperhsc_ISM866>:
 80096e4:	004400ca 00080015                       ..D.....

080096ec <tiperhsc_ISM915>:
 80096ec:	00110033 00020006                       3.......

080096f4 <mitipersym_ISM433>:
 80096f4:	0864218e 00870219                       .!d.....

080096fc <mitipersym_ISM866>:
 80096fc:	10c7431c 010d0432                       .C..2...

08009704 <mitipersym_ISM915>:
 8009704:	043210c7 0044010d                       ..2...D.

0800970c <channels_ISM433>:
 800970c:	ed466c86 594e6c86 c5556c86 315d6c86     .lF..lNY.lU..l]1
 800971c:	9d646c86 096c6c86 75736c86 e17a6c86     .ld..ll..lsu.lz.
 800972c:	4d826c86 b9896c86 25916c86 91986c86     .l.M.l...l.%.l..
 800973c:	fd9f6c86 69a76c86 d5ae6c86              .l...l.i.l..

08009748 <channels_ISM866>:
 8009748:	0048d886 0058d886 0068d886 0078d886     ..H...X...h...x.
 8009758:	0088d886 0098d886 00a8d886 00b8d886     ................
 8009768:	00c8d886 00d8d886 00e8d886 00f8d886     ................
 8009778:	0008d986 0018d986 0028d986              ..........(.

08009784 <channels_ISM915>:
 8009784:	77b7e186 6626e286 5595e286 4404e386     ...w..&f...U...D
 8009794:	3373e386 22e2e386 1151e486 00c0e486     ..s3..."..Q.....
 80097a4:	ef2ee586 de9de586 cd0ce686 bc7be686     ..............{.
 80097b4:	abeae686 9a59e786 89c8e786 5f474552     ......Y.....REG_
 80097c4:	00000000                                ....

080097c8 <defaults.5733>:
 80097c8:	00030002 00050004 fe098001 120b090a     ................
 80097d8:	000d230c 000f000e 741e9c1d 00204b1f     .#.........t.K .
 80097e8:	06220a21 0024ff23 2733c331 d7390a37     !.".#.$.1.3'7.9.
 80097f8:	a1401d3b 00000041                       ;.@.A...

08009800 <wdog_amount.5779>:
 8009800:	017d0a01 23a01996 23a01996 23a023a0     ..}....#...#.#.#
 8009810:	08001a30 0800195e 080019a4 080019b0     0...^...........
 8009820:	080019ca 080019d6 080019de 08001a82     ................
 8009830:	08001aa2 08001aa8 08001ac0 08001aae     ................
 8009840:	08001ab4 08001aba                       ........

08009848 <detection.6529>:
 8009848:	0ac30ac3 0ac50ac4 0ac30ac3 0ac50ac4     ................
 8009858:	04c202c2 04c304c3 04c202c2 04c404c3     ................

08009868 <flag_lut.6610>:
 8009868:	03020400                                ....

0800986c <mdmcfg1_lut.6662>:
 800986c:	0000040c                                ....

08009870 <mdmcfg2_sf>:
 8009870:	707090b0                                ..pp

08009874 <preamblelen.6660>:
 8009874:	0a0a0606 00000a0a                       ........

0800987c <deflength.6661>:
 800987c:	20101006 00002010                       ... . ..

08009884 <syncword.6659>:
 8009884:	14eb28d7 0000728d                       .(...r..

0800988c <bg1init>:
 800988c:	004b0400                                ..K.

08009890 <fginit>:
 8009890:	00ff0702                                ....

08009894 <pginit>:
 8009894:	00ff0704                                ....

08009898 <bg2init>:
 8009898:	00ff0700                                ....

0800989c <mdmcfg2>:
 800989c:	747494b4                                ..tt

080098a0 <mode_lut.6633>:
 80098a0:	00020002 04040404                       ........

080098a8 <bgpkt_ti_lut.6520>:
 80098a8:	02071962 00000000 03091c6f 00000000     b.......o.......

080098b8 <tgdti_lut.6524>:
 80098b8:	06113578 00000000 091b54c0 00000000     x5.......T......

080098c8 <converter.6534>:
 80098c8:	08001b73 08001b5d 08001b47 08001b31     s...]...G...1...

080098d8 <frparams.6541>:
 80098d8:	00000001 00010002 06020000 00000201     ................
 80098e8:	02010602 06020000                       ........

080098f0 <initial_bytes.6559>:
 80098f0:	070f0507 1111050f                       ........

080098f8 <bits_per_lorablock.6558>:
 80098f8:	141c242c 08003030 08002ca2 08002c70     ,$..00...,..p,..
 8009908:	08002c66 08002af4 08002af4 08002cde     f,...*...*...,..
 8009918:	08002c50 08002c4c 08002c48 08002c44     P,..L,..H,..D,..
 8009928:	08002c40 08002b6a 08002c54 08002bfa     @,..j+..T,...+..
 8009938:	08002bf2 08002bea 08002be2 08002bda     .+...+...+...+..
 8009948:	08002bd2 08002bca 08004074 08003df4     .+...+..t@...=..
 8009958:	08003dc2 08003db8 08003c24 08003c24     .=...=..$<..$<..
 8009968:	08003e30 08003da2 08003d9e 08003d9a     0>...=...=...=..
 8009978:	08003d96 08003d92 08003c9a 08003da6     .=...=...<...=..
 8009988:	08003d4c 08003d44 08003d3c 08003d34     L=..D=..<=..4=..
 8009998:	08003d2c 08003d24 08003d1c              ,=..$=...=..

080099a4 <infobits_select.6108>:
 80099a4:	0b0a0908 06060d0c                       ........

080099ac <__func__.6120>:
 80099ac:	5f637368 74696e69 00000000              hsc_init....

080099b8 <fbit_select.6119>:
 80099b8:	0800a278 0800a1f8 0800a178 0800a0f8     x.......x.......
 80099c8:	0800a078 08009ff8 0800a2f8 0800a2f8     x...............

080099d8 <wordmask.6165>:
 80099d8:	ffffff00 ffff0000 ff000000 00000000     ................

080099e8 <wordload.6166>:
 80099e8:	00000000 00000100 00020100 03020100     ................

080099f8 <j1.6086>:
 80099f8:	02000000 00000102 00000100 00000000     ................

08009a08 <j0.6087>:
 8009a08:	03000000 03030303 02020202 00000101     ................

08009a18 <maxlambda_lut>:
 8009a18:	01010000 02020202 03030303 03030303     ................
 8009a28:	04040404 04040404 04040404 04040404     ................
 8009a38:	05050505 05050505 05050505 05050505     ................
 8009a48:	05050505 05050505 05050505 05050505     ................
 8009a58:	06060606 06060606 06060606 06060606     ................
 8009a68:	06060606 06060606 06060606 06060606     ................
 8009a78:	06060606 06060606 06060606 06060606     ................
 8009a88:	06060606 06060606 06060606 06060606     ................

08009a98 <eminlambda_lut>:
 8009a98:	04010201 08010201 04010201 10010201     ................
 8009aa8:	04010201 08010201 04010201 20010201     ............... 
 8009ab8:	04010201 08010201 04010201 10010201     ................
 8009ac8:	04010201 08010201 04010201 40010201     ...............@
 8009ad8:	04010201 08010201 04010201 10010201     ................
 8009ae8:	04010201 08010201 04010201 20010201     ............... 
 8009af8:	04010201 08010201 04010201 10010201     ................
 8009b08:	04010201 08010201 04010201 01010201     ................

08009b18 <minlambda_lut>:
 8009b18:	02000100 03000100 02000100 04000100     ................
 8009b28:	02000100 03000100 02000100 05000100     ................
 8009b38:	02000100 03000100 02000100 04000100     ................
 8009b48:	02000100 03000100 02000100 06000100     ................
 8009b58:	02000100 03000100 02000100 04000100     ................
 8009b68:	02000100 03000100 02000100 05000100     ................
 8009b78:	02000100 03000100 02000100 04000100     ................
 8009b88:	02000100 03000100 02000100 07000100     ................

08009b98 <lambda_lut>:
 8009b98:	00010006 00010002 00010003 00010002     ................
 8009ba8:	00010004 00010002 00010003 00010002     ................
 8009bb8:	00010005 00010002 00010003 00010002     ................
 8009bc8:	00010004 00010002 00010003 00010002     ................
 8009bd8:	00010006 00010002 00010003 00010002     ................
 8009be8:	00010004 00010002 00010003 00010002     ................
 8009bf8:	00010005 00010002 00010003 00010002     ................
 8009c08:	00010004 00010002 00010003 00010002     ................

08009c18 <rseqbyte>:
 8009c18:	010f000f 040f020f 000d000e 030f000b     ................
 8009c28:	050f0007 010e060f 010d020e 020d040e     ................
 8009c38:	040d010b 000c020b 070f0107 0207040b     ................
 8009c48:	000a030e 0407050e 0009030d 0006060e     ................
 8009c58:	0005050d 060d030b 050b010c 020c0003     ................
 8009c68:	0307060b 040c010a 020a0507 070e0109     ................
 8009c78:	040a0607 02090106 070d0206 01050409     ................
 8009c88:	030c0406 00080205 070b0103 0405050c     ................
 8009c98:	030a0203 060c0004 07070403 0309050a     ................
 8009ca8:	03060002 06090001 060a0506 01080305     ................
 8009cb8:	06060509 02080505 06050303 070c0408     ................
 8009cc8:	01020104 02040603 0503070a 02020404     ................
 8009cd8:	01010709 02010706 03080402 04010705     ................
 8009ce8:	00000508 07030304 03020504 06040608     ................
 8009cf8:	05020301 06020501 06010100 02000708     ................
 8009d08:	07040400 07010702 05000300 07000600     ................

08009d18 <rseq>:
 8009d18:	7b7d7e7f 7c5f6f77 76797a3f 6d736e75     .~}{wo_|?zyvunsm
 8009d28:	675d6b5e 3d5b783e 3b725774 37714f6c     ^k]g>x[=tWr;lOq7
 8009d38:	695c2f6a 651f5a66 63563c59 704e553a     j/\ifZ.eY<Vc:UNp
 8009d48:	4d365339 2e4b6835 472d6433 2b62581e     9S6M5hK.3d-G.Xb+
 8009d58:	6127541d 4c52381b 490f3417 462c5132     .T'a.8RL.4.I2Q,F
 8009d68:	452a314a 6043291c 25191626 15231a50     J1*E.)C`&..%P.#.
 8009d78:	0d300e48 0b284413 18240742 21411422     H.0..D(.B.$.".A!
 8009d88:	110a120c 05400906 08102003 00010204     ......@.. ......

08009d98 <rbyte>:
 8009d98:	07080700 070c0704 070a0702 070e0706     ................
 8009da8:	07090701 070d0705 070b0703 070f0707     ................
 8009db8:	03080300 030c0304 030a0302 030e0306     ................
 8009dc8:	03090301 030d0305 030b0303 030f0307     ................
 8009dd8:	05080500 050c0504 050a0502 050e0506     ................
 8009de8:	05090501 050d0505 050b0503 050f0507     ................
 8009df8:	01080100 010c0104 010a0102 010e0106     ................
 8009e08:	01090101 010d0105 010b0103 010f0107     ................
 8009e18:	06080600 060c0604 060a0602 060e0606     ................
 8009e28:	06090601 060d0605 060b0603 060f0607     ................
 8009e38:	02080200 020c0204 020a0202 020e0206     ................
 8009e48:	02090201 020d0205 020b0203 020f0207     ................
 8009e58:	04080400 040c0404 040a0402 040e0406     ................
 8009e68:	04090401 040d0405 040b0403 040f0407     ................
 8009e78:	00080000 000c0004 000a0002 000e0006     ................
 8009e88:	00090001 000d0005 000b0003 000f0007     ................

08009e98 <crc7tab>:
 8009e98:	36241200 7e6c5a48 a6b48290 eefccad8     ..$6HZl~........
 8009ea8:	04162032 4c5e687a 9486b0a2 dccef8ea     2 ..zh^L........
 8009eb8:	52407664 1a083e2c c2d0e6f4 8a98aebc     dv@R,>..........
 8009ec8:	60724456 283a0c1e f0e2d4c6 b8aa9c8e     VDr`..:(........
 8009ed8:	feecdac8 b6a49280 6e7c4a58 26340210     ........XJ|n..4&
 8009ee8:	ccdee8fa 8496a0b2 5c4e786a 14063022     ........jxN\"0..
 8009ef8:	9a88beac d2c0f6e4 0a182e3c 42506674     ........<...tfPB
 8009f08:	a8ba8c9e e0f2c4d6 382a1c0e 70625446     ..........*8FTbp
 8009f18:	b4a69082 fceed8ca 24360012 6c7e485a     ..........6$ZH~l
 8009f28:	8694a2b0 cedceaf8 16043220 5e4c7a68     ........ 2..hzL^
 8009f38:	d0c2f4e6 988abcae 40526476 081a2c3e     ........vdR@>,..
 8009f48:	e2f0c6d4 aab88e9c 72605644 3a281e0c     ........DV`r..(:
 8009f58:	7c6e584a 34261002 ecfec8da a4b68092     JXn|..&4........
 8009f68:	4e5c6a78 06142230 deccfae8 9684b2a0     xj\N0"..........
 8009f78:	180a3c2e 50427466 889aacbe c0d2e4f6     .<..ftBP........
 8009f88:	2a380e1c 62704654 baa89e8c f2e0d6c4     ..8*TFpb........

08009f98 <wordmask.6263>:
 8009f98:	ffffff00 ffff0000 ff000000 00000000     ................

08009fa8 <wordload.6264>:
 8009fa8:	00000000 00000100 00020100 03020100     ................

08009fb8 <bitify.6372>:
 8009fb8:	00000000 00000001 00000100 00000101     ................
 8009fc8:	00010000 00010001 00010100 00010101     ................
 8009fd8:	01000000 01000001 01000100 01000101     ................
 8009fe8:	01010000 01010001 01010100 01010101     ................

08009ff8 <fbit104>:
 8009ff8:	01010101 00010101 00010101 00000001     ................
 800a008:	00010101 00000000 00000000 00000000     ................
 800a018:	00000101 00000000 00000000 00000000     ................
	...
 800a038:	00000001 00000000 00000000 00000000     ................
	...

0800a078 <fbit96>:
 800a078:	01010101 01010101 01010101 00000001     ................
 800a088:	00010101 00000001 00000001 00000000     ................
 800a098:	00010101 00000001 00000000 00000000     ................
	...
 800a0b8:	00010101 00000000 00000000 00000000     ................
	...

0800a0f8 <fbit88>:
 800a0f8:	01010101 01010101 01010101 00010101     ................
 800a108:	01010101 00000101 00000001 00000000     ................
 800a118:	00010101 00000001 00000001 00000000     ................
 800a128:	00000001 00000000 00000000 00000000     ................
 800a138:	00010101 00000001 00000001 00000000     ................
	...

0800a178 <fbit80>:
 800a178:	01010101 01010101 01010101 00010101     ................
 800a188:	01010101 00010101 00010101 00000000     ................
 800a198:	01010101 00010101 00000001 00000000     ................
 800a1a8:	00000001 00000000 00000000 00000000     ................
 800a1b8:	00010101 00000001 00000001 00000000     ................
 800a1c8:	00000001 00000000 00000000 00000000     ................
 800a1d8:	00000001 00000000 00000000 00000000     ................
	...

0800a1f8 <fbit72>:
 800a1f8:	01010101 01010101 01010101 00010101     ................
 800a208:	01010101 00010101 00010101 00000001     ................
 800a218:	01010101 00010101 00010101 00000000     ................
 800a228:	00000101 00000000 00000000 00000000     ................
 800a238:	01010101 00010101 00010001 00000000     ................
 800a248:	00000001 00000000 00000000 00000000     ................
 800a258:	00000001 00000000 00000000 00000000     ................
	...

0800a278 <fbit64>:
 800a278:	01010101 01010101 01010101 01010101     ................
 800a288:	01010101 01010101 00010101 00000001     ................
 800a298:	01010101 00010101 00010101 00000001     ................
 800a2a8:	00010101 00000001 00000000 00000000     ................
 800a2b8:	01010101 00010101 00010101 00000001     ................
 800a2c8:	00000101 00000000 00000000 00000000     ................
 800a2d8:	00000001 00000000 00000000 00000000     ................
	...

0800a2f8 <fbit48>:
 800a2f8:	01010101 01010101 01010101 01010101     ................
 800a308:	01010101 01010101 01010101 00010101     ................
 800a318:	01010101 01010101 01010101 00010101     ................
 800a328:	01010101 00000001 00000001 00000000     ................
 800a338:	01010101 01010101 00010101 00000001     ................
 800a348:	00010101 00000001 00000001 00000000     ................
 800a358:	00010101 00000001 00000000 00000000     ................
	...

0800a378 <llrvrssi>:
 800a378:	01430120 0198016b 020001c8 0286023e      .C.k.......>...
 800a388:	032c02d3 03ff038f 0479043a 050604be     ..,.....:.y.....
 800a398:	065305a5 0a0707f7 0fe50c9f 192f1400     ..S.........../.
 800a3a8:	27e81fb6 3f3e323a 643b4f9e 77237723     ...':2>?.O;d#w#w

0800a3b8 <llroffset>:
	...

0800a3c8 <scan_events.6789>:
 800a3c8:	05000000 00010004 080056b4 080056c0     .........V...V..
 800a3d8:	0800571a 0800571e 08005726 0800572a     .W...W..&W..*W..
 800a3e8:	08005732 08005736                       2W..6W..

0800a3f0 <_idlen>:
 800a3f0:	00020008 08006286 080062a4 0800628a     .....b...b...b..
 800a400:	0800628a 08006292 08006292              .b...b...b..

0800a40c <opgroup_proc>:
 800a40c:	08005f25 08005f25 08005f45 08006609     %_..%_..E_...f..
 800a41c:	08006609 08005e61 08005e63 08006071     .f..a^..c^..q`..

0800a42c <fixed_mask.6509>:
 800a42c:	ffffffff ffffffff ffffffff ffffffff     ................

0800a43c <cmd_fn.6082>:
 800a43c:	08006b49 08006645 08006b49 08006b49     Ik..Ef..Ik..Ik..
 800a44c:	0800686d 08006645 0800686d 0800686d     mh..Ef..mh..mh..
 800a45c:	080067af 08006645 08006749 080066b3     .g..Ef..Ig...f..
 800a46c:	0800686d 08006645 08006669 08006645     mh..Ef..if..Ef..

0800a47c <crc16_table>:
 800a47c:	80050000 000a800f 001e801b 80110014     ................
 800a48c:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
 800a49c:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
 800a4ac:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
 800a4bc:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
 800a4cc:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
 800a4dc:	80a500a0 00aa80af 00be80bb 80b100b4     ................
 800a4ec:	00968093 8099009c 808d0088 00828087     ................
 800a4fc:	01868183 8189018c 819d0198 01928197     ................
 800a50c:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
 800a51c:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
 800a52c:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
 800a53c:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
 800a54c:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
 800a55c:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
 800a56c:	81150110 011a811f 010e810b 81010104     ................
 800a57c:	03068303 8309030c 831d0318 03128317     ................
 800a58c:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
 800a59c:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
 800a5ac:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
 800a5bc:	83c503c0 03ca83cf 03de83db 83d103d4     ................
 800a5cc:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
 800a5dc:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
 800a5ec:	83950390 039a839f 038e838b 83810384     ................
 800a5fc:	82850280 028a828f 029e829b 82910294     ................
 800a60c:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
 800a61c:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
 800a62c:	82d502d0 02da82df 02ce82cb 82c102c4     ................
 800a63c:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
 800a64c:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
 800a65c:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
 800a66c:	02168213 8219021c 820d0208 02028207     ................

0800a67c <systask_call>:
 800a67c:	080053bd 0800540d 08004ec1 08004e31     .S...T...N..1N..
 800a68c:	08000641                                A...

0800a690 <len_div.5332>:
 800a690:	00000002 00000001                       ........

0800a698 <ccr.5331>:
 800a698:	40d14ad1 40d145d1                       .J.@.E.@

0800a6a0 <len_div.5360>:
 800a6a0:	00000002 00000001                       ........

0800a6a8 <ccr.5359>:
 800a6a8:	40d14ad1 40d145d1 00000068 6573552f     .J.@.E.@h.../Use
 800a6b8:	6a2f7372 6f626e70 532f6b6f 2f636e79     rs/jpnbook/Sync/
 800a6c8:	6f706552 6f746973 4f2f7972 546e6570     Repository/OpenT
 800a6d8:	485f6761 682f4f44 6c697562 2f726564     ag_HDO/hbuilder/
 800a6e8:	696c6268 73682f62 65646f63 0000632e     hblib/hscode.c..
 800a6f8:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
 800a708:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
 800a718:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
 800a728:	20656e69 73256425 000a7325              ine %d%s%s..

0800a734 <_global_impure_ptr>:
 800a734:	2000014c 2b302d23 6c680020 6665004c     L.. #-0+ .hlL.ef
 800a744:	47464567 32313000 36353433 41393837     gEFG.0123456789A
 800a754:	45444342 31300046 35343332 39383736     BCDEF.0123456789
 800a764:	64636261 00006665                       abcdef..

0800a76c <__sf_fake_stderr>:
	...

0800a78c <__sf_fake_stdin>:
	...

0800a7ac <__sf_fake_stdout>:
	...

0800a7cc <_init>:
 800a7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ce:	46c0      	nop			; (mov r8, r8)
 800a7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7d2:	bc08      	pop	{r3}
 800a7d4:	469e      	mov	lr, r3
 800a7d6:	4770      	bx	lr

0800a7d8 <_fini>:
 800a7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7da:	46c0      	nop			; (mov r8, r8)
 800a7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7de:	bc08      	pop	{r3}
 800a7e0:	469e      	mov	lr, r3
 800a7e2:	4770      	bx	lr

0800a7e4 <__init_array_start>:
 800a7e4:	080000e9 	.word	0x080000e9

0800a7e8 <__fini_array_start>:
 800a7e8:	080000c1 	.word	0x080000c1
