/* Copyright 2014 JP Norair
  *
  * Licensed under the OpenTag License, Version 1.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.indigresso.com/wiki/doku.php?id=opentag:license_1_0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  */
/**
  * @file       /otradio/spirit1/SPIRIT1_interface.c.rfu
  * @author     JP Norair
  * @version    R100
  * @date       24 Jan 2014
  * @brief      SPIRIT1 transceiver high-level interface routines
  * @ingroup    SPIRIT1
  *
  * @todo separate these high level routines from SPIRIT1_STM32L1xx.c, where
  *       they are currently implemented.  Doing this separation makes it 
  *       easier to port to other platforms.
  * 
  ******************************************************************************
  */

#include "OT_platform.h"
#if (OT_FEATURE(M2)) //defined(PLATFORM_STM32L1xx)

#include "OT_utils.h"
#include "OT_types.h"
#include "OT_config.h"


#include "SPIRIT1_interface.h"

//For test
#include "OTAPI.h"


#ifdef RADIO_DB_ATTENUATION
#   define _ATTEN_DB    RADIO_DB_ATTENUATION
#else
#   define _ATTEN_DB    6
#endif





/** Module Data for radio driver interface <BR>
  * ========================================================================
  */
spirit1_struct spirit1;




/** Embedded Interrupts <BR>
  * ========================================================================<BR>
  * None: The Radio core only uses the GPIO interrupts, which must be handled
  * universally in platform_isr_STM32L1xx.c due to the multiplexed nature of 
  * the EXTI system.  However, the DMA RX complete EVENT is used by the SPI 
  * engine.  EVENTS are basically a way to sleep where you would otherwise
  * need to use busywait loops.  ARM Cortex-M takes all 3 points.
  */




/** Basic Control Functions <BR>
  * ========================================================================
  */
void spirit1_coredump() {
///debugging function to dump-out register values of RF core (not all are used)
    ot_u8 i = 0;
    ot_u8 regval;
    ot_u8 label[]   = { 'R', 'E', 'G', '_', 0, 0 };

    do {
        regval = spirit1_read(i);
        otutils_bin2hex(&label[4], &i, 1);
        otapi_log_msg(MSG_raw, 6, 1, label, &regval);
        //mpipedrv_wait();
        platform_swdelay_ms(5);
    }
    while (++i != 0);
}



void spirit1_load_defaults() {
/// The data ordering is: WRITE LENGTH, WRITE HEADER (0), START ADDR, VALUES
/// Ignore registers that are set later, are unused, or use the hardware default values.
    static const ot_u8 spirit1_defaults[] = {
        15, 0,  0x01,   DRF_ANA_FUNC_CONF0, 
                        RFGPO(READY), RFGPO(GND), RFGPO(GND), RFGPO(GND),
                        DRF_MCU_CK_CONF,
                        DRF_IF_OFFSET_ANA, DRF_SYNT3, DRF_SYNT2, DRF_SYNT1, 
                        DRF_SYNT0, DRF_CHSPACE, DRF_IF_OFFSET_DIG,
        3,  0,  0xB4,   DRF_XO_RCO_TEST,
        4,  0,  0x9E,   DRF_SYNTH_CONFIG1, DRF_SYNTH_CONFIG0,
        3,  0,  0x18,   DRF_PAPOWER0,
        6,  0,  0x1C,   DRF_FDEV0, DRF_CHFLT_LS, DRF_AFC2, DRF_AFC1, 
        5,  0,  0x25,   DRF_AGCCTRL1, DRF_AGCCTRL0, DRF_ANT_SELECT_CONF, 
        3,  0,  0x3A,   DRF_QI,
        3,  0,  0x41,   DRF_FIFO_CONFIG0,
        4,  0,  0x4F,   DRF_PCKT_FLT_OPTIONS, DRF_PROTOCOL2,
      //3,  0,  0x93,   RFINT_TX_FIFO_ERROR,
        5,  0,  0xA3,   DRF_DEM_ORDER, DRF_PM_CONFIG2, DRF_PM_CONFIG1,
        0   //Terminating 0
    };
    
    ot_u8* cursor;
    cursor = (ot_u8*)spirit1_defaults;

    while (*cursor != 0) {
        ot_u8 cmd_len   = *cursor++;
        ot_u8* cmd      = cursor;
        cursor         += cmd_len;
        spirit1_spibus_io(cmd_len, 0, cmd);
    }

    // Early debugging test to make sure data was written (look at first write block)
    //{
    //    volatile ot_u8 test;
    //    ot_u8 i;
    //    for (i=0x01; i<=0x0D; ++i) {
    //        test = spirit1_read(i);
    //    }
    //}
}




ot_u16 spirit1_getstatus() {
/// Status is sent during every SPI access, so refresh it manually by doing a
/// dummy read, and then returning the global status data that is obtained 
/// during the read process.
    spirit1_read(0);
    return spirit1.status;
}


ot_u16 spirit1_mcstate() { 
    static const ot_u8 cmd[2] = { 1, RFREG(MC_STATE1) };
    spirit1_spibus_io(2, 2, (ot_u8*)cmd);
    return (ot_u16)*((ot_u16*)spirit1.busrx);
}


ot_u8   spirit1_ldctime()       { return spirit1_read( RFREG(TIMERS2) ); }
ot_u8   spirit1_ldcrtime()      { return spirit1_read( RFREG(TIMERS0) ); }
ot_u8   spirit1_rxtime()        { return spirit1_read( RFREG(TIMERS4) ); }
ot_u8   spirit1_rxbytes()       { return spirit1_read( RFREG(LINEAR_FIFO_STATUS0) ); }
ot_u8   spirit1_txbytes()       { return spirit1_read( RFREG(LINEAR_FIFO_STATUS1) ); }
ot_u8   spirit1_rssi()          { return spirit1_read( RFREG(RSSI_LEVEL) ); }








void spirit1_strobe(ot_u8 strobe) {
    ot_u8 cmd[2];
    cmd[0]  = 0x80;
    cmd[1]  = strobe;
    spirit1_spibus_io(2, 0, cmd);
}

ot_u8 spirit1_read(ot_u8 addr) {
    ot_u8 cmd[2];
    cmd[0]  = 1;
    cmd[1]  = addr;
    spirit1_spibus_io(2, 1, cmd);
    return spirit1.busrx[0];
}

void spirit1_burstread(ot_u8 start_addr, ot_u8 length, ot_u8* data) {
    ot_u8 cmd[2];
    cmd[0]  = 1;
    cmd[1]  = start_addr;
    spirit1_spibus_io(2, length, (ot_u8*)cmd);
    memcpy(data, spirit1.busrx, length);
}

void spirit1_write(ot_u8 addr, ot_u8 data) {
    ot_u8 cmd[3];
    cmd[0]  = 0;
    cmd[1]  = addr;
    cmd[2]  = data;
    spirit1_spibus_io(3, 0, cmd);
}

void spirit1_burstwrite(ot_u8 start_addr, ot_u8 length, ot_u8* cmd_data) {
    cmd_data[0] = 0;
    cmd_data[1] = start_addr;
    spirit1_spibus_io((2+length), 0, cmd_data);
}













/** Advanced Configuration <BR>
  * ========================================================================<BR>
  */

ot_int spirit1_calc_rssi(ot_u8 encoded_value) {
/// From SPIRIT1 datasheet: "The measured power is reported in steps of half-dB
/// from 0 to 255 and is offset in such a way that -120 dBm corresponds to 
/// about 20."  In other words, it is linear: { 0 = -130dBm, 255 = -2.5dBm }.
/// This function turns the coded value into a normal, signed int.

/// @note In future implementations there may be a selection to allow OpenTag
///       to use half-dBm precision in all areas of the system, but for now it
///       uses whole-dBm (1dBm) precision.  Most antennas have >1dBm variance,
///       (often >2dBm) so unless you have an advanced subsampling algorithm 
///       for range-finding -- probably requiring a kalman filter in the
///       location engine -- using half-dBm will not yield an improvement.

    ot_int rssi_val;
    rssi_val    = (ot_int)encoded_value;    // Convert to signed int
    //rssi_val  >>= 1;                        // Make whole-dBm (divide by 2)
    //rssi_val   -= 130;                      // Apply 130 dBm offset
    rssi_val   -= 260;                      // Apply 130 dBm offset
    return rssi_val;
}


ot_u8 spirit1_calc_rssithr(ot_u8 input) {
/// SPIRIT1 treats RSSI thresholding through the normal RSSI engine.  The specs
/// are the same as those used in spirit1_calc_rssi() above, but the process is
/// using different input and output.
/// 
/// Input is a whole-dBm value encoded linearly as: {0=-140dBm, 127=-13dBm}.
/// Output is the value that should go into SPIRIT1 RSSI_TH field.
    ot_int rssi_thr;
    
    // SPIRIT1 uses -130 as baseline, DASH7 -140
    // Clip baseline at 0
    rssi_thr = (ot_int)input - 10;
    if (rssi_thr < 0)                               
        rssi_thr = 0;  
        
    // Multiply by 2 to yield half-dBm.
    rssi_thr  <<= 1;                                
    return rssi_thr;
}

    

void spirit1_set_txpwr(ot_u8* pwr_code) {
/// Sets the tx output power.
/// "pwr_code" is a value, 0-127, that is: eirp_code/2 - 40 = TX dBm
/// i.e. eirp_code=0 => -40 dBm, eirp_code=80 => 0 dBm, etc
    static const ot_u8 pa_lut[84] = {
        0x57, 0x57, 0x56, 0x55, 0x54, 0x53, 0x53, 0x52, 0x52, 0x50,     //-30 to -25.5
        0x4F, 0x4E, 0x4D, 0x4C, 0x4B, 0x4B, 0x4A, 0x49, 0x48, 0x47,     //-25 to -20.5
        0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3F, 0x3E, 0x3C,     //-20 to -15.5
        0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x34, 0x33, 0x32, 0x31,     //-15 to -10.5
        0x30, 0x2F, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x27, 0x26, 0x25,     //-10 to -5.5
        0x24, 0x23, 0x22, 0x20, 0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x19,     //-5 to -0.5
        0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0F,     // 0 to 4.5
        0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05,     // 5 to 9.5
        0x04, 0x03, 0x02, 0x01                                          // 10 to 11.5
    };
    
    ot_u8   pa_table[10];
    ot_u8*  cursor;
    ot_int  step;
    ot_int  eirp_val;
    
    ///@todo autoscaling algorithm, and refresh value in *pwr_code
    // Autoscaling: Try to make RSSI at receiver be -90 < RX_RSSI < -80 
    // The simple algorithm uses the last_rssi and last_linkloss values
    //if (*pwr_code & 0x80) {
    //}
    //else {
    //}
    
    // Not autoscaling: extract TX power directly from pwr_code
    eirp_val = *pwr_code;
    
    // Offset SPIRIT1 PA CFG to match DASH7 PA CFG, plus antenna losses 
    // SPIRIT1: 0 --> -30 dBm, 83 --> 11.5 dBm, half-dBm steps
    // DASH7: 0 --> -40 dBm, 127 --> 23.5 dBm, half-dBm steps
    eirp_val += (-10*2) + (RF_HDB_ATTEN);
    
    // Adjust base power code in case it is out-of-range:
    // SPIRIT1 PA starts at -30, DASH7 pwr_code starts at -40.
    if (eirp_val < 0)       eirp_val = 0;
    else if (eirp_val > 83) eirp_val = 83;

    // Build PA RAMP using 8 steps of variable size.
    pa_table[0] = 0;
    pa_table[1] = RFREG(PAPOWER8);
    cursor      = &pa_table[2];
    step        = eirp_val >> 3;
    do {
        *cursor++   = pa_lut[eirp_val];
        eirp_val   -= step;
    } while (cursor != &pa_table[9]);

    
    // Write new PA Table to device
    spirit1_spibus_io(10, 0, pa_table);
}



#endif //#if from top of file

